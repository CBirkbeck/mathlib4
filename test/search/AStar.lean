import Mathlib.Data.MLList.AStar
import Mathlib.Data.Nat.Sqrt

open Lean MLList AStar

def wall : Int × Int → Bool :=
/-
`X` denotes the wall. A* search finds the path starting at `Α` and ending at `Ω`

.......................
.......................
....XX.................
....XX.................
....XX.................
....XX.................
....XX.................
....XX.................
....XX.................
....XX.................
....XX.................
....XX....Α............
....XX....|---.........
....XX.......|---......
....XX..........|......
....XX..........|----..
....XXXXXXXXXXXXXXXX|..
....XXXXXXXXXXXXXXXX|..
.....---------------|..
..---|.................
.-|....................
Ω|.....................
-/
fun ⟨x, y⟩ => x ≤ 3 || y ≤ 3 || x ≥ 20 || y ≥ 20 || (x ≥ 6 && y ≥ 6)

def LWallGraph : GraphData MetaM Nat (Int × Int) ((Int × Int) × (Int × Int)) :=
{ s := (·.1),
  t := (·.2),
  nbhd := fun ⟨x, y⟩ => ListM.ofList
    ([((x,y),(x+1,y)), ((x,y),(x-1,y)), ((x,y),(x,y+1)), ((x,y),(x,y-1))].filter (wall ·.2)),
  weight := fun _ => 1
  heuristic := fun ⟨x, y⟩ => 5 * Nat.sqrt (x.natAbs ^ 2 + y.natAbs ^ 2) }

/--
info: [((1, 0), 0, 0),
 ((1, 1), 1, 0),
 ((2, 1), 1, 1),
 ((2, 2), 2, 1),
 ((3, 2), 2, 2),
 ((4, 2), 3, 2),
 ((5, 2), 4, 2),
 ((5, 3), 5, 2),
 ((6, 3), 5, 3),
 ((7, 3), 6, 3),
 ((8, 3), 7, 3),
 ((9, 3), 8, 3),
 ((10, 3), 9, 3),
 ((11, 3), 10, 3),
 ((12, 3), 11, 3),
 ((13, 3), 12, 3),
 ((14, 3), 13, 3),
 ((15, 3), 14, 3),
 ((16, 3), 15, 3),
 ((17, 3), 16, 3),
 ((18, 3), 17, 3),
 ((19, 3), 18, 3),
 ((20, 3), 19, 3),
 ((20, 4), 20, 3),
 ((20, 5), 20, 4),
 ((20, 6), 20, 5),
 ((19, 6), 20, 6),
 ((18, 6), 19, 6),
 ((17, 6), 18, 6),
 ((16, 6), 17, 6),
 ((16, 7), 16, 6),
 ((16, 8), 16, 7),
 ((15, 8), 16, 8),
 ((14, 8), 15, 8),
 ((13, 8), 14, 8),
 ((13, 9), 13, 8),
 ((12, 9), 13, 9),
 ((11, 9), 12, 9),
 ((10, 9), 11, 9),
 ((10, 10), 10, 9)]
 -/
#guard_msgs in
#eval aStarSearch LWallGraph false (10, 10) (· == (0,0))
