import Mathlib.CategoryTheory.Monoidal.Discrete

namespace CategoryTheory

namespace Discrete

variable {Œ± Œ≤ Œ≥ : Type*} [AddMonoid Œ±] [AddMonoid Œ≤] [AddMonoid Œ≥]
  (i : Œ± ‚Üí+ Œ≤) (p : Œ≤ ‚Üí+ Œ≥) {C : Type*} [Category C] [MonoidalCategory C]

structure QuotientData where
  œÉ : Œ≥ ‚Üí Œ≤
  hœÉ (c : Œ≥) : p (œÉ c) = c
  --add_inj (a : Œ±) (b : Œ≤) (h : b + i a = b) : a = 0
  exact (b‚ÇÅ b‚ÇÇ : Œ≤) : p b‚ÇÅ = p b‚ÇÇ ‚Üî ‚àÉ (b‚ÇÄ : Œ≤) (a‚ÇÅ a‚ÇÇ : Œ±), b‚ÇÄ + i a‚ÇÅ = b‚ÇÅ ‚àß b‚ÇÄ + i a‚ÇÇ = b‚ÇÇ

variable {i p}

namespace QuotientData

attribute [simp] hœÉ

end QuotientData

attribute [local simp] eqToHom_map

open MonoidalCategory

structure InducedFunctorData (F : MonoidalFunctor (Discrete Œ≤) C) (q : QuotientData i p) where
  iso (a : Œ±) : F.obj ‚ü®i a‚ü© ‚âÖ ùüô_ C
  iso_zero : iso 0 = F.mapIso (eqToIso (by aesop)) ‚â™‚â´ F.ŒµIso.symm
  iso_add (a b : Œ±) : iso (a + b) = F.mapIso (eqToIso (by aesop)) ‚â™‚â´
    (F.ŒºIso ‚ü®i a‚ü© ‚ü®i b‚ü©).symm ‚â™‚â´ (iso a ‚äó iso b) ‚â™‚â´ Œª_ _

variable {F : MonoidalFunctor (Discrete Œ≤) C} {q : QuotientData i p}

namespace InducedFunctorData

variable (hF : InducedFunctorData F q)

noncomputable def addIso (b‚ÇÅ b‚ÇÇ : Œ≤) (a : Œ±) (h : b‚ÇÅ + i a = b‚ÇÇ) : F.obj ‚ü®b‚ÇÅ‚ü© ‚âÖ F.obj ‚ü®b‚ÇÇ‚ü© :=
  (œÅ_ _).symm ‚â™‚â´ (Iso.refl (F.obj ‚ü®b‚ÇÅ‚ü©) ‚äó hF.iso a).symm ‚â™‚â´ F.ŒºIso ‚ü®b‚ÇÅ‚ü© ‚ü®i a‚ü© ‚â™‚â´
    (eqToIso (by subst h; rfl))

noncomputable def addAddIso (b‚ÇÅ b‚ÇÇ b‚ÇÄ : Œ≤) (a‚ÇÅ a‚ÇÇ : Œ±)
    (h‚ÇÅ : b‚ÇÄ + i a‚ÇÅ = b‚ÇÅ) (h‚ÇÇ : b‚ÇÄ + i a‚ÇÇ = b‚ÇÇ) : F.obj ‚ü®b‚ÇÅ‚ü© ‚âÖ F.obj ‚ü®b‚ÇÇ‚ü© :=
  (hF.addIso b‚ÇÄ b‚ÇÅ a‚ÇÅ h‚ÇÅ).symm ‚â™‚â´ hF.addIso b‚ÇÄ b‚ÇÇ a‚ÇÇ h‚ÇÇ

/-lemma addAddIso_eq (b‚ÇÅ b‚ÇÇ b‚ÇÄ b‚ÇÄ' : Œ≤) (a‚ÇÅ a‚ÇÇ a‚ÇÅ' a‚ÇÇ' : Œ±)
    (h‚ÇÅ : b‚ÇÄ + i a‚ÇÅ = b‚ÇÅ) (h‚ÇÇ : b‚ÇÄ + i a‚ÇÇ = b‚ÇÇ)
    (h‚ÇÅ' : b‚ÇÄ' + i a‚ÇÅ' = b‚ÇÅ) (h‚ÇÇ' : b‚ÇÄ' + i a‚ÇÇ' = b‚ÇÇ) :
    hF.addAddIso b‚ÇÅ b‚ÇÇ b‚ÇÄ a‚ÇÅ a‚ÇÇ h‚ÇÅ h‚ÇÇ = hF.addAddIso b‚ÇÅ b‚ÇÇ b‚ÇÄ' a‚ÇÅ' a‚ÇÇ' h‚ÇÅ' h‚ÇÇ' := by
  sorry-/

noncomputable def iso' (b‚ÇÅ b‚ÇÇ : Œ≤) (h : p b‚ÇÅ = p b‚ÇÇ) :
    F.obj ‚ü®b‚ÇÅ‚ü© ‚âÖ F.obj ‚ü®b‚ÇÇ‚ü© :=
  hF.addAddIso b‚ÇÅ b‚ÇÇ _ _ _ ((q.exact b‚ÇÅ b‚ÇÇ).1 h).choose_spec.choose_spec.choose_spec.1
    ((q.exact b‚ÇÅ b‚ÇÇ).1 h).choose_spec.choose_spec.choose_spec.2

/-lemma iso'_eq (b‚ÇÅ b‚ÇÇ b‚ÇÄ : Œ≤) (a‚ÇÅ a‚ÇÇ : Œ±)
    (h‚ÇÅ : b‚ÇÄ + i a‚ÇÅ = b‚ÇÅ) (h‚ÇÇ : b‚ÇÄ + i a‚ÇÇ = b‚ÇÇ) :
    hF.iso' b‚ÇÅ b‚ÇÇ ((q.exact b‚ÇÅ b‚ÇÇ).2 ‚ü®_, _, _, h‚ÇÅ, h‚ÇÇ‚ü©) =
      hF.addAddIso b‚ÇÅ b‚ÇÇ b‚ÇÄ a‚ÇÅ a‚ÇÇ h‚ÇÅ h‚ÇÇ := by
  apply addAddIso_eq-/

/-noncomputable def inducedFunctor : MonoidalFunctor (Discrete Œ≥) C where
  obj := fun ‚ü®x‚ü© => F.obj ‚ü®q.œÉ x‚ü©
  map {X Y} f := F.map (eqToHom (by
    obtain ‚ü®X‚ü© := X
    obtain ‚ü®Y‚ü© := Y
    obtain ‚ü®‚ü®rfl‚ü©‚ü© := f
    rfl))
  map_id := by aesop_cat
  map_comp := by aesop_cat
  Œµ := F.Œµ ‚â´ (hF.iso' _ _ (by simp)).hom
  Œº _ _ := F.Œº _ _ ‚â´ (hF.iso' _ _ (by simp)).hom
  Œº_natural := by
    rintro ‚ü®c‚ÇÅ‚ü© ‚ü®c‚ÇÅ'‚ü© ‚ü®c‚ÇÇ‚ü© ‚ü®c‚ÇÇ'‚ü© f g
    obtain rfl : c‚ÇÅ = c‚ÇÅ' := by
      obtain ‚ü®‚ü®rfl‚ü©‚ü© := f
      rfl
    obtain rfl : c‚ÇÇ = c‚ÇÇ' := by
      obtain ‚ü®‚ü®rfl‚ü©‚ü© := g
      rfl
    obtain rfl := Subsingleton.elim f (ùüô _)
    obtain rfl := Subsingleton.elim g (ùüô _)
    dsimp
    simp
  Œµ_isIso := by dsimp; infer_instance
  Œº_isIso _ _ := by dsimp; infer_instance
  left_unitality := sorry
  right_unitality := sorry
  associativity := sorry-/

end InducedFunctorData

end Discrete

end CategoryTheory
