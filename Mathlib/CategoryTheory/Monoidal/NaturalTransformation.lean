/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import Mathlib.CategoryTheory.Monoidal.Functor
import Mathlib.CategoryTheory.Functor.FullyFaithful

#align_import category_theory.monoidal.natural_transformation from "leanprover-community/mathlib"@"d047eb4671130d5998b185e49a0443a0d2e9b191"

/-!
# Monoidal natural transformations

Natural transformations between (lax) monoidal functors must satisfy
an additional compatibility relation with the tensorators:
`F.Œº X Y ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ G.Œº X Y`.

(Lax) monoidal functors between a fixed pair of monoidal categories
themselves form a category.
-/

open CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

open CategoryTheory.Category

open CategoryTheory.Functor

namespace CategoryTheory

open MonoidalCategory

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [MonoidalCategory.{v‚ÇÅ} C]
         {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] [MonoidalCategory.{v‚ÇÇ} D]
         {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] [MonoidalCategory.{v‚ÇÉ} E]

/-- A monoidal natural transformation is a natural transformation between (lax) monoidal functors
additionally satisfying:
`F.Œº X Y ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ G.Œº X Y`
-/
@[ext]
structure MonoidalNatTrans (F G : LaxMonoidalFunctor C D) extends
  NatTrans F.toFunctor G.toFunctor where
  /-- The unit condition for a monoidal natural transformation. -/
  unit : F.Œµ ‚â´ app (ùüô_ C) = G.Œµ := by aesop_cat
  /-- The tensor condition for a monoidal natural transformation. -/
  tensor : ‚àÄ X Y, F.Œº _ _ ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ G.Œº _ _ := by aesop_cat
#align category_theory.monoidal_nat_trans CategoryTheory.MonoidalNatTrans

-- Porting note: `reassoc (attr := simp)` seems to add a `simp`
-- attribute to the original lemma as well.
attribute [reassoc (attr := simp)] MonoidalNatTrans.tensor
attribute [reassoc (attr := simp)] MonoidalNatTrans.unit

initialize_simps_projections MonoidalNatTrans (+toNatTrans, -app)

#align category_theory.monoidal_nat_trans.unit CategoryTheory.MonoidalNatTrans.unit
#align category_theory.monoidal_nat_trans.unit_assoc CategoryTheory.MonoidalNatTrans.unit_assoc
#align category_theory.monoidal_nat_trans.tensor CategoryTheory.MonoidalNatTrans.tensor
#align category_theory.monoidal_nat_trans.tensor_assoc CategoryTheory.MonoidalNatTrans.tensor_assoc

namespace MonoidalNatTrans

/-- The identity monoidal natural transformation. -/
@[simps!]
def id (F : LaxMonoidalFunctor C D) : MonoidalNatTrans F F :=
  { ùüô F.toFunctor with }
#align category_theory.monoidal_nat_trans.id CategoryTheory.MonoidalNatTrans.id

instance (F : LaxMonoidalFunctor C D) : Inhabited (MonoidalNatTrans F F) :=
  ‚ü®id F‚ü©

/-- Vertical composition of monoidal natural transformations. -/
@[simps!]
def vcomp {F G H : LaxMonoidalFunctor C D} (Œ± : MonoidalNatTrans F G) (Œ≤ : MonoidalNatTrans G H) :
    MonoidalNatTrans F H :=
  { NatTrans.vcomp Œ±.toNatTrans Œ≤.toNatTrans with }
#align category_theory.monoidal_nat_trans.vcomp CategoryTheory.MonoidalNatTrans.vcomp

end MonoidalNatTrans

variable (C D)

instance LaxMonoidalFunctor.categoryLaxMonoidalFunctor :
    Category (LaxMonoidalFunctor C D) where
  Hom := MonoidalNatTrans
  id := MonoidalNatTrans.id
  comp Œ± Œ≤ := MonoidalNatTrans.vcomp Œ± Œ≤
#align category_theory.monoidal_nat_trans.category_lax_monoidal_functor CategoryTheory.LaxMonoidalFunctor.categoryLaxMonoidalFunctor

instance MonoidalFunctor.categoryMonoidalFunctor : Category (MonoidalFunctor C D) :=
  InducedCategory.category MonoidalFunctor.toLaxMonoidalFunctor
#align category_theory.monoidal_nat_trans.category_monoidal_functor CategoryTheory.MonoidalFunctor.categoryMonoidalFunctor

def MonoidalFunctor.forget : MonoidalFunctor C D ‚•§ LaxMonoidalFunctor C D :=
  inducedFunctor _

instance : Faithful (MonoidalFunctor.forget C D) :=
  inferInstanceAs (Faithful (inducedFunctor _))

instance : Full (MonoidalFunctor.forget C D) :=
  inferInstanceAs (Full (inducedFunctor _))

/-- The isomorphism witnessing that the lax monoidal functor underlying the
identity strong monoidal functor is the lax monoidal identity functor. -/
@[simps!]
def MonoidalFunctor.forget_id_iso_id :
    (MonoidalFunctor.forget C C).obj (.id C) ‚âÖ LaxMonoidalFunctor.id C := Iso.refl _

variable {C D}

/-- The isomorphism witnessing that the lax monoidal functor underlying the
composition of strong monoidal functor is the composition of the
underlying lax monoidal functors. -/
@[simps!]
def MonoidalFunctor.forget_comp_iso_comp (F : MonoidalFunctor C D)
    (G : MonoidalFunctor D E) :
    (MonoidalFunctor.forget C E).obj (F ‚äó‚ãô G) ‚âÖ
      (MonoidalFunctor.forget C D).obj F ‚äó‚ãô (MonoidalFunctor.forget D E).obj G :=
  Iso.refl _

namespace MonoidalNatTrans

@[simp]
theorem comp_toNatTrans_lax {F G H : LaxMonoidalFunctor C D} {Œ± : F ‚ü∂ G} {Œ≤ : G ‚ü∂ H} :
    (Œ± ‚â´ Œ≤).toNatTrans = @CategoryStruct.comp (C ‚•§ D) _ _ _ _ Œ±.toNatTrans Œ≤.toNatTrans :=
  rfl
#align category_theory.monoidal_nat_trans.comp_to_nat_trans_lax CategoryTheory.MonoidalNatTrans.comp_toNatTrans_lax

-- Porting note: added, as `MonoidalNatTrans.ext` does not apply to morphisms.
@[ext]
lemma ext' {F G : LaxMonoidalFunctor C D} {Œ± Œ≤ : F ‚ü∂ G} (w : ‚àÄ X : C, Œ±.app X = Œ≤.app X) : Œ± = Œ≤ :=
  MonoidalNatTrans.ext _ _ (funext w)

@[simp]
theorem comp_toNatTrans {F G H : MonoidalFunctor C D} {Œ± : F ‚ü∂ G} {Œ≤ : G ‚ü∂ H} :
    (Œ± ‚â´ Œ≤).toNatTrans = @CategoryStruct.comp (C ‚•§ D) _ _ _ _ Œ±.toNatTrans Œ≤.toNatTrans :=
  rfl
#align category_theory.monoidal_nat_trans.comp_to_nat_trans CategoryTheory.MonoidalNatTrans.comp_toNatTrans

variable {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] [MonoidalCategory.{v‚ÇÉ} E]

/-- Horizontal composition of monoidal natural transformations. -/
@[simps]
def hcomp {F G : LaxMonoidalFunctor C D} {H K : LaxMonoidalFunctor D E} (Œ± : MonoidalNatTrans F G)
    (Œ≤ : MonoidalNatTrans H K) : MonoidalNatTrans (F ‚äó‚ãô H) (G ‚äó‚ãô K) :=
  { NatTrans.hcomp Œ±.toNatTrans Œ≤.toNatTrans with
    unit := by
      dsimp; simp
      conv_lhs => rw [‚Üê K.toFunctor.map_comp, Œ±.unit]
    tensor := fun X Y => by
      dsimp; simp
      conv_lhs => rw [‚Üê K.toFunctor.map_comp, Œ±.tensor, K.toFunctor.map_comp] }
#align category_theory.monoidal_nat_trans.hcomp CategoryTheory.MonoidalNatTrans.hcomp

section

attribute [local simp] NatTrans.naturality MonoidalNatTrans.unit MonoidalNatTrans.tensor

/-- The cartesian product of two monoidal natural transformations is monoidal. -/
@[simps]
def prod {F G : LaxMonoidalFunctor C D} {H K : LaxMonoidalFunctor C E} (Œ± : MonoidalNatTrans F G)
    (Œ≤ : MonoidalNatTrans H K) : MonoidalNatTrans (F.prod' H) (G.prod' K) where
  app X := (Œ±.app X, Œ≤.app X)
#align category_theory.monoidal_nat_trans.prod CategoryTheory.MonoidalNatTrans.prod

end

end MonoidalNatTrans

namespace MonoidalNatIso

variable {F G : LaxMonoidalFunctor C D}

/-- Construct a monoidal natural isomorphism from object level isomorphisms,
and the monoidal naturality in the forward direction. -/
def ofComponents (app : ‚àÄ X : C, F.obj X ‚âÖ G.obj X)
    (naturality' : ‚àÄ {X Y : C} (f : X ‚ü∂ Y), F.map f ‚â´ (app Y).hom = (app X).hom ‚â´ G.map f)
    (unit' : F.Œµ ‚â´ (app (ùüô_ C)).hom = G.Œµ)
    (tensor' : ‚àÄ X Y, F.Œº X Y ‚â´ (app (X ‚äó Y)).hom = ((app X).hom ‚äó (app Y).hom) ‚â´ G.Œº X Y) :
    F ‚âÖ G where
  hom := { app := fun X => (app X).hom }
  inv := {
    (NatIso.ofComponents app @naturality').inv with
    app := fun X => (app X).inv
    unit := by
      dsimp
      rw [‚Üê unit', assoc, Iso.hom_inv_id, comp_id]
    tensor := fun X Y => by
      dsimp
      rw [Iso.comp_inv_eq, assoc, tensor', ‚Üê tensor_comp_assoc,
        Iso.inv_hom_id, Iso.inv_hom_id, tensor_id, id_comp] }
#align category_theory.monoidal_nat_iso.of_components CategoryTheory.MonoidalNatIso.ofComponents

@[simp]
theorem ofComponents.hom_app (app : ‚àÄ X : C, F.obj X ‚âÖ G.obj X) (naturality) (unit) (tensor) (X) :
    (ofComponents app naturality unit tensor).hom.app X = (app X).hom :=
  rfl
#align category_theory.monoidal_nat_iso.of_components.hom_app CategoryTheory.MonoidalNatIso.ofComponents.hom_app

@[simp]
theorem ofComponents.inv_app (app : ‚àÄ X : C, F.obj X ‚âÖ G.obj X) (naturality) (unit) (tensor) (X) :
    (ofComponents app naturality unit tensor).inv.app X = (app X).inv := by simp [ofComponents]
#align category_theory.monoidal_nat_iso.of_components.inv_app CategoryTheory.MonoidalNatIso.ofComponents.inv_app

instance isIso_of_isIso_app (Œ± : F ‚ü∂ G) [‚àÄ X : C, IsIso (Œ±.app X)] : IsIso Œ± :=
  ‚ü®(IsIso.of_iso
        (ofComponents (fun X => asIso (Œ±.app X)) (fun f => Œ±.toNatTrans.naturality f) Œ±.unit
          Œ±.tensor)).1‚ü©
#align category_theory.monoidal_nat_iso.is_iso_of_is_iso_app CategoryTheory.MonoidalNatIso.isIso_of_isIso_app

end MonoidalNatIso

section

/-- The unit of a monoidal adjunction can be upgraded to a monoidal natural transformation. -/
@[simps toNatTrans]
def Adjunction.monoidalUnit (F : MonoidalFunctor C D) [IsLeftAdjoint F.toFunctor] :
    LaxMonoidalFunctor.id C ‚ü∂ F.toLaxMonoidalFunctor ‚äó‚ãô monoidalAdjoint F where
  toNatTrans := IsLeftAdjoint.adj.unit
  unit := (IsLeftAdjoint.adj.homEquiv _ _).symm.injective <| by
    simp [F.ŒµIso.eq_inv_comp, ‚Üê tensor_comp_assoc]
  tensor X Y := (IsLeftAdjoint.adj.homEquiv _ _).symm.injective <| by
    simp [(F.ŒºIso X Y).eq_inv_comp, ‚Üê tensor_comp_assoc]

/-- The unit of a monoidal equivalence can be upgraded to a monoidal natural transformation. -/
@[simps!] -- Porting note: have to manually specify the toNatTrans projection
def Equivalence.monoidalUnitIso (F : MonoidalFunctor C D) [IsEquivalence F.toFunctor] :
    MonoidalFunctor.id C ‚âÖ F ‚äó‚ãô monoidalInverse F :=
  let Œ∑ := Adjunction.monoidalUnit F
  (isoEquivOfFullyFaithful (MonoidalFunctor.forget _ _)).symm <|
    MonoidalNatIso.ofComponents (fun X => IsEquivalence.unitIso.app X)
      (fun f => Œ∑.naturality f) Œ∑.unit Œ∑.tensor

/-- The counit of a monoidal adjunction can be upgraded to a monoidal natural transformation. -/
@[simps toNatTrans]
def Adjunction.monoidalCounit (F : MonoidalFunctor C D) [IsLeftAdjoint F.toFunctor] :
    monoidalAdjoint F ‚äó‚ãô F.toLaxMonoidalFunctor ‚ü∂ LaxMonoidalFunctor.id D where
  toNatTrans := IsLeftAdjoint.adj.counit

/-- The counit of a monoidal equivalence can be upgraded to a monoidal natural transformation. -/
@[simps!] -- Porting note: have to manually specify the toNatTrans projection
def Equivalence.monoidalCounitIso (F : MonoidalFunctor C D) [IsEquivalence F.toFunctor] :
    monoidalInverse F ‚äó‚ãô F ‚âÖ MonoidalFunctor.id D :=
  let Œ∑ := Adjunction.monoidalCounit F
  (isoEquivOfFullyFaithful (MonoidalFunctor.forget _ _)).symm <|
    MonoidalNatIso.ofComponents (fun X => IsEquivalence.counitIso.app X)
      (fun f => Œ∑.naturality f) Œ∑.unit Œ∑.tensor

end

end CategoryTheory
