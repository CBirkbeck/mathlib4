/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Monoidal.Pentagon
import Mathlib.CategoryTheory.Functor.Derived.LeftDerivedBifunctorComp

/-!
# The derived monoidal category structure

-/

namespace CategoryTheory

open MonoidalCategory

variable {C D : Type*} [Category C] [Category D] [MonoidalCategory C]
    (L : C ‚•§ D) (W : MorphismProperty C) [L.IsLocalization W]
    [W.ContainsIdentities]

def DerivedMonoidal (_ : C ‚•§ D) (_ : MorphismProperty C) := D

instance : Category (DerivedMonoidal L W) := inferInstanceAs (Category D)

def toDerivedMonoidal : C ‚•§ DerivedMonoidal L W := L

instance : (toDerivedMonoidal L W).IsLocalization W := by assumption

local notation "L'" => toDerivedMonoidal L W

section

variable [(curriedTensor C ‚ãô (whiskeringRight C C
  (DerivedMonoidal L W)).obj (toDerivedMonoidal L W)).HasLeftDerivedFunctor‚ÇÇ W W]

namespace DerivedMonoidal

noncomputable def bifunctor :
    DerivedMonoidal L W ‚•§ DerivedMonoidal L W ‚•§ DerivedMonoidal L W :=
  (curriedTensor C ‚ãô (whiskeringRight _ _ _).obj (L')).leftDerived‚ÇÇ (L') (L') W W

noncomputable def counit :
    (((whiskeringLeft‚ÇÇ D).obj (L')).obj (L')).obj (bifunctor L W) ‚ü∂
    curriedTensor C ‚ãô (whiskeringRight _ _ _).obj (L') :=
  (curriedTensor C ‚ãô (whiskeringRight _ _ _).obj (L')).leftDerivedCounit‚ÇÇ L L W W

noncomputable def trifunctor‚ÇÅ‚ÇÇ : DerivedMonoidal L W ‚•§ DerivedMonoidal L W ‚•§
    DerivedMonoidal L W ‚•§ DerivedMonoidal L W :=
  bifunctorComp‚ÇÅ‚ÇÇ (bifunctor L W) (bifunctor L W)

noncomputable def trifunctor‚ÇÇ‚ÇÉ : DerivedMonoidal L W ‚•§ DerivedMonoidal L W ‚•§
    DerivedMonoidal L W ‚•§ DerivedMonoidal L W :=
  bifunctorComp‚ÇÇ‚ÇÉ (bifunctor L W) (bifunctor L W)

noncomputable def counit‚ÇÅ‚ÇÇ :
  ((((whiskeringLeft‚ÇÉ D).obj (L')).obj (L')).obj (L')).obj (trifunctor‚ÇÅ‚ÇÇ L W) ‚ü∂
    (Functor.postcompose‚ÇÉ.obj (L')).obj (bifunctorComp‚ÇÅ‚ÇÇ (curriedTensor C) (curriedTensor C)) :=
  bifunctorComp‚ÇÅ‚ÇÇCounit (counit L W) (counit L W)

noncomputable def counit‚ÇÇ‚ÇÉ :
  ((((whiskeringLeft‚ÇÉ D).obj (L')).obj (L')).obj (L')).obj (trifunctor‚ÇÇ‚ÇÉ L W) ‚ü∂
    (Functor.postcompose‚ÇÉ.obj (L')).obj (bifunctorComp‚ÇÇ‚ÇÉ (curriedTensor C) (curriedTensor C)) :=
  bifunctorComp‚ÇÇ‚ÇÉCounit (counit L W) (counit L W)

noncomputable def tensorUnitLeftCounit :
    L' ‚ãô (bifunctor L W).obj ((L').obj (ùüô_ C)) ‚ü∂ tensorLeft (ùüô_ C) ‚ãô L' :=
  Functor.bifunctorCounit‚ÇÅ (counit L W) (ùüô_ C)

noncomputable def tensorUnitRightCounit :
    L' ‚ãô (bifunctor L W).flip.obj ((L').obj (ùüô_ C)) ‚ü∂ tensorRight (ùüô_ C) ‚ãô L' :=
  Functor.bifunctorCounit‚ÇÇ (counit L W) (ùüô_ C)

instance : (bifunctor L W).IsLeftDerivedFunctor‚ÇÇ (counit L W) W W :=
  inferInstanceAs (Functor.IsLeftDerivedFunctor‚ÇÇ _ (Functor.leftDerivedCounit‚ÇÇ _ _ _ _ _) _ _)

noncomputable def quadrifunctorLeft : DerivedMonoidal L W ‚•§ DerivedMonoidal L W ‚•§
    DerivedMonoidal L W ‚•§ DerivedMonoidal L W ‚•§ DerivedMonoidal L W :=
  trifunctorComp‚ÇÅ‚ÇÇ‚ÇÉ (trifunctor‚ÇÅ‚ÇÇ L W) (bifunctor L W)

noncomputable def quadrifunctorRight : DerivedMonoidal L W ‚•§ DerivedMonoidal L W ‚•§
    DerivedMonoidal L W ‚•§ DerivedMonoidal L W ‚•§ DerivedMonoidal L W :=
  trifunctorComp‚ÇÇ‚ÇÉ‚ÇÑ (bifunctor L W) (trifunctor‚ÇÇ‚ÇÉ L W)

end DerivedMonoidal

end

open DerivedMonoidal in
-- needs an assumption about 4-fold tensors
class Functor.HasDerivedMonoidalCategory : Prop where
  hasLeftDerivedFunctor‚ÇÇ :
    (curriedTensor C ‚ãô (whiskeringRight _ _ _).obj (L')).HasLeftDerivedFunctor‚ÇÇ W W
  trifunctor‚ÇÅ‚ÇÇ_isLeftDerivedFunctor‚ÇÉ :
    (trifunctor‚ÇÅ‚ÇÇ L W).IsLeftDerivedFunctor‚ÇÉ (counit‚ÇÅ‚ÇÇ L W) W W W
  trifunctor‚ÇÇ‚ÇÉ_isLeftDerivedFunctor‚ÇÉ :
    (trifunctor‚ÇÇ‚ÇÉ L W).IsLeftDerivedFunctor‚ÇÉ (counit‚ÇÇ‚ÇÉ L W) W W W
  bifunctorObjUnit_isLeftDerivedFunctor :
    ((bifunctor L W).obj ((L').obj (ùüô_ C))).IsLeftDerivedFunctor (tensorUnitLeftCounit L W) W
  bifunctorFlipObjUnit_isLeftDerivedFunctor :
    ((bifunctor L W).flip.obj ((L').obj (ùüô_ C))).IsLeftDerivedFunctor (tensorUnitRightCounit L W) W

namespace Functor.HasDerivedMonoidalCategory

attribute [instance] hasLeftDerivedFunctor‚ÇÇ
  trifunctor‚ÇÅ‚ÇÇ_isLeftDerivedFunctor‚ÇÉ trifunctor‚ÇÇ‚ÇÉ_isLeftDerivedFunctor‚ÇÉ
  bifunctorObjUnit_isLeftDerivedFunctor
  bifunctorFlipObjUnit_isLeftDerivedFunctor

end Functor.HasDerivedMonoidalCategory

namespace DerivedMonoidal

variable [L.HasDerivedMonoidalCategory W]

noncomputable def associator :
    trifunctor‚ÇÅ‚ÇÇ L W ‚âÖ trifunctor‚ÇÇ‚ÇÉ L W :=
  Functor.leftDerived‚ÇÉNatIso _ _ (counit‚ÇÅ‚ÇÇ L W) (counit‚ÇÇ‚ÇÉ L W) W W W
    ((Functor.postcompose‚ÇÉ.obj L).mapIso (curriedAssociatorNatIso C))

@[simp]
lemma associator_hom_fac_app_app_app (X‚ÇÅ X‚ÇÇ X‚ÇÉ : C) :
    (((associator L W).hom.app ((L').obj X‚ÇÅ)).app ((L').obj X‚ÇÇ)).app ((L').obj X‚ÇÉ) ‚â´
      (((counit‚ÇÇ‚ÇÉ L W).app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ =
      (((counit‚ÇÅ‚ÇÇ L W).app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ ‚â´ (L').map (Œ±_ X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom := by
  apply Functor.leftDerived‚ÇÉNatTrans_fac_app_app_app

noncomputable def leftUnitor : (bifunctor L W).obj ((L').obj (ùüô_ C)) ‚âÖ ùü≠ _ :=
  Functor.leftDerivedNatIso _ _ (tensorUnitLeftCounit L W) (L').rightUnitor.hom W
    (isoWhiskerRight (leftUnitorNatIso C) (L') ‚â™‚â´ (L').leftUnitor)

@[reassoc]
lemma leftUnitor_hom_app (X : C) :
    (leftUnitor L W).hom.app ((L').obj X) =
      ((counit L W).app (ùüô_ C)).app X ‚â´ (L').map (Œª_ X).hom := by
  simpa using Functor.leftDerivedNatTrans_fac_app _ _
      (tensorUnitLeftCounit L W) (L').rightUnitor.hom W
      (whiskerRight (leftUnitorNatIso C).hom (L') ‚â´ (L').leftUnitor.hom) X

noncomputable def rightUnitor : (bifunctor L W).flip.obj ((L').obj (ùüô_ C)) ‚âÖ ùü≠ _ :=
  Functor.leftDerivedNatIso _ _ (tensorUnitRightCounit L W) (L').rightUnitor.hom W
    (isoWhiskerRight (rightUnitorNatIso C) (L') ‚â™‚â´ (L').leftUnitor)

lemma rightUnitor_hom_app (X : C) :
    (rightUnitor L W).hom.app ((L').obj X) =
      ((counit L W).app X).app (ùüô_ C) ‚â´ (L').map (œÅ_ X).hom := by
  simpa using Functor.leftDerivedNatTrans_fac_app
    ((bifunctor L W).flip.obj ((L').obj (ùüô_ C))) (ùü≠ _)
    (tensorUnitRightCounit L W) (L').rightUnitor.hom W
      (whiskerRight (rightUnitorNatIso C).hom (L') ‚â´ (L').leftUnitor.hom) X

lemma triangle :
    NatTrans.Triangle (associator L W).hom ((L').obj (ùüô_ C))
      (leftUnitor L W) (rightUnitor L W) where
  triangle := by
    rw [‚Üê cancel_mono (Functor.leftUnitor (bifunctor L W)).hom]
    apply (bifunctor L W).leftDerived‚ÇÇ_ext (counit L W) W W
    ext X‚ÇÅ X‚ÇÉ
    have h‚ÇÅ := ((counit L W).app X‚ÇÅ).naturality (Œª_ X‚ÇÉ).hom
    have h‚ÇÇ := associator_hom_fac_app_app_app L W X‚ÇÅ (ùüô_ C) X‚ÇÉ
    have h‚ÇÉ := congr_app ((counit L W).naturality (œÅ_ X‚ÇÅ).hom) X‚ÇÉ
    dsimp [counit‚ÇÇ‚ÇÉ, counit‚ÇÅ‚ÇÇ] at h‚ÇÅ h‚ÇÇ h‚ÇÉ ‚ä¢
    simp only [Category.assoc] at h‚ÇÇ
    rw [Category.comp_id, Category.comp_id, Category.assoc,
      rightUnitor_hom_app, leftUnitor_hom_app, Functor.map_comp_assoc,
      Functor.map_comp, NatTrans.comp_app_assoc, h‚ÇÅ, reassoc_of% h‚ÇÇ, ‚Üê (L').map_comp,
      MonoidalCategory.triangle, h‚ÇÉ]

/-lemma pentagon :
    NatTrans.Pentagon (associator L W).hom where
  natTrans‚ÇÅ‚ÇÇ_comp_natTrans‚ÇÇ‚ÇÉ := by
    sorry

noncomputable instance : MonoidalCategory (DerivedMonoidal L W) :=
  .ofBifunctor _ _ _ _ _ (pentagon L W) (triangle L W)-/

end DerivedMonoidal

end CategoryTheory
