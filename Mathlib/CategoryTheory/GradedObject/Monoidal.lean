import Mathlib.CategoryTheory.GradedObject.Trifunctor

namespace CategoryTheory

open Limits MonoidalCategory Category

variable {I : Type*} [AddMonoid I] {C : Type*} [Category C] [MonoidalCategory C]

namespace MonoidalCategory

variable (C)

@[simps!]
def curriedAssociatorNatIso :
    bifunctorComp‚ÇÅ‚ÇÇ (curryObj (MonoidalCategory.tensor C)) (curryObj (MonoidalCategory.tensor C)) ‚âÖ
      bifunctorComp‚ÇÇ‚ÇÉ (curryObj (MonoidalCategory.tensor C)) (curryObj (MonoidalCategory.tensor C)) :=
  NatIso.ofComponents
    (fun X‚ÇÅ => NatIso.ofComponents
      (fun X‚ÇÇ => NatIso.ofComponents
        (fun X‚ÇÉ => associator X‚ÇÅ X‚ÇÇ X‚ÇÉ)
          (fun {X‚ÇÉ Y‚ÇÉ} œÜ => by simpa using associator_naturality (ùüô X‚ÇÅ) (ùüô X‚ÇÇ) œÜ))
        (fun {X‚ÇÇ Y‚ÇÇ} œÜ => by
          ext X‚ÇÉ
          dsimp [curryObj] -- missing @simps
          simp))
        (fun {X‚ÇÅ Y‚ÇÅ} œÜ => by
          ext X‚ÇÇ X‚ÇÉ
          dsimp [curryObj] -- missing @simps
          simp)

end MonoidalCategory
namespace GradedObject

abbrev HasTensor (X‚ÇÅ X‚ÇÇ : GradedObject I C) : Prop :=
  HasMap (((mapBifunctorFunctor (curryObj (MonoidalCategory.tensor C)) I I).obj X‚ÇÅ).obj X‚ÇÇ)
    (fun x => x.1 + x.2)

noncomputable abbrev tensorObj (X‚ÇÅ X‚ÇÇ : GradedObject I C) [HasTensor X‚ÇÅ X‚ÇÇ] :
    GradedObject I C :=
  mapBifunctorMapObj (curryObj (MonoidalCategory.tensor C)) (fun x => x.1 + x.2) X‚ÇÅ X‚ÇÇ

abbrev TensorCandidate (X‚ÇÅ X‚ÇÇ : GradedObject I C) (j : I) :=
  (((mapBifunctorFunctor (curryObj (MonoidalCategory.tensor C)) I I).obj X‚ÇÅ).obj X‚ÇÇ).MapObjCandidate (fun ‚ü®i, j‚ü© => i + j) j

@[simps! pt]
def TensorCandidate.mk (X‚ÇÅ X‚ÇÇ : GradedObject I C) (j : I) (pt : C)
    (Œπ : ‚àÄ (i‚ÇÅ i‚ÇÇ : I) (_ : i‚ÇÅ + i‚ÇÇ = j), X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚ü∂ pt) : TensorCandidate X‚ÇÅ X‚ÇÇ j :=
  MapObjCandidate.mk _ _ _ pt (fun ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© h => Œπ i‚ÇÅ i‚ÇÇ h)

@[simp]
lemma TensorCandidate.mk_Œπ' (X‚ÇÅ X‚ÇÇ : GradedObject I C) (j : I) (pt : C)
    (Œπ : ‚àÄ (i‚ÇÅ i‚ÇÇ : I) (_ : i‚ÇÅ + i‚ÇÇ = j), X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚ü∂ pt) (i‚ÇÅ i‚ÇÇ : I) (h : i‚ÇÅ + i‚ÇÇ = j) :
    (TensorCandidate.mk X‚ÇÅ X‚ÇÇ j pt Œπ).Œπ' ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© h = Œπ i‚ÇÅ i‚ÇÇ h := rfl

lemma TensorCandidate.hasTensor (X‚ÇÅ X‚ÇÇ : GradedObject I C)
    (c : ‚àÄ i, TensorCandidate X‚ÇÅ X‚ÇÇ i) (hc : ‚àÄ i, IsColimit (c i)) :
    HasTensor X‚ÇÅ X‚ÇÇ :=
  MapObjCandidate.hasMap _ _ c hc

section

variable (X‚ÇÅ X‚ÇÇ : GradedObject I C) [HasTensor X‚ÇÅ X‚ÇÇ]

noncomputable def ŒπTensorObj (i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ : I) (h : i‚ÇÅ + i‚ÇÇ = i‚ÇÅ‚ÇÇ) :
  X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚ü∂ tensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ‚ÇÇ :=
    ŒπMapBifunctorMapObj (curryObj (MonoidalCategory.tensor C)) _ _ _ _ _ _ h

variable {X‚ÇÅ X‚ÇÇ}

@[ext]
lemma tensorObj_ext {A : C} {j : I} (f g : tensorObj X‚ÇÅ X‚ÇÇ j ‚ü∂ A)
    (h : ‚àÄ (i‚ÇÅ i‚ÇÇ : I) (hi : i‚ÇÅ + i‚ÇÇ = j),
      ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j hi ‚â´ f = ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j hi ‚â´ g) : f = g := by
  apply mapObj_ext
  rintro ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© hi
  exact h i‚ÇÅ i‚ÇÇ hi

end

noncomputable def tensorHom {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) [HasTensor X‚ÇÅ Y‚ÇÅ]
    [HasTensor X‚ÇÇ Y‚ÇÇ] :
    tensorObj X‚ÇÅ Y‚ÇÅ ‚ü∂ tensorObj X‚ÇÇ Y‚ÇÇ :=
  mapBifunctorMapMap _ _ f g

@[reassoc (attr := simp)]
lemma Œπ_tensorHom {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) [HasTensor X‚ÇÅ Y‚ÇÅ]
    [HasTensor X‚ÇÇ Y‚ÇÇ] (i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ : I) (h : i‚ÇÅ + i‚ÇÇ = i‚ÇÅ‚ÇÇ) :
    ŒπTensorObj X‚ÇÅ Y‚ÇÅ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h ‚â´ tensorHom f g i‚ÇÅ‚ÇÇ =
      (f i‚ÇÅ ‚äó g i‚ÇÇ) ‚â´ ŒπTensorObj X‚ÇÇ Y‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h := by
  refine' (Œπ_mapBifunctorMapMap (curryObj (MonoidalCategory.tensor C)) (fun ‚ü®i, j‚ü© => i + j : I √ó I ‚Üí I) f g
    i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h).trans _
  rw [‚Üê assoc]
  congr 1
  simp [curryObj]

@[simp]
noncomputable def whiskerLeft (X : GradedObject I C) {Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (œÜ : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
    [HasTensor X Y‚ÇÅ] [HasTensor X Y‚ÇÇ] : tensorObj X Y‚ÇÅ ‚ü∂ tensorObj X Y‚ÇÇ :=
      tensorHom (ùüô X) œÜ

@[simp]
noncomputable def whiskerRight {X‚ÇÅ X‚ÇÇ : GradedObject I C} (œÜ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (Y : GradedObject I C)
    [HasTensor X‚ÇÅ Y] [HasTensor X‚ÇÇ Y] : tensorObj X‚ÇÅ Y ‚ü∂ tensorObj X‚ÇÇ Y :=
      tensorHom œÜ (ùüô Y)

@[simp]
lemma tensor_id (X Y : GradedObject I C) [HasTensor X Y] :
    tensorHom (ùüô X) (ùüô Y) = ùüô _ := by
  dsimp [tensorHom]
  simp
  rfl

lemma tensorHom_def {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) [HasTensor X‚ÇÅ Y‚ÇÅ]
    [HasTensor X‚ÇÇ Y‚ÇÇ] [HasTensor X‚ÇÇ Y‚ÇÅ]:
    tensorHom f g = whiskerRight f Y‚ÇÅ ‚â´ whiskerLeft X‚ÇÇ g := by
  dsimp only [tensorHom, mapBifunctorMapMap, whiskerLeft, whiskerRight]
  rw [‚Üê mapMap_comp]
  apply congr_mapMap
  simp

@[reassoc]
lemma tensor_comp {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : GradedObject I C} (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ X‚ÇÉ)
    (g‚ÇÅ : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) (g‚ÇÇ : Y‚ÇÇ ‚ü∂ Y‚ÇÉ) [HasTensor X‚ÇÅ Y‚ÇÅ] [HasTensor X‚ÇÇ Y‚ÇÇ] [HasTensor X‚ÇÉ Y‚ÇÉ] :
    tensorHom (f‚ÇÅ ‚â´ f‚ÇÇ) (g‚ÇÅ ‚â´ g‚ÇÇ) = tensorHom f‚ÇÅ g‚ÇÅ ‚â´ tensorHom f‚ÇÇ g‚ÇÇ := by
  dsimp only [tensorHom, mapBifunctorMapMap]
  rw [‚Üê mapMap_comp]
  apply congr_mapMap
  simp

abbrev HasAssociator (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C) [HasTensor X‚ÇÅ X‚ÇÇ] [HasTensor X‚ÇÇ X‚ÇÉ]
   [HasTensor (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ] [HasTensor X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ)] :=
  HasGoodAssociator (MonoidalCategory.curriedAssociatorNatIso C)
    (fun ‚ü®i, j‚ü© => i + j) (fun ‚ü®i, j‚ü© => i + j) (fun ‚ü®i, j‚ü© => i + j) (fun ‚ü®i, j‚ü© => i + j)
    (fun ‚ü®i, j, k‚ü© => i + j + k) (fun ‚ü®_, _, _‚ü© => rfl) (fun ‚ü®i, j, k‚ü© => add_assoc i j k)
    X‚ÇÅ X‚ÇÇ X‚ÇÉ

section

variable (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C) [HasTensor X‚ÇÅ X‚ÇÇ] [HasTensor X‚ÇÇ X‚ÇÉ]
  [HasTensor (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ] [HasTensor X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ)]

noncomputable def associator [H : HasAssociator X‚ÇÅ X‚ÇÇ X‚ÇÉ] :
  tensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ ‚âÖ tensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) :=
    mapBifunctorBifunctorAssociator (H := H)

noncomputable def ŒπTensorObj‚ÇÉ (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) :
    X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚äó X‚ÇÉ i‚ÇÉ ‚ü∂ tensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) j :=
  (ùüô _ ‚äó ŒπTensorObj X‚ÇÇ X‚ÇÉ i‚ÇÇ i‚ÇÉ _ rfl) ‚â´
    ŒπTensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) i‚ÇÅ (i‚ÇÇ + i‚ÇÉ) j (by rw [‚Üê add_assoc, h])

lemma ŒπTensorObj‚ÇÉ_eq (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) (i‚ÇÇ‚ÇÉ : I) (h' : i‚ÇÇ + i‚ÇÉ = i‚ÇÇ‚ÇÉ) :
    ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h =
      (ùüô _ ‚äó ŒπTensorObj X‚ÇÇ X‚ÇÉ i‚ÇÇ i‚ÇÉ i‚ÇÇ‚ÇÉ h') ‚â´
        ŒπTensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) i‚ÇÅ i‚ÇÇ‚ÇÉ j (by rw [‚Üê h', ‚Üê add_assoc, h]) := by
  subst h'
  rfl

noncomputable def ŒπTensorObj‚ÇÉ' (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) :
    (X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ) ‚äó X‚ÇÉ i‚ÇÉ ‚ü∂ tensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ j :=
  (ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ (i‚ÇÅ + i‚ÇÇ) rfl ‚äó ùüô _) ‚â´
    ŒπTensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ (i‚ÇÅ + i‚ÇÇ) i‚ÇÉ j h

noncomputable def ŒπTensorObj‚ÇÉ'_eq (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) (i‚ÇÅ‚ÇÇ : I)
    (h' : i‚ÇÅ + i‚ÇÇ = i‚ÇÅ‚ÇÇ) :
    ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h =
      (ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h' ‚äó ùüô _) ‚â´
        ŒπTensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ i‚ÇÅ‚ÇÇ i‚ÇÉ j (by rw [‚Üêh', h]) := by
  subst h'
  rfl

section

variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ}

/-@[ext]
lemma tensorObj‚ÇÉ_ext {j : I} {A : C} (f g : tensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) j ‚ü∂ A)
    (h : ‚àÄ (i‚ÇÅ i‚ÇÇ i‚ÇÉ : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j),
      ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ f = ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ g) : f = g := by
  sorry

@[ext]
lemma tensorObj‚ÇÉ'_ext {j : I} {A : C} (f g : tensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ j ‚ü∂ A)
    (h : ‚àÄ (i‚ÇÅ i‚ÇÇ i‚ÇÉ : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j),
      ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ f = ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ g) : f = g := by
  sorry-/

end

/-@[reassoc (attr := simp)]
lemma ŒπTensorObj‚ÇÉ'_associator_hom [HasAssociator X‚ÇÅ X‚ÇÇ X‚ÇÉ] (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) :
    ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom j =
      (Œ±_ _ _ _).hom ‚â´ ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h := sorry

@[reassoc (attr := simp)]
lemma ŒπTensorObj‚ÇÉ_associator_inv [HasAssociator X‚ÇÅ X‚ÇÇ X‚ÇÉ] (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) :
    ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).inv j =
      (Œ±_ _ _ _).inv ‚â´ ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h := sorry-/

end

section

variable [DecidableEq I] [HasInitial C]
  [‚àÄ X‚ÇÅ, PreservesColimit (Functor.empty.{0} C)
    ((curryObj (MonoidalCategory.tensor C)).obj X‚ÇÅ)]
  [‚àÄ X‚ÇÇ, PreservesColimit (Functor.empty.{0} C)
    ((curryObj (MonoidalCategory.tensor C)).flip.obj X‚ÇÇ)]

noncomputable def tensorUnit : GradedObject I C :=
  fun i => if (i = 0) then (ùüô_ C) else initial C

variable (C)

noncomputable def tensorUnit‚ÇÄ' (i : I) (hi : i = 0) : (tensorUnit : GradedObject I C) i ‚âÖ ùüô_ C :=
  eqToIso (by subst hi; simp [tensorUnit])

variable (I)

noncomputable def tensorUnit‚ÇÄ : (tensorUnit : GradedObject I C) 0 ‚âÖ ùüô_ C :=
  tensorUnit‚ÇÄ' _ _ rfl

@[simp]
lemma tensorUnit‚ÇÄ'_eq : tensorUnit‚ÇÄ' C 0 rfl = tensorUnit‚ÇÄ I C := rfl

variable {I}

noncomputable def isInitialTensorUnitApply (i : I) (hi : i ‚â† 0) :
    IsInitial ((tensorUnit : GradedObject I C) i) := by
  dsimp [tensorUnit]
  rw [if_neg hi]
  exact initialIsInitial

variable {C}

def isInitialTensor (X‚ÇÅ X‚ÇÇ : C) (hX‚ÇÅ : IsInitial X‚ÇÅ) : IsInitial (X‚ÇÅ ‚äó X‚ÇÇ) :=
  IsInitial.isInitialObj ((curryObj (MonoidalCategory.tensor C)).flip.obj X‚ÇÇ) _ hX‚ÇÅ

def tensorIsInitial (X‚ÇÅ X‚ÇÇ : C) (hX‚ÇÇ : IsInitial X‚ÇÇ) : IsInitial (X‚ÇÅ ‚äó X‚ÇÇ) :=
  IsInitial.isInitialObj ((curryObj (MonoidalCategory.tensor C)).obj X‚ÇÅ) _ hX‚ÇÇ

variable (X : GradedObject I C)

@[simps! pt]
noncomputable def unitTensorCandidate (i : I) : TensorCandidate tensorUnit X i :=
  TensorCandidate.mk _ _ _ (X i) (fun a b h =>
    if ha : a = 0
      then
        ((tensorUnit‚ÇÄ' C a ha).hom ‚äó ùüô (X b) : tensorUnit a ‚äó X b ‚ü∂ ùüô_ C ‚äó X b) ‚â´
          (leftUnitor (X b)).hom ‚â´ eqToHom (by
            obtain rfl : b = i := by rw [‚Üê h, ha, zero_add]
            rfl)
      else IsInitial.to (isInitialTensor _ _ (isInitialTensorUnitApply _ _ ha)) _)

@[simp]
lemma unitTensorCandidate_Œπ‚ÇÄ (i : I) :
    (unitTensorCandidate X i).Œπ' ‚ü®0, i‚ü© (zero_add i) =
      ((tensorUnit‚ÇÄ I C).hom ‚äó (ùüô (X i))) ‚â´ (Œª_ (X i)).hom := by
  dsimp [unitTensorCandidate]
  rw [dif_pos rfl]
  simp

noncomputable def isColimitUnitTensorCandidate (i : I) : IsColimit (unitTensorCandidate X i) :=
  mkCofanColimit _
    (fun s => (leftUnitor (X i)).inv ‚â´
      ((tensorUnit‚ÇÄ I C).inv ‚äó ùüô (X i)) ‚â´ s.inj ‚ü®‚ü®0, i‚ü©, zero_add i‚ü©)
    (fun s ‚ü®‚ü®a, b‚ü©, (hi : a + b = i)‚ü© => by
      by_cases a = 0
      ¬∑ subst h
        obtain rfl : b = i := by rw [‚Üê hi, zero_add]
        simp
      ¬∑ apply IsInitial.hom_ext
        apply isInitialTensor
        exact isInitialTensorUnitApply  _ _ h)
    (fun s m hm => by
      dsimp
      rw [‚Üê hm ‚ü®‚ü®0, i‚ü©, zero_add i‚ü© ]
      simp)

instance : HasTensor tensorUnit X :=
  TensorCandidate.hasTensor _ _ _ (fun i => isColimitUnitTensorCandidate X i)

noncomputable def leftUnitor :
    tensorObj tensorUnit X ‚âÖ X := isoMk _ _
      (fun i => ((unitTensorCandidate X i).iso (isColimitUnitTensorCandidate X i)).symm)

lemma leftUnitor_inv_apply (i : I) :
    (leftUnitor X).inv i =
      (Œª_ _).inv ‚â´ ((tensorUnit‚ÇÄ I C).inv ‚äó ùüô (X i)) ‚â´ ŒπTensorObj tensorUnit X 0 i i (zero_add i) := by
  rfl

lemma leftUnitor_inv_naturality {X‚ÇÅ X‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
    f ‚â´ (leftUnitor X‚ÇÇ).inv = (leftUnitor X‚ÇÅ).inv ‚â´ tensorHom (ùüô tensorUnit) f := by
  ext i
  dsimp
  rw [leftUnitor_inv_apply, leftUnitor_inv_apply, assoc, assoc, Œπ_tensorHom,
    leftUnitor_inv_naturality_assoc, id_tensor_comp_tensor_id_assoc]
  dsimp
  rw [tensor_id_comp_id_tensor_assoc]

lemma leftUnitor_naturality {X‚ÇÅ X‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
    tensorHom (ùüô tensorUnit) f ‚â´ (leftUnitor X‚ÇÇ).hom = (leftUnitor X‚ÇÅ).hom ‚â´ f := by
  rw [‚Üê cancel_mono (leftUnitor X‚ÇÇ).inv, assoc, assoc, Iso.hom_inv_id, comp_id,
    leftUnitor_inv_naturality, Iso.hom_inv_id_assoc]

@[reassoc (attr := simp)]
lemma ŒπTensorObj_leftUnitor_hom (X : GradedObject I C) (i : I) :
    ŒπTensorObj tensorUnit X 0 i i (zero_add i) ‚â´ (leftUnitor X).hom i =
      ((tensorUnit‚ÇÄ I C).hom ‚äó ùüô (X i)) ‚â´ (Œª_ (X i)).hom := by
  rw [‚Üê cancel_mono ((leftUnitor X).inv i), assoc, assoc,
    iso_hom_inv_id_apply, comp_id, leftUnitor_inv_apply,
    Iso.hom_inv_id_assoc, hom_inv_id_tensor_assoc, MonoidalCategory.tensor_id,
    id_comp, id_comp]

@[simps! pt]
noncomputable def tensorUnitCandidate (i : I) : TensorCandidate X tensorUnit i :=
  TensorCandidate.mk _ _ _ (X i) (fun a b h =>
    if hb : b = 0
      then
        (ùüô (X a) ‚äó (tensorUnit‚ÇÄ' C b hb).hom) ‚â´ (rightUnitor (X a)).hom ‚â´ eqToHom (by
          obtain rfl : a = i := by rw [‚Üê h, hb, add_zero]
          rfl)
      else IsInitial.to (tensorIsInitial _ _ (isInitialTensorUnitApply _ _ hb)) _)

@[simp]
lemma tensorUnitCandidate_Œπ‚ÇÄ (i : I) :
    (tensorUnitCandidate X i).Œπ' ‚ü®i, 0‚ü© (add_zero i) =
      (ùüô (X i) ‚äó (tensorUnit‚ÇÄ I C).hom) ‚â´ (rightUnitor (X i)).hom := by
  dsimp [tensorUnitCandidate]
  rw [dif_pos rfl]
  simp

noncomputable def isColimitTensorUnitCandidate (i : I) : IsColimit (tensorUnitCandidate X i) :=
  mkCofanColimit _
    (fun s => (rightUnitor (X i)).inv ‚â´
      (ùüô (X i) ‚äó (tensorUnit‚ÇÄ I C).inv) ‚â´ s.inj ‚ü®‚ü®i, 0‚ü©, add_zero i‚ü©)
    (fun s ‚ü®‚ü®a, b‚ü©, (hi : a + b = i)‚ü© => by
      by_cases b = 0
      ¬∑ subst h
        obtain rfl : a = i := by rw [‚Üê hi, add_zero]
        simp
      ¬∑ apply IsInitial.hom_ext
        apply tensorIsInitial
        exact isInitialTensorUnitApply  _ _ h)
    (fun s m hm => by
      dsimp
      rw [‚Üê hm ‚ü®‚ü®i, 0‚ü©, add_zero i‚ü© ]
      simp)

instance : HasTensor X tensorUnit :=
  TensorCandidate.hasTensor _ _ _ (fun i => isColimitTensorUnitCandidate X i)

noncomputable def rightUnitor :
    tensorObj X tensorUnit ‚âÖ X := isoMk _ _
      (fun i => ((tensorUnitCandidate X i).iso (isColimitTensorUnitCandidate X i)).symm)

lemma rightUnitor_inv_apply (i : I) :
    (rightUnitor X).inv i =
      (œÅ_ _).inv ‚â´ (ùüô (X i) ‚äó (tensorUnit‚ÇÄ I C).inv) ‚â´ ŒπTensorObj X tensorUnit i 0 i (add_zero i) := by
  rfl

lemma rightUnitor_inv_naturality {X‚ÇÅ X‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
    f ‚â´ (rightUnitor X‚ÇÇ).inv = (rightUnitor X‚ÇÅ).inv ‚â´ tensorHom f (ùüô tensorUnit) := by
  ext i
  dsimp
  rw [rightUnitor_inv_apply, rightUnitor_inv_apply, assoc, assoc, Œπ_tensorHom,
    rightUnitor_inv_naturality_assoc, tensor_id_comp_id_tensor_assoc]
  dsimp
  rw [id_tensor_comp_tensor_id_assoc]

lemma rightUnitor_naturality {X‚ÇÅ X‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
    tensorHom f (ùüô tensorUnit) ‚â´ (rightUnitor X‚ÇÇ).hom = (rightUnitor X‚ÇÅ).hom ‚â´ f := by
  rw [‚Üê cancel_mono (rightUnitor X‚ÇÇ).inv, assoc, assoc, Iso.hom_inv_id, comp_id,
    rightUnitor_inv_naturality, Iso.hom_inv_id_assoc]

@[reassoc (attr := simp)]
lemma ŒπTensorObj_rightUnitor_hom (X : GradedObject I C) (i : I) :
    ŒπTensorObj X tensorUnit i 0 i (add_zero i) ‚â´ (rightUnitor X).hom i =
      (ùüô (X i ) ‚äó (tensorUnit‚ÇÄ I C).hom) ‚â´ (œÅ_ (X i)).hom := by
  rw [‚Üê cancel_mono ((rightUnitor X).inv i), assoc, assoc,
    iso_hom_inv_id_apply, comp_id, rightUnitor_inv_apply,
    Iso.hom_inv_id_assoc, ‚Üê MonoidalCategory.tensor_comp_assoc, id_comp,
    Iso.hom_inv_id, MonoidalCategory.tensor_id, id_comp]

/-lemma triangle (X‚ÇÅ X‚ÇÇ : GradedObject I C) [HasTensor X‚ÇÅ X‚ÇÇ]
    [HasTensor (tensorObj X‚ÇÅ tensorUnit) X‚ÇÇ]
    [HasTensor X‚ÇÅ (tensorObj tensorUnit X‚ÇÇ)] [HasAssociator X‚ÇÅ tensorUnit X‚ÇÇ] :
  (associator X‚ÇÅ tensorUnit X‚ÇÇ).hom ‚â´ tensorHom (ùüô X‚ÇÅ) (leftUnitor X‚ÇÇ).hom =
    tensorHom (rightUnitor X‚ÇÅ).hom (ùüô X‚ÇÇ) := by
  ext j i‚ÇÅ k i‚ÇÇ h
  simp only [categoryOfGradedObjects_comp, ŒπTensorObj‚ÇÉ'_associator_hom_assoc]
  by_cases h' : k = 0
  ¬∑ subst h'
    rw [ŒπTensorObj‚ÇÉ_eq X‚ÇÅ tensorUnit X‚ÇÇ i‚ÇÅ 0 i‚ÇÇ j h i‚ÇÇ (zero_add i‚ÇÇ),
      ŒπTensorObj‚ÇÉ'_eq X‚ÇÅ tensorUnit X‚ÇÇ i‚ÇÅ 0 i‚ÇÇ j h i‚ÇÅ (add_zero i‚ÇÅ), assoc, assoc,
      Œπ_tensorHom, Œπ_tensorHom, categoryOfGradedObjects_id, categoryOfGradedObjects_id,
      ‚Üê cancel_epi ((ùüô (X‚ÇÅ i‚ÇÅ) ‚äó (tensorUnit‚ÇÄ I C).inv) ‚äó ùüô (X‚ÇÇ i‚ÇÇ)),
      associator_naturality_assoc (ùüô (X‚ÇÅ i‚ÇÅ)) (tensorUnit‚ÇÄ I C).inv (ùüô (X‚ÇÇ i‚ÇÇ)),
      ‚Üê MonoidalCategory.tensor_comp_assoc, ‚Üê MonoidalCategory.tensor_comp_assoc,
      assoc, assoc, id_comp, id_comp, ŒπTensorObj_leftUnitor_hom,
      ‚Üê MonoidalCategory.tensor_comp_assoc, id_comp, Iso.inv_hom_id, MonoidalCategory.tensor_id,
      id_comp, triangle_assoc, ‚Üê MonoidalCategory.tensor_comp_assoc,
      ‚Üê MonoidalCategory.tensor_comp_assoc, comp_id, comp_id, assoc, ŒπTensorObj_rightUnitor_hom,
      ‚Üê MonoidalCategory.tensor_comp_assoc, id_comp, Iso.inv_hom_id, MonoidalCategory.tensor_id,
      id_comp]
  ¬∑ apply IsInitial.hom_ext
    apply isInitialTensor
    apply tensorIsInitial
    exact isInitialTensorUnitApply C k h'-/

end

variable
  [‚àÄ (X‚ÇÅ X‚ÇÇ : GradedObject I C), HasTensor X‚ÇÅ X‚ÇÇ]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C), HasAssociator X‚ÇÅ X‚ÇÇ X‚ÇÉ]
  [DecidableEq I] [HasInitial C]
  [‚àÄ X‚ÇÅ, PreservesColimit (Functor.empty.{0} C)
    ((curryObj (MonoidalCategory.tensor C)).obj X‚ÇÅ)]
  [‚àÄ X‚ÇÇ, PreservesColimit (Functor.empty.{0} C)
    ((curryObj (MonoidalCategory.tensor C)).flip.obj X‚ÇÇ)]

/-noncomputable instance : MonoidalCategory (GradedObject I C) where
  tensorObj X Y := tensorObj X Y
  tensorHom f g := tensorHom f g
  tensorHom_def f g := tensorHom_def f g
  whiskerLeft X _ _ œÜ := whiskerLeft X œÜ
  whiskerRight {_ _ œÜ Y} := whiskerRight œÜ Y
  tensorUnit' := tensorUnit
  associator X‚ÇÅ X‚ÇÇ X‚ÇÉ := associator X‚ÇÅ X‚ÇÇ X‚ÇÉ
  associator_naturality := sorry
  leftUnitor X := leftUnitor X
  leftUnitor_naturality := leftUnitor_naturality
  rightUnitor X := rightUnitor X
  rightUnitor_naturality := rightUnitor_naturality
  tensor_comp f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ := tensor_comp f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ
  pentagon := sorry
  triangle X‚ÇÅ X‚ÇÇ := sorry-/

end GradedObject

end CategoryTheory
