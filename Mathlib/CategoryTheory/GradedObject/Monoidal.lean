/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Kim Liesinger
-/
import Mathlib.CategoryTheory.GradedObject.Basic
import Mathlib.CategoryTheory.Limits.Shapes.Biproducts
import Mathlib.CategoryTheory.Monoidal.Category
import Mathlib.CategoryTheory.Monoidal.Preadditive
import Mathlib.Data.Finset.NatAntidiagonal
import Mathlib.Data.Fintype.Sigma

/-!
# The monoidal structure on graded objects in a monoidal category.

This is a warm-up to the monoidal structure on chain complexes.

As there is a faithful functor from chain complexes to graded objects (forgetting the differentials)
the result here can be used as an ingredient for the chain complex case,
to avoid having to check the pentagon, triangle, and naturality equations.

One still needs to construct the differential on the tensor product of chain complexes,
and check that the unitors and associator defined here commute with it.

For now we just do the special case of objects graded by `‚Ñï`.
We may need to generalize API around `antidiagonal` in order to generalize.
-/

universe v u

noncomputable section

namespace CategoryTheory

open CategoryTheory CategoryTheory.Category CategoryTheory.Limits
open scoped MonoidalCategory

variable {V : Type u} [Category.{v} V] [Preadditive V] [MonoidalCategory V] [MonoidalPreadditive V]
  [HasFiniteBiproducts V] [HasZeroObject V]

open ZeroObject

namespace GradedObject

namespace MonoidalCategory

open Finset.Nat

/-- The tensor product of graded objects `X` and `Y` is, in each degree `i`,
the biproduct over `a + b = i` of `X a ‚äó Y b`. -/
def tensorObj (X Y : GradedObject ‚Ñï V) (i : ‚Ñï) : V :=
  biproduct (fun p : antidiagonal i => (X p.1.1) ‚äó (Y p.1.2))

/-- The tensor product of morphisms between graded objects is the diagonal map
consisting of tensor products of components. -/
def tensorHom {W X Y Z : GradedObject ‚Ñï V} (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) :
    tensorObj W Y ‚ü∂ tensorObj X Z :=
  fun _ => biproduct.map fun p => f p.1.1 ‚äó g p.1.2

/-- The tensor unit in graded `V`-objects is the tensor unit in `V`, supported in grading 0. -/
def tensorUnit : GradedObject ‚Ñï V
| 0 => ùüô_ V
| _ + 1 => 0

/-- The left unitor for graded objects. -/
@[simps!]
def leftUnitor (X : GradedObject ‚Ñï V) : tensorObj tensorUnit X ‚âÖ X :=
  GradedObject.mkIso fun i =>
    { hom :=
        biproduct.œÄ (fun p : antidiagonal i => (tensorUnit p.1.1) ‚äó (X p.1.2)) ‚ü®‚ü®0, i‚ü©, by simp‚ü© ‚â´
          (Œª_ (X i)).hom
      inv := (Œª_ (X i)).inv ‚â´
        biproduct.Œπ (fun p : antidiagonal i => (tensorUnit p.1.1) ‚äó (X p.1.2)) ‚ü®‚ü®0, i‚ü©, by simp‚ü©
      hom_inv_id := by
        dsimp [tensorObj]
        ext j j'
        simp [biproduct.Œπ_œÄ, biproduct.Œπ_œÄ_assoc]
        split_ifs with h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ h‚ÇÖ h‚ÇÜ h‚Çá <;> (try subst h‚ÇÅ) <;> (try subst h‚Çá) <;> simp_all
        rcases j' with ‚ü®‚ü®a, b‚ü©, w‚ü©
        simp at w
        subst w
        simp at h‚ÇÅ
        symm
        apply IsZero.eq_zero_of_src
        apply (IsZero.iff_id_eq_zero _).mpr
        match a, h‚ÇÅ with
        | a + 1, _ => simp [tensorUnit, ‚Üê MonoidalCategory.tensor_id]
      inv_hom_id := by simp }

/-- The right unitor for graded objects. -/
@[simps!]
def rightUnitor (X : GradedObject ‚Ñï V) : tensorObj X tensorUnit ‚âÖ X :=
  GradedObject.mkIso fun i =>
    { hom :=
        biproduct.œÄ (fun p : antidiagonal i => (X p.1.1) ‚äó (tensorUnit p.1.2)) ‚ü®‚ü®i, 0‚ü©, by simp‚ü© ‚â´
          (œÅ_ (X i)).hom
      inv := (œÅ_ (X i)).inv ‚â´
        biproduct.Œπ (fun p : antidiagonal i => (X p.1.1) ‚äó (tensorUnit p.1.2)) ‚ü®‚ü®i, 0‚ü©, by simp‚ü©
      hom_inv_id := by
        dsimp [tensorObj]
        ext j j'
        simp [biproduct.Œπ_œÄ, biproduct.Œπ_œÄ_assoc]
        split_ifs with h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ h‚ÇÖ h‚ÇÜ h‚Çá <;> (try subst h‚ÇÅ) <;> (try subst h‚Çá) <;> simp_all
        rcases j' with ‚ü®‚ü®a, b‚ü©, w‚ü©
        simp at w
        subst w
        simp at h‚ÇÅ
        symm
        apply IsZero.eq_zero_of_src
        apply (IsZero.iff_id_eq_zero _).mpr
        match b, h‚ÇÅ with
        | b + 1, _ => simp [tensorUnit, ‚Üê MonoidalCategory.tensor_id]
      inv_hom_id := by simp }

/-- The 1st step of constructing the associator for graded objects. -/
def associator_distributor (X Y Z : GradedObject ‚Ñï V) (i : ‚Ñï) :
    (tensorObj (tensorObj X Y) Z) i ‚âÖ
      biproduct (fun p : antidiagonal i =>
        biproduct (fun q : antidiagonal p.1.1 => (X q.1.1 ‚äó Y q.1.2) ‚äó Z p.1.2)) :=
  biproduct.mapIso fun _ => rightDistributor _ _

/-- The 2nd step of constructing the associator for graded objects. -/
def associator_iterated (X Y Z : GradedObject ‚Ñï V) (i : ‚Ñï) :
    biproduct (fun p : antidiagonal i =>
        biproduct (fun q : antidiagonal p.1.1 => (X q.1.1 ‚äó Y q.1.2) ‚äó Z p.1.2))
      ‚âÖ biproduct (fun p : Œ£ p‚ÇÅ : antidiagonal i, antidiagonal p‚ÇÅ.1.1 =>
          (X p.2.1.1 ‚äó Y p.2.1.2) ‚äó Z p.1.1.2) :=
  biproductBiproductIso _ _

/-- The 3rd step of constructing the associator for graded objects. -/
def associator_underlying (X Y Z : GradedObject ‚Ñï V) (i : ‚Ñï) :
    biproduct (fun p : Œ£ p‚ÇÅ : antidiagonal i, antidiagonal p‚ÇÅ.1.1 =>
        (X p.2.1.1 ‚äó Y p.2.1.2) ‚äó Z p.1.1.2)
    ‚âÖ biproduct (fun p : Œ£ p‚ÇÅ : antidiagonal i, antidiagonal p‚ÇÅ.1.1 =>
      X p.2.1.1 ‚äó (Y p.2.1.2 ‚äó Z p.1.1.2)) :=
  biproduct.mapIso fun _ => Œ±_ _ _ _

-- Move this to `Finset.NatAntidiagonal`?
@[simps apply symm_apply]
def associator_equiv :
    (Œ£ p‚ÇÅ : antidiagonal i, antidiagonal p‚ÇÅ.1.1) ‚âÉ (Œ£ p‚ÇÅ : antidiagonal i, antidiagonal p‚ÇÅ.1.2) :=
  { toFun := fun ‚ü®‚ü®‚ü®ab, c‚ü©, w‚ÇÅ‚ü©, ‚ü®‚ü®a, b‚ü©, w‚ÇÇ‚ü©‚ü© =>
      ‚ü®‚ü®‚ü®a, b + c‚ü©, by simp at w‚ÇÅ w‚ÇÇ; subst w‚ÇÅ w‚ÇÇ; simp [add_assoc]‚ü©, ‚ü®‚ü®b, c‚ü©, by simp‚ü©‚ü©
    invFun := fun ‚ü®‚ü®‚ü®a, bc‚ü©, w‚ÇÅ‚ü©, ‚ü®‚ü®b, c‚ü©, w‚ÇÇ‚ü©‚ü© =>
      ‚ü®‚ü®‚ü®a + b, c‚ü©, by simp at w‚ÇÅ w‚ÇÇ; subst w‚ÇÅ w‚ÇÇ; simp [add_assoc]‚ü©, ‚ü®‚ü®a, b‚ü©, by simp‚ü©‚ü©
    left_inv := fun ‚ü®‚ü®‚ü®ab, c‚ü©, w‚ÇÅ‚ü©, ‚ü®‚ü®a, b‚ü©, w‚ÇÇ‚ü©‚ü© => by
      simp at w‚ÇÅ w‚ÇÇ
      subst w‚ÇÇ
      subst w‚ÇÅ
      simp
    right_inv := fun ‚ü®‚ü®‚ü®a, bc‚ü©, w‚ÇÅ‚ü©, ‚ü®‚ü®b, c‚ü©, w‚ÇÇ‚ü©‚ü© => by
      simp at w‚ÇÅ w‚ÇÇ
      subst w‚ÇÇ
      subst w‚ÇÅ
      simp }

/-- The 4th step of constructing the associator for graded objects. -/
def associator_whisker_equiv (X Y Z : GradedObject ‚Ñï V) (i : ‚Ñï) :
    biproduct (fun p : Œ£ p‚ÇÅ : antidiagonal i, antidiagonal p‚ÇÅ.1.1 =>
      X p.2.1.1 ‚äó (Y p.2.1.2 ‚äó Z p.1.1.2)) ‚âÖ
    biproduct (fun p : Œ£ p‚ÇÅ : antidiagonal i, antidiagonal p‚ÇÅ.1.2 =>
      X p.1.1.1 ‚äó (Y p.2.1.1 ‚äó Z p.2.1.2)) :=
  biproduct.whisker_equiv associator_equiv fun ‚ü®‚ü®‚ü®_, _‚ü©, _‚ü©, ‚ü®‚ü®_, _‚ü©, _‚ü©‚ü© => Iso.refl _

/-- The 5th step of constructing the associator for graded objects. -/
def associator_iterated' (X Y Z : GradedObject ‚Ñï V) (i : ‚Ñï) :
    biproduct (fun p : Œ£ p‚ÇÅ : antidiagonal i, antidiagonal p‚ÇÅ.1.2 =>
      X p.1.1.1 ‚äó (Y p.2.1.1 ‚äó Z p.2.1.2)) ‚âÖ
    biproduct (fun p : antidiagonal i =>
      biproduct (fun q : antidiagonal p.1.2 => X p.1.1 ‚äó (Y q.1.1 ‚äó Z q.1.2))) :=
  (biproductBiproductIso
    (fun p : antidiagonal i => antidiagonal p.1.2)
    (fun (p : antidiagonal i) (q : antidiagonal p.1.2) => X p.1.1 ‚äó (Y q.1.1 ‚äó Z q.1.2))).symm

/-- The 6th step of constructing the associator for graded objects. -/
def associator_distributor' (X Y Z : GradedObject ‚Ñï V) (i : ‚Ñï) :
    biproduct (fun p : antidiagonal i =>
      biproduct (fun q : antidiagonal p.1.2 => X p.1.1 ‚äó (Y q.1.1 ‚äó Z q.1.2))) ‚âÖ
      (tensorObj X (tensorObj Y Z)) i :=
  biproduct.mapIso fun _ => (leftDistributor _ _).symm

/-- The associator for graded objects. -/
def associator (X Y Z : GradedObject ‚Ñï V) :
    tensorObj (tensorObj X Y) Z ‚âÖ tensorObj X (tensorObj Y Z) :=
  GradedObject.mkIso (fun i =>
    associator_distributor X Y Z i ‚â™‚â´ associator_iterated X Y Z i ‚â™‚â´
      associator_underlying X Y Z i ‚â™‚â´ associator_whisker_equiv X Y Z i ‚â™‚â´
      associator_iterated' X Y Z i ‚â™‚â´ associator_distributor' X Y Z i)

/--
The inclusion of the tensor product of the components of two graded objects
into a component of their tensor product.

The construction includes as a hypothesis that the gradings sum appropriately,
to avoid dependent type theory difficulties.
-/
def ŒπTensorObj (X Y : GradedObject ‚Ñï V) (p q n : ‚Ñï) (h : p + q = n) :
    X p ‚äó Y q ‚ü∂ tensorObj X Y n :=
  biproduct.Œπ (fun p : antidiagonal n => (X p.1.1) ‚äó (Y p.1.2))
    ‚ü®‚ü®p, q‚ü©, by simpa using h‚ü©

@[reassoc (attr := simp)]
lemma ŒπTensorObj_comp_tensorHom {X Y X' Y' : GradedObject ‚Ñï V}
    (f : X ‚ü∂ X') (g : Y ‚ü∂ Y') (p q n : ‚Ñï) (h : p + q = n) :
    ŒπTensorObj X Y p q n h ‚â´ tensorHom f g n =
      (f p ‚äó g q) ‚â´ ŒπTensorObj X' Y' p q n h:= by
  dsimp [ŒπTensorObj, tensorHom]
  apply biproduct.Œπ_map

@[ext]
lemma tensorObj_ext (X Y : GradedObject ‚Ñï V) (n : ‚Ñï) {Z : V}
    (f‚ÇÅ f‚ÇÇ : tensorObj X Y n ‚ü∂ Z)
    (h : ‚àÄ (p q : ‚Ñï) (h : p + q = n), ŒπTensorObj X Y p q n h ‚â´ f‚ÇÅ = ŒπTensorObj X Y p q n h ‚â´ f‚ÇÇ) :
    f‚ÇÅ = f‚ÇÇ := by
  apply biproduct.hom_ext'
  rintro ‚ü®‚ü®p, q‚ü©, hpq‚ü©
  simp only [Finset.Nat.mem_antidiagonal] at hpq
  exact h p q hpq

lemma tensorObj_rightTensor_ext (X Y : GradedObject ‚Ñï V) (n : ‚Ñï) (T : V) {Z : V}
    (f‚ÇÅ f‚ÇÇ : tensorObj X Y n ‚äó T ‚ü∂ Z)
    (h : ‚àÄ (p q : ‚Ñï)
    (h : p + q = n), (ŒπTensorObj X Y p q n h ‚äó ùüô T) ‚â´ f‚ÇÅ = (ŒπTensorObj X Y p q n h ‚äó ùüô T) ‚â´ f‚ÇÇ) :
    f‚ÇÅ = f‚ÇÇ := by
  apply rightDistributor_ext_left
  rintro ‚ü®‚ü®p, q‚ü©, hpq‚ü©
  simp only [Finset.Nat.mem_antidiagonal] at hpq
  exact h p q hpq

lemma tensorObj_leftTensor_ext (X Y : GradedObject ‚Ñï V) (n : ‚Ñï) (T : V) {Z : V}
    (f‚ÇÅ f‚ÇÇ : T ‚äó tensorObj X Y n ‚ü∂ Z)
    (h : ‚àÄ (p q : ‚Ñï)
    (h : p + q = n), (ùüô T ‚äó ŒπTensorObj X Y p q n h) ‚â´ f‚ÇÅ = (ùüô T ‚äó ŒπTensorObj X Y p q n h) ‚â´ f‚ÇÇ) :
    f‚ÇÅ = f‚ÇÇ := by
  apply leftDistributor_ext_left
  rintro ‚ü®‚ü®p, q‚ü©, hpq‚ü©
  simp only [Finset.Nat.mem_antidiagonal] at hpq
  exact h p q hpq

lemma tensorObj_rightTensor_rightTensor_ext (X Y : GradedObject ‚Ñï V) (n : ‚Ñï) (T‚ÇÅ T‚ÇÇ : V) {Z : V}
    (f‚ÇÅ f‚ÇÇ : (tensorObj X Y n ‚äó T‚ÇÅ) ‚äó T‚ÇÇ ‚ü∂ Z)
    (h : ‚àÄ (p q : ‚Ñï)
    (h : p + q = n), ((ŒπTensorObj X Y p q n h ‚äó ùüô T‚ÇÅ) ‚äó ùüô T‚ÇÇ) ‚â´ f‚ÇÅ =
      ((ŒπTensorObj X Y p q n h ‚äó ùüô T‚ÇÅ) ‚äó ùüô T‚ÇÇ) ‚â´ f‚ÇÇ) :
    f‚ÇÅ = f‚ÇÇ := by
  rw [‚Üê cancel_epi (Œ±_ _ _ _).inv]
  apply tensorObj_rightTensor_ext
  intro p q hpq
  simpa only [MonoidalCategory.associator_conjugation, MonoidalCategory.tensor_id,
    assoc, Iso.cancel_iso_hom_left] using h p q hpq

/--
The inclusion of the (left associated) tensor product of the components of three graded objects
into a component of their (left associated) tensor product.

The construction includes as a hypothesis that the gradings sum appropriately,
to avoid dependent type theory difficulties.
-/
def ŒπTensorObj‚ÇÉ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject ‚Ñï V) (p‚ÇÅ p‚ÇÇ p‚ÇÉ n : ‚Ñï) (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ = n) :
    (X‚ÇÅ p‚ÇÅ ‚äó X‚ÇÇ p‚ÇÇ) ‚äó X‚ÇÉ p‚ÇÉ ‚ü∂ tensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ n :=
  ((ŒπTensorObj X‚ÇÅ X‚ÇÇ p‚ÇÅ p‚ÇÇ (p‚ÇÅ + p‚ÇÇ) rfl) ‚äó ùüô (X‚ÇÉ p‚ÇÉ)) ‚â´
    ŒπTensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ (p‚ÇÅ + p‚ÇÇ) p‚ÇÉ n h

lemma ŒπTensorObj‚ÇÉ_eq (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject ‚Ñï V) (p‚ÇÅ p‚ÇÇ p‚ÇÉ n : ‚Ñï) (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ = n)
    (p‚ÇÅ‚ÇÇ : ‚Ñï) (h‚ÇÅ‚ÇÇ : p‚ÇÅ + p‚ÇÇ = p‚ÇÅ‚ÇÇ) :
    ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h =
      (ŒπTensorObj X‚ÇÅ X‚ÇÇ p‚ÇÅ p‚ÇÇ p‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ ‚äó ùüô (X‚ÇÉ p‚ÇÉ)) ‚â´
      ŒπTensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ p‚ÇÅ‚ÇÇ p‚ÇÉ n (by rw [‚Üêh‚ÇÅ‚ÇÇ, h]) := by
  subst h‚ÇÅ‚ÇÇ
  rfl

lemma ŒπTensorObj‚ÇÉ_comp_tensorHom {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y Z : GradedObject ‚Ñï V}
    (f‚ÇÅ : tensorObj X‚ÇÅ X‚ÇÇ ‚ü∂ Y) (f‚ÇÇ : X‚ÇÉ ‚ü∂ Z)
    (p‚ÇÅ p‚ÇÇ p‚ÇÉ n : ‚Ñï) (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ = n) (h‚ÇÅ‚ÇÇ : p‚ÇÅ + p‚ÇÇ = p‚ÇÅ‚ÇÇ) :
    ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h ‚â´ tensorHom f‚ÇÅ f‚ÇÇ n =
      (ŒπTensorObj X‚ÇÅ X‚ÇÇ p‚ÇÅ p‚ÇÇ p‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ ‚â´ f‚ÇÅ p‚ÇÅ‚ÇÇ ‚äó f‚ÇÇ p‚ÇÉ) ‚â´
        ŒπTensorObj Y Z p‚ÇÅ‚ÇÇ p‚ÇÉ n (by rw [‚Üê h‚ÇÅ‚ÇÇ, h]) := by
  rw [ŒπTensorObj‚ÇÉ_eq, assoc, ŒπTensorObj_comp_tensorHom, ‚Üê assoc, ‚Üê MonoidalCategory.tensor_comp,
    id_comp]

@[reassoc (attr := simp)]
lemma ŒπTensorObj‚ÇÉ_comp_tensorHom_tensorHom {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ X‚ÇÉ Y‚ÇÉ : GradedObject ‚Ñï V}
    (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ) (p‚ÇÅ p‚ÇÇ p‚ÇÉ n : ‚Ñï) (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ = n) :
    ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h ‚â´ tensorHom (tensorHom f‚ÇÅ f‚ÇÇ) f‚ÇÉ n =
      ((f‚ÇÅ p‚ÇÅ ‚äó f‚ÇÇ p‚ÇÇ) ‚äó f‚ÇÉ p‚ÇÉ) ‚â´ ŒπTensorObj‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h := by
  dsimp [ŒπTensorObj‚ÇÉ]
  simp only [assoc, ŒπTensorObj_comp_tensorHom]
  simp only [‚Üê assoc]
  conv_lhs => simp only [‚Üê MonoidalCategory.tensor_comp]
  simp only [id_comp]
  simp only [ŒπTensorObj_comp_tensorHom]
  conv_rhs => simp only [‚Üê MonoidalCategory.tensor_comp]
  simp

/--
The inclusion of the (left associated) tensor product of the components of three graded objects
into a component of their (right associated) tensor product.

The construction includes as a hypothesis that the gradings sum appropriately,
to avoid dependent type theory difficulties.
-/
def ŒπTensorObj‚ÇÉ' (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject ‚Ñï V) (p‚ÇÅ p‚ÇÇ p‚ÇÉ n : ‚Ñï) (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ = n) :
    (X‚ÇÅ p‚ÇÅ ‚äó X‚ÇÇ p‚ÇÇ) ‚äó X‚ÇÉ p‚ÇÉ ‚ü∂ tensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) n :=
  (Œ±_ _ _ _).hom ‚â´ (ùüô (X‚ÇÅ p‚ÇÅ) ‚äó ŒπTensorObj X‚ÇÇ X‚ÇÉ p‚ÇÇ p‚ÇÉ (p‚ÇÇ + p‚ÇÉ) rfl) ‚â´
    ŒπTensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) p‚ÇÅ (p‚ÇÇ + p‚ÇÉ) n (by rw [‚Üê add_assoc, h])

lemma ŒπTensorObj‚ÇÉ'_eq (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject ‚Ñï V) (p‚ÇÅ p‚ÇÇ p‚ÇÉ n : ‚Ñï) (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ = n)
    (p‚ÇÇ‚ÇÉ : ‚Ñï) (h‚ÇÇ‚ÇÉ : p‚ÇÇ + p‚ÇÉ = p‚ÇÇ‚ÇÉ) :
    ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h =
      (Œ±_ _ _ _).hom ‚â´ (ùüô (X‚ÇÅ p‚ÇÅ) ‚äó ŒπTensorObj X‚ÇÇ X‚ÇÉ p‚ÇÇ p‚ÇÉ p‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ) ‚â´
      ŒπTensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) p‚ÇÅ p‚ÇÇ‚ÇÉ n (by rw [‚Üê h‚ÇÇ‚ÇÉ, ‚Üê add_assoc, h]) := by
  subst h‚ÇÇ‚ÇÉ
  rfl

lemma ŒπTensorObj‚ÇÉ'_comp_tensorHom {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y Z : GradedObject ‚Ñï V}
    (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : tensorObj X‚ÇÇ X‚ÇÉ ‚ü∂ Z)
    (p‚ÇÅ p‚ÇÇ p‚ÇÉ n : ‚Ñï) (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ = n) (h‚ÇÇ‚ÇÉ : p‚ÇÇ + p‚ÇÉ = p‚ÇÇ‚ÇÉ) :
    ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h ‚â´ tensorHom f‚ÇÅ f‚ÇÇ n =
      (Œ±_ _ _ _).hom ‚â´ (f‚ÇÅ p‚ÇÅ ‚äó ŒπTensorObj X‚ÇÇ X‚ÇÉ p‚ÇÇ p‚ÇÉ p‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ ‚â´ f‚ÇÇ p‚ÇÇ‚ÇÉ) ‚â´
        ŒπTensorObj Y Z p‚ÇÅ p‚ÇÇ‚ÇÉ n (by rw [‚Üê h‚ÇÇ‚ÇÉ, ‚Üê add_assoc, h]) := by
  rw [ŒπTensorObj‚ÇÉ'_eq]
  simp only [assoc, ŒπTensorObj_comp_tensorHom, Iso.cancel_iso_hom_left]
  rw [‚Üê MonoidalCategory.tensor_comp_assoc, id_comp]

@[reassoc (attr := simp)]
lemma ŒπTensorObj‚ÇÉ'_comp_tensorHom_tensorHom {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ X‚ÇÉ Y‚ÇÉ : GradedObject ‚Ñï V}
    (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ) (p‚ÇÅ p‚ÇÇ p‚ÇÉ n : ‚Ñï) (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ = n) :
    ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h ‚â´ tensorHom f‚ÇÅ (tensorHom f‚ÇÇ f‚ÇÉ) n =
      ((f‚ÇÅ p‚ÇÅ ‚äó f‚ÇÇ p‚ÇÇ) ‚äó f‚ÇÉ p‚ÇÉ) ‚â´ ŒπTensorObj‚ÇÉ' Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h := by
  dsimp [ŒπTensorObj‚ÇÉ']
  simp only [MonoidalCategory.associator_naturality_assoc]
  simp only [assoc, Iso.cancel_iso_hom_left]
  simp only [ŒπTensorObj_comp_tensorHom]
  simp only [‚Üê assoc]
  conv_lhs => simp only [‚Üê MonoidalCategory.tensor_comp]
  simp only [id_comp]
  simp only [ŒπTensorObj_comp_tensorHom]
  conv_rhs => simp only [‚Üê MonoidalCategory.tensor_comp]
  simp

@[ext]
lemma tensorObj‚ÇÉ_ext (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject ‚Ñï V) (n : ‚Ñï) {Z : V}
    (f‚ÇÅ f‚ÇÇ : tensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ n ‚ü∂ Z)
    (h : ‚àÄ (p‚ÇÅ p‚ÇÇ p‚ÇÉ : ‚Ñï) (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ = n),
      ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h ‚â´ f‚ÇÅ = ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h ‚â´ f‚ÇÇ) :
    f‚ÇÅ = f‚ÇÇ := by
  apply tensorObj_ext
  intro p‚ÇÅ‚ÇÇ p‚ÇÉ h‚ÇÅ‚ÇÇ‚ÇÉ
  apply tensorObj_rightTensor_ext
  intro p‚ÇÅ p‚ÇÇ h‚ÇÅ‚ÇÇ
  simpa only [ŒπTensorObj‚ÇÉ_eq X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n (by rw [h‚ÇÅ‚ÇÇ, h‚ÇÅ‚ÇÇ‚ÇÉ]) p‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ,
    assoc] using h p‚ÇÅ p‚ÇÇ p‚ÇÉ (by rw [h‚ÇÅ‚ÇÇ, h‚ÇÅ‚ÇÇ‚ÇÉ])

lemma tensorObj‚ÇÉ_rightTensor_ext (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject ‚Ñï V) (n : ‚Ñï) (T : V) {Z : V}
    (f‚ÇÅ f‚ÇÇ : tensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ n ‚äó T ‚ü∂ Z)
    (h : ‚àÄ (p‚ÇÅ p‚ÇÇ p‚ÇÉ : ‚Ñï) (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ = n),
      (ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h ‚äó ùüô T) ‚â´ f‚ÇÅ =
      (ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h ‚äó ùüô T) ‚â´ f‚ÇÇ) :
    f‚ÇÅ = f‚ÇÇ := by
  apply tensorObj_rightTensor_ext
  intro p‚ÇÅ‚ÇÇ p‚ÇÉ h‚ÇÅ‚ÇÇ‚ÇÉ
  apply tensorObj_rightTensor_rightTensor_ext
  intro p‚ÇÅ p‚ÇÇ h‚ÇÅ‚ÇÇ
  simpa only [ŒπTensorObj‚ÇÉ_eq X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n (by rw [h‚ÇÅ‚ÇÇ, h‚ÇÅ‚ÇÇ‚ÇÉ]) p‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ,
    MonoidalCategory.associator_conjugation, MonoidalCategory.tensor_id, assoc,
    Iso.cancel_iso_hom_left, MonoidalCategory.comp_tensor_id] using h p‚ÇÅ p‚ÇÇ p‚ÇÉ (by rw [h‚ÇÅ‚ÇÇ, h‚ÇÅ‚ÇÇ‚ÇÉ])

-- This increase to maxHeartbeats is needed during CI, when `X says Y` is reverified.
set_option maxHeartbeats 300000 in
@[reassoc (attr := simp)]
lemma ŒπTensorObj‚ÇÉ_comp_associator_hom (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject ‚Ñï V)
    (p‚ÇÅ p‚ÇÇ p‚ÇÉ n : ‚Ñï) (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ = n) :
    ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h ‚â´ (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom n =
      ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h := by
  -- We progressively unfold the definition of `associator`, starting at its leftmost factors,
  -- to avoid having too large a goal.
  -- The proof is mostly just by `simp`.
  have helper : ‚àÄ {Œ± : Type} {Œ≤ : Œ± ‚Üí Type} (p : Œ£ a : Œ±, Œ≤ a) (a : Œ±) (b : a = p.1 ‚Üí Œ≤ p.1),
    (‚àÉ hp : a = p.1, b hp = p.2) ‚Üî ‚àÉ hp : a = p.1, ‚ü®a, cast (congrArg Œ≤ hp.symm) (b hp)‚ü© = p := by
    intros Œ± Œ≤ p a b
    constructor
    ¬∑ rintro ‚ü®rfl, w‚ü©
      use rfl
      simp [w]
    ¬∑ rintro ‚ü®rfl, w‚ü©
      use rfl
      cases p
      simp_all
  dsimp [associator]
  dsimp [ŒπTensorObj‚ÇÉ, ŒπTensorObj‚ÇÉ', ŒπTensorObj, associator]
  dsimp [associator_distributor, associator_iterated]
  simp? says simp only [assoc, biproduct.Œπ_map_assoc, biproduct.Œπ_comp_lift_assoc, ne_eq,
      biproduct_Œπ_comp_rightDistributor_hom_assoc]
  simp? [biproduct.Œπ_œÄ_biproduct_assoc, dite_comp, comp_dite] says
    simp only [ne_eq, biproduct.Œπ_œÄ_biproduct_assoc, biproduct.iterated_reindex, dite_comp,
      biproduct.whisker_equiv_hom_comp_œÄ, eqToIso.inv, eqToHom_trans, zero_comp, comp_dite,
      comp_zero]
  simp? [biproduct.Œπ_œÄ_assoc, dite_comp, dite_dite, Equiv.eq_symm_apply] says
    simp only [ne_eq, Equiv.eq_symm_apply, biproduct.Œπ_œÄ_assoc, dite_comp, eqToHom_trans,
      zero_comp, dite_dite]
  simp? [Equiv.transport, helper] says
    simp only [Equiv.transport, Equiv.cast_apply, Finset.mem_val, mem_antidiagonal, helper,
      cast_cast, cast_eq, exists_prop, Sigma.eq_fst_and_eq_iff]
  conv in biproduct.lift _ =>
    -- Unfortunately `simp` does not successfully apply `biproduct.lift_dite` here,
    -- presumably because of unification difficulties.
    -- We use `convert` to provide some encouragement.
    tactic => convert biproduct.lift_dite _
  simp? says simp only [eqToHom_refl, id_comp]
  dsimp only [associator_underlying]
  simp? says simp only [biproduct.mapIso_hom, biproduct.Œπ_map_assoc, Iso.cancel_iso_hom_left]
  dsimp only [associator_whisker_equiv]
  simp? says simp only [associator_equiv_apply, biproduct.Œπ_comp_whisker_equiv_hom_assoc,
    Iso.refl_inv, id_comp]
  dsimp only [associator_iterated']
  simp? says simp only [Iso.symm_hom, biproductBiproductIso_inv, biproduct.Œπ_comp_lift_assoc,
    biproduct.Œπ_comp_lift, ne_eq, Sigma.mk.inj_iff, not_and]
  simp? [biproduct.Œπ_œÄ] says simp only [ne_eq, Sigma.mk.inj_iff, not_and, biproduct.Œπ_œÄ]
  simp only [Sigma.ext_iff']
  simp only [dite_exists]
  simp? says simp only [Finset.mem_val, mem_antidiagonal, biproduct.lift_dite_irrel,
    biproduct.lift_zero]
  conv in biproduct.lift _ =>
    -- As above, `simp` can not apply `biproduct.lift_dite` here.
    tactic => convert biproduct.lift_dite _
  conv in biproduct.lift _ =>
    tactic => convert biproduct.lift_dite _
  simp? says simp only [cast_eq, eqToHom_refl, id_comp, assoc]
  dsimp only [associator_distributor']
  simp? says simp only [biproduct.mapIso_hom, Iso.symm_hom, biproduct.Œπ_map,
    biproduct_Œπ_comp_leftDistributor_inv_assoc]

@[reassoc (attr := simp)]
lemma ŒπTensorObj‚ÇÉ'_comp_associator_inv (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject ‚Ñï V)
    (p‚ÇÅ p‚ÇÇ p‚ÇÉ n : ‚Ñï) (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ = n) :
    ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h ‚â´ (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).inv n =
      ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h := by
  rw [‚Üê cancel_mono ((GradedObject.eval n).map (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom), assoc]
  change _ ‚â´ (GradedObject.eval n).map (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).inv ‚â´ _ = _
  rw [‚Üê Functor.map_comp, Iso.inv_hom_id, Functor.map_id, comp_id]
  exact (ŒπTensorObj‚ÇÉ_comp_associator_hom X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h).symm

/--
The inclusion of the (left associated) tensor product of the components of four graded objects
into a component of their (right associated) tensor product.

The construction includes as a hypothesis that the gradings sum appropriately,
to avoid dependent type theory difficulties.
-/
def ŒπTensorObj‚ÇÑ (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : GradedObject ‚Ñï V) (p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n : ‚Ñï)
    (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ + p‚ÇÑ = n) :
    ((X‚ÇÅ p‚ÇÅ ‚äó X‚ÇÇ p‚ÇÇ) ‚äó X‚ÇÉ p‚ÇÉ) ‚äó X‚ÇÑ p‚ÇÑ ‚ü∂ tensorObj (tensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ) X‚ÇÑ n :=
  (ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ (p‚ÇÅ + p‚ÇÇ + p‚ÇÉ) rfl ‚äó ùüô (X‚ÇÑ p‚ÇÑ)) ‚â´
    ŒπTensorObj _ X‚ÇÑ (p‚ÇÅ + p‚ÇÇ + p‚ÇÉ) p‚ÇÑ n h

lemma ŒπTensorObj‚ÇÑ_eq (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : GradedObject ‚Ñï V) (p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n : ‚Ñï)
    (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ + p‚ÇÑ = n) (p‚ÇÅ‚ÇÇ‚ÇÉ : ‚Ñï) (h‚ÇÅ‚ÇÇ‚ÇÉ : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ = p‚ÇÅ‚ÇÇ‚ÇÉ) :
  ŒπTensorObj‚ÇÑ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n h =
  (ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÅ‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÇ‚ÇÉ ‚äó ùüô (X‚ÇÑ p‚ÇÑ)) ‚â´
    ŒπTensorObj _ X‚ÇÑ p‚ÇÅ‚ÇÇ‚ÇÉ p‚ÇÑ n (by rw [‚Üê h‚ÇÅ‚ÇÇ‚ÇÉ, h]) := by
  subst h‚ÇÅ‚ÇÇ‚ÇÉ
  rfl

lemma ŒπTensorObj‚ÇÑ_eq' (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : GradedObject ‚Ñï V) (p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n : ‚Ñï)
    (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ + p‚ÇÑ = n) (p‚ÇÅ‚ÇÇ : ‚Ñï) (h‚ÇÅ‚ÇÇ : p‚ÇÅ + p‚ÇÇ = p‚ÇÅ‚ÇÇ) :
  ŒπTensorObj‚ÇÑ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n h =
    ((ŒπTensorObj X‚ÇÅ X‚ÇÇ p‚ÇÅ p‚ÇÇ p‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ ‚äó ùüô (X‚ÇÉ p‚ÇÉ)) ‚äó ùüô (X‚ÇÑ p‚ÇÑ)) ‚â´
      ŒπTensorObj‚ÇÉ (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ X‚ÇÑ p‚ÇÅ‚ÇÇ p‚ÇÉ p‚ÇÑ n (by rw [‚Üê h‚ÇÅ‚ÇÇ, h]) := by
  rw [ŒπTensorObj‚ÇÑ_eq X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n h (p‚ÇÅ + p‚ÇÇ + p‚ÇÉ) rfl,
    ŒπTensorObj‚ÇÉ_eq X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ (p‚ÇÅ + p‚ÇÇ + p‚ÇÉ) rfl p‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ,
    ŒπTensorObj‚ÇÉ_eq (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ X‚ÇÑ p‚ÇÅ‚ÇÇ p‚ÇÉ p‚ÇÑ n (by rw [‚Üê h‚ÇÅ‚ÇÇ, h])
      (p‚ÇÅ + p‚ÇÇ + p‚ÇÉ) (by rw [‚Üê h‚ÇÅ‚ÇÇ])]
  simp only [MonoidalCategory.comp_tensor_id, MonoidalCategory.associator_conjugation,
    MonoidalCategory.tensor_id, assoc]

@[ext]
lemma tensorObj‚ÇÑ_ext (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : GradedObject ‚Ñï V) (n : ‚Ñï) {Z : V}
    (f‚ÇÅ f‚ÇÇ : tensorObj (tensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ) X‚ÇÑ n ‚ü∂ Z)
    (h : ‚àÄ (p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ : ‚Ñï) (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ + p‚ÇÑ = n),
      ŒπTensorObj‚ÇÑ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n h ‚â´ f‚ÇÅ = ŒπTensorObj‚ÇÑ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n h ‚â´ f‚ÇÇ) :
    f‚ÇÅ = f‚ÇÇ := by
  apply tensorObj_ext
  intro p‚ÇÅ‚ÇÇ‚ÇÉ p‚ÇÑ h‚ÇÅ‚ÇÇ‚ÇÉ
  apply tensorObj‚ÇÉ_rightTensor_ext
  intro p‚ÇÅ p‚ÇÇ p‚ÇÉ h‚ÇÅ‚ÇÇ‚ÇÉ'
  simpa only [ŒπTensorObj‚ÇÑ_eq X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n (by rw [h‚ÇÅ‚ÇÇ‚ÇÉ', h‚ÇÅ‚ÇÇ‚ÇÉ]) p‚ÇÅ‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÇ‚ÇÉ', assoc]
    using h p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ (by rw [h‚ÇÅ‚ÇÇ‚ÇÉ', h‚ÇÅ‚ÇÇ‚ÇÉ])

@[reassoc]
lemma pentagon_aux‚ÇÅ (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : GradedObject ‚Ñï V) (p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n : ‚Ñï)
    (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ + p‚ÇÑ = n) (p‚ÇÅ‚ÇÇ : ‚Ñï) (h‚ÇÅ‚ÇÇ : p‚ÇÅ + p‚ÇÇ = p‚ÇÅ‚ÇÇ) (p‚ÇÉ‚ÇÑ : ‚Ñï) (h‚ÇÉ‚ÇÑ : p‚ÇÉ + p‚ÇÑ = p‚ÇÉ‚ÇÑ) :
    ((ŒπTensorObj X‚ÇÅ X‚ÇÇ p‚ÇÅ p‚ÇÇ p‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ ‚äó ùüô (X‚ÇÉ p‚ÇÉ)) ‚äó ùüô (X‚ÇÑ p‚ÇÑ)) ‚â´
      ŒπTensorObj‚ÇÉ' (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ X‚ÇÑ p‚ÇÅ‚ÇÇ p‚ÇÉ p‚ÇÑ n (by rw [‚Üê h‚ÇÅ‚ÇÇ, h]) =
      (Œ±_ _ _ _).hom ‚â´ (ùüô _ ‚äó ŒπTensorObj X‚ÇÉ X‚ÇÑ p‚ÇÉ p‚ÇÑ p‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ) ‚â´
        ŒπTensorObj‚ÇÉ X‚ÇÅ X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ) p‚ÇÅ p‚ÇÇ p‚ÇÉ‚ÇÑ n (by rw [‚Üê h‚ÇÉ‚ÇÑ, ‚Üê add_assoc, h]) := by
  rw [ŒπTensorObj‚ÇÉ'_eq (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ X‚ÇÑ p‚ÇÅ‚ÇÇ p‚ÇÉ p‚ÇÑ n (by rw [‚Üê h‚ÇÅ‚ÇÇ, h]) p‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ,
    ŒπTensorObj‚ÇÉ_eq X‚ÇÅ X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ) p‚ÇÅ p‚ÇÇ p‚ÇÉ‚ÇÑ n (by rw [‚Üê h‚ÇÉ‚ÇÑ, ‚Üê add_assoc, h]) p‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ]
  simp only [MonoidalCategory.associator_conjugation, MonoidalCategory.tensor_id, assoc,
    Iso.inv_hom_id_assoc, MonoidalCategory.tensor_id_comp_id_tensor_assoc,
    MonoidalCategory.id_tensor_comp_tensor_id_assoc]

lemma pentagon_aux‚ÇÇ (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : GradedObject ‚Ñï V) (p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n : ‚Ñï)
    (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ + p‚ÇÑ = n) (p‚ÇÅ‚ÇÇ‚ÇÉ : ‚Ñï) (h‚ÇÅ‚ÇÇ‚ÇÉ : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ = p‚ÇÅ‚ÇÇ‚ÇÉ) (p‚ÇÇ‚ÇÉ : ‚Ñï)
    (h‚ÇÇ‚ÇÉ : p‚ÇÇ + p‚ÇÉ = p‚ÇÇ‚ÇÉ):
    (ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÅ‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÇ‚ÇÉ ‚äó ùüô (X‚ÇÑ p‚ÇÑ)) ‚â´
      ŒπTensorObj (tensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ)) X‚ÇÑ p‚ÇÅ‚ÇÇ‚ÇÉ p‚ÇÑ n (by rw [‚Üê h‚ÇÅ‚ÇÇ‚ÇÉ, h]) =
    (((Œ±_ _ _ _).hom ‚â´ (ùüô (X‚ÇÅ p‚ÇÅ) ‚äó ŒπTensorObj X‚ÇÇ X‚ÇÉ p‚ÇÇ p‚ÇÉ p‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ)) ‚äó (ùüô (X‚ÇÑ p‚ÇÑ))) ‚â´
      ŒπTensorObj‚ÇÉ X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) X‚ÇÑ p‚ÇÅ p‚ÇÇ‚ÇÉ p‚ÇÑ n (by rw [‚Üê h‚ÇÇ‚ÇÉ, ‚Üê add_assoc, h]) := by
  rw [ŒπTensorObj‚ÇÉ'_eq X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÅ‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÇ‚ÇÉ p‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ,
    ŒπTensorObj‚ÇÉ_eq X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) X‚ÇÑ p‚ÇÅ p‚ÇÇ‚ÇÉ p‚ÇÑ n
      (by rw [‚Üê h‚ÇÇ‚ÇÉ, ‚Üê add_assoc, h]) p‚ÇÅ‚ÇÇ‚ÇÉ (by rw [‚Üê h‚ÇÇ‚ÇÉ, ‚Üê add_assoc, h‚ÇÅ‚ÇÇ‚ÇÉ])]
  simp only [MonoidalCategory.comp_tensor_id, MonoidalCategory.associator_conjugation, assoc]

@[reassoc]
lemma pentagon_aux‚ÇÉ (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : GradedObject ‚Ñï V) (p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n : ‚Ñï)
    (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ + p‚ÇÑ = n) (p‚ÇÇ‚ÇÉ : ‚Ñï) (h‚ÇÇ‚ÇÉ : p‚ÇÇ + p‚ÇÉ = p‚ÇÇ‚ÇÉ) :
    ŒπTensorObj‚ÇÑ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n h ‚â´
      tensorHom (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom (ùüô X‚ÇÑ) n =
        (((Œ±_ _ _ _).hom ‚â´ ((ùüô (X‚ÇÅ p‚ÇÅ)) ‚äó ŒπTensorObj X‚ÇÇ X‚ÇÉ p‚ÇÇ p‚ÇÉ p‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ)) ‚äó ùüô (X‚ÇÑ p‚ÇÑ)) ‚â´
          ŒπTensorObj‚ÇÉ X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) X‚ÇÑ p‚ÇÅ p‚ÇÇ‚ÇÉ p‚ÇÑ n (by rw [‚Üê h‚ÇÇ‚ÇÉ, ‚Üê add_assoc, h]) := by
  rw [ŒπTensorObj‚ÇÑ_eq X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n h (p‚ÇÅ + p‚ÇÇ + p‚ÇÉ) rfl,
    assoc, ŒπTensorObj_comp_tensorHom]
  dsimp
  rw [‚Üê MonoidalCategory.comp_tensor_id_assoc,
    ŒπTensorObj‚ÇÉ_comp_associator_hom X‚ÇÅ X‚ÇÇ X‚ÇÉ p‚ÇÅ p‚ÇÇ p‚ÇÉ (p‚ÇÅ + p‚ÇÇ + p‚ÇÉ) rfl,
    pentagon_aux‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n h (p‚ÇÅ + p‚ÇÇ + p‚ÇÉ) rfl p‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ]

lemma pentagon_aux‚ÇÑ (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : GradedObject ‚Ñï V) (p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n : ‚Ñï)
    (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ + p‚ÇÑ = n) (p‚ÇÉ‚ÇÑ : ‚Ñï) (h‚ÇÉ‚ÇÑ : p‚ÇÉ + p‚ÇÑ = p‚ÇÉ‚ÇÑ)
    (p‚ÇÇ‚ÇÉ‚ÇÑ : ‚Ñï) (h‚ÇÇ‚ÇÉ‚ÇÑ : p‚ÇÇ + p‚ÇÉ + p‚ÇÑ = p‚ÇÇ‚ÇÉ‚ÇÑ) :
    (ùüô (X‚ÇÅ p‚ÇÅ ‚äó X‚ÇÇ p‚ÇÇ) ‚äó ŒπTensorObj X‚ÇÉ X‚ÇÑ p‚ÇÉ p‚ÇÑ p‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ) ‚â´
    ŒπTensorObj‚ÇÉ' X‚ÇÅ X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ) p‚ÇÅ p‚ÇÇ p‚ÇÉ‚ÇÑ n (by rw [‚Üê h‚ÇÉ‚ÇÑ, ‚Üê add_assoc, h]) =
      (Œ±_ _ _ _).hom ‚â´ (ùüô (X‚ÇÅ p‚ÇÅ) ‚äó (Œ±_ _ _ _).inv) ‚â´
        (ùüô (X‚ÇÅ p‚ÇÅ) ‚äó ŒπTensorObj‚ÇÉ X‚ÇÇ X‚ÇÉ X‚ÇÑ p‚ÇÇ p‚ÇÉ p‚ÇÑ p‚ÇÇ‚ÇÉ‚ÇÑ h‚ÇÇ‚ÇÉ‚ÇÑ) ‚â´
        ŒπTensorObj X‚ÇÅ (tensorObj (tensorObj X‚ÇÇ X‚ÇÉ) X‚ÇÑ) p‚ÇÅ p‚ÇÇ‚ÇÉ‚ÇÑ n
        (by rw [‚Üê h‚ÇÇ‚ÇÉ‚ÇÑ, ‚Üê add_assoc, ‚Üê add_assoc, h]) ‚â´
        tensorHom (ùüô X‚ÇÅ) (associator X‚ÇÇ X‚ÇÉ X‚ÇÑ).hom n := by
  rw [ŒπTensorObj_comp_tensorHom, ‚Üê MonoidalCategory.id_tensor_comp_assoc]
  dsimp
  rw [‚Üê MonoidalCategory.id_tensor_comp_assoc, assoc,
    ŒπTensorObj‚ÇÉ_comp_associator_hom X‚ÇÇ X‚ÇÉ X‚ÇÑ p‚ÇÇ p‚ÇÉ p‚ÇÑ p‚ÇÇ‚ÇÉ‚ÇÑ h‚ÇÇ‚ÇÉ‚ÇÑ,
    ŒπTensorObj‚ÇÉ'_eq X‚ÇÇ X‚ÇÉ X‚ÇÑ p‚ÇÇ p‚ÇÉ p‚ÇÑ p‚ÇÇ‚ÇÉ‚ÇÑ h‚ÇÇ‚ÇÉ‚ÇÑ p‚ÇÉ‚ÇÑ h‚ÇÉ‚ÇÑ,
    ŒπTensorObj‚ÇÉ'_eq X‚ÇÅ X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ) p‚ÇÅ p‚ÇÇ p‚ÇÉ‚ÇÑ n
    (by rw [‚Üê h‚ÇÉ‚ÇÑ, ‚Üê add_assoc, h]) p‚ÇÇ‚ÇÉ‚ÇÑ (by rw [‚Üê h‚ÇÇ‚ÇÉ‚ÇÑ, ‚Üê h‚ÇÉ‚ÇÑ, add_assoc]),
    Iso.inv_hom_id_assoc, MonoidalCategory.id_tensor_comp, assoc,
    ‚Üê MonoidalCategory.tensor_id, MonoidalCategory.associator_conjugation,
    assoc, assoc, Iso.inv_hom_id_assoc]

lemma ŒπTensorObj_comp_leftUnitor_zero (X : GradedObject ‚Ñï V) :
    ŒπTensorObj tensorUnit X 0 p p h ‚â´ (leftUnitor X).hom p = (Œª_ (X p)).hom := by
  simp [ŒπTensorObj, biproduct.Œπ_œÄ]

lemma ŒπTensorObj_comp_leftUnitor_succ (X : GradedObject ‚Ñï V) :
    ŒπTensorObj tensorUnit X (p‚ÇÅ + 1) p‚ÇÇ n h ‚â´ (leftUnitor X).hom n = 0 :=
  IsZero.eq_zero_of_src (IsZero.tensor_right (isZero_zero _) _) _

lemma ŒπTensorObj_comp_rightUnitor_zero (X : GradedObject ‚Ñï V) :
    ŒπTensorObj X tensorUnit p 0 p h ‚â´ (rightUnitor X).hom p = (œÅ_ (X p)).hom := by
  simp [ŒπTensorObj, biproduct.Œπ_œÄ]

lemma ŒπTensorObj_comp_rightUnitor_succ (X : GradedObject ‚Ñï V) :
    ŒπTensorObj X tensorUnit p‚ÇÅ (p‚ÇÇ + 1) n h ‚â´ (rightUnitor X).hom n = 0 :=
  IsZero.eq_zero_of_src (IsZero.tensor_left _ (isZero_zero _)) _

@[simp]
lemma triangle (X‚ÇÅ X‚ÇÇ : GradedObject ‚Ñï V) (p‚ÇÅ p‚ÇÇ p‚ÇÉ n : ‚Ñï) (h : p‚ÇÅ + p‚ÇÇ + p‚ÇÉ = n) :
    ŒπTensorObj‚ÇÉ' X‚ÇÅ tensorUnit X‚ÇÇ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h ‚â´ tensorHom (ùüô X‚ÇÅ) (leftUnitor X‚ÇÇ).hom n =
      ŒπTensorObj‚ÇÉ X‚ÇÅ tensorUnit X‚ÇÇ p‚ÇÅ p‚ÇÇ p‚ÇÉ n h ‚â´ tensorHom (rightUnitor X‚ÇÅ).hom (ùüô X‚ÇÇ) n := by
  cases p‚ÇÇ with
  | zero =>
    rw [ŒπTensorObj‚ÇÉ_comp_tensorHom, ŒπTensorObj‚ÇÉ'_comp_tensorHom, ŒπTensorObj_comp_leftUnitor_zero,
      ŒπTensorObj_comp_rightUnitor_zero]
    dsimp [tensorUnit]
    rw [‚Üê assoc, CategoryTheory.MonoidalCategory.triangle]
    all_goals simp
  | succ p‚ÇÇ =>
    rw [ŒπTensorObj‚ÇÉ_comp_tensorHom, ŒπTensorObj‚ÇÉ'_comp_tensorHom, ŒπTensorObj_comp_leftUnitor_succ,
      ŒπTensorObj_comp_rightUnitor_succ]
    ¬∑ simp
    all_goals (try rfl)

end MonoidalCategory

open MonoidalCategory

instance : MonoidalCategory (GradedObject ‚Ñï V) where
  tensorObj := tensorObj
  tensorHom := tensorHom
  tensorUnit' := tensorUnit
  associator := associator
  leftUnitor := leftUnitor
  rightUnitor := rightUnitor
  leftUnitor_naturality f‚ÇÅ := by
    ext
    simp only [categoryOfGradedObjects_comp, ŒπTensorObj_comp_tensorHom_assoc]
    simp [ŒπTensorObj, biproduct.Œπ_œÄ_assoc]
    split_ifs with h
    ¬∑ rcases h with ‚ü®rfl, rfl‚ü©
      simp [MonoidalCategory.tensorUnit]
    ¬∑ simp
  rightUnitor_naturality f‚ÇÅ := by
    ext n
    simp only [categoryOfGradedObjects_comp, ŒπTensorObj_comp_tensorHom_assoc]
    simp [ŒπTensorObj, biproduct.Œπ_œÄ_assoc]
    split_ifs with h
    ¬∑ rcases h with ‚ü®rfl, rfl‚ü©
      simp [MonoidalCategory.tensorUnit]
    ¬∑ simp
  pentagon X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ := by
    ext n p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ h
    dsimp
    have pentagonV := MonoidalCategory.pentagon (X‚ÇÅ p‚ÇÅ) (X‚ÇÇ p‚ÇÇ) (X‚ÇÉ p‚ÇÉ) (X‚ÇÑ p‚ÇÑ)
    simp only [‚Üê cancel_mono ((ùüô (X‚ÇÅ p‚ÇÅ) ‚äó (Œ±_ (X‚ÇÇ p‚ÇÇ) (X‚ÇÉ p‚ÇÉ) (X‚ÇÑ p‚ÇÑ)).inv)), assoc,
      ‚Üê id_tensor_comp, Iso.hom_inv_id, tensor_id, comp_id] at pentagonV
    -- working on the RHS
    nth_rw 2 [ŒπTensorObj‚ÇÑ_eq' X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n h (p‚ÇÅ + p‚ÇÇ) rfl]
    rw [assoc, ŒπTensorObj‚ÇÉ_comp_associator_hom_assoc (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ X‚ÇÑ (p‚ÇÅ + p‚ÇÇ) p‚ÇÉ p‚ÇÑ n h]
    have eq‚ÇÅ := ((Œ±_ _ _ _).hom ‚â´ (ùüô _ ‚äó ŒπTensorObj X‚ÇÉ X‚ÇÑ p‚ÇÉ p‚ÇÑ (p‚ÇÉ + p‚ÇÑ) rfl)) ‚â´=
      ŒπTensorObj‚ÇÉ_comp_associator_hom X‚ÇÅ X‚ÇÇ (tensorObj X‚ÇÉ X‚ÇÑ) p‚ÇÅ p‚ÇÇ (p‚ÇÉ + p‚ÇÑ) n
        (by rw [‚Üê add_assoc, h])
    simp only [assoc] at eq‚ÇÅ
    rw [pentagon_aux‚ÇÅ_assoc X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n h (p‚ÇÅ + p‚ÇÇ) rfl (p‚ÇÉ + p‚ÇÑ) rfl, eq‚ÇÅ]
    clear eq‚ÇÅ
    -- working on the LHS
    rw [pentagon_aux‚ÇÉ_assoc X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n h (p‚ÇÇ + p‚ÇÉ) rfl,
      ŒπTensorObj‚ÇÉ_comp_associator_hom_assoc, comp_tensor_id,
      associator_conjugation, assoc, assoc, assoc, reassoc_of% pentagonV]
    clear pentagonV
    rw [pentagon_aux‚ÇÑ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ p‚ÇÅ p‚ÇÇ p‚ÇÉ p‚ÇÑ n h (p‚ÇÉ + p‚ÇÑ) rfl (p‚ÇÇ + p‚ÇÉ + p‚ÇÑ) rfl,
      ŒπTensorObj‚ÇÉ'_eq X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) X‚ÇÑ p‚ÇÅ (p‚ÇÇ + p‚ÇÉ) p‚ÇÑ n
        (by rw [‚Üê add_assoc, h]) (p‚ÇÇ + p‚ÇÉ + p‚ÇÑ) rfl,
      ŒπTensorObj‚ÇÉ_eq X‚ÇÇ X‚ÇÉ X‚ÇÑ p‚ÇÇ p‚ÇÉ p‚ÇÑ (p‚ÇÇ + p‚ÇÉ + p‚ÇÑ) rfl (p‚ÇÇ + p‚ÇÉ) rfl]
    simp only [assoc, Iso.inv_hom_id_assoc, id_tensor_comp]

end GradedObject
