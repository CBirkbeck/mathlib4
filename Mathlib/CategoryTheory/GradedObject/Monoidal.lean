import Mathlib.CategoryTheory.GradedObject.Trifunctor

namespace CategoryTheory

variable {I : Type*} [AddMonoid I] {C : Type*} [Category C] [MonoidalCategory C]

namespace MonoidalCategory

variable (C)

@[simps!]
def curriedAssociatorNatIso :
    bifunctorComp‚ÇÅ‚ÇÇ (curryObj (MonoidalCategory.tensor C)) (curryObj (MonoidalCategory.tensor C)) ‚âÖ
      bifunctorComp‚ÇÇ‚ÇÉ (curryObj (MonoidalCategory.tensor C)) (curryObj (MonoidalCategory.tensor C)) :=
  NatIso.ofComponents
    (fun X‚ÇÅ => NatIso.ofComponents
      (fun X‚ÇÇ => NatIso.ofComponents
        (fun X‚ÇÉ => associator X‚ÇÅ X‚ÇÇ X‚ÇÉ)
          (fun {X‚ÇÉ Y‚ÇÉ} œÜ => by simpa using associator_naturality (ùüô X‚ÇÅ) (ùüô X‚ÇÇ) œÜ))
        (fun {X‚ÇÇ Y‚ÇÇ} œÜ => by
          ext X‚ÇÉ
          dsimp [curryObj] -- missing @simps
          simp))
        (fun {X‚ÇÅ Y‚ÇÅ} œÜ => by
          ext X‚ÇÇ X‚ÇÉ
          dsimp [curryObj] -- missing @simps
          simp)

end MonoidalCategory
namespace GradedObject

abbrev HasTensor (X Y : GradedObject I C) : Prop :=
  HasMap (((mapBifunctorFunctor (curryObj (MonoidalCategory.tensor C)) I I).obj X).obj Y)
    (fun x => x.1 + x.2)

noncomputable abbrev tensorObj (X Y : GradedObject I C) [HasTensor X Y] :
    GradedObject I C :=
  mapBifunctorMapObj (curryObj (MonoidalCategory.tensor C)) (fun x => x.1 + x.2) X Y

noncomputable def tensorHom {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) [HasTensor X‚ÇÅ Y‚ÇÅ]
    [HasTensor X‚ÇÇ Y‚ÇÇ] :
    tensorObj X‚ÇÅ Y‚ÇÅ ‚ü∂ tensorObj X‚ÇÇ Y‚ÇÇ :=
  mapBifunctorMapMap _ _ f g

@[simp]
noncomputable def whiskerLeft (X : GradedObject I C) {Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (œÜ : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
    [HasTensor X Y‚ÇÅ] [HasTensor X Y‚ÇÇ] : tensorObj X Y‚ÇÅ ‚ü∂ tensorObj X Y‚ÇÇ :=
      tensorHom (ùüô X) œÜ

@[simp]
noncomputable def whiskerRight {X‚ÇÅ X‚ÇÇ : GradedObject I C} (œÜ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (Y : GradedObject I C)
    [HasTensor X‚ÇÅ Y] [HasTensor X‚ÇÇ Y] : tensorObj X‚ÇÅ Y ‚ü∂ tensorObj X‚ÇÇ Y :=
      tensorHom œÜ (ùüô Y)

@[simp]
lemma tensor_id (X Y : GradedObject I C) [HasTensor X Y] :
    tensorHom (ùüô X) (ùüô Y) = ùüô _ := by
  dsimp [tensorHom]
  simp
  rfl

lemma tensorHom_def {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : GradedObject I C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) [HasTensor X‚ÇÅ Y‚ÇÅ]
    [HasTensor X‚ÇÇ Y‚ÇÇ] [HasTensor X‚ÇÇ Y‚ÇÅ]:
    tensorHom f g = whiskerRight f Y‚ÇÅ ‚â´ whiskerLeft X‚ÇÇ g := by
  dsimp only [tensorHom, mapBifunctorMapMap, whiskerLeft, whiskerRight]
  rw [‚Üê mapMap_comp]
  apply congr_mapMap
  simp

lemma tensor_comp {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : GradedObject I C} (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ X‚ÇÉ)
    (g‚ÇÅ : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) (g‚ÇÇ : Y‚ÇÇ ‚ü∂ Y‚ÇÉ) [HasTensor X‚ÇÅ Y‚ÇÅ] [HasTensor X‚ÇÇ Y‚ÇÇ] [HasTensor X‚ÇÉ Y‚ÇÉ] :
    tensorHom (f‚ÇÅ ‚â´ f‚ÇÇ) (g‚ÇÅ ‚â´ g‚ÇÇ) = tensorHom f‚ÇÅ g‚ÇÅ ‚â´ tensorHom f‚ÇÇ g‚ÇÇ := by
  dsimp only [tensorHom, mapBifunctorMapMap]
  rw [‚Üê mapMap_comp]
  apply congr_mapMap
  simp

abbrev HasAssociator (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C) [HasTensor X‚ÇÅ X‚ÇÇ] [HasTensor X‚ÇÇ X‚ÇÉ]
   [HasTensor (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ] [HasTensor X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ)] :=
  HasGoodAssociator (MonoidalCategory.curriedAssociatorNatIso C)
    (fun ‚ü®i, j‚ü© => i + j) (fun ‚ü®i, j‚ü© => i + j) (fun ‚ü®i, j‚ü© => i + j) (fun ‚ü®i, j‚ü© => i + j)
    (fun ‚ü®i, j, k‚ü© => i + j + k) (fun ‚ü®_, _, _‚ü© => rfl) (fun ‚ü®i, j, k‚ü© => add_assoc i j k)
    X‚ÇÅ X‚ÇÇ X‚ÇÉ

noncomputable def associator (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C) [HasTensor X‚ÇÅ X‚ÇÇ] [HasTensor X‚ÇÇ X‚ÇÉ]
  [HasTensor (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ] [HasTensor X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ)] [H : HasAssociator X‚ÇÅ X‚ÇÇ X‚ÇÉ] :
  tensorObj (tensorObj X‚ÇÅ X‚ÇÇ) X‚ÇÉ ‚âÖ tensorObj X‚ÇÅ (tensorObj X‚ÇÇ X‚ÇÉ) :=
    mapBifunctorBifunctorAssociator (H := H)

variable [‚àÄ (X‚ÇÅ X‚ÇÇ : GradedObject I C), HasTensor X‚ÇÅ X‚ÇÇ]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C), HasAssociator X‚ÇÅ X‚ÇÇ X‚ÇÉ]

/-noncomputable instance : MonoidalCategory (GradedObject I C) where
  tensorObj X Y := tensorObj X Y
  tensorHom f g := mapBifunctorMapMap _ _ f g
  tensorHom_def f g := tensorHom_def f g
  whiskerLeft X _ _ œÜ := whiskerLeft X œÜ
  whiskerRight {_ _ œÜ Y} := whiskerRight œÜ Y
  tensorUnit' := sorry
  associator X‚ÇÅ X‚ÇÇ X‚ÇÉ := associator X‚ÇÅ X‚ÇÇ X‚ÇÉ
  associator_naturality := sorry
  leftUnitor := sorry
  leftUnitor_naturality := sorry
  rightUnitor := sorry
  rightUnitor_naturality := sorry
  tensor_comp f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ := tensor_comp f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ
  pentagon := sorry
  triangle := sorry-/

end GradedObject

end CategoryTheory
