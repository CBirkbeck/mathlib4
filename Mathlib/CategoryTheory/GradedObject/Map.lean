import Mathlib.CategoryTheory.GradedObject

namespace CategoryTheory

open Limits

variable {C D : Type*} [Category C] [Category D]

namespace GradedObject

section

variable {I J : Type*} (X Y Z : GradedObject I C) (œÜ : X ‚ü∂ Y) (œà : Y ‚ü∂ Z) (p : I ‚Üí J)

abbrev HasMap : Prop := ‚àÄ (j : J), HasCoproduct (fun (i : (p ‚Åª¬π' {j})) => X i)

variable [X.HasMap p] [Y.HasMap p] [Z.HasMap p]

noncomputable def mapObj : GradedObject J C := fun j => ‚àê (fun (i : (p ‚Åª¬π' {j})) => X i)

noncomputable def ŒπMapObj (i : I) (j : J) (hij : p i = j) : X i ‚ü∂ X.mapObj p j :=
  Sigma.Œπ (fun (i' : (p ‚Åª¬π' {j})) => X i') ‚ü®i, hij‚ü©

lemma mapObj_ext {A : C} {j : J} (f g : X.mapObj p j ‚ü∂ A)
    (hfg : ‚àÄ (i : I) (hij : p i = j), X.ŒπMapObj p i j hij ‚â´ f = X.ŒπMapObj p i j hij ‚â´ g) :
    f = g := by
  apply Limits.Sigma.hom_ext
  rintro ‚ü®i, hij‚ü©
  exact hfg i hij

attribute [local ext] mapObj_ext

noncomputable def descMapObj {A : C} {j : J} (œÜ : ‚àÄ (i : I) (_ : p i = j), X i ‚ü∂ A) :
    X.mapObj p j ‚ü∂ A :=
  Limits.Sigma.desc (fun x => œÜ x.1 x.2)

@[reassoc (attr := simp)]
lemma Œπ_descMapObj {A : C} {j : J} (œÜ : ‚àÄ (i : I) (_ : p i = j), X i ‚ü∂ A) (i : I) (hi : p i = j) :
    X.ŒπMapObj p i j hi ‚â´ X.descMapObj p œÜ = œÜ i hi := by
  simp [descMapObj, ŒπMapObj]

variable {X Y}

noncomputable def mapMap : X.mapObj p ‚ü∂ Y.mapObj p := fun _ => Limits.Sigma.map (fun i => œÜ i)

@[reassoc (attr := simp)]
lemma Œπ_mapMap (i : I) (j : J) (hij : p i = j) :
    X.ŒπMapObj p i j hij ‚â´ mapMap œÜ p j = œÜ i ‚â´ Y.ŒπMapObj p i j hij := by
  simp [ŒπMapObj, mapMap]

lemma congr_mapMap (œÜ‚ÇÅ œÜ‚ÇÇ : X ‚ü∂ Y) (h : œÜ‚ÇÅ = œÜ‚ÇÇ) : mapMap œÜ‚ÇÅ p = mapMap œÜ‚ÇÇ p := by
  subst h
  rfl

variable (X)

@[simp]
lemma mapMap_id : mapMap (ùüô X) p = ùüô _ := by aesop_cat

variable {X Z}

@[simp]
lemma mapMap_comp : mapMap (œÜ ‚â´ œà) p = mapMap œÜ p ‚â´ mapMap œà p := by aesop_cat

variable (C)

abbrev HasMapFunctor := ‚àÄ (j : J), HasColimitsOfShape (Discrete (p ‚Åª¬π' {j})) C

noncomputable def map [HasMapFunctor C p] : GradedObject I C ‚•§ GradedObject J C where
  obj X := X.mapObj p
  map œÜ := mapMap œÜ p

end

section

variable {I J K : Type*} (X Y : GradedObject I C) (p : I ‚Üí J) (q : J ‚Üí K) (r : I ‚Üí K)
  (hpqr : ‚àÄ i, r i = q (p i))
  [X.HasMap p] [(X.mapObj p).HasMap q] [X.HasMap r]

attribute [local ext] mapObj_ext

@[simps]
noncomputable def mapObjMapObjIso : (X.mapObj p).mapObj q ‚âÖ X.mapObj r where
  hom k := descMapObj _ _ (fun j hj => descMapObj _ _
    (fun i hi => X.ŒπMapObj r i k (by rw [hpqr, hi, hj])))
  inv k := descMapObj _ _
    (fun i hi => X.ŒπMapObj p i (p i) rfl ‚â´ (X.mapObj p).ŒπMapObj q (p i) k (by rw [‚Üê hi, hpqr]))

end

@[simps]
def applyFunctorsObj {I : Type*} (F : GradedObject I (C ‚•§ D)) :
    GradedObject I C ‚•§ GradedObject I D where
  obj X i := (F i).obj (X i)
  map {X Y} œÜ i := (F i).map (œÜ i)

variable (C D)

@[simps]
def applyFunctors (I : Type*) :
    GradedObject I (C ‚•§ D) ‚•§ GradedObject I C ‚•§ GradedObject I D where
  obj F := F.applyFunctorsObj
  map {F F'} œÜ :=
    { app := fun X i => (œÜ i).app (X i) }

section

variable {C D}
variable {I J : Type*} (F : GradedObject J (C ‚•§ D)) (p : I ‚Üí J) (X : GradedObject I C)
  [X.HasMap p]

abbrev PreservesMap := ‚àÄ (j : J), PreservesColimit
  (Discrete.functor (fun (i : (p ‚Åª¬π' {j})) => X i)) (F j)

noncomputable def comapObjApplyFunctorsObjObjMapObj
    [HasMap ((applyFunctorsObj ((comap (C ‚•§ D) p).obj F)).obj X) p] :
    (((comap _ p).obj F).applyFunctorsObj.obj X).mapObj p ‚ü∂
        F.applyFunctorsObj.obj (X.mapObj p) := fun j =>
  descMapObj _ _ (by
    rintro i rfl
    exact (F (p i)).map (X.ŒπMapObj p i _ rfl))

@[reassoc (attr := simp)]
lemma Œπ_comapObjApplyFunctorsObjObjMapObjNatTrans (i : I)
    [HasMap ((applyFunctorsObj ((comap (C ‚•§ D) p).obj F)).obj X) p] :
    ŒπMapObj _ p i _ rfl ‚â´ comapObjApplyFunctorsObjObjMapObj F p X (p i) =
      (F (p i)).map (X.ŒπMapObj p i _ rfl) := by
  apply Œπ_descMapObj

instance [X.HasMap p] [F.PreservesMap p X] :
    HasMap ((applyFunctorsObj ((comap (C ‚•§ D) p).obj F)).obj X) p := by
  intro j
  have : HasColimit ((Discrete.functor (fun (i : (p ‚Åª¬π' {j})) => X i)) ‚ãô F j) :=
    ‚ü®_, isColimitOfPreserves (F j) (colimit.isColimit _)‚ü©
  let e : Discrete.functor (fun (i : (p ‚Åª¬π' {j})) => (F (p i)).obj (X i)) ‚âÖ
    Discrete.functor (fun (i : (p ‚Åª¬π' {j})) => X i) ‚ãô F j :=
      Discrete.natIso (fun ‚ü®i‚ü© => eqToIso (by
        obtain ‚ü®i, rfl‚ü© := i
        rfl))
  exact hasColimitOfIso e

--variable [X.HasMap p] [F.PreservesMap p X]
-- construction of a "cocone" and show it is colimit in order to express
-- that `comapObjApplyFunctorsObjObjMapObj` induces an isomorphism in each degree


end

end GradedObject

end CategoryTheory
