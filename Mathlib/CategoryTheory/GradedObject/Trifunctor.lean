/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.GradedObject.Bifunctor

namespace CategoryTheory

open Category Limits

variable {C‚ÇÅ C‚ÇÇ C‚ÇÅ‚ÇÇ C‚ÇÇ‚ÇÉ C‚ÇÉ C‚ÇÑ : Type*}
  [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ] [Category C‚ÇÑ] [Category C‚ÇÅ‚ÇÇ] [Category C‚ÇÇ‚ÇÉ]
  (F F' : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ) (Œ± : F ‚ü∂ F') (e : F ‚âÖ F')

namespace GradedObject

@[simps]
def mapTrifunctorObj {I‚ÇÅ : Type*} (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (I‚ÇÇ I‚ÇÉ : Type*) :
    GradedObject I‚ÇÇ C‚ÇÇ ‚•§ GradedObject I‚ÇÉ C‚ÇÉ ‚•§ GradedObject (I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ) C‚ÇÑ where
  obj X‚ÇÇ :=
    { obj := fun X‚ÇÉ x => ((F.obj (X‚ÇÅ x.1)).obj (X‚ÇÇ x.2.1)).obj (X‚ÇÉ x.2.2)
      map := fun {X‚ÇÉ Y‚ÇÉ} œÜ x => ((F.obj (X‚ÇÅ x.1)).obj (X‚ÇÇ x.2.1)).map (œÜ x.2.2) }
  map {X‚ÇÇ Y‚ÇÇ} œÜ :=
    { app := fun X‚ÇÉ x => ((F.obj (X‚ÇÅ x.1)).map (œÜ x.2.1)).app (X‚ÇÉ x.2.2) }

@[simps]
def mapTrifunctor (I‚ÇÅ I‚ÇÇ I‚ÇÉ : Type*) :
    GradedObject I‚ÇÅ C‚ÇÅ ‚•§ GradedObject I‚ÇÇ C‚ÇÇ ‚•§ GradedObject I‚ÇÉ C‚ÇÉ ‚•§ GradedObject (I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ) C‚ÇÑ where
  obj X‚ÇÅ := mapTrifunctorObj F X‚ÇÅ I‚ÇÇ I‚ÇÉ
  map {X‚ÇÅ Y‚ÇÅ} œÜ :=
    { app := fun X‚ÇÇ =>
        { app := fun X‚ÇÉ x => ((F.map (œÜ x.1)).app (X‚ÇÇ x.2.1)).app (X‚ÇÉ x.2.2) }
      naturality := fun {X‚ÇÇ Y‚ÇÇ} œà => by
        ext X‚ÇÉ x
        dsimp
        simp only [‚Üê NatTrans.comp_app]
        congr 1
        rw [NatTrans.naturality] }

section

variable {F F'}

@[simps]
def mapTrifunctorMapNatTrans (I‚ÇÅ I‚ÇÇ I‚ÇÉ : Type*) :
    mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ ‚ü∂ mapTrifunctor F' I‚ÇÅ I‚ÇÇ I‚ÇÉ where
  app X‚ÇÅ :=
    { app := fun X‚ÇÇ =>
        { app := fun X‚ÇÉ i => ((Œ±.app _).app _).app _ }
      naturality := fun {X‚ÇÇ Y‚ÇÇ} œÜ => by
        ext X‚ÇÉ ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©
        dsimp
        simp only [‚Üê NatTrans.comp_app, NatTrans.naturality] }
  naturality := fun {X‚ÇÅ Y‚ÇÅ} œÜ => by
    ext X‚ÇÇ X‚ÇÉ ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©
    dsimp
    simp only [‚Üê NatTrans.comp_app, NatTrans.naturality]

@[simps]
def mapTrifunctorMapIso (I‚ÇÅ I‚ÇÇ I‚ÇÉ : Type*) :
    mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ ‚âÖ mapTrifunctor F' I‚ÇÅ I‚ÇÇ I‚ÇÉ where
  hom := mapTrifunctorMapNatTrans e.hom I‚ÇÅ I‚ÇÇ I‚ÇÉ
  inv := mapTrifunctorMapNatTrans e.inv I‚ÇÅ I‚ÇÇ I‚ÇÉ
  hom_inv_id := by
    ext X‚ÇÅ X‚ÇÇ X‚ÇÉ ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©
    dsimp
    simp only [‚Üê NatTrans.comp_app, e.hom_inv_id, NatTrans.id_app]
  inv_hom_id := by
    ext X‚ÇÅ X‚ÇÇ X‚ÇÉ ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©
    dsimp
    simp only [‚Üê NatTrans.comp_app, e.inv_hom_id, NatTrans.id_app]

end

section

variable {I‚ÇÅ I‚ÇÇ I‚ÇÉ J : Type*} (p : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí J)

@[simp]
noncomputable def mapTrifunctorMapObj (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ)
    (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ)
    [HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p] :
    GradedObject J C‚ÇÑ :=
  ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).mapObj p

--abbrev mapTrifunctorMapObjFun (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ)
--  (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ) (j : J) : p ‚Åª¬π' {j}  ‚Üí C‚ÇÑ :=
--    (fun (‚ü®‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©, _‚ü©) => ((F.obj (X‚ÇÅ i‚ÇÅ)).obj (X‚ÇÇ i‚ÇÇ)).obj (X‚ÇÉ i‚ÇÉ))

noncomputable def ŒπMapTrifunctorMapObj (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ)
    (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ) (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : p ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j)
    [HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p] :
    ((F.obj (X‚ÇÅ i‚ÇÅ)).obj (X‚ÇÇ i‚ÇÇ)).obj (X‚ÇÉ i‚ÇÉ) ‚ü∂ mapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ j :=
  ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).ŒπMapObj p ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© j h

@[ext]
lemma mapTrifunctorMapObj_ext {X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ} {X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ}
    {X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ} {j : J} {A : C‚ÇÑ}
    [HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p]
    (f g : mapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ j ‚ü∂ A)
    (h : ‚àÄ (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (h : p ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j),
      ŒπMapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ f =
        ŒπMapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ g) : f = g := by
  apply mapObj_ext
  rintro ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© hi
  exact h _ _ _ hi

@[simp]
noncomputable def mapTrifunctorMapMap {X‚ÇÅ Y‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ)
    {X‚ÇÇ Y‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ} (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ)
    {X‚ÇÉ Y‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ} (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ)
    [HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p]
    [HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj Y‚ÇÅ).obj Y‚ÇÇ).obj Y‚ÇÉ) p] :
    mapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ ‚ü∂ mapTrifunctorMapObj F p Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ :=
  GradedObject.mapMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).map f‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ ‚â´
    (((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj Y‚ÇÅ).map f‚ÇÇ).app X‚ÇÉ ‚â´
    (((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj Y‚ÇÅ).obj Y‚ÇÇ).map f‚ÇÉ) p

lemma Œπ_mapTrifunctorMapMap {X‚ÇÅ Y‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ)
    {X‚ÇÇ Y‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ} (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ)
    {X‚ÇÉ Y‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ} (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ)
    [HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p]
    [HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj Y‚ÇÅ).obj Y‚ÇÇ).obj Y‚ÇÉ) p]
    (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : p ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j) :
  ŒπMapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ mapTrifunctorMapMap F p f‚ÇÅ f‚ÇÇ f‚ÇÉ j =
    ((F.map (f‚ÇÅ i‚ÇÅ)).app (X‚ÇÇ i‚ÇÇ)).app (X‚ÇÉ i‚ÇÉ) ‚â´
      ((F.obj (Y‚ÇÅ i‚ÇÅ)).map (f‚ÇÇ i‚ÇÇ)).app (X‚ÇÉ i‚ÇÉ) ‚â´
      ((F.obj (Y‚ÇÅ i‚ÇÅ)).obj (Y‚ÇÇ i‚ÇÇ)).map (f‚ÇÉ i‚ÇÉ) ‚â´
      ŒπMapTrifunctorMapObj F p Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h := by
  dsimp only [ŒπMapTrifunctorMapObj, mapTrifunctorMapMap]
  rw [Œπ_mapMap]
  dsimp
  rw [assoc, assoc]

instance (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ) (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ)
  [h : HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p] :
      HasMap (((mapTrifunctorObj F X‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ) p := h

set_option maxHeartbeats 400000 in
@[simps]
noncomputable def mapTrifunctorMapFunctorObj (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ)
    [‚àÄ X‚ÇÇ X‚ÇÉ, HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p] :
    GradedObject I‚ÇÇ C‚ÇÇ ‚•§ GradedObject I‚ÇÉ C‚ÇÉ ‚•§ GradedObject J C‚ÇÑ where
  obj X‚ÇÇ :=
    { obj := fun X‚ÇÉ => mapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ
      map := fun {X‚ÇÉ Y‚ÇÉ} œÜ => mapTrifunctorMapMap F p (ùüô X‚ÇÅ) (ùüô X‚ÇÇ) œÜ }
  map {X‚ÇÇ Y‚ÇÇ} œÜ :=
    { app := fun X‚ÇÉ => mapTrifunctorMapMap F p (ùüô X‚ÇÅ) œÜ (ùüô X‚ÇÉ)
      naturality := fun {X‚ÇÉ Y‚ÇÉ} œÜ => by
        dsimp
        simp only [Functor.map_id, mapTrifunctor_obj, NatTrans.id_app,
          Category.id_comp, Category.comp_id, ‚Üê mapMap_comp]
        apply congr_mapMap
        simp }

set_option maxHeartbeats 400000 in
@[simps]
noncomputable def mapTrifunctorMap
    [‚àÄ X‚ÇÅ X‚ÇÇ X‚ÇÉ, HasMap ((((mapTrifunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p] :
    GradedObject I‚ÇÅ C‚ÇÅ ‚•§ GradedObject I‚ÇÇ C‚ÇÇ ‚•§ GradedObject I‚ÇÉ C‚ÇÉ ‚•§ GradedObject J C‚ÇÑ where
  obj X‚ÇÅ := mapTrifunctorMapFunctorObj F p X‚ÇÅ
  map := fun {X‚ÇÅ Y‚ÇÅ} œÜ =>
    { app := fun X‚ÇÇ =>
        { app := fun X‚ÇÉ => mapTrifunctorMapMap F p œÜ (ùüô X‚ÇÇ) (ùüô X‚ÇÉ)
          naturality := fun {X‚ÇÉ Y‚ÇÉ} œÜ => by
            dsimp [mapTrifunctorMapFunctorObj]
            simp only [Functor.map_id, mapTrifunctor_obj, NatTrans.id_app,
              Category.id_comp, Category.comp_id, ‚Üê mapMap_comp]
            apply congr_mapMap
            simp }
      naturality := fun {X‚ÇÇ Y‚ÇÇ} œÜ => by
        ext X‚ÇÉ : 2
        dsimp [mapTrifunctorMapFunctorObj]
        simp only [Functor.map_id, mapTrifunctor_obj, NatTrans.id_app,
          Category.comp_id, Category.id_comp, ‚Üê mapMap_comp]
        apply congr_mapMap
        simp only [‚Üê NatTrans.comp_app]
        congr 1
        simp }

end

section

variable (F‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÅ‚ÇÇ) (G : C‚ÇÅ‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ)

@[simps]
def _root_.CategoryTheory.bifunctorComp‚ÇÅ‚ÇÇObj (X‚ÇÅ : C‚ÇÅ) : C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ where
  obj X‚ÇÇ :=
    { obj := fun X‚ÇÉ => (G.obj ((F‚ÇÅ‚ÇÇ.obj X‚ÇÅ).obj X‚ÇÇ)).obj X‚ÇÉ
      map := fun {X‚ÇÉ Y‚ÇÉ} œÜ => (G.obj ((F‚ÇÅ‚ÇÇ.obj X‚ÇÅ).obj X‚ÇÇ)).map œÜ }
  map {X‚ÇÇ Y‚ÇÇ} œÜ :=
    { app := fun X‚ÇÉ => (G.map ((F‚ÇÅ‚ÇÇ.obj X‚ÇÅ).map œÜ)).app X‚ÇÉ }

@[simps]
def _root_.CategoryTheory.bifunctorComp‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ where
  obj X‚ÇÅ := _root_.CategoryTheory.bifunctorComp‚ÇÅ‚ÇÇObj F‚ÇÅ‚ÇÇ G X‚ÇÅ
  map {X‚ÇÅ Y‚ÇÅ} œÜ :=
    { app := fun X‚ÇÇ =>
        { app := fun X‚ÇÉ => (G.map ((F‚ÇÅ‚ÇÇ.map œÜ).app X‚ÇÇ)).app X‚ÇÉ }
      naturality := fun {X‚ÇÇ Y‚ÇÇ} œà => by
        ext X‚ÇÉ
        dsimp
        simp only [‚Üê NatTrans.comp_app, ‚Üê G.map_comp, NatTrans.naturality] }

variable
  {I‚ÇÅ I‚ÇÇ I‚ÇÉ J : Type*}
    (r : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí J)

structure Bifunctor‚ÇÅ‚ÇÇBifunctorIndexData :=
  I‚ÇÅ‚ÇÇ : Type*
  p : I‚ÇÅ √ó I‚ÇÇ ‚Üí I‚ÇÅ‚ÇÇ
  q : I‚ÇÅ‚ÇÇ √ó I‚ÇÉ ‚Üí J
  hpq : ‚àÄ (i : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ), r i = q ‚ü®p ‚ü®i.1, i.2.1‚ü©, i.2.2‚ü©

variable (œÅ‚ÇÅ‚ÇÇ : Bifunctor‚ÇÅ‚ÇÇBifunctorIndexData r)

section

variable {r}

variable (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ) (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ)
  [HasMap (((mapBifunctor F‚ÇÅ‚ÇÇ I‚ÇÅ I‚ÇÇ).obj X‚ÇÅ).obj X‚ÇÇ) œÅ‚ÇÅ‚ÇÇ.p]
  [HasMap (((mapBifunctor G œÅ‚ÇÅ‚ÇÇ.I‚ÇÅ‚ÇÇ I‚ÇÉ).obj (mapBifunctorMapObj F‚ÇÅ‚ÇÇ œÅ‚ÇÅ‚ÇÇ.p X‚ÇÅ X‚ÇÇ)).obj X‚ÇÉ) œÅ‚ÇÅ‚ÇÇ.q]

abbrev HasGoodBifunctor‚ÇÅ‚ÇÇBifunctorObj :=
  ‚àÄ (i‚ÇÅ‚ÇÇ : œÅ‚ÇÅ‚ÇÇ.I‚ÇÅ‚ÇÇ) (i‚ÇÉ : I‚ÇÉ), (PreservesColimit (Discrete.functor (mapObjFun (((mapBifunctor F‚ÇÅ‚ÇÇ I‚ÇÅ I‚ÇÇ).obj X‚ÇÅ).obj X‚ÇÇ) œÅ‚ÇÅ‚ÇÇ.p i‚ÇÅ‚ÇÇ))
    ((Functor.flip G).obj (X‚ÇÉ i‚ÇÉ)))

noncomputable def ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : r (i‚ÇÅ, i‚ÇÇ, i‚ÇÉ) = j) :
    (G.obj ((F‚ÇÅ‚ÇÇ.obj (X‚ÇÅ i‚ÇÅ)).obj (X‚ÇÇ i‚ÇÇ))).obj (X‚ÇÉ i‚ÇÉ) ‚ü∂
      mapBifunctorMapObj G œÅ‚ÇÅ‚ÇÇ.q (mapBifunctorMapObj F‚ÇÅ‚ÇÇ œÅ‚ÇÅ‚ÇÇ.p X‚ÇÅ X‚ÇÇ) X‚ÇÉ j :=
  (G.map (ŒπMapBifunctorMapObj F‚ÇÅ‚ÇÇ œÅ‚ÇÅ‚ÇÇ.p X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ _ rfl)).app (X‚ÇÉ i‚ÇÉ) ‚â´
    ŒπMapBifunctorMapObj G œÅ‚ÇÅ‚ÇÇ.q (mapBifunctorMapObj F‚ÇÅ‚ÇÇ œÅ‚ÇÅ‚ÇÇ.p X‚ÇÅ X‚ÇÇ) X‚ÇÉ (œÅ‚ÇÅ‚ÇÇ.p ‚ü®i‚ÇÅ, i‚ÇÇ‚ü©) i‚ÇÉ j (by rw [‚Üê h, œÅ‚ÇÅ‚ÇÇ.hpq])

@[reassoc]
noncomputable def ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj_eq (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : r (i‚ÇÅ, i‚ÇÇ, i‚ÇÉ) = j) (i‚ÇÅ‚ÇÇ : œÅ‚ÇÅ‚ÇÇ.I‚ÇÅ‚ÇÇ) (h' : œÅ‚ÇÅ‚ÇÇ.p ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© = i‚ÇÅ‚ÇÇ) :
  ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h =
  (G.map (ŒπMapBifunctorMapObj F‚ÇÅ‚ÇÇ œÅ‚ÇÅ‚ÇÇ.p X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h')).app (X‚ÇÉ i‚ÇÉ) ‚â´
    ŒπMapBifunctorMapObj G œÅ‚ÇÅ‚ÇÇ.q (mapBifunctorMapObj F‚ÇÅ‚ÇÇ œÅ‚ÇÅ‚ÇÇ.p X‚ÇÅ X‚ÇÇ) X‚ÇÉ i‚ÇÅ‚ÇÇ i‚ÇÉ j (by rw [‚Üê h, ‚Üê h', œÅ‚ÇÅ‚ÇÇ.hpq]) := by
  subst h'
  rfl

noncomputable def ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjOrZero [HasZeroMorphisms C‚ÇÑ] (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) [DecidableEq J] :
    (G.obj ((F‚ÇÅ‚ÇÇ.obj (X‚ÇÅ i‚ÇÅ)).obj (X‚ÇÇ i‚ÇÇ))).obj (X‚ÇÉ i‚ÇÉ) ‚ü∂
      mapBifunctorMapObj G œÅ‚ÇÅ‚ÇÇ.q (mapBifunctorMapObj F‚ÇÅ‚ÇÇ œÅ‚ÇÅ‚ÇÇ.p X‚ÇÅ X‚ÇÇ) X‚ÇÉ j :=
  if h : r (i‚ÇÅ, i‚ÇÇ, i‚ÇÉ) = j
    then ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h
    else 0

noncomputable def ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjOrZero_eq [HasZeroMorphisms C‚ÇÑ] (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) [DecidableEq J]
    (h : r (i‚ÇÅ, i‚ÇÇ, i‚ÇÉ) = j) :
    ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjOrZero F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j =
      ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h := dif_pos h

noncomputable def ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjOrZero_eq_zero [HasZeroMorphisms C‚ÇÑ] (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) [DecidableEq J]
    (h : r (i‚ÇÅ, i‚ÇÇ, i‚ÇÉ) ‚â† j) :
    ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjOrZero F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j = 0 := dif_neg h

variable [H : HasGoodBifunctor‚ÇÅ‚ÇÇBifunctorObj F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ]

noncomputable def cofan‚ÇÉMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj (j : J) :
    ((((mapTrifunctor (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).CofanMapObjFun r j :=
  Cofan.mk (mapBifunctorMapObj G œÅ‚ÇÅ‚ÇÇ.q (mapBifunctorMapObj F‚ÇÅ‚ÇÇ œÅ‚ÇÅ‚ÇÇ.p X‚ÇÅ X‚ÇÇ) X‚ÇÉ j)
    (fun ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©, (hi : r ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j)‚ü© =>
      ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j hi)

noncomputable def isColimitCofan‚ÇÉMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj (j : J) :
    IsColimit (cofan‚ÇÉMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ j) := by
  let c‚ÇÅ‚ÇÇ := fun i‚ÇÅ‚ÇÇ => (((mapBifunctor F‚ÇÅ‚ÇÇ I‚ÇÅ I‚ÇÇ).obj X‚ÇÅ).obj X‚ÇÇ).cofanMapObj œÅ‚ÇÅ‚ÇÇ.p i‚ÇÅ‚ÇÇ
  have h‚ÇÅ‚ÇÇ : ‚àÄ i‚ÇÅ‚ÇÇ, IsColimit (c‚ÇÅ‚ÇÇ i‚ÇÅ‚ÇÇ) := fun i‚ÇÅ‚ÇÇ => (((mapBifunctor F‚ÇÅ‚ÇÇ I‚ÇÅ I‚ÇÇ).obj X‚ÇÅ).obj X‚ÇÇ).isColimitCofanMapObj œÅ‚ÇÅ‚ÇÇ.p i‚ÇÅ‚ÇÇ
  let c := (((mapBifunctor G œÅ‚ÇÅ‚ÇÇ.I‚ÇÅ‚ÇÇ I‚ÇÉ).obj (mapBifunctorMapObj F‚ÇÅ‚ÇÇ œÅ‚ÇÅ‚ÇÇ.p X‚ÇÅ X‚ÇÇ)).obj X‚ÇÉ).cofanMapObj œÅ‚ÇÅ‚ÇÇ.q j
  have hc : IsColimit c := (((mapBifunctor G œÅ‚ÇÅ‚ÇÇ.I‚ÇÅ‚ÇÇ I‚ÇÉ).obj (mapBifunctorMapObj F‚ÇÅ‚ÇÇ œÅ‚ÇÅ‚ÇÇ.p X‚ÇÅ X‚ÇÇ)).obj X‚ÇÉ).isColimitCofanMapObj œÅ‚ÇÅ‚ÇÇ.q j
  let c‚ÇÅ‚ÇÇ' := fun (i : œÅ‚ÇÅ‚ÇÇ.q ‚Åª¬π' {j}) => (G.flip.obj (X‚ÇÉ i.1.2)).mapCocone (c‚ÇÅ‚ÇÇ i.1.1)
  have hc‚ÇÅ‚ÇÇ' : ‚àÄ i, IsColimit (c‚ÇÅ‚ÇÇ' i) := fun i => isColimitOfPreserves _ (h‚ÇÅ‚ÇÇ i.1.1)
  let Z := (((mapTrifunctor (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ
  let p' : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí œÅ‚ÇÅ‚ÇÇ.I‚ÇÅ‚ÇÇ √ó I‚ÇÉ := fun ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© => ‚ü®œÅ‚ÇÅ‚ÇÇ.p ‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, i‚ÇÉ‚ü©
  let e : ‚àÄ (i‚ÇÅ‚ÇÇ : œÅ‚ÇÅ‚ÇÇ.I‚ÇÅ‚ÇÇ) (i‚ÇÉ : I‚ÇÉ), p' ‚Åª¬π' {(i‚ÇÅ‚ÇÇ, i‚ÇÉ)} ‚âÉ œÅ‚ÇÅ‚ÇÇ.p ‚Åª¬π' {i‚ÇÅ‚ÇÇ} := fun i‚ÇÅ‚ÇÇ i‚ÇÉ =>
    { toFun := fun ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ'‚ü©, hi‚ü© => ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, by aesop‚ü©
      invFun := fun ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, hi‚ü© => ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©, by aesop‚ü©
      left_inv := fun ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ'‚ü©, hi‚ü© => by
        obtain rfl : i‚ÇÉ = i‚ÇÉ' := by aesop
        rfl
      right_inv := fun _ => rfl }
  let c‚ÇÅ‚ÇÇ'' : ‚àÄ (i : œÅ‚ÇÅ‚ÇÇ.q ‚Åª¬π' {j}), CofanMapObjFun Z p' (i.1.1, i.1.2) := fun ‚ü®‚ü®i‚ÇÅ‚ÇÇ, i‚ÇÉ‚ü©, hi‚ü© => by
    refine' (Cocones.precompose (Iso.hom _)).obj ((Cocones.whiskeringEquivalence (Discrete.equivalence (e i‚ÇÅ‚ÇÇ i‚ÇÉ))).functor.obj (c‚ÇÅ‚ÇÇ' ‚ü®‚ü®i‚ÇÅ‚ÇÇ, i‚ÇÉ‚ü©, hi‚ü©))
    refine' (Discrete.natIso (fun ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ'‚ü©, hi‚ü© => (G.obj ((F‚ÇÅ‚ÇÇ.obj (X‚ÇÅ i‚ÇÅ)).obj (X‚ÇÇ i‚ÇÇ))).mapIso (eqToIso _)))
    obtain rfl : i‚ÇÉ' = i‚ÇÉ := congr_arg _root_.Prod.snd hi
    rfl
  have h‚ÇÅ‚ÇÇ'' : ‚àÄ i, IsColimit (c‚ÇÅ‚ÇÇ'' i) := fun _ =>
    (IsColimit.precomposeHomEquiv _ _).symm (IsColimit.whiskerEquivalenceEquiv _ (hc‚ÇÅ‚ÇÇ' _))
  refine' IsColimit.ofIsoColimit (isColimitCofanMapObjComp Z p' œÅ‚ÇÅ‚ÇÇ.q r œÅ‚ÇÅ‚ÇÇ.hpq j
    (fun ‚ü®i‚ÇÅ‚ÇÇ, i‚ÇÉ‚ü© h => c‚ÇÅ‚ÇÇ'' ‚ü®‚ü®i‚ÇÅ‚ÇÇ, i‚ÇÉ‚ü©, h‚ü©) (fun ‚ü®i‚ÇÅ‚ÇÇ, i‚ÇÉ‚ü© h => h‚ÇÅ‚ÇÇ'' ‚ü®‚ü®i‚ÇÅ‚ÇÇ, i‚ÇÉ‚ü©, h‚ü©) c hc)
    (Cocones.ext (Iso.refl _) (fun ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©, h‚ü© => _))
  dsimp [Cofan.inj]
  rw [comp_id, Functor.map_id, id_comp]
  rfl

variable {F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ}

lemma HasGoodBifunctor‚ÇÅ‚ÇÇBifunctorObj.hasMap : HasMap ((((mapTrifunctor (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) r :=
  fun j => ‚ü®_, isColimitCofan‚ÇÉMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ j‚ü©

variable (F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ)

noncomputable def mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso
    [HasMap ((((mapTrifunctor (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) r] :
    mapTrifunctorMapObj (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G) r X‚ÇÅ X‚ÇÇ X‚ÇÉ ‚âÖ
    mapBifunctorMapObj G œÅ‚ÇÅ‚ÇÇ.q (mapBifunctorMapObj F‚ÇÅ‚ÇÇ œÅ‚ÇÅ‚ÇÇ.p X‚ÇÅ X‚ÇÇ) X‚ÇÉ :=
  isoMk _ _ (fun j => (CofanMapObjFun.iso (isColimitCofan‚ÇÉMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ j)).symm)

@[reassoc (attr := simp, nolint unusedHavesSuffices)]
lemma Œπ_mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso_hom (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : r ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j) :
    have := H.hasMap
    ŒπMapTrifunctorMapObj (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G) r X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ (mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom j =
      ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j (by rw [‚Üê h, œÅ‚ÇÅ‚ÇÇ.hpq]) := by
  have := H.hasMap
  dsimp [mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso]
  apply CofanMapObjFun.ŒπMapObj_iso_inv

variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ}

@[ext]
lemma mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj_ext {j : J} {A : C‚ÇÑ}
    (f g : mapBifunctorMapObj G œÅ‚ÇÅ‚ÇÇ.q (mapBifunctorMapObj F‚ÇÅ‚ÇÇ œÅ‚ÇÅ‚ÇÇ.p X‚ÇÅ X‚ÇÇ) X‚ÇÉ j ‚ü∂ A)
    (h : ‚àÄ (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (h : r ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j),
      ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ f =
        ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ g) : f = g := by
  apply Cofan.IsColimit.hom_ext (isColimitCofan‚ÇÉMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ j)
  rintro ‚ü®i, hi‚ü©
  exact h _ _ _ hi

variable (X‚ÇÅ X‚ÇÇ X‚ÇÉ)

@[reassoc (attr := simp)]
lemma Œπ_mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso_inv (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : r ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j) :
    have := H.hasMap
    ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´
      (mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ).inv j =
    ŒπMapTrifunctorMapObj (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G) r X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h := by
  have := H.hasMap
  dsimp only
  rw [‚Üê cancel_mono ((mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom j), assoc,
    iso_inv_hom_id_apply, comp_id, Œπ_mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso_hom]

end

end

section

variable (F : C‚ÇÅ ‚•§ C‚ÇÇ‚ÇÉ ‚•§ C‚ÇÑ) (G‚ÇÇ‚ÇÉ : C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÇ‚ÇÉ)

@[simps]
def _root_.CategoryTheory.bifunctorComp‚ÇÇ‚ÇÉObj (X‚ÇÅ : C‚ÇÅ) : C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ where
  obj X‚ÇÇ :=
    { obj := fun X‚ÇÉ => (F.obj X‚ÇÅ).obj ((G‚ÇÇ‚ÇÉ.obj X‚ÇÇ).obj X‚ÇÉ)
      map := fun {X‚ÇÉ Y‚ÇÉ} œÜ => (F.obj X‚ÇÅ).map ((G‚ÇÇ‚ÇÉ.obj X‚ÇÇ).map œÜ) }
  map {X‚ÇÇ Y‚ÇÇ} œÜ :=
    { app := fun X‚ÇÉ => (F.obj X‚ÇÅ).map ((G‚ÇÇ‚ÇÉ.map œÜ).app X‚ÇÉ)
      naturality := fun {X‚ÇÉ Y‚ÇÉ} œÜ => by
        dsimp
        simp only [‚Üê Functor.map_comp, NatTrans.naturality] }

@[simps]
def _root_.CategoryTheory.bifunctorComp‚ÇÇ‚ÇÉ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ where
  obj X‚ÇÅ := bifunctorComp‚ÇÇ‚ÇÉObj F G‚ÇÇ‚ÇÉ X‚ÇÅ
  map {X‚ÇÅ Y‚ÇÅ} œÜ :=
    { app := fun X‚ÇÇ =>
        { app := fun X‚ÇÉ => (F.map œÜ).app ((G‚ÇÇ‚ÇÉ.obj X‚ÇÇ).obj X‚ÇÉ) } }

variable {I‚ÇÅ I‚ÇÇ I‚ÇÉ J : Type*} (r : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí J)

structure BifunctorBifunctor‚ÇÇ‚ÇÉIndexData :=
  I‚ÇÇ‚ÇÉ : Type*
  p : I‚ÇÇ √ó I‚ÇÉ ‚Üí I‚ÇÇ‚ÇÉ
  q : I‚ÇÅ √ó I‚ÇÇ‚ÇÉ ‚Üí J
  hpq : ‚àÄ (i : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ), r i = q ‚ü®i.1, p i.2‚ü©

variable {r} (œÅ‚ÇÇ‚ÇÉ : BifunctorBifunctor‚ÇÇ‚ÇÉIndexData r)

section

variable (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ) (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ)
  [HasMap (((mapBifunctor G‚ÇÇ‚ÇÉ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ) œÅ‚ÇÇ‚ÇÉ.p]
  [HasMap (((mapBifunctor F I‚ÇÅ œÅ‚ÇÇ‚ÇÉ.I‚ÇÇ‚ÇÉ).obj X‚ÇÅ).obj (mapBifunctorMapObj G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ.p X‚ÇÇ X‚ÇÉ)) œÅ‚ÇÇ‚ÇÉ.q]

abbrev HasGoodBifunctorBifunctor‚ÇÇ‚ÇÉObj :=
  ‚àÄ (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ‚ÇÉ : œÅ‚ÇÇ‚ÇÉ.I‚ÇÇ‚ÇÉ), PreservesColimit (Discrete.functor (mapObjFun (((mapBifunctor G‚ÇÇ‚ÇÉ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ) œÅ‚ÇÇ‚ÇÉ.p i‚ÇÇ‚ÇÉ))
    (F.obj (X‚ÇÅ i‚ÇÅ))

noncomputable def ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : r (i‚ÇÅ, i‚ÇÇ, i‚ÇÉ) = j) :
    (F.obj (X‚ÇÅ i‚ÇÅ)).obj ((G‚ÇÇ‚ÇÉ.obj (X‚ÇÇ i‚ÇÇ)).obj (X‚ÇÉ i‚ÇÉ)) ‚ü∂ mapBifunctorMapObj F œÅ‚ÇÇ‚ÇÉ.q X‚ÇÅ (mapBifunctorMapObj G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ.p X‚ÇÇ X‚ÇÉ) j :=
  (F.obj (X‚ÇÅ i‚ÇÅ)).map (ŒπMapBifunctorMapObj G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ.p X‚ÇÇ X‚ÇÉ i‚ÇÇ i‚ÇÉ _ rfl) ‚â´
    ŒπMapBifunctorMapObj F œÅ‚ÇÇ‚ÇÉ.q X‚ÇÅ (mapBifunctorMapObj G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ.p X‚ÇÇ X‚ÇÉ) i‚ÇÅ (œÅ‚ÇÇ‚ÇÉ.p ‚ü®i‚ÇÇ, i‚ÇÉ‚ü©) j (by rw [‚Üê h, œÅ‚ÇÇ‚ÇÉ.hpq])

@[reassoc]
noncomputable def ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj_eq (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : r (i‚ÇÅ, i‚ÇÇ, i‚ÇÉ) = j) (i‚ÇÇ‚ÇÉ : œÅ‚ÇÇ‚ÇÉ.I‚ÇÇ‚ÇÉ) (h' : œÅ‚ÇÇ‚ÇÉ.p ‚ü®i‚ÇÇ, i‚ÇÉ‚ü© = i‚ÇÇ‚ÇÉ) :
    ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h =
    (F.obj (X‚ÇÅ i‚ÇÅ)).map (ŒπMapBifunctorMapObj G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ.p X‚ÇÇ X‚ÇÉ i‚ÇÇ i‚ÇÉ i‚ÇÇ‚ÇÉ h') ‚â´
    ŒπMapBifunctorMapObj F œÅ‚ÇÇ‚ÇÉ.q X‚ÇÅ (mapBifunctorMapObj G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ.p X‚ÇÇ X‚ÇÉ) i‚ÇÅ i‚ÇÇ‚ÇÉ j (by rw [‚Üê h, œÅ‚ÇÇ‚ÇÉ.hpq, h']) := by
  subst h'
  rfl

noncomputable def ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjOrZero [HasZeroMorphisms C‚ÇÑ] (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) [DecidableEq J] :
    (F.obj (X‚ÇÅ i‚ÇÅ)).obj ((G‚ÇÇ‚ÇÉ.obj (X‚ÇÇ i‚ÇÇ)).obj (X‚ÇÉ i‚ÇÉ)) ‚ü∂ mapBifunctorMapObj F œÅ‚ÇÇ‚ÇÉ.q X‚ÇÅ (mapBifunctorMapObj G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ.p X‚ÇÇ X‚ÇÉ) j :=
  if h : r (i‚ÇÅ, i‚ÇÇ, i‚ÇÉ) = j
    then ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h
    else 0

noncomputable def ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjOrZero_eq [HasZeroMorphisms C‚ÇÑ] (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) [DecidableEq J]
    (h : r (i‚ÇÅ, i‚ÇÇ, i‚ÇÉ) = j) :
    ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjOrZero F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j =
      ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h := dif_pos h

noncomputable def ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjOrZero_eq_zero [HasZeroMorphisms C‚ÇÑ] (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) [DecidableEq J]
    (h : r (i‚ÇÅ, i‚ÇÇ, i‚ÇÉ) ‚â† j) :
    ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjOrZero F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j = 0 := dif_neg h

variable [H : HasGoodBifunctorBifunctor‚ÇÇ‚ÇÉObj F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]

noncomputable def cofan‚ÇÉMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj (j : J) :
    ((((mapTrifunctor (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).CofanMapObjFun r j :=
  Cofan.mk (mapBifunctorMapObj F œÅ‚ÇÇ‚ÇÉ.q X‚ÇÅ (mapBifunctorMapObj G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ.p X‚ÇÇ X‚ÇÉ) j) (fun ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©, (hi : r ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j)‚ü© =>
    ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j hi)

noncomputable def isColimitCofan‚ÇÉMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj (j : J) :
    IsColimit (cofan‚ÇÉMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ j) := by
  let c‚ÇÇ‚ÇÉ := fun i‚ÇÇ‚ÇÉ => (((mapBifunctor G‚ÇÇ‚ÇÉ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ).cofanMapObj œÅ‚ÇÇ‚ÇÉ.p i‚ÇÇ‚ÇÉ
  have h‚ÇÇ‚ÇÉ : ‚àÄ i‚ÇÇ‚ÇÉ, IsColimit (c‚ÇÇ‚ÇÉ i‚ÇÇ‚ÇÉ) := fun i‚ÇÇ‚ÇÉ => (((mapBifunctor G‚ÇÇ‚ÇÉ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ).isColimitCofanMapObj œÅ‚ÇÇ‚ÇÉ.p i‚ÇÇ‚ÇÉ
  let c := (((mapBifunctor F I‚ÇÅ œÅ‚ÇÇ‚ÇÉ.I‚ÇÇ‚ÇÉ).obj X‚ÇÅ).obj (mapBifunctorMapObj G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ.p X‚ÇÇ X‚ÇÉ)).cofanMapObj œÅ‚ÇÇ‚ÇÉ.q j
  have hc : IsColimit c := (((mapBifunctor F I‚ÇÅ œÅ‚ÇÇ‚ÇÉ.I‚ÇÇ‚ÇÉ).obj X‚ÇÅ).obj (mapBifunctorMapObj G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ.p X‚ÇÇ X‚ÇÉ)).isColimitCofanMapObj œÅ‚ÇÇ‚ÇÉ.q j
  let c‚ÇÇ‚ÇÉ' := fun (i : œÅ‚ÇÇ‚ÇÉ.q ‚Åª¬π' {j}) => (F.obj (X‚ÇÅ i.1.1)).mapCocone (c‚ÇÇ‚ÇÉ i.1.2)
  have hc‚ÇÇ‚ÇÉ' : ‚àÄ i, IsColimit (c‚ÇÇ‚ÇÉ' i) := fun i => isColimitOfPreserves _ (h‚ÇÇ‚ÇÉ i.1.2)
  let Z := (((mapTrifunctor (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ
  let p' : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí I‚ÇÅ √ó œÅ‚ÇÇ‚ÇÉ.I‚ÇÇ‚ÇÉ := fun ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© => ‚ü®i‚ÇÅ, œÅ‚ÇÇ‚ÇÉ.p ‚ü®i‚ÇÇ, i‚ÇÉ‚ü©‚ü©
  let e : ‚àÄ (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ‚ÇÉ : œÅ‚ÇÇ‚ÇÉ.I‚ÇÇ‚ÇÉ) , p' ‚Åª¬π' {(i‚ÇÅ, i‚ÇÇ‚ÇÉ)} ‚âÉ œÅ‚ÇÇ‚ÇÉ.p ‚Åª¬π' {i‚ÇÇ‚ÇÉ} := fun i‚ÇÅ i‚ÇÇ‚ÇÉ =>
    { toFun := fun ‚ü®‚ü®i‚ÇÅ', i‚ÇÇ, i‚ÇÉ‚ü©, hi‚ü© => ‚ü®‚ü®i‚ÇÇ, i‚ÇÉ‚ü©, by aesop‚ü©
      invFun := fun ‚ü®‚ü®i‚ÇÇ, i‚ÇÉ‚ü©, hi‚ü©  => ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©, by aesop‚ü©
      left_inv := fun ‚ü®‚ü®i‚ÇÅ', i‚ÇÇ, i‚ÇÉ‚ü©, hi‚ü© => by
        obtain rfl : i‚ÇÅ = i‚ÇÅ' := by aesop
        rfl
      right_inv := fun _ => rfl }
  let c‚ÇÇ‚ÇÉ'' : ‚àÄ (i : œÅ‚ÇÇ‚ÇÉ.q ‚Åª¬π' {j}), CofanMapObjFun Z p' (i.1.1, i.1.2) := fun ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ÇÉ‚ü©, hi‚ü© => by
    refine' (Cocones.precompose (Iso.hom _)).obj ((Cocones.whiskeringEquivalence (Discrete.equivalence (e i‚ÇÅ i‚ÇÇ‚ÇÉ))).functor.obj (c‚ÇÇ‚ÇÉ' ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ÇÉ‚ü©, hi‚ü©))
    refine' Discrete.natIso (fun ‚ü®‚ü®i‚ÇÅ', i‚ÇÇ, i‚ÇÉ‚ü©, hi‚ü© => eqToIso _)
    obtain rfl : i‚ÇÅ' = i‚ÇÅ := congr_arg _root_.Prod.fst hi
    rfl
  have h‚ÇÇ‚ÇÉ'' : ‚àÄ i, IsColimit (c‚ÇÇ‚ÇÉ'' i) := fun _ =>
    (IsColimit.precomposeHomEquiv _ _).symm (IsColimit.whiskerEquivalenceEquiv _ (hc‚ÇÇ‚ÇÉ' _))
  refine' IsColimit.ofIsoColimit (isColimitCofanMapObjComp Z p' œÅ‚ÇÇ‚ÇÉ.q r œÅ‚ÇÇ‚ÇÉ.hpq j
    (fun ‚ü®i‚ÇÅ, i‚ÇÇ‚ÇÉ‚ü© h => c‚ÇÇ‚ÇÉ'' ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ÇÉ‚ü©, h‚ü©) (fun ‚ü®i‚ÇÅ, i‚ÇÇ‚ÇÉ‚ü© h => h‚ÇÇ‚ÇÉ'' ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ÇÉ‚ü©, h‚ü©) c hc)
    (Cocones.ext (Iso.refl _) (fun ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©, h‚ü© => _))
  dsimp [Cofan.inj]
  rw [comp_id, id_comp]
  rfl

variable {F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ}

lemma HasGoodBifunctorBifunctor‚ÇÇ‚ÇÉObj.hasMap : HasMap ((((mapTrifunctor (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) r :=
  fun j => ‚ü®_, isColimitCofan‚ÇÉMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ j‚ü©

variable (F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ)

noncomputable def mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso
    [HasMap ((((mapTrifunctor (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) r] :
    mapTrifunctorMapObj (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ) r X‚ÇÅ X‚ÇÇ X‚ÇÉ ‚âÖ
    mapBifunctorMapObj F œÅ‚ÇÇ‚ÇÉ.q X‚ÇÅ (mapBifunctorMapObj G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ.p X‚ÇÇ X‚ÇÉ) :=
  isoMk _ _ (fun j => (CofanMapObjFun.iso (isColimitCofan‚ÇÉMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ j)).symm)

@[reassoc (attr := simp, nolint unusedHavesSuffices)]
lemma Œπ_mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso_hom (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : r ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j) :
    have := H.hasMap
    ŒπMapTrifunctorMapObj (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ) r X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ (mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom j =
      ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j (by rw [‚Üêh, œÅ‚ÇÇ‚ÇÉ.hpq]) := by
  have := H.hasMap
  dsimp [mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso]
  apply CofanMapObjFun.ŒπMapObj_iso_inv

variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ}

@[ext]
lemma mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj_ext {j : J} {A : C‚ÇÑ}
    (f g : mapBifunctorMapObj F œÅ‚ÇÇ‚ÇÉ.q X‚ÇÅ (mapBifunctorMapObj G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ.p X‚ÇÇ X‚ÇÉ) j ‚ü∂ A)
    (h : ‚àÄ (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (h : r ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j),
      ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ f =
        ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ g) : f = g := by
  apply Cofan.IsColimit.hom_ext (isColimitCofan‚ÇÉMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ j)
  rintro ‚ü®i, hi‚ü©
  exact h _ _ _ hi

variable (X‚ÇÅ X‚ÇÇ X‚ÇÉ)

@[reassoc (attr := simp)]
lemma Œπ_mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso_inv (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : r ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j) :
  have := H.hasMap
  ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´
    (mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ).inv j =
    ŒπMapTrifunctorMapObj (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ) r X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h := by
  have := H.hasMap
  dsimp only
  rw [‚Üê cancel_mono ((mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom j),
    assoc, Œπ_mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso_hom, iso_inv_hom_id_apply, comp_id]

end

end

section

variable
  {F‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÅ‚ÇÇ} {G : C‚ÇÅ‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ}
  {F : C‚ÇÅ ‚•§ C‚ÇÇ‚ÇÉ ‚•§ C‚ÇÑ} {G‚ÇÇ‚ÇÉ : C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÇ‚ÇÉ}
  (associator : bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G ‚âÖ bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ)
  {I‚ÇÅ I‚ÇÇ I‚ÇÉ J : Type*} {r : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí J}
  (œÅ‚ÇÅ‚ÇÇ : Bifunctor‚ÇÅ‚ÇÇBifunctorIndexData r)
  (œÅ‚ÇÇ‚ÇÉ : BifunctorBifunctor‚ÇÇ‚ÇÉIndexData r)
  (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ) (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ)
  [HasMap (((mapBifunctor F‚ÇÅ‚ÇÇ I‚ÇÅ I‚ÇÇ).obj X‚ÇÅ).obj X‚ÇÇ) œÅ‚ÇÅ‚ÇÇ.p]
  [HasMap (((mapBifunctor G œÅ‚ÇÅ‚ÇÇ.I‚ÇÅ‚ÇÇ I‚ÇÉ).obj (mapBifunctorMapObj F‚ÇÅ‚ÇÇ œÅ‚ÇÅ‚ÇÇ.p X‚ÇÅ X‚ÇÇ)).obj X‚ÇÉ) œÅ‚ÇÅ‚ÇÇ.q]
  [HasMap (((mapBifunctor G‚ÇÇ‚ÇÉ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ) œÅ‚ÇÇ‚ÇÉ.p]
  [HasMap (((mapBifunctor F I‚ÇÅ œÅ‚ÇÇ‚ÇÉ.I‚ÇÇ‚ÇÉ).obj X‚ÇÅ).obj (mapBifunctorMapObj G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ.p X‚ÇÇ X‚ÇÉ)) œÅ‚ÇÇ‚ÇÉ.q]
  [H‚ÇÅ‚ÇÇ : HasGoodBifunctor‚ÇÅ‚ÇÇBifunctorObj F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ]
  [H‚ÇÇ‚ÇÉ : HasGoodBifunctorBifunctor‚ÇÇ‚ÇÉObj F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]

noncomputable def mapBifunctorBifunctorAssociator :
    mapBifunctorMapObj G œÅ‚ÇÅ‚ÇÇ.q (mapBifunctorMapObj F‚ÇÅ‚ÇÇ œÅ‚ÇÅ‚ÇÇ.p X‚ÇÅ X‚ÇÇ) X‚ÇÉ ‚âÖ
      mapBifunctorMapObj F œÅ‚ÇÇ‚ÇÉ.q X‚ÇÅ (mapBifunctorMapObj G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ.p X‚ÇÇ X‚ÇÉ) :=
  have := H‚ÇÅ‚ÇÇ.hasMap
  have := H‚ÇÇ‚ÇÉ.hasMap
  (mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ).symm ‚â™‚â´
    mapIso ((((mapTrifunctorMapIso associator I‚ÇÅ I‚ÇÇ I‚ÇÉ).app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ) r ‚â™‚â´
    mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ

@[reassoc (attr := simp, nolint unusedHavesSuffices)]
lemma Œπ_mapBifunctorBifunctorAssociator_hom (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : r (i‚ÇÅ, i‚ÇÇ, i‚ÇÉ) = j) :
    ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´
      (mapBifunctorBifunctorAssociator associator œÅ‚ÇÅ‚ÇÇ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom j =
        ((associator.hom.app (X‚ÇÅ i‚ÇÅ)).app (X‚ÇÇ i‚ÇÇ)).app (X‚ÇÉ i‚ÇÉ) ‚â´
          ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h := by
  have := H‚ÇÅ‚ÇÇ.hasMap
  have := H‚ÇÇ‚ÇÉ.hasMap
  dsimp [mapBifunctorBifunctorAssociator]
  rw [Œπ_mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso_inv_assoc, ŒπMapTrifunctorMapObj,
    Œπ_mapMap_assoc, mapTrifunctorMapNatTrans_app_app_app]
  erw [Œπ_mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso_hom]

@[reassoc (attr := simp)]
lemma Œπ_mapBifunctorBifunctorAssociator_inv (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : r (i‚ÇÅ, i‚ÇÇ, i‚ÇÉ) = j) :
    ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´
      (mapBifunctorBifunctorAssociator associator œÅ‚ÇÅ‚ÇÇ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ).inv j =
    ((associator.inv.app (X‚ÇÅ i‚ÇÅ)).app (X‚ÇÇ i‚ÇÇ)).app (X‚ÇÉ i‚ÇÉ) ‚â´
      ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h := by
  rw [‚Üê cancel_mono ((mapBifunctorBifunctorAssociator associator œÅ‚ÇÅ‚ÇÇ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom j),
    assoc, assoc, iso_inv_hom_id_apply, comp_id, Œπ_mapBifunctorBifunctorAssociator_hom,
    ‚Üê NatTrans.comp_app_assoc, ‚Üê NatTrans.comp_app, Iso.inv_hom_id_app,
    NatTrans.id_app, NatTrans.id_app, id_comp]

lemma ŒπOrZero_mapBifunctorBifunctorAssociator_hom [HasZeroMorphisms C‚ÇÑ] [DecidableEq J] (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) :
    ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjOrZero F‚ÇÅ‚ÇÇ G œÅ‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j ‚â´
      (mapBifunctorBifunctorAssociator associator œÅ‚ÇÅ‚ÇÇ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom j =
        ((associator.hom.app (X‚ÇÅ i‚ÇÅ)).app (X‚ÇÇ i‚ÇÇ)).app (X‚ÇÉ i‚ÇÉ) ‚â´
          ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjOrZero F G‚ÇÇ‚ÇÉ œÅ‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j := by
  by_cases r (i‚ÇÅ, i‚ÇÇ, i‚ÇÉ) = j
  ¬∑ rw [ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjOrZero_eq _ _ _ _ _ _ _ _ _ _ h,
      ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjOrZero_eq _ _ _ _ _ _ _ _ _ _ h,
      Œπ_mapBifunctorBifunctorAssociator_hom]
  ¬∑ rw [ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjOrZero_eq_zero _ _ _ _ _ _ _ _ _ _ h,
      ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjOrZero_eq_zero _ _ _ _ _ _ _ _ _ _ h, zero_comp, comp_zero]

end

end GradedObject

end CategoryTheory
