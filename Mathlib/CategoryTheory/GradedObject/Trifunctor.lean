import Mathlib.CategoryTheory.GradedObject.Bifunctor

namespace CategoryTheory

open Category Limits

variable {C‚ÇÅ C‚ÇÇ C‚ÇÅ‚ÇÇ C‚ÇÇ‚ÇÉ C‚ÇÉ C‚ÇÑ : Type*}
  [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ] [Category C‚ÇÑ] [Category C‚ÇÅ‚ÇÇ] [Category C‚ÇÇ‚ÇÉ]
  (F F' : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ) (Œ± : F ‚ü∂ F') (e : F ‚âÖ F')

namespace GradedObject

@[simps]
def mapTrifunctorFunctorObj {I‚ÇÅ : Type*} (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (I‚ÇÇ I‚ÇÉ : Type*) :
    GradedObject I‚ÇÇ C‚ÇÇ ‚•§ GradedObject I‚ÇÉ C‚ÇÉ ‚•§ GradedObject (I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ) C‚ÇÑ where
  obj X‚ÇÇ :=
    { obj := fun X‚ÇÉ x => ((F.obj (X‚ÇÅ x.1)).obj (X‚ÇÇ x.2.1)).obj (X‚ÇÉ x.2.2)
      map := fun {X‚ÇÉ Y‚ÇÉ} œÜ x => ((F.obj (X‚ÇÅ x.1)).obj (X‚ÇÇ x.2.1)).map (œÜ x.2.2) }
  map {X‚ÇÇ Y‚ÇÇ} œÜ :=
    { app := fun X‚ÇÉ x => ((F.obj (X‚ÇÅ x.1)).map (œÜ x.2.1)).app (X‚ÇÉ x.2.2) }

@[simps]
def mapTrifunctorFunctor (I‚ÇÅ I‚ÇÇ I‚ÇÉ : Type*) :
    GradedObject I‚ÇÅ C‚ÇÅ ‚•§ GradedObject I‚ÇÇ C‚ÇÇ ‚•§ GradedObject I‚ÇÉ C‚ÇÉ ‚•§ GradedObject (I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ) C‚ÇÑ where
  obj X‚ÇÅ := mapTrifunctorFunctorObj F X‚ÇÅ I‚ÇÇ I‚ÇÉ
  map {X‚ÇÅ Y‚ÇÅ} œÜ :=
    { app := fun X‚ÇÇ =>
        { app := fun X‚ÇÉ x => ((F.map (œÜ x.1)).app (X‚ÇÇ x.2.1)).app (X‚ÇÉ x.2.2) }
      naturality := fun {X‚ÇÇ Y‚ÇÇ} œà => by
        ext X‚ÇÉ x
        dsimp
        simp only [‚Üê NatTrans.comp_app]
        congr 1
        rw [NatTrans.naturality] }

section

variable {F F'}

@[simps]
def mapTrifunctorFunctorMapNatTrans (I‚ÇÅ I‚ÇÇ I‚ÇÉ : Type*) :
    mapTrifunctorFunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ ‚ü∂ mapTrifunctorFunctor F' I‚ÇÅ I‚ÇÇ I‚ÇÉ where
  app X‚ÇÅ :=
    { app := fun X‚ÇÇ =>
        { app := fun X‚ÇÉ i => ((Œ±.app _).app _).app _ }
      naturality := fun {X‚ÇÇ Y‚ÇÇ} œÜ => by
        ext X‚ÇÉ ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©
        dsimp
        simp only [‚Üê NatTrans.comp_app, NatTrans.naturality] }
  naturality := fun {X‚ÇÅ Y‚ÇÅ} œÜ => by
    ext X‚ÇÇ X‚ÇÉ ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©
    dsimp
    simp only [‚Üê NatTrans.comp_app, NatTrans.naturality]

@[simps]
def mapTrifunctorFunctorMapIso (I‚ÇÅ I‚ÇÇ I‚ÇÉ : Type*) :
    mapTrifunctorFunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ ‚âÖ mapTrifunctorFunctor F' I‚ÇÅ I‚ÇÇ I‚ÇÉ where
  hom := mapTrifunctorFunctorMapNatTrans e.hom I‚ÇÅ I‚ÇÇ I‚ÇÉ
  inv := mapTrifunctorFunctorMapNatTrans e.inv I‚ÇÅ I‚ÇÇ I‚ÇÉ
  hom_inv_id := by
    ext X‚ÇÅ X‚ÇÇ X‚ÇÉ ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©
    dsimp
    simp only [‚Üê NatTrans.comp_app, e.hom_inv_id, NatTrans.id_app]
  inv_hom_id := by
    ext X‚ÇÅ X‚ÇÇ X‚ÇÉ ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©
    dsimp
    simp only [‚Üê NatTrans.comp_app, e.inv_hom_id, NatTrans.id_app]

end

section

variable {I‚ÇÅ I‚ÇÇ I‚ÇÉ J : Type*} (p : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí J)

@[simp]
noncomputable def mapTrifunctorMapObj (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ)
    (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ)
    [HasMap ((((mapTrifunctorFunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p] :
    GradedObject J C‚ÇÑ :=
  ((((mapTrifunctorFunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).mapObj p

noncomputable def ŒπMapTrifunctorMapObj (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ)
    (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ) (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : p ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j)
    [HasMap ((((mapTrifunctorFunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p] :
    ((F.obj (X‚ÇÅ i‚ÇÅ)).obj (X‚ÇÇ i‚ÇÇ)).obj (X‚ÇÉ i‚ÇÉ) ‚ü∂ mapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ j :=
  ((((mapTrifunctorFunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).ŒπMapObj p ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© j h

@[ext]
lemma mapTrifunctorMapObj_ext {X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ} {X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ}
    {X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ} {j : J} {A : C‚ÇÑ}
    [HasMap ((((mapTrifunctorFunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p]
    (f g : mapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ j ‚ü∂ A)
    (h : ‚àÄ (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (h : p ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j),
      ŒπMapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ f =
        ŒπMapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ g) : f = g := by
  apply mapObj_ext
  rintro ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© hi
  exact h _ _ _ hi

@[simp]
noncomputable def mapTrifunctorMapMap {X‚ÇÅ Y‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ)
    {X‚ÇÇ Y‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ} (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ)
    {X‚ÇÉ Y‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ} (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ)
    [HasMap ((((mapTrifunctorFunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p]
    [HasMap ((((mapTrifunctorFunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj Y‚ÇÅ).obj Y‚ÇÇ).obj Y‚ÇÉ) p] :
    mapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ ‚ü∂ mapTrifunctorMapObj F p Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ :=
  GradedObject.mapMap ((((mapTrifunctorFunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).map f‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ ‚â´
    (((mapTrifunctorFunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj Y‚ÇÅ).map f‚ÇÇ).app X‚ÇÉ ‚â´
    (((mapTrifunctorFunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj Y‚ÇÅ).obj Y‚ÇÇ).map f‚ÇÉ) p

lemma Œπ_mapTrifunctorMapMap {X‚ÇÅ Y‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ)
    {X‚ÇÇ Y‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ} (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ)
    {X‚ÇÉ Y‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ} (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ)
    [HasMap ((((mapTrifunctorFunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p]
    [HasMap ((((mapTrifunctorFunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj Y‚ÇÅ).obj Y‚ÇÇ).obj Y‚ÇÉ) p]
    (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : p ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j) :
  ŒπMapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ mapTrifunctorMapMap F p f‚ÇÅ f‚ÇÇ f‚ÇÉ j =
    ((F.map (f‚ÇÅ i‚ÇÅ)).app (X‚ÇÇ i‚ÇÇ)).app (X‚ÇÉ i‚ÇÉ) ‚â´
      ((F.obj (Y‚ÇÅ i‚ÇÅ)).map (f‚ÇÇ i‚ÇÇ)).app (X‚ÇÉ i‚ÇÉ) ‚â´
      ((F.obj (Y‚ÇÅ i‚ÇÅ)).obj (Y‚ÇÇ i‚ÇÇ)).map (f‚ÇÉ i‚ÇÉ) ‚â´
      ŒπMapTrifunctorMapObj F p Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h := by
  dsimp only [ŒπMapTrifunctorMapObj, mapTrifunctorMapMap]
  rw [Œπ_mapMap]
  dsimp
  rw [assoc, assoc]

instance (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ) (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ)
  [h : HasMap ((((mapTrifunctorFunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p] :
      HasMap (((mapTrifunctorFunctorObj F X‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ) p := h

set_option maxHeartbeats 400000 in
@[simps]
noncomputable def mapTrifunctorMapFunctorObj (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ)
    [‚àÄ X‚ÇÇ X‚ÇÉ, HasMap ((((mapTrifunctorFunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p] :
    GradedObject I‚ÇÇ C‚ÇÇ ‚•§ GradedObject I‚ÇÉ C‚ÇÉ ‚•§ GradedObject J C‚ÇÑ where
  obj X‚ÇÇ :=
    { obj := fun X‚ÇÉ => mapTrifunctorMapObj F p X‚ÇÅ X‚ÇÇ X‚ÇÉ
      map := fun {X‚ÇÉ Y‚ÇÉ} œÜ => mapTrifunctorMapMap F p (ùüô X‚ÇÅ) (ùüô X‚ÇÇ) œÜ }
  map {X‚ÇÇ Y‚ÇÇ} œÜ :=
    { app := fun X‚ÇÉ => mapTrifunctorMapMap F p (ùüô X‚ÇÅ) œÜ (ùüô X‚ÇÉ)
      naturality := fun {X‚ÇÉ Y‚ÇÉ} œÜ => by
        dsimp
        simp only [Functor.map_id, mapTrifunctorFunctor_obj, NatTrans.id_app,
          Category.id_comp, Category.comp_id, ‚Üê mapMap_comp]
        apply congr_mapMap
        simp }

set_option maxHeartbeats 400000 in
@[simps]
noncomputable def mapTrifunctorMapFunctor
    [‚àÄ X‚ÇÅ X‚ÇÇ X‚ÇÉ, HasMap ((((mapTrifunctorFunctor F I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) p] :
    GradedObject I‚ÇÅ C‚ÇÅ ‚•§ GradedObject I‚ÇÇ C‚ÇÇ ‚•§ GradedObject I‚ÇÉ C‚ÇÉ ‚•§ GradedObject J C‚ÇÑ where
  obj X‚ÇÅ := mapTrifunctorMapFunctorObj F p X‚ÇÅ
  map := fun {X‚ÇÅ Y‚ÇÅ} œÜ =>
    { app := fun X‚ÇÇ =>
        { app := fun X‚ÇÉ => mapTrifunctorMapMap F p œÜ (ùüô X‚ÇÇ) (ùüô X‚ÇÉ)
          naturality := fun {X‚ÇÉ Y‚ÇÉ} œÜ => by
            dsimp [mapTrifunctorMapFunctorObj]
            simp only [Functor.map_id, mapTrifunctorFunctor_obj, NatTrans.id_app,
              Category.id_comp, Category.comp_id, ‚Üê mapMap_comp]
            apply congr_mapMap
            simp }
      naturality := fun {X‚ÇÇ Y‚ÇÇ} œÜ => by
        ext X‚ÇÉ : 2
        dsimp [mapTrifunctorMapFunctorObj]
        simp only [Functor.map_id, mapTrifunctorFunctor_obj, NatTrans.id_app,
          Category.comp_id, Category.id_comp, ‚Üê mapMap_comp]
        apply congr_mapMap
        simp only [‚Üê NatTrans.comp_app]
        congr 1
        simp }

end

section

variable (F‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÅ‚ÇÇ) (G : C‚ÇÅ‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ)

@[simps]
def _root_.CategoryTheory.bifunctorComp‚ÇÅ‚ÇÇObj (X‚ÇÅ : C‚ÇÅ) : C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ where
  obj X‚ÇÇ :=
    { obj := fun X‚ÇÉ => (G.obj ((F‚ÇÅ‚ÇÇ.obj X‚ÇÅ).obj X‚ÇÇ)).obj X‚ÇÉ
      map := fun {X‚ÇÉ Y‚ÇÉ} œÜ => (G.obj ((F‚ÇÅ‚ÇÇ.obj X‚ÇÅ).obj X‚ÇÇ)).map œÜ }
  map {X‚ÇÇ Y‚ÇÇ} œÜ :=
    { app := fun X‚ÇÉ => (G.map ((F‚ÇÅ‚ÇÇ.obj X‚ÇÅ).map œÜ)).app X‚ÇÉ }

@[simps]
def _root_.CategoryTheory.bifunctorComp‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ where
  obj X‚ÇÅ := _root_.CategoryTheory.bifunctorComp‚ÇÅ‚ÇÇObj F‚ÇÅ‚ÇÇ G X‚ÇÅ
  map {X‚ÇÅ Y‚ÇÅ} œÜ :=
    { app := fun X‚ÇÇ =>
        { app := fun X‚ÇÉ => (G.map ((F‚ÇÅ‚ÇÇ.map œÜ).app X‚ÇÇ)).app X‚ÇÉ }
      naturality := fun {X‚ÇÇ Y‚ÇÇ} œà => by
        ext X‚ÇÉ
        dsimp
        simp only [‚Üê NatTrans.comp_app, ‚Üê G.map_comp, NatTrans.naturality] }

variable
  {I‚ÇÅ I‚ÇÇ I‚ÇÅ‚ÇÇ I‚ÇÉ J : Type*} (p : I‚ÇÅ √ó I‚ÇÇ ‚Üí I‚ÇÅ‚ÇÇ) (q : I‚ÇÅ‚ÇÇ √ó I‚ÇÉ ‚Üí J)
    (r : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí J) (hr : ‚àÄ (i : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ), r i = q ‚ü®p ‚ü®i.1, i.2.1‚ü©, i.2.2‚ü©)

variable (I‚ÇÉ)

def p' : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí I‚ÇÅ‚ÇÇ √ó I‚ÇÉ := fun ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© => ‚ü®p ‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, i‚ÇÉ‚ü©

variable (I‚ÇÅ I‚ÇÇ)

@[simps]
def œÄ‚ÇÅ‚ÇÇ_‚ÇÉ : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí I‚ÇÅ √ó I‚ÇÇ := fun ‚ü®i‚ÇÅ, i‚ÇÇ, _‚ü© => ‚ü®i‚ÇÅ, i‚ÇÇ‚ü©

variable {I‚ÇÅ I‚ÇÇ I‚ÇÉ} (I‚ÇÅ‚ÇÇ)

def Œ≥ (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ) : GradedObject (I‚ÇÅ‚ÇÇ √ó I‚ÇÉ) (C‚ÇÅ‚ÇÇ ‚•§ C‚ÇÑ) :=
  fun ‚ü®_, k‚ü© => G.flip.obj (X‚ÇÉ k)

variable {I‚ÇÅ‚ÇÇ}

section

class HasGoodBifunctor‚ÇÅ‚ÇÇBifunctorObj (hr : ‚àÄ (i : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ), r i = q ‚ü®p ‚ü®i.1, i.2.1‚ü©, i.2.2‚ü©)
  (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ) (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ)
    [HasMap (((mapBifunctorFunctor F‚ÇÅ‚ÇÇ I‚ÇÅ I‚ÇÇ).obj X‚ÇÅ).obj X‚ÇÇ) p]
    [HasMap (((mapBifunctorFunctor G I‚ÇÅ‚ÇÇ I‚ÇÉ).obj (mapBifunctorMapObj F‚ÇÅ‚ÇÇ p X‚ÇÅ X‚ÇÇ)).obj X‚ÇÉ) q] :=
  hasMap‚ÇÇ : HasMap ((((mapTrifunctorFunctor (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) r
  hasMap‚ÇÉ : HasMap ((((mapTrifunctorFunctor (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) (p' I‚ÇÉ p)
  hasMap‚ÇÑ : HasMap (((((mapTrifunctorFunctor (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).mapObj (p' I‚ÇÉ p)) q
  hasMap‚ÇÖ : HasMap ((comap _ (œÄ‚ÇÅ‚ÇÇ_‚ÇÉ I‚ÇÅ I‚ÇÇ I‚ÇÉ)).obj (((mapBifunctorFunctor F‚ÇÅ‚ÇÇ I‚ÇÅ I‚ÇÇ).obj X‚ÇÅ).obj X‚ÇÇ)) (p' I‚ÇÉ p)
  preservesMap : PreservesMap (Œ≥ G I‚ÇÅ‚ÇÇ X‚ÇÉ) (p' I‚ÇÉ p) ((comap _ (œÄ‚ÇÅ‚ÇÇ_‚ÇÉ I‚ÇÅ I‚ÇÇ I‚ÇÉ)).obj (((mapBifunctorFunctor F‚ÇÅ‚ÇÇ I‚ÇÅ I‚ÇÇ).obj X‚ÇÅ).obj X‚ÇÇ))

attribute [instance] HasGoodBifunctor‚ÇÅ‚ÇÇBifunctorObj.hasMap‚ÇÑ

variable (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ) (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ)
  [HasMap (((mapBifunctorFunctor F‚ÇÅ‚ÇÇ I‚ÇÅ I‚ÇÇ).obj X‚ÇÅ).obj X‚ÇÇ) p]
  [HasMap (((mapBifunctorFunctor G I‚ÇÅ‚ÇÇ I‚ÇÉ).obj (mapBifunctorMapObj F‚ÇÅ‚ÇÇ p X‚ÇÅ X‚ÇÇ)).obj X‚ÇÉ) q]

variable [H : HasGoodBifunctor‚ÇÅ‚ÇÇBifunctorObj F‚ÇÅ‚ÇÇ G p q r hr X‚ÇÅ X‚ÇÇ X‚ÇÉ]

attribute [local ext] mapObj_ext

noncomputable def mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso‚ÇÅ :
    have := H.hasMap‚ÇÇ
    have := H.hasMap‚ÇÉ
    (((((mapTrifunctorFunctor (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).mapObj (p' I‚ÇÉ p)).mapObj q ‚âÖ
      mapTrifunctorMapObj (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G) r X‚ÇÅ X‚ÇÇ X‚ÇÉ :=
  have := H.hasMap‚ÇÇ
  have := H.hasMap‚ÇÉ
  ((((mapTrifunctorFunctor (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).mapObjMapObjIso (p' I‚ÇÉ p) q r hr

noncomputable def mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso‚ÇÇ :
    have := H.hasMap‚ÇÉ
    have := H.hasMap‚ÇÖ
    ((((mapTrifunctorFunctor
      (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).mapObj (p' I‚ÇÉ p) ‚âÖ
    (applyFunctorsObj (Œ≥ G I‚ÇÅ‚ÇÇ X‚ÇÉ)).obj
      (((comap _ (œÄ‚ÇÅ‚ÇÇ_‚ÇÉ I‚ÇÅ I‚ÇÇ I‚ÇÉ)).obj (((mapBifunctorFunctor F‚ÇÅ‚ÇÇ I‚ÇÅ I‚ÇÇ).obj X‚ÇÅ).obj X‚ÇÇ)).mapObj (p' I‚ÇÉ p)) :=
  have := H.hasMap‚ÇÖ
  letI := H.preservesMap
  (comapObjApplyFunctorsObjObjMapObjIso (Œ≥ G I‚ÇÅ‚ÇÇ X‚ÇÉ) (p' I‚ÇÉ p) ((comap _ (œÄ‚ÇÅ‚ÇÇ_‚ÇÉ I‚ÇÅ I‚ÇÇ I‚ÇÉ)).obj (((mapBifunctorFunctor F‚ÇÅ‚ÇÇ I‚ÇÅ I‚ÇÇ).obj X‚ÇÅ).obj X‚ÇÇ)))

noncomputable def mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso‚ÇÉ :
    have := H.hasMap‚ÇÖ
    ((mapBifunctorFunctor G I‚ÇÅ‚ÇÇ I‚ÇÉ).obj (mapBifunctorMapObj F‚ÇÅ‚ÇÇ p X‚ÇÅ X‚ÇÇ)).obj X‚ÇÉ ‚âÖ
    (applyFunctorsObj (Œ≥ G I‚ÇÅ‚ÇÇ X‚ÇÉ)).obj
      (((comap _ (œÄ‚ÇÅ‚ÇÇ_‚ÇÉ I‚ÇÅ I‚ÇÇ I‚ÇÉ)).obj (((mapBifunctorFunctor F‚ÇÅ‚ÇÇ I‚ÇÅ I‚ÇÇ).obj X‚ÇÅ).obj X‚ÇÇ)).mapObj (p' I‚ÇÉ p)) :=
  have := H.hasMap‚ÇÖ
  isoMk  _ _ (fun ‚ü®i‚ÇÅ‚ÇÇ, j‚ü© => by
    refine' (G.mapIso _).app (X‚ÇÉ j)
    exact
      { hom := descMapObj _ _ (fun ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© _ =>
          ((comap C‚ÇÅ‚ÇÇ (œÄ‚ÇÅ‚ÇÇ_‚ÇÉ I‚ÇÅ I‚ÇÇ I‚ÇÉ)).obj
            (((mapBifunctorFunctor F‚ÇÅ‚ÇÇ I‚ÇÅ I‚ÇÇ).obj X‚ÇÅ).obj X‚ÇÇ)).ŒπMapObj (p' I‚ÇÉ p) ‚ü®i‚ÇÅ, i‚ÇÇ, j‚ü© ‚ü®i‚ÇÅ‚ÇÇ, j‚ü© (by aesop))
        inv := descMapObj _ _ (fun ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© h =>
          (((mapBifunctorFunctor F‚ÇÅ‚ÇÇ I‚ÇÅ I‚ÇÇ).obj X‚ÇÅ).obj X‚ÇÇ).ŒπMapObj p ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© i‚ÇÅ‚ÇÇ (congr_arg _root_.Prod.fst h))
        inv_hom_id := by
          ext ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© h
          obtain rfl : i‚ÇÉ = j := congr_arg _root_.Prod.snd h
          simp })

noncomputable def mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso :
    have := H.hasMap‚ÇÇ
    mapTrifunctorMapObj (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G) r X‚ÇÅ X‚ÇÇ X‚ÇÉ ‚âÖ
    mapBifunctorMapObj G q (mapBifunctorMapObj F‚ÇÅ‚ÇÇ p X‚ÇÅ X‚ÇÇ) X‚ÇÉ :=
  (mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso‚ÇÅ F‚ÇÅ‚ÇÇ G p q r hr X‚ÇÅ X‚ÇÇ X‚ÇÉ).symm ‚â™‚â´
    mapIso ((mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso‚ÇÇ F‚ÇÅ‚ÇÇ G p q r hr X‚ÇÅ X‚ÇÇ X‚ÇÉ) ‚â™‚â´
      (mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso‚ÇÉ F‚ÇÅ‚ÇÇ G p q r hr X‚ÇÅ X‚ÇÇ X‚ÇÉ).symm) q

noncomputable def ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : q (p (i‚ÇÅ, i‚ÇÇ), i‚ÇÉ) = j) :
    (G.obj ((F‚ÇÅ‚ÇÇ.obj (X‚ÇÅ i‚ÇÅ)).obj (X‚ÇÇ i‚ÇÇ))).obj (X‚ÇÉ i‚ÇÉ) ‚ü∂
      mapBifunctorMapObj G q (mapBifunctorMapObj F‚ÇÅ‚ÇÇ p X‚ÇÅ X‚ÇÇ) X‚ÇÉ j :=
  (G.map (ŒπMapBifunctorMapObj F‚ÇÅ‚ÇÇ p X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ _ rfl)).app (X‚ÇÉ i‚ÇÉ) ‚â´
    ŒπMapBifunctorMapObj G q (mapBifunctorMapObj F‚ÇÅ‚ÇÇ p X‚ÇÅ X‚ÇÇ) X‚ÇÉ (p ‚ü®i‚ÇÅ, i‚ÇÇ‚ü©) i‚ÇÉ j h

@[reassoc (attr := simp)]
lemma Œπ_mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso_hom (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : r ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j) :
    have := H.hasMap‚ÇÇ
    ŒπMapTrifunctorMapObj (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G) r X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ (mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso F‚ÇÅ‚ÇÇ G p q r hr X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom j =
      ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G p q X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j (by rw [‚Üê h, hr]) := by
  sorry

@[reassoc (attr := simp)]
lemma Œπ_mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso_inv (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : q ‚ü®p ‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, i‚ÇÉ‚ü© = j) :
    have := H.hasMap‚ÇÇ
    ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G p q X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´
      (mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso F‚ÇÅ‚ÇÇ G p q r hr X‚ÇÅ X‚ÇÇ X‚ÇÉ).inv j =
    ŒπMapTrifunctorMapObj (bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G) r X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j (by rw [hr, h]) := by
  dsimp only
  rw [‚Üê cancel_mono ((mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso F‚ÇÅ‚ÇÇ G p q r hr X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom j), assoc,
    iso_inv_hom_id_apply, comp_id, Œπ_mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso_hom]

variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ}

@[ext]
lemma mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj_ext {j : J} {A : C‚ÇÑ}
    (f g : mapBifunctorMapObj G q (mapBifunctorMapObj F‚ÇÅ‚ÇÇ p X‚ÇÅ X‚ÇÇ) X‚ÇÉ j ‚ü∂ A)
    (h : ‚àÄ (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (h : q (p ‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, i‚ÇÉ) = j),
      ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G p q X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ f =
        ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G p q X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ g) : f = g := by
  rw [‚Üê cancel_epi ((mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso F‚ÇÅ‚ÇÇ G p q r hr X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom j)]
  have := H.hasMap‚ÇÇ
  ext i‚ÇÅ i‚ÇÇ i‚ÇÉ hi
  simp only [Œπ_mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso_hom_assoc]
  apply h

end

end

section

variable (F : C‚ÇÅ ‚•§ C‚ÇÇ‚ÇÉ ‚•§ C‚ÇÑ) (G‚ÇÇ‚ÇÉ : C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÇ‚ÇÉ)

@[simps]
def _root_.CategoryTheory.bifunctorComp‚ÇÇ‚ÇÉObj (X‚ÇÅ : C‚ÇÅ) : C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ where
  obj X‚ÇÇ :=
    { obj := fun X‚ÇÉ => (F.obj X‚ÇÅ).obj ((G‚ÇÇ‚ÇÉ.obj X‚ÇÇ).obj X‚ÇÉ)
      map := fun {X‚ÇÉ Y‚ÇÉ} œÜ => (F.obj X‚ÇÅ).map ((G‚ÇÇ‚ÇÉ.obj X‚ÇÇ).map œÜ) }
  map {X‚ÇÇ Y‚ÇÇ} œÜ :=
    { app := fun X‚ÇÉ => (F.obj X‚ÇÅ).map ((G‚ÇÇ‚ÇÉ.map œÜ).app X‚ÇÉ)
      naturality := fun {X‚ÇÉ Y‚ÇÉ} œÜ => by
        dsimp
        simp only [‚Üê Functor.map_comp, NatTrans.naturality] }

@[simps]
def _root_.CategoryTheory.bifunctorComp‚ÇÇ‚ÇÉ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ where
  obj X‚ÇÅ := bifunctorComp‚ÇÇ‚ÇÉObj F G‚ÇÇ‚ÇÉ X‚ÇÅ
  map {X‚ÇÅ Y‚ÇÅ} œÜ :=
    { app := fun X‚ÇÇ =>
        { app := fun X‚ÇÉ => (F.map œÜ).app ((G‚ÇÇ‚ÇÉ.obj X‚ÇÇ).obj X‚ÇÉ) } }

variable
  {I‚ÇÅ I‚ÇÇ I‚ÇÉ I‚ÇÇ‚ÇÉ J : Type*} (p : I‚ÇÇ √ó I‚ÇÉ ‚Üí I‚ÇÇ‚ÇÉ) (q : I‚ÇÅ √ó I‚ÇÇ‚ÇÉ ‚Üí J)
    (r : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí J) (hr : ‚àÄ (i : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ), r i = q ‚ü®i.1, p i.2‚ü©)

variable (I‚ÇÅ)

def p'' : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí I‚ÇÅ √ó I‚ÇÇ‚ÇÉ := fun ‚ü®i‚ÇÅ, i‚ÇÇ‚ÇÉ‚ü© => ‚ü®i‚ÇÅ, p i‚ÇÇ‚ÇÉ‚ü©

variable {I‚ÇÅ} (I‚ÇÇ‚ÇÉ)

def Œ≥' (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) : GradedObject (I‚ÇÅ √ó I‚ÇÇ‚ÇÉ) (C‚ÇÇ‚ÇÉ ‚•§ C‚ÇÑ) :=
  fun ‚ü®i‚ÇÅ, _‚ü© => F.obj (X‚ÇÅ i‚ÇÅ)

variable {I‚ÇÇ‚ÇÉ}

section

class HasGoodBifunctorBifunctor‚ÇÇ‚ÇÉObj (hr : ‚àÄ (i : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ), r i = q ‚ü®i.1, p i.2‚ü©)
  (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ) (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ)
    [HasMap (((mapBifunctorFunctor G‚ÇÇ‚ÇÉ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ) p]
    [HasMap (((mapBifunctorFunctor F I‚ÇÅ I‚ÇÇ‚ÇÉ).obj X‚ÇÅ).obj (mapBifunctorMapObj G‚ÇÇ‚ÇÉ p X‚ÇÇ X‚ÇÉ)) q] :=
  hasMap‚ÇÇ : HasMap ((((mapTrifunctorFunctor (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) r
  hasMap‚ÇÉ : HasMap ((((mapTrifunctorFunctor (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ) (p'' I‚ÇÅ p)
  hasMap‚ÇÑ : HasMap (((((mapTrifunctorFunctor (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).mapObj (p'' I‚ÇÅ p)) q
  hasMap‚ÇÖ : HasMap ((comap C‚ÇÇ‚ÇÉ _root_.Prod.snd).obj (((mapBifunctorFunctor G‚ÇÇ‚ÇÉ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ)) (p'' I‚ÇÅ p)
  preservesMap : PreservesMap (Œ≥' F I‚ÇÇ‚ÇÉ X‚ÇÅ) (p'' I‚ÇÅ p) ((comap C‚ÇÇ‚ÇÉ _root_.Prod.snd).obj (((mapBifunctorFunctor G‚ÇÇ‚ÇÉ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ))

attribute [instance] HasGoodBifunctorBifunctor‚ÇÇ‚ÇÉObj.hasMap‚ÇÑ

variable (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ) (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ)
  [HasMap (((mapBifunctorFunctor G‚ÇÇ‚ÇÉ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ) p]
  [HasMap (((mapBifunctorFunctor F I‚ÇÅ I‚ÇÇ‚ÇÉ).obj X‚ÇÅ).obj (mapBifunctorMapObj G‚ÇÇ‚ÇÉ p X‚ÇÇ X‚ÇÉ)) q]
  [H : HasGoodBifunctorBifunctor‚ÇÇ‚ÇÉObj F G‚ÇÇ‚ÇÉ p q r hr X‚ÇÅ X‚ÇÇ X‚ÇÉ]

attribute [local ext] mapObj_ext

noncomputable def mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso‚ÇÅ :
    have := H.hasMap‚ÇÇ
    have := H.hasMap‚ÇÉ
    (((((mapTrifunctorFunctor (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).mapObj (p'' I‚ÇÅ p)).mapObj q ‚âÖ
      mapTrifunctorMapObj (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ) r X‚ÇÅ X‚ÇÇ X‚ÇÉ :=
  have := H.hasMap‚ÇÇ
  have := H.hasMap‚ÇÉ
  ((((mapTrifunctorFunctor (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).mapObjMapObjIso (p'' I‚ÇÅ p) q r hr

noncomputable def mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso‚ÇÇ :
    have := H.hasMap‚ÇÉ
    have := H.hasMap‚ÇÖ
    (((((mapTrifunctorFunctor (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).mapObj (p'' I‚ÇÅ p)) ‚âÖ
      (applyFunctorsObj (Œ≥' F I‚ÇÇ‚ÇÉ X‚ÇÅ)).obj (((comap _ _root_.Prod.snd).obj (((mapBifunctorFunctor G‚ÇÇ‚ÇÉ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ)).mapObj (p'' I‚ÇÅ p)) :=
  have := H.hasMap‚ÇÉ
  have := H.hasMap‚ÇÖ
  have := H.preservesMap
  comapObjApplyFunctorsObjObjMapObjIso (Œ≥' F I‚ÇÇ‚ÇÉ X‚ÇÅ) (p'' I‚ÇÅ p) ((comap _ _root_.Prod.snd).obj (((mapBifunctorFunctor G‚ÇÇ‚ÇÉ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ))

noncomputable def mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso‚ÇÉ :
    have := H.hasMap‚ÇÖ
    ((mapBifunctorFunctor F I‚ÇÅ I‚ÇÇ‚ÇÉ).obj X‚ÇÅ).obj (mapBifunctorMapObj G‚ÇÇ‚ÇÉ p X‚ÇÇ X‚ÇÉ) ‚âÖ
      (applyFunctorsObj (Œ≥' F I‚ÇÇ‚ÇÉ X‚ÇÅ)).obj (((comap _ _root_.Prod.snd).obj (((mapBifunctorFunctor G‚ÇÇ‚ÇÉ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ)).mapObj (p'' I‚ÇÅ p)) :=
  have := H.hasMap‚ÇÖ
  isoMk _ _ (fun ‚ü®i‚ÇÅ, i‚ÇÇ‚ÇÉ‚ü© => (F.obj (X‚ÇÅ i‚ÇÅ)).mapIso
    { hom := descMapObj _ _ (fun ‚ü®i‚ÇÇ, i‚ÇÉ‚ü© _ =>
        ((comap C‚ÇÇ‚ÇÉ _root_.Prod.snd).obj (((mapBifunctorFunctor G‚ÇÇ‚ÇÉ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ)).ŒπMapObj (p'' I‚ÇÅ p) ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© ‚ü®i‚ÇÅ, i‚ÇÇ‚ÇÉ‚ü© (by aesop))
      inv := descMapObj _ _ (fun ‚ü®i‚ÇÅ', i‚ÇÇ, i‚ÇÉ‚ü© h =>
        (((mapBifunctorFunctor G‚ÇÇ‚ÇÉ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ).ŒπMapObj p ‚ü®i‚ÇÇ, i‚ÇÉ‚ü© i‚ÇÇ‚ÇÉ (congr_arg _root_.Prod.snd h))
      inv_hom_id := by
        ext ‚ü®i‚ÇÅ', i‚ÇÇ, i‚ÇÉ‚ü© h
        obtain rfl : i‚ÇÅ' = i‚ÇÅ := (congr_arg _root_.Prod.fst h)
        simp })

noncomputable def mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso :
    have := H.hasMap‚ÇÇ
    mapTrifunctorMapObj (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ) r X‚ÇÅ X‚ÇÇ X‚ÇÉ ‚âÖ
      mapBifunctorMapObj F q X‚ÇÅ (mapBifunctorMapObj G‚ÇÇ‚ÇÉ p X‚ÇÇ X‚ÇÉ) :=
  (mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso‚ÇÅ F G‚ÇÇ‚ÇÉ p q r hr X‚ÇÅ X‚ÇÇ X‚ÇÉ).symm ‚â™‚â´
    mapIso (mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso‚ÇÇ F G‚ÇÇ‚ÇÉ p q r hr X‚ÇÅ X‚ÇÇ X‚ÇÉ ‚â™‚â´
      (mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso‚ÇÉ F G‚ÇÇ‚ÇÉ p q r hr X‚ÇÅ X‚ÇÇ X‚ÇÉ).symm) q

noncomputable def ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : q ‚ü®i‚ÇÅ, p ‚ü®i‚ÇÇ, i‚ÇÉ‚ü©‚ü© = j) :
    (F.obj (X‚ÇÅ i‚ÇÅ)).obj ((G‚ÇÇ‚ÇÉ.obj (X‚ÇÇ i‚ÇÇ)).obj (X‚ÇÉ i‚ÇÉ)) ‚ü∂
      mapBifunctorMapObj F q X‚ÇÅ (mapBifunctorMapObj G‚ÇÇ‚ÇÉ p X‚ÇÇ X‚ÇÉ) j :=
  (F.obj (X‚ÇÅ i‚ÇÅ)).map (ŒπMapBifunctorMapObj G‚ÇÇ‚ÇÉ p X‚ÇÇ X‚ÇÉ i‚ÇÇ i‚ÇÉ _ rfl) ‚â´
    ŒπMapBifunctorMapObj F q X‚ÇÅ (mapBifunctorMapObj G‚ÇÇ‚ÇÉ p X‚ÇÇ X‚ÇÉ) i‚ÇÅ (p ‚ü®i‚ÇÇ, i‚ÇÉ‚ü©) j h

@[reassoc (attr := simp)]
lemma Œπ_mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso_hom (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : r ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© = j) :
    have := H.hasMap‚ÇÇ
    ŒπMapTrifunctorMapObj (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ) r X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´
      (mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso F G‚ÇÇ‚ÇÉ p q r hr X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom j =
      ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ p q X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j (by rw [‚Üê h, hr]) := by
  -- needs cleaning up...
  have := H.hasMap‚ÇÇ
  have := H.hasMap‚ÇÉ
  have := H.hasMap‚ÇÖ
  dsimp only [ŒπMapTrifunctorMapObj, mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso]
  simp only [bifunctorComp‚ÇÇ‚ÇÉ_obj, bifunctorComp‚ÇÇ‚ÇÉObj_obj_obj, mapBifunctorMapObj, mapTrifunctorMapObj,
    mapTrifunctorFunctor_obj, Iso.trans_hom, Iso.symm_hom, categoryOfGradedObjects_comp]
  dsimp only [mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso‚ÇÅ]
  simp only [mapTrifunctorFunctor_obj, mapObjMapObjIso_inv, mapTrifunctorFunctorObj_obj_obj, bifunctorComp‚ÇÇ‚ÇÉ_obj,
    bifunctorComp‚ÇÇ‚ÇÉObj_obj_obj]
  erw [Œπ_descMapObj_assoc]
  dsimp only [mapIso]
  simp only [mapTrifunctorFunctor_obj, mapTrifunctorFunctorObj_obj_obj, bifunctorComp‚ÇÇ‚ÇÉ_obj, bifunctorComp‚ÇÇ‚ÇÉObj_obj_obj,
    Iso.trans_hom, Iso.symm_hom, assoc]
  have : HasMap (((mapBifunctorFunctor F I‚ÇÅ I‚ÇÇ‚ÇÉ).obj X‚ÇÅ).obj (mapObj (((mapBifunctorFunctor G‚ÇÇ‚ÇÉ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ) p)) q := by
    assumption
  rw [Œπ_mapMap]
  simp only [mapTrifunctorFunctor_obj, mapBifunctorFunctor_obj_obj, categoryOfGradedObjects_comp, applyFunctorsObj_obj,
    assoc]
  dsimp only [mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso‚ÇÇ, comapObjApplyFunctorsObjObjMapObjIso, asIso]
  have : HasMap (fun x ‚Ü¶ (G‚ÇÇ‚ÇÉ.obj (X‚ÇÇ x.snd.fst)).obj (X‚ÇÉ x.snd.snd)) (p'' I‚ÇÅ p) := by assumption
  have : HasMap
    ((applyFunctorsObj ((comap (C‚ÇÇ‚ÇÉ ‚•§ C‚ÇÑ) (p'' I‚ÇÅ p)).obj (Œ≥' F I‚ÇÇ‚ÇÉ X‚ÇÅ))).obj
      (fun x ‚Ü¶
        (G‚ÇÇ‚ÇÉ.obj (X‚ÇÇ x.snd.fst)).obj (X‚ÇÉ x.snd.snd))) (p'' I‚ÇÅ p) := by assumption
  erw [Œπ_comapObjApplyFunctorsObjObjMapObj_assoc (Œ≥' F I‚ÇÇ‚ÇÉ X‚ÇÅ) (p'' I‚ÇÅ p)]
  dsimp only [Œ≥', mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso‚ÇÉ]
  simp only [applyFunctorsObj_obj, Pi.comap_obj, mapBifunctorMapObj, isoMk_inv, mapBifunctorFunctor_obj_obj,
    Functor.mapIso_inv]
  rw [‚Üê Functor.map_comp_assoc]
  erw [Œπ_descMapObj]
  rfl

@[reassoc (attr := simp)]
lemma Œπ_mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso_inv (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : q ‚ü®i‚ÇÅ, p ‚ü®i‚ÇÇ, i‚ÇÉ‚ü©‚ü© = j) :
  ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ p q X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´
    (mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso F G‚ÇÇ‚ÇÉ p q r hr X‚ÇÅ X‚ÇÇ X‚ÇÉ).inv j =
    have := H.hasMap‚ÇÇ
    ŒπMapTrifunctorMapObj (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ) r X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j (by rw [hr, h]) := by
  rw [‚Üê cancel_mono ((mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso F G‚ÇÇ‚ÇÉ p q r hr X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom j),
    assoc, Œπ_mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso_hom, iso_inv_hom_id_apply, comp_id]

variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ}

@[ext]
lemma mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj_ext {j : J} {A : C‚ÇÑ}
    (f g : mapBifunctorMapObj F q X‚ÇÅ (mapBifunctorMapObj G‚ÇÇ‚ÇÉ p X‚ÇÇ X‚ÇÉ) j ‚ü∂ A)
    (h : ‚àÄ (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (h : q ‚ü®i‚ÇÅ, p ‚ü®i‚ÇÇ, i‚ÇÉ‚ü©‚ü© = j),
      ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ p q X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ f =
        ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ p q X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´ g) : f = g := by
  rw [‚Üê cancel_epi ((mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso F G‚ÇÇ‚ÇÉ p q r hr X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom j)]
  have := H.hasMap‚ÇÇ
  ext i‚ÇÅ i‚ÇÇ i‚ÇÉ hi
  simp only [Œπ_mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso_hom_assoc]
  apply h

variable (X‚ÇÅ X‚ÇÇ X‚ÇÉ)

noncomputable def cofanMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj (j : J) :
    ((((mapTrifunctorFunctor (bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ) I‚ÇÅ I‚ÇÇ I‚ÇÉ).obj X‚ÇÅ).obj X‚ÇÇ).obj X‚ÇÉ).MapObjCandidate r j :=
  MapObjCandidate.mk _ _ _ (mapBifunctorMapObj F q X‚ÇÅ (mapBifunctorMapObj G‚ÇÇ‚ÇÉ p X‚ÇÇ X‚ÇÉ) j)
    (fun ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü© hi =>
      ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ p q X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j (by rw [‚Üêhi, hr]))

noncomputable def isColimitCofanMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj (j : J) :
    IsColimit (cofanMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ p q r hr X‚ÇÅ X‚ÇÇ X‚ÇÉ j) := by
  have := H
  sorry

end

end

section

variable
  {F‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÅ‚ÇÇ} {G : C‚ÇÅ‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ}
  {F : C‚ÇÅ ‚•§ C‚ÇÇ‚ÇÉ ‚•§ C‚ÇÑ} {G‚ÇÇ‚ÇÉ : C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÇ‚ÇÉ}
  (associator : bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G ‚âÖ bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ)
  {I‚ÇÅ I‚ÇÇ I‚ÇÉ I‚ÇÅ‚ÇÇ I‚ÇÇ‚ÇÉ J : Type*} (p‚ÇÅ‚ÇÇ : I‚ÇÅ √ó I‚ÇÇ ‚Üí I‚ÇÅ‚ÇÇ) (q‚ÇÅ‚ÇÇ : I‚ÇÅ‚ÇÇ √ó I‚ÇÉ ‚Üí J)
    (p‚ÇÇ‚ÇÉ : I‚ÇÇ √ó I‚ÇÉ ‚Üí I‚ÇÇ‚ÇÉ) (q‚ÇÇ‚ÇÉ : I‚ÇÅ √ó I‚ÇÇ‚ÇÉ ‚Üí J)
    (r : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí J) (hr‚ÇÅ‚ÇÇ : ‚àÄ (i : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ), r i = q‚ÇÅ‚ÇÇ ‚ü®p‚ÇÅ‚ÇÇ ‚ü®i.1, i.2.1‚ü©, i.2.2‚ü©)
    (hr‚ÇÇ‚ÇÉ : ‚àÄ (i : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ), r i = q‚ÇÇ‚ÇÉ ‚ü®i.1, p‚ÇÇ‚ÇÉ i.2‚ü©)
  (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ) (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ)
  [HasMap (((mapBifunctorFunctor F‚ÇÅ‚ÇÇ I‚ÇÅ I‚ÇÇ).obj X‚ÇÅ).obj X‚ÇÇ) p‚ÇÅ‚ÇÇ]
  [HasMap (((mapBifunctorFunctor G I‚ÇÅ‚ÇÇ I‚ÇÉ).obj (mapBifunctorMapObj F‚ÇÅ‚ÇÇ p‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ)).obj X‚ÇÉ) q‚ÇÅ‚ÇÇ]
  [HasMap (((mapBifunctorFunctor G‚ÇÇ‚ÇÉ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ) p‚ÇÇ‚ÇÉ]
  [HasMap (((mapBifunctorFunctor F I‚ÇÅ I‚ÇÇ‚ÇÉ).obj X‚ÇÅ).obj (mapBifunctorMapObj G‚ÇÇ‚ÇÉ p‚ÇÇ‚ÇÉ X‚ÇÇ X‚ÇÉ)) q‚ÇÇ‚ÇÉ]

class HasGoodAssociator
  (associator : bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G ‚âÖ bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ)
  {I‚ÇÅ I‚ÇÇ I‚ÇÉ I‚ÇÅ‚ÇÇ I‚ÇÇ‚ÇÉ J : Type*} (p‚ÇÅ‚ÇÇ : I‚ÇÅ √ó I‚ÇÇ ‚Üí I‚ÇÅ‚ÇÇ) (q‚ÇÅ‚ÇÇ : I‚ÇÅ‚ÇÇ √ó I‚ÇÉ ‚Üí J)
    (p‚ÇÇ‚ÇÉ : I‚ÇÇ √ó I‚ÇÉ ‚Üí I‚ÇÇ‚ÇÉ) (q‚ÇÇ‚ÇÉ : I‚ÇÅ √ó I‚ÇÇ‚ÇÉ ‚Üí J)
    (r : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ ‚Üí J) (hr‚ÇÅ‚ÇÇ : ‚àÄ (i : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ), r i = q‚ÇÅ‚ÇÇ ‚ü®p‚ÇÅ‚ÇÇ ‚ü®i.1, i.2.1‚ü©, i.2.2‚ü©)
    (hr‚ÇÇ‚ÇÉ : ‚àÄ (i : I‚ÇÅ √ó I‚ÇÇ √ó I‚ÇÉ), r i = q‚ÇÇ‚ÇÉ ‚ü®i.1, p‚ÇÇ‚ÇÉ i.2‚ü©)
  (X‚ÇÅ : GradedObject I‚ÇÅ C‚ÇÅ) (X‚ÇÇ : GradedObject I‚ÇÇ C‚ÇÇ) (X‚ÇÉ : GradedObject I‚ÇÉ C‚ÇÉ)
  [HasMap (((mapBifunctorFunctor F‚ÇÅ‚ÇÇ I‚ÇÅ I‚ÇÇ).obj X‚ÇÅ).obj X‚ÇÇ) p‚ÇÅ‚ÇÇ]
  [HasMap (((mapBifunctorFunctor G‚ÇÇ‚ÇÉ I‚ÇÇ I‚ÇÉ).obj X‚ÇÇ).obj X‚ÇÉ) p‚ÇÇ‚ÇÉ]
  [h‚ÇÅ‚ÇÇ : HasMap (((mapBifunctorFunctor G I‚ÇÅ‚ÇÇ I‚ÇÉ).obj (mapBifunctorMapObj F‚ÇÅ‚ÇÇ p‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ)).obj X‚ÇÉ) q‚ÇÅ‚ÇÇ]
  [h‚ÇÇ‚ÇÉ : HasMap (((mapBifunctorFunctor F I‚ÇÅ I‚ÇÇ‚ÇÉ).obj X‚ÇÅ).obj (mapBifunctorMapObj G‚ÇÇ‚ÇÉ p‚ÇÇ‚ÇÉ X‚ÇÇ X‚ÇÉ)) q‚ÇÇ‚ÇÉ]
  where
  H‚ÇÅ‚ÇÇ : HasGoodBifunctor‚ÇÅ‚ÇÇBifunctorObj F‚ÇÅ‚ÇÇ G p‚ÇÅ‚ÇÇ q‚ÇÅ‚ÇÇ r hr‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ
  H‚ÇÇ‚ÇÉ : HasGoodBifunctorBifunctor‚ÇÇ‚ÇÉObj F G‚ÇÇ‚ÇÉ p‚ÇÇ‚ÇÉ q‚ÇÇ‚ÇÉ r hr‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ

variable [H : HasGoodAssociator associator p‚ÇÅ‚ÇÇ q‚ÇÅ‚ÇÇ p‚ÇÇ‚ÇÉ q‚ÇÇ‚ÇÉ r hr‚ÇÅ‚ÇÇ hr‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]

noncomputable def mapBifunctorBifunctorAssociator :
    mapBifunctorMapObj G q‚ÇÅ‚ÇÇ (mapBifunctorMapObj F‚ÇÅ‚ÇÇ p‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ) X‚ÇÉ ‚âÖ
      mapBifunctorMapObj F q‚ÇÇ‚ÇÉ X‚ÇÅ (mapBifunctorMapObj G‚ÇÇ‚ÇÉ p‚ÇÇ‚ÇÉ X‚ÇÇ X‚ÇÉ) :=
  have := H.H‚ÇÅ‚ÇÇ.hasMap‚ÇÇ
  have := H.H‚ÇÇ‚ÇÉ.hasMap‚ÇÇ
  letI := H.H‚ÇÅ‚ÇÇ
  letI := H.H‚ÇÇ‚ÇÉ
  (mapBifunctor‚ÇÅ‚ÇÇBifunctorMapObjIso F‚ÇÅ‚ÇÇ G p‚ÇÅ‚ÇÇ q‚ÇÅ‚ÇÇ r hr‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ).symm ‚â™‚â´
    mapIso ((((mapTrifunctorFunctorMapIso associator I‚ÇÅ I‚ÇÇ I‚ÇÉ).app X‚ÇÅ).app X‚ÇÇ).app X‚ÇÉ) r ‚â™‚â´
    mapBifunctorBifunctor‚ÇÇ‚ÇÉMapObjIso F G‚ÇÇ‚ÇÉ p‚ÇÇ‚ÇÉ q‚ÇÇ‚ÇÉ r hr‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ

@[reassoc (attr := simp)]
lemma Œπ_mapBifunctorBifunctorAssociator_hom (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : q‚ÇÅ‚ÇÇ (p‚ÇÅ‚ÇÇ (i‚ÇÅ, i‚ÇÇ), i‚ÇÉ) = j) :
    ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G p‚ÇÅ‚ÇÇ q‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´
      (mapBifunctorBifunctorAssociator associator p‚ÇÅ‚ÇÇ q‚ÇÅ‚ÇÇ p‚ÇÇ‚ÇÉ q‚ÇÇ‚ÇÉ r hr‚ÇÅ‚ÇÇ hr‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom j =
        ((associator.hom.app (X‚ÇÅ i‚ÇÅ)).app (X‚ÇÇ i‚ÇÇ)).app (X‚ÇÉ i‚ÇÉ) ‚â´
          ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ p‚ÇÇ‚ÇÉ q‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j (by rw [‚Üê h, ‚Üê hr‚ÇÅ‚ÇÇ ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©, hr‚ÇÇ‚ÇÉ]) :=
  sorry

@[reassoc (attr := simp)]
lemma Œπ_mapBifunctorBifunctorAssociator_inv (i‚ÇÅ : I‚ÇÅ) (i‚ÇÇ : I‚ÇÇ) (i‚ÇÉ : I‚ÇÉ) (j : J) (h : q‚ÇÇ‚ÇÉ (i‚ÇÅ, p‚ÇÇ‚ÇÉ (i‚ÇÇ, i‚ÇÉ)) = j) :
    ŒπMapBifunctorBifunctor‚ÇÇ‚ÇÉMapObj F G‚ÇÇ‚ÇÉ p‚ÇÇ‚ÇÉ q‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h ‚â´
      (mapBifunctorBifunctorAssociator associator p‚ÇÅ‚ÇÇ q‚ÇÅ‚ÇÇ p‚ÇÇ‚ÇÉ q‚ÇÇ‚ÇÉ r hr‚ÇÅ‚ÇÇ hr‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ).inv j =
    ((associator.inv.app (X‚ÇÅ i‚ÇÅ)).app (X‚ÇÇ i‚ÇÇ)).app (X‚ÇÉ i‚ÇÉ) ‚â´
      ŒπMapBifunctor‚ÇÅ‚ÇÇBifunctorMapObj F‚ÇÅ‚ÇÇ G p‚ÇÅ‚ÇÇ q‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ X‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j (by rw [‚Üê h, ‚Üê hr‚ÇÅ‚ÇÇ ‚ü®i‚ÇÅ, i‚ÇÇ, i‚ÇÉ‚ü©, hr‚ÇÇ‚ÇÉ]) := by
  rw [‚Üê cancel_mono ((mapBifunctorBifunctorAssociator associator p‚ÇÅ‚ÇÇ q‚ÇÅ‚ÇÇ p‚ÇÇ‚ÇÉ q‚ÇÇ‚ÇÉ r hr‚ÇÅ‚ÇÇ hr‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom j),
    assoc, assoc, iso_inv_hom_id_apply, comp_id, Œπ_mapBifunctorBifunctorAssociator_hom,
    ‚Üê NatTrans.comp_app_assoc, ‚Üê NatTrans.comp_app, Iso.inv_hom_id_app,
    NatTrans.id_app, NatTrans.id_app, id_comp]

end

end GradedObject

end CategoryTheory
