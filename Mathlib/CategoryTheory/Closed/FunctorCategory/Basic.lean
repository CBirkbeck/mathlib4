/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Closed.Enrichment
import Mathlib.CategoryTheory.Enriched.FunctorCategory

/-!
# Functor categories are monoidal closed

-/

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Category Limits MonoidalCategory

namespace MonoidalClosed

namespace FunctorCategory

open Enriched.FunctorCategory

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [MonoidalCategory C] [MonoidalClosed C]
  {J : Type u‚ÇÇ} [Category.{v‚ÇÇ} J]
  [‚àÄ (F‚ÇÅ F‚ÇÇ : J ‚•§ C), HasEnrichedHom C F‚ÇÅ F‚ÇÇ]
  [‚àÄ (F‚ÇÅ F‚ÇÇ : J ‚•§ C), HasFunctorEnrichedHom C F‚ÇÅ F‚ÇÇ]

attribute [local simp] enrichedCategorySelf_hom enrichedCategorySelf_id
  enrichedCategorySelf_comp enrichedOrdinaryCategorySelf_eHomWhiskerLeft
  enrichedOrdinaryCategorySelf_eHomWhiskerRight

section

variable {F‚ÇÅ F‚ÇÇ F‚ÇÇ' F‚ÇÉ F‚ÇÉ' : J ‚•§ C}

noncomputable def homEquiv : (F‚ÇÅ ‚äó F‚ÇÇ ‚ü∂ F‚ÇÉ) ‚âÉ (F‚ÇÇ ‚ü∂ functorEnrichedHom C F‚ÇÅ F‚ÇÉ) where
  toFun f :=
    { app := fun j ‚Ü¶ end_.lift (fun k ‚Ü¶ F‚ÇÇ.map k.hom ‚â´ curry (f.app k.right)) (fun k‚ÇÅ k‚ÇÇ œÜ ‚Ü¶ by
        dsimp
        simp only [enrichedOrdinaryCategorySelf_eHomWhiskerLeft, Category.assoc,
          enrichedOrdinaryCategorySelf_eHomWhiskerRight]
        rw [‚Üê curry_natural_left_assoc, ‚Üê curry_natural_left_assoc,
          ‚Üê curry_natural_right, curry_pre_app]
        congr 1
        convert (_ ‚óÅ (F‚ÇÇ.map k‚ÇÅ.hom)) ‚â´= (f.naturality œÜ.right).symm using 1
        ¬∑ simp only [Category.assoc]
        ¬∑ dsimp
          rw [tensorHom_def_assoc, whisker_exchange_assoc,
            ‚Üê MonoidalCategory.whiskerLeft_comp_assoc, ‚Üê Under.w œÜ, Functor.map_comp])
      naturality := fun j j' œÜ ‚Ü¶ by
        dsimp
        ext k
        dsimp
        rw [Category.assoc, Category.assoc, end_.lift_œÄ]
        erw [precompEnrichedHom_œÄ]
        rw [end_.lift_œÄ]
        dsimp
        rw [Functor.map_comp, Category.assoc] }
  invFun g :=
    { app := fun j ‚Ü¶ uncurry (g.app j ‚â´ enrichedHomœÄ C _ _ (Under.mk (ùüô j)) )
      naturality := sorry }
  left_inv := sorry
  right_inv := sorry

lemma homEquiv_naturality_two_symm (f‚ÇÇ : F‚ÇÇ ‚ü∂ F‚ÇÇ') (g : F‚ÇÇ' ‚ü∂ functorEnrichedHom C F‚ÇÅ F‚ÇÉ) :
    homEquiv.symm (f‚ÇÇ ‚â´ g) = F‚ÇÅ ‚óÅ f‚ÇÇ ‚â´ homEquiv.symm g :=
  sorry

lemma homEquiv_naturality_three (f : F‚ÇÅ ‚äó F‚ÇÇ ‚ü∂ F‚ÇÉ) (f‚ÇÉ : F‚ÇÉ ‚ü∂ F‚ÇÉ') :
    homEquiv (f ‚â´ f‚ÇÉ) = homEquiv f ‚â´ (œÅ_ _).inv ‚â´ _ ‚óÅ functorHomEquiv _ f‚ÇÉ ‚â´
      functorEnrichedComp C F‚ÇÅ F‚ÇÉ F‚ÇÉ' :=
  sorry

end

attribute [local instance] Enriched.FunctorCategory.functorEnrichedOrdinaryCategory

noncomputable def adj (F : J ‚•§ C) :
    MonoidalCategory.tensorLeft F ‚ä£ (eHomFunctor _ _).obj ‚ü®F‚ü© :=
  Adjunction.mkOfHomEquiv
    { homEquiv := fun _ _ ‚Ü¶ homEquiv
      homEquiv_naturality_left_symm := homEquiv_naturality_two_symm
      homEquiv_naturality_right := homEquiv_naturality_three }

noncomputable def closed (F : J ‚•§ C) : Closed F where
  rightAdj := (eHomFunctor _ _).obj ‚ü®F‚ü©
  adj := adj F

noncomputable instance monoidalClosed : MonoidalClosed (J ‚•§ C) where
  closed := closed

end FunctorCategory

end MonoidalClosed

end CategoryTheory
