/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Closed.Enrichment
import Mathlib.CategoryTheory.Enriched.FunctorCategory

/-!
# Functor categories are monoidal closed

-/

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Category Limits MonoidalCategory

namespace MonoidalClosed

namespace FunctorCategory

open Enriched.FunctorCategory

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [MonoidalCategory C] [MonoidalClosed C]
  {J : Type u‚ÇÇ} [Category.{v‚ÇÇ} J]
  [‚àÄ (F‚ÇÅ F‚ÇÇ : J ‚•§ C), HasFunctorEnrichedHom C F‚ÇÅ F‚ÇÇ]

attribute [local simp] enrichedCategorySelf_hom enrichedCategorySelf_id
  enrichedCategorySelf_comp enrichedOrdinaryCategorySelf_eHomWhiskerLeft
  enrichedOrdinaryCategorySelf_eHomWhiskerRight

section

variable {F‚ÇÅ F‚ÇÇ F‚ÇÇ' F‚ÇÉ F‚ÇÉ' : J ‚•§ C}

/-- The bijection `(F‚ÇÅ ‚äó F‚ÇÇ ‚ü∂ F‚ÇÉ) ‚âÉ (F‚ÇÇ ‚ü∂ functorEnrichedHom C F‚ÇÅ F‚ÇÉ)` when `F‚ÇÅ`, `F‚ÇÇ`
and `F‚ÇÉ` are functors `J ‚•§ C`, and `C` is monoidal closed. -/
noncomputable def homEquiv : (F‚ÇÅ ‚äó F‚ÇÇ ‚ü∂ F‚ÇÉ) ‚âÉ (F‚ÇÇ ‚ü∂ functorEnrichedHom C F‚ÇÅ F‚ÇÉ) where
  toFun f :=
    { app := fun j ‚Ü¶ end_.lift (fun k ‚Ü¶ F‚ÇÇ.map k.hom ‚â´ curry (f.app k.right)) (fun k‚ÇÅ k‚ÇÇ œÜ ‚Ü¶ by
        dsimp
        simp only [enrichedOrdinaryCategorySelf_eHomWhiskerLeft, Category.assoc,
          enrichedOrdinaryCategorySelf_eHomWhiskerRight]
        rw [‚Üê curry_natural_left_assoc, ‚Üê curry_natural_left_assoc,
          ‚Üê curry_natural_right, curry_pre_app, Category.assoc,
          ‚Üê f.naturality œÜ.right, Monoidal.tensorObj_map, tensorHom_def_assoc,
          ‚Üê Under.w œÜ, Functor.map_comp, MonoidalCategory.whiskerLeft_comp_assoc,
          whisker_exchange_assoc])
      naturality := fun j j' œÜ ‚Ü¶ by
        dsimp
        ext k
        dsimp
        rw [Category.assoc, Category.assoc, end_.lift_œÄ]
        erw [end_.lift_œÄ]
        rw [end_.lift_œÄ]
        dsimp
        rw [Functor.map_comp, Category.assoc] }
  invFun g :=
    { app := fun j ‚Ü¶ uncurry (g.app j ‚â´ enrichedHomœÄ C _ _ (Under.mk (ùüô j)) )
      naturality := fun j j' œÜ ‚Ü¶ by
        dsimp
        rw [‚Üê uncurry_natural_right, tensorHom_def'_assoc, ‚Üê uncurry_pre_app,
          ‚Üê uncurry_natural_left, Category.assoc, Category.assoc,
          NatTrans.naturality_assoc, functorEnrichedHom_map]
        erw [end_.lift_œÄ_assoc]
        congr 2
        dsimp
        rw [‚Üê enrichedOrdinaryCategorySelf_eHomWhiskerRight,
          ‚Üê enrichedOrdinaryCategorySelf_eHomWhiskerLeft]
        let Œ± : Under.mk (ùüô j) ‚ü∂ (Under.map œÜ).obj (Under.mk (ùüô j')) := Under.homMk œÜ
        exact (enrichedHom_condition C (Under.forget j ‚ãô F‚ÇÅ) (Under.forget j ‚ãô F‚ÇÉ) Œ±).symm }
  left_inv f := by
    dsimp
    ext j
    dsimp
    rw [end_.lift_œÄ]
    dsimp
    rw [Functor.map_id, Category.id_comp, uncurry_curry]
  right_inv g := by
    ext j
    dsimp
    ext k
    rw [end_.lift_œÄ, curry_uncurry, NatTrans.naturality_assoc]
    dsimp
    erw [end_.lift_œÄ]
    congr
    dsimp [Under.map, Comma.mapLeft]
    simp only [Category.comp_id]
    rfl

lemma homEquiv_naturality_two_symm (f‚ÇÇ : F‚ÇÇ ‚ü∂ F‚ÇÇ') (g : F‚ÇÇ' ‚ü∂ functorEnrichedHom C F‚ÇÅ F‚ÇÉ) :
    homEquiv.symm (f‚ÇÇ ‚â´ g) = F‚ÇÅ ‚óÅ f‚ÇÇ ‚â´ homEquiv.symm g := by
  dsimp [homEquiv]
  ext j
  dsimp
  rw [‚Üê uncurry_natural_left]
  congr 1
  simp only [Category.assoc]

lemma homEquiv_naturality_three [‚àÄ (F‚ÇÅ F‚ÇÇ : J ‚•§ C), HasEnrichedHom C F‚ÇÅ F‚ÇÇ]
    (f : F‚ÇÅ ‚äó F‚ÇÇ ‚ü∂ F‚ÇÉ) (f‚ÇÉ : F‚ÇÉ ‚ü∂ F‚ÇÉ') :
    homEquiv (f ‚â´ f‚ÇÉ) = homEquiv f ‚â´ (œÅ_ _).inv ‚â´ _ ‚óÅ functorHomEquiv _ f‚ÇÉ ‚â´
      functorEnrichedComp C F‚ÇÅ F‚ÇÉ F‚ÇÉ' := by
  dsimp [homEquiv]
  ext j
  dsimp
  ext k
  rw [Category.assoc, Category.assoc, Category.assoc, end_.lift_œÄ, enrichedComp_œÄ,
    tensorHom_def, Category.assoc, whisker_exchange_assoc,
    MonoidalCategory.whiskerRight_id_assoc, Iso.inv_hom_id_assoc, end_.lift_œÄ_assoc,
    Category.assoc]
  dsimp
  rw [‚Üê MonoidalCategory.whiskerLeft_comp_assoc, functorHomEquiv_app_œÄ, curry_natural_right]
  congr 2
  symm
  apply enrichedOrdinaryCategorySelf_eHomWhiskerLeft

end

variable [‚àÄ (F‚ÇÅ F‚ÇÇ : J ‚•§ C), HasEnrichedHom C F‚ÇÅ F‚ÇÇ]
attribute [local instance] Enriched.FunctorCategory.functorEnrichedOrdinaryCategory

/-- When `F : J ‚•§ C`, `C` is monoidal closed and has suitable limits,
then `tensorLeft F` has a right adjoint. -/
noncomputable def adj (F : J ‚•§ C) :
    MonoidalCategory.tensorLeft F ‚ä£ (eHomFunctor _ _).obj ‚ü®F‚ü© :=
  Adjunction.mkOfHomEquiv
    { homEquiv := fun _ _ ‚Ü¶ homEquiv
      homEquiv_naturality_left_symm := homEquiv_naturality_two_symm
      homEquiv_naturality_right := homEquiv_naturality_three }

/-- When `F : J ‚•§ C`, `C` is monoidal closed and has suitable limits,
then `tensorLeft F` has a right adjoint. -/
noncomputable def closed (F : J ‚•§ C) : Closed F where
  rightAdj := (eHomFunctor _ _).obj ‚ü®F‚ü©
  adj := adj F

noncomputable instance monoidalClosed : MonoidalClosed (J ‚•§ C) where
  closed := closed

end FunctorCategory

end MonoidalClosed

end CategoryTheory
