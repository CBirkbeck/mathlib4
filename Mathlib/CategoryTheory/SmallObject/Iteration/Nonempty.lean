/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.SmallObject.Iteration.UniqueHom

/-!
# Existence of objects in the category of iterations of functors

Given a functor `Œ¶ : C ‚•§ C` and a natural transformation `Œµ : ùü≠ C ‚ü∂ Œ¶`,
we shall show in this file that for any well ordered set `J`,
and `j : J`, the category `Functor.Iteration Œµ j` is nonempty.

-/

universe u

section

namespace CategoryTheory

open Category

namespace Functor

variable {C : Type*} [Category C] {Œ¶ : C ‚•§ C} {Œµ : ùü≠ C ‚ü∂ Œ¶}
  {J : Type u} [LinearOrder J] [SuccOrder J]

variable {j : J} (hj : ¬¨IsMax j) (F : Set.Iic j ‚•§ C) {X : C}
  (œÑ : F.obj ‚ü®j, by simp‚ü© ‚ü∂ X)

namespace extendToSucc

variable (X)

def obj (i : Set.Iic (Order.succ j)) : C :=
  if hij : i.1 ‚â§ j then F.obj ‚ü®i.1, hij‚ü© else X

def objIso (i : Set.Iic j) :
    obj F X ‚ü®i, i.2.trans (Order.le_succ j)‚ü© ‚âÖ F.obj i := eqToIso (dif_pos i.2)

def objSuccIso :
    obj F X ‚ü®Order.succ j, by simp‚ü© ‚âÖ X :=
  eqToIso (dif_neg (by simpa only [Order.succ_le_iff_isMax] using hj))

variable {X}

def map (i‚ÇÅ i‚ÇÇ : J) (hi : i‚ÇÅ ‚â§ i‚ÇÇ) (hi‚ÇÇ : i‚ÇÇ ‚â§ Order.succ j) :
    obj F X ‚ü®i‚ÇÅ, hi.trans hi‚ÇÇ‚ü© ‚ü∂ obj F X ‚ü®i‚ÇÇ, hi‚ÇÇ‚ü© :=
  if h‚ÇÅ : i‚ÇÇ ‚â§ j then
    (objIso F X ‚ü®i‚ÇÅ, hi.trans h‚ÇÅ‚ü©).hom ‚â´ F.map (homOfLE hi) ‚â´ (objIso F X ‚ü®i‚ÇÇ, h‚ÇÅ‚ü©).inv
  else
    if h‚ÇÇ : i‚ÇÅ ‚â§ j then
      (objIso F X ‚ü®i‚ÇÅ, h‚ÇÇ‚ü©).hom ‚â´ F.map (homOfLE h‚ÇÇ) ‚â´ œÑ ‚â´
        (objSuccIso hj F X).inv ‚â´ eqToHom (by
          congr
          exact le_antisymm (Order.succ_le_of_lt (not_le.1 h‚ÇÅ)) hi‚ÇÇ)
    else
      eqToHom (by
        congr
        rw [le_antisymm hi‚ÇÇ (Order.succ_le_of_lt (not_le.1 h‚ÇÅ)),
          le_antisymm (hi.trans hi‚ÇÇ) (Order.succ_le_of_lt (not_le.1 h‚ÇÇ))])

lemma map_eq (i‚ÇÅ i‚ÇÇ : J) (hi : i‚ÇÅ ‚â§ i‚ÇÇ) (hi‚ÇÇ : i‚ÇÇ ‚â§ j) :
    map hj F œÑ i‚ÇÅ i‚ÇÇ hi (hi‚ÇÇ.trans (Order.le_succ j)) =
      (objIso F X ‚ü®i‚ÇÅ, hi.trans hi‚ÇÇ‚ü©).hom ‚â´ F.map (homOfLE hi) ‚â´
        (objIso F X ‚ü®i‚ÇÇ, hi‚ÇÇ‚ü©).inv :=
  dif_pos hi‚ÇÇ

lemma map_self_succ :
    map hj F œÑ j (Order.succ j) (Order.le_succ j) (by rfl) =
      (objIso F X ‚ü®j, by simp‚ü©).hom ‚â´ œÑ ‚â´ (objSuccIso hj F X).inv := by
  dsimp [map]
  rw [dif_neg (by simpa only [Order.succ_le_iff_isMax] using hj),
    dif_pos (by rfl), map_id, comp_id, id_comp]

@[simp]
lemma map_id (i : J) (hi : i ‚â§ Order.succ j) :
    map hj F œÑ i i (by rfl) hi = ùüô _ := by
  dsimp [map]
  by_cases h‚ÇÅ : i ‚â§ j
  ¬∑ rw [dif_pos h‚ÇÅ, CategoryTheory.Functor.map_id, id_comp, Iso.hom_inv_id]
  ¬∑ obtain rfl : i = Order.succ j := le_antisymm hi (Order.succ_le_of_lt (not_le.1 h‚ÇÅ))
    rw [dif_neg (by simpa only [Order.succ_le_iff_isMax] using hj),
      dif_neg h‚ÇÅ]

lemma map_comp (i‚ÇÅ i‚ÇÇ i‚ÇÉ : J) (h‚ÇÅ‚ÇÇ : i‚ÇÅ ‚â§ i‚ÇÇ) (h‚ÇÇ‚ÇÉ : i‚ÇÇ ‚â§ i‚ÇÉ) (h : i‚ÇÉ ‚â§ Order.succ j) :
    map hj F œÑ i‚ÇÅ i‚ÇÉ (h‚ÇÅ‚ÇÇ.trans h‚ÇÇ‚ÇÉ) h =
      map hj F œÑ i‚ÇÅ i‚ÇÇ h‚ÇÅ‚ÇÇ (h‚ÇÇ‚ÇÉ.trans h) ‚â´ map hj F œÑ i‚ÇÇ i‚ÇÉ h‚ÇÇ‚ÇÉ h := by
  by_cases h‚ÇÅ : i‚ÇÉ ‚â§ j
  ¬∑ rw [map_eq hj F œÑ i‚ÇÅ i‚ÇÇ _ (h‚ÇÇ‚ÇÉ.trans h‚ÇÅ), map_eq hj F œÑ i‚ÇÇ i‚ÇÉ _ h‚ÇÅ,
      map_eq hj F œÑ i‚ÇÅ i‚ÇÉ _ h‚ÇÅ, assoc, assoc, Iso.inv_hom_id_assoc, ‚Üê map_comp_assoc,
      homOfLE_comp]
  ¬∑ obtain rfl : i‚ÇÉ = Order.succ j := le_antisymm h (Order.succ_le_of_lt (not_le.1 h‚ÇÅ))
    obtain h‚ÇÇ | rfl := h‚ÇÇ‚ÇÉ.lt_or_eq
    ¬∑ rw [Order.lt_succ_iff_of_not_isMax hj] at h‚ÇÇ
      rw [map_eq hj F œÑ i‚ÇÅ i‚ÇÇ _ h‚ÇÇ]
      dsimp [map]
      rw [dif_neg h‚ÇÅ, dif_pos (h‚ÇÅ‚ÇÇ.trans h‚ÇÇ), dif_neg h‚ÇÅ, dif_pos h‚ÇÇ,
        assoc, assoc, Iso.inv_hom_id_assoc,comp_id, ‚Üê map_comp_assoc, homOfLE_comp]
    ¬∑ rw [map_id, comp_id]

end extendToSucc

open extendToSucc in
include hj in
def extendToSucc : Set.Iic (Order.succ j) ‚•§ C where
  obj := obj F X
  map {i‚ÇÅ i‚ÇÇ} f := map hj F œÑ i‚ÇÅ i‚ÇÇ (leOfHom f) i‚ÇÇ.2
  map_id _ := extendToSucc.map_id _ F œÑ _ _
  map_comp {i‚ÇÅ i‚ÇÇ i‚ÇÉ} f g := extendToSucc.map_comp hj F œÑ i‚ÇÅ i‚ÇÇ i‚ÇÉ (leOfHom f) (leOfHom g) i‚ÇÉ.2

def extendToSuccObjIso (i : Set.Iic j) :
    (extendToSucc hj F œÑ).obj ‚ü®i, i.2.trans (Order.le_succ j)‚ü© ‚âÖ F.obj i :=
  extendToSucc.objIso F X i

def extendToSuccObjSuccIso :
    (extendToSucc hj F œÑ).obj ‚ü®Order.succ j, by simp‚ü© ‚âÖ X :=
  extendToSucc.objSuccIso hj F X

def extendToSuccRestrictionLEIso :
    Iteration.restrictionLE (extendToSucc hj F œÑ) (Order.le_succ j) ‚âÖ F :=
  NatIso.ofComponents (extendToSuccObjIso hj F œÑ) (by
    rintro ‚ü®i‚ÇÅ, h‚ÇÅ‚ü© ‚ü®i‚ÇÇ, h‚ÇÇ‚ü© f
    simp only [Set.mem_Iic] at h‚ÇÅ h‚ÇÇ
    dsimp [extendToSucc, extendToSuccObjIso]
    rw [extendToSucc.map_eq _ _ _ _ _ _ h‚ÇÇ, assoc, assoc, Iso.inv_hom_id, comp_id]
    rfl)

lemma extendToSucc_map_le_succ :
    (extendToSucc hj F œÑ).map (homOfLE (Order.le_succ j)) =
        (extendToSuccObjIso hj F œÑ ‚ü®j, by simp‚ü©).hom ‚â´ œÑ ‚â´
          (extendToSuccObjSuccIso hj F œÑ).inv :=
  extendToSucc.map_self_succ _ _ _

end Functor

end CategoryTheory

end

namespace CategoryTheory

variable {C : Type*} [Category C] {Œ¶ : C ‚•§ C} {Œµ : ùü≠ C ‚ü∂ Œ¶}
  {J : Type u} [LinearOrder J] [OrderBot J] [SuccOrder J]

namespace Functor

namespace Iteration

variable (Œµ J) in
/-- The obvious term in `Iteration Œµ ‚ä•`: it is given by the identity functor. -/
def mkOfBot : Iteration Œµ (‚ä• : J) where
  F := (Functor.const _).obj (ùü≠ C)
  isoZero := Iso.refl _
  isoSucc _ h := by simp at h
  mapSucc'_eq _ h := by simp at h
  isColimit x hx h := by
    exfalso
    refine hx.not_isMin (by simpa using h)

namespace mkOfSucc

variable {j : J} (hj : ¬¨IsMax j) (iter : Iteration Œµ j)

/-- Auxiliary definition for `Functor.Iteration.mkOfSucc`. -/
def isoSucc (i : J) (hi : i < Order.succ j) :
    (extendToSucc hj iter.F (whiskerLeft _ Œµ)).obj ‚ü®Order.succ i, Order.succ_le_of_lt hi‚ü© ‚âÖ
      (extendToSucc hj iter.F (whiskerLeft _ Œµ)).obj ‚ü®i, hi.le‚ü© ‚ãô Œ¶ :=
  if hij : i < j then
    extendToSuccObjIso _ _ _ ‚ü®Order.succ i, Order.succ_le_of_lt hij‚ü© ‚â™‚â´
      iter.isoSucc i hij ‚â™‚â´ (isoWhiskerRight (extendToSuccObjIso _ _ _ ‚ü®i, hij.le‚ü©).symm _)
  else
    have hij' : i = j := le_antisymm
      (by simpa only [Order.lt_succ_iff_of_not_isMax hj] using hi) (by simpa using hij)
    eqToIso (by subst hij'; rfl) ‚â™‚â´ extendToSuccObjSuccIso hj iter.F (whiskerLeft _ Œµ) ‚â™‚â´
      isoWhiskerRight ((extendToSuccObjIso hj iter.F (whiskerLeft _ Œµ) ‚ü®j, by simp‚ü©).symm.trans
          (eqToIso (by subst hij'; rfl))) _

end mkOfSucc

noncomputable def mkOfSucc {j : J} (hj : ¬¨IsMax j) (iter : Iteration Œµ j) :
    Iteration Œµ (Order.succ j) where
  F := extendToSucc hj iter.F (whiskerLeft _ Œµ)
  isoZero := (extendToSuccObjIso hj iter.F (whiskerLeft _ Œµ) ‚ü®‚ä•, by simp‚ü©).trans iter.isoZero
  isoSucc i hi := mkOfSucc.isoSucc hj iter i hi
  mapSucc'_eq := sorry
  isColimit := sorry

end Iteration

end Functor

end CategoryTheory
