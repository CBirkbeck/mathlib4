/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Category.Preorder
import Mathlib.CategoryTheory.Limits.HasLimits
import Mathlib.Order.ConditionallyCompleteLattice.Basic
import Mathlib.Order.SuccPred.Limit

/-! # Transfinite iterations of a construction

In this file, we introduce the structure `SuccStruct` on a category `C`.
It consists of the data of an object `X‚ÇÄ : C`, a successor map `succ : C ‚Üí C`
and a morphism `toSucc : X ‚ü∂ succ X` for any `X : C`. The map `toSucc`
does not have to be natural in `X`. For any element `j : J` in
well-ordered type `J`, we would like to define
the iteration of `Œ¶ : SuccStruct C`, as a functor `F : J ‚•§ C`
such that `F.obj ‚ä• = X‚ÇÄ`, `F.obj j ‚ü∂ F.obj (Order.succ j)` is `toSucc (F.obj j)`
when `j` is not maximal, and when `j` is limit, `F.obj j` should be the
colimit of the `F.obj k` for `k < j`.

In the small object argument, we shall apply this to the iteration of
a functor `F : C ‚•§ C` equipped with a natural transformation `Œµ : ùü≠ C ‚ü∂ F`:
this will correspond to the case of
`SuccStruct.ofTrans Œµ : SuccStruct (C ‚•§ C)`, for which `X‚ÇÄ := ùü≠ C`,
`succ G := G ‚ãô F` and `toSucc G : G ‚ü∂ G ‚ãô F` is given by `whiskerLeft G Œµ`.

The construction of the iteration of `Œ¶ : SuccStruct C` is done
by transfinite induction. However, for a limit element `j : J`,
the definition of `F.obj j` does not involve only
the objects `F.obj i` for `i < j`, but it also
involves the maps `F.obj i‚ÇÅ ‚ü∂ F.obj i‚ÇÇ` for `i‚ÇÅ ‚â§ i‚ÇÇ < j`.
Then, this is a straightforward application of definitions by
transfinite induction. In order to solve this technical difficulty,
we introduce a structure `Œ¶.Iteration j` for any `j : J`. This
structure contains all the expected data and properties for
all the indices that are `‚â§ j`. In this file, we show that
`Œ¶.Iteration j` is a subsingleton. The uniqueness shall ne
obtained in the file `SmallObject.Iteration.Nonempty`, and
the construction of the functor `Œ¶.iterationFunctor J : J ‚•§ C`
and of its colimit `Œ¶.iteration J : C` is done in the
file `SmallObject.Iteration.Iteration`.

The map `Œ¶.toSucc X : X ‚ü∂ Œ¶.succ X` does not have to be natural
(and it is not in certain applications). Then, two isomorphic
objects `X` and `Y` may have non isomorphic successors. This is
the reason why we make an extensive use of equalities of objects
in the definitions.

-/

universe w v u

namespace CategoryTheory

open Category Limits

variable {C : Type u} [Category.{v} C] {J : Type w}

namespace SmallObject

section

variable [Preorder J] {j : J} (F : Set.Iic j ‚•§ C) {i : J} (hi : i ‚â§ j)

/-- The functor `Set.Iio i ‚•§ C` obtained by "restriction" of `F : Set.Iic j ‚•§ C`
when `i ‚â§ j`. -/
def restrictionLT : Set.Iio i ‚•§ C :=
  (monotone_inclusion_lt_le_of_le hi).functor ‚ãô F

@[simp]
lemma restrictionLT_obj (k : J) (hk : k < i) :
    (restrictionLT F hi).obj ‚ü®k, hk‚ü© = F.obj ‚ü®k, hk.le.trans hi‚ü© := rfl

@[simp]
lemma restrictionLT_map {k‚ÇÅ k‚ÇÇ : Set.Iio i} (œÜ : k‚ÇÅ ‚ü∂ k‚ÇÇ) :
    (restrictionLT F hi).map œÜ = F.map (homOfLE (by simpa using leOfHom œÜ)) := rfl

/-- Given `F : Set.Iic j ‚•§ C`, `i : J` such that `hi : i ‚â§ j`, this is the
cocone consisting of all maps `F.obj ‚ü®k, hk‚ü© ‚ü∂ F.obj ‚ü®i, hi‚ü©` for `k : J` such that `k < i`. -/
@[simps]
def coconeOfLE : Cocone (restrictionLT F hi) where
  pt := F.obj ‚ü®i, hi‚ü©
  Œπ :=
    { app := fun ‚ü®k, hk‚ü© => F.map (homOfLE (by simpa using hk.le))
      naturality := fun ‚ü®k‚ÇÅ, hk‚ÇÅ‚ü© ‚ü®k‚ÇÇ, hk‚ÇÇ‚ü© _ => by
        simp [comp_id, ‚Üê Functor.map_comp, homOfLE_comp] }

/-- The functor `Set.Iic i ‚•§ C` obtained by "restriction" of `F : Set.Iic j ‚•§ C`
when `i ‚â§ j`. -/
def restrictionLE : Set.Iic i ‚•§ C :=
  (monotone_inclusion_le_le_of_le hi).functor ‚ãô F

@[simp]
lemma restrictionLE_obj (k : J) (hk : k ‚â§ i) :
    (restrictionLE F hi).obj ‚ü®k, hk‚ü© = F.obj ‚ü®k, hk.trans hi‚ü© := rfl

@[simp]
lemma restrictionLE_map {k‚ÇÅ k‚ÇÇ : Set.Iic i} (œÜ : k‚ÇÅ ‚ü∂ k‚ÇÇ) :
    (restrictionLE F hi).map œÜ = F.map (homOfLE (by simpa using leOfHom œÜ)) := rfl

end

section

variable [Preorder J]

variable (C J) in
/-- A category `C` has iterations of shape `J` when certain shapes
of colimits exists. When `J` is well ordered, this assumption is used in
order to show that the category `Iteration Œµ j` is nonempty for any `j : J`,
see the file `CategoryTheory.SmallObject.Nonempty`. -/
class HasIterationOfShape : Prop where
  hasColimitsOfShape_of_isSuccLimit (j : J) (hj : Order.IsSuccLimit j) :
    HasColimitsOfShape (Set.Iio j) C := by infer_instance
  hasColimitsOfShape : HasColimitsOfShape J C := by infer_instance

attribute [instance] HasIterationOfShape.hasColimitsOfShape

variable (C) in
lemma hasColimitOfShape_of_isSuccLimit [HasIterationOfShape C J] (j : J)
    (hj : Order.IsSuccLimit j) :
    HasColimitsOfShape (Set.Iio j) C :=
  HasIterationOfShape.hasColimitsOfShape_of_isSuccLimit j hj

end

variable (C) in
/-- A successor structure () on a category consists of the
data of an object `succ X` for any `X : C`, a map `toSucc X : X ‚ü∂ toSucc X`
(which does not need to be natural), and a zeroth object `X‚ÇÄ`.
-/
structure SuccStruct where
  /-- the zeroth object -/
  X‚ÇÄ : C
  /-- the successor of an object -/
  succ (X : C) : C
  /-- the map to the successor -/
  toSucc (X : C) : X ‚ü∂ succ X

namespace SuccStruct

/-- Given a functor `Œ¶ : C ‚•§ C`, a natural transformation of the form `ùü≠ C ‚ü∂ Œ¶`
induces a successor structure. -/
@[simps]
def ofNatTrans {F : C ‚•§ C} (Œµ : ùü≠ C ‚ü∂ F) : SuccStruct (C ‚•§ C) where
  succ G := G ‚ãô F
  toSucc G := whiskerLeft G Œµ
  X‚ÇÄ := ùü≠ C

lemma congr_toSucc (Œ¶ : SuccStruct C) {X Y : C} (h : X = Y) :
    Œ¶.toSucc X = eqToHom (by rw [h]) ‚â´ Œ¶.toSucc Y ‚â´ eqToHom (by rw [h]) := by
  subst h
  simp

variable (Œ¶ : SuccStruct C) [LinearOrder J] [OrderBot J] [SuccOrder J]
    [HasIterationOfShape C J]

/-- The category of `j`th iterations of a succesor structure `Œ¶ : SuccStruct C`.
An object consists of the data of all iterations of `Œ¶` for `i : J` such
that `i ‚â§ j` (this is the field `F`). Such objects are
equipped with data and properties which characterizes uniquely the iterations
on three types of elements: `‚ä•`, successors, limit elements. -/
@[ext]
structure Iteration [WellFoundedLT J] (j : J) where
  /-- The data of all `i`th iterations for `i : J` such that `i ‚â§ j`. -/
  F : Set.Iic j ‚•§ C
  /-- The zeroth iteration is the zeroth object . -/
  obj_bot : F.obj ‚ü®‚ä•, bot_le‚ü© = Œ¶.X‚ÇÄ
  /-- The iteration on a successor element identifies to the successor. -/
  obj_succ (i : J) (hi : i < j) :
    F.obj ‚ü®Order.succ i, Order.succ_le_of_lt hi‚ü© = Œ¶.succ (F.obj ‚ü®i, hi.le‚ü©)
  /-- The natural map from an iteration to its successor is induced by `toSucc`. -/
  map_succ (i : J) (hi : i < j) :
    F.map (homOfLE (Order.le_succ i) : ‚ü®i, hi.le‚ü© ‚ü∂ ‚ü®Order.succ i, Order.succ_le_of_lt hi‚ü©) =
      Œ¶.toSucc _ ‚â´ eqToHom (by rw [obj_succ _ hi])
  /-- If `i` is a limit element, the `i`th iteration is the colimit
  of `k`th iterations for `k < i`. -/
  obj_limit (i : J) (hi : Order.IsSuccLimit i) (hij : i ‚â§ j) :
    letI := hasColimitOfShape_of_isSuccLimit C i hi
    F.obj ‚ü®i, hij‚ü© = colimit (restrictionLT F hij)
  map_eq_Œπ (i : J) (hi : Order.IsSuccLimit i) (hij : i ‚â§ j)
      (k : J) (hk : k < i) :
    letI := hasColimitOfShape_of_isSuccLimit C i hi
    F.map (homOfLE hk.le : ‚ü®k, hk.le.trans hij‚ü© ‚ü∂ ‚ü®i, hij‚ü©) =
      colimit.Œπ (restrictionLT F hij) ‚ü®k, hk‚ü© ‚â´
        eqToHom (by rw [obj_limit i hi])

variable [WellFoundedLT J]

namespace Iteration

variable {Œ¶}
variable {j : J}

section

variable (iter : Œ¶.Iteration j)

/-- The isomorphism `iter.F.obj ‚ü®‚ä•, bot_le‚ü© ‚âÖ Œ¶.X‚ÇÄ`. -/
def isoBot : iter.F.obj ‚ü®‚ä•, bot_le‚ü© ‚âÖ Œ¶.X‚ÇÄ :=
  eqToIso (by rw [obj_bot])

/-- The object `iter.F.obj ‚ü®Order.succ i, _‚ü©` identifies to
the successor of `iter.F.obj ‚ü®i, _‚ü©` when `i < j`. -/
def isoSucc (i : J) (hi : i < j) :
    iter.F.obj ‚ü®Order.succ i, Order.succ_le_of_lt hi‚ü© ‚âÖ
      Œ¶.succ (iter.F.obj ‚ü®i, hi.le‚ü©) :=
  eqToIso (by rw [obj_succ _ i hi])

/-- Variant of `map_succ'` involving the isomorphism `isoSucc`. -/
lemma map_succ' (i : J) (hi : i < j) :
    iter.F.map (homOfLE (Order.le_succ i) :
        ‚ü®i, hi.le‚ü© ‚ü∂ ‚ü®Order.succ i, Order.succ_le_of_lt hi‚ü©) =
      Œ¶.toSucc _ ‚â´ (iter.isoSucc i hi).inv :=
  iter.map_succ i hi

/-- When `i : J` is limit, `iter.F.obj ‚ü®i, _‚ü©` identifies
to the colimit of the restriction of `iter.F` to `Set.Iio i`. -/
noncomputable def isColimit (i : J)
    (hi : Order.IsSuccLimit i) (hij : i ‚â§ j) :
    IsColimit (coconeOfLE iter.F hij) := by
  have := hasColimitOfShape_of_isSuccLimit C i hi
  exact IsColimit.ofIsoColimit (colimit.isColimit _)
    (Cocones.ext (eqToIso (iter.obj_limit i hi hij).symm)
    (fun ‚ü®k, hk‚ü© ‚Ü¶ (iter.map_eq_Œπ i hi hij k hk).symm))

/-- The element in `Œ¶.Iteration i` that is deduced from an element
in `Œ¶.Iteration j` when `i ‚â§ j`. -/
@[simps F]
def trunc (iter : Œ¶.Iteration j) {i : J} (hi : i ‚â§ j) : Œ¶.Iteration i where
  F := restrictionLE iter.F hi
  obj_bot := iter.obj_bot
  obj_succ k hk := iter.obj_succ k (lt_of_lt_of_le hk hi)
  obj_limit k hk hk' := iter.obj_limit k hk (hk'.trans hi)
  map_succ k hk := iter.map_succ k (lt_of_lt_of_le hk hi)
  map_eq_Œπ k hk hki l hl := iter.map_eq_Œπ k hk (hki.trans hi) l hl

end

omit [OrderBot J] [SuccOrder J] [WellFoundedLT J] in
lemma congr_colimit_Œπ {F G : Set.Iio j ‚•§ C} (h : F = G) (hj : Order.IsSuccLimit j)
    (i : Set.Iio j) :
    letI := hasColimitOfShape_of_isSuccLimit C j hj
    colimit.Œπ F i = by
      refine eqToHom (by rw [h]) ‚â´ colimit.Œπ G i ‚â´ eqToHom (by rw [h]) := by
  subst h
  simp

/-! Auxiliary definitions for the proof of `Subsingleton (Œ¶.Iteration j)`. -/

namespace subsingleton

variable {F G : Set.Iic j ‚•§ C} (hobj : F.obj = G.obj)

omit [OrderBot J] [SuccOrder J] [WellFoundedLT J]

def MapEq (i‚ÇÅ i‚ÇÇ : J) (h‚ÇÅ‚ÇÇ : i‚ÇÅ ‚â§ i‚ÇÇ) (h‚ÇÇ : i‚ÇÇ ‚â§ j) : Prop :=
  F.map (homOfLE h‚ÇÅ‚ÇÇ : ‚ü®i‚ÇÅ, h‚ÇÅ‚ÇÇ.trans h‚ÇÇ‚ü© ‚ü∂ ‚ü®i‚ÇÇ, h‚ÇÇ‚ü©) =
    eqToHom (by rw [hobj]) ‚â´
      G.map (homOfLE h‚ÇÅ‚ÇÇ : ‚ü®i‚ÇÅ, _‚ü© ‚ü∂ ‚ü®i‚ÇÇ, _‚ü©) ‚â´ eqToHom (by rw [hobj])

omit [HasIterationOfShape C J] in
lemma mapEq_of_eq {k : J} (hkj : k ‚â§ j) (h : restrictionLE F hkj = restrictionLE G hkj)
    (i‚ÇÅ i‚ÇÇ : J) (h‚ÇÅ‚ÇÇ : i‚ÇÅ ‚â§ i‚ÇÇ) (h‚ÇÇ : i‚ÇÇ ‚â§ k) :
    MapEq hobj i‚ÇÅ i‚ÇÇ h‚ÇÅ‚ÇÇ (h‚ÇÇ.trans hkj) := by
  exact Functor.congr_hom h (homOfLE h‚ÇÅ‚ÇÇ : ‚ü®i‚ÇÅ, h‚ÇÅ‚ÇÇ.trans h‚ÇÇ‚ü© ‚ü∂ ‚ü®i‚ÇÇ, h‚ÇÇ‚ü©)

omit [HasIterationOfShape C J]

lemma mapEq_rfl (i : J) (h : i ‚â§ j) : MapEq hobj i i (by simp) h := by
  simp [MapEq]

variable {hobj} in
lemma mapEq_trans {i‚ÇÅ i‚ÇÇ i‚ÇÉ : J} (h‚ÇÅ‚ÇÇ : i‚ÇÅ ‚â§ i‚ÇÇ) (h‚ÇÇ‚ÇÉ : i‚ÇÇ ‚â§ i‚ÇÉ) {h‚ÇÉ : i‚ÇÉ ‚â§ j}
    (m‚ÇÅ‚ÇÇ : MapEq hobj i‚ÇÅ i‚ÇÇ h‚ÇÅ‚ÇÇ (h‚ÇÇ‚ÇÉ.trans h‚ÇÉ)) (m‚ÇÇ‚ÇÉ : MapEq hobj i‚ÇÇ i‚ÇÉ h‚ÇÇ‚ÇÉ h‚ÇÉ) :
    MapEq hobj i‚ÇÅ i‚ÇÉ (h‚ÇÅ‚ÇÇ.trans h‚ÇÇ‚ÇÉ) h‚ÇÉ := by
  dsimp [MapEq] at m‚ÇÅ‚ÇÇ m‚ÇÇ‚ÇÉ ‚ä¢
  rw [‚Üê homOfLE_comp (X := Set.Iic j) (x := ‚ü®i‚ÇÅ, _‚ü©)
    (y := ‚ü®i‚ÇÇ, h‚ÇÇ‚ÇÉ.trans h‚ÇÉ‚ü©) (z := ‚ü®i‚ÇÉ, _‚ü©) h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ, Functor.map_comp,
    Functor.map_comp, m‚ÇÅ‚ÇÇ, m‚ÇÇ‚ÇÉ]
  simp

lemma functor_eq (hmap : ‚àÄ (i‚ÇÅ i‚ÇÇ : J) (h‚ÇÅ‚ÇÇ : i‚ÇÅ ‚â§ i‚ÇÇ) (h‚ÇÇ : i‚ÇÇ ‚â§ j), MapEq hobj i‚ÇÅ i‚ÇÇ h‚ÇÅ‚ÇÇ h‚ÇÇ) :
    F = G :=
  Functor.ext (by simp [hobj]) (by
    rintro ‚ü®i‚ÇÅ, h‚ÇÅ‚ü© ‚ü®i‚ÇÇ, h‚ÇÇ‚ü© f
    exact hmap i‚ÇÅ i‚ÇÇ (leOfHom f) h‚ÇÇ)

end subsingleton

open subsingleton in
instance subsingleton : Subsingleton (Œ¶.Iteration j) where
  allEq iter‚ÇÅ iter‚ÇÇ := by
    suffices iter‚ÇÅ.F = iter‚ÇÇ.F by aesop
    revert iter‚ÇÅ iter‚ÇÇ
    induction j using SuccOrder.limitRecOn with
    | hm j h =>
        intro iter‚ÇÅ iter‚ÇÇ
        obtain rfl := h.eq_bot
        fapply Functor.ext
        ¬∑ rintro ‚ü®i, hi‚ü©
          obtain rfl : i = ‚ä• := by simpa using hi
          simp only [obj_bot]
        ¬∑ rintro ‚ü®i, hi‚ü© ‚ü®i', hi'‚ü© f
          obtain rfl : i = ‚ä• := by simpa using hi
          obtain rfl : i' = ‚ä• := by simpa using hi'
          obtain rfl : f = ùüô _ := Subsingleton.elim _ _
          simp
    | hs j hj‚ÇÅ hj‚ÇÇ =>
        intro iter‚ÇÅ iter‚ÇÇ
        have hobj : iter‚ÇÅ.F.obj = iter‚ÇÇ.F.obj := by
          ext ‚ü®i, hi‚ü©
          wlog h : i ‚â§ j generalizing i
          ¬∑ obtain hi | rfl := hi.lt_or_eq
            ¬∑ exact this _ _ ((Order.lt_succ_iff_of_not_isMax hj‚ÇÅ).mp hi)
            ¬∑ simp only [obj_succ _ _ (Order.lt_succ_of_not_isMax hj‚ÇÅ), this _ _ (by rfl)]
          exact Functor.congr_obj (hj‚ÇÇ (iter‚ÇÅ.trunc (Order.le_succ _))
            (iter‚ÇÇ.trunc (Order.le_succ _))) ‚ü®i, h‚ü©
        have hsucc : MapEq hobj _ _ (Order.le_succ j) (by simp) := by
          simp only [MapEq, map_succ _ _ (Order.lt_succ_of_not_isMax hj‚ÇÅ),
            Œ¶.congr_toSucc (congr_fun hobj ‚ü®j, _‚ü©), assoc, eqToHom_trans]
        apply functor_eq hobj
        intro i‚ÇÅ i‚ÇÇ
        wlog hi‚ÇÇ : i‚ÇÇ ‚â§ j generalizing i‚ÇÇ
        ¬∑ intro h‚ÇÅ‚ÇÇ h‚ÇÇ
          obtain h‚ÇÇ | rfl := h‚ÇÇ.lt_or_eq
          ¬∑ exact (hi‚ÇÇ ((Order.lt_succ_iff_of_not_isMax hj‚ÇÅ).mp h‚ÇÇ)).elim
          ¬∑ by_cases hi‚ÇÅ : i‚ÇÅ ‚â§ j
            ¬∑ exact mapEq_trans _ _ (this j (by simp) hi‚ÇÅ (Order.le_succ j)) hsucc
            ¬∑ obtain rfl : i‚ÇÅ = Order.succ j :=
                le_antisymm h‚ÇÅ‚ÇÇ ((Order.succ_le_iff_of_not_isMax hj‚ÇÅ).mpr (by simpa using hi‚ÇÅ))
              apply mapEq_rfl
        intro h‚ÇÅ‚ÇÇ h‚ÇÇ
        exact mapEq_of_eq hobj (Order.le_succ j)
          (hj‚ÇÇ (iter‚ÇÅ.trunc (Order.le_succ j)) (iter‚ÇÇ.trunc (Order.le_succ j))) _ _ _ hi‚ÇÇ
    | hl j h‚ÇÅ h‚ÇÇ =>
        intro iter‚ÇÅ iter‚ÇÇ
        have hobj : iter‚ÇÅ.F.obj = iter‚ÇÇ.F.obj := by
          ext ‚ü®i, hi‚ü©
          wlog h : i < j generalizing i
          ¬∑ obtain rfl : j = i := le_antisymm (by simpa using h) hi
            simp only [obj_limit _ _ h‚ÇÅ]
            congr 1
            fapply Functor.ext
            ¬∑ rintro ‚ü®i, hi‚ü©
              exact this _ _ hi
            ¬∑ rintro ‚ü®i‚ÇÅ, hi‚ÇÅ‚ü© ‚ü®i‚ÇÇ, hi‚ÇÇ‚ü© f
              exact Functor.congr_hom (h‚ÇÇ i‚ÇÇ hi‚ÇÇ (iter‚ÇÅ.trunc hi‚ÇÇ.le) (iter‚ÇÇ.trunc hi‚ÇÇ.le))
                (homOfLE (leOfHom f) : ‚ü®i‚ÇÅ, leOfHom f‚ü© ‚ü∂ ‚ü®i‚ÇÇ, by simp‚ü©)
          exact Functor.congr_obj (h‚ÇÇ i h (iter‚ÇÅ.trunc h.le) (iter‚ÇÇ.trunc h.le)) ‚ü®i, by simp‚ü©
        apply functor_eq hobj
        intro i‚ÇÅ i‚ÇÇ h‚ÇÅ‚ÇÇ hi‚ÇÇ
        by_cases h‚ÇÉ : i‚ÇÇ < j
        ¬∑ exact mapEq_of_eq hobj hi‚ÇÇ
            (h‚ÇÇ _ h‚ÇÉ (iter‚ÇÅ.trunc h‚ÇÉ.le) (iter‚ÇÇ.trunc h‚ÇÉ.le)) _ _ _ (by rfl)
        ¬∑ obtain rfl : j = i‚ÇÇ := le_antisymm (by simpa using h‚ÇÉ) hi‚ÇÇ
          by_cases h‚ÇÑ : i‚ÇÅ < j
          ¬∑ dsimp [MapEq]
            have : restrictionLT iter‚ÇÅ.F hi‚ÇÇ = restrictionLT iter‚ÇÇ.F hi‚ÇÇ :=
              Functor.ext (fun k ‚Ü¶ congr_fun hobj ‚ü®k.1, k.2.le‚ü©) (by
                rintro ‚ü®k‚ÇÅ, hk‚ÇÅ‚ü© ‚ü®k‚ÇÇ, hk‚ÇÇ‚ü© f
                exact Functor.congr_hom (h‚ÇÇ k‚ÇÇ hk‚ÇÇ (iter‚ÇÅ.trunc hk‚ÇÇ.le) (iter‚ÇÇ.trunc hk‚ÇÇ.le))
                  (homOfLE (leOfHom f) : ‚ü®k‚ÇÅ, leOfHom f‚ü© ‚ü∂ ‚ü®k‚ÇÇ, by simp‚ü©))
            simp only [map_eq_Œπ _ _ h‚ÇÅ _ _ h‚ÇÑ, assoc, eqToHom_trans,
              congr_colimit_Œπ this h‚ÇÅ]
          ¬∑ obtain rfl : i‚ÇÅ = j := le_antisymm h‚ÇÅ‚ÇÇ (by simpa using h‚ÇÑ)
            exact mapEq_rfl hobj i‚ÇÅ hi‚ÇÇ

end Iteration

end SuccStruct

end SmallObject

end CategoryTheory
