/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.SmallObject.Iteration.Basic

/-!
# Uniqueness of morphisms in the category of iterations of functors

Given a functor `Œ¶ : C ‚•§ C` and a natural transformation `Œµ : ùü≠ C ‚ü∂ Œ¶`,
we show in this file that there exists a unique morphism
between two arbitrary objects in the category `Functor.Iteration Œµ j`
when `j : J` and `J` is a well orderered set.

-/

universe u

namespace CategoryTheory

open Category Limits

variable {C : Type*} [Category C] {Œ¶ : C ‚•§ C} {Œµ : ùü≠ C ‚ü∂ Œ¶}
  {J : Type u} [LinearOrder J] [IsWellOrder J (¬∑ < ¬∑)] [OrderBot J] (j : J)

namespace Functor

namespace Iteration

namespace Hom

/-- The (unique) morphism between two objects in `Iteration Œµ ‚ä•` -/
def mkOfBot (iter‚ÇÅ iter‚ÇÇ : Iteration Œµ (‚ä• : J)) : iter‚ÇÅ ‚ü∂ iter‚ÇÇ where
  natTrans :=
    { app := fun ‚ü®i, hi‚ü© => eqToHom (by congr; simpa using hi) ‚â´ iter‚ÇÅ.isoZero.hom ‚â´
        iter‚ÇÇ.isoZero.inv ‚â´ eqToHom (by congr; symm; simpa using hi)
      naturality := fun ‚ü®i, hi‚ü© ‚ü®k, hk‚ü© œÜ => by
        obtain rfl : i = ‚ä• := by simpa using hi
        obtain rfl : k = ‚ä• := by simpa using hk
        obtain rfl : œÜ = ùüô _ := rfl
        simp }
  natTrans_app_succ i hi := by simp at hi

section

variable {i : J} {iter‚ÇÅ iter‚ÇÇ : Iteration Œµ (wellOrderSucc i)}
  (hi : i < wellOrderSucc i) (œÜ : iter‚ÇÅ.trunc hi.le ‚ü∂ iter‚ÇÇ.trunc hi.le)

/-- Auxiliary definition for `mkOfSucc`. -/
noncomputable def mkOfSuccNatTransApp (k : J) (hk : k ‚â§ wellOrderSucc i) :
    iter‚ÇÅ.F.obj ‚ü®k, hk‚ü© ‚ü∂ iter‚ÇÇ.F.obj ‚ü®k, hk‚ü© :=
  if hk' : k = wellOrderSucc i then
    eqToHom (by subst hk'; rfl) ‚â´ (iter‚ÇÅ.isoSucc i hi).hom ‚â´
      whiskerRight (œÜ.natTrans.app ‚ü®i, by rfl‚ü©) _ ‚â´ (iter‚ÇÇ.isoSucc i hi).inv ‚â´
      eqToHom (by subst hk'; rfl)
  else
    œÜ.natTrans.app ‚ü®k, le_of_lt_wellOrderSucc (by
      obtain hk|rfl := hk.lt_or_eq
      ¬∑ exact hk
      ¬∑ tauto)‚ü©

lemma mkOfSuccNatTransApp_eq_of_le (k : J) (hk : k ‚â§ i) :
    mkOfSuccNatTransApp hi œÜ k (hk.trans (self_le_wellOrderSucc i)) =
      œÜ.natTrans.app ‚ü®k, hk‚ü© :=
  dif_neg (by rintro rfl; simpa using lt_of_le_of_lt hk hi)

@[simp]
lemma mkOfSuccNatTransApp_wellOrderSucc_eq :
    mkOfSuccNatTransApp hi œÜ (wellOrderSucc i) (by rfl) =
      (iter‚ÇÅ.isoSucc i hi).hom ‚â´ whiskerRight (œÜ.natTrans.app ‚ü®i, by rfl‚ü©) _ ‚â´
        (iter‚ÇÇ.isoSucc i hi).inv := by
  dsimp [mkOfSuccNatTransApp]
  rw [dif_pos rfl, comp_id, id_comp]

/-- Auxiliary definition for `mkOfSucc`. -/
@[simps]
noncomputable def mkOfSuccNatTrans :
    iter‚ÇÅ.F ‚ü∂ iter‚ÇÇ.F where
  app := fun ‚ü®k, hk‚ü© => mkOfSuccNatTransApp hi œÜ k hk
  naturality := fun ‚ü®k‚ÇÅ, hk‚ÇÅ‚ü© ‚ü®k‚ÇÇ, hk‚ÇÇ‚ü© f => by
    dsimp
    have hk : k‚ÇÅ ‚â§ k‚ÇÇ := leOfHom f
    obtain h‚ÇÇ | rfl := hk‚ÇÇ.lt_or_eq
    ¬∑ replace h‚ÇÇ : k‚ÇÇ ‚â§ i := le_of_lt_wellOrderSucc h‚ÇÇ
      rw [mkOfSuccNatTransApp_eq_of_le hi œÜ k‚ÇÇ h‚ÇÇ,
        mkOfSuccNatTransApp_eq_of_le hi œÜ k‚ÇÅ (hk.trans h‚ÇÇ)]
      exact natTrans_naturality œÜ k‚ÇÅ k‚ÇÇ hk h‚ÇÇ
    ¬∑ obtain h‚ÇÅ | rfl := hk.lt_or_eq
      ¬∑ have h‚ÇÇ : k‚ÇÅ ‚â§ i := le_of_lt_wellOrderSucc h‚ÇÅ
        let f‚ÇÅ : (‚ü®k‚ÇÅ, hk‚ü© : { l | l ‚â§ wellOrderSucc i}) ‚ü∂
          ‚ü®i, self_le_wellOrderSucc i‚ü© := homOfLE h‚ÇÇ
        let f‚ÇÇ : (‚ü®i, self_le_wellOrderSucc i‚ü© : { l | l ‚â§ wellOrderSucc i}) ‚ü∂
          ‚ü®wellOrderSucc i, by dsimp; rfl‚ü© := homOfLE (self_le_wellOrderSucc i)
        obtain rfl : f = f‚ÇÅ ‚â´ f‚ÇÇ := rfl
        rw [Functor.map_comp, Functor.map_comp, assoc,
          mkOfSuccNatTransApp_eq_of_le hi œÜ k‚ÇÅ h‚ÇÇ]
        erw [‚Üê natTrans_naturality_assoc œÜ k‚ÇÅ i h‚ÇÇ (by rfl)]
        rw [mkOfSuccNatTransApp_wellOrderSucc_eq]
        dsimp
        change _ ‚â´ iter‚ÇÅ.mapSucc i hi ‚â´ _ = _ ‚â´ _ ‚â´ iter‚ÇÇ.mapSucc i hi
        rw [iter‚ÇÅ.mapSucc_eq i hi, iter‚ÇÇ.mapSucc_eq i hi, assoc,
          Iso.inv_hom_id_assoc]
        ext X
        dsimp
        rw [‚Üê Œµ.naturality_assoc]
        rfl
      ¬∑ obtain rfl : f = ùüô _ := rfl
        rw [Functor.map_id, Functor.map_id, id_comp, comp_id]

end

/-- The (unique) morphism between two objects in `Iteration Œµ (wellOrderSucc i)`,
assuming we have a morphism between the truncations to `Iteration Œµ i`. -/
noncomputable def mkOfSucc
    {i : J} (iter‚ÇÅ iter‚ÇÇ : Iteration Œµ (wellOrderSucc i)) (hi : i < wellOrderSucc i)
    (œÜ : iter‚ÇÅ.trunc hi.le ‚ü∂ iter‚ÇÇ.trunc hi.le) :
    iter‚ÇÅ ‚ü∂ iter‚ÇÇ where
  natTrans := mkOfSuccNatTrans hi œÜ
  natTrans_app_zero := by
    dsimp
    rw [mkOfSuccNatTransApp_eq_of_le _ _ _ bot_le, œÜ.natTrans_app_zero]
    rfl
  natTrans_app_succ k hk := by
    obtain hk' | rfl := (le_of_lt_wellOrderSucc hk).lt_or_eq
    ¬∑ dsimp
      rw [mkOfSuccNatTransApp_eq_of_le hi œÜ k hk'.le,
        mkOfSuccNatTransApp_eq_of_le hi œÜ (wellOrderSucc k) (wellOrderSucc_le hk'),
        œÜ.natTrans_app_succ _ hk']
      rfl
    ¬∑ simp [mkOfSuccNatTransApp_eq_of_le hi œÜ k (by rfl)]

variable {j} {iter‚ÇÅ iter‚ÇÇ : Iteration Œµ j}

section

variable [IsWellOrderLimitElement j]
  (œÜ : ‚àÄ (i : J) (hi : i < j), iter‚ÇÅ.trunc hi.le ‚ü∂ iter‚ÇÇ.trunc hi.le)

/-- Auxiliary definition for `mkOfLimit`. -/
def mkOfLimitNatTransApp (i : J) (hi : i ‚â§ j) :
    iter‚ÇÅ.F.obj ‚ü®i, hi‚ü© ‚ü∂ iter‚ÇÇ.F.obj ‚ü®i, hi‚ü© :=
  if h : i < j
    then
      (œÜ i h).natTrans.app ‚ü®i, by rfl‚ü©
    else by
      obtain rfl : i = j := by
        obtain h' | rfl := hi.lt_or_eq
        ¬∑ exfalso
          exact h h'
        ¬∑ rfl
      exact (iter‚ÇÅ.isColimit i (show i ‚â§ i by rfl)).desc (Cocone.mk _
        { app := fun ‚ü®k, hk‚ü© => (œÜ k hk).natTrans.app ‚ü®k, by rfl‚ü© ‚â´
            iter‚ÇÇ.F.map (homOfLE (by exact hk.le))
          naturality := fun ‚ü®k‚ÇÅ, hk‚ÇÅ‚ü© ‚ü®k‚ÇÇ, hk‚ÇÇ‚ü© f => by
            have hf : k‚ÇÅ ‚â§ k‚ÇÇ := by simpa using leOfHom f
            dsimp
            rw [comp_id, congr_app (œÜ k‚ÇÅ hk‚ÇÅ) ((truncFunctor Œµ hf).map (œÜ k‚ÇÇ hk‚ÇÇ))]
            erw [natTrans_naturality_assoc (œÜ k‚ÇÇ hk‚ÇÇ) k‚ÇÅ k‚ÇÇ hf (by rfl)]
            dsimp
            rw [‚Üê Functor.map_comp, homOfLE_comp] })

lemma mkOfLimitNatTransApp_eq_of_lt (i : J) (hi : i < j) :
    mkOfLimitNatTransApp œÜ i hi.le = (œÜ i hi).natTrans.app ‚ü®i, by rfl‚ü© :=
  dif_pos hi

lemma mkOfLimitNatTransApp_naturality_top (i : J) (hi : i < j) :
    iter‚ÇÅ.F.map (homOfLE (by simpa using hi.le) : ‚ü®i, hi.le‚ü© ‚ü∂ ‚ü®j, by rfl‚ü©) ‚â´
      mkOfLimitNatTransApp œÜ j (by rfl) =
      mkOfLimitNatTransApp œÜ i hi.le ‚â´ iter‚ÇÇ.F.map (homOfLE (by simpa using hi.le)) := by
  rw [mkOfLimitNatTransApp_eq_of_lt œÜ i hi, mkOfLimitNatTransApp, dif_neg (by simp)]
  exact (iter‚ÇÅ.isColimit j (by rfl)).fac _ ‚ü®i, hi‚ü©

/-- Auxiliary definition for `mkOfLimit`. -/
@[simps]
def mkOfLimitNatTrans : iter‚ÇÅ.F ‚ü∂ iter‚ÇÇ.F where
  app := fun ‚ü®k, hk‚ü© => mkOfLimitNatTransApp œÜ k hk
  naturality := fun ‚ü®k‚ÇÅ, hk‚ÇÅ‚ü© ‚ü®k‚ÇÇ, hk‚ÇÇ‚ü© f => by
    have hk : k‚ÇÅ ‚â§ k‚ÇÇ := leOfHom f
    obtain h‚ÇÇ | rfl := hk‚ÇÇ.lt_or_eq
    ¬∑ dsimp
      rw [mkOfLimitNatTransApp_eq_of_lt _ k‚ÇÇ h‚ÇÇ,
        mkOfLimitNatTransApp_eq_of_lt _ k‚ÇÅ (lt_of_le_of_lt hk h‚ÇÇ),
        congr_app (œÜ k‚ÇÅ (lt_of_le_of_lt hk h‚ÇÇ)) ((truncFunctor Œµ hk).map (œÜ k‚ÇÇ h‚ÇÇ))]
      exact natTrans_naturality (œÜ k‚ÇÇ h‚ÇÇ) k‚ÇÅ k‚ÇÇ hk (by rfl)
    ¬∑ obtain h‚ÇÅ | rfl := hk‚ÇÅ.lt_or_eq
      ¬∑ exact mkOfLimitNatTransApp_naturality_top _ _ h‚ÇÅ
      ¬∑ obtain rfl : f = ùüô _ := rfl
        simp only [map_id, id_comp, comp_id]

/-- The (unique) morphism between two objects in `Iteration Œµ j` when `j` is a limit element,
assuming we have a morphism between the truncations to `Iteration Œµ i` for all `i < j`. -/
def mkOfLimit : iter‚ÇÅ ‚ü∂ iter‚ÇÇ where
  natTrans := mkOfLimitNatTrans œÜ
  natTrans_app_zero := by simp [mkOfLimitNatTransApp_eq_of_lt œÜ ‚ä•
    (IsWellOrderLimitElement.bot_lt j)]
  natTrans_app_succ i h := by
    dsimp
    have h' := IsWellOrderLimitElement.wellOrderSucc_lt h
    rw [mkOfLimitNatTransApp_eq_of_lt œÜ _ h',
      (œÜ _ h').natTrans_app_succ i (self_lt_wellOrderSucc h),
      mkOfLimitNatTransApp_eq_of_lt œÜ _ h,
      congr_app (œÜ i h) ((truncFunctor Œµ (self_le_wellOrderSucc i)).map (œÜ (wellOrderSucc i) h'))]
    dsimp

end

instance : Nonempty (iter‚ÇÅ ‚ü∂ iter‚ÇÇ) := by
  let P := fun (i : J) => ‚àÄ (hi : i ‚â§ j),
    Nonempty ((truncFunctor Œµ hi).obj iter‚ÇÅ ‚ü∂ (truncFunctor Œµ hi).obj iter‚ÇÇ)
  suffices ‚àÄ i, P i from this j (by rfl)
  refine fun _ => WellFoundedLT.induction _ (fun i hi hi' => ?_)
  obtain rfl | ‚ü®i, rfl, hi''‚ü© | _ := eq_bot_or_eq_succ_or_isWellOrderLimitElement i
  ¬∑ exact ‚ü®Hom.mkOfBot _ _‚ü©
  ¬∑ exact ‚ü®Hom.mkOfSucc _ _ hi'' ((hi i hi'' (hi''.le.trans hi')).some)‚ü©
  ¬∑ exact ‚ü®Hom.mkOfLimit (fun k hk => (hi k hk (hk.le.trans hi')).some)‚ü©

noncomputable instance : Unique (iter‚ÇÅ ‚ü∂ iter‚ÇÇ) :=
  uniqueOfSubsingleton (Nonempty.some inferInstance)

end Hom

variable {j} (iter‚ÇÅ iter‚ÇÇ iter‚ÇÉ : Iteration Œµ j)

/-- The canonical isomorphism between two objects in the category `Iteration Œµ j`. -/
noncomputable def iso : iter‚ÇÅ ‚âÖ iter‚ÇÇ where
  hom := default
  inv := default

@[simp]
lemma iso_refl : iso iter‚ÇÅ iter‚ÇÅ = Iso.refl _ := by aesop_cat

lemma iso_trans : iso iter‚ÇÅ iter‚ÇÉ = iso iter‚ÇÅ iter‚ÇÇ ‚â™‚â´ iso iter‚ÇÇ iter‚ÇÉ := by aesop_cat

end Iteration

end Functor

end CategoryTheory
