/-
Copyright (c) 2023 Andrea Laretto. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrea Laretto
-/
import Mathlib.CategoryTheory.Products.Bifunctor

/-!
# Dinatural transformations

Dinatural transformations are special kinds of transformations between
functors `F G : C·µí·µñ √ó C ‚•§ D` which depend both covariantly and contravariantly
on the same category (also known as difunctors).

A dinatural transformation is a family of morphisms given only on *the diagonal* of the two
functors, and is such that a certain naturality hexagon commutes.

Note that dinatural transformations cannot be composed with each other (since the outer
hexagon does not commute in general), but can still be "pre/post-composed" with
ordinary natural transformations.
-/

namespace CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

open Opposite

/-- Dinatural transformations between two (di)functors.
-/
structure DinatTrans (F G : C·µí·µñ ‚•§ C ‚•§ D) : Type max u‚ÇÅ v‚ÇÇ where
  /-- The component of a natural transformation. -/
  app : ‚àÄ X : C, F.obj2 (op X) X ‚ü∂ G.obj2 (op X) X
  /-- The commutativity square for a given morphism. -/
  dinaturality :
    ‚àÄ {X Y : C}
      (f : X ‚ü∂ Y),
      F.map2 f.op (ùüô _) ‚â´ app X ‚â´ G.map2 (ùüô _) (f) =
      F.map2 (ùüô _) (f) ‚â´ app Y ‚â´ G.map2 f.op (ùüô _) :=
        by aesop_cat

attribute [reassoc (attr := simp)] DinatTrans.dinaturality

/-- Notation for dinatural transformations. -/
infixr:50 " ‚§û " => DinatTrans

/-- Opposite of a difunctor.
-/
@[simps!]
def Functor.diop (F : C·µí·µñ ‚•§ C ‚•§ D) : C·µí·µñ ‚•§ C ‚•§ D·µí·µñ := F.biop.flip

variable {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] {F : Type u‚ÇÑ} [Category.{v‚ÇÑ} F]

variable {F G H : C·µí·µñ ‚•§ C ‚•§ D}

/-- Post-composition with a natural transformation.
-/
@[simps]
def DinatTrans.compNatTrans (Œ¥ : F ‚§û G) (Œ± : G ‚ü∂ H) : F ‚§û H
    where
  app X := Œ¥.app X ‚â´ Œ±.app2 (op X) X
  dinaturality f := by
    rw [Category.assoc, Category.assoc]
    rw [‚ÜêNatTrans.naturality2]
    rw [Œ¥.dinaturality_assoc]
    rw [Œ±.naturality2]

/-- Pre-composition with a natural transformation.
-/
@[simps]
def DinatTrans.precompNatTrans (Œ¥ : G ‚§û H) (Œ± : F ‚ü∂ G) : F ‚§û H
    where
  app X := Œ±.app2 (op X) X ‚â´ Œ¥.app X
  dinaturality f := by
    rw [Category.assoc, Category.assoc]
    rw [Œ±.naturality2_assoc]
    rw [Œ¥.dinaturality]
    rw [‚ÜêNatTrans.naturality2_assoc]

/-- Opposite of a dinatural transformation.
-/
@[simps]
def DinatTrans.op (Œ± : F ‚§û G) : G.diop ‚§û F.diop
    where
  app X := (Œ±.app X).op
  dinaturality f := Quiver.Hom.unop_inj (by simp; exact Œ±.dinaturality f)
