/-
Copyright (c) 2023 Andrea Laretto. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrea Laretto
-/
import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Functor.Basic
import Mathlib.CategoryTheory.Opposites
import Mathlib.CategoryTheory.Products.Basic
import Mathlib.Tactic.CategoryTheory.Reassoc

/-!
# Dinatural transformations

Dinatural transformations are special kinds of transformations between
functors `F G : C·µí·µñ √ó C ‚•§ D` which depend both covariantly and contravariantly
on the same category (also known as difunctors).

A dinatural transformation is a family of morphisms given only on *the diagonal* of the two
functors, and is such that a certain naturality hexagon commutes.

Note that dinatural transformations cannot be composed with each other (since the outer
hexagon does not commute in general), but can still be "pre/post-composed" with
ordinary natural transformations.
-/

namespace CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

open Opposite

/-- Dinatural transformations between two (di)functors.
-/
structure DinatTrans (F G : C·µí·µñ √ó C ‚•§ D) : Type max u‚ÇÅ v‚ÇÇ where
  /-- The component of a natural transformation. -/
  app : ‚àÄ X : C, F.obj (op X, X) ‚ü∂ G.obj (op X, X)
  /-- The commutativity square for a given morphism. -/
  dinaturality :
    ‚àÄ {X Y : C}
      (f : X ‚ü∂ Y),
      F.map (X := ‚ü®_,_‚ü©) (Y := ‚ü®_,_‚ü©) (f.op, ùüô _) ‚â´ app X ‚â´ G.map (Y := ‚ü®_,_‚ü©) (ùüô (op _), f) =
      F.map (X := ‚ü®_,_‚ü©) (Y := ‚ü®_,_‚ü©) (ùüô (op _), f) ‚â´ app Y ‚â´ G.map (Y := ‚ü®_,_‚ü©) (f.op, ùüô _) :=
        by aesop_cat

attribute [reassoc (attr := simp)] DinatTrans.dinaturality

/-- Notation for dinatural transformations. -/
infixr:50 " ‚§û " => DinatTrans

/-- Opposite of a product category.
-/
@[simp]
def op_prod : (C·µí·µñ √ó C) ‚•§ (C·µí·µñ √ó C)·µí·µñ where
  obj := Œª ‚ü®Cop,C‚ü© => op ‚ü®op C, Cop.unop‚ü©
  map := Œª ‚ü®f,g‚ü© => op ‚ü®g.op, f.unop‚ü©

/-- Opposite of a difunctor.
-/
@[simps]
def Functor.diop (F : C·µí·µñ √ó C ‚•§ D) : C·µí·µñ √ó C ‚•§ D·µí·µñ := op_prod ‚ãô F.op

variable {F G H : C·µí·µñ √ó C ‚•§ D}

/-- Post-composition with a natural transformation.
-/
def DinatTrans.compNatTrans (Œ¥ : F ‚§û G) (Œ± : G ‚ü∂ H) : F ‚§û H
    where
  app X := Œ¥.app X ‚â´ Œ±.app (op X, X)
  dinaturality f := by
    rw [Category.assoc, Category.assoc, ‚Üê Œ±.naturality, Œ¥.dinaturality_assoc, ‚Üê Œ±.naturality]

/-- Pre-composition with a natural transformation.
-/
def DinatTrans.precompNatTrans (Œ¥ : G ‚§û H) (Œ± : F ‚ü∂ G) : F ‚§û H
    where
  app X := Œ±.app (op X, X) ‚â´ Œ¥.app X
  dinaturality f := by
    erw [Category.assoc, Category.assoc, Œ±.naturality_assoc, Œ¥.dinaturality, Œ±.naturality_assoc]

/-- Opposite of a dinatural transformation.
-/
def DinatTrans.op (Œ± : F ‚§û G) : G.diop ‚§û F.diop
    where
  app X := (Œ±.app X).op
  dinaturality f := Quiver.Hom.unop_inj (by simp; exact Œ±.dinaturality f)
