import Mathlib.CategoryTheory.Functor.KanExtension

namespace CategoryTheory

open Category Limits

namespace Functor

variable {C D H : Type _} [Category C] [Category D] [Category H]
  (F : C ‚•§ H) (L : C ‚•§ D)

abbrev HasPointwiseLeftKanExtensionAt (Y : D) :=
  HasColimit (CostructuredArrow.proj L Y ‚ãô F)

namespace LeftExtension

variable {F L} (E : LeftExtension L F)

@[simps]
def coconeAt (Y : D) : Cocone (CostructuredArrow.proj L Y ‚ãô F) where
  pt := E.right.obj Y
  Œπ :=
    { app := fun g => E.hom.app g.left ‚â´ E.right.map g.hom
      naturality := fun g‚ÇÅ g‚ÇÇ œÜ => by
        dsimp
        rw [‚Üê CostructuredArrow.w œÜ]
        simp only [assoc, NatTrans.naturality_assoc, Functor.comp_map,
          Functor.map_comp, comp_id] }

def IsPointwiseLeftKanExtensionAt (Y : D) := IsColimit (E.coconeAt Y)

def isUniversalOfPointwise (h : ‚àÄ (Y : D), E.IsPointwiseLeftKanExtensionAt Y) :
    E.IsUniversal :=
  IsInitial.ofUniqueHom (fun G => StructuredArrow.homMk
        { app := fun Y => (h Y).desc (LeftExtension.coconeAt G Y)
          naturality := fun Y‚ÇÅ Y‚ÇÇ œÜ => by
            apply (h Y‚ÇÅ).hom_ext
            intro X
            rw [(h Y‚ÇÅ).fac_assoc (coconeAt G Y‚ÇÅ) X]
            simpa using (h Y‚ÇÇ).fac (coconeAt G Y‚ÇÇ) ((CostructuredArrow.map œÜ).obj X) }
      (by
        ext X
        simpa using (h (L.obj X)).fac (LeftExtension.coconeAt G _) (CostructuredArrow.mk (ùüô _))))
    (fun G => by
      suffices ‚àÄ (m‚ÇÅ m‚ÇÇ : E ‚ü∂ G), m‚ÇÅ = m‚ÇÇ by intros; apply this
      intro m‚ÇÅ m‚ÇÇ
      ext Y
      apply (h Y).hom_ext
      intro X
      have eq‚ÇÅ := congr_app (StructuredArrow.w m‚ÇÅ) X.left
      have eq‚ÇÇ := congr_app (StructuredArrow.w m‚ÇÇ) X.left
      dsimp at eq‚ÇÅ eq‚ÇÇ ‚ä¢
      simp only [assoc, NatTrans.naturality]
      rw [reassoc_of% eq‚ÇÅ, reassoc_of% eq‚ÇÇ])

end LeftExtension

section

variable [‚àÄ (Y : D), F.HasPointwiseLeftKanExtensionAt L Y]

@[simps]
noncomputable def pointwiseLeftKanExtensionFunctor : D ‚•§ H where
  obj Y := colimit (CostructuredArrow.proj L Y ‚ãô F)
  map {Y‚ÇÅ Y‚ÇÇ} f :=
    colimit.desc (CostructuredArrow.proj L Y‚ÇÅ ‚ãô F)
      (Cocone.mk (colimit (CostructuredArrow.proj L Y‚ÇÇ ‚ãô F)) (
        { app := fun g => colimit.Œπ (CostructuredArrow.proj L Y‚ÇÇ ‚ãô F)
            ((CostructuredArrow.map f).obj g)
          naturality := fun g‚ÇÅ g‚ÇÇ œÜ => by
            dsimp
            simp only [comp_id]
            exact colimit.w (CostructuredArrow.proj L Y‚ÇÇ ‚ãô F) ((CostructuredArrow.map f).map œÜ) }))
  map_id Y := by
    apply colimit.hom_ext
    intro j
    dsimp
    simp only [colimit.Œπ_desc, comp_id]
    congr
    apply CostructuredArrow.map_id
  map_comp {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ} f f' := by
    apply colimit.hom_ext
    intro j
    dsimp
    simp only [colimit.Œπ_desc, colimit.Œπ_desc_assoc, comp_obj, CostructuredArrow.proj_obj]
    congr 1
    apply CostructuredArrow.map_comp

@[simps]
noncomputable def pointwiseLeftKanExtensionNatTrans : F ‚ü∂ L ‚ãô F.pointwiseLeftKanExtensionFunctor L where
  app X := colimit.Œπ (CostructuredArrow.proj L (L.obj X) ‚ãô F) (CostructuredArrow.mk (ùüô (L.obj X)))
  naturality {X‚ÇÅ X‚ÇÇ} f:= by
    simp only [comp_obj, pointwiseLeftKanExtensionFunctor_obj, comp_map,
      pointwiseLeftKanExtensionFunctor_map, colimit.Œπ_desc, CostructuredArrow.map_mk]
    rw [id_comp]
    let œÜ : CostructuredArrow.mk (L.map f) ‚ü∂ CostructuredArrow.mk (ùüô (L.obj X‚ÇÇ)) :=
      CostructuredArrow.homMk f
    exact colimit.w (CostructuredArrow.proj L (L.obj X‚ÇÇ) ‚ãô F) œÜ


@[simps! right hom]
noncomputable def pointwiseLeftKanExtension : LeftExtension L F :=
  StructuredArrow.mk (F.pointwiseLeftKanExtensionNatTrans L)

noncomputable def pointwiseLeftKanExtensionIsPointwiseLeftKanExtensionAt (X : D) :
    (F.pointwiseLeftKanExtension L).IsPointwiseLeftKanExtensionAt X :=
  IsColimit.ofIsoColimit (colimit.isColimit _) (Cocones.ext (Iso.refl _) (fun j => by
    dsimp
    simp only [comp_id, colimit.Œπ_desc, CostructuredArrow.map_mk]
    congr 1
    rw [id_comp]
    rfl))

noncomputable def pointwiseLeftKanExtensionIsUniversal :
    (F.pointwiseLeftKanExtension L).IsUniversal :=
  (F.pointwiseLeftKanExtension L).isUniversalOfPointwise
    (F.pointwiseLeftKanExtensionIsPointwiseLeftKanExtensionAt L)

instance : (F.pointwiseLeftKanExtensionFunctor L).IsLeftKanExtension
    (F.pointwiseLeftKanExtensionNatTrans L) where
  nonempty_isUniversal := ‚ü®F.pointwiseLeftKanExtensionIsUniversal L‚ü©

end

end Functor

end CategoryTheory
