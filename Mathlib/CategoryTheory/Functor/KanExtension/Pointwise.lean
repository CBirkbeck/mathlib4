import Mathlib.CategoryTheory.Functor.KanExtension

namespace CategoryTheory

open Category Limits

namespace Functor

variable {C D D' H : Type _} [Category C] [Category D] [Category D'] [Category H]
  (F : C ‚•§ H) (L : C ‚•§ D)

abbrev HasPointwiseLeftKanExtensionAt (Y : D) :=
  HasColimit (CostructuredArrow.proj L Y ‚ãô F)

abbrev HasPointwiseLeftKanExtension := ‚àÄ (Y : D), F.HasPointwiseLeftKanExtensionAt L Y

lemma hasPointwiseLeftKanExtensionAt_iff_of_iso {Y‚ÇÅ Y‚ÇÇ : D} (e : Y‚ÇÅ ‚âÖ Y‚ÇÇ) :
    F.HasPointwiseLeftKanExtensionAt L Y‚ÇÅ ‚Üî
      F.HasPointwiseLeftKanExtensionAt L Y‚ÇÇ := by
  revert Y‚ÇÅ Y‚ÇÇ e
  suffices ‚àÄ ‚¶ÉY‚ÇÅ Y‚ÇÇ : D‚¶Ñ (_ : Y‚ÇÅ ‚âÖ Y‚ÇÇ) [F.HasPointwiseLeftKanExtensionAt L Y‚ÇÅ],
      F.HasPointwiseLeftKanExtensionAt L Y‚ÇÇ from
    fun Y‚ÇÅ Y‚ÇÇ e => ‚ü®fun _ => this e, fun _ => this e.symm‚ü©
  intro Y‚ÇÅ Y‚ÇÇ e _
  change HasColimit ((CostructuredArrow.mapIso e.symm).functor ‚ãô CostructuredArrow.proj L Y‚ÇÅ ‚ãô F)
  infer_instance

variable {L}

lemma hasPointwiseLeftKanExtensionAt_iff_of_iso' {L' : C ‚•§ D} (e : L ‚âÖ L') (Y : D) :
    F.HasPointwiseLeftKanExtensionAt L Y ‚Üî
      F.HasPointwiseLeftKanExtensionAt L' Y := by
  revert L L' e
  suffices ‚àÄ ‚¶ÉL L' : C ‚•§ D‚¶Ñ (_ : L ‚âÖ L') [F.HasPointwiseLeftKanExtensionAt L Y],
      F.HasPointwiseLeftKanExtensionAt L' Y from
    fun L L' e => ‚ü®fun _ => this e, fun _ => this e.symm‚ü©
  intro L L' e _
  let Œ¶ : CostructuredArrow L' Y ‚âå CostructuredArrow L Y := Comma.mapLeftIso _ e.symm
  have : HasColimit (Œ¶.functor ‚ãô CostructuredArrow.proj L Y ‚ãô F) := inferInstance
  let e' : CostructuredArrow.proj L' Y ‚ãô F ‚âÖ
    Œ¶.functor ‚ãô CostructuredArrow.proj L Y ‚ãô F := Iso.refl _
  exact hasColimitOfIso e'

variable (L)

lemma hasPointwiseLeftKanExtensionAt_of_equivalence (L' : C ‚•§ D')
    (E : D ‚âå D') (eL : L ‚ãô E.functor ‚âÖ L') (Y : D) (Y' : D') (e : E.functor.obj Y ‚âÖ Y')
    [F.HasPointwiseLeftKanExtensionAt L Y] :
    F.HasPointwiseLeftKanExtensionAt L' Y' := by
  rw [‚Üê F.hasPointwiseLeftKanExtensionAt_iff_of_iso' eL,
    F.hasPointwiseLeftKanExtensionAt_iff_of_iso _ e.symm]
  let Œ¶ := CostructuredArrow.post L E.functor Y
  have : IsEquivalence Œ¶ := CostructuredArrow.isEquivalencePost _ _ _
  have : HasColimit ((asEquivalence Œ¶).functor ‚ãô
    CostructuredArrow.proj (L ‚ãô E.functor) (E.functor.obj Y) ‚ãô F) :=
    (inferInstance : F.HasPointwiseLeftKanExtensionAt L Y)
  exact hasColimit_of_equivalence_comp (asEquivalence Œ¶)

lemma hasPointwiseLeftKanExtensionAt_iff_of_equivalence (L' : C ‚•§ D')
    (E : D ‚âå D') (eL : L ‚ãô E.functor ‚âÖ L') (Y : D) (Y' : D') (e : E.functor.obj Y ‚âÖ Y') :
    F.HasPointwiseLeftKanExtensionAt L Y ‚Üî
      F.HasPointwiseLeftKanExtensionAt L' Y' := by
  constructor
  ¬∑ intro
    exact F.hasPointwiseLeftKanExtensionAt_of_equivalence L L' E eL Y Y' e
  ¬∑ intro
    exact F.hasPointwiseLeftKanExtensionAt_of_equivalence L' L E.symm
      (isoWhiskerRight eL.symm _ ‚â™‚â´ Functor.associator _ _ _ ‚â™‚â´
        isoWhiskerLeft L E.unitIso.symm ‚â™‚â´ L.rightUnitor) Y' Y
      (E.inverse.mapIso e.symm ‚â™‚â´ E.unitIso.symm.app Y)

namespace LeftExtension

variable {F L} (E E' : LeftExtension L F)

@[simps]
def coconeAt (Y : D) : Cocone (CostructuredArrow.proj L Y ‚ãô F) where
  pt := E.right.obj Y
  Œπ :=
    { app := fun g => E.hom.app g.left ‚â´ E.right.map g.hom
      naturality := fun g‚ÇÅ g‚ÇÇ œÜ => by
        dsimp
        rw [‚Üê CostructuredArrow.w œÜ]
        simp only [assoc, NatTrans.naturality_assoc, Functor.comp_map,
          Functor.map_comp, comp_id] }

variable (L F)

@[simps]
def coconeAtFunctor (Y : D) : LeftExtension L F ‚•§ Cocone (CostructuredArrow.proj L Y ‚ãô F) where
  obj E := E.coconeAt Y
  map {E E'} œÜ := CoconeMorphism.mk (œÜ.right.app Y) (fun G => by
    dsimp
    rw [‚Üê StructuredArrow.w œÜ]
    simp only [assoc, NatTrans.naturality, const_obj_obj, whiskeringLeft_obj_obj, whiskeringLeft_obj_map,
      NatTrans.comp_app, comp_obj, whiskerLeft_app])

variable {L F}

def IsPointwiseLeftKanExtensionAt (Y : D) := IsColimit (E.coconeAt Y)

abbrev IsPointwiseLeftKanExtension := ‚àÄ (Y : D), E.IsPointwiseLeftKanExtensionAt Y

variable {E E'}

lemma isPointwiseLeftKanExtensionAt_iff_of_iso (e : E ‚âÖ E') (Y : D) :
    E.IsPointwiseLeftKanExtensionAt Y ‚âÉ E'.IsPointwiseLeftKanExtensionAt Y where
  toFun h := IsColimit.ofIsoColimit h ((coconeAtFunctor F L Y).mapIso e)
  invFun h := IsColimit.ofIsoColimit h ((coconeAtFunctor F L Y).mapIso e.symm)
  left_inv h := by
    dsimp only [IsPointwiseLeftKanExtensionAt]
    apply Subsingleton.elim
  right_inv h := by
    dsimp only [IsPointwiseLeftKanExtensionAt]
    apply Subsingleton.elim

lemma isPointwiseLeftKanExtension_iff_of_iso (e : E ‚âÖ E') :
    E.IsPointwiseLeftKanExtension ‚âÉ E'.IsPointwiseLeftKanExtension where
  toFun h := fun Y => (isPointwiseLeftKanExtensionAt_iff_of_iso e Y) (h Y)
  invFun h := fun Y => (isPointwiseLeftKanExtensionAt_iff_of_iso e Y).symm (h Y)
  left_inv h := by
    aesop_cat
    funext
  right_inv h := by
    aesop
    funext

variable (E E')

def isUniversalOfPointwise (h : E.IsPointwiseLeftKanExtension) :
    E.IsUniversal :=
  IsInitial.ofUniqueHom (fun G => StructuredArrow.homMk
        { app := fun Y => (h Y).desc (LeftExtension.coconeAt G Y)
          naturality := fun Y‚ÇÅ Y‚ÇÇ œÜ => by
            apply (h Y‚ÇÅ).hom_ext
            intro X
            rw [(h Y‚ÇÅ).fac_assoc (coconeAt G Y‚ÇÅ) X]
            simpa using (h Y‚ÇÇ).fac (coconeAt G Y‚ÇÇ) ((CostructuredArrow.map œÜ).obj X) }
      (by
        ext X
        simpa using (h (L.obj X)).fac (LeftExtension.coconeAt G _) (CostructuredArrow.mk (ùüô _))))
    (fun G => by
      suffices ‚àÄ (m‚ÇÅ m‚ÇÇ : E ‚ü∂ G), m‚ÇÅ = m‚ÇÇ by intros; apply this
      intro m‚ÇÅ m‚ÇÇ
      ext Y
      apply (h Y).hom_ext
      intro X
      have eq‚ÇÅ := congr_app (StructuredArrow.w m‚ÇÅ) X.left
      have eq‚ÇÇ := congr_app (StructuredArrow.w m‚ÇÇ) X.left
      dsimp at eq‚ÇÅ eq‚ÇÇ ‚ä¢
      simp only [assoc, NatTrans.naturality]
      rw [reassoc_of% eq‚ÇÅ, reassoc_of% eq‚ÇÇ])

end LeftExtension

section

variable [F.HasPointwiseLeftKanExtension L]

@[simps]
noncomputable def pointwiseLeftKanExtensionFunctor : D ‚•§ H where
  obj Y := colimit (CostructuredArrow.proj L Y ‚ãô F)
  map {Y‚ÇÅ Y‚ÇÇ} f :=
    colimit.desc (CostructuredArrow.proj L Y‚ÇÅ ‚ãô F)
      (Cocone.mk (colimit (CostructuredArrow.proj L Y‚ÇÇ ‚ãô F)) (
        { app := fun g => colimit.Œπ (CostructuredArrow.proj L Y‚ÇÇ ‚ãô F)
            ((CostructuredArrow.map f).obj g)
          naturality := fun g‚ÇÅ g‚ÇÇ œÜ => by
            dsimp
            simp only [comp_id]
            exact colimit.w (CostructuredArrow.proj L Y‚ÇÇ ‚ãô F) ((CostructuredArrow.map f).map œÜ) }))
  map_id Y := by
    apply colimit.hom_ext
    intro j
    dsimp
    simp only [colimit.Œπ_desc, comp_id]
    congr
    apply CostructuredArrow.map_id
  map_comp {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ} f f' := by
    apply colimit.hom_ext
    intro j
    dsimp
    simp only [colimit.Œπ_desc, colimit.Œπ_desc_assoc, comp_obj, CostructuredArrow.proj_obj]
    congr 1
    apply CostructuredArrow.map_comp

@[simps]
noncomputable def pointwiseLeftKanExtensionNatTrans : F ‚ü∂ L ‚ãô F.pointwiseLeftKanExtensionFunctor L where
  app X := colimit.Œπ (CostructuredArrow.proj L (L.obj X) ‚ãô F) (CostructuredArrow.mk (ùüô (L.obj X)))
  naturality {X‚ÇÅ X‚ÇÇ} f:= by
    simp only [comp_obj, pointwiseLeftKanExtensionFunctor_obj, comp_map,
      pointwiseLeftKanExtensionFunctor_map, colimit.Œπ_desc, CostructuredArrow.map_mk]
    rw [id_comp]
    let œÜ : CostructuredArrow.mk (L.map f) ‚ü∂ CostructuredArrow.mk (ùüô (L.obj X‚ÇÇ)) :=
      CostructuredArrow.homMk f
    exact colimit.w (CostructuredArrow.proj L (L.obj X‚ÇÇ) ‚ãô F) œÜ


@[simps! right hom]
noncomputable def pointwiseLeftKanExtension : LeftExtension L F :=
  StructuredArrow.mk (F.pointwiseLeftKanExtensionNatTrans L)

noncomputable def pointwiseLeftKanExtensionIsPointwiseLeftKanExtension :
    (F.pointwiseLeftKanExtension L).IsPointwiseLeftKanExtension := fun X =>
  IsColimit.ofIsoColimit (colimit.isColimit _) (Cocones.ext (Iso.refl _) (fun j => by
    dsimp
    simp only [comp_id, colimit.Œπ_desc, CostructuredArrow.map_mk]
    congr 1
    rw [id_comp]
    rfl))

noncomputable def pointwiseLeftKanExtensionIsUniversal :
    (F.pointwiseLeftKanExtension L).IsUniversal :=
  (F.pointwiseLeftKanExtension L).isUniversalOfPointwise
    (F.pointwiseLeftKanExtensionIsPointwiseLeftKanExtension L)

instance : (F.pointwiseLeftKanExtensionFunctor L).IsLeftKanExtension
    (F.pointwiseLeftKanExtensionNatTrans L) where
  nonempty_isUniversal := ‚ü®F.pointwiseLeftKanExtensionIsUniversal L‚ü©

instance : HasLeftKanExtension L F :=
  HasLeftKanExtension.mk' _ (F.pointwiseLeftKanExtensionNatTrans L)

variable {F L}

lemma isPointwiseLeftKanExtension_of_isLeftKanExtension (F' : D ‚•§ H) (Œ± : F ‚ü∂ L ‚ãô F')
    [F'.IsLeftKanExtension Œ±] :
    (LeftExtension.mk _ Œ±).IsPointwiseLeftKanExtension :=
  LeftExtension.isPointwiseLeftKanExtension_iff_of_iso
    (IsColimit.coconePointUniqueUpToIso (F.pointwiseLeftKanExtensionIsUniversal L)
      (F'.leftKanExtensionUniversal Œ±))
    (F.pointwiseLeftKanExtensionIsPointwiseLeftKanExtension L)

end

end Functor

end CategoryTheory
