import Mathlib.CategoryTheory.Localization.Predicate
import Mathlib.CategoryTheory.Localization.LocalizerMorphism
import Mathlib.CategoryTheory.Functor.KanExtension.Basic

namespace CategoryTheory

open Category Limits

namespace Functor

variable {C C' D D' H : Type _} [Category C] [Category C']
  [Category D] [Category D'] [Category H]
  (RF RF' RF'' : H ‚•§ D) {F F' F'' : C ‚•§ D} (e : F ‚âÖ F') {L : C ‚•§ H}
  (Œ± : F ‚ü∂ L ‚ãô RF) (Œ±' : F' ‚ü∂ L ‚ãô RF') (Œ±'' : F'' ‚ü∂ L ‚ãô RF'') (Œ±'‚ÇÇ : F ‚ü∂ L ‚ãô RF')
  (W : MorphismProperty C)

class IsRightDerivedFunctor [L.IsLocalization W] : Prop where
  isLeftKanExtension' : RF.IsLeftKanExtension Œ±

lemma IsRightDerivedFunctor.isLeftKanExtension [L.IsLocalization W] [RF.IsRightDerivedFunctor Œ± W] :
    RF.IsLeftKanExtension Œ± :=
  IsRightDerivedFunctor.isLeftKanExtension' W

lemma isRightDerivedFunctor_iff_isLeftKanExtension [L.IsLocalization W] :
    RF.IsRightDerivedFunctor Œ± W ‚Üî RF.IsLeftKanExtension Œ± := by
  constructor
  ¬∑ intros
    exact IsRightDerivedFunctor.isLeftKanExtension RF Œ± W
  ¬∑ intro h
    exact ‚ü®h‚ü©

section

variable {RF} {RF'}

lemma isRightDerivedFunctor_iff_of_iso (Œ±' : F ‚ü∂ L ‚ãô RF') (W : MorphismProperty C)
    [L.IsLocalization W] (e : RF ‚âÖ RF')
    (comm : Œ± ‚â´ whiskerLeft L e.hom = Œ±') :
    RF.IsRightDerivedFunctor Œ± W ‚Üî
      RF'.IsRightDerivedFunctor Œ±' W := by
    simp only [isRightDerivedFunctor_iff_isLeftKanExtension]
    exact isLeftKanExtension_iff_of_iso e _ _ comm

end

section

variable [L.IsLocalization W] [RF.IsRightDerivedFunctor Œ± W]
  [RF'.IsRightDerivedFunctor Œ±' W] [RF''.IsRightDerivedFunctor Œ±'' W]

noncomputable def rightDerivedDesc (G : H ‚•§ D) (Œ≤ : F ‚ü∂ L ‚ãô G) : RF ‚ü∂ G :=
  have := IsRightDerivedFunctor.isLeftKanExtension RF Œ± W
  RF.descOfIsLeftKanExtension Œ± G Œ≤

@[reassoc (attr := simp)]
lemma rightDerived_fac (G : H ‚•§ D) (Œ≤ : F ‚ü∂ L ‚ãô G) :
    Œ± ‚â´ whiskerLeft L (RF.rightDerivedDesc Œ± W G Œ≤) = Œ≤ :=
  have := IsRightDerivedFunctor.isLeftKanExtension RF Œ± W
  RF.descOfIsLeftKanExtension_fac Œ± G Œ≤

@[reassoc (attr := simp)]
lemma rightDerived_fac_app (G : H ‚•§ D) (Œ≤ : F ‚ü∂ L ‚ãô G) (X : C):
    Œ±.app X ‚â´ (RF.rightDerivedDesc Œ± W G Œ≤).app (L.obj X) = Œ≤.app X:=
  have := IsRightDerivedFunctor.isLeftKanExtension RF Œ± W
  RF.descOfIsLeftKanExtension_fac_app Œ± G Œ≤ X

lemma rightDerived_ext (G : H ‚•§ D) (Œ≥‚ÇÅ Œ≥‚ÇÇ : RF ‚ü∂ G)
    (hŒ≥ : Œ± ‚â´ whiskerLeft L Œ≥‚ÇÅ = Œ± ‚â´ whiskerLeft L Œ≥‚ÇÇ) : Œ≥‚ÇÅ = Œ≥‚ÇÇ :=
  have := IsRightDerivedFunctor.isLeftKanExtension RF Œ± W
  RF.hom_ext_of_isLeftKanExtension Œ± Œ≥‚ÇÅ Œ≥‚ÇÇ hŒ≥

noncomputable def rightDerivedNatTrans (œÑ : F ‚ü∂ F') : RF ‚ü∂ RF' :=
  RF.rightDerivedDesc Œ± W RF' (œÑ ‚â´ Œ±')

@[reassoc (attr := simp)]
lemma rightDerivedNatTrans_fac (œÑ : F ‚ü∂ F') :
    Œ± ‚â´ whiskerLeft L (rightDerivedNatTrans RF RF' Œ± Œ±' W œÑ) = œÑ ‚â´ Œ±' := by
  dsimp only [rightDerivedNatTrans]
  simp

@[reassoc (attr := simp)]
lemma rightDerivedNatTrans_app (œÑ : F ‚ü∂ F') (X : C) :
  Œ±.app X ‚â´ (rightDerivedNatTrans RF RF' Œ± Œ±' W œÑ).app (L.obj X) =
    œÑ.app X ‚â´ Œ±'.app X := by
  dsimp only [rightDerivedNatTrans]
  simp

@[simp]
lemma rightDerivedNatTrans_id :
    rightDerivedNatTrans RF RF Œ± Œ± W (ùüô F) = ùüô RF :=
  rightDerived_ext RF Œ± W _ _ _ (by aesop_cat)

@[simp]
lemma rightDerivedNatTrans_comp (œÑ : F ‚ü∂ F') (œÑ' : F' ‚ü∂ F'') :
  rightDerivedNatTrans RF RF' Œ± Œ±' W œÑ ‚â´ rightDerivedNatTrans RF' RF'' Œ±' Œ±'' W œÑ' =
    rightDerivedNatTrans RF RF'' Œ± Œ±'' W (œÑ ‚â´ œÑ') :=
  rightDerived_ext RF Œ± W _ _ _ (by aesop_cat)

@[simps]
noncomputable def rightDerivedNatIso (œÑ : F ‚âÖ F') :
    RF ‚âÖ RF' where
  hom := rightDerivedNatTrans RF RF' Œ± Œ±' W œÑ.hom
  inv := rightDerivedNatTrans RF' RF Œ±' Œ± W œÑ.inv

@[simp]
noncomputable def rightDerivedFunctorUnique [RF'.IsRightDerivedFunctor Œ±'‚ÇÇ W] : RF ‚âÖ RF' :=
  rightDerivedNatIso RF RF' Œ± Œ±'‚ÇÇ W (Iso.refl F)

lemma isRightDerivedFunctor_iff_isIso_rightDerivedDesc
    (G : H ‚•§ D) (Œ≤ : F ‚ü∂ L ‚ãô G) :
    G.IsRightDerivedFunctor Œ≤ W ‚Üî IsIso (RF.rightDerivedDesc Œ± W G Œ≤) := by
  constructor
  ¬∑ intro
    have : RF.rightDerivedDesc Œ± W G Œ≤ = (rightDerivedNatIso RF G Œ± Œ≤ W (Iso.refl _)).hom :=
      rightDerived_ext RF Œ± W _ _ _ (by simp)
    rw [this]
    infer_instance
  ¬∑ intro h
    rw [‚Üê isRightDerivedFunctor_iff_of_iso Œ± Œ≤ W (asIso (RF.rightDerivedDesc Œ± W G Œ≤)) (by simp)]
    infer_instance

end

variable (F L)

class HasRightDerivedFunctor : Prop where
  hasLeftKanExtension' : HasLeftKanExtension W.Q F

variable [L.IsLocalization W]

lemma hasRightDerivedFunctor_iff :
    HasRightDerivedFunctor F W ‚Üî HasLeftKanExtension L F := by
  have : L.IsLocalization W := inferInstance
  have : HasRightDerivedFunctor F W ‚Üî HasLeftKanExtension W.Q F :=
    ‚ü®fun h => h.hasLeftKanExtension', fun h => ‚ü®h‚ü©‚ü©
  rw [this, hasLeftExtension_iff_postcomp‚ÇÅ W.Q F (Localization.uniq W.Q L W),
    hasLeftExtension_iff_of_iso‚ÇÅ (Localization.compUniqFunctor W.Q L W) F]

variable {F}

lemma hasRightDerivedFunctor_iff_of_iso :
    HasRightDerivedFunctor F W ‚Üî HasRightDerivedFunctor F' W := by
  rw [hasRightDerivedFunctor_iff F W.Q W, hasRightDerivedFunctor_iff F' W.Q W,
    hasLeftExtension_iff_of_iso‚ÇÇ W.Q e]

variable (F)

lemma HasRightDerivedFunctor.hasLeftKanExtension [HasRightDerivedFunctor F W] :
    HasLeftKanExtension L F := by
  simpa only [‚Üê hasRightDerivedFunctor_iff F L W]

variable {F L W}

lemma HasRightDerivedFunctor.mk' [RF.IsRightDerivedFunctor Œ± W] :
    HasRightDerivedFunctor F W := by
  have := IsRightDerivedFunctor.isLeftKanExtension RF Œ± W
  simpa only [hasRightDerivedFunctor_iff F L W] using HasLeftKanExtension.mk RF Œ±

section

variable [F.HasRightDerivedFunctor W] (L W)

noncomputable def totalRightDerived : H ‚•§ D :=
  have := HasRightDerivedFunctor.hasLeftKanExtension F L W
  leftKanExtension L F

noncomputable def totalRightDerivedUnit : F ‚ü∂ L ‚ãô F.totalRightDerived L W :=
  have := HasRightDerivedFunctor.hasLeftKanExtension F L W
  leftKanExtensionUnit L F

instance : (F.totalRightDerived L W).IsRightDerivedFunctor (F.totalRightDerivedUnit L W) W where
  isLeftKanExtension' := by
    dsimp [totalRightDerived, totalRightDerivedUnit]
    infer_instance

end

instance [IsIso Œ±] : RF.IsRightDerivedFunctor Œ± W where
  isLeftKanExtension' :=
    letI : Localization.Lifting L W F RF := ‚ü®(asIso Œ±).symm‚ü©
    ‚ü®‚ü®IsInitial.ofUniqueHom
      (fun G => StructuredArrow.homMk
        (Localization.liftNatTrans L W F (L ‚ãô G.right) RF G.right G.hom) (by
          ext X
          dsimp
          simp only [Localization.liftNatTrans_app, comp_obj]
          dsimp [Localization.Lifting.iso, Localization.Lifting.iso']
          simp only [NatIso.isIso_inv_app, comp_obj, comp_id, IsIso.hom_inv_id_assoc]))
      (fun G œÜ => by
        ext1
        apply Localization.natTrans_ext L W
        intro X
        dsimp
        simp only [Localization.liftNatTrans_app, comp_obj]
        dsimp [Localization.Lifting.iso, Localization.Lifting.iso']
        simpa using NatTrans.congr_app œÜ.w.symm X)‚ü©‚ü©

example (G : H ‚•§ D) : G.IsRightDerivedFunctor (ùüô (L ‚ãô G)) W := inferInstance

instance (G : H ‚•§ D) : (L ‚ãô G).HasRightDerivedFunctor W :=
  HasRightDerivedFunctor.mk' G (ùüô _)

lemma hasRightDerivedFunctor_of_inverts (F : C ‚•§ D) (hF : W.IsInvertedBy F) :
    F.HasRightDerivedFunctor W :=
  HasRightDerivedFunctor.mk' (Localization.lift F hF W.Q) (Localization.fac F hF W.Q).inv

variable (W)

lemma isIso_rightDerivedFunctor_unit_iff_inverts [RF.IsRightDerivedFunctor Œ± W] :
    IsIso Œ± ‚Üî W.IsInvertedBy F := by
  constructor
  ¬∑ intro
    exact MorphismProperty.IsInvertedBy.of_iso W (asIso Œ±).symm
      (MorphismProperty.IsInvertedBy.of_comp W L (Localization.inverts L W) RF)
  ¬∑ intro hF
    rw [show Œ± = (Localization.fac F hF L).inv ‚â´  whiskerLeft L (rightDerivedFunctorUnique RF
          (Localization.lift F hF L) Œ± (Localization.fac F hF L).inv W).inv by simp]
    infer_instance

lemma isRightDerivedFunctor_iff_postcomp (G : D ‚•§ D') [IsEquivalence G] :
    RF.IsRightDerivedFunctor Œ± W ‚Üî
      (RF ‚ãô G).IsRightDerivedFunctor (whiskerRight Œ± G ‚â´ (Functor.associator _ _ _).hom) W := by
  simp only [isRightDerivedFunctor_iff_isLeftKanExtension]
  apply isLeftKanExtension_iff_postcomp‚ÇÇ

instance isRightDerivedFunctor_postcomp (G : D ‚•§ D') [IsEquivalence G]
    [RF.IsRightDerivedFunctor Œ± W] :
      (RF ‚ãô G).IsRightDerivedFunctor (whiskerRight Œ± G ‚â´ (Functor.associator _ _ _).hom) W := by
  rw [‚Üê isRightDerivedFunctor_iff_postcomp]
  infer_instance

lemma isRightDerivedFunctor_of_iso‚ÇÇ {F F' : C ‚•§ D} {RF RF' : H ‚•§ D}
    (Œ± : F ‚ü∂ L ‚ãô RF) (Œ±' : F' ‚ü∂ L ‚ãô RF') (e‚ÇÅ : F ‚âÖ F') (e‚ÇÇ : RF ‚âÖ RF')
    (h : Œ± ‚â´ whiskerLeft L e‚ÇÇ.hom = e‚ÇÅ.hom ‚â´ Œ±') :
    RF.IsRightDerivedFunctor Œ± W ‚Üî RF'.IsRightDerivedFunctor Œ±' W := by
  simp only [isRightDerivedFunctor_iff_isLeftKanExtension]
  exact Functor.isLeftKanExtension_iff_of_iso‚ÇÇ _ _ e‚ÇÅ e‚ÇÇ h

variable {RF}
lemma isRightDerivedFunctor_iff_of_isLocalization
    {H' : Type*} [Category H'] {L' : C ‚•§ H'} [L'.IsLocalization W]
    (Œ± : F ‚ü∂ L ‚ãô RF)
    {RF' : H' ‚•§ D} (Œ±' : F ‚ü∂ L' ‚ãô RF') (G : H' ‚•§ H) (e : L' ‚ãô G ‚âÖ L)
    (e' : G ‚ãô RF ‚âÖ RF')
    (hŒ±' : Œ±' = Œ± ‚â´ whiskerRight e.inv _ ‚â´ (Functor.associator _ _ _).hom ‚â´
      whiskerLeft _ e'.hom) :
    RF.IsRightDerivedFunctor Œ± W ‚Üî RF'.IsRightDerivedFunctor Œ±' W := by
  have := Functor.IsEquivalence.of_localization_comparison L' L W G e
  rw [isRightDerivedFunctor_iff_isLeftKanExtension _ Œ± W,
    isLeftKanExtension_iff_precomp‚ÇÅ G e Œ±,
    ‚Üê isRightDerivedFunctor_iff_isLeftKanExtension _ _ W]
  exact isRightDerivedFunctor_of_iso‚ÇÇ W _ _ (Iso.refl _) e' (by simp [hŒ±'])

lemma isRightDerivedFunctor_of_isLocalization
    {H' : Type*} [Category H'] {L' : C ‚•§ H'} [L'.IsLocalization W]
    (Œ± : F ‚ü∂ L ‚ãô RF)
    {RF' : H' ‚•§ D} (Œ±' : F ‚ü∂ L' ‚ãô RF') (G : H' ‚•§ H) (e : L' ‚ãô G ‚âÖ L)
    (e' : G ‚ãô RF ‚âÖ RF')
    (hŒ±' : Œ±' = Œ± ‚â´ whiskerRight e.inv _ ‚â´ (Functor.associator _ _ _).hom ‚â´
      whiskerLeft _ e'.hom)
    [RF.IsRightDerivedFunctor Œ± W] :
    RF'.IsRightDerivedFunctor Œ±' W := by
  rw [‚Üê isRightDerivedFunctor_iff_of_isLocalization W Œ± Œ±' G e e' hŒ±']
  infer_instance

end Functor

namespace LocalizerMorphism

variable {C‚ÇÅ C‚ÇÇ H‚ÇÅ H‚ÇÇ D : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category D]
  [Category H‚ÇÅ] [Category H‚ÇÇ] {W‚ÇÅ : MorphismProperty C‚ÇÅ} {W‚ÇÇ : MorphismProperty C‚ÇÇ}
  (Œ¶ : LocalizerMorphism W‚ÇÅ W‚ÇÇ) [Œ¶.IsLocalizedEquivalence] [Œ¶.functor.IsEquivalence]
  (L‚ÇÅ : C‚ÇÅ ‚•§ H‚ÇÅ) (L‚ÇÇ : C‚ÇÇ ‚•§ H‚ÇÇ) [L‚ÇÅ.IsLocalization W‚ÇÅ] [L‚ÇÇ.IsLocalization W‚ÇÇ]
  (G : H‚ÇÅ ‚•§ H‚ÇÇ) (iso : Œ¶.functor ‚ãô L‚ÇÇ ‚âÖ L‚ÇÅ ‚ãô G)
  {F‚ÇÇ : C‚ÇÇ ‚•§ D} {RF‚ÇÇ : H‚ÇÇ ‚•§ D} (Œ±‚ÇÇ : F‚ÇÇ ‚ü∂ L‚ÇÇ ‚ãô RF‚ÇÇ)
  {F‚ÇÅ : C‚ÇÅ ‚•§ D} {RF‚ÇÅ : H‚ÇÅ ‚•§ D} (Œ±‚ÇÅ : F‚ÇÅ ‚ü∂ L‚ÇÅ ‚ãô RF‚ÇÅ)
  (e‚ÇÅ : Œ¶.functor ‚ãô F‚ÇÇ ‚âÖ F‚ÇÅ)
  (e‚ÇÇ : G ‚ãô RF‚ÇÇ ‚âÖ RF‚ÇÅ)
  (h : Œ±‚ÇÅ = e‚ÇÅ.inv ‚â´ whiskerLeft Œ¶.functor Œ±‚ÇÇ ‚â´ (Functor.associator _ _ _).inv ‚â´
    whiskerRight iso.hom RF‚ÇÇ ‚â´ (Functor.associator L‚ÇÅ G RF‚ÇÇ).hom ‚â´ whiskerLeft L‚ÇÅ e‚ÇÇ.hom)

lemma isRightDerivedFunctor_iff_precomp :
    RF‚ÇÅ.IsRightDerivedFunctor Œ±‚ÇÅ W‚ÇÅ ‚Üî RF‚ÇÇ.IsRightDerivedFunctor Œ±‚ÇÇ W‚ÇÇ := by
  have : CatCommSq Œ¶.functor L‚ÇÅ L‚ÇÇ G := ‚ü®iso‚ü©
  have := Œ¶.isEquivalence L‚ÇÅ L‚ÇÇ G
  rw [‚Üê Functor.isRightDerivedFunctor_iff_of_isLocalization W‚ÇÅ
    (Œ±‚ÇÅ ‚â´ whiskerLeft L‚ÇÅ e‚ÇÇ.inv ‚â´ (Functor.associator _ _ _).inv) Œ±‚ÇÅ
    _ (Iso.refl _) e‚ÇÇ (by aesop_cat),
    Functor.isRightDerivedFunctor_iff_isLeftKanExtension _ _ W‚ÇÅ,
    Functor.isRightDerivedFunctor_iff_isLeftKanExtension _ _ W‚ÇÇ,
    Functor.isLeftKanExtension_iff_precomp RF‚ÇÇ Œ±‚ÇÇ Œ¶.functor]
  apply Functor.isLeftKanExtension_iff_of_iso‚ÇÉ _ _ e‚ÇÅ.symm (Iso.refl _) iso.symm
  ext
  simp [h]

end LocalizerMorphism

end CategoryTheory
