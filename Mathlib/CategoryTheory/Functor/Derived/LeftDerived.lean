/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Localization.Predicate
import Mathlib.CategoryTheory.Functor.KanExtension.Basic

/-!
# Left derived functor

-/

namespace CategoryTheory

open Category Limits

namespace Functor

variable {C D H : Type _} [Category C] [Category D] [Category H]
  (LF LF' LF'' : H ‚•§ D) {F F' F'' : C ‚•§ D} (e : F ‚âÖ F') {L : C ‚•§ H}
  (Œ± : L ‚ãô LF ‚ü∂ F) (Œ±' : L ‚ãô LF' ‚ü∂ F') (Œ±'' : L ‚ãô LF'' ‚ü∂ F'') (Œ±'‚ÇÇ : L ‚ãô LF' ‚ü∂ F)
  (W : MorphismProperty C)

@[mk_iff]
class IsLeftDerivedFunctor [L.IsLocalization W] : Prop where
  isRightKanExtension' : LF.IsRightKanExtension Œ±

lemma IsLeftDerivedFunctor.isRightKanExtension [L.IsLocalization W] [LF.IsLeftDerivedFunctor Œ± W] :
    LF.IsRightKanExtension Œ± :=
  IsLeftDerivedFunctor.isRightKanExtension' W

lemma isLeftDerivedFunctor_iff_of_iso [L.IsLocalization W] (e : LF ‚âÖ LF')
    (comm : whiskerLeft L e.hom ‚â´ Œ±'‚ÇÇ = Œ±) :
    LF.IsLeftDerivedFunctor Œ± W ‚Üî LF'.IsLeftDerivedFunctor Œ±'‚ÇÇ W := by
  simpa only [isLeftDerivedFunctor_iff] using isRightKanExtension_iff_of_iso e Œ± Œ±'‚ÇÇ comm

section

variable [L.IsLocalization W] [LF.IsLeftDerivedFunctor Œ± W]
  [LF'.IsLeftDerivedFunctor Œ±' W] [LF''.IsLeftDerivedFunctor Œ±'' W]

noncomputable def leftDerivedLift (G : H ‚•§ D) (Œ≤ : L ‚ãô G ‚ü∂ F) : G ‚ü∂ LF :=
  have := IsLeftDerivedFunctor.isRightKanExtension LF Œ± W
  LF.liftOfIsRightKanExtension Œ± G Œ≤

@[reassoc (attr := simp)]
lemma leftDerived_fac (G : H ‚•§ D) (Œ≤ : L ‚ãô G ‚ü∂ F) :
    whiskerLeft L (LF.leftDerivedLift Œ± W G Œ≤) ‚â´ Œ± = Œ≤ :=
  have := IsLeftDerivedFunctor.isRightKanExtension LF Œ± W
  LF.liftOfIsRightKanExtension_fac Œ± G Œ≤

@[reassoc (attr := simp)]
lemma leftDerived_fac_app (G : H ‚•§ D) (Œ≤ : L ‚ãô G ‚ü∂ F) (X : C):
    (LF.leftDerivedLift Œ± W G Œ≤).app (L.obj X) ‚â´ Œ±.app X = Œ≤.app X:=
  have := IsLeftDerivedFunctor.isRightKanExtension LF Œ± W
  LF.liftOfIsRightKanExtension_fac_app Œ± G Œ≤ X

include W in
lemma leftDerived_ext (G : H ‚•§ D) (Œ≥‚ÇÅ Œ≥‚ÇÇ : G ‚ü∂ LF)
    (hŒ≥ : whiskerLeft L Œ≥‚ÇÅ ‚â´ Œ± = whiskerLeft L Œ≥‚ÇÇ ‚â´ Œ±) : Œ≥‚ÇÅ = Œ≥‚ÇÇ :=
  have := IsLeftDerivedFunctor.isRightKanExtension LF Œ± W
  LF.hom_ext_of_isRightKanExtension Œ± Œ≥‚ÇÅ Œ≥‚ÇÇ hŒ≥

noncomputable def leftDerivedNatTrans (œÑ : F ‚ü∂ F') : LF ‚ü∂ LF' :=
  LF'.leftDerivedLift Œ±' W LF (Œ± ‚â´ œÑ)

omit [LF.IsLeftDerivedFunctor Œ± W] in
@[reassoc (attr := simp)]
lemma leftDerivedNatTrans_fac (œÑ : F ‚ü∂ F') :
    whiskerLeft L (leftDerivedNatTrans LF LF' Œ± Œ±' W œÑ) ‚â´ Œ±' =
    Œ± ‚â´ œÑ := by
  dsimp only [leftDerivedNatTrans]
  simp

omit [LF.IsLeftDerivedFunctor Œ± W] in
@[reassoc (attr := simp)]
lemma leftDerivedNatTrans_fac_app (œÑ : F ‚ü∂ F') (X : C) :
  (leftDerivedNatTrans LF LF' Œ± Œ±' W œÑ).app (L.obj X) ‚â´ Œ±'.app X =
    Œ±.app X ‚â´ œÑ.app X := by
  dsimp only [leftDerivedNatTrans]
  simp

@[simp]
lemma leftDerivedNatTrans_id :
    leftDerivedNatTrans LF LF Œ± Œ± W (ùüô F) = ùüô LF :=
  leftDerived_ext LF Œ± W _ _ _ (by aesop_cat)

omit [LF.IsLeftDerivedFunctor Œ± W] in
@[simp]
lemma leftDerivedNatTrans_comp (œÑ : F ‚ü∂ F') (œÑ' : F' ‚ü∂ F'') :
  leftDerivedNatTrans LF LF' Œ± Œ±' W œÑ ‚â´ leftDerivedNatTrans LF' LF'' Œ±' Œ±'' W œÑ' =
    leftDerivedNatTrans LF LF'' Œ± Œ±'' W (œÑ ‚â´ œÑ') :=
  leftDerived_ext LF'' Œ±'' W _ _ _ (by aesop_cat)

@[simps]
noncomputable def leftDerivedNatIso (œÑ : F ‚âÖ F') :
    LF ‚âÖ LF' where
  hom := leftDerivedNatTrans LF LF' Œ± Œ±' W œÑ.hom
  inv := leftDerivedNatTrans LF' LF Œ±' Œ± W œÑ.inv

@[simp]
noncomputable def leftDerivedFunctorUnique [LF'.IsLeftDerivedFunctor Œ±'‚ÇÇ W] : LF ‚âÖ LF' :=
  leftDerivedNatIso LF LF' Œ± Œ±'‚ÇÇ W (Iso.refl F)

end

variable (F L)

class HasLeftDerivedFunctor : Prop where
  hasRightKanExtension' : HasRightKanExtension W.Q F

variable [L.IsLocalization W]

lemma hasLeftDerivedFunctor_iff :
    HasLeftDerivedFunctor F W ‚Üî HasRightKanExtension L F := by
  have : HasLeftDerivedFunctor F W ‚Üî HasRightKanExtension W.Q F :=
    ‚ü®fun h => h.hasRightKanExtension', fun h => ‚ü®h‚ü©‚ü©
  rw [this, hasRightExtension_iff_postcomp‚ÇÅ (Localization.compUniqFunctor W.Q L W) F]

variable {F}

include e in
lemma hasLeftDerivedFunctor_iff_of_iso :
    HasLeftDerivedFunctor F W ‚Üî HasLeftDerivedFunctor F' W := by
  rw [hasLeftDerivedFunctor_iff F W.Q W, hasLeftDerivedFunctor_iff F' W.Q W,
    hasRightExtension_iff_of_iso‚ÇÇ W.Q e]

variable (F)

lemma HasLeftDerivedFunctor.hasRightKanExtension [HasLeftDerivedFunctor F W] :
    HasRightKanExtension L F := by
  simpa only [‚Üê hasLeftDerivedFunctor_iff F L W]

variable {F L W}

/-- Constructor for `HasLeftDerivedFunctor`. -/
lemma HasLeftDerivedFunctor.mk' [LF.IsLeftDerivedFunctor Œ± W] :
    HasLeftDerivedFunctor F W := by
  have := IsLeftDerivedFunctor.isRightKanExtension LF Œ± W
  simpa only [hasLeftDerivedFunctor_iff F L W] using HasRightKanExtension.mk LF Œ±

section

variable [F.HasLeftDerivedFunctor W] (L W)

noncomputable def totalLeftDerived : H ‚•§ D :=
  have := HasLeftDerivedFunctor.hasRightKanExtension F L W
  rightKanExtension L F

noncomputable def totalLeftDerivedCounit : L ‚ãô F.totalLeftDerived L W ‚ü∂ F :=
  have := HasLeftDerivedFunctor.hasRightKanExtension F L W
  rightKanExtensionCounit L F

instance : (F.totalLeftDerived L W).IsLeftDerivedFunctor (F.totalLeftDerivedCounit L W) W where
  isRightKanExtension' := by
    dsimp [totalLeftDerived, totalLeftDerivedCounit]
    infer_instance

end

instance [IsIso Œ±] : LF.IsLeftDerivedFunctor Œ± W where
  isRightKanExtension' :=
    letI lifting : Localization.Lifting L W F LF := ‚ü®asIso Œ±‚ü©
    ‚ü®‚ü®IsTerminal.ofUniqueHom
      (fun G => CostructuredArrow.homMk
        (Localization.liftNatTrans L W (L ‚ãô G.left) F G.left LF G.hom) (by
          ext X
          dsimp
          simp only [Localization.liftNatTrans_app, comp_obj, assoc]
          dsimp [Localization.Lifting.iso, lifting]
          simp only [NatIso.isIso_inv_app, comp_obj, IsIso.inv_hom_id, comp_id, id_comp]))
      (fun G œÜ => by
        ext1
        apply Localization.natTrans_ext L W
        intro X
        dsimp
        simp only [Localization.liftNatTrans_app, comp_obj]
        dsimp [Localization.Lifting.iso, lifting]
        simpa using NatTrans.congr_app œÜ.w X)‚ü©‚ü©

example (G : H ‚•§ D) : G.IsLeftDerivedFunctor (ùüô (L ‚ãô G)) W := inferInstance

instance (G : H ‚•§ D) : (L ‚ãô G).HasLeftDerivedFunctor W :=
  HasLeftDerivedFunctor.mk' G (ùüô _)

lemma hasLeftDerivedFunctor_of_inverts (F : C ‚•§ D) (hF : W.IsInvertedBy F) :
    F.HasLeftDerivedFunctor W :=
  HasLeftDerivedFunctor.mk' (Localization.lift F hF W.Q) (Localization.fac F hF W.Q).hom

lemma isIso_leftDerivedFunctor_counit_iff_inverts [LF.IsLeftDerivedFunctor Œ± W] :
    IsIso Œ± ‚Üî W.IsInvertedBy F := by
  constructor
  ¬∑ intro
    exact MorphismProperty.IsInvertedBy.of_iso W (asIso Œ±)
      (MorphismProperty.IsInvertedBy.of_comp W L (Localization.inverts L W) LF)
  ¬∑ intro hF
    rw [show Œ± = whiskerLeft L (leftDerivedFunctorUnique LF
          (Localization.lift F hF L) Œ± (Localization.fac F hF L).hom W).hom ‚â´
        (Localization.fac F hF L).hom by simp]
    infer_instance

end Functor

end CategoryTheory
