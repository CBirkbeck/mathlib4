import Mathlib.CategoryTheory.Enriched.FunctorCategory

universe v v' u u'

namespace CategoryTheory

open Category MonoidalCategory

namespace Presheaf

variable {C : Type u} [Category.{v} C] {D : Type u'} [Category.{v'} D]
  [MonoidalCategory D] [MonoidalClosed D]
  [โ (X : C), Functor.HasEnrichedHoms (Over X)แตแต D]

section

variable (F G : Cแตแต โฅค D)

noncomputable def internalHom.obj (X : Cแตแต) : D :=
  ((Over.forget X.unop).op โ F) โถ[D] ((Over.forget X.unop).op โ G)

section

noncomputable def internalHom.map {X Y : Cแตแต} (f : X โถ Y) :
    internalHom.obj F G X โถ internalHom.obj F G Y :=
  (Functor.whiskeringLeftEnrichedFunctor (Over.map f.unop).op D).map _ _

@[reassoc (attr := simp)]
lemma internalHom.map_app {X Y : Cแตแต} (f : X โถ Y) {U : C} (ฯ : U โถ Y.unop) :
    map F G f โซ Functor.enrichedHom.app _ _ (Opposite.op (Over.mk ฯ)) =
      Functor.enrichedHom.app _ _ (Opposite.op (Over.mk (ฯ โซ f.unop))) := by
  apply Functor.enrichedHom.precomp_app

end

lemma _root_.CategoryTheory.Over.mk_surjective {X : C} (Y : Over X) :
    โ (U : C) (f : U โถ X), Y = Over.mk f :=
  CostructuredArrow.mk_surjective Y

noncomputable def internalHom : Cแตแต โฅค D where
  obj := internalHom.obj F G
  map f := internalHom.map F G f
  map_id X := by
    apply Functor.enrichedHom.hom_ext
    rintro โจฯโฉ
    obtain โจU, ฯ, rflโฉ := Over.mk_surjective ฯ
    dsimp
    simp only [internalHom.map_app, unop_id, id_comp]
    congr 1
    simp
  map_comp _ _ := by
    apply Functor.enrichedHom.hom_ext
    rintro โจฯโฉ
    obtain โจU, ฯ, rflโฉ := Over.mk_surjective ฯ
    dsimp
    simp only [internalHom.map_app, unop_comp, assoc]
    congr 1
    simp

end

/-

TODO: `(K โ F โถ G) โ K โถ internalHom F G`

-/

namespace internalHom

variable {K F G : Cแตแต โฅค D}

namespace homEquiv

section

variable (ฯ : F โ K โถ G)

noncomputable def toFunApp (X : Cแตแต) : K.obj X โถ (internalHom F G).obj X :=
  Functor.end_.lift _ (fun Y โฆ MonoidalClosed.curry
    ((_ โ K.map Y.unop.hom.op) โซ ฯ.app (Opposite.op Y.unop.left))) sorry

@[reassoc (attr := simp)]
lemma toFunApp_app (X : Cแตแต) {Y : C} (f : Y โถ X.unop) :
    toFunApp ฯ X โซ Functor.enrichedHom.app _ _ (Opposite.op (Over.mk f)) =
      MonoidalClosed.curry
        ((_ โ K.map f.op) โซ ฯ.app (Opposite.op Y)) := by
  simp [toFunApp, Functor.enrichedHom.app]

@[simps]
noncomputable def toFun : K โถ internalHom F G where
  app := toFunApp ฯ
  naturality := fun X Y f โฆ Functor.enrichedHom.hom_ext (fun โจZโฉ โฆ by
    obtain โจZ, g, rflโฉ := Over.mk_surjective Z
    dsimp
    rw [assoc, assoc, toFunApp_app]
    dsimp
    erw [internalHom.map_app]
    rw [toFunApp_app, โ MonoidalClosed.curry_natural_left, op_comp, Functor.map_comp,
      MonoidalCategory.whiskerLeft_comp, assoc]
    dsimp)

end

section

variable (ฯ : K โถ internalHom F G)

noncomputable def invFunApp (X : Cแตแต) : F.obj X โ K.obj X โถ G.obj X :=
  MonoidalClosed.uncurry
    (ฯ.app X โซ Functor.enrichedHom.app _ _ (Opposite.op (Over.mk (๐ _))))

@[simp]
lemma curry_invFunApp (X : Cแตแต) :
    MonoidalClosed.curry (invFunApp ฯ X) =
      ฯ.app X โซ Functor.enrichedHom.app _ _ (Opposite.op (Over.mk (๐ _))) := by
  simp [invFunApp]

@[simps]
noncomputable def invFun : F โ K โถ G where
  app := invFunApp ฯ
  naturality := fun X Y f โฆ by
    dsimp [invFunApp]
    apply MonoidalClosed.curry_injective
    sorry

@[simp]
lemma toFun_invFun : toFun (invFun ฯ) = ฯ :=
  NatTrans.ext (by
    funext X
    refine Functor.enrichedHom.hom_ext (fun โจYโฉ โฆ ?_)
    obtain โจY, g, rflโฉ := Over.mk_surjective Y
    dsimp
    rw [toFunApp_app, invFun_app]
    dsimp
    rw [MonoidalClosed.curry_natural_left, curry_invFunApp]
    dsimp
    rw [NatTrans.naturality_assoc]
    erw [map_app]
    congr 2
    simp)

end

@[simp]
lemma invFun_toFun (ฯ : F โ K โถ G) : invFun (toFun ฯ) = ฯ := by
  ext X
  simp [invFunApp]

end homEquiv

noncomputable def homEquiv : (F โ K โถ G) โ (K โถ internalHom F G) where
  toFun := homEquiv.toFun
  invFun := homEquiv.invFun
  left_inv _ := by simp
  right_inv _ := by simp

end internalHom


end Presheaf

end CategoryTheory
