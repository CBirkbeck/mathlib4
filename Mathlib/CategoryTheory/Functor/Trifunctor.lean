/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Brendan Murphy
-/
import Mathlib.CategoryTheory.Functor.Currying
import Mathlib.Data.Fin.Tuple.Curry
import Mathlib.CategoryTheory.Products.Associator

/-!
# Trifunctors obtained by composition of bifunctors and currying

Given two bifunctors `F‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÅ‚ÇÇ` and `G : C‚ÇÅ‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ`, we define
the trifunctor `bifunctorComp‚ÇÅ‚ÇÇ F‚ÇÅ‚ÇÇ G : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ` which sends three
objects `X‚ÇÅ : C‚ÇÅ`, `X‚ÇÇ : C‚ÇÇ` and `X‚ÇÉ : C‚ÇÉ` to `G.obj ((F‚ÇÅ‚ÇÇ.obj X‚ÇÅ).obj X‚ÇÇ)).obj X‚ÇÉ`.

Similarly, given two bifunctors `F : C‚ÇÅ ‚•§ C‚ÇÇ‚ÇÉ ‚•§ C‚ÇÑ` and `G‚ÇÇ‚ÇÉ : C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÇ‚ÇÉ`, we define
the trifunctor `bifunctorComp‚ÇÇ‚ÇÉ F G‚ÇÇ‚ÇÉ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ` which sends three
objects `X‚ÇÅ : C‚ÇÅ`, `X‚ÇÇ : C‚ÇÇ` and `X‚ÇÉ : C‚ÇÉ` to `(F.obj X‚ÇÅ).obj ((G‚ÇÇ‚ÇÉ.obj X‚ÇÇ).obj X‚ÇÉ)`.

Finally we establish the ternary version of currying functors.
-/

namespace CategoryTheory

variable {C‚ÇÅ C‚ÇÇ C‚ÇÉ C‚ÇÑ C‚ÇÅ‚ÇÇ C‚ÇÇ‚ÇÉ : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ]
  [Category C‚ÇÑ] [Category C‚ÇÅ‚ÇÇ] [Category C‚ÇÇ‚ÇÉ]

section

variable (F‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÅ‚ÇÇ) (G : C‚ÇÅ‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ)

/-- Auxiliary definition for `bifunctorComp‚ÇÅ‚ÇÇ`. -/
@[simps]
def bifunctorComp‚ÇÅ‚ÇÇObj (X‚ÇÅ : C‚ÇÅ) : C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ where
  obj X‚ÇÇ :=
    { obj := fun X‚ÇÉ => (G.obj ((F‚ÇÅ‚ÇÇ.obj X‚ÇÅ).obj X‚ÇÇ)).obj X‚ÇÉ
      map := fun {X‚ÇÉ Y‚ÇÉ} œÜ => (G.obj ((F‚ÇÅ‚ÇÇ.obj X‚ÇÅ).obj X‚ÇÇ)).map œÜ }
  map {X‚ÇÇ Y‚ÇÇ} œÜ :=
    { app := fun X‚ÇÉ => (G.map ((F‚ÇÅ‚ÇÇ.obj X‚ÇÅ).map œÜ)).app X‚ÇÉ }

/-- Given two bifunctors `F‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÅ‚ÇÇ` and `G : C‚ÇÅ‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ`, this is
the trifunctor `C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ` obtained by composition. -/
@[simps]
def bifunctorComp‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ where
  obj X‚ÇÅ := bifunctorComp‚ÇÅ‚ÇÇObj F‚ÇÅ‚ÇÇ G X‚ÇÅ
  map {X‚ÇÅ Y‚ÇÅ} œÜ :=
    { app := fun X‚ÇÇ =>
        { app := fun X‚ÇÉ => (G.map ((F‚ÇÅ‚ÇÇ.map œÜ).app X‚ÇÇ)).app X‚ÇÉ }
      naturality := fun {X‚ÇÇ Y‚ÇÇ} œà => by
        ext X‚ÇÉ
        dsimp
        simp only [‚Üê NatTrans.comp_app, ‚Üê G.map_comp, NatTrans.naturality] }

end

section

variable (F : C‚ÇÅ ‚•§ C‚ÇÇ‚ÇÉ ‚•§ C‚ÇÑ) (G‚ÇÇ‚ÇÉ : C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÇ‚ÇÉ)

/-- Auxiliary definition for `bifunctorComp‚ÇÇ‚ÇÉ`. -/
@[simps]
def bifunctorComp‚ÇÇ‚ÇÉObj (X‚ÇÅ : C‚ÇÅ) : C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ where
  obj X‚ÇÇ :=
    { obj := fun X‚ÇÉ => (F.obj X‚ÇÅ).obj ((G‚ÇÇ‚ÇÉ.obj X‚ÇÇ).obj X‚ÇÉ)
      map := fun {X‚ÇÉ Y‚ÇÉ} œÜ => (F.obj X‚ÇÅ).map ((G‚ÇÇ‚ÇÉ.obj X‚ÇÇ).map œÜ) }
  map {X‚ÇÇ Y‚ÇÇ} œÜ :=
    { app := fun X‚ÇÉ => (F.obj X‚ÇÅ).map ((G‚ÇÇ‚ÇÉ.map œÜ).app X‚ÇÉ)
      naturality := fun {X‚ÇÉ Y‚ÇÉ} œÜ => by
        dsimp
        simp only [‚Üê Functor.map_comp, NatTrans.naturality] }

/-- Given two bifunctors `F : C‚ÇÅ ‚•§ C‚ÇÇ‚ÇÉ ‚•§ C‚ÇÑ` and `G‚ÇÇ‚ÇÉ : C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ`, this is
the trifunctor `C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ` obtained by composition. -/
@[simps]
def bifunctorComp‚ÇÇ‚ÇÉ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ where
  obj X‚ÇÅ := bifunctorComp‚ÇÇ‚ÇÉObj F G‚ÇÇ‚ÇÉ X‚ÇÅ
  map {X‚ÇÅ Y‚ÇÅ} œÜ :=
    { app := fun X‚ÇÇ =>
        { app := fun X‚ÇÉ => (F.map œÜ).app ((G‚ÇÇ‚ÇÉ.obj X‚ÇÇ).obj X‚ÇÉ) } }

end


/-- The action on objects of a trifunctor. -/
def Functor.obj‚ÇÉ (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ) (X : C‚ÇÅ) (Y : C‚ÇÇ) (Z : C‚ÇÉ) : C‚ÇÑ :=
  ((F.obj X).obj Y).obj Z

/-- The component of a morphism of trifunctors at three objects. -/
def NatTrans.app‚ÇÉ {F G : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ} (Œ± : NatTrans F G)
    (X : C‚ÇÅ) (Y : C‚ÇÇ) (Z : C‚ÇÉ) : F.obj‚ÇÉ X Y Z ‚ü∂ G.obj‚ÇÉ X Y Z :=
  ((Œ±.app X).app Y).app Z

/-- The action on morphisms of a trifunctor. -/
def Functor.map‚ÇÉ (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ) {X X' : C‚ÇÅ} {Y Y' : C‚ÇÇ} {Z Z' : C‚ÇÉ}
    (f : X ‚ü∂ X') (g : Y ‚ü∂ Y') (h : Z ‚ü∂ Z') :
    F.obj‚ÇÉ X Y Z ‚ü∂ F.obj‚ÇÉ X' Y' Z' :=
  (F.map f).app‚ÇÇ Y Z ‚â´ (F.obj X').map‚ÇÇ g h

-- create projection simp lemmas even though this isn't a `{ .. }`.
/-- The equivalence of trifunctor categories given by currying/uncurrying. -/
@[simps!]
def currying‚ÇÉ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ ‚âå C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ C‚ÇÑ :=
  .trans (@currying C‚ÇÅ _ C‚ÇÇ _ (C‚ÇÉ ‚•§ C‚ÇÑ) _)
  $ .trans (@currying (C‚ÇÅ √ó C‚ÇÇ) _ C‚ÇÉ _ C‚ÇÑ _)
  $ (prod.associativity C‚ÇÅ C‚ÇÇ C‚ÇÉ).congrLeft (E := C‚ÇÑ)
-- why is this so slow???

/-- The ternary uncurrying functor, taking a functor `C‚ÇÅ ‚•§ (C‚ÇÇ ‚•§ (C‚ÇÉ ‚•§ C‚ÇÑ))` and
producing a functor `(C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ) ‚•§ C‚ÇÑ`.-/
@[simps!] def uncurry‚ÇÉ : (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ) ‚•§ C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ C‚ÇÑ := currying‚ÇÉ.functor

/-- The ternary currying functor, taking a functor `(C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ) ‚•§ C‚ÇÑ` and
producing a functor `C‚ÇÅ ‚•§ (C‚ÇÇ ‚•§ (C‚ÇÉ ‚•§ C‚ÇÑ))`.
-/
@[simps!] def curry‚ÇÉ : (C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ C‚ÇÑ) ‚•§ C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ := currying‚ÇÉ.inverse

lemma uncurry‚ÇÉ_obj_obj_eq_uncurry‚ÇÉ_obj‚ÇÉ (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ) :
    (uncurry‚ÇÉ.obj F).obj = F.obj‚ÇÉ.uncurry‚ÇÉ := rfl

lemma uncurry‚ÇÉ_obj_map_eq_uncurry‚ÇÉ_map‚ÇÉ (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ) (X Y : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ) :
    ((uncurry‚ÇÉ.obj F).map : (X ‚ü∂ Y) ‚Üí _) = F.map‚ÇÉ.uncurry‚ÇÉ :=
  funext $ fun _ => Category.assoc _ _ _

lemma uncurry‚ÇÉ_obj_map_apply_eq_uncurry‚ÇÉ_map‚ÇÉ_apply (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ)
    {X Y} (f : X ‚ü∂ Y) :
    (uncurry‚ÇÉ.obj F).map f = F.map‚ÇÉ.uncurry‚ÇÉ f :=
  congrFun (uncurry‚ÇÉ_obj_map_eq_uncurry‚ÇÉ_map‚ÇÉ F X Y) f

lemma curry‚ÇÉ_obj_obj‚ÇÉ_eq_curry‚ÇÉ_obj (F : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ C‚ÇÑ) :
    (curry‚ÇÉ.obj F).obj‚ÇÉ = F.obj.curry‚ÇÉ := rfl

lemma curry‚ÇÉ_obj_map‚ÇÉ_eq_curry‚ÇÉ_map (F : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ C‚ÇÑ) (X X' Y Y' Z Z') :
    (curry‚ÇÉ.obj F).map‚ÇÉ
    = (F.map (X := (X, Y, Z)) (Y := (X', Y', Z'))).curry‚ÇÉ :=
  funext‚ÇÉ $ fun _ _ _ =>
    Eq.trans (congrArg (_ ‚â´ .) (F.map_comp _ _).symm)
    $ Eq.trans (F.map_comp _ _).symm $ congrArg _
    $ congrArg‚ÇÇ _ (Eq.trans (congrArg _ (Category.comp_id _)) (Category.comp_id _))
    $ congrArg‚ÇÇ _ (Eq.trans (Category.id_comp _) (Category.comp_id _))
                  (Eq.trans (Category.id_comp _) (Category.id_comp _))

lemma curry‚ÇÉ_obj_map‚ÇÉ_apply_eq_curry‚ÇÉ_map_apply (F : C‚ÇÅ √ó C‚ÇÇ √ó C‚ÇÉ ‚•§ C‚ÇÑ)
    {X X' Y Y' Z Z'} (f : X ‚ü∂ X') (g : Y ‚ü∂ Y') (h : Z ‚ü∂ Z') :
    (curry‚ÇÉ.obj F).map‚ÇÉ f g h
    = (F.map (X := (X, Y, Z)) (Y := (X', Y', Z'))).curry‚ÇÉ f g h :=
  congrFun‚ÇÉ (curry‚ÇÉ_obj_map‚ÇÉ_eq_curry‚ÇÉ_map F X X' Y Y' Z Z') f g h

@[simp]
lemma Functor.map‚ÇÉ_id‚ÇÇ_id‚ÇÉ (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ) {X X'} (f : X ‚ü∂ X') (Y : C‚ÇÇ)
    (Z : C‚ÇÉ) : F.map‚ÇÉ f (ùüô Y) (ùüô Z) = (F.map f).app‚ÇÇ Y Z := by
  simp only [map‚ÇÉ, map‚ÇÇ, NatTrans.app‚ÇÇ, map_id, NatTrans.id_app]
  exact Eq.trans (congrArg _ (Category.comp_id _)) (Category.comp_id _)

@[simp]
lemma Functor.map‚ÇÉ_id‚ÇÉ (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ) (X : C‚ÇÅ) (Y : C‚ÇÇ) (Z : C‚ÇÉ) :
    F.map‚ÇÉ (ùüô X) (ùüô Y) (ùüô Z) = ùüô (F.obj‚ÇÉ X Y Z) :=
  Eq.trans (map‚ÇÉ_id‚ÇÇ_id‚ÇÉ F _ Y Z) (congrArg (NatTrans.app‚ÇÇ . Y Z) (F.map_id _))

@[simp]
lemma Functor.map‚ÇÉ_comp‚ÇÉ (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ ‚•§ C‚ÇÑ) {X X' X'' Y Y' Y'' Z Z' Z''}
    (f : X ‚ü∂ X')    (g : Y ‚ü∂ Y')    (h : Z ‚ü∂ Z')
    (f' : X' ‚ü∂ X'') (g' : Y' ‚ü∂ Y'') (h' : Z' ‚ü∂ Z'') :
    F.map‚ÇÉ (f ‚â´ f') (g ‚â´ g') (h ‚â´ h') =
    F.map‚ÇÉ f g h ‚â´ F.map‚ÇÉ f' g' h' :=
  let p  : (X,  Y,  Z)  ‚ü∂ (X',  Y',  Z')  := (f,  g,  h)
  let p' : (X', Y', Z') ‚ü∂ (X'', Y'', Z'') := (f', g', h')
  Eq.trans (uncurry‚ÇÉ_obj_map_apply_eq_uncurry‚ÇÉ_map‚ÇÉ_apply F (p ‚â´ p')).symm
  $ Eq.trans (Functor.map_comp _ p p')
  $ congrArg‚ÇÇ _ (uncurry‚ÇÉ_obj_map_apply_eq_uncurry‚ÇÉ_map‚ÇÉ_apply F p)
                (uncurry‚ÇÉ_obj_map_apply_eq_uncurry‚ÇÉ_map‚ÇÉ_apply F p')

--TODO: Postcomposition, precomposition with ‚ÇÅ, ‚ÇÇ, ‚ÇÉ, and 1+2 = 3 or 2+1 = 3
-- operadic composition

end CategoryTheory
