import Mathlib.CategoryTheory.Functor.Category
import Mathlib.CategoryTheory.Types
import Mathlib.CategoryTheory.Yoneda
import Mathlib.CategoryTheory.Enriched.Basic
import Mathlib.CategoryTheory.ChosenFiniteProducts.FunctorCategory
import Mathlib.CategoryTheory.Monoidal.Types.Basic
import Mathlib.CategoryTheory.Monoidal.OfChosenFiniteProducts.Basic

universe w v' v u u'

namespace CategoryTheory.Functor

variable {C : Type u} [Category.{v} C] {D : Type u'} [Category.{v'} D]

variable (F G : C ‚•§ D)

-- `A ‚äó F ‚ü∂ G`
@[ext]
structure HomObj (A : C ‚•§ Type w) where
  app (X : C) (a : A.obj X) : F.obj X ‚ü∂ G.obj X
  naturality {X Y : C} (œÜ : X ‚ü∂ Y) (a : A.obj X) :
    F.map œÜ ‚â´ app Y (A.map œÜ a) = app X a ‚â´ G.map œÜ := by aesop_cat

namespace HomObj

attribute [reassoc (attr := simp)] naturality

variable {F G} in
lemma congr_app {A : C ‚•§ Type w} {f g : HomObj F G A} (h : f = g) (X : C)
    (a : A.obj X) : f.app X a = g.app X a := by subst h; rfl

@[simps]
def id (A : C ‚•§ Type w) : HomObj F F A where
  app _ _ := ùüô _

variable {F G}

@[simps]
def comp {M : C ‚•§ D} {A : C ‚•§ Type w} (f : HomObj F G A) (g : HomObj G M A) : HomObj F M A where
  app X a := f.app X a ‚â´ g.app X a

variable {A : C ‚•§ Type w} (x : HomObj F G A)

@[simps]
def map {A' : C ‚•§ Type w} (f : A' ‚ü∂ A) : HomObj F G A' where
  app Œî a := x.app Œî (f.app Œî a)
  naturality {Œî Œî'} œÜ a := by
    dsimp
    rw [‚Üê x.naturality œÜ (f.app Œî a), FunctorToTypes.naturality _ _ f œÜ a]

end HomObj

-- the functor which sends `A : C ‚•§ Type w` to the type `A ‚äó F ‚ü∂ G`
@[simps!]
def homFunctor : (C ‚•§ Type w)·µí·µñ ‚•§ Type max w v' u where
  obj A := HomObj F G A.unop
  map {A A'} f x := x.map f.unop

def functorHom (F G : C ‚•§ D) : C ‚•§ Type max v' v u := coyoneda.rightOp ‚ãô homFunctor.{v} F G

variable {F G} in
@[ext]
lemma functorHom_ext {X : C} {x y : (functorHom F G).obj X}
    (h : ‚àÄ (Y : C) (f : X ‚ü∂ Y), x.app Y f = y.app Y f) : x = y :=
  HomObj.ext _ _ (by ext; apply h)

def NatTransEquiv : (functorHom F G).sections ‚âÉ (F ‚ü∂ G) where
  toFun := fun ‚ü®u, hu‚ü© ‚Ü¶
    { app := fun X ‚Ü¶ (u X).app X (ùüô _)
      naturality := fun X Y œÜ ‚Ü¶ by
        dsimp
        rw [‚Üê HomObj.congr_app (hu œÜ) Y (ùüô Y)]
        rw [‚Üê (u X).naturality œÜ (ùüô _)]
        simp [functorHom]
    }
  invFun := fun f ‚Ü¶ ‚ü®fun X ‚Ü¶ { app := fun Y _ ‚Ü¶ f.app Y }, by intro _ _ _; ext; aesop‚ü©
  left_inv := by
    simp [sections]
    rintro ‚ü®u, hu‚ü©
    ext X Y œÜ
    rw [‚Üê HomObj.congr_app (hu œÜ) Y (ùüô Y)]
    dsimp [functorHom]
    aesop
  right_inv _ := by aesop

def HomEquiv (A : C ‚•§ Type max u v v') :
    (A ‚ü∂ functorHom F G) ‚âÉ HomObj F G A where
  toFun œÜ :=
    { app := fun X a => (œÜ.app X a).app X (ùüô _)
      naturality := fun {X Y} f a => by
        erw [‚Üê (œÜ.app X a).naturality f (ùüô _)]
        have := HomObj.congr_app (congr_fun (œÜ.naturality f) a) Y (ùüô _)
        dsimp [functorHom] at this
        aesop }
  invFun x :=
    { app := fun X a =>
        { app := fun Y f => x.app Y (A.map f a)
          naturality := fun {Y Z} œÜ f => by
            rw [‚Üê x.naturality œÜ (A.map f a), ‚Üê FunctorToTypes.map_comp_apply]
            rfl }
      naturality := fun X Y f => by
        dsimp
        ext a Z (œÜ : Y ‚ü∂ Z)
        dsimp
        rw [‚Üê FunctorToTypes.map_comp_apply]
        rfl }
  left_inv œÜ := by
    ext X a Y f
    exact (HomObj.congr_app (congr_fun (œÜ.naturality f) a) Y (ùüô _)).trans
      (congr_arg ((œÜ.app X a).app Y) (by simp))
  right_inv x := by
    ext X a
    dsimp
    erw [FunctorToTypes.map_id_apply _ _]

@[simp]
lemma _root_.Functor.comp_app_apply {A A' A'' : C ‚•§ Type v} (f : A ‚ü∂ A') (g : A' ‚ü∂ A'')
    {X : C} (x : A.obj X) :
    (f ‚â´ g).app X x = g.app X (f.app X x) := rfl

@[simp]
lemma _root_.Functor.id_app_apply (A : C ‚•§ Type v) {X : C} (x : A.obj X) :
    NatTrans.app (ùüô A) X x = x := rfl

open MonoidalCategory

def prodhomequiv (F G H : C ‚•§ Type max u v v') : (F.HomObj H G) ‚âÉ (F ‚äó G ‚ü∂ H) where
  toFun a := ‚ü®fun X ‚ü®x, y‚ü© ‚Ü¶ a.app X y x, fun X Y f ‚Ü¶ by
    ext ‚ü®x, y‚ü©
    erw [congr_fun (a.naturality f y) x]
    rfl ‚ü©
  invFun a := ‚ü®fun X y x ‚Ü¶ a.app X (x, y), fun œÜ y ‚Ü¶ by
    ext x
    erw [congr_fun (a.naturality œÜ) (x, y)]
    rfl ‚ü©
  left_inv a := by aesop
  right_inv a := by aesop

def aux (P : C ‚•§ D) : ùüô_ (C ‚•§ Type (max v' v u)) ‚ü∂ P.functorHom P where
  app X _ := ((NatTransEquiv P P).symm (ùüô _)).1 X

def aux' (K L M : C ‚•§ D) : K.functorHom L ‚äó L.functorHom M ‚ü∂ K.functorHom M where
  app := fun X ‚ü®f, g‚ü© => f.comp g

@[simp]
lemma auxlemma (K L : C ‚•§ D) (X Y : C) (a : (K.functorHom L).obj X) (œÜ : X ‚ü∂ Y) :
    ((K.aux ‚ñ∑ K.functorHom L).app X (PUnit.unit, a)).1.app Y œÜ = (ùüô _) := rfl

@[simp]
lemma auxlemma' (K L : C ‚•§ D) (X Y : C) (a : (K.functorHom L).obj X) (œÜ : X ‚ü∂ Y) :
    ((K.aux ‚ñ∑ K.functorHom L).app X (PUnit.unit, a)).2.app Y œÜ = a.app Y œÜ := rfl

@[simp]
lemma auxlemma'' (K L: C ‚•§ D) (X Y : C) (a : (K.functorHom L).obj X) (œÜ : X ‚ü∂ Y) :
    ((K.functorHom L ‚óÅ L.aux).app X (a, PUnit.unit)).2.app Y œÜ = ùüô _ := rfl

@[simp]
lemma auxlemma''' (K L: C ‚•§ D) (X Y : C) (a : (K.functorHom L).obj X) (œÜ : X ‚ü∂ Y) :
    ((K.functorHom L ‚óÅ L.aux).app X (a, PUnit.unit)).1.app Y œÜ = a.app Y œÜ := rfl

@[simp]
lemma whiskerLeft_app_apply (K L M N : C ‚•§ D) (g : L.functorHom M ‚äó M.functorHom N ‚ü∂ L.functorHom N)
    {X : C} (a : (K.functorHom L ‚äó L.functorHom M ‚äó M.functorHom N).obj X) :
    (K.functorHom L ‚óÅ g).app X a = ‚ü®a.1, g.app X a.2‚ü© := rfl

@[simp]
lemma whiskerRight_app_apply (K L M N : C ‚•§ D) (f : K.functorHom L ‚äó L.functorHom M ‚ü∂ K.functorHom M)
    {X : C} (a : ((K.functorHom L ‚äó L.functorHom M) ‚äó M.functorHom N).obj X) :
    (f ‚ñ∑  M.functorHom N).app X a = ‚ü®f.app X a.1, a.2‚ü© := rfl

@[simp]
lemma associator_inv_app_apply (K L M N : C ‚•§ D) {X : C}
    (x : ((K.functorHom L) ‚äó (L.functorHom M) ‚äó (M.functorHom N)).obj X) :
    (Œ±_ ((K.functorHom L).obj X) ((L.functorHom M).obj X) ((M.functorHom N).obj X)).inv x =
    ‚ü®‚ü®x.1, x.2.1‚ü©, x.2.2‚ü© := rfl

@[simp]
lemma associator_hom_app_apply (K L M N : C ‚•§ D) {X : C}
    (x : ( ((K.functorHom L) ‚äó (L.functorHom M)) ‚äó (M.functorHom N)).obj X) :
    (Œ±_ ((K.functorHom L).obj X) ((L.functorHom M).obj X) ((M.functorHom N).obj X)).hom x =
    ‚ü®x.1.1, x.1.2, x.2‚ü© := rfl

noncomputable instance : EnrichedCategory (C ‚•§ Type max v' v u) (C ‚•§ D) where
  Hom := functorHom
  id := aux
  comp := aux'
  id_comp K L := by
    ext X a Y œÜ
    change (HomObj.comp ((K.aux ‚ñ∑ K.functorHom L).app X (PUnit.unit, a)).1 ((K.aux ‚ñ∑ K.functorHom L).app X (PUnit.unit, a)).2).app Y œÜ = _
    aesop
  comp_id K L := by
    ext X a Y œÜ
    change (HomObj.comp ((K.functorHom L ‚óÅ L.aux).app X (a, PUnit.unit)).1 ((K.functorHom L ‚óÅ L.aux).app X (a, PUnit.unit)).2).app Y œÜ = _
    aesop
  assoc K L M N := by
    ext X a Y œÜ
    dsimp only [aux']
    aesop

end Functor
