import Mathlib.CategoryTheory.ConcreteCategory.Operation
import Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts

namespace CategoryTheory

open Limits

variable {C : Type _} [Category C]

namespace Internal

def ObjOperation‚ÇÄ [HasTerminal C] (X : C) := ‚ä§_ C ‚ü∂ X

def ObjOperation‚ÇÅ (X : C) := X ‚ü∂ X

def ObjOperation‚ÇÇ (X : C) [HasBinaryProduct X X] := X ‚®Ø X ‚ü∂ X

def ObjOperation‚ÇÉ (X : C) [HasBinaryProduct X X] [HasBinaryProduct X (X ‚®Ø X)] :=
  X ‚®Ø X ‚®Ø X ‚ü∂ X

namespace ObjOperation‚ÇÄ

noncomputable def yonedaEquiv [HasTerminal C] (X : C) :
  ObjOperation‚ÇÄ X ‚âÉ Types.functorOperation‚ÇÄ (yoneda.obj X) where
  toFun f :=
  { app := fun T _ => terminal.from _ ‚â´ f
    naturality := fun _ _ f => by
      ext
      dsimp
      rw [‚Üê Category.assoc]
      congr
      apply Subsingleton.elim }
  invFun œÜ := œÜ.app (Opposite.op (‚ä§_ C)) PUnit.unit
  left_inv := fun f => by
    dsimp
    simp only [Subsingleton.elim (terminal.from (‚ä§_ C)) (ùüô _), Category.id_comp]
  right_inv := fun œÜ => NatTrans.ext _ _ (by
    ext T ‚ü®‚ü©
    exact (congr_fun (œÜ.naturality (terminal.from T.unop).op) PUnit.unit).symm)

end ObjOperation‚ÇÄ

namespace ObjOperation‚ÇÅ

def yonedaEquiv (X : C) :
  ObjOperation‚ÇÅ X ‚âÉ Types.functorOperation‚ÇÅ (yoneda.obj X) :=
  Equiv.symm CategoryTheory.yonedaEquiv

end ObjOperation‚ÇÅ

namespace ObjOperation‚ÇÇ

noncomputable def yonedaEquiv' (X Y Z : C) [HasBinaryProduct X Y] :
  (X ‚®Ø Y ‚ü∂ Z) ‚âÉ (Types.functorConcat (yoneda.obj X) (yoneda.obj Y) ‚ü∂ yoneda.obj Z ) where
  toFun f :=
  { app := fun T ‚ü®x, y‚ü© => prod.lift x y ‚â´ f
    naturality := fun _ _ f => by
      ext
      dsimp
      simp only [prod.comp_lift_assoc] }
  invFun œÜ := œÜ.app (Opposite.op (X ‚®Ø Y)) ‚ü®prod.fst, prod.snd‚ü©
  left_inv := by aesop_cat
  right_inv := fun œÜ => by
    ext Z ‚ü®x, y‚ü©
    apply (congr_fun (œÜ.naturality (prod.lift x y).op) ‚ü®prod.fst, prod.snd‚ü©).symm.trans
    dsimp
    simp

noncomputable def yonedaEquiv (X : C) [HasBinaryProduct X X] :
  ObjOperation‚ÇÇ X ‚âÉ Types.functorOperation‚ÇÇ (yoneda.obj X) :=
  yonedaEquiv' X X X

end ObjOperation‚ÇÇ

namespace ObjOperation‚ÇÉ

noncomputable def yonedaEquiv' (X‚ÇÅ X‚ÇÇ X‚ÇÉ Y : C) [HasBinaryProduct X‚ÇÇ X‚ÇÉ]
  [HasBinaryProduct X‚ÇÅ (X‚ÇÇ ‚®Ø X‚ÇÉ)] :
  (X‚ÇÅ ‚®Ø (X‚ÇÇ ‚®Ø X‚ÇÉ) ‚ü∂ Y) ‚âÉ
    (Types.functorConcat‚ÇÉ (yoneda.obj X‚ÇÅ) (yoneda.obj X‚ÇÇ) (yoneda.obj X‚ÇÉ) ‚ü∂ yoneda.obj Z ) :=
    sorry

noncomputable def yonedaEquiv (X : C) [HasBinaryProduct X X] [HasBinaryProduct X (X ‚®Ø X)] :
  ObjOperation‚ÇÉ X ‚âÉ Types.functorOperation‚ÇÉ (yoneda.obj X) :=
  yonedaEquiv' X X X X

end ObjOperation‚ÇÉ

end Internal

end CategoryTheory
