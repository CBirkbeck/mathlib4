import Mathlib.CategoryTheory.GaloisCategories.Basic
import Mathlib.Data.Finite.Card
import Mathlib.Data.Finite.Basic

universe u v w v‚ÇÅ u‚ÇÅ u‚ÇÇ

open CategoryTheory Limits Functor

namespace Galois

variable {C : Type u} [Category.{v, u} C] (F : C ‚•§ FintypeCat.{w}) [PreGaloisCategory C]
  [FibreFunctor F]

example (X : C) : ‚àÉ (Œπ : Type) (f : Œπ ‚Üí C) (t : ColimitCocone (Discrete.functor f)),
    (‚àÄ i, ConnectedObject (f i)) ‚àß Finite Œπ ‚àß X = t.cocone.pt := by
  revert X
  have hp : ‚àÄ (n : ‚Ñï) (X : C), n = Nat.card (F.obj X) ‚Üí
    ‚àÉ (Œπ : Type) (f : Œπ ‚Üí C) (t : ColimitCocone (Discrete.functor f)),
    (‚àÄ i, ConnectedObject (f i)) ‚àß Finite Œπ ‚àß X = t.cocone.pt
  intro n
  induction' n using Nat.strongRecOn with n hi
  intro X hn
  by_cases ConnectedObject X
  let Œπ : Type := PUnit
  let f : Œπ ‚Üí C := fun _ ‚Ü¶ X
  use Œπ
  use f
  let t : ColimitCocone (Discrete.functor f) := {
    cocone := constantCofan X
    isColimit := constantCofanIsColimit X
  }
  use t
  simp only [and_true, forall_const]
  constructor
  assumption
  constructor
  infer_instance
  rfl
  by_cases (IsInitial X ‚Üí False)
  swap
  simp only [not_forall] at h
  obtain ‚ü®hin‚ü© := h
  let Œπ : Type := PEmpty
  let f : Œπ ‚Üí C := fun _ ‚Ü¶ X
  use Œπ
  use f
  let t : ColimitCocone (empty C) := {
      cocone := asEmptyCocone X
      isColimit := hin
  }
  rw [‚Üêempty_ext' (empty C) (Discrete.functor f)]
  use t
  simp
  infer_instance
  have : ¬¨ (‚àÄ (Y : C) (i : Y ‚ü∂ X) [Mono i], (IsInitial Y ‚Üí False) ‚Üí IsIso i) := by
    by_contra a
    have : ConnectedObject X := ‚ü®h, a‚ü©
    contradiction
  simp at this
  choose Y hnotinitial v hvmono hvnoiso using this
  have hn0 : Nat.card (F.obj Y) ‚â† 0 := by
    intro hzero
    have h : Nonempty (IsInitial Y) := by
      rw [(initialIffFibreEmpty Y : Nonempty (IsInitial Y) ‚Üî IsEmpty (F.obj Y))]
      exact Finite.card_eq_zero_iff.mp hzero
    exact Nonempty.elim h hnotinitial
  choose Z u x using PreGaloisCategory.monoInducesIsoOnDirectSummand v
  let c := Classical.choice x
  let t : ColimitCocone (pair Y Z) := { cocone := BinaryCofan.mk v u, isColimit := c }
  have hn1 : Nat.card (F.obj Y) < n := by
    rw [hn]
    exact ltCardFibre_of_mono_of_notIso v hvnoiso
  have i : X ‚âÖ Y ‚®ø Z := (colimit.isoColimitCocone t).symm
  have hnn : Nat.card (F.obj X) = Nat.card (F.obj Y) + Nat.card (F.obj Z) := by
    rw [cardFibre_eq_of_iso i]
    exact cardFibre_eq_sum_of_coprod Y Z
  have hn2 : Nat.card (F.obj Z) < n := by
    rw [hn, hnn]
    simp only [lt_add_iff_pos_left]
    have : Nat.card (F.obj Y) ‚â† 0 := hn0
    exact Nat.pos_of_ne_zero hn0
  let ‚ü®Œπ‚ÇÅ, f‚ÇÅ, t‚ÇÅ, hc‚ÇÅ, hf‚ÇÅ, he‚ÇÅ‚ü© := hi (Nat.card (F.obj Y)) hn1 Y rfl
  let ‚ü®Œπ‚ÇÇ, f‚ÇÇ, t‚ÇÇ, hc‚ÇÇ, hf‚ÇÇ, he‚ÇÇ‚ü© := hi (Nat.card (F.obj Z)) hn2 Z rfl
  use Œπ‚ÇÅ ‚äï Œπ‚ÇÇ
  use Sum.elim f‚ÇÅ f‚ÇÇ
  let heq : pair Y Z ‚âÖ pair t‚ÇÅ.cocone.pt t‚ÇÇ.cocone.pt := by
    apply Discrete.natIso
    intro ‚ü®i‚ü©
    match i with
    | WalkingPair.left =>
        show Y ‚âÖ t‚ÇÅ.cocone.pt
        exact eqToIso he‚ÇÅ
    | WalkingPair.right =>
        show Z ‚âÖ t‚ÇÇ.cocone.pt
        exact eqToIso he‚ÇÇ
  let t' : ColimitCocone (pair t‚ÇÅ.cocone.pt t‚ÇÇ.cocone.pt) := {
    cocone := (Cocones.precompose heq.inv).obj t.cocone
    isColimit := (IsColimit.precomposeInvEquiv heq t.cocone).invFun t.isColimit
  }
  use combCofanPairColimitCocone t'
  simp
  constructor
  constructor
  assumption
  assumption
  constructor
  infer_instance
  rfl
  intro X
  exact hp (Nat.card (F.obj X)) X rfl

noncomputable def blub2 (X : C) :
    (Œπ : Type) √ó (Œπ ‚Üí C) := by
  revert X
  let hp : ‚àÄ (n : ‚Ñï) (X : C), n = Nat.card (F.obj X) ‚Üí (Œπ : Type) √ó (Œπ ‚Üí C)
  intro n
  induction' n using Nat.strongRecOn with n hi
  intro X hn
  by_cases ConnectedObject X
  let Œπ : Type := PUnit
  let f : Œπ ‚Üí C := fun _ ‚Ü¶ X
  exact ‚ü®Œπ, f‚ü©
  by_cases (IsInitial X ‚Üí False)
  swap
  simp only [not_forall] at h
  let Œπ : Type := PEmpty
  let f : Œπ ‚Üí C := fun _ ‚Ü¶ X
  exact ‚ü®Œπ, f‚ü©
  have : ¬¨ (‚àÄ (Y : C) (i : Y ‚ü∂ X) [Mono i], (IsInitial Y ‚Üí False) ‚Üí IsIso i) := by
    by_contra a
    have : ConnectedObject X := ‚ü®h, a‚ü©
    contradiction
  simp at this
  choose Y hnotinitial v hvmono hvnoiso using this
  have hn0 : Nat.card (F.obj Y) ‚â† 0 := by
    intro hzero
    have h : Nonempty (IsInitial Y) := by
      rw [(initialIffFibreEmpty Y : Nonempty (IsInitial Y) ‚Üî IsEmpty (F.obj Y))]
      exact Finite.card_eq_zero_iff.mp hzero
    exact Nonempty.elim h hnotinitial
  choose Z u x using PreGaloisCategory.monoInducesIsoOnDirectSummand v
  let c := Classical.choice x
  let t : ColimitCocone (pair Y Z) := { cocone := BinaryCofan.mk v u, isColimit := c }
  have hn1 : Nat.card (F.obj Y) < n := by
    rw [hn]
    exact ltCardFibre_of_mono_of_notIso v hvnoiso
  have i : X ‚âÖ Y ‚®ø Z := (colimit.isoColimitCocone t).symm
  have hnn : Nat.card (F.obj X) = Nat.card (F.obj Y) + Nat.card (F.obj Z) := by
    rw [cardFibre_eq_of_iso i]
    exact cardFibre_eq_sum_of_coprod Y Z
  have hn2 : Nat.card (F.obj Z) < n := by
    rw [hn, hnn]
    simp only [lt_add_iff_pos_left]
    have : Nat.card (F.obj Y) ‚â† 0 := hn0
    exact Nat.pos_of_ne_zero hn0
  let ‚ü®Œπ‚ÇÅ, f‚ÇÅ‚ü© := hi (Nat.card (F.obj Y)) hn1 Y rfl
  obtain ‚ü®Œπ‚ÇÇ, f‚ÇÇ‚ü© := hi (Nat.card (F.obj Z)) hn2 Z rfl
  let Œπ := Sum Œπ‚ÇÅ Œπ‚ÇÇ
  let f : Œπ ‚Üí C := Sum.elim f‚ÇÅ f‚ÇÇ
  exact ‚ü®Œπ, f‚ü©
  intro X
  exact hp (Nat.card (F.obj X)) X rfl

noncomputable def components.index (X : C) : Type
  := (blub2 F X).1

noncomputable def components.map (X : C) : components.index F X ‚Üí C
  := (blub2 F X).2

noncomputable instance (X : C) : Finite (components.index F X) := by
  admit

example (X : C) (i : components.index F X) : ConnectedObject (components.map F X i) := by
  admit

noncomputable def components.iso (X : C) : X ‚âÖ ‚àê components.map F X := by
  admit

noncomputable def components.isoObj (X : C) :
    F.obj X ‚âÖ ‚àê fun j ‚Ü¶ F.obj (components.map F X j) := by
  admit

def blub (X : C) : (Œπ : Type) √ó (f : Œπ ‚Üí C) √ó (ColimitCocone (Discrete.functor f)) := by
  revert X
  let : ‚àÄ (n : ‚Ñï) (X : C), n = Nat.card (F.obj X) ‚Üí (Œπ : Type) √ó (f : Œπ ‚Üí C) √ó (ColimitCocone (Discrete.functor f))
  intro n
  induction' n using Nat.strongRecOn with n hi
  intro X hn
  by_cases ConnectedObject X
  let Œπ : Type := PUnit
  let f : Œπ ‚Üí C := fun _ ‚Ü¶ X
  let t : ColimitCocone (Discrete.functor f) := colimitCoconeOfUnique f
  exact ‚ü®Œπ, f, t‚ü©
  by_cases (IsInitial X ‚Üí False)
  swap
  simp only [not_forall] at h
  choose hin _ using h
  let Œπ : Type := PEmpty
  let f : Œπ ‚Üí C := fun _ ‚Ü¶ X
  let t : ColimitCocone (Discrete.functor f) := getColimitCocone (Discrete.functor f)
  exact ‚ü®Œπ, f, t‚ü©
  have : ¬¨ (‚àÄ (Y : C) (i : Y ‚ü∂ X) [Mono i], (IsInitial Y ‚Üí False) ‚Üí IsIso i) := sorry
  simp at this
  choose Y hnotinitial v hvmono hvnoiso using this
  have : Function.Injective (F.map v) := (monomorphismIffInducesInjective v).mp hvmono
  have : Nat.card (F.obj Y) ‚â† 0 := sorry
  choose Z u x using PreGaloisCategory.monoInducesIsoOnDirectSummand v
  have hn1 : Nat.card (F.obj Y) < n := sorry
  have hn2 : Nat.card (F.obj Z) < n := sorry
  let ‚ü®Œπ‚ÇÅ, f‚ÇÅ, t‚ÇÅ‚ü© := hi (Nat.card (F.obj Y)) hn1 Y rfl
  obtain ‚ü®Œπ‚ÇÇ, f‚ÇÇ, t‚ÇÇ‚ü© := hi (Nat.card (F.obj Z)) hn2 Z rfl
  let Œπ := Sum Œπ‚ÇÅ Œπ‚ÇÇ
  let f : Œπ ‚Üí C := Sum.elim f‚ÇÅ f‚ÇÇ
  let c : Cocone (Discrete.functor f) := {
    pt := X
    Œπ := by
      apply Discrete.natTrans
      rintro ‚ü®i‚ü©
      cases i with
      | inl j =>
          let bla := t‚ÇÅ.cocone.Œπ.app ‚ü®j‚ü©
          simp at bla
          exact t‚ÇÅ.cocone.Œπ.app ‚ü®j‚ü©
      | inr j => exact t‚ÇÅ.cocone.Œπ.app ‚ü®j‚ü©
  }
  --let t : ColimitCocone (Discrete.functor f) where
  --  cocone := c
  --  isColimit := sorry
  admit
  admit

example (X : C) [ConnectedObject X] : ‚àÉ (Œπ : Type) (D : Discrete Œπ ‚•§ C) (t : Cocone D) (_ : IsColimit t),
    Finite Œπ ‚àß (‚àÄ i, ConnectedObject (D.obj i)) ‚àß t.pt = X := by
  use PUnit
  use fromPUnit X
  use {
    pt := X
    Œπ := { app := fun _ ‚Ü¶ ùüô X }
  }
  use { desc := fun s ‚Ü¶ s.Œπ.app ‚ü®PUnit.unit‚ü© }
  simp only [const_obj_obj, forall_const, and_true]
  constructor
  exact Finite.of_fintype PUnit.{1}
  assumption

def bla1 (X : C) : Type := by
  revert X
  let : ‚àÄ (n : ‚Ñï) (X : C), n = Nat.card (F.obj X) ‚Üí Type
  intro n
  induction' n using Nat.strongRecOn with n hi
  intro X hn
  by_cases ConnectedObject X
  exact PUnit

def bla2 (X : C) : bla1 X ‚Üí C := sorry

instance (X : C) : Finite (bla1 X) := sorry

--example (X : C) : ‚àÉ (Œπ : Type) (_ : Finite Œπ) (f : Œπ ‚Üí C) (_ : X ‚âÖ ‚àê f), ‚àÄ i, ConnectedObject (f i) := by
--  revert X
--  have : ‚àÄ (n : ‚Ñï) (X : C), n = Nat.card (F.obj X) ‚Üí ‚àÉ (Œπ : Type) (_ : Finite Œπ) (f : Œπ ‚Üí C) (_ : X ‚âÖ ‚àê f),
--    ‚àÄ i, ConnectedObject (f i)

--lemma sumOfConnectedComponents : (X : C) ‚Üí ‚àÉ (Œπ : Type) (D : Discrete Œπ ‚•§ C) (t : Cocone D) (_ : IsColimit t),
--    Finite Œπ ‚àß (‚àÄ i, ConnectedObject (D.obj i)) ‚àß t.pt = X := by
--  have : ‚àÄ (n : ‚Ñï) (X : C), n = Nat.card (F.obj X) ‚Üí ‚àÉ (Œπ : Type) (D : Discrete Œπ ‚•§ C) (t : Cocone D) (_ : IsColimit t),
--    Finite Œπ ‚àß (‚àÄ i, ConnectedObject (D.obj i)) ‚àß t.pt = X
--  intro n
--  induction' n using Nat.strong_induction_on with n hi
--  intro X hn
--  by_cases ConnectedObject X
--  use PUnit
--  use fromPUnit X
--  use {
--    pt := X
--    Œπ := { app := fun _ ‚Ü¶ ùüô X }
--  }
--  use { desc := fun s ‚Ü¶ s.Œπ.app ‚ü®PUnit.unit‚ü© }
--  simp only [const_obj_obj, forall_const, and_true]
--  constructor
--  exact Finite.of_fintype PUnit.{1}
--  assumption
--  by_cases (IsInitial X ‚Üí False)
--  . have : ¬¨ (‚àÄ (Y : C) (i : Y ‚ü∂ X) [Mono i], (IsInitial Y ‚Üí False) ‚Üí IsIso i) := sorry
--    simp at this
--    obtain ‚ü®Y, hnotinitial, v, hvmono, hvnoiso‚ü© := this
--    have : Function.Injective (F.map v) := (monomorphismIffInducesInjective v).mp hvmono
--    have : Nat.card (F.obj Y) ‚â† 0 := sorry
--    obtain ‚ü®Z, u, x, _‚ü© := PreGaloisCategory.monoInducesIsoOnDirectSummand v
--    have hn1 : Nat.card (F.obj Y) < n := sorry
--    have hn2 : Nat.card (F.obj Z) < n := sorry
--    obtain ‚ü®Œπ‚ÇÅ, D‚ÇÅ, t‚ÇÅ, ht‚ÇÅ, hfin‚ÇÅ, hconn‚ÇÅ, h‚ÇÅ‚ü© := hi (Nat.card (F.obj Y)) hn1 Y rfl
--    obtain ‚ü®Œπ‚ÇÇ, D‚ÇÇ, t‚ÇÇ, ht‚ÇÇ, hfin‚ÇÇ, hconn‚ÇÇ, h‚ÇÇ‚ü© := hi (Nat.card (F.obj Z)) hn2 Z rfl
--    let Œπ := Sum Œπ‚ÇÅ Œπ‚ÇÇ
--    use Œπ
--    let f : Œπ ‚Üí C
--    | Sum.inl i => D‚ÇÅ.obj ‚ü®i‚ü©
--    | Sum.inr i => D‚ÇÇ.obj ‚ü®i‚ü©
--    use (Discrete.functor f)
--    let t : Cocone (Discrete.functor f) := {
--      pt := X
--      Œπ := by
--        apply Discrete.natTrans
--        intro ‚ü®i‚ü©
--        exact match i with
--        | Sum.inl i => by
--            let h := t‚ÇÅ.Œπ.app ‚ü®i‚ü©
--            rw [h‚ÇÅ] at h
--            exact h ‚â´ v
--        | Sum.inr i => by
--            let h := t‚ÇÇ.Œπ.app ‚ü®i‚ü©
--            rw [h‚ÇÇ] at h
--            exact h ‚â´ u
--    }
--    use t
--    have hco : IsColimit t := {
--      desc := by
--        intro s
--        show X ‚ü∂ s.pt
--        let s‚ÇÅ : Cocone D‚ÇÅ := {
--          pt := s.pt
--          Œπ := by
--            apply Discrete.natTrans
--            intro ‚ü®i‚ü©
--            exact s.Œπ.app ‚ü®Sum.inl i‚ü©
--        }
--        let f‚ÇÅ : Y ‚ü∂ s.pt := by
--          rw [‚Üêh‚ÇÅ]
--          exact ht‚ÇÅ.desc s‚ÇÅ
--        let s‚ÇÇ : Cocone D‚ÇÇ := {
--          pt := s.pt
--          Œπ := by
--            apply Discrete.natTrans
--            intro ‚ü®i‚ü©
--            exact s.Œπ.app ‚ü®Sum.inr i‚ü©
--        }
--        let f‚ÇÇ : Z ‚ü∂ s.pt := by
--          rw [‚Üêh‚ÇÇ]
--          exact ht‚ÇÇ.desc s‚ÇÇ
--        let c : BinaryCofan Y Z := BinaryCofan.mk f‚ÇÅ f‚ÇÇ
--        let g : X ‚ü∂ s.pt := x c
--        exact g
--    }
--    use hco
--    simp
--    constructor
--    exact Finite.instFiniteSum
--    intro ‚ü®i‚ü©
--    match i with
--    | Sum.inl i => exact hconn‚ÇÅ ‚ü®i‚ü©
--    | Sum.inr i => exact hconn‚ÇÇ ‚ü®i‚ü©
--  . simp at h
--    obtain ‚ü®y, _‚ü© := h
--    use PEmpty
--    use empty C
--    use asEmptyCocone X
--    use y
--    simp only [IsEmpty.forall_iff, asEmptyCocone_pt, and_self, and_true]
--    exact Finite.of_fintype PEmpty.{1}
--  intro X
--  exact this (Nat.card (F.obj X)) X rfl
