import Mathlib.CategoryTheory.GaloisCategories.Basic

universe u v w v‚ÇÅ u‚ÇÅ u‚ÇÇ

open CategoryTheory Limits Functor

namespace Galois

variable {C : Type u} [Category.{v, u} C] {F : C ‚•§ Type w} [PreGaloisCategory C] [FundamentalFunctor F]

example (X : C) [ConnectedObject X] : ‚àÉ (Œπ : Type) (D : Discrete Œπ ‚•§ C) (t : Cocone D) (_ : IsColimit t),
    Finite Œπ ‚àß (‚àÄ i, ConnectedObject (D.obj i)) ‚àß t.pt = X := by
  use PUnit
  use fromPUnit X
  use {
    pt := X
    Œπ := { app := fun _ ‚Ü¶ ùüô X }
  }
  use { desc := fun s ‚Ü¶ s.Œπ.app ‚ü®PUnit.unit‚ü© }
  simp only [const_obj_obj, forall_const, and_true]
  constructor
  exact Finite.of_fintype PUnit.{1}
  assumption

lemma sumOfConnectedComponents : (X : C) ‚Üí ‚àÉ (Œπ : Type) (D : Discrete Œπ ‚•§ C) (t : Cocone D) (_ : IsColimit t),
    Finite Œπ ‚àß (‚àÄ i, ConnectedObject (D.obj i)) ‚àß t.pt = X := by
  have : ‚àÄ (n : ‚Ñï) (X : C), n = Nat.card (F.obj X) ‚Üí ‚àÉ (Œπ : Type) (D : Discrete Œπ ‚•§ C) (t : Cocone D) (_ : IsColimit t),
    Finite Œπ ‚àß (‚àÄ i, ConnectedObject (D.obj i)) ‚àß t.pt = X
  intro n
  induction' n using Nat.strong_induction_on with n hi
  intro X hn
  by_cases ConnectedObject X
  use PUnit
  use fromPUnit X
  use {
    pt := X
    Œπ := { app := fun _ ‚Ü¶ ùüô X }
  }
  use { desc := fun s ‚Ü¶ s.Œπ.app ‚ü®PUnit.unit‚ü© }
  simp only [const_obj_obj, forall_const, and_true]
  constructor
  exact Finite.of_fintype PUnit.{1}
  assumption
  by_cases (IsInitial X ‚Üí False)
  . have : ¬¨ (‚àÄ (Y : C) (i : Y ‚ü∂ X) [Mono i], (IsInitial Y ‚Üí False) ‚Üí IsIso i) := sorry
    simp at this
    obtain ‚ü®Y, hnotinitial, v, hvmono, hvnoiso‚ü© := this
    have : Function.Injective (F.map v) := (monomorphismIffInducesInjective v).mp hvmono
    have : Nat.card (F.obj Y) ‚â† 0 := sorry
    obtain ‚ü®Z, u, x, _‚ü© := PreGaloisCategory.monoInducesIsoOnDirectSummand v
    have hn1 : Nat.card (F.obj Y) < n := sorry
    have hn2 : Nat.card (F.obj Z) < n := sorry
    obtain ‚ü®Œπ‚ÇÅ, D‚ÇÅ, t‚ÇÅ, ht‚ÇÅ, hfin‚ÇÅ, hconn‚ÇÅ, h‚ÇÅ‚ü© := hi (Nat.card (F.obj Y)) hn1 Y rfl
    obtain ‚ü®Œπ‚ÇÇ, D‚ÇÇ, t‚ÇÇ, ht‚ÇÇ, hfin‚ÇÇ, hconn‚ÇÇ, h‚ÇÇ‚ü© := hi (Nat.card (F.obj Z)) hn2 Z rfl
    let Œπ := Sum Œπ‚ÇÅ Œπ‚ÇÇ
    use Œπ
    let f : Œπ ‚Üí C
    | Sum.inl i => D‚ÇÅ.obj ‚ü®i‚ü©
    | Sum.inr i => D‚ÇÇ.obj ‚ü®i‚ü©
    use (Discrete.functor f)
    let t : Cocone (Discrete.functor f) := {
      pt := X
      Œπ := by
        apply Discrete.natTrans
        intro ‚ü®i‚ü©
        exact match i with
        | Sum.inl i => by
            let h := t‚ÇÅ.Œπ.app ‚ü®i‚ü©
            rw [h‚ÇÅ] at h
            exact h ‚â´ v
        | Sum.inr i => by
            let h := t‚ÇÇ.Œπ.app ‚ü®i‚ü©
            rw [h‚ÇÇ] at h
            exact h ‚â´ u
    }
    use t
    have hco : IsColimit t := {
      desc := by
        intro s
        show X ‚ü∂ s.pt
        let s‚ÇÅ : Cocone D‚ÇÅ := {
          pt := s.pt
          Œπ := by
            apply Discrete.natTrans
            intro ‚ü®i‚ü©
            exact s.Œπ.app ‚ü®Sum.inl i‚ü©
        }
        let f‚ÇÅ : Y ‚ü∂ s.pt := by
          rw [‚Üêh‚ÇÅ]
          exact ht‚ÇÅ.desc s‚ÇÅ
        let s‚ÇÇ : Cocone D‚ÇÇ := {
          pt := s.pt
          Œπ := by
            apply Discrete.natTrans
            intro ‚ü®i‚ü©
            exact s.Œπ.app ‚ü®Sum.inr i‚ü©
        }
        let f‚ÇÇ : Z ‚ü∂ s.pt := by
          rw [‚Üêh‚ÇÇ]
          exact ht‚ÇÇ.desc s‚ÇÇ
        let c : BinaryCofan Y Z := BinaryCofan.mk f‚ÇÅ f‚ÇÇ
        let g : X ‚ü∂ s.pt := x.desc c
        exact g
    }
    use hco
    simp
    constructor
    exact Finite.instFiniteSum
    intro ‚ü®i‚ü©
    match i with
    | Sum.inl i => exact hconn‚ÇÅ ‚ü®i‚ü©
    | Sum.inr i => exact hconn‚ÇÇ ‚ü®i‚ü©
  . simp at h
    obtain ‚ü®y, _‚ü© := h
    use PEmpty
    use empty C
    use asEmptyCocone X
    use y
    simp only [IsEmpty.forall_iff, asEmptyCocone_pt, and_self, and_true]
    exact Finite.of_fintype PEmpty.{1}
  intro X
  exact this (Nat.card (F.obj X)) X rfl
