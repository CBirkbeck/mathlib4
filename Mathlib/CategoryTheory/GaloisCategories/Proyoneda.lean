import Mathlib.CategoryTheory.Limits.Types
import Mathlib.CategoryTheory.Limits.HasLimits

universe u v w

open CategoryTheory Limits Functor

section Constructions

variable {C : Type u} [Category.{u, u} C] {J : Type u} [SmallCategory J]

def D (X : J·µí·µñ ‚•§ C) (Y : C) : J ‚•§ TypeMax.{u, u} where
  obj i := X.obj ‚ü®i‚ü© ‚ü∂ Y
  map {i j} f := by
    intro g
    show X.obj { unop := j }  ‚ü∂ Y
    exact X.map ‚ü®f‚ü© ‚â´ g
  map_id {i} := by
    ext (g : X.obj ‚ü®i‚ü© ‚ü∂ Y)
    show X.map (ùüô ‚ü®i‚ü©) ‚â´ g = g
    simp only [CategoryTheory.Functor.map_id, Category.id_comp]
  map_comp {i j k} f g := by
    ext (h : X.obj ‚ü®i‚ü© ‚ü∂ Y)
    show X.map (‚ü®g‚ü© ‚â´ ‚ü®f‚ü©) ‚â´ h = X.map ‚ü®g‚ü© ‚â´ (X.map ‚ü®f‚ü© ‚â´ h)
    simp only [map_comp, Category.assoc]

@[simp]
lemma D_obj_eq (X : J·µí·µñ ‚•§ C) {Y : C} (i : J) : (D X Y).obj i = (X.obj ‚ü®i‚ü© ‚ü∂ Y) :=
  rfl

@[simp]
lemma D_map_eq (X : J·µí·µñ ‚•§ C) {Y : C} {i j : J} (u : i ‚ü∂ j) (g : X.obj ‚ü®i‚ü© ‚ü∂ Y) :
    (D X Y).map u g = X.map ‚ü®u‚ü© ‚â´ g :=
  rfl

def Dtrans (X : J·µí·µñ ‚•§ C) {Y Z : C} (f : Y ‚ü∂ Z) : D X Y ‚ü∂ D X Z where
  app i g := g ‚â´ f
  naturality i j u := by
    ext (g : X.obj ‚ü®i‚ü© ‚ü∂ Y)
    show (X.map ‚ü®u‚ü© ‚â´ g) ‚â´ f = X.map ‚ü®u‚ü© ‚â´ (g ‚â´ f)
    simp only [Category.assoc]

@[simp]
lemma Dtrans_app_eq (X : J·µí·µñ ‚•§ C) {Y Z : C} (f : Y ‚ü∂ Z) (i : J) (g : (D X Y).obj i) :
    (Dtrans X f).app i g = g ‚â´ f :=
  rfl

@[simp]
lemma Dtrans_id_eq (X : J·µí·µñ ‚•§ C) (Y : C) : Dtrans X (ùüô Y) = ùüô (D X Y) := by
  ext i (f : X.obj ‚ü®i‚ü© ‚ü∂ Y)
  show f ‚â´ ùüô Y = f
  simp only [Category.comp_id]

@[simp]
lemma Dtrans_comp_eq (X : J·µí·µñ ‚•§ C) {Y Z W : C} (f : Y ‚ü∂ Z) (g : Z ‚ü∂ W) :
    Dtrans X (f ‚â´ g) = Dtrans X f ‚â´ Dtrans X g := by
  ext i (u : X.obj ‚ü®i‚ü© ‚ü∂ Y)
  show u ‚â´ (f ‚â´ g) = (u ‚â´ f) ‚â´  g
  simp only [Category.assoc]

@[simp]
lemma colimMapIdentity {J C : Type*} [Category C] [Category J] (F : J ‚•§ C) [HasColimit F]
    : colimMap (ùüô F) = ùüô (colimit F) := by
  aesop

@[simp]
lemma colimMapComp {J C : Type*} [Category C] [Category J] {F G H : J ‚•§ C} [HasColimit F]
    [HasColimit G] [HasColimit H] (t : F ‚ü∂ G) (s : G ‚ü∂ H)
    : colimMap (t ‚â´ s) = colimMap t ‚â´ colimMap s := by
  aesop

noncomputable def h (X : J·µí·µñ ‚•§ C) : C ‚•§ Type u where
  obj Y := colimit (D X Y)
  map {Y Z} f := by
    show colimit (D X Y) ‚Üí colimit (D X Z)
    exact colim.map (Dtrans X f)
  map_id Y := by
    simp only [colim_map, Dtrans_id_eq, colimMapIdentity]
  map_comp {Y Z W} f g := by
    simp only [colim_map, Dtrans_comp_eq, colimMapComp]

@[simp]
lemma h_map_eq (X : J·µí·µñ ‚•§ C) {Y Z : C} (f : Y ‚ü∂ Z) (i : J)
    (u : (X.obj ‚ü®i‚ü© ‚ü∂ Y)):
    (h X).map f (colimit.Œπ (D X Y) i u) = colimit.Œπ (D X Z) i (u ‚â´ f) := by
  show colim.map (Dtrans X f) (colimit.Œπ (D X Y) i u) = colimit.Œπ (D X Z) i (u ‚â´ f)
  simp

noncomputable def procoyonedaLemma [IsFiltered J] (X : J·µí·µñ ‚•§ C) (F : C ‚•§ Type u) :
    (h X ‚ü∂ F) ‚âÉ limit (X ‚ãô F) where
  toFun t := by
    refine Types.Limit.mk (X ‚ãô F) ?_ ?_
    intro i
    exact t.app (X.obj i) (colimit.Œπ (D X (X.obj i)) i.unop (ùüô (X.obj i)))
    intro i j u
    have := congrFun (t.naturality (X.map u)) (colimit.Œπ (D X (X.obj i)) i.unop (ùüô (X.obj i)))
    simp
    simp at this
    rw [‚Üêthis]
    have h : colimit.Œπ (D X (X.obj j)) i.unop (X.map u) = 
        colimit.Œπ (D X (X.obj j)) j.unop (ùüô (X.obj j)) := by
      apply (Types.FilteredColimit.colimit_eq_iff (D X (X.obj j))).mpr
      use i.unop
      use (ùüô i.unop)
      use u.unop
      simp only [D_obj_eq, D_map_eq, Category.comp_id]
      show X.map (ùüô i) ‚â´ X.map u = X.map u
      simp only [CategoryTheory.Functor.map_id, Category.id_comp]
    rw [h]
  invFun s := {
    app := by
      intro Y
      let c : Cocone (D X Y) := {
        pt := F.obj Y
        Œπ := {
          app := by
            intro i (g : X.obj ‚ü®i‚ü© ‚ü∂ Y)
            simp
            exact F.map g (limit.œÄ (X ‚ãô F) ‚ü®i‚ü© s)
          naturality := by
            intro i j u
            simp only [D_obj_eq, const_obj_obj, id_eq, const_obj_map, Category.comp_id]
            ext g
            simp only [types_comp_apply, D_map_eq, FunctorToTypes.map_comp_apply]
            rw [‚ÜêFunctor.comp_map X F ‚ü®u‚ü©, Types.Limit.w_apply']
        }
      }
      exact colimit.desc (D X Y) c
    naturality := by
      intro Y Z f
      ext g
      obtain ‚ü®i, y, h‚ü© := Types.jointly_surjective' g
      rw [‚Üêh]
      simp
  }
  left_inv := by
    intro t
    ext Y g
    obtain ‚ü®i, (y : X.obj ‚ü®i‚ü© ‚ü∂ Y), h‚ü© := Types.jointly_surjective' g
    simp only [‚Üêh, id_eq, Types.Colimit.Œπ_desc_apply', Types.Limit.œÄ_mk]
    let h2 := congrFun (t.naturality y) (colimit.Œπ (D X (X.obj ‚ü®i‚ü©)) i (ùüô (X.obj ‚ü®i‚ü©)))
    simp only [types_comp_apply, h_map_eq, Category.id_comp] at h2 
    rw [‚Üêh2]
  right_inv := by
    intro s
    apply Types.limit_ext (X ‚ãô F) _ _
    simp

end Constructions

structure ProObject (C : Type u) [Category.{v, u} C] : Type _ where
  {J : Type w}
  [Jcategory : SmallCategory J]
  [Jfiltered : IsFiltered J]
  (X : J·µí·µñ ‚•§ C)

instance {C : Type u} [Category.{v, u} C] (X : ProObject C) : SmallCategory X.J := X.Jcategory

instance {C : Type u} [Category.{v, u} C] (X : ProObject C) : IsFiltered X.J := X.Jfiltered

noncomputable instance {C : Type u} [Category.{u, u} C] : Category (ProObject C) where
  Hom X Y := limit (Y.X ‚ãô h X.X)
  id X := procoyonedaLemma X.X (h X.X) (ùüô (h X.X))
  comp {X Y Z} f g := by
    let s : h Z.X ‚ü∂ h Y.X := (procoyonedaLemma Z.X (h Y.X)).symm g
    let t : h Y.X ‚ü∂ h X.X := (procoyonedaLemma Y.X (h X.X)).symm f
    exact procoyonedaLemma Z.X (h X.X) (s ‚â´ t)

lemma proObject_id_eq {C : Type u} [Category.{u, u} C] (X : ProObject C) :
    ùüô X = procoyonedaLemma X.X (h X.X) (ùüô (h X.X)) :=
  rfl

lemma proObject_id_comp {C : Type u} [Category.{u, u} C] {X Y Z : ProObject C}
    (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    f ‚â´ g = procoyonedaLemma Z.X (h X.X)
      ((procoyonedaLemma Z.X (h Y.X)).symm g ‚â´ ((procoyonedaLemma Y.X (h X.X)).symm f)) :=
  rfl

class Procorepresentable {C : Type u} [Category.{u, u} C] (F : C ‚•§ Type u) : Prop where
  has_procorepresentation : ‚àÉ (X : ProObject C), Nonempty (h X.X ‚âÖ F)

noncomputable def procoyonedaEmbedding (C : Type u) [Category.{u, u} C] :
    (ProObject C)·µí·µñ ‚•§ (C ‚•§ Type u) where
  obj := fun ‚ü®X‚ü© ‚Ü¶ h X.X
  map := fun ‚ü®f‚ü© => (procoyonedaLemma _ _).symm f
  map_id := fun ‚ü®X‚ü© => by
    show (procoyonedaLemma X.X (h X.X)).symm (ùüô X) = ùüô (h X.X)
    simp only [proObject_id_eq, Equiv.symm_apply_apply]
  map_comp := by
    intro ‚ü®X‚ü© ‚ü®Y‚ü© ‚ü®Z‚ü© ‚ü®f‚ü© ‚ü®g‚ü©
    show (procoyonedaLemma X.X (h Z.X)).symm (g ‚â´ f) = (procoyonedaLemma X.X (h Y.X)).symm f ‚â´
        (procoyonedaLemma Y.X (h Z.X)).symm g
    simp only [proObject_id_comp, Equiv.symm_apply_apply]

noncomputable instance {C : Type u} [Category.{u, u} C] : Full (procoyonedaEmbedding C) where
  preimage := by
    intro ‚ü®Y‚ü© ‚ü®X‚ü© (f : h Y.X ‚ü∂ h X.X)
    exact ‚ü®procoyonedaLemma _ _ f‚ü©
  witness := by
    intro ‚ü®Y‚ü© ‚ü®X‚ü© (f : h Y.X ‚ü∂ h X.X)
    show (procoyonedaLemma _ _).symm (procoyonedaLemma _ _ f) = f
    simp only [Equiv.symm_apply_apply]

noncomputable instance {C : Type u} [Category.{u, u} C] : Faithful (procoyonedaEmbedding C) where
  map_injective := by
    intro ‚ü®Y‚ü© ‚ü®X‚ü© ‚ü®(f : X ‚ü∂ Y)‚ü© ‚ü®(g : X ‚ü∂ Y)‚ü©
      (h : (procoyonedaLemma _ _).symm f = (procoyonedaLemma _ _).symm g)
    apply (Opposite.op_inj_iff f g).mpr
    exact Equiv.injective (procoyonedaLemma _ _).symm h

--instance representable_of_procorepresentable {C : Type u} [Category.{u, u} C]
--    (F : C ‚•§ Type u) [Corepresentable F] : Procorepresentable F where
--  has_procorepresentation := sorry
