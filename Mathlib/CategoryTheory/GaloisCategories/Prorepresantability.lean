import Mathlib.CategoryTheory.Limits.Types
import Mathlib.CategoryTheory.GaloisCategories.Basic

universe u v w

open CategoryTheory Limits Functor

lemma colimMapIdentity {J C : Type*} [Category C] [Category J] (F : J โฅค C) [HasColimit F]
    : colimMap (๐ F) = ๐ (colimit F) := by
  aesop

namespace Galois

variable {C : Type u} [Category.{u, u} C] {F : C โฅค FintypeCat.{u}} [PreGaloisCategory C] [FibreFunctor F]

def ConnectedObjects := { A : C | ConnectedObject A }

def Idx : Type (max u u) := (A : @ConnectedObjects C _) ร F.obj (A : C)

instance : Category (@Idx C _ F) where
  Hom := by
    intro โจA, aโฉ โจB, bโฉ
    exact { f : (A : C) โถ B // F.map f a = b }
  id := by
    intro โจA, aโฉ
    exact โจ๐ (A : C), by simpโฉ
  comp := by
    intro โจA, aโฉ โจB, bโฉ โจC, cโฉ โจf, hfโฉ โจg, hgโฉ
    have h : F.map (f โซ g) a = c := by
      simp only [map_comp, FintypeCat.comp_apply, hf, hg]
    exact โจf โซ g, hโฉ

def diag (X : C) : (@Idx C _ F)แตแต โฅค Type u where
  obj := by
    intro โจA, _โฉ
    exact (A : C) โถ X
  map := by
    intro โจA, _โฉ โจB, _โฉ โจf, _โฉ (g : (A : C) โถ X)
    exact f โซ g
  map_id := by
    intro โจA, _โฉ
    ext (g : (A : C) โถ X)
    show ๐ (A : C) โซ g = g
    simp only [Category.id_comp]
  map_comp := by
    intro โจA, _โฉ โจB, _โฉ โจD, _โฉ โจf, _โฉ โจg, _โฉ
    ext (h : (A : C) โถ X)
    show (g โซ f) โซ h = g โซ (f โซ h)
    simp only [Category.assoc]

--instance (X : C) : HasColimit (@diag C _ F X) := inferInstance

def bli (X : C) : Cocone (@diag C _ F X) where
  pt := FintypeCat.incl.obj <| F.obj X
  ฮน := {
    app := by
      intro โจA, aโฉ
      show ((A : C) โถ X) โ F.obj X
      intro f
      exact F.map f a
    naturality := by
      intro โจA, aโฉ โจB, bโฉ โจf, hfโฉ
      ext (g : (A : C) โถ X)
      show F.map (f โซ g) b = F.map g a
      simp only [map_comp, FintypeCat.comp_apply, hf]
  }

def diagTrans {X Y : C} (f : X โถ Y) : @diag C _ F X โถ @diag C _ F Y where
  app := by
    intro โจA, aโฉ
    intro g
    exact g โซ f
  naturality := by
    intro โจA, aโฉ โจB, bโฉ โจu, huโฉ
    ext (g : (A : C) โถ X)
    show (u โซ g) โซ f = u โซ (g โซ f)
    simp only [Category.assoc]

noncomputable def blabla : C โฅค Type u where
  obj X := colimit (@diag C _ F X)
  map {X Y} f := by
    show colimit (@diag C _ F X) โ colimit (@diag C _ F Y)
    exact colim.map (diagTrans f)
  map_id := by
    intro X
    simp
    have h1 : diagTrans (๐ X) = ๐ (@diag C _ F X) := sorry
    rw [h1]
    exact colimMapIdentity (diag X)

noncomputable def bla (X : C) : colimit (@diag C _ F X) โถ (FintypeCat.incl.obj <| F.obj X) :=
  colimit.desc (@diag C _ F X) (bli X)
