/-
Copyright (c) 2025 Robin Carlier. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Robin Carlier
-/
import Mathlib.CategoryTheory.Join.Basic
import Mathlib.CategoryTheory.Bicategory.Functor.Pseudofunctor

/-!
# Pseudofunctoriality of categorical joins

In this file, we promote the join construction to two pseudofunctors
`Join.pseudofunctorLeft` and `Join.pseudoFunctorRight`, expressing its pseudofunctoriality in
each variable.

-/

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory.Join

open Bicategory

/-- The `PrelaxFunctor` structure underlying `Join.pseudofunctorRight`. -/
@[simps]
def prelaxFunctorRight (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] :
    PrelaxFunctor Cat.{v‚ÇÇ, u‚ÇÇ} Cat.{max v‚ÇÅ v‚ÇÇ, max u‚ÇÅ u‚ÇÇ} where
  obj D := Cat.of (C ‚ãÜ D)
  map F := mapPair (ùü≠ C) F
  map‚ÇÇ := mapWhiskerLeft _
  map‚ÇÇ_id {x y} f := by
    apply natTrans_ext <;> aesop_cat
  map‚ÇÇ_comp Œ∑ Œ∏ := by
    apply natTrans_ext <;>
    ( dsimp
      rw [‚Üê mapWhiskerLeft_comp] )

/-- The `PrelaxFunctor` structure underlying `Join.pseudofunctorLeft`. -/
@[simps]
def prelaxFunctorLeft (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D] :
    PrelaxFunctor Cat.{v‚ÇÅ, u‚ÇÅ} Cat.{max v‚ÇÅ v‚ÇÇ, max u‚ÇÅ u‚ÇÇ} where
  obj C := Cat.of (C ‚ãÜ D)
  map F := mapPair F (ùü≠ D)
  map‚ÇÇ := (mapWhiskerRight ¬∑ _)
  map‚ÇÇ_id {x y} f := by
    apply natTrans_ext <;> aesop_cat
  map‚ÇÇ_comp Œ∑ Œ∏ := by
    apply natTrans_ext <;>
    ( dsimp
      rw [‚Üê mapWhiskerRight_comp] )

-- The proof gets too slow if we put it in a single `pseudofunctor` constructor,
-- so we break down the component proofs for the pseudofunctors over several lemmas.

/-- The structural isomorphism for composition of `pseudoFunctorRight`. -/
def prelaxFunctorRight.mapCompRight (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] {x y z : Cat.{v‚ÇÇ, u‚ÇÇ}}
    (f : x ‚ü∂ y) (g : y ‚ü∂ z) :
    (prelaxFunctorRight C).map (f ‚â´ g) ‚âÖ
    (prelaxFunctorRight C).map f ‚â´ (prelaxFunctorRight C).map g :=
  mapIsoWhiskerRight (Functor.leftUnitor _).symm _ ‚â™‚â´ mapPairComp (ùü≠ C) f (ùü≠ C) g

/-- The structural isomorphism for composition of `pseudoFunctorLeft`. -/
def prelaxFunctorLeft.mapCompLeft (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D] {x y z : Cat.{v‚ÇÅ, u‚ÇÅ}}
    (f : x ‚ü∂ y) (g : y ‚ü∂ z) :
    (prelaxFunctorLeft D).map (f ‚â´ g) ‚âÖ
    (prelaxFunctorLeft D).map f ‚â´ (prelaxFunctorLeft D).map g :=
  mapIsoWhiskerLeft _ (Functor.leftUnitor _).symm ‚â™‚â´ mapPairComp f (ùü≠ D) g (ùü≠ D)

lemma prelaxFunctorRight.map‚ÇÇ_whisker_left (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C]
    {a b c : Cat.{v‚ÇÇ, u‚ÇÇ}} (f : a ‚ü∂ b) {g h : b ‚ü∂ c} (Œ∑ : g ‚ü∂ h) :
    (prelaxFunctorRight C).map‚ÇÇ (f ‚óÅ Œ∑) =
      (mapCompRight C f g).hom ‚â´ (prelaxFunctorRight C).map f ‚óÅ (prelaxFunctorRight C).map‚ÇÇ Œ∑ ‚â´
      (mapCompRight C f h).inv := by
  apply natTrans_ext <;>
  ext <;>
  ( simp only [prelaxFunctorRight_toPrelaxFunctorStruct_toPrefunctor_obj, Cat.of_Œ±,
    prelaxFunctorRight_toPrelaxFunctorStruct_toPrefunctor_map, Functor.comp_obj, inclLeft_obj,
    mapPair_obj_left, Functor.id_obj, Bicategory.whiskerLeft,
    prelaxFunctorRight_toPrelaxFunctorStruct_map‚ÇÇ, whiskerLeft_app, mapWhiskerLeft_app,
    mapCompRight, Iso.trans_hom, Iso.trans_inv, Category.assoc]
    repeat rw [NatTrans.comp_app]
    simp )

lemma prelaxFunctorLeft.map‚ÇÇ_whisker_left (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D]
    {a b c : Cat.{v‚ÇÅ, u‚ÇÅ}} (f : a ‚ü∂ b) {g h : b ‚ü∂ c} (Œ∑ : g ‚ü∂ h) :
    (prelaxFunctorLeft D).map‚ÇÇ (f ‚óÅ Œ∑) =
      (mapCompLeft D f g).hom ‚â´ (prelaxFunctorLeft D).map f ‚óÅ (prelaxFunctorLeft D).map‚ÇÇ Œ∑ ‚â´
      (mapCompLeft D f h).inv := by
  apply natTrans_ext <;>
  ext <;>
  ( simp only [prelaxFunctorLeft_toPrelaxFunctorStruct_toPrefunctor_obj, Cat.of_Œ±,
    prelaxFunctorLeft_toPrelaxFunctorStruct_toPrefunctor_map, Functor.comp_obj, inclRight_obj,
    mapPair_obj_left, Functor.id_obj, Bicategory.whiskerLeft,
    prelaxFunctorRight_toPrelaxFunctorStruct_map‚ÇÇ, whiskerLeft_app, mapWhiskerLeft_app,
    mapCompLeft, Iso.trans_hom, Iso.trans_inv, Category.assoc]
    repeat rw [NatTrans.comp_app]
    simp )

lemma prelaxFunctorRight.map‚ÇÇ_whisker_right (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C]
    {a b c : Cat.{v‚ÇÇ, u‚ÇÇ}} {f g: a ‚ü∂ b} (Œ∑ : f ‚ü∂ g) (h : b ‚ü∂ c) :
    (prelaxFunctorRight C).map‚ÇÇ (Œ∑ ‚ñ∑ h) =
      (mapCompRight C f h).hom ‚â´ (prelaxFunctorRight C).map‚ÇÇ Œ∑ ‚ñ∑ (prelaxFunctorRight C).map h ‚â´
      (mapCompRight C g h).inv := by
  apply natTrans_ext <;>
  ext <;>
  ( simp only [prelaxFunctorRight_toPrelaxFunctorStruct_toPrefunctor_obj, Cat.of_Œ±,
    prelaxFunctorRight_toPrelaxFunctorStruct_toPrefunctor_map, Functor.comp_obj, inclLeft_obj,
    mapPair_obj_left, Functor.id_obj, Bicategory.whiskerLeft,
    prelaxFunctorRight_toPrelaxFunctorStruct_map‚ÇÇ, whiskerLeft_app, mapWhiskerLeft_app,
    mapCompRight, Iso.trans_hom, Iso.trans_inv, Category.assoc]
    repeat rw [NatTrans.comp_app]
    simp )

lemma prelaxFunctorLeft.map‚ÇÇ_whisker_right (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D]
    {a b c : Cat.{v‚ÇÅ, u‚ÇÅ}} {f g: a ‚ü∂ b} (Œ∑ : f ‚ü∂ g) (h : b ‚ü∂ c) :
    (prelaxFunctorLeft D).map‚ÇÇ (Œ∑ ‚ñ∑ h) =
      (mapCompLeft D f h).hom ‚â´ (prelaxFunctorLeft D).map‚ÇÇ Œ∑ ‚ñ∑ (prelaxFunctorLeft D).map h ‚â´
      (mapCompLeft D g h).inv := by
  apply natTrans_ext <;>
  ext <;>
  ( simp only [prelaxFunctorLeft_toPrelaxFunctorStruct_toPrefunctor_obj, Cat.of_Œ±,
    prelaxFunctorLeft_toPrelaxFunctorStruct_toPrefunctor_map, Functor.comp_obj, inclRight_obj,
    mapPair_obj_left, Functor.id_obj, Bicategory.whiskerLeft,
    prelaxFunctorRight_toPrelaxFunctorStruct_map‚ÇÇ, whiskerLeft_app, mapWhiskerLeft_app,
    mapCompLeft, Iso.trans_hom, Iso.trans_inv, Category.assoc]
    repeat rw [NatTrans.comp_app]
    simp )

lemma prelaxFunctorRight.map‚ÇÇ_associator (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C]
    {a b c d : Cat.{v‚ÇÇ, u‚ÇÇ}} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d) :
    (prelaxFunctorRight C).map‚ÇÇ (Œ±_ f g h).hom =
      (mapCompRight C (f ‚â´ g) h).hom ‚â´ (mapCompRight C f g).hom ‚ñ∑ (prelaxFunctorRight C).map h ‚â´
      (Œ±_ ((prelaxFunctorRight C).map f) ((prelaxFunctorRight C).map g)
        ((prelaxFunctorRight C).map h)).hom ‚â´
      (prelaxFunctorRight C).map f ‚óÅ (mapCompRight C g h).inv ‚â´ (mapCompRight C f (g ‚â´ h)).inv := by
  apply natTrans_ext <;>
  ext <;>
  ( simp only [prelaxFunctorRight_toPrelaxFunctorStruct_toPrefunctor_obj, Cat.of_Œ±,
    prelaxFunctorRight_toPrelaxFunctorStruct_toPrefunctor_map, Functor.comp_obj, inclRight_obj,
    mapPair_obj_left, Cat.comp_obj, associator, prelaxFunctorRight_toPrelaxFunctorStruct_map‚ÇÇ,
    whiskerLeft_app, mapWhiskerRight_app, Functor.associator_hom_app, Functor.map_id, mapCompRight,
    Iso.trans_hom, mapIsoWhiskerLeft_hom, Iso.symm_hom, comp_whiskerRight, Bicategory.whiskerLeft,
    Iso.trans_inv, Category.assoc]
    repeat rw [NatTrans.comp_app]
    simp only [mapPair_obj_left, Functor.id_obj, Functor.comp_obj, mapWhiskerLeft_app,
      Functor.leftUnitor_inv_app, Functor.map_id, inclLeft_obj, Cat.comp_obj, Cat.of_Œ±,
      mapPairComp_hom_app_left, whiskerLeft_app, Functor.associator_hom_app, whiskerLeft_app,
      Cat.comp_app, mapPairComp_inv_app_left, mapIsoWhiskerLeft_inv_app, Iso.symm_inv,
      Functor.leftUnitor_hom_app, Category.comp_id, Category.id_comp]
    simp )


lemma prelaxFunctorLeft.map‚ÇÇ_associator (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D]
    {a b c d: Cat.{v‚ÇÅ, u‚ÇÅ}} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d) :
    (prelaxFunctorLeft D).map‚ÇÇ (Œ±_ f g h).hom =
      (mapCompLeft D (f ‚â´ g) h).hom ‚â´ (mapCompLeft D f g).hom ‚ñ∑ (prelaxFunctorLeft D).map h ‚â´
      (Œ±_ ((prelaxFunctorLeft D).map f) ((prelaxFunctorLeft D).map g)
        ((prelaxFunctorLeft D).map h)).hom ‚â´
      (prelaxFunctorLeft D).map f ‚óÅ (mapCompLeft D g h).inv ‚â´ (mapCompLeft D f (g ‚â´ h)).inv := by
  apply natTrans_ext <;>
  ext <;>
  ( simp only [prelaxFunctorLeft_toPrelaxFunctorStruct_toPrefunctor_obj, Cat.of_Œ±,
    prelaxFunctorLeft_toPrelaxFunctorStruct_toPrefunctor_map, Functor.comp_obj, inclLeft_obj,
    mapPair_obj_left, Cat.comp_obj, associator, prelaxFunctorLeft_toPrelaxFunctorStruct_map‚ÇÇ,
    whiskerLeft_app, mapWhiskerRight_app, Functor.associator_hom_app, Functor.map_id, mapCompLeft,
    Iso.trans_hom, mapIsoWhiskerLeft_hom, Iso.symm_hom, comp_whiskerRight, Bicategory.whiskerLeft,
    Iso.trans_inv, Category.assoc]
    repeat rw [NatTrans.comp_app]
    simp only [mapPair_obj_left, Functor.id_obj, Functor.comp_obj, mapWhiskerLeft_app,
      Functor.leftUnitor_inv_app, Functor.map_id, inclLeft_obj, Cat.comp_obj, Cat.of_Œ±,
      mapPairComp_hom_app_left, whiskerLeft_app, Functor.associator_hom_app, whiskerLeft_app,
      Cat.comp_app, mapPairComp_inv_app_left, mapIsoWhiskerLeft_inv_app, Iso.symm_inv,
      Functor.leftUnitor_hom_app, Category.comp_id, Category.id_comp]
    simp )

open prelaxFunctorRight in
/-- The pseudofunctor sending `D` to `C ‚ãÜ D`. -/
def pseudofunctorRight (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] :
    Pseudofunctor Cat.{v‚ÇÇ, u‚ÇÇ} Cat.{max v‚ÇÅ v‚ÇÇ, max u‚ÇÅ u‚ÇÇ} where
  toPrelaxFunctor := prelaxFunctorRight C
  mapId D := mapPairId
  mapComp := mapCompRight C
  map‚ÇÇ_whisker_left := map‚ÇÇ_whisker_left C
  map‚ÇÇ_whisker_right := map‚ÇÇ_whisker_right C
  map‚ÇÇ_associator := map‚ÇÇ_associator C
  map‚ÇÇ_left_unitor {_ _} f := by
    apply NatTrans.ext
    ext x
    cases x <;>
      ( repeat rw [NatTrans.comp_app]
        simp only [prelaxFunctorRight_toPrelaxFunctorStruct_toPrefunctor_obj, Cat.of_Œ±,
          prelaxFunctorRight_toPrelaxFunctorStruct_toPrefunctor_map, mapPair_obj_left,
          Functor.id_obj, leftUnitor, prelaxFunctorRight_toPrelaxFunctorStruct_map‚ÇÇ,
          mapWhiskerLeft_app, Cat.comp_obj, mapCompRight, Iso.trans_hom, Cat.id_obj,
          Cat.whiskerRight_app, mapPairId_hom_app, Functor.map_id, Functor.leftUnitor_hom_app,
          Category.comp_id]
        repeat rw [NatTrans.comp_app]
        simp )
  map‚ÇÇ_right_unitor {_ _} g := by
    apply NatTrans.ext
    ext x
    cases x <;>
      ( repeat rw [NatTrans.comp_app]
        simp only [prelaxFunctorRight_toPrelaxFunctorStruct_toPrefunctor_obj, Cat.of_Œ±,
          prelaxFunctorRight_toPrelaxFunctorStruct_toPrefunctor_map, mapPair_obj_left,
          Functor.id_obj, rightUnitor, prelaxFunctorRight_toPrelaxFunctorStruct_map‚ÇÇ,
          mapWhiskerLeft_app, Cat.comp_obj, mapCompRight, Iso.trans_hom, Cat.id_obj,
          Cat.whiskerRight_app, mapPairId_hom_app, Functor.map_id, Functor.rightUnitor_hom_app,
          Category.comp_id]
        repeat rw [NatTrans.comp_app]
        simp )

open prelaxFunctorLeft in
/-- The pseudofunctor sending `C` to `C ‚ãÜ D`. -/
def pseudofunctorLeft (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D] :
    Pseudofunctor Cat.{v‚ÇÅ, u‚ÇÅ} Cat.{max v‚ÇÅ v‚ÇÇ, max u‚ÇÅ u‚ÇÇ} where
  toPrelaxFunctor := prelaxFunctorLeft D
  mapId D := mapPairId
  mapComp := mapCompLeft D
  map‚ÇÇ_whisker_left := map‚ÇÇ_whisker_left D
  map‚ÇÇ_whisker_right := map‚ÇÇ_whisker_right D
  map‚ÇÇ_associator := map‚ÇÇ_associator D
  map‚ÇÇ_left_unitor {_ _} f := by
    apply NatTrans.ext
    ext x
    cases x <;>
      ( repeat rw [NatTrans.comp_app]
        simp only [prelaxFunctorLeft_toPrelaxFunctorStruct_toPrefunctor_obj, Cat.of_Œ±,
          prelaxFunctorLeft_toPrelaxFunctorStruct_toPrefunctor_map, mapPair_obj_left,
          Functor.id_obj, leftUnitor, prelaxFunctorLeft_toPrelaxFunctorStruct_map‚ÇÇ,
          mapWhiskerLeft_app, Cat.comp_obj, mapCompLeft, Iso.trans_hom, Cat.id_obj,
          Cat.whiskerRight_app, mapPairId_hom_app, Functor.map_id, Functor.leftUnitor_hom_app,
          Category.comp_id]
        repeat rw [NatTrans.comp_app]
        simp )
  map‚ÇÇ_right_unitor {_ _} g := by
    apply NatTrans.ext
    ext x
    cases x <;>
      ( repeat rw [NatTrans.comp_app]
        simp only [prelaxFunctorLeft_toPrelaxFunctorStruct_toPrefunctor_obj, Cat.of_Œ±,
          prelaxFunctorLeft_toPrelaxFunctorStruct_toPrefunctor_map, mapPair_obj_left,
          Functor.id_obj, rightUnitor, prelaxFunctorLeft_toPrelaxFunctorStruct_map‚ÇÇ,
          mapWhiskerLeft_app, Cat.comp_obj, mapCompLeft, Iso.trans_hom, Cat.id_obj,
          Cat.whiskerRight_app, mapPairId_hom_app, Functor.map_id, Functor.rightUnitor_hom_app,
          Category.comp_id]
        repeat rw [NatTrans.comp_app]
        simp )

end CategoryTheory.Join
