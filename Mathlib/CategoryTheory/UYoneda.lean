import Mathlib.CategoryTheory.Category.ULift
import Mathlib.CategoryTheory.Types
import Mathlib.CategoryTheory.Whiskering

import Mathlib.CategoryTheory.Yoneda
import Mathlib.Data.ULift

universe v‚ÇÉ v‚ÇÇ v‚ÇÅ u‚ÇÉ u‚ÇÇ u‚ÇÅ w

namespace CategoryTheory

open Opposite

-- precedence?
local notation:max "‚Üø" x:max => ULift.up x
local notation:max "‚áÉ" x:max => ULift.down x

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]

def uyoneda : C ‚•§ C·µí·µñ ‚•§ Type (max v‚ÇÅ w) :=
  yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{(max v‚ÇÅ w), v‚ÇÅ}

def ucoyoneda : C·µí·µñ ‚•§ C ‚•§ Type (max v‚ÇÅ w) :=
  coyoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{(max v‚ÇÅ w), v‚ÇÅ}

namespace UYoneda

@[simp]
theorem naturality {X Y : C} (Œ± : uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj Y)
    {Z Z' : C} (f : Z ‚ü∂ Z') (h : Z' ‚ü∂ X)
    : f ‚â´ ‚áÉ (Œ±.app (op Z') ‚Üøh) = ‚áÉ(Œ±.app (op Z) ‚Üø(f ‚â´ h)) :=
  congr_arg ULift.down (FunctorToTypes.naturality _ _ Œ± f.op ‚Üøh).symm

noncomputable
instance uyonedaFull : Full (uyoneda.{v‚ÇÅ, u‚ÇÅ, w} : C ‚•§ C·µí·µñ ‚•§ Type (max v‚ÇÅ w)) :=
  Full.comp _ _

instance uyoneda_faithful : Faithful (uyoneda.{v‚ÇÅ, u‚ÇÅ, w} : C ‚•§ C·µí·µñ ‚•§ Type (max v‚ÇÅ w)) :=
  Faithful.comp _ _

end UYoneda

namespace UCoyoneda

@[simp]
theorem naturality {X Y : C·µí·µñ} (Œ± : ucoyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ ucoyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj Y)
    {Z Z' : C} (f : Z' ‚ü∂ Z)
    (h : unop X ‚ü∂ Z') : ‚áÉ(Œ±.app Z' ‚Üøh) ‚â´ f = ‚áÉ(Œ±.app Z ‚Üø(h ‚â´ f)) :=
  congr_arg ULift.down (FunctorToTypes.naturality _ _ Œ± f ‚Üøh).symm

noncomputable
instance ucoyonedaFull : Full (ucoyoneda.{v‚ÇÅ, u‚ÇÅ, w} : C·µí·µñ ‚•§ C ‚•§ Type _) :=
  Full.comp _ _

instance ucoyoneda_faithful : Faithful (ucoyoneda.{v‚ÇÅ, u‚ÇÅ, w} : C·µí·µñ ‚•§ C ‚•§ Type _) :=
  Faithful.comp _ _

/-- The ULift functor `Type v‚ÇÅ ‚Üí Type (max v‚ÇÅ w)` is isomorphic to the coyoneda functor coming from `punit`. -/
def punitIso : ucoyoneda.{v‚ÇÅ, v‚ÇÅ+1, w}.obj (Opposite.op (PUnit : Type v‚ÇÅ)) ‚âÖ uliftFunctor.{w, v‚ÇÅ} :=
  NatIso.ofComponents
    (fun X =>
      { hom := fun f => ULift.up.{w, v‚ÇÅ} (‚áÉf ‚ü®‚ü©)
        inv := fun x => ‚Üø(fun _ => ‚áÉx) })
    (by aesop_cat)

/-- Taking the `unop` of morphisms is a natural isomorphism. -/
@[simps!]
def objOpOp (X : C) : ucoyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj (op (op X))
                    ‚âÖ uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X :=
  isoWhiskerRight (Coyoneda.objOpOp X) _

end UCoyoneda

namespace Functor

class URepresentable (F : C·µí·µñ ‚•§ Type (max v‚ÇÅ w)) : Prop where
  has_representation : ‚àÉ (X : _) (f : uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ F), IsIso f

instance {X : C} : URepresentable.{v‚ÇÅ, u‚ÇÅ, w} (uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X) where
  has_representation := ‚ü®X, ùüô _, inferInstance‚ü©

class UCorepresentable (F : C ‚•§ Type (max v‚ÇÅ w)) : Prop where
  has_corepresentation : ‚àÉ (X : _) (f : ucoyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ F), IsIso f

instance {X : C·µí·µñ} : UCorepresentable.{v‚ÇÅ, u‚ÇÅ, w} (ucoyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X) where
  has_corepresentation := ‚ü®X, ùüô _, inferInstance‚ü©

section URepresentable

variable (F : C·µí·µñ ‚•§ Type (max v‚ÇÅ w))

variable [URepresentable.{v‚ÇÅ, u‚ÇÅ, w} F]

noncomputable def ureprX : C :=
  (URepresentable.has_representation : ‚àÉ (_ : _) (_ : _ ‚ü∂ F), _).choose
set_option linter.uppercaseLean3 false

noncomputable def ureprF : uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj (Functor.ureprX F) ‚ü∂ F :=
  URepresentable.has_representation.choose_spec.choose

noncomputable def ureprx : F.obj (op F.ureprX) :=
  F.ureprF.app (op F.ureprX) ‚Üø(ùüô F.ureprX)

instance : IsIso F.ureprF :=
  URepresentable.has_representation.choose_spec.choose_spec

noncomputable def ureprW : uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj (Functor.ureprX F) ‚âÖ F :=
  asIso F.ureprF

@[simp]
theorem ureprW_hom : F.ureprW.hom = F.ureprF :=
  rfl

theorem ureprW_app_hom (X : C·µí·µñ) (f : unop X ‚ü∂ F.ureprX) :
    (F.ureprW.app X).hom ‚Üøf = F.map f.op F.ureprx := by
  change F.ureprF.app X ‚Üøf = (F.ureprF.app (op F.ureprX) ‚â´ F.map f.op) ‚Üø(ùüô F.ureprX)
  rw [‚Üê F.ureprF.naturality]
  dsimp [uyoneda, whiskerRight]
  simp

end URepresentable

section UCorepresentable

variable (F : C ‚•§ Type (max v‚ÇÅ w))

variable [Functor.UCorepresentable.{v‚ÇÅ, u‚ÇÅ, w} F]

noncomputable def ucoreprX : C :=
  (UCorepresentable.has_corepresentation : ‚àÉ (_ : _)(_ : _ ‚ü∂ F), _).choose.unop
set_option linter.uppercaseLean3 false

noncomputable def ucoreprF : ucoyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj (op F.ucoreprX) ‚ü∂ F :=
  UCorepresentable.has_corepresentation.choose_spec.choose

noncomputable def ucoreprx : F.obj F.ucoreprX :=
  F.ucoreprF.app F.ucoreprX ‚Üø(ùüô F.ucoreprX)

instance : IsIso F.ucoreprF :=
  UCorepresentable.has_corepresentation.choose_spec.choose_spec

noncomputable def ucoreprW : ucoyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj (op F.ucoreprX) ‚âÖ F :=
  asIso F.ucoreprF

theorem ucoreprW_app_hom (X : C) (f : F.ucoreprX ‚ü∂ X) :
    (F.ucoreprW.app X).hom ‚Üøf = F.map f F.ucoreprx := by
  change F.ucoreprF.app X ‚Üøf = (F.ucoreprF.app F.ucoreprX ‚â´ F.map f) ‚Üø(ùüô F.ucoreprX)
  rw [‚Üê F.ucoreprF.naturality]
  dsimp [ucoyoneda, whiskerRight]
  simp

end UCorepresentable

end Functor

theorem urepresentable_of_nat_iso (F : C·µí·µñ ‚•§ Type (max v‚ÇÅ w)) {G} (i : F ‚âÖ G)
  [Functor.URepresentable.{v‚ÇÅ, u‚ÇÅ, w} F] : Functor.URepresentable.{v‚ÇÅ, u‚ÇÅ, w} G :=
  { has_representation := ‚ü®F.ureprX, F.ureprF ‚â´ i.hom, inferInstance‚ü© }

theorem ucorepresentable_of_nat_iso (F : C ‚•§ Type (max v‚ÇÅ w)) {G} (i : F ‚âÖ G)
  [Functor.UCorepresentable.{v‚ÇÅ, u‚ÇÅ, w} F] : Functor.UCorepresentable.{v‚ÇÅ, u‚ÇÅ, w} G :=
  { has_corepresentation := ‚ü®op F.ucoreprX, F.ucoreprF ‚â´ i.hom, inferInstance‚ü© }

instance : Functor.UCorepresentable.{v‚ÇÅ, v‚ÇÅ+1, w} (uliftFunctor.{max v‚ÇÅ w, v‚ÇÅ}) :=
  ucorepresentable_of_nat_iso (ucoyoneda.{v‚ÇÅ, v‚ÇÅ+1, w}.obj (op PUnit)) UCoyoneda.punitIso

open Opposite

variable (C)

open Yoneda

def uyonedaEvaluation : C·µí·µñ √ó (C·µí·µñ ‚•§ Type (max v‚ÇÅ w)) ‚•§ Type (max u‚ÇÅ v‚ÇÅ w) :=
  evaluationUncurried C·µí·µñ (Type (max v‚ÇÅ w)) ‚ãô uliftFunctor.{u‚ÇÅ}

example : yonedaEvaluation.{v‚ÇÅ, u‚ÇÅ} = uyonedaEvaluation.{v‚ÇÅ, u‚ÇÅ, v‚ÇÅ} := rfl

@[simp]
theorem uyonedaEvaluation_map_down (P Q : C·µí·µñ √ó (C·µí·µñ ‚•§ Type (max v‚ÇÅ w))) (Œ± : P ‚ü∂ Q)
    (x : (uyonedaEvaluation.{v‚ÇÅ, u‚ÇÅ, w} C).obj P) :
    ((uyonedaEvaluation.{v‚ÇÅ, u‚ÇÅ, w} C).map Œ± x).down = Œ±.2.app Q.1 (P.2.map Œ±.1 x.down) :=
  rfl

def uyonedaPairing : C·µí·µñ √ó (C·µí·µñ ‚•§ Type (max v‚ÇÅ w)) ‚•§ Type max u‚ÇÅ v‚ÇÅ w :=
  Functor.prod uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.op (ùü≠ (C·µí·µñ ‚•§ Type (max v‚ÇÅ w)))
  ‚ãô Functor.hom (C·µí·µñ ‚•§ Type (max v‚ÇÅ w))

@[simp]
theorem uyonedaPairing_map (P Q : C·µí·µñ √ó (C·µí·µñ ‚•§ Type (max v‚ÇÅ w))) (Œ± : P ‚ü∂ Q)
  (Œ≤ : (uyonedaPairing.{v‚ÇÅ, u‚ÇÅ, w} C).obj P)
  : (uyonedaPairing.{v‚ÇÅ, u‚ÇÅ, w} C).map Œ± Œ≤ = uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.map Œ±.1.unop ‚â´ Œ≤ ‚â´ Œ±.2 :=
  rfl

def uyoneda_ULiftHom_equiv_iso_ULiftHom_equiv_yoneda
    : uyoneda.{v‚ÇÅ, u‚ÇÅ, w} ‚ãô ULiftHom.equiv.op.congrLeft.functor
    ‚âÖ (ULiftHom.equiv.{v‚ÇÅ, u‚ÇÅ, w}.functor : C ‚•§ ULiftHom C) ‚ãô yoneda := {
  hom := {
    app := fun X => {
      app := fun Y f => ‚Üø‚áÉf
    }
  }
  inv := {
    app := fun X => {
      app := fun Y f => ‚Üø‚áÉf
    }
  }
}

def prodFunctorToProdFunctorProd
    (A : Type u‚ÇÅ) [inst : Category.{v‚ÇÅ} A]
    (B : Type u‚ÇÇ) [inst : Category.{v‚ÇÇ} B]
    (P : Type u‚ÇÉ) [inst : Category.{v‚ÇÉ} P]
    (Q : Type u‚ÇÑ) [inst : Category.{v‚ÇÑ} Q]
    : (A ‚•§ P) √ó (B ‚•§ Q) ‚•§ (A √ó B) ‚•§ (P √ó Q) where
  obj := fun X => X.1.prod X.2
  map := fun {F G} Œ∑ => NatTrans.prod Œ∑.1 Œ∑.2

def prodComp
    {A : Type u‚ÇÅ} [inst : Category.{v‚ÇÅ} A] {P : Type u‚ÇÑ} [inst : Category.{v‚ÇÑ} P]
    {B : Type u‚ÇÇ} [inst : Category.{v‚ÇÇ} B] {Q : Type u‚ÇÖ} [inst : Category.{v‚ÇÖ} Q]
    {C : Type u‚ÇÉ} [inst : Category.{v‚ÇÉ} C] {R : Type u‚ÇÜ} [inst : Category.{v‚ÇÜ} R]
    (F : A ‚•§ B) (G : B ‚•§ C) (H : P ‚•§ Q) (K : Q ‚•§ R)
    : F.prod H ‚ãô G.prod K ‚âÖ (F ‚ãô G).prod (H ‚ãô K) where
  hom := {
    app := fun X => (ùüô (G.obj (F.obj X.1)), ùüô (K.obj (H.obj X.2)))
  }
  inv := {
    app := fun X => (ùüô (G.obj (F.obj X.1)), ùüô (K.obj (H.obj X.2)))
  }

def precomp_equiv_comp_hom_iso_hom
    {A : Type u‚ÇÅ} [inst : Category.{v‚ÇÅ} A] {B : Type u‚ÇÇ} [inst : Category.{v‚ÇÅ} B]
    (e : A ‚âå B) : Functor.hom B ‚âÖ e.inverse.op.prod e.inverse ‚ãô Functor.hom A where
  hom := { app := fun p => e.inverse.map }
  inv := { app := fun p f => e.counitInv.app p.1.unop ‚â´ e.functor.map f ‚â´ e.counit.app p.2,
           naturality := by
            rintro ‚ü®‚ü®X‚ü©, X'‚ü© ‚ü®‚ü®Y‚ü©, Y'‚ü© ‚ü®f, g‚ü©
            ext h
            simp [Functor.prod, Functor.hom] }
  hom_inv_id := by
    ext p f
    rcases p with ‚ü®‚ü®X‚ü©, X'‚ü©
    simp
  inv_hom_id := by
    ext p f
    rcases p with ‚ü®‚ü®X‚ü©, X'‚ü©
    simp
    rw [‚Üê Category.assoc]
    refine' Eq.trans (congr_arg‚ÇÇ _ _ rfl) (Category.id_comp f)
    exact e.symm.functor_unitIso_comp X

def uyonedaPairing_iso_conj_uLift_equiv.{v, u, w'}
    (C : Type u) [Category C]
    : uyonedaPairing.{v, u, w'} C
    ‚âÖ (ULiftHom.equiv.op.prodCongr ULiftHom.equiv.op.congrLeft).functor
      ‚ãô yonedaPairing (ULiftHom.{w'} C) :=
  let e1 : (C·µí·µñ ‚•§ Type (max v w')) ‚âå ((ULiftHom C)·µí·µñ ‚•§ Type (max v w'))
         := ULiftHom.equiv.{v, u, w'}.op.congrLeft
  let œï := prodFunctorToProdFunctorProd
             C·µí·µñ (C·µí·µñ ‚•§ Type (max v w'))
             (C·µí·µñ ‚•§ Type (max v w'))·µí·µñ (C·µí·µñ ‚•§ Type (max v w'))
  let i1 := Functor.associator uyoneda.{v, u, w'} e1.functor e1.inverse
            ‚â™‚â´ NatIso.hcomp (Iso.refl uyoneda.{v, u, w'}) e1.unitIso.symm
            ‚â™‚â´ uyoneda.{v, u, w'}.rightUnitor
  let i2 : (uyoneda ‚ãô e1.functor) ‚ãô e1.inverse
         ‚âÖ (ULiftHom.equiv.functor ‚ãô yoneda) ‚ãô e1.inverse
         := isoWhiskerRight (uyoneda_ULiftHom_equiv_iso_ULiftHom_equiv_yoneda.{v, u, w'} C)
                            (ULiftHom.equiv.op.congrLeft).inverse
  let i3 := (Functor.opHom _ _).mapIso (i2.symm ‚â™‚â´ i1).op
  let i4 := prodComp (Functor.op (@ULiftHom.equiv.{v, u, w'} C _).functor)
                         (Functor.op (@yoneda (ULiftHom.{w'} C) _))
                         ((whiskeringLeft (ULiftHom.{w'} C)·µí·µñ C·µí·µñ (Type (max v w'))).obj
                           (Functor.op ULiftHom.equiv.{v, u, w'}.inverse))
                         (ùü≠ ((ULiftHom.{w'} C)·µí·µñ ‚•§ Type (max v w')))
  isoWhiskerRight (œï.mapIso (Iso.prod i3 e1.unitIso)) _
  ‚â™‚â´ isoWhiskerRight (prodComp (Functor.op ULiftHom.equiv.{v, u, w'}.functor ‚ãô Functor.op yoneda)
                               (Functor.op e1.inverse) e1.functor e1.inverse).symm _
  ‚â™‚â´ Functor.associator _ _ _
  ‚â™‚â´ isoWhiskerLeft _ (precomp_equiv_comp_hom_iso_hom e1).symm
  ‚â™‚â´ isoWhiskerRight (Functor.mapIso (prodFunctorToProdFunctorProd
                                         C·µí·µñ (C·µí·µñ ‚•§ Type (max v w'))
                                         ((ULiftHom C)·µí·µñ ‚•§ Type (max v w'))·µí·µñ
                                         ((ULiftHom C)·µí·µñ ‚•§ Type (max v w')))
                                             (Iso.prod (Iso.refl _) (Functor.rightUnitor _).symm)
                      ‚â™‚â´ i4.symm) _
  ‚â™‚â´ Functor.associator _ _ _

lemma uyonedaPairing_iso_conj_uLift_equiv_hom_app
    (F) (X : C) (Œ∑)
    : (uyonedaPairing_iso_conj_uLift_equiv.{v‚ÇÅ, u‚ÇÅ, w} C).hom.app (op X, F) Œ∑
      = { app := fun y f => F.map (op ‚áÉf) (Œ∑.app (op X) ‚Üø(ùüô X))
          naturality := fun A B ‚ü®f‚ü© => funext (fun g =>
            show F.map (f ‚â´ g).down.op (Œ∑.app (op X) ‚Üø(ùüô X))
                = F.map f.down.op (F.map g.down.op (Œ∑.app (op X) ‚Üø(ùüô X)))
            from Eq.trans (congr_arg‚ÇÇ _ (Eq.trans (congr_arg op (ULiftHom.down.map_comp f g))
                                                  (@op_comp _ _ _ _ _ f.down g.down)) rfl)
                          (FunctorToTypes.map_comp_apply _ _ _ _)) } := by
  apply NatTrans.ext
  ext x f
  obtain ‚ü®x‚ü© := x
  dsimp [Equivalence.prodCongr, ULiftHom.equiv] at f
  simp only [Equivalence.op, ULiftHom.equiv, Functor.id_obj, Functor.comp_obj, ULiftHom.up_obj, ULiftHom.down_obj,
    objDown_objUp, eqToIso_refl, objUp_objDown, Equivalence.congrLeft, Equivalence.mk, Equivalence.adjointifyŒ∑,
    Iso.instTransIso_trans, Functor.prod_obj, Functor.op_obj, unop_op, uyonedaPairing_iso_conj_uLift_equiv,
    prodFunctorToProdFunctorProd, prod_Hom, Functor.opHom_obj, Iso.trans_assoc, Iso.trans_symm, Iso.symm_symm_eq,
    prodComp, whiskeringLeft_obj_obj, Iso.symm_mk, precomp_equiv_comp_hom_iso_hom, Functor.hom_obj,
    Equivalence.Equivalence_mk'_counitInv, NatIso.ofComponents_inv_app, whiskeringLeft_obj_map, Equivalence.counit,
    NatIso.ofComponents_hom_app, Functor.op_map, Quiver.Hom.unop_op, Iso.trans_hom, isoWhiskerRight_hom,
    Functor.mapIso_hom, Iso.prod_hom, Iso.op_hom, Iso.symm_hom, isoWhiskerRight_inv, NatIso.hcomp_hom, Iso.refl_hom,
    Iso.symm_inv, isoWhiskerLeft_inv, op_comp, Category.assoc, Functor.map_comp, isoWhiskerLeft_hom, whiskerRight_comp,
    FunctorToTypes.comp, whiskerRight_app, NatTrans.prod_app, NatTrans.comp_app, Functor.opHom_map_app,
    Functor.rightUnitor_hom_app, op_id, NatTrans.hcomp_app, Functor.leftUnitor_inv_app, Functor.comp_map,
    whiskerLeft_twice, Functor.associator_hom_app, whiskerLeft_app, Functor.associator_inv_app,
    Functor.leftUnitor_hom_app, Category.id_comp, NatTrans.id_app, Functor.id_map, Category.comp_id, Functor.hom_map,
    unop_comp, unop_id, types_id_apply, whiskerLeft_comp, Functor.rightUnitor_inv_app,
    Equivalence.invFunIdAssoc_inv_app, NatIso.op_hom, NatTrans.op_app, yoneda_obj_map, unop_id_op,
    Equivalence.funInvIdAssoc_inv_app, Equivalence.Equivalence_mk'_unit, NatIso.op_inv, Iso.refl_inv,
    FunctorToTypes.map_id_apply, Equivalence.invFunIdAssoc_hom_app, Equivalence.funInvIdAssoc_hom_app,
    Equivalence.Equivalence_mk'_unitInv, yoneda_obj_obj]
  dsimp [uyoneda_ULiftHom_equiv_iso_ULiftHom_equiv_yoneda]
  refine' Eq.trans (Eq.trans _ (congr_fun (Œ∑.naturality _) _)) (types_comp_apply _ _ _)
  exact congr_arg _ (congr_arg _ (Eq.trans (Category.comp_id f.down) (unop_op _)).symm)

lemma uyonedaPairing_iso_conj_uLift_equiv_inv_app
    (F) (X : C) (Œ∑)
    : (uyonedaPairing_iso_conj_uLift_equiv.{v‚ÇÅ, u‚ÇÅ, w} C).inv.app (op X, F) Œ∑
      = { app := fun Y f => F.map (op ‚áÉf) (Œ∑.app (op X) ‚Üø(ùüô X))
          naturality := fun A B ‚ü®f‚ü© => funext (fun g =>
                show F.map (f ‚â´ g.down).op (Œ∑.app (op X) ‚Üø(ùüô X))
                     = F.map ‚ü®f‚ü© (F.map g.down.op (Œ∑.app (op X) ‚Üø(ùüô X)))
                from Eq.trans (congr_arg‚ÇÇ _ (@op_comp _ _ _ _ _ f g.down) rfl)
                              (FunctorToTypes.map_comp_apply _ _ _ _) ) } := by
  apply NatTrans.ext
  ext x f
  obtain ‚ü®x‚ü© := x
  obtain ‚ü®f‚ü© := f
  simp only [Functor.prod_obj, Functor.op_obj, unop_op, Functor.id_obj, Equivalence.op, ULiftHom.equiv,
    Functor.comp_obj, ULiftHom.up_obj, ULiftHom.down_obj, objDown_objUp, eqToIso_refl, objUp_objDown,
    Equivalence.congrLeft, Equivalence.mk, Equivalence.adjointifyŒ∑, Iso.instTransIso_trans,
    uyonedaPairing_iso_conj_uLift_equiv, prodFunctorToProdFunctorProd, prod_Hom, Functor.opHom_obj, Iso.trans_assoc,
    Iso.trans_symm, Iso.symm_symm_eq, prodComp, whiskeringLeft_obj_obj, Iso.symm_mk, precomp_equiv_comp_hom_iso_hom,
    Functor.hom_obj, Equivalence.Equivalence_mk'_counitInv, NatIso.ofComponents_inv_app, whiskeringLeft_obj_map,
    Equivalence.counit, NatIso.ofComponents_hom_app, Functor.op_map, Quiver.Hom.unop_op, Iso.trans_inv,
    isoWhiskerRight_inv, Functor.mapIso_inv, Iso.prod_inv, Iso.refl_inv, Iso.symm_inv, whiskerRight_comp,
    isoWhiskerLeft_inv, Category.assoc, Iso.op_inv, NatIso.hcomp_inv, isoWhiskerLeft_hom, Iso.symm_hom,
    isoWhiskerRight_hom, op_comp, Functor.map_comp, FunctorToTypes.comp, Functor.associator_inv_app, types_id_apply,
    whiskerRight_app, Functor.hom_map, unop_id, Category.comp_id, Category.id_comp, NatTrans.prod_app, NatTrans.id_app,
    Functor.rightUnitor_hom_app, whiskerLeft_app, NatTrans.comp_app, Functor.opHom_map_app, op_id, NatTrans.hcomp_app,
    Functor.leftUnitor_inv_app, Functor.associator_hom_app, Functor.comp_map, whiskerLeft_twice,
    Functor.leftUnitor_hom_app, whiskerLeft_id', Functor.rightUnitor_inv_app, unop_comp,
    Equivalence.funInvIdAssoc_inv_app, Equivalence.Equivalence_mk'_unit, NatIso.op_inv, NatTrans.op_app,
    Equivalence.invFunIdAssoc_inv_app, NatIso.op_hom, Iso.refl_hom, FunctorToTypes.map_id_apply,
    Equivalence.funInvIdAssoc_hom_app, Equivalence.Equivalence_mk'_unitInv, Equivalence.invFunIdAssoc_hom_app]
  refine' Eq.trans _ ((congr_fun (Œ∑.naturality (ULiftHom.up.map f).op) _).trans
                        (types_comp_apply _ _ _))
  refine' congr_arg (Œ∑.app (op x)) _
  refine' ((ULiftHom.up.map_comp (ùüô x) f).trans
          $ (congr_arg‚ÇÇ _ (ULiftHom.up.map_id x) rfl).trans
          $ (Category.id_comp _).trans
          $ (Category.comp_id _).symm.trans
          $ congr_arg‚ÇÇ _ rfl (ULiftHom.up.map_id X).symm)

def evaluationUncurriedTransport {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]
    {C' : Type u‚ÇÇ} [Category.{v‚ÇÇ} C'] {D : Type u‚ÇÉ} [Category.{v‚ÇÉ} D] (e : C ‚âå C')
    : evaluationUncurried C D
    ‚âÖ Functor.prod e.functor ((whiskeringLeft C' C D).obj e.inverse)
      ‚ãô evaluationUncurried C' D where
  hom := { app := fun p => p.snd.map (e.unit.app p.fst)
           naturality := by
            rintro ‚ü®X, F‚ü© ‚ü®Y, G‚ü© ‚ü®œï, Œ∑‚ü©
            dsimp [evaluationUncurried]
            rw [‚Üê Category.assoc, Œ∑.naturality]
            simp only [Category.assoc, Equivalence.inv_fun_map,
                       Functor.comp_obj, Functor.id_obj, Functor.map_comp,
                       NatTrans.naturality, NatTrans.naturality_assoc]
            rw [‚Üê G.map_comp, ‚Üê G.map_comp, ‚Üê G.map_comp, Equivalence.unit,
                ‚Üê Category.assoc, ‚Üê Category.assoc, Equivalence.unitInv,
                ‚Üê NatTrans.comp_app, Iso.hom_inv_id]
            congr
            exact Eq.symm (Category.id_comp œï) }
  inv := { app := fun p => p.snd.map (e.unitInv.app p.fst)
           naturality := by
            rintro ‚ü®X, F‚ü© ‚ü®Y, G‚ü© ‚ü®œï, Œ∑‚ü©
            dsimp [evaluationUncurried]
            rw [‚Üê Category.assoc, Œ∑.naturality]
            simp only [Equivalence.inv_fun_map, Functor.comp_obj,
                       Functor.id_obj, Functor.map_comp, Category.assoc,
                       NatTrans.naturality, NatTrans.naturality_assoc]
            rw [‚Üê G.map_comp, ‚Üê G.map_comp,
                Equivalence.unit, Equivalence.unitInv,
                ‚Üê NatTrans.comp_app, e.unitIso.hom_inv_id]
            congr
            exact Category.comp_id œï }
  hom_inv_id := by
    ext p
    obtain ‚ü®X, F‚ü© := p
    dsimp [Equivalence.unit, Equivalence.unitInv]
    rw [‚Üê F.map_comp, ‚Üê NatTrans.comp_app, Iso.hom_inv_id, NatTrans.id_app]
    exact F.map_id _
  inv_hom_id := by
    ext p
    obtain ‚ü®X, F‚ü© := p
    dsimp [Equivalence.unit, Equivalence.unitInv]
    rw [‚Üê F.map_comp, ‚Üê NatTrans.comp_app, Iso.inv_hom_id, NatTrans.id_app]
    exact F.map_id _

def uyonedaEvaluation_iso_conj_uLift_equiv
    : uyonedaEvaluation.{v‚ÇÅ, u‚ÇÅ, w} C
    ‚âÖ (ULiftHom.equiv.op.prodCongr ULiftHom.equiv.op.congrLeft).functor
      ‚ãô yonedaEvaluation (ULiftHom.{w} C) := by
  dsimp [yonedaEvaluation, uyonedaEvaluation]
  refine' isoWhiskerRight _ _ ‚â™‚â´ Functor.associator _ _ _
  apply evaluationUncurriedTransport

def uyonedaLemma.{u, v, w'} (D : Type u) [Category.{v} D]
    : uyonedaPairing.{v, u, w'} D ‚âÖ uyonedaEvaluation.{v, u, w'} D :=
  uyonedaPairing_iso_conj_uLift_equiv D
  ‚â™‚â´ isoWhiskerLeft _ (yonedaLemma (ULiftHom D))
  ‚â™‚â´ (uyonedaEvaluation_iso_conj_uLift_equiv D).symm

variable {C}

@[simps!]
def uyonedaSections (X : C) (F : C·µí·µñ ‚•§ Type (max v‚ÇÅ w))
    : (uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ F) ‚âÖ ULift.{u‚ÇÅ} (F.obj (op X)) :=
  (uyonedaLemma.{u‚ÇÅ, v‚ÇÅ, w} C).app (op X, F)

lemma uyonedaLemmaApp (X : C) (F : C·µí·µñ ‚•§ Type (max v‚ÇÅ w)) (Œ∑)
    : (uyonedaSections.{v‚ÇÅ, u‚ÇÅ, w} X F).hom Œ∑ = ULift.up (Œ∑.app (op X) (‚Üø (ùüô X))) := by
  dsimp [uyonedaSections]
  rw [‚Üê NatIso.app_hom]
  delta uyonedaLemma
  rw [NatIso.trans_app, NatIso.trans_app]
  dsimp [Iso.symm]
  rw [uyonedaPairing_iso_conj_uLift_equiv_hom_app]
  refine' @Eq.trans _ _ ((uyonedaEvaluation_iso_conj_uLift_equiv.{v‚ÇÅ, u‚ÇÅ, w} C).inv.app (op X, F)
                        $ ULift.up (Œ∑.app (op X) _)) _
                        (congr_arg _
                         $ congr_arg _
                         $ (congr_fun (F.map_id _) _).trans (types_id_apply _ _))
                        _
  simp [uyonedaEvaluation_iso_conj_uLift_equiv, evaluationUncurriedTransport,
        Equivalence.op, ULiftHom.equiv]

lemma uyonedaLemmaInvApp (X : C) (F : C·µí·µñ ‚•§ Type (max v‚ÇÅ w)) (s)
    : (uyonedaSections.{v‚ÇÅ, u‚ÇÅ, w} X F).inv s
    = { app := fun Y f => F.map f.down.op s.down
        naturality := fun ‚ü®A‚ü© ‚ü®B‚ü© ‚ü®f‚ü© => funext $ fun ‚ü®g‚ü© => FunctorToTypes.map_comp_apply F _ _ _ } := by
  dsimp [uyonedaSections]
  delta uyonedaLemma
  rw [‚Üê NatIso.app_inv, NatIso.trans_app, NatIso.trans_app]
  dsimp [Iso.symm, uyonedaEvaluation_iso_conj_uLift_equiv, ULiftHom.equiv,
         evaluationUncurriedTransport, Equivalence.unit, Equivalence.op,
         Equivalence.prodCongr, ULiftHom.objUp]
  refine' Eq.trans (uyonedaPairing_iso_conj_uLift_equiv_inv_app.{v‚ÇÅ, u‚ÇÅ, w} C F X _) _
  ext Y g
  simp only [Functor.prod_obj, Functor.op_obj, unop_op, Functor.id_obj,
             FunctorToTypes.map_id_apply]
  refine' congr_arg _ _

  have h := @yonedaEquiv_symm_app_apply (ULiftHom.{w} C) _ X
                                        (Functor.op ULiftHom.down ‚ãô F)
  dsimp [yonedaEquiv, yonedaSections, Equiv.ulift] at h
  exact (congr_fun
          (congr_fun
            (congr_arg NatTrans.app
            $ congr_arg _ $ congr_arg _
            $ (congr_fun (F.map_id (op X)) _).symm) _) _).trans
        $ (h (F.map (ùüô (op X)) s.down) (op X) ‚Üø(ùüô X)).trans
        $ (congr_fun (F.map_id (op X)) _).trans
        $ congr_fun (F.map_id (op X)) _

def uyonedaEquiv {X : C} {F : C·µí·µñ ‚•§ Type (max v‚ÇÅ w)}
  : (uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ F) ‚âÉ F.obj (op X) :=
  (uyonedaSections.{v‚ÇÅ, u‚ÇÅ, w} X F).toEquiv.trans Equiv.ulift

lemma Equivalence.mk_functor {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
  (F : C ‚•§ D) (G : D ‚•§ C) (Œ± Œ≤ h)
  : (CategoryTheory.Equivalence.mk' F G Œ± Œ≤ h).functor = F :=
  rfl

lemma NatTrans.id_def {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] (F : C ‚•§ D)
  : ùüô F = NatTrans.mk (fun X => ùüô (F.obj X)) := rfl

lemma NatIso.trans_symm {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] {F G H : C ‚•§ D}
  (Œ± : F ‚âÖ G) (Œ≤ : G ‚âÖ H) : (Œ± ‚â™‚â´ Œ≤).symm = Œ≤.symm ‚â™‚â´ Œ±.symm := rfl

@[simp]
theorem uyonedaEquiv_apply {X : C} {F : C·µí·µñ ‚•§ Type (max v‚ÇÅ w)}
    (f : uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ F) :
    uyonedaEquiv f = f.app (op X) ‚Üø(ùüô X) :=
  show ULift.down ((uyonedaSections X F).hom f) = f.app (op X) ‚Üø(ùüô X)
  from by rw [uyonedaLemmaApp]

@[simp]
theorem uyonedaEquiv_symm_app_apply {X : C} {F : C·µí·µñ ‚•§ Type (max v‚ÇÅ w)}
    (x : F.obj (op X)) (Y : C·µí·µñ) (f : Y.unop ‚ü∂ X)
    : (uyonedaEquiv.{v‚ÇÅ, u‚ÇÅ, w}.symm x).app Y ‚Üøf = F.map f.op x := by
  delta uyonedaEquiv
  rw [Equiv.symm_trans_apply, Iso.toEquiv]
  dsimp
  rw [uyonedaLemmaInvApp]
  simp only [op_unop]
  exact rfl

theorem uyonedaEquiv_naturality {X Y : C} {F : C·µí·µñ ‚•§ Type (max v‚ÇÅ w)}
  (f : uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ F) (g : Y ‚ü∂ X)
    : F.map g.op (uyonedaEquiv f) = uyonedaEquiv.{v‚ÇÅ, u‚ÇÅ, w} (uyoneda.map g ‚â´ f) := by
  rw [uyonedaEquiv_apply, uyonedaEquiv_apply]
  simp [uyoneda]
  refine' Eq.trans (types_comp_apply _ _ _).symm _
  rw [‚Üê NatTrans.naturality]
  simp

def uyonedaSectionsSmall {C : Type u‚ÇÅ} [SmallCategory C] (X : C) (F : C·µí·µñ ‚•§ Type (max u‚ÇÅ w)) :
    (uyoneda.{u‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ F) ‚âÖ F.obj (op X) :=
  uyonedaSections.{u‚ÇÅ, u‚ÇÅ, w} X F ‚â™‚â´ uliftSmaller.{w, u‚ÇÅ} (F.obj (op X))

@[simp]
theorem uyonedaSectionsSmall_hom {C : Type u‚ÇÅ} [SmallCategory C] (X : C) (F : C·µí·µñ ‚•§ Type (max u‚ÇÅ w))
    (f : uyoneda.{u‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ F)
    : (uyonedaSectionsSmall.{u‚ÇÅ, w} X F).hom f = f.app _ ‚Üø(ùüô _) := by
  dsimp only [uyonedaSectionsSmall, uliftSmaller, Iso.trans, types_comp_apply]
  rw [uyonedaLemmaApp]
  exact rfl

@[simp]
theorem uyonedaSectionsSmall_inv_app_apply {C : Type u‚ÇÅ} [SmallCategory C] (X : C)
    (F : C·µí·µñ ‚•§ Type (max u‚ÇÅ w)) (t : F.obj (op X)) (Y : C·µí·µñ) (f : Y.unop ‚ü∂ X) :
    ((uyonedaSectionsSmall.{u‚ÇÅ, w} X F).inv t).app Y ‚Üøf = F.map f.op t := by
  dsimp only [uyonedaSectionsSmall, uliftSmaller, Iso.trans, types_comp_apply]
  rw [uyonedaLemmaInvApp]

attribute [local ext] Functor.ext

def curriedUYonedaLemma {C : Type u‚ÇÅ} [SmallCategory C] :
    (uyoneda.{u‚ÇÅ, u‚ÇÅ, w}.op ‚ãô coyoneda.{max u‚ÇÅ w, max (u‚ÇÅ + 1) (w + 1)}
      : C·µí·µñ ‚•§ (C·µí·µñ ‚•§ Type (max u‚ÇÅ w)) ‚•§ Type (max u‚ÇÅ w))
    ‚âÖ evaluation C·µí·µñ (Type (max u‚ÇÅ w)) := by
  refine' eqToIso _ ‚â™‚â´ curry.mapIso (uyonedaLemma.{u‚ÇÅ, u‚ÇÅ, w} C ‚â™‚â´ isoWhiskerLeft (evaluationUncurried C·µí·µñ (Type (max u‚ÇÅ w))) uliftFunctorSmaller.{w, u‚ÇÅ}) ‚â™‚â´ eqToIso _
  . apply Functor.ext
    . intro X Y f
      simp only [curry, uyoneda, ucoyoneda, curryObj, uyonedaPairing]
      dsimp
      apply NatTrans.ext
      dsimp at *
      funext F g
      apply NatTrans.ext
      simp
    . intro X
      simp only [curry, uyoneda, ucoyoneda, curryObj, uyonedaPairing]
      aesop_cat
  . apply Functor.ext
    . intro X Y f
      simp only [curry, uyoneda, ucoyoneda, curryObj, uyonedaPairing]
      dsimp
      apply NatTrans.ext
      dsimp at *
      funext F g
      simp
    . intro X
      simp only [curry, uyoneda, ucoyoneda, curryObj, uyonedaPairing]
      aesop_cat

def curriedUYonedaLemma' {C : Type u‚ÇÅ} [SmallCategory C] :
    @yoneda (C·µí·µñ ‚•§ Type (max u‚ÇÅ w)) _
      ‚ãô (whiskeringLeft C·µí·µñ (C·µí·µñ ‚•§ Type (max u‚ÇÅ w))·µí·µñ (Type (max u‚ÇÅ w))).obj
           uyoneda.{u‚ÇÅ, u‚ÇÅ, w}.op
    ‚âÖ ùü≠ (C·µí·µñ ‚•§ Type (max u‚ÇÅ w)) := by
  refine eqToIso ?_ ‚â™‚â´ curry.mapIso (isoWhiskerLeft (Prod.swap _ _) (uyonedaLemma.{u‚ÇÅ, u‚ÇÅ, w} C ‚â™‚â´ isoWhiskerLeft (evaluationUncurried C·µí·µñ (Type (max u‚ÇÅ w))) uliftFunctorSmaller.{w, u‚ÇÅ} : _)) ‚â™‚â´ eqToIso ?_
  ¬∑ apply Functor.ext
    ¬∑ intro X Y f
      simp only [curry, uyoneda, ucoyoneda, curryObj, uyonedaPairing]
      aesop_cat
  ¬∑ apply Functor.ext
    ¬∑ intro X Y f
      aesop_cat

end CategoryTheory
