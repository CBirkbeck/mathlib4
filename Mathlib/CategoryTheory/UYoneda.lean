import Mathlib.CategoryTheory.Types
import Mathlib.CategoryTheory.Whiskering
import Mathlib.CategoryTheory.Category.ULift
import Mathlib.CategoryTheory.Yoneda
import Mathlib.CategoryTheory.Products
import Mathlib.Data.ULift

universe v‚ÇÉ v‚ÇÇ v‚ÇÅ u‚ÇÉ u‚ÇÇ u‚ÇÅ w

namespace CategoryTheory

open Opposite

-- precedence?
local notation:max "‚Üø" x:max => ULift.up x
local notation:max "‚áÉ" x:max => ULift.down x

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]

def uyoneda : C ‚•§ C·µí·µñ ‚•§ Type (max v‚ÇÅ w) :=
  yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{(max v‚ÇÅ w), v‚ÇÅ}

def ucoyoneda : C·µí·µñ ‚•§ C ‚•§ Type (max v‚ÇÅ w) :=
  coyoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{(max v‚ÇÅ w), v‚ÇÅ}

namespace UYoneda

@[simp]
theorem naturality {X Y : C} (Œ± : uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj Y)
    {Z Z' : C} (f : Z ‚ü∂ Z') (h : Z' ‚ü∂ X)
    : f ‚â´ ‚áÉ (Œ±.app (op Z') ‚Üøh) = ‚áÉ(Œ±.app (op Z) ‚Üø(f ‚â´ h)) :=
  congr_arg ULift.down (FunctorToTypes.naturality _ _ Œ± f.op ‚Üøh).symm

noncomputable
instance uyonedaFull : Full (uyoneda.{v‚ÇÅ, u‚ÇÅ, w} : C ‚•§ C·µí·µñ ‚•§ Type (max v‚ÇÅ w)) :=
  Full.comp _ _

instance uyoneda_faithful : Faithful (uyoneda.{v‚ÇÅ, u‚ÇÅ, w} : C ‚•§ C·µí·µñ ‚•§ Type (max v‚ÇÅ w)) :=
  Faithful.comp _ _

end UYoneda

namespace UCoyoneda

@[simp]
theorem naturality {X Y : C·µí·µñ} (Œ± : ucoyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ ucoyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj Y)
    {Z Z' : C} (f : Z' ‚ü∂ Z)
    (h : unop X ‚ü∂ Z') : ‚áÉ(Œ±.app Z' ‚Üøh) ‚â´ f = ‚áÉ(Œ±.app Z ‚Üø(h ‚â´ f)) :=
  congr_arg ULift.down (FunctorToTypes.naturality _ _ Œ± f ‚Üøh).symm

noncomputable
instance ucoyonedaFull : Full (ucoyoneda.{v‚ÇÅ, u‚ÇÅ, w} : C·µí·µñ ‚•§ C ‚•§ Type _) :=
  Full.comp _ _

instance ucoyoneda_faithful : Faithful (ucoyoneda.{v‚ÇÅ, u‚ÇÅ, w} : C·µí·µñ ‚•§ C ‚•§ Type _) :=
  Faithful.comp _ _

/-- The ULift functor `Type v‚ÇÅ ‚Üí Type (max v‚ÇÅ w)` is isomorphic to the coyoneda functor coming from `punit`. -/
def punitIso : ucoyoneda.{v‚ÇÅ, v‚ÇÅ+1, w}.obj (Opposite.op (PUnit : Type v‚ÇÅ)) ‚âÖ uliftFunctor.{w, v‚ÇÅ} :=
  NatIso.ofComponents
    (fun X =>
      { hom := fun f => ULift.up.{w, v‚ÇÅ} (‚áÉf ‚ü®‚ü©)
        inv := fun x => ‚Üø(fun _ => ‚áÉx) })
    (by aesop_cat)

/-- Taking the `unop` of morphisms is a natural isomorphism. -/
@[simps!]
def objOpOp (X : C) : ucoyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj (op (op X))
                    ‚âÖ uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X :=
  isoWhiskerRight (Coyoneda.objOpOp X) _

end UCoyoneda

namespace Functor

class URepresentable (F : C·µí·µñ ‚•§ Type (max v‚ÇÅ w)) : Prop where
  has_representation : ‚àÉ (X : _) (f : uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ F), IsIso f

instance {X : C} : URepresentable.{v‚ÇÅ, u‚ÇÅ, w} (uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X) where
  has_representation := ‚ü®X, ùüô _, inferInstance‚ü©

class UCorepresentable (F : C ‚•§ Type (max v‚ÇÅ w)) : Prop where
  has_corepresentation : ‚àÉ (X : _) (f : ucoyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ F), IsIso f

instance {X : C·µí·µñ} : UCorepresentable.{v‚ÇÅ, u‚ÇÅ, w} (ucoyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X) where
  has_corepresentation := ‚ü®X, ùüô _, inferInstance‚ü©

section URepresentable

variable (F : C·µí·µñ ‚•§ Type (max v‚ÇÅ w))

variable [URepresentable.{v‚ÇÅ, u‚ÇÅ, w} F]

noncomputable def ureprX : C :=
  (URepresentable.has_representation : ‚àÉ (_ : _) (_ : _ ‚ü∂ F), _).choose
set_option linter.uppercaseLean3 false

noncomputable def ureprF : uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj (Functor.ureprX F) ‚ü∂ F :=
  URepresentable.has_representation.choose_spec.choose

noncomputable def ureprx : F.obj (op F.ureprX) :=
  F.ureprF.app (op F.ureprX) ‚Üø(ùüô F.ureprX)

instance : IsIso F.ureprF :=
  URepresentable.has_representation.choose_spec.choose_spec

noncomputable def ureprW : uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj (Functor.ureprX F) ‚âÖ F :=
  asIso F.ureprF

@[simp]
theorem ureprW_hom : F.ureprW.hom = F.ureprF :=
  rfl

theorem ureprW_app_hom (X : C·µí·µñ) (f : unop X ‚ü∂ F.ureprX) :
    (F.ureprW.app X).hom ‚Üøf = F.map f.op F.ureprx := by
  change F.ureprF.app X ‚Üøf = (F.ureprF.app (op F.ureprX) ‚â´ F.map f.op) ‚Üø(ùüô F.ureprX)
  rw [‚Üê F.ureprF.naturality]
  dsimp [uyoneda, whiskerRight]
  simp

end URepresentable

section UCorepresentable

variable (F : C ‚•§ Type (max v‚ÇÅ w))

variable [Functor.UCorepresentable.{v‚ÇÅ, u‚ÇÅ, w} F]

noncomputable def ucoreprX : C :=
  (UCorepresentable.has_corepresentation : ‚àÉ (_ : _)(_ : _ ‚ü∂ F), _).choose.unop
set_option linter.uppercaseLean3 false

noncomputable def ucoreprF : ucoyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj (op F.ucoreprX) ‚ü∂ F :=
  UCorepresentable.has_corepresentation.choose_spec.choose

noncomputable def ucoreprx : F.obj F.ucoreprX :=
  F.ucoreprF.app F.ucoreprX ‚Üø(ùüô F.ucoreprX)

instance : IsIso F.ucoreprF :=
  UCorepresentable.has_corepresentation.choose_spec.choose_spec

noncomputable def ucoreprW : ucoyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj (op F.ucoreprX) ‚âÖ F :=
  asIso F.ucoreprF

theorem ucoreprW_app_hom (X : C) (f : F.ucoreprX ‚ü∂ X) :
    (F.ucoreprW.app X).hom ‚Üøf = F.map f F.ucoreprx := by
  change F.ucoreprF.app X ‚Üøf = (F.ucoreprF.app F.ucoreprX ‚â´ F.map f) ‚Üø(ùüô F.ucoreprX)
  rw [‚Üê F.ucoreprF.naturality]
  dsimp [ucoyoneda, whiskerRight]
  simp

end UCorepresentable

end Functor

theorem urepresentable_of_nat_iso (F : C·µí·µñ ‚•§ Type (max v‚ÇÅ w)) {G} (i : F ‚âÖ G)
  [Functor.URepresentable.{v‚ÇÅ, u‚ÇÅ, w} F] : Functor.URepresentable.{v‚ÇÅ, u‚ÇÅ, w} G :=
  { has_representation := ‚ü®F.ureprX, F.ureprF ‚â´ i.hom, inferInstance‚ü© }

theorem ucorepresentable_of_nat_iso (F : C ‚•§ Type (max v‚ÇÅ w)) {G} (i : F ‚âÖ G)
  [Functor.UCorepresentable.{v‚ÇÅ, u‚ÇÅ, w} F] : Functor.UCorepresentable.{v‚ÇÅ, u‚ÇÅ, w} G :=
  { has_corepresentation := ‚ü®op F.ucoreprX, F.ucoreprF ‚â´ i.hom, inferInstance‚ü© }

instance : Functor.UCorepresentable.{v‚ÇÅ, v‚ÇÅ+1, w} (uliftFunctor.{max v‚ÇÅ w, v‚ÇÅ}) :=
  ucorepresentable_of_nat_iso (ucoyoneda.{v‚ÇÅ, v‚ÇÅ+1, w}.obj (op PUnit)) UCoyoneda.punitIso

open Opposite

variable (C)

open Yoneda

def uyonedaEvaluation : C·µí·µñ √ó (C·µí·µñ ‚•§ Type (max v‚ÇÅ w)) ‚•§ Type (max u‚ÇÅ v‚ÇÅ w) :=
  evaluationUncurried C·µí·µñ (Type (max v‚ÇÅ w)) ‚ãô uliftFunctor.{u‚ÇÅ}

example : yonedaEvaluation.{v‚ÇÅ, u‚ÇÅ} = uyonedaEvaluation.{v‚ÇÅ, u‚ÇÅ, v‚ÇÅ} := rfl

@[simp]
theorem uyonedaEvaluation_map_down (P Q : C·µí·µñ √ó (C·µí·µñ ‚•§ Type (max v‚ÇÅ w))) (Œ± : P ‚ü∂ Q)
    (x : (uyonedaEvaluation.{v‚ÇÅ, u‚ÇÅ, w} C).obj P) :
    ((uyonedaEvaluation.{v‚ÇÅ, u‚ÇÅ, w} C).map Œ± x).down = Œ±.2.app Q.1 (P.2.map Œ±.1 x.down) :=
  rfl

def uyonedaPairing : C·µí·µñ √ó (C·µí·µñ ‚•§ Type (max v‚ÇÅ w)) ‚•§ Type max u‚ÇÅ v‚ÇÅ w :=
  Functor.prod uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.op (ùü≠ (C·µí·µñ ‚•§ Type (max v‚ÇÅ w)))
  ‚ãô Functor.hom (C·µí·µñ ‚•§ Type (max v‚ÇÅ w))

@[simp]
theorem uyonedaPairing_map (P Q : C·µí·µñ √ó (C·µí·µñ ‚•§ Type (max v‚ÇÅ w))) (Œ± : P ‚ü∂ Q)
  (Œ≤ : (uyonedaPairing.{v‚ÇÅ, u‚ÇÅ, w} C).obj P)
  : (uyonedaPairing.{v‚ÇÅ, u‚ÇÅ, w} C).map Œ± Œ≤ = uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.map Œ±.1.unop ‚â´ Œ≤ ‚â´ Œ±.2 :=
  rfl

def uyoneda_ULiftHom_equiv_iso_ULiftHom_equiv_yoneda
  : uyoneda.{v‚ÇÅ, u‚ÇÅ, w} ‚ãô ULiftHom.equiv.op.congrLeft.functor
  ‚âÖ (ULiftHom.equiv.{v‚ÇÅ, u‚ÇÅ, w}.functor : C ‚•§ ULiftHom C) ‚ãô yoneda := sorry

def uyonedaPairing_iso_conj_uLift_equiv
  : uyonedaPairing.{v‚ÇÅ, u‚ÇÅ, w} C
  ‚âÖ (ULiftHom.equiv.op.prodCongr ULiftHom.equiv.op.congrLeft).functor
    ‚ãô yonedaPairing (ULiftHom.{max v‚ÇÅ w} C) := sorry

def uyonedaEvaluation_iso_conj_uLift_equiv
  : uyonedaEvaluation.{v‚ÇÅ, u‚ÇÅ, w} C
  ‚âÖ (ULiftHom.equiv.op.prodCongr ULiftHom.equiv.op.congrLeft).functor
    ‚ãô yonedaEvaluation (ULiftHom.{max v‚ÇÅ w} C) := sorry

def uyonedaLemma : uyonedaPairing.{v‚ÇÅ, u‚ÇÅ, w} C ‚âÖ uyonedaEvaluation.{v‚ÇÅ, u‚ÇÅ, w} C :=
  uyonedaPairing_iso_conj_uLift_equiv C
  ‚â™‚â´ isoWhiskerLeft _ (yonedaLemma (ULiftHom C))
  ‚â™‚â´ (uyonedaEvaluation_iso_conj_uLift_equiv C).symm

variable {C}

@[simps!]
def uyonedaSections (X : C) (F : C·µí·µñ ‚•§ Type (max v‚ÇÅ w))
  : (uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ F) ‚âÖ ULift.{u‚ÇÅ} (F.obj (op X)) :=
  (uyonedaLemma.{v‚ÇÅ, u‚ÇÅ, w} C).app (op X, F)

def uyonedaEquiv {X : C} {F : C·µí·µñ ‚•§ Type (max v‚ÇÅ w)}
  : (uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ F) ‚âÉ F.obj (op X) :=
  (uyonedaSections.{v‚ÇÅ, u‚ÇÅ, w} X F).toEquiv.trans Equiv.ulift

@[simp]
theorem uyonedaEquiv_apply {X : C} {F : C·µí·µñ ‚•§ Type (max v‚ÇÅ w)}
    (f : uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ F) :
    uyonedaEquiv f = f.app (op X) ‚Üø(ùüô X) := sorry

@[simp]
theorem uyonedaEquiv_symm_app_apply {X : C} {F : C·µí·µñ ‚•§ Type (max v‚ÇÅ w)}
    (x : F.obj (op X)) (Y : C·µí·µñ) (f : Y.unop ‚ü∂ X)
    : (uyonedaEquiv.{v‚ÇÅ, u‚ÇÅ, w}.symm x).app Y ‚Üøf = F.map f.op x := sorry

theorem uyonedaEquiv_naturality {X Y : C} {F : C·µí·µñ ‚•§ Type (max v‚ÇÅ w)}
  (f : uyoneda.{v‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ F) (g : Y ‚ü∂ X)
  : F.map g.op (uyonedaEquiv f) = uyonedaEquiv.{v‚ÇÅ, u‚ÇÅ, w} (uyoneda.map g ‚â´ f) := by
  admit
  -- change (f.app (op X) ‚â´ F.map g.op) ‚Üø(ùüô X) = f.app (op Y) ‚Üø(ùüô Y ‚â´ g)
  -- rw [‚Üê f.naturality]
  -- dsimp
  -- simp

def uyonedaSectionsSmall {C : Type u‚ÇÅ} [SmallCategory C] (X : C) (F : C·µí·µñ ‚•§ Type (max u‚ÇÅ w)) :
    (uyoneda.{u‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ F) ‚âÖ F.obj (op X) :=
  uyonedaSections.{u‚ÇÅ, u‚ÇÅ, w} X F ‚â™‚â´ uliftSmaller.{u‚ÇÅ, w} (F.obj (op X))

@[simp]
theorem uyonedaSectionsSmall_hom {C : Type u‚ÇÅ} [SmallCategory C] (X : C) (F : C·µí·µñ ‚•§ Type (max u‚ÇÅ w))
    (f : uyoneda.{u‚ÇÅ, u‚ÇÅ, w}.obj X ‚ü∂ F)
    : (uyonedaSectionsSmall.{u‚ÇÅ, w} X F).hom f = f.app _ ‚Üø(ùüô _) := sorry

@[simp]
theorem uyonedaSectionsSmall_inv_app_apply {C : Type u‚ÇÅ} [SmallCategory C] (X : C)
    (F : C·µí·µñ ‚•§ Type (max u‚ÇÅ w)) (t : F.obj (op X)) (Y : C·µí·µñ) (f : Y.unop ‚ü∂ X) :
    ((uyonedaSectionsSmall.{u‚ÇÅ, w} X F).inv t).app Y ‚Üøf = F.map f.op t := sorry

attribute [local ext] Functor.ext

def curriedUYonedaLemma {C : Type u‚ÇÅ} [SmallCategory C] :
    (uyoneda.{u‚ÇÅ, u‚ÇÅ, w}.op ‚ãô coyoneda.{max u‚ÇÅ w, max (u‚ÇÅ + 1) (w + 1)}
      : C·µí·µñ ‚•§ (C·µí·µñ ‚•§ Type (max u‚ÇÅ w)) ‚•§ Type (max u‚ÇÅ w))
    ‚âÖ evaluation C·µí·µñ (Type (max u‚ÇÅ w)) := sorry

/-- The curried version of yoneda lemma when `C` is small. -/
def curriedUYonedaLemma' {C : Type u‚ÇÅ} [SmallCategory C] :
    @yoneda (C·µí·µñ ‚•§ Type (max u‚ÇÅ w)) _
      ‚ãô (whiskeringLeft C·µí·µñ (C·µí·µñ ‚•§ Type (max u‚ÇÅ w))·µí·µñ (Type (max u‚ÇÅ w))).obj
           uyoneda.{u‚ÇÅ, u‚ÇÅ, w}.op
    ‚âÖ ùü≠ (C·µí·µñ ‚•§ Type (max u‚ÇÅ w))
    := by admit

end CategoryTheory
