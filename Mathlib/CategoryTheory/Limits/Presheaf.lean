/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import Mathlib.CategoryTheory.Adjunction.Limits
import Mathlib.CategoryTheory.Adjunction.Opposites
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Limits.FunctorCategory
import Mathlib.CategoryTheory.Limits.KanExtension
import Mathlib.CategoryTheory.Limits.Shapes.Terminal
import Mathlib.CategoryTheory.Limits.Types

#align_import category_theory.limits.presheaf from "leanprover-community/mathlib"@"70fd9563a21e7b963887c9360bd29b2393e6225a"

/-!
# Colimit of representables

This file constructs an adjunction `yonedaAdjunction` between `(C·µí·µñ ‚•§ Type u)` and `‚Ñ∞` given a
functor `A : C ‚•§ ‚Ñ∞`, where the right adjoint sends `(E : ‚Ñ∞)` to `c ‚Ü¶ (A.obj c ‚ü∂ E)` (provided `‚Ñ∞`
has colimits).

This adjunction is used to show that every presheaf is a colimit of representables. This result is
also known as the density theorem, the co-Yoneda lemma and the Ninja Yoneda lemma.

Further, the left adjoint `colimitAdj.extendAlongYoneda : (C·µí·µñ ‚•§ Type u) ‚•§ ‚Ñ∞` satisfies
`yoneda ‚ãô L ‚âÖ A`, that is, an extension of `A : C ‚•§ ‚Ñ∞` to `(C·µí·µñ ‚•§ Type u) ‚•§ ‚Ñ∞` through
`yoneda : C ‚•§ C·µí·µñ ‚•§ Type u`. It is the left Kan extension of `A` along the yoneda embedding,
sometimes known as the Yoneda extension, as proved in `extendAlongYonedaIsoKan`.

`uniqueExtensionAlongYoneda` shows `extendAlongYoneda` is unique amongst cocontinuous functors
with this property, establishing the presheaf category as the free cocompletion of a small category.

We also give a direct pedestrian proof that every presheaf is a colimit of representables. This
version of the proof is valid for any category `C`, even if it is not small.

## Tags
colimit, representable, presheaf, free cocompletion

## References
* [S. MacLane, I. Moerdijk, *Sheaves in Geometry and Logic*][MM92]
* https://ncatlab.org/nlab/show/Yoneda+extension
-/

set_option autoImplicit true


namespace CategoryTheory

open Category Limits

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

section SmallCategory

variable {C : Type u‚ÇÅ} [SmallCategory C]

variable {‚Ñ∞ : Type u‚ÇÇ} [Category.{u‚ÇÅ} ‚Ñ∞]

variable (A : C ‚•§ ‚Ñ∞)

namespace ColimitAdj

/--
The functor taking `(E : ‚Ñ∞) (c : C·µí·µñ)` to the homset `(A.obj C ‚ü∂ E)`. It is shown in `L_adjunction`
that this functor has a left adjoint (provided `E` has colimits) given by taking colimits over
categories of elements.
In the case where `‚Ñ∞ = C·µí·µñ ‚•§ Type u` and `A = yoneda`, this functor is isomorphic to the identity.

Defined as in [MM92], Chapter I, Section 5, Theorem 2.
-/
@[simps!]
def restrictedYoneda : ‚Ñ∞ ‚•§ C·µí·µñ ‚•§ Type u‚ÇÅ :=
  yoneda ‚ãô (whiskeringLeft _ _ (Type u‚ÇÅ)).obj (Functor.op A)
#align category_theory.colimit_adj.restricted_yoneda CategoryTheory.ColimitAdj.restrictedYoneda

/--
The functor `restrictedYoneda` is isomorphic to the identity functor when evaluated at the yoneda
embedding.
-/
def restrictedYonedaYoneda : restrictedYoneda (yoneda : C ‚•§ C·µí·µñ ‚•§ Type u‚ÇÅ) ‚âÖ ùü≠ _ :=
  NatIso.ofComponents fun P =>
    NatIso.ofComponents (fun X => yonedaSectionsSmall X.unop _) @ fun X Y f =>
      funext fun x => by
        dsimp
        -- ‚ä¢ NatTrans.app x { unop := Y.unop } (ùüô Y.unop ‚â´ f.unop) = P.map f (NatTrans.ap ‚Ä¶
        have : x.app X (CategoryStruct.id (Opposite.unop X)) =
            (x.app X (ùüô (Opposite.unop X)))
              := by rfl
        rw [this]
        -- ‚ä¢ NatTrans.app x { unop := Y.unop } (ùüô Y.unop ‚â´ f.unop) = P.map f (NatTrans.ap ‚Ä¶
        rw [‚Üê FunctorToTypes.naturality _ _ x f (ùüô _)]
        -- ‚ä¢ NatTrans.app x { unop := Y.unop } (ùüô Y.unop ‚â´ f.unop) = NatTrans.app x Y ((y ‚Ä¶
        simp only [id_comp, Functor.op_obj, Opposite.unop_op, yoneda_obj_map, comp_id]
        -- üéâ no goals
#align category_theory.colimit_adj.restricted_yoneda_yoneda CategoryTheory.ColimitAdj.restrictedYonedaYoneda

/-- (Implementation). The equivalence of homsets which helps construct the left adjoint to
`colimitAdj.restrictedYoneda`.
It is shown in `restrictYonedaHomEquivNatural` that this is a natural bijection.
-/
def restrictYonedaHomEquiv (P : C·µí·µñ ‚•§ Type u‚ÇÅ) (E : ‚Ñ∞)
    {c : Cocone ((CategoryOfElements.œÄ P).leftOp ‚ãô A)} (t : IsColimit c) :
    (c.pt ‚ü∂ E) ‚âÉ (P ‚ü∂ (restrictedYoneda A).obj E) :=
  ((uliftTrivial _).symm ‚â™‚â´ t.homIso' E).toEquiv.trans
    { toFun := fun k =>
        { app := fun c p => k.1 (Opposite.op ‚ü®_, p‚ü©)
          naturality := fun c c' f =>
            funext fun p =>
              (k.2
                  (Quiver.Hom.op ‚ü®f, rfl‚ü© :
                    (Opposite.op ‚ü®c', P.map f p‚ü© : P.Elements·µí·µñ) ‚ü∂ Opposite.op ‚ü®c, p‚ü©)).symm }
      invFun := fun œÑ =>
        { val := fun p => œÑ.app p.unop.1 p.unop.2
          property := @fun p p' f => by
            simp_rw [‚Üê f.unop.2]
            -- ‚ä¢ ((CategoryOfElements.œÄ P).leftOp ‚ãô A).map f ‚â´ NatTrans.app œÑ p'.unop.fst p'. ‚Ä¶
            apply (congr_fun (œÑ.naturality f.unop.1) p'.unop.2).symm }
            -- üéâ no goals
      left_inv := by
        rintro ‚ü®k‚ÇÅ, k‚ÇÇ‚ü©
        -- ‚ä¢ (fun œÑ => { val := fun p => NatTrans.app œÑ p.unop.fst p.unop.snd, property : ‚Ä¶
        ext
        -- ‚ä¢ ‚Üë((fun œÑ => { val := fun p => NatTrans.app œÑ p.unop.fst p.unop.snd, property ‚Ä¶
        dsimp
        -- ‚ä¢ k‚ÇÅ (Opposite.op { fst := x‚úù.unop.fst, snd := x‚úù.unop.snd }) = k‚ÇÅ x‚úù
        congr 1
        -- üéâ no goals
      right_inv := by
        rintro ‚ü®_, _‚ü©
        -- ‚ä¢ (fun k => NatTrans.mk fun c p => ‚Üëk (Opposite.op { fst := c, snd := p })) (( ‚Ä¶
        rfl }
        -- üéâ no goals
#align category_theory.colimit_adj.restrict_yoneda_hom_equiv CategoryTheory.ColimitAdj.restrictYonedaHomEquiv

/--
(Implementation). Show that the bijection in `restrictYonedaHomEquiv` is natural (on the right).
-/
theorem restrictYonedaHomEquiv_natural (P : C·µí·µñ ‚•§ Type u‚ÇÅ) (E‚ÇÅ E‚ÇÇ : ‚Ñ∞) (g : E‚ÇÅ ‚ü∂ E‚ÇÇ) {c : Cocone _}
    (t : IsColimit c) (k : c.pt ‚ü∂ E‚ÇÅ) :
    restrictYonedaHomEquiv A P E‚ÇÇ t (k ‚â´ g) =
      restrictYonedaHomEquiv A P E‚ÇÅ t k ‚â´ (restrictedYoneda A).map g := by
  ext x X
  -- ‚ä¢ NatTrans.app (‚Üë(restrictYonedaHomEquiv A P E‚ÇÇ t) (k ‚â´ g)) x X = NatTrans.app ‚Ä¶
  apply (assoc _ _ _).symm
  -- üéâ no goals
#align category_theory.colimit_adj.restrict_yoneda_hom_equiv_natural CategoryTheory.ColimitAdj.restrictYonedaHomEquiv_natural

variable [HasColimits ‚Ñ∞]

/--
The left adjoint to the functor `restrictedYoneda` (shown in `yonedaAdjunction`). It is also an
extension of `A` along the yoneda embedding (shown in `isExtensionAlongYoneda`), in particular
it is the left Kan extension of `A` through the yoneda embedding.
-/
noncomputable def extendAlongYoneda : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞ :=
  Adjunction.leftAdjointOfEquiv (fun P E => restrictYonedaHomEquiv A P E (colimit.isColimit _))
    fun P E E' g => restrictYonedaHomEquiv_natural A P E E' g _
#align category_theory.colimit_adj.extend_along_yoneda CategoryTheory.ColimitAdj.extendAlongYoneda

@[simp]
theorem extendAlongYoneda_obj (P : C·µí·µñ ‚•§ Type u‚ÇÅ) :
    (extendAlongYoneda A).obj P = colimit ((CategoryOfElements.œÄ P).leftOp ‚ãô A) :=
  rfl
#align category_theory.colimit_adj.extend_along_yoneda_obj CategoryTheory.ColimitAdj.extendAlongYoneda_obj

-- porting note: adding this lemma because lean 4 ext no longer applies all ext lemmas when
-- stuck (and hence can see through definitional equalities). The previous lemma shows that
-- `(extendAlongYoneda A).obj P` is definitionally a colimit, and the ext lemma is just
-- a special case of `CategoryTheory.Limits.colimit.hom_ext`.
-- See https://github.com/leanprover-community/mathlib4/issues/5229
@[ext] lemma extendAlongYoneda_obj.hom_ext {P : C·µí·µñ ‚•§ Type u‚ÇÅ}
    {f f' : (extendAlongYoneda A).obj P ‚ü∂ X}
    (w : ‚àÄ j, colimit.Œπ ((CategoryOfElements.œÄ P).leftOp ‚ãô A) j ‚â´ f =
      colimit.Œπ ((CategoryOfElements.œÄ P).leftOp ‚ãô A) j ‚â´ f') : f = f' :=
CategoryTheory.Limits.colimit.hom_ext w

theorem extendAlongYoneda_map {X Y : C·µí·µñ ‚•§ Type u‚ÇÅ} (f : X ‚ü∂ Y) :
    (extendAlongYoneda A).map f =
      colimit.pre ((CategoryOfElements.œÄ Y).leftOp ‚ãô A) (CategoryOfElements.map f).op := by
  ext J
  -- ‚ä¢ colimit.Œπ ((CategoryOfElements.œÄ X).leftOp ‚ãô A) J ‚â´ (extendAlongYoneda A).ma ‚Ä¶
  erw [colimit.Œπ_pre ((CategoryOfElements.œÄ Y).leftOp ‚ãô A) (CategoryOfElements.map f).op]
  -- ‚ä¢ colimit.Œπ ((CategoryOfElements.œÄ X).leftOp ‚ãô A) J ‚â´ (extendAlongYoneda A).ma ‚Ä¶
  dsimp only [extendAlongYoneda, restrictYonedaHomEquiv, IsColimit.homIso', IsColimit.homIso,
    uliftTrivial]
  -- porting note: in mathlib3 the rest of the proof was `simp, refl`; this is squeezed
  -- and appropriately reordered, presumably because of a non-confluence issue.
  simp only [Adjunction.leftAdjointOfEquiv_map, Iso.symm_mk, Iso.toEquiv_comp, Equiv.coe_trans,
    Equiv.coe_fn_mk, Iso.toEquiv_fun, Equiv.symm_trans_apply, Equiv.coe_fn_symm_mk,
    Iso.toEquiv_symm_fun, id.def, colimit.isColimit_desc, colimit.Œπ_desc, FunctorToTypes.comp,
    Cocone.extend_Œπ, Cocone.extensions_app, Functor.map_id, Category.comp_id, colimit.cocone_Œπ]
  simp only [Functor.comp_obj, Functor.leftOp_obj, CategoryOfElements.œÄ_obj, colimit.cocone_x,
    Functor.comp_map, Functor.leftOp_map, CategoryOfElements.œÄ_map, Opposite.unop_op,
    Adjunction.leftAdjointOfEquiv_obj, Function.comp_apply, Functor.map_id, comp_id,
    colimit.cocone_Œπ, Functor.op_obj]
  rfl
  -- üéâ no goals
#align category_theory.colimit_adj.extend_along_yoneda_map CategoryTheory.ColimitAdj.extendAlongYoneda_map

/-- Show `extendAlongYoneda` is left adjoint to `restrictedYoneda`.

The construction of [MM92], Chapter I, Section 5, Theorem 2.
-/
noncomputable def yonedaAdjunction : extendAlongYoneda A ‚ä£ restrictedYoneda A :=
  Adjunction.adjunctionOfEquivLeft _ _
#align category_theory.colimit_adj.yoneda_adjunction CategoryTheory.ColimitAdj.yonedaAdjunction

/--
The initial object in the category of elements for a representable functor. In `isInitial` it is
shown that this is initial.
-/
def Elements.initial (A : C) : (yoneda.obj A).Elements :=
  ‚ü®Opposite.op A, ùüô _‚ü©
#align category_theory.colimit_adj.elements.initial CategoryTheory.ColimitAdj.Elements.initial

/-- Show that `Elements.initial A` is initial in the category of elements for the `yoneda` functor.
-/
def isInitial (A : C) : IsInitial (Elements.initial A) where
  desc s := ‚ü®s.pt.2.op, comp_id _‚ü©
  uniq s m _ := by
    simp_rw [‚Üê m.2]
    -- ‚ä¢ m = { val := ((yoneda.obj A).map (‚Üëm) (asEmptyCocone (Elements.initial A)).p ‚Ä¶
    dsimp [Elements.initial]
    -- ‚ä¢ m = { val := ùüô (Opposite.op A) ‚â´ ‚Üëm, property := (_ : (ùüô (Opposite.op A) ‚â´ ‚Üë ‚Ä¶
            -- üéâ no goals
    simp
    -- üéâ no goals
  fac := by rintro s ‚ü®‚ü®‚ü©‚ü©
#align category_theory.colimit_adj.is_initial CategoryTheory.ColimitAdj.isInitial

/--
`extendAlongYoneda A` is an extension of `A` to the presheaf category along the yoneda embedding.
`uniqueExtensionAlongYoneda` shows it is unique among functors preserving colimits with this
property (up to isomorphism).

The first part of [MM92], Chapter I, Section 5, Corollary 4.
See Property 1 of <https://ncatlab.org/nlab/show/Yoneda+extension#properties>.
-/
noncomputable def isExtensionAlongYoneda :
    (yoneda : C ‚•§ C·µí·µñ ‚•§ Type u‚ÇÅ) ‚ãô extendAlongYoneda A ‚âÖ A :=
  NatIso.ofComponents
    (fun X =>
      (colimit.isColimit _).coconePointUniqueUpToIso
        (colimitOfDiagramTerminal (terminalOpOfInitial (isInitial _)) _))
    (by
      intro X Y f
      -- ‚ä¢ (yoneda ‚ãô extendAlongYoneda A).map f ‚â´ ((fun X => IsColimit.coconePointUniqu ‚Ä¶
      -- porting note: this is slightly different to the `change` in mathlib3 which
      -- didn't work
      change (colimit.desc _ _ ‚â´ _) = colimit.desc _ _ ‚â´ _
      -- ‚ä¢ colimit.desc ((CategoryOfElements.œÄ (yoneda.obj X)).leftOp ‚ãô A) { pt := (fun ‚Ä¶
      ext
      -- ‚ä¢ colimit.Œπ ((CategoryOfElements.œÄ (yoneda.obj X)).leftOp ‚ãô A) j‚úù ‚â´ colimit.de ‚Ä¶
      rw [colimit.Œπ_desc_assoc, colimit.Œπ_desc_assoc]
      -- ‚ä¢ NatTrans.app { pt := (fun P => (colimit.cocone ((CategoryOfElements.œÄ P).lef ‚Ä¶
      change (colimit.Œπ _ _ ‚â´ ùüô _) ‚â´ colimit.desc _ _ = _
      -- ‚ä¢ (colimit.Œπ (Opposite.op ((CategoryOfElements.œÄ (yoneda.obj Y)).leftOp ‚ãô A)). ‚Ä¶
      rw [comp_id, colimit.Œπ_desc]
      -- ‚ä¢ NatTrans.app (coconeOfDiagramTerminal (terminalOpOfInitial (isInitial Y)) (( ‚Ä¶
      dsimp
      -- ‚ä¢ A.map (‚Üë(IsTerminal.from (terminalOpOfInitial (isInitial Y)) (Opposite.op {  ‚Ä¶
      rw [‚Üê A.map_comp]
      -- ‚ä¢ A.map (‚Üë(IsTerminal.from (terminalOpOfInitial (isInitial Y)) (Opposite.op {  ‚Ä¶
      congr 1)
      -- üéâ no goals
#align category_theory.colimit_adj.is_extension_along_yoneda CategoryTheory.ColimitAdj.isExtensionAlongYoneda

/-- See Property 2 of https://ncatlab.org/nlab/show/Yoneda+extension#properties. -/
noncomputable instance : PreservesColimits (extendAlongYoneda A) :=
  (yonedaAdjunction A).leftAdjointPreservesColimits

/-- Show that the images of `X` after `extendAlongYoneda` and `Lan yoneda` are indeed isomorphic.
This follows from `CategoryTheory.CategoryOfElements.costructuredArrowYonedaEquivalence`.
-/
@[simps]
noncomputable def extendAlongYonedaIsoKanApp (X) :
    (extendAlongYoneda A).obj X ‚âÖ ((lan yoneda : (_ ‚•§ ‚Ñ∞) ‚•§ _).obj A).obj X :=
  let eq := CategoryOfElements.costructuredArrowYonedaEquivalence X
  { hom := colimit.pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A X) eq.functor
    inv := colimit.pre ((CategoryOfElements.œÄ X).leftOp ‚ãô A) eq.inverse
    hom_inv_id := by
      erw [colimit.pre_pre ((CategoryOfElements.œÄ X).leftOp ‚ãô A) eq.inverse]
      -- ‚ä¢ colimit.pre ((CategoryOfElements.œÄ X).leftOp ‚ãô A) (eq.functor ‚ãô eq.inverse)  ‚Ä¶
      trans colimit.pre ((CategoryOfElements.œÄ X).leftOp ‚ãô A) (ùü≠ _)
      -- ‚ä¢ colimit.pre ((CategoryOfElements.œÄ X).leftOp ‚ãô A) (eq.functor ‚ãô eq.inverse)  ‚Ä¶
      congr
      -- ‚ä¢ eq.functor ‚ãô eq.inverse = ùü≠ (Functor.Elements X)·µí·µñ
      ¬∑ exact congr_arg Functor.op (CategoryOfElements.from_toCostructuredArrow_eq X)
        -- üéâ no goals
      ¬∑ ext
        -- ‚ä¢ colimit.Œπ (ùü≠ (Functor.Elements X)·µí·µñ ‚ãô (CategoryOfElements.œÄ X).leftOp ‚ãô A) j ‚Ä¶
        simp only [colimit.Œπ_pre]
        -- ‚ä¢ colimit.Œπ ((CategoryOfElements.œÄ X).leftOp ‚ãô A) ((ùü≠ (Functor.Elements X)·µí·µñ). ‚Ä¶
        erw [Category.comp_id]
        -- ‚ä¢ colimit.Œπ ((CategoryOfElements.œÄ X).leftOp ‚ãô A) ((ùü≠ (Functor.Elements X)·µí·µñ). ‚Ä¶
        congr
        -- üéâ no goals
    inv_hom_id := by
      erw [colimit.pre_pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A X) eq.functor]
      -- ‚ä¢ colimit.pre (Lan.diagram yoneda A X) (eq.inverse ‚ãô eq.functor) = ùüô (((lan yo ‚Ä¶
      trans colimit.pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A X) (ùü≠ _)
      -- ‚ä¢ colimit.pre (Lan.diagram yoneda A X) (eq.inverse ‚ãô eq.functor) = colimit.pre ‚Ä¶
      congr
      -- ‚ä¢ eq.inverse ‚ãô eq.functor = ùü≠ (CostructuredArrow yoneda X)
      ¬∑ exact CategoryOfElements.to_fromCostructuredArrow_eq X
        -- üéâ no goals
      ¬∑ ext
        -- ‚ä¢ colimit.Œπ (ùü≠ (CostructuredArrow yoneda X) ‚ãô Lan.diagram yoneda A X) j‚úù ‚â´ col ‚Ä¶
        simp only [colimit.Œπ_pre]
        -- ‚ä¢ colimit.Œπ (Lan.diagram yoneda A X) ((ùü≠ (CostructuredArrow yoneda X)).obj j‚úù) ‚Ä¶
        erw [Category.comp_id]
        -- ‚ä¢ colimit.Œπ (Lan.diagram yoneda A X) ((ùü≠ (CostructuredArrow yoneda X)).obj j‚úù) ‚Ä¶
        congr }
        -- üéâ no goals
set_option linter.uppercaseLean3 false in
#align category_theory.colimit_adj.extend_along_yoneda_iso_Kan_app CategoryTheory.ColimitAdj.extendAlongYonedaIsoKanApp

/-- Verify that `extendAlongYoneda` is indeed the left Kan extension along the yoneda embedding.
-/
@[simps!]
noncomputable def extendAlongYonedaIsoKan :
    extendAlongYoneda A ‚âÖ (lan yoneda : (_ ‚•§ ‚Ñ∞) ‚•§ _).obj A :=
  NatIso.ofComponents (extendAlongYonedaIsoKanApp A) (by
    intro X Y f; simp
    -- ‚ä¢ (extendAlongYoneda A).map f ‚â´ (extendAlongYonedaIsoKanApp A Y).hom = (extend ‚Ä¶
                 -- ‚ä¢ (extendAlongYoneda A).map f ‚â´ colimit.pre (Lan.diagram yoneda A Y) (Category ‚Ä¶
    rw [extendAlongYoneda_map]
    -- ‚ä¢ colimit.pre ((CategoryOfElements.œÄ Y).leftOp ‚ãô A) (CategoryOfElements.map f) ‚Ä¶
    erw [colimit.pre_pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A Y) (CostructuredArrow.map f)]
    -- ‚ä¢ colimit.pre ((CategoryOfElements.œÄ Y).leftOp ‚ãô A) (CategoryOfElements.map f) ‚Ä¶
    erw [colimit.pre_pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A Y)
        (CategoryOfElements.costructuredArrowYonedaEquivalence Y).functor]
    congr 1
    -- ‚ä¢ (CategoryOfElements.map f).op ‚ãô (CategoryOfElements.costructuredArrowYonedaE ‚Ä¶
    apply CategoryOfElements.costructuredArrow_yoneda_equivalence_naturality)
    -- üéâ no goals
set_option linter.uppercaseLean3 false in
#align category_theory.colimit_adj.extend_along_yoneda_iso_Kan CategoryTheory.ColimitAdj.extendAlongYonedaIsoKan

/-- extending `F ‚ãô yoneda` along the yoneda embedding is isomorphic to `Lan F.op`. -/
noncomputable def extendOfCompYonedaIsoLan {D : Type u‚ÇÅ} [SmallCategory D] (F : C ‚•§ D) :
    extendAlongYoneda (F ‚ãô yoneda) ‚âÖ lan F.op :=
  Adjunction.natIsoOfRightAdjointNatIso (yonedaAdjunction (F ‚ãô yoneda))
    (Lan.adjunction (Type u‚ÇÅ) F.op)
    (isoWhiskerRight curriedYonedaLemma' ((whiskeringLeft C·µí·µñ D·µí·µñ (Type u‚ÇÅ)).obj F.op : _))
set_option linter.uppercaseLean3 false in
#align category_theory.colimit_adj.extend_of_comp_yoneda_iso_Lan CategoryTheory.ColimitAdj.extendOfCompYonedaIsoLan

-- porting note: attaching `[simps!]` directly to the declaration causes a timeout.
attribute [simps!] extendOfCompYonedaIsoLan

end ColimitAdj

open ColimitAdj

/-- `F ‚ãô yoneda` is naturally isomorphic to `yoneda ‚ãô Lan F.op`. -/
@[simps!]
noncomputable def compYonedaIsoYonedaCompLan {D : Type u‚ÇÅ} [SmallCategory D] (F : C ‚•§ D) :
    F ‚ãô yoneda ‚âÖ yoneda ‚ãô lan F.op :=
  (isExtensionAlongYoneda (F ‚ãô yoneda)).symm ‚â™‚â´ isoWhiskerLeft yoneda (extendOfCompYonedaIsoLan F)
set_option linter.uppercaseLean3 false in
#align category_theory.comp_yoneda_iso_yoneda_comp_Lan CategoryTheory.compYonedaIsoYonedaCompLan

/-- Since `extendAlongYoneda A` is adjoint to `restrictedYoneda A`, if we use `A = yoneda`
then `restrictedYoneda A` is isomorphic to the identity, and so `extendAlongYoneda A` is as well.
-/
noncomputable def extendAlongYonedaYoneda : extendAlongYoneda (yoneda : C ‚•§ _) ‚âÖ ùü≠ _ :=
  Adjunction.natIsoOfRightAdjointNatIso (yonedaAdjunction _) Adjunction.id restrictedYonedaYoneda
#align category_theory.extend_along_yoneda_yoneda CategoryTheory.extendAlongYonedaYoneda

-- Maybe this should be reducible or an abbreviation?
/-- A functor to the presheaf category in which everything in the image is representable (witnessed
by the fact that it factors through the yoneda embedding).
`coconeOfRepresentable` gives a cocone for this functor which is a colimit and has point `P`.
-/
def functorToRepresentables (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : P.Elements·µí·µñ ‚•§ C·µí·µñ ‚•§ Type u‚ÇÅ :=
  (CategoryOfElements.œÄ P).leftOp ‚ãô yoneda
#align category_theory.functor_to_representables CategoryTheory.functorToRepresentables

/-- This is a cocone with point `P` for the functor `functorToRepresentables P`. It is shown in
`colimitOfRepresentable P` that this cocone is a colimit: that is, we have exhibited an arbitrary
presheaf `P` as a colimit of representables.

The construction of [MM92], Chapter I, Section 5, Corollary 3.
-/
noncomputable def coconeOfRepresentable (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : Cocone (functorToRepresentables P) :=
  Cocone.extend (colimit.cocone _) (extendAlongYonedaYoneda.hom.app P)
#align category_theory.cocone_of_representable CategoryTheory.coconeOfRepresentable

@[simp]
theorem coconeOfRepresentable_pt (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : (coconeOfRepresentable P).pt = P :=
  rfl
set_option linter.uppercaseLean3 false in
#align category_theory.cocone_of_representable_X CategoryTheory.coconeOfRepresentable_pt

-- Marking this as a simp lemma seems to make things more awkward.
/-- An explicit formula for the legs of the cocone `coconeOfRepresentable`. -/
theorem coconeOfRepresentable_Œπ_app (P : C·µí·µñ ‚•§ Type u‚ÇÅ) (j : P.Elements·µí·µñ) :
    (coconeOfRepresentable P).Œπ.app j = (yonedaSectionsSmall _ _).inv j.unop.2 :=
  colimit.Œπ_desc _ _
#align category_theory.cocone_of_representable_Œπ_app CategoryTheory.coconeOfRepresentable_Œπ_app

/-- The legs of the cocone `coconeOfRepresentable` are natural in the choice of presheaf. -/
theorem coconeOfRepresentable_naturality {P‚ÇÅ P‚ÇÇ : C·µí·µñ ‚•§ Type u‚ÇÅ} (Œ± : P‚ÇÅ ‚ü∂ P‚ÇÇ) (j : P‚ÇÅ.Elements·µí·µñ) :
    (coconeOfRepresentable P‚ÇÅ).Œπ.app j ‚â´ Œ± =
      (coconeOfRepresentable P‚ÇÇ).Œπ.app ((CategoryOfElements.map Œ±).op.obj j) := by
  ext T f
  -- ‚ä¢ NatTrans.app (NatTrans.app (coconeOfRepresentable P‚ÇÅ).Œπ j ‚â´ Œ±) T f = NatTran ‚Ä¶
  simpa [coconeOfRepresentable_Œπ_app] using FunctorToTypes.naturality _ _ Œ± f.op _
  -- üéâ no goals
#align category_theory.cocone_of_representable_naturality CategoryTheory.coconeOfRepresentable_naturality

/-- The cocone with point `P` given by `coconeOfRepresentable` is a colimit:
that is, we have exhibited an arbitrary presheaf `P` as a colimit of representables.

The result of [MM92], Chapter I, Section 5, Corollary 3.
-/
noncomputable def colimitOfRepresentable (P : C·µí·µñ ‚•§ Type u‚ÇÅ) :
    IsColimit (coconeOfRepresentable P) := by
  -- porting note:
  -- the `suffices` was not necessary in mathlib3; the function being `apply`ed has an
  -- `IsIso` input in square brackets; lean 3 was happy to give the user the input as a goal but
  -- lean 4 complains that typeclass inference can't find it.
  suffices IsIso (IsColimit.desc (colimit.isColimit (functorToRepresentables P))
    (coconeOfRepresentable P)) by
    apply IsColimit.ofPointIso (colimit.isColimit (functorToRepresentables P))
  change IsIso (colimit.desc _ (Cocone.extend _ _))
  -- ‚ä¢ IsIso (colimit.desc (functorToRepresentables P) (Cocone.extend (colimit.coco ‚Ä¶
  rw [colimit.desc_extend, colimit.desc_cocone]
  -- ‚ä¢ IsIso (ùüô (colimit (functorToRepresentables P)) ‚â´ NatTrans.app extendAlongYon ‚Ä¶
  infer_instance
  -- üéâ no goals
#align category_theory.colimit_of_representable CategoryTheory.colimitOfRepresentable

/-- Given two functors L‚ÇÅ and L‚ÇÇ which preserve colimits, if they agree when restricted to the
representable presheaves then they agree everywhere.
-/
noncomputable def natIsoOfNatIsoOnRepresentables (L‚ÇÅ L‚ÇÇ : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞)
    [PreservesColimits L‚ÇÅ] [PreservesColimits L‚ÇÇ] (h : yoneda ‚ãô L‚ÇÅ ‚âÖ yoneda ‚ãô L‚ÇÇ) : L‚ÇÅ ‚âÖ L‚ÇÇ := by
  apply NatIso.ofComponents _ _
  -- ‚ä¢ (X : C·µí·µñ ‚•§ Type u‚ÇÅ) ‚Üí L‚ÇÅ.obj X ‚âÖ L‚ÇÇ.obj X
  ¬∑ intro P
    -- ‚ä¢ L‚ÇÅ.obj P ‚âÖ L‚ÇÇ.obj P
    refine'
      (isColimitOfPreserves L‚ÇÅ (colimitOfRepresentable P)).coconePointsIsoOfNatIso
        (isColimitOfPreserves L‚ÇÇ (colimitOfRepresentable P)) _
    apply Functor.associator _ _ _ ‚â™‚â´ _
    -- ‚ä¢ (CategoryOfElements.œÄ P).leftOp ‚ãô yoneda ‚ãô L‚ÇÅ ‚âÖ functorToRepresentables P ‚ãô L‚ÇÇ
    exact isoWhiskerLeft (CategoryOfElements.œÄ P).leftOp h
    -- üéâ no goals
  ¬∑ intro P‚ÇÅ P‚ÇÇ f
    -- ‚ä¢ L‚ÇÅ.map f ‚â´ (IsColimit.coconePointsIsoOfNatIso (isColimitOfPreserves L‚ÇÅ (coli ‚Ä¶
    apply (isColimitOfPreserves L‚ÇÅ (colimitOfRepresentable P‚ÇÅ)).hom_ext
    -- ‚ä¢ ‚àÄ (j : (Functor.Elements P‚ÇÅ)·µí·µñ), NatTrans.app (L‚ÇÅ.mapCocone (coconeOfReprese ‚Ä¶
    intro j
    -- ‚ä¢ NatTrans.app (L‚ÇÅ.mapCocone (coconeOfRepresentable P‚ÇÅ)).Œπ j ‚â´ L‚ÇÅ.map f ‚â´ (IsC ‚Ä¶
    dsimp only [id.def, IsColimit.comp_coconePointsIsoOfNatIso_hom, isoWhiskerLeft_hom]
    -- ‚ä¢ NatTrans.app (L‚ÇÅ.mapCocone (coconeOfRepresentable P‚ÇÅ)).Œπ j ‚â´ L‚ÇÅ.map f ‚â´ (IsC ‚Ä¶
    have :
      (L‚ÇÅ.mapCocone (coconeOfRepresentable P‚ÇÅ)).Œπ.app j ‚â´ L‚ÇÅ.map f =
        (L‚ÇÅ.mapCocone (coconeOfRepresentable P‚ÇÇ)).Œπ.app
          ((CategoryOfElements.map f).op.obj j) := by
      dsimp
      rw [‚Üê L‚ÇÅ.map_comp, coconeOfRepresentable_naturality]
      rfl
    erw [reassoc_of% this, IsColimit.Œπ_map_assoc, IsColimit.Œπ_map]
    -- ‚ä¢ NatTrans.app (Functor.associator (CategoryOfElements.œÄ P‚ÇÇ).leftOp yoneda L‚ÇÅ  ‚Ä¶
    dsimp
    -- ‚ä¢ (ùüô (L‚ÇÅ.obj (yoneda.obj j.unop.fst.unop)) ‚â´ NatTrans.app h.hom j.unop.fst.uno ‚Ä¶
    rw [‚Üê L‚ÇÇ.map_comp, coconeOfRepresentable_naturality]
    -- ‚ä¢ (ùüô (L‚ÇÅ.obj (yoneda.obj j.unop.fst.unop)) ‚â´ NatTrans.app h.hom j.unop.fst.uno ‚Ä¶
    rfl
    -- üéâ no goals
#align category_theory.nat_iso_of_nat_iso_on_representables CategoryTheory.natIsoOfNatIsoOnRepresentables

variable [HasColimits ‚Ñ∞]

/-- Show that `extendAlongYoneda` is the unique colimit-preserving functor which extends `A` to
the presheaf category.

The second part of [MM92], Chapter I, Section 5, Corollary 4.
See Property 3 of https://ncatlab.org/nlab/show/Yoneda+extension#properties.
-/
noncomputable def uniqueExtensionAlongYoneda (L : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞) (hL : yoneda ‚ãô L ‚âÖ A)
    [PreservesColimits L] : L ‚âÖ extendAlongYoneda A :=
  natIsoOfNatIsoOnRepresentables _ _ (hL ‚â™‚â´ (isExtensionAlongYoneda _).symm)
#align category_theory.unique_extension_along_yoneda CategoryTheory.uniqueExtensionAlongYoneda

/-- If `L` preserves colimits and `‚Ñ∞` has them, then it is a left adjoint. This is a special case of
`isLeftAdjointOfPreservesColimits` used to prove that.
-/
noncomputable def isLeftAdjointOfPreservesColimitsAux (L : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞)
    [PreservesColimits L] : IsLeftAdjoint L where
  right := restrictedYoneda (yoneda ‚ãô L)
  adj := (yonedaAdjunction _).ofNatIsoLeft (uniqueExtensionAlongYoneda _ L (Iso.refl _)).symm
#align category_theory.is_left_adjoint_of_preserves_colimits_aux CategoryTheory.isLeftAdjointOfPreservesColimitsAux

/-- If `L` preserves colimits and `‚Ñ∞` has them, then it is a left adjoint. Note this is a (partial)
converse to `leftAdjointPreservesColimits`.
-/
noncomputable def isLeftAdjointOfPreservesColimits (L : (C ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞) [PreservesColimits L] :
    IsLeftAdjoint L :=
  let e : _ ‚•§ Type u‚ÇÅ ‚âå _ ‚•§ Type u‚ÇÅ := (opOpEquivalence C).congrLeft
  let _ := isLeftAdjointOfPreservesColimitsAux (e.functor ‚ãô L : _)
  Adjunction.leftAdjointOfNatIso (e.invFunIdAssoc _)
#align category_theory.is_left_adjoint_of_preserves_colimits CategoryTheory.isLeftAdjointOfPreservesColimits

end SmallCategory

section ArbitraryUniverses

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] (P : C·µí·µñ ‚•§ Type v‚ÇÅ)

/-- For a presheaf `P`, consider the forgetful functor from the category of representable
    presheaves over `P` to the category of presheaves. There is a tautological cocone over this
    functor whose leg for a natural transformation `V ‚ü∂ P` with `V` representable is just that
    natural transformation. -/
@[simps]
def tautologicalCocone : Cocone (CostructuredArrow.proj yoneda P ‚ãô yoneda) where
  pt := P
  Œπ := { app := fun X => X.hom }

/-- The tautological cocone with point `P` is a colimit cocone, exhibiting `P` as a colimit of
    representables. -/
def isColimitTautologicalCocone : IsColimit (tautologicalCocone P) where
  desc := fun s => by
    refine' ‚ü®fun X t => yonedaEquiv (s.Œπ.app (CostructuredArrow.mk (yonedaEquiv.symm t))), _‚ü©
    -- ‚ä¢ ‚àÄ ‚¶ÉX Y : C·µí·µñ‚¶Ñ (f : X ‚ü∂ Y), (tautologicalCocone P).pt.map f ‚â´ (fun X t => ‚Üëyo ‚Ä¶
    intros X Y f
    -- ‚ä¢ (tautologicalCocone P).pt.map f ‚â´ (fun X t => ‚ÜëyonedaEquiv (NatTrans.app s.Œπ ‚Ä¶
    ext t
    -- ‚ä¢ ((tautologicalCocone P).pt.map f ‚â´ (fun X t => ‚ÜëyonedaEquiv (NatTrans.app s. ‚Ä¶
    dsimp
    -- ‚ä¢ ‚ÜëyonedaEquiv (NatTrans.app s.Œπ (CostructuredArrow.mk (‚ÜëyonedaEquiv.symm (P.m ‚Ä¶
    rw [yonedaEquiv_naturality', yonedaEquiv_symm_map]
    -- ‚ä¢ ‚ÜëyonedaEquiv (NatTrans.app s.Œπ (CostructuredArrow.mk (yoneda.map f.unop ‚â´ ‚Üëy ‚Ä¶
    simpa using (s.Œπ.naturality
      (CostructuredArrow.homMk' (CostructuredArrow.mk (yonedaEquiv.symm t)) f.unop)).symm
  fac := by
    intro s t
    -- ‚ä¢ NatTrans.app (tautologicalCocone P).Œπ t ‚â´ (fun s => NatTrans.mk fun X t => ‚Üë ‚Ä¶
    dsimp
    -- ‚ä¢ (t.hom ‚â´ NatTrans.mk fun X t => ‚ÜëyonedaEquiv (NatTrans.app s.Œπ (Costructured ‚Ä¶
    apply yonedaEquiv.injective
    -- ‚ä¢ ‚ÜëyonedaEquiv (t.hom ‚â´ NatTrans.mk fun X t => ‚ÜëyonedaEquiv (NatTrans.app s.Œπ  ‚Ä¶
    rw [yonedaEquiv_comp]
    -- ‚ä¢ NatTrans.app (NatTrans.mk fun X t => ‚ÜëyonedaEquiv (NatTrans.app s.Œπ (Costruc ‚Ä¶
    dsimp only
    -- ‚ä¢ ‚ÜëyonedaEquiv (NatTrans.app s.Œπ (CostructuredArrow.mk (‚ÜëyonedaEquiv.symm (‚Üëyo ‚Ä¶
    rw [Equiv.symm_apply_apply]
    -- ‚ä¢ ‚ÜëyonedaEquiv (NatTrans.app s.Œπ (CostructuredArrow.mk t.hom)) = ‚ÜëyonedaEquiv  ‚Ä¶
    rfl
    -- üéâ no goals
  uniq := by
    intro s j h
    -- ‚ä¢ j = (fun s => NatTrans.mk fun X t => ‚ÜëyonedaEquiv (NatTrans.app s.Œπ (Costruc ‚Ä¶
    ext V x
    -- ‚ä¢ NatTrans.app j V x = NatTrans.app ((fun s => NatTrans.mk fun X t => ‚ÜëyonedaE ‚Ä¶
    obtain ‚ü®t, rfl‚ü© := yonedaEquiv.surjective x
    -- ‚ä¢ NatTrans.app j V (‚ÜëyonedaEquiv t) = NatTrans.app ((fun s => NatTrans.mk fun  ‚Ä¶
    dsimp
    -- ‚ä¢ NatTrans.app j V (‚ÜëyonedaEquiv t) = ‚ÜëyonedaEquiv (NatTrans.app s.Œπ (Costruct ‚Ä¶
    rw [Equiv.symm_apply_apply, ‚Üê yonedaEquiv_comp']
    -- ‚ä¢ ‚ÜëyonedaEquiv (t ‚â´ j) = ‚ÜëyonedaEquiv (NatTrans.app s.Œπ (CostructuredArrow.mk  ‚Ä¶
    exact congr_arg _ (h (CostructuredArrow.mk t))
    -- üéâ no goals

end ArbitraryUniverses

end CategoryTheory
