/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang, Jo√´l Riou
-/
import Mathlib.CategoryTheory.Limits.HasLimits

/-!
# Existence of (co)limits and adjoints of the constant functor

The main result in this file is `hasLimitsOfShape_iff_isLeftAdjoint_const` which
states that a category `C` has limits of shape `J` iff the constant
functor `C ‚•§ J ‚•§ C` has a right adjoint functor.

-/

namespace CategoryTheory

open Category

namespace Limits

variable (J C : Type*) [Category J] [Category C]

section

variable [HasLimitsOfShape J C]

/-- The constant functor and limit functor are adjoint to each other-/
noncomputable def constLimAdj : (Functor.const J : C ‚•§ J ‚•§ C) ‚ä£ lim where
  homEquiv c g :=
    { toFun := fun f => limit.lift _ ‚ü®c, f‚ü©
      invFun := fun f =>
        { app := fun j => f ‚â´ limit.œÄ _ _ }
      left_inv := by aesop_cat
      right_inv := by aesop_cat }
  unit := { app := fun c => limit.lift _ ‚ü®_, ùüô _‚ü© }
  counit := { app := fun g => { app := limit.œÄ _ } }
  -- This used to be automatic before leanprover/lean4#2644
  homEquiv_unit := by
    -- Sad that aesop can no longer do this!
    intros
    dsimp
    ext
    simp
#align category_theory.limits.const_lim_adj CategoryTheory.Limits.constLimAdj

noncomputable instance : IsRightAdjoint (lim : (J ‚•§ C) ‚•§ C) :=
  ‚ü®_, constLimAdj J C‚ü©

noncomputable instance : IsLeftAdjoint (Functor.const J : C ‚•§ J ‚•§ C) :=
  ‚ü®_, constLimAdj J C‚ü©

instance limMap_mono' {F G : J ‚•§ C} (Œ± : F ‚ü∂ G) [Mono Œ±] : Mono (limMap Œ±) :=
  (lim : (J ‚•§ C) ‚•§ C).map_mono Œ±
#align category_theory.limits.lim_map_mono' CategoryTheory.Limits.limMap_mono'

end

section

variable [HasColimitsOfShape J C]

/-- The colimit functor and constant functor are adjoint to each other
-/
noncomputable def colimConstAdj : (colim : (J ‚•§ C) ‚•§ C) ‚ä£ Functor.const J where
  homEquiv f c :=
    { toFun := fun g =>
        { app := fun _ => colimit.Œπ _ _ ‚â´ g }
      invFun := fun g => colimit.desc _ ‚ü®_, g‚ü©
      left_inv := by aesop_cat
      right_inv := by aesop_cat }
  unit := { app := fun g => { app := colimit.Œπ _ } }
  counit := { app := fun c => colimit.desc _ ‚ü®_, ùüô _‚ü© }
#align category_theory.limits.colim_const_adj CategoryTheory.Limits.colimConstAdj

noncomputable instance : IsLeftAdjoint (colim : (J ‚•§ C) ‚•§ C) :=
  ‚ü®_, colimConstAdj J C‚ü©

noncomputable instance : IsRightAdjoint (Functor.const J : C ‚•§ J ‚•§ C) :=
  ‚ü®_, colimConstAdj J C‚ü©

instance colimMap_epi' {F G : J ‚•§ C} (Œ± : F ‚ü∂ G) [Epi Œ±] :
    Epi (colimMap Œ±) :=
  (colim : (J ‚•§ C) ‚•§ C).map_epi Œ±
#align category_theory.limits.colim_map_epi' CategoryTheory.Limits.colimMap_epi'

end

section

variable {J C}
variable {F : (J ‚•§ C) ‚•§ C} (adj : Functor.const J ‚ä£ F) (X : J ‚•§ C)

/-- A (limit) cone constructed from a right adjoint to the constant functor. -/
@[simps]
def coneOfConstAdjunction : Cone X where
  pt := F.obj X
  œÄ := (adj.counit.app X)

/-- The cone `coneOfConstAdjunction adj X` is colimit. -/
def isLimitConeOfConstAdjunction : IsLimit (coneOfConstAdjunction adj X) where
  lift s := adj.homEquiv _ _ s.œÄ
  fac s j := by
    have h‚ÇÅ := NatTrans.congr_app (adj.counit.naturality s.œÄ) j
    have h‚ÇÇ := NatTrans.congr_app (adj.left_triangle_components (X := s.pt)) j
    dsimp at h‚ÇÅ h‚ÇÇ ‚ä¢
    simp only [Adjunction.homEquiv_unit, assoc, h‚ÇÅ, reassoc_of% h‚ÇÇ]
  uniq s m hm := by
    dsimp
    symm
    rw [adj.homEquiv_apply_eq]
    ext j
    simp only [Adjunction.homEquiv_counit, NatTrans.comp_app,
      Functor.const_map_app, ‚Üê hm, coneOfConstAdjunction_œÄ]

end

lemma hasLimitsOfShape_iff_isLeftAdjoint_const :
    HasLimitsOfShape J C ‚Üî Nonempty (IsLeftAdjoint (Functor.const J : C ‚•§ J ‚•§ C)) := by
  constructor
  ¬∑ intro
    exact ‚ü®inferInstance‚ü©
  ¬∑ intro ‚ü®_‚ü©
    constructor
    exact fun X => ‚ü®_, isLimitConeOfConstAdjunction (Adjunction.ofLeftAdjoint _) X‚ü©

section

variable {J C}
variable {G : (J ‚•§ C) ‚•§ C} (adj : G ‚ä£ Functor.const J) (X : J ‚•§ C)

/-- A (colimit) cocone constructed from a left adjoint to the constant functor. -/
@[simps]
def coconeOfConstAdjunction : Cocone X where
  pt := G.obj X
  Œπ := (adj.unit.app X)

/-- The cocone `coconeOfConstAdjunction adj X` is limit. -/
def isColimitCoconeOfConstAdjunction : IsColimit (coconeOfConstAdjunction adj X) where
  desc s := (adj.homEquiv _ _).symm s.Œπ
  fac s j := by
    have h‚ÇÅ := NatTrans.congr_app (adj.unit.naturality s.Œπ) j
    have h‚ÇÇ := NatTrans.congr_app (adj.right_triangle_components (Y := s.pt)) j
    dsimp at h‚ÇÅ h‚ÇÇ ‚ä¢
    simp only [Adjunction.homEquiv_counit, ‚Üê reassoc_of% h‚ÇÅ, h‚ÇÇ, comp_id]
  uniq s m hm := by
    dsimp
    rw [‚Üê adj.homEquiv_apply_eq]
    ext j
    simp only [Adjunction.homEquiv_unit, NatTrans.comp_app,
      Functor.const_map_app, ‚Üê hm, coconeOfConstAdjunction_Œπ]

end

lemma hasColimitsOfShape_iff_isRightAdjoint_const :
    HasColimitsOfShape J C ‚Üî Nonempty (IsRightAdjoint (Functor.const J : C ‚•§ J ‚•§ C)) := by
  constructor
  ¬∑ intro
    exact ‚ü®inferInstance‚ü©
  ¬∑ intro ‚ü®_‚ü©
    constructor
    exact fun X => ‚ü®_, isColimitCoconeOfConstAdjunction (Adjunction.ofRightAdjoint _) X‚ü©

end Limits

end CategoryTheory
