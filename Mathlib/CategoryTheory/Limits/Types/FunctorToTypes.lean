/-
Copyright (c) 2025 Beno√Æt Guillemet. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Beno√Æt Guillemet
-/
import Mathlib.CategoryTheory.Limits.IndYoneda
import Mathlib.CategoryTheory.Limits.Preserves.Ulift

/-!
# Isomorphism with a colimit of representable

Let `C` be a category and `F, G : C·µí·µñ ‚•§ Type v` two presheaves over `C`.
We give the natural isomorphism between natural transformations `F ‚ü∂ G` and objects of the limit of
sections of `G` over sections of `F`.
We deduce an isomorphism between any presheaf `F` and a colimit of representable presheaves.
-/

universe u v w

open CategoryTheory Limits

namespace CategoryTheory

section sectionOver

variable {C : Type u} [Category.{v,u} C] (F : C ‚•§ Type w)

def sectionOver : Type max u w :=  (X : C) √ó F.obj X

@[ext]
structure sectionOverMorphism (s s' : sectionOver F) where
  fst : s.fst ‚ü∂ s'.fst
  w : F.map fst s.snd = s'.snd := by aesop_cat

attribute [simp] sectionOverMorphism.w

instance sectionOverCategory : Category (sectionOver F) where
  Hom := sectionOverMorphism F
  id s := {fst := ùüô s.fst}
  comp f g := {fst := f.fst ‚â´ g.fst}

namespace sectionOver

section

variable {s s' s'' : sectionOver F} (f : s ‚ü∂ s') (g : s' ‚ü∂ s'')

@[ext]
lemma hom_ext (f g : s ‚ü∂ s') (h : f.fst = g.fst) : f = g :=
  sectionOverMorphism.ext h

@[simp]
lemma id_fst : (ùüô s : sectionOverMorphism F s s).fst = ùüô (s.fst) := rfl

@[simp]
lemma comp_fst : (f ‚â´ g).fst = f.fst ‚â´ g.fst := rfl

@[simps]
def over : sectionOver F ‚•§ C where
  obj s := s.fst
  map f := f.fst

end

end sectionOver

section homEquiv

open sectionOver

variable (G : C ‚•§ Type w)

def homEquivOverCompSections :
    (F ‚ü∂ G) ‚âÉ (sectionOver.over F ‚ãô G).sections where
  toFun Œ± := ‚ü®
      fun s => Œ±.app s.fst s.snd,
      fun {s s'} f => by
        show (Œ±.app s.fst ‚â´ G.map f.fst) s.snd = Œ±.app s'.fst s'.snd
        rw [‚Üê Œ±.naturality]
        simp
    ‚ü©
  invFun œÉ := {
      app X x := œÉ.val (‚ü®X, x‚ü© : sectionOver F),
      naturality {X Y} f := by
        ext x
        simp only [types_comp_apply,
          ‚Üê œÉ.prop ({fst := f} : sectionOverMorphism F ‚ü®X, x‚ü© ‚ü®Y, F.map f x‚ü©)]
        rfl
    }
  left_inv _ := rfl
  right_inv _ := rfl

def homEquivOverCompSections' :
    (F ‚ü∂ G) ‚âÉ (sectionOver.over F ‚ãô G ‚ãô uliftFunctor.{u, w}).sections where
  toFun Œ± := ‚ü®
      fun s => { down := Œ±.app s.fst s.snd },
      fun {s s'} f => by
        simp only [Functor.comp_obj, over_obj, uliftFunctor_obj, Functor.comp_map, over_map,
          uliftFunctor_map, ULift.up.injEq]
        show (Œ±.app s.fst ‚â´ G.map f.fst) s.snd = Œ±.app s'.fst s'.snd
        rw [‚Üê Œ±.naturality]
        simp
    ‚ü©
  invFun œÉ := {
      app X x := (œÉ.val (‚ü®X, x‚ü© : sectionOver F)).down,
      naturality {X Y} f := by
        ext x
        simp only [types_comp_apply,
          ‚Üê œÉ.prop ({fst := f} : sectionOverMorphism F ‚ü®X, x‚ü© ‚ü®Y, F.map f x‚ü©)]
        rfl
    }
  left_inv _ := rfl
  right_inv _ := rfl

abbrev whiskeringLeftOver := (whiskeringLeft _ _ (Type w)).obj (over F)

abbrev whiskeringRightUlift := (whiskeringRight (sectionOver F) _ _).obj uliftFunctor.{u, w}

def coyonedaOpNatIsoWhiskeringLeftOverCompSectionsFunctorSectionOver :
    coyoneda.obj (Opposite.op F) ‚âÖ (whiskeringLeftOver F) ‚ãô
      (whiskeringRightUlift F) ‚ãô Functor.sectionsFunctor (sectionOver F) where
  hom := {app G := (homEquivOverCompSections' F G).toFun}
  inv := {app G := (homEquivOverCompSections' F G).invFun}

/-- An equivalence between maps from `F` to `G` and a limit of sections of `G`. -/
noncomputable def homEquivLimitOverComp [UnivLE.{max w u, w}] :
    (F ‚ü∂ G) ‚âÉ limit (sectionOver.over F ‚ãô G) :=
  (homEquivOverCompSections F G).trans
    (Types.limitEquivSections (sectionOver.over F ‚ãô G)).symm

/-- A functorial version of `homEquivLimitOverComp` -/
noncomputable def coyonedaOpNatIsoWhiskeringLeftOverCompLim [UnivLE.{max w u, w}] :
    coyoneda.obj (Opposite.op F) ‚âÖ
      (whiskeringLeftOver F) ‚ãô (whiskeringRightUlift F) ‚ãô lim :=
  (coyonedaOpNatIsoWhiskeringLeftOverCompSectionsFunctorSectionOver F).trans
    (isoWhiskerLeft (whiskeringLeftOver F) (isoWhiskerLeft (whiskeringRightUlift F)
    Types.limNatIsoSectionsFunctor.symm))

end homEquiv

end sectionOver


section presheaf

variable {C : Type u} [Category.{v, u} C] (F : C·µí·µñ ‚•§ Type w)

@[simps]
def overYoneda : (sectionOver F)·µí·µñ ‚•§ (C·µí·µñ ‚•§ Type v) where
  obj s := yoneda.obj s.unop.fst.unop
  map f := yoneda.map f.unop.fst.unop

lemma overYonedaRightOpIso : (overYoneda F).rightOp = sectionOver.over F ‚ãô yoneda.op := by
  rfl

def overYoneda' : (sectionOver F)·µí·µñ ‚•§ (C·µí·µñ ‚•§ Type (max v w)) :=
  overYoneda F ‚ãô ((whiskeringRight _ _ _).obj uliftFunctor)

lemma overYonedaRightOpIso' : (overYoneda' F).rightOp =
    sectionOver.over F ‚ãô yoneda.op ‚ãô ((whiskeringRight _ _ _).obj uliftFunctor).op :=
  rfl

variable [UnivLE.{max u v, v}] (F : C·µí·µñ ‚•§ Type v)
variable [UnivLE.{max u v w, max v w}] (F' : C·µí·µñ ‚•§ Type (max v w))

def overCompYonedaCompCoyonedaFlipNatIsoWhiskeringLeftOver :
    (sectionOver.over F ‚ãô yoneda.op ‚ãô coyoneda).flip
      ‚âÖ (whiskeringLeftOver F) ‚ãô (whiskeringRightUlift F) :=
  (flipFunctor _ _ _).mapIso (isoWhiskerLeft (sectionOver.over F) largeCurriedYonedaLemma)

def overCompYonedaCompCoyonedaFlipNatIsoWhiskeringLeftOver' :
    (sectionOver.over F' ‚ãô yoneda.op ‚ãô ((whiskeringRight _ _ _).obj uliftFunctor).op
      ‚ãô coyoneda).flip ‚âÖ (whiskeringLeftOver F') ‚ãô (whiskeringRightUlift F') :=
  (flipFunctor _ _ _).mapIso (isoWhiskerLeft (sectionOver.over F')
    largeCurriedYonedaCompUliftFunctorLemma)

noncomputable def coyonedaOpColimitOverYonedaNatIsoWhiskeringLeftOverLim :
    coyoneda.obj (Opposite.op (colimit (overYoneda F))) ‚âÖ
      (whiskeringLeftOver F) ‚ãô (whiskeringRightUlift F) ‚ãô lim :=
  (coyonedaOpColimitIsoLimitCoyoneda' (overYoneda F)).trans
    ((limitIsoFlipCompLim _).trans
    (isoWhiskerRight (overCompYonedaCompCoyonedaFlipNatIsoWhiskeringLeftOver F) _))

noncomputable def coyonedaOpColimitOverYonedaNatIsoWhiskeringLeftOverLim' :
    coyoneda.obj (Opposite.op (colimit (overYoneda' F'))) ‚âÖ
      (whiskeringLeftOver F') ‚ãô (whiskeringRightUlift F') ‚ãô lim :=
  (coyonedaOpColimitIsoLimitCoyoneda' (overYoneda' F')).trans
    ((limitIsoFlipCompLim _).trans
    (isoWhiskerRight (overCompYonedaCompCoyonedaFlipNatIsoWhiskeringLeftOver' F') _))

noncomputable def coyonedaOpNatIsoCoyonedaOpColimitOverYoneda :
    coyoneda.obj (Opposite.op F) ‚âÖ coyoneda.obj (Opposite.op (colimit (overYoneda F))) :=
  (coyonedaOpNatIsoWhiskeringLeftOverCompLim F).trans
    (coyonedaOpColimitOverYonedaNatIsoWhiskeringLeftOverLim F).symm

noncomputable def coyonedaOpNatIsoCoyonedaOpColimitOverYoneda' :
    coyoneda.obj (Opposite.op F') ‚âÖ coyoneda.obj (Opposite.op (colimit (overYoneda' F'))) :=
  (coyonedaOpNatIsoWhiskeringLeftOverCompLim F').trans
    (coyonedaOpColimitOverYonedaNatIsoWhiskeringLeftOverLim' F').symm

/-- A natural isomorphism between a presheaf a a colimit of representable presheaves. -/
noncomputable def natIsoColimitOverYoneda :
    F ‚âÖ colimit (overYoneda F) :=
  (Coyoneda.fullyFaithful.preimageIso (coyonedaOpNatIsoCoyonedaOpColimitOverYoneda F).symm).unop

/-- A variant of `natIsoColimitOverYoneda` with heterogeneous universes. -/
noncomputable def natIsoColimitOverYoneda' :
    F' ‚âÖ colimit (overYoneda' F') :=
  (Coyoneda.fullyFaithful.preimageIso (coyonedaOpNatIsoCoyonedaOpColimitOverYoneda' F').symm).unop

end presheaf

end CategoryTheory
