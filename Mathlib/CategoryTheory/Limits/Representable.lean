import Mathlib.CategoryTheory.Limits.Yoneda
import Mathlib.CategoryTheory.Limits.FunctorCategory
import Mathlib.CategoryTheory.Limits.Types
import Mathlib.CategoryTheory.Limits.Opposites
import Mathlib.CategoryTheory.Limits.Preserves.Limits

universe w v u

namespace CategoryTheory
open CategoryTheory.Limits

variable {C : Type u} [Category.{v} C]
  {I : Type w} [SmallCategory I] {J : Type w} [SmallCategory J]
  (Œ± : I ‚•§ C) (Œ≤ : J ‚•§ C)

def into : I ‚•§ (C·µí·µñ ‚•§ TypeMax.{w, v}) :=
Œ± ‚ãô yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{w}

def homs‚ÇÅ : C·µí·µñ ‚•§ C ‚•§ Type v :=
coyoneda

def homs‚ÇÇ : C·µí·µñ ‚•§ J ‚•§ Type v :=
coyoneda ‚ãô (whiskeringLeft _ _ _).obj Œ≤

def homs‚ÇÉ : I·µí·µñ ‚•§ J ‚•§ Type v :=
Œ±.op ‚ãô coyoneda ‚ãô (whiskeringLeft _ _ _).obj Œ≤

def homs‚ÇÑ : I·µí·µñ ‚•§ J ‚•§ TypeMax.{w, v} :=
Œ±.op ‚ãô (coyoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{w}) ‚ãô (whiskeringLeft _ _ _).obj Œ≤

noncomputable def homs‚ÇÖ : I·µí·µñ ‚•§ TypeMax.{w, v} :=
homs‚ÇÑ Œ± Œ≤ ‚ãô colim

noncomputable def homs‚ÇÜ : TypeMax.{w, v} :=
limit (homs‚ÇÑ Œ± Œ≤ ‚ãô colim)

noncomputable def colimit_op [HasColimit Œ±] [HasLimit Œ±.op] : Opposite.op (colimit Œ±) ‚âÖ limit Œ±.op :=
sorry

instance a : HasLimitsOfSize.{w, w} (C·µí·µñ ‚•§ TypeMax.{w, v})·µí·µñ :=
  { has_limits_of_shape := fun _ => hasLimitsOfShape_op_of_hasColimitsOfShape }

-- instance b : HasLimitsOfSize.{w, w} (Type max (max u v) w) := by sorry

--set_option pp.universes true

-- noncomputable def blub_iso : (yoneda.obj (colimit (into Œ≤))).obj (limit (into Œ±).op) ‚âÖ
--   limit ((into Œ±).op ‚ãô yoneda.obj (colimit (into Œ≤))) := by
-- sorry


-- Missing: uliftFunctor preserves co(limits)

def my_other_yoneda_lemma (F : C·µí·µñ ‚•§ TypeMax.{w, v}) : yoneda.op ‚ãô ((whiskeringRight _ _ _).obj uliftFunctor.{w}).op ‚ãô yoneda.obj F ‚âÖ
  F ‚ãô uliftFunctor.{max u v} :=
  NatIso.ofComponents (fun i => by
    refine' ‚ü®fun f => ‚ü®f.app _ ‚ü®ùüô _‚ü©‚ü©, fun f => ‚ü®fun Y g => F.map g.down.op f.down, by aesop_cat‚ü©, _, _‚ü©
    ¬∑ ext Œ∑
      refine' NatTrans.ext _ _ (funext (fun Y => _))
      ext ‚ü®f‚ü©
      convert (congr_fun (Œ∑.naturality f.op) ‚ü®ùüô _‚ü©).symm
      simp
    ¬∑ ext ‚ü®a‚ü©
      simp) (by
      intros X Y f
      ext Œ∑
      simp
      congr
      convert (congr_fun (Œ∑.naturality f) ‚ü®ùüô _‚ü©)
      simp)

def my_yoneda_lemma (F : C·µí·µñ ‚•§ TypeMax.{w, v}) : (into Œ±).op ‚ãô yoneda.obj F ‚âÖ
  Œ±.op ‚ãô F ‚ãô uliftFunctor.{max u v} :=
  NatIso.ofComponents (fun i => by
    dsimp
    refine' ‚ü®fun f => ‚ü®f.app _ ‚ü®ùüô _‚ü©‚ü©, fun f => ‚ü®fun Y g => F.map g.down.op f.down, _‚ü©, _, _‚ü©
    ¬∑ intros Y Z g
      ext ‚ü®x‚ü©
      simp [into]
    ¬∑ ext Œ∑ Y ‚ü®f‚ü©
      dsimp [into] at Œ∑
      dsimp [into] at f
      dsimp
      let q := Œ∑.app Y
      dsimp at q
      convert (congr_fun (Œ∑.naturality f.op) ‚ü®ùüô _‚ü©).symm
      simp
    ¬∑ ext ‚ü®a‚ü©
      simp) (by
      intros i j f
      ext Œ∑
      dsimp [into] at Œ∑
      simp
      congr
      convert (congr_fun (Œ∑.naturality (Œ±.map f.unop).op) ‚ü®ùüô _‚ü©)
      simp [into])

def two_hom_functors : Functor.flip (Œ≤ ‚ãô yoneda ‚ãô (whiskeringRight C·µí·µñ (Type v) TypeMax.{w, v}).obj uliftFunctor.{w}) ‚âÖ
  (coyoneda ‚ãô (whiskeringRight C (Type v) (Type (max v w))).obj uliftFunctor.{w}) ‚ãô
          (whiskeringLeft J C (Type (max v w))).obj Œ≤ :=
  NatIso.ofComponents (fun X => NatIso.ofComponents (fun j => Iso.refl _) (by aesop_cat)) (by aesop_cat)

theorem homs_calc : ((colimit (into Œ±)) ‚ü∂ colimit (into Œ≤)) ‚âÉ homs‚ÇÜ Œ± Œ≤ := by
  change (yoneda.obj _).obj (Opposite.op (colimit (into Œ±))) ‚âÉ _

  let t := (yoneda.obj (colimit (into Œ≤))).mapIso (colimit_op (into Œ±))
  refine' t.toEquiv.trans _

  have x : PreservesLimitsOfSize.{max u (max v w), max u (max v w)} (yoneda.obj (colimit (into Œ≤))) := by infer_instance
  have q := preservesLimitsOfSizeShrink.{w, max u (max v w), w, max u (max v w)} (yoneda.obj (colimit (into Œ≤)))
  have y : PreservesLimit (into Œ±).op (yoneda.obj (colimit (into Œ≤))) := by infer_instance
  have : HasLimitsOfSize.{w, w} (Type max (max u v) w) := by sorry
  have z : HasLimit ((into Œ±).op ‚ãô yoneda.obj (colimit (into Œ≤))) := by sorry

  let u := preservesLimitIso (yoneda.obj (colimit (into Œ≤))) (into Œ±).op
  refine' u.toEquiv.trans _

  let v := lim.mapIso (my_yoneda_lemma Œ± (colimit (into Œ≤)))
  refine' v.toEquiv.trans _

  set! as := colimit (into Œ≤) with has

  --have : PreservesLimitsOfSize.{w, w} uliftFunctor.{max u v, max w v} := sorry
  have i‚ÇÅ :  PreservesLimit (Œ±.op ‚ãô colimit (into Œ≤)) uliftFunctor.{max u v, max w v} := sorry
  have i‚ÇÇ : HasLimit (Œ±.op ‚ãô colimit (into Œ≤)) := sorry
  have i‚ÇÉ : HasLimit ((Œ±.op ‚ãô colimit (into Œ≤)) ‚ãô uliftFunctor.{max u v, max w v}) := sorry
  let o := @preservesLimitIso _ _ _ _ uliftFunctor.{max u v, max w v} _ _ (Œ±.op ‚ãô as) i‚ÇÅ i‚ÇÇ i‚ÇÉ

  refine' o.toEquiv.symm.trans _
  refine' Equiv.ulift.trans _
  dsimp [has, into]

  let oo := colimitIsoFlipCompColim ((Œ≤ ‚ãô yoneda ‚ãô (whiskeringRight C·µí·µñ (Type v) TypeMax.{w, v}).obj uliftFunctor.{w}))
  let oo' := isoWhiskerLeft Œ±.op oo
  let oo'' := lim.mapIso oo'
  refine' oo''.toEquiv.trans _
  dsimp [homs‚ÇÜ, homs‚ÇÑ]

  let rr := two_hom_functors Œ≤
  let rr' := isoWhiskerRight rr colim
  let rr'' := isoWhiskerLeft Œ±.op rr'
  let rr''' := lim.mapIso rr''
  exact rr'''.toEquiv
