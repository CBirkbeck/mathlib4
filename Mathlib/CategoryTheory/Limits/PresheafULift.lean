/-
Copyright (c) 2024 Dagur Asgeirsson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Dagur Asgeirsson
-/
import Mathlib.CategoryTheory.Comma.Presheaf
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Functor.KanExtension.Adjunction
import Mathlib.CategoryTheory.Limits.ConeCategory
import Mathlib.CategoryTheory.Limits.Final
import Mathlib.CategoryTheory.Limits.FunctorCategory
import Mathlib.CategoryTheory.Limits.Over
import Mathlib.CategoryTheory.Limits.Shapes.Terminal
import Mathlib.CategoryTheory.Limits.Types

/-!
# Colimit of representables

This file constructs an adjunction `Presheaf.yonedaAdjunction` between `(C·µí·µñ ‚•§ Type u)` and
`‚Ñ∞` given a functor `A : C ‚•§ ‚Ñ∞`, where the right adjoint `restrictedYoneda`
sends `(E : ‚Ñ∞)` to `c ‚Ü¶ (A.obj c ‚ü∂ E)`, and the left adjoint `(C·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ ‚Ñ∞`
is a pointwise left Kan extension of `A` along the Yoneda embedding, which
exists provided `‚Ñ∞` has colimits)

We also show that every presheaf is a colimit of representables. This result
is also known as the density theorem, the co-Yoneda lemma and
the Ninja Yoneda lemma. Two formulations are given:
* `colimitOfRepresentable` uses the category of elements of a functor to types;
* `isColimitTautologicalCocone` uses the category of costructured arrows.

In the lemma `isLeftKanExtension_along_yoneda_iff`, we show that
if `L : (C·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ ‚Ñ∞)` and `Œ± : A ‚ü∂ yoneda ‚ãô L`, then
`Œ±` makes `L` the left Kan extension of `L` along yoneda if and only if
`Œ±` is an isomorphism (i.e. `L` extends `A`) and `L` preserves colimits.
`uniqueExtensionAlongYoneda` shows `yoneda.leftKanExtension A` is unique amongst
functors preserving colimits with this property, establishing the
presheaf category as the free cocompletion of a category.

Given a functor `F : C ‚•§ D`, we also show construct an
isomorphism `compYonedaIsoYonedaCompLan : F ‚ãô yoneda ‚âÖ yoneda ‚ãô F.op.lan`, and
show that it makes `F.op.lan` a left Kan extension of `F ‚ãô yoneda`.

## Tags
colimit, representable, presheaf, free cocompletion

## References
* [S. MacLane, I. Moerdijk, *Sheaves in Geometry and Logic*][MM92]
* https://ncatlab.org/nlab/show/Yoneda+extension
-/

namespace CategoryTheory

open Category Limits

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

namespace Presheaf.ULift

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]

variable {‚Ñ∞ : Type u‚ÇÇ} [Category.{v‚ÇÇ} ‚Ñ∞] (A : C ‚•§ ‚Ñ∞)

/--
The functor taking `(E : ‚Ñ∞) (c : C·µí·µñ)` to the homset `(A.obj C ‚ü∂ E)`. It is shown in `L_adjunction`
that this functor has a left adjoint (provided `E` has colimits) given by taking colimits over
categories of elements.
In the case where `‚Ñ∞ = C·µí·µñ ‚•§ Type u` and `A = yoneda`, this functor is isomorphic to the identity.

Defined as in [MM92], Chapter I, Section 5, Theorem 2.
-/
@[simps!]
def restrictedYoneda : ‚Ñ∞ ‚•§ C·µí·µñ ‚•§ Type (max v‚ÇÅ v‚ÇÇ) :=
  yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{v‚ÇÅ, v‚ÇÇ} ‚ãô
    (whiskeringLeft _ _ (Type (max v‚ÇÅ v‚ÇÇ))).obj (Functor.op A)

/-- Auxiliary definition for `restrictedYonedaHomEquiv`. -/
def restrictedYonedaHomEquiv' (P : C·µí·µñ ‚•§ Type (max v‚ÇÅ v‚ÇÇ)) (E : ‚Ñ∞) :
    (CostructuredArrow.proj (yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor) P ‚ãô A ‚ü∂
      (Functor.const (CostructuredArrow (yoneda ‚ãô (whiskeringRight _ _ _).obj
        uliftFunctor) P)).obj E) ‚âÉ
      (P ‚ü∂ (restrictedYoneda A).obj E) where
  toFun f :=
    { app := fun X x => ‚ü®f.app (CostructuredArrow.mk ((yonedaCompUliftFunctorEquiv _ _).symm x))‚ü©
      naturality := fun {X‚ÇÅ X‚ÇÇ} œÜ => by sorry }
        -- ext x
        -- let œà : CostructuredArrow.mk ((yonedaCompUliftFunctorEquiv _ _).symm (P.toPrefunctor.map œÜ x)) ‚ü∂
        --   CostructuredArrow.mk ((yonedaCompUliftFunctorEquiv _ _).symm x) := CostructuredArrow.homMk œÜ.unop (by
        --     dsimp [yonedaEquiv]
        --     aesop_cat )
        -- simpa using (f.naturality œà).symm }
  invFun g :=
    { app := fun y => (yonedaCompUliftFunctorEquiv _ _ (y.hom ‚â´ g)).1
      naturality := fun {X‚ÇÅ X‚ÇÇ} œÜ => by sorry }
        -- dsimp
        -- rw [‚Üê CostructuredArrow.w œÜ]
        -- dsimp [yonedaEquiv]
        -- simp only [comp_id, id_comp]
        -- refine (congr_fun (g.naturality œÜ.left.op) (X‚ÇÇ.hom.app (Opposite.op X‚ÇÇ.left)
        --   (ùüô _))).symm.trans ?_
        -- dsimp
        -- apply congr_arg
        -- simpa using congr_fun (X‚ÇÇ.hom.naturality œÜ.left.op).symm (ùüô _) }
  left_inv f := by sorry
    -- ext ‚ü®X, ‚ü®‚ü®‚ü©‚ü©, œÜ‚ü©
    -- suffices yonedaEquiv.symm (œÜ.app (Opposite.op X) (ùüô X)) = œÜ by
    --   dsimp
    --   erw [yonedaEquiv_apply]
    --   dsimp [CostructuredArrow.mk]
    --   erw [this]
    -- exact yonedaEquiv.injective (by aesop_cat)
  right_inv g := by sorry
    -- ext X x
    -- dsimp
    -- erw [yonedaEquiv_apply]
    -- dsimp
    -- rw [yonedaEquiv_symm_app_apply]
    -- simp

section

example [HasColimitsOfSize.{v‚ÇÅ, max u‚ÇÅ v‚ÇÅ} ‚Ñ∞] :
    yoneda.HasPointwiseLeftKanExtension A := inferInstance

variable [(yoneda ‚ãô (whiskeringRight _ _ _).obj
  uliftFunctor.{v‚ÇÇ, v‚ÇÅ}).HasPointwiseLeftKanExtension A]

variable {A}
variable (L : (C·µí·µñ ‚•§ Type (max v‚ÇÅ v‚ÇÇ)) ‚•§ ‚Ñ∞)
    (Œ± : A ‚ü∂ (yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor) ‚ãô L)
    [L.IsLeftKanExtension Œ±]


/-- Auxiliary definition for `yonedaAdjunction`. -/
noncomputable def restrictedYonedaHomEquiv
    (Œ± : A ‚ü∂ (yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor) ‚ãô L)
    [L.IsLeftKanExtension Œ±] (P : C·µí·µñ ‚•§ Type (max v‚ÇÅ v‚ÇÇ)) (E : ‚Ñ∞) :
    (L.obj P ‚ü∂ E) ‚âÉ (P ‚ü∂ (restrictedYoneda A).obj E) :=
  ((Functor.isPointwiseLeftKanExtensionOfIsLeftKanExtension _ Œ± P).homEquiv E).trans
    (restrictedYonedaHomEquiv' A P E)

/-- If `L : (C·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ ‚Ñ∞` is a pointwise left Kan extension
of a functor `A : C ‚•§ ‚Ñ∞` along the Yoneda embedding,
then `L` is a left adjoint of `restrictedYoneda A : ‚Ñ∞ ‚•§ C·µí·µñ ‚•§ Type v‚ÇÅ` -/
noncomputable def yonedaAdjunction : L ‚ä£ restrictedYoneda A :=
  Adjunction.mkOfHomEquiv
    { homEquiv := restrictedYonedaHomEquiv L Œ±
      homEquiv_naturality_left_symm := fun {P Q X} f g => by sorry
        -- obtain ‚ü®g, rfl‚ü© := (restrictedYonedaHomEquiv L Œ± Q X).surjective g
        -- apply (restrictedYonedaHomEquiv L Œ± P X).injective
        -- simp only [Equiv.apply_symm_apply, Equiv.symm_apply_apply]
        -- ext Y y
        -- dsimp [restrictedYonedaHomEquiv, restrictedYonedaHomEquiv', IsColimit.homEquiv]
        -- rw [assoc, assoc, ‚Üê L.map_comp_assoc]
        -- congr 3
        -- apply yonedaEquiv.injective
        -- simp [yonedaEquiv]
      homEquiv_naturality_right := fun {P X Y} f g => by sorry }
        -- apply (restrictedYonedaHomEquiv L Œ± P Y).symm.injective
        -- simp only [Equiv.symm_apply_apply]
        -- dsimp [restrictedYonedaHomEquiv, restrictedYonedaHomEquiv', IsColimit.homEquiv]
        -- apply (Functor.isPointwiseLeftKanExtensionOfIsLeftKanExtension L Œ± P).hom_ext
        -- intro p
        -- rw [IsColimit.fac]
        -- dsimp [restrictedYoneda, yonedaEquiv]
        -- simp only [assoc]
        -- congr 3
        -- apply yonedaEquiv.injective
        -- simp [yonedaEquiv] }

/-- Any left Kan extension along the Yoneda embedding preserves colimits. -/
noncomputable def preservesColimitsOfSizeOfIsLeftKanExtension :
    PreservesColimitsOfSize.{v‚ÇÉ, u‚ÇÉ} L :=
  (yonedaAdjunction L Œ±).leftAdjointPreservesColimits

lemma isIso_of_isLeftKanExtension : IsIso Œ± :=
  (Functor.isPointwiseLeftKanExtensionOfIsLeftKanExtension _ Œ±).isIso_hom

variable (A)

/-- See Property 2 of https://ncatlab.org/nlab/show/Yoneda+extension#properties. -/
noncomputable instance preservesColimitsOfSizeLeftKanExtension' :
    PreservesColimitsOfSize.{v‚ÇÉ, u‚ÇÉ}
      ((yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{v‚ÇÇ, v‚ÇÅ}).leftKanExtension A) :=
  (yonedaAdjunction _ ((yoneda ‚ãô (whiskeringRight _ _ _).obj
    uliftFunctor.{v‚ÇÇ, v‚ÇÅ}).leftKanExtensionUnit A)).leftAdjointPreservesColimits

end

/-- A functor to the presheaf category in which everything in the image is representable (witnessed
by the fact that it factors through the yoneda embedding).
`coconeOfRepresentable` gives a cocone for this functor which is a colimit and has point `P`.
-/
@[reducible]
def functorToRepresentables (P : C·µí·µñ ‚•§ Type (max v‚ÇÅ v‚ÇÇ)) : P.Elements·µí·µñ ‚•§ C·µí·µñ ‚•§ Type (max v‚ÇÅ v‚ÇÇ) :=
  (CategoryOfElements.œÄ P).leftOp ‚ãô (yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{v‚ÇÇ, v‚ÇÅ})

variable {A : C ‚•§ ‚Ñ∞}

example [HasColimitsOfSize.{v‚ÇÅ, max u‚ÇÅ v‚ÇÅ} ‚Ñ∞] :
    yoneda.HasPointwiseLeftKanExtension A :=
  inferInstance

variable
  [(yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{v‚ÇÇ, v‚ÇÅ}).HasPointwiseLeftKanExtension A]

section

variable (L : (C·µí·µñ ‚•§ Type (max v‚ÇÅ v‚ÇÇ)) ‚•§ ‚Ñ∞)
  (Œ± : A ‚ü∂ (yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor) ‚ãô L)

instance [L.IsLeftKanExtension Œ±] : IsIso Œ± :=
  (Functor.isPointwiseLeftKanExtensionOfIsLeftKanExtension L Œ±).isIso_hom

lemma isLeftKanExtension_along_yoneda_iff :
    L.IsLeftKanExtension Œ± ‚Üî
      (IsIso Œ± ‚àß Nonempty (PreservesColimitsOfSize.{v‚ÇÇ, max u‚ÇÅ v‚ÇÅ} L)) := by
  constructor
  ¬∑ intro
    exact ‚ü®inferInstance, ‚ü®preservesColimitsOfNatIso
      (Functor.leftKanExtensionUnique _
        ((yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor).leftKanExtensionUnit A) _ Œ±)‚ü©‚ü©
  ¬∑ rintro ‚ü®_, ‚ü®_‚ü©‚ü©
    apply Functor.LeftExtension.IsPointwiseLeftKanExtension.isLeftKanExtension
      (E := Functor.LeftExtension.mk _ Œ±)
    intro P
    dsimp [Functor.LeftExtension.IsPointwiseLeftKanExtensionAt]
    apply IsColimit.ofWhiskerEquivalence
      (CategoryOfElements.costructuredArrowYonedaEquivalenceULift _)
    let e : CategoryOfElements.toCostructuredArrowULift P ‚ãô CostructuredArrow.proj
        ((yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor)) P ‚ãô A ‚âÖ
        functorToRepresentables.{v‚ÇÅ, v‚ÇÇ} P ‚ãô L := sorry
      -- isoWhiskerLeft _ (isoWhiskerLeft _ (asIso Œ±)) ‚â™‚â´
      --   isoWhiskerLeft _ (Functor.associator _ _ _).symm ‚â™‚â´
      --   (Functor.associator _ _ _).symm ‚â™‚â´ isoWhiskerRight (Iso.refl _) L
    sorry
    -- apply (IsColimit.precomposeHomEquiv e.symm _).1
    -- exact IsColimit.ofIsoColimit (isColimitOfPreserves L (colimitOfRepresentable P))
    --   (Cocones.ext (Iso.refl _))

lemma isLeftKanExtension_of_preservesColimits
    (L : (C·µí·µñ ‚•§ Type (max v‚ÇÅ v‚ÇÇ)) ‚•§ ‚Ñ∞)
      (e : A ‚âÖ (yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{v‚ÇÇ, v‚ÇÅ}) ‚ãô L)
    [PreservesColimitsOfSize.{v‚ÇÇ, max u‚ÇÅ v‚ÇÅ} L] :
    L.IsLeftKanExtension e.hom := by
  rw [isLeftKanExtension_along_yoneda_iff]
  exact ‚ü®inferInstance, ‚ü®inferInstance‚ü©‚ü©

end

/-- Show that `yoneda.leftKanExtension A` is the unique colimit-preserving
functor which extends `A` to the presheaf category.

The second part of [MM92], Chapter I, Section 5, Corollary 4.
See Property 3 of https://ncatlab.org/nlab/show/Yoneda+extension#properties.
-/
noncomputable def uniqueExtensionAlongYoneda (L : (C·µí·µñ ‚•§ Type (max v‚ÇÅ v‚ÇÇ)) ‚•§ ‚Ñ∞)
    (e : A ‚âÖ (yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{v‚ÇÇ, v‚ÇÅ}) ‚ãô L)
    [PreservesColimitsOfSize.{v‚ÇÇ, max u‚ÇÅ v‚ÇÅ} L] : L ‚âÖ
      (yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{v‚ÇÇ, v‚ÇÅ}).leftKanExtension A :=
  have := isLeftKanExtension_of_preservesColimits L e
  Functor.leftKanExtensionUnique _ e.hom _
    ((yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{v‚ÇÇ, v‚ÇÅ}).leftKanExtensionUnit A)

instance (L : (C·µí·µñ ‚•§ Type (max v‚ÇÅ v‚ÇÇ)) ‚•§ ‚Ñ∞) [PreservesColimitsOfSize.{v‚ÇÇ, max u‚ÇÅ v‚ÇÅ} L]
    [(yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{v‚ÇÇ, v‚ÇÅ}).HasPointwiseLeftKanExtension ((yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{v‚ÇÇ, v‚ÇÅ}) ‚ãô L)] :
    L.IsLeftKanExtension (ùüô _ :
      (yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{v‚ÇÇ, v‚ÇÅ}) ‚ãô L ‚ü∂ _) :=
  isLeftKanExtension_of_preservesColimits _ (Iso.refl _)

/-- If `L` preserves colimits and `‚Ñ∞` has them, then it is a left adjoint. Note this is a (partial)
converse to `leftAdjointPreservesColimits`.
-/
lemma isLeftAdjoint_of_preservesColimits (L : (C ‚•§ Type (max v‚ÇÅ v‚ÇÇ)) ‚•§ ‚Ñ∞)
    [PreservesColimitsOfSize.{v‚ÇÇ, max u‚ÇÅ v‚ÇÅ} L]
    [(yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{v‚ÇÇ, v‚ÇÅ}).HasPointwiseLeftKanExtension
      ((yoneda ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{v‚ÇÇ, v‚ÇÅ}) ‚ãô
        (opOpEquivalence C).congrLeft.functor.comp L)] :
    L.IsLeftAdjoint :=
  ‚ü®_, ‚ü®((opOpEquivalence C).congrLeft.symm.toAdjunction.comp
    (yonedaAdjunction _ (ùüô _))).ofNatIsoLeft ((opOpEquivalence C).congrLeft.invFunIdAssoc L)‚ü©‚ü©

end CategoryTheory.Presheaf.ULift
