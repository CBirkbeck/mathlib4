/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Limits.Connected
import Mathlib.CategoryTheory.Limits.TypesFiltered
import Mathlib.CategoryTheory.MorphismProperty.Limits
import Mathlib.CategoryTheory.MorphismProperty.TransfiniteComposition

/-!
# Stability properties of monomorphisms in Type

In this file, we show that in the category `Type u`, monomorphisms
are stable under cobase change, filtered colimits and
transfinite compositions.
(The stability by retracts holds in any category: it is shown
in the file `CategoryTheory.MorphismProperty.Retract`.)

-/

universe v' u' u

namespace CategoryTheory

open MorphismProperty Limits Types

namespace Types

instance : (monomorphisms (Type u)).IsStableUnderCobaseChange where
  of_isPushout {X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ t l r b} sq ht := by
    simp only [monomorphisms.iff, mono_iff_injective] at ht ‚ä¢
    exact Limits.Types.pushoutCocone_injective_inr_of_isColimit sq.flip.isColimit ht

lemma isStableUnderColimitsOfShape_monomorphisms_of_isFiltered
    (J : Type u') [Category.{v'} J] [IsFiltered J] :
    (monomorphisms (Type u)).IsStableUnderColimitsOfShape J := by
  intro F‚ÇÅ F‚ÇÇ c‚ÇÅ c‚ÇÇ hc‚ÇÅ hc‚ÇÇ f hf
  simp only [functorCategory, monomorphisms.iff, mono_iff_injective] at hf
  let œÜ : c‚ÇÅ.pt ‚ü∂ c‚ÇÇ.pt := hc‚ÇÅ.desc { Œπ := f ‚â´ c‚ÇÇ.Œπ }
  have hœÜ (j : J) : c‚ÇÅ.Œπ.app j ‚â´ œÜ = f.app j ‚â´ c‚ÇÇ.Œπ.app j := hc‚ÇÅ.fac _ j
  replace hœÜ (j : J) := congr_fun (hœÜ j)
  dsimp at hœÜ
  change Mono œÜ
  rw [mono_iff_injective]
  intro x‚ÇÅ y‚ÇÅ h
  obtain ‚ü®j, x‚ÇÅ, y‚ÇÅ, rfl, rfl‚ü© : ‚àÉ (j : J) (x‚ÇÅ' y‚ÇÅ' : F‚ÇÅ.obj j),
      x‚ÇÅ = c‚ÇÅ.Œπ.app j x‚ÇÅ' ‚àß y‚ÇÅ = c‚ÇÅ.Œπ.app j y‚ÇÅ' := by
    obtain ‚ü®j, x‚ÇÅ, rfl‚ü© := jointly_surjective_of_isColimit hc‚ÇÅ x‚ÇÅ
    obtain ‚ü®l, y‚ÇÅ, rfl‚ü© := jointly_surjective_of_isColimit hc‚ÇÅ y‚ÇÅ
    exact ‚ü®_,  _, _, congr_fun (c‚ÇÅ.w (IsFiltered.leftToMax j l)).symm _,
      congr_fun (c‚ÇÅ.w (IsFiltered.rightToMax j l)).symm _‚ü©
  rw [hœÜ, hœÜ] at h
  obtain ‚ü®k, Œ±, hk‚ü© := (FilteredColimit.isColimit_eq_iff' hc‚ÇÇ _ _).1 h
  simp only [‚Üê FunctorToTypes.naturality] at hk
  rw [‚Üê c‚ÇÅ.w Œ±, types_comp_apply, types_comp_apply, hf _ hk]

section

variable {J : Type u'} [LinearOrder J] [SuccOrder J] [OrderBot J] [WellFoundedLT J]

namespace isStableUnderTransfiniteCompositionOfShape_monomorphisms

variable {X Y : Type u} {f : X ‚ü∂ Y}
  (h : (monomorphisms (Type u)).TransfiniteCompositionOfShape J f)

attribute [local instance] IsCofiltered.isConnected

instance (j : J) : Mono (h.F.map (homOfLE bot_le : ‚ä• ‚ü∂ j)) := by
  induction j using SuccOrder.limitRecOn with
  | hm j hj =>
    obtain rfl := hj.eq_bot
    exact inferInstanceAs (Mono (h.F.map (ùüô _)))
  | hs j hj hj' =>
    have : Mono _ := h.map_mem j hj
    rw [‚Üê homOfLE_comp bot_le (Order.le_succ j), Functor.map_comp]
    infer_instance
  | hl j hj hj' =>
    have : OrderBot (Set.Iio j) :=
      { bot := ‚ü®‚ä•, Order.IsSuccLimit.bot_lt hj ‚ü©
        bot_le _ := bot_le }
    let œÜ : (Functor.const _).obj (h.F.obj ‚ä•) ‚ü∂
        (Set.principalSegIio j).monotone.functor ‚ãô h.F :=
      { app k := h.F.map (homOfLE bot_le)
        naturality k k' hkk' := by
          dsimp
          rw [Category.id_comp, ‚Üê Functor.map_comp]
          rfl }
    have (k : Set.Iio j) : Mono (œÜ.app k) := hj' k.1 k.2
    convert isStableUnderColimitsOfShape_monomorphisms_of_isFiltered _ _ _ _ _
      (isColimitConstCocone (Set.Iio j) (h.F.obj ‚ä•))
      (h.F.isColimitOfIsWellOrderContinuous j hj) œÜ
        (fun _ ‚Ü¶ monomorphisms.infer_property _)
    apply (isColimitConstCocone (Set.Iio j) (h.F.obj ‚ä•)).hom_ext
    intro j
    rw [IsColimit.fac]
    dsimp [œÜ]
    simp only [Category.id_comp, ‚Üê Functor.map_comp, homOfLE_comp]

include h in
lemma mono : Mono f := by
  let œÜ : (Functor.const _).obj X ‚ü∂ h.F :=
    { app k := h.isoBot.inv ‚â´ h.F.map (homOfLE bot_le)
      naturality k k' hkk' := by
        dsimp
        rw [Category.id_comp, Category.assoc, ‚Üê Functor.map_comp]
        rfl }
  convert isStableUnderColimitsOfShape_monomorphisms_of_isFiltered J _ _ _ _
    (isColimitConstCocone J X) h.isColimit œÜ (fun _ ‚Ü¶ monomorphisms.infer_property _)
  apply (isColimitConstCocone J X).hom_ext
  intro j
  rw [IsColimit.fac]
  simp [œÜ]

end isStableUnderTransfiniteCompositionOfShape_monomorphisms

instance : (monomorphisms (Type u)).IsStableUnderTransfiniteCompositionOfShape J where
  le := by
    rintro X Y f ‚ü®hf‚ü©
    exact isStableUnderTransfiniteCompositionOfShape_monomorphisms.mono hf

instance : IsStableUnderTransfiniteComposition.{u'} (monomorphisms (Type u)) where

end

end Types

end CategoryTheory
