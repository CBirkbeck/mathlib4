import Mathlib.CategoryTheory.Shift.Basic
import Mathlib.CategoryTheory.Preadditive.AdditiveFunctor
import Mathlib.Algebra.GradedType

namespace CategoryTheory

open Category Preadditive

variable {C : Type _} [Category C] (M : Type _) [AddCommMonoid M] [HasShift C M]

def ShiftedHom (X Y : C) : GradedType M := fun (n : M) => X ‚ü∂ (Y‚ü¶n‚üß)

instance [Preadditive C] (X Y : C) (n : M) : AddCommGroup (ShiftedHom M X Y n) := by
  dsimp only [ShiftedHom]
  infer_instance

noncomputable instance (X Y Z : C ) :
    HasGradedHMul (ShiftedHom M X Y) (ShiftedHom M Y Z) (ShiftedHom M X Z) where
  Œ≥hmul' p q n h Œ± Œ≤ := Œ± ‚â´ Œ≤‚ü¶p‚üß' ‚â´
    (shiftFunctorAdd' C q p n (by rw [add_comm q p, h])).inv.app _

namespace ShiftedHom

variable {X Y Z : C} (f : X ‚ü∂ Y)
variable {M}

noncomputable def mk‚ÇÄ (m‚ÇÄ : M) (hm‚ÇÄ : m‚ÇÄ = 0) :
  ShiftedHom M X Y m‚ÇÄ := f ‚â´ (shiftFunctorZero' C m‚ÇÄ hm‚ÇÄ).inv.app Y

noncomputable instance : One (ShiftedHom M X X 0) := ‚ü®mk‚ÇÄ (ùüô X) (0 : M) rfl‚ü©

variable (X M)

lemma one_eq : (1 : ShiftedHom M X X 0) = mk‚ÇÄ (ùüô X) 0 rfl := rfl

variable {X M}

lemma Œ≥hmul_eq {p q : M} (Œ± : ShiftedHom M X Y p) (Œ≤ : ShiftedHom M Y Z q) (n : M)
    (hpq : p + q = n) :
    Œ± ‚Ä¢[hpq] Œ≤ = Œ± ‚â´ Œ≤‚ü¶p‚üß' ‚â´
      (shiftFunctorAdd' C q p n (by rw [add_comm q p, hpq])).inv.app _ := rfl

@[simp]
lemma mk‚ÇÄ_Œ≥hmul {n : M} (f : X ‚ü∂ Y) (m‚ÇÄ : M) (hm‚ÇÄ : m‚ÇÄ = 0) (Œ≤ : ShiftedHom M Y Z n) :
    (mk‚ÇÄ f m‚ÇÄ hm‚ÇÄ) ‚Ä¢[show m‚ÇÄ + n = n by rw [hm‚ÇÄ, zero_add]] Œ≤ = f ‚â´ Œ≤ := by
  subst hm‚ÇÄ
  simp only [mk‚ÇÄ, shiftFunctorZero'_eq_shiftFunctorZero, Œ≥hmul_eq,
    shiftFunctorAdd'_add_zero_inv_app, NatTrans.naturality, Functor.id_obj,
    Functor.id_map, assoc, Iso.inv_hom_id_app_assoc]

@[simp]
lemma Œ≥hmul_mk‚ÇÄ {n : M} (Œ± : ShiftedHom M X Y n) (f : Y ‚ü∂ Z) (m‚ÇÄ : M) (hm‚ÇÄ : m‚ÇÄ = 0)  :
    Œ± ‚Ä¢[show n + m‚ÇÄ = n by rw [hm‚ÇÄ, add_zero]] (mk‚ÇÄ f m‚ÇÄ hm‚ÇÄ) = Œ± ‚â´ f‚ü¶n‚üß' := by
  subst hm‚ÇÄ
  simp only [mk‚ÇÄ, shiftFunctorZero'_eq_shiftFunctorZero, Œ≥hmul_eq,
    shiftFunctorAdd'_zero_add_inv_app, ‚Üê Functor.map_comp, assoc, Iso.inv_hom_id_app,
    Functor.id_obj, comp_id]

@[simp 1100]
lemma mk‚ÇÄ_comp (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (m m' m'' : M) (hm : m = 0) (hm' : m' = 0)
  (hm'' : m + m' = m'' ) :
    mk‚ÇÄ f m hm ‚Ä¢[hm''] mk‚ÇÄ g m' hm' = mk‚ÇÄ (f ‚â´ g) m'' (by rw [‚Üê hm'', hm, hm', zero_add]) := by
  subst hm hm'
  obtain rfl : m'' = 0 := by rw [‚Üê hm'', zero_add]
  rw [mk‚ÇÄ_Œ≥hmul]
  simp [mk‚ÇÄ]

@[simp]
lemma mk‚ÇÄ_add [Preadditive C] (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (m‚ÇÄ : M) (hm‚ÇÄ : m‚ÇÄ = 0) :
    (mk‚ÇÄ (f‚ÇÅ + f‚ÇÇ) m‚ÇÄ hm‚ÇÄ) = mk‚ÇÄ f‚ÇÅ m‚ÇÄ hm‚ÇÄ + mk‚ÇÄ f‚ÇÇ m‚ÇÄ hm‚ÇÄ := by
  simp [mk‚ÇÄ]

@[simp]
lemma one_Œ≥hmul {n : M} (Œ≤ : ShiftedHom M X Y n) :
    (1 : ShiftedHom M X X 0) ‚Ä¢[zero_add n] Œ≤ = Œ≤ := by simp [one_eq]

@[simp 1100]
lemma one_Œ≥hmul' {n : M} (m‚ÇÄ : M) (hm‚ÇÄ : m‚ÇÄ = 0) (Œ≤ : ShiftedHom M X Y n) :
    (mk‚ÇÄ (ùüô X) m‚ÇÄ hm‚ÇÄ) ‚Ä¢[show m‚ÇÄ + n = n by rw [hm‚ÇÄ, zero_add]] Œ≤ = Œ≤ := by simp

@[simp]
lemma Œ≥hmul_one {n : M} (Œ± : ShiftedHom M X Y n) :
    Œ± ‚Ä¢[add_zero n] (1 : ShiftedHom M Y Y 0) = Œ± := by simp [one_eq]

@[simp 1100]
lemma Œ≥hmul_one' {n : M} (Œ± : ShiftedHom M X Y n) (m‚ÇÄ : M) (hm‚ÇÄ : m‚ÇÄ = 0) :
    Œ±  ‚Ä¢[show n + m‚ÇÄ = n by rw [hm‚ÇÄ, add_zero]] (mk‚ÇÄ (ùüô Y) m‚ÇÄ hm‚ÇÄ)= Œ± := by simp

@[simp]
lemma Œ≥hmul_add [Preadditive C] [‚àÄ (a : M), (shiftFunctor C a).Additive]
    {p q n : M} (Œ± : ShiftedHom M X Y p) (Œ≤‚ÇÅ Œ≤‚ÇÇ : ShiftedHom M Y Z q)
    (hpq : p + q = n) :
    Œ± ‚Ä¢[hpq] (Œ≤‚ÇÅ + Œ≤‚ÇÇ) = Œ± ‚Ä¢[hpq] Œ≤‚ÇÅ + Œ± ‚Ä¢[hpq] Œ≤‚ÇÇ := by
  rw [Œ≥hmul_eq, Œ≥hmul_eq, Œ≥hmul_eq, Functor.map_add, add_comp, comp_add]

@[simp]
lemma add_Œ≥hmul [Preadditive C]
    {p q n : M} (Œ±‚ÇÅ Œ±‚ÇÇ : ShiftedHom M X Y p) (Œ≤ : ShiftedHom M Y Z q) (hpq : p + q = n) :
    (Œ±‚ÇÅ + Œ±‚ÇÇ) ‚Ä¢[hpq] Œ≤ = Œ±‚ÇÅ ‚Ä¢[hpq] Œ≤ + Œ±‚ÇÇ ‚Ä¢[hpq] Œ≤ := by
  rw [Œ≥hmul_eq, Œ≥hmul_eq, Œ≥hmul_eq, add_comp]

@[simp]
lemma Œ≥hmul_zsmul [Preadditive C] [‚àÄ (a : M), (shiftFunctor C a).Additive]
    {p q n : M} (Œ± : ShiftedHom M X Y p) (x : ‚Ñ§)
    (Œ≤ : ShiftedHom M Y Z q) (hpq : p + q = n) :
    Œ± ‚Ä¢[hpq] (x ‚Ä¢ Œ≤) = x ‚Ä¢ (Œ± ‚Ä¢[hpq] Œ≤) := by
  rw [Œ≥hmul_eq, Œ≥hmul_eq, Functor.map_zsmul, Preadditive.zsmul_comp,
    Preadditive.comp_zsmul]

@[simp]
lemma zsmul_Œ≥hmul [Preadditive C]
    {p q n : M} (x : ‚Ñ§) (Œ± : ShiftedHom M X Y p)
    (Œ≤ : ShiftedHom M Y Z q) (hpq : p + q = n) :
    (x ‚Ä¢ Œ±) ‚Ä¢[hpq] Œ≤ = x ‚Ä¢ (Œ± ‚Ä¢[hpq] Œ≤) := by
  rw [Œ≥hmul_eq, Œ≥hmul_eq, Preadditive.zsmul_comp]

instance {X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : C} : IsAssocGradedHMul (ShiftedHom M X‚ÇÅ X‚ÇÇ)
    (ShiftedHom M X‚ÇÇ X‚ÇÉ) (ShiftedHom M X‚ÇÉ X‚ÇÑ) (ShiftedHom M X‚ÇÅ X‚ÇÉ) (ShiftedHom M X‚ÇÇ X‚ÇÑ)
    (ShiftedHom M X‚ÇÅ X‚ÇÑ) where
  Œ≥hmul_assoc a b c Œ± Œ≤ Œ≥ ab bc abc hab hbc habc := by
    simp only [Œ≥hmul_eq, assoc, Functor.map_comp]
    rw [shiftFunctorAdd'_assoc_inv_app c b a bc ab abc] ; rotate_left
    . rw [add_comm b a, hab]
    . rw [add_assoc, add_comm b a, hab, add_comm c, habc]
    dsimp
    rw [‚Üê NatTrans.naturality_assoc]
    rfl

end ShiftedHom

end CategoryTheory
