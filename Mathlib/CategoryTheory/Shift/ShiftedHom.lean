import Mathlib.CategoryTheory.Shift.Basic
import Mathlib.Algebra.GradedType

namespace CategoryTheory

open Category

variable {C : Type _} [Category C] (M : Type _) [AddMonoid M] [HasShift C M]

def ShiftedHom (X Y : C) : GradedType M := fun (n : M) => X ‚ü∂ (Y‚ü¶n‚üß)

-- note the order of the composition (this is motivated by signs conventions)

noncomputable instance (X Y Z : C ) :
    HasGradedHSMul (ShiftedHom M Y Z) (ShiftedHom M X Y) (ShiftedHom M X Z) where
  Œ≥hsmul' p q n h Œ± Œ≤ := Œ≤ ‚â´ Œ±‚ü¶q‚üß' ‚â´ (shiftFunctorAdd' C p q n h).inv.app _

namespace ShiftedHom

variable {X Y : C} (f : X ‚ü∂ Y)

noncomputable def mk‚ÇÄ : ShiftedHom M X Y 0 := f ‚â´ (shiftFunctorZero C M).inv.app Y

noncomputable instance : One (ShiftedHom M X X 0) := ‚ü®mk‚ÇÄ M (ùüô _)‚ü©

lemma one_eq (X : C) : (1 : ShiftedHom M X X 0) = (shiftFunctorZero C M).inv.app X :=
  id_comp _

variable {M}

lemma Œ≥hsmul_eq {p q : M} (Œ± : ShiftedHom M Y Z p) (Œ≤ : ShiftedHom M X Y q) (n : M)
  (hpq : p + q = n) :
  Œ± ‚Ä¢[hpq] Œ≤ = Œ≤ ‚â´ Œ±‚ü¶q‚üß' ‚â´ (shiftFunctorAdd' C p q n hpq).inv.app _ := rfl

@[simp]
lemma one_Œ≥hsmul {n : M} (Œ≤ : ShiftedHom M X Y n) :
    (1 : ShiftedHom M Y Y 0) ‚Ä¢[zero_add n] Œ≤ = Œ≤ := by
  simp only [Œ≥hsmul_eq, one_eq, shiftFunctorAdd'_zero_add_inv_app, ‚Üê Functor.map_comp, Iso.inv_hom_id_app,
    Functor.id_obj, Functor.map_id, comp_id]

@[simp]
lemma Œ≥hsmul_one {n : M} (Œ± : ShiftedHom M X Y n) :
    Œ± ‚Ä¢[add_zero n] (1 : ShiftedHom M X X 0) = Œ± := by
  dsimp
  rw [Œ≥hsmul_eq]
  simp only [one_eq, shiftFunctorAdd'_add_zero_inv_app,
    NatTrans.naturality, Functor.id_obj, Functor.id_map, Iso.inv_hom_id_app_assoc]

instance {X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : C} : IsAssocGradedHSMul (ShiftedHom M X‚ÇÉ X‚ÇÑ)
    (ShiftedHom M X‚ÇÇ X‚ÇÉ) (ShiftedHom M X‚ÇÅ X‚ÇÇ) (ShiftedHom M X‚ÇÇ X‚ÇÑ) (ShiftedHom M X‚ÇÅ X‚ÇÉ)
    (ShiftedHom M X‚ÇÅ X‚ÇÑ) where
  Œ≥hsmul_assoc a b c Œ± Œ≤ Œ≥ ab bc abc hab hbc habc := by
    simp only [Œ≥hsmul_eq, assoc, Functor.map_comp,
      shiftFunctorAdd'_assoc_inv_app a b c ab bc abc hab hbc (by rw [hab, habc])]
    dsimp
    rw [‚Üê NatTrans.naturality_assoc]
    rfl

end ShiftedHom

end CategoryTheory
