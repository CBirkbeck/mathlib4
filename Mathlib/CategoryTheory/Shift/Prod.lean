/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Shift.CommShift
import Mathlib.Algebra.Group.Prod

/-!
# Shifts by a product

Given a category `C` equipped with shifts by two additive monoids `A` and `B`,
we introduce a typeclass `ShiftsComm C A B` which allows to construct
a shift `HasShift.prod C A B` by `A √ó B` on `C`. The data of this typeclass
involve commuting isomorphisms
`shiftFunctor C b ‚ãô shiftFunctor C a ‚âÖ shiftFunctor C a ‚ãô shiftFunctor C b`
for all `a : A` and `b : B` such that these isomorphisms (or their inverses)
satisfy the axioms of `(shiftFunctor C a).CommShift B` for all `a : A`
and `(shiftFunctor C b).CommShift A` for all `b : B`.

This shall be used in order to construct a shift by `‚Ñ§ √ó ‚Ñ§` on the category
of homological bicomplexes.

-/

namespace CategoryTheory

open Category

variable (C A B : Type*) [Category C] [AddMonoid A] [AddMonoid B]

/-- This typeclass expresses the commutativity of two shifts on a category. -/
class ShiftsComm [HasShift C A] [HasShift C B] where
  /-- the commutation isomorphism -/
  commIso (a : A) (b : B) :
    shiftFunctor C b ‚ãô shiftFunctor C a ‚âÖ shiftFunctor C a ‚ãô shiftFunctor C b
  zero‚ÇÅ (b : B) : commIso 0 b = (Functor.CommShift.isoZero (shiftFunctor C b) A).symm := by
    aesop_cat
  zero‚ÇÇ (a : A) : commIso a 0 = (Functor.CommShift.isoZero (shiftFunctor C a) B) := by
    aesop_cat
  add‚ÇÅ (a‚ÇÅ a‚ÇÇ : A) (b : B) : commIso (a‚ÇÅ + a‚ÇÇ) b =
    (Functor.CommShift.isoAdd (commIso a‚ÇÅ b).symm (commIso a‚ÇÇ b).symm).symm := by aesop_cat
  add‚ÇÇ (a : A) (b‚ÇÅ b‚ÇÇ : B) : commIso a (b‚ÇÅ + b‚ÇÇ) =
    Functor.CommShift.isoAdd (commIso a b‚ÇÅ) (commIso a b‚ÇÇ) := by aesop_cat

variable {A B}

/-- This typeclass expresses the commutativity of two shifts on a category. -/
abbrev ShiftsComm' (_ : HasShift C A) (_ : HasShift C B) := ShiftsComm C A B

section

variable [HasShift C A] [HasShift C B] [ShiftsComm C A B]

/-- The isomorphism expressing the commutativity of two shifts. -/
def shiftsCommIso (a : A) (b : B) :
    shiftFunctor C b ‚ãô shiftFunctor C a ‚âÖ shiftFunctor C a ‚ãô shiftFunctor C b :=
  ShiftsComm.commIso a b

variable (A) in
lemma shiftComm_zero‚ÇÅ (b : B) :
    shiftsCommIso C (0 : A) b = (Functor.CommShift.isoZero (shiftFunctor C b) A).symm :=
  ShiftsComm.zero‚ÇÅ b

lemma shiftComm_add‚ÇÅ (a‚ÇÅ a‚ÇÇ : A) (b : B) :
    shiftsCommIso C (a‚ÇÅ + a‚ÇÇ) b = (Functor.CommShift.isoAdd (shiftsCommIso C a‚ÇÅ b).symm
      (shiftsCommIso C a‚ÇÇ b).symm).symm:=
  ShiftsComm.add‚ÇÅ a‚ÇÅ a‚ÇÇ b

lemma shiftComm_add‚ÇÅ' (a‚ÇÅ a‚ÇÇ a : A) (h : a‚ÇÅ + a‚ÇÇ = a) (b : B) :
    shiftsCommIso C a b = (Functor.CommShift.isoAdd' h (shiftsCommIso C a‚ÇÅ b).symm
      (shiftsCommIso C a‚ÇÇ b).symm).symm := by
  subst h
  exact ShiftsComm.add‚ÇÅ a‚ÇÅ a‚ÇÇ b


variable (B) in
lemma shiftComm_zero‚ÇÇ (a : A) :
    shiftsCommIso C a (0 : B) = (Functor.CommShift.isoZero (shiftFunctor C a) B) :=
  ShiftsComm.zero‚ÇÇ a

lemma shiftComm_add‚ÇÇ (a : A) (b‚ÇÅ b‚ÇÇ : B) :
    shiftsCommIso C a (b‚ÇÅ + b‚ÇÇ) = (Functor.CommShift.isoAdd (shiftsCommIso C a b‚ÇÅ)
      (shiftsCommIso C a b‚ÇÇ)) :=
  ShiftsComm.add‚ÇÇ a b‚ÇÅ b‚ÇÇ

lemma shiftComm_add‚ÇÇ' (a : A) (b‚ÇÅ b‚ÇÇ b : B) (h : b‚ÇÅ + b‚ÇÇ = b):
    shiftsCommIso C a b = (Functor.CommShift.isoAdd' h (shiftsCommIso C a b‚ÇÅ)
      (shiftsCommIso C a b‚ÇÇ)) := by
  subst h
  exact ShiftsComm.add‚ÇÇ a b‚ÇÅ b‚ÇÇ

end

namespace HasShift

namespace Prod

variable [HasShift C A] [HasShift C B] [ShiftsComm C A B]

/-- The shift by `‚ü®a, b‚ü©` is defined as `shiftFunctor C a ‚ãô shiftFunctor C b`. -/
def prodShiftFunctor (c : A √ó B) : C ‚•§ C := shiftFunctor C c.1 ‚ãô shiftFunctor C c.2

variable (A B) in
/-- The isomorphism from `prodShiftFunctor C (0 : A √ó B)` to the identity functor. -/
@[simps!]
noncomputable def prodShiftFunctorZero : prodShiftFunctor C (0 : A √ó B) ‚âÖ ùü≠ C :=
  isoWhiskerRight (shiftFunctorZero C A) _ ‚â™‚â´ shiftFunctorZero C B

/-- The compatibility of `prodShiftFunctor` with the addition in `A √ó B`. -/
@[simps!]
noncomputable def prodShiftFunctorAdd' (c‚ÇÅ c‚ÇÇ c : A √ó B) (h : c‚ÇÅ + c‚ÇÇ = c) :
    prodShiftFunctor C c ‚âÖ prodShiftFunctor C c‚ÇÅ ‚ãô prodShiftFunctor C c‚ÇÇ :=
  isoWhiskerRight (shiftFunctorAdd' C c‚ÇÅ.1 c‚ÇÇ.1 c.1 (by rw [‚Üê h]; rfl)) _ ‚â™‚â´
    isoWhiskerLeft _ (shiftFunctorAdd' C c‚ÇÅ.2 c‚ÇÇ.2 c.2 (by rw [‚Üê h]; rfl)) ‚â™‚â´
    Functor.associator _ _ _ ‚â™‚â´
    isoWhiskerLeft _ ((Functor.associator _ _ _).symm ‚â™‚â´
    isoWhiskerRight (shiftsCommIso C c‚ÇÇ.1 c‚ÇÅ.2).symm _) ‚â™‚â´
    isoWhiskerLeft _ (Functor.associator _ _ _) ‚â™‚â´ (Functor.associator _ _ _).symm

/-- The compatibility of `prodShiftFunctor` with the addition in `A √ó B`. -/
noncomputable def prodShiftFunctorAdd (c c' : A √ó B) :
    prodShiftFunctor C (c + c') ‚âÖ prodShiftFunctor C c ‚ãô prodShiftFunctor C c' :=
  prodShiftFunctorAdd' C c c' _ rfl

lemma prodShiftFunctorAdd'_eq_prodShiftFunctorAdd (c c' : A √ó B) :
    prodShiftFunctorAdd' C c c' _ rfl = prodShiftFunctorAdd C c c' := rfl

lemma prodShiftFunctorAdd_hom_app_eq
    (c‚ÇÅ c‚ÇÇ c : A √ó B) (h : c‚ÇÅ + c‚ÇÇ = c) (X : C) :
    (prodShiftFunctorAdd C c‚ÇÅ c‚ÇÇ).hom.app X = eqToHom (by subst h; rfl) ‚â´
      (prodShiftFunctorAdd' C c‚ÇÅ c‚ÇÇ c h).hom.app X := by
  subst h
  simp [prodShiftFunctorAdd'_eq_prodShiftFunctorAdd]

lemma zero_add_hom_app' (c : A √ó B) (X : C) :
    (prodShiftFunctorAdd' C 0 c c (zero_add c)).hom.app X =
      (prodShiftFunctor C c).map ((prodShiftFunctorZero C A B).inv.app X) := by
  dsimp
  simp only [prodShiftFunctorAdd'_hom_app, Prod.snd_zero, Prod.fst_zero, shiftComm_zero‚ÇÇ,
    Functor.CommShift.isoZero_inv_app, Functor.map_comp]
  dsimp [prodShiftFunctor]
  rw [shiftFunctorAdd'_zero_add_hom_app, shiftFunctorAdd'_zero_add_hom_app]
  dsimp
  rw [‚Üê Functor.map_comp, ‚Üê Functor.map_comp, ‚Üê Functor.map_comp, ‚Üê Functor.map_comp,
    ‚Üê Functor.map_comp]
  erw [‚Üê NatTrans.naturality, ‚Üê NatTrans.naturality]
  rw [‚Üê NatTrans.naturality_assoc]
  rw [‚Üê NatTrans.naturality_assoc]
  rw [Iso.inv_hom_id_app, comp_id]
  dsimp
  simp only [Functor.map_comp]

lemma add_zero_hom_app' (c : A √ó B) (X : C) :
    (prodShiftFunctorAdd' C c 0 c (add_zero c)).hom.app X =
      (prodShiftFunctorZero C A B).inv.app ((prodShiftFunctor C c).obj X) := by
  dsimp
  simp only [prodShiftFunctorAdd'_hom_app, Prod.snd_zero, Prod.fst_zero, shiftComm_zero‚ÇÅ,
    Iso.symm_inv, Functor.CommShift.isoZero_hom_app, Functor.map_comp]
  dsimp [prodShiftFunctor]
  erw [‚Üê NatTrans.naturality_assoc, ‚Üê NatTrans.naturality_assoc]
  rw [‚Üê Functor.map_comp_assoc, shiftFunctorAdd'_add_zero_hom_app, Iso.inv_hom_id_app]
  dsimp
  rw [Functor.map_id, id_comp, shiftFunctorAdd'_add_zero_hom_app]

lemma assoc_hom_app' (c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÅ‚ÇÇ c‚ÇÇ‚ÇÉ c : A √ó B)
    (h‚ÇÅ‚ÇÇ : c‚ÇÅ + c‚ÇÇ = c‚ÇÅ‚ÇÇ) (h‚ÇÇ‚ÇÉ : c‚ÇÇ + c‚ÇÉ = c‚ÇÇ‚ÇÉ) (h : c‚ÇÅ + c‚ÇÇ + c‚ÇÉ = c) (X : C) :
    (prodShiftFunctorAdd' C c‚ÇÅ‚ÇÇ c‚ÇÉ c (by rw [‚Üê h‚ÇÅ‚ÇÇ, h])).hom.app X ‚â´
      (prodShiftFunctor C c‚ÇÉ).map ((prodShiftFunctorAdd' C c‚ÇÅ c‚ÇÇ c‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).hom.app X) =
      (prodShiftFunctorAdd' C c‚ÇÅ c‚ÇÇ‚ÇÉ c (by rw [‚Üê h‚ÇÇ‚ÇÉ, ‚Üê add_assoc, h])).hom.app X ‚â´
        (prodShiftFunctorAdd' C c‚ÇÇ c‚ÇÉ c‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).hom.app
          ((prodShiftFunctor C c‚ÇÅ).obj X) := by
  dsimp
  simp [shiftComm_add‚ÇÇ' C c‚ÇÉ.1 c‚ÇÅ.2 c‚ÇÇ.2 c‚ÇÅ‚ÇÇ.2 (by rw [‚Üê h‚ÇÅ‚ÇÇ]; rfl),
    shiftComm_add‚ÇÅ' C c‚ÇÇ.1 c‚ÇÉ.1 c‚ÇÇ‚ÇÉ.1 (by rw [‚Üê h‚ÇÇ‚ÇÉ]; rfl) c‚ÇÅ.2]
  dsimp [prodShiftFunctor]
  erw [‚Üê NatTrans.naturality_assoc, ‚Üê NatTrans.naturality_assoc,
    ‚Üê NatTrans.naturality_assoc, ‚Üê NatTrans.naturality_assoc]
  simp only [‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc]
  rw [‚Üê shiftFunctorAdd'_assoc_hom_app c‚ÇÅ.1 c‚ÇÇ.1 c‚ÇÉ.1 c‚ÇÅ‚ÇÇ.1 c‚ÇÇ‚ÇÉ.1 c.1 (by rw [‚Üê h‚ÇÅ‚ÇÇ]; rfl)
    (by rw [‚Üê h‚ÇÇ‚ÇÉ]; rfl) (by rw [‚Üê h]; rfl) X]
  erw [Iso.inv_hom_id_app_assoc, ‚Üê NatTrans.naturality, Iso.inv_hom_id_app, comp_id]
  simp only [Functor.map_comp, assoc]
  erw [shiftFunctorAdd'_assoc_hom_app_assoc c‚ÇÅ.2 c‚ÇÇ.2 c‚ÇÉ.2 c‚ÇÅ‚ÇÇ.2 c‚ÇÇ‚ÇÉ.2 c.2
    (by rw [‚Üê h‚ÇÅ‚ÇÇ]; rfl) (by rw [‚Üê h‚ÇÇ‚ÇÉ]; rfl) (by rw [‚Üê h]; rfl)]
  congr 1
  dsimp
  simp only [Functor.map_comp, assoc, NatTrans.naturality_assoc,
    Functor.comp_obj, Functor.comp_map]
  simp only [‚Üê assoc]; congr 2; simp only [assoc]
  congr 2
  simp only [‚Üê Functor.map_comp]
  congr 2
  erw [‚Üê NatTrans.naturality]
  rfl

variable (A B)

/-- The data and properties which enables the definition of a shift by `A √ó B` on
a category given shifts by `A` and `B` which commute. -/
noncomputable def shiftMkCore : ShiftMkCore C (A √ó B) where
  F := prodShiftFunctor C
  zero := prodShiftFunctorZero C A B
  add := prodShiftFunctorAdd C
  assoc_hom_app c‚ÇÅ c‚ÇÇ c‚ÇÉ X := by
    rw [‚Üê prodShiftFunctorAdd'_eq_prodShiftFunctorAdd C (c‚ÇÅ + c‚ÇÇ) c‚ÇÉ,
      ‚Üê prodShiftFunctorAdd'_eq_prodShiftFunctorAdd C c‚ÇÅ c‚ÇÇ,
      ‚Üê prodShiftFunctorAdd'_eq_prodShiftFunctorAdd C c‚ÇÇ c‚ÇÉ,
      prodShiftFunctorAdd_hom_app_eq C c‚ÇÅ (c‚ÇÇ + c‚ÇÉ) (c‚ÇÅ + c‚ÇÇ + c‚ÇÉ) (add_assoc _ _ _).symm,
      assoc, eqToHom_trans_assoc, eqToHom_refl, id_comp,
      assoc_hom_app' C c‚ÇÅ c‚ÇÇ c‚ÇÉ _ _ _ rfl rfl rfl]
  zero_add_hom_app c X := by
    rw [prodShiftFunctorAdd_hom_app_eq C 0 c c (zero_add c), zero_add_hom_app' C c X]
  add_zero_hom_app c X := by
    rw [prodShiftFunctorAdd_hom_app_eq C c 0 c (add_zero c), add_zero_hom_app' C c X]

end Prod

variable (A B)

/-- The shift by `A √ó B` on a category `C` when two shifts by `A` and `B` commute. -/
noncomputable def prod [HasShift C A] [HasShift C B] [ShiftsComm C A B] :
  HasShift C (A √ó B) := hasShiftMk _ _ (Prod.shiftMkCore C A B)

end HasShift

end CategoryTheory
