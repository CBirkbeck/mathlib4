import Mathlib.CategoryTheory.Shift.CommShift

namespace CategoryTheory

open Category

lemma Iso.ext' {C : Type*} [Category C] {X Y : C} {e‚ÇÅ e‚ÇÇ : X ‚âÖ Y}
    (h : e‚ÇÅ.inv = e‚ÇÇ.inv) : e‚ÇÅ = e‚ÇÇ := by
  change e‚ÇÅ.symm.symm = e‚ÇÇ.symm.symm
  congr 1
  ext
  exact h

namespace Adjunction

variable {C D : Type*} [Category C] [Category D]
  {G‚ÇÅ G‚ÇÇ G‚ÇÉ : C ‚•§ D} {F‚ÇÅ F‚ÇÇ F‚ÇÉ : D ‚•§ C} (adj‚ÇÅ : G‚ÇÅ ‚ä£ F‚ÇÅ) (adj‚ÇÇ : G‚ÇÇ ‚ä£ F‚ÇÇ) (adj‚ÇÉ : G‚ÇÉ ‚ä£ F‚ÇÉ)

@[simps! apply_app symm_apply_app]
def natTransEquiv : (G‚ÇÅ ‚ü∂ G‚ÇÇ) ‚âÉ (F‚ÇÇ ‚ü∂ F‚ÇÅ) where
  toFun Œ± := F‚ÇÇ.rightUnitor.inv ‚â´ whiskerLeft F‚ÇÇ adj‚ÇÅ.unit ‚â´ whiskerLeft _ (whiskerRight Œ± _) ‚â´
    (Functor.associator _ _ _).inv ‚â´ whiskerRight adj‚ÇÇ.counit F‚ÇÅ ‚â´ F‚ÇÅ.leftUnitor.hom
  invFun Œ≤ := G‚ÇÅ.leftUnitor.inv ‚â´ whiskerRight adj‚ÇÇ.unit G‚ÇÅ ‚â´ whiskerRight (whiskerLeft _ Œ≤ ) _ ‚â´
    (Functor.associator _ _ _ ).hom ‚â´ whiskerLeft G‚ÇÇ adj‚ÇÅ.counit ‚â´ G‚ÇÇ.rightUnitor.hom
  left_inv Œ± := by aesop_cat
  right_inv Œ± := by
    ext X
    dsimp
    simp only [Category.comp_id, Category.id_comp, Functor.map_comp, Category.assoc,
      unit_naturality_assoc, right_triangle_components_assoc, ‚Üê Œ±.naturality]

@[simp]
lemma natTransEquiv_id : natTransEquiv adj‚ÇÅ adj‚ÇÅ (ùüô _) = ùüô _ := by aesop_cat

@[simp]
lemma natTransEquiv_symm_id : (natTransEquiv adj‚ÇÅ adj‚ÇÅ).symm (ùüô _) = ùüô _ := by aesop_cat

@[reassoc (attr := simp)]
lemma natTransEquiv_comp (Œ± : G‚ÇÅ ‚ü∂ G‚ÇÇ) (Œ≤ : G‚ÇÇ ‚ü∂ G‚ÇÉ) :
    natTransEquiv adj‚ÇÇ adj‚ÇÉ Œ≤ ‚â´ natTransEquiv adj‚ÇÅ adj‚ÇÇ Œ± =
      natTransEquiv adj‚ÇÅ adj‚ÇÉ (Œ± ‚â´ Œ≤) := by
  ext X
  exact (adj‚ÇÅ.homEquiv _ _).symm.injective (by simp)

@[reassoc (attr := simp)]
lemma natTransEquiv_symm_comp (Œ± : F‚ÇÉ ‚ü∂ F‚ÇÇ) (Œ≤ : F‚ÇÇ ‚ü∂ F‚ÇÅ) :
    (natTransEquiv adj‚ÇÅ adj‚ÇÇ).symm Œ≤ ‚â´ (natTransEquiv adj‚ÇÇ adj‚ÇÉ).symm Œ± =
      (natTransEquiv adj‚ÇÅ adj‚ÇÉ).symm (Œ± ‚â´ Œ≤) := by
  obtain ‚ü®Œ±', rfl‚ü© := (natTransEquiv adj‚ÇÇ adj‚ÇÉ).surjective Œ±
  obtain ‚ü®Œ≤', rfl‚ü© := (natTransEquiv adj‚ÇÅ adj‚ÇÇ).surjective Œ≤
  simp

@[simps]
def natIsoEquiv : (G‚ÇÅ ‚âÖ G‚ÇÇ) ‚âÉ (F‚ÇÅ ‚âÖ F‚ÇÇ) where
  toFun e :=
    { hom := natTransEquiv adj‚ÇÇ adj‚ÇÅ e.inv
      inv := natTransEquiv adj‚ÇÅ adj‚ÇÇ e.hom }
  invFun e :=
    { hom := (natTransEquiv adj‚ÇÅ adj‚ÇÇ).symm e.inv
      inv := (natTransEquiv adj‚ÇÇ adj‚ÇÅ).symm e.hom }
  left_inv e := by dsimp; ext1; simp only [Equiv.symm_apply_apply]
  right_inv e := by dsimp; ext1; simp only [Equiv.apply_symm_apply]

end Adjunction

namespace Adjunction

variable {C D : Type*} [Category C] [Category D]
  {G : C ‚•§ D} {F : D ‚•§ C} (adj : G ‚ä£ F) (A Z : Type*) [AddMonoid A] [AddGroup Z]
  [HasShift C A] [HasShift D A] [F.CommShift A] [G.CommShift A]
  [HasShift C Z] [HasShift D Z]

class CommShift : Prop where
  commShift_unit : NatTrans.CommShift adj.unit A := by infer_instance
  commShift_counit : NatTrans.CommShift adj.counit A := by infer_instance

namespace CommShift

attribute [instance] commShift_unit commShift_counit

lemma mk' (h : NatTrans.CommShift adj.unit A) :
    adj.CommShift A where
  commShift_counit := ‚ü®by
    intro a
    ext X
    have eq := NatTrans.CommShift.app_shift adj.unit a (F.obj X)
    dsimp at eq ‚ä¢
    simp only [Functor.CommShift.commShiftIso_id_hom_app, Functor.comp_obj,
      Functor.id_obj, Functor.commShiftIso_comp_inv_app, id_comp,
      Functor.commShiftIso_comp_hom_app, assoc, comp_id] at eq ‚ä¢
    apply (adj.homEquiv _ _).injective
    rw [adj.homEquiv_unit, adj.homEquiv_unit, F.map_comp]
    dsimp
    rw [adj.unit_naturality_assoc]
    simp only [eq, assoc, ‚Üê F.map_comp, Iso.inv_hom_id_app_assoc, right_triangle_components,
      ‚Üê F.commShiftIso_inv_naturality, ‚Üê Functor.map_comp_assoc, Functor.map_id, id_comp,
      Iso.hom_inv_id_app, Functor.comp_obj]‚ü©

end CommShift

namespace RightAdjointCommShift

variable {Z}
variable (a b : Z) (h : b + a = 0)

noncomputable def adj‚ÇÅ : G ‚ãô shiftFunctor D b ‚ä£ shiftFunctor D a ‚ãô F :=
  adj.comp (shiftEquiv' D b a h).toAdjunction

noncomputable def adj‚ÇÇ : shiftFunctor C b ‚ãô G ‚ä£ F ‚ãô shiftFunctor C a :=
  (shiftEquiv' C b a h).toAdjunction.comp adj

variable [G.CommShift Z]

noncomputable def adj‚ÇÉ : G ‚ãô shiftFunctor D b ‚ä£ F ‚ãô shiftFunctor C a :=
  (adj‚ÇÇ adj a b h).ofNatIsoLeft (G.commShiftIso b)

noncomputable def iso' : shiftFunctor D a ‚ãô F ‚âÖ F ‚ãô shiftFunctor C a :=
  Adjunction.natIsoEquiv (adj‚ÇÅ adj a b h) (adj‚ÇÉ adj a b h) (Iso.refl _)

noncomputable def iso : shiftFunctor D a ‚ãô F ‚âÖ F ‚ãô shiftFunctor C a := iso' adj _ _ (neg_add_self a)

lemma iso_hom_app (X : D) :
    (iso adj a).hom.app X =
      (shiftFunctorCompIsoId C b a h).inv.app (F.obj ((shiftFunctor D a).obj X)) ‚â´
        (adj.unit.app ((shiftFunctor C b).obj (F.obj ((shiftFunctor D a).obj X))))‚ü¶a‚üß' ‚â´
          (F.map ((G.commShiftIso b).hom.app (F.obj ((shiftFunctor D a).obj X))))‚ü¶a‚üß' ‚â´
            (F.map ((shiftFunctor D b).map (adj.counit.app ((shiftFunctor D a).obj X))))‚ü¶a‚üß' ‚â´
              (F.map ((shiftFunctorCompIsoId D a b
                (by rw [‚Üê add_left_inj a, add_assoc, h, zero_add, add_zero])).hom.app X))‚ü¶a‚üß' := by
  obtain rfl : b = -a := by rw [‚Üê add_left_inj a, h, neg_add_self]
  simp [iso, iso', adj‚ÇÉ, ofNatIsoLeft, adj‚ÇÇ, comp, Equivalence.toAdjunction, shiftEquiv',
    equivHomsetLeftOfNatIso, adj‚ÇÅ]

lemma iso_inv_app (X : D) :
    (iso adj a).inv.app X =
      adj.unit.app ((shiftFunctor C a).obj (F.obj X)) ‚â´
          F.map ((shiftFunctorCompIsoId D b a h).inv.app (G.obj ((shiftFunctor C a).obj (F.obj X)))) ‚â´
            F.map ((shiftFunctor D a).map ((shiftFunctor D b).map ((G.commShiftIso a).hom.app (F.obj X)))) ‚â´
              F.map ((shiftFunctor D a).map ((shiftFunctorCompIsoId D a b
                  (by rw [‚Üê add_left_inj a, add_assoc, h, zero_add, add_zero])).hom.app
                    (G.obj (F.obj X)))) ‚â´
                F.map ((shiftFunctor D a).map (adj.counit.app X)) := by
  obtain rfl : b = -a := by rw [‚Üê add_left_inj a, h, neg_add_self]
  simp [iso, iso', adj‚ÇÉ, ofNatIsoLeft, adj‚ÇÇ, comp, Equivalence.toAdjunction, shiftEquiv',
    equivHomsetLeftOfNatIso, adj‚ÇÅ]

end RightAdjointCommShift

@[simps]
noncomputable def rightAdjointCommShift [G.CommShift Z] : F.CommShift Z where
  iso a := RightAdjointCommShift.iso adj a
  zero := by
    apply Iso.ext'
    ext X
    apply (adj.homEquiv _ _).symm.injective
    dsimp
    simp [RightAdjointCommShift.iso_inv_app adj _ _ (add_zero (0 : Z)) X]
    erw [‚Üê NatTrans.naturality_assoc]
    dsimp
    rw [shift_shiftFunctorCompIsoId_hom_app, Iso.inv_hom_id_app_assoc, Functor.commShiftIso_zero,
      Functor.CommShift.isoZero_hom_app, assoc]
    erw [‚Üê NatTrans.naturality]
    rfl
  add a b := by
    apply Iso.ext'
    ext X
    apply (adj.homEquiv _ _).symm.injective
    dsimp
    simp [RightAdjointCommShift.iso_inv_app adj _ _ (neg_add_self (a + b)) X,
      RightAdjointCommShift.iso_inv_app adj _ _ (neg_add_self a) X,
      RightAdjointCommShift.iso_inv_app adj _ _ (neg_add_self b)]
    erw [‚Üê NatTrans.naturality_assoc]
    dsimp
    rw [shift_shiftFunctorCompIsoId_hom_app, Iso.inv_hom_id_app_assoc]
    rw [Functor.commShiftIso_add, Functor.CommShift.isoAdd_hom_app]
    simp
    simp only [‚Üê Functor.map_comp_assoc, assoc]
    erw [‚Üê (shiftFunctorCompIsoId D _ _ (neg_add_self a)).inv.naturality]
    dsimp
    rw [‚Üê NatTrans.naturality]
    rw [‚Üê F.map_comp, assoc, shift_shiftFunctorCompIsoId_hom_app, Iso.inv_hom_id_app]
    dsimp
    rw [comp_id]
    simp only [Functor.map_comp, assoc]; congr 1; simp only [‚Üê assoc]; congr 1; simp only [assoc]
    erw [‚Üê NatTrans.naturality_assoc]
    dsimp
    rw [shift_shiftFunctorCompIsoId_hom_app, Iso.inv_hom_id_app_assoc]
    simp only [‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc, assoc]
    apply (adj.homEquiv _ _).injective
    dsimp
    simp only [Functor.map_comp, homEquiv_unit, Functor.id_obj, Functor.comp_obj, assoc,
      Functor.commShiftIso_hom_naturality_assoc]
    congr 1
    simp only [‚Üê F.map_comp, assoc]
    congr 2
    simp only [‚Üê Functor.map_comp, assoc]
    congr 1
    dsimp
    simp

lemma commShift_of_leftAdjoint [G.CommShift Z] :
    letI := adj.rightAdjointCommShift Z
    adj.CommShift Z := by
  suffices h : ‚àÄ X (a : Z), (adj.unit.app X)‚ü¶a‚üß' = adj.unit.app (X‚ü¶a‚üß) ‚â´ F.map ((G.commShiftIso a).hom.app X) ‚â´
      (RightAdjointCommShift.iso adj a).hom.app (G.obj X) by
    letI := adj.rightAdjointCommShift Z
    apply CommShift.mk'
    refine' ‚ü®fun a => _‚ü©
    ext X
    dsimp
    simp only [Functor.CommShift.commShiftIso_id_hom_app, Functor.comp_obj,
      Functor.id_obj, id_comp, Functor.commShiftIso_comp_hom_app]
    exact h X a
  intro X a
  rw [‚Üê cancel_mono ((RightAdjointCommShift.iso adj a).inv.app (G.obj X)), assoc, assoc,
    Iso.hom_inv_id_app]
  dsimp
  rw [comp_id]
  simp [RightAdjointCommShift.iso_inv_app adj _ _ (neg_add_self a)]
  apply (adj.homEquiv _ _).symm.injective
  dsimp
  simp
  erw [‚Üê NatTrans.naturality_assoc]
  dsimp
  rw [shift_shiftFunctorCompIsoId_hom_app, Iso.inv_hom_id_app_assoc,
    Functor.commShiftIso_hom_naturality_assoc, ‚Üê Functor.map_comp,
    left_triangle_components, Functor.map_id, comp_id]

end Adjunction

namespace Equivalence

variable {C D : Type*} [Category C] [Category D] (E : C ‚âå D)
  (A Z : Type*) [AddMonoid A] [AddGroup Z]
  [HasShift C A] [HasShift D A] [HasShift C Z] [HasShift D Z]

class CommShift [E.functor.CommShift A] [E.inverse.CommShift A] : Prop where
  commShift_unitIso_hom : NatTrans.CommShift E.unitIso.hom A := by infer_instance
  commShift_counitIso_hom : NatTrans.CommShift E.counitIso.hom A := by infer_instance

namespace CommShift

attribute [instance] commShift_unitIso_hom commShift_counitIso_hom

lemma mk' [E.functor.CommShift A] [E.inverse.CommShift A]
    (h : NatTrans.CommShift E.unitIso.hom A) :
    E.CommShift A where
  commShift_counitIso_hom :=
    (Adjunction.CommShift.mk' E.toAdjunction A h).commShift_counit

end CommShift

noncomputable def commShiftInverse [E.functor.CommShift Z] : E.inverse.CommShift Z :=
  E.toAdjunction.rightAdjointCommShift Z

lemma commShift_of_functor [E.functor.CommShift Z] :
    letI := E.commShiftInverse Z
    E.CommShift Z := by
  letI := E.commShiftInverse Z
  exact CommShift.mk' _ _ (E.toAdjunction.commShift_of_leftAdjoint Z).commShift_unit

end Equivalence

end CategoryTheory
