/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Shift.CommShift
import Mathlib.Algebra.Group.Prod

/-!
# Shifts which commute

Given a category `C` equipped with shifts by two additive monoids `A` and `B`,
we introduce a typeclass `ShiftsComm C A B` which allows to construct
a shift by `A √ó B` on `C`. The data involve commuting isomorphisms
`shiftFunctor C b ‚ãô shiftFunctor C a ‚âÖ shiftFunctor C a ‚ãô shiftFunctor C b`
for all `a : A` and `b : B` such that these isomorphisms (or their inverses)
satisfy the axioms of `(shiftFunctor C a).CommShift B` for all `a : A`
and `(shiftFunctor C b).CommShift A`.

This shall be used in order to construct a shift by `‚Ñ§ √ó ‚Ñ§` on the category
of homological bicomplexes.

-/

namespace CategoryTheory

open Category

variable (C A B : Type) [Category C] [AddMonoid A] [AddMonoid B]

class ShiftsComm [HasShift C A] [HasShift C B] where
  commIso (a : A) (b : B) :
    shiftFunctor C b ‚ãô shiftFunctor C a ‚âÖ shiftFunctor C a ‚ãô shiftFunctor C b
  zero‚ÇÅ (b : B) : commIso 0 b = (Functor.CommShift.isoZero (shiftFunctor C b) A).symm
  zero‚ÇÇ (a : A) : commIso a 0 = (Functor.CommShift.isoZero (shiftFunctor C a) B)
  add‚ÇÅ (a‚ÇÅ a‚ÇÇ : A) (b : B) : commIso (a‚ÇÅ + a‚ÇÇ) b =
    (Functor.CommShift.isoAdd (commIso a‚ÇÅ b).symm (commIso a‚ÇÇ b).symm).symm
  add‚ÇÇ (a : A) (b‚ÇÅ b‚ÇÇ : B) : commIso a (b‚ÇÅ + b‚ÇÇ) =
    Functor.CommShift.isoAdd (commIso a b‚ÇÅ) (commIso a b‚ÇÇ)

variable {A B}

abbrev ShiftsComm' (_ : HasShift C A) (_ : HasShift C B) := ShiftsComm C A B

section

variable [HasShift C A] [HasShift C B] [ShiftsComm C A B]

def shiftsCommIso (a : A) (b : B) :
    shiftFunctor C b ‚ãô shiftFunctor C a ‚âÖ shiftFunctor C a ‚ãô shiftFunctor C b :=
  ShiftsComm.commIso a b

lemma shiftComm_zero‚ÇÅ (b : B) :
    shiftsCommIso C (0 : A) b = (Functor.CommShift.isoZero (shiftFunctor C b) A).symm :=
  ShiftsComm.zero‚ÇÅ b

lemma shiftComm_zero‚ÇÇ (a : A) :
    shiftsCommIso C a (0 : B) = (Functor.CommShift.isoZero (shiftFunctor C a) B) :=
  ShiftsComm.zero‚ÇÇ a

end

namespace ShiftCombine

variable [HasShift C A] [HasShift C B] [ShiftsComm C A B]

def combineShiftFunctor (c : A √ó B) : C ‚•§ C := shiftFunctor C c.1 ‚ãô shiftFunctor C c.2

variable (A B) in
@[simps!]
noncomputable def combineShiftFunctorZero : combineShiftFunctor C (0 : A √ó B) ‚âÖ ùü≠ C :=
  isoWhiskerRight (shiftFunctorZero C A) _ ‚â™‚â´ shiftFunctorZero C B

@[simps!]
noncomputable def combineShiftFunctorAdd' (c‚ÇÅ c‚ÇÇ c : A √ó B) (h : c‚ÇÅ + c‚ÇÇ = c) :
    combineShiftFunctor C c ‚âÖ combineShiftFunctor C c‚ÇÅ ‚ãô combineShiftFunctor C c‚ÇÇ := by
  refine' isoWhiskerRight (shiftFunctorAdd' C c‚ÇÅ.1 c‚ÇÇ.1 c.1 (by rw [‚Üê h]; rfl)) _ ‚â™‚â´
    isoWhiskerLeft _ (shiftFunctorAdd' C c‚ÇÅ.2 c‚ÇÇ.2 c.2 (by rw [‚Üê h]; rfl)) ‚â™‚â´
    Functor.associator _ _ _ ‚â™‚â´
    isoWhiskerLeft _ ((Functor.associator _ _ _).symm ‚â™‚â´
    isoWhiskerRight (shiftsCommIso C c‚ÇÇ.1 c‚ÇÅ.2).symm _) ‚â™‚â´
    isoWhiskerLeft _ (Functor.associator _ _ _) ‚â™‚â´ (Functor.associator _ _ _).symm

noncomputable def combineShiftFunctorAdd (c c' : A √ó B) :
    combineShiftFunctor C (c + c') ‚âÖ combineShiftFunctor C c ‚ãô combineShiftFunctor C c' :=
  combineShiftFunctorAdd' C c c' _ rfl

lemma combineShiftFunctorAdd'_eq_combineShiftFunctorAdd (c c' : A √ó B) :
    combineShiftFunctorAdd' C c c' _ rfl = combineShiftFunctorAdd C c c' := rfl

lemma combineShiftFunctorAdd_hom_app_eq
    (c‚ÇÅ c‚ÇÇ c : A √ó B) (h : c‚ÇÅ + c‚ÇÇ = c) (X : C) :
    (combineShiftFunctorAdd C c‚ÇÅ c‚ÇÇ).hom.app X = eqToHom (by subst h; rfl) ‚â´
      (combineShiftFunctorAdd' C c‚ÇÅ c‚ÇÇ c h).hom.app X := by
  subst h
  simp [combineShiftFunctorAdd'_eq_combineShiftFunctorAdd]

lemma zero_add_hom_app' (c : A √ó B) (X : C) :
    (combineShiftFunctorAdd' C 0 c c (zero_add c)).hom.app X =
      (combineShiftFunctor C c).map ((combineShiftFunctorZero C A B).inv.app X) := by
  dsimp
  simp only [combineShiftFunctorAdd'_hom_app, Prod.snd_zero, Prod.fst_zero, shiftComm_zero‚ÇÇ,
    Functor.CommShift.isoZero_inv_app, Functor.map_comp]
  dsimp [combineShiftFunctor]
  rw [shiftFunctorAdd'_zero_add_hom_app, shiftFunctorAdd'_zero_add_hom_app]
  dsimp
  rw [‚Üê Functor.map_comp, ‚Üê Functor.map_comp, ‚Üê Functor.map_comp, ‚Üê Functor.map_comp,
    ‚Üê Functor.map_comp]
  erw [‚Üê NatTrans.naturality, ‚Üê NatTrans.naturality]
  rw [‚Üê NatTrans.naturality_assoc]
  rw [‚Üê NatTrans.naturality_assoc]
  rw [Iso.inv_hom_id_app, comp_id]
  dsimp
  simp only [Functor.map_comp]

lemma add_zero_hom_app' (c : A √ó B) (X : C) :
    (combineShiftFunctorAdd' C c 0 c (add_zero c)).hom.app X =
      (combineShiftFunctorZero C A B).inv.app ((combineShiftFunctor C c).obj X) := by
  dsimp
  simp only [combineShiftFunctorAdd'_hom_app, Prod.snd_zero, Prod.fst_zero, shiftComm_zero‚ÇÅ,
    Iso.symm_inv, Functor.CommShift.isoZero_hom_app, Functor.map_comp]
  dsimp [combineShiftFunctor]
  erw [‚Üê NatTrans.naturality_assoc, ‚Üê NatTrans.naturality_assoc]
  rw [‚Üê Functor.map_comp_assoc, shiftFunctorAdd'_add_zero_hom_app, Iso.inv_hom_id_app]
  dsimp
  rw [Functor.map_id, id_comp, shiftFunctorAdd'_add_zero_hom_app]

variable (A B)

noncomputable def shiftMkCore : ShiftMkCore C (A √ó B) where
  F := combineShiftFunctor C
  zero := combineShiftFunctorZero C A B
  add := combineShiftFunctorAdd C
  assoc_hom_app := sorry
  zero_add_hom_app c X := by
    rw [combineShiftFunctorAdd_hom_app_eq C 0 c c (zero_add c), zero_add_hom_app' C c X]
  add_zero_hom_app c X := by
    rw [combineShiftFunctorAdd_hom_app_eq C c 0 c (add_zero c), add_zero_hom_app' C c X]

end ShiftCombine

noncomputable def HasShift.combine [HasShift C A] [HasShift C B] [ShiftsComm C A B] :
  HasShift C (A √ó B) := hasShiftMk _ _ (ShiftCombine.shiftMkCore C A B)

end CategoryTheory
