/-
Copyright (c) 2020 Brendan Murphy. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Brendan Murphy
-/
import Mathlib.CategoryTheory.Adjunction.Basic
import Mathlib.CategoryTheory.Products.Basic
import Mathlib.Logic.Equiv.Basic

/-!
# Products of adjunction

Given a pair of adjunction `F‚ÇÅ ‚ä£ G‚ÇÅ`, `F‚ÇÇ ‚ä£ G‚ÇÇ` there is an adjunction of
products `F‚ÇÅ.prod F‚ÇÇ ‚ä£ G‚ÇÅ.prod G‚ÇÇ`.

-/

open CategoryTheory

universe v‚ÇÄ v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÄ u‚ÇÅ u‚ÇÇ u‚ÇÉ

open CategoryTheory.Category
open CategoryTheory.Functor

namespace CategoryTheory.Adjunction

variable
  {A : Type u‚ÇÄ} [Category.{v‚ÇÄ} A] {B : Type u‚ÇÅ} [Category.{v‚ÇÅ} B]
  {C : Type u‚ÇÇ} [Category.{v‚ÇÇ} C] {D : Type u‚ÇÉ} [Category.{v‚ÇÉ} D]
  {F‚ÇÅ : A ‚•§ B} {G‚ÇÅ : B ‚•§ A} {F‚ÇÇ : C ‚•§ D} {G‚ÇÇ : D ‚•§ C}

/-- The cartesian product of two adjunctions. -/
@[simps!]
def prod (adj‚ÇÅ : F‚ÇÅ ‚ä£ G‚ÇÅ) (adj‚ÇÇ : F‚ÇÇ ‚ä£ G‚ÇÇ) : F‚ÇÅ.prod F‚ÇÇ ‚ä£ G‚ÇÅ.prod G‚ÇÇ where
  homEquiv XY ZW := .prodCongr (adj‚ÇÅ.homEquiv XY.1 ZW.1) (adj‚ÇÇ.homEquiv XY.2 ZW.2)
  -- we're using a defeq ùü≠ (C √ó D) ‚âÖ ùü≠ C √ó ùü≠ D here, maybe that should be changed
  unit := NatTrans.prod adj‚ÇÅ.unit adj‚ÇÇ.unit
  counit := NatTrans.prod adj‚ÇÅ.counit adj‚ÇÇ.counit

end CategoryTheory.Adjunction
