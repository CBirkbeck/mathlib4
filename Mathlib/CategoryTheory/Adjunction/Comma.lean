/-
Copyright (c) 2021 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import Mathlib.CategoryTheory.Adjunction.Basic
import Mathlib.CategoryTheory.PUnit
import Mathlib.CategoryTheory.StructuredArrow

#align_import category_theory.adjunction.comma from "leanprover-community/mathlib"@"8a318021995877a44630c898d0b2bc376fceef3b"

/-!
# Properties of comma categories relating to adjunctions

This file shows that for a functor `G : D ‚•§ C` the data of an initial object in each
`StructuredArrow` category on `G` is equivalent to a left adjoint to `G`, as well as the dual.

Specifically, `adjunctionOfStructuredArrowInitials` gives the left adjoint assuming the
appropriate initial objects exist, and `mkInitialOfLeftAdjoint` constructs the initial objects
provided a left adjoint.

The duals are also shown.
-/


universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

noncomputable section

namespace CategoryTheory

open Limits

variable {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [Category.{v‚ÇÅ} C] [Category.{v‚ÇÇ} D] (G : D ‚•§ C)

section OfInitials

variable [‚àÄ A, HasInitial (StructuredArrow A G)]

/-- Implementation: If each structured arrow category on `G` has an initial object, an equivalence
which is helpful for constructing a left adjoint to `G`.
-/
@[simps]
def leftAdjointOfStructuredArrowInitialsAux (A : C) (B : D) :
    ((‚ä•_ StructuredArrow A G).right ‚ü∂ B) ‚âÉ (A ‚ü∂ G.obj B)
    where
  toFun g := (‚ä•_ StructuredArrow A G).hom ‚â´ G.map g
  invFun f := CommaMorphism.right (initial.to (StructuredArrow.mk f))
  left_inv g := by
    let B' : StructuredArrow A G := StructuredArrow.mk ((‚ä•_ StructuredArrow A G).hom ‚â´ G.map g)
    -- ‚ä¢ (fun f => (initial.to (StructuredArrow.mk f)).right) ((fun g => (‚ä•_ Structur ‚Ä¶
    let g' : ‚ä•_ StructuredArrow A G ‚ü∂ B' := StructuredArrow.homMk g rfl
    -- ‚ä¢ (fun f => (initial.to (StructuredArrow.mk f)).right) ((fun g => (‚ä•_ Structur ‚Ä¶
    have : initial.to _ = g' := by aesop_cat
    -- ‚ä¢ (fun f => (initial.to (StructuredArrow.mk f)).right) ((fun g => (‚ä•_ Structur ‚Ä¶
    change CommaMorphism.right (initial.to B') = _
    -- ‚ä¢ (initial.to B').right = g
    rw [this]
    -- ‚ä¢ g'.right = g
    rfl
    -- üéâ no goals
  right_inv f := by
    let B' : StructuredArrow A G := StructuredArrow.mk f
    -- ‚ä¢ (fun g => (‚ä•_ StructuredArrow A G).hom ‚â´ G.map g) ((fun f => (initial.to (St ‚Ä¶
    apply (CommaMorphism.w (initial.to B')).symm.trans (Category.id_comp _)
    -- üéâ no goals
#align category_theory.left_adjoint_of_structured_arrow_initials_aux CategoryTheory.leftAdjointOfStructuredArrowInitialsAux

/--
If each structured arrow category on `G` has an initial object, construct a left adjoint to `G`. It
is shown that it is a left adjoint in `adjunctionOfStructuredArrowInitials`.
-/
def leftAdjointOfStructuredArrowInitials : C ‚•§ D :=
  Adjunction.leftAdjointOfEquiv (leftAdjointOfStructuredArrowInitialsAux G) fun _ _ => by simp
                                                                                          -- üéâ no goals
#align category_theory.left_adjoint_of_structured_arrow_initials CategoryTheory.leftAdjointOfStructuredArrowInitials

/--
If each structured arrow category on `G` has an initial object, we have a constructed left adjoint
to `G`.
-/
def adjunctionOfStructuredArrowInitials : leftAdjointOfStructuredArrowInitials G ‚ä£ G :=
  Adjunction.adjunctionOfEquivLeft _ _
#align category_theory.adjunction_of_structured_arrow_initials CategoryTheory.adjunctionOfStructuredArrowInitials

/-- If each structured arrow category on `G` has an initial object, `G` is a right adjoint. -/
def isRightAdjointOfStructuredArrowInitials : IsRightAdjoint G
    where
  left := _
  adj := adjunctionOfStructuredArrowInitials G
#align category_theory.is_right_adjoint_of_structured_arrow_initials CategoryTheory.isRightAdjointOfStructuredArrowInitials

end OfInitials

section OfTerminals

variable [‚àÄ A, HasTerminal (CostructuredArrow G A)]

/-- Implementation: If each costructured arrow category on `G` has a terminal object, an equivalence
which is helpful for constructing a right adjoint to `G`.
-/
@[simps]
def rightAdjointOfCostructuredArrowTerminalsAux (B : D) (A : C) :
    (G.obj B ‚ü∂ A) ‚âÉ (B ‚ü∂ (‚ä§_ CostructuredArrow G A).left)
    where
  toFun g := CommaMorphism.left (terminal.from (CostructuredArrow.mk g))
  invFun g := G.map g ‚â´ (‚ä§_ CostructuredArrow G A).hom
  left_inv := by aesop_cat
                 -- üéâ no goals
  right_inv g := by
    let B' : CostructuredArrow G A :=
      CostructuredArrow.mk (G.map g ‚â´ (‚ä§_ CostructuredArrow G A).hom)
    let g' : B' ‚ü∂ ‚ä§_ CostructuredArrow G A := CostructuredArrow.homMk g rfl
    -- ‚ä¢ (fun g => (terminal.from (CostructuredArrow.mk g)).left) ((fun g => G.map g  ‚Ä¶
    have : terminal.from _ = g' := by aesop_cat
    -- ‚ä¢ (fun g => (terminal.from (CostructuredArrow.mk g)).left) ((fun g => G.map g  ‚Ä¶
    change CommaMorphism.left (terminal.from B') = _
    -- ‚ä¢ (terminal.from B').left = g
    rw [this]
    -- ‚ä¢ g'.left = g
    rfl
    -- üéâ no goals
#align category_theory.right_adjoint_of_costructured_arrow_terminals_aux CategoryTheory.rightAdjointOfCostructuredArrowTerminalsAux

/--
If each costructured arrow category on `G` has a terminal object, construct a right adjoint to `G`.
It is shown that it is a right adjoint in `adjunctionOfStructuredArrowInitials`.
-/
def rightAdjointOfCostructuredArrowTerminals : C ‚•§ D :=
  Adjunction.rightAdjointOfEquiv (rightAdjointOfCostructuredArrowTerminalsAux G)
      fun B‚ÇÅ B‚ÇÇ A f g => by
    rw [‚Üê Equiv.eq_symm_apply]
    -- ‚ä¢ G.map f ‚â´ g = ‚Üë(rightAdjointOfCostructuredArrowTerminalsAux G B‚ÇÅ A).symm (f  ‚Ä¶
    simp
    -- üéâ no goals
#align category_theory.right_adjoint_of_costructured_arrow_terminals CategoryTheory.rightAdjointOfCostructuredArrowTerminals

/-- If each costructured arrow category on `G` has a terminal object, we have a constructed right
adjoint to `G`.
-/
def adjunctionOfCostructuredArrowTerminals : G ‚ä£ rightAdjointOfCostructuredArrowTerminals G :=
  Adjunction.adjunctionOfEquivRight _ _
#align category_theory.adjunction_of_costructured_arrow_terminals CategoryTheory.adjunctionOfCostructuredArrowTerminals

/-- If each costructured arrow category on `G` has a terminal object, `G` is a left adjoint. -/
def isLeftAdjointOfCostructuredArrowTerminals : IsLeftAdjoint G
    where
  right := rightAdjointOfCostructuredArrowTerminals G
  adj := Adjunction.adjunctionOfEquivRight _ _
#align category_theory.is_left_adjoint_of_costructured_arrow_terminals CategoryTheory.isLeftAdjointOfCostructuredArrowTerminals

end OfTerminals

section

variable {F : C ‚•§ D}

/-- Given a left adjoint to `G`, we can construct an initial object in each structured arrow
category on `G`. -/
def mkInitialOfLeftAdjoint (h : F ‚ä£ G) (A : C) :
    IsInitial (StructuredArrow.mk (h.unit.app A) : StructuredArrow A G)
    where
  desc B := StructuredArrow.homMk ((h.homEquiv _ _).symm B.pt.hom)
  uniq s m _ := by
    apply StructuredArrow.ext
    -- ‚ä¢ m.right = ((fun B => StructuredArrow.homMk (‚Üë(Adjunction.homEquiv h ((Functo ‚Ä¶
    dsimp
    -- ‚ä¢ m.right = ‚Üë(Adjunction.homEquiv h A s.pt.right).symm s.pt.hom
    rw [Equiv.eq_symm_apply, Adjunction.homEquiv_unit]
    -- ‚ä¢ NatTrans.app h.unit A ‚â´ G.map m.right = s.pt.hom
    apply StructuredArrow.w m
    -- üéâ no goals
#align category_theory.mk_initial_of_left_adjoint CategoryTheory.mkInitialOfLeftAdjoint

/-- Given a right adjoint to `F`, we can construct a terminal object in each costructured arrow
category on `F`. -/
def mkTerminalOfRightAdjoint (h : F ‚ä£ G) (A : D) :
    IsTerminal (CostructuredArrow.mk (h.counit.app A) : CostructuredArrow F A)
    where
  lift B := CostructuredArrow.homMk (h.homEquiv _ _ B.pt.hom)
  uniq s m _ := by
    apply CostructuredArrow.ext
    -- ‚ä¢ m.left = ((fun B => CostructuredArrow.homMk (‚Üë(Adjunction.homEquiv h B.pt.le ‚Ä¶
    dsimp
    -- ‚ä¢ m.left = ‚Üë(Adjunction.homEquiv h s.pt.left A) s.pt.hom
    rw [h.eq_homEquiv_apply, Adjunction.homEquiv_counit]
    -- ‚ä¢ F.map m.left ‚â´ NatTrans.app h.counit A = s.pt.hom
    exact CostructuredArrow.w m
    -- üéâ no goals
#align category_theory.mk_terminal_of_right_adjoint CategoryTheory.mkTerminalOfRightAdjoint

end

theorem nonempty_isRightAdjoint_iff_hasInitial_structuredArrow {G : D ‚•§ C} :
    Nonempty (IsRightAdjoint G) ‚Üî ‚àÄ A, HasInitial (StructuredArrow A G) :=
  ‚ü®fun ‚ü®h‚ü© A => (mkInitialOfLeftAdjoint _ h.adj A).hasInitial, fun _ =>
    ‚ü®isRightAdjointOfStructuredArrowInitials _‚ü©‚ü©
#align category_theory.nonempty_is_right_adjoint_iff_has_initial_structured_arrow CategoryTheory.nonempty_isRightAdjoint_iff_hasInitial_structuredArrow

theorem nonempty_isLeftAdjoint_iff_hasTerminal_costructuredArrow {F : C ‚•§ D} :
    Nonempty (IsLeftAdjoint F) ‚Üî ‚àÄ A, HasTerminal (CostructuredArrow F A) :=
  ‚ü®fun ‚ü®h‚ü© A => (mkTerminalOfRightAdjoint _ h.adj A).hasTerminal, fun _ =>
    ‚ü®isLeftAdjointOfCostructuredArrowTerminals _‚ü©‚ü©
#align category_theory.nonempty_is_left_adjoint_iff_has_terminal_costructured_arrow CategoryTheory.nonempty_isLeftAdjoint_iff_hasTerminal_costructuredArrow

end CategoryTheory
