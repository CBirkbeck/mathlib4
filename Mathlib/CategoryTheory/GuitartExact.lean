import Mathlib.CategoryTheory.Limits.Final

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ v‚ÇÅ' v‚ÇÇ' v‚ÇÉ' v‚ÇÑ' u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ u‚ÇÅ' u‚ÇÇ' u‚ÇÉ' u‚ÇÑ'

namespace CategoryTheory

namespace IsConnected

variable {C D : Type*} [Category C] [Category D]

instance [IsConnected C] [IsConnected D] : IsConnected (C √ó D) := by
  apply zigzag_isConnected
  intro ‚ü®X‚ÇÅ, Y‚ÇÅ‚ü© ‚ü®X‚ÇÇ, Y‚ÇÇ‚ü©
  exact (zigzag_obj_of_zigzag (Functor.prod' (ùü≠ C) ((Functor.const C).obj Y‚ÇÅ))
      (isConnected_zigzag X‚ÇÅ X‚ÇÇ)).trans
    (zigzag_obj_of_zigzag (Functor.prod' ((Functor.const D).obj X‚ÇÇ) (ùü≠ D))
      (isConnected_zigzag Y‚ÇÅ Y‚ÇÇ))

end IsConnected

open Category

variable {C‚ÇÅ : Type u‚ÇÅ} {C‚ÇÇ : Type u‚ÇÇ} {C‚ÇÉ : Type u‚ÇÉ} {C‚ÇÑ : Type u‚ÇÑ}
  [Category.{v‚ÇÅ} C‚ÇÅ] [Category.{v‚ÇÇ} C‚ÇÇ] [Category.{v‚ÇÉ} C‚ÇÉ] [Category.{v‚ÇÑ} C‚ÇÑ]
  (T : C‚ÇÅ ‚•§ C‚ÇÇ) (L : C‚ÇÅ ‚•§ C‚ÇÉ) (R : C‚ÇÇ ‚•§ C‚ÇÑ) (B : C‚ÇÉ ‚•§ C‚ÇÑ)

section

variable {T}

abbrev StructuredArrow.mk' {X‚ÇÇ : C‚ÇÇ} (X‚ÇÅ : C‚ÇÅ) (g : X‚ÇÇ ‚ü∂ T.obj X‚ÇÅ) : StructuredArrow X‚ÇÇ T :=
  StructuredArrow.mk g

theorem StructuredArrow.cases {X‚ÇÇ : C‚ÇÇ} (f : StructuredArrow X‚ÇÇ T) :
    ‚àÉ (X‚ÇÅ : C‚ÇÅ) (g : X‚ÇÇ ‚ü∂ T.obj X‚ÇÅ), f = mk g := ‚ü®_, _, eq_mk f‚ü©

theorem StructuredArrow.hom_cases {X‚ÇÇ : C‚ÇÇ} {f g : StructuredArrow X‚ÇÇ T} (œÜ : f ‚ü∂ g) :
    ‚àÉ (œà : f.right ‚ü∂ g.right) (hœà : f.hom ‚â´ T.map œà = g.hom),
      œÜ = StructuredArrow.homMk œà hœà := ‚ü®œÜ.right, StructuredArrow.w œÜ, rfl‚ü©

abbrev CostructuredArrow.mk' {X‚ÇÇ : C‚ÇÇ} (X‚ÇÅ : C‚ÇÅ) (g : T.obj X‚ÇÅ ‚ü∂ X‚ÇÇ) : CostructuredArrow T X‚ÇÇ :=
  CostructuredArrow.mk g

theorem CostructuredArrow.cases {X‚ÇÇ : C‚ÇÇ} (f : CostructuredArrow T X‚ÇÇ) :
    ‚àÉ (X‚ÇÅ : C‚ÇÅ) (g :T.obj X‚ÇÅ ‚ü∂ X‚ÇÇ), f = mk g := ‚ü®_, _, eq_mk f‚ü©

theorem CostructuredArrow.hom_cases {X‚ÇÇ : C‚ÇÇ} {f g : CostructuredArrow T X‚ÇÇ} (œÜ : f ‚ü∂ g) :
    ‚àÉ (œà : f.left ‚ü∂ g.left) (hœà : T.map œà ‚â´ g.hom = f.hom),
      œÜ = CostructuredArrow.homMk œà hœà := ‚ü®œÜ.left, CostructuredArrow.w œÜ, rfl‚ü©

end

def TwoSquare := T ‚ãô R ‚ü∂ L ‚ãô B

namespace TwoSquare

variable {T L R B}

@[ext]
lemma ext (w w' : TwoSquare T L R B) (h : ‚àÄ (X : C‚ÇÅ), w.app X = w'.app X) : w = w' :=
  NatTrans.ext _ _ (funext h)

variable (w : TwoSquare T L R B)

@[simps!]
def costructuredArrowRightwards (X‚ÇÉ : C‚ÇÉ) :
    CostructuredArrow L X‚ÇÉ ‚•§ CostructuredArrow R (B.obj X‚ÇÉ) :=
  CostructuredArrow.post L B X‚ÇÉ ‚ãô Comma.mapLeft _ w ‚ãô
    CostructuredArrow.pre T R (B.obj X‚ÇÉ)

@[simps!]
def structuredArrowDownwards (X‚ÇÇ : C‚ÇÇ) :
    StructuredArrow X‚ÇÇ T ‚•§ StructuredArrow (R.obj X‚ÇÇ) B :=
  StructuredArrow.post X‚ÇÇ T R ‚ãô Comma.mapRight _ w ‚ãô
    StructuredArrow.pre (R.obj X‚ÇÇ) L B

section

variable {X‚ÇÇ : C‚ÇÇ} {X‚ÇÉ : C‚ÇÉ} (g : R.obj X‚ÇÇ ‚ü∂ B.obj X‚ÇÉ)

abbrev JRightwards :=
  StructuredArrow (CostructuredArrow.mk g) (costructuredArrowRightwards w X‚ÇÉ)

abbrev JDownwards :=
  CostructuredArrow (structuredArrowDownwards w X‚ÇÇ) (StructuredArrow.mk g)

section

@[simps!]
def JDownwards.mk
    (X‚ÇÅ : C‚ÇÅ) (a : X‚ÇÇ ‚ü∂ T.obj X‚ÇÅ) (b : L.obj X‚ÇÅ ‚ü∂ X‚ÇÉ) (comm : R.map a ‚â´ w.app X‚ÇÅ ‚â´ B.map b = g) :
      w.JDownwards g :=
  CostructuredArrow.mk' (StructuredArrow.mk a) (StructuredArrow.homMk b (by simpa using comm))

variable {g}

lemma JDownwards.cases
    (f : w.JDownwards g) :
    ‚àÉ (X‚ÇÅ : C‚ÇÅ) (a : X‚ÇÇ ‚ü∂ T.obj X‚ÇÅ) (b : L.obj X‚ÇÅ ‚ü∂ X‚ÇÉ) (comm : R.map a ‚â´ w.app X‚ÇÅ ‚â´ B.map b = g),
      f = mk w g X‚ÇÅ a b comm := by
  obtain ‚ü®g, œÜ, rfl‚ü© := CostructuredArrow.cases f
  obtain ‚ü®X‚ÇÅ, a, rfl‚ü© := g.cases
  obtain ‚ü®b, hb, rfl‚ü© := StructuredArrow.hom_cases œÜ
  exact ‚ü®X‚ÇÅ, a, b, by simpa using hb, rfl‚ü©

variable (g)

@[simps!]
def JRightwards.mk
    (X‚ÇÅ : C‚ÇÅ) (a : X‚ÇÇ ‚ü∂ T.obj X‚ÇÅ) (b : L.obj X‚ÇÅ ‚ü∂ X‚ÇÉ) (comm : R.map a ‚â´ w.app X‚ÇÅ ‚â´ B.map b = g) :
      w.JRightwards g :=
  StructuredArrow.mk' (CostructuredArrow.mk b) (CostructuredArrow.homMk a comm)

variable {g}

lemma JRightwards.cases
    (f : w.JRightwards g) :
    ‚àÉ (X‚ÇÅ : C‚ÇÅ) (a : X‚ÇÇ ‚ü∂ T.obj X‚ÇÅ) (b : L.obj X‚ÇÅ ‚ü∂ X‚ÇÉ) (comm : R.map a ‚â´ w.app X‚ÇÅ ‚â´ B.map b = g),
      f = mk w g X‚ÇÅ a b comm := by
  obtain ‚ü®g, œÜ, rfl‚ü© := StructuredArrow.cases f
  obtain ‚ü®X‚ÇÅ, b, rfl‚ü© := g.cases
  obtain ‚ü®a, ha, rfl‚ü© := CostructuredArrow.hom_cases œÜ
  exact ‚ü®X‚ÇÅ, a, b, by simpa using ha, rfl‚ü©

end

namespace EquivalenceJ

@[simps]
def functor : JRightwards w g ‚•§ JDownwards w g where
  obj f := CostructuredArrow.mk
      (StructuredArrow.homMk f.right.hom (by simpa using CostructuredArrow.w f.hom) :
      (structuredArrowDownwards w X‚ÇÇ).obj
        (StructuredArrow.mk f.hom.left) ‚ü∂ StructuredArrow.mk g)
  map {f‚ÇÅ f‚ÇÇ} œÜ :=
    CostructuredArrow.homMk (StructuredArrow.homMk œÜ.right.left
      (by dsimp; rw [‚Üê StructuredArrow.w œÜ]; rfl))
      (by ext; exact CostructuredArrow.w œÜ.right)
  map_id _ := rfl
  map_comp _ _ := rfl

@[simps]
def inverse : JDownwards w g ‚•§ JRightwards w g where
  obj f := StructuredArrow.mk
      (CostructuredArrow.homMk f.left.hom (by simpa using StructuredArrow.w f.hom) :
    CostructuredArrow.mk g ‚ü∂
      (costructuredArrowRightwards w X‚ÇÉ).obj (CostructuredArrow.mk f.hom.right))
  map {f‚ÇÅ f‚ÇÇ} œÜ := StructuredArrow.homMk (CostructuredArrow.homMk œÜ.left.right
    (by dsimp; rw [‚Üê CostructuredArrow.w œÜ]; rfl))
    (by ext; exact StructuredArrow.w œÜ.left)
  map_id _ := rfl
  map_comp _ _ := rfl

end EquivalenceJ

def equivalenceJ :
  JRightwards w g ‚âå JDownwards w g where
  functor := EquivalenceJ.functor w g
  inverse := EquivalenceJ.inverse w g
  unitIso := Iso.refl _
  counitIso := Iso.refl _
  functor_unitIso_comp X := by ext; dsimp; simp

lemma isConnected_JRightwards_iff :
    IsConnected (JRightwards w g) ‚Üî
      IsConnected (JDownwards w g) := by
  constructor
  ¬∑ intro
    exact isConnected_of_equivalent (equivalenceJ w g)
  ¬∑ intro
    exact isConnected_of_equivalent (equivalenceJ w g).symm

end

class GuitartExact : Prop where
  isConnected' {X‚ÇÇ : C‚ÇÇ} {X‚ÇÉ : C‚ÇÉ} (g : R.obj X‚ÇÇ ‚ü∂ B.obj X‚ÇÉ) :
    IsConnected (JRightwards w g)

lemma guitartExact_iff_isConnected_rightwards :
    GuitartExact w ‚Üî ‚àÄ {X‚ÇÇ : C‚ÇÇ} {X‚ÇÉ : C‚ÇÉ} (g : R.obj X‚ÇÇ ‚ü∂ B.obj X‚ÇÉ),
      IsConnected (JRightwards w g) := by
  constructor
  ¬∑ intro h
    exact h.isConnected'
  ¬∑ intro h
    exact ‚ü®h‚ü©

lemma guitartExact_iff_isConnected_downwards :
    GuitartExact w ‚Üî ‚àÄ {X‚ÇÇ : C‚ÇÇ} {X‚ÇÉ : C‚ÇÉ} (g : R.obj X‚ÇÇ ‚ü∂ B.obj X‚ÇÉ),
      IsConnected (JDownwards w g) := by
  simp only [guitartExact_iff_isConnected_rightwards,
    isConnected_JRightwards_iff]

instance [hw : GuitartExact w] {X‚ÇÉ : C‚ÇÉ} (g : CostructuredArrow R (B.obj X‚ÇÉ)) :
    IsConnected (StructuredArrow g (costructuredArrowRightwards w X‚ÇÉ)) := by
  rw [guitartExact_iff_isConnected_rightwards] at hw
  apply hw

instance [hw : GuitartExact w] {X‚ÇÇ : C‚ÇÇ} (g : StructuredArrow (R.obj X‚ÇÇ) B) :
    IsConnected (CostructuredArrow (structuredArrowDownwards w X‚ÇÇ) g) := by
  rw [guitartExact_iff_isConnected_downwards] at hw
  apply hw

lemma guitartExact_iff_final :
    GuitartExact w ‚Üî ‚àÄ (X‚ÇÉ : C‚ÇÉ), (costructuredArrowRightwards w X‚ÇÉ).Final :=
  ‚ü®fun _ _ => ‚ü®fun _ => inferInstance‚ü©, fun _ => ‚ü®fun _ => inferInstance‚ü©‚ü©

instance [hw : GuitartExact w] (X‚ÇÉ : C‚ÇÉ) :
    (costructuredArrowRightwards w X‚ÇÉ).Final := by
  rw [guitartExact_iff_final] at hw
  apply hw

lemma guitartExact_iff_initial :
    GuitartExact w ‚Üî ‚àÄ (X‚ÇÇ : C‚ÇÇ), (structuredArrowDownwards w X‚ÇÇ).Initial := by
  refine' ‚ü®fun _ _ => ‚ü®fun _ => inferInstance‚ü©, _‚ü©
  rw [guitartExact_iff_isConnected_downwards]
  intro h
  intros
  infer_instance

instance [hw : GuitartExact w] (X‚ÇÇ : C‚ÇÇ) :
    (structuredArrowDownwards w X‚ÇÇ).Initial := by
  rw [guitartExact_iff_initial] at hw
  apply hw

instance [IsEquivalence L] [IsEquivalence R] [IsIso w] : GuitartExact w := by
  rw [guitartExact_iff_initial]
  intro X‚ÇÇ
  have := StructuredArrow.isEquivalencePost X‚ÇÇ T R
  have : IsEquivalence (Comma.mapRight _ w : StructuredArrow (R.obj X‚ÇÇ) _ ‚•§ StructuredArrow (R.obj X‚ÇÇ) _) :=
    IsEquivalence.ofEquivalence (Comma.mapRightIso _ (asIso w))
  have := StructuredArrow.isEquivalencePre (R.obj X‚ÇÇ) L B
  dsimp only [structuredArrowDownwards]
  infer_instance

@[simps!]
def whiskerVertical {L' : C‚ÇÅ ‚•§ C‚ÇÉ} {R' : C‚ÇÇ ‚•§ C‚ÇÑ} (Œ± : L ‚ü∂ L') (Œ≤ : R' ‚ü∂ R) :
    TwoSquare T L' R' B :=
  whiskerLeft _ Œ≤ ‚â´ w ‚â´ whiskerRight Œ± _

namespace GuitartExact

lemma whiskerVertical [w.GuitartExact] {L' : C‚ÇÅ ‚•§ C‚ÇÉ} {R' : C‚ÇÇ ‚•§ C‚ÇÑ}
    (Œ± : L ‚âÖ L') (Œ≤ : R ‚âÖ R') : (w.whiskerVertical Œ±.hom Œ≤.inv).GuitartExact := by
  rw [guitartExact_iff_initial]
  intro X‚ÇÇ
  let e : structuredArrowDownwards (w.whiskerVertical Œ±.hom Œ≤.inv) X‚ÇÇ ‚âÖ
      w.structuredArrowDownwards X‚ÇÇ ‚ãô (StructuredArrow.mapIso (Œ≤.app X‚ÇÇ) ).functor :=
    NatIso.ofComponents (fun f => StructuredArrow.isoMk (Œ±.symm.app f.right) (by
      dsimp
      simp only [NatTrans.naturality_assoc, assoc, NatIso.cancel_natIso_inv_left, ‚Üê B.map_comp,
        Iso.hom_inv_id_app, B.map_id, comp_id])) (by aesop_cat)
  rw [Functor.initial_natIso_iff e]
  infer_instance

@[simp]
lemma whiskerVertical_iff {L' : C‚ÇÅ ‚•§ C‚ÇÉ} {R' : C‚ÇÇ ‚•§ C‚ÇÑ}
    (Œ± : L ‚âÖ L') (Œ≤ : R ‚âÖ R') :
    (w.whiskerVertical Œ±.hom Œ≤.inv).GuitartExact ‚Üî w.GuitartExact := by
  constructor
  ¬∑ intro h
    convert whiskerVertical (w.whiskerVertical Œ±.hom Œ≤.inv) Œ±.symm Œ≤.symm
    ext X‚ÇÅ
    simp only [Functor.comp_obj, Iso.symm_hom, Iso.symm_inv,
      whiskerVertical_app, assoc, Iso.hom_inv_id_app_assoc,
      ‚Üê B.map_comp, Iso.hom_inv_id_app, B.map_id, comp_id]
  ¬∑ intro h
    exact whiskerVertical w Œ± Œ≤

instance [w.GuitartExact] {L' : C‚ÇÅ ‚•§ C‚ÇÉ} {R' : C‚ÇÇ ‚•§ C‚ÇÑ} (Œ± : L ‚ü∂ L') (Œ≤ : R' ‚ü∂ R)
    [IsIso Œ±] [IsIso Œ≤] : (w.whiskerVertical Œ± Œ≤).GuitartExact :=
  whiskerVertical w (asIso Œ±) (asIso Œ≤).symm

end GuitartExact

section prod

variable {C‚ÇÅ' : Type u‚ÇÅ'} {C‚ÇÇ' : Type u‚ÇÇ'} {C‚ÇÉ' : Type u‚ÇÉ'} {C‚ÇÑ' : Type u‚ÇÑ'}
  [Category.{v‚ÇÅ'} C‚ÇÅ'] [Category.{v‚ÇÇ'} C‚ÇÇ'] [Category.{v‚ÇÉ'} C‚ÇÉ'] [Category.{v‚ÇÑ'} C‚ÇÑ']
  {T' : C‚ÇÅ' ‚•§ C‚ÇÇ'} {L' : C‚ÇÅ' ‚•§ C‚ÇÉ'} {R' : C‚ÇÇ' ‚•§ C‚ÇÑ'} {B' : C‚ÇÉ' ‚•§ C‚ÇÑ'}
  (w' : TwoSquare T' L' R' B')

def prod : TwoSquare (T.prod T') (L.prod L') (R.prod R') (B.prod B') := NatTrans.prod w w'

section

variable {Y‚ÇÇ : C‚ÇÇ √ó C‚ÇÇ'} {Y‚ÇÉ : C‚ÇÉ √ó C‚ÇÉ'} (g : (R.prod R').obj Y‚ÇÇ ‚ü∂ (B.prod B').obj Y‚ÇÉ)

namespace JRightwardsProdEquivalence

@[simp]
def functorObj (X : JRightwards (w.prod w') g) : (JRightwards w g.1) √ó (JRightwards w' g.2) :=
  ‚ü®JRightwards.mk w g.1 _ X.hom.left.1 X.right.hom.1
      (by simpa using congr_arg _root_.Prod.fst X.hom.w),
    JRightwards.mk w' g.2 _ X.hom.left.2 X.right.hom.2
      (by simpa using congr_arg _root_.Prod.snd X.hom.w)‚ü©

@[simps]
def functor : JRightwards (w.prod w') g ‚•§ (JRightwards w g.1) √ó (JRightwards w' g.2) where
  obj X := functorObj w w' g X
  map {X Y} f :=
    ‚ü®StructuredArrow.homMk (CostructuredArrow.homMk f.right.left.1
        (by simpa using congr_arg _root_.Prod.fst f.right.w)) (by
          ext
          have eq := StructuredArrow.w f
          dsimp at eq ‚ä¢
          rw [‚Üê eq]
          rfl),
      StructuredArrow.homMk (CostructuredArrow.homMk f.right.left.2
        (by simpa using congr_arg _root_.Prod.snd f.right.w)) (by
          ext
          have eq := StructuredArrow.w f
          dsimp at eq ‚ä¢
          rw [‚Üê eq]
          rfl)‚ü©
  map_id _ := rfl
  map_comp f g := rfl

@[simp]
def inverseObj (X : (JRightwards w g.1) √ó (JRightwards w' g.2)) : JRightwards (w.prod w') g :=
  JRightwards.mk _ _ ‚ü®X.1.right.left, X.2.right.left‚ü©
    ‚ü®X.1.hom.left, X.2.hom.left‚ü© ‚ü®X.1.right.hom, X.2.right.hom‚ü© (by
      dsimp
      ext
      ¬∑ simpa using X.1.hom.w
      ¬∑ simpa using X.2.hom.w)

@[simps]
def inverse : (JRightwards w g.1) √ó (JRightwards w' g.2) ‚•§ JRightwards (w.prod w') g where
  obj X := inverseObj w w' g X
  map {X Y} f := StructuredArrow.homMk
    (CostructuredArrow.homMk ‚ü®f.1.right.left, f.2.right.left‚ü© (by
      dsimp
      ext
      ¬∑ exact CostructuredArrow.w f.1.right
      ¬∑ exact CostructuredArrow.w f.2.right)) (by
      dsimp
      ext
      dsimp
      ext
      ¬∑ have eq := StructuredArrow.w f.1
        dsimp at eq ‚ä¢
        rw [‚Üê eq]
        rfl
      ¬∑ have eq := StructuredArrow.w f.2
        dsimp at eq ‚ä¢
        rw [‚Üê eq]
        rfl)
  map_id _ := rfl
  map_comp _ _ := rfl

end JRightwardsProdEquivalence

set_option maxHeartbeats 400000 in
@[simps]
def JRightwardsProdEquivalence :
    JRightwards (w.prod w') g ‚âå (JRightwards w g.1) √ó (JRightwards w' g.2) where
  functor := JRightwardsProdEquivalence.functor w w' g
  inverse := JRightwardsProdEquivalence.inverse w w' g
  unitIso := Iso.refl _
  counitIso := Iso.refl _
  functor_unitIso_comp X := by
    dsimp
    erw [comp_id, comp_id]
    rfl

end

namespace  GuitartExact

instance prod [w.GuitartExact] [w'.GuitartExact] :
    (w.prod w').GuitartExact := by
  rw [guitartExact_iff_isConnected_rightwards]
  rintro Y‚ÇÇ Y‚ÇÉ g
  exact isConnected_of_equivalent (JRightwardsProdEquivalence w w' g).symm

end GuitartExact

end prod

end TwoSquare


end CategoryTheory
