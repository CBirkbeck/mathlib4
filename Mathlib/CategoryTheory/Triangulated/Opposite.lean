import Mathlib.CategoryTheory.Triangulated.Triangulated
import Mathlib.CategoryTheory.Shift.Pullback
import Mathlib.CategoryTheory.Shift.Opposite
import Mathlib.CategoryTheory.Preadditive.Opposite
import Mathlib.CategoryTheory.Triangulated.Functor
import Mathlib.Tactic.Linarith

namespace CategoryTheory

open Category Limits Preadditive ZeroObject

variable (C : Type*) [Category C]

namespace Pretriangulated

variable [HasShift C ‚Ñ§]

def PretriangulatedOpposite  :=
  PullbackShift (OppositeShift C ‚Ñ§)
    (AddMonoidHom.mk' (fun n => -n) (fun a b => by dsimp; abel) : ‚Ñ§ ‚Üí+ ‚Ñ§)

variable [HasZeroObject C] [HasShift C ‚Ñ§] [Preadditive C]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]

namespace PretriangulatedOpposite

instance : Category (PretriangulatedOpposite C) := by
  dsimp only [PretriangulatedOpposite]
  infer_instance

instance : HasZeroObject (PretriangulatedOpposite C) := by
  dsimp only [PretriangulatedOpposite]
  infer_instance

instance : Preadditive (PretriangulatedOpposite C) := by
  dsimp only [PretriangulatedOpposite]
  infer_instance

noncomputable instance : HasShift (PretriangulatedOpposite C) ‚Ñ§ := by
  dsimp only [PretriangulatedOpposite]
  infer_instance

instance (n : ‚Ñ§) : (shiftFunctor (PretriangulatedOpposite C) n).Additive := by
  dsimp only [PretriangulatedOpposite]
  infer_instance

variable {C}

abbrev mk (X : C) : PretriangulatedOpposite C := Opposite.op X

abbrev homMk {X Y : C} (f : X ‚ü∂ Y) : mk Y ‚ü∂ mk X := Opposite.op f

variable (C)

def opFunctorShiftIso (a b : ‚Ñ§) (h : a + b = 0) :
    (shiftFunctor C a).op ‚âÖ shiftFunctor (PretriangulatedOpposite C) b := by
  obtain rfl : a = -b := Iff.mp add_eq_zero_iff_eq_neg h
  rfl

noncomputable def opFunctorShiftCancelIso (n : ‚Ñ§) :
    (shiftFunctor C n).op ‚ãô shiftFunctor (PretriangulatedOpposite C) n ‚âÖ ùü≠ _ :=
  isoWhiskerLeft _ (opFunctorShiftIso C (-n) n n.add_left_neg).symm ‚â™‚â´
    NatIso.op (shiftFunctorCompIsoId C n (-n) n.add_right_neg).symm

noncomputable def opInverseShiftCancelIso (n : ‚Ñ§) :
  shiftFunctor (PretriangulatedOpposite C) n ‚ãô (shiftFunctor C n).op ‚âÖ ùü≠ _ :=
    isoWhiskerRight (opFunctorShiftIso C (-n) n n.add_left_neg).symm _ ‚â™‚â´
      NatIso.op (shiftFunctorCompIsoId C (-n) n n.add_left_neg).symm

variable {C}

lemma opInverseShiftCancelIso_hom_app_comp_opFunctorShiftCancelIso_inv_app (X : C) (n : ‚Ñ§) :
  ((opInverseShiftCancelIso C n).hom.app (PretriangulatedOpposite.mk (X‚ü¶n‚üß))).unop ‚â´
    ((opFunctorShiftCancelIso C n).inv.app (Opposite.op X)).unop‚ü¶n‚üß' = ùüô _:= by
  dsimp [opInverseShiftCancelIso, opFunctorShiftCancelIso, opFunctorShiftIso]
  rw [Functor.map_id, comp_id, comp_id, Quiver.Hom.unop_op,
    shift_shiftFunctorCompIsoId_add_neg_self_hom_app, Iso.inv_hom_id_app]
  rfl

lemma opFunctorShiftCancelIso_inv_app_comp_opInverseShiftCancelIso_hom_app
    (X : PretriangulatedOpposite C) (n : ‚Ñ§) :
  (opFunctorShiftCancelIso C n).inv.app ((shiftFunctor (PretriangulatedOpposite C) n).obj X) ‚â´
    (shiftFunctor (PretriangulatedOpposite C) n).map ((opInverseShiftCancelIso C n).hom.app X) = ùüô _ := by
  dsimp [opInverseShiftCancelIso, opFunctorShiftCancelIso, opFunctorShiftIso]
  simp only [comp_id, Functor.map_id, op_id, Functor.map_comp]
  erw [Functor.map_id]
  rw [id_comp]
  apply Quiver.Hom.unop_inj
  rw [unop_comp]
  change ((shiftFunctorCompIsoId C (-n) n n.add_left_neg).inv.app X.unop)‚ü¶-n‚üß' ‚â´
    (shiftFunctorCompIsoId C n (-n) n.add_right_neg).hom.app (X.unop‚ü¶-n‚üß) = ùüô _
  rw [shift_shiftFunctorCompIsoId_neg_add_self_inv_app, Iso.inv_hom_id_app]
  rfl

lemma opFunctorShiftCancelIso_inv_app_op_unop_shift_op (X : C) (n : ‚Ñ§) :
  (((opFunctorShiftCancelIso C n).inv.app (Opposite.op X)).unop‚ü¶n‚üß').op =
    (opInverseShiftCancelIso C n).inv.app (PretriangulatedOpposite.mk (X‚ü¶n‚üß)) := by
  dsimp [opInverseShiftCancelIso, opFunctorShiftCancelIso, opFunctorShiftIso]
  simp only [comp_id, Quiver.Hom.unop_op]
  erw [Functor.map_id, comp_id, shift_shiftFunctorCompIsoId_add_neg_self_hom_app]

variable (C)

namespace TriangleOpEquivalence

-- note that there are no signs in the definition of `functor`, but it is still
-- consistent with Verdier p. 96

@[simps]
noncomputable def functor : (Triangle C)·µí·µñ ‚•§ Triangle (PretriangulatedOpposite C) where
  obj T := Triangle.mk (homMk T.unop.mor‚ÇÇ) (homMk T.unop.mor‚ÇÅ)
      (((opFunctorShiftCancelIso C 1).app (Opposite.op T.unop.obj‚ÇÅ)).inv ‚â´
        (shiftFunctor (PretriangulatedOpposite C) (1 : ‚Ñ§)).map ((homMk T.unop.mor‚ÇÉ)))
  map {T‚ÇÅ T‚ÇÇ} œÜ :=
    { hom‚ÇÅ := homMk œÜ.unop.hom‚ÇÉ
      hom‚ÇÇ := homMk œÜ.unop.hom‚ÇÇ
      hom‚ÇÉ := homMk œÜ.unop.hom‚ÇÅ
      comm‚ÇÅ := Opposite.unop_injective (œÜ.unop.comm‚ÇÇ.symm)
      comm‚ÇÇ := Opposite.unop_injective (œÜ.unop.comm‚ÇÅ.symm)
      comm‚ÇÉ := (by
        dsimp [homMk]
        simp only [Category.assoc]
        rw [‚Üê Functor.map_comp]
        erw [‚Üê @op_comp _ _ _ _ _ œÜ.unop.hom‚ÇÉ T‚ÇÅ.unop.mor‚ÇÉ]
        erw [(opFunctorShiftCancelIso C 1).inv.naturality_assoc œÜ.unop.hom‚ÇÅ.op]
        dsimp
        rw [‚Üê Functor.map_comp]
        congr 2
        exact Opposite.unop_injective (œÜ.unop.comm‚ÇÉ.symm)) }

@[simps]
noncomputable def inverse : Triangle (PretriangulatedOpposite C) ‚•§ (Triangle C)·µí·µñ where
  obj T := Opposite.op
    (Triangle.mk T.mor‚ÇÇ.unop T.mor‚ÇÅ.unop (((opInverseShiftCancelIso C 1).hom.app T.obj‚ÇÅ).unop ‚â´ T.mor‚ÇÉ.unop‚ü¶(1 : ‚Ñ§)‚üß'))
  map {T‚ÇÅ T‚ÇÇ} œÜ := Quiver.Hom.op
    { hom‚ÇÅ := œÜ.hom‚ÇÉ.unop
      hom‚ÇÇ := œÜ.hom‚ÇÇ.unop
      hom‚ÇÉ := œÜ.hom‚ÇÅ.unop
      comm‚ÇÅ := Opposite.op_injective œÜ.comm‚ÇÇ.symm
      comm‚ÇÇ := Opposite.op_injective œÜ.comm‚ÇÅ.symm
      comm‚ÇÉ := by
        dsimp
        simp only [assoc, ‚Üê Functor.map_comp, ‚Üê unop_comp]
        rw [‚Üê œÜ.comm‚ÇÉ, unop_comp, Functor.map_comp, ‚Üê assoc, ‚Üê assoc]
        congr 1
        apply Opposite.op_injective
        exact (opInverseShiftCancelIso C 1).hom.naturality œÜ.hom‚ÇÅ }

@[simps!]
noncomputable def unitIso : ùü≠ _ ‚âÖ functor C ‚ãô inverse C :=
  NatIso.ofComponents (fun T => Iso.op (by
    refine' Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _) _ _ _
    ¬∑ aesop_cat
    ¬∑ aesop_cat
    ¬∑ dsimp
      simp only [Functor.map_id, Category.comp_id, Category.id_comp]
      erw [Functor.map_comp]
      erw [‚Üê (NatIso.unop (opInverseShiftCancelIso C 1)).hom.naturality_assoc T.unop.mor‚ÇÉ]
      change T.unop.mor‚ÇÉ ‚â´ _ ‚â´ _ = _
      dsimp
      erw [opInverseShiftCancelIso_hom_app_comp_opFunctorShiftCancelIso_inv_app, comp_id])) (by
        rintro ‚ü®T‚ÇÅ‚ü© ‚ü®T‚ÇÇ‚ü© f
        obtain ‚ü®f, rfl‚ü© : ‚àÉ (g : T‚ÇÇ ‚ü∂ T‚ÇÅ), f = Quiver.Hom.op g := ‚ü®f.unop, rfl‚ü©
        apply Opposite.unop_injective
        ext
        ¬∑ change ùüô _ ‚â´ f.hom‚ÇÅ = f.hom‚ÇÅ ‚â´ ùüô _
          rw [id_comp, comp_id]
        ¬∑ change ùüô _ ‚â´ f.hom‚ÇÇ = f.hom‚ÇÇ ‚â´ ùüô _
          rw [id_comp, comp_id]
        ¬∑ change ùüô _ ‚â´ f.hom‚ÇÉ = f.hom‚ÇÉ ‚â´ ùüô _
          rw [id_comp, comp_id])

@[simps!]
noncomputable def counitIso : inverse C ‚ãô functor C ‚âÖ ùü≠ _ :=
  NatIso.ofComponents (fun T => by
    refine' Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _) _ _ _
    ¬∑ aesop_cat
    ¬∑ aesop_cat
    ¬∑ dsimp [homMk]
      simp only [Functor.map_id, comp_id, id_comp]
      change (_ ‚â´ (shiftFunctor (PretriangulatedOpposite C) (1 : ‚Ñ§)).map (((T.mor‚ÇÉ.unop‚ü¶(1 : ‚Ñ§)‚üß').op ‚â´ _))) = _
      rw [Functor.map_comp]
      erw [‚Üê (opFunctorShiftCancelIso C 1).inv.naturality_assoc T.mor‚ÇÉ]
      erw [opFunctorShiftCancelIso_inv_app_comp_opInverseShiftCancelIso_hom_app, comp_id]
      rfl) (by aesop_cat)

end TriangleOpEquivalence

@[simps]
noncomputable def triangleOpEquivalence :
    (Triangle C)·µí·µñ ‚âå Triangle (PretriangulatedOpposite C) where
  functor := TriangleOpEquivalence.functor C
  inverse := TriangleOpEquivalence.inverse C
  unitIso := TriangleOpEquivalence.unitIso C
  counitIso := TriangleOpEquivalence.counitIso C

def distinguishedTriangles : Set (Triangle (PretriangulatedOpposite C)) :=
  fun T => ((triangleOpEquivalence C).inverse.obj T).unop ‚àà distTriang C

variable {C}

lemma mem_distinguishedOp_iff (T : Triangle (PretriangulatedOpposite C)) :
    T ‚àà distinguishedTriangles C ‚Üî ((triangleOpEquivalence C).inverse.obj T).unop ‚àà distTriang C :=
  by rfl

lemma mem_distinguishedOp_iff' (T : Triangle (PretriangulatedOpposite C)) :
    T ‚àà distinguishedTriangles C ‚Üî ‚àÉ (T' : Triangle C) (_ : T' ‚àà distTriang C),
      Nonempty (T ‚âÖ (triangleOpEquivalence C).functor.obj (Opposite.op T')) := by
  rw [mem_distinguishedOp_iff]
  constructor
  ¬∑ intro hT
    exact ‚ü®_ ,hT, ‚ü®(triangleOpEquivalence C).counitIso.symm.app T‚ü©‚ü©
  ¬∑ rintro ‚ü®T', hT', ‚ü®e‚ü©‚ü©
    refine' isomorphic_distinguished _ hT' _ _
    exact Iso.unop ((triangleOpEquivalence C).unitIso.app (Opposite.op T') ‚â™‚â´
      (triangleOpEquivalence C).inverse.mapIso e.symm)

lemma isomorphic_distinguished (T‚ÇÅ : Triangle (PretriangulatedOpposite C))
    (hT‚ÇÅ : T‚ÇÅ ‚àà distinguishedTriangles C) (T‚ÇÇ : Triangle (PretriangulatedOpposite C))
    (e : T‚ÇÇ ‚âÖ T‚ÇÅ) :
    T‚ÇÇ ‚àà distinguishedTriangles C := by
  simp only [mem_distinguishedOp_iff] at hT‚ÇÅ ‚ä¢
  exact Pretriangulated.isomorphic_distinguished _ hT‚ÇÅ _
    ((triangleOpEquivalence C).inverse.mapIso e).unop.symm

lemma contractibleTriangleIso (X : PretriangulatedOpposite C) :
    contractibleTriangle X ‚âÖ (triangleOpEquivalence C).functor.obj
      (Opposite.op (contractibleTriangle X.unop).invRotate) :=
  Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _)
    { hom := 0
      inv := 0
      inv_hom_id := IsZero.eq_of_tgt (by
        rw [IsZero.iff_id_eq_zero]
        change (ùüô ((0 : C)‚ü¶(-1 : ‚Ñ§)‚üß)).op = 0
        rw [‚Üê Functor.map_id, id_zero, Functor.map_zero, op_zero]) _ _ }
    (by aesop_cat) (by aesop_cat) (by aesop_cat)

lemma contractible_distinguished (X : PretriangulatedOpposite C) :
    contractibleTriangle X ‚àà distinguishedTriangles C := by
  rw [mem_distinguishedOp_iff']
  exact ‚ü®_, inv_rot_of_dist_triangle _ (Pretriangulated.contractible_distinguished X.unop),
    ‚ü®contractibleTriangleIso X‚ü©‚ü©

noncomputable def rotateTriangleOpEquivalenceInverseObjRotateUnop
    (T : Triangle (PretriangulatedOpposite C)) :
    Triangle.rotate ((triangleOpEquivalence C).inverse.obj (Triangle.rotate T)).unop ‚âÖ
      ((triangleOpEquivalence C).inverse.obj T).unop := by
  refine' Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _)
      (mulIso (-1) ((opInverseShiftCancelIso C 1).symm.app T.obj‚ÇÅ).unop) _ _ _
  ¬∑ dsimp
    simp
  ¬∑ dsimp
    rw [neg_smul, one_smul, comp_neg]
    rw [id_comp]
    erw [Functor.map_neg]
    dsimp
    rw [comp_neg, neg_comp, neg_neg]
    apply Quiver.Hom.op_inj
    simp only [op_comp, assoc]
    erw [(opInverseShiftCancelIso C 1).hom.naturality T.mor‚ÇÅ]
    dsimp
    rw [Iso.inv_hom_id_app_assoc]
  ¬∑ dsimp
    simp only [Functor.map_id, comp_id, neg_smul, one_smul, neg_comp, neg_inj,
       ‚Üê assoc, ‚Üê unop_comp, Iso.hom_inv_id_app, Functor.comp_obj, unop_id,
       Opposite.unop_op, Functor.op_obj, id_comp]

lemma rotate_distinguished_triangle (T : Triangle (PretriangulatedOpposite C)) :
    T ‚àà distinguishedTriangles C ‚Üî T.rotate ‚àà distinguishedTriangles C := by
  simp only [mem_distinguishedOp_iff, Pretriangulated.rotate_distinguished_triangle
    ((triangleOpEquivalence C).inverse.obj (T.rotate)).unop]
  exact distinguished_iff_of_iso (rotateTriangleOpEquivalenceInverseObjRotateUnop T).symm

lemma distinguished_cocone_triangle {X Y : PretriangulatedOpposite C} (f : X ‚ü∂ Y) :
    ‚àÉ (Z : PretriangulatedOpposite C) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß),
      Triangle.mk f g h ‚àà distinguishedTriangles C := by
  obtain ‚ü®Z, g, h, H‚ü© := Pretriangulated.distinguished_cocone_triangle‚ÇÅ f.unop
  simp only [mem_distinguishedOp_iff]
  refine' ‚ü®_, g.op, (opFunctorShiftCancelIso C 1).inv.app (Opposite.op Z) ‚â´
    (shiftFunctor (PretriangulatedOpposite C) (1 : ‚Ñ§)).map h.op, _‚ü©
  dsimp
  convert H using 2
  rw [unop_comp, Functor.map_comp]
  apply Quiver.Hom.op_inj
  simp only [op_comp]
  rw [‚Üê cancel_mono ((opInverseShiftCancelIso C 1).inv.app X) ]
  simp only [Opposite.op_unop, Quiver.Hom.op_unop, assoc]
  dsimp
  erw [Iso.hom_inv_id_app, comp_id, (opInverseShiftCancelIso C 1).inv.naturality h.op]
  rw [opFunctorShiftCancelIso_inv_app_op_unop_shift_op]
  rfl

lemma complete_distinguished_triangle_morphism (T‚ÇÅ T‚ÇÇ : Triangle (PretriangulatedOpposite C))
    (hT‚ÇÅ : T‚ÇÅ ‚àà distinguishedTriangles C) (hT‚ÇÇ : T‚ÇÇ ‚àà distinguishedTriangles C)
    (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ) (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ) (comm : T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ) :
    ‚àÉ (c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ), T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ ‚àß
      T‚ÇÅ.mor‚ÇÉ ‚â´ a‚ü¶1‚üß' = c ‚â´ T‚ÇÇ.mor‚ÇÉ := by
  rw [mem_distinguishedOp_iff] at hT‚ÇÅ hT‚ÇÇ
  obtain ‚ü®c, hc‚ÇÅ, hc‚ÇÇ‚ü© := Pretriangulated.complete_distinguished_triangle_morphism‚ÇÅ _ _ hT‚ÇÇ hT‚ÇÅ b.unop
    a.unop (Quiver.Hom.op_inj comm.symm)
  dsimp at c hc‚ÇÅ hc‚ÇÇ
  simp only [neg_comp, assoc, comp_neg, neg_inj] at hc‚ÇÇ
  refine' ‚ü®c.op, Quiver.Hom.unop_inj hc‚ÇÅ.symm, Quiver.Hom.unop_inj _‚ü©
  apply (shiftFunctor C (1 : ‚Ñ§)).map_injective
  rw [unop_comp, unop_comp, Functor.map_comp, Functor.map_comp, Quiver.Hom.unop_op,
      ‚Üê cancel_epi ((opInverseShiftCancelIso C 1).hom.app T‚ÇÇ.obj‚ÇÅ).unop, hc‚ÇÇ]
  apply Quiver.Hom.op_inj
  simp only [op_comp, Functor.id_obj, Opposite.op_unop, Functor.comp_obj, Functor.op_obj,
    Opposite.unop_op, Quiver.Hom.op_unop, assoc]
  congr 1
  exact (opInverseShiftCancelIso C 1).hom.naturality a

instance : Pretriangulated (PretriangulatedOpposite C) where
  distinguishedTriangles := distinguishedTriangles C
  isomorphic_distinguished := isomorphic_distinguished
  contractible_distinguished := contractible_distinguished
  distinguished_cocone_triangle := distinguished_cocone_triangle
  rotate_distinguished_triangle := rotate_distinguished_triangle
  complete_distinguished_triangle_morphism := complete_distinguished_triangle_morphism

--instance [IsTriangulated C] : IsTriangulated (PretriangulatedOpposite C) := sorry

end PretriangulatedOpposite

namespace Opposite
-- `open Pretriangulated.Opposite` to get these instances

variable (C : Type*) [Category C] [HasShift C ‚Ñ§]

noncomputable scoped instance : HasShift C·µí·µñ ‚Ñ§ :=
  (inferInstance : HasShift (PretriangulatedOpposite C) ‚Ñ§)

variable [Preadditive C] [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive]

noncomputable scoped instance (n : ‚Ñ§) : (shiftFunctor C·µí·µñ n).Additive :=
  (inferInstance : (shiftFunctor (PretriangulatedOpposite C) n).Additive)

variable [HasZeroObject C] [Pretriangulated C]

scoped instance : Pretriangulated C·µí·µñ :=
  (inferInstance : Pretriangulated (PretriangulatedOpposite C))

end Opposite

section

open Pretriangulated.Opposite

variable [HasShift C ‚Ñ§]

noncomputable def shiftFunctorOpIso (n m : ‚Ñ§) (hnm : n + m = 0) :
    shiftFunctor C·µí·µñ n ‚âÖ (shiftFunctor C m).op := by
  obtain rfl : m = -n := by linarith
  exact Iso.refl _

variable {C}

lemma shiftFunctorZero_op_hom_app (X : C·µí·µñ) :
    (shiftFunctorZero C·µí·µñ ‚Ñ§).hom.app X = (shiftFunctorOpIso C 0 0 (zero_add 0)).hom.app X ‚â´
      ((shiftFunctorZero C ‚Ñ§).inv.app X.unop).op := by
  erw [@pullbackShiftFunctorZero_hom_app (OppositeShift C ‚Ñ§) _ ‚Ñ§ ‚Ñ§  _ _
    (AddMonoidHom.mk' (fun n => -n) (fun a b => by dsimp; abel) : ‚Ñ§ ‚Üí+ ‚Ñ§) _ X,
    oppositeShiftFunctorZero_hom_app]
  rfl

attribute [reassoc] op_comp

lemma shiftFunctorZero_op_inv_app (X : C·µí·µñ) :
    (shiftFunctorZero C·µí·µñ ‚Ñ§).inv.app X =
      ((shiftFunctorZero C ‚Ñ§).hom.app X.unop).op ‚â´
      (shiftFunctorOpIso C 0 0 (zero_add 0)).inv.app X := by
  rw [‚Üê cancel_epi ((shiftFunctorZero C·µí·µñ ‚Ñ§).hom.app X), Iso.hom_inv_id_app,
    shiftFunctorZero_op_hom_app, assoc, ‚Üê op_comp_assoc, Iso.hom_inv_id_app, op_id,
    id_comp, Iso.hom_inv_id_app]

lemma shiftFunctorAdd'_op_hom_app (X : C·µí·µñ) (a‚ÇÅ a‚ÇÇ a‚ÇÉ : ‚Ñ§) (h : a‚ÇÅ + a‚ÇÇ = a‚ÇÉ)
    (b‚ÇÅ b‚ÇÇ b‚ÇÉ : ‚Ñ§) (h‚ÇÅ : a‚ÇÅ + b‚ÇÅ = 0) (h‚ÇÇ : a‚ÇÇ + b‚ÇÇ = 0) (h‚ÇÉ : a‚ÇÉ + b‚ÇÉ = 0) :
    (shiftFunctorAdd' C·µí·µñ a‚ÇÅ a‚ÇÇ a‚ÇÉ h).hom.app X =
      (shiftFunctorOpIso C _ _ h‚ÇÉ).hom.app X ‚â´
        ((shiftFunctorAdd' C b‚ÇÅ b‚ÇÇ b‚ÇÉ (by linarith)).inv.app X.unop).op ‚â´
        (shiftFunctorOpIso C _ _ h‚ÇÇ).inv.app _ ‚â´
        (shiftFunctor C·µí·µñ a‚ÇÇ).map ((shiftFunctorOpIso C _ _ h‚ÇÅ).inv.app X) := by
  erw [@pullbackShiftFunctorAdd'_hom_app (OppositeShift C ‚Ñ§) _ ‚Ñ§ ‚Ñ§ _ _
    (AddMonoidHom.mk' (fun n => -n) (fun a b => by dsimp; abel) : ‚Ñ§ ‚Üí+ ‚Ñ§) _ X
    a‚ÇÅ a‚ÇÇ a‚ÇÉ h b‚ÇÅ b‚ÇÇ b‚ÇÉ (by dsimp; linarith) (by dsimp; linarith) (by dsimp; linarith)]
  erw [oppositeShiftFunctorAdd'_hom_app]
  obtain rfl : b‚ÇÅ = -a‚ÇÅ := by linarith
  obtain rfl : b‚ÇÇ = -a‚ÇÇ := by linarith
  obtain rfl : b‚ÇÉ = -a‚ÇÉ := by linarith
  rfl

lemma shiftFunctorAdd'_op_inv_app (X : C·µí·µñ) (a‚ÇÅ a‚ÇÇ a‚ÇÉ : ‚Ñ§) (h : a‚ÇÅ + a‚ÇÇ = a‚ÇÉ)
    (b‚ÇÅ b‚ÇÇ b‚ÇÉ : ‚Ñ§) (h‚ÇÅ : a‚ÇÅ + b‚ÇÅ = 0) (h‚ÇÇ : a‚ÇÇ + b‚ÇÇ = 0) (h‚ÇÉ : a‚ÇÉ + b‚ÇÉ = 0) :
    (shiftFunctorAdd' C·µí·µñ a‚ÇÅ a‚ÇÇ a‚ÇÉ h).inv.app X =
      (shiftFunctor C·µí·µñ a‚ÇÇ).map ((shiftFunctorOpIso C _ _ h‚ÇÅ).hom.app X) ‚â´
      (shiftFunctorOpIso C _ _ h‚ÇÇ).hom.app _ ‚â´
      ((shiftFunctorAdd' C b‚ÇÅ b‚ÇÇ b‚ÇÉ (by linarith)).hom.app X.unop).op ‚â´
      (shiftFunctorOpIso C _ _ h‚ÇÉ).inv.app X := by
  rw [‚Üê cancel_epi ((shiftFunctorAdd' C·µí·µñ a‚ÇÅ a‚ÇÇ a‚ÇÉ h).hom.app X), Iso.hom_inv_id_app,
    shiftFunctorAdd'_op_hom_app X a‚ÇÅ a‚ÇÇ a‚ÇÉ h b‚ÇÅ b‚ÇÇ b‚ÇÉ h‚ÇÅ h‚ÇÇ h‚ÇÉ,
    assoc, assoc, assoc, ‚Üê Functor.map_comp_assoc, Iso.inv_hom_id_app]
  erw [Functor.map_id, id_comp, Iso.inv_hom_id_app_assoc]
  rw [‚Üê op_comp_assoc, Iso.hom_inv_id_app, op_id, id_comp, Iso.hom_inv_id_app]

end

end Pretriangulated

end CategoryTheory
