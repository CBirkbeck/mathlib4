/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Limits.Opposites
import Mathlib.CategoryTheory.Shift.Opposite
import Mathlib.CategoryTheory.Shift.Pullback
import Mathlib.CategoryTheory.Triangulated.Subcategory
import Mathlib.CategoryTheory.Triangulated.Triangulated
import Mathlib.CategoryTheory.Triangulated.Adjunction
import Mathlib.CategoryTheory.Triangulated.HomologicalFunctor
import Mathlib.Tactic.Linarith

/-!
# The (pre)triangulated structure on the opposite category

In this file, we shall construct the (pre)triangulated structure
on the opposite category `C·µí·µñ` of a (pre)triangulated category `C`.

The shift on `C·µí·µñ` is obtained by combining the constructions in the files
`CategoryTheory.Shift.Opposite` and `CategoryTheory.Shift.Pullback`.
When the user opens `CategoryTheory.Pretriangulated.Opposite`, the
category `C·µí·µñ` is equipped with the shift by `‚Ñ§` such that
shifting by `n : ‚Ñ§` on `C·µí·µñ` corresponds to the shift by
`-n` on `C`. This is actually a definitional equality, but the user
should not rely on this, and instead use the isomorphism
`shiftFunctorOpIso C n m hnm : shiftFunctor C·µí·µñ n ‚âÖ (shiftFunctor C m).op`
where `hnm : n + m = 0`.

Some compatibilities between the shifts on `C` and `C·µí·µñ` are also expressed through
the equivalence of categories `opShiftFunctorEquivalence C n : C·µí·µñ ‚âå C·µí·µñ` whose
functor is `shiftFunctor C·µí·µñ n` and whose inverse functor is `(shiftFunctor C n).op`.

If `X ‚ü∂ Y ‚ü∂ Z ‚ü∂ X‚ü¶1‚üß` is a distinguished triangle in `C`, then the triangle
`op Z ‚ü∂ op Y ‚ü∂ op X ‚ü∂ (op Z)‚ü¶1‚üß` that is deduced *without introducing signs*
shall be a distinguished triangle in `C·µí·µñ`. This is equivalent to the definition
in [Verdiers's thesis, p. 96][verdier1996] which would require that the triangle
`(op X)‚ü¶-1‚üß ‚ü∂ op Z ‚ü∂ op Y ‚ü∂ op X` (without signs) is *antidistinguished*.

## References
* [Jean-Louis Verdier, *Des cat√©gories d√©riv√©es des cat√©gories ab√©liennes*][verdier1996]

-/

namespace CategoryTheory

open Category Limits Preadditive ZeroObject

variable (C : Type*) [Category C]

section

variable {C}
variable {D : Type*} [Category D] {F G : C ‚•§ D} (e : F ‚âÖ G) (X : C)

@[reassoc (attr := simp)]
lemma Iso.op_hom_inv_id_app : (e.hom.app X).op ‚â´ (e.inv.app X).op = ùüô _ := by
  rw [‚Üê op_comp, e.inv_hom_id_app, op_id]

@[reassoc (attr := simp)]
lemma Iso.op_inv_hom_id_app : (e.inv.app X).op ‚â´ (e.hom.app X).op = ùüô _ := by
  rw [‚Üê op_comp, e.hom_inv_id_app, op_id]

end

namespace Pretriangulated

variable [HasShift C ‚Ñ§]

namespace Opposite

/-- As it is unclear whether the opposite category `C·µí·µñ` should always be equipped
with the shift by `‚Ñ§` such that shifting by `n` on `C·µí·µñ` corresponds to shifting
by `-n` on `C`, the user shall have to do `open CategoryTheory.Pretriangulated.Opposite`
in order to get this shift and the (pre)triangulated structure on `C·µí·µñ`. -/

private abbrev OppositeShiftAux :=
  PullbackShift (OppositeShift C ‚Ñ§)
    (AddMonoidHom.mk' (fun (n : ‚Ñ§) => -n) (by intros; dsimp; omega))

/-- The category `C·µí·µñ` is equipped with the shift such that the shift by `n` on `C·µí·µñ`
corresponds to the shift by `-n` on `C`. -/
noncomputable scoped instance : HasShift C·µí·µñ ‚Ñ§ :=
  (inferInstance : HasShift (OppositeShiftAux C) ‚Ñ§)

instance [Preadditive C] [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] (n : ‚Ñ§) :
    (shiftFunctor C·µí·µñ n).Additive :=
  (inferInstance : (shiftFunctor (OppositeShiftAux C) n).Additive)

noncomputable scoped instance {D : Type*} [Category D] [HasShift D ‚Ñ§] (F : C ‚•§ D) [F.CommShift ‚Ñ§] :
    F.op.CommShift ‚Ñ§ := by
  change ((F.opShift ‚Ñ§).pullbackShift
    (AddMonoidHom.mk' (fun (n : ‚Ñ§) => -n) (by intros; dsimp; omega))).CommShift ‚Ñ§
  infer_instance

end Opposite

open Opposite

/-- The shift functor on the opposite category identifies to the opposite functor
of a shift functor on the original category. -/
noncomputable def shiftFunctorOpIso (n m : ‚Ñ§) (hnm : n + m = 0) :
    shiftFunctor C·µí·µñ n ‚âÖ (shiftFunctor C m).op := eqToIso (by
  obtain rfl : m = -n := by omega
  rfl)

variable {C}

lemma shiftFunctorZero_op_hom_app (X : C·µí·µñ) :
    (shiftFunctorZero C·µí·µñ ‚Ñ§).hom.app X = (shiftFunctorOpIso C 0 0 (zero_add 0)).hom.app X ‚â´
      ((shiftFunctorZero C ‚Ñ§).inv.app X.unop).op := by
  erw [@pullbackShiftFunctorZero_hom_app (OppositeShift C ‚Ñ§), oppositeShiftFunctorZero_hom_app]
  rfl

lemma shiftFunctorZero_op_inv_app (X : C·µí·µñ) :
    (shiftFunctorZero C·µí·µñ ‚Ñ§).inv.app X =
      ((shiftFunctorZero C ‚Ñ§).hom.app X.unop).op ‚â´
      (shiftFunctorOpIso C 0 0 (zero_add 0)).inv.app X := by
  rw [‚Üê cancel_epi ((shiftFunctorZero C·µí·µñ ‚Ñ§).hom.app X), Iso.hom_inv_id_app,
    shiftFunctorZero_op_hom_app, assoc, ‚Üê op_comp_assoc, Iso.hom_inv_id_app, op_id,
    id_comp, Iso.hom_inv_id_app]

lemma shiftFunctorAdd'_op_hom_app (X : C·µí·µñ) (a‚ÇÅ a‚ÇÇ a‚ÇÉ : ‚Ñ§) (h : a‚ÇÅ + a‚ÇÇ = a‚ÇÉ)
    (b‚ÇÅ b‚ÇÇ b‚ÇÉ : ‚Ñ§) (h‚ÇÅ : a‚ÇÅ + b‚ÇÅ = 0) (h‚ÇÇ : a‚ÇÇ + b‚ÇÇ = 0) (h‚ÇÉ : a‚ÇÉ + b‚ÇÉ = 0) :
    (shiftFunctorAdd' C·µí·µñ a‚ÇÅ a‚ÇÇ a‚ÇÉ h).hom.app X =
      (shiftFunctorOpIso C _ _ h‚ÇÉ).hom.app X ‚â´
        ((shiftFunctorAdd' C b‚ÇÅ b‚ÇÇ b‚ÇÉ (by omega)).inv.app X.unop).op ‚â´
        (shiftFunctorOpIso C _ _ h‚ÇÇ).inv.app _ ‚â´
        (shiftFunctor C·µí·µñ a‚ÇÇ).map ((shiftFunctorOpIso C _ _ h‚ÇÅ).inv.app X) := by
  erw [@pullbackShiftFunctorAdd'_hom_app (OppositeShift C ‚Ñ§) _ _ _ _ _ _ _ X
    a‚ÇÅ a‚ÇÇ a‚ÇÉ h b‚ÇÅ b‚ÇÇ b‚ÇÉ (by dsimp; omega) (by dsimp; omega) (by dsimp; omega)]
  erw [oppositeShiftFunctorAdd'_hom_app]
  obtain rfl : b‚ÇÅ = -a‚ÇÅ := by omega
  obtain rfl : b‚ÇÇ = -a‚ÇÇ := by omega
  obtain rfl : b‚ÇÉ = -a‚ÇÉ := by omega
  rfl

lemma shiftFunctorAdd'_op_inv_app (X : C·µí·µñ) (a‚ÇÅ a‚ÇÇ a‚ÇÉ : ‚Ñ§) (h : a‚ÇÅ + a‚ÇÇ = a‚ÇÉ)
    (b‚ÇÅ b‚ÇÇ b‚ÇÉ : ‚Ñ§) (h‚ÇÅ : a‚ÇÅ + b‚ÇÅ = 0) (h‚ÇÇ : a‚ÇÇ + b‚ÇÇ = 0) (h‚ÇÉ : a‚ÇÉ + b‚ÇÉ = 0) :
    (shiftFunctorAdd' C·µí·µñ a‚ÇÅ a‚ÇÇ a‚ÇÉ h).inv.app X =
      (shiftFunctor C·µí·µñ a‚ÇÇ).map ((shiftFunctorOpIso C _ _ h‚ÇÅ).hom.app X) ‚â´
      (shiftFunctorOpIso C _ _ h‚ÇÇ).hom.app _ ‚â´
      ((shiftFunctorAdd' C b‚ÇÅ b‚ÇÇ b‚ÇÉ (by omega)).hom.app X.unop).op ‚â´
      (shiftFunctorOpIso C _ _ h‚ÇÉ).inv.app X := by
  rw [‚Üê cancel_epi ((shiftFunctorAdd' C·µí·µñ a‚ÇÅ a‚ÇÇ a‚ÇÉ h).hom.app X), Iso.hom_inv_id_app,
    shiftFunctorAdd'_op_hom_app X a‚ÇÅ a‚ÇÇ a‚ÇÉ h b‚ÇÅ b‚ÇÇ b‚ÇÉ h‚ÇÅ h‚ÇÇ h‚ÇÉ,
    assoc, assoc, assoc, ‚Üê Functor.map_comp_assoc, Iso.inv_hom_id_app]
  erw [Functor.map_id, id_comp, Iso.inv_hom_id_app_assoc]
  rw [‚Üê op_comp_assoc, Iso.hom_inv_id_app, op_id, id_comp, Iso.hom_inv_id_app]

lemma shiftFunctor_op_map (n m : ‚Ñ§) (hnm : n + m = 0) {K L : C·µí·µñ} (œÜ : K ‚ü∂ L) :
    (shiftFunctor C·µí·µñ n).map œÜ =
      (shiftFunctorOpIso C n m hnm).hom.app K ‚â´ ((shiftFunctor C m).map œÜ.unop).op ‚â´
        (shiftFunctorOpIso C n m hnm).inv.app L :=
  (NatIso.naturality_2 (shiftFunctorOpIso C n m hnm) œÜ).symm

variable (C)

/-- The autoequivalence `C·µí·µñ ‚âå C·µí·µñ` whose functor is `shiftFunctor C·µí·µñ n` and whose inverse
functor is `(shiftFunctor C n).op`. Do not unfold the definitions of the unit and counit
isomorphisms: the compatibilities they satisfy are stated as separate lemmas. -/
@[simps functor inverse]
noncomputable def opShiftFunctorEquivalence (n : ‚Ñ§) : C·µí·µñ ‚âå C·µí·µñ where
  functor := shiftFunctor C·µí·µñ n
  inverse := (shiftFunctor C n).op
  unitIso := NatIso.op (shiftFunctorCompIsoId C (-n) n n.add_left_neg) ‚â™‚â´
    isoWhiskerRight (shiftFunctorOpIso C n (-n) n.add_right_neg).symm (shiftFunctor C n).op
  counitIso := isoWhiskerLeft _ (shiftFunctorOpIso C n (-n) n.add_right_neg) ‚â™‚â´
    NatIso.op (shiftFunctorCompIsoId C n (-n) n.add_right_neg).symm
  functor_unitIso_comp X := Quiver.Hom.unop_inj (by
    dsimp [shiftFunctorOpIso]
    erw [comp_id, Functor.map_id, comp_id]
    change (shiftFunctorCompIsoId C n (-n) (add_neg_self n)).inv.app (X.unop‚ü¶-n‚üß) ‚â´
      ((shiftFunctorCompIsoId C (-n) n (neg_add_self n)).hom.app X.unop)‚ü¶-n‚üß' = ùüô _
    rw [shift_shiftFunctorCompIsoId_neg_add_self_hom_app n X.unop, Iso.inv_hom_id_app])

/-! The naturality of the unit and counit isomorphisms are restated in the following
lemmas so as to mitigate the need for `erw`. -/

@[reassoc (attr := simp)]
lemma opShiftFunctorEquivalence_unitIso_hom_naturality (n : ‚Ñ§) {X Y : C·µí·µñ} (f : X ‚ü∂ Y) :
    f ‚â´ (opShiftFunctorEquivalence C n).unitIso.hom.app Y =
      (opShiftFunctorEquivalence C n).unitIso.hom.app X ‚â´ (f‚ü¶n‚üß').unop‚ü¶n‚üß'.op :=
  (opShiftFunctorEquivalence C n).unitIso.hom.naturality f

@[reassoc (attr := simp)]
lemma opShiftFunctorEquivalence_unitIso_inv_naturality (n : ‚Ñ§) {X Y : C·µí·µñ} (f : X ‚ü∂ Y) :
    (f‚ü¶n‚üß').unop‚ü¶n‚üß'.op ‚â´ (opShiftFunctorEquivalence C n).unitIso.inv.app Y =
      (opShiftFunctorEquivalence C n).unitIso.inv.app X ‚â´ f :=
  (opShiftFunctorEquivalence C n).unitIso.inv.naturality f

@[reassoc (attr := simp)]
lemma opShiftFunctorEquivalence_counitIso_hom_naturality (n : ‚Ñ§) {X Y : C·µí·µñ} (f : X ‚ü∂ Y) :
    f.unop‚ü¶n‚üß'.op‚ü¶n‚üß' ‚â´ (opShiftFunctorEquivalence C n).counitIso.hom.app Y =
      (opShiftFunctorEquivalence C n).counitIso.hom.app X ‚â´ f :=
  (opShiftFunctorEquivalence C n).counitIso.hom.naturality f

@[reassoc (attr := simp)]
lemma opShiftFunctorEquivalence_counitIso_inv_naturality (n : ‚Ñ§) {X Y : C·µí·µñ} (f : X ‚ü∂ Y) :
    f ‚â´ (opShiftFunctorEquivalence C n).counitIso.inv.app Y =
      (opShiftFunctorEquivalence C n).counitIso.inv.app X ‚â´ f.unop‚ü¶n‚üß'.op‚ü¶n‚üß' :=
  (opShiftFunctorEquivalence C n).counitIso.inv.naturality f

variable {C}

lemma opShiftFunctorEquivalence_unitIso_hom_app (X : C·µí·µñ) (n m : ‚Ñ§) (hnm : n + m = 0) :
    (opShiftFunctorEquivalence C n).unitIso.hom.app X =
      ((shiftFunctorCompIsoId C m n (by linarith)).hom.app X.unop).op ‚â´
        ((shiftFunctorOpIso C n m hnm).inv.app X).unop‚ü¶n‚üß'.op := by
  obtain rfl : m = -n := by linarith
  rfl

lemma opShiftFunctorEquivalence_unitIso_inv_app (X : C·µí·µñ) (n m : ‚Ñ§) (hnm : n + m = 0) :
    (opShiftFunctorEquivalence C n).unitIso.inv.app X =
      ((shiftFunctorOpIso C n m hnm).hom.app X).unop‚ü¶n‚üß'.op ‚â´
      ((shiftFunctorCompIsoId C m n (by linarith)).inv.app X.unop).op := by
  obtain rfl : m = -n := by linarith
  rfl

lemma opShiftFunctorEquivalence_counitIso_hom_app (X : C·µí·µñ) (n m : ‚Ñ§) (hnm : n + m = 0) :
    (opShiftFunctorEquivalence C n).counitIso.hom.app X =
      ((shiftFunctorOpIso C n m hnm).hom.app (Opposite.op (X.unop‚ü¶n‚üß))) ‚â´
        ((shiftFunctorCompIsoId C n m hnm).inv.app X.unop).op := by
  obtain rfl : m = -n := by linarith
  rfl

lemma opShiftFunctorEquivalence_counitIso_inv_app (X : C·µí·µñ) (n m : ‚Ñ§) (hnm : n + m = 0) :
    (opShiftFunctorEquivalence C n).counitIso.inv.app X =
      ((shiftFunctorCompIsoId C n m hnm).hom.app X.unop).op ‚â´
      ((shiftFunctorOpIso C n m hnm).inv.app (Opposite.op (X.unop‚ü¶n‚üß))) := by
  obtain rfl : m = -n := by linarith
  rfl

lemma shift_unop_opShiftFunctorEquivalence_counitIso_inv_app (X : C·µí·µñ) (n : ‚Ñ§) :
    ((opShiftFunctorEquivalence C n).counitIso.inv.app X).unop‚ü¶n‚üß' =
      ((opShiftFunctorEquivalence C n).unitIso.hom.app ((Opposite.op ((X.unop)‚ü¶n‚üß)))).unop :=
  Quiver.Hom.op_inj ((opShiftFunctorEquivalence C n).unit_app_inverse X).symm

lemma shift_unop_opShiftFunctorEquivalence_counitIso_hom_app (X : C·µí·µñ) (n : ‚Ñ§) :
    ((opShiftFunctorEquivalence C n).counitIso.hom.app X).unop‚ü¶n‚üß' =
      ((opShiftFunctorEquivalence C n).unitIso.inv.app ((Opposite.op (X.unop‚ü¶n‚üß)))).unop :=
  Quiver.Hom.op_inj ((opShiftFunctorEquivalence C n).unitInv_app_inverse X).symm

lemma opShiftFunctorEquivalence_counitIso_inv_app_shift (X : C·µí·µñ) (n : ‚Ñ§) :
    (opShiftFunctorEquivalence C n).counitIso.inv.app (X‚ü¶n‚üß) =
      ((opShiftFunctorEquivalence C n).unitIso.hom.app X)‚ü¶n‚üß' :=
  (opShiftFunctorEquivalence C n).counitInv_app_functor X

lemma opShiftFunctorEquivalence_counitIso_hom_app_shift (X : C·µí·µñ) (n : ‚Ñ§) :
    (opShiftFunctorEquivalence C n).counitIso.hom.app (X‚ü¶n‚üß) =
      ((opShiftFunctorEquivalence C n).unitIso.inv.app X)‚ü¶n‚üß' :=
  ((opShiftFunctorEquivalence C n).counit_app_functor X)

lemma shiftFunctorCompIsoId_op_hom_app (X : C·µí·µñ) (n m : ‚Ñ§) (hnm : n + m = 0) :
    (shiftFunctorCompIsoId C·µí·µñ n m hnm).hom.app X =
      ((shiftFunctorOpIso C n m hnm).hom.app X)‚ü¶m‚üß' ‚â´
        (shiftFunctorOpIso C m n (by linarith)).hom.app (Opposite.op (X.unop‚ü¶m‚üß)) ‚â´
          ((shiftFunctorCompIsoId C m n (by linarith)).inv.app X.unop).op := by
  dsimp [shiftFunctorCompIsoId]
  simp only [shiftFunctorAdd'_op_inv_app X n m 0 hnm m n 0 hnm (by linarith) (add_zero 0),
    shiftFunctorZero_op_hom_app X]
  simp only [Functor.op_obj, Opposite.unop_op, Functor.comp_obj,
    NatTrans.naturality_assoc, Functor.op_map, Functor.id_obj,
    Opposite.op_unop, assoc, Iso.inv_hom_id_app_assoc]

lemma shiftFunctorCompIsoId_op_inv_app (X : C·µí·µñ) (n m : ‚Ñ§) (hnm : n + m = 0) :
    (shiftFunctorCompIsoId C·µí·µñ n m hnm).inv.app X =
      ((shiftFunctorCompIsoId C m n (by linarith)).hom.app X.unop).op ‚â´
      (shiftFunctorOpIso C m n (by linarith)).inv.app (Opposite.op (X.unop‚ü¶m‚üß)) ‚â´
      ((shiftFunctorOpIso C n m hnm).inv.app X)‚ü¶m‚üß' := by
  dsimp [shiftFunctorCompIsoId]
  simp only [shiftFunctorAdd'_op_hom_app X n m 0 hnm m n 0 hnm (by linarith) (add_zero 0),
    shiftFunctorZero_op_inv_app X]
  simp only [Functor.id_obj, Opposite.op_unop, Functor.op_obj, Functor.comp_obj, assoc,
    Iso.inv_hom_id_app_assoc]
  rfl

lemma opShiftFunctorEquivalence_inv_app_shift (X : C·µí·µñ) (n m : ‚Ñ§) (hnm : n + m = 0) :
    ((opShiftFunctorEquivalence C m).unitIso.inv.app (X‚ü¶n‚üß)) =
      ((shiftFunctorCompIsoId C·µí·µñ n m hnm).hom.app X).unop‚ü¶m‚üß'.op ‚â´
      ((shiftFunctorOpIso C n m hnm).inv.app X) := by
  rw [shiftFunctorCompIsoId_op_hom_app,
    opShiftFunctorEquivalence_unitIso_inv_app _ m n (by linarith)]
  simp only [opShiftFunctorEquivalence_functor, opShiftFunctorEquivalence_inverse, Functor.comp_obj, Functor.op_obj,
    Functor.id_obj, Opposite.unop_op, Opposite.op_unop, NatTrans.naturality_assoc, Functor.op_map, unop_comp,
    Quiver.Hom.unop_op, assoc, Functor.map_comp, op_comp]
  apply Quiver.Hom.unop_inj
  simp only [Opposite.op_unop, Opposite.unop_op, Quiver.Hom.unop_op, unop_comp, assoc]
  rw [shift_shiftFunctorCompIsoId_inv_app m n (by linarith) X.unop]
  erw [‚Üê NatTrans.naturality_assoc]
  dsimp
  rw [‚Üê unop_comp_assoc, Iso.hom_inv_id_app, unop_id, id_comp]

lemma natTrans_app_op_shift {D : Type*} [Category D] {F G : C·µí·µñ ‚•§ D} (Œ± : F ‚ü∂ G)
    (X : C·µí·µñ) (n m : ‚Ñ§) (hnm : n + m = 0) : Œ±.app (X‚ü¶n‚üß) =
      F.map ((shiftFunctorOpIso C n m hnm).hom.app X) ‚â´ Œ±.app (Opposite.op (X.unop‚ü¶m‚üß)) ‚â´
        G.map ((shiftFunctorOpIso C n m hnm).inv.app X) := by
  rw [‚Üê Œ±.naturality, ‚Üê F.map_comp_assoc, Iso.hom_inv_id_app, F.map_id, id_comp]

noncomputable def opShiftFunctorEquivalence_symm_homEquiv (n : ‚Ñ§) (X Y : C·µí·µñ) :
    (Opposite.op (X.unop‚ü¶n‚üß) ‚ü∂ Y) ‚âÉ (X ‚ü∂ Y‚ü¶n‚üß) :=
  (opShiftFunctorEquivalence C n).symm.toAdjunction.homEquiv X Y

lemma opShiftFunctorEquivalence_symm_homEquiv_apply {n : ‚Ñ§} {X Y : C·µí·µñ}
    (f : Opposite.op (X.unop‚ü¶n‚üß) ‚ü∂ Y) :
    (opShiftFunctorEquivalence_symm_homEquiv n X Y f) =
      (opShiftFunctorEquivalence C n).counitIso.inv.app X ‚â´ (shiftFunctor C·µí·µñ n).map f := rfl

lemma opShiftFunctorEquivalence_symm_homEquiv_left_inv
    {n : ‚Ñ§} {X Y : C·µí·µñ} (f : Opposite.op (X.unop‚ü¶n‚üß) ‚ü∂ Y) :
    ((opShiftFunctorEquivalence C n).unitIso.inv.app Y).unop ‚â´
      (opShiftFunctorEquivalence_symm_homEquiv n X Y f).unop‚ü¶n‚üß' = f.unop :=
  Quiver.Hom.op_inj ((opShiftFunctorEquivalence_symm_homEquiv n X Y).left_inv f)

variable (C)

namespace TriangleOpEquivalence

/-- The functor which sends a triangle `X ‚ü∂ Y ‚ü∂ Z ‚ü∂ X‚ü¶1‚üß` in `C` to the triangle
`op Z ‚ü∂ op Y ‚ü∂ op X ‚ü∂ (op Z)‚ü¶1‚üß` in `C·µí·µñ` (without introducing signs). -/
@[simps]
noncomputable def functor : (Triangle C)·µí·µñ ‚•§ Triangle C·µí·µñ where
  obj T := Triangle.mk T.unop.mor‚ÇÇ.op T.unop.mor‚ÇÅ.op
      ((opShiftFunctorEquivalence C 1).counitIso.inv.app (Opposite.op T.unop.obj‚ÇÅ) ‚â´
        T.unop.mor‚ÇÉ.op‚ü¶(1 : ‚Ñ§)‚üß')
  map {T‚ÇÅ T‚ÇÇ} œÜ :=
    { hom‚ÇÅ := œÜ.unop.hom‚ÇÉ.op
      hom‚ÇÇ := œÜ.unop.hom‚ÇÇ.op
      hom‚ÇÉ := œÜ.unop.hom‚ÇÅ.op
      comm‚ÇÅ := Quiver.Hom.unop_inj œÜ.unop.comm‚ÇÇ.symm
      comm‚ÇÇ := Quiver.Hom.unop_inj œÜ.unop.comm‚ÇÅ.symm
      comm‚ÇÉ := by
        dsimp
        rw [assoc, ‚Üê Functor.map_comp, ‚Üê op_comp, ‚Üê œÜ.unop.comm‚ÇÉ, op_comp, Functor.map_comp,
          opShiftFunctorEquivalence_counitIso_inv_naturality_assoc]
        rfl }

/-- The functor which sends a triangle `X ‚ü∂ Y ‚ü∂ Z ‚ü∂ X‚ü¶1‚üß` in `C·µí·µñ` to the triangle
`Z.unop ‚ü∂ Y.unop ‚ü∂ X.unop ‚ü∂ Z.unop‚ü¶1‚üß` in `C` (without introducing signs). -/
@[simps]
noncomputable def inverse : Triangle C·µí·µñ ‚•§ (Triangle C)·µí·µñ where
  obj T := Opposite.op (Triangle.mk T.mor‚ÇÇ.unop T.mor‚ÇÅ.unop
      (((opShiftFunctorEquivalence C 1).unitIso.inv.app T.obj‚ÇÅ).unop ‚â´ T.mor‚ÇÉ.unop‚ü¶(1 : ‚Ñ§)‚üß'))
  map {T‚ÇÅ T‚ÇÇ} œÜ := Quiver.Hom.op
    { hom‚ÇÅ := œÜ.hom‚ÇÉ.unop
      hom‚ÇÇ := œÜ.hom‚ÇÇ.unop
      hom‚ÇÉ := œÜ.hom‚ÇÅ.unop
      comm‚ÇÅ := Quiver.Hom.op_inj œÜ.comm‚ÇÇ.symm
      comm‚ÇÇ := Quiver.Hom.op_inj œÜ.comm‚ÇÅ.symm
      comm‚ÇÉ := Quiver.Hom.op_inj (by
        dsimp
        rw [assoc, ‚Üê opShiftFunctorEquivalence_unitIso_inv_naturality,
          ‚Üê op_comp_assoc, ‚Üê Functor.map_comp, ‚Üê unop_comp, ‚Üê œÜ.comm‚ÇÉ,
          unop_comp, Functor.map_comp, op_comp, assoc]) }

/-- The unit isomorphism of the
equivalence `triangleOpEquivalence C : (Triangle C)·µí·µñ ‚âå Triangle C·µí·µñ` . -/
@[simps!]
noncomputable def unitIso : ùü≠ _ ‚âÖ functor C ‚ãô inverse C :=
  NatIso.ofComponents (fun T => Iso.op
    (Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _) (by aesop_cat) (by aesop_cat)
      (Quiver.Hom.op_inj
        (by simp [shift_unop_opShiftFunctorEquivalence_counitIso_inv_app]))))
    (fun {T‚ÇÅ T‚ÇÇ} f => Quiver.Hom.unop_inj (by aesop_cat))

/-- The counit isomorphism of the
equivalence `triangleOpEquivalence C : (Triangle C)·µí·µñ ‚âå Triangle C·µí·µñ` . -/
@[simps!]
noncomputable def counitIso : inverse C ‚ãô functor C ‚âÖ ùü≠ _ :=
  NatIso.ofComponents (fun T => by
    refine' Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _) _ _ _
    ¬∑ aesop_cat
    ¬∑ aesop_cat
    ¬∑ dsimp
      rw [Functor.map_id, comp_id, id_comp, Functor.map_comp,
        ‚Üê opShiftFunctorEquivalence_counitIso_inv_naturality_assoc,
        opShiftFunctorEquivalence_counitIso_inv_app_shift, ‚Üê Functor.map_comp,
        Iso.hom_inv_id_app, Functor.map_id]
      simp only [Functor.id_obj, comp_id])
    (by aesop_cat)

end TriangleOpEquivalence

/-- An anti-equivalence between the categories of triangles in `C` and in `C·µí·µñ`.
A triangle in `C·µí·µñ` shall be distinguished iff it correspond to a distinguished
triangle in `C` via this equivalence. -/
@[simps]
noncomputable def triangleOpEquivalence :
    (Triangle C)·µí·µñ ‚âå Triangle C·µí·µñ where
  functor := TriangleOpEquivalence.functor C
  inverse := TriangleOpEquivalence.inverse C
  unitIso := TriangleOpEquivalence.unitIso C
  counitIso := TriangleOpEquivalence.counitIso C

variable [HasZeroObject C] [Preadditive C] [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive]
  [Pretriangulated C]

namespace Opposite

/-- A triangle in `C·µí·µñ` shall be distinguished iff it corresponds to a distinguished
triangle in `C` via the equivalence `triangleOpEquivalence C : (Triangle C)·µí·µñ ‚âå Triangle C·µí·µñ`. -/
def distinguishedTriangles : Set (Triangle C·µí·µñ) :=
  fun T => ((triangleOpEquivalence C).inverse.obj T).unop ‚àà distTriang C

variable {C}

lemma mem_distinguishedTriangles_iff (T : Triangle C·µí·µñ) :
    T ‚àà distinguishedTriangles C ‚Üî
      ((triangleOpEquivalence C).inverse.obj T).unop ‚àà distTriang C := by
  rfl

lemma mem_distinguishedTriangles_iff' (T : Triangle C·µí·µñ) :
    T ‚àà distinguishedTriangles C ‚Üî
      ‚àÉ (T' : Triangle C) (_ : T' ‚àà distTriang C),
        Nonempty (T ‚âÖ (triangleOpEquivalence C).functor.obj (Opposite.op T')) := by
  rw [mem_distinguishedTriangles_iff]
  constructor
  ¬∑ intro hT
    exact ‚ü®_ ,hT, ‚ü®(triangleOpEquivalence C).counitIso.symm.app T‚ü©‚ü©
  ¬∑ rintro ‚ü®T', hT', ‚ü®e‚ü©‚ü©
    refine' isomorphic_distinguished _ hT' _ _
    exact Iso.unop ((triangleOpEquivalence C).unitIso.app (Opposite.op T') ‚â™‚â´
      (triangleOpEquivalence C).inverse.mapIso e.symm)

lemma isomorphic_distinguished (T‚ÇÅ : Triangle C·µí·µñ)
    (hT‚ÇÅ : T‚ÇÅ ‚àà distinguishedTriangles C) (T‚ÇÇ : Triangle C·µí·µñ)
    (e : T‚ÇÇ ‚âÖ T‚ÇÅ) :
    T‚ÇÇ ‚àà distinguishedTriangles C := by
  simp only [mem_distinguishedTriangles_iff] at hT‚ÇÅ ‚ä¢
  exact Pretriangulated.isomorphic_distinguished _ hT‚ÇÅ _
    ((triangleOpEquivalence C).inverse.mapIso e).unop.symm

/-- Up to rotation, the contractible triangle `X ‚ü∂ X ‚ü∂ 0 ‚ü∂ X‚ü¶1‚üß` for `X : C·µí·µñ` corresponds
to the contractible triangle for `X.unop` in `C`. -/
@[simps!]
noncomputable def contractibleTriangleIso (X : C·µí·µñ) :
    contractibleTriangle X ‚âÖ (triangleOpEquivalence C).functor.obj
      (Opposite.op (contractibleTriangle X.unop).invRotate) :=
  Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _)
    (IsZero.iso (isZero_zero _) (by
      dsimp
      rw [IsZero.iff_id_eq_zero]
      change (ùüô ((0 : C)‚ü¶(-1 : ‚Ñ§)‚üß)).op = 0
      rw [‚Üê Functor.map_id, id_zero, Functor.map_zero, op_zero]))
    (by aesop_cat) (by
      dsimp
      simp only [zero_comp, comp_neg, id_comp, zero_eq_neg, IsIso.comp_left_eq_zero]
      rw [Functor.map_zero, op_zero]) (by aesop_cat)

lemma contractible_distinguished (X : C·µí·µñ) :
    contractibleTriangle X ‚àà distinguishedTriangles C := by
  rw [mem_distinguishedTriangles_iff']
  exact ‚ü®_, inv_rot_of_distTriang _ (Pretriangulated.contractible_distinguished X.unop),
    ‚ü®contractibleTriangleIso X‚ü©‚ü©

/-- Isomorphism expressing a compatibility of the equivalence `triangleOpEquivalence C`
with the rotation of triangles. -/
noncomputable def rotateTriangleOpEquivalenceInverseObjRotateUnopIso (T : Triangle C·µí·µñ) :
    ((triangleOpEquivalence C).inverse.obj T.rotate).unop.rotate ‚âÖ
      ((triangleOpEquivalence C).inverse.obj T).unop :=
  Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _)
      (-((opShiftFunctorEquivalence C 1).unitIso.app T.obj‚ÇÅ).unop) (by simp)
        (Quiver.Hom.op_inj (by aesop_cat)) (by aesop_cat)

lemma rotate_distinguished_triangle (T : Triangle C·µí·µñ) :
    T ‚àà distinguishedTriangles C ‚Üî T.rotate ‚àà distinguishedTriangles C := by
  simp only [mem_distinguishedTriangles_iff, Pretriangulated.rotate_distinguished_triangle
    ((triangleOpEquivalence C).inverse.obj (T.rotate)).unop]
  exact distinguished_iff_of_iso (rotateTriangleOpEquivalenceInverseObjRotateUnopIso T).symm

lemma distinguished_cocone_triangle {X Y : C·µí·µñ} (f : X ‚ü∂ Y) :
    ‚àÉ (Z : C·µí·µñ) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß),
      Triangle.mk f g h ‚àà distinguishedTriangles C := by
  obtain ‚ü®Z, g, h, H‚ü© := Pretriangulated.distinguished_cocone_triangle‚ÇÅ f.unop
  refine' ‚ü®_, g.op, (opShiftFunctorEquivalence C 1).counitIso.inv.app (Opposite.op Z) ‚â´
    (shiftFunctor C·µí·µñ (1 : ‚Ñ§)).map h.op, _‚ü©
  simp only [mem_distinguishedTriangles_iff]
  refine' Pretriangulated.isomorphic_distinguished _ H _ _
  exact Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _) (by aesop_cat) (by aesop_cat)
    (Quiver.Hom.op_inj (by simp [shift_unop_opShiftFunctorEquivalence_counitIso_inv_app]))

lemma complete_distinguished_triangle_morphism (T‚ÇÅ T‚ÇÇ : Triangle C·µí·µñ)
    (hT‚ÇÅ : T‚ÇÅ ‚àà distinguishedTriangles C) (hT‚ÇÇ : T‚ÇÇ ‚àà distinguishedTriangles C)
    (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ) (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ) (comm : T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ) :
    ‚àÉ (c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ), T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ ‚àß
      T‚ÇÅ.mor‚ÇÉ ‚â´ a‚ü¶1‚üß' = c ‚â´ T‚ÇÇ.mor‚ÇÉ := by
  rw [mem_distinguishedTriangles_iff] at hT‚ÇÅ hT‚ÇÇ
  obtain ‚ü®c, hc‚ÇÅ, hc‚ÇÇ‚ü© :=
    Pretriangulated.complete_distinguished_triangle_morphism‚ÇÅ _ _ hT‚ÇÇ hT‚ÇÅ
      b.unop a.unop (Quiver.Hom.op_inj comm.symm)
  dsimp at c hc‚ÇÅ hc‚ÇÇ
  replace hc‚ÇÇ := ((opShiftFunctorEquivalence C 1).unitIso.hom.app T‚ÇÇ.obj‚ÇÅ).unop ‚â´= hc‚ÇÇ
  dsimp at hc‚ÇÇ
  simp only [assoc, Iso.unop_hom_inv_id_app_assoc] at hc‚ÇÇ
  refine' ‚ü®c.op, Quiver.Hom.unop_inj hc‚ÇÅ.symm, Quiver.Hom.unop_inj _‚ü©
  apply (shiftFunctor C (1 : ‚Ñ§)).map_injective
  rw [unop_comp, unop_comp, Functor.map_comp, Functor.map_comp,
    Quiver.Hom.unop_op, hc‚ÇÇ, ‚Üê unop_comp_assoc, ‚Üê unop_comp_assoc,
    ‚Üê opShiftFunctorEquivalence_unitIso_inv_naturality]
  simp

/-- The pretriangulated structure on the opposite category of
a pretriangulated category. It is a scoped instance, so that we need to
`open CategoryTheory.Pretriangulated.Opposite` in order to be able
to use it: the reason is that it relies on the definition of the shift
on the opposite category `C·µí·µñ`, for which it is unclear whether it should
be a global instance or not. -/
scoped instance : Pretriangulated C·µí·µñ where
  distinguishedTriangles := distinguishedTriangles C
  isomorphic_distinguished := isomorphic_distinguished
  contractible_distinguished := contractible_distinguished
  distinguished_cocone_triangle := distinguished_cocone_triangle
  rotate_distinguished_triangle := rotate_distinguished_triangle
  complete_distinguished_triangle_morphism := complete_distinguished_triangle_morphism

end Opposite

variable {C}

lemma mem_distTriang_op_iff (T : Triangle C·µí·µñ) :
    (T ‚àà distTriang C·µí·µñ) ‚Üî ((triangleOpEquivalence C).inverse.obj T).unop ‚àà distTriang C := by
  rfl

lemma mem_distTriang_op_iff' (T : Triangle C·µí·µñ) :
    (T ‚àà distTriang C·µí·µñ) ‚Üî ‚àÉ (T' : Triangle C) (_ : T' ‚àà distTriang C),
      Nonempty (T ‚âÖ (triangleOpEquivalence C).functor.obj (Opposite.op T')) :=
  Opposite.mem_distinguishedTriangles_iff' T

lemma op_distinguished (T : Triangle C) (hT : T ‚àà distTriang C) :
    ((triangleOpEquivalence C).functor.obj (Opposite.op T)) ‚àà distTriang C·µí·µñ := by
  rw [mem_distTriang_op_iff']
  exact ‚ü®T, hT, ‚ü®Iso.refl _‚ü©‚ü©

lemma unop_distinguished (T : Triangle C·µí·µñ) (hT : T ‚àà distTriang C·µí·µñ) :
    ((triangleOpEquivalence C).inverse.obj T).unop ‚àà distTriang C := hT

lemma distinguished_iff_op (T : Triangle C) :
    (T ‚àà distTriang C) ‚Üî
      ((triangleOpEquivalence C).functor.obj (Opposite.op T)) ‚àà distTriang C·µí·µñ := by
  constructor
  ¬∑ intro hT
    exact op_distinguished _ hT
  ¬∑ intro hT'
    exact isomorphic_distinguished _ (unop_distinguished _ hT') _
      (((triangleOpEquivalence C).unitIso.app (Opposite.op T)).unop.symm)

namespace Opposite

set_option maxHeartbeats 600000 in
scoped instance [IsTriangulated C] : IsTriangulated C·µí·µñ := by
  have : ‚àÄ ‚¶ÉX‚ÇÅ X‚ÇÇ X‚ÇÉ : C‚¶Ñ (u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ),
    ‚àÉ (Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C)
      (v‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ) (w‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß) (h‚ÇÅ‚ÇÇ : Triangle.mk v‚ÇÅ‚ÇÇ u‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà distTriang C)
      (v‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ) (w‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ‚ü¶(1 : ‚Ñ§)‚üß) (h‚ÇÇ‚ÇÉ : Triangle.mk v‚ÇÇ‚ÇÉ u‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà distTriang C)
      (v‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ) (w‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ‚ü¶(1 : ‚Ñ§)‚üß)
        (h‚ÇÅ‚ÇÉ : Triangle.mk v‚ÇÅ‚ÇÉ (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ) w‚ÇÅ‚ÇÉ ‚àà distTriang C),
        Nonempty (Triangulated.Octahedron rfl (rot_of_distTriang _ h‚ÇÅ‚ÇÇ)
          (rot_of_distTriang _ h‚ÇÇ‚ÇÉ) (rot_of_distTriang _ h‚ÇÅ‚ÇÉ)) := by
    intro X‚ÇÅ X‚ÇÇ X‚ÇÉ u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ
    obtain ‚ü®Z‚ÇÅ‚ÇÇ, v‚ÇÅ‚ÇÇ, w‚ÇÅ‚ÇÇ, h‚ÇÅ‚ÇÇ‚ü© := distinguished_cocone_triangle‚ÇÅ u‚ÇÅ‚ÇÇ
    obtain ‚ü®Z‚ÇÇ‚ÇÉ, v‚ÇÇ‚ÇÉ, w‚ÇÇ‚ÇÉ, h‚ÇÇ‚ÇÉ‚ü© := distinguished_cocone_triangle‚ÇÅ u‚ÇÇ‚ÇÉ
    obtain ‚ü®Z‚ÇÅ‚ÇÉ, v‚ÇÅ‚ÇÉ, w‚ÇÅ‚ÇÉ, h‚ÇÅ‚ÇÉ‚ü© := distinguished_cocone_triangle‚ÇÅ (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ)
    exact ‚ü®_, _, _, _, _, h‚ÇÅ‚ÇÇ, _, _, h‚ÇÇ‚ÇÉ, _, _, h‚ÇÅ‚ÇÉ, ‚ü®Triangulated.someOctahedron _ _ _ _‚ü©‚ü©
  apply IsTriangulated.mk'
  intros X‚ÇÅ X‚ÇÇ X‚ÇÉ u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ
  obtain ‚ü®Z‚ÇÅ‚ÇÇ, Z‚ÇÇ‚ÇÉ, Z‚ÇÅ‚ÇÉ, v‚ÇÅ‚ÇÇ, w‚ÇÅ‚ÇÇ, h‚ÇÅ‚ÇÇ, v‚ÇÇ‚ÇÉ, w‚ÇÇ‚ÇÉ, h‚ÇÇ‚ÇÉ, v‚ÇÅ‚ÇÉ, w‚ÇÅ‚ÇÉ, h‚ÇÅ‚ÇÉ, ‚ü®H‚ü©‚ü© :=
    this u‚ÇÇ‚ÇÉ.unop u‚ÇÅ‚ÇÇ.unop
  refine' ‚ü®X‚ÇÅ, X‚ÇÇ, X‚ÇÉ, _, _, _, u‚ÇÅ‚ÇÇ, u‚ÇÇ‚ÇÉ, Iso.refl _, Iso.refl _, Iso.refl _, by simp, by simp,
    v‚ÇÇ‚ÇÉ.op, opShiftFunctorEquivalence_symm_homEquiv 1 _ _ w‚ÇÇ‚ÇÉ.op, _,
    v‚ÇÅ‚ÇÇ.op, opShiftFunctorEquivalence_symm_homEquiv 1 _ _ w‚ÇÅ‚ÇÇ.op, _,
    v‚ÇÅ‚ÇÉ.op, opShiftFunctorEquivalence_symm_homEquiv 1 _ _ w‚ÇÅ‚ÇÉ.op, _, _‚ü©
  ¬∑ rw [mem_distTriang_op_iff]
    refine' Pretriangulated.isomorphic_distinguished _ h‚ÇÇ‚ÇÉ _ _
    refine' Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _) (by simp) (by simp) _
    simpa using opShiftFunctorEquivalence_symm_homEquiv_left_inv w‚ÇÇ‚ÇÉ.op
  ¬∑ rw [mem_distTriang_op_iff]
    refine' Pretriangulated.isomorphic_distinguished _ h‚ÇÅ‚ÇÇ _ _
    refine' Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _) (by simp) (by simp) _
    simpa using opShiftFunctorEquivalence_symm_homEquiv_left_inv w‚ÇÅ‚ÇÇ.op
  ¬∑ rw [mem_distTriang_op_iff]
    refine' Pretriangulated.isomorphic_distinguished _ h‚ÇÅ‚ÇÉ _ _
    refine' Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _) (by simp) (by simp) _
    simpa using opShiftFunctorEquivalence_symm_homEquiv_left_inv w‚ÇÅ‚ÇÉ.op
  ¬∑ obtain ‚ü®m‚ÇÅ, hm‚ÇÅ‚ü© := (shiftFunctor C (1 : ‚Ñ§)).map_surjective H.m‚ÇÉ
    obtain ‚ü®m‚ÇÉ, hm‚ÇÉ‚ü© := (shiftFunctor C (1 : ‚Ñ§)).map_surjective H.m‚ÇÅ
    exact
     ‚ü®{ m‚ÇÅ := m‚ÇÅ.op
        m‚ÇÉ := m‚ÇÉ.op
        comm‚ÇÅ := by
          apply Quiver.Hom.unop_inj
          apply (shiftFunctor C (1 : ‚Ñ§)).map_injective
          simpa [‚Üê hm‚ÇÅ] using H.comm‚ÇÑ.symm
        comm‚ÇÇ := by
          have eq := H.comm‚ÇÉ
          dsimp at eq
          rw [‚Üê eq, ‚Üê hm‚ÇÅ, op_comp, opShiftFunctorEquivalence_symm_homEquiv_apply,
            opShiftFunctorEquivalence_symm_homEquiv_apply]
          simp only [Functor.id_obj, opShiftFunctorEquivalence_inverse,
            opShiftFunctorEquivalence_functor,
            Functor.comp_obj, Functor.op_obj, Functor.map_comp]
          erw [‚Üê NatTrans.naturality_assoc]
          rfl
        comm‚ÇÉ := by
          apply Quiver.Hom.unop_inj
          apply (shiftFunctor C (1 : ‚Ñ§)).map_injective
          simpa [‚Üê hm‚ÇÉ] using H.comm‚ÇÇ
        comm‚ÇÑ := by
          have eq := congr_arg Quiver.Hom.op H.comm‚ÇÅ
          dsimp at eq
          simp only [Opposite.op_unop, Triangle.mk_obj‚ÇÅ]
          rw [opShiftFunctorEquivalence_symm_homEquiv_apply,
            opShiftFunctorEquivalence_symm_homEquiv_apply, assoc, ‚Üê Functor.map_comp,
            ‚Üê eq, ‚Üê hm‚ÇÉ, Functor.map_comp]
          erw [‚Üê NatTrans.naturality_assoc]
          rfl
        mem := by
          rw [‚Üê Triangle.shift_distinguished_iff _ (-1), mem_distTriang_op_iff']
          refine' ‚ü®_, H.mem, ‚ü®_‚ü©‚ü©
          refine' Triangle.isoMk _ _
            ((shiftFunctorOpIso C _ _ (neg_add_self 1)).app _)
            (-((shiftFunctorOpIso C _ _ (neg_add_self 1)).app _))
            ((shiftFunctorOpIso C _ _ (neg_add_self 1)).app _) _ _ _
          ¬∑ dsimp
            simp [‚Üê hm‚ÇÅ]
          ¬∑ dsimp
            simp [‚Üê hm‚ÇÉ]
          ¬∑ dsimp
            simp only [Int.negOnePow_neg, Int.negOnePow_one, Functor.map_comp, assoc,
              one_smul, neg_comp, comp_neg, Functor.map_neg, neg_inj, Units.neg_smul]
            erw [(shiftFunctorComm C·µí·µñ 1 (-1)).hom.naturality_assoc v‚ÇÇ‚ÇÉ.op]
            dsimp
            rw [shiftFunctor_op_map _ _ (neg_add_self 1) v‚ÇÇ‚ÇÉ.op]
            erw [opShiftFunctorEquivalence_symm_homEquiv_apply]
            simp
            nth_rewrite 1 [‚Üê Functor.map_comp]
            rw [Iso.inv_hom_id_app]
            simp
            have eq := (shiftFunctorComm C·µí·µñ 1 (-1)).hom.naturality w‚ÇÅ‚ÇÇ.op
            dsimp at eq
            rw [reassoc_of% eq]
            rw [shiftFunctor_op_map _ _ (neg_add_self 1) w‚ÇÅ‚ÇÇ.op]
            simp only [‚Üê Functor.map_comp_assoc, ‚Üê Functor.map_comp, assoc]
            erw [Iso.inv_hom_id_app_assoc]
            simp only [Functor.op_obj, Opposite.unop_op, Opposite.op_unop, Quiver.Hom.unop_op, Functor.map_comp, ‚Üê assoc]
            congr 2
            simp only [assoc]
            rw [shiftFunctorComm_hom_app_of_add_eq_zero _ _ (add_neg_self 1)]
            simp only [Functor.comp_obj, Functor.id_obj, assoc]
            rw [shiftFunctorCompIsoId_op_hom_app]
            rw [shiftFunctorCompIsoId_op_inv_app]
            simp only [shiftFunctor_op_map _ _ (neg_add_self 1)]
            simp only [shiftFunctor_op_map _ _ (add_neg_self 1)]
            simp
            rw [opShiftFunctorEquivalence_counitIso_inv_app _ _ _ (add_neg_self 1)]
            rw [opShiftFunctorEquivalence_counitIso_inv_app _ _ _ (add_neg_self 1)]
            simp only [Functor.id_obj, Functor.comp_obj, unop_comp, Opposite.unop_op, Quiver.Hom.unop_op,
              Functor.map_comp, op_comp, assoc]
            simp only [‚Üê op_comp, ‚Üê op_comp_assoc, assoc, ‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc,
              ‚Üê unop_comp, ‚Üê unop_comp_assoc]
            rw [Iso.inv_hom_id_app]
            rw [Iso.inv_hom_id_app]
            simp only [Functor.op_obj, Opposite.unop_op, unop_id, Functor.map_id, id_comp, op_comp, assoc]
            simp only [‚Üê assoc];congr 1; simp only [assoc]
            rw [shift_shiftFunctorCompIsoId_add_neg_self_hom_app]
            simp only [‚Üê op_comp_assoc, ‚Üê op_comp, assoc, Iso.inv_hom_id_app, Functor.id_obj, comp_id]
            simp
            rw [‚Üê op_comp]
            erw [(shiftFunctorCompIsoId C (1 : ‚Ñ§) (-1) (by linarith)).hom.naturality]
            rfl }‚ü©

variable (C)

namespace OpOpCommShift

noncomputable def iso (n : ‚Ñ§) :
    shiftFunctor C n ‚ãô opOp C ‚âÖ opOp C ‚ãô shiftFunctor C·µí·µñ·µí·µñ n :=
  NatIso.ofComponents
    (fun X => ((shiftFunctorOpIso C _ _ (neg_add_self n)).app (Opposite.op X)).op ‚â™‚â´
      (shiftFunctorOpIso C·µí·µñ _ _ (add_neg_self n)).symm.app (Opposite.op (Opposite.op X))) (by
      intros X Y f
      dsimp
      rw [assoc, ‚Üê (shiftFunctorOpIso C·µí·µñ _ _ (add_neg_self n)).inv.naturality f.op.op]
      dsimp
      rw [‚Üê op_comp_assoc]
      erw [‚Üê (shiftFunctorOpIso C _ _ (neg_add_self n)).hom.naturality f.op]
      rw [op_comp, assoc])

variable {C}

lemma iso_hom_app (X : C) (n m : ‚Ñ§) (hnm : n + m = 0) :
    (iso C n).hom.app X =
      ((shiftFunctorOpIso C m n (by linarith)).hom.app (Opposite.op X)).op ‚â´
        (shiftFunctorOpIso C·µí·µñ _ _ hnm).inv.app (Opposite.op (Opposite.op X)) := by
  obtain rfl : m = -n := by linarith
  rfl

lemma iso_inv_app (X : C) (n m : ‚Ñ§) (hnm : n + m = 0) :
    (iso C n).inv.app X =
      (shiftFunctorOpIso C·µí·µñ _ _ hnm).hom.app (Opposite.op (Opposite.op X)) ‚â´
        ((shiftFunctorOpIso C m n (by linarith)).inv.app (Opposite.op X)).op := by
  obtain rfl : m = -n := by linarith
  rfl

end OpOpCommShift

noncomputable instance : (opOp C).CommShift ‚Ñ§ where
  iso n := OpOpCommShift.iso C n
  zero := by
    ext X
    dsimp
    rw [OpOpCommShift.iso_hom_app _ 0 0 (zero_add 0)]
    dsimp
    simp only [Functor.CommShift.isoZero_hom_app, unopUnop_obj, unopUnop_map]
    rw [shiftFunctorZero_op_inv_app, shiftFunctorZero_op_hom_app]
    dsimp
    rw [assoc, ‚Üê op_comp_assoc, ‚Üê op_comp, Iso.hom_inv_id_app, op_id, op_id, id_comp]
  add a b := by
    ext X
    dsimp
    simp only [Functor.CommShift.isoAdd_hom_app, opOp_obj, Functor.comp_obj, opOp_map,
      OpOpCommShift.iso_hom_app X _ _ (add_neg_self (a + b)),
      OpOpCommShift.iso_hom_app _ _ _ (add_neg_self a),
      OpOpCommShift.iso_hom_app _ _ _ (add_neg_self b),
      shiftFunctor_op_map _ _ (add_neg_self b),
      shiftFunctor_op_map _ _ (neg_add_self b), assoc,
      ‚Üê shiftFunctorAdd'_eq_shiftFunctorAdd,
      shiftFunctorAdd'_op_inv_app (Opposite.op (Opposite.op X))
      a b (a + b) rfl _ _ _ (add_neg_self a) (add_neg_self b)
      (add_neg_self (a+b))]
    simp only [Functor.op_obj, Opposite.unop_op, unop_comp, Quiver.Hom.unop_op,
      Functor.map_comp, op_comp, assoc, Iso.inv_hom_id_app_assoc,
      Iso.op_hom_inv_id_app_assoc]
    simp only [‚Üê op_comp_assoc, ‚Üê op_comp, assoc, ‚Üê Functor.map_comp, ‚Üê unop_comp, Iso.inv_hom_id_app]
    simp only [Functor.op_obj, Opposite.unop_op, unop_id, id_comp, op_comp, assoc]
    rw [shiftFunctorAdd'_op_hom_app (Opposite.op X) (-a) (-b) (-(a+b)) (by linarith)
      _ _ _ (neg_add_self a) (neg_add_self b) (neg_add_self (a + b))]
    simp only [Functor.op_obj, Opposite.unop_op, Functor.comp_obj, op_comp, assoc]
    simp only [‚Üê op_comp_assoc, ‚Üê op_comp, assoc]
    erw [‚Üê NatTrans.naturality_assoc, Iso.inv_hom_id_app_assoc]
    simp only [Functor.op_obj, Functor.op_map, op_comp, assoc]
    simp only [‚Üê op_comp_assoc, assoc, ‚Üê Functor.map_comp_assoc, ‚Üê unop_comp,
      Iso.inv_hom_id_app]
    simp only [Functor.op_obj, Opposite.unop_op, unop_id_op, Functor.map_id, id_comp,
      Iso.op_inv_hom_id_app, comp_id]

variable {C}

lemma opOp_commShiftIso_hom_app (X : C) (n m : ‚Ñ§) (hnm : n + m = 0) :
    ((opOp C).commShiftIso n).hom.app X =
      ((shiftFunctorOpIso C m n (by linarith)).hom.app (Opposite.op X)).op ‚â´
        (shiftFunctorOpIso C·µí·µñ _ _ hnm).inv.app (Opposite.op (Opposite.op X)) :=
  OpOpCommShift.iso_hom_app _ _ _ hnm

lemma opOp_commShiftIso_inv_app (X : C) (n m : ‚Ñ§) (hnm : n + m = 0) :
    ((opOp C).commShiftIso n).inv.app X =
      (shiftFunctorOpIso C·µí·µñ _ _ hnm).hom.app (Opposite.op (Opposite.op X)) ‚â´
        ((shiftFunctorOpIso C m n (by linarith)).inv.app (Opposite.op X)).op :=
  OpOpCommShift.iso_inv_app _ _ _ hnm

instance : (opOp C).IsTriangulated where
  map_distinguished T hT := by
    rw [mem_distTriang_op_iff']
    refine' ‚ü®_, op_distinguished T hT, ‚ü®_‚ü©‚ü©
    refine' Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _) _ _ _
    ¬∑ aesop_cat
    ¬∑ aesop_cat
    ¬∑ dsimp
      simp only [Functor.map_id, comp_id, id_comp,
        opOp_commShiftIso_hom_app T.obj‚ÇÅ _ _ (add_neg_self 1),
        opShiftFunctorEquivalence_counitIso_inv_app _ _ _ (add_neg_self 1),
        shiftFunctorCompIsoId_op_hom_app _ _ _ (add_neg_self 1),
        shiftFunctor_op_map _ _ (add_neg_self 1),
        shiftFunctor_op_map _ _ (neg_add_self 1)]
      simp only [Functor.op_obj, Opposite.unop_op, unop_id, Functor.map_id, op_id, id_comp, Iso.hom_inv_id_app, comp_id,
        Functor.id_obj, Functor.comp_obj, assoc, Iso.inv_hom_id_app_assoc, op_comp, Quiver.Hom.unop_op,
        Iso.op_hom_inv_id_app_assoc, unop_comp, Functor.map_comp]
      slice_rhs 2 3 =>
        rw [‚Üê op_comp, ‚Üê op_comp, ‚Üê Functor.map_comp, ‚Üê unop_comp, Iso.inv_hom_id_app]
      simp only [Functor.op_obj, Opposite.unop_op, unop_id, Functor.map_id, op_id, id_comp, assoc]
      slice_rhs 1 2 =>
        rw [‚Üê op_comp, ‚Üê op_comp]
        erw [‚Üê NatTrans.naturality]
      dsimp
      simp only [assoc, shift_shiftFunctorCompIsoId_add_neg_self_hom_app]
      slice_rhs 2 3 =>
        rw [‚Üê op_comp, ‚Üê op_comp, Iso.inv_hom_id_app]
      simp

noncomputable instance : (opOpEquivalence C).inverse.CommShift ‚Ñ§ :=
  (inferInstance : (opOp C).CommShift ‚Ñ§)

noncomputable instance : (opOpEquivalence C).functor.CommShift ‚Ñ§ :=
  (opOpEquivalence C).commShiftFunctor ‚Ñ§

noncomputable instance : (unopUnop C).CommShift ‚Ñ§ :=
  (inferInstance : (opOpEquivalence C).functor.CommShift ‚Ñ§)

instance : (opOpEquivalence C).CommShift ‚Ñ§ := (opOpEquivalence C).commShift_of_inverse ‚Ñ§

instance : (opOpEquivalence C).IsTriangulated :=
  Equivalence.IsTriangulated.mk'' _ (inferInstance : (opOp C).IsTriangulated)

instance : (opOp C).IsTriangulated := inferInstance

instance : (unopUnop C).IsTriangulated :=
  (inferInstance : (opOpEquivalence C).functor.IsTriangulated)

end Opposite

section

variable {J : Type*} (T : J ‚Üí Triangle C)
  [HasCoproduct (fun j => (T j).obj‚ÇÅ)] [HasCoproduct (fun j => (T j).obj‚ÇÇ)]
  [HasCoproduct (fun j => (T j).obj‚ÇÉ)]
  [HasCoproduct (fun j => (T j).obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß)]

@[simps!]
noncomputable def coproductTriangle : Triangle C :=
  Triangle.mk (Limits.Sigma.map (fun j => (T j).mor‚ÇÅ))
    (Limits.Sigma.map (fun j => (T j).mor‚ÇÇ))
    (Limits.Sigma.map (fun j => (T j).mor‚ÇÉ) ‚â´ sigmaComparison _ _)

noncomputable def opCoproductTriangleIsoProductTriangle
  [HasProduct (fun j => ((triangleOpEquivalence C).functor.obj (Opposite.op (T j))).obj‚ÇÅ)]
  [HasProduct (fun j => ((triangleOpEquivalence C).functor.obj (Opposite.op (T j))).obj‚ÇÇ)]
  [HasProduct (fun j => ((triangleOpEquivalence C).functor.obj (Opposite.op (T j))).obj‚ÇÉ)]
  [HasProduct (fun j => (((triangleOpEquivalence C).functor.obj
    (Opposite.op (T j))).obj‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß)] :
    productTriangle (fun j => (triangleOpEquivalence C).functor.obj (Opposite.op (T j))) ‚âÖ
    (triangleOpEquivalence C).functor.obj (Opposite.op (coproductTriangle T)) :=
  Triangle.isoMk _ _ (opCoproductIsoProduct (fun j => (T j).obj‚ÇÉ)).symm
    (opCoproductIsoProduct (fun j => (T j).obj‚ÇÇ)).symm
    (opCoproductIsoProduct (fun j => (T j).obj‚ÇÅ)).symm (by
      dsimp [productTriangle]
      simp only [opCoproductIsoProduct_inv_comp_map]) (by
      dsimp [productTriangle]
      simp only [opCoproductIsoProduct_inv_comp_map]) (by
      dsimp [productTriangle]
      have : HasProduct (fun j => (shiftFunctor C·µí·µñ (1 : ‚Ñ§)).obj (Opposite.op (T j).obj‚ÇÉ)) :=
        ‚ü®_, isLimitFanMkObjOfIsLimit (shiftFunctor C·µí·µñ (1 : ‚Ñ§)) _ _
          (productIsProduct (fun j => (Opposite.op (T j).obj‚ÇÉ)))‚ü©
      rw [assoc, ‚Üê cancel_mono ((shiftFunctor C·µí·µñ (1 : ‚Ñ§)).map
        (opCoproductIsoProduct (fun j ‚Ü¶ (T j).obj‚ÇÉ)).hom), assoc, assoc, assoc, assoc,
        ‚Üê Functor.map_comp, Iso.inv_hom_id, Functor.map_id, comp_id,
        ‚Üê cancel_mono (piComparison (shiftFunctor C·µí·µñ (1 : ‚Ñ§)) (fun j ‚Ü¶ Opposite.op (T j).obj‚ÇÉ)),
        assoc, assoc, assoc, assoc, IsIso.inv_hom_id, comp_id]
      ext j
      rw [limMap_œÄ, Discrete.natTrans_app, assoc, assoc, assoc, assoc, piComparison_comp_œÄ,
        ‚Üê Functor.map_comp, ‚Üê Functor.map_comp, assoc,
        opCoproductIsoProduct_hom_comm_œÄ, ‚Üê op_comp_assoc, ‚Üê op_comp, Œπ_colimMap_assoc,
        Discrete.natTrans_app, Œπ_comp_sigmaComparison]
      dsimp
      rw [Functor.map_comp]
      erw [‚Üê (opShiftFunctorEquivalence C 1).counitIso.inv.naturality_assoc
        ((Sigma.Œπ (fun j ‚Ü¶ (T j).obj‚ÇÅ) j).op)]
      dsimp
      rw [opCoproductIsoProduct_inv_comp_Œπ_assoc])

lemma coproductTriangle_distinguished (hT : ‚àÄ j, T j ‚àà distTriang C) :
    coproductTriangle T ‚àà distTriang C := by
  rw [distinguished_iff_op]
  let T' := fun j => (triangleOpEquivalence C).functor.obj (Opposite.op (T j))
  have : HasProduct (fun j ‚Ü¶ (T' j).obj‚ÇÅ) := by dsimp [T', triangleOpEquivalence]; infer_instance
  have : HasProduct (fun j ‚Ü¶ (T' j).obj‚ÇÇ) := by dsimp [T', triangleOpEquivalence]; infer_instance
  have : HasProduct (fun j ‚Ü¶ (T' j).obj‚ÇÉ) := by dsimp [T', triangleOpEquivalence]; infer_instance
  have : HasProduct (fun j ‚Ü¶ ((T' j).obj‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß) :=
    ‚ü®_, isLimitFanMkObjOfIsLimit (shiftFunctor C·µí·µñ (1 : ‚Ñ§)) _ _
      (productIsProduct (fun j => (T' j).obj‚ÇÅ))‚ü©
  exact isomorphic_distinguished _
    (productTriangle_distinguished T' (fun j => op_distinguished _ (hT j))) _
    (opCoproductTriangleIsoProductTriangle T).symm

end

end Pretriangulated

namespace Functor

open Pretriangulated.Opposite Pretriangulated

variable {C}

lemma map_distinguished_op_exact [HasShift C ‚Ñ§] [HasZeroObject C] [Preadditive C]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive]
  [Pretriangulated C]{A : Type*} [Category A] [Abelian A] (F : C·µí·µñ ‚•§ A)
    [F.PreservesZeroMorphisms]
    [F.IsHomological] (T : Triangle C) (hT : T ‚àà distTriang C) :
    ((shortComplexOfDistTriangle T hT).op.map F).Exact :=
  F.map_distinguished_exact _ (op_distinguished T hT)

section

variable {D : Type*} [Category D] [HasShift C ‚Ñ§] [HasShift D ‚Ñ§]

variable (F : C ‚•§ D) [F.CommShift ‚Ñ§]

/-lemma commShift_op_hom_app (n m : ‚Ñ§) (hnm : n + m = 0) (X : C·µí·µñ) :
    (F.op.commShiftIso n).hom.app X =
      (F.map ((shiftFunctorOpIso C n m hnm).hom.app X).unop).op ‚â´
        ((F.commShiftIso m).inv.app X.unop).op ‚â´
        (shiftFunctorOpIso D n m hnm).inv.app (Opposite.op (F.obj X.unop)) := by
  sorry-/

variable [HasZeroObject C] [Preadditive C] [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive]
  [HasZeroObject D] [Preadditive D] [‚àÄ (n : ‚Ñ§), (shiftFunctor D n).Additive]
  [Pretriangulated C][Pretriangulated D]

/-instance [F.IsTriangulated] :
    F.op.IsTriangulated where
  map_distinguished T hT := by
    refine Pretriangulated.isomorphic_distinguished _
      (op_distinguished _ (F.map_distinguished _ (unop_distinguished _ hT))) _ ?_
    refine Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _) sorry sorry ?_
    ¬∑ dsimp
      simp [F.commShift_op_hom_app 1 (-1) (add_neg_self 1)]
      rw [‚Üê Functor.map_comp, ‚Üê Functor.map_comp,
        shiftFunctor_op_map 1 (-1) (add_neg_self 1)]
      dsimp
      simp only [assoc, commShiftIso_hom_naturality, comp_obj, map_comp, op_comp]
      erw [‚Üê NatTrans.naturality_assoc]
      dsimp
      erw [‚Üê NatTrans.naturality_assoc]
      dsimp
      congr 1
      erw [‚Üê NatTrans.naturality_assoc]
      erw [‚Üê NatTrans.naturality_assoc]
      erw [Iso.hom_inv_id_app]
      erw [comp_id]
      erw [comp_id]
      rw [‚Üê Functor.map_comp]
      apply Quiver.Hom.unop_inj
      dsimp
      simp only [map_comp, unop_comp, assoc]
      sorry-/

end


end Functor

namespace Triangulated

open Pretriangulated.Opposite Pretriangulated

variable {C}
variable [HasShift C ‚Ñ§] [HasZeroObject C] [Preadditive C] [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive]
  [Pretriangulated C]

namespace Subcategory

def op (S : Subcategory C) : Subcategory (C·µí·µñ) where
  P := fun X => S.P X.unop
  zero' := by
    obtain ‚ü®Z, hZ, hZ'‚ü© := S.zero'
    exact ‚ü®Opposite.op Z, hZ.op, hZ'‚ü©
  shift X n hX := S.shift _ (-n) hX
  ext‚ÇÇ' := by
    rintro T hT h‚ÇÅ h‚ÇÉ
    rw [mem_distTriang_op_iff] at hT
    obtain ‚ü®X, hX, ‚ü®e‚ü©‚ü© := S.ext‚ÇÇ' _ hT h‚ÇÉ h‚ÇÅ
    exact ‚ü®Opposite.op X, hX, ‚ü®e.symm.op‚ü©‚ü©

def unop (S : Subcategory C·µí·µñ) : Subcategory C where
  P := fun X => S.P (Opposite.op X)
  zero' := by
    obtain ‚ü®Z, hZ, hZ'‚ü© := S.zero'
    exact ‚ü®Z.unop, hZ.unop, hZ'‚ü©
  shift X n hX := by
    obtain ‚ü®m, rfl‚ü© : ‚àÉ m, n = -m := ‚ü®-n, by simp‚ü©
    exact S.shift _ m hX
  ext‚ÇÇ' := by
    rintro T hT h‚ÇÅ h‚ÇÉ
    obtain ‚ü®X, hX, ‚ü®e‚ü©‚ü© := S.ext‚ÇÇ' _ (op_distinguished _ hT) h‚ÇÉ h‚ÇÅ
    exact ‚ü®Opposite.unop X, hX, ‚ü®e.symm.unop‚ü©‚ü©

@[simp] lemma unop_op (S : Subcategory C) : S.op.unop = S := rfl
@[simp] lemma op_unop (S : Subcategory C·µí·µñ) : S.unop.op = S := rfl

instance (S : Subcategory C) [ClosedUnderIsomorphisms S.P] :
    ClosedUnderIsomorphisms S.op.P where
  mem_of_iso e := mem_of_iso S.P e.symm.unop

instance (S : Subcategory C·µí·µñ) [ClosedUnderIsomorphisms S.P] :
    ClosedUnderIsomorphisms S.unop.P where
  mem_of_iso e := mem_of_iso S.P e.symm.op

end Subcategory

end Triangulated

end CategoryTheory
