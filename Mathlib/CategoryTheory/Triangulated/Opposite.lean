import Mathlib.CategoryTheory.Triangulated.Triangulated
import Mathlib.CategoryTheory.Shift.Pullback
import Mathlib.CategoryTheory.Shift.Opposite
import Mathlib.CategoryTheory.Preadditive.Opposite

namespace CategoryTheory

open Category Limits Preadditive

variable (C : Type*) [Category C]

def PretriangulatedOpposite [HasZeroObject C] [HasShift C ‚Ñ§] [Preadditive C]
    [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C] :=
  PullbackShift (OppositeShift C ‚Ñ§)
    (AddMonoidHom.mk' (fun n => -n) (fun a b => by dsimp; abel) : ‚Ñ§ ‚Üí+ ‚Ñ§)

variable [HasZeroObject C] [HasShift C ‚Ñ§] [Preadditive C]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]

namespace PretriangulatedOpposite

instance : Category (PretriangulatedOpposite C) := by
  dsimp only [PretriangulatedOpposite]
  infer_instance

instance : HasZeroObject (PretriangulatedOpposite C) := by
  dsimp only [PretriangulatedOpposite]
  infer_instance

instance : Preadditive (PretriangulatedOpposite C) := by
  dsimp only [PretriangulatedOpposite]
  infer_instance

noncomputable instance : HasShift (PretriangulatedOpposite C) ‚Ñ§ := by
  dsimp only [PretriangulatedOpposite]
  infer_instance

instance (n : ‚Ñ§) : (shiftFunctor (PretriangulatedOpposite C) n).Additive := by
  dsimp only [PretriangulatedOpposite]
  infer_instance

variable {C}

abbrev mk (X : C) : PretriangulatedOpposite C := Opposite.op X

abbrev homMk {X Y : C} (f : X ‚ü∂ Y) : mk Y ‚ü∂ mk X := Opposite.op f

variable (C)

def opFunctorShiftIso (a b : ‚Ñ§) (h : a + b = 0) :
    (shiftFunctor C a).op ‚âÖ shiftFunctor (PretriangulatedOpposite C) b := by
  obtain rfl : a = -b := Iff.mp add_eq_zero_iff_eq_neg h
  rfl

noncomputable def opFunctorShiftCancelIso (n : ‚Ñ§) :
    (shiftFunctor C n).op ‚ãô shiftFunctor (PretriangulatedOpposite C) n ‚âÖ ùü≠ _ :=
  isoWhiskerLeft _ (opFunctorShiftIso C (-n) n n.add_left_neg).symm ‚â™‚â´
    NatIso.op (shiftFunctorCompIsoId C n (-n) n.add_right_neg).symm

noncomputable def opInverseShiftCancelIso (n : ‚Ñ§) :
  shiftFunctor (PretriangulatedOpposite C) n ‚ãô (shiftFunctor C n).op ‚âÖ ùü≠ _ :=
    isoWhiskerRight (opFunctorShiftIso C (-n) n n.add_left_neg).symm _ ‚â™‚â´
      NatIso.op (shiftFunctorCompIsoId C (-n) n n.add_left_neg).symm

variable {C}

lemma opInverseShiftCancelIso_hom_app_comp_opFunctorShiftCancelIso_inv_app (X : C) (n : ‚Ñ§) :
  ((opInverseShiftCancelIso C n).hom.app (PretriangulatedOpposite.mk (X‚ü¶n‚üß))).unop ‚â´
    ((opFunctorShiftCancelIso C n).inv.app (Opposite.op X)).unop‚ü¶n‚üß' = ùüô _:= by
  dsimp [opInverseShiftCancelIso, opFunctorShiftCancelIso, opFunctorShiftIso]
  rw [Functor.map_id, comp_id, comp_id, Quiver.Hom.unop_op,
    shift_shiftFunctorCompIsoId_add_neg_self_hom_app, Iso.inv_hom_id_app]
  rfl

lemma opFunctorShiftCancelIso_inv_app_comp_opInverseShiftCancelIso_hom_app
    (X : PretriangulatedOpposite C) (n : ‚Ñ§) :
  (opFunctorShiftCancelIso C n).inv.app ((shiftFunctor (PretriangulatedOpposite C) n).obj X) ‚â´
    (shiftFunctor (PretriangulatedOpposite C) n).map ((opInverseShiftCancelIso C n).hom.app X) = ùüô _ := by
  dsimp [opInverseShiftCancelIso, opFunctorShiftCancelIso, opFunctorShiftIso]
  simp only [comp_id, Functor.map_id, op_id, Functor.map_comp]
  erw [Functor.map_id]
  rw [id_comp]
  apply Quiver.Hom.unop_inj
  rw [unop_comp]
  change ((shiftFunctorCompIsoId C (-n) n n.add_left_neg).inv.app X.unop)‚ü¶-n‚üß' ‚â´
    (shiftFunctorCompIsoId C n (-n) n.add_right_neg).hom.app (X.unop‚ü¶-n‚üß) = ùüô _
  rw [shift_shiftFunctorCompIsoId_neg_add_self_inv_app, Iso.inv_hom_id_app]
  rfl

end PretriangulatedOpposite

namespace Pretriangulated

namespace TriangleOpEquivalence

open PretriangulatedOpposite

@[simps]
noncomputable def functor : (Triangle C)·µí·µñ ‚•§ Triangle (PretriangulatedOpposite C) where
  obj T := Triangle.mk (homMk T.unop.mor‚ÇÇ) (homMk T.unop.mor‚ÇÅ)
      (-((opFunctorShiftCancelIso C 1).app (Opposite.op T.unop.obj‚ÇÅ)).inv ‚â´
        (shiftFunctor (PretriangulatedOpposite C) (1 : ‚Ñ§)).map ((homMk T.unop.mor‚ÇÉ)))
  map {T‚ÇÅ T‚ÇÇ} œÜ :=
    { hom‚ÇÅ := homMk œÜ.unop.hom‚ÇÉ
      hom‚ÇÇ := homMk œÜ.unop.hom‚ÇÇ
      hom‚ÇÉ := homMk œÜ.unop.hom‚ÇÅ
      comm‚ÇÅ := Opposite.unop_injective (œÜ.unop.comm‚ÇÇ.symm)
      comm‚ÇÇ := Opposite.unop_injective (œÜ.unop.comm‚ÇÅ.symm)
      comm‚ÇÉ := (by
        dsimp [homMk]
        simp only [neg_comp, Category.assoc, comp_neg]
        rw [‚Üê Functor.map_comp]
        erw [‚Üê @op_comp _ _ _ _ _ œÜ.unop.hom‚ÇÉ T‚ÇÅ.unop.mor‚ÇÉ]
        erw [(opFunctorShiftCancelIso C 1).inv.naturality_assoc œÜ.unop.hom‚ÇÅ.op]
        dsimp
        rw [‚Üê Functor.map_comp]
        congr 3
        exact Opposite.unop_injective (œÜ.unop.comm‚ÇÉ.symm)) }

@[simps]
noncomputable def inverse : Triangle (PretriangulatedOpposite C) ‚•§ (Triangle C)·µí·µñ where
  obj T := Opposite.op
    (Triangle.mk T.mor‚ÇÇ.unop T.mor‚ÇÅ.unop (-((opInverseShiftCancelIso C 1).hom.app T.obj‚ÇÅ).unop ‚â´ T.mor‚ÇÉ.unop‚ü¶(1 : ‚Ñ§)‚üß'))
  map {T‚ÇÅ T‚ÇÇ} œÜ := Quiver.Hom.op
    { hom‚ÇÅ := œÜ.hom‚ÇÉ.unop
      hom‚ÇÇ := œÜ.hom‚ÇÇ.unop
      hom‚ÇÉ := œÜ.hom‚ÇÅ.unop
      comm‚ÇÅ := Opposite.op_injective œÜ.comm‚ÇÇ.symm
      comm‚ÇÇ := Opposite.op_injective œÜ.comm‚ÇÅ.symm
      comm‚ÇÉ := by
        dsimp
        simp only [neg_comp, assoc, comp_neg, neg_inj, ‚Üê Functor.map_comp, ‚Üê unop_comp]
        rw [‚Üê œÜ.comm‚ÇÉ, unop_comp, Functor.map_comp, ‚Üê assoc, ‚Üê assoc]
        congr 1
        apply Opposite.op_injective
        exact (opInverseShiftCancelIso C 1).hom.naturality œÜ.hom‚ÇÅ }

@[simps!]
noncomputable def unitIso : ùü≠ _ ‚âÖ functor C ‚ãô inverse C :=
  NatIso.ofComponents (fun T => Iso.op (by
    refine' Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _) _ _ _
    ¬∑ aesop_cat
    ¬∑ aesop_cat
    ¬∑ dsimp
      simp only [Functor.map_id, Category.comp_id, Category.id_comp]
      erw [Functor.map_neg]
      rw [comp_neg, neg_neg]
      dsimp [opEquiv]
      erw [Functor.map_comp]
      erw [‚Üê (NatIso.unop (opInverseShiftCancelIso C 1)).hom.naturality_assoc T.unop.mor‚ÇÉ]
      change T.unop.mor‚ÇÉ ‚â´ _ ‚â´ _ = _
      dsimp
      erw [opInverseShiftCancelIso_hom_app_comp_opFunctorShiftCancelIso_inv_app, comp_id])) (by
        rintro ‚ü®T‚ÇÅ‚ü© ‚ü®T‚ÇÇ‚ü© f
        obtain ‚ü®f, rfl‚ü© : ‚àÉ (g : T‚ÇÇ ‚ü∂ T‚ÇÅ), f = Quiver.Hom.op g := ‚ü®f.unop, rfl‚ü©
        apply Opposite.unop_injective
        ext
        ¬∑ change ùüô _ ‚â´ f.hom‚ÇÅ = f.hom‚ÇÅ ‚â´ ùüô _
          rw [id_comp, comp_id]
        ¬∑ change ùüô _ ‚â´ f.hom‚ÇÇ = f.hom‚ÇÇ ‚â´ ùüô _
          rw [id_comp, comp_id]
        ¬∑ change ùüô _ ‚â´ f.hom‚ÇÉ = f.hom‚ÇÉ ‚â´ ùüô _
          rw [id_comp, comp_id])

@[simps!]
noncomputable def counitIso : inverse C ‚ãô functor C ‚âÖ ùü≠ _ :=
  NatIso.ofComponents (fun T => by
    refine' Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _) _ _ _
    ¬∑ aesop_cat
    ¬∑ aesop_cat
    ¬∑ dsimp [homMk]
      simp only [Functor.map_id, comp_id, id_comp]
      change - (_ ‚â´ (shiftFunctor (PretriangulatedOpposite C) (1 : ‚Ñ§)).map (- ((T.mor‚ÇÉ.unop‚ü¶(1 : ‚Ñ§)‚üß').op ‚â´ _))) = _
      rw [Functor.map_neg, comp_neg, neg_neg, Functor.map_comp]
      erw [‚Üê (opFunctorShiftCancelIso C 1).inv.naturality_assoc T.mor‚ÇÉ]
      erw [opFunctorShiftCancelIso_inv_app_comp_opInverseShiftCancelIso_hom_app, comp_id]
      rfl) (by aesop_cat)

end TriangleOpEquivalence

noncomputable def triangleOpEquivalence :
    (Triangle C)·µí·µñ ‚âå Triangle (PretriangulatedOpposite C) where
  functor := TriangleOpEquivalence.functor C
  inverse := TriangleOpEquivalence.inverse C
  unitIso := TriangleOpEquivalence.unitIso C
  counitIso := TriangleOpEquivalence.counitIso C

end Pretriangulated

--instance : Pretriangulated (PretriangulatedOpposite C) := sorry
--
--instance [IsTriangulated C] : IsTriangulated (PretriangulatedOpposite C) := sorry

end CategoryTheory
