import Mathlib.CategoryTheory.Triangulated.Functor
import Mathlib.CategoryTheory.Triangulated.Yoneda
import Mathlib.CategoryTheory.Abelian.DiagramLemmas.Four
import Mathlib.CategoryTheory.Triangulated.AdjointCommShift
import Mathlib.CategoryTheory.Triangulated.UliftLemmas

noncomputable section

namespace CategoryTheory

open Category Functor CategoryTheory Opposite Pretriangulated

namespace Adjunction

universe u‚ÇÅ u‚ÇÇ v‚ÇÅ v‚ÇÇ u

variable {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [Category.{v‚ÇÅ,u‚ÇÅ} C] [Category.{v‚ÇÇ,u‚ÇÇ} D]
  [HasShift C ‚Ñ§] [HasShift D ‚Ñ§] [Limits.HasZeroObject C]
  [Limits.HasZeroObject D] [Preadditive C] [Preadditive D]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [‚àÄ (n : ‚Ñ§), (shiftFunctor D n).Additive]
  [Pretriangulated C] [Pretriangulated D] {F : C ‚•§ D} {G : D ‚•§ C} [F.CommShift ‚Ñ§] [G.CommShift ‚Ñ§]

open ComposableArrows in
lemma isTriangulated_of_left_adjoint_triangulated_aux (adj : F ‚ä£ G)
    [CommShift.adjunction_compat ‚Ñ§ adj] [F.IsTriangulated] (T : Triangle D)
    (dT : T ‚àà distinguishedTriangles) (X : C) :
    (homologySequenceComposableArrows‚ÇÖ (preadditiveCoyoneda.obj (op X))
    (G.mapTriangle.obj T) 0 1 (by simp)).Exact := by
  apply Exact.exact_of_comp_exact (AddCommGrp.uliftFunctor.{v‚ÇÅ, max v‚ÇÅ v‚ÇÇ})
  set e : homologySequenceComposableArrows‚ÇÖ (preadditiveCoyoneda.obj (op (F.obj X))) T 0 1 (by simp)
      ‚ãô AddCommGrp.uliftFunctor.{v‚ÇÇ, max v‚ÇÅ v‚ÇÇ} ‚âÖ homologySequenceComposableArrows‚ÇÖ
      (preadditiveCoyoneda.obj (op X)) (G.mapTriangle.obj T) 0 1 (by simp) ‚ãô
      AddCommGrp.uliftFunctor.{v‚ÇÅ, max v‚ÇÅ v‚ÇÇ} := by
    refine ?_ ‚â™‚â´ isoWhiskerRight (homologySequenceComposableArrows‚ÇÖ_mapTriangle_iso _ 0 1
      (by simp) G T).symm _
    refine homologySequenceComposableArrows‚ÇÖ_comp_iso _ T 0 1 (by simp) _ ‚â™‚â´ ?_
    refine ?_ ‚â™‚â´ (@homologySequenceComposableArrows‚ÇÖ_comp_iso _ _ _ _ _
      (G ‚ãô preadditiveCoyoneda.obj (op X)) (ShiftSequence.comp_left _ ‚Ñ§ G)
      T 0 1 (by simp) _ _ _).symm
    apply @homologySequenceComposableArrows‚ÇÖ_iso_of_natIso _ _ _ _ _
      (preadditiveCoyoneda.obj (op (F.obj X)) ‚ãô AddCommGrp.uliftFunctor)
      (ShiftSequence.comp_right _ _ _) T 0 1 (by simp) ((G ‚ãô preadditiveCoyoneda.obj (op X)) ‚ãô
      AddCommGrp.uliftFunctor) (@ShiftSequence.comp_right _ _ _ _ (G ‚ãô preadditiveCoyoneda.obj
      (op X)) ‚Ñ§ _ _ (ShiftSequence.comp_left _ _ _) _ _ _)
    refine @ShiftSequenceIso.mk  _ _ _ _
      (preadditiveCoyoneda.obj (op (F.obj X)) ‚ãô AddCommGrp.uliftFunctor.{v‚ÇÇ, max v‚ÇÅ v‚ÇÇ}) ‚Ñ§ _ _
      ((G ‚ãô preadditiveCoyoneda.obj (op X)) ‚ãô AddCommGrp.uliftFunctor)
      (ShiftSequence.comp_right _ _ _) (@ShiftSequence.comp_right _ _ _ _
      (G ‚ãô preadditiveCoyoneda.obj (op X)) ‚Ñ§ _ _ (ShiftSequence.comp_left _ _ _) _ _ _) ?_ ?_
    ¬∑ intro n
      change (shiftFunctor D n ‚ãô preadditiveCoyoneda.obj (op (F.obj X))) ‚ãô
        AddCommGrp.uliftFunctor ‚âÖ (G ‚ãô (shiftFunctor C n ‚ãô preadditiveCoyoneda.obj (op X)))
        ‚ãô AddCommGrp.uliftFunctor
      refine NatIso.ofComponents (fun Y ‚Ü¶ ?_) ?_
      ¬∑ refine adj.homAddEquiv_of_left_adjoint_additive_ulift X (Y‚ü¶n‚üß) ‚â™‚â´ ?_
        change AddCommGrp.uliftFunctor.obj ((preadditiveCoyoneda.obj (op X)).obj _) ‚âÖ
          AddCommGrp.uliftFunctor.obj ((preadditiveCoyoneda.obj (op X)).obj _)
        apply AddCommGrp.uliftFunctor.mapIso
        apply (preadditiveCoyoneda.obj (op X)).mapIso
        exact (CommShift.iso n).app Y
      ¬∑ intro Y‚ÇÅ Y‚ÇÇ f
        ext u
        conv_rhs => change {down := (adj.homEquiv _ _ u.down ‚â´ (CommShift.iso n).hom.app Y‚ÇÅ) ‚â´
                      (G.map f)‚ü¶n‚üß'}
        conv_lhs => change {down := adj.homEquiv _ _ (u.down ‚â´ f‚ü¶n‚üß') ‚â´
                      (CommShift.iso n).hom.app Y‚ÇÇ}
                    rw [adj.homEquiv_naturality_right, assoc]
                    erw [(CommShift.iso (F := G) n).hom.naturality]
        simp only [assoc]; rfl
    ¬∑ intro n a a' h
      ext Y u
      change ULift (F.obj X ‚ü∂ (Y‚ü¶n‚üß)‚ü¶a‚üß) at u
      rw [NatTrans.comp_app, whiskerLeft_app]
      have : (CommShift.iso a').hom.app Y = (Functor.CommShift.isoAdd' h (G.commShiftIso n)
          (G.commShiftIso a)).hom.app Y := by
        change (G.commShiftIso a').hom.app Y = _
        rw [G.commShiftIso_add' h]
      conv_rhs => change {down := (adj.homEquiv _ _ (u.down ‚â´
                    (shiftFunctorAdd' D n a a' h).inv.app Y) ‚â´ (CommShift.iso a').hom.app Y)}
                  rw [adj.homEquiv_naturality_right, assoc, this]
      conv_lhs => change {down := ((adj.homEquiv _ _ u.down ‚â´ (CommShift.iso a).hom.app (Y‚ü¶n‚üß)) ‚â´
                    ((CommShift.iso n).hom.app Y)‚ü¶a‚üß') ‚â´ (shiftFunctorAdd' C n a a' h).inv.app _}
      simp only [preadditiveCoyoneda_obj, comp_obj, assoc, CommShift.isoAdd'_hom_app]
      conv_rhs => rw [‚Üê assoc, ‚Üê assoc, assoc ((adj.homEquiv X ((shiftFunctor D a).obj
                    ((shiftFunctor D n).obj Y))) u.down), ‚Üê map_comp, Iso.inv_hom_id_app]
                  erw [map_id]; rw [comp_id]
      rfl
  rw [exact_iff_of_iso e.symm]
  exact (homologySequenceComposableArrows‚ÇÖ_exact (preadditiveCoyoneda.obj (op (F.obj X))) _ dT 0 1
    (by simp)).comp_exact _

open ComposableArrows in
def isTriangulated_of_left_adjoint_triangulated (adj : F ‚ä£ G) [CommShift.adjunction_compat ‚Ñ§ adj]
    [F.IsTriangulated] : G.IsTriangulated := by
  apply Functor.IsTriangulated.mk
  intro T dT
  obtain ‚ü®Z, g', h', dT'‚ü© := distinguished_cocone_triangle (G.map T.mor‚ÇÅ)
  obtain ‚ü®Œ∏, hŒ∏‚ÇÅ, hŒ∏‚ÇÇ‚ü© := complete_distinguished_triangle_morphism
    (F.mapTriangle.obj (Triangle.mk (G.map T.mor‚ÇÅ) g' h')) T (F.map_distinguished _ dT') dT
    (adj.counit.app _) (adj.counit.app _) (adj.counit.naturality _)
  simp at hŒ∏‚ÇÅ hŒ∏‚ÇÇ
  set œÜ : Z ‚ü∂ G.obj T.obj‚ÇÉ := adj.homEquiv _ _ Œ∏ with œÜdef
  have hœÜ‚ÇÅ : g' ‚â´ œÜ = G.map T.mor‚ÇÇ := by
    rw [œÜdef, ‚Üê homEquiv_naturality_left, hŒ∏‚ÇÅ]
    simp [homEquiv_apply]
  have hœÜ‚ÇÇ : h' = œÜ ‚â´ G.map T.mor‚ÇÉ ‚â´ (G.commShiftIso 1).hom.app T.obj‚ÇÅ := by
    rw [œÜdef, ‚Üê assoc, ‚Üê homEquiv_naturality_right, ‚Üê hŒ∏‚ÇÇ]
    simp only [comp_obj, homEquiv_apply, map_comp, unit_naturality_assoc, assoc,
      commShiftIso_hom_naturality]
    erw [CommShift.compat_right_triangle, comp_id]
  have hœÜ : IsIso œÜ := by
    rw [isIso_iff_isIso_yoneda_map]
    intro X
    suffices h' : IsIso ((preadditiveCoyoneda.obj (op X)).map œÜ) by
      have : ((yoneda.map œÜ).app (op X)) = (coyoneda.obj (op X)).map œÜ := by
        simp [yoneda, coyoneda]
      rw [this]
      have : (coyoneda.obj (op X)).map œÜ = (forget AddCommGrp).map
        ((preadditiveCoyoneda.obj (op X)).map œÜ) := by aesop
      rw [this]
      apply Functor.map_isIso
    suffices h'' : IsIso (((preadditiveCoyoneda.obj (op X)).shift (0 : ‚Ñ§)).map œÜ) by
      have : (preadditiveCoyoneda.obj (op X)).map œÜ =
          ((preadditiveCoyoneda.obj (op X)).isoShiftZero ‚Ñ§).inv.app _ ‚â´
          ((preadditiveCoyoneda.obj (op X)).shift (0 : ‚Ñ§)).map œÜ ‚â´
          ((preadditiveCoyoneda.obj (op X)).isoShiftZero ‚Ñ§).hom.app _ := by
        rw [((preadditiveCoyoneda.obj (op X)).isoShiftZero ‚Ñ§).hom.naturality, ‚Üê assoc,
          Iso.inv_hom_id_app, id_comp]
      rw [this]
      apply IsIso.comp_isIso
    set R‚ÇÅ : ComposableArrows AddCommGrp 4 :=
      Monotone.functor (f := Fin.castLE (n := 4 + 1) (m := 5 + 1) (by simp)) (fun ‚¶Éa b‚¶Ñ h ‚Ü¶ h) ‚ãô
      homologySequenceComposableArrows‚ÇÖ (preadditiveCoyoneda.obj (op X))
      (Triangle.mk (G.map T.mor‚ÇÅ) g' h') 0 1 (by simp)
    have hR‚ÇÅ : R‚ÇÅ.Exact := (homologySequenceComposableArrows‚ÇÖ_exact
      (preadditiveCoyoneda.obj (op X)) _ dT' 0 1 (by simp)).exact_truncation 4 (by linarith)
    set R‚ÇÇ : ComposableArrows AddCommGrp 4 :=
      Monotone.functor (f := Fin.castLE (n := 4 + 1) (m := 5 + 1) (by simp)) (fun ‚¶Éa b‚¶Ñ h ‚Ü¶ h) ‚ãô
      homologySequenceComposableArrows‚ÇÖ (preadditiveCoyoneda.obj (op X))
      (G.mapTriangle.obj T) 0 1 (by simp)
    have hR‚ÇÇ : R‚ÇÇ.Exact := by
      apply Exact.exact_truncation (i := 4) (h := by linarith)
      exact isTriangulated_of_left_adjoint_triangulated_aux adj T dT X
    set Œ¶ : R‚ÇÅ ‚ü∂ R‚ÇÇ := by
      refine whiskerLeft (Monotone.functor (f := Fin.castLE (n := 4 + 1) (m := 5 + 1) (by simp))
        (fun ‚¶Éa b‚¶Ñ h ‚Ü¶ h)) ((preadditiveCoyoneda.obj
        (op X)).homologySequenceComposableArrows‚ÇÖ_map_of_triangle_map ?_ 0 1 (by simp))
      exact Triangle.homMk _ _ (ùüô _) (ùüô _) œÜ (by simp) (by simp; exact hœÜ‚ÇÅ) (by simp; exact hœÜ‚ÇÇ)
    refine Abelian.isIso_of_epi_of_isIso_of_isIso_of_mono hR‚ÇÅ hR‚ÇÇ Œ¶ ?_ ?_ ?_ ?_
    ¬∑ simp only [id_eq, Int.reduceNeg, Int.Nat.cast_ofNat_Int, Nat.cast_ofNat, Int.reduceAdd,
      Int.reduceSub, obj', Nat.reduceAdd, Fin.zero_eta, Fin.isValue, app', preadditiveCoyoneda_obj,
      homologySequenceComposableArrows‚ÇÖ.eq_1, Triangle.mk_obj‚ÇÅ, Triangle.mk_obj‚ÇÇ, Triangle.mk_obj‚ÇÉ,
      Triangle.mk_mor‚ÇÅ, Triangle.mk_mor‚ÇÇ, mk‚ÇÖ.eq_1, mk‚ÇÑ.eq_1, mk‚ÇÉ.eq_1, mk‚ÇÇ.eq_1, mapTriangle_obj,
      homologySequenceComposableArrows‚ÇÖ_map_of_triangle_map, Triangle.homMk_hom‚ÇÅ, map_id,
      Triangle.homMk_hom‚ÇÇ, Triangle.homMk_hom‚ÇÉ, whiskerLeft_app, Monotone.functor_obj, Œ¶]
      change Epi (ùüô _)
      infer_instance
    ¬∑ simp only [id_eq, Int.reduceNeg, Int.Nat.cast_ofNat_Int, Nat.cast_ofNat, Int.reduceAdd,
      Int.reduceSub, obj', Nat.reduceAdd, Fin.mk_one, Fin.isValue, app', preadditiveCoyoneda_obj,
      homologySequenceComposableArrows‚ÇÖ.eq_1, Triangle.mk_obj‚ÇÅ, Triangle.mk_obj‚ÇÇ, Triangle.mk_obj‚ÇÉ,
      Triangle.mk_mor‚ÇÅ, Triangle.mk_mor‚ÇÇ, mk‚ÇÖ.eq_1, mk‚ÇÑ.eq_1, mk‚ÇÉ.eq_1, mk‚ÇÇ.eq_1, mapTriangle_obj,
      homologySequenceComposableArrows‚ÇÖ_map_of_triangle_map, Triangle.homMk_hom‚ÇÅ, map_id,
      Triangle.homMk_hom‚ÇÇ, Triangle.homMk_hom‚ÇÉ, whiskerLeft_app, Monotone.functor_obj, Œ¶]
      change IsIso (ùüô _)
      infer_instance
    ¬∑ simp only [id_eq, Int.reduceNeg, Nat.cast_ofNat, Int.reduceAdd, Int.reduceSub, obj',
      Nat.reduceAdd, Fin.reduceFinMk, app', preadditiveCoyoneda_obj,
      homologySequenceComposableArrows‚ÇÖ.eq_1, Triangle.mk_obj‚ÇÅ, Triangle.mk_obj‚ÇÇ, Triangle.mk_obj‚ÇÉ,
      Triangle.mk_mor‚ÇÅ, Triangle.mk_mor‚ÇÇ, mk‚ÇÖ.eq_1, mk‚ÇÑ.eq_1, mk‚ÇÉ.eq_1, mk‚ÇÇ.eq_1, mapTriangle_obj,
      homologySequenceComposableArrows‚ÇÖ_map_of_triangle_map, Triangle.homMk_hom‚ÇÅ, map_id,
      Triangle.homMk_hom‚ÇÇ, Triangle.homMk_hom‚ÇÉ, whiskerLeft_app, Fin.isValue, Monotone.functor_obj,
      Œ¶]
      change IsIso (ùüô _)
      infer_instance
    ¬∑ simp only [obj', Nat.reduceAdd, Fin.reduceFinMk, app', preadditiveCoyoneda_obj,
      Int.reduceAdd, homologySequenceComposableArrows‚ÇÖ.eq_1, Triangle.mk_obj‚ÇÅ, Triangle.mk_obj‚ÇÇ,
      Triangle.mk_obj‚ÇÉ, Triangle.mk_mor‚ÇÅ, Triangle.mk_mor‚ÇÇ, mk‚ÇÖ.eq_1, mk‚ÇÑ.eq_1, mk‚ÇÉ.eq_1, mk‚ÇÇ.eq_1,
      mapTriangle_obj, homologySequenceComposableArrows‚ÇÖ_map_of_triangle_map, Triangle.homMk_hom‚ÇÅ,
      map_id, Triangle.homMk_hom‚ÇÇ, Triangle.homMk_hom‚ÇÉ, whiskerLeft_app, Fin.isValue,
      Monotone.functor_obj, Œ¶]
      change Mono (ùüô _)
      infer_instance
  exact isomorphic_distinguished _ dT' _ (Triangle.isoMk (Triangle.mk (G.map T.mor‚ÇÅ) g' h')
    (G.mapTriangle.obj T) (Iso.refl _) (Iso.refl _) (asIso œÜ) (by simp) (by simp [hœÜ‚ÇÅ])
    (by simp [hœÜ‚ÇÇ])).symm

end Adjunction

end CategoryTheory
