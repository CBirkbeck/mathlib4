/-
Copyright (c) 2021 Luke Kershaw. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Luke Kershaw, Jo√´l Riou
-/
import Mathlib.CategoryTheory.Triangulated.Functor
import Mathlib.CategoryTheory.Triangulated.Subcategory
import Mathlib.CategoryTheory.Shift.Predicate

/-!
# Filtered Pretriangulated Categories

-/

--set_option diagnostics true

noncomputable section

open CategoryTheory Preadditive Limits

universe v v‚ÇÄ v‚ÇÅ v‚ÇÇ u u‚ÇÄ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Category Pretriangulated ZeroObject

/-
We work in a preadditive category `C` equipped with an additive shift.
-/
variable {C : Type u} [Category.{v, u} C] [HasZeroObject C] [HasShift C (‚Ñ§ √ó ‚Ñ§)] [Preadditive C]

attribute [local instance] endofunctorMonoidalCategory

instance Shift‚ÇÅ : HasShift C ‚Ñ§ where
  shift := (Discrete.addMonoidalFunctor (AddMonoidHom.inl ‚Ñ§ ‚Ñ§)).comp HasShift.shift

def Shift‚ÇÇ : HasShift C ‚Ñ§ where
  shift := (Discrete.addMonoidalFunctor (AddMonoidHom.inr ‚Ñ§ ‚Ñ§)).comp HasShift.shift

instance AdditiveShift‚ÇÅ [‚àÄ (p : ‚Ñ§ √ó ‚Ñ§), Functor.Additive (shiftFunctor C p)] :
    ‚àÄ (n : ‚Ñ§), Functor.Additive (shiftFunctor C n) := by
  intro n
  change Functor.Additive (shiftFunctor C (n, (0 : ‚Ñ§)))
  exact inferInstance

instance AdditiveShift‚ÇÇ [‚àÄ (p : ‚Ñ§ √ó ‚Ñ§), Functor.Additive (shiftFunctor C p)] :
    ‚àÄ (n : ‚Ñ§), Functor.Additive (@shiftFunctor C _ _ _ Shift‚ÇÇ n) := by
  intro n
  change Functor.Additive (shiftFunctor C ((0 : ‚Ñ§), n))
  exact inferInstance

/-
lemma shiftFunctorComm_eq_shift‚ÇÅFunctorComm (n m : ‚Ñ§) :
    shiftFunctorComm C (n, (0 : ‚Ñ§)) (m, (0 : ‚Ñ§)) = shiftFunctorComm C n m := sorry

lemma shiftFunctorComm_eq_shift‚ÇÇFunctorComm (n m : ‚Ñ§) :
    shiftFunctorComm C ((0 : ‚Ñ§), n) ((0 : ‚Ñ§), m) = @shiftFunctorComm C _ _ _ Shift‚ÇÇ n m := sorry
-/

lemma shift‚ÇÅFunctorZero_eq_shiftFunctorZero :
    shiftFunctorZero C ‚Ñ§ = shiftFunctorZero C (‚Ñ§ √ó ‚Ñ§) := by
  rw [shiftFunctorZero, shiftFunctorZero, Iso.symm_eq_iff]
  apply Iso.ext
  rw [MonoidalFunctor.ŒµIso_hom, MonoidalFunctor.ŒµIso_hom]
  erw [LaxMonoidalFunctor.comp_Œµ]
  simp only [Functor.comp_obj, Discrete.addMonoidalFunctor_toLaxMonoidalFunctor_Œµ,
    AddMonoidHom.inl_apply, Discrete.addMonoidal_tensorUnit_as, eqToHom_refl,
    Discrete.functor_map_id, comp_id]
  rfl

lemma shift‚ÇÅFunctorAdd_eq_shiftFunctorAdd (a b : ‚Ñ§) :
    shiftFunctorAdd C a b = shiftFunctorAdd C (a, (0 : ‚Ñ§)) (b, (0 : ‚Ñ§)) := by sorry

instance Shift‚ÇÇCommShift‚ÇÅ (n : ‚Ñ§) : (@shiftFunctor C _ _ _ Shift‚ÇÇ n).CommShift ‚Ñ§ where
iso := fun m ‚Ü¶ (shiftFunctorAdd' C (m, (0 : ‚Ñ§)) ((0 : ‚Ñ§), n) (m, n) (by simp only [Prod.mk_add_mk,
    add_zero, zero_add])).symm.trans (shiftFunctorAdd' C ((0 : ‚Ñ§), n) (m, (0 : ‚Ñ§)) (m, n)
    (by simp only [Prod.mk_add_mk, add_zero, zero_add]))
zero := by
  simp only
  rw [‚Üê shiftFunctorComm_eq]
  ext X
  rw [Functor.CommShift.isoZero_hom_app, shift‚ÇÅFunctorZero_eq_shiftFunctorZero]
  change _ =  (shiftFunctor C ((0 : ‚Ñ§), n)).map ((shiftFunctorZero C (‚Ñ§ √ó ‚Ñ§)).hom.app X) ‚â´
    (shiftFunctorZero C (‚Ñ§ √ó ‚Ñ§)).inv.app ((shiftFunctor C ((0 : ‚Ñ§), n)).obj X)
  rw [shiftFunctorZero_inv_app_shift]
  slice_rhs 1 2 => rw [‚Üê Functor.map_comp]
  simp only [Functor.id_obj, Iso.hom_inv_id_app, Functor.map_id, id_comp]
  rw [‚Üê Iso.symm_hom, shiftFunctorComm_symm]
  rfl
add := by
  intro a b
  simp only
  ext A
  simp only [Functor.comp_obj, Iso.trans_hom, Iso.symm_hom, NatTrans.comp_app,
    Functor.CommShift.isoAdd_hom_app, Functor.map_comp, assoc]
  rw [shift‚ÇÅFunctorAdd_eq_shiftFunctorAdd]
  sorry

/-
  rw [‚Üê shiftFunctorComm_eq, ‚Üê shiftFunctorComm_eq, ‚Üê shiftFunctorComm_eq]
  ext A
  simp only [Functor.CommShift.isoAdd_hom_app]
  rw [shift‚ÇÅFunctorAdd_eq_shiftFunctorAdd]
-/

set_option quotPrecheck false in
/-- shifting an object `X` by `(0, n)` is obtained by the notation `X‚ü™n‚ü´` -/
notation -- Any better notational suggestions?
X "‚ü™" n "‚ü´" => (@shiftFunctor C _ _ _ Shift‚ÇÇ n).obj X

set_option quotPrecheck false in
/-- shifting a morphism `f` by `(0, n)` is obtained by the notation `f‚ü™n‚ü´'` -/
notation f "‚ü™" n "‚ü´'" => (@shiftFunctor C _ _ _ Shift‚ÇÇ n).map f


variable (C)

/-- Definition of a filtered pretriangulated category.
-/
class FilteredPretriangulated [‚àÄ p : ‚Ñ§ √ó ‚Ñ§, Functor.Additive (shiftFunctor C p)]
  [hC : Pretriangulated C]
where
  /-- the second shift acts by triangulated functors -/
  shift‚ÇÇ_triangle : ‚àÄ (n : ‚Ñ§), (@shiftFunctor C _ _ _ Shift‚ÇÇ n).IsTriangulated
  /-- morphism into the object with shifted filtration -/
  Œ± : ùü≠ C ‚ü∂ @shiftFunctor C _ _ _ Shift‚ÇÇ 1
  /-- objets with filtration concentrated in degree `‚â§ n` -/
  LE : ‚Ñ§ ‚Üí Triangulated.Subcategory C
  /-- objets with filtration concentrated in degree `‚â• n` -/
  GE : ‚Ñ§ ‚Üí Triangulated.Subcategory C
  LE_closedUnderIsomorphisms : ‚àÄ (n : ‚Ñ§), ClosedUnderIsomorphisms (LE n).P := by infer_instance
  GE_closedUnderIsomorphisms : ‚àÄ (n : ‚Ñ§), ClosedUnderIsomorphisms (GE n).P := by infer_instance
  LE_zero_le : (LE 0).P ‚â§ (LE 1).P
  GE_one_le : (GE 1).P ‚â§ (GE 0).P
  LE_shift : ‚àÄ (n a n' : ‚Ñ§), a + n = n' ‚Üí ‚àÄ (X : C), (LE n).P X ‚Üí (LE n').P (X‚ü™a‚ü´)
  GE_shift : ‚àÄ (n a n' : ‚Ñ§), a + n = n' ‚Üí ‚àÄ (X : C), (GE n).P X ‚Üí (GE n').P (X‚ü™a‚ü´)
  zero' : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y), (GE 1).P X ‚Üí (LE 0).P Y ‚Üí f = 0
  adj_left : ‚àÄ ‚¶ÉX Y : C‚¶Ñ, (GE 1).P X ‚Üí (LE 0).P Y ‚Üí Function.Bijective
    (fun (f : Y‚ü™1‚ü´ ‚ü∂ X) ‚Ü¶ (Œ±.app Y ‚â´ f : Y ‚ü∂ X))
  adj_right : ‚àÄ ‚¶ÉX Y : C‚¶Ñ, (GE 1).P X ‚Üí (LE 0).P Y ‚Üí Function.Bijective
    (fun (f : Y ‚ü∂ X) ‚Ü¶ (f ‚â´ Œ±.app X : Y ‚ü∂ (X‚ü™1‚ü´)))
  LE_exhaustive : ‚àÄ (X : C), ‚àÉ (n : ‚Ñ§), (LE n).P X
  GE_exhaustive : ‚àÄ (X : C), ‚àÉ (n : ‚Ñ§), (GE n).P X
  Œ±_s : ‚àÄ (X : C), (Œ±.app X)‚ü™1‚ü´' = Œ±.app (X‚ü™1‚ü´)
  exists_triangle_one_zero : ‚àÄ (X : C), ‚àÉ (A : C) (B : C) (_ : (GE 1).P A) (_ : (LE 0).P B)
    (f : A ‚ü∂ X) (g : X ‚ü∂ B) (h : B ‚ü∂ A‚ü¶1‚üß),
    Triangle.mk f g h ‚àà distinguishedTriangles

namespace FilteredPretriangulated

attribute [instance] LE_closedUnderIsomorphisms GE_closedUnderIsomorphisms

variable [‚àÄ p : ‚Ñ§ √ó ‚Ñ§, Functor.Additive (CategoryTheory.shiftFunctor C p)]
  [hC : Pretriangulated C] [hP : FilteredPretriangulated C]

lemma exists_triangle (A : C) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    ‚àÉ (X Y : C) (_ : (GE n‚ÇÅ).P X) (_ : (LE n‚ÇÄ).P Y) (f : X ‚ü∂ A) (g : A ‚ü∂ Y)
      (h : Y ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß), Triangle.mk f g h ‚àà distTriang C := by
  obtain ‚ü®X, Y, hX, hY, f, g, h, mem‚ü© := exists_triangle_one_zero (A‚ü™-n‚ÇÄ‚ü´)
  let T := (@Functor.mapTriangle _ _ _ _ _ _ (@shiftFunctor C _ _ _ Shift‚ÇÇ n‚ÇÄ)
    (Shift‚ÇÇCommShift‚ÇÅ n‚ÇÄ)).obj (Triangle.mk f g h)
  let e := (@shiftEquiv' C _ _ _ Shift‚ÇÇ (-n‚ÇÄ) n‚ÇÄ (by rw [add_left_neg])).unitIso.symm.app A
  have hT' : Triangle.mk (T.mor‚ÇÅ ‚â´ e.hom) (e.inv ‚â´ T.mor‚ÇÇ) T.mor‚ÇÉ ‚àà distTriang C := by
    refine isomorphic_distinguished _ (@Functor.IsTriangulated.map_distinguished _ _ _ _ _ _
      (@shiftFunctor C _ _ _ Shift‚ÇÇ n‚ÇÄ) (Shift‚ÇÇCommShift‚ÇÅ n‚ÇÄ) _ _ _ _ _ _ _ _
      (shift‚ÇÇ_triangle n‚ÇÄ) _ mem) _ ?_
    refine Triangle.isoMk _ _ (Iso.refl _) e.symm (Iso.refl _) ?_ ?_ ?_
    all_goals dsimp; simp [T]
  exact ‚ü®_, _, GE_shift _ _ _ (by omega) _ hX, LE_shift _ _ _ (by omega) _ hY, _, _, _, hT'‚ü©

lemma predicateShift_LE (n n' a : ‚Ñ§) (hn' : n = n') :
    (PredicateShift (LE n).P a) = (hP.LE n').P := by
  ext X; sorry
--  simp only [PredicateShift, Triangulated.Subcategory.shift_iff, hn']
-- might need to add lemmas from jriou_lozalization

lemma predicateShift_GE (a n n' : ‚Ñ§) (hn' : n = n') :
    (PredicateShift (F.GE n).P a) = (F.GE n').P := by
  ext X
  simp only [PredicateShift, hn', Triangulated.Subcategory.shift_iff]

lemma LE_monotone : Monotone (fun n ‚Ü¶ (F.LE n).P) := by
  let H := fun (a : ‚Ñï) => ‚àÄ (n : ‚Ñ§), (F.LE n).P ‚â§ (F.LE (n + a)).P
  suffices ‚àÄ (a : ‚Ñï), H a by
    intro n‚ÇÄ n‚ÇÅ h
    obtain ‚ü®a, ha‚ü© := Int.nonneg_def.1 h
    obtain rfl : n‚ÇÅ = n‚ÇÄ + a := by omega
    apply this
  have H_zero : H 0 := fun n => by
    simp only [Nat.cast_zero, add_zero]
    rfl
  have H_one : H 1 := fun n X hX =>
    (F.LE_closedUnderIsomorphisms (n + 1)).of_iso ((@shiftEquiv' C _ _ _ {shift := F.s}
    (-n) n (by rw [add_left_neg])).unitIso.symm.app X) (F.LE_shift 1 n (n + 1) rfl _
    (F.LE_zero_le _ (F.LE_shift n (-n) 0 (by rw [add_left_neg]) X hX)))
  have H_add : ‚àÄ (a b c : ‚Ñï) (_ : a + b = c) (_ : H a) (_ : H b), H c := by
    intro a b c h ha hb n
    rw [‚Üê h, Nat.cast_add, ‚Üê add_assoc]
    exact (ha n).trans (hb (n+a))
  intro a
  induction' a with a ha
  ¬∑ exact H_zero
  ¬∑ exact H_add a 1 _ rfl ha H_one

lemma GE_antitone : Antitone (fun n ‚Ü¶ (F.GE n).P) := by
  let H := fun (a : ‚Ñï) => ‚àÄ (n : ‚Ñ§), (F.GE (n + a)).P ‚â§ (F.GE n).P
  suffices ‚àÄ (a : ‚Ñï), H a by
    intro n‚ÇÄ n‚ÇÅ h
    obtain ‚ü®a, ha‚ü© := Int.nonneg_def.1 h
    obtain rfl : n‚ÇÅ = n‚ÇÄ + a := by omega
    apply this
  have H_zero : H 0 := fun n => by
    simp only [Nat.cast_zero, add_zero]
    rfl
  have H_one : H 1 := fun n X hX =>
    (F.GE_closedUnderIsomorphisms n).of_iso ((@shiftEquiv' C _ _ _ {shift := F.s}
    (-n) n (by rw [add_left_neg])).unitIso.symm.app X) (F.GE_shift 0 n n (by rw [add_zero]) _
    (F.GE_one_le _ (F.GE_shift (n + 1) (-n) 1 (by rw [neg_add_cancel_left]) X hX)))
  have H_add : ‚àÄ (a b c : ‚Ñï) (_ : a + b = c) (_ : H a) (_ : H b), H c := by
    intro a b c h ha hb n
    rw [‚Üê h, Nat.cast_add, ‚Üê add_assoc ]
    exact (hb (n + a)).trans (ha n)
  intro a
  induction' a with a ha
  ¬∑ exact H_zero
  ¬∑ exact H_add a 1 _ rfl ha H_one

/-- Given a filtration `F` on a pretriangulated category `C`, the property `F.IsLE X n`
holds if `X : C` is `‚â§ n` for the filtration. -/
class IsLE (X : C) (n : ‚Ñ§) : Prop where
  le : (F.LE n).P X

/-- Given a filtration `F` on a pretriangulated category `C`, the property `F.IsGE X n`
holds if `X : C` is `‚â• n` for the filtration. -/
class IsGE (X : C) (n : ‚Ñ§) : Prop where
  ge : (F.GE n).P X

lemma mem_of_isLE (X : C) (n : ‚Ñ§) [F.IsLE X n] : (F.LE n).P X := IsLE.le

lemma mem_of_isGE (X : C) (n : ‚Ñ§) [F.IsGE X n] : (F.GE n).P X := IsGE.ge

-- Should the following be instances or lemmas? Let's make them instances and see what happens.
instance zero_isLE (n : ‚Ñ§) : F.IsLE 0 n := {le := (F.LE n).zero}

instance zero_isGE (n : ‚Ñ§) : F.IsGE 0 n := {ge := (F.GE n).zero}

instance shift_isLE_of_isLE (X : C) (n a : ‚Ñ§) [F.IsLE X n] : F.IsLE (X‚ü¶a‚üß) n :=
  {le := (F.LE n).shift X a (F.mem_of_isLE X n)}

instance shift_isGE_of_isGE (X : C) (n a : ‚Ñ§) [F.IsGE X n] : F.IsGE (X‚ü¶a‚üß) n :=
  {ge := (F.GE n).shift X a (F.mem_of_isGE X n)}

instance LE_ext‚ÇÅ (T : Triangle C) (hT : T ‚àà distinguishedTriangles) (n : ‚Ñ§) [F.IsLE T.obj‚ÇÇ n]
    [F.IsLE T.obj‚ÇÉ n] : F.IsLE T.obj‚ÇÅ n :=
  {le := (F.LE n).ext‚ÇÅ T hT (F.mem_of_isLE T.obj‚ÇÇ n) (F.mem_of_isLE T.obj‚ÇÉ n)}

instance LE_ext‚ÇÇ (T : Triangle C) (hT : T ‚àà distinguishedTriangles) (n : ‚Ñ§) [F.IsLE T.obj‚ÇÅ n]
    [F.IsLE T.obj‚ÇÉ n] : F.IsLE T.obj‚ÇÇ n :=
  {le := (F.LE n).ext‚ÇÇ T hT (F.mem_of_isLE T.obj‚ÇÅ n) (F.mem_of_isLE T.obj‚ÇÉ n)}

instance LE_ext‚ÇÉ (T : Triangle C) (hT : T ‚àà distinguishedTriangles) (n : ‚Ñ§) [F.IsLE T.obj‚ÇÅ n]
    [F.IsLE T.obj‚ÇÇ n] : F.IsLE T.obj‚ÇÉ n :=
  {le := (F.LE n).ext‚ÇÉ T hT (F.mem_of_isLE T.obj‚ÇÅ n) (F.mem_of_isLE T.obj‚ÇÇ n)}

instance GE_ext‚ÇÅ (T : Triangle C) (hT : T ‚àà distinguishedTriangles) (n : ‚Ñ§) [F.IsGE T.obj‚ÇÇ n]
    [F.IsGE T.obj‚ÇÉ n] : F.IsGE T.obj‚ÇÅ n :=
  {ge := (F.GE n).ext‚ÇÅ T hT (F.mem_of_isGE T.obj‚ÇÇ n) (F.mem_of_isGE T.obj‚ÇÉ n)}

instance GE_ext‚ÇÇ (T : Triangle C) (hT : T ‚àà distinguishedTriangles) (n : ‚Ñ§) [F.IsGE T.obj‚ÇÅ n]
    [F.IsGE T.obj‚ÇÉ n] : F.IsGE T.obj‚ÇÇ n :=
  {ge := (F.GE n).ext‚ÇÇ T hT (F.mem_of_isGE T.obj‚ÇÅ n) (F.mem_of_isGE T.obj‚ÇÉ n)}

instance GE_ext‚ÇÉ (T : Triangle C) (hT : T ‚àà distinguishedTriangles) (n : ‚Ñ§) [F.IsGE T.obj‚ÇÅ n]
    [F.IsGE T.obj‚ÇÇ n] : F.IsGE T.obj‚ÇÉ n :=
  {ge := (F.GE n).ext‚ÇÉ T hT (F.mem_of_isGE T.obj‚ÇÅ n) (F.mem_of_isGE T.obj‚ÇÇ n)}

lemma isLE_of_iso {X Y : C} (e : X ‚âÖ Y) (n : ‚Ñ§) [F.IsLE X n] : F.IsLE Y n where
  le := mem_of_iso (F.LE n).P e (F.mem_of_isLE X n)

lemma isGE_of_iso {X Y : C} (e : X ‚âÖ Y) (n : ‚Ñ§) [F.IsGE X n] : F.IsGE Y n where
  ge := mem_of_iso (F.GE n).P e (F.mem_of_isGE X n)

lemma isLE_of_LE (X : C) (p q : ‚Ñ§) (hpq : p ‚â§ q) [F.IsLE X p] : F.IsLE X q where
  le := LE_monotone F hpq _ (F.mem_of_isLE X p)

lemma isGE_of_GE (X : C) (p q : ‚Ñ§) (hpq : p ‚â§ q) [F.IsGE X q] : F.IsGE X p where
  ge := GE_antitone F hpq _ (F.mem_of_isGE X q)

lemma isLE_shift (X : C) (n a n' : ‚Ñ§) (hn' : a + n = n') [F.IsLE X n] :
    F.IsLE (X‚ü™a‚ü´) n' :=
  ‚ü®F.LE_shift n a n' hn' X (F.mem_of_isLE X n)‚ü©

lemma isGE_shift (X : C) (n a n' : ‚Ñ§) (hn' : a + n = n') [F.IsGE X n] :
    F.IsGE (X‚ü™a‚ü´) n' :=
  ‚ü®F.GE_shift n a n' hn' X (F.mem_of_isGE X n)‚ü©

lemma isLE_of_shift (X : C) (n a n' : ‚Ñ§) (hn' : a + n = n') [F.IsLE (X‚ü™a‚ü´) n'] :
    F.IsLE X n := by
  have h := F.isLE_shift (X‚ü™a‚ü´) n' (-a) n (by linarith)
  exact F.isLE_of_iso (show ((X‚ü™a‚ü´)‚ü™-a‚ü´) ‚âÖ X from
  (@shiftEquiv C _ _ _ {shift := F.s} a).unitIso.symm.app X) n

lemma isGE_of_shift (X : C) (n a n' : ‚Ñ§) (hn' : a + n = n') [F.IsGE (X‚ü™a‚ü´) n'] :
    F.IsGE X n := by
  have h := F.isGE_shift (X‚ü™a‚ü´) n' (-a) n (by linarith)
  exact F.isGE_of_iso (show ((X‚ü™a‚ü´)‚ü™-a‚ü´) ‚âÖ X from
  (@shiftEquiv C _ _ _ {shift := F.s} a).unitIso.symm.app X) n

lemma isLE_shift_iff (X : C) (n a n' : ‚Ñ§) (hn' : a + n = n') :
    F.IsLE (X‚ü™a‚ü´) n' ‚Üî F.IsLE X n := by
  constructor
  ¬∑ intro
    exact F.isLE_of_shift X n a n' hn'
  ¬∑ intro
    exact F.isLE_shift X n a n' hn'

lemma isGE_shift_iff (X : C) (n a n' : ‚Ñ§) (hn' : a + n = n') :
    F.IsGE (X‚ü™a‚ü´) n' ‚Üî F.IsGE X n := by
  constructor
  ¬∑ intro
    exact F.isGE_of_shift X n a n' hn'
  ¬∑ intro
    exact F.isGE_shift X n a n' hn'

lemma zero {X Y : C} (f : X ‚ü∂ Y) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ < n‚ÇÅ)
    [F.IsGE X n‚ÇÅ] [F.IsLE Y n‚ÇÄ] : f = 0 := by
  have := F.isLE_shift Y n‚ÇÄ (-n‚ÇÄ) 0 (by simp only [add_left_neg])
  have := F.isGE_shift X n‚ÇÅ (-n‚ÇÄ) (n‚ÇÅ-n‚ÇÄ) (by linarith)
  have := F.isGE_of_GE (X‚ü™-n‚ÇÄ‚ü´) 1 (n‚ÇÅ-n‚ÇÄ) (by linarith)
  apply (@shiftFunctor C _ _ _ {shift := F.s} (-n‚ÇÄ)).map_injective
  simp only [Functor.map_zero]
  apply F.zero'
  ¬∑ apply F.mem_of_isGE
  ¬∑ apply F.mem_of_isLE

lemma zero_of_isGE_of_isLE {X Y : C} (f : X ‚ü∂ Y) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ < n‚ÇÅ)
    (_ : F.IsGE X n‚ÇÅ) (_ : F.IsLE Y n‚ÇÄ) : f = 0 :=
  F.zero f n‚ÇÄ n‚ÇÅ h

lemma isZero (X : C) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ < n‚ÇÅ)
    [F.IsGE X n‚ÇÅ] [F.IsLE X n‚ÇÄ] : IsZero X := by
  rw [IsZero.iff_id_eq_zero]
  exact F.zero _ n‚ÇÄ n‚ÇÅ h

def core (X : C) : Prop := (F.LE 0).P X ‚àß (F.GE 0).P X

lemma mem_core_iff (X : C) :
    F.core X ‚Üî F.IsLE X 0 ‚àß F.IsGE X 0 := by
  constructor
  ¬∑ rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
    exact ‚ü®‚ü®h‚ÇÅ‚ü©, ‚ü®h‚ÇÇ‚ü©‚ü©
  ¬∑ rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
    exact ‚ü®F.mem_of_isLE _ _, F.mem_of_isGE _ _‚ü©

def tCore : Triangulated.Subcategory C where
  P := F.core
  zero' := by
    existsi 0, isZero_zero C
    rw [mem_core_iff]
    exact ‚ü®inferInstance, inferInstance‚ü©
  shift X n hX := by
    rw [mem_core_iff] at hX ‚ä¢
    have := hX.1; have := hX.2
    exact ‚ü®inferInstance, inferInstance‚ü©
  ext‚ÇÇ' T dT hT‚ÇÅ hT‚ÇÉ := by
    apply le_isoClosure
    rw [mem_core_iff] at hT‚ÇÅ hT‚ÇÉ ‚ä¢
    constructor
    ¬∑ exact @LE_ext‚ÇÇ _ _ _ _ _ _ _ F T dT 0 hT‚ÇÅ.1 hT‚ÇÉ.1
    ¬∑ exact @GE_ext‚ÇÇ _ _ _ _ _ _ _ F T dT 0 hT‚ÇÅ.2 hT‚ÇÉ.2

lemma mem_tCore_iff (X : C) :
    F.tCore.P X ‚Üî F.IsLE X 0 ‚àß F.IsGE X 0 := by
  constructor
  ¬∑ rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
    exact ‚ü®‚ü®h‚ÇÅ‚ü©, ‚ü®h‚ÇÇ‚ü©‚ü©
  ¬∑ rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
    exact ‚ü®F.mem_of_isLE _ _, F.mem_of_isGE _ _‚ü©

instance : ClosedUnderIsomorphisms F.tCore.P where
  of_iso {X Y} e hX := by
    rw [mem_tCore_iff] at hX ‚ä¢
    have := hX.1
    have := hX.2
    constructor
    ¬∑ exact F.isLE_of_iso e 0
    ¬∑ exact F.isGE_of_iso e 0

abbrev Core' := F.tCore.category

abbrev ŒπCore' : F.Core' ‚•§ C := fullSubcategoryInclusion _

instance : Functor.Additive F.ŒπCore' := sorry

instance : Functor.Full F.ŒπCore' := sorry

instance : Functor.Faithful F.ŒπCore' := sorry


instance (X : F.Core') : F.IsLE (F.ŒπCore'.obj X) 0 := ‚ü®X.2.1‚ü©
instance (X : F.Core') : F.IsGE (F.ŒπCore'.obj X) 0 := ‚ü®X.2.2‚ü©
instance (X : F.Core') : F.IsLE X.1 0 := ‚ü®X.2.1‚ü©
instance (X : F.Core') : F.IsGE X.1 0 := ‚ü®X.2.2‚ü©

lemma ŒπCore_obj_mem_core (X : F.Core') : F.core (F.ŒπCore'.obj X) := X.2

/-
def ŒπHeartDegree (n : ‚Ñ§) : t.Heart' ‚•§ C :=
  t.ŒπHeart' ‚ãô shiftFunctor C (-n)

noncomputable def ŒπHeartDegreeCompShiftIso (n : ‚Ñ§) : t.ŒπHeartDegree n ‚ãô shiftFunctor C n ‚âÖ t.ŒπHeart' :=
  Functor.associator _ _ _ ‚â™‚â´
    isoWhiskerLeft _ (shiftFunctorCompIsoId C (-n) n (add_left_neg n)) ‚â™‚â´
    Functor.rightUnitor _
-/

class HasCore where
  H : Type*
  [cat : Category H]
  [preadditive : Preadditive H]
  Œπ : H ‚•§ C
  additive_Œπ : Œπ.Additive := by infer_instance
  fullŒπ : Œπ.Full := by infer_instance
  faithful_Œπ : Œπ.Faithful := by infer_instance
  hŒπ : Œπ.essImage = setOf F.tCore.P := by simp

def hasCoreFullSubcategory : F.HasCore where
  H := F.Core'
  Œπ := F.ŒπCore'
  hŒπ := by
    ext X
    simp only [Set.mem_setOf_eq]
    constructor
    ¬∑ intro h
      refine ClosedUnderIsomorphisms.of_iso (Functor.essImage.getIso h ) ?_
      exact (Functor.essImage.witness h).2
    ¬∑ intro h
      change (fullSubcategoryInclusion F.core).obj ‚ü®X, h‚ü© ‚àà _
      exact Functor.obj_mem_essImage _ _

variable [ht : F.HasCore]

def Core := ht.H

instance : Category F.Core := ht.cat

def ŒπCore : F.Core ‚•§ C := ht.Œπ

instance : Preadditive F.Core := ht.preadditive
instance : F.ŒπCore.Full := ht.fullŒπ
instance : F.ŒπCore.Faithful := ht.faithful_Œπ
instance : F.ŒπCore.Additive := ht.additive_Œπ

-- Add instances saying that the core is triangulated and the inclusion is a triangulated functor.

lemma ŒπCore_obj_mem (X : F.Core) : F.tCore.P (F.ŒπCore.obj X) := by
  change (F.ŒπCore.obj X) ‚àà setOf F.tCore.P
  rw [‚Üê ht.hŒπ]
  exact F.ŒπCore.obj_mem_essImage X

instance (X : F.Core) : F.IsLE (F.ŒπCore.obj X) 0 :=
  ‚ü®(F.ŒπCore_obj_mem X).1‚ü©

instance (X : F.Core) : F.IsGE (F.ŒπCore.obj X) 0 :=
  ‚ü®(F.ŒπCore_obj_mem X).2‚ü©

lemma mem_essImage_ŒπCore_iff (X : C) :
    X ‚àà F.ŒπCore.essImage ‚Üî F.tCore.P X := by
  dsimp [ŒπCore]
  rw [ht.hŒπ, Set.mem_setOf_eq]

noncomputable def coreMk (X : C) (hX : F.tCore.P X) : F.Core :=
  Functor.essImage.witness ((F.mem_essImage_ŒπCore_iff X).2 hX)

noncomputable def ŒπCoreObjCoreMkIso (X : C) (hX : F.tCore.P X) :
    F.ŒπCore.obj (F.coreMk X hX) ‚âÖ X :=
  Functor.essImage.getIso ((F.mem_essImage_ŒπCore_iff X).2 hX)

@[simps obj]
noncomputable def liftCore {D : Type*} [Category D]
    (G : D ‚•§ C) (hF : ‚àÄ (X : D), F.tCore.P (G.obj X)) :
    D ‚•§ F.Core where
  obj X := F.coreMk (G.obj X) (hF X)
  map {X Y} f := F.ŒπCore.preimage ((F.ŒπCoreObjCoreMkIso _ (hF X)).hom ‚â´ G.map f ‚â´
      (F.ŒπCoreObjCoreMkIso _ (hF Y)).inv)
  map_id X := F.ŒπCore.map_injective (by simp)
  map_comp f g := F.ŒπCore.map_injective (by simp)

@[simp, reassoc]
lemma ŒπCore_map_liftCore_map {D : Type*} [Category D]
    (G : D ‚•§ C) (hF : ‚àÄ (X : D), F.tCore.P (G.obj X)) {X Y : D} (f : X ‚ü∂ Y) :
    F.ŒπCore.map ((F.liftCore G hF).map f) =
      (F.ŒπCoreObjCoreMkIso _ (hF X)).hom ‚â´ G.map f ‚â´
        (F.ŒπCoreObjCoreMkIso _ (hF Y)).inv := by
  simp [liftCore]

noncomputable def liftCoreŒπCore {D : Type*} [Category D]
    (G : D ‚•§ C) (hF : ‚àÄ (X : D), F.tCore.P (G.obj X)) :
    F.liftCore G hF ‚ãô F.ŒπCore ‚âÖ G :=
  NatIso.ofComponents (fun X => F.ŒπCoreObjCoreMkIso _ (hF X)) (by aesop_cat)

end FilteredTriangulated

#exit

namespace Subcategory

variable {C}
variable (S : Subcategory C) (t : TStructure C)

class HasInducedTStructure : Prop :=
  exists_triangle_zero_one (A : C) (hA : S.P A) :
    ‚àÉ (X Y : C) (_ : t.LE 0 X) (_ : t.GE 1 Y)
      (f : X ‚ü∂ A) (g : A ‚ü∂ Y) (h : Y ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß) (_ : Triangle.mk f g h ‚àà distTriang C),
    X ‚àà S.Œπ.essImage ‚àß Y ‚àà S.Œπ.essImage

variable [h : S.HasInducedTStructure t]

def tStructure : TStructure S.category where
  LE n X := t.LE n (S.Œπ.obj X)
  GE n X := t.GE n (S.Œπ.obj X)
  LE_closedUnderIsomorphisms n := ‚ü®fun {X Y} e hX => mem_of_iso (t.LE n) (S.Œπ.mapIso e) hX‚ü©
  GE_closedUnderIsomorphisms n := ‚ü®fun {X Y} e hX => mem_of_iso (t.GE n) (S.Œπ.mapIso e) hX‚ü©
  LE_shift n a n' h X hX := mem_of_iso (t.LE n') ((S.Œπ.commShiftIso a).symm.app X)
    (t.LE_shift n a n' h (S.Œπ.obj X) hX)
  GE_shift n a n' h X hX := mem_of_iso (t.GE n') ((S.Œπ.commShiftIso a).symm.app X)
    (t.GE_shift n a n' h (S.Œπ.obj X) hX)
  zero' {X Y} f hX hY := S.Œπ.map_injective (by
    rw [Functor.map_zero]
    exact t.zero' (S.Œπ.map f) hX hY)
  LE_zero_le X hX := t.LE_zero_le _ hX
  GE_one_le X hX := t.GE_one_le _ hX
  exists_triangle_zero_one A := by
    obtain ‚ü®X, Y, hX, hY, f, g, h, hT, ‚ü®X', ‚ü®e‚ü©‚ü©, ‚ü®Y', ‚ü®e'‚ü©‚ü©‚ü© :=
      h.exists_triangle_zero_one A.1 A.2
    refine' ‚ü®X', Y', mem_of_iso (t.LE 0) e.symm hX, mem_of_iso (t.GE 1) e'.symm hY,
      S.Œπ.preimage (e.hom ‚â´ f), S.Œπ.preimage (g ‚â´ e'.inv),
      S.Œπ.preimage (e'.hom ‚â´ h ‚â´ e.inv‚ü¶(1 : ‚Ñ§)‚üß' ‚â´ (S.Œπ.commShiftIso (1 : ‚Ñ§)).inv.app X'),
      isomorphic_distinguished _ hT _ _‚ü©
    refine' Triangle.isoMk _ _ e (Iso.refl _) e' _ _ _
    ¬∑ dsimp
      simp
    ¬∑ dsimp
      simp
    ¬∑ dsimp
      simp only [Functor.map_preimage, Category.assoc, Iso.inv_hom_id_app, Functor.comp_obj,
        Category.comp_id, Iso.cancel_iso_hom_left, ‚Üê Functor.map_comp, Iso.inv_hom_id,
        Functor.map_id]

@[simp]
lemma mem_tStructure_heart_iff (X : S.category) :
    (S.tStructure t).heart X ‚Üî t.heart X.1 := by
  rfl

lemma tStructure_isLE_iff (X : S.category) (n : ‚Ñ§) :
    (S.tStructure t).IsLE X n ‚Üî t.IsLE (S.Œπ.obj X) n :=
  ‚ü®fun h => ‚ü®h.1‚ü©, fun h => ‚ü®h.1‚ü©‚ü©

lemma tStructure_isGE_iff (X : S.category) (n : ‚Ñ§) :
    (S.tStructure t).IsGE X n ‚Üî t.IsGE (S.Œπ.obj X) n :=
  ‚ü®fun h => ‚ü®h.1‚ü©, fun h => ‚ü®h.1‚ü©‚ü©

end Subcategory

end Triangulated

end CategoryTheory


end FilteredTriangulated
