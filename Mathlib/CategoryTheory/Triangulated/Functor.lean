import Mathlib.CategoryTheory.Triangulated.Triangulated
import Mathlib.CategoryTheory.Preadditive.Basic
import Mathlib.CategoryTheory.Shift.CommShift
import Mathlib.CategoryTheory.Triangulated.TriangleShift
import Mathlib.CategoryTheory.Linear.LinearFunctor

namespace CategoryTheory

open Category Limits Pretriangulated Preadditive ZeroObject

namespace Functor

variable {C D E : Type _} [Category C] [Category D] [Category E]
  [HasShift C ‚Ñ§] [HasShift D ‚Ñ§] [HasShift E ‚Ñ§]
  [Preadditive C] [Preadditive D] [Preadditive E]
  (F : C ‚•§ D) [F.CommShift ‚Ñ§] (G : D ‚•§ E) [G.CommShift ‚Ñ§]

@[simps]
def mapTriangle : Pretriangulated.Triangle C ‚•§ Pretriangulated.Triangle D where
  obj T := Pretriangulated.Triangle.mk (F.map T.mor‚ÇÅ) (F.map T.mor‚ÇÇ)
    (F.map T.mor‚ÇÉ ‚â´ (F.commShiftIso (1 : ‚Ñ§)).hom.app T.obj‚ÇÅ)
  map f :=
    { hom‚ÇÅ := F.map f.hom‚ÇÅ
      hom‚ÇÇ := F.map f.hom‚ÇÇ
      hom‚ÇÉ := F.map f.hom‚ÇÉ
      comm‚ÇÅ := by dsimp ; simp only [‚Üê F.map_comp, f.comm‚ÇÅ]
      comm‚ÇÇ := by dsimp ; simp only [‚Üê F.map_comp, f.comm‚ÇÇ]
      comm‚ÇÉ := by
        dsimp [Functor.comp]
        simp only [Category.assoc, ‚Üê NatTrans.naturality,
          ‚Üê F.map_comp_assoc, f.comm‚ÇÉ] }

attribute [local simp] map_zsmul comp_zsmul zsmul_comp
  commShiftIso_zero commShiftIso_add
  shiftFunctorAdd'_eq_shiftFunctorAdd
  commShiftIso_comp_hom_app

instance [Faithful F] : Faithful F.mapTriangle where
  map_injective {X Y} f g h := by
    ext <;> apply F.map_injective
    ¬∑ exact congr_arg TriangleMorphism.hom‚ÇÅ h
    ¬∑ exact congr_arg TriangleMorphism.hom‚ÇÇ h
    ¬∑ exact congr_arg TriangleMorphism.hom‚ÇÉ h

instance [Full F] [Faithful F] : Full F.mapTriangle where
  preimage {X Y} f :=
    { hom‚ÇÅ := F.preimage f.hom‚ÇÅ
      hom‚ÇÇ := F.preimage f.hom‚ÇÇ
      hom‚ÇÉ := F.preimage f.hom‚ÇÉ
      comm‚ÇÅ := F.map_injective
        (by simpa only [mapTriangle_obj, map_comp, image_preimage] using f.comm‚ÇÅ)
      comm‚ÇÇ := F.map_injective
        (by simpa only [mapTriangle_obj, map_comp, image_preimage] using f.comm‚ÇÇ)
      comm‚ÇÉ := F.map_injective (by
        rw [‚Üê cancel_mono ((F.commShiftIso (1 : ‚Ñ§)).hom.app Y.obj‚ÇÅ)]
        simpa only [mapTriangle_obj, map_comp, assoc, commShiftIso_hom_naturality,
          image_preimage, Triangle.mk_mor‚ÇÉ] using f.comm‚ÇÉ) }

@[simps!]
noncomputable def mapTriangleCommShiftIso [F.Additive] (n : ‚Ñ§) :
    Triangle.shiftFunctor C n ‚ãô F.mapTriangle ‚âÖ F.mapTriangle ‚ãô Triangle.shiftFunctor D n :=
  NatIso.ofComponents (fun T => Triangle.isoMk _ _
    ((F.commShiftIso n).app _) ((F.commShiftIso n).app _) ((F.commShiftIso n).app _)
    (by aesop_cat)
    (by aesop_cat)
    (by
      dsimp
      simp only [map_units_smul, map_comp, Linear.units_smul_comp, assoc, Linear.comp_units_smul,
        smul_left_cancel_iff, ‚Üê F.commShiftIso_hom_naturality_assoc]
      congr 1
      rw [F.map_shiftFunctorComm T.obj‚ÇÅ 1 n]
      simp only [comp_obj, assoc, Iso.inv_hom_id_app_assoc, NatIso.cancel_natIso_hom_left]
      rw [‚Üê Functor.map_comp, Iso.inv_hom_id_app]
      dsimp
      simp only [map_id, comp_id]))
    (by aesop_cat)

set_option maxHeartbeats 400000 in
noncomputable instance [F.Additive] [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive]
    [‚àÄ (n : ‚Ñ§), (shiftFunctor D n).Additive] : (F.mapTriangle).CommShift ‚Ñ§ where
  iso := F.mapTriangleCommShiftIso

@[simps!]
def mapTriangleRotateIso [F.Additive] :
    F.mapTriangle ‚ãô Pretriangulated.rotate D ‚âÖ
      Pretriangulated.rotate C ‚ãô F.mapTriangle :=
    NatIso.ofComponents
      (fun T => Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) ((F.commShiftIso (1 : ‚Ñ§)).symm.app _)
        (by aesop_cat) (by aesop_cat) (by aesop_cat))
      (by aesop_cat)

@[simps!]
noncomputable def mapTriangleInvRotateIso [F.Additive] :
    F.mapTriangle ‚ãô Pretriangulated.invRotate D ‚âÖ
      Pretriangulated.invRotate C ‚ãô F.mapTriangle :=
    NatIso.ofComponents
      (fun T => Triangle.isoMk _ _ ((F.commShiftIso (-1 : ‚Ñ§)).symm.app _) (Iso.refl _) (Iso.refl _)
        (by aesop_cat) (by aesop_cat) (by aesop_cat)) (by aesop_cat)

@[simps!]
def mapTriangleCompIso : (F ‚ãô G).mapTriangle ‚âÖ F.mapTriangle ‚ãô G.mapTriangle :=
  NatIso.ofComponents (fun T => Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _)
      (by aesop_cat) (by aesop_cat) (by aesop_cat)) (by aesop_cat)

variable [HasZeroObject C] [HasZeroObject D] [HasZeroObject E]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [‚àÄ (n : ‚Ñ§), (shiftFunctor D n).Additive]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor E n).Additive]
  [Pretriangulated C] [Pretriangulated D] [Pretriangulated E]

class IsTriangulated : Prop where
  map_distinguished : ‚àÄ (T : Triangle C), (T ‚àà distTriang C) ‚Üí F.mapTriangle.obj T ‚àà distTriang D

lemma map_distinguished [F.IsTriangulated] (T : Triangle C) (hT : T ‚àà distTriang C) :
    F.mapTriangle.obj T ‚àà distTriang D :=
  IsTriangulated.map_distinguished _ hT

namespace IsTriangulated

variable [F.IsTriangulated]

noncomputable def mapZeroObject : F.obj 0 ‚âÖ 0 := by
  apply IsZero.isoZero
  apply Triangle.isZero‚ÇÉ_of_isIso‚ÇÅ _ (F.map_distinguished _ (contractible_distinguished (0 : C)))
  dsimp
  infer_instance

instance : PreservesZeroMorphisms F := by
  have h : ùüô (F.obj 0) = 0 := by
    rw [‚Üê IsZero.iff_id_eq_zero]
    apply Triangle.isZero‚ÇÉ_of_isIso‚ÇÅ _ (F.map_distinguished _ (contractible_distinguished (0 : C)))
    dsimp
    infer_instance
  refine' ‚ü®fun X Y => _‚ü©
  have : (0 : X ‚ü∂ Y) = 0 ‚â´ ùüô 0 ‚â´ 0 := by simp
  rw [this, F.map_comp, F.map_comp, F.map_id, h, zero_comp, comp_zero]

noncomputable instance : PreservesLimitsOfShape (Discrete WalkingPair) F := by
  suffices ‚àÄ (X‚ÇÅ X‚ÇÉ : C), IsIso (prodComparison F X‚ÇÅ X‚ÇÉ) by
    have := fun (X‚ÇÅ X‚ÇÉ : C) => PreservesLimitPair.ofIsoProdComparison F X‚ÇÅ X‚ÇÉ
    exact ‚ü®fun {K} => preservesLimitOfIsoDiagram F (diagramIsoPair K).symm‚ü©
  intro X‚ÇÅ X‚ÇÉ
  let œÜ : F.mapTriangle.obj (binaryProductTriangle X‚ÇÅ X‚ÇÉ) ‚ü∂
      binaryProductTriangle (F.obj X‚ÇÅ) (F.obj X‚ÇÉ) :=
    { hom‚ÇÅ := ùüô _
      hom‚ÇÇ := prodComparison F X‚ÇÅ X‚ÇÉ
      hom‚ÇÉ := ùüô _
      comm‚ÇÅ := by
        dsimp
        ext
        ¬∑ simp only [assoc, prodComparison_fst, prod.comp_lift, comp_id, comp_zero,
            limit.lift_œÄ, BinaryFan.mk_pt, BinaryFan.œÄ_app_left, BinaryFan.mk_fst,
            ‚Üê F.map_comp, F.map_id]
        ¬∑ simp only [assoc, prodComparison_snd, prod.comp_lift, comp_id, comp_zero,
            limit.lift_œÄ, BinaryFan.mk_pt, BinaryFan.œÄ_app_right, BinaryFan.mk_snd,
            ‚Üê F.map_comp, F.map_zero]
      comm‚ÇÇ := by simp
      comm‚ÇÉ := by simp }
  exact isIso‚ÇÇ_of_isIso‚ÇÅ‚ÇÉ œÜ (F.map_distinguished _ (binaryProductTriangle_distinguished X‚ÇÅ X‚ÇÉ))
    (binaryProductTriangle_distinguished _ _)
    (by dsimp ; infer_instance) (by dsimp ; infer_instance)

instance : F.Additive := F.additive_of_preserves_binary_products

end IsTriangulated

lemma map_distinguished_iff [F.IsTriangulated] [Full F] [Faithful F] (T : Triangle C) :
    (F.mapTriangle.obj T ‚àà distTriang D) ‚Üî T ‚àà distTriang C := by
  constructor
  ¬∑ intro hT
    obtain ‚ü®Z, g, h, mem‚ü© := distinguished_cocone_triangle T.mor‚ÇÅ
    refine' isomorphic_distinguished _ mem _ (F.mapTriangle.preimageIso _)
    exact isoTriangleOfIso‚ÇÅ‚ÇÇ _ _ hT (F.map_distinguished _ mem) (Iso.refl _) (Iso.refl _)
      (by simp)
  ¬∑ exact F.map_distinguished T

def mapTriangleIso {F‚ÇÅ F‚ÇÇ : C ‚•§ D} (e : F‚ÇÅ ‚âÖ F‚ÇÇ) [F‚ÇÅ.CommShift ‚Ñ§] [F‚ÇÇ.CommShift ‚Ñ§]
    [NatTrans.CommShift e.hom ‚Ñ§] : F‚ÇÅ.mapTriangle ‚âÖ F‚ÇÇ.mapTriangle :=
  NatIso.ofComponents (fun T =>
    Triangle.isoMk _ _ (e.app _) (e.app _) (e.app _) (by simp) (by simp) (by
      dsimp
      simp only [assoc, NatTrans.CommShift.comm_app e.hom (1 : ‚Ñ§) T.obj‚ÇÅ,
        NatTrans.naturality_assoc])) (by aesop_cat)

lemma isTriangulated_of_iso {F‚ÇÅ F‚ÇÇ : C ‚•§ D} (e : F‚ÇÅ ‚âÖ F‚ÇÇ) [F‚ÇÅ.CommShift ‚Ñ§] [F‚ÇÇ.CommShift ‚Ñ§]
    [NatTrans.CommShift e.hom ‚Ñ§] [F‚ÇÅ.IsTriangulated] : F‚ÇÇ.IsTriangulated where
  map_distinguished T hT :=
    isomorphic_distinguished _ (F‚ÇÅ.map_distinguished T hT) _ ((mapTriangleIso e).app T).symm

lemma isTriangulated_iff_of_iso {F‚ÇÅ F‚ÇÇ : C ‚•§ D} (e : F‚ÇÅ ‚âÖ F‚ÇÇ) [F‚ÇÅ.CommShift ‚Ñ§] [F‚ÇÇ.CommShift ‚Ñ§]
    [NatTrans.CommShift e.hom ‚Ñ§] : F‚ÇÅ.IsTriangulated ‚Üî F‚ÇÇ.IsTriangulated := by
  constructor
  ¬∑ intro
    exact isTriangulated_of_iso e
  ¬∑ intro
    have : NatTrans.CommShift e.symm.hom ‚Ñ§ := by
      dsimp
      infer_instance
    exact isTriangulated_of_iso e.symm

instance (F : C ‚•§ D) (G : D ‚•§ E) [F.CommShift ‚Ñ§] [G.CommShift ‚Ñ§] [F.IsTriangulated]
    [G.IsTriangulated] : (F ‚ãô G).IsTriangulated where
  map_distinguished T hT :=
    isomorphic_distinguished _ (G.map_distinguished _ (F.map_distinguished T hT)) _
      ((mapTriangleCompIso F G).app T)

lemma isTriangulated_iff_comp_right {F : C ‚•§ D} {G : D ‚•§ E} {H : C ‚•§ E} (e : F ‚ãô G ‚âÖ H)
    [F.CommShift ‚Ñ§] [G.CommShift ‚Ñ§] [H.CommShift ‚Ñ§] [NatTrans.CommShift e.hom ‚Ñ§]
    [G.IsTriangulated] [Full G] [Faithful G] :
    F.IsTriangulated ‚Üî H.IsTriangulated := by
  rw [‚Üê isTriangulated_iff_of_iso e]
  constructor
  ¬∑ intro
    infer_instance
  ¬∑ intro
    constructor
    intro T hT
    rw [‚Üê G.map_distinguished_iff]
    exact isomorphic_distinguished _ ((F ‚ãô G).map_distinguished T hT) _
      ((mapTriangleCompIso F G).symm.app T)

end Functor

section

variable {C D : Type _} [Category C] [Category D]
  [HasShift C ‚Ñ§] [HasShift D ‚Ñ§] [HasZeroObject C] [HasZeroObject D]
  [Preadditive C] [Preadditive D]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [‚àÄ (n : ‚Ñ§), (shiftFunctor D n).Additive]
  [Pretriangulated C] [Pretriangulated D]
  (F : C ‚•§ D) [F.CommShift ‚Ñ§]

lemma IsTriangulated.of_fully_faithful_triangulated_functor
    [F.IsTriangulated] [Full F] [Faithful F] [IsTriangulated D] :
    IsTriangulated C where
  octahedron_axiom {X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ u‚ÇÅ‚ÇÉ} comm
    {v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ} h‚ÇÅ‚ÇÇ {v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ} h‚ÇÇ‚ÇÉ {v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ} h‚ÇÅ‚ÇÉ := by
    have comm' : F.map u‚ÇÅ‚ÇÇ ‚â´ F.map u‚ÇÇ‚ÇÉ = F.map u‚ÇÅ‚ÇÉ := by rw [‚Üê comm, F.map_comp]
    have H := Triangulated.someOctahedron comm' (F.map_distinguished _ h‚ÇÅ‚ÇÇ)
      (F.map_distinguished _ h‚ÇÇ‚ÇÉ) (F.map_distinguished _ h‚ÇÅ‚ÇÉ)
    exact
      ‚ü®{
        m‚ÇÅ := F.preimage H.m‚ÇÅ
        m‚ÇÉ := F.preimage H.m‚ÇÉ
        comm‚ÇÅ := F.map_injective (by simpa using H.comm‚ÇÅ)
        comm‚ÇÇ := F.map_injective (by
          rw [‚Üê cancel_mono ((F.commShiftIso (1 : ‚Ñ§)).hom.app X‚ÇÅ)]
          simpa using H.comm‚ÇÇ)
        comm‚ÇÉ := F.map_injective (by simpa using H.comm‚ÇÉ)
        comm‚ÇÑ := F.map_injective (by
          rw [‚Üê cancel_mono ((F.commShiftIso (1 : ‚Ñ§)).hom.app X‚ÇÇ)]
          simpa using H.comm‚ÇÑ)
        mem := by
          rw [‚Üê F.map_distinguished_iff]
          simpa using H.mem }‚ü©

end

end CategoryTheory
