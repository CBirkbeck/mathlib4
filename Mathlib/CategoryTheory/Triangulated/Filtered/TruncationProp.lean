import Mathlib.CategoryTheory.Triangulated.Filtered.TruncationDef

namespace CategoryTheory

open Category Limits Pretriangulated ZeroObject Preadditive

namespace Triangulated

variable {C : Type _} [Category C] [HasZeroObject C]  [Preadditive C] [HasShift C (‚Ñ§ √ó ‚Ñ§)]
  [‚àÄ p : ‚Ñ§ √ó ‚Ñ§, Functor.Additive (CategoryTheory.shiftFunctor C p)]
  [hC : Pretriangulated C] [hP : FilteredTriangulated C]

namespace FilteredTriangulated

/-
namespace TruncLTt

noncomputable def obj : ‚Ñ§t ‚Üí C ‚•§ C
  | some none => 0
  | some (some a) => t.truncLT a
  | none => ùü≠ C

noncomputable def map : ‚àÄ {x y : ‚Ñ§t}, (x ‚ü∂ y) ‚Üí (obj t x ‚ü∂ obj t y)
  | some none, some none => fun _ => ùüô _
  | some none, some (some b) => fun _ => 0
  | some none, none => fun _ => 0
  | some (some a), some none  => fun _ => 0
  | some (some a), some (some b) =>
      fun hab => t.natTransTruncLTOfLE a b (by simpa using (leOfHom hab))
  | some (some a), none => fun _ => t.truncLTŒπ a
  | none, some none  => fun _ => 0
  | none, some (some b) => fun _ => 0
  | none, none => fun _ => ùüô _

end TruncLTt

noncomputable def truncLTt : ‚Ñ§t ‚•§ C ‚•§ C where
  obj := TruncLTt.obj t
  map œÜ := TruncLTt.map t œÜ
  map_id := by
    rintro (_|_|_)
    ¬∑ rfl
    ¬∑ rfl
    ¬∑ dsimp [TruncLTt.map]
      rw [t.natTransTruncLTOfLE_refl]
      rfl
  map_comp {a b c} hab hbc := by
    replace hab := leOfHom hab
    replace hbc := leOfHom hbc
    obtain (_|_|_) := a <;> obtain (_|_|_) := b <;> obtain (_|_|_) := c
    all_goals simp (config := {failIfUnchanged := false}) at hbc hab <;>
      dsimp [TruncLTt.map] <;> simp

@[simp]
lemma truncLTt_obj_top : t.truncLTt.obj ‚ä§ = ùü≠ _ := rfl

@[simp]
lemma truncLTt_obj_bot : t.truncLTt.obj ‚ä• = 0 := rfl

@[simp]
lemma truncLTt_obj_mk (n : ‚Ñ§) : t.truncLTt.obj (‚Ñ§t.mk n) = t.truncLT n := rfl

@[simp]
lemma truncLTt_map_eq_truncLTŒπ (n : ‚Ñ§) :
    t.truncLTt.map (homOfLE (show ‚Ñ§t.mk n ‚â§ ‚ä§ by simp)) = t.truncLTŒπ n := rfl

namespace TruncGEt

noncomputable def obj : ‚Ñ§t ‚Üí C ‚•§ C
  | some none => ùü≠ C
  | some (some a) => t.truncGE a
  | none => 0

noncomputable def map : ‚àÄ {x y : ‚Ñ§t}, (x ‚ü∂ y) ‚Üí (obj t x ‚ü∂ obj t y)
  | some none, some none => fun _ => ùüô _
  | some none, some (some b) => fun _ => t.truncGEœÄ b
  | some none, none => fun _ => 0
  | some (some a), some none  => fun _ => 0
  | some (some a), some (some b) =>
      fun hab => t.natTransTruncGEOfLE a b (by simpa using (leOfHom hab))
  | some (some a), none => fun _ => 0
  | none, some none  => fun _ => 0
  | none, some (some b) => fun _ => 0
  | none, none => fun _ => ùüô _

end TruncGEt

noncomputable def truncGEt : ‚Ñ§t ‚•§ C ‚•§ C where
  obj := TruncGEt.obj t
  map œÜ := TruncGEt.map t œÜ
  map_id := by
    rintro (_|a|_)
    ¬∑ rfl
    ¬∑ rfl
    ¬∑ dsimp [TruncGEt.map]
      rw [natTransTruncGEOfLE_refl]
      rfl
  map_comp {a b c} hab hbc := by
    replace hab := leOfHom hab
    replace hbc := leOfHom hbc
    obtain (_|_|_) := a <;> obtain (_|_|_) := b <;> obtain (_|_|_) := c
    all_goals simp (config := {failIfUnchanged := false}) at hbc hab <;>
      dsimp [TruncGEt.map] <;> simp

@[simp]
lemma truncGEt_obj_bot :
    t.truncGEt.obj ‚ä• = ùü≠ _ := rfl

@[simp]
lemma truncGEt_obj_top :
    t.truncGEt.obj ‚ä§ = 0 := rfl

@[simp]
lemma truncGEt_obj_mk (n : ‚Ñ§) : t.truncGEt.obj (‚Ñ§t.mk n) = t.truncGE n := rfl

namespace TruncGEtŒ¥LTt

noncomputable def app : ‚àÄ (a : ‚Ñ§t), t.truncGEt.obj a ‚ü∂ t.truncLTt.obj a ‚ãô shiftFunctor C (1 : ‚Ñ§)
  | some none => 0
  | some (some a) => t.truncGEŒ¥LT a
  | none => 0

end TruncGEtŒ¥LTt

noncomputable def truncGEtŒ¥LTt :
    t.truncGEt ‚ü∂ t.truncLTt ‚ãô ((whiskeringRight C C C).obj (shiftFunctor C (1 : ‚Ñ§))) where
  app a := TruncGEtŒ¥LTt.app t a
  naturality {a b} hab := by
    replace hab := leOfHom hab
    obtain (_|_|a) := a
    ¬∑ apply IsZero.eq_of_src
      exact isZero_zero _
    all_goals obtain (_|_|b) := b <;> simp (config := {failIfUnchanged := false}) at hab <;>
      dsimp [TruncGEtŒ¥LTt.app, truncGEt, truncLTt, TruncGEt.map, TruncLTt.map] <;>
      simp [t.truncGEŒ¥LT_comp_whiskerRight_natTransTruncLTOfLE]

@[simp]
lemma truncGEtŒ¥LTt_mk (n : ‚Ñ§) :
    t.truncGEtŒ¥LTt.app (‚Ñ§t.mk n) = t.truncGEŒ¥LT n := rfl

@[simps]
noncomputable def abstractSpectralObject : SpectralObject.AbstractSpectralObject C ‚Ñ§t where
  truncLT := t.truncLTt
  truncGE := t.truncGEt
  truncLTObjTopIso' := Iso.refl _
  truncGEObjBotIso' := Iso.refl _
  truncGEŒ¥LT := t.truncGEtŒ¥LTt


namespace AbstractSpectralObject

open SpectralObject

@[simp]
lemma truncGELT_eq (g : Arrow ‚Ñ§t) :
  (abstractSpectralObject t).truncGELT.obj g =
    t.truncLTt.obj g.right ‚ãô t.truncGEt.obj g.left := rfl

noncomputable def isZero_truncGE_obj_top_obj (X : C) :
    IsZero ((t.abstractSpectralObject.truncGE.obj ‚ä§).obj X) :=
  IsZero.obj (isZero_zero _) _

noncomputable def isZero_truncLT_obj_bot_obj (X : C) :
    IsZero ((t.abstractSpectralObject.truncLT.obj ‚ä•).obj X) :=
  IsZero.obj (isZero_zero _) _

@[simp]
lemma truncLEŒπ_mk (n : ‚Ñ§) :
    t.abstractSpectralObject.truncLTŒπ (‚Ñ§t.mk n) = t.truncLTŒπ n :=
  comp_id _

@[simp]
lemma truncGEœÄ_mk (n : ‚Ñ§) :
    t.abstractSpectralObject.truncGEœÄ (‚Ñ§t.mk n) = t.truncGEœÄ n :=
  id_comp _

@[simp]
lemma truncGEŒ¥LT_mk (n : ‚Ñ§) :
    t.abstractSpectralObject.truncGEŒ¥LT.app (‚Ñ§t.mk n) =
      t.truncGEŒ¥LT n := rfl

noncomputable def triangleLTGEIso (n : ‚Ñ§) (X : C) :
    (t.abstractSpectralObject.triangleLTGE.obj (‚Ñ§t.mk n)).obj X ‚âÖ
      (t.triangleLTGE n).obj X := by
  refine' Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _) _ _ _
  all_goals aesop_cat

@[simp]
lemma truncLTObjTopIso : t.abstractSpectralObject.truncLTObjTopIso = Iso.refl _ := rfl

@[simp]
lemma truncGEObjBotIso : t.abstractSpectralObject.truncGEObjBotIso = Iso.refl _ := rfl

@[simp]
lemma truncLTŒπ_top_app (X : C) :
    (t.abstractSpectralObject.truncLTŒπ ‚ä§).app X = ùüô X := by
  dsimp [AbstractSpectralObject.truncLTŒπ]
  erw [Functor.map_id]
  simp only [truncLTt_obj_top, NatTrans.id_app, Functor.id_obj, comp_id]

@[simp]
lemma truncGEœÄ_bot_app (X : C) :
    (t.abstractSpectralObject.truncGEœÄ ‚ä•).app X = ùüô X := by
  dsimp [AbstractSpectralObject.truncGEœÄ]
  erw [Functor.map_id]
  simp only [truncGEt_obj_bot, NatTrans.id_app, Functor.id_obj, comp_id]

noncomputable def triangleLTGETopIso (X : C) :
  (t.abstractSpectralObject.triangleLTGE.obj ‚ä§).obj X ‚âÖ
    Pretriangulated.contractibleTriangle X := by
  refine' Triangle.isoMk _ _ (((abstractSpectralObject t).truncLTObjTopIso).app X)
    (Iso.refl _) (isZero_truncLT_obj_bot_obj t X).isoZero _ _ _
  ¬∑ dsimp
    rw [truncLTŒπ_top_app]
  ¬∑ exact IsZero.eq_of_tgt (isZero_zero _) _ _
  ¬∑ refine' IsZero.eq_of_src _ _ _
    exact IsZero.obj (isZero_zero _) _

noncomputable def triangleLTGEBotIso (X : C) :
  (t.abstractSpectralObject.triangleLTGE.obj ‚ä•).obj X ‚âÖ
    (Pretriangulated.contractibleTriangle X).invRotate := by
  refine' Triangle.isoMk _ _ ((isZero_truncLT_obj_bot_obj t X).isoZero ‚â™‚â´
    (shiftFunctor C (-1 : ‚Ñ§)).mapZeroObject.symm)
    (((abstractSpectralObject t).truncLTObjTopIso).app X) (Iso.refl _) _ _ _
  ¬∑ apply IsZero.eq_of_src
    apply isZero_truncLT_obj_bot_obj
  ¬∑ dsimp
    rw [truncGEœÄ_bot_app]
  ¬∑ apply IsZero.eq_of_tgt _
    dsimp
    rw [IsZero.iff_id_eq_zero, ‚Üê Functor.map_id, ‚Üê Functor.map_id, id_zero,
      Functor.map_zero, Functor.map_zero]

lemma distinguished (n : ‚Ñ§t) (X : C) :
  (t.abstractSpectralObject.triangleLTGE.obj n).obj X ‚àà distTriang C := by
  obtain (_|_|n) := n
  ¬∑ exact isomorphic_distinguished _ (contractible_distinguished X) _
      (triangleLTGETopIso t X)
  ¬∑ exact isomorphic_distinguished _
      (inv_rot_of_distTriang _ (contractible_distinguished X)) _
      (triangleLTGEBotIso t X)
  ¬∑ exact isomorphic_distinguished _ (t.triangleLTGE_distinguished n X) _
      (triangleLTGEIso t n X)

end AbstractSpectralObject
-/

lemma isZero_truncLE_obj_zero (n : ‚Ñ§) : IsZero ((hP.truncLE n).obj 0) := by
  let Œ¥ := (hP.truncLEŒ¥GE n (n+1) rfl).app 0
  have : IsIso Œ¥ := by
    have h := (hP.triangleGELE_distinguished n (n+1) rfl 0)
    exact (Triangle.isZero‚ÇÇ_iff_isIso‚ÇÉ _ h).1
      ((Triangle.isZero‚ÇÇ_iff _ (hP.triangleGELE_distinguished n (n+1) rfl 0)).2
        ‚ü®(isZero_zero C).eq_of_tgt _ _, (isZero_zero C).eq_of_src _ _‚ü©)
  have : IsGE ((truncGE (n + 1) ‚ãô shiftFunctor C (1 : ‚Ñ§)).obj 0) (n + 1) := by
    simp only [Functor.comp_obj]
    exact shift_isGE_of_isGE _ _ _
  have hŒ¥ := hP.zero_of_isGE_of_isLE Œ¥ n (n+1) (by linarith)
    (hP.isGE_of_iso (asIso Œ¥).symm _) (hP.isLE_of_iso (asIso Œ¥) _)
  rw [IsZero.iff_id_eq_zero]
  rw [‚Üê cancel_mono Œ¥, zero_comp, hŒ¥, comp_zero]

lemma isZero_truncGE_obj_zero (n : ‚Ñ§) : IsZero ((hP.truncGE n).obj 0) := by
  apply (Triangle.isZero‚ÇÅ_iff_isIso‚ÇÇ _ (hP.triangleGELE_distinguished (n-1) n (by linarith) 0)).2
  simp only [Int.reduceNeg, Int.rawCast, Int.cast_id, Nat.rawCast, Int.Nat.cast_ofNat_Int,
    Int.reduceAdd, Int.ofNat_eq_coe, Nat.cast_id, eq_mp_eq_cast, triangleGELE_obj_obj‚ÇÇ,
    triangleGELE_obj_obj‚ÇÉ, triangleGELE_obj_mor‚ÇÇ]
  refine ‚ü®0, by simp only [comp_zero, id_zero], ?_‚ü©
  rw [(Limits.IsZero.iff_id_eq_zero _).mp (hP.isZero_truncLE_obj_zero (n-1)), zero_comp]

instance (n : ‚Ñ§) : hP.IsLE (0 : C) n := hP.isLE_of_iso (hP.isZero_truncLE_obj_zero n).isoZero n
instance (n : ‚Ñ§) : hP.IsGE (0 : C) n := hP.isGE_of_iso (hP.isZero_truncGE_obj_zero n).isoZero n

lemma isLE_of_isZero (X : C) (hX : IsZero X) (n : ‚Ñ§) : hP.IsLE X n :=
  hP.isLE_of_iso hX.isoZero.symm n

lemma isGE_of_isZero (X : C) (hX : IsZero X) (n : ‚Ñ§) : hP.IsGE X n :=
  hP.isGE_of_iso hX.isoZero.symm n

lemma isLE_iff_isIso_truncLEœÄ_app (n : ‚Ñ§) (X : C) :
    hP.IsLE X n ‚Üî IsIso ((hP.truncLEœÄ n).app X) := by
  constructor
  ¬∑ intro
    obtain ‚ü®e, he‚ü© := hP.triangle_iso_exists n (n+1) (by linarith) _ _
      (contractible_distinguished‚ÇÅ X) (hP.triangleGTLE_distinguished n X)
      (Iso.refl X) (by dsimp ; infer_instance)
      (by dsimp ; infer_instance) (by dsimp ; infer_instance) (by dsimp ; infer_instance)
    dsimp at he
    have : (truncLEœÄ n).app X = e.hom.hom‚ÇÉ := by
      simpa [he] using e.hom.comm‚ÇÇ.symm
    rw [this]
    infer_instance
  ¬∑ intro
    exact hP.isLE_of_iso (asIso ((truncLEœÄ n).app X)).symm n

lemma isLE_iff_isIso_truncLTœÄ_app (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    hP.IsLE X n‚ÇÄ ‚Üî IsIso (((hP.truncLTœÄ n‚ÇÅ)).app X) := by
  rw [isLE_iff_isIso_truncLEœÄ_app]
  subst hn‚ÇÅ
  rfl

lemma isGE_iff_isIso_truncGEŒπ_app (n : ‚Ñ§) (X : C) :
    hP.IsGE X n ‚Üî IsIso ((hP.truncGEŒπ n).app X) := by
  constructor
  ¬∑ intro h
    obtain ‚ü®e, he‚ü© := hP.triangle_iso_exists (n-1) n (by linarith) _ _
      (contractible_distinguished X)
      (hP.triangleGELT_distinguished n X) (Iso.refl X) h
      (by dsimp ; infer_instance) (by dsimp ; infer_instance) (by dsimp ; infer_instance)
    dsimp at he
    have : (truncGEŒπ n).app X = e.inv.hom‚ÇÅ := by
      have eq := e.inv.comm‚ÇÅ
      dsimp at eq
      apply_fun (fun x ‚Ü¶ x ‚â´ e.hom.hom‚ÇÇ) at eq
      simp only [triangleGELT_obj_obj‚ÇÇ, contractibleTriangle_obj‚ÇÇ, assoc,
        Iso.inv_hom_id_triangle_hom‚ÇÇ, comp_id] at eq
      rw [eq, he, comp_id]
    rw [this]
    infer_instance
  ¬∑ intro
    exact hP.isGE_of_iso (asIso ((truncGEŒπ n).app X)) n

instance (X : C) (n : ‚Ñ§) [hP.IsLE X n] : IsIso ((hP.truncLEœÄ n).app X) := by
  rw [‚Üê isLE_iff_isIso_truncLEœÄ_app ]
  infer_instance

instance (X : C) (n : ‚Ñ§) [hP.IsGE X n] : IsIso ((hP.truncGEŒπ n).app X) := by
  rw [‚Üê isGE_iff_isIso_truncGEŒπ_app ]
  infer_instance

lemma isLE_iff_isZero_truncGT_obj (n : ‚Ñ§) (X : C) :
    hP.IsLE X n ‚Üî IsZero ((hP.truncGT n).obj X) := by
  rw [hP.isLE_iff_isIso_truncLEœÄ_app n X]
  exact (Triangle.isZero‚ÇÅ_iff_isIso‚ÇÇ _ (hP.triangleGTLE_distinguished n X)).symm

lemma isGE_iff_isZero_truncLT_obj (n : ‚Ñ§) (X : C) :
    hP.IsGE X n ‚Üî IsZero ((hP.truncLT n).obj X) := by
  rw [hP.isGE_iff_isIso_truncGEŒπ_app n X]
  exact (Triangle.isZero‚ÇÉ_iff_isIso‚ÇÅ _ (hP.triangleGELT_distinguished n X)).symm

lemma isLE_iff_isZero_truncGE_obj (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    hP.IsLE X n‚ÇÄ ‚Üî IsZero ((hP.truncGE n‚ÇÅ).obj X) := by
  rw [hP.isLE_iff_isIso_truncLEœÄ_app n‚ÇÄ X]
  exact (Triangle.isZero‚ÇÅ_iff_isIso‚ÇÇ _ (hP.triangleGELE_distinguished n‚ÇÄ n‚ÇÅ h X)).symm

lemma isGE_iff_isZero_truncLE_obj (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    hP.IsGE X n‚ÇÅ ‚Üî IsZero ((hP.truncLE n‚ÇÄ).obj X) := by
  rw [hP.isGE_iff_isIso_truncGEŒπ_app n‚ÇÅ X]
  exact (Triangle.isZero‚ÇÉ_iff_isIso‚ÇÅ _ (hP.triangleGELE_distinguished n‚ÇÄ n‚ÇÅ h X)).symm

lemma isZero_truncGE_obj_of_isLE (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) [hP.IsLE X n‚ÇÄ] :
    IsZero ((hP.truncGE n‚ÇÅ).obj X) := by
  rw [‚Üê hP.isLE_iff_isZero_truncGE_obj _ _ h X]
  infer_instance

lemma isZero_truncLE_obj_of_isGE (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) [hP.IsGE X n‚ÇÅ] :
    IsZero ((hP.truncLE n‚ÇÄ).obj X) := by
  rw [‚Üê hP.isGE_iff_isZero_truncLE_obj _ _ h X]
  infer_instance

lemma isLE_iff_orthogonal (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    hP.IsLE X n‚ÇÄ ‚Üî ‚àÄ (Y : C) (f : Y ‚ü∂ X) (_ : hP.IsGE Y n‚ÇÅ), f = 0 := by
  constructor
  ¬∑ intro _ Y f _
    exact hP.zero f n‚ÇÄ n‚ÇÅ (by linarith)
  ¬∑ intro hX
    rw [isLE_iff_isZero_truncGE_obj n‚ÇÄ n‚ÇÅ h, IsZero.iff_id_eq_zero]
    apply to_truncGE_obj_ext n‚ÇÅ
    rw [zero_comp, id_comp]
    exact hX _ _ inferInstance

lemma isGE_iff_orthogonal (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    hP.IsGE X n‚ÇÅ ‚Üî ‚àÄ (Y : C) (f : X ‚ü∂ Y) (_ : hP.IsLE Y n‚ÇÄ), f = 0 := by
  constructor
  ¬∑ intro _ Y f _
    exact zero f n‚ÇÄ n‚ÇÅ (by linarith)
  ¬∑ intro hX
    rw [isGE_iff_isZero_truncLE_obj n‚ÇÄ n‚ÇÅ h, IsZero.iff_id_eq_zero]
    apply from_truncLE_obj_ext n‚ÇÄ
    rw [comp_zero, comp_id]
    exact hX _ _ inferInstance

noncomputable def natTransTruncLEOfGE (a b : ‚Ñ§) (h : b ‚â§ a) :
    hP.truncLE a ‚ü∂ hP.truncLE b :=
  natTransTruncLTOfGE (a+1) (b+1) (by linarith)

@[reassoc (attr := simp)]
lemma œÄ_natTransTruncLEOfGE_app (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÅ ‚â§ n‚ÇÄ) (X : C) :
    (truncLEœÄ n‚ÇÄ).app X ‚â´ (hP.natTransTruncLEOfGE n‚ÇÄ n‚ÇÅ h).app X =
      (truncLEœÄ n‚ÇÅ).app X :=
  natTransTruncLTOfGE_œÄ_app _ _ _ _

@[reassoc (attr := simp)]
lemma œÄ_natTransTruncLEOfGE (a b : ‚Ñ§) (h : b ‚â§ a) :
    truncLEœÄ a ‚â´ hP.natTransTruncLEOfGE a b h = truncLEœÄ b := by aesop_cat

@[simp]
lemma natTransTruncLEOfGE_refl (a : ‚Ñ§) :
    hP.natTransTruncLEOfGE a a (by rfl) = ùüô _ :=
  natTransTruncLTOfGE_refl _

@[simp]
lemma natTransTruncLEOfGE_trans (a b c : ‚Ñ§) (hab : b ‚â§ a) (hbc : c ‚â§ b) :
    hP.natTransTruncLEOfGE a b hab ‚â´ hP.natTransTruncLEOfGE b c hbc =
      hP.natTransTruncLEOfGE a c (hbc.trans hab) :=
  natTransTruncLTOfGE_trans _ _ _ _ _

@[simp]
lemma natTransTruncLEOfGE_refl_app (a : ‚Ñ§) (X : C) :
    (natTransTruncLEOfGE a a (by rfl)).app X = ùüô _ :=
  congr_app (natTransTruncLEOfGE_refl a) X

@[reassoc (attr := simp)]
lemma natTransTruncLEOfGE_trans_app (a b c : ‚Ñ§) (hab : b ‚â§ a) (hbc : c ‚â§ b) (X : C) :
    (natTransTruncLEOfGE a b hab).app X ‚â´ (natTransTruncLEOfGE b c hbc).app X =
      (natTransTruncLEOfGE a c (hbc.trans hab)).app X :=
  congr_app (natTransTruncLEOfGE_trans a b c hab hbc) X

lemma isIso_truncLTmap_iff {X Y : C} (g : X ‚ü∂ Y) (n : ‚Ñ§) :
    IsIso ((truncLT n).map g) ‚Üî
      ‚àÉ (Z : C) (f : Z ‚ü∂ X) (h : ((truncLT n).obj Y) ‚ü∂ Z‚ü¶(1 : ‚Ñ§)‚üß)
        (_ : Triangle.mk f (g ‚â´ (truncLTœÄ n).app Y) h ‚àà distTriang _), IsGE Z n := by
  constructor
  ¬∑ intro hg
    refine ‚ü®(truncGE n).obj X, (truncGEŒπ n).app X,
      inv ((truncLT n).map g) ‚â´ (truncLTŒ¥GE n).app X,
      isomorphic_distinguished _ (triangleGELT_distinguished n X) _ ?_, inferInstance‚ü©
    refine Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (asIso ((truncLT n).map g)).symm (by simp)
      ?_ (by simp)
    simp only [Triangle.mk_obj‚ÇÇ, triangleGELT_obj_obj‚ÇÉ, Triangle.mk_obj‚ÇÉ, Triangle.mk_mor‚ÇÇ,
      Iso.symm_hom, asIso_inv, assoc, triangleGELT_obj_obj‚ÇÇ, Iso.refl_hom, triangleGELT_obj_mor‚ÇÇ,
      id_comp]
    rw [‚Üê cancel_mono ((truncLT n).map g)]
    simp only [assoc, IsIso.inv_hom_id, comp_id]
    have := (truncLTœÄ n).naturality g
    simp only [Functor.id_obj, Functor.id_map] at this
    exact this
  ¬∑ rintro ‚ü®Z, f, h, mem, _‚ü©
    obtain ‚ü®e, he‚ü© := triangle_iso_exists (n-1) n (by linarith)  _ _ mem
      (triangleGELT_distinguished n X) (Iso.refl _)
      (by dsimp ; infer_instance) (by dsimp ; infer_instance)
      (by dsimp ; infer_instance) (by dsimp ; infer_instance)
    suffices ((truncLT n).map g) = e.inv.hom‚ÇÉ by
      rw [this]
      infer_instance
    apply from_truncLT_obj_ext
    refine Eq.trans ?_ e.inv.comm‚ÇÇ.symm
    rw [‚Üê cancel_epi e.hom.hom‚ÇÇ]
    simp only [Triangle.mk_obj‚ÇÇ, triangleGELT_obj_obj‚ÇÇ, Functor.id_obj, Triangle.mk_obj‚ÇÉ,
      Triangle.mk_mor‚ÇÇ, Iso.hom_inv_id_triangle_hom‚ÇÇ_assoc]
    have := (truncLTœÄ n).naturality g
    simp only [Functor.id_obj, Functor.id_map] at this
    rw [‚Üê this, he, Iso.refl_hom]; erw [id_comp]

lemma isIso_truncLEmap_iff {X Y : C} (g : X ‚ü∂ Y) (a b : ‚Ñ§) (h : a + 1 = b) :
    IsIso ((truncLE a).map g) ‚Üî
      ‚àÉ (Z : C) (f : Z ‚ü∂ X) (h : ((truncLE a).obj Y) ‚ü∂ Z‚ü¶1‚üß)
        (_ : Triangle.mk f (g ‚â´ (truncLEœÄ a).app Y) h ‚àà distTriang _), IsGE Z b := by
  subst h
  apply isIso_truncLTmap_iff

lemma isIso_truncGEmap_iff {Y Z : C} (f : Y ‚ü∂ Z) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) :
    IsIso ((truncGE n‚ÇÅ).map f) ‚Üî
      ‚àÉ (X : C) (g : Z ‚ü∂ X) (h : X ‚ü∂ ((truncGE n‚ÇÅ).obj Y)‚ü¶(1 : ‚Ñ§)‚üß)
        (_ : Triangle.mk ((truncGEŒπ n‚ÇÅ).app Y ‚â´ f) g h ‚àà distTriang _), IsLE X n‚ÇÄ := by
  constructor
  ¬∑ intro hf
    refine ‚ü®(truncLE n‚ÇÄ).obj Z, (truncLEœÄ n‚ÇÄ).app Z,
      (truncLEŒ¥GE n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app Z ‚â´ inv ((truncGE n‚ÇÅ).map f)‚ü¶1‚üß',
      isomorphic_distinguished _ (triangleGELE_distinguished n‚ÇÄ n‚ÇÅ hn‚ÇÅ Z) _ ?_,
      inferInstance‚ü©
    exact Triangle.isoMk _ _ (asIso ((truncGE n‚ÇÅ).map f)) (Iso.refl _) (Iso.refl _) (by aesop_cat)
      (by aesop_cat) (by aesop_cat)
  ¬∑ rintro ‚ü®X, g, h, mem, _‚ü©
    obtain ‚ü®e, he‚ü© := triangle_iso_exists n‚ÇÄ n‚ÇÅ (by linarith) _ _ mem
      (triangleGELE_distinguished n‚ÇÄ n‚ÇÅ hn‚ÇÅ Z) (Iso.refl _)
      (by dsimp ; infer_instance) (by dsimp ; infer_instance)
      (by dsimp ; infer_instance) (by dsimp ; infer_instance)
    suffices ((truncGE n‚ÇÅ).map f) = e.hom.hom‚ÇÅ by
      rw [this]
      infer_instance
    apply to_truncGE_obj_ext
    refine Eq.trans ?_ e.hom.comm‚ÇÅ
    dsimp at he ‚ä¢
    rw [he, comp_id]
    exact (truncGEŒπ n‚ÇÅ).naturality f

lemma isIso_truncGTmap_iff {Y Z : C} (f : Y ‚ü∂ Z) (n : ‚Ñ§) :
    IsIso ((truncGT n).map f) ‚Üî
      ‚àÉ (X : C) (g : Z ‚ü∂ X) (h : X ‚ü∂ ((truncGT n).obj Y)‚ü¶(1 : ‚Ñ§)‚üß)
        (_ : Triangle.mk ((truncGTŒπ n).app Y ‚â´ f) g h ‚àà distTriang _), IsLE X n :=
  isIso_truncGEmap_iff f n (n+1) rfl

instance (X : C) (a b : ‚Ñ§) [IsLE X b] : IsLE ((truncLE a).obj X) b := by
  by_cases h : a ‚â§ b
  ¬∑ exact isLE_of_LE _ _ _ h
  ¬∑ simp only [not_le] at h
    have : IsLE X a := isLE_of_LE X b a (by linarith)
    apply isLE_of_iso (show X ‚âÖ _ from (asIso ((truncLEœÄ a).app X)))

instance (X : C) (a b : ‚Ñ§) [IsLE X b] : IsLE ((truncLT a).obj X) b :=
  isLE_of_iso ((truncLEIsoTruncLT (a-1) a (by linarith)).app X) b

instance (X : C) (a b : ‚Ñ§) [IsGE X a] : IsGE ((truncGE b).obj X) a := by
  by_cases h : a ‚â§ b
  ¬∑ exact isGE_of_GE _ _ _ h
  ¬∑ simp only [not_le] at h
    have : IsGE X b := isGE_of_GE X b a (by linarith)
    apply isGE_of_iso (show X ‚âÖ _ from (asIso ((truncGEŒπ b).app X)).symm)

instance (X : C) (a b : ‚Ñ§) [IsGE X a] : IsGE ((truncGT b).obj X) a :=
  isGE_of_iso ((truncGTIsoTruncGE b (b+1) (by linarith)).symm.app X) a

noncomputable def truncGELT (a b : ‚Ñ§) : C ‚•§ C := truncLT b ‚ãô truncGE a

noncomputable def truncLTGE (a b : ‚Ñ§) : C ‚•§ C := truncGE a ‚ãô truncLT b

noncomputable def truncLEGE (a b : ‚Ñ§) : C ‚•§ C := truncGE a ‚ãô truncLE b

noncomputable def truncGELE (a b : ‚Ñ§) : C ‚•§ C := truncLE b ‚ãô truncGE a

noncomputable def truncGELEIsoTruncGELT (a b b' : ‚Ñ§) (hb' : b + 1 = b') :
    truncGELE a b (C := C) ‚âÖ truncGELT a b' :=
  isoWhiskerRight (truncLEIsoTruncLT b b' hb') _

/- Now, we need the octahedron axiom -/

variable [IsTriangulated C]

lemma isIso‚ÇÅ_truncGE_map_of_LE (T : Triangle C) (hT : T ‚àà distTriang C)
    (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (h‚ÇÉ : IsLE T.obj‚ÇÉ n‚ÇÄ) :
    IsIso ((truncGE n‚ÇÅ).map T.mor‚ÇÅ) := by
  change IsIso ((truncGE n‚ÇÅ).mapTriangle.obj T).mor‚ÇÅ
  rw [‚Üê Triangle.isZero‚ÇÉ_iff_isIso‚ÇÅ _ ((truncGE n‚ÇÅ).map_distinguished _ hT)]
  simp only [Functor.mapTriangle_obj, Triangle.mk_obj‚ÇÉ]
  rw [‚Üê isLE_iff_isZero_truncGE_obj (h := h)]
  assumption

lemma isIso‚ÇÅ_truncGT_map_of_LE (T : Triangle C) (hT : T ‚àà distTriang C)
    (n : ‚Ñ§) (h‚ÇÉ : IsLE T.obj‚ÇÉ n) : IsIso ((truncGT n).map T.mor‚ÇÅ) := by
  rw [‚Üê NatIso.isIso_map_iff (truncGTIsoTruncGE n (n + 1) (by linarith)).symm]
  exact isIso‚ÇÅ_truncGE_map_of_LE T hT n (n + 1) (by linarith) h‚ÇÉ

lemma isIso‚ÇÇ_truncLE_map_of_GE (T : Triangle C) (hT : T ‚àà distTriang C)
    (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (h‚ÇÅ : IsGE T.obj‚ÇÅ n‚ÇÅ) :
    IsIso ((truncLE n‚ÇÄ).map T.mor‚ÇÇ) := by
  change IsIso ((truncLE n‚ÇÄ).mapTriangle.obj T).mor‚ÇÇ
  rw [‚Üê Triangle.isZero‚ÇÅ_iff_isIso‚ÇÇ _ ((truncLE n‚ÇÄ).map_distinguished _ hT)]
  simp only [Functor.mapTriangle_obj, Triangle.mk_obj‚ÇÅ]
  rw [‚Üê isGE_iff_isZero_truncLE_obj (h := h)]
  assumption

lemma isIso‚ÇÇ_truncLT_map_of_GE (T : Triangle C) (hT : T ‚àà distTriang C)
    (n : ‚Ñ§) (h‚ÇÅ : IsGE T.obj‚ÇÅ n) :
    IsIso ((truncLT n).map T.mor‚ÇÇ) := by
  rw [‚Üê NatIso.isIso_map_iff (truncLEIsoTruncLT (n-1) n (by linarith))]
  exact isIso‚ÇÇ_truncLE_map_of_GE T hT (n-1) n (by linarith) h‚ÇÅ

instance (X : C) (a b : ‚Ñ§) [IsGE X a] : IsGE ((truncLE b).obj X) a := by
  rw [isGE_iff_isZero_truncLE_obj (a-1) a (by linarith)]
  have := isIso‚ÇÇ_truncLE_map_of_GE _ ((triangleGELE_distinguished b (b+1) rfl X))
    (a-1) a (by linarith) (by dsimp ; infer_instance)
  dsimp at this
  exact IsZero.of_iso (isZero_truncLE_obj_of_isGE (a-1) a (by linarith) X)
    (asIso ((truncLE (a - 1)).map ((truncLEœÄ b).app X))).symm

instance (X : C) (a b : ‚Ñ§) [IsGE X a] : IsGE ((truncLT b).obj X) a :=
  isGE_of_iso ((truncLEIsoTruncLT (b-1) b (by linarith)).app X) a

instance (X : C) (a b : ‚Ñ§) [IsLE X b] : IsLE ((truncGE a).obj X) b := by
  rw [isLE_iff_isZero_truncGE_obj b (b+1) rfl]
  have := isIso‚ÇÅ_truncGE_map_of_LE _ ((triangleGELE_distinguished (a-1) a (by linarith) X))
    b (b+1) rfl (by dsimp ; infer_instance)
  dsimp at this
  exact IsZero.of_iso (isZero_truncGE_obj_of_isLE b (b+1) rfl X)
    (asIso ((truncGE (b+1)).map ((truncGEŒπ  a).app X)))

instance (X : C) (a b : ‚Ñ§) : IsGE ((truncGELE a b).obj X) a := by
  dsimp [truncGELE]
  infer_instance

instance (X : C) (a b : ‚Ñ§) : IsLE ((truncGELE a b).obj X) b := by
  dsimp [truncGELE]
  infer_instance

instance (X : C) (a b : ‚Ñ§) : IsGE ((truncGELT a b).obj X) a := by
  dsimp [truncGELT]
  infer_instance

instance (X : C) (a b : ‚Ñ§) : IsLE ((truncGELT a b).obj X) (b-1) := by
  dsimp [truncGELT]
  infer_instance

instance (X : C) (a b : ‚Ñ§) : IsGE ((truncLTGE a b).obj X) a := by
  dsimp [truncLTGE]
  infer_instance

instance (X : C) (a b : ‚Ñ§) : IsLE ((truncLTGE a b).obj X) (b-1) := by
  dsimp [truncLTGE]
  infer_instance

instance (a b : ‚Ñ§) : (hP.truncGELT a b).Additive := by
  dsimp only [truncGELT]
  infer_instance

instance (a b : ‚Ñ§) : (hP.truncGELE a b).Additive := by
  dsimp only [truncGELE]
  infer_instance

/-
instance (i : ‚Ñ§t) : (t.truncGEt.obj i).Additive := by
  obtain (rfl|‚ü®i, rfl‚ü©|rfl) := i.three_cases
  ¬∑ dsimp
    infer_instance
  ¬∑ dsimp
    infer_instance
  ¬∑ constructor
    aesop_cat

instance (i : ‚Ñ§t) : (t.truncLTt.obj i).Additive := by
  obtain (rfl|‚ü®i, rfl‚ü©|rfl) := i.three_cases
  ¬∑ constructor
    dsimp
    aesop_cat
  ¬∑ dsimp
    infer_instance
  ¬∑ dsimp
    infer_instance

lemma isZero_truncLTt_obj_obj (X : C) (n : ‚Ñ§) [t.IsGE X n] (j : ‚Ñ§t) (hj : j ‚â§ ‚Ñ§t.mk n) :
    IsZero ((t.truncLTt.obj j).obj X) := by
  obtain (rfl|‚ü®j, rfl‚ü©|rfl) := j.three_cases
  ¬∑ apply Functor.zero_obj
  ¬∑ simp at hj
    dsimp
    rw [‚Üê t.isGE_iff_isZero_truncLT_obj]
    exact t.isGE_of_GE  _ _ _ hj
  ¬∑ simp at hj

lemma isZero_truncGEt_obj_obj (X : C) (n : ‚Ñ§) [t.IsLE X n] (j : ‚Ñ§t) (hj : ‚Ñ§t.mk n < j) :
    IsZero ((t.truncGEt.obj j).obj X) := by
  obtain (rfl|‚ü®j, rfl‚ü©|rfl) := j.three_cases
  ¬∑ simp at hj
  ¬∑ simp at hj
    dsimp
    rw [‚Üê t.isLE_iff_isZero_truncGE_obj (j - 1) j (by simp)]
    exact t.isLE_of_LE X n (j - 1) (by linarith)
  ¬∑ apply Functor.zero_obj

lemma truncGEt_obj_obj_isGE (n : ‚Ñ§) (i : ‚Ñ§t) (h : ‚Ñ§t.mk n ‚â§ i) (X : C) :
    t.IsGE ((t.truncGEt.obj i).obj X) n := by
  obtain (rfl|‚ü®i, rfl‚ü©|rfl) := i.three_cases
  ¬∑ simp at h
  ¬∑ simp at h
    dsimp
    exact t.isGE_of_GE  _ _ _ h
  ¬∑ dsimp
    apply t.isGE_of_isZero
    apply Functor.zero_obj

lemma truncLTt_obj_obj_isLE (n : ‚Ñ§) (i : ‚Ñ§t) (h : i ‚â§ ‚Ñ§t.mk (n + 1)) (X : C) :
    t.IsLE (((t.truncLTt.obj i)).obj X) n := by
  obtain (rfl|‚ü®i, rfl‚ü©|rfl) := i.three_cases
  ¬∑ dsimp
    apply t.isLE_of_isZero
    apply Functor.zero_obj
  ¬∑ simp at h
    dsimp
    exact t.isLE_of_LE _ (i - 1) n (by linarith)
  ¬∑ simp at h
-/

noncomputable def Gr'' (n : ‚Ñ§) : C ‚•§ C := truncGELE n n ‚ãô @shiftFunctor C _ _ _ Shift‚ÇÇ (-n)

variable (n : ‚Ñ§)

instance (n : ‚Ñ§) : Functor.Additive (hP.Gr'' n) := by
  dsimp [Gr'']; infer_instance

instance (X : C) (n : ‚Ñ§) : IsLE ((Gr'' n).obj X) 0 :=
  isLE_shift _ n (-n) 0 (add_left_neg _)

instance (X : C) (n : ‚Ñ§) : IsGE ((Gr'' n).obj X) 0 :=
  isGE_shift _ n (-n) 0 (add_left_neg _)

lemma Gr''_obj_mem_core (n : ‚Ñ§) (X : C) : hP.core ((Gr'' n).obj X) := by
  rw [mem_core_iff]
  exact ‚ü®inferInstance, inferInstance‚ü©

noncomputable def Gr' (n : ‚Ñ§) : C ‚•§ hP.Core' :=
  FullSubcategory.lift _ (Gr'' n) (Gr''_obj_mem_core n)

noncomputable def GrCompŒπCore' (n : ‚Ñ§) :
  hP.Gr' n ‚ãô ŒπCore' ‚âÖ Gr'' n :=
    FullSubcategory.lift_comp_inclusion _ _ _

noncomputable def Gr‚ÇÄCompŒπCore'IsoTruncGELE : hP.Gr' 0 ‚ãô ŒπCore' ‚âÖ truncGELE 0 0 :=
  GrCompŒπCore' 0 ‚â™‚â´ isoWhiskerLeft (truncGELE 0 0) (shiftFunctorZero C ‚Ñ§)

/-
noncomputable def homologyCompŒπHeartDegreeIsoHomology' (q : ‚Ñ§) :
    t.homology' q ‚ãô t.ŒπHeartDegree q ‚âÖ t.truncGELE q q :=
  (Functor.associator _ _ _).symm ‚â™‚â´
    isoWhiskerRight (t.homologyCompŒπHeart' q) _ ‚â™‚â´ Functor.associator _ _ _ ‚â™‚â´
    isoWhiskerLeft _  (shiftFunctorCompIsoId C q (-q) (add_right_neg q)) ‚â™‚â´
    Functor.rightUnitor _
-/

lemma isIso_truncGE_map_truncGEŒπ_app (a b : ‚Ñ§) (h : a ‚â§ b) (X : C) :
    IsIso ((truncGE b).map ((truncGEŒπ a).app X)) :=
  isIso‚ÇÅ_truncGE_map_of_LE _
    (triangleGELE_distinguished (a-1) a (by linarith) X) (b-1) b (by linarith)
      (isLE_of_LE ((truncLE (a-1)).obj X) (a-1) (b-1) (by linarith))

/-
lemma isIso_truncGE_map_truncGTŒπ_app (a b : ‚Ñ§) (h : a ‚â§ b) (X : C) :
    IsIso ((truncGE b).map ((truncGTŒπ a).app X)) := sorry
-/

lemma isIso_truncLT_map_truncLTœÄ_app (a b : ‚Ñ§) (h : a ‚â§ b) (X : C) :
    IsIso ((truncLT a).map ((truncLTœÄ b).app X)) :=
  isIso‚ÇÇ_truncLT_map_of_GE _ (triangleGELT_distinguished b X) a
    (isGE_of_GE ((truncGE b).obj X) a b (by linarith))

lemma isIso_truncLE_map_truncLEœÄ_app (a b : ‚Ñ§) (h : a ‚â§ b) (X : C) :
    IsIso ((truncLE a).map ((truncLEœÄ b).app X)) := by
  apply isIso_truncLT_map_truncLTœÄ_app
  linarith

instance (X : C) (n : ‚Ñ§) : IsIso ((truncLE n).map ((truncLEœÄ n).app X)) := by
  apply isIso_truncLE_map_truncLEœÄ_app
  rfl

instance (X : C) (n : ‚Ñ§) : IsIso ((truncGE n).map ((truncGEŒπ n).app X)) := by
  apply isIso_truncGE_map_truncGEŒπ_app
  rfl

/-
lemma isIso_truncGEt_obj_map_truncGEœÄ_app (a b : ‚Ñ§t) (h : a ‚â§ b) (X : C) :
    IsIso ((t.truncGEt.obj b).map ((t.abstractSpectralObject.truncGEœÄ a).app X)) := by
  obtain (rfl|‚ü®b, rfl‚ü©|rfl) := b.three_cases
  ¬∑ simp only [‚Ñ§t.le_bot_iff] at h
    subst h
    dsimp
    simp only [AbstractSpectralObject.truncGEœÄ_bot_app]
    infer_instance
  ¬∑ obtain (rfl|‚ü®a, rfl‚ü©|rfl) := a.three_cases
    ¬∑ dsimp
      infer_instance
    ¬∑ simp only [‚Ñ§t.mk_le_mk_iff] at h
      dsimp
      simp only [AbstractSpectralObject.truncGEœÄ_mk]
      exact t.isIso_truncGE_map_truncGEœÄ_app a b h X
    ¬∑ simp at h
  ¬∑ refine' ‚ü®0, IsZero.eq_of_src _ _ _, IsZero.eq_of_src _ _ _‚ü©
    all_goals
      simp only [truncGEt_obj_top, Functor.zero_obj]

lemma isIso_truncLTt_obj_map_truncLTœÄ_app (a b : ‚Ñ§t) (h : a ‚â§ b) (X : C) :
    IsIso ((t.truncLTt.obj a).map ((t.abstractSpectralObject.truncLTŒπ b).app X)) := by
  obtain (rfl|‚ü®a, rfl‚ü©|rfl) := a.three_cases
  ¬∑ refine' ‚ü®0, IsZero.eq_of_src _ _ _, IsZero.eq_of_src _ _ _‚ü©
    all_goals
      simp only [truncLTt_obj_bot, Functor.zero_obj]
  ¬∑ obtain (rfl|‚ü®b, rfl‚ü©|rfl) := b.three_cases
    ¬∑ simp at h
    ¬∑ simp only [‚Ñ§t.mk_le_mk_iff] at h
      dsimp
      simp only [AbstractSpectralObject.truncLEŒπ_mk]
      exact t.isIso_truncLT_map_truncLTŒπ_app a b h X
    ¬∑ dsimp
      infer_instance
  ¬∑ simp only [‚Ñ§t.top_le_iff] at h
    subst h
    dsimp
    simp only [AbstractSpectralObject.truncLTŒπ_top_app]
    infer_instance
-/

/-
instance (D : Arrow ‚Ñ§t) (X : C) :
  IsIso ((t.abstractSpectralObject.truncGEToTruncGEGE.app D).app X) :=
    t.isIso_truncGEt_obj_map_truncGEœÄ_app _ _ (leOfHom D.hom) X

instance (D : Arrow ‚Ñ§t) (X : C) :
  IsIso ((t.abstractSpectralObject.truncLTLTToTruncLT.app D).app X) :=
    t.isIso_truncLTt_obj_map_truncLTœÄ_app _ _ (leOfHom D.hom) X

instance (D : Arrow ‚Ñ§t) : IsIso (t.abstractSpectralObject.truncGEToTruncGEGE.app D) :=
  NatIso.isIso_of_isIso_app _

instance (D : Arrow ‚Ñ§t) : IsIso (t.abstractSpectralObject.truncLTLTToTruncLT.app D) :=
  NatIso.isIso_of_isIso_app _

instance : IsIso (t.abstractSpectralObject.truncGEToTruncGEGE) := NatIso.isIso_of_isIso_app _

instance : IsIso (t.abstractSpectralObject.truncLTLTToTruncLT) := NatIso.isIso_of_isIso_app _

lemma truncGEœÄ_compatibility (a : ‚Ñ§t) (X : C) :
  (t.abstractSpectralObject.truncGE.obj a).map ((t.abstractSpectralObject.truncGEœÄ a).app X) =
    (t.abstractSpectralObject.truncGEœÄ a).app
      ((t.abstractSpectralObject.truncGE.obj a).obj X) := by
  obtain (rfl|‚ü®a, rfl‚ü©|rfl) := a.three_cases
  ¬∑ rfl
  ¬∑ dsimp
    simp only [AbstractSpectralObject.truncGEœÄ_mk]
    apply from_truncGE_obj_ext
    exact ((t.truncGEœÄ a).naturality ((t.truncGEœÄ a).app X)).symm
  ¬∑ apply IsZero.eq_of_src
    dsimp
    simp

lemma truncLTŒπ_compatibility (a : ‚Ñ§t) (X : C) :
    (t.abstractSpectralObject.truncLT.obj a).map ((t.abstractSpectralObject.truncLTŒπ a).app X) =
      (t.abstractSpectralObject.truncLTŒπ a).app
        ((t.abstractSpectralObject.truncLT.obj a).obj X) := by
  obtain (rfl|‚ü®a, rfl‚ü©|rfl) := a.three_cases
  ¬∑ apply IsZero.eq_of_src
    dsimp
    simp
  ¬∑ dsimp
    simp only [AbstractSpectralObject.truncLEŒπ_mk]
    apply to_truncLT_obj_ext
    exact ((t.truncLTŒπ a).naturality ((t.truncLTŒπ a).app X))
  ¬∑ rfl

lemma isIso_truncLTŒπ_app_truncGELT_obj (a b : ‚Ñ§t) (h : a ‚â§ b) (X : C) :
    IsIso ((t.abstractSpectralObject.truncLTŒπ b).app
      ((t.truncLTt.obj b ‚ãô t.truncGEt.obj a).obj X)) := by
  obtain (rfl|‚ü®b, rfl‚ü©|rfl) := b.three_cases
  ¬∑ refine' ‚ü®0, IsZero.eq_of_src _ _ _, IsZero.eq_of_src _ _ _‚ü©
    ¬∑ dsimp
      simp
    ¬∑ dsimp
      refine' IsZero.of_iso (isZero_zero _)
        (Functor.mapIso _ (IsZero.isoZero (Functor.zero_obj _)) ‚â™‚â´
          (t.truncGEt.obj a).mapZeroObject)
  ¬∑ dsimp [SpectralObject.AbstractSpectralObject.truncLTŒπ]
    simp only [comp_id]
    rw [‚Üê t.isLE_iff_isIso_truncLTŒπ_app (b-1) b (by linarith)]
    obtain (rfl|‚ü®a, rfl‚ü©|rfl) := a.three_cases
    ¬∑ dsimp
      infer_instance
    ¬∑ dsimp
      infer_instance
    ¬∑ dsimp
      apply t.isLE_of_isZero
      simp
  ¬∑ dsimp [SpectralObject.AbstractSpectralObject.truncLTŒπ]
    erw [comp_id, Functor.map_id]
    dsimp
    infer_instance

instance (D : Arrow ‚Ñ§t) (X : C) :
    IsIso ((t.abstractSpectralObject.truncLTGELTSelfToTruncGELT.app D).app X) :=
  t.isIso_truncLTŒπ_app_truncGELT_obj D.left D.right (leOfHom D.hom) X

instance (D : Arrow ‚Ñ§t) : IsIso (t.abstractSpectralObject.truncLTGELTSelfToTruncGELT.app D) :=
  NatIso.isIso_of_isIso_app _

instance : IsIso (t.abstractSpectralObject.truncLTGELTSelfToTruncGELT) :=
  NatIso.isIso_of_isIso_app _
-/

instance (a b : ‚Ñ§) (X : C) : IsLE ((truncGELT a b).obj X) (b-1) := by
  dsimp [truncGELT]
  infer_instance

noncomputable def natTransTruncLTGETruncGELT (a b : ‚Ñ§) :
    truncLTGE (C := C) a b ‚ü∂ truncGELT a b where
  app X := descTruncLT (liftTruncGE
    ((truncGEŒπ a).app X ‚â´ (truncLTœÄ b).app X) a) (b-1) b (by linarith)
  naturality X Y f := by
    dsimp [truncGELT, truncLTGE]
    apply from_truncLT_obj_ext
    dsimp
    apply to_truncGE_obj_ext
    simp only [Functor.id_obj, ‚Üê NatTrans.naturality_assoc, Functor.id_map, œÄ_descTruncLT, assoc,
      liftTruncGE_Œπ, œÄ_descTruncLT_assoc, NatTrans.naturality, liftTruncGE_Œπ_assoc]
    rw [‚Üê NatTrans.naturality, NatTrans.naturality_assoc]

@[reassoc (attr := simp)]
lemma natTransTruncLEGETruncGELE_app_pentagon (a b : ‚Ñ§) (X : C) :
    (truncLTœÄ b).app _ ‚â´ (natTransTruncLTGETruncGELT a b).app X ‚â´ (truncGEŒπ a).app _ =
      (truncGEŒπ a).app X ‚â´ (truncLTœÄ b).app X := by simp [natTransTruncLTGETruncGELT]

lemma natTransTruncLEGETruncGELE_app_pentagon_uniqueness (a b : ‚Ñ§) (X : C)
    (œÜ : (truncLTGE a b).obj X ‚ü∂ (truncGELT a b).obj X)
    (hœÜ : (truncLTœÄ b).app _ ‚â´ œÜ ‚â´ (truncGEŒπ a).app _ =
      (truncGEŒπ a).app X ‚â´ (truncLTœÄ b).app X) :
    œÜ = (natTransTruncLTGETruncGELT a b).app X := by
  apply from_truncLT_obj_ext
  dsimp
  apply to_truncGE_obj_ext
  rw [assoc, assoc, natTransTruncLEGETruncGELE_app_pentagon, hœÜ]

/-
noncomputable def truncLTŒ¥GELT (a b : ‚Ñ§) :
    truncLT a ‚ü∂ truncGELT a b ‚ãô shiftFunctor C (1 : ‚Ñ§) :=
  whiskerRight (truncLTœÄ b) (truncLT a) ‚â´ whiskerLeft (truncLT b) (truncLTŒ¥GE a)
-/

noncomputable def truncLTGEŒ¥GE (a b : ‚Ñ§) :
    truncLTGE a b ‚ü∂ truncGE b ‚ãô shiftFunctor C (1 : ‚Ñ§) :=
  whiskerLeft (truncGE a) (truncLTŒ¥GE b) ‚â´ whiskerRight (truncGEŒπ a)
  (truncGE b ‚ãô (shiftFunctor C (1 : ‚Ñ§)))

/-
@[simps!]
noncomputable def triangleGELTLTLT (a b : ‚Ñ§) (h : a ‚â§ b) : C ‚•§ Triangle C :=
  Triangle.functorMk (whiskerLeft (truncLT b) (truncGEŒπ a)) (natTransTruncLTOfGE b a h)
    (truncLTŒ¥GELT a b)
-/

@[simps!]
noncomputable def triangleGEGELTGE (a b : ‚Ñ§) (h : a ‚â§ b) : C ‚•§ Triangle C :=
  Triangle.functorMk (natTransTruncGEOfGE b a h) (whiskerLeft (truncGE a) (truncLTœÄ b))
    (truncLTGEŒ¥GE a b)

/-
lemma triangleLTLTGELT_distinguished (a b : ‚Ñ§) (h : a ‚â§ b) (X : C) :
    (triangleGELTLTLT a b h).obj X ‚àà distTriang C := by
  have := isIso_truncLT_map_truncLTœÄ_app a b h X
  refine isomorphic_distinguished _ (triangleGELT_distinguished a ((truncLT b).obj X)) _ ?_
  refine Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (asIso ((truncLT a).map ((truncLTœÄ b).app X)))
    ?_ ?_ ?_
  ¬∑ simp only [triangleGELTLTLT_obj_obj‚ÇÅ, triangleGELT_obj_obj‚ÇÇ, triangleGELTLTLT_obj_obj‚ÇÇ,
    triangleGELTLTLT_obj_mor‚ÇÅ, Iso.refl_hom, comp_id, triangleGELT_obj_obj‚ÇÅ, triangleGELT_obj_mor‚ÇÅ,
    id_comp]
  ¬∑ dsimp [truncLTŒ¥GELT]
    apply from_truncLT_obj_ext
    simp only [Functor.id_obj, natTransTruncLTOfGE_œÄ_app_assoc, id_comp]
    have := (truncLTœÄ a).naturality ((truncLTœÄ b).app X)
    simp only [Functor.id_obj, Functor.id_map] at this
    exact this.symm
  ¬∑ dsimp [truncLTŒ¥GELT]; simp only [NatTrans.naturality, Functor.comp_obj, Functor.comp_map,
    Functor.map_id, comp_id]
-/

lemma triangleGEGELTGE_distinguished (a b : ‚Ñ§) (h : a ‚â§ b) (X : C) :
    (triangleGEGELTGE a b h).obj X ‚àà distTriang C := by
  have := isIso_truncGE_map_truncGEŒπ_app a b h X
  refine isomorphic_distinguished _ (triangleGELT_distinguished b ((truncGE a).obj X)) _ ?_
  refine Triangle.isoMk _ _ (asIso ((truncGE b).map ((truncGEŒπ a).app X))).symm (Iso.refl _)
    (Iso.refl _) ?_ ?_ ?_
  ¬∑ dsimp [truncLTGEŒ¥GE]; simp only [comp_id, IsIso.eq_inv_comp, NatTrans.naturality]
    apply to_truncGE_obj_ext
    simp only [Functor.id_obj, assoc, NatTrans.naturality, Functor.id_map,
      Œπ_natTransTruncGEOfGE_app_assoc]
  ¬∑ simp only [triangleGEGELTGE_obj_obj‚ÇÇ, triangleGELT_obj_obj‚ÇÉ, triangleGEGELTGE_obj_obj‚ÇÉ,
    triangleGEGELTGE_obj_mor‚ÇÇ, Iso.refl_hom, comp_id, triangleGELT_obj_obj‚ÇÇ, triangleGELT_obj_mor‚ÇÇ,
    id_comp]
  ¬∑ dsimp [truncLTGEŒ¥GE]; simp only [Functor.map_inv, assoc, IsIso.hom_inv_id, comp_id, id_comp]

instance (a b : ‚Ñ§) (X : C) : IsIso ((natTransTruncLTGETruncGELT a b).app X) := by
  by_cases h : a ‚â§ b
  ¬∑ let u‚ÇÅ‚ÇÇ := (natTransTruncGEOfGE b a h).app X
    let u‚ÇÇ‚ÇÉ : (truncGE a).obj X ‚ü∂ X := (truncGEŒπ a).app X
    let u‚ÇÅ‚ÇÉ : _ ‚ü∂ X := (truncGEŒπ b).app X
    have eq : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ := by simp [u‚ÇÅ‚ÇÇ, u‚ÇÇ‚ÇÉ, u‚ÇÅ‚ÇÉ]
    have H := someOctahedron eq (triangleGEGELTGE_distinguished a b h X)
      (triangleGELT_distinguished a X) (triangleGELT_distinguished b X)
    let m‚ÇÅ : (truncLTGE a b).obj X ‚ü∂  _ := H.m‚ÇÅ
    have := isIso‚ÇÅ_truncGE_map_of_LE _ H.mem (a-1) a (by linarith) (by dsimp; infer_instance)
    dsimp at this
    have eq' : liftTruncGE m‚ÇÅ a = (natTransTruncLTGETruncGELT a b).app X := by
      apply to_truncGE_obj_ext
      dsimp
      apply from_truncLT_obj_ext
      simp_rw [natTransTruncLEGETruncGELE_app_pentagon, liftTruncGE_Œπ]
      exact H.comm‚ÇÅ
    rw [‚Üê eq']
    have fac : (truncGEŒπ a).app ((truncLT b).obj ((truncGE a).obj X)) ‚â´
        liftTruncGE m‚ÇÅ a = (truncGE a).map m‚ÇÅ := to_truncGE_obj_ext _ _ _ _ (by simp [truncLTGE])
    have : IsIso ((truncGEŒπ a).app ((truncLT b).obj ((truncGE a).obj X))) := by
      rw [‚Üê isGE_iff_isIso_truncGEŒπ_app a]
      infer_instance
    exact IsIso.of_isIso_fac_left fac
  ¬∑ refine ‚ü®0, ?_, ?_‚ü©
    all_goals
      apply IsZero.eq_of_src
      refine isZero _ (b-1) a (by linarith)

instance (a b : ‚Ñ§) : IsIso (hP.natTransTruncLTGETruncGELT a b) :=
  NatIso.isIso_of_isIso_app _

noncomputable def truncLTGEIsoGELT (a b : ‚Ñ§) : hP.truncLTGE a b ‚âÖ truncGELT a b :=
  asIso (natTransTruncLTGETruncGELT a b)

noncomputable def truncLEGEIsoGELE (a b : ‚Ñ§) : hP.truncLEGE a b ‚âÖ truncGELE a b :=
  truncLTGEIsoGELT a (b + 1)

instance (a b : ‚Ñ§) (X : C) :
  IsIso ((truncGEŒπ b).app ((truncLT a).obj ((truncGE b).obj X))) := by
    rw [‚Üê isGE_iff_isIso_truncGEŒπ_app]
    infer_instance

lemma truncGE_map_truncLT_map_truncGEŒπ_app_fac (a b : ‚Ñ§) (X : C) :
    (truncGE a).map ((truncLT b).map ((truncGEŒπ a).app X)) =
      (truncGEŒπ a).app ((truncLT b).obj ((truncGE a).obj X)) ‚â´
        (natTransTruncLTGETruncGELT a b).app X := by
  rw [‚Üê cancel_epi (inv ((truncGEŒπ a).app ((truncLT b).obj ((truncGE a).obj X)))),
    IsIso.inv_hom_id_assoc]
  apply natTransTruncLEGETruncGELE_app_pentagon_uniqueness
  simp only [Functor.id_obj, assoc, NatTrans.naturality, Functor.id_map, IsIso.inv_hom_id_assoc]
  exact ((truncLTœÄ b).naturality ((truncGEŒπ a).app X)).symm

lemma isIso_truncGE_map_truncLT_map_truncGEŒπ_app (a b : ‚Ñ§) (X : C) :
    IsIso ((truncGE a).map ((truncLT b).map ((truncGEŒπ a).app X))) := by
  rw [truncGE_map_truncLT_map_truncGEŒπ_app_fac a b X]
  infer_instance

/-
instance (D : Arrow ‚Ñ§t) (X : C) :
    IsIso ((t.abstractSpectralObject.truncLTGELTSelfToTruncLTGE.app D).app X) := by
  obtain ‚ü®a, b, f : a ‚ü∂ b‚ü© := D
  have h : a ‚â§ b := leOfHom f
  obtain (rfl|‚ü®b, rfl‚ü©|rfl) := b.three_cases
  ¬∑ simp only [‚Ñ§t.le_bot_iff] at h
    subst h
    exact ‚ü®0, IsZero.eq_of_src (Functor.zero_obj _) _ _,
      IsZero.eq_of_src (Functor.zero_obj _) _ _‚ü©
  dsimp [SpectralObject.AbstractSpectralObject.truncLTGELTSelfToTruncLTGE,
      SpectralObject.AbstractSpectralObject.truncLTGE]
  ¬∑ obtain (rfl|‚ü®a, rfl‚ü©|rfl) := a.three_cases
    ¬∑ simp only [AbstractSpectralObject.truncLEŒπ_mk]
      exact t.isIso_truncLT_map_truncLTŒπ_app b b (by rfl) X
    ¬∑ simp only [‚Ñ§t.mk_le_mk_iff] at h
      simp only [truncGEt_obj_mk, AbstractSpectralObject.truncLEŒπ_mk]
      exact t.isIso_truncLT_map_truncGE_map_truncLTŒπ_app a b X
    ¬∑ refine' ‚ü®0, IsZero.eq_of_src _ _ _,
        IsZero.eq_of_src _ _ _‚ü©
      all_goals
        exact IsZero.of_iso (isZero_zero _)
          ((t.truncLT b).mapIso ((Functor.zero_obj _).isoZero) ‚â™‚â´
          (t.truncLT b).mapZeroObject)
  ¬∑ dsimp [SpectralObject.AbstractSpectralObject.truncLTGELTSelfToTruncLTGE]
    simp only [AbstractSpectralObject.truncLTŒπ_top_app, Functor.map_id]
    infer_instance

instance (D : Arrow ‚Ñ§t) : IsIso (t.abstractSpectralObject.truncLTGELTSelfToTruncLTGE.app D) :=
  NatIso.isIso_of_isIso_app _

instance : IsIso (t.abstractSpectralObject.truncLTGELTSelfToTruncLTGE) :=
  NatIso.isIso_of_isIso_app _

instance : t.abstractSpectralObject.IsCompatible where
  distinguished := AbstractSpectralObject.distinguished t
  truncGEœÄ_compatibility' := t.truncGEœÄ_compatibility
  truncLTŒπ_compatibility' := t.truncLTŒπ_compatibility

@[simps!]
noncomputable def spectralObject (X : C) : SpectralObject C ‚Ñ§t :=
  t.abstractSpectralObject.spectralObject X

noncomputable def shiftSpectralObjectœâ‚ÇÅIsoHomologyŒπHeart' (X : C) (q q' : ‚Ñ§) (hq' : q + 1 = q') :
    ((t.spectralObject X).œâ‚ÇÅ ‚ãô shiftFunctor C q).obj
      (ComposableArrows.mk‚ÇÅ (homOfLE (by simp; linarith) : ‚Ñ§t.mk q ‚ü∂ ‚Ñ§t.mk q')) ‚âÖ
      (t.homology' q ‚ãô t.ŒπHeart').obj X :=
  (shiftFunctor C q).mapIso ((t.truncGELEIsoTruncGELT q q q' hq').symm.app X) ‚â™‚â´
    (t.homologyCompŒπHeart' q).symm.app X

noncomputable def homology‚ÇÄCompŒπHeartIsoTruncLEGE : t.homology' 0 ‚ãô t.ŒπHeart' ‚âÖ t.truncLEGE 0 0 :=
  t.homology‚ÇÄCompŒπHeart'IsoTruncGELE ‚â™‚â´ t.truncGELEIsoLEGE 0 0
-/

end FilteredTriangulated

namespace Subcategory

#exit

lemma HasInducedFiltration.mk' (S : Subcategory C) (hP : FilteredTriangulated C)
    (h : ‚àÄ (X : C) (_ : S.P X) (n : ‚Ñ§), S.P ((hP.truncLE n).obj X) ‚àß
      (S.P ((hP.truncGE n).obj X))) :
    S.HasInducedTStructure t where  -- need also to talk about induced filtrations then
  exists_triangle_zero_one X hX := by
    refine' ‚ü®_, _, _, _, _, _, _,
      t.triangleLEGE_distinguished 0 1 (by linarith) X,
      ‚ü®‚ü®(t.truncLE 0).obj X, (h X hX 0).1‚ü©, ‚ü®Iso.refl _‚ü©‚ü©,
      ‚ü®‚ü®(t.truncGE 1).obj X, (h X hX 1).2‚ü©, ‚ü®Iso.refl _‚ü©‚ü©‚ü©
    exact TStructure.mem_of_isLE  _ _ _
    exact TStructure.mem_of_isGE  _ _ _

lemma mem_of_hasInductedTStructure (S : Subcategory C) (t : TStructure C)
    [ClosedUnderIsomorphisms S.P] [S.HasInducedTStructure t]
    (T : Triangle C) (hT : T ‚àà distTriang C)
    (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (h‚ÇÅ : t.IsLE T.obj‚ÇÅ n‚ÇÄ) (h‚ÇÇ : S.P T.obj‚ÇÇ)
    (h‚ÇÉ : t.IsGE T.obj‚ÇÉ n‚ÇÅ) :
    S.P T.obj‚ÇÅ ‚àß S.P T.obj‚ÇÉ := by
  obtain ‚ü®e, _‚ü© := t.triangle_iso_exists n‚ÇÄ n‚ÇÅ (by omega) _ _ hT
    (S.Œπ.map_distinguished _ ((S.tStructure t).triangleLEGE_distinguished n‚ÇÄ n‚ÇÅ h ‚ü®_, h‚ÇÇ‚ü©))
    (Iso.refl _) inferInstance inferInstance (by
      dsimp
      rw [‚Üê S.tStructure_isLE_iff]
      infer_instance) (by
      dsimp
      rw [‚Üê S.tStructure_isGE_iff]
      infer_instance)
  exact ‚ü®(mem_iff_of_iso S.P (Triangle.œÄ‚ÇÅ.mapIso e)).2 (S.Œπ_obj_mem _),
    (mem_iff_of_iso S.P (Triangle.œÄ‚ÇÉ.mapIso e)).2 (S.Œπ_obj_mem _)‚ü©

instance (S S' : Subcategory C) (t : TStructure C) [S.HasInducedTStructure t]
    [S'.HasInducedTStructure t]
    [ClosedUnderIsomorphisms S.P] [ClosedUnderIsomorphisms S'.P] :
    (S.inter S').HasInducedTStructure t :=
  HasInducedTStructure.mk' _ _ (by
    rintro X ‚ü®hX, hX'‚ü© n
    exact
      ‚ü®‚ü®(S.mem_of_hasInductedTStructure t _ (t.triangleLEGE_distinguished n _ rfl X) n _ rfl
        (by dsimp; infer_instance) hX (by dsimp; infer_instance)).1,
      (S'.mem_of_hasInductedTStructure t _ (t.triangleLEGE_distinguished n _ rfl X) n _ rfl
        (by dsimp; infer_instance) hX' (by dsimp; infer_instance)).1‚ü©,
        ‚ü®(S.mem_of_hasInductedTStructure t _ (t.triangleLEGE_distinguished (n - 1) n (by omega) X)
        (n - 1) n (by omega) (by dsimp; infer_instance) hX (by dsimp; infer_instance)).2,
      (S'.mem_of_hasInductedTStructure t _ (t.triangleLEGE_distinguished (n - 1) n (by omega) X)
        (n - 1) n (by omega) (by dsimp; infer_instance) hX' (by dsimp; infer_instance)).2‚ü©‚ü©)

end Subcategory

instance [IsTriangulated C] : t.plus.HasInducedTStructure t := by
  apply Subcategory.HasInducedTStructure.mk'
  rintro X ‚ü®a, _‚ü© n
  exact ‚ü®‚ü®a, inferInstance‚ü©, ‚ü®a, inferInstance‚ü©‚ü©

instance [IsTriangulated C] : t.minus.HasInducedTStructure t := by
  apply Subcategory.HasInducedTStructure.mk'
  rintro X ‚ü®a, _‚ü© n
  exact ‚ü®‚ü®a, inferInstance‚ü©, ‚ü®a, inferInstance‚ü©‚ü©

instance [IsTriangulated C] : t.bounded.HasInducedTStructure t := by
  dsimp [TStructure.bounded]
  infer_instance

namespace TStructure

instance (X : C) (n : ‚Ñ§) [t.IsLE X n] (i : ‚Ñ§t) :
    t.IsLE ((t.truncLTt.obj i).obj X) n := by
  obtain rfl|‚ü®i, rfl‚ü©|rfl := ‚Ñ§t.three_cases i
  ¬∑ apply isLE_of_isZero
    simp
  ¬∑ dsimp
    infer_instance
  ¬∑ dsimp
    infer_instance

instance [IsTriangulated C] (X : C) (n : ‚Ñ§) [t.IsGE X n] (i : ‚Ñ§t) :
    t.IsGE ((t.truncLTt.obj i).obj X) n := by
  obtain rfl|‚ü®i, rfl‚ü©|rfl := ‚Ñ§t.three_cases i
  ¬∑ apply isGE_of_isZero
    simp
  ¬∑ dsimp
    infer_instance
  ¬∑ dsimp
    infer_instance

instance [IsTriangulated C] (X : C) (n : ‚Ñ§) [t.IsLE X n] (i : ‚Ñ§t) :
    t.IsLE ((t.truncGEt.obj i).obj X) n := by
  obtain rfl|‚ü®i, rfl‚ü©|rfl := ‚Ñ§t.three_cases i
  ¬∑ dsimp
    infer_instance
  ¬∑ dsimp
    infer_instance
  ¬∑ apply isLE_of_isZero
    simp

instance (X : C) (n : ‚Ñ§) [t.IsGE X n] (i : ‚Ñ§t) :
    t.IsGE ((t.truncGEt.obj i).obj X) n := by
  obtain rfl|‚ü®i, rfl‚ü©|rfl := ‚Ñ§t.three_cases i
  ¬∑ dsimp
    infer_instance
  ¬∑ dsimp
    infer_instance
  ¬∑ apply isGE_of_isZero
    simp

end TStructure

end Triangulated

end CategoryTheory
