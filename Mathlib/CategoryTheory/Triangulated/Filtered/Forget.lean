import Mathlib.CategoryTheory.Triangulated.Filtered.Basic
import Mathlib.CategoryTheory.Triangulated.Filtered.TruncationProp
import Mathlib.Data.Int.Interval
import Mathlib.CategoryTheory.Preadditive.Yoneda.Basic
import Mathlib.Algebra.Category.Grp.Zero
import Mathlib.Data.Int.ConditionallyCompleteOrder
import Mathlib.CategoryTheory.Abelian.DiagramLemmas.Four
import Mathlib.Algebra.Category.Grp.Abelian
import Mathlib.Algebra.Category.Grp.EpiMono
import Mathlib.CategoryTheory.Triangulated.Yoneda
import Mathlib.CategoryTheory.Triangulated.Opposite

namespace CategoryTheory

open Category Limits Pretriangulated ZeroObject Preadditive

namespace Triangulated

variable {C : Type _} [Category C] [HasZeroObject C]  [Preadditive C] [HasShift C (‚Ñ§ √ó ‚Ñ§)]
  [‚àÄ p : ‚Ñ§ √ó ‚Ñ§, Functor.Additive (CategoryTheory.shiftFunctor C p)]
  [hC : Pretriangulated C] [hP : FilteredTriangulated C] [IsTriangulated C]

namespace FilteredTriangulated

/- Commutation of the truncation functors with the second shift.-/

@[simp]
noncomputable def truncLE_shift_hom_app (X : C) (n a n' : ‚Ñ§) (h : a + n = n') :
    (truncLE n').obj ((@shiftFunctor C _ _ _ Shift‚ÇÇ a).obj X) ‚ü∂
    (@shiftFunctor C _ _ _ Shift‚ÇÇ a).obj ((truncLE n).obj X) := by
  have := isLE_shift ((truncLE n).obj X) n a n' h
  exact descTruncLE ((@shiftFunctor C _ _ _ Shift‚ÇÇ a).map ((truncLEœÄ n).app X)) n'

lemma truncLE_shift_hom_naturality {X Y : C} (f : X ‚ü∂ Y) (n a n' : ‚Ñ§) (h : a + n = n') :
    (truncLE n').map ((@shiftFunctor C _ _ _ Shift‚ÇÇ a).map f) ‚â´
    truncLE_shift_hom_app Y n a n' h = truncLE_shift_hom_app X n a n' h ‚â´
    (@shiftFunctor C _ _ _ Shift‚ÇÇ a).map ((truncLE n).map f) := by
  have := isLE_shift ((truncLE n).obj Y) n a n' h
  apply from_truncLE_obj_ext
  simp only [Functor.id_obj, Functor.comp_obj, Functor.comp_map, truncLE_shift_hom_app,
    œÄ_descTruncLE_assoc]
  conv_lhs => rw [‚Üê assoc, ‚Üê (truncLEœÄ n').naturality, Functor.id_map, assoc, œÄ_descTruncLE]
  rw [‚Üê Functor.map_comp, ‚Üê Functor.map_comp, ‚Üê (truncLEœÄ n).naturality, Functor.id_map]

noncomputable def truncLE_shift_inv_app (X : C) (n a n' : ‚Ñ§) (h : a + n = n') :
    (@shiftFunctor C _ _ _ Shift‚ÇÇ a).obj ((truncLE n).obj X) ‚ü∂
    (truncLE n').obj ((@shiftFunctor C _ _ _ Shift‚ÇÇ a).obj X) := by
  refine (@shiftFunctor C _ _ _ Shift‚ÇÇ a).map ?_ ‚â´ (@shiftNegShift C _ _ _ Shift‚ÇÇ _ a).hom
  have := isLE_shift ((truncLE n').obj ((@shiftFunctor C _ _ _ Shift‚ÇÇ a).obj X)) n' (-a) n
    (by linarith)
  exact descTruncLE ((@shiftShiftNeg C _ _ _ Shift‚ÇÇ X a).inv ‚â´
    (@shiftFunctor C _ _ _ Shift‚ÇÇ (-a)).map ((truncLEœÄ n').app _)) n

@[simp]
lemma œÄ_truncLE_shift_inv_app (X : C) (n a n' : ‚Ñ§) (h : a + n = n') :
    (@shiftFunctor C _ _ _ Shift‚ÇÇ a).map ((truncLEœÄ n).app X) ‚â´
    (truncLE_shift_inv_app X n a n' h) =
    (truncLEœÄ n').app ((@shiftFunctor C _ _ _ Shift‚ÇÇ a).obj X) := by
  dsimp [truncLE_shift_inv_app]
  conv_lhs => rw [‚Üê assoc, ‚Üê Functor.map_comp, œÄ_descTruncLE, Functor.map_comp]
  have heq : (@shiftFunctor C _ _ _ Shift‚ÇÇ a).map ((@shiftFunctorCompIsoId C _ _ _ Shift‚ÇÇ
      a (-a) (add_neg_self a)).inv.app X) = (@shiftNegShift C _ _ _ Shift‚ÇÇ _ a).inv := by
    simp only [Functor.id_obj, Functor.comp_obj, Iso.app_inv, shiftEquiv'_inverse,
      shiftEquiv'_functor, shiftEquiv'_counitIso]
    rw [@shift_shiftFunctorCompIsoId_inv_app]
  rw [heq, assoc]
  simp only [Functor.id_obj, Iso.app_inv, shiftEquiv'_inverse, shiftEquiv'_functor,
    shiftEquiv'_counitIso]
  have := (@shiftFunctorCompIsoId C _ _ _ Shift‚ÇÇ (-a) a (by linarith)).hom.naturality
    ((truncLEœÄ n').app ((@shiftFunctor C _ _ _ Shift‚ÇÇ a).obj X))
  simp only [Functor.id_obj, Functor.comp_obj, Functor.comp_map, Functor.id_map] at this
  rw [this]
  simp only [Iso.inv_hom_id_app_assoc]

@[simp]
lemma truncLE_shift_hom_inv_app (X : C) (n a n' : ‚Ñ§) (h : a + n = n') :
    truncLE_shift_hom_app X n a n' h ‚â´ truncLE_shift_inv_app X n a n' h = ùüô _ := by
  apply from_truncLE_obj_ext
  simp only [Functor.id_obj, truncLE_shift_hom_app, œÄ_descTruncLE_assoc, œÄ_truncLE_shift_inv_app,
    comp_id]

@[simp]
lemma truncLE_shift_inv_hom_app (X : C) (n a n' : ‚Ñ§) (h : a + n = n') :
    truncLE_shift_inv_app X n a n' h ‚â´ truncLE_shift_hom_app X n a n' h = ùüô _ := by
  set f := truncLE_shift_inv_app X n a n' h ‚â´ truncLE_shift_hom_app X n a n' h
  suffices h : (@shiftFunctor C _ _ _ Shift‚ÇÇ a).map ((truncLEœÄ n).app X) ‚â´ f =
      (@shiftFunctor C _ _ _ Shift‚ÇÇ a).map ((truncLEœÄ n).app X) ‚â´ ùüô _ by
    conv_rhs at h => rw [‚Üê Functor.map_id, ‚Üê Functor.map_comp]
    obtain ‚ü®g, hg‚ü© := Functor.Full.map_surjective (F := @shiftFunctor C _ _ _ Shift‚ÇÇ a) f
    rw [‚Üê hg, ‚Üê Functor.map_comp] at h
    have := from_truncLE_obj_ext _ _ _ _ (Functor.Faithful.map_injective
      (F := @shiftFunctor C _ _ _ Shift‚ÇÇ a) h)
    rw [this] at hg
    rw [‚Üê hg, Functor.map_id]
  simp only [Functor.id_obj, truncLE_shift_hom_app, comp_id, f]
  conv_lhs => rw [‚Üê assoc, œÄ_truncLE_shift_inv_app, œÄ_descTruncLE]

noncomputable def truncLE_shift (n a n' : ‚Ñ§) (h : a + n = n') :
    @shiftFunctor C _ _ _ Shift‚ÇÇ a ‚ãô truncLE n'
    ‚âÖ truncLE n ‚ãô @shiftFunctor C _ _ _ Shift‚ÇÇ a :=
  NatIso.ofComponents
    (fun X ‚Ü¶ {hom := truncLE_shift_hom_app X n a n' h
              inv := truncLE_shift_inv_app X n a n' h
              hom_inv_id := truncLE_shift_hom_inv_app X n a n' h
              inv_hom_id := truncLE_shift_inv_hom_app X n a n' h})
    (fun f ‚Ü¶ truncLE_shift_hom_naturality f n a n' h)

@[simp]
lemma œÄ_truncLE_shift_hom (n a n' : ‚Ñ§) (h : a + n = n') :
    whiskerLeft (@shiftFunctor C _ _ _ Shift‚ÇÇ a) (truncLEœÄ n') ‚â´ (truncLE_shift n a n' h).hom =
    whiskerRight (truncLEœÄ n) (@shiftFunctor C _ _ _ Shift‚ÇÇ a) := by
  ext X
  simp only [Functor.comp_obj, Functor.id_obj, truncLE_shift, truncLE_shift_hom_app,
    NatTrans.comp_app, whiskerLeft_app, NatIso.ofComponents_hom_app, œÄ_descTruncLE,
    whiskerRight_app]

@[simp]
lemma œÄ_truncLE_shift_inv (n a n' : ‚Ñ§) (h : a + n = n') :
    whiskerRight (truncLEœÄ n) (@shiftFunctor C _ _ _ Shift‚ÇÇ a) ‚â´ (truncLE_shift n a n' h).inv =
    whiskerLeft (@shiftFunctor C _ _ _ Shift‚ÇÇ a) (truncLEœÄ n') := by
  ext X
  simp only [Functor.comp_obj, Functor.id_obj, truncLE_shift, truncLE_shift_hom_app,
    NatTrans.comp_app, whiskerRight_app, NatIso.ofComponents_inv_app, œÄ_truncLE_shift_inv_app,
    whiskerLeft_app]

@[simp]
lemma truncLE_shift_zero (n : ‚Ñ§):
    truncLE_shift n 0 n (by linarith) =
    @Functor.CommShift.isoZero C C _ _ (truncLE n) ‚Ñ§ _ Shift‚ÇÇ Shift‚ÇÇ := by
  ext X
  have : IsLE ((truncLE n ‚ãô @shiftFunctor C _ _ _ Shift‚ÇÇ 0).obj X) n :=
    isLE_shift _ n 0 n (by linarith)
  apply from_truncLE_obj_ext
  simp only [Functor.id_obj, Functor.comp_obj, Functor.CommShift.isoZero_hom_app]
  conv_rhs => rw [‚Üê assoc, ‚Üê (truncLEœÄ n).naturality, Functor.id_map, ‚Üê NatTrans.comp_app]
  have := œÄ_truncLE_shift_hom n 0 n (by linarith) (C := C)
  apply_fun (fun f ‚Ü¶ f.app X) at this
  rw [NatTrans.comp_app, whiskerLeft_app] at this
  rw [this]
  simp only [whiskerRight_app, Functor.id_obj, NatTrans.comp_app, assoc]
  rw [‚Üê cancel_mono (f := (@shiftFunctorZero C ‚Ñ§ _ _ Shift‚ÇÇ).hom.app _)]
  simp only [Functor.id_obj, NatTrans.naturality, Functor.id_map, assoc, Iso.inv_hom_id_app,
    comp_id]

@[simp]
lemma truncLE_shift_add' (n n' n'' a b c : ‚Ñ§) (h : a + n = n') (h' : b + n' = n'')
    (h‚ÇÄ : a + b = c) :
    truncLE_shift n c n'' (by linarith) = isoWhiskerRight (@shiftFunctorAdd' C _ _ _
    Shift‚ÇÇ a b c h‚ÇÄ) (truncLE n'') ‚â™‚â´ isoWhiskerLeft (@shiftFunctor C _ _ _ Shift‚ÇÇ a)
    (truncLE_shift n' b n'' h') ‚â™‚â´ isoWhiskerRight (truncLE_shift n a n' h)
    (@shiftFunctor C _ _ _ Shift‚ÇÇ b) ‚â™‚â´ isoWhiskerLeft (truncLE n)
    (@shiftFunctorAdd' C _ _ _ Shift‚ÇÇ a b c h‚ÇÄ).symm := sorry

@[simp]
lemma truncLE_shift_add (n n' n'' a b : ‚Ñ§) (h : a + n = n') (h' : b + n' = n'') :
    truncLE_shift n (a + b) n'' (by linarith) = isoWhiskerRight (@shiftFunctorAdd C _ _ _
    Shift‚ÇÇ a b) (truncLE n'') ‚â™‚â´ isoWhiskerLeft (@shiftFunctor C _ _ _ Shift‚ÇÇ a)
    (truncLE_shift n' b n'' h') ‚â™‚â´ isoWhiskerRight (truncLE_shift n a n' h)
    (@shiftFunctor C _ _ _ Shift‚ÇÇ b) ‚â™‚â´ isoWhiskerLeft (truncLE n)
    (@shiftFunctorAdd C _ _ _ Shift‚ÇÇ a b).symm := by
  simp only [‚Üê shiftFunctorAdd'_eq_shiftFunctorAdd]
  exact truncLE_shift_add' n n' n'' a b (a + b) h h' rfl

@[simp]
noncomputable def truncGE_shift_hom_app (X : C) (n a n' : ‚Ñ§) (h : a + n = n') :
    (@shiftFunctor C _ _ _ Shift‚ÇÇ a).obj ((truncGE n).obj X) ‚ü∂
    (truncGE n').obj ((@shiftFunctor C _ _ _ Shift‚ÇÇ a).obj X) := by
  have := isGE_shift ((truncGE n).obj X) n a n' h
  exact hP.liftTruncGE ((@shiftFunctor C _ _ _ Shift‚ÇÇ a).map ((truncGEŒπ n).app X)) n'

lemma truncGE_shift_hom_naturality {X Y : C} (f : X ‚ü∂ Y) (n a n' : ‚Ñ§) (h : a + n = n') :
    (@shiftFunctor C _ _ _ Shift‚ÇÇ a).map ((truncGE n).map f) ‚â´ truncGE_shift_hom_app Y n a n' h
    = truncGE_shift_hom_app X n a n' h ‚â´
    (truncGE n').map ((@shiftFunctor C _ _ _ Shift‚ÇÇ a).map f) := by
  have := isGE_shift ((truncGE n).obj X) n a n' h
  apply to_truncGE_obj_ext
  simp only [Functor.id_obj, truncGE_shift_hom_app, assoc, liftTruncGE_Œπ, NatTrans.naturality,
    Functor.id_map, liftTruncGE_Œπ_assoc]
  conv_lhs => rw [‚Üê Functor.map_comp, (truncGEŒπ n).naturality]
  simp only [Functor.id_obj, Functor.id_map, Functor.map_comp]

noncomputable def truncGE_shift_inv_app (X : C) (n a n' : ‚Ñ§) (h : a + n = n') :
    (truncGE n').obj ((@shiftFunctor C _ _ _ Shift‚ÇÇ a).obj X) ‚ü∂
    (@shiftFunctor C _ _ _ Shift‚ÇÇ a).obj ((truncGE n).obj X) := by
  refine (@shiftNegShift C _ _ _ Shift‚ÇÇ _ a).inv ‚â´ (@shiftFunctor C _ _ _ Shift‚ÇÇ a).map ?_
  have := isGE_shift ((truncGE n').obj ((@shiftFunctor C _ _ _ Shift‚ÇÇ a).obj X)) n' (-a) n
    (by linarith)
  exact liftTruncGE ((@shiftFunctor C _ _ _ Shift‚ÇÇ (-a)).map ((truncGEŒπ n').app _) ‚â´
    (@shiftShiftNeg C _ _ _ Shift‚ÇÇ X a).hom) n


@[simp]
lemma truncGE_shift_inv_app_Œπ (X : C) (n a n' : ‚Ñ§) (h : a + n = n') :
    (truncGE_shift_inv_app X n a n' h) ‚â´
    (@shiftFunctor C _ _ _ Shift‚ÇÇ a).map ((truncGEŒπ n).app X) =
    (truncGEŒπ n').app ((@shiftFunctor C _ _ _ Shift‚ÇÇ a).obj X) := by
  dsimp [truncGE_shift_inv_app]
  conv_lhs => rw [assoc, ‚Üê Functor.map_comp, liftTruncGE_Œπ, Functor.map_comp]
  have heq : (@shiftFunctor C _ _ _ Shift‚ÇÇ a).map ((@shiftFunctorCompIsoId C _ _ _ Shift‚ÇÇ
      a (-a) (add_neg_self _)).hom.app X) = (@shiftFunctorCompIsoId C _ _ _ Shift‚ÇÇ
      (-a) a (by linarith)).hom.app _ := by
    simp only [Functor.comp_obj, Functor.id_obj]
    rw [@shift_shiftFunctorCompIsoId_hom_app]
  rw [heq]
  have := (@shiftFunctorCompIsoId C _ _ _ Shift‚ÇÇ (-a) a (by linarith)).hom.naturality
    ((truncGEŒπ n').app ((@shiftFunctor C _ _ _ Shift‚ÇÇ a).obj X))
  simp only [Functor.comp_obj, Functor.id_obj, Functor.comp_map, Functor.id_map] at this
  rw [this]
  simp only [Iso.inv_hom_id_app_assoc]

@[simp]
lemma truncGE_shift_hom_inv_app (X : C) (n a n' : ‚Ñ§) (h : a + n = n') :
    truncGE_shift_hom_app X n a n' h ‚â´ truncGE_shift_inv_app X n a n' h = ùüô _ := by
  set f := truncGE_shift_hom_app X n a n' h ‚â´ truncGE_shift_inv_app X n a n' h
  suffices h : f ‚â´ (@shiftFunctor C _ _ _ Shift‚ÇÇ a).map ((truncGEŒπ n).app X) =
      ùüô _ ‚â´ (@shiftFunctor C _ _ _ Shift‚ÇÇ a).map ((truncGEŒπ n).app X) by
    conv_rhs at h => rw [‚Üê Functor.map_id, ‚Üê Functor.map_comp]
    obtain ‚ü®g, hg‚ü© := Functor.Full.map_surjective (F := @shiftFunctor C _ _ _ Shift‚ÇÇ a) f
    rw [‚Üê hg, ‚Üê Functor.map_comp] at h
    have := to_truncGE_obj_ext _ _ _ _
      (Functor.Faithful.map_injective (F := @shiftFunctor C _ _ _ Shift‚ÇÇ a) h)
    rw [this] at hg
    rw [‚Üê hg, Functor.map_id]
  simp only [Functor.id_obj, truncGE_shift_hom_app, assoc, truncGE_shift_inv_app_Œπ,
    liftTruncGE_Œπ, id_comp, f]

@[simp]
lemma truncGE_shift_inv_hom_app (X : C) (n a n' : ‚Ñ§) (h : a + n = n') :
    truncGE_shift_inv_app X n a n' h ‚â´ truncGE_shift_hom_app X n a n' h = ùüô _ := by
  apply to_truncGE_obj_ext
  simp only [Functor.id_obj, truncGE_shift_hom_app, assoc, liftTruncGE_Œπ,
    truncGE_shift_inv_app_Œπ, id_comp]

noncomputable def truncGE_shift (n a n' : ‚Ñ§) (h : a + n = n') :
    truncGE n ‚ãô @shiftFunctor C _ _ _ Shift‚ÇÇ a ‚âÖ
    @shiftFunctor C _ _ _ Shift‚ÇÇ a ‚ãô truncGE n' :=
  NatIso.ofComponents
    (fun X ‚Ü¶ {hom := truncGE_shift_hom_app X n a n' h
              inv := truncGE_shift_inv_app X n a n' h
              hom_inv_id := truncGE_shift_hom_inv_app X n a n' h
              inv_hom_id := truncGE_shift_inv_hom_app X n a n' h})
    (fun f ‚Ü¶ truncGE_shift_hom_naturality f n a n' h)

@[simp]
lemma truncGE_shift_hom_Œπ (n a n' : ‚Ñ§) (h : a + n = n') :
    (truncGE_shift n a n' h).hom ‚â´ whiskerLeft (@shiftFunctor C _ _ _ Shift‚ÇÇ a) (truncGEŒπ n') =
    whiskerRight (truncGEŒπ n) (@shiftFunctor C _ _ _ Shift‚ÇÇ a) := by
  ext X
  simp only [Functor.comp_obj, Functor.id_obj, truncGE_shift, truncGE_shift_hom_app,
    NatTrans.comp_app, NatIso.ofComponents_hom_app, whiskerLeft_app, liftTruncGE_Œπ,
    whiskerRight_app]

@[simp]
lemma truncGE_shift_inv_Œπ (n a n' : ‚Ñ§) (h : a + n = n') :
    (truncGE_shift n a n' h).inv ‚â´ whiskerRight (truncGEŒπ n) (@shiftFunctor C _ _ _ Shift‚ÇÇ a) =
    whiskerLeft (@shiftFunctor C _ _ _ Shift‚ÇÇ a) (truncGEŒπ n') := by
  ext X
  simp only [Functor.comp_obj, Functor.id_obj, truncGE_shift, truncGE_shift_hom_app,
    NatTrans.comp_app, NatIso.ofComponents_inv_app, whiskerRight_app, truncGE_shift_inv_app_Œπ,
    whiskerLeft_app]

noncomputable def truncGELE_shift (n‚ÇÅ n‚ÇÇ a n‚ÇÅ' n‚ÇÇ' : ‚Ñ§) (h‚ÇÅ : a + n‚ÇÅ = n‚ÇÅ') (h‚ÇÇ : a + n‚ÇÇ = n‚ÇÇ') :
    @shiftFunctor C _ _ _ Shift‚ÇÇ a ‚ãô truncGELE n‚ÇÅ' n‚ÇÇ' ‚âÖ
    truncGELE n‚ÇÅ n‚ÇÇ ‚ãô @shiftFunctor C _ _ _ Shift‚ÇÇ a :=
  isoWhiskerRight (truncLE_shift n‚ÇÇ a n‚ÇÇ' h‚ÇÇ) (truncGE n‚ÇÅ') ‚â™‚â´
    isoWhiskerLeft (truncLE n‚ÇÇ) (truncGE_shift n‚ÇÅ a n‚ÇÅ' h‚ÇÅ).symm

noncomputable def Gr_shift (n a n' : ‚Ñ§) (h : a + n = n') :
    @shiftFunctor C _ _ _ Shift‚ÇÇ a ‚ãô Gr'' n' ‚âÖ Gr'' n :=
  isoWhiskerRight (truncGELE_shift n n a n' n' h h) (@shiftFunctor C _ _ _ Shift‚ÇÇ (-n')) ‚â™‚â´
  isoWhiskerLeft (truncGELE n n) (@shiftFunctorAdd' C _ _ _ Shift‚ÇÇ a (-n') (-n)
  (by linarith)).symm

/- More on the `Gr` functors.-/

lemma isLE_of_big_enough (X : C) : ‚àÉ (n : ‚Ñ§), IsLE X n := by
  obtain ‚ü®n, hn‚ü© := hP.LE_exhaustive X
  exact ‚ü®n, {le := hn}‚ü©

lemma isGE_of_small_enough (X : C) : ‚àÉ (n : ‚Ñ§), IsGE X n := by
  obtain ‚ü®n, hn‚ü© := hP.GE_exhaustive X
  exact ‚ü®n, {ge := hn}‚ü©

lemma Gr_zero_of_isLE (X : C) (n : ‚Ñ§) [IsLE X n] (m : ‚Ñ§) (hm : n < m) :
    IsZero ((Gr'' m).obj X) := by
  dsimp [Gr'']
  refine Limits.IsZero.of_iso ?_ (Functor.mapIso _ ((truncLEGEIsoGELE m m).app X).symm)
  dsimp [truncLEGE]
  have : IsZero ((truncGE m).obj X) := by
    have : IsLE X (m - 1) := isLE_of_LE X n (m - 1) (by linarith [hm])
    exact isZero_truncGE_obj_of_isLE (m - 1) m (by linarith) X
  rw [IsZero.iff_id_eq_zero] at this ‚ä¢
  rw [‚Üê Functor.map_id, ‚Üê Functor.map_id, this, Functor.map_zero, Functor.map_zero]

lemma Gr_zero_of_isGE (X : C) (n : ‚Ñ§) [IsGE X n] (m : ‚Ñ§) (hm : m < n) :
    IsZero ((Gr'' m).obj X) := by
  dsimp [Gr'', truncGELE]
  have : IsZero ((truncLE m).obj X) := by
    have : IsGE X (m + 1) := isGE_of_GE X (m + 1) n (by linarith [hm])
    exact isZero_truncLE_obj_of_isGE m (m + 1) (by linarith) X
  rw [IsZero.iff_id_eq_zero] at this ‚ä¢
  rw [‚Üê Functor.map_id, ‚Üê Functor.map_id, this, Functor.map_zero, Functor.map_zero]

lemma isLE_of_isLE_and_Gr_zero (X : C) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) [IsLE X n‚ÇÅ]
    (hX : IsZero ((Gr'' n‚ÇÅ).obj X)) : IsLE X n‚ÇÄ := by
  rw [isLE_iff_isIso_truncLTœÄ_app n‚ÇÄ n‚ÇÅ h]
  have hz : IsZero ((truncGELE n‚ÇÅ n‚ÇÅ).obj X) := by
    dsimp [Gr''] at hX
    refine Limits.IsZero.of_iso ?_ (@shiftNegShift _ _ _ _ Shift‚ÇÇ
      ((truncGELE n‚ÇÅ n‚ÇÅ).obj X) n‚ÇÅ).symm
    rw [IsZero.iff_id_eq_zero] at hX ‚ä¢
    rw [‚Üê Functor.map_id, hX, Functor.map_zero]
  have hz' : IsZero (((truncGELE n‚ÇÅ n‚ÇÅ).obj X)‚ü¶(1 : ‚Ñ§)‚üß) := by
    rw [IsZero.iff_id_eq_zero] at hz ‚ä¢; rw [‚Üê Functor.map_id, hz, Functor.map_zero]
  set œÜ := Triangle.homMk (Triangle.mk (0 : 0 ‚ü∂ X) (CategoryTheory.CategoryStruct.id X) 0)
    ((triangleGELELTLE n‚ÇÅ n‚ÇÅ (le_refl _)).obj X) 0 ((truncLEœÄ n‚ÇÅ).app X)
    ((truncLTœÄ n‚ÇÅ).app X) (by simp)
    (by simp only [Triangle.mk_obj‚ÇÇ, triangleGELELTLE_obj_obj‚ÇÉ, Triangle.mk_obj‚ÇÉ,
      Triangle.mk_mor‚ÇÇ, id_comp, triangleGELELTLE_obj_obj‚ÇÇ, triangleGELELTLE_obj_mor‚ÇÇ]
        exact (natTransTruncLTOfGE_œÄ_app (n‚ÇÅ + 1) n‚ÇÅ (by linarith) X).symm)
    (Limits.IsTerminal.hom_ext (Limits.IsZero.isTerminal hz') _ _)
  refine isIso‚ÇÉ_of_isIso‚ÇÅ‚ÇÇ œÜ (contractible_distinguished‚ÇÅ X) (triangleGELELTLE_distinguished n‚ÇÅ
    n‚ÇÅ (le_refl _) X) ?_ ((isLE_iff_isIso_truncLEœÄ_app n‚ÇÅ X).mp inferInstance)
  exact Limits.isIso_of_isTerminal Limits.HasZeroObject.zeroIsTerminal
    (Limits.IsZero.isTerminal hz) _

lemma isGE_of_isGE_and_Gr_zero (X : C) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) [IsGE X n‚ÇÄ]
    (hX : IsZero ((Gr'' n‚ÇÄ).obj X)) : IsGE X n‚ÇÅ := by
  rw [isGE_iff_isIso_truncGEŒπ_app]
  have hz : IsZero ((truncLTGE n‚ÇÄ n‚ÇÅ).obj X) := by
    refine IsZero.of_iso ?_ ((truncLTGEIsoGELT n‚ÇÄ n‚ÇÅ).app X)
    have heq : n‚ÇÅ = n‚ÇÄ + 1 := by linarith
    rw [heq]
    dsimp [Gr''] at hX
    refine Limits.IsZero.of_iso ?_ (@shiftNegShift _ _ _ _ Shift‚ÇÇ
      ((truncGELE n‚ÇÄ n‚ÇÄ).obj X) n‚ÇÄ).symm
    rw [IsZero.iff_id_eq_zero] at hX ‚ä¢
    rw [‚Üê Functor.map_id, hX, Functor.map_zero]
  set œÜ := Triangle.homMk ((triangleGEGELTGE n‚ÇÄ n‚ÇÅ (by linarith)).obj X)
    (contractibleTriangle X) ((truncGEŒπ n‚ÇÅ).app X) ((truncGEŒπ n‚ÇÄ).app X) 0 (by simp) (by simp)
    (Limits.IsInitial.hom_ext (Limits.IsZero.isInitial hz) _ _)
  refine isIso‚ÇÅ_of_isIso‚ÇÇ‚ÇÉ œÜ (triangleGEGELTGE_distinguished n‚ÇÄ n‚ÇÅ (by linarith) X)
    (contractible_distinguished X) ?_ ?_
  exact (isGE_iff_isIso_truncGEŒπ_app n‚ÇÄ X).mp inferInstance
  exact Limits.isIso_of_isTerminal (Limits.IsZero.isTerminal hz)
    Limits.HasZeroObject.zeroIsTerminal _

lemma isLE_of_Gr_zero (X : C) (n : ‚Ñ§) (hn : ‚àÄ (m : ‚Ñ§), n < m ‚Üí IsZero ((Gr'' m).obj X)) :
    IsLE X n := by
  obtain ‚ü®N, hN‚ü© := isLE_of_big_enough X
  by_cases h : n ‚â§ N
  ¬∑ set P := fun (r : ‚Ñ§) ‚Ü¶ n ‚â§ r ‚Üí IsLE X r
    have := Int.le_induction_down (P := P) (m := N) (fun _ ‚Ü¶ hN)
      (fun r _ h‚ÇÇ hr ‚Ü¶ by
         have : IsLE X r := h‚ÇÇ (by linarith)
         refine isLE_of_isLE_and_Gr_zero X (r - 1) r (by linarith) (hn r (by linarith)))
    exact this n h (le_refl _)
  ¬∑ exact isLE_of_LE X N n (by linarith)

lemma isGE_of_Gr_zero (X : C) (n : ‚Ñ§) (hn : ‚àÄ (m : ‚Ñ§), m < n ‚Üí IsZero ((Gr'' m).obj X)) :
    IsGE X n := by
  obtain ‚ü®N, hN‚ü© := isGE_of_small_enough X
  by_cases h : N ‚â§ n
  ¬∑ set P := fun (r : ‚Ñ§) ‚Ü¶ r ‚â§ n ‚Üí IsGE X r
    have := Int.le_induction (P := P) (m := N) (fun _ ‚Ü¶ hN)
      (fun r _ h‚ÇÇ  hr ‚Ü¶ by
        have : IsGE X r := h‚ÇÇ (by linarith)
        exact isGE_of_isGE_and_Gr_zero X r (r + 1) rfl (hn r (by linarith)))
    exact this n h (le_refl _)
  ¬∑ exact isGE_of_GE X n N (by linarith)

lemma isZero_of_Gr_zero (X : C) (hX : ‚àÄ (n : ‚Ñ§), IsZero ((Gr'' n).obj X)) : IsZero X := by
  have := (isGE_iff_isIso_truncGEŒπ_app 0 X).mp (isGE_of_Gr_zero X 0 (fun n _ ‚Ü¶ hX n))
  refine IsZero.of_iso ?_ (asIso ((truncGEŒπ 0).app X)).symm
  rw [‚Üê isLE_iff_isZero_truncGE_obj (-1) 0 (by linarith)]
  exact isLE_of_Gr_zero X (-1) (fun n _ ‚Ü¶ hX n)

lemma Gr_Œπ_isIso_of_GE (X : C) (n m : ‚Ñ§) (h : n ‚â§ m) :
    IsIso ((Gr'' m).map ((truncGEŒπ n).app X)) := by
  have := (Gr'' m).map_distinguished _ (triangleGELT_distinguished n X)
  erw [‚Üê Triangle.isZero‚ÇÉ_iff_isIso‚ÇÅ _ this]
  simp only [Functor.mapTriangle_obj, triangleGELT_obj_obj‚ÇÅ, triangleGELT_obj_obj‚ÇÇ,
    triangleGELT_obj_obj‚ÇÉ, triangleGELT_obj_mor‚ÇÅ, triangleGELT_obj_mor‚ÇÇ, triangleGELT_obj_mor‚ÇÉ,
    Triangle.mk_obj‚ÇÉ]
  exact Gr_zero_of_isLE ((truncLT n).obj X) (n - 1) m (by linarith)

lemma Gr_œÄ_isIso_of_LE (X : C) (n m : ‚Ñ§) (h : m ‚â§ n) :
    IsIso ((Gr'' m).map ((truncLEœÄ n).app X)) := by
  have := (Gr'' m).map_distinguished _ (triangleGELT_distinguished (n + 1) X)
  erw [‚Üê Triangle.isZero‚ÇÅ_iff_isIso‚ÇÇ _ this]
  simp only [Functor.mapTriangle_obj, triangleGELT_obj_obj‚ÇÅ, triangleGELT_obj_obj‚ÇÇ,
    triangleGELT_obj_obj‚ÇÉ, triangleGELT_obj_mor‚ÇÅ, triangleGELT_obj_mor‚ÇÇ, triangleGELT_obj_mor‚ÇÉ,
    Triangle.mk_obj‚ÇÅ]
  exact Gr_zero_of_isGE ((truncGE (n + 1)).obj X) (n + 1) m (by linarith)

variable [‚àÄ (X : C) (n : ‚Ñ§), Decidable (IsZero ((Gr'' n).obj X))]

/- Support of an object `X` of `C`. That's the set of integers `n` such that `Gr'' n X` is nonzero,
and it is finite.-/

lemma bounded_above (X : C) : ‚àÉ (n : ‚Ñ§), ‚àÄ (m : ‚Ñ§), n < m ‚Üí IsZero ((Gr'' m).obj X) := by
  obtain ‚ü®r, hr‚ü© := isLE_of_big_enough X
  existsi r
  intro m hm
  exact Gr_zero_of_isLE X r m hm

lemma bounded_below (X : C) : ‚àÉ (n : ‚Ñ§), ‚àÄ (m : ‚Ñ§), m < n ‚Üí IsZero ((Gr'' m).obj X) := by
  obtain ‚ü®r, hr‚ü© := isGE_of_small_enough X
  existsi r
  intro m hm
  exact Gr_zero_of_isGE X r m hm

lemma support_finite (X : C) : Set.Finite {n | ¬¨ (IsZero ((Gr'' n).obj X))} := by
  suffices sub : ‚àÉ n m, {n | ¬¨ (IsZero ((Gr'' n).obj X))} ‚äÜ Set.Icc n m by
    obtain ‚ü®n, m, h‚ü© := sub
    exact Set.Finite.subset (Set.finite_Icc n m) h
  obtain ‚ü®m, hm‚ü© := bounded_above X
  obtain ‚ü®n, hn‚ü© := bounded_below X
  existsi n, m
  intro r
  simp only [Set.mem_setOf_eq, Set.mem_Icc]
  contrapose!
  intro hr
  by_cases h : r < n
  ¬∑ exact hn r h
  ¬∑ dsimp [Gr'']
    rw [lt_iff_not_le, not_not] at h
    exact hm r (hr h)

noncomputable def support (X : C) := Set.Finite.toFinset (support_finite X)

lemma support_def (X : C) (n : ‚Ñ§) : n ‚àà support X ‚Üî ¬¨ (IsZero ((Gr'' n).obj X)) := by
  simp only [support, Set.Finite.mem_toFinset, Set.mem_setOf_eq]

lemma support_def' (X : C) (n : ‚Ñ§) : n ‚àâ support X ‚Üî IsZero ((Gr'' n).obj X) := by
  rw [support_def]; simp only [Decidable.not_not]

lemma support_shift (X : C) (a b n : ‚Ñ§) (hab : a + n = b) :
    a ‚àà support X ‚Üî b ‚àà support ((@shiftFunctor C _ _ _ Shift‚ÇÇ n).obj X) := by
  rw [support_def, support_def,
    Iso.isZero_iff ((hP.Gr_shift a n b (by linarith [hab])).symm.app X), Functor.comp_obj]

lemma isLE_iff_support_bounded_above (X : C) (n : ‚Ñ§) :
    IsLE X n ‚Üî (support X).toSet ‚äÜ Set.Iic n := by
  constructor
  ¬∑ intro hX m
    simp only [Finset.mem_coe, Set.mem_Iic]
    contrapose!
    rw [support_def']
    exact Gr_zero_of_isLE X n m
  ¬∑ intro hX
    refine isLE_of_Gr_zero X n (fun m hm ‚Ü¶ ?_)
    rw [‚Üê support_def']
    intro habs
    have := hX habs
    simp only [Set.mem_Iic] at this
    linarith

lemma isGE_iff_support_bounded_below (X : C) (n : ‚Ñ§) :
    IsGE X n ‚Üî (support X).toSet ‚äÜ Set.Ici n := by
  constructor
  ¬∑ intro hX r
    simp only [Finset.mem_coe, Set.mem_Ici]
    contrapose!
    rw [support_def']
    exact Gr_zero_of_isGE X n r
  ¬∑ intro hX
    refine isGE_of_Gr_zero X n (fun m hm ‚Ü¶ ?_)
    rw [‚Üê support_def']
    intro habs
    have := hX habs
    simp only [Set.mem_Ici] at this
    linarith

lemma isZero_iff_empty_support (X : C) : IsZero X ‚Üî support X = ‚àÖ := by
  constructor
  ¬∑ intro h
    ext n
    simp only [Finset.not_mem_empty, iff_false]
    rw [support_def']
    rw [IsZero.iff_id_eq_zero] at h ‚ä¢
    rw [‚Üê Functor.map_id, h, Functor.map_zero]
  ¬∑ intro hX
    refine isZero_of_Gr_zero X (fun n ‚Ü¶ ?_)
    rw [‚Üê support_def', hX]
    simp only [Finset.not_mem_empty, not_false_eq_true]

lemma isCore_iff_support_sub_0 (X : C) : tCore.P X ‚Üî support X ‚äÜ {0} := by
  rw [mem_tCore_iff, isGE_iff_support_bounded_below, isLE_iff_support_bounded_above,
    ‚Üê Set.subset_inter_iff]
  constructor
  ¬∑ intro h a ha
    simp only [Finset.mem_singleton]
    have := h ha
    simp only [Set.mem_inter_iff, Set.mem_Iic, Set.mem_Ici] at this
    exact le_antisymm this.1 this.2
  ¬∑ intro h
    rw [Finset.subset_singleton_iff'] at h
    intro a ha
    rw [h a ha]
    simp only [Set.mem_inter_iff, Set.mem_Iic, le_refl, Set.mem_Ici, and_self]

lemma shift_isCore_iff_support_sub_singleton (X : C) (n n' : ‚Ñ§) (hnn' : n + n' = 0) :
    tCore.P ((@shiftFunctor C _ _ _ Shift‚ÇÇ n').obj X) ‚Üî support X ‚äÜ {n} := by
  rw [isCore_iff_support_sub_0]
  constructor
  ¬∑ intro h a ha
    rw [support_shift X a (a - n) n' (by linarith)] at ha
    have := h ha
    have : a = n := by simp only [Finset.mem_singleton] at this; linarith
    rw [this, Finset.mem_singleton]
  ¬∑ intro h a ha
    rw [‚Üê support_shift X (a + n) a n' (by linarith)] at ha
    have := h ha
    have : a = 0 := by simp only [Finset.mem_singleton, add_left_eq_self] at this; exact this
    rw [this, Finset.mem_singleton]

lemma support_truncLE (X : C) (n : ‚Ñ§) :
    support ((truncLE n).obj X) = (support X).filter (fun a ‚Ü¶ a ‚â§ n) := by
  ext a
  simp only [support_def, Finset.mem_filter]
  by_cases h : a ‚â§ n
  ¬∑ simp only [h, and_true]
    have := Gr_œÄ_isIso_of_LE X n a h
    rw [‚Üê (asIso ((Gr'' a).map ((truncLEœÄ n).app X))).isZero_iff]
    rfl
  ¬∑ simp only [h, and_false, iff_false, Decidable.not_not]
    exact Gr_zero_of_isLE ((truncLE n).obj X) n a (by linarith)

lemma support_truncGE (X : C) (n : ‚Ñ§) :
    support ((truncGE n).obj X) = (support X).filter (fun a ‚Ü¶ n ‚â§ a) := by
  ext a
  simp only [support_def, Finset.mem_filter]
  by_cases h : n ‚â§ a
  ¬∑ simp only [h, and_true]
    have := Gr_Œπ_isIso_of_GE X n a h
    rw [(asIso ((Gr'' a).map ((truncGEŒπ n).app X))).isZero_iff]
    rfl
  ¬∑ simp only [h, and_false, iff_false, Decidable.not_not]
    exact Gr_zero_of_isGE ((truncGE n).obj X) n a (by linarith)

/-- The morphism "`Œ±‚Åø`"" from `X` to `X‚ü™n‚ü´`, if `n` is a natural number.-/
noncomputable def power_of_alpha (X : C) (n : ‚Ñï) :
    X ‚ü∂ (@shiftFunctor C _ _ _ Shift‚ÇÇ (n : ‚Ñ§)).obj X := by
  induction' n with n fn
  ¬∑ exact ((@shiftFunctorZero C ‚Ñ§ _ _ Shift‚ÇÇ).symm.app X).hom
  ¬∑ exact fn ‚â´ Œ±.app _ ‚â´ ((@shiftFunctorAdd' C _ _ _ Shift‚ÇÇ n 1 ‚Üë(n + 1) rfl).symm.app X).hom

/-- The morphism "`Œ±‚Åø` from `X‚ü™m‚ü´` to `X‚ü™m+n‚ü´`, if `m` is an integer and `n` is a natural number.-/
noncomputable def power_of_alpha' (X : C) (m : ‚Ñ§) (n : ‚Ñï) :
    (@shiftFunctor C _ _ _ Shift‚ÇÇ m).obj X ‚ü∂ (@shiftFunctor C _ _ _ Shift‚ÇÇ (m + n)).obj X := by
  induction' n with n fn
  ¬∑ exact ((@shiftFunctorZero C ‚Ñ§ _ _ Shift‚ÇÇ).symm.app ((@shiftFunctor C _ _ _ Shift‚ÇÇ m).obj X)‚â™‚â´
      (@shiftFunctorAdd C _ _ _ Shift‚ÇÇ m 0).symm.app X).hom
  ¬∑ refine fn ‚â´ ?_
    refine ?_ ‚â´ ((@shiftFunctorAdd' C _ _ _ Shift‚ÇÇ (m + n) 1 (m + ‚Üë(n + 1))
      (by simp only [Nat.cast_add, Nat.cast_one]; linarith)).symm.app X).hom
    exact hP.Œ±.app _

@[simp]
lemma power_of_alpha_zero (X : C) : power_of_alpha X 0 = (shiftFunctorZero C ‚Ñ§).inv.app X := by
  dsimp [power_of_alpha]; rfl

@[simp]
lemma power_of_alpha_plus_one (X : C) (n : ‚Ñï) :
    power_of_alpha X (n + 1) = power_of_alpha X n ‚â´ Œ±.app _ ‚â´
    ((@shiftFunctorAdd' C _ _ _ Shift‚ÇÇ n 1 ‚Üë(n + 1) rfl).symm.app X).hom := by
  dsimp [power_of_alpha]

lemma adj_left_shift (X Y : C) (p q : ‚Ñ§) (hpq : p + 1 ‚â§ q) [IsLE X p] [IsGE Y q] :
    Function.Bijective (fun (f : (@shiftFunctor C _ _ _ Shift‚ÇÇ 1).obj X ‚ü∂ Y) ‚Ü¶ Œ±.app X ‚â´ f) := by
  set s‚ÇÅ := fun (f : (@shiftFunctor C _ _ _ Shift‚ÇÇ 1).obj X ‚ü∂ Y) ‚Ü¶ Œ±.app X ‚â´ f
  set s‚ÇÇ := fun (f : (@shiftFunctor C _ _ _ Shift‚ÇÇ 1).obj
      ((@shiftFunctor C _ _ _ Shift‚ÇÇ (-p)).obj X) ‚ü∂ (@shiftFunctor C _ _ _ Shift‚ÇÇ (-p)).obj Y) ‚Ü¶
      Œ±.app _ ‚â´ f
  set e : ((@shiftFunctor C _ _ _ Shift‚ÇÇ 1).obj X ‚ü∂ Y) ‚Üí ((@shiftFunctor C _ _ _ Shift‚ÇÇ 1).obj
      ((@shiftFunctor C _ _ _ Shift‚ÇÇ (-p)).obj X) ‚ü∂ (@shiftFunctor C _ _ _ Shift‚ÇÇ (-p)).obj Y) :=
    Function.comp (CategoryStruct.comp (@shiftComm C _ _ _ Shift‚ÇÇ _ _ _).hom)
    (@shiftFunctor C _ _ _ Shift‚ÇÇ (-p)).map
  have he : Function.Bijective e := by
    apply Function.Bijective.comp
    ¬∑ have heq : CategoryStruct.comp (@shiftComm C _ _ _ Shift‚ÇÇ X (-p) 1).hom =
          (Iso.homFromEquiv (Z := (@shiftFunctor C _ _ _ Shift‚ÇÇ (-p)).obj Y)
          (@shiftComm C _ _ _ Shift‚ÇÇ X (-p) 1).symm).toFun := by
        ext f
        simp only [Iso.app_hom, shiftComm_symm, Equiv.toFun_as_coe, Iso.homFromEquiv_apply,
          Iso.app_inv]
        conv_rhs => rw [‚Üê shiftFunctorComm_symm, Iso.symm_inv]
      rw [heq]
      exact Equiv.bijective _
    ¬∑ exact ‚ü®Functor.Faithful.map_injective, Functor.Full.map_surjective‚ü©
  set e' : (X ‚ü∂ Y) ‚Üí (((@shiftFunctor C _ _ _ Shift‚ÇÇ (-p)).obj X) ‚ü∂ (@shiftFunctor C _ _ _ Shift‚ÇÇ
      (-p)).obj Y) := (@shiftFunctor C _ _ _ Shift‚ÇÇ (-p)).map
  have he' : Function.Bijective e' := ‚ü®Functor.Faithful.map_injective, Functor.Full.map_surjective‚ü©
  have hcomm : e' ‚àò s‚ÇÅ = s‚ÇÇ ‚àò e := by
    ext f
    simp only [Functor.id_obj, Function.comp_apply, Functor.map_comp, Iso.app_hom, e', s‚ÇÅ, s‚ÇÇ, e]
    rw [‚Üê assoc, Œ±_vs_second_shift (-p) X]
  rw [‚Üê Function.Bijective.of_comp_iff' he', hcomm]
  refine Function.Bijective.comp (hP.adj_left ?_ ?_) he
  ¬∑ exact hP.GE_shift (p + 1) _ _ (by linarith) _ (GE_antitone hpq _ (mem_of_isGE Y q))
  ¬∑ exact hP.LE_shift p _ _ (by linarith) _ (mem_of_isLE _ _)

lemma adj_left_extended (n : ‚Ñï) : ‚àÄ (X Y : C) (m : ‚Ñ§) [IsLE X m] [IsGE Y (m + n)],
    Function.Bijective
    (fun (f : (@shiftFunctor C _ _ _ Shift‚ÇÇ n).obj X ‚ü∂ Y) ‚Ü¶ (power_of_alpha X n ‚â´ f)) := by
  induction' n with n fn
  ¬∑ intro X Y m _ _
    simp only [Int.Nat.cast_ofNat_Int, power_of_alpha_zero]
    exact IsIso.comp_left_bijective _
  ¬∑ intro X Y m _ _
    simp only [power_of_alpha_plus_one, Functor.comp_obj, Iso.app_hom, Iso.symm_hom, assoc]
    refine Function.Bijective.comp ?_ (Function.Bijective.comp ?_ ?_)
    ¬∑ have : IsGE Y (m + n) := isGE_of_GE Y (m + n) (m + ‚Üë(n + 1)) (by simp only [Nat.cast_add,
      Nat.cast_one, add_le_add_iff_left, le_add_iff_nonneg_right, zero_le_one])
      exact fn X Y m
    ¬∑ have : IsLE ((@shiftFunctor C _ _ _ Shift‚ÇÇ n).obj X) (m + ‚Üën) := by
        exact isLE_shift X m n (m + n) (by linarith)
      exact adj_left_shift _ _ (m + n) (m + ‚Üë(n + 1))
        (by simp only [Nat.cast_add, Nat.cast_one]; linarith)
    ¬∑ exact IsIso.comp_left_bijective _

/- Lemmas about omega and shifting.-/

lemma shift_omega_mono {X Y : C} (f : X ‚ü∂ Y) (n m : ‚Ñ§) (hf : ‚àÄ (Z : C) (hZ : IsGE Z n),
    Mono ((preadditiveYoneda.obj Z).map f.op)) : ‚àÄ (Z : C) (hZ : IsGE Z n),
    Mono ((preadditiveYoneda.obj Z).map (f‚ü¶m‚üß').op) := sorry

lemma shift_omega_epi {X Y : C} (f : X ‚ü∂ Y) (n m : ‚Ñ§) (hf : ‚àÄ (Z : C) (hZ : IsGE Z n),
    Epi ((preadditiveYoneda.obj Z).map f.op)) : ‚àÄ (Z : C) (hZ : IsGE Z n),
    Epi ((preadditiveYoneda.obj Z).map (f‚ü¶m‚üß').op) := sorry

/- The functor forgetting filtrations on the subcategory of objects `X` such that `IsLE X 0`.-/

/- First we do the case where the support is a singleton.-/

lemma existence_omega_support_singleton (X : C) [IsLE X 0] (hsupp : Finset.card (support X) = 1) :
    ‚àÉ (Y : hP.Core') (s : X ‚ü∂ Y.1),
    ‚àÄ (Z : C), IsGE Z 0 ‚Üí IsIso ((preadditiveYoneda.obj Z).map (Quiver.Hom.op s)) := by
  obtain ‚ü®n, hsupp‚ü© := Finset.card_eq_one.mp hsupp
  have hn : n ‚â§ 0 := by
    have := (isLE_iff_support_bounded_above X 0).mp inferInstance
    have h : n ‚àà support X := by rw [hsupp, Finset.mem_singleton]
    exact Set.mem_Iic.mp (this h)
  have hn : n = - ‚Üën.natAbs := by rw [Int.ofNat_natAbs_of_nonpos hn, neg_neg]
  existsi ‚ü®(@shiftFunctor C _ _ _ Shift‚ÇÇ n.natAbs).obj X, ?_‚ü©, power_of_alpha X n.natAbs
  ¬∑ rw [shift_isCore_iff_support_sub_singleton X n n.natAbs (by linarith), hsupp]
  ¬∑ intro Z _
    have : IsLE X n := by
      rw [isLE_iff_support_bounded_above X n, hsupp]
      simp only [Finset.coe_singleton, Set.singleton_subset_iff, Set.mem_Iic, le_refl]
    have : IsGE Z (n + n.natAbs) := by
      rw [hn]; simp only [Int.natCast_natAbs, Int.natAbs_neg, abs_abs, add_left_neg]
      infer_instance
    set f : ((@shiftFunctor C _ _ _ Shift‚ÇÇ ‚Üën.natAbs).obj X ‚ü∂ Z) ‚Üí+ (X ‚ü∂ Z) :=
      {
       toFun := fun f ‚Ü¶ power_of_alpha X n.natAbs ‚â´ f,
       map_zero' := by simp only [comp_zero]
       map_add' := fun _ _ ‚Ü¶ by simp only [comp_add]
      }
    set e := AddEquiv.ofBijective f (adj_left_extended n.natAbs X Z n)
    simp only [preadditiveYoneda_obj, Int.reduceNeg, Int.rawCast, Int.cast_id, Nat.rawCast,
      Nat.cast_id, Int.Nat.cast_ofNat_Int, Int.reduceAdd, Int.ofNat_eq_coe, eq_mp_eq_cast, id_eq,
      eq_mpr_eq_cast, Functor.comp_obj, preadditiveYonedaObj_obj, ModuleCat.forget‚ÇÇ_obj,
      Functor.comp_map, preadditiveYonedaObj_map, Quiver.Hom.unop_op, ModuleCat.forget‚ÇÇ_map]
    change IsIso (AddCommGrp.ofHom e.toAddMonoidHom)
    apply IsIso.mk
    existsi (AddCommGrp.ofHom e.symm.toAddMonoidHom)
    constructor
    ¬∑ ext a
      change e.symm.toFun (e.toFun a) = a
      simp only [AddEquiv.toEquiv_eq_coe, AddEquiv.toEquiv_symm, Equiv.toFun_as_coe,
        EquivLike.coe_coe, EquivLike.coe_symm_apply_apply]
    ¬∑ ext a
      change e.toFun (e.symm.toFun a) = a
      simp only [AddEquiv.toEquiv_eq_coe, AddEquiv.toEquiv_symm, Equiv.toFun_as_coe,
        AddEquiv.coe_toEquiv_symm, EquivLike.coe_coe, AddEquiv.apply_symm_apply]

/- Then the general case, by induction on the size of the support.-/

open CategoryTheory.Pretriangulated.Opposite

noncomputable abbrev distTriang_to_yoneda_comp_arrows‚ÇÑ (Z : C) {X‚ÇÅ X‚ÇÇ X‚ÇÉ : C} (u : X‚ÇÅ ‚ü∂ X‚ÇÇ)
    (v : X‚ÇÇ ‚ü∂ X‚ÇÉ) (w : X‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß) : ComposableArrows AddCommGrp 4 :=
  ComposableArrows.mk‚ÇÑ (((preadditiveYoneda.obj Z).map w.op)) (((preadditiveYoneda.obj Z).map v.op))
  (((preadditiveYoneda.obj Z).map u.op)) ((preadditiveYoneda.obj Z).map (-w‚ü¶(-1 : ‚Ñ§)‚üß' ‚â´
  (shiftEquiv C (1 : ‚Ñ§)).unitIso.inv.app _).op)

noncomputable abbrev distTriang_to_yoneda_comp_arrows‚ÇÑ_hom (Z : C) {X‚ÇÅ X‚ÇÇ X‚ÇÉ X'‚ÇÅ X'‚ÇÇ X'‚ÇÉ: C}
    (u : X‚ÇÅ ‚ü∂ X‚ÇÇ) (v : X‚ÇÇ ‚ü∂ X‚ÇÉ) (w : X‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß) (u' : X'‚ÇÅ ‚ü∂ X'‚ÇÇ) (v' : X'‚ÇÇ ‚ü∂ X'‚ÇÉ)
    (w' : X'‚ÇÉ ‚ü∂ X'‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß) (f : Triangle.mk u' v' w' ‚ü∂ Triangle.mk u v w) :
    distTriang_to_yoneda_comp_arrows‚ÇÑ Z u v w ‚ü∂ distTriang_to_yoneda_comp_arrows‚ÇÑ Z u' v' w' := by
    refine ComposableArrows.homMk ?_ ?_
    ¬∑ intro i
      match i with
      | 0 => exact (preadditiveYoneda.obj Z).map (f.hom‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß').op
      | 1 => exact (preadditiveYoneda.obj Z).map f.hom‚ÇÉ.op
      | 2 => exact (preadditiveYoneda.obj Z).map f.hom‚ÇÇ.op
      | 3 => exact (preadditiveYoneda.obj Z).map f.hom‚ÇÅ.op
      | 4 => refine (preadditiveYoneda.obj Z).map (f.hom‚ÇÉ‚ü¶-1‚üß').op
    ¬∑ intro i _
      match i with
      | 0 => change (preadditiveYoneda.obj Z).map w.op ‚â´ (preadditiveYoneda.obj Z).map
                 f.hom‚ÇÉ.op = (preadditiveYoneda.obj Z).map ((shiftFunctor C 1).map f.hom‚ÇÅ).op ‚â´
                 (preadditiveYoneda.obj Z).map w'.op
             rw [‚Üê Functor.map_comp, ‚Üê Functor.map_comp]
             congr 1
             change (f.hom‚ÇÉ ‚â´ w).op = _
             erw [‚Üê f.comm‚ÇÉ]; rfl
      | 1 => change (preadditiveYoneda.obj Z).map v.op ‚â´ (preadditiveYoneda.obj Z).map
                 f.hom‚ÇÇ.op = (preadditiveYoneda.obj Z).map f.hom‚ÇÉ.op ‚â´
                 (preadditiveYoneda.obj Z).map v'.op
             rw [‚Üê Functor.map_comp, ‚Üê Functor.map_comp]
             congr 1
             change (f.hom‚ÇÇ ‚â´ v).op = _
             erw [‚Üê f.comm‚ÇÇ]
             rfl
      | 2 => change (preadditiveYoneda.obj Z).map u.op ‚â´ (preadditiveYoneda.obj Z).map f.hom‚ÇÅ.op
                 = (preadditiveYoneda.obj Z).map f.hom‚ÇÇ.op ‚â´ (preadditiveYoneda.obj Z).map u'.op
             rw [‚Üê Functor.map_comp, ‚Üê Functor.map_comp]
             congr 1
             change (f.hom‚ÇÅ ‚â´ u).op = _
             erw [‚Üê f.comm‚ÇÅ]
             rfl
      | 3 => change (preadditiveYoneda.obj Z).map (-(shiftFunctor C (-1)).map w ‚â´
                 (shiftEquiv C 1).unitIso.inv.app X‚ÇÅ).op ‚â´ (preadditiveYoneda.obj Z).map
                 ((shiftFunctor C (-1)).map f.hom‚ÇÉ).op = (preadditiveYoneda.obj Z).map f.hom‚ÇÅ.op ‚â´
                 (preadditiveYoneda.obj Z).map (-(shiftFunctor C (-1)).map w' ‚â´
                 (shiftEquiv C 1).unitIso.inv.app X'‚ÇÅ).op
             rw [‚Üê Functor.map_comp, ‚Üê Functor.map_comp]
             congr 1
             change (f.hom‚ÇÉ‚ü¶-1‚üß' ‚â´ (- w‚ü¶-1‚üß' ‚â´ (shiftEquiv C 1).unitIso.inv.app X‚ÇÅ)).op = _
             conv_lhs => rw [Preadditive.comp_neg, ‚Üê assoc, ‚Üê Functor.map_comp]; erw [‚Üê f.comm‚ÇÉ]
             change _ = ((-(shiftFunctor C (-1)).map w' ‚â´ (shiftEquiv C 1).unitIso.inv.app
                 X'‚ÇÅ) ‚â´ f.hom‚ÇÅ).op
             congr 1
             conv_rhs => rw [Preadditive.neg_comp, assoc]
                         erw [‚Üê (shiftEquiv C (1 : ‚Ñ§)).unitIso.inv.naturality f.hom‚ÇÅ]
             simp only [Int.reduceNeg, Triangle.mk_obj‚ÇÉ, Functor.id_obj, Triangle.mk_obj‚ÇÅ,
               Triangle.mk_mor‚ÇÉ, Functor.map_comp, shiftEquiv'_functor, shiftEquiv'_inverse,
               shiftEquiv'_unitIso, Iso.symm_inv, assoc, Functor.comp_obj, Functor.comp_map]

lemma distTriang_to_yoneda_comp_arrows‚ÇÑ_exact (Z : C) {X‚ÇÅ X‚ÇÇ X‚ÇÉ : C} (u : X‚ÇÅ ‚ü∂ X‚ÇÇ) (v : X‚ÇÇ ‚ü∂ X‚ÇÉ)
    (w : X‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß) (dT : Triangle.mk u v w ‚àà Pretriangulated.distinguishedTriangles) :
    (distTriang_to_yoneda_comp_arrows‚ÇÑ Z u v w).Exact := by
  refine {zero := fun i _ ‚Ü¶ ?_, exact := fun i _ ‚Ü¶ ?_}
  ¬∑ match i with
    | 0 => change ((preadditiveYoneda.obj Z).map w.op) ‚â´ ((preadditiveYoneda.obj Z).map
                 v.op) = 0
           rw [‚Üê Functor.map_comp]
           change (preadditiveYoneda.obj Z).map (v ‚â´ w).op = 0
           have : v ‚â´ w = 0 := Pretriangulated.comp_distTriang_mor_zero‚ÇÇ‚ÇÉ _ dT
           rw [this]
           erw [Functor.map_zero]
    | 1 => change ((preadditiveYoneda.obj Z).map v.op) ‚â´ ((preadditiveYoneda.obj Z).map
                 u.op) = 0
           rw [‚Üê Functor.map_comp]
           change (preadditiveYoneda.obj Z).map (u ‚â´ v).op = 0
           have : u ‚â´ v = 0 := Pretriangulated.comp_distTriang_mor_zero‚ÇÅ‚ÇÇ _ dT
           rw [this]
           erw [Functor.map_zero]
    | 2 => change ((preadditiveYoneda.obj Z).map u.op) ‚â´ ((preadditiveYoneda.obj Z).map
                 ((-(w‚ü¶-1‚üß') ‚â´ (shiftEquiv C 1).unitIso.inv.app X‚ÇÅ)).op) = 0
           rw [‚Üê Functor.map_comp]
           change (preadditiveYoneda.obj Z).map ((-(w‚ü¶-1‚üß') ‚â´
                 (shiftEquiv C 1).unitIso.inv.app X‚ÇÅ) ‚â´ u).op = 0
           have : (-(w‚ü¶-1‚üß') ‚â´ (shiftEquiv C 1).unitIso.inv.app X‚ÇÅ) ‚â´ u = 0 :=
                 Pretriangulated.comp_distTriang_mor_zero‚ÇÅ‚ÇÇ _
                 (Pretriangulated.inv_rot_of_distTriang _ dT)
           rw [this]
           erw [Functor.map_zero]
  ¬∑ match i with
    | 0 => rw [Pretriangulated.rotate_distinguished_triangle] at dT
           have dT' : (triangleOpEquivalence C).functor.obj (Opposite.op (Triangle.mk v w
               (-u‚ü¶1‚üß'))) ‚àà Opposite.distinguishedTriangles C := by
             rw [Opposite.mem_distinguishedTriangles_iff']
             existsi (Triangle.mk v w (-u‚ü¶1‚üß')), dT
             exact Nonempty.intro (Iso.refl _)
           exact Functor.IsHomological.exact (F := preadditiveYoneda.obj Z) _ dT'
    | 1 => have dT' : (triangleOpEquivalence C).functor.obj (Opposite.op (Triangle.mk u v w)) ‚àà
               Opposite.distinguishedTriangles C := by
             rw [Opposite.mem_distinguishedTriangles_iff']
             existsi (Triangle.mk u v w), dT
             exact Nonempty.intro (Iso.refl _)
           exact Functor.IsHomological.exact (F := preadditiveYoneda.obj Z) _ dT'
    | 2 => set T'‚ÇÇ := (triangleOpEquivalence C).functor.obj (Opposite.op (Triangle.mk
                 (-w‚ü¶(-1 : ‚Ñ§)‚üß' ‚â´ (shiftEquiv C (1 : ‚Ñ§)).unitIso.inv.app _) u (v ‚â´
                 (shiftEquiv C (1 : ‚Ñ§)).counitIso.inv.app _ )))
           have dT' : ((triangleOpEquivalence C).functor.obj (Opposite.op (Triangle.mk
               (-w‚ü¶(-1 : ‚Ñ§)‚üß' ‚â´ (shiftEquiv C (1 : ‚Ñ§)).unitIso.inv.app _) u (v ‚â´ (shiftEquiv C
               (1 : ‚Ñ§)).counitIso.inv.app _ )))) ‚àà Opposite.distinguishedTriangles C := by
             rw [Opposite.mem_distinguishedTriangles_iff']
             existsi (Triangle.mk (-w‚ü¶(-1 : ‚Ñ§)‚üß' ‚â´ (shiftEquiv C (1 : ‚Ñ§)).unitIso.inv.app _)
                   u (v ‚â´ (shiftEquiv C (1 : ‚Ñ§)).counitIso.inv.app _ )),
                   Pretriangulated.inv_rot_of_distTriang _ dT
             exact Nonempty.intro (Iso.refl _)
           exact Functor.IsHomological.exact (F := preadditiveYoneda.obj Z) _ dT'

lemma existence_omega_aux (n : ‚Ñï) : ‚àÄ (X : C) [IsLE X 0], Finset.card (support X) = n ‚Üí
    ‚àÉ (Y : hP.Core') (s : X ‚ü∂ Y.1),
    ‚àÄ (Z : C), IsGE Z 0 ‚Üí IsIso ((preadditiveYoneda.obj Z).map (Quiver.Hom.op s)) := by
  refine Nat.strongRec ?_ n
  intro n hn X _ hX
  by_cases h : n = 0
  ¬∑ existsi 0, 0
    intro Z hZ
    have  h‚ÇÅ: IsZero ((preadditiveYoneda.obj Z).obj (Opposite.op (FullSubcategory.obj
        (0 : hP.Core')))) := by
      simp only [preadditiveYoneda_obj, Functor.comp_obj, preadditiveYonedaObj_obj,
        ModuleCat.forget‚ÇÇ_obj]
      refine @AddCommGrp.isZero_of_subsingleton _ (Subsingleton.intro ?_)
      simp only [AddCommGrp.coe_of]
      change ‚àÄ (a b : (FullSubcategory.obj (0 : hP.Core') ‚ü∂ Z)), a = b
      intro f g
      have h‚ÇÄ : IsZero (FullSubcategory.obj (0 : hP.Core')) := by
        have : IsZero (0 : hP.Core') := isZero_zero _
        rw [IsZero.iff_id_eq_zero] at this ‚ä¢
        exact this
      rw [Limits.IsZero.eq_zero_of_src h‚ÇÄ f, Limits.IsZero.eq_zero_of_src h‚ÇÄ g]
    have h‚ÇÇ: IsZero ((preadditiveYoneda.obj Z).obj (Opposite.op X)) := by
      simp only [preadditiveYoneda_obj, Functor.comp_obj, preadditiveYonedaObj_obj,
        ModuleCat.forget‚ÇÇ_obj]
      have h‚ÇÄ : IsZero X := by
        rw [isZero_iff_empty_support, ‚Üê Finset.card_eq_zero, ‚Üê h]
        exact hX
      refine @AddCommGrp.isZero_of_subsingleton _ (Subsingleton.intro ?_)
      simp only [AddCommGrp.coe_of]
      change ‚àÄ (a b : (X ‚ü∂ Z)), a = b
      intro f g
      rw [Limits.IsZero.eq_zero_of_src h‚ÇÄ f, Limits.IsZero.eq_zero_of_src h‚ÇÄ g]
    exact Limits.isIso_of_isInitial h‚ÇÅ.isInitial h‚ÇÇ.isInitial _
  ¬∑ set b := sSup (support X).toSet
    set T := (triangleGELT b).obj X
    set dT := triangleGELT_distinguished b X
    have : IsLE T.obj‚ÇÅ 0 := sorry
    have : IsLE T.obj‚ÇÉ 0 := sorry
    have h‚ÇÅ : Finset.card (support T.obj‚ÇÅ) = 1 := sorry
    have h‚ÇÉ : Finset.card (support T.obj‚ÇÉ) < n := sorry
    obtain ‚ü®Y‚ÇÅ, s‚ÇÅ, hY‚ÇÅ‚ü© := existence_omega_support_singleton T.obj‚ÇÅ h‚ÇÅ
    obtain ‚ü®Y‚ÇÉ, s‚ÇÉ, hY‚ÇÉ‚ü© := hn _ h‚ÇÉ T.obj‚ÇÉ rfl
    have : IsLE Y‚ÇÅ.1 0 := {le := Y‚ÇÅ.2.1}
    have : IsLE Y‚ÇÉ.1 0 := {le := Y‚ÇÉ.2.1}
    have : IsGE Y‚ÇÅ.1 0 := {ge := Y‚ÇÅ.2.2}
    have : IsGE Y‚ÇÉ.1 0 := {ge := Y‚ÇÉ.2.2}
    have := hY‚ÇÉ (Y‚ÇÅ.1‚ü¶(1 : ‚Ñ§)‚üß) inferInstance
    set w : Y‚ÇÉ.obj ‚ü∂ Y‚ÇÅ.obj‚ü¶(1 : ‚Ñ§)‚üß := inv (((preadditiveYoneda.obj (Y‚ÇÅ.obj‚ü¶(1 : ‚Ñ§)‚üß)).map s‚ÇÉ.op))
      (T.mor‚ÇÉ ‚â´ s‚ÇÅ‚ü¶1‚üß') with hwdef
    have hw : s‚ÇÉ ‚â´ w = T.mor‚ÇÉ ‚â´ s‚ÇÅ‚ü¶1‚üß' := by
      change ((preadditiveYoneda.obj ((shiftFunctor C 1).obj Y‚ÇÅ.obj)).map s‚ÇÉ.op) w = _
      rw [hwdef]
      change (_ ‚â´ ((preadditiveYoneda.obj ((shiftFunctor C 1).obj Y‚ÇÅ.obj)).map s‚ÇÉ.op)) _ = _
      rw [IsIso.inv_hom_id]
      simp only [preadditiveYoneda_obj, Functor.comp_obj, preadditiveYonedaObj_obj,
        ModuleCat.forget‚ÇÇ_obj, AddCommGrp.coe_of, AddCommGrp.coe_id', id_eq]
    obtain ‚ü®Y‚ÇÇ, u, v, dT'‚ü© := distinguished_cocone_triangle‚ÇÇ w
    obtain ‚ü®s‚ÇÇ, hu, hv‚ü© := complete_distinguished_triangle_morphism‚ÇÇ _ _ dT dT' s‚ÇÅ s‚ÇÉ hw.symm
    have hY‚ÇÇ : tCore.P Y‚ÇÇ := by
      constructor
      ¬∑ refine (@LE_ext‚ÇÇ C _ _ _ _ _ _ _ _ dT' 0 ?_ ?_).le
        simp only [Triangle.mk_obj‚ÇÅ]; infer_instance
        simp only [Triangle.mk_obj‚ÇÉ]; infer_instance
      ¬∑ refine (@GE_ext‚ÇÇ C _ _ _ _ _ _ _ _ dT' 0 ?_ ?_).ge
        simp only [Triangle.mk_obj‚ÇÅ]; infer_instance
        simp only [Triangle.mk_obj‚ÇÉ]; infer_instance
    existsi ‚ü®Y‚ÇÇ, hY‚ÇÇ‚ü©, s‚ÇÇ
    intro Z hZ
    refine Abelian.isIso_of_epi_of_isIso_of_isIso_of_mono (R‚ÇÅ := distTriang_to_yoneda_comp_arrows‚ÇÑ Z
      u v w) (R‚ÇÇ := distTriang_to_yoneda_comp_arrows‚ÇÑ Z T.mor‚ÇÅ T.mor‚ÇÇ T.mor‚ÇÉ)
      (distTriang_to_yoneda_comp_arrows‚ÇÑ_exact Z u v w dT') (distTriang_to_yoneda_comp_arrows‚ÇÑ_exact
      Z T.mor‚ÇÅ T.mor‚ÇÇ T.mor‚ÇÉ dT) (distTriang_to_yoneda_comp_arrows‚ÇÑ_hom Z u v w T.mor‚ÇÅ T.mor‚ÇÇ T.mor‚ÇÉ
      (Triangle.homMk T (Triangle.mk u v w) s‚ÇÅ s‚ÇÇ s‚ÇÉ hu hv hw.symm))
      ?_ ?_ ?_ ?_
    ¬∑ exact shift_omega_epi s‚ÇÅ 0 1 (fun Z hZ ‚Ü¶ @IsIso.epi_of_iso _ _ _ _ _ (hY‚ÇÅ Z hZ)) Z hZ
    ¬∑ exact hY‚ÇÉ Z hZ
    ¬∑ exact hY‚ÇÅ Z hZ
    ¬∑ exact shift_omega_mono s‚ÇÉ 0 (-1) (fun Z hZ ‚Ü¶ @IsIso.mono_of_iso _ _ _ _ _ (hY‚ÇÉ Z hZ)) Z hZ

  #exit

lemma existence_omega (X : C) [IsLE X 0] : ‚àÉ (Y : hP.Core') (s : X ‚ü∂ Y.1),
    ‚àÄ (Z : C), IsGE Z 0 ‚Üí Function.Bijective (fun (f : Y.1 ‚ü∂ Z) ‚Ü¶ s ‚â´ f) := sorry


end FilteredTriangulated

end Triangulated

end CategoryTheory
