/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Triangulated.Pretriangulated

/-!
# Triangulated Categories

This file contains the definition of triangulated categories, which are
pretriangulated categories which satisfy the octahedron axiom.

-/


noncomputable section

namespace CategoryTheory

open Limits Category Preadditive Pretriangulated

open ZeroObject

variable (C : Type*) [Category C] [Preadditive C] [HasZeroObject C] [HasShift C ‚Ñ§]
  [‚àÄ n : ‚Ñ§, Functor.Additive (shiftFunctor C n)] [Pretriangulated C]

namespace Triangulated

variable {C}

-- Porting note: see https://github.com/leanprover/lean4/issues/2188
set_option genInjectivity false in
/-- An octahedron is a type of datum whose existence is asserted by
the octahedron axiom (TR 4), see https://stacks.math.columbia.edu/tag/05QK -/
structure Octahedron
  {X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C}
  {u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ} {u‚ÇÅ‚ÇÉ : X‚ÇÅ ‚ü∂ X‚ÇÉ} (comm : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ)
  {v‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ} {w‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÅ‚ÇÇ : Triangle.mk u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà distTriang C)
  {v‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ} {w‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÇ‚ÇÉ : Triangle.mk u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà distTriang C)
  {v‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ} {w‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÅ‚ÇÉ : Triangle.mk u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà distTriang C) where
  m‚ÇÅ : Z‚ÇÅ‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÉ
  m‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ
  comm‚ÇÅ : v‚ÇÅ‚ÇÇ ‚â´ m‚ÇÅ = u‚ÇÇ‚ÇÉ ‚â´ v‚ÇÅ‚ÇÉ
  comm‚ÇÇ : m‚ÇÅ ‚â´ w‚ÇÅ‚ÇÉ = w‚ÇÅ‚ÇÇ
  comm‚ÇÉ : v‚ÇÅ‚ÇÉ ‚â´ m‚ÇÉ = v‚ÇÇ‚ÇÉ
  comm‚ÇÑ : w‚ÇÅ‚ÇÉ ‚â´ u‚ÇÅ‚ÇÇ‚ü¶1‚üß' = m‚ÇÉ ‚â´ w‚ÇÇ‚ÇÉ
  mem : Triangle.mk m‚ÇÅ m‚ÇÉ (w‚ÇÇ‚ÇÉ ‚â´ v‚ÇÅ‚ÇÇ‚ü¶1‚üß') ‚àà distTriang C
gen_injective_theorems% Octahedron

instance (X : C) :
    Nonempty (Octahedron (comp_id (ùüô X)) (contractible_distinguished X)
      (contractible_distinguished X) (contractible_distinguished X)) := by
  refine ‚ü®‚ü®0, 0, ?_, ?_, ?_, ?_, isomorphic_distinguished _ (contractible_distinguished (0 : C)) _
    (Triangle.isoMk _ _ (by rfl) (by rfl) (by rfl))‚ü©‚ü©
  all_goals apply Subsingleton.elim

namespace Octahedron

attribute [reassoc] comm‚ÇÅ comm‚ÇÇ comm‚ÇÉ comm‚ÇÑ

variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C}
  {u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ} {u‚ÇÅ‚ÇÉ : X‚ÇÅ ‚ü∂ X‚ÇÉ} {comm : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ}
  {v‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ} {w‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} {h‚ÇÅ‚ÇÇ : Triangle.mk u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà distTriang C}
  {v‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ} {w‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß} {h‚ÇÇ‚ÇÉ : Triangle.mk u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà distTriang C}
  {v‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ} {w‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} {h‚ÇÅ‚ÇÉ : Triangle.mk u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà distTriang C}
  (h : Octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ)

/-- The triangle `Z‚ÇÅ‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÇ‚ü¶1‚üß` given by an octahedron. -/
@[simps!]
def triangle : Triangle C :=
  Triangle.mk h.m‚ÇÅ h.m‚ÇÉ (w‚ÇÇ‚ÇÉ ‚â´ v‚ÇÅ‚ÇÇ‚ü¶1‚üß')

/-- The first morphism of triangles given by an octahedron. -/
@[simps]
def triangleMorphism‚ÇÅ : Triangle.mk u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚ü∂ Triangle.mk u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ where
  hom‚ÇÅ := ùüô X‚ÇÅ
  hom‚ÇÇ := u‚ÇÇ‚ÇÉ
  hom‚ÇÉ := h.m‚ÇÅ
  comm‚ÇÅ := by
    dsimp
    rw [id_comp, comm]
  comm‚ÇÇ := h.comm‚ÇÅ
  comm‚ÇÉ := by
    dsimp
    simpa only [Functor.map_id, comp_id] using h.comm‚ÇÇ.symm

/-- The second morphism of triangles given an octahedron. -/
@[simps]
def triangleMorphism‚ÇÇ : Triangle.mk u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚ü∂ Triangle.mk u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ where
  hom‚ÇÅ := u‚ÇÅ‚ÇÇ
  hom‚ÇÇ := ùüô X‚ÇÉ
  hom‚ÇÉ := h.m‚ÇÉ
  comm‚ÇÅ := by
    dsimp
    rw [comp_id, comm]
  comm‚ÇÇ := by
    dsimp
    rw [id_comp, h.comm‚ÇÉ]
  comm‚ÇÉ := h.comm‚ÇÑ


variable (u‚ÇÅ‚ÇÇ u‚ÇÅ‚ÇÉ u‚ÇÇ‚ÇÉ comm h‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÉ h‚ÇÇ‚ÇÉ)

/-- When two diagrams are isomorphic, an octahedron for one gives an octahedron for the other. -/
def ofIso {X‚ÇÅ' X‚ÇÇ' X‚ÇÉ' Z‚ÇÅ‚ÇÇ' Z‚ÇÇ‚ÇÉ' Z‚ÇÅ‚ÇÉ' : C} (u‚ÇÅ‚ÇÇ' : X‚ÇÅ' ‚ü∂ X‚ÇÇ') (u‚ÇÇ‚ÇÉ' : X‚ÇÇ' ‚ü∂ X‚ÇÉ') (u‚ÇÅ‚ÇÉ' : X‚ÇÅ' ‚ü∂ X‚ÇÉ')
    (comm' : u‚ÇÅ‚ÇÇ' ‚â´ u‚ÇÇ‚ÇÉ' = u‚ÇÅ‚ÇÉ')
    (e‚ÇÅ : X‚ÇÅ ‚âÖ X‚ÇÅ') (e‚ÇÇ : X‚ÇÇ ‚âÖ X‚ÇÇ') (e‚ÇÉ : X‚ÇÉ ‚âÖ X‚ÇÉ')
    (comm‚ÇÅ‚ÇÇ : u‚ÇÅ‚ÇÇ ‚â´ e‚ÇÇ.hom = e‚ÇÅ.hom ‚â´ u‚ÇÅ‚ÇÇ') (comm‚ÇÇ‚ÇÉ : u‚ÇÇ‚ÇÉ ‚â´ e‚ÇÉ.hom = e‚ÇÇ.hom ‚â´ u‚ÇÇ‚ÇÉ')
    (v‚ÇÅ‚ÇÇ' : X‚ÇÇ' ‚ü∂ Z‚ÇÅ‚ÇÇ') (w‚ÇÅ‚ÇÇ' : Z‚ÇÅ‚ÇÇ' ‚ü∂ X‚ÇÅ'‚ü¶(1 : ‚Ñ§)‚üß)
    (h‚ÇÅ‚ÇÇ' : Triangle.mk u‚ÇÅ‚ÇÇ' v‚ÇÅ‚ÇÇ' w‚ÇÅ‚ÇÇ' ‚àà distTriang C)
    (v‚ÇÇ‚ÇÉ' : X‚ÇÉ' ‚ü∂ Z‚ÇÇ‚ÇÉ') (w‚ÇÇ‚ÇÉ' : Z‚ÇÇ‚ÇÉ' ‚ü∂ X‚ÇÇ'‚ü¶(1 : ‚Ñ§)‚üß)
    (h‚ÇÇ‚ÇÉ' : Triangle.mk u‚ÇÇ‚ÇÉ' v‚ÇÇ‚ÇÉ' w‚ÇÇ‚ÇÉ' ‚àà distTriang C)
    (v‚ÇÅ‚ÇÉ' : X‚ÇÉ' ‚ü∂ Z‚ÇÅ‚ÇÉ') (w‚ÇÅ‚ÇÉ' : Z‚ÇÅ‚ÇÉ' ‚ü∂ X‚ÇÅ'‚ü¶(1 : ‚Ñ§)‚üß)
    (h‚ÇÅ‚ÇÉ' : Triangle.mk (u‚ÇÅ‚ÇÉ') v‚ÇÅ‚ÇÉ' w‚ÇÅ‚ÇÉ' ‚àà distTriang C)
    (H : Octahedron comm' h‚ÇÅ‚ÇÇ' h‚ÇÇ‚ÇÉ' h‚ÇÅ‚ÇÉ') : Octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ := by
  let iso‚ÇÅ‚ÇÇ := isoTriangleOfIso‚ÇÅ‚ÇÇ _ _ h‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ' e‚ÇÅ e‚ÇÇ comm‚ÇÅ‚ÇÇ
  let iso‚ÇÇ‚ÇÉ := isoTriangleOfIso‚ÇÅ‚ÇÇ _ _ h‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ' e‚ÇÇ e‚ÇÉ comm‚ÇÇ‚ÇÉ
  let iso‚ÇÅ‚ÇÉ := isoTriangleOfIso‚ÇÅ‚ÇÇ _ _ h‚ÇÅ‚ÇÉ h‚ÇÅ‚ÇÉ' e‚ÇÅ e‚ÇÉ (by
    dsimp; rw [‚Üê comm, assoc, ‚Üê comm', ‚Üê reassoc_of% comm‚ÇÅ‚ÇÇ, comm‚ÇÇ‚ÇÉ])
  have eq‚ÇÅ‚ÇÇ := iso‚ÇÅ‚ÇÇ.hom.comm‚ÇÇ
  have eq‚ÇÅ‚ÇÇ' := iso‚ÇÅ‚ÇÇ.hom.comm‚ÇÉ
  have eq‚ÇÅ‚ÇÉ := iso‚ÇÅ‚ÇÉ.hom.comm‚ÇÇ
  have eq‚ÇÅ‚ÇÉ' := iso‚ÇÅ‚ÇÉ.hom.comm‚ÇÉ
  have eq‚ÇÇ‚ÇÉ := iso‚ÇÇ‚ÇÉ.hom.comm‚ÇÇ
  have eq‚ÇÇ‚ÇÉ' := iso‚ÇÇ‚ÇÉ.hom.comm‚ÇÉ
  have rel‚ÇÅ‚ÇÇ := H.triangleMorphism‚ÇÅ.comm‚ÇÇ
  have rel‚ÇÅ‚ÇÉ := H.triangleMorphism‚ÇÅ.comm‚ÇÉ
  have rel‚ÇÇ‚ÇÇ := H.triangleMorphism‚ÇÇ.comm‚ÇÇ
  have rel‚ÇÇ‚ÇÉ := H.triangleMorphism‚ÇÇ.comm‚ÇÉ
  dsimp [iso‚ÇÅ‚ÇÇ, iso‚ÇÇ‚ÇÉ, iso‚ÇÅ‚ÇÉ] at eq‚ÇÅ‚ÇÇ eq‚ÇÅ‚ÇÇ' eq‚ÇÅ‚ÇÉ eq‚ÇÅ‚ÇÉ' eq‚ÇÇ‚ÇÉ eq‚ÇÇ‚ÇÉ' rel‚ÇÅ‚ÇÇ rel‚ÇÅ‚ÇÉ rel‚ÇÇ‚ÇÇ rel‚ÇÇ‚ÇÉ
  rw [Functor.map_id, comp_id] at rel‚ÇÅ‚ÇÉ
  rw [id_comp] at rel‚ÇÇ‚ÇÇ
  refine ‚ü®iso‚ÇÅ‚ÇÇ.hom.hom‚ÇÉ ‚â´ H.m‚ÇÅ ‚â´ iso‚ÇÅ‚ÇÉ.inv.hom‚ÇÉ,
    iso‚ÇÅ‚ÇÉ.hom.hom‚ÇÉ ‚â´ H.m‚ÇÉ ‚â´ iso‚ÇÇ‚ÇÉ.inv.hom‚ÇÉ, ?_, ?_, ?_, ?_, ?_‚ü©
  ¬∑ rw [reassoc_of% eq‚ÇÅ‚ÇÇ, ‚Üê cancel_mono iso‚ÇÅ‚ÇÉ.hom.hom‚ÇÉ, assoc, assoc, assoc, assoc,
      iso‚ÇÅ‚ÇÉ.inv_hom_id_triangle_hom‚ÇÉ, eq‚ÇÅ‚ÇÉ, reassoc_of% comm‚ÇÇ‚ÇÉ, ‚Üê rel‚ÇÅ‚ÇÇ]
    dsimp
    rw [comp_id]
  ¬∑ rw [‚Üê cancel_mono (e‚ÇÅ.hom‚ü¶(1 : ‚Ñ§)‚üß'), eq‚ÇÅ‚ÇÇ', assoc, assoc, assoc, eq‚ÇÅ‚ÇÉ',
      iso‚ÇÅ‚ÇÉ.inv_hom_id_triangle_hom‚ÇÉ_assoc, ‚Üê rel‚ÇÅ‚ÇÉ]
  ¬∑ rw [reassoc_of% eq‚ÇÅ‚ÇÉ, reassoc_of% rel‚ÇÇ‚ÇÇ, ‚Üê cancel_mono iso‚ÇÇ‚ÇÉ.hom.hom‚ÇÉ, assoc, assoc,
      iso‚ÇÇ‚ÇÉ.inv_hom_id_triangle_hom‚ÇÉ, eq‚ÇÇ‚ÇÉ]
    dsimp
    rw [comp_id]
  ¬∑ rw [‚Üê cancel_mono (e‚ÇÇ.hom‚ü¶(1 : ‚Ñ§)‚üß'), assoc, assoc, assoc,assoc, eq‚ÇÇ‚ÇÉ',
      iso‚ÇÇ‚ÇÉ.inv_hom_id_triangle_hom‚ÇÉ_assoc, ‚Üê rel‚ÇÇ‚ÇÉ, ‚Üê Functor.map_comp, comm‚ÇÅ‚ÇÇ,
      Functor.map_comp, reassoc_of% eq‚ÇÅ‚ÇÉ']
  ¬∑ refine isomorphic_distinguished _ H.mem _ ?_
    refine Triangle.isoMk _ _ (Triangle.œÄ‚ÇÉ.mapIso iso‚ÇÅ‚ÇÇ) (Triangle.œÄ‚ÇÉ.mapIso iso‚ÇÅ‚ÇÉ)
      (Triangle.œÄ‚ÇÉ.mapIso iso‚ÇÇ‚ÇÉ) (by simp) (by simp) ?_
    dsimp
    rw [assoc, ‚Üê Functor.map_comp, eq‚ÇÅ‚ÇÇ, Functor.map_comp, reassoc_of% eq‚ÇÇ‚ÇÉ']

end Octahedron

end Triangulated

open Triangulated

/-- A triangulated category is a pretriangulated category which satisfies
the octahedron axiom (TR 4), see https://stacks.math.columbia.edu/tag/05QK -/
class IsTriangulated : Prop where
  /-- the octahedron axiom (TR 4) -/
  octahedron_axiom :
    ‚àÄ {X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C}
      {u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ} {u‚ÇÅ‚ÇÉ : X‚ÇÅ ‚ü∂ X‚ÇÉ} (comm : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ)
      {v‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ} {w‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÅ‚ÇÇ : Triangle.mk u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà distTriang C)
      {v‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ} {w‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÇ‚ÇÉ : Triangle.mk u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà distTriang C)
      {v‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ} {w‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÅ‚ÇÉ : Triangle.mk u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà distTriang C),
      Nonempty (Octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ)

namespace Triangulated

variable {C}
variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C}
  {u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ} {u‚ÇÅ‚ÇÉ : X‚ÇÅ ‚ü∂ X‚ÇÉ} (comm : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ)
  {v‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ} {w‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} {h‚ÇÅ‚ÇÇ : Triangle.mk u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà distTriang C}
  {v‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ} {w‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß} {h‚ÇÇ‚ÇÉ : Triangle.mk u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà distTriang C}
  {v‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ} {w‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} {h‚ÇÅ‚ÇÉ : Triangle.mk u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà distTriang C}
  (h : Octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ)

/-- A choice of octahedron given by the octahedron axiom. -/
def someOctahedron' [IsTriangulated C] : Octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ :=
  (IsTriangulated.octahedron_axiom comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ).some

/-- A choice of octahedron given by the octahedron axiom. -/
def someOctahedron [IsTriangulated C]
    {X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C}
    {u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ} {u‚ÇÅ‚ÇÉ : X‚ÇÅ ‚ü∂ X‚ÇÉ} (comm : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ)
    {v‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ} {w‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÅ‚ÇÇ : Triangle.mk u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà distTriang C)
    {v‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ} {w‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÇ‚ÇÉ : Triangle.mk u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà distTriang C)
    {v‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ} {w‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß} (h‚ÇÅ‚ÇÉ : Triangle.mk u‚ÇÅ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà distTriang C) :
    Octahedron comm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ :=
  someOctahedron' _

end Triangulated

variable {C}

/-- Constructor for `IsTriangulated C` which shows that it suffices to obtain an octahedron
for a suitable isomorphic diagram instead of the given diagram. -/
lemma IsTriangulated.mk' (h : ‚àÄ ‚¶ÉX‚ÇÅ' X‚ÇÇ' X‚ÇÉ' : C‚¶Ñ (u‚ÇÅ‚ÇÇ' : X‚ÇÅ' ‚ü∂ X‚ÇÇ') (u‚ÇÇ‚ÇÉ' : X‚ÇÇ' ‚ü∂ X‚ÇÉ'),
    ‚àÉ (X‚ÇÅ X‚ÇÇ X‚ÇÉ Z‚ÇÅ‚ÇÇ Z‚ÇÇ‚ÇÉ Z‚ÇÅ‚ÇÉ : C) (u‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (u‚ÇÇ‚ÇÉ : X‚ÇÇ ‚ü∂ X‚ÇÉ) (e‚ÇÅ : X‚ÇÅ' ‚âÖ X‚ÇÅ) (e‚ÇÇ : X‚ÇÇ' ‚âÖ X‚ÇÇ)
    (e‚ÇÉ : X‚ÇÉ' ‚âÖ X‚ÇÉ) (_ : u‚ÇÅ‚ÇÇ' ‚â´ e‚ÇÇ.hom = e‚ÇÅ.hom ‚â´ u‚ÇÅ‚ÇÇ)
    (_ : u‚ÇÇ‚ÇÉ' ‚â´ e‚ÇÉ.hom = e‚ÇÇ.hom ‚â´ u‚ÇÇ‚ÇÉ)
    (v‚ÇÅ‚ÇÇ : X‚ÇÇ ‚ü∂ Z‚ÇÅ‚ÇÇ) (w‚ÇÅ‚ÇÇ : Z‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶1‚üß) (h‚ÇÅ‚ÇÇ : Triangle.mk u‚ÇÅ‚ÇÇ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ ‚àà distTriang C)
    (v‚ÇÇ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÇ‚ÇÉ) (w‚ÇÇ‚ÇÉ : Z‚ÇÇ‚ÇÉ ‚ü∂ X‚ÇÇ‚ü¶1‚üß) (h‚ÇÇ‚ÇÉ : Triangle.mk u‚ÇÇ‚ÇÉ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ ‚àà distTriang C)
    (v‚ÇÅ‚ÇÉ : X‚ÇÉ ‚ü∂ Z‚ÇÅ‚ÇÉ) (w‚ÇÅ‚ÇÉ : Z‚ÇÅ‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶1‚üß)
      (h‚ÇÅ‚ÇÉ : Triangle.mk (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ) v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ ‚àà distTriang C),
        Nonempty (Octahedron rfl h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ)) :
    IsTriangulated C where
  octahedron_axiom {X‚ÇÅ' X‚ÇÇ' X‚ÇÉ' Z‚ÇÅ‚ÇÇ' Z‚ÇÇ‚ÇÉ' Z‚ÇÅ‚ÇÉ' u‚ÇÅ‚ÇÇ' u‚ÇÇ‚ÇÉ' u‚ÇÅ‚ÇÉ'} comm'
    {v‚ÇÅ‚ÇÇ' w‚ÇÅ‚ÇÇ'} h‚ÇÅ‚ÇÇ' {v‚ÇÇ‚ÇÉ' w‚ÇÇ‚ÇÉ'} h‚ÇÇ‚ÇÉ' {v‚ÇÅ‚ÇÉ' w‚ÇÅ‚ÇÉ'} h‚ÇÅ‚ÇÉ' := by
    obtain ‚ü®X‚ÇÅ, X‚ÇÇ, X‚ÇÉ, Z‚ÇÅ‚ÇÇ, Z‚ÇÇ‚ÇÉ, Z‚ÇÅ‚ÇÉ, u‚ÇÅ‚ÇÇ, u‚ÇÇ‚ÇÉ, e‚ÇÅ, e‚ÇÇ, e‚ÇÉ, comm‚ÇÅ‚ÇÇ, comm‚ÇÇ‚ÇÉ,
      v‚ÇÅ‚ÇÇ, w‚ÇÅ‚ÇÇ, h‚ÇÅ‚ÇÇ, v‚ÇÇ‚ÇÉ, w‚ÇÇ‚ÇÉ, h‚ÇÇ‚ÇÉ, v‚ÇÅ‚ÇÉ, w‚ÇÅ‚ÇÉ, h‚ÇÅ‚ÇÉ, H‚ü© := h u‚ÇÅ‚ÇÇ' u‚ÇÇ‚ÇÉ'
    exact ‚ü®Octahedron.ofIso u‚ÇÅ‚ÇÇ' u‚ÇÇ‚ÇÉ' u‚ÇÅ‚ÇÉ' comm' h‚ÇÅ‚ÇÇ' h‚ÇÇ‚ÇÉ' h‚ÇÅ‚ÇÉ'
      u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ _ rfl e‚ÇÅ e‚ÇÇ e‚ÇÉ comm‚ÇÅ‚ÇÇ comm‚ÇÇ‚ÇÉ v‚ÇÅ‚ÇÇ w‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ v‚ÇÇ‚ÇÉ w‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ v‚ÇÅ‚ÇÉ w‚ÇÅ‚ÇÉ h‚ÇÅ‚ÇÉ H.some‚ü©

open Functor

namespace Triangulated

variable [IsTriangulated C]

abbrev IsTriangleMorphism (T T' : Triangle C) (u : T.obj‚ÇÅ ‚ü∂ T'.obj‚ÇÅ) (v : T.obj‚ÇÇ ‚ü∂ T'.obj‚ÇÇ)
    (w : T.obj‚ÇÉ ‚ü∂ T'.obj‚ÇÉ) :=
  (T.mor‚ÇÅ ‚â´ v = u ‚â´ T'.mor‚ÇÅ) ‚àß (T.mor‚ÇÇ ‚â´ w = v ‚â´ T'.mor‚ÇÇ) ‚àß
  (T.mor‚ÇÉ ‚â´ (shiftFunctor C 1).map u = w ‚â´ T'.mor‚ÇÉ)

/-- Doc string, why the "'"?-/
lemma NineGrid' {T_X T_Y : Triangle C} (dT_X : T_X ‚àà distinguishedTriangles)
    (dT_Y : T_Y ‚àà distinguishedTriangles) (u‚ÇÅ : T_X.obj‚ÇÅ ‚ü∂ T_Y.obj‚ÇÅ) (u‚ÇÇ : T_X.obj‚ÇÇ ‚ü∂ T_Y.obj‚ÇÇ)
    (comm : T_X.mor‚ÇÅ ‚â´ u‚ÇÇ = u‚ÇÅ ‚â´ T_Y.mor‚ÇÅ) {Z‚ÇÇ : C} (v‚ÇÇ : T_Y.obj‚ÇÇ ‚ü∂ Z‚ÇÇ) (w‚ÇÇ : Z‚ÇÇ ‚ü∂ T_X.obj‚ÇÇ‚ü¶1‚üß)
    (dT‚ÇÇ : Triangle.mk u‚ÇÇ v‚ÇÇ w‚ÇÇ ‚àà distinguishedTriangles) :
    ‚àÉ (Z‚ÇÅ Z‚ÇÉ : C) (f : Z‚ÇÅ ‚ü∂ Z‚ÇÇ) (g : Z‚ÇÇ ‚ü∂ Z‚ÇÉ) (h : Z‚ÇÉ ‚ü∂ Z‚ÇÅ‚ü¶1‚üß) (v‚ÇÅ : T_Y.obj‚ÇÅ ‚ü∂ Z‚ÇÅ)
    (w‚ÇÅ : Z‚ÇÅ ‚ü∂ T_X.obj‚ÇÅ‚ü¶1‚üß) (u‚ÇÉ : T_X.obj‚ÇÉ ‚ü∂ T_Y.obj‚ÇÉ) (v‚ÇÉ : T_Y.obj‚ÇÉ ‚ü∂ Z‚ÇÉ)
    (w‚ÇÉ : Z‚ÇÉ ‚ü∂ T_X.obj‚ÇÉ‚ü¶1‚üß),
    Triangle.mk f g h ‚àà distinguishedTriangles ‚àß
    Triangle.mk u‚ÇÅ v‚ÇÅ w‚ÇÅ ‚àà distinguishedTriangles ‚àß
    Triangle.mk u‚ÇÉ v‚ÇÉ w‚ÇÉ ‚àà distinguishedTriangles ‚àß
    IsTriangleMorphism T_X T_Y u‚ÇÅ u‚ÇÇ u‚ÇÉ ‚àß
    IsTriangleMorphism T_Y (Triangle.mk f g h) v‚ÇÅ v‚ÇÇ v‚ÇÉ ‚àß
    w‚ÇÅ ‚â´ T_X.mor‚ÇÅ‚ü¶1‚üß' = f ‚â´ w‚ÇÇ ‚àß w‚ÇÇ ‚â´ T_X.mor‚ÇÇ‚ü¶1‚üß' = g ‚â´ w‚ÇÉ ‚àß
    w‚ÇÉ ‚â´ T_X.mor‚ÇÉ‚ü¶1‚üß' = - h ‚â´ w‚ÇÅ‚ü¶1‚üß' := by
  obtain ‚ü®Z‚ÇÅ, v‚ÇÅ, w‚ÇÅ, dT‚ÇÅ‚ü© := distinguished_cocone_triangle u‚ÇÅ
  obtain ‚ü®A, a, b, dTdiag‚ü© := distinguished_cocone_triangle (T_X.mor‚ÇÅ ‚â´ u‚ÇÇ)
  set oct‚ÇÅ := someOctahedron (u‚ÇÅ‚ÇÇ := T_X.mor‚ÇÅ) (u‚ÇÇ‚ÇÉ := u‚ÇÇ) (u‚ÇÅ‚ÇÉ := T_X.mor‚ÇÅ ‚â´ u‚ÇÇ) rfl dT_X
    dT‚ÇÇ dTdiag
  set oct‚ÇÇ := someOctahedron (u‚ÇÅ‚ÇÇ := u‚ÇÅ) (u‚ÇÇ‚ÇÉ := T_Y.mor‚ÇÅ) (u‚ÇÅ‚ÇÉ := T_X.mor‚ÇÅ ‚â´ u‚ÇÇ)
    comm.symm dT‚ÇÅ dT_Y dTdiag
  obtain ‚ü®Z‚ÇÉ, g, h, dT_Z‚ü© := distinguished_cocone_triangle (oct‚ÇÇ.m‚ÇÅ ‚â´ oct‚ÇÅ.m‚ÇÉ)
  set oct‚ÇÉ := someOctahedron (u‚ÇÅ‚ÇÇ := oct‚ÇÇ.m‚ÇÅ) (u‚ÇÇ‚ÇÉ := oct‚ÇÅ.m‚ÇÉ) (u‚ÇÅ‚ÇÉ := oct‚ÇÇ.m‚ÇÅ ‚â´ oct‚ÇÅ.m‚ÇÉ) rfl
    oct‚ÇÇ.mem ((rotate_distinguished_triangle _).mp oct‚ÇÅ.mem) dT_Z
  existsi Z‚ÇÅ, Z‚ÇÉ, (oct‚ÇÇ.m‚ÇÅ ‚â´ oct‚ÇÅ.m‚ÇÉ), g, h, v‚ÇÅ, w‚ÇÅ, oct‚ÇÅ.m‚ÇÅ ‚â´ oct‚ÇÇ.m‚ÇÉ, oct‚ÇÉ.m‚ÇÅ, oct‚ÇÉ.m‚ÇÉ
  constructor
  ¬∑ exact dT_Z
  ¬∑ constructor
    ¬∑ exact dT‚ÇÅ
    ¬∑ constructor
      ¬∑ have := inv_rot_of_distTriang _ oct‚ÇÉ.mem
        refine isomorphic_distinguished _ this _ (Triangle.isoMk _ _ ?_ ?_ ?_ ?_ ?_ ?_)
        ¬∑ have := (shiftFunctorCompIsoId C 1 (-1)
              (by simp only [Int.reduceNeg, add_neg_cancel])).app T_X.obj‚ÇÉ
          simp only [Int.reduceNeg, Functor.comp_obj, Functor.id_obj] at this
          exact this.symm
        ¬∑ exact Iso.refl _
        ¬∑ exact Iso.refl _
        ¬∑ simp only [Triangle.mk_obj‚ÇÅ, Triangle.mk_mor‚ÇÉ, Triangle.mk_obj‚ÇÇ, Triangle.mk_mor‚ÇÅ,
          Triangle.invRotate_obj‚ÇÇ, Iso.refl_hom, comp_id, Triangle.invRotate_obj‚ÇÅ, Int.reduceNeg,
          Triangle.mk_obj‚ÇÉ, Iso.symm_hom, Iso.app_inv, Triangle.invRotate_mor‚ÇÅ,
          Preadditive.neg_comp, Functor.map_neg, Functor.map_comp, assoc, neg_neg]
          rw [‚Üê cancel_epi ((shiftFunctorCompIsoId C 1 (-1) (by simp)).hom.app T_X.obj‚ÇÉ)]
          rw [‚Üê cancel_mono ((shiftFunctorCompIsoId C 1 (-1) (by simp)).inv.app T_Y.obj‚ÇÉ)]
          rw [assoc]; conv_lhs => erw [‚Üê shift_shift_neg']
          simp only [Int.reduceNeg, Functor.comp_obj, Functor.id_obj, Iso.hom_inv_id_app_assoc,
            assoc, Iso.hom_inv_id_app, comp_id]
          simp only [Int.reduceNeg, Functor.map_comp]
        ¬∑ simp only [Triangle.mk_obj‚ÇÇ, Triangle.invRotate_obj‚ÇÉ, Triangle.mk_obj‚ÇÉ,
          Triangle.mk_mor‚ÇÇ, Iso.refl_hom, comp_id, Triangle.invRotate_obj‚ÇÇ, Triangle.mk_obj‚ÇÅ,
          Triangle.invRotate_mor‚ÇÇ, Triangle.mk_mor‚ÇÅ, id_comp]
        ¬∑ simp only [Triangle.mk_obj‚ÇÉ, Triangle.invRotate_obj‚ÇÅ, Int.reduceNeg, Triangle.mk_obj‚ÇÅ,
           Triangle.mk_mor‚ÇÉ, id_eq, Iso.symm_hom, Iso.app_inv, Triangle.invRotate_obj‚ÇÉ,
           Triangle.mk_obj‚ÇÇ, Iso.refl_hom, Triangle.invRotate_mor‚ÇÉ, Triangle.mk_mor‚ÇÇ, id_comp]
          rw [shift_shiftFunctorCompIsoId_inv_app]
      ¬∑ constructor
        ¬∑ constructor
          ¬∑ exact comm
          ¬∑ constructor
            ¬∑ rw [‚Üê assoc, oct‚ÇÅ.comm‚ÇÅ, assoc, oct‚ÇÇ.comm‚ÇÉ]
            ¬∑ conv_rhs => rw [assoc, ‚Üê oct‚ÇÇ.comm‚ÇÑ, ‚Üê assoc, oct‚ÇÅ.comm‚ÇÇ]
        ¬∑ constructor
          ¬∑ constructor
            ¬∑ simp only [Triangle.mk_obj‚ÇÇ, Triangle.mk_obj‚ÇÅ, Triangle.mk_mor‚ÇÅ]
              conv_rhs => rw [‚Üê assoc, oct‚ÇÇ.comm‚ÇÅ, assoc, oct‚ÇÅ.comm‚ÇÉ]
            ¬∑ constructor
              ¬∑ simp only [Triangle.mk_obj‚ÇÉ, Triangle.mk_obj‚ÇÅ, Triangle.mk_mor‚ÇÉ, Triangle.mk_obj‚ÇÇ,
                Triangle.mk_mor‚ÇÅ, Triangle.mk_mor‚ÇÇ]
                conv_lhs => congr; rw [‚Üê oct‚ÇÇ.comm‚ÇÉ]
                rw [assoc, oct‚ÇÉ.comm‚ÇÅ, ‚Üê assoc, oct‚ÇÅ.comm‚ÇÉ]
              ¬∑ exact oct‚ÇÉ.comm‚ÇÇ.symm
          ¬∑ constructor
            ¬∑ simp only [Triangle.mk_obj‚ÇÅ, Triangle.shiftFunctor_obj, Int.negOnePow_one,
              Functor.comp_obj, Triangle.mk_obj‚ÇÇ, Triangle.mk_mor‚ÇÅ, assoc, Units.neg_smul, one_smul,
              Preadditive.comp_neg]
              rw [‚Üê oct‚ÇÅ.comm‚ÇÑ, ‚Üê assoc, oct‚ÇÇ.comm‚ÇÇ]
            ¬∑ constructor
              ¬∑ rw [oct‚ÇÉ.comm‚ÇÉ]; simp only [Triangle.mk_mor‚ÇÉ]
              ¬∑ conv_rhs => congr; rw [‚Üê oct‚ÇÇ.comm‚ÇÇ]
                simp only [Triangle.mk_obj‚ÇÅ, Triangle.mk_mor‚ÇÉ, Triangle.mk_obj‚ÇÇ, Triangle.mk_mor‚ÇÅ,
                  Functor.map_comp]
                conv_lhs => congr; rfl; rw [‚Üê oct‚ÇÅ.comm‚ÇÇ]
                have := oct‚ÇÉ.comm‚ÇÑ
                simp only [Triangle.mk_obj‚ÇÅ, Triangle.mk_mor‚ÇÉ, Triangle.mk_obj‚ÇÇ, Triangle.mk_mor‚ÇÅ,
                  Preadditive.comp_neg] at this
                rw [‚Üê assoc, this]
                simp only [Functor.map_comp, Preadditive.neg_comp, assoc, neg_neg]

/-- Proposition 1.1.11 of of [BBD].
-/
lemma NineGrid {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : C} (u‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (u‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (f_X : X‚ÇÅ ‚ü∂ X‚ÇÇ) (f_Y : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
    (comm : f_X ‚â´ u‚ÇÇ = u‚ÇÅ ‚â´ f_Y) :
    ‚àÉ (X‚ÇÉ Y‚ÇÉ Z‚ÇÅ Z‚ÇÇ Z‚ÇÉ : C) (g_X : X‚ÇÇ ‚ü∂ X‚ÇÉ) (h_X : X‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶1‚üß) (g_Y : Y‚ÇÇ ‚ü∂ Y‚ÇÉ)
    (h_Y : Y‚ÇÉ ‚ü∂ Y‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß) (f : Z‚ÇÅ ‚ü∂ Z‚ÇÇ) (g : Z‚ÇÇ ‚ü∂ Z‚ÇÉ) (h : Z‚ÇÉ ‚ü∂ Z‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß) (u‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ)
    (v‚ÇÅ : Y‚ÇÅ ‚ü∂ Z‚ÇÅ) (v‚ÇÇ : Y‚ÇÇ ‚ü∂ Z‚ÇÇ) (v‚ÇÉ : Y‚ÇÉ ‚ü∂ Z‚ÇÉ) (w‚ÇÅ : Z‚ÇÅ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß) (w‚ÇÇ : Z‚ÇÇ ‚ü∂ X‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß)
    (w‚ÇÉ : Z‚ÇÉ ‚ü∂ X‚ÇÉ‚ü¶(1 : ‚Ñ§)‚üß),
    Triangle.mk f_X g_X h_X ‚àà distinguishedTriangles ‚àß
    Triangle.mk f_Y g_Y h_Y ‚àà distinguishedTriangles ‚àß
    Triangle.mk f g h ‚àà distinguishedTriangles ‚àß
    Triangle.mk u‚ÇÅ v‚ÇÅ w‚ÇÅ ‚àà distinguishedTriangles ‚àß
    Triangle.mk u‚ÇÇ v‚ÇÇ w‚ÇÇ ‚àà distinguishedTriangles ‚àß
    Triangle.mk u‚ÇÉ v‚ÇÉ w‚ÇÉ ‚àà distinguishedTriangles ‚àß
    IsTriangleMorphism (Triangle.mk f_X g_X h_X) (Triangle.mk f_Y g_Y h_Y) u‚ÇÅ u‚ÇÇ u‚ÇÉ ‚àß
    IsTriangleMorphism (Triangle.mk f_Y g_Y h_Y) (Triangle.mk f g h) v‚ÇÅ v‚ÇÇ v‚ÇÉ ‚àß
    w‚ÇÅ ‚â´ f_X‚ü¶1‚üß' = f ‚â´ w‚ÇÇ ‚àß w‚ÇÇ ‚â´ g_X‚ü¶1‚üß' = g ‚â´ w‚ÇÉ ‚àß w‚ÇÉ ‚â´ h_X‚ü¶1‚üß' = - h ‚â´ w‚ÇÅ‚ü¶1‚üß' := by
  obtain ‚ü®X‚ÇÉ, g_X, h_X, dT_X‚ü© := Pretriangulated.distinguished_cocone_triangle f_X
  obtain ‚ü®Y‚ÇÉ, g_Y, h_Y, dT_Y‚ü© := Pretriangulated.distinguished_cocone_triangle f_Y
  obtain ‚ü®Z‚ÇÇ, v‚ÇÇ, w‚ÇÇ, dT‚ÇÇ‚ü© := Pretriangulated.distinguished_cocone_triangle u‚ÇÇ
  obtain ‚ü®Z‚ÇÅ, Z‚ÇÉ, f, g, h, v‚ÇÅ, w‚ÇÅ, u‚ÇÉ, v‚ÇÉ, w‚ÇÉ, dT_Z, dT‚ÇÅ, dT‚ÇÉ, comm_XY, comm_YZ, comm‚ÇÅ, comm‚ÇÇ,
    comm‚ÇÉ‚ü© := NineGrid' dT_X dT_Y u‚ÇÅ u‚ÇÇ comm v‚ÇÇ w‚ÇÇ dT‚ÇÇ
  existsi X‚ÇÉ, Y‚ÇÉ, Z‚ÇÅ, Z‚ÇÇ, Z‚ÇÉ, g_X, h_X, g_Y, h_Y, f, g, h, u‚ÇÉ, v‚ÇÅ, v‚ÇÇ, v‚ÇÉ, w‚ÇÅ, w‚ÇÇ, w‚ÇÉ
  exact ‚ü®dT_X, dT_Y, dT_Z, dT‚ÇÅ, dT‚ÇÇ, dT‚ÇÉ, comm_XY, comm_YZ, comm‚ÇÅ, comm‚ÇÇ, comm‚ÇÉ‚ü©

end Triangulated

end CategoryTheory
