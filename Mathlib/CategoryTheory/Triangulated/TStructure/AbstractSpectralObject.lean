import Mathlib.CategoryTheory.Triangulated.SpectralObject

open CategoryTheory Category Limits Pretriangulated

variable (C : Type _) [Category C] [HasZeroObject C] [HasShift C ‚Ñ§] [Preadditive C]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]


namespace CategoryTheory

namespace Triangulated

namespace SpectralObject

structure CandidateAbstractSpectralObject where
  Œπ : Type _
  hŒπ : Category Œπ
  bot : Œπ
  top : Œπ
  isInitial_bot : IsInitial bot
  isTerminal_top : IsTerminal top
  truncLT : Œπ ‚•§ C ‚•§ C
  truncGE : Œπ ‚•§ C ‚•§ C
  truncLTObjTopIso' : truncLT.obj top ‚âÖ ùü≠ C
  truncGEObjBotIso' : truncGE.obj bot ‚âÖ ùü≠ C
  truncLTŒ¥GE : truncGE ‚ü∂ truncLT ‚ãô ((whiskeringRight C C C).obj (shiftFunctor C (1 : ‚Ñ§)))

variable {C}
variable (F : CandidateAbstractSpectralObject C)

namespace CandidateAbstractSpectralObject

instance : Bot F.Œπ := ‚ü®F.bot‚ü©
instance : Top F.Œπ := ‚ü®F.top‚ü©
instance : Category F.Œπ := F.hŒπ

def fromBot (a : F.Œπ) : ‚ä• ‚ü∂ a := F.isInitial_bot.to a
def toTop (a : F.Œπ) : a ‚ü∂ ‚ä§ := F.isTerminal_top.from a

@[reassoc (attr := simp)]
lemma comp_toTop {a b : F.Œπ} (œÜ : a ‚ü∂ b) : œÜ ‚â´ F.toTop b = F.toTop a := by
  apply F.isTerminal_top.hom_ext

@[reassoc (attr := simp)]
lemma fromBot_comp {a b : F.Œπ} (œÜ : a ‚ü∂ b) : F.fromBot a ‚â´ œÜ = F.fromBot b := by
  apply F.isInitial_bot.hom_ext

def truncLTObjTopIso : F.truncLT.obj ‚ä§ ‚âÖ ùü≠ C := F.truncLTObjTopIso'
def truncGEObjBotIso : F.truncGE.obj ‚ä• ‚âÖ ùü≠ C := F.truncGEObjBotIso'

def truncLTŒπ (a : F.Œπ) : F.truncLT.obj a ‚ü∂ ùü≠ C :=
  F.truncLT.map (F.toTop a) ‚â´ F.truncLTObjTopIso.hom

@[reassoc (attr := simp)]
lemma truncLTmap_Œπ {a b : F.Œπ} (œÜ : a ‚ü∂ b) :
    F.truncLT.map œÜ ‚â´ F.truncLTŒπ b = F.truncLTŒπ a := by
  dsimp only [truncLTŒπ]
  simp only [‚Üê Functor.map_comp_assoc, comp_toTop]

def truncGEœÄ (a : F.Œπ) : ùü≠ C ‚ü∂ F.truncGE.obj a :=
  F.truncGEObjBotIso.inv ‚â´ F.truncGE.map (F.fromBot a)

@[reassoc (attr := simp)]
lemma truncGEœÄ_map {a b : F.Œπ} (œÜ : a ‚ü∂ b) :
    F.truncGEœÄ a ‚â´ F.truncGE.map œÜ = F.truncGEœÄ b := by
  dsimp only [truncGEœÄ]
  simp only [assoc, ‚Üê Functor.map_comp, fromBot_comp]

def triangleLTGE : F.Œπ ‚•§ C ‚•§ Triangle C where
  obj a := Triangle.functorMk (F.truncLTŒπ a) (F.truncGEœÄ a) (F.truncLTŒ¥GE.app a)
  map œÜ := Triangle.functorHomMk' (F.truncLT.map œÜ) (ùüô _) ((F.truncGE.map œÜ))
    (by simp) (by simp ) (by simp)

class IsDistinguishedTriangleLTGE where
  distinguished (a : F.Œπ) (X : C) : (F.triangleLTGE.obj a).obj X ‚àà distTriang C

def truncGELT : Arrow F.Œπ ‚•§ C ‚•§ C where
  obj D := F.truncLT.obj D.right ‚ãô F.truncGE.obj D.left
  map œÜ := (F.truncLT.map œÜ.right) ‚ó´ (F.truncGE.map œÜ.left)

def triangleLTGEPrecompTruncGELT : Arrow‚ÇÇ F.Œπ ‚•§ C ‚•§ Triangle C :=
  (((whiskeringRight‚ÇÇ (Arrow‚ÇÇ F.Œπ) _ _ _).obj ((whiskeringLeft C C (Triangle C)))).obj
    (Arrow‚ÇÇ.Œ¥‚ÇÅ ‚ãô F.truncGELT)).obj (Arrow‚ÇÇ.obj‚ÇÅ ‚ãô F.triangleLTGE)

lemma triangleLTGEPrecompTruncGELT_distinguished
    [hF : F.IsDistinguishedTriangleLTGE] (D : Arrow‚ÇÇ F.Œπ) (X : C) :
    (F.triangleLTGEPrecompTruncGELT.obj D).obj X ‚àà distTriang C :=
  hF.distinguished D.X‚ÇÅ _

/-def truncLTGELTIsoTruncGELT :
  Arrow‚ÇÇ.Œ¥‚ÇÇ ‚ãô F.truncGELT ‚âÖ
    (((whiskeringRight‚ÇÇ (Arrow‚ÇÇ F.Œπ) _ _ _).obj ((whiskeringLeft C C C))).obj
      (Arrow‚ÇÇ.Œ¥‚ÇÅ ‚ãô F.truncGELT)).obj (Arrow‚ÇÇ.obj‚ÇÅ ‚ãô F.truncLT) := sorry

def truncGELTŒπ := whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ F.truncGELT

@[reassoc]
lemma truncLTGELTIsoTruncGELT_compatibility (D : Arrow‚ÇÇ F.Œπ) (X : C) :
    (F.truncLTGELTIsoTruncGELT.hom.app D).app X ‚â´
      (F.truncLTŒπ D.X‚ÇÅ).app ((F.truncGELT.obj (Arrow‚ÇÇ.Œ¥‚ÇÅ.obj D)).obj X) =
    ((F.truncGELTŒπ).app D).app X := sorry

def truncGEGELTIsoTruncGELT :
  Arrow‚ÇÇ.Œ¥‚ÇÄ ‚ãô F.truncGELT ‚âÖ
    (((whiskeringRight‚ÇÇ (Arrow‚ÇÇ F.Œπ) _ _ _).obj ((whiskeringLeft C C C))).obj
      (Arrow‚ÇÇ.Œ¥‚ÇÅ ‚ãô F.truncGELT)).obj (Arrow‚ÇÇ.obj‚ÇÅ ‚ãô F.truncGE) := sorry

def truncGELTœÄ := whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ F.truncGELT

@[reassoc]
lemma truncGEGELTIsoTruncGELT_compatibility (D : Arrow‚ÇÇ F.Œπ) (X : C) :
  (F.truncGELTœÄ.app D).app X ‚â´ (F.truncGEGELTIsoTruncGELT.hom.app D).app X =
    (F.truncGEœÄ D.X‚ÇÅ).app (((truncGELT F).obj (Arrow‚ÇÇ.Œ¥‚ÇÅ.obj D)).obj X) := sorry

def truncGELTŒ¥ : Arrow‚ÇÇ.Œ¥‚ÇÄ ‚ãô F.truncGELT ‚ü∂
    Arrow‚ÇÇ.Œ¥‚ÇÇ ‚ãô F.truncGELT ‚ãô ((whiskeringRight C C C).obj (shiftFunctor C (1 : ‚Ñ§))) := by
  refine' F.truncGEGELTIsoTruncGELT.hom ‚â´ (((whiskeringRight‚ÇÇ (Arrow‚ÇÇ F.Œπ) (C ‚•§ C) (C ‚•§ C) (C ‚•§ C)).obj
    (whiskeringLeft C C C)).obj (Arrow‚ÇÇ.Œ¥‚ÇÅ ‚ãô F.truncGELT)).map (whiskerLeft Arrow‚ÇÇ.obj‚ÇÅ F.truncLTŒ¥GE) ‚â´ _ ‚â´
    whiskerRight F.truncLTGELTIsoTruncGELT.inv
      ((whiskeringRight C C C).obj (shiftFunctor C (1 : ‚Ñ§)))
  exact { app := fun D => ùüô _ }

@[simps]
def triangle : Arrow‚ÇÇ F.Œπ ‚•§ C ‚•§ Triangle C where
  obj D := Triangle.functorMk (F.truncGELTŒπ.app D) (F.truncGELTœÄ.app D) (F.truncGELTŒ¥.app D)
  map œÜ := Triangle.functorHomMk' ((Arrow‚ÇÇ.Œ¥‚ÇÇ ‚ãô F.truncGELT).map œÜ)
      (((Arrow‚ÇÇ.Œ¥‚ÇÅ ‚ãô F.truncGELT).map œÜ)) ((((Arrow‚ÇÇ.Œ¥‚ÇÄ ‚ãô F.truncGELT).map œÜ)))
        (F.truncGELTŒπ.naturality œÜ).symm (F.truncGELTœÄ.naturality œÜ).symm
        (F.truncGELTŒ¥.naturality œÜ).symm

@[simps!]
def triangleObjIsoTriangleLTGEPrecompTruncGELTObj (D : Arrow‚ÇÇ F.Œπ) :
    F.triangle.obj D ‚âÖ F.triangleLTGEPrecompTruncGELT.obj D := by
  refine' Triangle.functorIsoMk _ _ (F.truncLTGELTIsoTruncGELT.app D) (Iso.refl _)
    (F.truncGEGELTIsoTruncGELT.app D) _ _ _
  . ext X
    dsimp [triangleLTGEPrecompTruncGELT]
    rw [comp_id]
    exact (F.truncLTGELTIsoTruncGELT_compatibility D X).symm
  . ext X
    dsimp [triangleLTGEPrecompTruncGELT]
    rw [id_comp]
    exact F.truncGEGELTIsoTruncGELT_compatibility D X
  . ext X
    dsimp [truncGELTŒ¥, triangleLTGEPrecompTruncGELT, whiskeringRight‚ÇÇ, triangleLTGE]
    erw [id_comp, assoc, assoc, ‚Üê Functor.map_comp, ‚Üê NatTrans.comp_app, Iso.inv_hom_id_app,
      NatTrans.id_app, Functor.map_id, id_comp, Functor.map_id, comp_id]

def triangleIsoTriangleLTGEPrecompTruncGELT : F.triangle ‚âÖ F.triangleLTGEPrecompTruncGELT :=
  NatIso.ofComponents F.triangleObjIsoTriangleLTGEPrecompTruncGELTObj (fun œÜ => by
    ext X
    . exact congr_app (F.truncLTGELTIsoTruncGELT.hom.naturality œÜ) X
    . dsimp [triangle, triangleLTGEPrecompTruncGELT, triangleLTGE]
      rw [comp_id, id_comp]
    . exact congr_app (F.truncGEGELTIsoTruncGELT.hom.naturality œÜ) X)

lemma triangle_distinguished
    [F.IsDistinguishedTriangleLTGE] (D : Arrow‚ÇÇ F.Œπ) (X : C) :
    (F.triangle.obj D).obj X ‚àà distTriang C :=
  isomorphic_distinguished _ (F.triangleLTGEPrecompTruncGELT_distinguished D X) _
    (((F.triangleIsoTriangleLTGEPrecompTruncGELT).app D).app X)

def spectralObject [F.IsDistinguishedTriangleLTGE] (X : C) : SpectralObject C F.Œπ where
  œâ‚ÇÅ := ((whiskeringRight (Arrow F.Œπ) _ _).obj ((evaluation C C).obj X)).obj F.truncGELT
  Œ¥ := whiskerRight F.truncGELTŒ¥ ((evaluation C C).obj X)
  distinguished' D := F.triangle_distinguished D X-/

end CandidateAbstractSpectralObject

end SpectralObject

end Triangulated

end CategoryTheory
