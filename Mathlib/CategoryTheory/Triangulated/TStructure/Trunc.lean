import Mathlib.CategoryTheory.Triangulated.TStructure.Basic

namespace CategoryTheory

open Category Limits Pretriangulated ZeroObject

namespace Triangulated

variable {C : Type _} [Category C] [Preadditive C] [HasZeroObject C] [HasShift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]
  (t : TStructure C)

namespace TStructure

lemma triangle_map_ext' (a b : ‚Ñ§) (hab : a ‚â§ b) {T T' : Triangle C} (f‚ÇÅ f‚ÇÇ : T ‚ü∂ T')
    (hT : T ‚àà distTriang C) (hT' : T' ‚àà distTriang C)
    (h‚ÇÄ : T.obj‚ÇÅ ‚àà t.setLE a)
    (h‚ÇÅ' : T'.obj‚ÇÉ ‚àà t.setGE b)
    (H : f‚ÇÅ.hom‚ÇÇ = f‚ÇÇ.hom‚ÇÇ) : f‚ÇÅ = f‚ÇÇ := by
  suffices ‚àÄ (f : T ‚ü∂ T') (_ : f.hom‚ÇÇ = 0), f = 0 by
    rw [‚Üê sub_eq_zero]
    apply this
    dsimp
    rw [H, sub_self]
  intro f hf
  ext
  . obtain ‚ü®g, hg‚ü© := covariant_yoneda_exact‚ÇÇ _ (inv_rot_of_dist_triangle _ hT') f.hom‚ÇÅ (by
      have eq := f.comm‚ÇÅ
      dsimp at eq ‚ä¢
      rw [‚Üê eq, hf, comp_zero])
    have hg' : g = 0 := t.zero g a (b+1) (by linarith) h‚ÇÄ
      (t.shift_mem_setGE b (-1) (b+1) (by linarith) _ h‚ÇÅ')
    rw [instAddCommGroupTriangleHom_zero_hom‚ÇÅ, hg, hg', zero_comp]
  . rw [hf, instAddCommGroupTriangleHom_zero_hom‚ÇÇ]
  . obtain ‚ü®g, hg‚ü© := contravariant_yoneda_exact‚ÇÉ _ hT f.hom‚ÇÉ (by rw [f.comm‚ÇÇ, hf, zero_comp])
    have hg' : g = 0 := t.zero g (a-1) b (by linarith)
      (t.shift_mem_setLE a 1 (a-1) (by linarith) _ h‚ÇÄ) h‚ÇÅ'
    rw [instAddCommGroupTriangleHom_zero_hom‚ÇÉ, hg, hg', comp_zero]

namespace TruncAux

variable (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (A : C)

noncomputable def triangle : Triangle C :=
  Triangle.mk
    (t.exists_triangle A n‚ÇÄ n‚ÇÅ h).choose_spec.choose_spec.choose_spec.choose_spec.choose
    (t.exists_triangle A n‚ÇÄ n‚ÇÅ
      h).choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose
    (t.exists_triangle A n‚ÇÄ n‚ÇÅ
      h).choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose

lemma triangle_distinguished :
    triangle t n‚ÇÄ n‚ÇÅ h A ‚àà distTriang C :=
  (t.exists_triangle A n‚ÇÄ n‚ÇÅ
      h).choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec

lemma triangle_obj‚ÇÅ_mem_setLE :
    (triangle t n‚ÇÄ n‚ÇÅ h A).obj‚ÇÅ ‚àà t.setLE n‚ÇÄ :=
  (t.exists_triangle A n‚ÇÄ n‚ÇÅ h).choose_spec.choose_spec.choose

@[simp]
lemma triangle_obj‚ÇÇ :
    (triangle t n‚ÇÄ n‚ÇÅ h A).obj‚ÇÇ = A := by rfl

lemma triangle_obj‚ÇÉ_mem_setGE :
    (triangle t n‚ÇÄ n‚ÇÅ h A).obj‚ÇÉ ‚àà t.setGE n‚ÇÅ :=
  (t.exists_triangle A n‚ÇÄ n‚ÇÅ h).choose_spec.choose_spec.choose_spec.choose

variable {A}
variable {B : C} (œÜ : A ‚ü∂ B)

lemma triangle_map_ext (f‚ÇÅ f‚ÇÇ : triangle t n‚ÇÄ n‚ÇÅ h A ‚ü∂ triangle t n‚ÇÄ n‚ÇÅ h B)
    (H : f‚ÇÅ.hom‚ÇÇ = f‚ÇÇ.hom‚ÇÇ) : f‚ÇÅ = f‚ÇÇ :=
  triangle_map_ext' t n‚ÇÄ n‚ÇÅ (by linarith) _ _
    (triangle_distinguished t n‚ÇÄ n‚ÇÅ h A) (triangle_distinguished t n‚ÇÄ n‚ÇÅ h B)
    (triangle_obj‚ÇÅ_mem_setLE _ _ _ _ _) (triangle_obj‚ÇÉ_mem_setGE _ _ _ _ _) H

-- TODO: generalize this lemma
lemma triangle_map_exists : ‚àÉ (a : (triangle t n‚ÇÄ n‚ÇÅ h A).obj‚ÇÅ ‚ü∂ (triangle t n‚ÇÄ n‚ÇÅ h B).obj‚ÇÅ)
    (c : (triangle t n‚ÇÄ n‚ÇÅ h A).obj‚ÇÉ ‚ü∂ (triangle t n‚ÇÄ n‚ÇÅ h B).obj‚ÇÉ)
    (_ : (triangle t n‚ÇÄ n‚ÇÅ h A).mor‚ÇÅ ‚â´ œÜ = a ‚â´ (triangle t n‚ÇÄ n‚ÇÅ h B).mor‚ÇÅ)
    (_ : (triangle t n‚ÇÄ n‚ÇÅ h A).mor‚ÇÇ ‚â´ c = œÜ ‚â´ (triangle t n‚ÇÄ n‚ÇÅ h B).mor‚ÇÇ),
      (triangle t n‚ÇÄ n‚ÇÅ h A).mor‚ÇÉ ‚â´ a‚ü¶(1 : ‚Ñ§)‚üß' = c ‚â´ (triangle t n‚ÇÄ n‚ÇÅ h B).mor‚ÇÉ := by
  obtain ‚ü®a, comm‚ÇÅ‚ü©  := covariant_yoneda_exact‚ÇÇ _ (triangle_distinguished t n‚ÇÄ n‚ÇÅ h B)
    ((triangle t n‚ÇÄ n‚ÇÅ h A).mor‚ÇÅ ‚â´ œÜ) (t.zero _ n‚ÇÄ n‚ÇÅ (by linarith)
      (triangle_obj‚ÇÅ_mem_setLE _ _ _ _ _) (triangle_obj‚ÇÉ_mem_setGE _ _ _ _ _))
  obtain ‚ü®c, ‚ü®comm‚ÇÇ, comm‚ÇÉ‚ü©‚ü© :=
    complete_distinguished_triangle_morphism _ _ (triangle_distinguished t n‚ÇÄ n‚ÇÅ h A)
      (triangle_distinguished t n‚ÇÄ n‚ÇÅ h B) a œÜ comm‚ÇÅ
  exact ‚ü®a, c, comm‚ÇÅ, comm‚ÇÇ, comm‚ÇÉ‚ü©

noncomputable def triangle_map : triangle t n‚ÇÄ n‚ÇÅ h A ‚ü∂ triangle t n‚ÇÄ n‚ÇÅ h B where
  hom‚ÇÅ := (triangle_map_exists t n‚ÇÄ n‚ÇÅ h œÜ).choose
  hom‚ÇÇ := œÜ
  hom‚ÇÉ := (triangle_map_exists t n‚ÇÄ n‚ÇÅ h œÜ).choose_spec.choose
  comm‚ÇÅ := (triangle_map_exists t n‚ÇÄ n‚ÇÅ h œÜ).choose_spec.choose_spec.choose
  comm‚ÇÇ := (triangle_map_exists t n‚ÇÄ n‚ÇÅ h œÜ).choose_spec.choose_spec.choose_spec.choose
  comm‚ÇÉ := (triangle_map_exists t n‚ÇÄ n‚ÇÅ h œÜ).choose_spec.choose_spec.choose_spec.choose_spec

noncomputable def triangleFunctor : C ‚•§ Triangle C where
  obj := triangle t n‚ÇÄ n‚ÇÅ h
  map œÜ := triangle_map t n‚ÇÄ n‚ÇÅ h œÜ
  map_id _ := triangle_map_ext t n‚ÇÄ n‚ÇÅ h _ _ rfl
  map_comp _ _ := triangle_map_ext t n‚ÇÄ n‚ÇÅ h _ _ rfl

lemma triangleFunctor_obj_distinguished (A : C) :
  (triangleFunctor t n‚ÇÄ n‚ÇÅ h).obj A ‚àà distTriang C :=
    triangle_distinguished t n‚ÇÄ n‚ÇÅ h A

variable (A)

@[simp]
lemma triangleFunctor_obj_obj‚ÇÇ : ((triangleFunctor t n‚ÇÄ n‚ÇÅ h).obj A).obj‚ÇÇ = A := rfl

variable {A}

@[simp]
lemma triangleFunctor_map_hom‚ÇÇ : ((triangleFunctor t n‚ÇÄ n‚ÇÅ h).map œÜ).hom‚ÇÇ = œÜ := rfl

lemma triangleFunctor_obj_obj‚ÇÅ_mem_setLE :
  ((triangleFunctor t n‚ÇÄ n‚ÇÅ h).obj A).obj‚ÇÅ ‚àà t.setLE n‚ÇÄ :=
    triangle_obj‚ÇÅ_mem_setLE _ _ _ h _

lemma triangleFunctor_obj_obj‚ÇÉ_mem_setGE :
  ((triangleFunctor t n‚ÇÄ n‚ÇÅ h).obj A).obj‚ÇÉ ‚àà t.setGE n‚ÇÅ :=
    triangle_obj‚ÇÉ_mem_setGE _ _ _ h _

noncomputable def congrTriangleFunctor (n‚ÇÄ n‚ÇÅ n‚ÇÄ' n‚ÇÅ' : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (h' : n‚ÇÄ' + 1 = n‚ÇÅ')
  (eq : n‚ÇÄ = n‚ÇÄ') :
    triangleFunctor t n‚ÇÄ n‚ÇÅ h ‚âÖ triangleFunctor t n‚ÇÄ' n‚ÇÅ' h' := eqToIso (by
  subst eq
  obtain rfl : n‚ÇÅ = n‚ÇÅ' := by linarith
  rfl)

end TruncAux

class IsLE (X : C) (n : ‚Ñ§) : Prop where
  mem : X ‚àà t.setLE n

lemma mem_of_isLE (X : C) (n : ‚Ñ§) [t.IsLE X n] : X ‚àà t.setLE n := IsLE.mem

class IsGE (X : C) (n : ‚Ñ§) : Prop where
  mem : X ‚àà t.setGE n

lemma mem_of_isGE (X : C) (n : ‚Ñ§) [t.IsGE X n] : X ‚àà t.setGE n := IsGE.mem

lemma isLE_of_iso {X Y : C} (e : X ‚âÖ Y) (n : ‚Ñ§) [t.IsLE X n] : t.IsLE Y n where
  mem := (t.setLE n).mem_of_iso e (t.mem_of_isLE X n)

lemma isGE_of_iso {X Y : C} (e : X ‚âÖ Y) (n : ‚Ñ§) [t.IsGE X n] : t.IsGE Y n where
  mem := (t.setGE n).mem_of_iso e (t.mem_of_isGE X n)

lemma isLE_of_LE (X : C) (p q : ‚Ñ§) (hpq : p ‚â§ q) [t.IsLE X p] : t.IsLE X q where
  mem := setLE_monotone t p q hpq (t.mem_of_isLE X p)

lemma isGE_of_GE (X : C) (p q : ‚Ñ§) (hpq : p ‚â§ q) [t.IsGE X q] : t.IsGE X p where
  mem := setGE_antitone t p q hpq (t.mem_of_isGE X q)

noncomputable def truncLE (n : ‚Ñ§) : C ‚•§ C :=
  TruncAux.triangleFunctor t n (n+1) rfl ‚ãô Triangle.œÄ‚ÇÅ

noncomputable def truncLEŒπ (n : ‚Ñ§) : t.truncLE n ‚ü∂ ùü≠ _ :=
  whiskerLeft (TruncAux.triangleFunctor t n (n+1) rfl) Triangle.œÄ‚ÇÅToœÄ‚ÇÇ

noncomputable def truncGE (n : ‚Ñ§) : C ‚•§ C :=
  TruncAux.triangleFunctor t (n-1) n (by linarith) ‚ãô Triangle.œÄ‚ÇÉ

noncomputable def truncGEœÄ (n : ‚Ñ§) : ùü≠ _ ‚ü∂ t.truncGE n  :=
  whiskerLeft (TruncAux.triangleFunctor t (n-1) n (by linarith)) Triangle.œÄ‚ÇÇToœÄ‚ÇÉ

instance (X : C) (n : ‚Ñ§) : t.IsLE ((t.truncLE n).obj X) n where
  mem := TruncAux.triangle_obj‚ÇÅ_mem_setLE _ _ _ rfl _

instance (X : C) (n : ‚Ñ§) : t.IsGE ((t.truncGE n).obj X) n where
  mem := TruncAux.triangle_obj‚ÇÉ_mem_setGE _ _ _ (by linarith) _

noncomputable def truncŒ¥ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
  t.truncGE n‚ÇÅ ‚ü∂ t.truncLE n‚ÇÄ ‚ãô shiftFunctor C (1 : ‚Ñ§) := by
    refine' _ ‚â´ whiskerLeft (TruncAux.triangleFunctor t n‚ÇÄ (n‚ÇÄ+1) rfl) Triangle.œÄ‚ÇÉToœÄ‚ÇÅ
    dsimp only [truncGE]
    exact whiskerRight (((TruncAux.congrTriangleFunctor t (n‚ÇÅ - 1) n‚ÇÅ n‚ÇÄ (n‚ÇÄ + 1)
      (by linarith) rfl (by linarith))).hom) Triangle.œÄ‚ÇÉ

@[simps]
noncomputable def truncTriangle (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) : C ‚•§ Triangle C where
  obj X := Triangle.mk ((t.truncLEŒπ n‚ÇÄ).app X) ((t.truncGEœÄ n‚ÇÅ).app X) ((t.truncŒ¥ n‚ÇÄ n‚ÇÅ h).app X)
  map œÜ :=
    { hom‚ÇÅ := (t.truncLE n‚ÇÄ).map œÜ
      hom‚ÇÇ := œÜ
      hom‚ÇÉ := (t.truncGE n‚ÇÅ).map œÜ
      comm‚ÇÇ := by
        dsimp
        erw [‚Üê NatTrans.naturality, Functor.id_map] }

set_option maxHeartbeats 400000 in
def truncTriangle_obj_distinguished (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    (truncTriangle t n‚ÇÄ n‚ÇÅ h).obj X ‚àà distTriang C := by
  let e := TruncAux.congrTriangleFunctor t (n‚ÇÅ - 1) n‚ÇÅ n‚ÇÄ (n‚ÇÄ + 1) (by linarith) rfl (by linarith)
  refine' isomorphic_distinguished _ (TruncAux.triangleFunctor_obj_distinguished t (n‚ÇÅ-1) n‚ÇÅ (by linarith) X) _ _
  refine' Triangle.isoMk _ _ (Triangle.œÄ‚ÇÅ.mapIso (e.app X).symm) (Iso.refl _) (Iso.refl _) _ _ _
  . dsimp [truncLEŒπ]
    rw [comp_id, ‚Üê (e.inv.app X).comm‚ÇÅ]
    dsimp [TruncAux.congrTriangleFunctor]
    simp only [eqToHom_app, Triangle.eqToHom_hom‚ÇÇ, eqToHom_refl,
      TruncAux.triangleFunctor_obj_obj‚ÇÇ, comp_id]
  . dsimp [truncGEœÄ]
    rw [comp_id, id_comp]
  . dsimp
    dsimp only [truncŒ¥]
    simp only [NatTrans.comp_app]
    dsimp only [whiskerRight, whiskerLeft, id, Triangle.œÄ‚ÇÉ, Triangle.œÄ‚ÇÉToœÄ‚ÇÅ]
    rw [id_comp, assoc, (e.inv.app X).comm‚ÇÉ, ‚Üê comp_hom‚ÇÉ_assoc,
      e.hom_inv_id_app, id_hom‚ÇÉ, id_comp]

attribute [irreducible] truncLE truncGE truncLEŒπ truncGEœÄ truncŒ¥

/-lemma isLE_iff_isIso_truncLEŒπ_app (X : C) (n : ‚Ñ§) :
    t.IsLE X n ‚Üî IsIso ((t.truncLEŒπ n).app X) := by
  constructor
  . intro h
    refine' (isIso‚ÇÅ_iff _ (t.truncTriangle_obj_distinguished n (n+1) rfl X)).2 ‚ü®_, _‚ü©
    . sorry
    . sorry
  . intro
    exact t.isLE_of_iso (asIso ((truncLEŒπ t n).app X)) n-/

/-def plus : Triangulated.Subcategory C where
  set X := ‚àÉ (n : ‚Ñ§), X ‚àà t.setGE n
  zero := ‚ü®0, by sorry‚ü©
  shift := by
    rintro X n ‚ü®i, hX‚ü©
    exact ‚ü®i - n, t.shift_mem_setGE i n (i - n) (by linarith) X hX‚ü©
  ext‚ÇÇ := sorry -/

end TStructure

end Triangulated

end CategoryTheory
