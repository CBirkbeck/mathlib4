import Mathlib.CategoryTheory.Triangulated.TStructure.Basic

namespace CategoryTheory

open Category Limits Pretriangulated ZeroObject Preadditive

namespace Triangulated

variable {C : Type _} [Category C] [Preadditive C] [HasZeroObject C] [HasShift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]
  (t : TStructure C)

namespace TStructure

lemma triangle_map_ext' (a b : ‚Ñ§) (hab : a ‚â§ b) {T T' : Triangle C} (f‚ÇÅ f‚ÇÇ : T ‚ü∂ T')
    (hT : T ‚àà distTriang C) (hT' : T' ‚àà distTriang C)
    (h‚ÇÄ : t.IsLE T.obj‚ÇÅ a) (h‚ÇÅ : t.IsGE T'.obj‚ÇÉ b)
    (H : f‚ÇÅ.hom‚ÇÇ = f‚ÇÇ.hom‚ÇÇ) : f‚ÇÅ = f‚ÇÇ := by
  suffices ‚àÄ (f : T ‚ü∂ T') (_ : f.hom‚ÇÇ = 0), f = 0 by
    rw [‚Üê sub_eq_zero]
    apply this
    dsimp
    rw [H, sub_self]
  intro f hf
  ext
  . obtain ‚ü®g, hg‚ü© := covariant_yoneda_exact‚ÇÇ _ (inv_rot_of_dist_triangle _ hT') f.hom‚ÇÅ (by
      have eq := f.comm‚ÇÅ
      dsimp at eq ‚ä¢
      rw [‚Üê eq, hf, comp_zero])
    have hg' : g = 0 := t.zero_of_isLE_of_isGE g a (b+1) (by linarith) h‚ÇÄ
      (t.isGE_shift T'.obj‚ÇÉ b (-1) (b+1) (by linarith))
    rw [instAddCommGroupTriangleHom_zero_hom‚ÇÅ, hg, hg', zero_comp]
  . rw [hf, instAddCommGroupTriangleHom_zero_hom‚ÇÇ]
  . obtain ‚ü®g, hg‚ü© := contravariant_yoneda_exact‚ÇÉ _ hT f.hom‚ÇÉ (by rw [f.comm‚ÇÇ, hf, zero_comp])
    have hg' : g = 0 := t.zero_of_isLE_of_isGE g (a-1) b (by linarith)
      (t.isLE_shift _ a 1 (a-1) (by linarith)) inferInstance
    rw [instAddCommGroupTriangleHom_zero_hom‚ÇÉ, hg, hg', comp_zero]

lemma triangle_map_exists (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ < n‚ÇÅ) (T T' : Triangle C)
    (hT : T ‚àà distTriang C) (hT' : T' ‚àà distTriang C)
    (œÜ : T.obj‚ÇÇ ‚ü∂ T'.obj‚ÇÇ)
    (h‚ÇÄ : t.IsLE T.obj‚ÇÅ n‚ÇÄ)
    (h‚ÇÅ' : t.IsGE T'.obj‚ÇÉ n‚ÇÅ) :
    ‚àÉ (f : T ‚ü∂ T'), f.hom‚ÇÇ = œÜ := by
  obtain ‚ü®a, comm‚ÇÅ‚ü© := covariant_yoneda_exact‚ÇÇ _ hT' (T.mor‚ÇÅ ‚â´ œÜ) (t.zero _ n‚ÇÄ n‚ÇÅ h)
  obtain ‚ü®c, ‚ü®comm‚ÇÇ, comm‚ÇÉ‚ü©‚ü© := complete_distinguished_triangle_morphism _ _ hT hT' a œÜ comm‚ÇÅ
  exact ‚ü®
    { hom‚ÇÅ := a
      hom‚ÇÇ := œÜ
      hom‚ÇÉ := c
      comm‚ÇÅ := comm‚ÇÅ
      comm‚ÇÇ := comm‚ÇÇ
      comm‚ÇÉ := comm‚ÇÉ }, rfl‚ü©

lemma triangle_iso_exists (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ < n‚ÇÅ) (T T' : Triangle C)
    (hT : T ‚àà distTriang C) (hT' : T' ‚àà distTriang C)
    (e : T.obj‚ÇÇ ‚âÖ T'.obj‚ÇÇ)
    (h‚ÇÄ : t.IsLE T.obj‚ÇÅ n‚ÇÄ) (h‚ÇÅ : t.IsGE T.obj‚ÇÉ n‚ÇÅ)
    (h‚ÇÄ' : t.IsLE T'.obj‚ÇÅ n‚ÇÄ) (h‚ÇÅ' : t.IsGE T'.obj‚ÇÉ n‚ÇÅ) :
    ‚àÉ (e' : T ‚âÖ T'), e'.hom.hom‚ÇÇ = e.hom := by
  obtain ‚ü®hom, hhom‚ü© := triangle_map_exists t _ _ h _ _ hT hT' e.hom h‚ÇÄ h‚ÇÅ'
  obtain ‚ü®inv, hinv‚ü© := triangle_map_exists t _ _ h _ _ hT' hT e.inv h‚ÇÄ' h‚ÇÅ
  refine' ‚ü®
    { hom := hom
      inv := inv
      hom_inv_id := triangle_map_ext' t n‚ÇÄ n‚ÇÅ (by linarith) _ _ hT hT h‚ÇÄ h‚ÇÅ
        (by simp only [comp_hom‚ÇÇ, id_hom‚ÇÇ, hhom, hinv, e.hom_inv_id])
      inv_hom_id := triangle_map_ext' t n‚ÇÄ n‚ÇÅ (by linarith) _ _ hT' hT' h‚ÇÄ' h‚ÇÅ'
        (by simp only [comp_hom‚ÇÇ, id_hom‚ÇÇ, hhom, hinv, e.inv_hom_id]) }, hhom‚ü©

namespace TruncAux

variable (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (A : C)

noncomputable def triangle : Triangle C :=
  Triangle.mk
    (t.exists_triangle A n‚ÇÄ n‚ÇÅ h).choose_spec.choose_spec.choose_spec.choose_spec.choose
    (t.exists_triangle A n‚ÇÄ n‚ÇÅ
      h).choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose
    (t.exists_triangle A n‚ÇÄ n‚ÇÅ
      h).choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose

lemma triangle_distinguished :
    triangle t n‚ÇÄ n‚ÇÅ h A ‚àà distTriang C :=
  (t.exists_triangle A n‚ÇÄ n‚ÇÅ
      h).choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec

instance triangle_obj‚ÇÅ_isLE :
    t.IsLE (triangle t n‚ÇÄ n‚ÇÅ h A).obj‚ÇÅ n‚ÇÄ :=
  ‚ü®(t.exists_triangle A n‚ÇÄ n‚ÇÅ h).choose_spec.choose_spec.choose‚ü©

@[simp]
lemma triangle_obj‚ÇÇ :
    (triangle t n‚ÇÄ n‚ÇÅ h A).obj‚ÇÇ = A := by rfl

instance triangle_obj‚ÇÉ_isGE :
    t.IsGE (triangle t n‚ÇÄ n‚ÇÅ h A).obj‚ÇÉ n‚ÇÅ :=
  ‚ü®(t.exists_triangle A n‚ÇÄ n‚ÇÅ h).choose_spec.choose_spec.choose_spec.choose‚ü©

variable {A}
variable {B : C} (œÜ : A ‚ü∂ B)

lemma triangle_map_ext (f‚ÇÅ f‚ÇÇ : triangle t n‚ÇÄ n‚ÇÅ h A ‚ü∂ triangle t n‚ÇÄ n‚ÇÅ h B)
    (H : f‚ÇÅ.hom‚ÇÇ = f‚ÇÇ.hom‚ÇÇ) : f‚ÇÅ = f‚ÇÇ :=
  triangle_map_ext' t n‚ÇÄ n‚ÇÅ (by linarith) _ _
    (triangle_distinguished t n‚ÇÄ n‚ÇÅ h A) (triangle_distinguished t n‚ÇÄ n‚ÇÅ h B)
    inferInstance inferInstance H

noncomputable def triangle_map : triangle t n‚ÇÄ n‚ÇÅ h A ‚ü∂ triangle t n‚ÇÄ n‚ÇÅ h B :=
  have H := triangle_map_exists t n‚ÇÄ n‚ÇÅ (by linarith) _ _ (triangle_distinguished t n‚ÇÄ n‚ÇÅ h A)
    (triangle_distinguished t n‚ÇÄ n‚ÇÅ h B) œÜ inferInstance inferInstance
  { hom‚ÇÅ := H.choose.hom‚ÇÅ
    hom‚ÇÇ := œÜ
    hom‚ÇÉ := H.choose.hom‚ÇÉ
    comm‚ÇÅ := by rw [‚Üê H.choose.comm‚ÇÅ, H.choose_spec]
    comm‚ÇÇ := by rw [H.choose.comm‚ÇÇ, H.choose_spec]
    comm‚ÇÉ := H.choose.comm‚ÇÉ }

noncomputable def triangleFunctor : C ‚•§ Triangle C where
  obj := triangle t n‚ÇÄ n‚ÇÅ h
  map œÜ := triangle_map t n‚ÇÄ n‚ÇÅ h œÜ
  map_id _ := triangle_map_ext t n‚ÇÄ n‚ÇÅ h _ _ rfl
  map_comp _ _ := triangle_map_ext t n‚ÇÄ n‚ÇÅ h _ _ rfl

lemma triangleFunctor_obj_distinguished (A : C) :
  (triangleFunctor t n‚ÇÄ n‚ÇÅ h).obj A ‚àà distTriang C :=
    triangle_distinguished t n‚ÇÄ n‚ÇÅ h A

variable (A)

@[simp]
lemma triangleFunctor_obj_obj‚ÇÇ : ((triangleFunctor t n‚ÇÄ n‚ÇÅ h).obj A).obj‚ÇÇ = A := rfl

variable {A}

@[simp]
lemma triangleFunctor_map_hom‚ÇÇ : ((triangleFunctor t n‚ÇÄ n‚ÇÅ h).map œÜ).hom‚ÇÇ = œÜ := rfl

instance triangleFunctor_obj_obj‚ÇÅ_mem_setLE :
    t.IsLE ((triangleFunctor t n‚ÇÄ n‚ÇÅ h).obj A).obj‚ÇÅ n‚ÇÄ := by
  dsimp [triangleFunctor]
  infer_instance

lemma triangleFunctor_obj_obj‚ÇÉ_mem_setGE :
    t.IsGE ((triangleFunctor t n‚ÇÄ n‚ÇÅ h).obj A).obj‚ÇÉ n‚ÇÅ := by
  dsimp [triangleFunctor]
  infer_instance

noncomputable def congrTriangleFunctor (n‚ÇÄ n‚ÇÅ n‚ÇÄ' n‚ÇÅ' : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (h' : n‚ÇÄ' + 1 = n‚ÇÅ')
  (eq : n‚ÇÄ = n‚ÇÄ') :
    triangleFunctor t n‚ÇÄ n‚ÇÅ h ‚âÖ triangleFunctor t n‚ÇÄ' n‚ÇÅ' h' := eqToIso (by
  subst eq
  obtain rfl : n‚ÇÅ = n‚ÇÅ' := by linarith
  rfl)

end TruncAux

noncomputable def truncLE (n : ‚Ñ§) : C ‚•§ C :=
  TruncAux.triangleFunctor t n (n+1) rfl ‚ãô Triangle.œÄ‚ÇÅ

noncomputable def truncLEŒπ (n : ‚Ñ§) : t.truncLE n ‚ü∂ ùü≠ _ :=
  whiskerLeft (TruncAux.triangleFunctor t n (n+1) rfl) Triangle.œÄ‚ÇÅToœÄ‚ÇÇ

noncomputable def truncGE (n : ‚Ñ§) : C ‚•§ C :=
  TruncAux.triangleFunctor t (n-1) n (by linarith) ‚ãô Triangle.œÄ‚ÇÉ

noncomputable def truncGEœÄ (n : ‚Ñ§) : ùü≠ _ ‚ü∂ t.truncGE n  :=
  whiskerLeft (TruncAux.triangleFunctor t (n-1) n (by linarith)) Triangle.œÄ‚ÇÇToœÄ‚ÇÉ

instance (X : C) (n : ‚Ñ§) : t.IsLE ((t.truncLE n).obj X) n := by
  dsimp [truncLE]
  infer_instance

instance (X : C) (n : ‚Ñ§) : t.IsGE ((t.truncGE n).obj X) n := by
  dsimp [truncGE, TruncAux.triangleFunctor]
  infer_instance

noncomputable def truncGEŒ¥LE (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
  t.truncGE n‚ÇÅ ‚ü∂ t.truncLE n‚ÇÄ ‚ãô shiftFunctor C (1 : ‚Ñ§) := by
    refine' _ ‚â´ whiskerLeft (TruncAux.triangleFunctor t n‚ÇÄ (n‚ÇÄ+1) rfl) Triangle.œÄ‚ÇÉToœÄ‚ÇÅ
    dsimp only [truncGE]
    exact whiskerRight (((TruncAux.congrTriangleFunctor t (n‚ÇÅ - 1) n‚ÇÅ n‚ÇÄ (n‚ÇÄ + 1)
      (by linarith) rfl (by linarith))).hom) Triangle.œÄ‚ÇÉ

@[simps!]
noncomputable def truncTriangleLESelfGEFunctor (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) : C ‚•§ Triangle C :=
  Triangle.functorMk (t.truncLEŒπ n‚ÇÄ) (t.truncGEœÄ n‚ÇÅ) (t.truncGEŒ¥LE n‚ÇÄ n‚ÇÅ h)

@[simp]
lemma truncTriangleLESelfGEFunctor_comp_œÄ‚ÇÅ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    t.truncTriangleLESelfGEFunctor n‚ÇÄ n‚ÇÅ h ‚ãô Triangle.œÄ‚ÇÅ = t.truncLE n‚ÇÄ := rfl

@[simp]
lemma truncTriangleLESelfGEFunctor_comp_œÄ‚ÇÇ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    t.truncTriangleLESelfGEFunctor n‚ÇÄ n‚ÇÅ h ‚ãô Triangle.œÄ‚ÇÇ = ùü≠ _ := rfl

@[simp]
lemma truncTriangleLESelfGEFunctor_comp_œÄ‚ÇÉ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    t.truncTriangleLESelfGEFunctor n‚ÇÄ n‚ÇÅ h ‚ãô Triangle.œÄ‚ÇÉ = t.truncGE n‚ÇÅ := rfl

@[simp]
lemma truncTriangleLESelfGEFunctor_œÄ‚ÇÅToœÄ‚ÇÇ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    whiskerLeft (t.truncTriangleLESelfGEFunctor n‚ÇÄ n‚ÇÅ h) Triangle.œÄ‚ÇÅToœÄ‚ÇÇ =
      t.truncLEŒπ n‚ÇÄ := rfl

@[simp]
lemma truncTriangleLESelfGEFunctor_œÄ‚ÇÇToœÄ‚ÇÉ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    whiskerLeft (t.truncTriangleLESelfGEFunctor n‚ÇÄ n‚ÇÅ h) Triangle.œÄ‚ÇÇToœÄ‚ÇÉ =
      t.truncGEœÄ n‚ÇÅ := rfl

@[simp]
lemma truncTriangleLESelfGEFunctor_œÄ‚ÇÉToœÄ‚ÇÅ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    whiskerLeft (t.truncTriangleLESelfGEFunctor n‚ÇÄ n‚ÇÅ h) Triangle.œÄ‚ÇÉToœÄ‚ÇÅ =
      t.truncGEŒ¥LE n‚ÇÄ n‚ÇÅ h := rfl

lemma truncTriangleLESelfGE_distinguished (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    (t.truncTriangleLESelfGEFunctor n‚ÇÄ n‚ÇÅ h).obj X ‚àà distTriang C := by
  let e := TruncAux.congrTriangleFunctor t n‚ÇÄ (n‚ÇÄ + 1) (n‚ÇÅ - 1) n‚ÇÅ rfl (by linarith) (by linarith)
  let e' := TruncAux.congrTriangleFunctor t (n‚ÇÅ-1) n‚ÇÅ n‚ÇÄ (n‚ÇÄ + 1) (by linarith) rfl (by linarith)
  have e'' : t.truncTriangleLESelfGEFunctor n‚ÇÄ n‚ÇÅ h ‚âÖ
      TruncAux.triangleFunctor t (n‚ÇÅ-1) n‚ÇÅ (by linarith) := by
    refine' Triangle.functorIsoMk _ _ (isoWhiskerRight e Triangle.œÄ‚ÇÅ) (Iso.refl _)
      (Iso.refl _) _ _ _
    . ext X
      dsimp [truncLEŒπ]
      rw [‚Üê (e.hom.app X).comm‚ÇÅ, comp_id]
      dsimp [TruncAux.congrTriangleFunctor]
      rw [eqToHom_app, Triangle.eqToHom_hom‚ÇÇ, eqToHom_refl]
      erw [comp_id]
    . obtain rfl : n‚ÇÄ = n‚ÇÅ - 1 := by linarith
      dsimp
      rw [id_comp, comp_id]
      rfl
    . ext X
      dsimp [truncGEŒ¥LE]
      rw [assoc, id_comp, ‚Üê reassoc_of% ((e'.hom.app X).comm‚ÇÉ), ‚Üê Functor.map_comp]
      dsimp [TruncAux.congrTriangleFunctor]
      simp only [eqToHom_app, Triangle.eqToHom_hom‚ÇÅ, eqToHom_trans, eqToHom_refl,
        Functor.map_id, comp_id]
  refine' isomorphic_distinguished _
    (TruncAux.triangleFunctor_obj_distinguished t (n‚ÇÅ-1) n‚ÇÅ (by linarith) X) _ _
  exact ((evaluation _ _).obj X).mapIso e''

attribute [irreducible] truncLE truncGE truncLEŒπ truncGEœÄ truncGEŒ¥LE

lemma isZero_truncLE_obj_zero (n : ‚Ñ§) : IsZero ((t.truncLE n).obj 0) := by
  let Œ¥ := (t.truncGEŒ¥LE n (n+1) rfl).app 0
  have : IsIso Œ¥ := (isIso‚ÇÉ_iff _ ((t.truncTriangleLESelfGE_distinguished n (n+1) rfl 0))).2
      ‚ü®(isZero_zero C).eq_of_tgt _ _, (isZero_zero C).eq_of_src _ _‚ü©
  have : t.IsLE ((t.truncLE n ‚ãô shiftFunctor C (1 : ‚Ñ§)).obj 0) (n-1) :=
    t.isLE_shift _ n 1 (n-1) (by linarith)
  have hŒ¥ := t.zero_of_isLE_of_isGE Œ¥ (n-1) (n+1) (by linarith)
    (t.isLE_of_iso (asIso Œ¥).symm _) (t.isGE_of_iso (asIso Œ¥) _)
  rw [IsZero.iff_id_eq_zero]
  apply (shiftFunctor C (1 : ‚Ñ§)).map_injective
  rw [Functor.map_id, Functor.map_zero, ‚Üê cancel_epi Œ¥, comp_zero, hŒ¥, zero_comp]

lemma isZero_truncGE_obj_zero (n : ‚Ñ§) : IsZero ((t.truncGE n).obj 0) := by
  apply (isIso‚ÇÅ_iff_isZero‚ÇÉ _ (t.truncTriangleLESelfGE_distinguished (n-1) n (by linarith) 0)).1
  exact ‚ü®‚ü®0, (isZero_truncLE_obj_zero t (n-1)).eq_of_src _ _, (isZero_zero _).eq_of_src _ _‚ü©‚ü©

instance (n : ‚Ñ§) : t.IsLE (0 : C) n := t.isLE_of_iso (t.isZero_truncLE_obj_zero n).isoZero n
instance (n : ‚Ñ§) : t.IsGE (0 : C) n := t.isGE_of_iso (t.isZero_truncGE_obj_zero n).isoZero n

lemma isLE_iff_isIso_truncLEŒπ_app (n : ‚Ñ§) (X : C) :
    t.IsLE X n ‚Üî IsIso ((t.truncLEŒπ n).app X) := by
  constructor
  . intro
    obtain ‚ü®e, he‚ü© := t.triangle_iso_exists n (n+1) (by linarith) _ _
      (contractible_distinguished X)
      (t.truncTriangleLESelfGE_distinguished n (n+1) rfl X) (Iso.refl X) (by dsimp ; infer_instance)
      (by dsimp ; infer_instance) (by dsimp ; infer_instance) (by dsimp ; infer_instance)
    dsimp at he
    have : (truncLEŒπ t n).app X = e.inv.hom‚ÇÅ := by
      have he' : e.inv.hom‚ÇÇ = ùüô X := by
        rw [‚Üê cancel_mono e.hom.hom‚ÇÇ, ‚Üê comp_hom‚ÇÇ, e.inv_hom_id, he]
        dsimp
        rw [id_comp]
      simpa [he'] using e.inv.comm‚ÇÅ
    rw [this]
    infer_instance
  . intro
    exact t.isLE_of_iso (asIso ((truncLEŒπ t n).app X)) n

lemma isGE_iff_isIso_truncGEœÄ_app (n : ‚Ñ§) (X : C) :
    t.IsGE X n ‚Üî IsIso ((t.truncGEœÄ n).app X) := by
  constructor
  . intro h
    obtain ‚ü®e, he‚ü© := t.triangle_iso_exists (n-1) n (by linarith) _ _
      (inv_rot_of_dist_triangle _ (contractible_distinguished X))
      (t.truncTriangleLESelfGE_distinguished (n-1) n (by linarith) X)
      (Iso.refl X)
        (t.isLE_of_iso (shiftFunctor C (-1 : ‚Ñ§)).mapZeroObject.symm _)
        (by dsimp ; infer_instance) (by dsimp ; infer_instance) (by dsimp ; infer_instance)
    dsimp at he
    have : (truncGEœÄ t n).app X = e.hom.hom‚ÇÉ := by
      have eq := e.hom.comm‚ÇÇ
      dsimp at eq
      rw [‚Üê cancel_epi e.hom.hom‚ÇÇ, ‚Üê eq, he]
    rw [this]
    infer_instance
  . intro
    exact t.isGE_of_iso (asIso ((truncGEœÄ t n).app X)).symm n

instance (X : C) (n : ‚Ñ§) [t.IsLE X n] : IsIso ((t.truncLEŒπ n).app X) := by
  rw [‚Üê isLE_iff_isIso_truncLEŒπ_app ]
  infer_instance

instance (X : C) (n : ‚Ñ§) [t.IsGE X n] : IsIso ((t.truncGEœÄ n).app X) := by
  rw [‚Üê isGE_iff_isIso_truncGEœÄ_app ]
  infer_instance

lemma isLE_iff_isZero_truncGE_obj (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    t.IsLE X n‚ÇÄ ‚Üî IsZero ((t.truncGE n‚ÇÅ).obj X) := by
  rw [t.isLE_iff_isIso_truncLEŒπ_app n‚ÇÄ X]
  exact isIso‚ÇÅ_iff_isZero‚ÇÉ _ (t.truncTriangleLESelfGE_distinguished n‚ÇÄ n‚ÇÅ h X)

lemma isGE_iff_isZero_truncLE_obj (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    t.IsGE X n‚ÇÅ ‚Üî IsZero ((t.truncLE n‚ÇÄ).obj X) := by
  rw [t.isGE_iff_isIso_truncGEœÄ_app n‚ÇÅ X]
  exact isIso‚ÇÇ_iff_isZero‚ÇÅ _ (t.truncTriangleLESelfGE_distinguished n‚ÇÄ n‚ÇÅ h X)

lemma isZero_truncGE_obj_of_isLE (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) [t.IsLE X n‚ÇÄ] :
    IsZero ((t.truncGE n‚ÇÅ).obj X) := by
  rw [‚Üê t.isLE_iff_isZero_truncGE_obj _ _ h X]
  infer_instance

lemma isZero_truncLE_obj_of_isGE (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) [t.IsGE X n‚ÇÅ] :
    IsZero ((t.truncLE n‚ÇÄ).obj X) := by
  rw [‚Üê t.isGE_iff_isZero_truncLE_obj _ _ h X]
  infer_instance

lemma from_truncGE_obj_ext (n : ‚Ñ§) (X : C) {Y : C}
    (f‚ÇÅ f‚ÇÇ : (t.truncGE n).obj X ‚ü∂ Y) (h : (t.truncGEœÄ n).app X ‚â´ f‚ÇÅ = (t.truncGEœÄ n).app X ‚â´ f‚ÇÇ)
    [t.IsGE Y n] :
    f‚ÇÅ = f‚ÇÇ := by
  suffices ‚àÄ (f : (t.truncGE n).obj X ‚ü∂ Y) (_ : (t.truncGEœÄ n).app X ‚â´ f = 0), f = 0 by
    rw [‚Üê sub_eq_zero, this (f‚ÇÅ - f‚ÇÇ) (by rw [comp_sub, sub_eq_zero, h])]
  intro f hf
  obtain ‚ü®g, hg‚ü© := contravariant_yoneda_exact‚ÇÉ _
    (t.truncTriangleLESelfGE_distinguished (n-1) n (by linarith) X) f hf
  have hg' := t.zero_of_isLE_of_isGE g (n-2) n (by linarith)
    (by dsimp ; exact t.isLE_shift _ (n-1) 1 (n-2) (by linarith)) (by dsimp ; infer_instance)
  rw [hg, hg', comp_zero]

lemma to_truncLE_obj_ext (n : ‚Ñ§) (Y : C) {X : C}
    (f‚ÇÅ f‚ÇÇ : Y ‚ü∂ (t.truncLE n).obj X) (h : f‚ÇÅ ‚â´ (t.truncLEŒπ n).app X = f‚ÇÇ ‚â´ (t.truncLEŒπ n).app X)
    [t.IsLE Y n] :
    f‚ÇÅ = f‚ÇÇ := by
  suffices ‚àÄ (f : Y ‚ü∂ (t.truncLE n).obj X) (_ : f ‚â´ (t.truncLEŒπ n).app X = 0), f = 0 by
    rw [‚Üê sub_eq_zero, this (f‚ÇÅ - f‚ÇÇ) (by rw [sub_comp, sub_eq_zero, h])]
  intro f hf
  obtain ‚ü®g, hg‚ü© := covariant_yoneda_exact‚ÇÇ _ (inv_rot_of_dist_triangle _
    (t.truncTriangleLESelfGE_distinguished n (n+1) rfl X)) f hf
  have hg' := t.zero_of_isLE_of_isGE g n (n+2) (by linarith) (by dsimp ; infer_instance)
    (by dsimp ; apply (t.isGE_shift _ (n+1) (-1) (n+2) (by linarith)))
  rw [hg, hg', zero_comp]

lemma liftTruncLE' {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) [t.IsLE X n] :
    ‚àÉ (f' : X ‚ü∂ (t.truncLE n).obj Y), f = f' ‚â´ (t.truncLEŒπ n).app Y :=
  covariant_yoneda_exact‚ÇÇ _ (t.truncTriangleLESelfGE_distinguished n (n+1) rfl Y) f
    (t.zero_of_isLE_of_isGE  _ n (n+1) (by linarith) inferInstance (by dsimp ; infer_instance))

noncomputable def liftTruncLE {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) [t.IsLE X n] :
    X ‚ü∂ (t.truncLE n).obj Y := (t.liftTruncLE' f n).choose

@[reassoc (attr := simp)]
lemma liftTruncLE_Œπ {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) [t.IsLE X n] :
    t.liftTruncLE f n ‚â´ (t.truncLEŒπ n).app Y = f :=
  (t.liftTruncLE' f n).choose_spec.symm

lemma descTruncGE' {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) [t.IsGE Y n] :
  ‚àÉ (f' : (t.truncGE n).obj X ‚ü∂ Y), f = (t.truncGEœÄ n).app X ‚â´ f' :=
  contravariant_yoneda_exact‚ÇÇ _ (t.truncTriangleLESelfGE_distinguished (n-1) n (by linarith) X) f
    (t.zero_of_isLE_of_isGE _ (n-1)  n (by linarith) (by dsimp ; infer_instance) inferInstance)

noncomputable def descTruncGE {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) [t.IsGE Y n] :
    (t.truncGE n).obj X ‚ü∂ Y := (t.descTruncGE' f n).choose

@[reassoc (attr := simp)]
lemma œÄ_descTruncGE {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) [t.IsGE Y n] :
    (t.truncGEœÄ n).app X ‚â´ t.descTruncGE f n  = f :=
  (t.descTruncGE' f n).choose_spec.symm

lemma isLE_iff_orthogonal (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    t.IsLE X n‚ÇÄ ‚Üî ‚àÄ (Y : C) (f : X ‚ü∂ Y) (_ : t.IsGE Y n‚ÇÅ), f = 0 := by
  constructor
  . intro _ Y f _
    exact t.zero f n‚ÇÄ n‚ÇÅ (by linarith)
  . intro hX
    rw [isLE_iff_isZero_truncGE_obj t n‚ÇÄ n‚ÇÅ h, IsZero.iff_id_eq_zero]
    apply t.from_truncGE_obj_ext n‚ÇÅ
    rw [comp_zero, comp_id]
    exact hX _ _ inferInstance

lemma isGE_iff_orthogonal (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    t.IsGE X n‚ÇÅ ‚Üî ‚àÄ (Y : C) (f : Y ‚ü∂ X) (_ : t.IsLE Y n‚ÇÄ), f = 0 := by
  constructor
  . intro _ Y f _
    exact t.zero f n‚ÇÄ n‚ÇÅ (by linarith)
  . intro hX
    rw [isGE_iff_isZero_truncLE_obj t n‚ÇÄ n‚ÇÅ h, IsZero.iff_id_eq_zero]
    apply t.to_truncLE_obj_ext n‚ÇÄ
    rw [zero_comp, id_comp]
    exact hX _ _ inferInstance

lemma isLE‚ÇÇ (T : Triangle C) (hT : T ‚àà distTriang C) (n : ‚Ñ§) (h‚ÇÅ : t.IsLE T.obj‚ÇÅ n)
    (h‚ÇÉ : t.IsLE T.obj‚ÇÉ n) : t.IsLE T.obj‚ÇÇ n := by
  rw [t.isLE_iff_orthogonal n (n+1) rfl]
  intro Y f hY
  obtain ‚ü®f', hf'‚ü© := contravariant_yoneda_exact‚ÇÇ _ hT f
    (t.zero _ n (n+1) (by linarith) )
  rw [hf', t.zero f' n (n+1) (by linarith), comp_zero]

lemma isGE‚ÇÇ (T : Triangle C) (hT : T ‚àà distTriang C) (n : ‚Ñ§) (h‚ÇÅ : t.IsGE T.obj‚ÇÅ n)
    (h‚ÇÉ : t.IsGE T.obj‚ÇÉ n) : t.IsGE T.obj‚ÇÇ n := by
  rw [t.isGE_iff_orthogonal (n-1) n (by linarith)]
  intro Y f hY
  obtain ‚ü®f', hf'‚ü© := covariant_yoneda_exact‚ÇÇ _ hT f (t.zero _ (n-1) n (by linarith))
  rw [hf', t.zero f' (n-1) n (by linarith), zero_comp]

def minus : Triangulated.Subcategory C where
  set X := ‚àÉ (n : ‚Ñ§), t.IsLE X n
  zero := ‚ü®0, inferInstance‚ü©
  shift := by
    rintro X n ‚ü®i, hX‚ü©
    exact ‚ü®i - n, t.isLE_shift _ i n (i - n) (by linarith)‚ü©
  ext‚ÇÇ := by
    rintro T hT ‚ü®i‚ÇÅ, hi‚ÇÅ‚ü© ‚ü®i‚ÇÉ, hi‚ÇÉ‚ü©
    exact ‚ü®max i‚ÇÅ i‚ÇÉ, t.isLE‚ÇÇ T hT _ (t.isLE_of_LE _ _ _ (le_max_left i‚ÇÅ i‚ÇÉ))
      (t.isLE_of_LE _ _ _ (le_max_right i‚ÇÅ i‚ÇÉ))‚ü©

def plus : Triangulated.Subcategory C where
  set X := ‚àÉ (n : ‚Ñ§), t.IsGE X n
  zero := ‚ü®0, inferInstance‚ü©
  shift := by
    rintro X n ‚ü®i, hX‚ü©
    exact ‚ü®i - n, t.isGE_shift _ i n (i - n) (by linarith)‚ü©
  ext‚ÇÇ := by
    rintro T hT ‚ü®i‚ÇÅ, hi‚ÇÅ‚ü© ‚ü®i‚ÇÉ, hi‚ÇÉ‚ü©
    exact ‚ü®min i‚ÇÅ i‚ÇÉ, t.isGE‚ÇÇ T hT _ (t.isGE_of_GE _ _ _ (min_le_left i‚ÇÅ i‚ÇÉ))
      (t.isGE_of_GE _ _ _ (min_le_right i‚ÇÅ i‚ÇÉ))‚ü©

def bounded : Triangulated.Subcategory C := t.plus ‚äì t.minus

noncomputable def natTransTruncLEOfLE (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ ‚â§ n‚ÇÅ) :
    t.truncLE n‚ÇÄ ‚ü∂ t.truncLE n‚ÇÅ := by
  have : ‚àÄ (X : C), t.IsLE ((truncLE t n‚ÇÄ).obj X) n‚ÇÅ := fun _ => t.isLE_of_LE  _ n‚ÇÄ n‚ÇÅ h
  exact
  { app := fun X => t.liftTruncLE ((t.truncLEŒπ n‚ÇÄ).app X) n‚ÇÅ
    naturality := fun _ _ _ => by
      apply to_truncLE_obj_ext
      dsimp
      simp }

-- false positive of unusedHavesSuffices
@[reassoc (attr := simp, nolint unusedHavesSuffices)]
lemma natTransTruncLEOfLE_Œπ_app (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ ‚â§ n‚ÇÅ) (X : C) :
    (t.natTransTruncLEOfLE n‚ÇÄ n‚ÇÅ h).app X ‚â´ (t.truncLEŒπ n‚ÇÅ).app X =
      (t.truncLEŒπ n‚ÇÄ).app X := by
  have : IsLE t ((truncLE t n‚ÇÄ).obj X) n‚ÇÅ := t.isLE_of_LE  _ n‚ÇÄ n‚ÇÅ h
  dsimp [natTransTruncLEOfLE]
  rw [t.liftTruncLE_Œπ]

@[reassoc (attr := simp)]
lemma natTransTruncLEOfLE_Œπ (a b : ‚Ñ§) (h : a ‚â§ b) :
    t.natTransTruncLEOfLE a b h ‚â´ t.truncLEŒπ b = t.truncLEŒπ a := by aesop_cat

noncomputable def natTransTruncGEOfGE (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ ‚â§ n‚ÇÅ) :
    t.truncGE n‚ÇÄ ‚ü∂ t.truncGE n‚ÇÅ := by
  have : ‚àÄ (X : C), IsGE t ((truncGE t n‚ÇÅ).obj X) n‚ÇÄ := fun _ => t.isGE_of_GE  _ n‚ÇÄ n‚ÇÅ h
  exact
  { app := fun X => t.descTruncGE ((t.truncGEœÄ n‚ÇÅ).app X) n‚ÇÄ
    naturality := fun _ _ _ => by
      apply from_truncGE_obj_ext
      dsimp
      simp only [œÄ_descTruncGE_assoc, ‚Üê NatTrans.naturality, ‚Üê NatTrans.naturality_assoc,
        œÄ_descTruncGE] }

-- false positive of unusedHavesSuffices
@[reassoc (attr := simp, nolint unusedHavesSuffices)]
lemma œÄ_natTransTruncGEOfGE_app (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ ‚â§ n‚ÇÅ) (X : C) :
    (t.truncGEœÄ n‚ÇÄ).app X ‚â´ (t.natTransTruncGEOfGE n‚ÇÄ n‚ÇÅ h).app X  =
      (t.truncGEœÄ n‚ÇÅ).app X := by
  have : IsGE t ((truncGE t n‚ÇÅ).obj X) n‚ÇÄ := t.isGE_of_GE  _ n‚ÇÄ n‚ÇÅ h
  dsimp [natTransTruncGEOfGE]
  rw [t.œÄ_descTruncGE]

lemma isIso_truncLEmap_iff {X Y : C} (f : X ‚ü∂ Y) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) :
    IsIso ((t.truncLE n‚ÇÄ).map f) ‚Üî
      ‚àÉ (Z : C) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ ((t.truncLE n‚ÇÄ).obj X)‚ü¶1‚üß)
        (_ : Triangle.mk ((t.truncLEŒπ n‚ÇÄ).app X ‚â´ f) g h ‚àà distTriang _), t.IsGE Z n‚ÇÅ := by
  constructor
  . intro hf
    refine' ‚ü®(t.truncGE n‚ÇÅ).obj Y, (t.truncGEœÄ n‚ÇÅ).app Y,
      (t.truncGEŒ¥LE n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app Y ‚â´ (inv ((t.truncLE n‚ÇÄ).map f))‚ü¶1‚üß',
      isomorphic_distinguished _ (t.truncTriangleLESelfGE_distinguished n‚ÇÄ n‚ÇÅ hn‚ÇÅ Y) _ _,
      inferInstance‚ü©
    refine' Triangle.isoMk _ _ (asIso ((t.truncLE n‚ÇÄ).map f)) (Iso.refl _) (Iso.refl _) _ _ _
    all_goals aesop_cat
  . rintro ‚ü®Z, g, h, mem, _‚ü©
    obtain ‚ü®e, he‚ü© := t.triangle_iso_exists n‚ÇÄ n‚ÇÅ (by linarith)  _ _ mem
      (t.truncTriangleLESelfGE_distinguished n‚ÇÄ n‚ÇÅ hn‚ÇÅ Y) (Iso.refl _)
      (by dsimp ; infer_instance) (by dsimp ; infer_instance)
      (by dsimp ; infer_instance) (by dsimp ; infer_instance)
    suffices ((t.truncLE n‚ÇÄ).map f) = e.hom.hom‚ÇÅ by
      rw [this]
      infer_instance
    apply to_truncLE_obj_ext
    refine' Eq.trans _ e.hom.comm‚ÇÅ
    aesop_cat

lemma isIso_truncGEmap_iff {Y Z : C} (g : Y ‚ü∂ Z) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) :
    IsIso ((t.truncGE n‚ÇÅ).map g) ‚Üî
      ‚àÉ (X : C) (f : X ‚ü∂ Y) (h : ((t.truncGE n‚ÇÅ).obj Z) ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß)
        (_ : Triangle.mk f (g ‚â´ (t.truncGEœÄ n‚ÇÅ).app Z) h ‚àà distTriang _), t.IsLE X n‚ÇÄ := by
  constructor
  . intro hf
    refine' ‚ü®(t.truncLE n‚ÇÄ).obj Y, (t.truncLEŒπ n‚ÇÄ).app Y,
      inv ((t.truncGE n‚ÇÅ).map g) ‚â´ (t.truncGEŒ¥LE n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app Y,
      isomorphic_distinguished _ (t.truncTriangleLESelfGE_distinguished n‚ÇÄ n‚ÇÅ hn‚ÇÅ Y) _ _,
      inferInstance‚ü©

    refine' Iso.symm (Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _)
      (asIso ((truncGE t n‚ÇÅ).map g)) _ _ _)
    . aesop_cat
    . dsimp
      rw [id_comp]
      exact ((t.truncGEœÄ n‚ÇÅ).naturality g).symm
    . aesop_cat
  . rintro ‚ü®X, f, h, mem, _‚ü©
    obtain ‚ü®e, he‚ü© := t.triangle_iso_exists n‚ÇÄ n‚ÇÅ (by linarith) _ _
      (t.truncTriangleLESelfGE_distinguished n‚ÇÄ n‚ÇÅ hn‚ÇÅ Y) mem (Iso.refl _)
      (by dsimp ; infer_instance) (by dsimp ; infer_instance)
      (by dsimp ; infer_instance) (by dsimp ; infer_instance)
    suffices ((t.truncGE n‚ÇÅ).map g) = e.hom.hom‚ÇÉ by
      rw [this]
      infer_instance
    apply from_truncGE_obj_ext
    refine' Eq.trans _ e.hom.comm‚ÇÇ.symm
    dsimp at he ‚ä¢
    rw [he, id_comp]
    exact ((t.truncGEœÄ n‚ÇÅ).naturality g).symm

instance (X : C) (a b : ‚Ñ§) [t.IsLE X b] : t.IsLE ((t.truncLE a).obj X) b := by
  by_cases a ‚â§ b
  . exact t.isLE_of_LE _ _ _ h
  . simp only [not_le] at h
    have : t.IsLE X a := t.isLE_of_LE X b a (by linarith)
    apply t.isLE_of_iso (show X ‚âÖ _ from (asIso ((t.truncLEŒπ a).app X)).symm)

instance (X : C) (a b : ‚Ñ§) [t.IsGE X a] : t.IsGE ((t.truncGE b).obj X) a := by
  by_cases a ‚â§ b
  . exact t.isGE_of_GE _ _ _ h
  . simp only [not_le] at h
    have : t.IsGE X b := t.isGE_of_GE X b a (by linarith)
    apply t.isGE_of_iso (show X ‚âÖ _ from asIso ((t.truncGEœÄ b).app X))

/- Now, we need the octahedron axiom -/

variable [IsTriangulated C]

lemma isIso‚ÇÅ_truncLEmap_of_GE (T : Triangle C) (hT : T ‚àà distTriang C)
    (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (h‚ÇÉ : t.IsGE T.obj‚ÇÉ n‚ÇÅ) :
    IsIso ((t.truncLE n‚ÇÄ).map T.mor‚ÇÅ) := by
  rw [isIso_truncLEmap_iff _ _ _ _ h]
  obtain ‚ü®Z, g, k, mem‚ü© := distinguished_cocone_triangle ((t.truncLEŒπ n‚ÇÄ).app T.obj‚ÇÅ ‚â´ T.mor‚ÇÅ)
  refine' ‚ü®_, _, _, mem, _‚ü©
  have H := someOctahedron rfl (t.truncTriangleLESelfGE_distinguished n‚ÇÄ n‚ÇÅ h T.obj‚ÇÅ) hT mem
  exact t.isGE‚ÇÇ _ H.mem n‚ÇÅ (by dsimp ; infer_instance) (by dsimp ; infer_instance)

lemma isIso‚ÇÇ_truncGEmap_of_LE (T : Triangle C) (hT : T ‚àà distTriang C)
    (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (h‚ÇÅ : t.IsLE T.obj‚ÇÅ n‚ÇÄ) :
    IsIso ((t.truncGE n‚ÇÅ).map T.mor‚ÇÇ) := by
  rw [isIso_truncGEmap_iff _ _ _ _ h]
  obtain ‚ü®X, f, k, mem‚ü© := distinguished_cocone_triangle‚ÇÅ (T.mor‚ÇÇ ‚â´ (t.truncGEœÄ n‚ÇÅ).app T.obj‚ÇÉ)
  refine' ‚ü®_, _, _, mem, _‚ü©
  have H := someOctahedron rfl (rot_of_dist_triangle _ hT)
    (rot_of_dist_triangle _ (t.truncTriangleLESelfGE_distinguished n‚ÇÄ n‚ÇÅ h T.obj‚ÇÉ))
    (rot_of_dist_triangle _ mem)
  have : t.IsLE (X‚ü¶(1 : ‚Ñ§)‚üß) (n‚ÇÄ-1) := t.isLE‚ÇÇ _ H.mem (n‚ÇÄ-1)
    (t.isLE_shift T.obj‚ÇÅ n‚ÇÄ 1 (n‚ÇÄ-1) (by linarith))
    (t.isLE_shift ((t.truncLE n‚ÇÄ).obj T.obj‚ÇÉ) n‚ÇÄ 1 (n‚ÇÄ-1) (by linarith))
  exact t.isLE_of_shift X n‚ÇÄ 1 (n‚ÇÄ-1) (by linarith)

instance (X : C) (a b : ‚Ñ§) [t.IsGE X a] : t.IsGE ((t.truncLE b).obj X) a := by
  rw [t.isGE_iff_isZero_truncLE_obj (a-1) a (by linarith)]
  have := t.isIso‚ÇÅ_truncLEmap_of_GE _ ((t.truncTriangleLESelfGE_distinguished b (b+1) rfl X))
    (a-1) a (by linarith) (by dsimp ; infer_instance)
  dsimp at this
  exact IsZero.of_iso (t.isZero_truncLE_obj_of_isGE (a-1) a (by linarith) X)
    (asIso ((t.truncLE (a - 1)).map ((t.truncLEŒπ b).app X)))

instance (X : C) (a b : ‚Ñ§) [t.IsLE X b] : t.IsLE ((t.truncGE a).obj X) b := by
  rw [t.isLE_iff_isZero_truncGE_obj b (b+1) rfl]
  have := t.isIso‚ÇÇ_truncGEmap_of_LE _ ((t.truncTriangleLESelfGE_distinguished (a-1) a (by linarith) X))
    b (b+1) rfl (by dsimp ; infer_instance)
  dsimp at this
  exact IsZero.of_iso (t.isZero_truncGE_obj_of_isLE b (b+1) rfl X)
    (asIso ((t.truncGE (b+1)).map ((t.truncGEœÄ  a).app X))).symm

noncomputable def truncLELEIsoTruncLE‚ÇÅ (a b : ‚Ñ§) (h : a ‚â§ b) :
    t.truncLE b ‚ãô t.truncLE a ‚âÖ t.truncLE a :=
  have : ‚àÄ (X : C), IsIso ((t.truncLE a).map ((t.truncLEŒπ b).app X)) := fun X =>
    t.isIso‚ÇÅ_truncLEmap_of_GE _ (t.truncTriangleLESelfGE_distinguished b (b+1) rfl X) a _ rfl
      (by dsimp ;exact t.isGE_of_GE _ (a+1) (b+1) (by linarith))
  NatIso.ofComponents (fun X => asIso ((t.truncLE a).map ((t.truncLEŒπ b).app X))) (fun f => by
    dsimp
    rw [‚Üê Functor.map_comp, ‚Üê Functor.map_comp, NatTrans.naturality, Functor.id_map])

@[simp]
lemma truncLELEIsoTruncLE‚ÇÅ_hom_app (a b : ‚Ñ§) (h : a ‚â§ b) (X : C) :
    (t.truncLELEIsoTruncLE‚ÇÅ a b h).hom.app X =
      (t.truncLE a).map ((t.truncLEŒπ b).app X) := rfl

noncomputable def truncLT (b : ‚Ñ§) : C ‚•§ C := t.truncLE (b-1)

noncomputable def truncLTIsoTruncLE (a b : ‚Ñ§) (h : a + 1 = b) : t.truncLT b ‚âÖ t.truncLE a :=
  eqToIso (by dsimp only [truncLT] ; congr 1 ; linarith)

noncomputable def truncLTŒπ (n : ‚Ñ§) : t.truncLT n ‚ü∂ ùü≠ _ := t.truncLEŒπ _

@[reassoc (attr := simp)]
lemma truncLTIsoTruncLE_hom_Œπ (a b : ‚Ñ§) (h : a + 1 = b) :
    (t.truncLTIsoTruncLE a b h).hom ‚â´ t.truncLEŒπ a = t.truncLTŒπ b := by
  obtain rfl : a = b - 1 := by linarith
  apply id_comp

@[reassoc (attr := simp)]
lemma truncLTIsoTruncLE_inv_Œπ (a b : ‚Ñ§) (h : a + 1 = b) :
    (t.truncLTIsoTruncLE a b h).inv ‚â´ t.truncLTŒπ b = t.truncLEŒπ a := by
  obtain rfl : a = b - 1 := by linarith
  apply id_comp

noncomputable def natTransTruncLTLEOfLE (a b : ‚Ñ§) (h : a-1 ‚â§ b) :
    t.truncLT a ‚ü∂ t.truncLE b := t.natTransTruncLEOfLE _ _ h

@[reassoc (attr := simp)]
lemma natTransTruncLTLEOfLE_Œπ_app (a b : ‚Ñ§) (h : a-1 ‚â§ b) (X : C) :
    (t.natTransTruncLTLEOfLE a b h).app X ‚â´ (t.truncLEŒπ b).app X = (t.truncLTŒπ a).app X :=
  t.natTransTruncLEOfLE_Œπ_app _ _ h X

@[reassoc (attr := simp)]
lemma natTransTruncLTLEOfLE_Œπ (a b : ‚Ñ§) (h : a-1 ‚â§ b) :
    t.natTransTruncLTLEOfLE a b h ‚â´ t.truncLEŒπ b = t.truncLTŒπ a :=
  t.natTransTruncLEOfLE_Œπ _ _ h

noncomputable def truncGT (a : ‚Ñ§) : C ‚•§ C := t.truncGE (a+1)

instance (a : ‚Ñ§) (X : C) : t.IsGE ((t.truncGT a).obj X) (a+1) := by
  dsimp [truncGT]
  infer_instance

instance (a : ‚Ñ§) (X : C) : t.IsGE ((t.truncGT (a-1)).obj X) a :=
  t.isGE_of_GE _ a (a-1+1) (by linarith)

instance (a b : ‚Ñ§) (X : C) [t.IsLE X b] : t.IsLE ((t.truncGT a).obj X) b := by
  dsimp [truncGT]
  infer_instance

noncomputable def truncGTIsoTruncGE (a b : ‚Ñ§) (h : a + 1 = b) : t.truncGT a ‚âÖ t.truncGE b :=
  eqToIso (by dsimp only [truncGT] ; congr 1)

noncomputable def truncGTœÄ (n : ‚Ñ§) : ùü≠ _ ‚ü∂ t.truncGT n := t.truncGEœÄ _

@[reassoc (attr := simp)]
lemma truncGTœÄ_comp_truncGTIsoTruncGE_hom (a b : ‚Ñ§) (h : a + 1 = b) :
    t.truncGTœÄ a ‚â´ (t.truncGTIsoTruncGE a b h).hom = t.truncGEœÄ b := by
  subst h
  apply comp_id

@[reassoc (attr := simp)]
lemma truncGEœÄ_comp_truncGTIsoTruncGE_inv (a b : ‚Ñ§) (h : a + 1 = b) :
    t.truncGEœÄ b ‚â´ (t.truncGTIsoTruncGE a b h).inv = t.truncGTœÄ a := by
  subst h
  apply comp_id

noncomputable def truncGTŒ¥LE (n : ‚Ñ§) :
    t.truncGT n ‚ü∂ t.truncLE n ‚ãô shiftFunctor C (1 : ‚Ñ§) := t.truncGEŒ¥LE _ _ rfl

@[reassoc (attr := simp)]
lemma truncGTIsoTruncGE_hom_comp_truncLEŒ¥GE (a b : ‚Ñ§) (h : a + 1 = b) :
    (t.truncGTIsoTruncGE a b h).hom ‚â´ t.truncGEŒ¥LE a b h = t.truncGTŒ¥LE a := by
  subst h
  apply id_comp

@[reassoc (attr := simp)]
lemma truncGTIsoTruncGE_inv_comp_truncLEŒ¥GT (a b : ‚Ñ§) (h : a + 1 = b) :
    (t.truncGTIsoTruncGE a b h).inv ‚â´ t.truncGTŒ¥LE a = t.truncGEŒ¥LE a b h := by
  subst h
  apply id_comp

noncomputable def truncTriangleLESelfGTFunctor (n : ‚Ñ§) : C ‚•§ Triangle C :=
  Triangle.functorMk (t.truncLEŒπ n) (t.truncGTœÄ n) (t.truncGTŒ¥LE n)

@[simp]
lemma truncTriangleLESelfGTFunctor_comp_œÄ‚ÇÅ (n : ‚Ñ§) :
    t.truncTriangleLESelfGTFunctor n ‚ãô Triangle.œÄ‚ÇÅ = t.truncLE n := rfl

@[simp]
lemma truncTriangleLESelfGTFunctor_comp_œÄ‚ÇÇ (n : ‚Ñ§) :
    t.truncTriangleLESelfGTFunctor n ‚ãô Triangle.œÄ‚ÇÇ = ùü≠ _ := rfl

@[simp]
lemma truncTriangleLESelfGTFunctor_comp_œÄ‚ÇÉ (n : ‚Ñ§) :
    t.truncTriangleLESelfGTFunctor n ‚ãô Triangle.œÄ‚ÇÉ = t.truncGT n := rfl

noncomputable def truncTriangleLESelfGTFunctorIsoTruncTriangleLESelfGEFunctor
    (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    t.truncTriangleLESelfGTFunctor n‚ÇÄ ‚âÖ t.truncTriangleLESelfGEFunctor n‚ÇÄ n‚ÇÅ h := by
  refine' Triangle.functorIsoMk' (Iso.refl _) (Iso.refl _) (t.truncGTIsoTruncGE _ _ h) _ _ _
  all_goals aesop_cat

lemma truncTriangleLESelfGT_distinguished (n : ‚Ñ§) (X : C) :
    (t.truncTriangleLESelfGTFunctor n).obj X ‚àà distTriang C := by
  refine' isomorphic_distinguished _ (t.truncTriangleLESelfGE_distinguished n (n+1) rfl X) _ _
  exact ((evaluation _ _).obj X).mapIso
    (t.truncTriangleLESelfGTFunctorIsoTruncTriangleLESelfGEFunctor n (n+1) rfl)

noncomputable def truncGEŒ¥LT (n : ‚Ñ§) :
    t.truncGE n ‚ü∂ t.truncLT n ‚ãô shiftFunctor C (1 : ‚Ñ§) :=
  t.truncGEŒ¥LE (n-1) n (by linarith) ‚â´
    whiskerRight ((t.truncLTIsoTruncLE (n-1) n (by linarith)).inv) _

lemma truncGEŒ¥LT_eq (a b : ‚Ñ§) (h : a + 1 = b) :
    t.truncGEŒ¥LT b = t.truncGEŒ¥LE a b h ‚â´
      whiskerRight ((t.truncLTIsoTruncLE a b h).inv) _ := by
  obtain rfl : a = b-1 := by linarith
  rfl

@[simp]
lemma truncGEŒ¥LT_comp_whiskerRight_truncLTIsoTruncLE_hom (a b : ‚Ñ§) (h : a + 1 = b) :
    t.truncGEŒ¥LT b ‚â´ whiskerRight ((t.truncLTIsoTruncLE a b h).hom) _= t.truncGEŒ¥LE a b h := by
  simp only [t.truncGEŒ¥LT_eq a b h, assoc, ‚Üê whiskerRight_comp, Iso.inv_hom_id,
    whiskerRight_id', comp_id]

noncomputable def truncTriangleLTSelfGEFunctor (n : ‚Ñ§) : C ‚•§ Triangle C :=
  Triangle.functorMk (t.truncLTŒπ n) (t.truncGEœÄ n) (t.truncGEŒ¥LT n)

noncomputable def truncTriangleLTSelfGEFunctorIsoTruncTriangleLESelfGEFunctor
    (a b : ‚Ñ§) (h : a + 1 = b) :
    t.truncTriangleLTSelfGEFunctor b ‚âÖ t.truncTriangleLESelfGEFunctor a b h := by
  refine' Triangle.functorIsoMk' (t.truncLTIsoTruncLE _ _ h) (Iso.refl _) (Iso.refl _) _ _ _
  all_goals aesop_cat

lemma truncTriangleLTSelfGE_distinguished (n : ‚Ñ§) (X : C) :
    (t.truncTriangleLTSelfGEFunctor n).obj X ‚àà distTriang C := by
  refine' isomorphic_distinguished _
    (t.truncTriangleLESelfGE_distinguished (n-1) n (by linarith) X) _ _
  exact ((evaluation _ _).obj X).mapIso
    (t.truncTriangleLTSelfGEFunctorIsoTruncTriangleLESelfGEFunctor (n-1) n (by linarith))


noncomputable def truncGELE (a b : ‚Ñ§) : C ‚•§ C := t.truncLE b ‚ãô t.truncGE a

instance (a b : ‚Ñ§) (X : C) : t.IsLE ((t.truncGELE a b).obj X) b := by
  dsimp [truncGELE]
  infer_instance

instance (a b : ‚Ñ§) (X : C) : t.IsGE ((t.truncGELE a b).obj X) a := by
  dsimp [truncGELE]
  infer_instance

noncomputable def truncLEœÄGELE (a b : ‚Ñ§) : t.truncLE b ‚ü∂ t.truncGELE a b :=
  whiskerLeft (t.truncLE b) (t.truncGEœÄ a)

noncomputable def truncGTLE (a b : ‚Ñ§) : C ‚•§ C := t.truncLE b ‚ãô t.truncGT a

noncomputable def truncGTLEIsotruncGELE (a b a' : ‚Ñ§) (h : a + 1 = a') :
    t.truncGTLE a b ‚âÖ t.truncGELE a' b :=
  isoWhiskerLeft (t.truncLE b) (t.truncGTIsoTruncGE a a' h)

instance (a b : ‚Ñ§) (X : C) : t.IsLE ((t.truncGTLE a b).obj X) b := by
  dsimp [truncGTLE]
  infer_instance

noncomputable def truncLEœÄGTLE (a b : ‚Ñ§) : t.truncLE b ‚ü∂ t.truncGTLE a b :=
  whiskerLeft (t.truncLE b) (t.truncGTœÄ a)

noncomputable def truncGTLEŒ¥LE (a b : ‚Ñ§) :
    t.truncGTLE a b ‚ü∂ t.truncLE a ‚ãô shiftFunctor C (1 : ‚Ñ§) :=
  whiskerRight (t.truncLEŒπ b) (t.truncGT a) ‚â´ t.truncGTŒ¥LE a

noncomputable def truncTriangleLELEGTLEFunctor (a b : ‚Ñ§) (h : a ‚â§ b) : C ‚•§ Triangle C :=
  Triangle.functorMk (t.natTransTruncLEOfLE a b h) (t.truncLEœÄGTLE a b) (t.truncGTLEŒ¥LE a b)

@[simp]
lemma truncTriangleLELEGTLEFunctor_comp_œÄ‚ÇÅ (a b : ‚Ñ§) (h : a ‚â§ b) :
    t.truncTriangleLELEGTLEFunctor a b h ‚ãô Triangle.œÄ‚ÇÅ = t.truncLE a := rfl

@[simp]
lemma truncTriangleLELEGTLEFunctor_comp_œÄ‚ÇÇ (a b : ‚Ñ§) (h : a ‚â§ b) :
    t.truncTriangleLELEGTLEFunctor a b h ‚ãô Triangle.œÄ‚ÇÇ = t.truncLE b := rfl

@[simp]
lemma truncTriangleLELEGTLEFunctor_comp_œÄ‚ÇÉ (a b : ‚Ñ§) (h : a ‚â§ b) :
    t.truncTriangleLELEGTLEFunctor a b h ‚ãô Triangle.œÄ‚ÇÉ = t.truncGTLE a b := rfl

@[simp]
lemma truncTriangleLELEGTLEFunctor_œÄ‚ÇÅToœÄ‚ÇÇ (a b : ‚Ñ§) (h : a ‚â§ b) :
    whiskerLeft (t.truncTriangleLELEGTLEFunctor a b h) Triangle.œÄ‚ÇÅToœÄ‚ÇÇ =
      t.natTransTruncLEOfLE a b h := rfl

@[simp]
lemma truncTriangleLELEGTLEFunctor_œÄ‚ÇÇToœÄ‚ÇÉ (a b : ‚Ñ§) (h : a ‚â§ b) :
    whiskerLeft (t.truncTriangleLELEGTLEFunctor a b h) Triangle.œÄ‚ÇÇToœÄ‚ÇÉ = t.truncLEœÄGTLE a b := rfl

@[simp]
lemma truncTriangleLELEGTLEFunctor_œÄ‚ÇÉToœÄ‚ÇÅ (a b : ‚Ñ§) (h : a ‚â§ b) :
    whiskerLeft (t.truncTriangleLELEGTLEFunctor a b h) Triangle.œÄ‚ÇÉToœÄ‚ÇÅ =
      t.truncGTLEŒ¥LE a b := rfl

noncomputable def truncTriangleLELEGTLEFunctorIsoTruncTriangleLESelfGTFunctor
    (a b : ‚Ñ§) (h : a ‚â§ b) : t.truncTriangleLELEGTLEFunctor a b h ‚âÖ
    t.truncLE b ‚ãô t.truncTriangleLESelfGTFunctor a := by
  apply Iso.symm
  refine' Triangle.functorIsoMk _ _ (t.truncLELEIsoTruncLE‚ÇÅ a b h) (Iso.refl _) (Iso.refl _)
    _ _ _
  . ext X
    dsimp [truncTriangleLESelfGTFunctor]
    apply t.to_truncLE_obj_ext
    simp only [Functor.id_obj, comp_id, NatTrans.naturality, assoc, Functor.id_map,
      natTransTruncLEOfLE_Œπ_app_assoc]
  . dsimp only [Iso.refl]
    rw [id_comp, comp_id]
    rfl
  . ext X
    dsimp [truncTriangleLESelfGTFunctor, truncGTLEŒ¥LE, truncGT, truncGTŒ¥LE]
    simp only [id_comp, NatTrans.naturality, Functor.comp_map]

noncomputable def truncTriangleLELEGTLE_distinguished (a b : ‚Ñ§) (h : a ‚â§ b) (X : C) :
    (t.truncTriangleLELEGTLEFunctor a b h).obj X ‚àà distTriang C := by
  refine' isomorphic_distinguished _
    (t.truncTriangleLESelfGT_distinguished a ((t.truncLE b).obj X)) _ _
  exact ((evaluation _ _).obj X).mapIso
    (t.truncTriangleLELEGTLEFunctorIsoTruncTriangleLESelfGTFunctor a b h)

noncomputable def truncGTLEŒ¥LT (a b : ‚Ñ§) :
    t.truncGELE a b ‚ü∂ t.truncLT a ‚ãô shiftFunctor C (1 : ‚Ñ§) :=
  (t.truncGTLEIsotruncGELE (a-1) b a (by linarith)).inv ‚â´ t.truncGTLEŒ¥LE (a-1) b ‚â´
    whiskerRight ((t.truncLTIsoTruncLE (a-1) a (by linarith)).inv) _

noncomputable def truncTriangleLTLEGELEFunctor (a b : ‚Ñ§) (h : a-1 ‚â§ b) : C ‚•§ Triangle C :=
  Triangle.functorMk (t.natTransTruncLTLEOfLE a b h) (t.truncLEœÄGELE a b) (t.truncGTLEŒ¥LT a b)

@[simp]
lemma truncTriangleLTLEGELEFunctor_comp_œÄ‚ÇÅ (a b : ‚Ñ§) (h : a-1 ‚â§ b) :
    t.truncTriangleLTLEGELEFunctor a b h ‚ãô Triangle.œÄ‚ÇÅ = t.truncLT a := rfl

@[simp]
lemma truncTriangleLTLEGELEFunctor_comp_œÄ‚ÇÇ (a b : ‚Ñ§) (h : a-1 ‚â§ b) :
    t.truncTriangleLTLEGELEFunctor a b h ‚ãô Triangle.œÄ‚ÇÇ = t.truncLE b := rfl

@[simp]
lemma truncTriangleLTLEGELEFunctor_comp_œÄ‚ÇÉ (a b : ‚Ñ§) (h : a-1 ‚â§ b) :
    t.truncTriangleLTLEGELEFunctor a b h ‚ãô Triangle.œÄ‚ÇÉ = t.truncGELE a b := rfl

@[simp]
lemma truncTriangleLTLEGELEFunctor_œÄ‚ÇÅToœÄ‚ÇÇ (a b : ‚Ñ§) (h : a-1 ‚â§ b) :
    whiskerLeft (t.truncTriangleLTLEGELEFunctor a b h) Triangle.œÄ‚ÇÅToœÄ‚ÇÇ =
      t.natTransTruncLTLEOfLE a b h := rfl

@[simp]
lemma truncTriangleLTLEGELEFunctor_œÄ‚ÇÇToœÄ‚ÇÉ (a b : ‚Ñ§) (h : a-1 ‚â§ b) :
    whiskerLeft (t.truncTriangleLTLEGELEFunctor a b h) Triangle.œÄ‚ÇÇToœÄ‚ÇÉ =
      t.truncLEœÄGELE a b := rfl

@[simp]
lemma truncTriangleLTLEGELEFunctor_œÄ‚ÇÉToœÄ‚ÇÅ (a b : ‚Ñ§) (h : a-1 ‚â§ b) :
    whiskerLeft (t.truncTriangleLTLEGELEFunctor a b h) Triangle.œÄ‚ÇÉToœÄ‚ÇÅ =
      t.truncGTLEŒ¥LT a b := rfl


/-noncomputable def truncTriangleLTLEGELEFunctorIsoTruncTriangleLELEGTLEFunctor
    (a b a' : ‚Ñ§) (h : a - 1 ‚â§ b) (ha' : a' + 1 = a)  : t.truncTriangleLTLEGELEFunctor a b h ‚âÖ
    t.truncTriangleLELEGTLEFunctor a' b
      (by simpa only [‚Üê ha', add_sub_cancel] using h) := by
  refine' Triangle.functorIsoMk _ _ _ _ _ _ _ _
  . exact t.truncLTIsoTruncLE _ _ ha'
  . exact Iso.refl _
  . exact (t.truncGTLEIsotruncGELE a' b a ha').symm
  . dsimp
    rw [comp_id]
    sorry
  . dsimp
    rw [id_comp]
    sorry
  . dsimp
    sorry

noncomputable def truncTriangleLTLEGELE_distinguished (a b : ‚Ñ§) (h : a - 1 ‚â§ b) (X : C) :
    (t.truncTriangleLTLEGELEFunctor a b h).obj X ‚àà distTriang C := by
  refine' isomorphic_distinguished _
    (t.truncTriangleLELEGTLE_distinguished (a-1) b (by linarith) X) _ _
  exact ((evaluation _ _).obj X).mapIso
    (t.truncTriangleLTLEGELEFunctorIsoTruncTriangleLELEGTLEFunctor a b (a-1) h (by linarith))

-- this one should be for internal use only as it is isomorphic to `truncGELE`,
-- see `truncGELEIsoTruncLEGE` below
noncomputable def truncLEGE (a b : ‚Ñ§) : C ‚•§ C := t.truncGE a ‚ãô t.truncLE b

instance (a b : ‚Ñ§) (X : C) : t.IsLE ((t.truncLEGE a b).obj X) b := by
  dsimp [truncLEGE]
  infer_instance

instance (a b : ‚Ñ§) (X : C) : t.IsGE ((t.truncLEGE a b).obj X) a := by
  dsimp [truncLEGE]
  infer_instance

noncomputable def natTransTruncGELETruncLEGE (a b : ‚Ñ§) :
    t.truncGELE a b ‚ü∂ t.truncLEGE a b where
  app X := t.liftTruncLE (t.descTruncGE ((t.truncLEŒπ b).app X ‚â´ (t.truncGEœÄ a).app X) a) b
  naturality X Y f := by
    dsimp [truncLEGE, truncGELE]
    apply t.to_truncLE_obj_ext
    dsimp
    apply t.from_truncGE_obj_ext
    simp only [assoc, liftTruncLE_Œπ, NatTrans.naturality, liftTruncLE_Œπ_assoc, Functor.id_map,
      Functor.id_obj, œÄ_descTruncGE_assoc, ‚Üê NatTrans.naturality_assoc, œÄ_descTruncGE]
    rw [‚Üê NatTrans.naturality, NatTrans.naturality_assoc]

@[reassoc (attr := simp)]
lemma natTransTruncGELETruncLEGE_app_pentagon (a b : ‚Ñ§) (X : C) :
  (t.truncGEœÄ a).app _ ‚â´ (t.natTransTruncGELETruncLEGE a b).app X ‚â´ (t.truncLEŒπ b).app _ =
    (t.truncLEŒπ b).app X ‚â´ (t.truncGEœÄ a).app X := by simp [natTransTruncGELETruncLEGE]

instance (a b : ‚Ñ§) (X : C) : IsIso ((t.natTransTruncGELETruncLEGE a b).app X) := by
  by_cases a - 1 ‚â§ b
  . let u‚ÇÅ‚ÇÇ := (t.natTransTruncLTLEOfLE a b h).app X
    let u‚ÇÇ‚ÇÉ : (t.truncLE b).obj X ‚ü∂ X := (t.truncLEŒπ _).app X
    let u‚ÇÅ‚ÇÉ : _ ‚ü∂ X := (t.truncLTŒπ a).app X
    have eq : u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ = u‚ÇÅ‚ÇÉ := by simp
    have H := someOctahedron eq (t.truncTriangleLTLEGELE_distinguished a b h X)
      (t.truncTriangleLESelfGT_distinguished b X)
      (t.truncTriangleLTSelfGE_distinguished a X)
    let m‚ÇÅ : (t.truncGELE a b).obj _ ‚ü∂ _ := H.m‚ÇÅ
    have := t.isIso‚ÇÅ_truncLEmap_of_GE _ H.mem b _ rfl (by dsimp ; infer_instance)
    dsimp at this
    have eq' : t.liftTruncLE m‚ÇÅ b = (t.natTransTruncGELETruncLEGE a b).app X := by
      apply t.to_truncLE_obj_ext
      dsimp
      apply t.from_truncGE_obj_ext
      rw [t.liftTruncLE_Œπ]
      rw [t.natTransTruncGELETruncLEGE_app_pentagon a b X]
      exact H.comm‚ÇÅ
    rw [‚Üê eq']
    have fac : (t.truncLEŒπ b).app ((t.truncGE a).obj
        ((t.truncLE b).obj X)) ‚â´ t.liftTruncLE m‚ÇÅ b = (t.truncLE b).map H.m‚ÇÅ :=
      t.to_truncLE_obj_ext _ _ _ _ (by simp)
    exact IsIso.of_isIso_fac_left fac
  . refine' ‚ü®0, _, _‚ü©
    all_goals
      apply IsZero.eq_of_src
      exact t.isZero _ b a (by linarith)

instance (a b : ‚Ñ§) : IsIso (t.natTransTruncGELETruncLEGE a b) := NatIso.isIso_of_isIso_app _

noncomputable def truncGELEIsoTruncLEGE (a b : ‚Ñ§) :
    t.truncGELE a b ‚âÖ t.truncLEGE a b := asIso (t.natTransTruncGELETruncLEGE a b)-/


/-
noncomputable def truncGELEIsoTruncLEGE (a b : ‚Ñ§) :
    t.truncLE b ‚ãô t.truncGE a ‚âÖ t.truncGE a ‚ãô t.truncLE b :=
  NatIso.ofComponents (fun X => asIso (t.truncGELEIsoTruncLEGE_hom_app a b X)) (fun {X Y} f => by
    dsimp [asIso]
    apply from_truncGE_obj_ext
    dsimp
    apply to_truncLE_obj_ext
    rw [assoc, assoc, assoc, assoc, NatTrans.naturality,
      truncGELEIsoTruncLEGE_hom_app_pentagon_assoc, Functor.id_map,
      ‚Üê NatTrans.naturality_assoc,
      truncGELEIsoTruncLEGE_hom_app_pentagon,
      Functor.id_map, ‚Üê NatTrans.naturality, Functor.id_map,
      NatTrans.naturality_assoc, Functor.id_map])


noncomputable def homology (n : ‚Ñ§) : C ‚•§ t.Heart :=
  FullSubcategory.lift _ (t.truncGELE n n ‚ãô shiftFunctor C n)
    (fun _ => (t.mem_heart_iff _).2 ‚ü®t.isLE_shift _ n n 0 (add_zero n),
      t.isGE_shift _ n n 0 (add_zero n)‚ü©)


noncomputable def truncGELT (a b : ‚Ñ§) : C ‚•§ C := t.truncLT b ‚ãô t.truncGE a

noncomputable def truncGELTIsoTruncGELE (a b b' : ‚Ñ§) (hb' : b + 1 = b') :
    t.truncGELT a b' ‚âÖ t.truncLE b ‚ãô t.truncGE a :=
  isoWhiskerRight (t.truncLTIsoTruncLE b b' hb') _

noncomputable def natTransTruncLTOfLE (a b : ‚Ñ§) (h : a ‚â§ b) :
    t.truncLT a ‚ü∂ t.truncLT b :=
  t.natTransTruncLEOfLE (a-1) (b-1) (by linarith)

noncomputable def truncGELTŒ¥ (a b : ‚Ñ§) (h : a ‚â§ b) :
    t.truncGELT a b ‚ü∂ t.truncLT a ‚ãô shiftFunctor C (1 : ‚Ñ§) :=
  (t.truncGELTIsoTruncGELE a (b-1) b (by linarith)).hom ‚â´
    whiskerLeft (t.truncLEFiltrationTriangle (a-1) (b-1) (by linarith) a (by linarith))
      Triangle.œÄ‚ÇÉToœÄ‚ÇÅ ‚â´
    whiskerRight (t.truncLTIsoTruncLE (a-1) a (by linarith)).inv (shiftFunctor C (1 : ‚Ñ§))

noncomputable def truncLTFiltrationTriangle (a b : ‚Ñ§) (h : a ‚â§ b) : C ‚•§ Triangle C where
  obj X := Triangle.mk ((t.natTransTruncLTOfLE a b h).app X)
    ((t.truncGEœÄ a).app ((t.truncLT b).obj X)) ((t.truncGELTŒ¥ a b h).app X)
  map œÜ :=
    { hom‚ÇÅ := (t.truncLT a).map œÜ
      hom‚ÇÇ := (t.truncLT b).map œÜ
      hom‚ÇÉ := (t.truncGELT a b).map œÜ
      comm‚ÇÇ := by
        dsimp
        erw [‚Üê NatTrans.naturality]
        rfl }-/

end TStructure

end Triangulated

end CategoryTheory
