import Mathlib.CategoryTheory.Triangulated.TStructure.Basic

namespace CategoryTheory

open Category Limits Pretriangulated ZeroObject Preadditive

namespace Triangulated

variable {C : Type _} [Category C] [Preadditive C] [HasZeroObject C] [HasShift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]
  (t : TStructure C)

namespace TStructure

lemma triangle_map_ext' (a b : ‚Ñ§) (hab : a ‚â§ b) {T T' : Triangle C} (f‚ÇÅ f‚ÇÇ : T ‚ü∂ T')
    (hT : T ‚àà distTriang C) (hT' : T' ‚àà distTriang C)
    (h‚ÇÄ : T.obj‚ÇÅ ‚àà t.setLE a)
    (h‚ÇÅ' : T'.obj‚ÇÉ ‚àà t.setGE b)
    (H : f‚ÇÅ.hom‚ÇÇ = f‚ÇÇ.hom‚ÇÇ) : f‚ÇÅ = f‚ÇÇ := by
  suffices ‚àÄ (f : T ‚ü∂ T') (_ : f.hom‚ÇÇ = 0), f = 0 by
    rw [‚Üê sub_eq_zero]
    apply this
    dsimp
    rw [H, sub_self]
  intro f hf
  ext
  . obtain ‚ü®g, hg‚ü© := covariant_yoneda_exact‚ÇÇ _ (inv_rot_of_dist_triangle _ hT') f.hom‚ÇÅ (by
      have eq := f.comm‚ÇÅ
      dsimp at eq ‚ä¢
      rw [‚Üê eq, hf, comp_zero])
    have hg' : g = 0 := t.zero g a (b+1) (by linarith) h‚ÇÄ
      (t.shift_mem_setGE b (-1) (b+1) (by linarith) _ h‚ÇÅ')
    rw [instAddCommGroupTriangleHom_zero_hom‚ÇÅ, hg, hg', zero_comp]
  . rw [hf, instAddCommGroupTriangleHom_zero_hom‚ÇÇ]
  . obtain ‚ü®g, hg‚ü© := contravariant_yoneda_exact‚ÇÉ _ hT f.hom‚ÇÉ (by rw [f.comm‚ÇÇ, hf, zero_comp])
    have hg' : g = 0 := t.zero g (a-1) b (by linarith)
      (t.shift_mem_setLE a 1 (a-1) (by linarith) _ h‚ÇÄ) h‚ÇÅ'
    rw [instAddCommGroupTriangleHom_zero_hom‚ÇÉ, hg, hg', comp_zero]

lemma triangle_map_exists (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ < n‚ÇÅ) (T T' : Triangle C)
    (hT : T ‚àà distTriang C) (hT' : T' ‚àà distTriang C)
    (œÜ : T.obj‚ÇÇ ‚ü∂ T'.obj‚ÇÇ)
    (h‚ÇÄ : T.obj‚ÇÅ ‚àà t.setLE n‚ÇÄ)
    (h‚ÇÅ' : T'.obj‚ÇÉ ‚àà t.setGE n‚ÇÅ) :
    ‚àÉ (f : T ‚ü∂ T'), f.hom‚ÇÇ = œÜ := by
  obtain ‚ü®a, comm‚ÇÅ‚ü© := covariant_yoneda_exact‚ÇÇ _ hT' (T.mor‚ÇÅ ‚â´ œÜ)
    (t.zero _ n‚ÇÄ n‚ÇÅ h h‚ÇÄ h‚ÇÅ')
  obtain ‚ü®c, ‚ü®comm‚ÇÇ, comm‚ÇÉ‚ü©‚ü© := complete_distinguished_triangle_morphism _ _ hT hT' a œÜ comm‚ÇÅ
  exact ‚ü®
    { hom‚ÇÅ := a
      hom‚ÇÇ := œÜ
      hom‚ÇÉ := c
      comm‚ÇÅ := comm‚ÇÅ
      comm‚ÇÇ := comm‚ÇÇ
      comm‚ÇÉ := comm‚ÇÉ }, rfl‚ü©

lemma triangle_iso_exists (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ < n‚ÇÅ) (T T' : Triangle C)
    (hT : T ‚àà distTriang C) (hT' : T' ‚àà distTriang C)
    (e : T.obj‚ÇÇ ‚âÖ T'.obj‚ÇÇ)
    (h‚ÇÄ : T.obj‚ÇÅ ‚àà t.setLE n‚ÇÄ) (h‚ÇÅ : T.obj‚ÇÉ ‚àà t.setGE n‚ÇÅ)
    (h‚ÇÄ' : T'.obj‚ÇÅ ‚àà t.setLE n‚ÇÄ) (h‚ÇÅ' : T'.obj‚ÇÉ ‚àà t.setGE n‚ÇÅ) :
    ‚àÉ (e' : T ‚âÖ T'), e'.hom.hom‚ÇÇ = e.hom := by
  obtain ‚ü®hom, hhom‚ü© := triangle_map_exists t _ _ h _ _ hT hT' e.hom h‚ÇÄ h‚ÇÅ'
  obtain ‚ü®inv, hinv‚ü© := triangle_map_exists t _ _ h _ _ hT' hT e.inv h‚ÇÄ' h‚ÇÅ
  refine' ‚ü®
    { hom := hom
      inv := inv
      hom_inv_id := triangle_map_ext' t n‚ÇÄ n‚ÇÅ (by linarith) _ _ hT hT h‚ÇÄ h‚ÇÅ
        (by simp only [comp_hom‚ÇÇ, id_hom‚ÇÇ, hhom, hinv, e.hom_inv_id])
      inv_hom_id := triangle_map_ext' t n‚ÇÄ n‚ÇÅ (by linarith) _ _ hT' hT' h‚ÇÄ' h‚ÇÅ'
        (by simp only [comp_hom‚ÇÇ, id_hom‚ÇÇ, hhom, hinv, e.inv_hom_id]) }, hhom‚ü©

namespace TruncAux

variable (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (A : C)

noncomputable def triangle : Triangle C :=
  Triangle.mk
    (t.exists_triangle A n‚ÇÄ n‚ÇÅ h).choose_spec.choose_spec.choose_spec.choose_spec.choose
    (t.exists_triangle A n‚ÇÄ n‚ÇÅ
      h).choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose
    (t.exists_triangle A n‚ÇÄ n‚ÇÅ
      h).choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose

lemma triangle_distinguished :
    triangle t n‚ÇÄ n‚ÇÅ h A ‚àà distTriang C :=
  (t.exists_triangle A n‚ÇÄ n‚ÇÅ
      h).choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec

lemma triangle_obj‚ÇÅ_mem_setLE :
    (triangle t n‚ÇÄ n‚ÇÅ h A).obj‚ÇÅ ‚àà t.setLE n‚ÇÄ :=
  (t.exists_triangle A n‚ÇÄ n‚ÇÅ h).choose_spec.choose_spec.choose

@[simp]
lemma triangle_obj‚ÇÇ :
    (triangle t n‚ÇÄ n‚ÇÅ h A).obj‚ÇÇ = A := by rfl

lemma triangle_obj‚ÇÉ_mem_setGE :
    (triangle t n‚ÇÄ n‚ÇÅ h A).obj‚ÇÉ ‚àà t.setGE n‚ÇÅ :=
  (t.exists_triangle A n‚ÇÄ n‚ÇÅ h).choose_spec.choose_spec.choose_spec.choose

variable {A}
variable {B : C} (œÜ : A ‚ü∂ B)

lemma triangle_map_ext (f‚ÇÅ f‚ÇÇ : triangle t n‚ÇÄ n‚ÇÅ h A ‚ü∂ triangle t n‚ÇÄ n‚ÇÅ h B)
    (H : f‚ÇÅ.hom‚ÇÇ = f‚ÇÇ.hom‚ÇÇ) : f‚ÇÅ = f‚ÇÇ :=
  triangle_map_ext' t n‚ÇÄ n‚ÇÅ (by linarith) _ _
    (triangle_distinguished t n‚ÇÄ n‚ÇÅ h A) (triangle_distinguished t n‚ÇÄ n‚ÇÅ h B)
    (triangle_obj‚ÇÅ_mem_setLE _ _ _ _ _) (triangle_obj‚ÇÉ_mem_setGE _ _ _ _ _) H

noncomputable def triangle_map : triangle t n‚ÇÄ n‚ÇÅ h A ‚ü∂ triangle t n‚ÇÄ n‚ÇÅ h B :=
  have H := triangle_map_exists t n‚ÇÄ n‚ÇÅ (by linarith) _ _ (triangle_distinguished t n‚ÇÄ n‚ÇÅ h A)
    (triangle_distinguished t n‚ÇÄ n‚ÇÅ h B) œÜ
    (triangle_obj‚ÇÅ_mem_setLE _ _ _ _ _) (triangle_obj‚ÇÉ_mem_setGE _ _ _ _ _)
  { hom‚ÇÅ := H.choose.hom‚ÇÅ
    hom‚ÇÇ := œÜ
    hom‚ÇÉ := H.choose.hom‚ÇÉ
    comm‚ÇÅ := by rw [‚Üê H.choose.comm‚ÇÅ, H.choose_spec]
    comm‚ÇÇ := by rw [H.choose.comm‚ÇÇ, H.choose_spec]
    comm‚ÇÉ := H.choose.comm‚ÇÉ }

noncomputable def triangleFunctor : C ‚•§ Triangle C where
  obj := triangle t n‚ÇÄ n‚ÇÅ h
  map œÜ := triangle_map t n‚ÇÄ n‚ÇÅ h œÜ
  map_id _ := triangle_map_ext t n‚ÇÄ n‚ÇÅ h _ _ rfl
  map_comp _ _ := triangle_map_ext t n‚ÇÄ n‚ÇÅ h _ _ rfl

lemma triangleFunctor_obj_distinguished (A : C) :
  (triangleFunctor t n‚ÇÄ n‚ÇÅ h).obj A ‚àà distTriang C :=
    triangle_distinguished t n‚ÇÄ n‚ÇÅ h A

variable (A)

@[simp]
lemma triangleFunctor_obj_obj‚ÇÇ : ((triangleFunctor t n‚ÇÄ n‚ÇÅ h).obj A).obj‚ÇÇ = A := rfl

variable {A}

@[simp]
lemma triangleFunctor_map_hom‚ÇÇ : ((triangleFunctor t n‚ÇÄ n‚ÇÅ h).map œÜ).hom‚ÇÇ = œÜ := rfl

lemma triangleFunctor_obj_obj‚ÇÅ_mem_setLE :
  ((triangleFunctor t n‚ÇÄ n‚ÇÅ h).obj A).obj‚ÇÅ ‚àà t.setLE n‚ÇÄ :=
    triangle_obj‚ÇÅ_mem_setLE _ _ _ h _

lemma triangleFunctor_obj_obj‚ÇÉ_mem_setGE :
  ((triangleFunctor t n‚ÇÄ n‚ÇÅ h).obj A).obj‚ÇÉ ‚àà t.setGE n‚ÇÅ :=
    triangle_obj‚ÇÉ_mem_setGE _ _ _ h _

noncomputable def congrTriangleFunctor (n‚ÇÄ n‚ÇÅ n‚ÇÄ' n‚ÇÅ' : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (h' : n‚ÇÄ' + 1 = n‚ÇÅ')
  (eq : n‚ÇÄ = n‚ÇÄ') :
    triangleFunctor t n‚ÇÄ n‚ÇÅ h ‚âÖ triangleFunctor t n‚ÇÄ' n‚ÇÅ' h' := eqToIso (by
  subst eq
  obtain rfl : n‚ÇÅ = n‚ÇÅ' := by linarith
  rfl)

end TruncAux

class IsLE (X : C) (n : ‚Ñ§) : Prop where
  mem : X ‚àà t.setLE n

lemma mem_of_isLE (X : C) (n : ‚Ñ§) [t.IsLE X n] : X ‚àà t.setLE n := IsLE.mem

class IsGE (X : C) (n : ‚Ñ§) : Prop where
  mem : X ‚àà t.setGE n

lemma mem_of_isGE (X : C) (n : ‚Ñ§) [t.IsGE X n] : X ‚àà t.setGE n := IsGE.mem

lemma isLE_of_iso {X Y : C} (e : X ‚âÖ Y) (n : ‚Ñ§) [t.IsLE X n] : t.IsLE Y n where
  mem := (t.setLE n).mem_of_iso e (t.mem_of_isLE X n)

lemma isGE_of_iso {X Y : C} (e : X ‚âÖ Y) (n : ‚Ñ§) [t.IsGE X n] : t.IsGE Y n where
  mem := (t.setGE n).mem_of_iso e (t.mem_of_isGE X n)

lemma isLE_of_LE (X : C) (p q : ‚Ñ§) (hpq : p ‚â§ q) [t.IsLE X p] : t.IsLE X q where
  mem := setLE_monotone t p q hpq (t.mem_of_isLE X p)

lemma isGE_of_GE (X : C) (p q : ‚Ñ§) (hpq : p ‚â§ q) [t.IsGE X q] : t.IsGE X p where
  mem := setGE_antitone t p q hpq (t.mem_of_isGE X q)

lemma zero_of_isLE_of_isGE {X Y : C} (f : X ‚ü∂ Y) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ < n‚ÇÅ)
    [t.IsLE X n‚ÇÄ] [t.IsGE Y n‚ÇÅ] : f = 0 :=
  zero t f n‚ÇÄ n‚ÇÅ h (t.mem_of_isLE X n‚ÇÄ) (t.mem_of_isGE Y n‚ÇÅ)

noncomputable def truncLE (n : ‚Ñ§) : C ‚•§ C :=
  TruncAux.triangleFunctor t n (n+1) rfl ‚ãô Triangle.œÄ‚ÇÅ

noncomputable def truncLEŒπ (n : ‚Ñ§) : t.truncLE n ‚ü∂ ùü≠ _ :=
  whiskerLeft (TruncAux.triangleFunctor t n (n+1) rfl) Triangle.œÄ‚ÇÅToœÄ‚ÇÇ

noncomputable def truncGE (n : ‚Ñ§) : C ‚•§ C :=
  TruncAux.triangleFunctor t (n-1) n (by linarith) ‚ãô Triangle.œÄ‚ÇÉ

noncomputable def truncGEœÄ (n : ‚Ñ§) : ùü≠ _ ‚ü∂ t.truncGE n  :=
  whiskerLeft (TruncAux.triangleFunctor t (n-1) n (by linarith)) Triangle.œÄ‚ÇÇToœÄ‚ÇÉ

instance (X : C) (n : ‚Ñ§) : t.IsLE ((t.truncLE n).obj X) n where
  mem := TruncAux.triangle_obj‚ÇÅ_mem_setLE _ _ _ rfl _

instance (X : C) (n : ‚Ñ§) : t.IsGE ((t.truncGE n).obj X) n where
  mem := TruncAux.triangle_obj‚ÇÉ_mem_setGE _ _ _ (by linarith) _

noncomputable def truncŒ¥ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
  t.truncGE n‚ÇÅ ‚ü∂ t.truncLE n‚ÇÄ ‚ãô shiftFunctor C (1 : ‚Ñ§) := by
    refine' _ ‚â´ whiskerLeft (TruncAux.triangleFunctor t n‚ÇÄ (n‚ÇÄ+1) rfl) Triangle.œÄ‚ÇÉToœÄ‚ÇÅ
    dsimp only [truncGE]
    exact whiskerRight (((TruncAux.congrTriangleFunctor t (n‚ÇÅ - 1) n‚ÇÅ n‚ÇÄ (n‚ÇÄ + 1)
      (by linarith) rfl (by linarith))).hom) Triangle.œÄ‚ÇÉ

@[simps]
noncomputable def truncTriangle (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) : C ‚•§ Triangle C where
  obj X := Triangle.mk ((t.truncLEŒπ n‚ÇÄ).app X) ((t.truncGEœÄ n‚ÇÅ).app X) ((t.truncŒ¥ n‚ÇÄ n‚ÇÅ h).app X)
  map œÜ :=
    { hom‚ÇÅ := (t.truncLE n‚ÇÄ).map œÜ
      hom‚ÇÇ := œÜ
      hom‚ÇÉ := (t.truncGE n‚ÇÅ).map œÜ
      comm‚ÇÇ := by
        dsimp
        erw [‚Üê NatTrans.naturality, Functor.id_map] }

set_option maxHeartbeats 400000 in
lemma truncTriangle_obj_distinguished (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    (truncTriangle t n‚ÇÄ n‚ÇÅ h).obj X ‚àà distTriang C := by
  let e := TruncAux.congrTriangleFunctor t (n‚ÇÅ - 1) n‚ÇÅ n‚ÇÄ (n‚ÇÄ + 1) (by linarith) rfl (by linarith)
  refine' isomorphic_distinguished _ (TruncAux.triangleFunctor_obj_distinguished t (n‚ÇÅ-1) n‚ÇÅ (by linarith) X) _ _
  refine' Triangle.isoMk _ _ (Triangle.œÄ‚ÇÅ.mapIso (e.app X).symm) (Iso.refl _) (Iso.refl _) _ _ _
  . dsimp [truncLEŒπ]
    rw [comp_id, ‚Üê (e.inv.app X).comm‚ÇÅ]
    dsimp [TruncAux.congrTriangleFunctor]
    simp only [eqToHom_app, Triangle.eqToHom_hom‚ÇÇ, eqToHom_refl,
      TruncAux.triangleFunctor_obj_obj‚ÇÇ, comp_id]
  . dsimp [truncGEœÄ]
    rw [comp_id, id_comp]
  . dsimp
    dsimp only [truncŒ¥]
    simp only [NatTrans.comp_app]
    dsimp only [whiskerRight, whiskerLeft, id, Triangle.œÄ‚ÇÉ, Triangle.œÄ‚ÇÉToœÄ‚ÇÅ]
    rw [id_comp, assoc, (e.inv.app X).comm‚ÇÉ, ‚Üê comp_hom‚ÇÉ_assoc,
      e.hom_inv_id_app, id_hom‚ÇÉ, id_comp]

attribute [irreducible] truncLE truncGE truncLEŒπ truncGEœÄ truncŒ¥

lemma isZero_truncLE_obj_zero (n : ‚Ñ§) : IsZero ((t.truncLE n).obj 0) := by
  let Œ¥ := (t.truncŒ¥ n (n+1) rfl).app 0
  have : IsIso Œ¥ := (isIso‚ÇÉ_iff _ ((t.truncTriangle_obj_distinguished n (n+1) rfl 0))).2
      ‚ü®(isZero_zero C).eq_of_tgt _ _, (isZero_zero C).eq_of_src _ _‚ü©
  have hŒ¥ := t.zero Œ¥ (n-1) (n+1) (by linarith) (Set.mem_of_iso _ (asIso Œ¥).symm
    (t.shift_mem_setLE n 1 (n-1) (by linarith) _ (t.mem_of_isLE _ _)))
    (Set.mem_of_iso _ (asIso Œ¥) (t.mem_of_isGE _ _))
  rw [IsZero.iff_id_eq_zero]
  apply (shiftFunctor C (1 : ‚Ñ§)).map_injective
  rw [Functor.map_id, Functor.map_zero, ‚Üê cancel_epi Œ¥, comp_zero, hŒ¥, zero_comp]

lemma isZero_truncGE_obj_zero (n : ‚Ñ§) : IsZero ((t.truncGE n).obj 0) := by
  apply (isIso‚ÇÅ_iff_isZero‚ÇÉ _ (t.truncTriangle_obj_distinguished (n-1) n (by linarith) 0)).1
  exact ‚ü®‚ü®0, (isZero_truncLE_obj_zero t (n-1)).eq_of_src _ _, (isZero_zero _).eq_of_src _ _‚ü©‚ü©

instance (n : ‚Ñ§) : t.IsLE (0 : C) n := t.isLE_of_iso (t.isZero_truncLE_obj_zero n).isoZero n
instance (n : ‚Ñ§) : t.IsGE (0 : C) n := t.isGE_of_iso (t.isZero_truncGE_obj_zero n).isoZero n

lemma isLE_iff_isIso_truncLEŒπ_app (n : ‚Ñ§) (X : C) :
    t.IsLE X n ‚Üî IsIso ((t.truncLEŒπ n).app X) := by
  constructor
  . intro h
    obtain ‚ü®e, he‚ü© := t.triangle_iso_exists n (n+1) (by linarith) _ _
      (contractible_distinguished X)
      (t.truncTriangle_obj_distinguished n (n+1) rfl X) (Iso.refl X) (mem_of_isLE t X n)
      (mem_of_isGE t 0 _) (by dsimp ; apply mem_of_isLE) (by dsimp ; apply mem_of_isGE)
    dsimp at he
    have : (truncLEŒπ t n).app X = e.inv.hom‚ÇÅ := by
      have he' : e.inv.hom‚ÇÇ = ùüô X := by
        rw [‚Üê cancel_mono e.hom.hom‚ÇÇ, ‚Üê comp_hom‚ÇÇ, e.inv_hom_id, he]
        dsimp
        rw [id_comp]
      simpa [he'] using e.inv.comm‚ÇÅ
    rw [this]
    infer_instance
  . intro
    exact t.isLE_of_iso (asIso ((truncLEŒπ t n).app X)) n

lemma isGE_iff_isIso_truncGEœÄ_app (n : ‚Ñ§) (X : C) :
    t.IsGE X n ‚Üî IsIso ((t.truncGEœÄ n).app X) := by
  constructor
  . intro h
    obtain ‚ü®e, he‚ü© := t.triangle_iso_exists (n-1) n (by linarith) _ _
      (inv_rot_of_dist_triangle _ (contractible_distinguished X))
      (t.truncTriangle_obj_distinguished (n-1) n (by linarith) X)
      (Iso.refl X)
        (Set.mem_of_iso _ (shiftFunctor C (-1 : ‚Ñ§)).mapZeroObject.symm (t.mem_of_isLE 0 _))
        (t.mem_of_isGE X n) (by dsimp ; apply t.mem_of_isLE) (by dsimp ; apply t.mem_of_isGE)
    dsimp at he
    have : (truncGEœÄ t n).app X = e.hom.hom‚ÇÉ := by
      have eq := e.hom.comm‚ÇÇ
      dsimp at eq
      rw [‚Üê cancel_epi e.hom.hom‚ÇÇ, ‚Üê eq, he]
    rw [this]
    infer_instance
  . intro
    exact t.isGE_of_iso (asIso ((truncGEœÄ t n).app X)).symm n

lemma isLE_iff_isZero_truncGE_obj (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    t.IsLE X n‚ÇÄ ‚Üî IsZero ((t.truncGE n‚ÇÅ).obj X) := by
  rw [t.isLE_iff_isIso_truncLEŒπ_app n‚ÇÄ X]
  exact isIso‚ÇÅ_iff_isZero‚ÇÉ _ (t.truncTriangle_obj_distinguished n‚ÇÄ n‚ÇÅ h X)

lemma isGE_iff_isZero_truncLE_obj (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    t.IsGE X n‚ÇÅ ‚Üî IsZero ((t.truncLE n‚ÇÄ).obj X) := by
  rw [t.isGE_iff_isIso_truncGEœÄ_app n‚ÇÅ X]
  exact isIso‚ÇÇ_iff_isZero‚ÇÅ _ (t.truncTriangle_obj_distinguished n‚ÇÄ n‚ÇÅ h X)

lemma from_truncGE_obj_ext (n : ‚Ñ§) (X : C) {Y : C}
    (f‚ÇÅ f‚ÇÇ : (t.truncGE n).obj X ‚ü∂ Y) (h : (t.truncGEœÄ n).app X ‚â´ f‚ÇÅ = (t.truncGEœÄ n).app X ‚â´ f‚ÇÇ)
    [t.IsGE Y n] :
    f‚ÇÅ = f‚ÇÇ := by
  suffices ‚àÄ (f : (t.truncGE n).obj X ‚ü∂ Y) (_ : (t.truncGEœÄ n).app X ‚â´ f = 0), f = 0 by
    rw [‚Üê sub_eq_zero, this (f‚ÇÅ - f‚ÇÇ) (by rw [comp_sub, sub_eq_zero, h])]
  intro f hf
  obtain ‚ü®g, hg‚ü© := contravariant_yoneda_exact‚ÇÉ _
    (t.truncTriangle_obj_distinguished (n-1) n (by linarith) X) f hf
  have hg' := t.zero g (n-2) n (by linarith) (t.shift_mem_setLE (n-1) 1 (n-2) (by linarith) _
    (by dsimp ; apply t.mem_of_isLE)) (t.mem_of_isGE Y n)
  rw [hg, hg', comp_zero]

lemma to_truncLE_obj_ext (n : ‚Ñ§) (Y : C) {X : C}
    (f‚ÇÅ f‚ÇÇ : Y ‚ü∂ (t.truncLE n).obj X) (h : f‚ÇÅ ‚â´ (t.truncLEŒπ n).app X = f‚ÇÇ ‚â´ (t.truncLEŒπ n).app X)
    [t.IsLE Y n] :
    f‚ÇÅ = f‚ÇÇ := by
  suffices ‚àÄ (f : Y ‚ü∂ (t.truncLE n).obj X) (_ : f ‚â´ (t.truncLEŒπ n).app X = 0), f = 0 by
    rw [‚Üê sub_eq_zero, this (f‚ÇÅ - f‚ÇÇ) (by rw [sub_comp, sub_eq_zero, h])]
  intro f hf
  obtain ‚ü®g, hg‚ü© := covariant_yoneda_exact‚ÇÇ _ (inv_rot_of_dist_triangle _
    (t.truncTriangle_obj_distinguished n (n+1) rfl X)) f hf
  have hg' := t.zero g n (n+2) (by linarith) (t.mem_of_isLE Y n)
    (t.shift_mem_setGE (n+1) (-1) (n+2) (by linarith) _ (by dsimp ; apply t.mem_of_isGE))
  rw [hg, hg', zero_comp]

lemma liftTruncLE' {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) [t.IsLE X n] :
    ‚àÉ (f' : X ‚ü∂ (t.truncLE n).obj Y), f = f' ‚â´ (t.truncLEŒπ n).app Y :=
  covariant_yoneda_exact‚ÇÇ _ (t.truncTriangle_obj_distinguished n (n+1) rfl Y) f
    (t.zero  _ n (n+1) (by linarith) (t.mem_of_isLE _ _) (by dsimp ; apply t.mem_of_isGE))

noncomputable def liftTruncLE {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) [t.IsLE X n] :
    X ‚ü∂ (t.truncLE n).obj Y := (t.liftTruncLE' f n).choose

@[reassoc (attr := simp)]
lemma liftTruncLE_Œπ {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) [t.IsLE X n] :
    t.liftTruncLE f n ‚â´ (t.truncLEŒπ n).app Y = f :=
  (t.liftTruncLE' f n).choose_spec.symm

lemma descTruncGE' {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) [t.IsGE Y n] :
  ‚àÉ (f' : (t.truncGE n).obj X ‚ü∂ Y), f = (t.truncGEœÄ n).app X ‚â´ f' :=
  contravariant_yoneda_exact‚ÇÇ _ (t.truncTriangle_obj_distinguished (n-1) n (by linarith) X) f
    (t.zero _ (n-1)  n (by linarith) (by dsimp ; apply t.mem_of_isLE) (t.mem_of_isGE _ _))

noncomputable def descTruncGE {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) [t.IsGE Y n] :
    (t.truncGE n).obj X ‚ü∂ Y := (t.descTruncGE' f n).choose

@[reassoc (attr := simp)]
lemma œÄ_descTruncGE {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) [t.IsGE Y n] :
    (t.truncGEœÄ n).app X ‚â´ t.descTruncGE f n  = f :=
  (t.descTruncGE' f n).choose_spec.symm

lemma isLE_iff_orthogonal (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    t.IsLE X n‚ÇÄ ‚Üî ‚àÄ (Y : C) (f : X ‚ü∂ Y) (_ : t.IsGE Y n‚ÇÅ), f = 0 := by
  constructor
  . intro _ Y f _
    exact t.zero_of_isLE_of_isGE f n‚ÇÄ n‚ÇÅ (by linarith)
  . intro hX
    rw [isLE_iff_isZero_truncGE_obj t n‚ÇÄ n‚ÇÅ h, IsZero.iff_id_eq_zero]
    apply t.from_truncGE_obj_ext n‚ÇÅ
    rw [comp_zero, comp_id]
    exact hX _ _ inferInstance

lemma isGE_iff_orthogonal (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (X : C) :
    t.IsGE X n‚ÇÅ ‚Üî ‚àÄ (Y : C) (f : Y ‚ü∂ X) (_ : t.IsLE Y n‚ÇÄ), f = 0 := by
  constructor
  . intro _ Y f _
    exact t.zero_of_isLE_of_isGE f n‚ÇÄ n‚ÇÅ (by linarith)
  . intro hX
    rw [isGE_iff_isZero_truncLE_obj t n‚ÇÄ n‚ÇÅ h, IsZero.iff_id_eq_zero]
    apply t.to_truncLE_obj_ext n‚ÇÄ
    rw [zero_comp, id_comp]
    exact hX _ _ inferInstance

lemma mem_setLE‚ÇÇ (T : Triangle C) (hT : T ‚àà distTriang C) (n : ‚Ñ§) (h‚ÇÅ : T.obj‚ÇÅ ‚àà t.setLE n)
    (h‚ÇÉ : T.obj‚ÇÉ ‚àà t.setLE n) : T.obj‚ÇÇ ‚àà t.setLE n := by
  suffices t.IsLE (T.obj‚ÇÇ) n from t.mem_of_isLE _ _
  rw [t.isLE_iff_orthogonal n (n+1) rfl]
  intro Y f hY
  obtain ‚ü®f', hf'‚ü© := contravariant_yoneda_exact‚ÇÇ _ hT f
    (t.zero _ n (n+1) (by linarith) h‚ÇÅ (t.mem_of_isGE _ _))
  rw [hf', t.zero f' n (n+1) (by linarith) h‚ÇÉ (t.mem_of_isGE _ _), comp_zero]

lemma mem_setGE‚ÇÇ (T : Triangle C) (hT : T ‚àà distTriang C) (n : ‚Ñ§) (h‚ÇÅ : T.obj‚ÇÅ ‚àà t.setGE n)
    (h‚ÇÉ : T.obj‚ÇÉ ‚àà t.setGE n) : T.obj‚ÇÇ ‚àà t.setGE n := by
  suffices t.IsGE (T.obj‚ÇÇ) n from t.mem_of_isGE _ _
  rw [t.isGE_iff_orthogonal (n-1) n (by linarith)]
  intro Y f hY
  obtain ‚ü®f', hf'‚ü© := covariant_yoneda_exact‚ÇÇ _ hT f
    (t.zero _ (n-1) n (by linarith) (t.mem_of_isLE _ _) h‚ÇÉ)
  rw [hf', t.zero f' (n-1) n (by linarith) (t.mem_of_isLE _ _) h‚ÇÅ, zero_comp]

def minus : Triangulated.Subcategory C where
  set X := ‚àÉ (n : ‚Ñ§), X ‚àà t.setLE n
  zero := ‚ü®0, t.mem_of_isLE 0 0‚ü©
  shift := by
    rintro X n ‚ü®i, hX‚ü©
    exact ‚ü®i - n, t.shift_mem_setLE i n (i - n) (by linarith) X hX‚ü©
  ext‚ÇÇ := by
    rintro T hT ‚ü®i‚ÇÅ, hi‚ÇÅ‚ü© ‚ü®i‚ÇÉ, hi‚ÇÉ‚ü©
    exact ‚ü®max i‚ÇÅ i‚ÇÉ, t.mem_setLE‚ÇÇ T hT _ (t.setLE_monotone _ _ (le_max_left i‚ÇÅ i‚ÇÉ) hi‚ÇÅ)
      (t.setLE_monotone _ _ (le_max_right i‚ÇÅ i‚ÇÉ) hi‚ÇÉ)‚ü©

def plus : Triangulated.Subcategory C where
  set X := ‚àÉ (n : ‚Ñ§), X ‚àà t.setGE n
  zero := ‚ü®0, t.mem_of_isGE 0 0‚ü©
  shift := by
    rintro X n ‚ü®i, hX‚ü©
    exact ‚ü®i - n, t.shift_mem_setGE i n (i - n) (by linarith) X hX‚ü©
  ext‚ÇÇ := by
    rintro T hT ‚ü®i‚ÇÅ, hi‚ÇÅ‚ü© ‚ü®i‚ÇÉ, hi‚ÇÉ‚ü©
    exact ‚ü®min i‚ÇÅ i‚ÇÉ, t.mem_setGE‚ÇÇ T hT _ (t.setGE_antitone _ _ (min_le_left i‚ÇÅ i‚ÇÉ) hi‚ÇÅ)
      (t.setGE_antitone _ _ (min_le_right i‚ÇÅ i‚ÇÉ) hi‚ÇÉ)‚ü©

def bounded : Triangulated.Subcategory C := t.plus ‚äì t.minus

noncomputable def natTransTruncLEOfLE (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ ‚â§ n‚ÇÅ) :
    t.truncLE n‚ÇÄ ‚ü∂ t.truncLE n‚ÇÅ := by
  have : ‚àÄ (X : C), IsLE t ((truncLE t n‚ÇÄ).obj X) n‚ÇÅ := fun _ => t.isLE_of_LE  _ n‚ÇÄ n‚ÇÅ h
  exact
  { app := fun X => t.liftTruncLE ((t.truncLEŒπ n‚ÇÄ).app X) n‚ÇÅ
    naturality := fun _ _ _ => by
      apply to_truncLE_obj_ext
      dsimp
      simp }

@[reassoc (attr := simp)]
lemma natTransTruncLEOfLE_Œπ_app (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ ‚â§ n‚ÇÅ) (X : C) :
    (t.natTransTruncLEOfLE n‚ÇÄ n‚ÇÅ h).app X ‚â´ (t.truncLEŒπ n‚ÇÅ).app X =
      (t.truncLEŒπ n‚ÇÄ).app X := by
  have : IsLE t ((truncLE t n‚ÇÄ).obj X) n‚ÇÅ := t.isLE_of_LE  _ n‚ÇÄ n‚ÇÅ h
  dsimp [natTransTruncLEOfLE]
  rw [t.liftTruncLE_Œπ]

noncomputable def natTransTruncGEOfGE (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ ‚â§ n‚ÇÅ) :
    t.truncGE n‚ÇÄ ‚ü∂ t.truncGE n‚ÇÅ := by
  have : ‚àÄ (X : C), IsGE t ((truncGE t n‚ÇÅ).obj X) n‚ÇÄ := fun _ => t.isGE_of_GE  _ n‚ÇÄ n‚ÇÅ h
  exact
  { app := fun X => t.descTruncGE ((t.truncGEœÄ n‚ÇÅ).app X) n‚ÇÄ
    naturality := fun _ _ _ => by
      apply from_truncGE_obj_ext
      dsimp
      simp only [œÄ_descTruncGE_assoc, ‚Üê NatTrans.naturality, ‚Üê NatTrans.naturality_assoc,
        œÄ_descTruncGE] }

@[reassoc (attr := simp)]
lemma œÄ_natTransTruncGEOfGE_app (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ ‚â§ n‚ÇÅ) (X : C) :
    (t.truncGEœÄ n‚ÇÄ).app X ‚â´ (t.natTransTruncGEOfGE n‚ÇÄ n‚ÇÅ h).app X  =
      (t.truncGEœÄ n‚ÇÅ).app X := by
  have : IsGE t ((truncGE t n‚ÇÅ).obj X) n‚ÇÄ := t.isGE_of_GE  _ n‚ÇÄ n‚ÇÅ h
  dsimp [natTransTruncGEOfGE]
  rw [t.œÄ_descTruncGE]

lemma isIso_truncLEmap_iff {X Y : C} (f : X ‚ü∂ Y) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) :
    IsIso ((t.truncLE n‚ÇÄ).map f) ‚Üî
      ‚àÉ (Z : C) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ ((t.truncLE n‚ÇÄ).obj X)‚ü¶1‚üß)
        (_ : Triangle.mk ((t.truncLEŒπ n‚ÇÄ).app X ‚â´ f) g h ‚àà distTriang _), t.IsGE Z n‚ÇÅ := by
  constructor
  . intro hf
    refine' ‚ü®(t.truncGE n‚ÇÅ).obj Y, (t.truncGEœÄ n‚ÇÅ).app Y,
      (t.truncŒ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app Y ‚â´ (inv ((t.truncLE n‚ÇÄ).map f))‚ü¶1‚üß',
      isomorphic_distinguished _ (t.truncTriangle_obj_distinguished n‚ÇÄ n‚ÇÅ hn‚ÇÅ Y) _ _,
      inferInstance‚ü©
    refine' Triangle.isoMk _ _ (asIso ((truncLE t n‚ÇÄ).map f)) (Iso.refl _) (Iso.refl _) _ _ _
    all_goals aesop_cat
  . rintro ‚ü®Z, g, h, mem, _‚ü©
    obtain ‚ü®e, he‚ü© := t.triangle_iso_exists n‚ÇÄ n‚ÇÅ (by linarith)  _ _ mem
      (t.truncTriangle_obj_distinguished n‚ÇÄ n‚ÇÅ hn‚ÇÅ Y) (Iso.refl _)
      (by dsimp ; apply t.mem_of_isLE)
      (by dsimp ; apply t.mem_of_isGE)
      (by dsimp ; apply t.mem_of_isLE)
      (by dsimp ; apply t.mem_of_isGE)
    suffices ((truncLE t n‚ÇÄ).map f) = e.hom.hom‚ÇÅ by
      rw [this]
      infer_instance
    apply to_truncLE_obj_ext
    refine' Eq.trans _ e.hom.comm‚ÇÅ
    aesop_cat

-- insert dual statement to isIso_truncLEmap_iff

/- Now, we need the octahedron axiom -/

variable [IsTriangulated C]

lemma isIso‚ÇÅ_truncLEmap_of_GE (T : Triangle C) (hT : T ‚àà distTriang C)
    (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (h‚ÇÉ : t.IsGE T.obj‚ÇÉ n‚ÇÅ) :
    IsIso ((t.truncLE n‚ÇÄ).map T.mor‚ÇÅ) := by
  rw [isIso_truncLEmap_iff _ _ _ _ h]
  obtain ‚ü®Z, g, k, mem‚ü© := distinguished_cocone_triangle ((t.truncLEŒπ n‚ÇÄ).app T.obj‚ÇÅ ‚â´ T.mor‚ÇÅ)
  refine' ‚ü®_, _, _, mem, _‚ü©
  have H := someOctahedron rfl (t.truncTriangle_obj_distinguished n‚ÇÄ n‚ÇÅ h T.obj‚ÇÅ) hT mem
  exact ‚ü®t.mem_setGE‚ÇÇ _ H.mem n‚ÇÅ (by dsimp ; apply t.mem_of_isGE)
    (by dsimp ; apply t.mem_of_isGE)‚ü©

-- insert dual statement to isIso‚ÇÅ_truncLEmap_of_GE

-- show that if X is ‚â• b then (t.truncLE a) ‚â• b

end TStructure

end Triangulated

end CategoryTheory
