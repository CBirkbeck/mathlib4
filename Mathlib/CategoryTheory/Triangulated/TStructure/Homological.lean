import Mathlib.CategoryTheory.Triangulated.TStructure.Abelian
import Mathlib.CategoryTheory.Preadditive.Yoneda.Basic
import Mathlib.Algebra.Homology.ShortComplex.Ab

open CategoryTheory Category Limits Pretriangulated Preadditive

lemma AddCommGroupCat.isZero (X : AddCommGroupCat) (hX : ‚àÄ (x : X), x = 0) :
    Limits.IsZero X := by
  rw [IsZero.iff_id_eq_zero]
  ext x
  exact hX x

namespace CategoryTheory

namespace Pretriangulated

variable {C : Type*} [Category C] [Preadditive C] [HasZeroObject C] [HasShift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]

lemma preadditiveYoneda_map_distinguished (A : C) (T : Triangle C) (hT : T ‚àà distTriang C) :
    ((ShortComplex.mk _ _ (comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ T hT)).op.map (preadditiveYoneda.obj A)).Exact := by
  rw [ShortComplex.ab_exact_iff]
  intro (x‚ÇÇ : T.obj‚ÇÇ ‚ü∂ A) (hx‚ÇÇ : T.mor‚ÇÅ ‚â´ x‚ÇÇ = 0)
  obtain ‚ü®x‚ÇÉ, hx‚ÇÉ‚ü© := T.yoneda_exact‚ÇÇ hT x‚ÇÇ hx‚ÇÇ
  exact ‚ü®x‚ÇÉ, hx‚ÇÉ.symm‚ü©

instance (A : C·µí·µñ) : (preadditiveCoyoneda.obj A).IsHomological where
  exact T hT := by
    rw [ShortComplex.ab_exact_iff]
    intro (x‚ÇÇ : A.unop ‚ü∂ T.obj‚ÇÇ) (hx‚ÇÇ : x‚ÇÇ ‚â´ T.mor‚ÇÇ = 0)
    obtain ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü© := T.coyoneda_exact‚ÇÇ hT x‚ÇÇ hx‚ÇÇ
    exact ‚ü®x‚ÇÅ, hx‚ÇÅ.symm‚ü©

end Pretriangulated

namespace Limits

namespace CokernelCofork

variable {C : Type*} [Category C] [Preadditive C]

def nonempty_isColimit_iff_preadditiveYoneda {X Y : C} {f : X ‚ü∂ Y} (c : CokernelCofork f) :
    Nonempty (IsColimit c) ‚Üî ‚àÄ (A : C), ((ShortComplex.mk _ _ c.condition).op.map (preadditiveYoneda.obj A)).Exact ‚àß
      Mono (((ShortComplex.mk _ _ c.condition).op.map (preadditiveYoneda.obj A)).f) := by
  simp_rw [ShortComplex.ab_exact_iff, AddCommGroupCat.mono_iff_injective]
  constructor
  ¬∑ intro ‚ü®h‚ü© A
    constructor
    ¬∑ rintro (x‚ÇÇ : Y ‚ü∂ A) (hx‚ÇÇ : f ‚â´ x‚ÇÇ = 0)
      exact ‚ü®_, (CokernelCofork.IsColimit.desc' h x‚ÇÇ hx‚ÇÇ).2‚ü©
    ¬∑ rintro (x‚ÇÅ : c.pt ‚ü∂ A) (x‚ÇÅ' : c.pt ‚ü∂ A) (h‚ÇÅ : c.œÄ ‚â´ x‚ÇÅ = c.œÄ ‚â´ x‚ÇÅ')
      exact Cofork.IsColimit.hom_ext h h‚ÇÅ
  ¬∑ rintro h
    exact ‚ü®Cofork.IsColimit.mk _
      (fun s => ((h _).1 s.œÄ (CokernelCofork.condition s)).choose)
      (fun s => ((h _).1 s.œÄ (CokernelCofork.condition s)).choose_spec)
      (fun s m hm => (h _).2
        (hm.trans ((h _).1 s.œÄ (CokernelCofork.condition s)).choose_spec.symm))‚ü©

end CokernelCofork

namespace KernelFork

variable {C : Type*} [Category C] [Preadditive C]

def nonempty_isLimit_iff_preadditiveCoyoneda {X Y : C} {f : X ‚ü∂ Y} (c : KernelFork f) :
    Nonempty (IsLimit c) ‚Üî ‚àÄ (A : C), ((ShortComplex.mk _ _ c.condition).map (preadditiveCoyoneda.obj (Opposite.op A))).Exact ‚àß
      Mono (((ShortComplex.mk _ _ c.condition).map (preadditiveCoyoneda.obj (Opposite.op A))).f) := by
  simp_rw [ShortComplex.ab_exact_iff, AddCommGroupCat.mono_iff_injective]
  constructor
  ¬∑ intro ‚ü®h‚ü© A
    constructor
    ¬∑ rintro (x‚ÇÇ : A ‚ü∂ X) (hx‚ÇÇ : x‚ÇÇ ‚â´ f = 0)
      exact ‚ü®_, (KernelFork.IsLimit.lift' h x‚ÇÇ hx‚ÇÇ).2‚ü©
    ¬∑ rintro (x‚ÇÅ : A ‚ü∂ c.pt) (x‚ÇÅ' : A ‚ü∂ c.pt) (h‚ÇÅ : x‚ÇÅ ‚â´ c.Œπ = x‚ÇÅ' ‚â´ c.Œπ)
      exact Fork.IsLimit.hom_ext h h‚ÇÅ
  ¬∑ rintro h
    exact ‚ü®Fork.IsLimit.mk _
      (fun s => ((h _).1 s.Œπ (KernelFork.condition s)).choose)
      (fun s => ((h _).1 s.Œπ (KernelFork.condition s)).choose_spec)
      (fun s m hm => (h _).2 (hm.trans ((h _).1 s.Œπ (KernelFork.condition s)).choose_spec.symm))‚ü©

end KernelFork

end Limits

namespace ShortComplex

variable {C : Type*} [Category C]

lemma exact_and_mono_f_iff_of_iso [HasZeroMorphisms C] {S T : ShortComplex C} (e : S ‚âÖ T) :
    (S.Exact ‚àß Mono S.f) ‚Üî (T.Exact ‚àß Mono T.f) := by
  have : Mono S.f ‚Üî Mono T.f :=
    MorphismProperty.RespectsIso.arrow_mk_iso_iff
      (MorphismProperty.RespectsIso.monomorphisms C)
      (Arrow.isoMk (ShortComplex.œÄ‚ÇÅ.mapIso e) (ShortComplex.œÄ‚ÇÇ.mapIso e) e.hom.comm‚ÇÅ‚ÇÇ)
  rw [exact_iff_of_iso e, this]

lemma exact_and_epi_g_iff_of_iso [HasZeroMorphisms C] {S T : ShortComplex C} (e : S ‚âÖ T) :
    (S.Exact ‚àß Epi S.g) ‚Üî (T.Exact ‚àß Epi T.g) := by
  have : Epi S.g ‚Üî Epi T.g :=
    MorphismProperty.RespectsIso.arrow_mk_iso_iff
      (MorphismProperty.RespectsIso.epimorphisms C)
      (Arrow.isoMk (ShortComplex.œÄ‚ÇÇ.mapIso e) (ShortComplex.œÄ‚ÇÉ.mapIso e) e.hom.comm‚ÇÇ‚ÇÉ)
  rw [exact_iff_of_iso e, this]

variable [Preadditive C]

lemma exact_and_epi_g_iff (S : ShortComplex C) [Balanced C] [S.HasHomology] :
    (S.Exact ‚àß Epi S.g) ‚Üî
      Nonempty (IsColimit (CokernelCofork.ofœÄ _ S.zero)) := by
  constructor
  ¬∑ rintro ‚ü®hS, _‚ü©
    exact ‚ü®hS.gIsCokernel‚ü©
  ¬∑ intro ‚ü®h‚ü©
    exact ‚ü®S.exact_of_g_is_cokernel h, ‚ü®fun _ _ => Cofork.IsColimit.hom_ext h‚ü©‚ü©

lemma exact_and_mono_f_iff (S : ShortComplex C) [Balanced C] [S.HasHomology] :
    (S.Exact ‚àß Mono S.f) ‚Üî
      Nonempty (IsLimit (KernelFork.ofŒπ _ S.zero)) := by
  constructor
  ¬∑ rintro ‚ü®hS, _‚ü©
    exact ‚ü®hS.fIsKernel‚ü©
  ¬∑ intro ‚ü®h‚ü©
    exact ‚ü®S.exact_of_f_is_kernel h, ‚ü®fun _ _ => Fork.IsLimit.hom_ext h‚ü©‚ü©

lemma exact_and_epi_g_iff_preadditiveYoneda (S : ShortComplex C) [Balanced C] [S.HasHomology] :
    (S.Exact ‚àß Epi S.g) ‚Üî
      ‚àÄ (A : C), (S.op.map (preadditiveYoneda.obj A)).Exact ‚àß
        Mono (S.op.map (preadditiveYoneda.obj A)).f := by
  rw [exact_and_epi_g_iff, CokernelCofork.nonempty_isColimit_iff_preadditiveYoneda]
  rfl

lemma exact_and_mono_f_iff_preadditiveCoyoneda (S : ShortComplex C) [Balanced C] [S.HasHomology] :
    (S.Exact ‚àß Mono S.f) ‚Üî
      ‚àÄ (A : C), (S.map (preadditiveCoyoneda.obj (Opposite.op A))).Exact ‚àß
        Mono (S.map (preadditiveCoyoneda.obj (Opposite.op A))).f := by
  rw [exact_and_mono_f_iff, KernelFork.nonempty_isLimit_iff_preadditiveCoyoneda]
  rfl

end ShortComplex

namespace Triangulated

variable {C : Type*} [Category C] [Preadditive C] [HasZeroObject C] [HasShift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C] [IsTriangulated C]
  (t : TStructure C)

namespace TStructure

section

instance (n : ‚Ñ§) (X : C) [t.IsLE X n] : t.IsLE ((shiftFunctor C (1 : ‚Ñ§)).obj X) n := by
  have : t.IsLE (((shiftFunctor C (1 : ‚Ñ§))).obj X) (n-1) :=
    t.isLE_shift X n 1 (n-1) (by linarith)
  exact t.isLE_of_LE _ (n-1) n (by linarith)

variable (T : Triangle C) (hT : T ‚àà distTriang C) (n : ‚Ñ§) [t.IsLE T.obj‚ÇÅ n]

@[simps! obj‚ÇÅ obj‚ÇÇ obj‚ÇÉ mor‚ÇÅ mor‚ÇÇ]
noncomputable def truncLETriangle  :
    Triangle C :=
  Triangle.mk ((t.truncLE n).map T.mor‚ÇÅ)
    ((t.truncLE n).map T.mor‚ÇÇ)
    ((t.truncLEŒπ n).app T.obj‚ÇÉ ‚â´ T.mor‚ÇÉ ‚â´ (asIso ((t.truncLEŒπ n).app T.obj‚ÇÅ)).inv‚ü¶(1 : ‚Ñ§)‚üß')

instance : t.IsLE (t.truncLETriangle T n).obj‚ÇÅ n := by dsimp; infer_instance
instance : t.IsLE (t.truncLETriangle T n).obj‚ÇÇ n := by dsimp; infer_instance
instance : t.IsLE (t.truncLETriangle T n).obj‚ÇÉ n := by dsimp; infer_instance

lemma truncLETriangle_distinguished :
    t.truncLETriangle T n ‚àà distTriang C := by
  let a : T.obj‚ÇÅ ‚ü∂ (t.truncLE n).obj T.obj‚ÇÇ :=
    (asIso ((t.truncLEŒπ n).app T.obj‚ÇÅ)).inv ‚â´ (t.truncLE n).map T.mor‚ÇÅ
  let b := (t.truncLEŒπ n).app T.obj‚ÇÇ
  have comm : a ‚â´ b = T.mor‚ÇÅ := by simp
  obtain ‚ü®Z, f‚ÇÇ, f‚ÇÉ, h‚ÇÅ‚ü© := distinguished_cocone_triangle a
  have h‚ÇÇ := (t.triangleLEGT_distinguished n T.obj‚ÇÇ)
  have H := someOctahedron comm h‚ÇÅ h‚ÇÇ hT
  have : t.IsLE Z n := t.isLE‚ÇÇ _ (rot_of_dist_triangle _ h‚ÇÅ) n
      (by dsimp; infer_instance) (by dsimp; infer_instance)
  obtain ‚ü®e, he : e.hom.hom‚ÇÇ = ùüô _‚ü© :=
    t.triangle_iso_exists n (n + 1) (by linarith) _ _
      (t.triangleLEGE_distinguished n (n + 1) rfl T.obj‚ÇÉ) H.mem (Iso.refl _)
      (by dsimp; infer_instance) (by dsimp; infer_instance)
      (by dsimp; infer_instance) (by dsimp; infer_instance)
  have he' : e.inv.hom‚ÇÇ = ùüô _ := by
    rw [‚Üê cancel_mono e.hom.hom‚ÇÇ, ‚Üê comp_hom‚ÇÇ, e.inv_hom_id, id_hom‚ÇÇ, he, comp_id]
  have he‚ÇÅ' : (truncLE t n).map T.mor‚ÇÇ = f‚ÇÇ ‚â´ e.inv.hom‚ÇÅ := by
    apply to_truncLE_obj_ext
    have eq‚ÇÅ := e.inv.comm‚ÇÅ
    have eq‚ÇÇ := H.comm‚ÇÅ
    dsimp at eq‚ÇÅ eq‚ÇÇ ‚ä¢
    simp only [NatTrans.naturality, Functor.id_map, ‚Üê eq‚ÇÇ, assoc, ‚Üê eq‚ÇÅ,
      he', Triangle.mk_obj‚ÇÇ, comp_id]
  have he‚ÇÅ : (truncLE t n).map T.mor‚ÇÇ ‚â´ e.hom.hom‚ÇÅ = f‚ÇÇ := by
    rw [he‚ÇÅ', assoc, ‚Üê comp_hom‚ÇÅ, e.inv_hom_id, id_hom‚ÇÅ]
    simp only [Triangle.mk_obj‚ÇÅ, comp_id]
  have he‚ÇÇ : (t.truncLETriangle T n).mor‚ÇÉ ‚â´
    (shiftFunctor C 1).map ((truncLEŒπ t n).app T.obj‚ÇÅ) = e.hom.hom‚ÇÅ ‚â´ f‚ÇÉ := by
    have eq‚ÇÅ := H.comm‚ÇÇ
    have eq‚ÇÇ := e.hom.comm‚ÇÅ
    dsimp at eq‚ÇÅ eq‚ÇÇ
    dsimp [truncLETriangle]
    erw [he, comp_id] at eq‚ÇÇ
    rw [assoc, assoc, ‚Üê Functor.map_comp, IsIso.inv_hom_id,
      Functor.map_id, comp_id, eq‚ÇÇ, assoc, eq‚ÇÅ]
  refine' isomorphic_distinguished _ h‚ÇÅ _ _
  exact Triangle.isoMk _ _ (asIso ((t.truncLEŒπ n).app T.obj‚ÇÅ))
    (Iso.refl _) (Triangle.œÄ‚ÇÅ.mapIso e) (by simp) (by simp [he‚ÇÅ]) he‚ÇÇ

end

section

variable (T : Triangle C) (hT : T ‚àà distTriang C) (n : ‚Ñ§) [t.IsGE T.obj‚ÇÉ n]

@[simps! obj‚ÇÅ obj‚ÇÇ obj‚ÇÉ mor‚ÇÅ mor‚ÇÇ]
noncomputable def truncGETriangle  :
    Triangle C :=
  Triangle.mk ((t.truncGE n).map T.mor‚ÇÅ) ((t.truncGE n).map T.mor‚ÇÇ)
    ((asIso ((t.truncGEœÄ n).app T.obj‚ÇÉ)).inv ‚â´ T.mor‚ÇÉ ‚â´ ((t.truncGEœÄ n).app T.obj‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß')

instance : t.IsGE (t.truncGETriangle T n).obj‚ÇÅ n := by dsimp; infer_instance
instance : t.IsGE (t.truncGETriangle T n).obj‚ÇÇ n := by dsimp; infer_instance
instance : t.IsGE (t.truncGETriangle T n).obj‚ÇÉ n := by dsimp; infer_instance

instance (X : C) [t.IsGE X n] : t.IsGE (X‚ü¶(-1 : ‚Ñ§)‚üß) n := by
  have : t.IsGE (X‚ü¶(-1 : ‚Ñ§)‚üß) (n + 1) :=
    t.isGE_shift X n (-1) (n + 1) (by linarith)
  exact t.isGE_of_GE _ n (n + 1) (by linarith)

lemma truncGETriangle_distinguished :
    t.truncGETriangle T n ‚àà distTriang C := by
  have := hT
  let a := (t.truncGEœÄ n).app T.obj‚ÇÇ
  let b : (t.truncGE n).obj T.obj‚ÇÇ ‚ü∂ T.obj‚ÇÉ :=
    (t.truncGE n).map T.mor‚ÇÇ ‚â´ (asIso ((t.truncGEœÄ n).app T.obj‚ÇÉ)).inv
  have comm : a ‚â´ b = T.mor‚ÇÇ := by simp
  have h‚ÇÅ := rot_of_dist_triangle _ (t.triangleLEGE_distinguished (n-1) n (by linarith) T.obj‚ÇÇ)
  obtain ‚ü®Z, f‚ÇÅ, f‚ÇÉ, h‚ÇÇ‚ü© := distinguished_cocone_triangle‚ÇÅ b
  have H := someOctahedron comm h‚ÇÅ (rot_of_dist_triangle _ h‚ÇÇ) (rot_of_dist_triangle _ hT)
  obtain ‚ü®m‚ÇÅ, hm‚ÇÅ‚ü© : ‚àÉ (m‚ÇÅ : (t.truncLE (n-1)).obj T.obj‚ÇÇ ‚ü∂ T.obj‚ÇÅ),
    (shiftFunctor C (1 : ‚Ñ§)).map m‚ÇÅ = H.m‚ÇÅ := ‚ü®(shiftFunctor C (1 : ‚Ñ§)).preimage H.m‚ÇÅ, by simp‚ü©
  obtain ‚ü®m‚ÇÉ, hm‚ÇÉ‚ü© : ‚àÉ (m‚ÇÉ : T.obj‚ÇÅ ‚ü∂ Z), (shiftFunctor C (1 : ‚Ñ§)).map m‚ÇÉ = H.m‚ÇÉ :=
    ‚ü®(shiftFunctor C (1 : ‚Ñ§)).preimage H.m‚ÇÉ, by simp‚ü©
  let T' := Triangle.mk m‚ÇÅ m‚ÇÉ (f‚ÇÅ ‚â´ (t.truncGEŒ¥LE (n-1) n (by linarith)).app T.obj‚ÇÇ)
  have Hmem' : T' ‚àà distTriang C := by
    rw [‚Üê T'.shift_distinguished_iff 1]
    refine' isomorphic_distinguished _ H.mem _ _
    refine' Triangle.isoMk _ _ (Iso.refl _) (mulIso (-1) (Iso.refl _)) (Iso.refl _) _ _ _
    ¬∑ dsimp
      simp [hm‚ÇÅ]
    ¬∑ dsimp
      simp [hm‚ÇÉ]
    ¬∑ dsimp
      simp
  have : t.IsGE Z n := t.isGE‚ÇÇ _ (inv_rot_of_dist_triangle _ h‚ÇÇ) n
    (by dsimp; infer_instance) (by dsimp; infer_instance)
  obtain ‚ü®e, he : _ = ùüô _‚ü© :=
    t.triangle_iso_exists (n-1) n (by linarith) _ _
      (t.triangleLEGE_distinguished (n - 1) n (by linarith) T.obj‚ÇÅ)
      Hmem' (Iso.refl _) (by dsimp; infer_instance) (by dsimp; infer_instance)
      (by dsimp; infer_instance) (by dsimp; infer_instance)
  refine' isomorphic_distinguished _ h‚ÇÇ _ _
  refine' Triangle.isoMk _ _ (Triangle.œÄ‚ÇÉ.mapIso e) (Iso.refl _)
    (asIso ((t.truncGEœÄ n).app T.obj‚ÇÉ)).symm _ _ _
  ¬∑ dsimp
    simp only [comp_id]
    have eq‚ÇÅ := e.hom.comm‚ÇÇ
    have eq‚ÇÇ := H.comm‚ÇÑ
    dsimp at eq‚ÇÅ eq‚ÇÇ
    simp only [neg_comp, comp_neg, neg_inj] at eq‚ÇÇ
    apply from_truncGE_obj_ext
    rw [reassoc_of% eq‚ÇÅ, he]
    dsimp
    rw [id_comp, ‚Üê NatTrans.naturality]
    dsimp
    apply (shiftFunctor C (1 : ‚Ñ§)).map_injective
    simpa only [Functor.map_comp, hm‚ÇÉ] using eq‚ÇÇ
  ¬∑ dsimp
    simp
  ¬∑ dsimp [truncGETriangle]
    simp only [assoc, IsIso.eq_inv_comp, IsIso.hom_inv_id_assoc]
    have eq‚ÇÅ := H.comm‚ÇÉ
    have eq‚ÇÇ := e.hom.comm‚ÇÇ
    dsimp at eq‚ÇÅ eq‚ÇÇ
    rw [‚Üê eq‚ÇÅ, ‚Üê Functor.map_comp, eq‚ÇÇ, he]
    dsimp
    rw [id_comp, hm‚ÇÉ]

end

noncomputable def toHomology‚ÇÄ (X : C) [t.IsLE X 0] : X ‚ü∂ t.ŒπHeart'.obj ((t.homology' 0).obj X) :=
  (asIso ((t.truncLEŒπ 0).app X)).inv ‚â´ (t.truncGEœÄ 0).app _ ‚â´ (shiftFunctorZero C ‚Ñ§).inv.app _

@[reassoc]
lemma truncLEŒπ_toHomology‚ÇÄ_shiftFunctorZero_hom (X : C) [t.IsLE X 0] :
    (t.truncLEŒπ 0).app X ‚â´ t.toHomology‚ÇÄ X ‚â´ (shiftFunctorZero C ‚Ñ§).hom.app _ =
      (t.truncGEœÄ 0).app _ := by
  dsimp only [toHomology‚ÇÄ]
  rw [assoc, assoc]
  erw [Iso.inv_hom_id_app, comp_id]
  rw [asIso_inv, IsIso.hom_inv_id_assoc]

lemma toHomology‚ÇÄ_naturality {X Y : C} (f : X ‚ü∂ Y) [t.IsLE X 0] [t.IsLE Y 0] :
    t.toHomology‚ÇÄ X ‚â´ (t.homology' 0 ‚ãô t.ŒπHeart').map f = f ‚â´ t.toHomology‚ÇÄ Y := by
  rw [‚Üê cancel_mono ((shiftFunctorZero C ‚Ñ§).hom.app _), assoc, assoc,
    ‚Üê cancel_epi ((t.truncLEŒπ 0).app X)]
  erw [‚Üê (t.truncLEŒπ 0).naturality_assoc f]
  rw [t.truncLEŒπ_toHomology‚ÇÄ_shiftFunctorZero_hom Y]
  erw [(shiftFunctorZero C ‚Ñ§).hom.naturality]
  rw [t.truncLEŒπ_toHomology‚ÇÄ_shiftFunctorZero_hom_assoc X]
  erw [(t.truncGEœÄ 0).naturality]
  rfl

instance (X : C) : t.IsLE ((t.truncLT 0).obj X) (-1) :=
  t.isLE_of_iso ((t.truncLEIsoTruncLT (-1) 0 (by linarith)).app X) (-1)

instance (A X : C) [t.IsLE X 0] [t.IsGE A 0] :
    IsIso ((preadditiveYoneda.obj A).map ((t.truncGEœÄ 0).app X).op) := by
  have : Mono ((preadditiveYoneda.obj A).map ((t.truncGEœÄ 0).app X).op) :=
    (preadditiveYoneda_map_distinguished A _ (rot_of_dist_triangle _ (t.triangleLTGE_distinguished 0 X))).mono_g (by
      apply IsZero.eq_of_src
      apply AddCommGroupCat.isZero
      intro (x : ((t.truncLT 0).obj X)‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ A)
      have : t.IsLE (((t.truncLT 0).obj X)‚ü¶(1 : ‚Ñ§)‚üß) (-1) :=
        t.isLE_shift ((t.truncLT 0).obj X) 0 1 (-1) (by linarith)
      exact t.zero x (-1) 0 (by linarith))
  have : Epi ((preadditiveYoneda.obj A).map ((t.truncGEœÄ 0).app X).op) :=
    (preadditiveYoneda_map_distinguished A _ (t.triangleLTGE_distinguished 0 X)).epi_f (by
      apply IsZero.eq_of_tgt
      apply AddCommGroupCat.isZero
      intro (x : (t.truncLT 0).obj X ‚ü∂ A)
      exact t.zero x (-1) 0 (by linarith))
  apply isIso_of_mono_of_epi

instance (A X : C) [t.IsLE X 0] [t.IsGE A 0]:
    IsIso ((preadditiveYoneda.obj A).map (t.toHomology‚ÇÄ X).op) := by
  dsimp only [toHomology‚ÇÄ]
  rw [op_comp, op_comp, Functor.map_comp, Functor.map_comp]
  infer_instance

noncomputable def fromHomology‚ÇÄ (X : C) [t.IsGE X 0] : t.ŒπHeart'.obj ((t.homology' 0).obj X) ‚ü∂ X :=
  t.homology‚ÇÄCompŒπHeartIsoTruncLEGE.hom.app X ‚â´ (t.truncLEŒπ 0).app _ ‚â´ (asIso ((t.truncGEœÄ 0).app X)).inv

@[reassoc]
lemma homology‚ÇÄCompŒπHeartIsoTruncLEGE_inv_app_fromHomology‚ÇÄ_truncGEœÄ (X : C) [t.IsGE X 0] :
    t.homology‚ÇÄCompŒπHeartIsoTruncLEGE.inv.app X ‚â´ t.fromHomology‚ÇÄ X ‚â´ (t.truncGEœÄ 0).app X =
      (t.truncLEŒπ 0).app ((t.truncGE 0).obj X) := by
  simp [fromHomology‚ÇÄ]

lemma fromHomology‚ÇÄ_naturality {X Y : C} (f : X ‚ü∂ Y) [t.IsGE X 0] [t.IsGE Y 0] :
    (t.homology' 0 ‚ãô t.ŒπHeart').map f ‚â´ t.fromHomology‚ÇÄ Y = t.fromHomology‚ÇÄ X ‚â´ f := by
  rw [‚Üê cancel_mono ((t.truncGEœÄ 0).app Y), assoc, assoc]
  erw [(t.truncGEœÄ 0).naturality f]
  rw [‚Üê cancel_epi (t.homology‚ÇÄCompŒπHeartIsoTruncLEGE.inv.app X),
    homology‚ÇÄCompŒπHeartIsoTruncLEGE_inv_app_fromHomology‚ÇÄ_truncGEœÄ_assoc,
    ‚Üê NatTrans.naturality_assoc,
    homology‚ÇÄCompŒπHeartIsoTruncLEGE_inv_app_fromHomology‚ÇÄ_truncGEœÄ]
  dsimp [truncLEGE]
  apply NatTrans.naturality

instance (A X : C) [t.IsGE X 0] [t.IsLE A 0] :
    IsIso ((preadditiveCoyoneda.obj (Opposite.op A)).map ((t.truncLEŒπ 0).app X)) := by
  have : Mono ((preadditiveCoyoneda.obj (Opposite.op A)).map ((t.truncLEŒπ 0).app X)) :=
    ((preadditiveCoyoneda.obj (Opposite.op A)).map_distinguished_exact _
      (inv_rot_of_dist_triangle _ (t.triangleLEGE_distinguished 0 1 (by linarith) X))).mono_g (by
        apply IsZero.eq_of_src
        apply AddCommGroupCat.isZero
        intro (x : A ‚ü∂ (((t.truncGE 1).obj X)‚ü¶(-1 : ‚Ñ§)‚üß))
        have : t.IsGE (((t.truncGE 1).obj X)‚ü¶(-1 : ‚Ñ§)‚üß) 1 :=
          t.isGE_shift ((t.truncGE 1).obj X) 0 (-1) 1 (by linarith)
        exact t.zero x 0 1 (by linarith))
  have : Epi ((preadditiveCoyoneda.obj (Opposite.op A)).map ((t.truncLEŒπ 0).app X)) :=
    ((preadditiveCoyoneda.obj (Opposite.op A)).map_distinguished_exact _
      (t.triangleLEGE_distinguished 0 1 (by linarith) X)).epi_f (by
        apply IsZero.eq_of_tgt
        apply AddCommGroupCat.isZero
        intro (x : A ‚ü∂ (t.truncGE 1).obj X)
        exact t.zero x 0 1 (by linarith))
  apply isIso_of_mono_of_epi

instance (A X : C) [t.IsGE X 0] [t.IsLE A 0]:
    IsIso ((preadditiveCoyoneda.obj (Opposite.op A)).map (t.fromHomology‚ÇÄ X)) := by
  dsimp only [fromHomology‚ÇÄ]
  rw [Functor.map_comp, Functor.map_comp]
  infer_instance

namespace HomologicalFunctorAux

variable {T : Triangle C} (hT : T ‚àà distTriang C)

instance : (t.homology' 0).Additive where
  map_add {X Y f g} := by
    apply t.ŒπHeart'.map_injective
    simp [homology']

@[simps!]
noncomputable def shortComplex :=
  (ShortComplex.mk _ _ (comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ T hT)).map (t.homology' 0)

lemma case‚ÇÅ [t.IsLE T.obj‚ÇÅ 0] [t.IsLE T.obj‚ÇÇ 0] [t.IsLE T.obj‚ÇÉ 0] :
    (shortComplex t hT).Exact ‚àß Epi (shortComplex t hT).g := by
  let S := fun A => (shortComplex t hT).op.map (preadditiveYoneda.obj A)
  let S' := fun A => (ShortComplex.mk _ _ (comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ T hT)).op.map (preadditiveYoneda.obj A)
  suffices ‚àÄ A, (S A).Exact ‚àß Mono (S A).f by
    simpa only [ShortComplex.exact_and_epi_g_iff_preadditiveYoneda] using this
  intro A
  let e' : ‚àÄ (X : C) [t.IsLE X 0],
    (preadditiveYoneda.obj A).obj (Opposite.op ((t.homology' 0).obj X)) ‚âÖ (preadditiveYoneda.obj A.1).obj (Opposite.op X) :=
      fun X _ => asIso ((preadditiveYoneda.obj A.1).map (t.toHomology‚ÇÄ X).op)
  have e : S A ‚âÖ S' A.1 := by
    refine' ShortComplex.isoMk (e' T.obj‚ÇÉ) (e' T.obj‚ÇÇ) (e' T.obj‚ÇÅ) _ _
    ¬∑ simpa only [op_comp, Functor.map_comp] using (preadditiveYoneda.obj A.1).congr_map
        (congr_arg Quiver.Hom.op (t.toHomology‚ÇÄ_naturality T.mor‚ÇÇ).symm)
    ¬∑ simpa only [op_comp, Functor.map_comp] using (preadditiveYoneda.obj A.1).congr_map
        (congr_arg Quiver.Hom.op (t.toHomology‚ÇÄ_naturality T.mor‚ÇÅ).symm)
  rw [ShortComplex.exact_and_mono_f_iff_of_iso e]
  refine' ‚ü®preadditiveYoneda_map_distinguished A.1 _ hT,
    (preadditiveYoneda_map_distinguished A.1 _ (rot_of_dist_triangle _ hT)).mono_g _‚ü©
  apply IsZero.eq_of_src
  apply AddCommGroupCat.isZero
  intro (x : T.obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ A.obj)
  have : t.IsLE (T.obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß) (-1) := t.isLE_shift T.obj‚ÇÅ 0 1 (-1) (by linarith)
  exact t.zero x (-1) 0 (by linarith)

instance (X : C) (n : ‚Ñ§) : IsIso ((t.truncGELE n n).map ((t.truncLEŒπ n).app X)) := by
  dsimp [truncGELE]
  infer_instance

instance (X : C) (n : ‚Ñ§) : IsIso ((t.homology' n).map ((t.truncLEŒπ n).app X)) := by
  suffices IsIso (t.ŒπHeart'.map ((t.homology' n).map ((t.truncLEŒπ n).app X))) from
    isIso_of_reflects_iso ((t.homology' n).map ((t.truncLEŒπ n).app X)) t.ŒπHeart'
  dsimp [homology']
  infer_instance

lemma case‚ÇÇ (h‚ÇÅ : t.IsLE T.obj‚ÇÅ 0) :
    (shortComplex t hT).Exact ‚àß Epi (shortComplex t hT).g := by
  have h' := case‚ÇÅ t (t.truncLETriangle_distinguished T hT 0)
  refine' (ShortComplex.exact_and_epi_g_iff_of_iso _).1 h'
  refine' ShortComplex.isoMk
    (asIso ((t.homology' 0).map ((t.truncLEŒπ 0).app T.obj‚ÇÅ)))
    (asIso ((t.homology' 0).map ((t.truncLEŒπ 0).app T.obj‚ÇÇ)))
    (asIso ((t.homology' 0).map ((t.truncLEŒπ 0).app T.obj‚ÇÉ))) _ _
  all_goals
    dsimp
    simp only [‚Üê Functor.map_comp, NatTrans.naturality, Functor.id_obj, Functor.id_map]

lemma case‚ÇÅ' [t.IsGE T.obj‚ÇÅ 0] [t.IsGE T.obj‚ÇÇ 0] [t.IsGE T.obj‚ÇÉ 0] :
    (shortComplex t hT).Exact ‚àß Mono (shortComplex t hT).f := by
  let S := fun A => (shortComplex t hT).map (preadditiveCoyoneda.obj (Opposite.op A))
  let S' := fun A => (ShortComplex.mk _ _ (comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ T hT)).map (preadditiveCoyoneda.obj (Opposite.op A))
  suffices ‚àÄ A, (S A).Exact ‚àß Mono (S A).f by
    rw [ShortComplex.exact_and_mono_f_iff_preadditiveCoyoneda]
    exact this
  intro A
  let e' : ‚àÄ (X : C) [t.IsGE X 0],
    (preadditiveCoyoneda.obj (Opposite.op A)).obj (((t.homology' 0).obj X)) ‚âÖ
    (preadditiveCoyoneda.obj (Opposite.op A.1)).obj X := fun X _ =>
      asIso ((preadditiveCoyoneda.obj (Opposite.op A.1)).map (t.fromHomology‚ÇÄ X))
  have e : S A ‚âÖ S' A.1 := by
    refine' ShortComplex.isoMk (e' T.obj‚ÇÅ) (e' T.obj‚ÇÇ) (e' T.obj‚ÇÉ) _ _
    ¬∑ simpa only [Functor.map_comp] using
        (preadditiveCoyoneda.obj (Opposite.op A.1)).congr_map (t.fromHomology‚ÇÄ_naturality T.mor‚ÇÅ).symm
    ¬∑ simpa only [Functor.map_comp] using
        (preadditiveCoyoneda.obj (Opposite.op A.1)).congr_map (t.fromHomology‚ÇÄ_naturality T.mor‚ÇÇ).symm
  rw [ShortComplex.exact_and_mono_f_iff_of_iso e]
  refine' ‚ü®(preadditiveCoyoneda.obj (Opposite.op A.1)).map_distinguished_exact _ hT,
    ((preadditiveCoyoneda.obj (Opposite.op A.1)).map_distinguished_exact _ (inv_rot_of_dist_triangle _ hT)).mono_g _‚ü©
  apply IsZero.eq_of_src
  apply AddCommGroupCat.isZero
  intro (x : A.obj ‚ü∂ T.obj‚ÇÉ‚ü¶-1‚üß)
  have : t.IsGE (T.obj‚ÇÉ‚ü¶(-1 : ‚Ñ§)‚üß) 1 := t.isGE_shift T.obj‚ÇÉ 0 (-1) 1 (by linarith)
  exact t.zero x 0 1 (by linarith)

instance (X : C) (n : ‚Ñ§) : IsIso ((t.truncGE n).map ((t.truncGEœÄ n).app X)) := by
  apply isIso_truncGE_map_truncGEœÄ_app
  rfl

instance (X : C) (n : ‚Ñ§) : IsIso ((t.truncLTGE n (n+1)).map ((t.truncGEœÄ n).app X)) := by
  dsimp [truncLTGE]
  infer_instance

instance (X : C) (n : ‚Ñ§) : IsIso ((t.truncGELE n n).map ((t.truncGEœÄ n).app X)) := by
  have e : t.truncGELE n n ‚âÖ t.truncLTGE n (n+1) := asIso (t.natTransTruncGELTTruncLTGE n (n+1))
  rw [NatIso.isIso_map_iff e ((t.truncGEœÄ n).app X)]
  infer_instance

instance (X : C) (n : ‚Ñ§) : IsIso ((t.homology' n).map ((t.truncGEœÄ n).app X)) := by
  suffices IsIso (t.ŒπHeart'.map ((t.homology' n).map ((t.truncGEœÄ n).app X))) from
    isIso_of_reflects_iso ((t.homology' n).map ((t.truncGEœÄ n).app X)) t.ŒπHeart'
  dsimp [homology']
  infer_instance

lemma case‚ÇÇ' (h‚ÇÉ : t.IsGE T.obj‚ÇÉ 0) :
    (shortComplex t hT).Exact ‚àß Mono (shortComplex t hT).f := by
  have h' := case‚ÇÅ' t (t.truncGETriangle_distinguished T hT 0)
  refine' (ShortComplex.exact_and_mono_f_iff_of_iso _).2 h'
  refine' ShortComplex.isoMk
    (asIso ((t.homology' 0).map ((t.truncGEœÄ 0).app T.obj‚ÇÅ)))
    (asIso ((t.homology' 0).map ((t.truncGEœÄ 0).app T.obj‚ÇÇ)))
    (asIso ((t.homology' 0).map ((t.truncGEœÄ 0).app T.obj‚ÇÉ))) _ _
  all_goals
    dsimp
    simp only [‚Üê Functor.map_comp]
    congr 1
    exact ((t.truncGEœÄ 0).naturality _).symm

end HomologicalFunctorAux

instance (X : C) (n : ‚Ñ§) : t.IsGE (((t.truncGE n).obj X)‚ü¶n‚üß) 0 :=
  t.isGE_shift _ n n 0 (add_zero n)

open HomologicalFunctorAux in
instance : (t.homology' 0).IsHomological where
  exact T hT := by
    have h‚ÇÅ := t.triangleLEGE_distinguished 0 1 (by linarith) T.obj‚ÇÅ
    obtain ‚ü®U, f, g, h‚ÇÉ‚ü© := distinguished_cocone_triangle ((t.truncLEŒπ 0).app T.obj‚ÇÅ ‚â´ T.mor‚ÇÅ)
    have H := someOctahedron rfl h‚ÇÅ hT h‚ÇÉ
    have ex‚ÇÅ := case‚ÇÇ t h‚ÇÉ (by dsimp; infer_instance)
    have ex‚ÇÇ := case‚ÇÇ' t (rot_of_dist_triangle _ H.mem) (by dsimp; infer_instance)
    dsimp [Triangle.rotate] at ex‚ÇÇ
    have := ex‚ÇÅ.2
    have : Mono (shortComplex t (rot_of_dist_triangle _ H.mem)).f := ex‚ÇÇ.2
    have ex‚ÇÉ := ShortComplex‚ÇÑ.connectShortComplex_exact (shortComplex t h‚ÇÉ)
      (shortComplex t (rot_of_dist_triangle _ H.mem)) (Iso.refl _)
        ((t.homology' 0).map T.mor‚ÇÇ) (by
          dsimp [shortComplex, ShortComplex.map]
          rw [id_comp, ‚Üê Functor.map_comp, H.comm‚ÇÉ]) ex‚ÇÅ.1 ex‚ÇÇ.1
    refine' ShortComplex.exact_of_iso _ ex‚ÇÉ.exact‚ÇÇ
    refine' ShortComplex.isoMk (asIso ((t.homology' 0).map ((t.truncLEŒπ 0).app T.obj‚ÇÅ)))
        (Iso.refl _) (Iso.refl _) _ _
    all_goals
      dsimp; simp; rfl

end TStructure

end Triangulated

end CategoryTheory
