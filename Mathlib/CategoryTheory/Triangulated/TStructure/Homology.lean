import Mathlib.CategoryTheory.Triangulated.TStructure.TExact
import Mathlib.CategoryTheory.Triangulated.TStructure.AbelianSubcategory
import Mathlib.CategoryTheory.Limits.FullSubcategory

namespace CategoryTheory

open Limits Pretriangulated ZeroObject

namespace Functor

variable {C D H : Type*} [Category C] [Category D] [Category H]
  (i : C ‚•§ D) [Full i] [Faithful i]

def preimageNatTrans {F‚ÇÅ F‚ÇÇ : H ‚•§ C} (œÑ : F‚ÇÅ ‚ãô i ‚ü∂ F‚ÇÇ ‚ãô i) : F‚ÇÅ ‚ü∂ F‚ÇÇ where
  app X := i.preimage (œÑ.app X)
  naturality {X Y} f := i.map_injective (by
    simp only [map_comp, image_preimage]
    exact œÑ.naturality f)

@[simp]
lemma image_preimageNatTrans {F‚ÇÅ F‚ÇÇ : H ‚•§ C} (œÑ : F‚ÇÅ ‚ãô i ‚ü∂ F‚ÇÇ ‚ãô i) (X : H) :
    i.map ((i.preimageNatTrans œÑ).app X) = œÑ.app X := by
  simp [preimageNatTrans]

@[simp]
lemma preimageNatTrans_id (F : H ‚•§ C) : i.preimageNatTrans (ùüô (F ‚ãô i)) = ùüô F := by
  ext X
  apply i.map_injective
  simp

@[reassoc (attr := simp)]
lemma preimageNatTrans_comp {F‚ÇÅ F‚ÇÇ F‚ÇÉ : H ‚•§ C} (œÑ : F‚ÇÅ ‚ãô i ‚ü∂ F‚ÇÇ ‚ãô i) (œÑ' : F‚ÇÇ ‚ãô i ‚ü∂ F‚ÇÉ ‚ãô i) :
    i.preimageNatTrans œÑ ‚â´ i.preimageNatTrans œÑ' = i.preimageNatTrans (œÑ ‚â´ œÑ') := by
  ext X
  apply i.map_injective
  simp

@[simps]
def preimageNatIso {F‚ÇÅ F‚ÇÇ : H ‚•§ C} (e : F‚ÇÅ ‚ãô i ‚âÖ F‚ÇÇ ‚ãô i) : F‚ÇÅ ‚âÖ F‚ÇÇ where
  hom := i.preimageNatTrans e.hom
  inv := i.preimageNatTrans e.inv

noncomputable def isEquivalenceFullSubcategoryLift (S : Set D) (hi : i.essImage = S) :
    IsEquivalence (FullSubcategory.lift S i
      (fun X => by rw [‚Üê hi]; exact obj_mem_essImage i X)) := by
  let F := FullSubcategory.lift S i
      (fun X => by rw [‚Üê hi]; exact obj_mem_essImage i X)
  have : Full F := fullOfSurjective _ (fun X Y f => ‚ü®i.preimage f, by simp‚ü©)
  have : Faithful F := ‚ü®fun {X Y} f g h => i.map_injective h‚ü©
  have : EssSurj F := ‚ü®by
    rintro ‚ü®X, hX‚ü©
    rw [‚Üê hi] at hX
    obtain ‚ü®Y, ‚ü®e‚ü©‚ü© := hX
    exact ‚ü®Y, ‚ü®(fullSubcategoryInclusion S).preimageIso e‚ü©‚ü©‚ü©
  apply Equivalence.ofFullyFaithfullyEssSurj

end Functor

variable {C : Type*} [Category C] [Preadditive C] [HasZeroObject C] [HasShift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]

namespace Triangulated

namespace TStructure

variable (t : TStructure C) [t.HasHeart] [IsTriangulated C]

class HasHomology‚ÇÄ where
  homology‚ÇÄ : C ‚•§ t.Heart
  iso : homology‚ÇÄ ‚ãô t.ŒπHeart ‚âÖ t.truncGELE 0 0

variable [IsTriangulated C]

lemma truncLE‚ÇÄGE‚ÇÄ_mem_heart (X : C) :
    (t.truncLEGE 0 0).obj X ‚àà t.heart := by
  rw [t.mem_heart_iff]
  dsimp [truncLEGE]
  constructor
  ¬∑ infer_instance
  ¬∑ infer_instance

lemma truncGE‚ÇÄLE‚ÇÄ_mem_heart (X : C) :
    (t.truncGELE 0 0).obj X ‚àà t.heart := by
  rw [t.mem_heart_iff]
  constructor <;> infer_instance

noncomputable def hasHomology‚ÇÄ : t.HasHomology‚ÇÄ where
  homology‚ÇÄ := t.liftHeart (t.truncGELE 0 0) t.truncGE‚ÇÄLE‚ÇÄ_mem_heart
  iso := t.liftHeartŒπHeart _ _

variable [ht : t.HasHomology‚ÇÄ]

def homology‚ÇÄ : C ‚•§ t.Heart := ht.homology‚ÇÄ

def homology‚ÇÄŒπHeart : t.homology‚ÇÄ ‚ãô t.ŒπHeart ‚âÖ t.truncGELE 0 0 := ht.iso

end TStructure

namespace Subcategory

variable (S : Subcategory C) (t : TStructure C)
  [S.HasInducedTStructure t] [t.HasHeart]

instance : S.Œπ.TExact (S.tStructure t) t where
  rightTExact := ‚ü®fun _ _ ‚ü®hX‚ü© => ‚ü®hX‚ü©‚ü©
  leftTExact := ‚ü®fun _ _ ‚ü®hX‚ü© => ‚ü®hX‚ü©‚ü©

class ContainsHeart : Prop where
  subset : t.heart ‚äÜ S.set

variable [hS : S.ContainsHeart t]

instance : (S.tStructure t).HasHeart where
  H := t.Heart
  Œπ := FullSubcategory.lift _ t.ŒπHeart (fun X => hS.subset (t.ŒπHeart_obj_mem X))
  additive_Œπ := ‚ü®fun {X Y f g} => S.Œπ.map_injective (by simp)‚ü©
  fullŒπ := { preimage := fun f => t.ŒπHeart.preimage f }
  faithful_Œπ := ‚ü®fun {X Y} f g h => t.ŒπHeart.map_injective h‚ü©
  hŒπ := by
    ext X
    constructor
    ¬∑ rintro ‚ü®Y, ‚ü®e‚ü©‚ü©
      exact t.heart.mem_of_iso ((fullSubcategoryInclusion _).mapIso e)
        (t.ŒπHeart_obj_mem Y)
    ¬∑ intro hX
      exact ‚ü®_, ‚ü®(fullSubcategoryInclusion _).preimageIso (t.ŒπHeartObjHeartMkIso _ hX)‚ü©‚ü©

def ŒπHeartIso : (S.tStructure t).ŒπHeart ‚ãô S.Œπ ‚âÖ t.ŒπHeart := Iso.refl _

variable [t.HasHomology‚ÇÄ]

noncomputable instance : (S.tStructure t).HasHomology‚ÇÄ where
  homology‚ÇÄ := S.Œπ ‚ãô t.homology‚ÇÄ
  iso := S.Œπ.preimageNatIso (Functor.associator _ _ _ ‚â™‚â´ isoWhiskerLeft _ (S.ŒπHeartIso t) ‚â™‚â´
      Functor.associator _ _ _ ‚â™‚â´ isoWhiskerLeft _ t.homology‚ÇÄŒπHeart ‚â™‚â´
      (S.Œπ.truncGELEIso (S.tStructure t) t 0 0).symm)

noncomputable instance [t.homology‚ÇÄ.ShiftSequence ‚Ñ§] :
    (S.tStructure t).homology‚ÇÄ.ShiftSequence ‚Ñ§ :=
  (inferInstance : (S.Œπ ‚ãô t.homology‚ÇÄ).ShiftSequence ‚Ñ§)

instance : t.plus.ContainsHeart t where
  subset _ hX := ‚ü®0, ‚ü®hX.2‚ü©‚ü©

instance : t.minus.ContainsHeart t where
  subset _ hX := ‚ü®0, ‚ü®hX.1‚ü©‚ü©

end Subcategory

namespace TStructure

variable (t : TStructure C) [IsTriangulated C]

abbrev tPlus := t.plus.tStructure t
abbrev tMinus := t.minus.tStructure t

section

lemma zero_mem_heart : 0 ‚àà t.heart := by
  rw [t.mem_heart_iff]
  constructor <;> infer_instance

lemma prod_mem_heart (X‚ÇÅ X‚ÇÇ : C) (hX‚ÇÅ : X‚ÇÅ ‚àà t.heart) (hX‚ÇÇ : X‚ÇÇ ‚àà t.heart) :
    (X‚ÇÅ ‚®Ø X‚ÇÇ) ‚àà t.heart := by
  rw [t.mem_heart_iff]
  constructor
  ¬∑ exact t.isLE‚ÇÇ _ (binaryProductTriangle_distinguished X‚ÇÅ X‚ÇÇ) 0 ‚ü®hX‚ÇÅ.1‚ü© ‚ü®hX‚ÇÇ.1‚ü©
  ¬∑ exact t.isGE‚ÇÇ _ (binaryProductTriangle_distinguished X‚ÇÅ X‚ÇÇ) 0 ‚ü®hX‚ÇÅ.2‚ü© ‚ü®hX‚ÇÇ.2‚ü©

instance : HasTerminal (FullSubcategory t.heart) := by
  let Z : FullSubcategory t.heart := ‚ü®0, t.zero_mem_heart‚ü©
  have : ‚àÄ X, Inhabited (X ‚ü∂ Z) := fun X => ‚ü®0‚ü©
  have : ‚àÄ X, Unique (X ‚ü∂ Z) := fun X =>
    { uniq := fun f => (fullSubcategoryInclusion t.heart).map_injective ((isZero_zero C).eq_of_tgt _ _) }
  exact hasTerminal_of_unique Z

instance : HasBinaryProducts (FullSubcategory t.heart) := by
  apply hasLimitsOfShape_of_closed_under_limits
  intro F c hc H
  exact t.heart.mem_of_iso
    (limit.isoLimitCone ‚ü®_, (IsLimit.postcomposeHomEquiv (diagramIsoPair F) _).symm hc‚ü©)
    (prod_mem_heart t _ _ (H _) (H _))

instance : HasFiniteProducts (FullSubcategory t.heart) := hasFiniteProducts_of_has_binary_and_terminal

variable [t.HasHeart]

noncomputable def heartEquivalenceFullsubcategory :
    t.Heart ‚âå FullSubcategory t.heart :=
  have := t.ŒπHeart.isEquivalenceFullSubcategoryLift t.heart (by
    ext X
    rw [t.mem_essImage_ŒπHeart_iff])
  @Functor.asEquivalence _ _ _ _ _ this

instance : HasFiniteProducts t.Heart where
  out _ := Adjunction.hasLimitsOfShape_of_equivalence
      t.heartEquivalenceFullsubcategory.functor

instance (X : C) (n : ‚Ñ§) [t.IsGE X 0] : t.IsGE (X‚ü¶n‚üß) (-n) :=
  t.isGE_shift X 0 n (-n) (by linarith)

instance (X : C) (n : ‚Ñ§) [t.IsGE X 0] : t.IsGE (X‚ü¶-n‚üß) n :=
  t.isGE_shift X 0 (-n) n (by linarith)

instance (X : C) (n : ‚Ñ§) [t.IsLE X 0] : t.IsLE (X‚ü¶n‚üß) (-n) :=
  t.isLE_shift X 0 n (-n) (by linarith)

instance (X : C) (n : ‚Ñ§) [t.IsLE X 0] : t.IsLE (X‚ü¶-n‚üß) n :=
  t.isLE_shift X 0 (-n) n (by linarith)

instance (X : C) [t.IsLE X 0] : t.IsLE X 1 :=
  t.isLE_of_LE X 0 1 (by linarith)

instance (X : C) (n : ‚Ñ§) [t.IsLE X n] : t.IsLE (X‚ü¶(1 : ‚Ñ§)‚üß) n :=
  have := t.isLE_shift X n 1 (n - 1) (by linarith)
  t.isLE_of_LE (X‚ü¶(1 : ‚Ñ§)‚üß) (n - 1) n (by linarith)

instance (X : C) [t.IsGE X 0] : t.IsGE X (-1) :=
  t.isGE_of_GE X (-1) 0 (by linarith)

instance (X : C) (n : ‚Ñ§) [t.IsLE X n] : t.IsLE (X‚ü¶n‚üß) 0 :=
  t.isLE_shift X n n 0 (add_zero n)

instance (X : C) (n : ‚Ñ§) [t.IsGE X n] : t.IsGE (X‚ü¶n‚üß) 0 :=
  t.isGE_shift X n n 0 (add_zero n)

section

variable {X‚ÇÅ X‚ÇÇ : t.Heart} {X‚ÇÉ : C} {f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {f‚ÇÇ : t.ŒπHeart.obj X‚ÇÇ ‚ü∂ X‚ÇÉ}
    {f‚ÇÉ : X‚ÇÉ ‚ü∂ (t.ŒπHeart.obj X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß}
    (hT : Triangle.mk (t.ŒπHeart.map f‚ÇÅ) f‚ÇÇ f‚ÇÉ ‚àà distTriang C)

lemma cocone_heart_isLE_zero : t.IsLE X‚ÇÉ 0 :=
  t.isLE‚ÇÇ _ (rot_of_dist_triangle _ hT) 0 (by dsimp; infer_instance)
    (by dsimp; infer_instance)

lemma cocone_heart_isGE_neg_one : t.IsGE X‚ÇÉ (-1) :=
  t.isGE‚ÇÇ _ (rot_of_dist_triangle _ hT) (-1)
    (by dsimp; infer_instance) (by dsimp; infer_instance)

end

lemma exists_distinguished_triangle_of_isLE_zero_of_isGE_neg_one
    (X : C) [t.IsLE X 0] [t.IsGE X (-1)] :
    ‚àÉ (K Q : t.Heart) (Œ± : (t.ŒπHeart.obj K)‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ X) (Œ≤ : X ‚ü∂ t.ŒπHeart.obj Q)
      (Œ≥ : t.ŒπHeart.obj Q ‚ü∂ (t.ŒπHeart.obj K)‚ü¶(1 : ‚Ñ§)‚üß‚ü¶(1 : ‚Ñ§)‚üß),
      Triangle.mk Œ± Œ≤ Œ≥ ‚àà distTriang C := by
  have hK : ((t.truncLE (-1)).obj X)‚ü¶(-1 : ‚Ñ§)‚üß ‚àà t.heart := by
    rw [t.mem_heart_iff]
    constructor <;> dsimp <;> infer_instance
  have hQ : (t.truncGE 0).obj X ‚àà t.heart := by
    rw [t.mem_heart_iff]
    constructor <;> infer_instance
  have e‚ÇÅ := (shiftFunctor C (1 : ‚Ñ§)).mapIso (t.ŒπHeartObjHeartMkIso _ hK) ‚â™‚â´
    (shiftEquiv C (1 : ‚Ñ§)).counitIso.app _
  have e‚ÇÉ := t.ŒπHeartObjHeartMkIso _ hQ
  refine' ‚ü®t.heartMk _ hK, t.heartMk _ hQ, e‚ÇÅ.hom ‚â´ (t.truncLEŒπ (-1)).app X,
    (t.truncGEœÄ 0).app X ‚â´ e‚ÇÉ.inv,
    e‚ÇÉ.hom ‚â´ (t.truncGEŒ¥LE (-1) 0 (by linarith)).app X ‚â´ e‚ÇÅ.inv‚ü¶(1 : ‚Ñ§)‚üß', _‚ü©
  refine' isomorphic_distinguished _ (t.triangleLEGE_distinguished (-1) 0 (by linarith) X) _ _
  refine' Triangle.isoMk _ _ e‚ÇÅ (Iso.refl _) e‚ÇÉ _ _ _
  ¬∑ dsimp
    simp
  ¬∑ dsimp
    simp
  ¬∑ dsimp
    simp only [Category.assoc, Iso.cancel_iso_hom_left, ‚Üê Functor.map_comp,
      e‚ÇÅ.inv_hom_id, Functor.id_obj, Functor.map_id, Category.comp_id]

lemma admissibleMorphism_heart {X‚ÇÅ X‚ÇÇ : t.Heart} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
    AbelianSubcategory.admissibleMorphism t.ŒπHeart f := by
  intro X‚ÇÉ f‚ÇÇ f‚ÇÉ hT
  have := t.cocone_heart_isLE_zero hT
  have := t.cocone_heart_isGE_neg_one hT
  exact t.exists_distinguished_triangle_of_isLE_zero_of_isGE_neg_one X‚ÇÉ

lemma abelian_heart [t.HasHomology‚ÇÄ] : Abelian t.Heart := by
  apply AbelianSubcategory.abelian t.ŒπHeart
  ¬∑ intro X Y n f hn
    exact t.zero f 0 (-n) (by linarith)
  ¬∑ apply admissibleMorphism_heart

end

noncomputable instance [t.HasHeart] : Abelian t.Heart := by
  have := t.hasHomology‚ÇÄ
  apply abelian_heart

end TStructure

end Triangulated

end CategoryTheory
