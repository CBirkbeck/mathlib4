import Mathlib.CategoryTheory.Triangulated.TStructure.TExact
import Mathlib.CategoryTheory.Triangulated.TStructure.AbelianSubcategory
import Mathlib.CategoryTheory.Limits.FullSubcategory
import Mathlib.CategoryTheory.Preadditive.Yoneda.Basic
import Mathlib.Algebra.Homology.ShortComplex.Ab

universe v v'

open CategoryTheory Category Limits Pretriangulated Preadditive ZeroObject

namespace AddCommGroupCat

lemma isZero (X : AddCommGroupCat) (hX : ‚àÄ (x : X), x = 0) :
    CategoryTheory.Limits.IsZero X := by
  rw [CategoryTheory.Limits.IsZero.iff_id_eq_zero]
  ext x
  exact hX x

@[simps]
def uliftFunctor : AddCommGroupCat.{v'} ‚•§ AddCommGroupCat.{max v v'} where
  obj G := AddCommGroupCat.of (ULift.{v, v'} G.Œ±)
  map f := AddCommGroupCat.ofHom (AddMonoidHom.mk' (uliftFunctor.map f) (by
    rintro ‚ü®a‚ü© ‚ü®b‚ü©
    dsimp
    rw [map_add]
    rfl))

@[simps!]
def addEquivULiftFunctorObj (X : AddCommGroupCat.{v'}) :
    uliftFunctor.{v, v'}.obj X ‚âÉ+ X :=
  AddEquiv.mk' Equiv.ulift (fun _ _ => rfl)

instance : uliftFunctor.{v, v'}.Additive where

instance : Faithful uliftFunctor.{v, v'} where
  map_injective {G‚ÇÅ G‚ÇÇ} f g h := by
    ext x
    change (uliftFunctor.{v, v'}.map f ‚ü®x‚ü©).down = (uliftFunctor.{v, v'}.map g ‚ü®x‚ü©).down
    rw [h]

instance : Full uliftFunctor.{v, v'} where
  preimage {X Y} f := AddMonoidHom.mk' (fun x => (f ‚ü®x‚ü©).down) (by
    rintro a b
    dsimp
    erw [f.map_add ‚ü®a‚ü© ‚ü®b‚ü©]
    rfl)

lemma _root_.CategoryTheory.ShortComplex.ab_exact_iff_ulift
    (S : ShortComplex (AddCommGroupCat.{v'})) :
    (S.map (uliftFunctor.{v, v'})).Exact ‚Üî S.Exact := by
  simp only [ShortComplex.ab_exact_iff]
  constructor
  ¬∑ intro h x‚ÇÇ hx‚ÇÇ
    obtain ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü© := h ‚ü®x‚ÇÇ‚ü© (congr_arg ULift.up.{v, v'} hx‚ÇÇ)
    exact ‚ü®x‚ÇÅ.down, congr_arg ULift.down hx‚ÇÅ‚ü©
  ¬∑ intro h x‚ÇÇ hx‚ÇÇ
    obtain ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü© := h x‚ÇÇ.down (congr_arg ULift.down.{v, v'} hx‚ÇÇ)
    exact ‚ü®ULift.up x‚ÇÅ, congr_arg ULift.up hx‚ÇÅ‚ü©

def ShortComplexIso (S : ShortComplex AddCommGroupCat.{v}) (S' : ShortComplex AddCommGroupCat.{v'}) :=
  S.map (uliftFunctor.{v', v}) ‚âÖ S'.map (uliftFunctor.{v, v'})

@[simps!]
def _root_.AddEquiv.toIsoULift {A : AddCommGroupCat.{v}} {B : AddCommGroupCat.{v'}} (e : A ‚âÉ+ B) :
    uliftFunctor.{v', v}.obj A ‚âÖ uliftFunctor.{v, v'}.obj B :=
  AddEquiv.toAddCommGroupCatIso ((addEquivULiftFunctorObj.{v', v} A).trans
    (e.trans (addEquivULiftFunctorObj.{v, v'} B).symm))

section

variable
  (S : ShortComplex AddCommGroupCat.{v}) (S' : ShortComplex AddCommGroupCat.{v'})
  (e‚ÇÅ : S.X‚ÇÅ ‚âÉ+ S'.X‚ÇÅ) (e‚ÇÇ : S.X‚ÇÇ ‚âÉ+ S'.X‚ÇÇ) (e‚ÇÉ : S.X‚ÇÉ ‚âÉ+ S'.X‚ÇÉ)
  (commf : ‚àÄ (x‚ÇÅ : S.X‚ÇÅ), S'.f (e‚ÇÅ x‚ÇÅ) = e‚ÇÇ (S.f x‚ÇÅ))
  (commg : ‚àÄ (x‚ÇÇ : S.X‚ÇÇ), S'.g (e‚ÇÇ x‚ÇÇ) = e‚ÇÉ (S.g x‚ÇÇ))

def ShortComplexIso.mk : S.map (uliftFunctor.{v', v}) ‚âÖ S'.map (uliftFunctor.{v, v'}) :=
  ShortComplex.isoMk e‚ÇÅ.toIsoULift e‚ÇÇ.toIsoULift e‚ÇÉ.toIsoULift (by
    ext x‚ÇÅ
    exact Equiv.ulift.injective (commf x‚ÇÅ.down)) (by
    ext x‚ÇÇ
    exact Equiv.ulift.injective (commg x‚ÇÇ.down))

lemma _root_.ShortComplex.ab_exact_iff_of_addEquiv :
    S.Exact ‚Üî S'.Exact := by
  rw [‚Üê ShortComplex.ab_exact_iff_ulift.{v', v} S,
    ‚Üê ShortComplex.ab_exact_iff_ulift.{v, v'} S']
  exact ShortComplex.exact_iff_of_iso (ShortComplexIso.mk S S' e‚ÇÅ e‚ÇÇ e‚ÇÉ commf commg)

end

end AddCommGroupCat

namespace CategoryTheory

namespace Limits

namespace CokernelCofork

variable {C : Type*} [Category C] [Preadditive C]

def nonempty_isColimit_iff_preadditiveYoneda {X Y : C} {f : X ‚ü∂ Y} (c : CokernelCofork f) :
    Nonempty (IsColimit c) ‚Üî ‚àÄ (A : C), ((ShortComplex.mk _ _ c.condition).op.map (preadditiveYoneda.obj A)).Exact ‚àß
      Mono (((ShortComplex.mk _ _ c.condition).op.map (preadditiveYoneda.obj A)).f) := by
  simp_rw [ShortComplex.ab_exact_iff, AddCommGroupCat.mono_iff_injective]
  constructor
  ¬∑ intro ‚ü®h‚ü© A
    constructor
    ¬∑ rintro (x‚ÇÇ : Y ‚ü∂ A) (hx‚ÇÇ : f ‚â´ x‚ÇÇ = 0)
      exact ‚ü®_, (CokernelCofork.IsColimit.desc' h x‚ÇÇ hx‚ÇÇ).2‚ü©
    ¬∑ rintro (x‚ÇÅ : c.pt ‚ü∂ A) (x‚ÇÅ' : c.pt ‚ü∂ A) (h‚ÇÅ : c.œÄ ‚â´ x‚ÇÅ = c.œÄ ‚â´ x‚ÇÅ')
      exact Cofork.IsColimit.hom_ext h h‚ÇÅ
  ¬∑ rintro h
    exact ‚ü®Cofork.IsColimit.mk _
      (fun s => ((h _).1 s.œÄ (CokernelCofork.condition s)).choose)
      (fun s => ((h _).1 s.œÄ (CokernelCofork.condition s)).choose_spec)
      (fun s m hm => (h _).2
        (hm.trans ((h _).1 s.œÄ (CokernelCofork.condition s)).choose_spec.symm))‚ü©

end CokernelCofork

namespace KernelFork

variable {C : Type*} [Category C] [Preadditive C]

def nonempty_isLimit_iff_preadditiveCoyoneda {X Y : C} {f : X ‚ü∂ Y} (c : KernelFork f) :
    Nonempty (IsLimit c) ‚Üî ‚àÄ (A : C), ((ShortComplex.mk _ _ c.condition).map (preadditiveCoyoneda.obj (Opposite.op A))).Exact ‚àß
      Mono (((ShortComplex.mk _ _ c.condition).map (preadditiveCoyoneda.obj (Opposite.op A))).f) := by
  simp_rw [ShortComplex.ab_exact_iff, AddCommGroupCat.mono_iff_injective]
  constructor
  ¬∑ intro ‚ü®h‚ü© A
    constructor
    ¬∑ rintro (x‚ÇÇ : A ‚ü∂ X) (hx‚ÇÇ : x‚ÇÇ ‚â´ f = 0)
      exact ‚ü®_, (KernelFork.IsLimit.lift' h x‚ÇÇ hx‚ÇÇ).2‚ü©
    ¬∑ rintro (x‚ÇÅ : A ‚ü∂ c.pt) (x‚ÇÅ' : A ‚ü∂ c.pt) (h‚ÇÅ : x‚ÇÅ ‚â´ c.Œπ = x‚ÇÅ' ‚â´ c.Œπ)
      exact Fork.IsLimit.hom_ext h h‚ÇÅ
  ¬∑ rintro h
    exact ‚ü®Fork.IsLimit.mk _
      (fun s => ((h _).1 s.Œπ (KernelFork.condition s)).choose)
      (fun s => ((h _).1 s.Œπ (KernelFork.condition s)).choose_spec)
      (fun s m hm => (h _).2 (hm.trans ((h _).1 s.Œπ (KernelFork.condition s)).choose_spec.symm))‚ü©

end KernelFork

end Limits

namespace ShortComplex

variable {C : Type*} [Category C]

lemma exact_and_mono_f_iff_of_iso [HasZeroMorphisms C] {S T : ShortComplex C} (e : S ‚âÖ T) :
    (S.Exact ‚àß Mono S.f) ‚Üî (T.Exact ‚àß Mono T.f) := by
  have : Mono S.f ‚Üî Mono T.f :=
    MorphismProperty.RespectsIso.arrow_mk_iso_iff
      (MorphismProperty.RespectsIso.monomorphisms C)
      (Arrow.isoMk (ShortComplex.œÄ‚ÇÅ.mapIso e) (ShortComplex.œÄ‚ÇÇ.mapIso e) e.hom.comm‚ÇÅ‚ÇÇ)
  rw [exact_iff_of_iso e, this]

lemma exact_and_epi_g_iff_of_iso [HasZeroMorphisms C] {S T : ShortComplex C} (e : S ‚âÖ T) :
    (S.Exact ‚àß Epi S.g) ‚Üî (T.Exact ‚àß Epi T.g) := by
  have : Epi S.g ‚Üî Epi T.g :=
    MorphismProperty.RespectsIso.arrow_mk_iso_iff
      (MorphismProperty.RespectsIso.epimorphisms C)
      (Arrow.isoMk (ShortComplex.œÄ‚ÇÇ.mapIso e) (ShortComplex.œÄ‚ÇÉ.mapIso e) e.hom.comm‚ÇÇ‚ÇÉ)
  rw [exact_iff_of_iso e, this]

variable [Preadditive C]

lemma exact_and_epi_g_iff (S : ShortComplex C) [Balanced C] [S.HasHomology] :
    (S.Exact ‚àß Epi S.g) ‚Üî
      Nonempty (IsColimit (CokernelCofork.ofœÄ _ S.zero)) := by
  constructor
  ¬∑ rintro ‚ü®hS, _‚ü©
    exact ‚ü®hS.gIsCokernel‚ü©
  ¬∑ intro ‚ü®h‚ü©
    exact ‚ü®S.exact_of_g_is_cokernel h, ‚ü®fun _ _ => Cofork.IsColimit.hom_ext h‚ü©‚ü©

lemma exact_and_mono_f_iff (S : ShortComplex C) [Balanced C] [S.HasHomology] :
    (S.Exact ‚àß Mono S.f) ‚Üî
      Nonempty (IsLimit (KernelFork.ofŒπ _ S.zero)) := by
  constructor
  ¬∑ rintro ‚ü®hS, _‚ü©
    exact ‚ü®hS.fIsKernel‚ü©
  ¬∑ intro ‚ü®h‚ü©
    exact ‚ü®S.exact_of_f_is_kernel h, ‚ü®fun _ _ => Fork.IsLimit.hom_ext h‚ü©‚ü©

lemma exact_and_epi_g_iff_preadditiveYoneda (S : ShortComplex C) [Balanced C] [S.HasHomology] :
    (S.Exact ‚àß Epi S.g) ‚Üî
      ‚àÄ (A : C), (S.op.map (preadditiveYoneda.obj A)).Exact ‚àß
        Mono (S.op.map (preadditiveYoneda.obj A)).f := by
  rw [exact_and_epi_g_iff, CokernelCofork.nonempty_isColimit_iff_preadditiveYoneda]
  rfl

lemma exact_and_mono_f_iff_preadditiveCoyoneda (S : ShortComplex C) [Balanced C] [S.HasHomology] :
    (S.Exact ‚àß Mono S.f) ‚Üî
      ‚àÄ (A : C), (S.map (preadditiveCoyoneda.obj (Opposite.op A))).Exact ‚àß
        Mono (S.map (preadditiveCoyoneda.obj (Opposite.op A))).f := by
  rw [exact_and_mono_f_iff, KernelFork.nonempty_isLimit_iff_preadditiveCoyoneda]
  rfl

end ShortComplex


namespace Pretriangulated

variable {C : Type*} [Category C] [Preadditive C] [HasZeroObject C] [HasShift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]

lemma preadditiveYoneda_map_distinguished (A : C) (T : Triangle C) (hT : T ‚àà distTriang C) :
    ((ShortComplex.mk _ _ (comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ T hT)).op.map (preadditiveYoneda.obj A)).Exact := by
  rw [ShortComplex.ab_exact_iff]
  intro (x‚ÇÇ : T.obj‚ÇÇ ‚ü∂ A) (hx‚ÇÇ : T.mor‚ÇÅ ‚â´ x‚ÇÇ = 0)
  obtain ‚ü®x‚ÇÉ, hx‚ÇÉ‚ü© := T.yoneda_exact‚ÇÇ hT x‚ÇÇ hx‚ÇÇ
  exact ‚ü®x‚ÇÉ, hx‚ÇÉ.symm‚ü©

instance (A : C·µí·µñ) : (preadditiveCoyoneda.obj A).IsHomological where
  exact T hT := by
    rw [ShortComplex.ab_exact_iff]
    intro (x‚ÇÇ : A.unop ‚ü∂ T.obj‚ÇÇ) (hx‚ÇÇ : x‚ÇÇ ‚â´ T.mor‚ÇÇ = 0)
    obtain ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü© := T.coyoneda_exact‚ÇÇ hT x‚ÇÇ hx‚ÇÇ
    exact ‚ü®x‚ÇÅ, hx‚ÇÅ.symm‚ü©

end Pretriangulated

namespace Functor

variable {C D H : Type*} [Category C] [Category D] [Category H]
  (i : C ‚•§ D) [Full i] [Faithful i]

def preimageNatTrans {F‚ÇÅ F‚ÇÇ : H ‚•§ C} (œÑ : F‚ÇÅ ‚ãô i ‚ü∂ F‚ÇÇ ‚ãô i) : F‚ÇÅ ‚ü∂ F‚ÇÇ where
  app X := i.preimage (œÑ.app X)
  naturality {X Y} f := i.map_injective (by
    simp only [map_comp, image_preimage]
    exact œÑ.naturality f)

@[simp]
lemma image_preimageNatTrans {F‚ÇÅ F‚ÇÇ : H ‚•§ C} (œÑ : F‚ÇÅ ‚ãô i ‚ü∂ F‚ÇÇ ‚ãô i) (X : H) :
    i.map ((i.preimageNatTrans œÑ).app X) = œÑ.app X := by
  simp [preimageNatTrans]

@[simp]
lemma preimageNatTrans_id (F : H ‚•§ C) : i.preimageNatTrans (ùüô (F ‚ãô i)) = ùüô F := by
  ext X
  apply i.map_injective
  simp

@[reassoc (attr := simp)]
lemma preimageNatTrans_comp {F‚ÇÅ F‚ÇÇ F‚ÇÉ : H ‚•§ C} (œÑ : F‚ÇÅ ‚ãô i ‚ü∂ F‚ÇÇ ‚ãô i) (œÑ' : F‚ÇÇ ‚ãô i ‚ü∂ F‚ÇÉ ‚ãô i) :
    i.preimageNatTrans œÑ ‚â´ i.preimageNatTrans œÑ' = i.preimageNatTrans (œÑ ‚â´ œÑ') := by
  ext X
  apply i.map_injective
  simp

@[simps]
def preimageNatIso {F‚ÇÅ F‚ÇÇ : H ‚•§ C} (e : F‚ÇÅ ‚ãô i ‚âÖ F‚ÇÇ ‚ãô i) : F‚ÇÅ ‚âÖ F‚ÇÇ where
  hom := i.preimageNatTrans e.hom
  inv := i.preimageNatTrans e.inv

noncomputable def isEquivalenceFullSubcategoryLift (S : Set D) (hi : i.essImage = S) :
    IsEquivalence (FullSubcategory.lift S i
      (fun X => by rw [‚Üê hi]; exact obj_mem_essImage i X)) := by
  let F := FullSubcategory.lift S i
      (fun X => by rw [‚Üê hi]; exact obj_mem_essImage i X)
  have : Full F := fullOfSurjective _ (fun X Y f => ‚ü®i.preimage f, by simp‚ü©)
  have : Faithful F := ‚ü®fun {X Y} f g h => i.map_injective h‚ü©
  have : EssSurj F := ‚ü®by
    rintro ‚ü®X, hX‚ü©
    rw [‚Üê hi] at hX
    obtain ‚ü®Y, ‚ü®e‚ü©‚ü© := hX
    exact ‚ü®Y, ‚ü®(fullSubcategoryInclusion S).preimageIso e‚ü©‚ü©‚ü©
  apply Equivalence.ofFullyFaithfullyEssSurj

end Functor

variable {C : Type*} [Category.{v} C] [Preadditive C] [HasZeroObject C] [HasShift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]

namespace Triangulated

namespace TStructure

variable (t : TStructure C) [t.HasHeart] [IsTriangulated C]

class HasHomology‚ÇÄ where
  homology‚ÇÄ : C ‚•§ t.Heart
  iso : homology‚ÇÄ ‚ãô t.ŒπHeart ‚âÖ t.truncGELE 0 0

variable [IsTriangulated C]

lemma truncLE‚ÇÄGE‚ÇÄ_mem_heart (X : C) :
    (t.truncLEGE 0 0).obj X ‚àà t.heart := by
  rw [t.mem_heart_iff]
  dsimp [truncLEGE]
  constructor
  ¬∑ infer_instance
  ¬∑ infer_instance

lemma truncGE‚ÇÄLE‚ÇÄ_mem_heart (X : C) :
    (t.truncGELE 0 0).obj X ‚àà t.heart := by
  rw [t.mem_heart_iff]
  constructor <;> infer_instance

noncomputable def hasHomology‚ÇÄ : t.HasHomology‚ÇÄ where
  homology‚ÇÄ := t.liftHeart (t.truncGELE 0 0) t.truncGE‚ÇÄLE‚ÇÄ_mem_heart
  iso := t.liftHeartŒπHeart _ _

variable [ht : t.HasHomology‚ÇÄ]

def homology‚ÇÄ : C ‚•§ t.Heart := ht.homology‚ÇÄ

def homology‚ÇÄŒπHeart : t.homology‚ÇÄ ‚ãô t.ŒπHeart ‚âÖ t.truncGELE 0 0 := ht.iso

end TStructure

namespace Subcategory

variable (S : Subcategory C) (t : TStructure C)
  [S.HasInducedTStructure t] [t.HasHeart]

instance : S.Œπ.TExact (S.tStructure t) t where
  rightTExact := ‚ü®fun _ _ ‚ü®hX‚ü© => ‚ü®hX‚ü©‚ü©
  leftTExact := ‚ü®fun _ _ ‚ü®hX‚ü© => ‚ü®hX‚ü©‚ü©

class ContainsHeart : Prop where
  subset : t.heart ‚äÜ S.set

variable [hS : S.ContainsHeart t]

instance : (S.tStructure t).HasHeart where
  H := t.Heart
  Œπ := FullSubcategory.lift _ t.ŒπHeart (fun X => hS.subset (t.ŒπHeart_obj_mem X))
  additive_Œπ := ‚ü®fun {X Y f g} => S.Œπ.map_injective (by simp)‚ü©
  fullŒπ := { preimage := fun f => t.ŒπHeart.preimage f }
  faithful_Œπ := ‚ü®fun {X Y} f g h => t.ŒπHeart.map_injective h‚ü©
  hŒπ := by
    ext X
    constructor
    ¬∑ rintro ‚ü®Y, ‚ü®e‚ü©‚ü©
      exact t.heart.mem_of_iso ((fullSubcategoryInclusion _).mapIso e)
        (t.ŒπHeart_obj_mem Y)
    ¬∑ intro hX
      exact ‚ü®_, ‚ü®(fullSubcategoryInclusion _).preimageIso (t.ŒπHeartObjHeartMkIso _ hX)‚ü©‚ü©

def ŒπHeartIso : (S.tStructure t).ŒπHeart ‚ãô S.Œπ ‚âÖ t.ŒπHeart := Iso.refl _

variable [t.HasHomology‚ÇÄ]

noncomputable instance : (S.tStructure t).HasHomology‚ÇÄ where
  homology‚ÇÄ := S.Œπ ‚ãô t.homology‚ÇÄ
  iso := S.Œπ.preimageNatIso (Functor.associator _ _ _ ‚â™‚â´ isoWhiskerLeft _ (S.ŒπHeartIso t) ‚â™‚â´
      Functor.associator _ _ _ ‚â™‚â´ isoWhiskerLeft _ t.homology‚ÇÄŒπHeart ‚â™‚â´
      (S.Œπ.truncGELEIso (S.tStructure t) t 0 0).symm)

noncomputable instance [t.homology‚ÇÄ.ShiftSequence ‚Ñ§] :
    (S.tStructure t).homology‚ÇÄ.ShiftSequence ‚Ñ§ :=
  (inferInstance : (S.Œπ ‚ãô t.homology‚ÇÄ).ShiftSequence ‚Ñ§)

instance : t.plus.ContainsHeart t where
  subset _ hX := ‚ü®0, ‚ü®hX.2‚ü©‚ü©

instance : t.minus.ContainsHeart t where
  subset _ hX := ‚ü®0, ‚ü®hX.1‚ü©‚ü©

end Subcategory

namespace TStructure

variable (t : TStructure C) [IsTriangulated C]

abbrev tPlus := t.plus.tStructure t
abbrev tMinus := t.minus.tStructure t

section

lemma zero_mem_heart : 0 ‚àà t.heart := by
  rw [t.mem_heart_iff]
  constructor <;> infer_instance

lemma prod_mem_heart (X‚ÇÅ X‚ÇÇ : C) (hX‚ÇÅ : X‚ÇÅ ‚àà t.heart) (hX‚ÇÇ : X‚ÇÇ ‚àà t.heart) :
    (X‚ÇÅ ‚®Ø X‚ÇÇ) ‚àà t.heart := by
  rw [t.mem_heart_iff]
  constructor
  ¬∑ exact t.isLE‚ÇÇ _ (binaryProductTriangle_distinguished X‚ÇÅ X‚ÇÇ) 0 ‚ü®hX‚ÇÅ.1‚ü© ‚ü®hX‚ÇÇ.1‚ü©
  ¬∑ exact t.isGE‚ÇÇ _ (binaryProductTriangle_distinguished X‚ÇÅ X‚ÇÇ) 0 ‚ü®hX‚ÇÅ.2‚ü© ‚ü®hX‚ÇÇ.2‚ü©

instance : HasTerminal (FullSubcategory t.heart) := by
  let Z : FullSubcategory t.heart := ‚ü®0, t.zero_mem_heart‚ü©
  have : ‚àÄ X, Inhabited (X ‚ü∂ Z) := fun X => ‚ü®0‚ü©
  have : ‚àÄ X, Unique (X ‚ü∂ Z) := fun X =>
    { uniq := fun f => (fullSubcategoryInclusion t.heart).map_injective ((isZero_zero C).eq_of_tgt _ _) }
  exact hasTerminal_of_unique Z

instance : HasBinaryProducts (FullSubcategory t.heart) := by
  apply hasLimitsOfShape_of_closed_under_limits
  intro F c hc H
  exact t.heart.mem_of_iso
    (limit.isoLimitCone ‚ü®_, (IsLimit.postcomposeHomEquiv (diagramIsoPair F) _).symm hc‚ü©)
    (prod_mem_heart t _ _ (H _) (H _))

instance : HasFiniteProducts (FullSubcategory t.heart) := hasFiniteProducts_of_has_binary_and_terminal

variable [t.HasHeart]

noncomputable def heartEquivalenceFullsubcategory :
    t.Heart ‚âå FullSubcategory t.heart :=
  have := t.ŒπHeart.isEquivalenceFullSubcategoryLift t.heart (by
    ext X
    rw [t.mem_essImage_ŒπHeart_iff])
  @Functor.asEquivalence _ _ _ _ _ this

instance : HasFiniteProducts t.Heart where
  out _ := Adjunction.hasLimitsOfShape_of_equivalence
      t.heartEquivalenceFullsubcategory.functor

instance (X : C) (n : ‚Ñ§) [t.IsGE X 0] : t.IsGE (X‚ü¶n‚üß) (-n) :=
  t.isGE_shift X 0 n (-n) (by linarith)

instance (X : C) (n : ‚Ñ§) [t.IsGE X 0] : t.IsGE (X‚ü¶-n‚üß) n :=
  t.isGE_shift X 0 (-n) n (by linarith)

instance (X : C) (n : ‚Ñ§) [t.IsLE X 0] : t.IsLE (X‚ü¶n‚üß) (-n) :=
  t.isLE_shift X 0 n (-n) (by linarith)

instance (X : C) (n : ‚Ñ§) [t.IsLE X 0] : t.IsLE (X‚ü¶-n‚üß) n :=
  t.isLE_shift X 0 (-n) n (by linarith)

instance (X : C) [t.IsLE X 0] : t.IsLE X 1 :=
  t.isLE_of_LE X 0 1 (by linarith)

instance (X : C) (n : ‚Ñ§) [t.IsLE X n] : t.IsLE (X‚ü¶(1 : ‚Ñ§)‚üß) n :=
  have := t.isLE_shift X n 1 (n - 1) (by linarith)
  t.isLE_of_LE (X‚ü¶(1 : ‚Ñ§)‚üß) (n - 1) n (by linarith)

instance (X : C) [t.IsGE X 0] : t.IsGE X (-1) :=
  t.isGE_of_GE X (-1) 0 (by linarith)

instance (X : C) (n : ‚Ñ§) [t.IsLE X n] : t.IsLE (X‚ü¶n‚üß) 0 :=
  t.isLE_shift X n n 0 (add_zero n)

instance (X : C) (n : ‚Ñ§) [t.IsGE X n] : t.IsGE (X‚ü¶n‚üß) 0 :=
  t.isGE_shift X n n 0 (add_zero n)

instance (X : C) : t.IsLE ((t.truncLT 0).obj X) (-1) :=
  t.isLE_of_iso ((t.truncLEIsoTruncLT (-1) 0 (by linarith)).app X) (-1)

section

variable {X‚ÇÅ X‚ÇÇ : t.Heart} {X‚ÇÉ : C} {f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {f‚ÇÇ : t.ŒπHeart.obj X‚ÇÇ ‚ü∂ X‚ÇÉ}
    {f‚ÇÉ : X‚ÇÉ ‚ü∂ (t.ŒπHeart.obj X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß}
    (hT : Triangle.mk (t.ŒπHeart.map f‚ÇÅ) f‚ÇÇ f‚ÇÉ ‚àà distTriang C)

lemma cocone_heart_isLE_zero : t.IsLE X‚ÇÉ 0 :=
  t.isLE‚ÇÇ _ (rot_of_dist_triangle _ hT) 0 (by dsimp; infer_instance)
    (by dsimp; infer_instance)

lemma cocone_heart_isGE_neg_one : t.IsGE X‚ÇÉ (-1) :=
  t.isGE‚ÇÇ _ (rot_of_dist_triangle _ hT) (-1)
    (by dsimp; infer_instance) (by dsimp; infer_instance)

end

lemma exists_distinguished_triangle_of_isLE_zero_of_isGE_neg_one
    (X : C) [t.IsLE X 0] [t.IsGE X (-1)] :
    ‚àÉ (K Q : t.Heart) (Œ± : (t.ŒπHeart.obj K)‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ X) (Œ≤ : X ‚ü∂ t.ŒπHeart.obj Q)
      (Œ≥ : t.ŒπHeart.obj Q ‚ü∂ (t.ŒπHeart.obj K)‚ü¶(1 : ‚Ñ§)‚üß‚ü¶(1 : ‚Ñ§)‚üß),
      Triangle.mk Œ± Œ≤ Œ≥ ‚àà distTriang C := by
  have hK : ((t.truncLE (-1)).obj X)‚ü¶(-1 : ‚Ñ§)‚üß ‚àà t.heart := by
    rw [t.mem_heart_iff]
    constructor <;> dsimp <;> infer_instance
  have hQ : (t.truncGE 0).obj X ‚àà t.heart := by
    rw [t.mem_heart_iff]
    constructor <;> infer_instance
  have e‚ÇÅ := (shiftFunctor C (1 : ‚Ñ§)).mapIso (t.ŒπHeartObjHeartMkIso _ hK) ‚â™‚â´
    (shiftEquiv C (1 : ‚Ñ§)).counitIso.app _
  have e‚ÇÉ := t.ŒπHeartObjHeartMkIso _ hQ
  refine' ‚ü®t.heartMk _ hK, t.heartMk _ hQ, e‚ÇÅ.hom ‚â´ (t.truncLEŒπ (-1)).app X,
    (t.truncGEœÄ 0).app X ‚â´ e‚ÇÉ.inv,
    e‚ÇÉ.hom ‚â´ (t.truncGEŒ¥LE (-1) 0 (by linarith)).app X ‚â´ e‚ÇÅ.inv‚ü¶(1 : ‚Ñ§)‚üß', _‚ü©
  refine' isomorphic_distinguished _ (t.triangleLEGE_distinguished (-1) 0 (by linarith) X) _ _
  refine' Triangle.isoMk _ _ e‚ÇÅ (Iso.refl _) e‚ÇÉ _ _ _
  ¬∑ dsimp
    simp
  ¬∑ dsimp
    simp
  ¬∑ dsimp
    simp only [Category.assoc, Iso.cancel_iso_hom_left, ‚Üê Functor.map_comp,
      e‚ÇÅ.inv_hom_id, Functor.id_obj, Functor.map_id, Category.comp_id]

lemma admissibleMorphism_heart {X‚ÇÅ X‚ÇÇ : t.Heart} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
    AbelianSubcategory.admissibleMorphism t.ŒπHeart f := by
  intro X‚ÇÉ f‚ÇÇ f‚ÇÉ hT
  have := t.cocone_heart_isLE_zero hT
  have := t.cocone_heart_isGE_neg_one hT
  exact t.exists_distinguished_triangle_of_isLE_zero_of_isGE_neg_one X‚ÇÉ

noncomputable instance : Abelian t.Heart := by
  apply AbelianSubcategory.abelian t.ŒπHeart
  ¬∑ intro X Y n f hn
    exact t.zero f 0 (-n) (by linarith)
  ¬∑ apply admissibleMorphism_heart

end

variable [TStructure.HasHeart.{_, _, _, v'} t] [t.HasHomology‚ÇÄ]

section

variable (T : Triangle C) (hT : T ‚àà distTriang C) (n : ‚Ñ§) [t.IsLE T.obj‚ÇÅ n]

@[simps! obj‚ÇÅ obj‚ÇÇ obj‚ÇÉ mor‚ÇÅ mor‚ÇÇ]
noncomputable def truncLETriangle  :
    Triangle C :=
  Triangle.mk ((t.truncLE n).map T.mor‚ÇÅ)
    ((t.truncLE n).map T.mor‚ÇÇ)
    ((t.truncLEŒπ n).app T.obj‚ÇÉ ‚â´ T.mor‚ÇÉ ‚â´ (asIso ((t.truncLEŒπ n).app T.obj‚ÇÅ)).inv‚ü¶(1 : ‚Ñ§)‚üß')

instance : t.IsLE (t.truncLETriangle T n).obj‚ÇÅ n := by dsimp; infer_instance
instance : t.IsLE (t.truncLETriangle T n).obj‚ÇÇ n := by dsimp; infer_instance
instance : t.IsLE (t.truncLETriangle T n).obj‚ÇÉ n := by dsimp; infer_instance

lemma truncLETriangle_distinguished :
    t.truncLETriangle T n ‚àà distTriang C := by
  let a : T.obj‚ÇÅ ‚ü∂ (t.truncLE n).obj T.obj‚ÇÇ :=
    (asIso ((t.truncLEŒπ n).app T.obj‚ÇÅ)).inv ‚â´ (t.truncLE n).map T.mor‚ÇÅ
  let b := (t.truncLEŒπ n).app T.obj‚ÇÇ
  have comm : a ‚â´ b = T.mor‚ÇÅ := by simp
  obtain ‚ü®Z, f‚ÇÇ, f‚ÇÉ, h‚ÇÅ‚ü© := distinguished_cocone_triangle a
  have h‚ÇÇ := (t.triangleLEGT_distinguished n T.obj‚ÇÇ)
  have H := someOctahedron comm h‚ÇÅ h‚ÇÇ hT
  have : t.IsLE Z n := t.isLE‚ÇÇ _ (rot_of_dist_triangle _ h‚ÇÅ) n
      (by dsimp; infer_instance) (by dsimp; infer_instance)
  obtain ‚ü®e, he : e.hom.hom‚ÇÇ = ùüô _‚ü© :=
    t.triangle_iso_exists n (n + 1) (by linarith) _ _
      (t.triangleLEGE_distinguished n (n + 1) rfl T.obj‚ÇÉ) H.mem (Iso.refl _)
      (by dsimp; infer_instance) (by dsimp; infer_instance)
      (by dsimp; infer_instance) (by dsimp; infer_instance)
  have he' : e.inv.hom‚ÇÇ = ùüô _ := by
    rw [‚Üê cancel_mono e.hom.hom‚ÇÇ, ‚Üê comp_hom‚ÇÇ, e.inv_hom_id, id_hom‚ÇÇ, he, comp_id]
  have he‚ÇÅ' : (truncLE t n).map T.mor‚ÇÇ = f‚ÇÇ ‚â´ e.inv.hom‚ÇÅ := by
    apply to_truncLE_obj_ext
    have eq‚ÇÅ := e.inv.comm‚ÇÅ
    have eq‚ÇÇ := H.comm‚ÇÅ
    dsimp at eq‚ÇÅ eq‚ÇÇ ‚ä¢
    simp only [NatTrans.naturality, Functor.id_map, ‚Üê eq‚ÇÇ, assoc, ‚Üê eq‚ÇÅ,
      he', Triangle.mk_obj‚ÇÇ, comp_id]
  have he‚ÇÅ : (truncLE t n).map T.mor‚ÇÇ ‚â´ e.hom.hom‚ÇÅ = f‚ÇÇ := by
    rw [he‚ÇÅ', assoc, ‚Üê comp_hom‚ÇÅ, e.inv_hom_id, id_hom‚ÇÅ]
    simp only [Triangle.mk_obj‚ÇÅ, comp_id]
  have he‚ÇÇ : (t.truncLETriangle T n).mor‚ÇÉ ‚â´
    (shiftFunctor C 1).map ((truncLEŒπ t n).app T.obj‚ÇÅ) = e.hom.hom‚ÇÅ ‚â´ f‚ÇÉ := by
    have eq‚ÇÅ := H.comm‚ÇÇ
    have eq‚ÇÇ := e.hom.comm‚ÇÅ
    dsimp at eq‚ÇÅ eq‚ÇÇ
    dsimp [truncLETriangle]
    erw [he, comp_id] at eq‚ÇÇ
    rw [assoc, assoc, ‚Üê Functor.map_comp, IsIso.inv_hom_id,
      Functor.map_id, comp_id, eq‚ÇÇ, assoc, eq‚ÇÅ]
  refine' isomorphic_distinguished _ h‚ÇÅ _ _
  exact Triangle.isoMk _ _ (asIso ((t.truncLEŒπ n).app T.obj‚ÇÅ))
    (Iso.refl _) (Triangle.œÄ‚ÇÅ.mapIso e) (by simp) (by simp [he‚ÇÅ]) he‚ÇÇ

end

section

variable (T : Triangle C) (hT : T ‚àà distTriang C) (n : ‚Ñ§) [t.IsGE T.obj‚ÇÉ n]

@[simps! obj‚ÇÅ obj‚ÇÇ obj‚ÇÉ mor‚ÇÅ mor‚ÇÇ]
noncomputable def truncGETriangle  :
    Triangle C :=
  Triangle.mk ((t.truncGE n).map T.mor‚ÇÅ) ((t.truncGE n).map T.mor‚ÇÇ)
    ((asIso ((t.truncGEœÄ n).app T.obj‚ÇÉ)).inv ‚â´ T.mor‚ÇÉ ‚â´ ((t.truncGEœÄ n).app T.obj‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß')

instance : t.IsGE (t.truncGETriangle T n).obj‚ÇÅ n := by dsimp; infer_instance
instance : t.IsGE (t.truncGETriangle T n).obj‚ÇÇ n := by dsimp; infer_instance
instance : t.IsGE (t.truncGETriangle T n).obj‚ÇÉ n := by dsimp; infer_instance

instance (X : C) [t.IsGE X n] : t.IsGE (X‚ü¶(-1 : ‚Ñ§)‚üß) n := by
  have : t.IsGE (X‚ü¶(-1 : ‚Ñ§)‚üß) (n + 1) :=
    t.isGE_shift X n (-1) (n + 1) (by linarith)
  exact t.isGE_of_GE _ n (n + 1) (by linarith)

lemma truncGETriangle_distinguished :
    t.truncGETriangle T n ‚àà distTriang C := by
  have := hT
  let a := (t.truncGEœÄ n).app T.obj‚ÇÇ
  let b : (t.truncGE n).obj T.obj‚ÇÇ ‚ü∂ T.obj‚ÇÉ :=
    (t.truncGE n).map T.mor‚ÇÇ ‚â´ (asIso ((t.truncGEœÄ n).app T.obj‚ÇÉ)).inv
  have comm : a ‚â´ b = T.mor‚ÇÇ := by simp
  have h‚ÇÅ := rot_of_dist_triangle _ (t.triangleLEGE_distinguished (n-1) n (by linarith) T.obj‚ÇÇ)
  obtain ‚ü®Z, f‚ÇÅ, f‚ÇÉ, h‚ÇÇ‚ü© := distinguished_cocone_triangle‚ÇÅ b
  have H := someOctahedron comm h‚ÇÅ (rot_of_dist_triangle _ h‚ÇÇ) (rot_of_dist_triangle _ hT)
  obtain ‚ü®m‚ÇÅ, hm‚ÇÅ‚ü© : ‚àÉ (m‚ÇÅ : (t.truncLE (n-1)).obj T.obj‚ÇÇ ‚ü∂ T.obj‚ÇÅ),
    (shiftFunctor C (1 : ‚Ñ§)).map m‚ÇÅ = H.m‚ÇÅ := ‚ü®(shiftFunctor C (1 : ‚Ñ§)).preimage H.m‚ÇÅ, by simp‚ü©
  obtain ‚ü®m‚ÇÉ, hm‚ÇÉ‚ü© : ‚àÉ (m‚ÇÉ : T.obj‚ÇÅ ‚ü∂ Z), (shiftFunctor C (1 : ‚Ñ§)).map m‚ÇÉ = H.m‚ÇÉ :=
    ‚ü®(shiftFunctor C (1 : ‚Ñ§)).preimage H.m‚ÇÉ, by simp‚ü©
  let T' := Triangle.mk m‚ÇÅ m‚ÇÉ (f‚ÇÅ ‚â´ (t.truncGEŒ¥LE (n-1) n (by linarith)).app T.obj‚ÇÇ)
  have Hmem' : T' ‚àà distTriang C := by
    rw [‚Üê T'.shift_distinguished_iff 1]
    refine' isomorphic_distinguished _ H.mem _ _
    refine' Triangle.isoMk _ _ (Iso.refl _) (mulIso (-1) (Iso.refl _)) (Iso.refl _) _ _ _
    ¬∑ dsimp
      simp [hm‚ÇÅ]
    ¬∑ dsimp
      simp [hm‚ÇÉ]
    ¬∑ dsimp
      simp
  have : t.IsGE Z n := t.isGE‚ÇÇ _ (inv_rot_of_dist_triangle _ h‚ÇÇ) n
    (by dsimp; infer_instance) (by dsimp; infer_instance)
  obtain ‚ü®e, he : _ = ùüô _‚ü© :=
    t.triangle_iso_exists (n-1) n (by linarith) _ _
      (t.triangleLEGE_distinguished (n - 1) n (by linarith) T.obj‚ÇÅ)
      Hmem' (Iso.refl _) (by dsimp; infer_instance) (by dsimp; infer_instance)
      (by dsimp; infer_instance) (by dsimp; infer_instance)
  refine' isomorphic_distinguished _ h‚ÇÇ _ _
  refine' Triangle.isoMk _ _ (Triangle.œÄ‚ÇÉ.mapIso e) (Iso.refl _)
    (asIso ((t.truncGEœÄ n).app T.obj‚ÇÉ)).symm _ _ _
  ¬∑ dsimp
    simp only [comp_id]
    have eq‚ÇÅ := e.hom.comm‚ÇÇ
    have eq‚ÇÇ := H.comm‚ÇÑ
    dsimp at eq‚ÇÅ eq‚ÇÇ
    simp only [neg_comp, comp_neg, neg_inj] at eq‚ÇÇ
    apply from_truncGE_obj_ext
    rw [reassoc_of% eq‚ÇÅ, he]
    dsimp
    rw [id_comp, ‚Üê NatTrans.naturality]
    dsimp
    apply (shiftFunctor C (1 : ‚Ñ§)).map_injective
    simpa only [Functor.map_comp, hm‚ÇÉ] using eq‚ÇÇ
  ¬∑ dsimp
    simp
  ¬∑ dsimp [truncGETriangle]
    simp only [assoc, IsIso.eq_inv_comp, IsIso.hom_inv_id_assoc]
    have eq‚ÇÅ := H.comm‚ÇÉ
    have eq‚ÇÇ := e.hom.comm‚ÇÇ
    dsimp at eq‚ÇÅ eq‚ÇÇ
    rw [‚Üê eq‚ÇÅ, ‚Üê Functor.map_comp, eq‚ÇÇ, he]
    dsimp
    rw [id_comp, hm‚ÇÉ]

end

noncomputable def toHomology‚ÇÄ (X : C) [t.IsLE X 0] : X ‚ü∂ t.ŒπHeart.obj ((t.homology‚ÇÄ).obj X) :=
  inv ((t.truncLEŒπ 0).app X) ‚â´ (t.truncGEœÄ 0).app _ ‚â´ t.homology‚ÇÄŒπHeart.inv.app X

@[reassoc (attr := simp)]
lemma toHomology‚ÇÄ_naturality {X Y : C} (f : X ‚ü∂ Y) [t.IsLE X 0] [t.IsLE Y 0] :
    t.toHomology‚ÇÄ X ‚â´ t.ŒπHeart.map (t.homology‚ÇÄ.map f) = f ‚â´ t.toHomology‚ÇÄ Y := by
  dsimp [toHomology‚ÇÄ]
  rw [‚Üê cancel_epi ((t.truncLEŒπ 0).app X), assoc, assoc, IsIso.hom_inv_id_assoc]
  erw [‚Üê NatTrans.naturality, ‚Üê NatTrans.naturality_assoc,
    ‚Üê NatTrans.naturality_assoc, IsIso.hom_inv_id_assoc]
  rfl

instance (A X : C) [t.IsLE X 0] [t.IsGE A 0] :
    IsIso ((preadditiveYoneda.obj A).map ((t.truncGEœÄ 0).app X).op) := by
  have : Mono ((preadditiveYoneda.obj A).map ((t.truncGEœÄ 0).app X).op) :=
    (preadditiveYoneda_map_distinguished A _ (rot_of_dist_triangle _ (t.triangleLTGE_distinguished 0 X))).mono_g (by
      apply IsZero.eq_of_src
      apply AddCommGroupCat.isZero
      intro (x : ((t.truncLT 0).obj X)‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ A)
      have : t.IsLE (((t.truncLT 0).obj X)‚ü¶(1 : ‚Ñ§)‚üß) (-1) :=
        t.isLE_shift ((t.truncLT 0).obj X) 0 1 (-1) (by linarith)
      exact t.zero x (-1) 0 (by linarith))
  have : Epi ((preadditiveYoneda.obj A).map ((t.truncGEœÄ 0).app X).op) :=
    (preadditiveYoneda_map_distinguished A _ (t.triangleLTGE_distinguished 0 X)).epi_f (by
      apply IsZero.eq_of_tgt
      apply AddCommGroupCat.isZero
      intro (x : (t.truncLT 0).obj X ‚ü∂ A)
      exact t.zero x (-1) 0 (by linarith))
  apply isIso_of_mono_of_epi

instance (A X : C) [t.IsLE X 0] [t.IsGE A 0]:
    IsIso ((preadditiveYoneda.obj A).map (t.toHomology‚ÇÄ X).op) := by
  dsimp only [toHomology‚ÇÄ]
  rw [op_comp, op_comp, Functor.map_comp, Functor.map_comp]
  infer_instance

noncomputable def fromHomology‚ÇÄ (X : C) [t.IsGE X 0] :
    t.ŒπHeart.obj (t.homology‚ÇÄ.obj X) ‚ü∂ X :=
  t.homology‚ÇÄŒπHeart.hom.app X ‚â´ (t.truncGELEIsoLEGE 0 0).hom.app X ‚â´ (t.truncLEŒπ 0).app _ ‚â´
    inv ((t.truncGEœÄ 0).app X)

@[reassoc (attr := simp)]
lemma fromHomology‚ÇÄ_naturality {X Y : C} (f : X ‚ü∂ Y) [t.IsGE X 0] [t.IsGE Y 0] :
    t.ŒπHeart.map (t.homology‚ÇÄ.map f) ‚â´ t.fromHomology‚ÇÄ Y = t.fromHomology‚ÇÄ X ‚â´ f := by
  dsimp [fromHomology‚ÇÄ]
  rw [‚Üê cancel_mono ((t.truncGEœÄ 0).app Y), assoc, assoc, assoc, assoc, assoc, assoc,
    assoc, assoc, IsIso.inv_hom_id, comp_id]
  erw [t.homology‚ÇÄŒπHeart.hom.naturality_assoc f, NatTrans.naturality_assoc,
    (t.truncGEœÄ 0).naturality, IsIso.inv_hom_id_assoc]
  dsimp [truncLEGE]
  rw [NatTrans.naturality]
  rfl

instance (A X : C) [t.IsGE X 0] [t.IsLE A 0] :
    IsIso ((preadditiveCoyoneda.obj (Opposite.op A)).map ((t.truncLEŒπ 0).app X)) := by
  have : Mono ((preadditiveCoyoneda.obj (Opposite.op A)).map ((t.truncLEŒπ 0).app X)) :=
    ((preadditiveCoyoneda.obj (Opposite.op A)).map_distinguished_exact _
      (inv_rot_of_dist_triangle _ (t.triangleLEGE_distinguished 0 1 (by linarith) X))).mono_g (by
        apply IsZero.eq_of_src
        apply AddCommGroupCat.isZero
        intro (x : A ‚ü∂ (((t.truncGE 1).obj X)‚ü¶(-1 : ‚Ñ§)‚üß))
        have : t.IsGE (((t.truncGE 1).obj X)‚ü¶(-1 : ‚Ñ§)‚üß) 1 :=
          t.isGE_shift ((t.truncGE 1).obj X) 0 (-1) 1 (by linarith)
        exact t.zero x 0 1 (by linarith))
  have : Epi ((preadditiveCoyoneda.obj (Opposite.op A)).map ((t.truncLEŒπ 0).app X)) :=
    ((preadditiveCoyoneda.obj (Opposite.op A)).map_distinguished_exact _
      (t.triangleLEGE_distinguished 0 1 (by linarith) X)).epi_f (by
        apply IsZero.eq_of_tgt
        apply AddCommGroupCat.isZero
        intro (x : A ‚ü∂ (t.truncGE 1).obj X)
        exact t.zero x 0 1 (by linarith))
  apply isIso_of_mono_of_epi

instance (A X : C) [t.IsGE X 0] [t.IsLE A 0]:
    IsIso ((preadditiveCoyoneda.obj (Opposite.op A)).map (t.fromHomology‚ÇÄ X)) := by
  dsimp only [fromHomology‚ÇÄ]
  rw [Functor.map_comp, Functor.map_comp, Functor.map_comp]
  infer_instance

instance : t.homology‚ÇÄ.Additive := by
  have := Functor.additive_of_iso t.homology‚ÇÄŒπHeart.symm
  refine' ‚ü®fun {X Y f g} => t.ŒπHeart.map_injective _‚ü©
  erw [(t.homology‚ÇÄ ‚ãô t.ŒπHeart).map_add]
  simp

namespace IsHomologicalAux

variable {T : Triangle C} (hT : T ‚àà distTriang C)

@[simps!]
noncomputable def shortComplex :=
  (ShortComplex.mk _ _ (comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ T hT)).map t.homology‚ÇÄ

/-lemma case‚ÇÅ [t.IsLE T.obj‚ÇÅ 0] [t.IsLE T.obj‚ÇÇ 0] [t.IsLE T.obj‚ÇÉ 0] :
    (shortComplex t hT).Exact ‚àß Epi (shortComplex t hT).g := by
  sorry
  --let S := fun A => (shortComplex t hT).op.map (preadditiveYoneda.obj A)
  --let S' := fun A => (ShortComplex.mk _ _ (comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ T hT)).op.map (preadditiveYoneda.obj A)
  --suffices ‚àÄ A, (S A).Exact ‚àß Mono (S A).f by
  --  simpa only [ShortComplex.exact_and_epi_g_iff_preadditiveYoneda] using this
  --intro A

lemma case‚ÇÇ (h‚ÇÅ : t.IsLE T.obj‚ÇÅ 0) :
    (shortComplex t hT).Exact ‚àß Epi (shortComplex t hT).g := by
  sorry

lemma case‚ÇÅ' [t.IsGE T.obj‚ÇÅ 0] [t.IsGE T.obj‚ÇÇ 0] [t.IsGE T.obj‚ÇÉ 0] :
    (shortComplex t hT).Exact ‚àß Mono (shortComplex t hT).f := by
  sorry

lemma case‚ÇÇ' (h‚ÇÉ : t.IsGE T.obj‚ÇÉ 0) :
    (shortComplex t hT).Exact ‚àß Mono (shortComplex t hT).f := by
  sorry-/

end IsHomologicalAux

lemma isIso_homology‚ÇÄ_iff_isIso_truncGE‚ÇÄLE‚ÇÄ_map {X Y : C} (f : X ‚ü∂ Y) :
    IsIso (t.homology‚ÇÄ.map f) ‚Üî IsIso ((t.truncGELE 0 0).map f) := by
  have : IsIso (t.homology‚ÇÄ.map f) ‚Üî  IsIso (t.ŒπHeart.map (t.homology‚ÇÄ.map f)) := by
    constructor
    ¬∑ intro h
      infer_instance
    ¬∑ intro h
      apply isIso_of_reflects_iso  _ t.ŒπHeart
  rw [this]
  exact NatIso.isIso_map_iff t.homology‚ÇÄŒπHeart f


lemma isIso_homology‚ÇÄ_iff_isIso_truncLE‚ÇÄGE‚ÇÄ_map {X Y : C} (f : X ‚ü∂ Y) :
    IsIso (t.homology‚ÇÄ.map f) ‚Üî IsIso ((t.truncLEGE 0 0).map f) := by
  rw [isIso_homology‚ÇÄ_iff_isIso_truncGE‚ÇÄLE‚ÇÄ_map]
  exact NatIso.isIso_map_iff (t.truncGELEIsoLEGE 0 0) f

instance (X : C) : IsIso (t.homology‚ÇÄ.map ((truncLEŒπ t 0).app X)) := by
  rw [isIso_homology‚ÇÄ_iff_isIso_truncGE‚ÇÄLE‚ÇÄ_map]
  dsimp [truncGELE]
  infer_instance

/-open IsHomologicalAux
instance : t.homology‚ÇÄ.IsHomological where
  exact T hT := by
    have h‚ÇÅ := t.triangleLEGE_distinguished 0 1 (by linarith) T.obj‚ÇÅ
    obtain ‚ü®U, f, g, h‚ÇÉ‚ü© := distinguished_cocone_triangle ((t.truncLEŒπ 0).app T.obj‚ÇÅ ‚â´ T.mor‚ÇÅ)
    have H := someOctahedron rfl h‚ÇÅ hT h‚ÇÉ
    have ex‚ÇÅ := case‚ÇÇ t h‚ÇÉ (by dsimp; infer_instance)
    have ex‚ÇÇ := case‚ÇÇ' t (rot_of_dist_triangle _ H.mem) (by dsimp; infer_instance)
    dsimp [Triangle.rotate] at ex‚ÇÇ
    have := ex‚ÇÅ.2
    have : Mono (shortComplex t (rot_of_dist_triangle _ H.mem)).f := ex‚ÇÇ.2
    have ex‚ÇÉ := ShortComplex‚ÇÑ.connectShortComplex_exact (shortComplex t h‚ÇÉ)
      (shortComplex t (rot_of_dist_triangle _ H.mem)) (Iso.refl _)
        (t.homology‚ÇÄ.map T.mor‚ÇÇ) (by
          dsimp [shortComplex, ShortComplex.map]
          rw [id_comp, ‚Üê Functor.map_comp, H.comm‚ÇÉ]) ex‚ÇÅ.1 ex‚ÇÇ.1
    refine' ShortComplex.exact_of_iso _ ex‚ÇÉ.exact‚ÇÇ
    refine' ShortComplex.isoMk (asIso (t.homology‚ÇÄ.map ((t.truncLEŒπ 0).app T.obj‚ÇÅ)))
        (Iso.refl _) (Iso.refl _) _ _
    all_goals
      dsimp; simp-/

end TStructure

end Triangulated

end CategoryTheory
