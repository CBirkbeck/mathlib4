import Mathlib.CategoryTheory.Triangulated.TStructure.Trunc
import Mathlib.CategoryTheory.Abelian.Constructor
import Mathlib.CategoryTheory.Shift.SingleFunctors

namespace CategoryTheory

open Category Limits Preadditive ZeroObject Pretriangulated ZeroObject

namespace Triangulated

variable {C A : Type*} [Category C] [HasZeroObject C] [Preadditive C] [HasShift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]

namespace AbelianSubcategory

variable [Category A] [Preadditive A] {Œπ : A ‚•§ C} [Œπ.Additive] [Full Œπ] [Faithful Œπ]
  (hŒπ : ‚àÄ ‚¶ÉX Y : A‚¶Ñ ‚¶Én : ‚Ñ§‚¶Ñ (f : Œπ.obj X ‚ü∂ (Œπ.obj Y)‚ü¶n‚üß), n < 0 ‚Üí f = 0)

lemma vanishing_from_positive_shift {X Y : A} {n : ‚Ñ§} (f : (Œπ.obj X)‚ü¶n‚üß ‚ü∂ Œπ.obj Y)
    (hn : 0 < n) : f = 0 := by
  apply (shiftFunctor C (-n)).map_injective
  rw [‚Üê cancel_epi ((shiftEquiv C n).unitIso.hom.app _), Functor.map_zero, comp_zero]
  exact hŒπ _ (by linarith)

section

variable {X‚ÇÅ X‚ÇÇ : A} {f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {X‚ÇÉ : C} (f‚ÇÇ : Œπ.obj X‚ÇÇ ‚ü∂ X‚ÇÉ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ (Œπ.obj X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß)
  (hT : Triangle.mk (Œπ.map f‚ÇÅ) f‚ÇÇ f‚ÇÉ ‚àà distTriang C) {K Q : A}
  (Œ± : (Œπ.obj K)‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ X‚ÇÉ) (Œ≤ : X‚ÇÉ ‚ü∂ (Œπ.obj Q)) {Œ≥ : Œπ.obj Q ‚ü∂ (Œπ.obj K)‚ü¶(1 : ‚Ñ§)‚üß‚ü¶(1 : ‚Ñ§)‚üß}
  (hT' : Triangle.mk Œ± Œ≤ Œ≥ ‚àà distTriang C)

noncomputable def ŒπK : K ‚ü∂ X‚ÇÅ := (Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).preimage (Œ± ‚â´ f‚ÇÉ)

def œÄQ : X‚ÇÇ ‚ü∂ Q := Œπ.preimage (f‚ÇÇ ‚â´ Œ≤)

@[simp, reassoc]
lemma shift_Œπ_map_ŒπK : (Œπ.map (ŒπK f‚ÇÉ Œ±))‚ü¶(1 : ‚Ñ§)‚üß' = Œ± ‚â´ f‚ÇÉ := by
  apply (Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).image_preimage

@[simp, reassoc]
lemma Œπ_map_œÄQ : Œπ.map (œÄQ f‚ÇÇ Œ≤) = f‚ÇÇ ‚â´ Œ≤ := by
  apply Œπ.image_preimage

variable {f‚ÇÇ f‚ÇÉ}

lemma ŒπK_mor‚ÇÅ : ŒπK f‚ÇÉ Œ± ‚â´ f‚ÇÅ = 0 := by
  apply (Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).map_injective
  simp only [Functor.comp_map, Functor.map_comp, shift_Œπ_map_ŒπK,
    assoc, Functor.map_zero]
  erw [comp_dist_triangle_mor_zero‚ÇÉ‚ÇÅ _ hT, comp_zero]

lemma mor‚ÇÅ_œÄQ : f‚ÇÅ ‚â´ œÄQ f‚ÇÇ Œ≤ = 0 := by
  apply Œπ.map_injective
  simp only [Functor.map_comp, Functor.map_zero, Œπ_map_œÄQ]
  erw [comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ_assoc _ hT, zero_comp]

variable {Œ± Œ≤}

lemma mono_ŒπK : Mono (ŒπK f‚ÇÉ Œ±) := by
  rw [mono_iff_cancel_zero]
  intro B k hk
  replace hk := (Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).congr_map hk
  apply (Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).map_injective
  simp only [Functor.comp_obj, Functor.comp_map, Functor.map_comp,
    shift_Œπ_map_ŒπK, Functor.map_zero, ‚Üê assoc] at hk ‚ä¢
  obtain ‚ü®l, hl‚ü© := Triangle.coyoneda_exact‚ÇÉ _ hT _ hk
  obtain rfl : l = 0 := vanishing_from_positive_shift hŒπ _ (by linarith)
  rw [zero_comp] at hl
  obtain ‚ü®m, hm‚ü© := Triangle.coyoneda_exact‚ÇÅ _ hT' ((Œπ.map k)‚ü¶(1 : ‚Ñ§)‚üß'‚ü¶(1 : ‚Ñ§)‚üß') (by
    dsimp
    rw [‚Üê Functor.map_comp, hl, Functor.map_zero])
  dsimp at m hm
  obtain rfl : m = 0 := by
    rw [‚Üê cancel_epi ((shiftFunctorAdd' C (1 : ‚Ñ§) 1 2 (by linarith)).hom.app _), comp_zero]
    exact vanishing_from_positive_shift hŒπ _ (by linarith)
  rw [zero_comp] at hm
  apply (shiftFunctor C (1 : ‚Ñ§)).map_injective
  rw [hm, Functor.map_zero]

lemma epi_œÄQ : Epi (œÄQ f‚ÇÇ Œ≤) := by
  rw [epi_iff_cancel_zero]
  intro B k hk
  replace hk := Œπ.congr_map hk
  simp only [Functor.map_comp, Œπ_map_œÄQ, assoc, Functor.map_zero] at hk
  obtain ‚ü®l, hl‚ü© := Triangle.yoneda_exact‚ÇÉ _ hT _ hk
  obtain rfl : l = 0 := vanishing_from_positive_shift hŒπ _ (by linarith)
  rw [comp_zero] at hl
  obtain ‚ü®m, hm‚ü© := Triangle.yoneda_exact‚ÇÉ _ hT' (Œπ.map k) hl
  dsimp at m hm
  obtain rfl : m = 0 := by
    rw [‚Üê cancel_epi ((shiftFunctorAdd' C (1 : ‚Ñ§) 1 2 (by linarith)).hom.app _),
      comp_zero]
    exact vanishing_from_positive_shift hŒπ _ (by linarith)
  apply Œπ.map_injective
  rw [hm, comp_zero, Œπ.map_zero]

lemma ŒπK_lift {B : A} (x‚ÇÅ : B ‚ü∂ X‚ÇÅ) (hx‚ÇÅ : x‚ÇÅ ‚â´ f‚ÇÅ = 0) :
    ‚àÉ (k : B ‚ü∂ K), k ‚â´ ŒπK f‚ÇÉ Œ± = x‚ÇÅ := by
  suffices ‚àÉ (k' : (Œπ.obj B)‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ (Œπ.obj K)‚ü¶(1 : ‚Ñ§)‚üß), (Œπ.map x‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß' = k' ‚â´ Œ± ‚â´ f‚ÇÉ by
    obtain ‚ü®k', hk'‚ü© := this
    refine' ‚ü®(Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).preimage k', _‚ü©
    apply (Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).map_injective
    rw [Functor.map_comp, Functor.image_preimage, Functor.comp_map, shift_Œπ_map_ŒπK,
      Functor.comp_map, hk']
  obtain ‚ü®x‚ÇÉ, hx‚ÇÉ‚ü© := Triangle.coyoneda_exact‚ÇÅ _ hT ((Œπ.map x‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß')
    (by
      dsimp
      rw [‚Üê Functor.map_comp, ‚Üê Functor.map_comp, hx‚ÇÅ, Functor.map_zero, Functor.map_zero])
  obtain ‚ü®k', hk'‚ü© := Triangle.coyoneda_exact‚ÇÇ _ hT' x‚ÇÉ
    (vanishing_from_positive_shift hŒπ _ (by linarith))
  refine' ‚ü®k', _‚ü©
  dsimp at hk' hx‚ÇÉ
  rw [hx‚ÇÉ, hk', assoc]

noncomputable def isLimitKernelFork : IsLimit (KernelFork.ofŒπ _ (ŒπK_mor‚ÇÅ hT Œ±)) :=
  KernelFork.IsLimit.ofŒπ _ _  (fun {B} x‚ÇÅ hx‚ÇÅ => (ŒπK_lift hŒπ hT hT' x‚ÇÅ hx‚ÇÅ).choose)
    (fun {B} x‚ÇÅ hx‚ÇÅ => (ŒπK_lift hŒπ hT hT' x‚ÇÅ hx‚ÇÅ).choose_spec)
    (fun {B} x‚ÇÅ hx‚ÇÅ m hm => by
      have := mono_ŒπK hŒπ hT hT'
      rw [‚Üê cancel_mono (ŒπK f‚ÇÉ Œ±), (ŒπK_lift hŒπ hT hT' x‚ÇÅ hx‚ÇÅ).choose_spec, hm])

lemma œÄQ_desc {B : A} (x‚ÇÇ : X‚ÇÇ ‚ü∂ B) (hx‚ÇÇ : f‚ÇÅ ‚â´ x‚ÇÇ = 0) :
    ‚àÉ (k : Q ‚ü∂ B), œÄQ f‚ÇÇ Œ≤ ‚â´ k = x‚ÇÇ := by
  obtain ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü© := Triangle.yoneda_exact‚ÇÇ _ hT (Œπ.map x‚ÇÇ) (by
    dsimp
    rw [‚Üê Œπ.map_comp, hx‚ÇÇ, Œπ.map_zero])
  obtain ‚ü®k, hk‚ü© := Triangle.yoneda_exact‚ÇÇ _ hT' x‚ÇÅ
    (vanishing_from_positive_shift hŒπ _ (by linarith))
  dsimp at k hk hx‚ÇÅ
  refine' ‚ü®Œπ.preimage k, _‚ü©
  apply Œπ.map_injective
  simp only [Functor.map_comp, Œπ_map_œÄQ, Functor.image_preimage, assoc, hx‚ÇÅ, hk]

noncomputable def isColimitCokernelCofork : IsColimit (CokernelCofork.ofœÄ _ (mor‚ÇÅ_œÄQ hT Œ≤)) :=
  CokernelCofork.IsColimit.ofœÄ _ _
    (fun {B} x‚ÇÇ hx‚ÇÇ => (œÄQ_desc hŒπ hT hT' x‚ÇÇ hx‚ÇÇ).choose)
    (fun {B} x‚ÇÇ hx‚ÇÇ => (œÄQ_desc hŒπ hT hT' x‚ÇÇ hx‚ÇÇ).choose_spec)
    (fun {B} x‚ÇÇ hx‚ÇÇ m hm => by
      have := epi_œÄQ hŒπ hT hT'
      rw [‚Üê cancel_epi (œÄQ f‚ÇÇ Œ≤), (œÄQ_desc hŒπ hT hT' x‚ÇÇ hx‚ÇÇ).choose_spec, hm])

-- BBD 1.2.1, p. 27
lemma hasKernel : HasKernel f‚ÇÅ := ‚ü®_, isLimitKernelFork hŒπ hT hT'‚ü©
lemma hasCokernel : HasCokernel f‚ÇÅ := ‚ü®_, isColimitCokernelCofork hŒπ hT hT'‚ü©

end

variable (Œπ)

def admissibleMorphism : MorphismProperty A := fun X‚ÇÅ X‚ÇÇ f‚ÇÅ =>
  ‚àÄ ‚¶ÉX‚ÇÉ : C‚¶Ñ (f‚ÇÇ : Œπ.obj X‚ÇÇ ‚ü∂ X‚ÇÉ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ (Œπ.obj X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß)
    (_ : Triangle.mk (Œπ.map f‚ÇÅ) f‚ÇÇ f‚ÇÉ ‚àà distTriang C),
  ‚àÉ (K Q : A) (Œ± : (Œπ.obj K)‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ X‚ÇÉ) (Œ≤ : X‚ÇÉ ‚ü∂ (Œπ.obj Q))
    (Œ≥ : Œπ.obj Q ‚ü∂ (Œπ.obj K)‚ü¶(1 : ‚Ñ§)‚üß‚ü¶(1 : ‚Ñ§)‚üß), Triangle.mk Œ± Œ≤ Œ≥ ‚àà distTriang C

variable {Œπ}

lemma hasKernel_of_admissibleMorphism {X‚ÇÅ X‚ÇÇ : A} (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ)
    (hf‚ÇÅ : admissibleMorphism Œπ f‚ÇÅ) :
    HasKernel f‚ÇÅ := by
  obtain ‚ü®X‚ÇÉ, f‚ÇÇ, f‚ÇÉ, hT‚ü© := distinguished_cocone_triangle (Œπ.map f‚ÇÅ)
  obtain ‚ü®K, Q, Œ±, Œ≤, Œ≥, hT'‚ü© := hf‚ÇÅ f‚ÇÇ f‚ÇÉ hT
  exact hasKernel hŒπ hT hT'

lemma hasCokernel_of_admissibleMorphism {X‚ÇÅ X‚ÇÇ : A} (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ)
    (hf‚ÇÅ : admissibleMorphism Œπ f‚ÇÅ) :
    HasCokernel f‚ÇÅ := by
  obtain ‚ü®X‚ÇÉ, f‚ÇÇ, f‚ÇÉ, hT‚ü© := distinguished_cocone_triangle (Œπ.map f‚ÇÅ)
  obtain ‚ü®K, Q, Œ±, Œ≤, Œ≥, hT'‚ü© := hf‚ÇÅ f‚ÇÇ f‚ÇÉ hT
  exact hasCokernel hŒπ hT hT'

section

-- should be moved somewhere
instance hasZeroObject [HasTerminal A] : HasZeroObject A :=
  ‚ü®‚ä§_ A, by
    rw [IsZero.iff_id_eq_zero]
    apply Subsingleton.elim‚ü©

variable [HasFiniteProducts A]

noncomputable def isLimitKernelForkOfDistTriang {X‚ÇÅ X‚ÇÇ X‚ÇÉ : A}
    (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ X‚ÇÉ) (f‚ÇÉ : Œπ.obj X‚ÇÉ ‚ü∂ (Œπ.obj X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß)
    (hT : Triangle.mk (Œπ.map f‚ÇÅ) (Œπ.map f‚ÇÇ) f‚ÇÉ ‚àà distTriang C) :
    IsLimit (KernelFork.ofŒπ f‚ÇÅ (show f‚ÇÅ ‚â´ f‚ÇÇ = 0 from Œπ.map_injective (by
        erw [Functor.map_comp, comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ _ hT, Œπ.map_zero]))) := by
  have hT' : Triangle.mk (ùüô ((Œπ.obj X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß)) (0 : _ ‚ü∂ Œπ.obj 0) 0 ‚àà distTriang C := by
    refine' isomorphic_distinguished _ (contractible_distinguished
      (((Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).obj X‚ÇÅ))) _ _
    refine' Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (IsZero.iso (by
      dsimp
      rw [IsZero.iff_id_eq_zero, ‚Üê Œπ.map_id, id_zero, Œπ.map_zero]) (isZero_zero C))
      (by aesop_cat) (by aesop_cat) (by aesop_cat)
  refine' IsLimit.ofIsoLimit (AbelianSubcategory.isLimitKernelFork hŒπ
    (rot_of_dist_triangle _ hT) hT') _
  exact Fork.ext (mulIso (-1) (Iso.refl _)) ((Œπ ‚ãô shiftFunctor C (1 : ‚Ñ§)).map_injective
    (by simp))

variable (H : ‚àÄ ‚¶ÉX‚ÇÅ X‚ÇÇ : A‚¶Ñ (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ), admissibleMorphism Œπ f‚ÇÅ)

--lemma abelian : Abelian A := by
--  apply Abelian.mk'
--  sorry


end

end AbelianSubcategory

/-variable (t : TStructure C) [IsTriangulated C]

namespace TStructure

variable {T : Triangle C} (hT : T ‚àà distTriang C)
  (hT‚ÇÅ : T.obj‚ÇÅ ‚àà t.heart) (hT‚ÇÇ : T.obj‚ÇÇ ‚àà t.heart)

lemma cocone_heart_isLE_zero : t.IsLE T.obj‚ÇÉ 0 := by
  have : t.IsLE T.obj‚ÇÅ 0 := ‚ü®hT‚ÇÅ.1‚ü©
  have : t.IsLE T.obj‚ÇÅ 1 := t.isLE_of_LE T.obj‚ÇÅ 0 1 (by linarith)
  exact t.isLE‚ÇÇ _ (rot_of_dist_triangle _ hT) 0 ‚ü®hT‚ÇÇ.1‚ü©
    (t.isLE_shift T.obj‚ÇÅ 1 1 0 (add_zero 1))

lemma cocone_heart_isGE_neg_one : t.IsGE T.obj‚ÇÉ (-1) := by
  have : t.IsGE T.obj‚ÇÅ 0 := ‚ü®hT‚ÇÅ.2‚ü©
  have : t.IsGE T.obj‚ÇÇ 0 := ‚ü®hT‚ÇÇ.2‚ü©
  exact t.isGE‚ÇÇ _ (rot_of_dist_triangle _ hT) (-1)
    (t.isGE_of_GE T.obj‚ÇÇ (-1) 0 (by linarith))
    (t.isGE_shift T.obj‚ÇÅ 0 1 (-1) (by linarith))

section

variable (X : C) [t.IsLE X 0] [t.IsGE X (-1)]

namespace TriangleOfGENegOneOfLEZero

noncomputable def truncLTZeroIso :
  (t.truncLT 0).obj X ‚âÖ
    (t.homology' (-1) ‚ãô t.ŒπHeartDegree (-1)).obj X :=
  (t.truncLEIsoTruncLT (-1) 0 (by linarith)).symm.app X ‚â™‚â´
    asIso ((t.truncGEœÄ (-1)).app ((t.truncLE (-1)).obj X)) ‚â™‚â´
    (t.homologyCompŒπHeartDegreeIsoHomology' (-1)).symm.app X

noncomputable def truncGEZeroIso : (t.truncGE 0).obj X ‚âÖ (t.homology' 0 ‚ãô t.ŒπHeart').obj X :=
  (t.truncGE 0).mapIso (asIso ((t.truncLEŒπ 0).app X)).symm ‚â™‚â´
    (shiftFunctorZero C ‚Ñ§).symm.app _

@[simps]
noncomputable def triangle : Triangle C where
  obj‚ÇÅ := (t.homology' (-1) ‚ãô t.ŒπHeartDegree (-1)).obj X
  obj‚ÇÇ := X
  obj‚ÇÉ := (t.homology' 0 ‚ãô t.ŒπHeart').obj X
  mor‚ÇÅ := (truncLTZeroIso t X).inv ‚â´ (t.truncLTŒπ 0).app X
  mor‚ÇÇ := (t.truncGEœÄ 0).app X ‚â´ (truncGEZeroIso t X).hom
  mor‚ÇÉ := (truncGEZeroIso t X).inv ‚â´ (t.truncGEŒ¥LT 0).app X ‚â´
    (truncLTZeroIso t X).hom‚ü¶(1 : ‚Ñ§)‚üß'

noncomputable def triangleIso :
    triangle t X ‚âÖ (t.triangleLTGE 0).obj X := by
  refine' Triangle.isoMk _ _ (truncLTZeroIso t X).symm (Iso.refl _)
    (truncGEZeroIso t X).symm _ _ _
  ¬∑ dsimp
    aesop_cat
  ¬∑ dsimp
    simp
  ¬∑ dsimp
    simp only [assoc, Iso.cancel_iso_inv_left, ‚Üê Functor.map_comp, Iso.hom_inv_id,
      Functor.map_id, comp_id]

lemma triangle_distinguished :
    triangle t X ‚àà distTriang C :=
  isomorphic_distinguished _ (t.triangleLTGE_distinguished 0 X) _
    (triangleIso t X)

end TriangleOfGENegOneOfLEZero

end

namespace Heart

lemma vanishing_to_negative_shift {X Y : C} {n : ‚Ñ§} (f : X ‚ü∂ Y‚ü¶n‚üß)
    (hX : X ‚àà t.heart) (hY : Y ‚àà t.heart) (hn : n < 0) : f = 0 := by
  rw [t.mem_heart_iff] at hX hY
  have : t.IsLE X 0 := hX.1
  have := hY.2
  have : t.IsGE (Y‚ü¶n‚üß) (-n) := t.isGE_shift Y 0 n (-n) (by linarith)
  exact t.zero f 0 (-n) (by linarith)

instance : HasKernels t.Heart' where
  has_limit {X‚ÇÅ X‚ÇÇ} f‚ÇÅ := by
    obtain ‚ü®X‚ÇÉ, f‚ÇÇ, f‚ÇÉ, hT‚ü© := distinguished_cocone_triangle (t.ŒπHeart'.map f‚ÇÅ)
    have : t.IsLE X‚ÇÉ 0 := cocone_heart_isLE_zero t hT X‚ÇÅ.2 X‚ÇÇ.2
    have : t.IsGE X‚ÇÉ (-1) := cocone_heart_isGE_neg_one t hT X‚ÇÅ.2 X‚ÇÇ.2
    exact AbelianSubcategory.hasKernel (vanishing_to_negative_shift t) hT X‚ÇÅ.2 X‚ÇÇ.2
      (TriangleOfGENegOneOfLEZero.triangle_distinguished t X‚ÇÉ) (t.ŒπHeart_obj_mem_heart _)
        (t.ŒπHeart_obj_mem_heart ((t.homology' 0).obj X‚ÇÉ))

instance : HasCokernels t.Heart' where
  has_colimit {X‚ÇÅ X‚ÇÇ} f‚ÇÅ := by
    obtain ‚ü®X‚ÇÉ, f‚ÇÇ, f‚ÇÉ, hT‚ü© := distinguished_cocone_triangle (t.ŒπHeart'.map f‚ÇÅ)
    have : t.IsLE X‚ÇÉ 0 := cocone_heart_isLE_zero t hT X‚ÇÅ.2 X‚ÇÇ.2
    have : t.IsGE X‚ÇÉ (-1) := cocone_heart_isGE_neg_one t hT X‚ÇÅ.2 X‚ÇÇ.2
    exact AbelianSubcategory.hasCokernel (vanishing_to_negative_shift t) hT X‚ÇÅ.2 X‚ÇÇ.2
      (TriangleOfGENegOneOfLEZero.triangle_distinguished t X‚ÇÉ) (t.ŒπHeart_obj_mem_heart _)
        (t.ŒπHeart_obj_mem_heart ((t.homology' 0).obj X‚ÇÉ))

noncomputable def isLimitKernelForkOfDistTriang {X‚ÇÅ X‚ÇÇ X‚ÇÉ : t.Heart'}
    (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : X‚ÇÇ ‚ü∂ X‚ÇÉ) (h : X‚ÇÉ.1 ‚ü∂ X‚ÇÅ.1‚ü¶(1 : ‚Ñ§)‚üß)
    (hT : Triangle.mk (t.ŒπHeart'.map f) (t.ŒπHeart'.map g) h ‚àà distTriang C) :
    IsLimit (KernelFork.ofŒπ f (show f ‚â´ g = 0 from comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ _ hT)) := by
  refine' IsLimit.ofIsoLimit (AbelianSubcategory.isLimitKernelFork (vanishing_to_negative_shift t)
    (rot_of_dist_triangle _ hT) _ _ (contractible_distinguished (X‚ÇÅ.1‚ü¶(1 : ‚Ñ§)‚üß)) X‚ÇÅ.2 (by
      rw [mem_heart_iff]
      constructor <;> infer_instance)) _
  exact Fork.ext (mulIso (-1) (Iso.refl _))
    ((shiftFunctor C (1 : ‚Ñ§)).map_injective (by aesop_cat))

noncomputable def isColimitCokernelCoforkOfDistTriang {X‚ÇÅ X‚ÇÇ X‚ÇÉ : t.Heart'}
    (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : X‚ÇÇ ‚ü∂ X‚ÇÉ) (h : X‚ÇÉ.1 ‚ü∂ X‚ÇÅ.1‚ü¶(1 : ‚Ñ§)‚üß)
    (hT : Triangle.mk (t.ŒπHeart'.map f) (t.ŒπHeart'.map g) h ‚àà distTriang C) :
    IsColimit (CokernelCofork.ofœÄ g (show f ‚â´ g = 0 from comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ _ hT)) := by
  have hT' : Triangle.mk (0 : (0 : C)‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ _) (ùüô X‚ÇÉ.1) 0 ‚àà distTriang C := by
    refine' isomorphic_distinguished _ (inv_rot_of_dist_triangle _ (contractible_distinguished X‚ÇÉ.1)) _ _
    refine' Triangle.isoMk _ _ (IsZero.iso _ _) (Iso.refl _) (Iso.refl _) (by simp) (by simp) (by simp)
    all_goals
      dsimp
      rw [IsZero.iff_id_eq_zero, ‚Üê Functor.map_id, id_zero, Functor.map_zero]
  refine' IsColimit.ofIsoColimit (AbelianSubcategory.isColimitCokernelCofork (vanishing_to_negative_shift t)
    hT X‚ÇÅ.2 X‚ÇÇ.2 hT' (by
      rw [mem_heart_iff]
      constructor <;> infer_instance) X‚ÇÉ.2) _
  exact Cofork.ext (Iso.refl _) (by simp [AbelianSubcategory.œÄQ])

instance : HasTerminal t.Heart' := by
  let Z : t.Heart' := ‚ü®0, by
    change 0 ‚àà t.heart
    rw [t.mem_heart_iff]
    constructor <;> infer_instance‚ü©
  have : ‚àÄ (X : t.Heart'), Inhabited (X ‚ü∂ Z) := fun X => ‚ü®0‚ü©
  have : ‚àÄ (X : t.Heart'), Unique (X ‚ü∂ Z) := fun X =>
    { uniq := fun f => t.ŒπHeart'.map_injective ((isZero_zero C).eq_of_tgt _ _) }
  exact hasTerminal_of_unique Z

lemma prod_mem (X‚ÇÅ X‚ÇÇ : C) (hX‚ÇÅ : X‚ÇÅ ‚àà t.heart) (hX‚ÇÇ : X‚ÇÇ ‚àà t.heart) :
    (X‚ÇÅ ‚®Ø X‚ÇÇ) ‚àà t.heart := by
  rw [t.mem_heart_iff]
  constructor
  ¬∑ exact t.isLE‚ÇÇ _ (binaryProductTriangle_distinguished X‚ÇÅ X‚ÇÇ) 0 ‚ü®hX‚ÇÅ.1‚ü© ‚ü®hX‚ÇÇ.1‚ü©
  ¬∑ exact t.isGE‚ÇÇ _ (binaryProductTriangle_distinguished X‚ÇÅ X‚ÇÇ) 0 ‚ü®hX‚ÇÅ.2‚ü© ‚ü®hX‚ÇÇ.2‚ü©

instance : HasBinaryProducts t.Heart' := by
  apply hasLimitsOfShape_of_closed_under_limits
  intro F c hc H
  exact t.heart.mem_of_iso
    (limit.isoLimitCone ‚ü®_, (IsLimit.postcomposeHomEquiv (diagramIsoPair F) _).symm hc‚ü©)
    (prod_mem t _ _ (H _) (H _))

instance : HasFiniteProducts t.Heart' := hasFiniteProducts_of_has_binary_and_terminal

noncomputable instance : Abelian t.Heart' := by
  apply Abelian.mk'
  intro X‚ÇÅ X‚ÇÇ f‚ÇÅ
  obtain ‚ü®X‚ÇÉ, f‚ÇÇ, f‚ÇÉ, hT‚ü© := distinguished_cocone_triangle (t.ŒπHeart'.map f‚ÇÅ)
  have : t.IsLE X‚ÇÉ 0 := cocone_heart_isLE_zero t hT X‚ÇÅ.2 X‚ÇÇ.2
  have : t.IsGE X‚ÇÉ (-1) := cocone_heart_isGE_neg_one t hT X‚ÇÅ.2 X‚ÇÇ.2
  let K := (t.homology' (-1)).obj X‚ÇÉ
  have hK := AbelianSubcategory.isLimitKernelFork (vanishing_to_negative_shift t) hT X‚ÇÅ.2 X‚ÇÇ.2
    (TriangleOfGENegOneOfLEZero.triangle_distinguished t X‚ÇÉ) (t.ŒπHeart_obj_mem_heart _)
      (t.ŒπHeart_obj_mem_heart ((t.homology' 0).obj X‚ÇÉ))
  let Q := (t.homology' 0).obj X‚ÇÉ
  have hQ := AbelianSubcategory.isColimitCokernelCofork (vanishing_to_negative_shift t) hT X‚ÇÅ.2 X‚ÇÇ.2
    (TriangleOfGENegOneOfLEZero.triangle_distinguished t X‚ÇÉ) (t.ŒπHeart_obj_mem_heart _)
      (t.ŒπHeart_obj_mem_heart ((t.homology' 0).obj X‚ÇÉ))
  dsimp
  let a : (t.ŒπHeart'.obj K)‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ X‚ÇÉ := (TriangleOfGENegOneOfLEZero.triangle t X‚ÇÉ).mor‚ÇÅ
  let b := (TriangleOfGENegOneOfLEZero.triangle t X‚ÇÉ).mor‚ÇÇ
  let i : K ‚ü∂ X‚ÇÅ := AbelianSubcategory.ŒπK (Triangle.mk (t.ŒπHeart'.map f‚ÇÅ) f‚ÇÇ f‚ÇÉ) a
  let p : X‚ÇÇ ‚ü∂ Q := AbelianSubcategory.œÄQ (Triangle.mk (t.ŒπHeart'.map f‚ÇÅ) f‚ÇÇ f‚ÇÉ) b
  have comm : a ‚â´ f‚ÇÉ = a ‚â´ f‚ÇÉ := rfl
  obtain ‚ü®I‚ÇÄ, œÄ, g, hI‚ü© := distinguished_cocone_triangle (t.ŒπHeart'.map i)
  let T‚ÇÉ := (Triangle.mk (t.ŒπHeart'.map i) œÄ g)‚ü¶(1 : ‚Ñ§)‚üß
  let T'‚ÇÉ := Triangle.mk (a ‚â´ f‚ÇÉ) T‚ÇÉ.mor‚ÇÇ (-T‚ÇÉ.mor‚ÇÉ)
  have h‚ÇÅ := (TriangleOfGENegOneOfLEZero.triangle_distinguished t X‚ÇÉ)
  have h‚ÇÇ := rot_of_dist_triangle _ (rot_of_dist_triangle _ hT)
  have h‚ÇÉ : T'‚ÇÉ ‚àà distTriang C := by
    refine' isomorphic_distinguished _ (Triangle.shift_distinguished _ hI 1) _ _
    refine' Triangle.isoMk _ _ (mulIso (-1) (Iso.refl _)) (Iso.refl _) (Iso.refl _) _ _ _
    all_goals dsimp; simp
  have H := someOctahedron comm h‚ÇÅ h‚ÇÇ h‚ÇÉ
  let I : t.Heart' := ‚ü®I‚ÇÄ, by
    change I‚ÇÄ ‚àà t.heart
    rw [t.mem_heart_iff]
    constructor
    ¬∑ have : t.IsLE ((t.homology' (-1)).obj X‚ÇÉ).1 1 := t.isLE_of_LE _ 0 1 (by linarith)
      exact t.isLE‚ÇÇ _ (rot_of_dist_triangle _ hI) 0 ‚ü®X‚ÇÅ.2.1‚ü©
        (t.isLE_shift ((t.homology' (-1)).obj X‚ÇÉ).1 1 1 0 (add_zero 1))
    ¬∑ suffices t.IsGE (I‚ÇÄ‚ü¶(1 : ‚Ñ§)‚üß) (-1) by
        have := t.isGE_shift (I‚ÇÄ‚ü¶(1 : ‚Ñ§)‚üß) (-1) (-1) 0 (add_zero (-1))
        have e := (shiftEquiv C (1 : ‚Ñ§)).unitIso.symm.app I‚ÇÄ
        dsimp at e
        exact t.isGE_of_iso e 0
      apply t.isGE‚ÇÇ _ H.mem (-1)
      ¬∑ dsimp
        exact t.isGE_of_GE _ (-1) 0 (by linarith)
      ¬∑ exact t.isGE_shift X‚ÇÇ.1 0 1 (-1) (by linarith)‚ü©
  let œÄ' : X‚ÇÅ ‚ü∂ I := œÄ
  let Œπ : I‚ÇÄ ‚ü∂ X‚ÇÇ.1 := (shiftFunctor C (1 : ‚Ñ§)).preimage H.m‚ÇÉ
  let Œπ' : I ‚ü∂ X‚ÇÇ := Œπ
  have hŒπ' : f‚ÇÅ = œÄ' ‚â´ Œπ' := by
    apply t.ŒπHeart'.map_injective
    apply (shiftFunctor C (1 : ‚Ñ§)).map_injective
    have eq := H.comm‚ÇÉ
    dsimp at eq
    simp only [neg_smul, one_smul, neg_comp, neg_inj] at eq
    refine' eq.symm.trans _
    simp only [Functor.map_comp]
    dsimp
    simp only [Functor.image_preimage]
  have mem : Triangle.mk Œπ (t.ŒπHeart'.map p) (-H.m‚ÇÅ) ‚àà distTriang C := by
    rw [‚Üê Triangle.shift_distinguished_iff _ 1]
    refine' isomorphic_distinguished _ (rot_of_dist_triangle _ H.mem) _ _
    refine' Triangle.isoMk _ _ (mulIso (-1) (Iso.refl _)) (Iso.refl _) (Iso.refl _) _ _ _
    ¬∑ dsimp
      simp
    ¬∑ dsimp [AbelianSubcategory.œÄQ]
      simp
    ¬∑ dsimp
      simp
  exact ‚ü®K, i, _, hK, Q, p, _, hQ, I, œÄ', _, isColimitCokernelCoforkOfDistTriang t i œÄ' _ hI,
    Œπ', _, isLimitKernelForkOfDistTriang t Œπ' p _ mem, hŒπ'‚ü©

end Heart

-/


end Triangulated

end CategoryTheory
