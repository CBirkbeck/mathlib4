import Mathlib.Algebra.Homology.ShortComplex.Exact
import Mathlib.CategoryTheory.Abelian.Basic
import Mathlib.CategoryTheory.Shift.ShiftSequence
import Mathlib.CategoryTheory.Triangulated.Functor
import Mathlib.CategoryTheory.Triangulated.Subcategory
import Mathlib.CategoryTheory.Shift.Predicate

namespace CategoryTheory

open Category Limits Pretriangulated ZeroObject Preadditive

attribute [local instance] endofunctorMonoidalCategory

variable {C D : Type*} [Category C] [HasZeroObject C] [HasShift C ‚Ñ§] [Preadditive C]
  [‚àÄ (n : ‚Ñ§), (CategoryTheory.shiftFunctor C n).Additive] [Pretriangulated C]
  [Category D] [HasZeroObject D] [HasShift D ‚Ñ§] [Preadditive D]
  [‚àÄ (n : ‚Ñ§), (CategoryTheory.shiftFunctor D n).Additive] [Pretriangulated D]

variable (C)

structure FilteredTriangulated where
  s : MonoidalFunctor (Discrete ‚Ñ§) (C ‚•§ C)
  s_commshift : ‚àÄ (n : ‚Ñ§), (s.obj {as := n}).CommShift ‚Ñ§
  s_triang : ‚àÄ (n : ‚Ñ§), (s.obj {as := n}).IsTriangulated
  Œ± : ùü≠ C ‚ü∂ s.obj {as := 1}
  LE : ‚Ñ§ ‚Üí Triangulated.Subcategory C
  GE : ‚Ñ§ ‚Üí Triangulated.Subcategory C
  LE_closedUnderIsomorphisms : ‚àÄ (n : ‚Ñ§), ClosedUnderIsomorphisms (LE n).P
  GE_closedUnderIsomorphisms : ‚àÄ (n : ‚Ñ§), ClosedUnderIsomorphisms (GE n).P
  LE_zero_le : (LE 0).P ‚â§ (LE 1).P
  GE_one_le : (GE 1).P ‚â§ (GE 0).P
  LE_shift : ‚àÄ (n a n' : ‚Ñ§), a + n = n' ‚Üí ‚àÄ (X : C), (LE n).P X ‚Üí (LE n').P
    ((s.obj {as := a}).obj X)
  GE_shift : ‚àÄ (n a n' : ‚Ñ§), a + n = n' ‚Üí ‚àÄ (X : C), (GE n).P X ‚Üí (GE n').P
    ((s.obj {as := a}).obj X)
  zero' : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y), (GE 1).P X ‚Üí (LE 0).P Y ‚Üí f = 0
  adj_left : ‚àÄ ‚¶ÉX Y : C‚¶Ñ, (GE 1).P X ‚Üí (LE 0).P Y ‚Üí Function.Bijective
    (fun (f : (s.obj {as := 1}).obj Y ‚ü∂ X) ‚Ü¶ (Œ±.app Y ‚â´ f : Y ‚ü∂ X))
  adj_right : ‚àÄ ‚¶ÉX Y : C‚¶Ñ, (GE 1).P X ‚Üí (LE 0).P Y ‚Üí Function.Bijective
    (fun (f : Y ‚ü∂ X) ‚Ü¶ (f ‚â´ Œ±.app X: Y ‚ü∂ (s.obj {as := 1}).obj X))
  LE_exhaustive : ‚àÄ (X : C), ‚àÉ (n : ‚Ñ§), (LE n).P X
  GE_exhaustive : ‚àÄ (X : C), ‚àÉ (n : ‚Ñ§), (GE n).P X
  Œ±_s : ‚àÄ (X : C), (s.obj {as := 1}).map (Œ±.app X) = Œ±.app ((s.obj {as := 1}).obj X)
  exists_triangle_one_zero : ‚àÄ (X : C), ‚àÉ (A : C) (B : C) (_ : (GE 1).P A) (_ : (LE 0).P B)
    (f : A ‚ü∂ X) (g : X ‚ü∂ B) (h : B ‚ü∂ A‚ü¶1‚üß),
    Triangle.mk f g h ‚àà distinguishedTriangles

namespace FilteredTriangulated

attribute [instance] LE_closedUnderIsomorphisms GE_closedUnderIsomorphisms

variable {C}
variable (F : FilteredTriangulated C)

lemma exists_triangle (A : C) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    ‚àÉ (X Y : C) (_ : (F.GE n‚ÇÅ).P X) (_ : (F.LE n‚ÇÄ).P Y) (f : X ‚ü∂ A) (g : A ‚ü∂ Y)
      (h : Y ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß), Triangle.mk f g h ‚àà distTriang C := by
  obtain ‚ü®X, Y, hX, hY, f, g, h, mem‚ü© := F.exists_triangle_one_zero ((F.s.obj {as := -n‚ÇÄ}).obj A)
  let T := (@Functor.mapTriangle _ _ _ _ _ _ (F.s.obj {as := n‚ÇÄ}) (F.s_commshift n‚ÇÄ)).obj
    (Triangle.mk f g h)
  let e := (@shiftEquiv' C _ _ _ {shift := F.s} (-n‚ÇÄ) n‚ÇÄ (by rw [add_left_neg])).unitIso.symm.app A
  have hT' : Triangle.mk (T.mor‚ÇÅ ‚â´ e.hom) (e.inv ‚â´ T.mor‚ÇÇ) T.mor‚ÇÉ ‚àà distTriang C := by
    refine isomorphic_distinguished _ (@Functor.IsTriangulated.map_distinguished _ _ _ _ _ _
      (F.s.obj {as := n‚ÇÄ}) (F.s_commshift n‚ÇÄ) _ _ _ _ _ _ _ _ (F.s_triang n‚ÇÄ) _ mem) _ ?_
    refine Triangle.isoMk _ _ (Iso.refl _) e.symm (Iso.refl _) ?_ ?_ ?_
    all_goals dsimp; simp [T]
  exact ‚ü®_, _, F.GE_shift _ _ _ (by omega) _ hX,
      F.LE_shift _ _ _ (by omega) _ hY, _, _, _, hT'‚ü©

lemma predicateShift_LE (n n' a : ‚Ñ§) (hn' : n = n') :
    (PredicateShift (F.LE n).P a) = (F.LE n').P := by
  ext X
  simp only [PredicateShift, Triangulated.Subcategory.shift_iff, hn']

lemma predicateShift_GE (a n n' : ‚Ñ§) (hn' : n = n') :
    (PredicateShift (F.GE n).P a) = (F.GE n').P := by
  ext X
  simp only [PredicateShift, hn', Triangulated.Subcategory.shift_iff]

lemma LE_monotone : Monotone (fun n ‚Ü¶ (F.LE n).P) := by
  let H := fun (a : ‚Ñï) => ‚àÄ (n : ‚Ñ§), (F.LE n).P ‚â§ (F.LE (n + a)).P
  suffices ‚àÄ (a : ‚Ñï), H a by
    intro n‚ÇÄ n‚ÇÅ h
    obtain ‚ü®a, ha‚ü© := Int.nonneg_def.1 h
    obtain rfl : n‚ÇÅ = n‚ÇÄ + a := by omega
    apply this
  have H_zero : H 0 := fun n => by
    simp only [Nat.cast_zero, add_zero]
    rfl
  have H_one : H 1 := fun n X hX =>
    (F.LE_closedUnderIsomorphisms (n + 1)).of_iso ((@shiftEquiv' C _ _ _ {shift := F.s}
    (-n) n (by rw [add_left_neg])).unitIso.symm.app X) (F.LE_shift 1 n (n + 1) rfl _
    (F.LE_zero_le _ (F.LE_shift n (-n) 0 (by rw [add_left_neg]) X hX)))
  have H_add : ‚àÄ (a b c : ‚Ñï) (_ : a + b = c) (_ : H a) (_ : H b), H c := by
    intro a b c h ha hb n
    rw [‚Üê h, Nat.cast_add, ‚Üê add_assoc]
    exact (ha n).trans (hb (n+a))
  intro a
  induction' a with a ha
  ¬∑ exact H_zero
  ¬∑ exact H_add a 1 _ rfl ha H_one

lemma GE_antitone : Antitone (fun n ‚Ü¶ (F.GE n).P) := by
  let H := fun (a : ‚Ñï) => ‚àÄ (n : ‚Ñ§), (F.GE (n + a)).P ‚â§ (F.GE n).P
  suffices ‚àÄ (a : ‚Ñï), H a by
    intro n‚ÇÄ n‚ÇÅ h
    obtain ‚ü®a, ha‚ü© := Int.nonneg_def.1 h
    obtain rfl : n‚ÇÅ = n‚ÇÄ + a := by omega
    apply this
  have H_zero : H 0 := fun n => by
    simp only [Nat.cast_zero, add_zero]
    rfl
  have H_one : H 1 := fun n X hX =>
    (F.GE_closedUnderIsomorphisms n).of_iso ((@shiftEquiv' C _ _ _ {shift := F.s}
    (-n) n (by rw [add_left_neg])).unitIso.symm.app X) (F.GE_shift 0 n n (by rw [add_zero]) _
    (F.GE_one_le _ (F.GE_shift (n + 1) (-n) 1 (by rw [neg_add_cancel_left]) X hX)))
  have H_add : ‚àÄ (a b c : ‚Ñï) (_ : a + b = c) (_ : H a) (_ : H b), H c := by
    intro a b c h ha hb n
    rw [‚Üê h, Nat.cast_add, ‚Üê add_assoc ]
    exact (hb (n + a)).trans (ha n)
  intro a
  induction' a with a ha
  ¬∑ exact H_zero
  ¬∑ exact H_add a 1 _ rfl ha H_one

/-- Given a filtration `F` on a pretriangulated category `C`, the property `F.IsLE X n`
holds if `X : C` is `‚â§ n` for the filtration. -/
class IsLE (X : C) (n : ‚Ñ§) : Prop where
  le : (F.LE n).P X

/-- Given a filtration `F` on a pretriangulated category `C`, the property `F.IsGE X n`
holds if `X : C` is `‚â• n` for the filtration. -/
class IsGE (X : C) (n : ‚Ñ§) : Prop where
  ge : (F.GE n).P X

lemma mem_of_isLE (X : C) (n : ‚Ñ§) [F.IsLE X n] : (F.LE n).P X := IsLE.le

lemma mem_of_isGE (X : C) (n : ‚Ñ§) [F.IsGE X n] : (F.GE n).P X := IsGE.ge

-- Need to add stuff about these properties defining triangulated subcategories.

end FilteredTriangulated
