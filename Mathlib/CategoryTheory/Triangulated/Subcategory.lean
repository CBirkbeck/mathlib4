import Mathlib.CategoryTheory.Localization.Triangulated

namespace Set

open CategoryTheory

variable {C : Type _} [Category C]

class RespectsIso (S : Set C) where
  condition : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (_ : X ‚âÖ Y), X ‚àà S ‚Üí Y ‚àà S

lemma mem_of_iso (S : Set C) [S.RespectsIso] (e : X ‚âÖ Y) (hX : X ‚àà S) : Y ‚àà S :=
  RespectsIso.condition e hX

lemma mem_iff_of_iso (S : Set C) [S.RespectsIso] (e : X ‚âÖ Y) : X ‚àà S ‚Üî Y ‚àà S :=
  ‚ü®S.mem_of_iso e, S.mem_of_iso e.symm‚ü©

end Set

namespace CategoryTheory

open Category Limits Preadditive ZeroObject

namespace Limits

variable {C J‚ÇÅ J‚ÇÇ : Type _} [Category C]
  (X : J‚ÇÇ ‚Üí C) (e : J‚ÇÅ ‚âÉ J‚ÇÇ) [HasProduct X]

noncomputable def fanOfEquiv : Fan (X ‚àò e) := Fan.mk (‚àè X) (fun _ => Pi.œÄ _ _)

@[simp]
lemma fanOfEquiv_proj (j : J‚ÇÅ) : (fanOfEquiv X e).proj j = Pi.œÄ _ (e j) := rfl

@[reassoc]
lemma Fan.congr_proj {J : Type _} {F : J ‚Üí C} (s : Fan F)
    {j‚ÇÅ j‚ÇÇ : J} (h : j‚ÇÅ = j‚ÇÇ) : s.proj j‚ÇÅ ‚â´ eqToHom (by rw [h]) = s.proj j‚ÇÇ := by
  subst h
  simp

@[reassoc]
lemma Pi.congr_œÄ {J : Type _} (F : J ‚Üí C) [HasProduct F] {j‚ÇÅ j‚ÇÇ : J} (h : j‚ÇÅ = j‚ÇÇ) :
    Pi.œÄ F j‚ÇÅ ‚â´ eqToHom (by rw [h]) = Pi.œÄ F j‚ÇÇ := by
  subst h
  simp

noncomputable def isLimitFanOfEquiv : IsLimit (fanOfEquiv X e) :=
  mkFanLimit _ (fun s => Pi.lift (fun j‚ÇÇ => s.proj (e.symm j‚ÇÇ) ‚â´ eqToHom (by simp) ))
    (fun s j => by simp [Fan.congr_proj _ (e.symm_apply_apply j)])
    (fun s m hm => Pi.hom_ext _ _ (fun j => by
      dsimp
      simp only [limit.lift_œÄ, Fan.mk_pt, Fan.mk_œÄ_app, ‚Üê hm,
        Function.comp_apply, fanOfEquiv_proj, assoc]
      rw [Pi.congr_œÄ]
      simp))

lemma hasProductOfEquiv : HasProduct (X ‚àò e) :=
  ‚ü®‚ü®_, isLimitFanOfEquiv X e‚ü©‚ü©

noncomputable def productIsoOfEquiv [HasProduct (X ‚àò e)] :  ‚àè (X ‚àò e) ‚âÖ ‚àè X :=
  IsLimit.conePointUniqueUpToIso (limit.isLimit _) (isLimitFanOfEquiv X e)

lemma productOptionIso {C J : Type _} [Category C]
    (X : Option J ‚Üí C) [HasProduct X] [HasProduct (fun j => X (some j))]
    [HasBinaryProduct (‚àè (fun j => X (some j))) (X none)] :
    (‚àè X) ‚âÖ (‚àè (fun j => X (some j))) ‚®Ø (X none) where
  hom := prod.lift (Pi.lift (fun j => Pi.œÄ _ (some j))) (Pi.œÄ _ none)
  inv := Pi.lift (fun b => match b with
    | some j => prod.fst ‚â´ Pi.œÄ _ j
    | none => prod.snd)

end Limits

namespace Arrow

-- should be moved to Arrow.lean

variable {C D : Type _} [Category C] [Category D]

@[simps]
def mapArrowNatTransOfNatTrans {F G : C ‚•§ D} (œÑ : F ‚ü∂ G) : F.mapArrow ‚ü∂ G.mapArrow where
  app f :=
    { left := œÑ.app _
      right := œÑ.app _}

@[simps]
def mapArrowNatIsoOfNatIso {F G : C ‚•§ D} (e : F ‚âÖ G) : F.mapArrow ‚âÖ G.mapArrow where
  hom := mapArrowNatTransOfNatTrans e.hom
  inv := mapArrowNatTransOfNatTrans e.inv

end Arrow

namespace Triangulated

open Pretriangulated

variable (C : Type _) [Category C] [HasZeroObject C] [HasShift C ‚Ñ§]
  [Preadditive C] [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]

structure Subcategory where
  set : Set C
  zero : 0 ‚àà set
  shift : ‚àÄ (X : C) (n : ‚Ñ§) (_ : X ‚àà set), X‚ü¶n‚üß ‚àà set
  ext‚ÇÇ : ‚àÄ (T : Triangle C) (_ : T ‚àà distTriang C), T.obj‚ÇÅ ‚àà set ‚Üí T.obj‚ÇÉ ‚àà set ‚Üí T.obj‚ÇÇ ‚àà set

namespace Subcategory

variable {C}
variable (S : Subcategory C)

instance : S.set.RespectsIso := ‚ü®fun X Y e hX => by
  refine' S.ext‚ÇÇ (Triangle.mk e.hom (0 : Y ‚ü∂ 0) 0) _ hX S.zero
  refine' isomorphic_distinguished _ (contractible_distinguished X) _ _
  exact Triangle.isoMk _ _ (Iso.refl _) e.symm (Iso.refl _)
    (by aesop_cat) (by aesop_cat) (by aesop_cat)‚ü©

def W : MorphismProperty C := fun X Y f => ‚àÉ (Z : C) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß)
  (_ : Triangle.mk f g h ‚àà distTriang C), Z ‚àà S.set

def W' : MorphismProperty C := fun Y Z g => ‚àÉ (X : C) (f : X ‚ü∂ Y) (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß)
  (_ : Triangle.mk f g h ‚àà distTriang C), X ‚àà S.set

variable {S}

def W.mk {T : Triangle C} (hT : T ‚àà distTriang C) (h : T.obj‚ÇÉ ‚àà S.set) : S.W T.mor‚ÇÅ :=
  ‚ü®T.obj‚ÇÉ, T.mor‚ÇÇ, T.mor‚ÇÉ, hT, h‚ü©

def W'.mk {T : Triangle C} (hT : T ‚àà distTriang C) (h : T.obj‚ÇÅ ‚àà S.set) : S.W' T.mor‚ÇÇ :=
  ‚ü®T.obj‚ÇÅ, T.mor‚ÇÅ, T.mor‚ÇÉ, hT, h‚ü©

noncomputable def W.triangle {X Y : C} (f : X ‚ü∂ Y) (hf : S.W f) : Triangle C :=
  Triangle.mk f hf.choose_spec.choose hf.choose_spec.choose_spec.choose

lemma W.triangle_distinguished {X Y : C} (f : X ‚ü∂ Y) (hf : S.W f) :
   (W.triangle f hf) ‚àà distTriang C :=
  hf.choose_spec.choose_spec.choose_spec.choose

lemma W.triangle_obj‚ÇÉ_mem {X Y : C} (f : X ‚ü∂ Y) (hf : S.W f) :
  (W.triangle f hf).obj‚ÇÉ ‚àà S.set :=
  hf.choose_spec.choose_spec.choose_spec.choose_spec

variable (S)

lemma W_eq_W' : S.W = S.W' := by
  apply MorphismProperty.ext
  intro X Y f
  constructor
  . rintro ‚ü®Z, g, h, H, mem‚ü©
    exact ‚ü®_, _, _, inv_rot_of_dist_triangle _ H, S.shift _ (-1) mem‚ü©
  . rintro ‚ü®Z, g, h, H, mem‚ü©
    exact ‚ü®_, _, _, rot_of_dist_triangle _ H, S.shift _ 1 mem‚ü©

variable {S}

def W.mk' {T : Triangle C} (hT : T ‚àà distTriang C) (h : T.obj‚ÇÅ ‚àà S.set) : S.W T.mor‚ÇÇ := by
  simpa only [W_eq_W'] using W'.mk hT h

variable (S)


instance instContainsIdentitiesW : S.W.ContainsIdentities :=
  ‚ü®fun X => ‚ü®_, _, _, contractible_distinguished X, S.zero‚ü©‚ü©

lemma stableUnderCompositionW [IsTriangulated C] : (W S).StableUnderComposition := by
  rintro X‚ÇÅ X‚ÇÇ X‚ÇÉ u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ ‚ü®Z‚ÇÅ‚ÇÇ, v‚ÇÅ‚ÇÇ, w‚ÇÅ‚ÇÇ, H‚ÇÅ‚ÇÇ, mem‚ÇÅ‚ÇÇ‚ü© ‚ü®Z‚ÇÇ‚ÇÉ, v‚ÇÇ‚ÇÉ, w‚ÇÇ‚ÇÉ, H‚ÇÇ‚ÇÉ, mem‚ÇÇ‚ÇÉ‚ü©
  obtain ‚ü®Z‚ÇÅ‚ÇÉ, v‚ÇÅ‚ÇÉ, w‚ÇÅ‚ÇÇ, H‚ÇÅ‚ÇÉ‚ü© := distinguished_cocone_triangle (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ)
  refine' ‚ü®_, _, _, H‚ÇÅ‚ÇÉ, S.ext‚ÇÇ _ (someOctahedron rfl H‚ÇÅ‚ÇÇ H‚ÇÇ‚ÇÉ H‚ÇÅ‚ÇÉ).mem mem‚ÇÅ‚ÇÇ mem‚ÇÇ‚ÇÉ‚ü©

instance multiplicativeW [IsTriangulated C] : S.W.IsMultiplicative where
  comp' := S.stableUnderCompositionW

lemma respectsIsoW : S.W.RespectsIso where
  left := by
    rintro X' X Y e f ‚ü®Z, g, h, mem, mem'‚ü©
    refine' ‚ü®Z, g, h ‚â´ e.inv‚ü¶(1 : ‚Ñ§)‚üß', isomorphic_distinguished _ mem _ _, mem'‚ü©
    refine' Triangle.isoMk _ _ e (Iso.refl _) (Iso.refl _) (by aesop_cat) (by aesop_cat) _
    dsimp
    simp only [assoc, ‚Üê Functor.map_comp, e.inv_hom_id, Functor.map_id, comp_id, id_comp]
  right := by
    rintro X Y Y' e f ‚ü®Z, g, h, mem, mem'‚ü©
    refine' ‚ü®Z, e.inv ‚â´ g, h, isomorphic_distinguished _ mem _ _, mem'‚ü©
    exact Triangle.isoMk _ _ (Iso.refl _) e.symm (Iso.refl _)
      (by aesop_cat) (by aesop_cat) (by aesop_cat)


instance [IsTriangulated C] : S.W.HasLeftCalculusOfFractions where
  nonempty_toSq := by
    rintro X' X Y s ‚ü®Z, f, g, H, mem‚ü© u
    obtain ‚ü®Y', s', f', mem'‚ü© := distinguished_cocone_triangle‚ÇÇ (g ‚â´ u‚ü¶1‚üß')
    obtain ‚ü®b, ‚ü®hb‚ÇÅ, _‚ü©‚ü© :=
      complete_distinguished_triangle_morphism‚ÇÇ _ _ H mem' u (ùüô Z) (by simp)
    exact ‚ü®‚ü®Y', b, s', ‚ü®Z, f', g ‚â´ u‚ü¶1‚üß', mem', mem‚ü©, hb‚ÇÅ.symm‚ü©‚ü©
  ext := by
    rintro X' X Y f‚ÇÅ f‚ÇÇ s ‚ü®Z, g, h, H, mem‚ü© hf‚ÇÅ
    have hf‚ÇÇ : s ‚â´ (f‚ÇÅ - f‚ÇÇ) = 0 := by rw [comp_sub, hf‚ÇÅ, sub_self]
    obtain ‚ü®q, hq‚ü© := contravariant_yoneda_exact‚ÇÇ _ H _ hf‚ÇÇ
    obtain ‚ü®Y', r, t, mem'‚ü© := distinguished_cocone_triangle q
    refine' ‚ü®Y', r, _, _‚ü©
    . exact ‚ü®_, _, _, rot_of_dist_triangle _ mem', S.shift _ _ mem‚ü©
    . have eq := comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ _ mem'
      dsimp at eq
      rw [‚Üê sub_eq_zero, ‚Üê sub_comp, hq, assoc, eq, comp_zero]

instance [IsTriangulated C] : S.W.HasRightCalculusOfFractions where
  nonempty_toSq := by
    rintro X Y Y' s ‚ü®Z, f, g, H, mem‚ü© u
    obtain ‚ü®X', f', h', mem'‚ü© := distinguished_cocone_triangle‚ÇÅ (u ‚â´ f)
    obtain ‚ü®a, ‚ü®ha‚ÇÅ, _‚ü©‚ü© := complete_distinguished_triangle_morphism‚ÇÅ _ _ mem' H u (ùüô Z) (by simp)
    exact ‚ü®‚ü®X', a, f', ‚ü®Z, u ‚â´ f, h', mem', mem‚ü©, ha‚ÇÅ‚ü©‚ü©
  ext := by
    rintro Y Z Z' f‚ÇÅ f‚ÇÇ s hs hf‚ÇÅ
    have hf‚ÇÇ : (f‚ÇÅ - f‚ÇÇ) ‚â´ s = 0 := by rw [sub_comp, hf‚ÇÅ, sub_self]
    rw [W_eq_W'] at hs
    obtain ‚ü®Z, g, h, H, mem‚ü© := hs
    obtain ‚ü®q, hq‚ü© := covariant_yoneda_exact‚ÇÇ _ H _ hf‚ÇÇ
    obtain ‚ü®Y', r, t, mem'‚ü© := distinguished_cocone_triangle‚ÇÅ q
    refine' ‚ü®Y', r, _, _‚ü©
    . exact ‚ü®_, _, _, mem', mem‚ü©
    . have eq := comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ _ mem'
      dsimp at eq
      rw [‚Üê sub_eq_zero, ‚Üê comp_sub, hq, reassoc_of% eq, zero_comp]

lemma W_of_isIso {X Y : C} (f : X ‚ü∂ Y) [IsIso f] : S.W f := by
  refine' ‚ü®0, 0, 0, isomorphic_distinguished _ (contractible_distinguished Y) _ _, S.zero‚ü©
  exact Triangle.isoMk _ _ (asIso f) (Iso.refl _) (Iso.refl _)
    (by aesop_cat) (by aesop_cat) (by aesop_cat)

lemma mul_mem_W_iff {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§) :
    S.W ((‚Üë((-1 : Units ‚Ñ§)^n) : ‚Ñ§)  ‚Ä¢ f) ‚Üî S.W f :=
  S.respectsIsoW.arrow_mk_iso_iff
    (Arrow.isoMk (Preadditive.mulIso ((-1 : Units ‚Ñ§)^n) (Iso.refl _)) (Iso.refl _)
      (by dsimp ; simp only [Preadditive.zsmul_comp, id_comp, comp_id]))

instance WIsCompatibleWIthShift : S.W.IsCompatibleWithShift ‚Ñ§ := ‚ü®by
  have : ‚àÄ {X Y : C} (f : X ‚ü∂ Y) (hf : S.W f) (n : ‚Ñ§), S.W (f‚ü¶n‚üß') := by
    rintro X Y f ‚ü®Z, g, h, H, mem‚ü© n
    rw [‚Üê mul_mem_W_iff S _ n]
    exact ‚ü®_, _, _, shift_distinguished _ H n, S.shift _ n mem‚ü©
  intro n
  apply MorphismProperty.ext
  intro X Y f
  constructor
  . intro hf
    have H := S.respectsIsoW.arrow_mk_iso_iff
     ((Arrow.mapArrowNatIsoOfNatIso (shiftEquiv C n).unitIso).app (Arrow.mk f))
    dsimp at H
    rw [H]
    exact this _ hf (-n)
  . intro hf
    exact this _ hf n‚ü©

variable {S}

lemma W.shift {X‚ÇÅ X‚ÇÇ : C} {f : X‚ÇÅ ‚ü∂ X‚ÇÇ} (hf : S.W f) (n : ‚Ñ§) : S.W (f‚ü¶n‚üß') := by
  simpa only [MorphismProperty.IsCompatibleWithShift.iff S.W f n] using hf

lemma W.unshift {X‚ÇÅ X‚ÇÇ : C} {f : X‚ÇÅ ‚ü∂ X‚ÇÇ} {n : ‚Ñ§} (hf : S.W (f‚ü¶n‚üß')) : S.W f := by
  simpa only [‚Üê MorphismProperty.IsCompatibleWithShift.iff S.W f n] using hf

variable (S)

lemma binary_product_stable (X‚ÇÅ X‚ÇÇ : C) (hX‚ÇÅ : X‚ÇÅ ‚àà S.set) (hX‚ÇÇ : X‚ÇÇ ‚àà S.set) :
    (X‚ÇÅ ‚®Ø X‚ÇÇ) ‚àà S.set :=
  S.ext‚ÇÇ _ (binaryProductTriangle_distinguished X‚ÇÅ X‚ÇÇ) hX‚ÇÅ hX‚ÇÇ

lemma pi_finite_stable {J : Type} [Finite J] (X : J ‚Üí C) (hX : ‚àÄ j, X j ‚àà S.set) :
    (‚àè X) ‚àà S.set := by
  revert hX X
  let P : Type ‚Üí Prop := fun J =>
    ‚àÄ [hJ : Finite J] (X : J ‚Üí C) (_ : ‚àÄ j, X j ‚àà S.set), (‚àè X) ‚àà S.set
  change P J
  apply @Finite.induction_empty_option
  . intro J‚ÇÅ J‚ÇÇ e hJ‚ÇÅ _ X hX
    have : Finite J‚ÇÅ := Finite.of_equiv _ e.symm
    exact Set.mem_of_iso _ (productIsoOfEquiv X e) (hJ‚ÇÅ (fun j‚ÇÅ => X (e j‚ÇÅ)) (fun j‚ÇÅ => hX _))
  . intro _ X _
    refine' Set.mem_of_iso _ (IsZero.isoZero _).symm S.zero
    rw [IsZero.iff_id_eq_zero]
    ext ‚ü®‚ü©
  . intro J _ hJ _ X hX
    exact Set.mem_of_iso _ (productOptionIso  X).symm
      (S.binary_product_stable _ _ (hJ (fun j => X (some j)) (fun j => hX _)) (hX none))

instance : S.W.IsStableUnderFiniteProducts := ‚ü®fun J _ => by
  refine' MorphismProperty.IsStableUnderProductsOfShape.mk _ _ (S.respectsIsoW) _
  intro X‚ÇÅ X‚ÇÇ f hf
  exact W.mk (productTriangle_distinguished _ (fun j => W.triangle_distinguished _ (hf j)))
    (pi_finite_stable _ _ (fun j => W.triangle_obj‚ÇÉ_mem _ _))‚ü©

instance [IsTriangulated C] : S.W.IsCompatibleWithTriangulation := ‚ü®by
  rintro T‚ÇÅ T‚ÇÉ mem‚ÇÅ mem‚ÇÉ a b ‚ü®Z‚ÇÖ, g‚ÇÖ, h‚ÇÖ, mem‚ÇÖ, mem‚ÇÖ'‚ü© ‚ü®Z‚ÇÑ, g‚ÇÑ, h‚ÇÑ, mem‚ÇÑ, mem‚ÇÑ'‚ü© comm
  obtain ‚ü®Z‚ÇÇ, g‚ÇÇ, h‚ÇÇ, mem‚ÇÇ‚ü© := distinguished_cocone_triangle (T‚ÇÅ.mor‚ÇÅ ‚â´ b)
  have H := someOctahedron rfl mem‚ÇÅ mem‚ÇÑ mem‚ÇÇ
  have H' := someOctahedron comm.symm mem‚ÇÖ mem‚ÇÉ mem‚ÇÇ
  let œÜ : T‚ÇÅ ‚ü∂ T‚ÇÉ := H.triangleMorphism‚ÇÅ ‚â´ H'.triangleMorphism‚ÇÇ
  exact ‚ü®œÜ.hom‚ÇÉ,
    MorphismProperty.IsMultiplicative.comp S.W _ _ (W.mk H.mem mem‚ÇÑ') (W.mk' H'.mem mem‚ÇÖ'),
    ‚ü®by simpa using œÜ.comm‚ÇÇ, by simpa using œÜ.comm‚ÇÉ‚ü©‚ü©‚ü©

noncomputable example [IsTriangulated C] : Pretriangulated (S.W.Localization) := inferInstance

end Subcategory

end Triangulated

end CategoryTheory

namespace CategoryTheory

open Category Limits

variable {C : Type _} [Category C] [HasZeroObject C] [HasShift C ‚Ñ§] [Preadditive C]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C] [IsTriangulated C]
  (S : Triangulated.Subcategory C)

example : MorphismProperty C := S.W

noncomputable example : Pretriangulated S.W.Localization := inferInstance
--noncomputable example : IsTriangulated S.W.Localization := inferInstance
noncomputable example : S.W.Q.IsTriangulated := inferInstance

end CategoryTheory
