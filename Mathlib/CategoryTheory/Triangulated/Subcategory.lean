import Mathlib.CategoryTheory.Localization.Triangulated
import Mathlib.CategoryTheory.RespectsIso

namespace CategoryTheory

open Category Limits Preadditive ZeroObject

namespace Limits

variable {C J‚ÇÅ J‚ÇÇ : Type _} [Category C]
  (X : J‚ÇÇ ‚Üí C) (e : J‚ÇÅ ‚âÉ J‚ÇÇ) [HasProduct X]

noncomputable def fanOfEquiv : Fan (X ‚àò e) := Fan.mk (‚àè X) (fun _ => Pi.œÄ _ _)

@[simp]
lemma fanOfEquiv_proj (j : J‚ÇÅ) : (fanOfEquiv X e).proj j = Pi.œÄ _ (e j) := rfl

@[reassoc]
lemma Fan.congr_proj {J : Type _} {F : J ‚Üí C} (s : Fan F)
    {j‚ÇÅ j‚ÇÇ : J} (h : j‚ÇÅ = j‚ÇÇ) : s.proj j‚ÇÅ ‚â´ eqToHom (by rw [h]) = s.proj j‚ÇÇ := by
  subst h
  simp

@[reassoc]
lemma Pi.congr_œÄ {J : Type _} (F : J ‚Üí C) [HasProduct F] {j‚ÇÅ j‚ÇÇ : J} (h : j‚ÇÅ = j‚ÇÇ) :
    Pi.œÄ F j‚ÇÅ ‚â´ eqToHom (by rw [h]) = Pi.œÄ F j‚ÇÇ := by
  subst h
  simp

noncomputable def isLimitFanOfEquiv : IsLimit (fanOfEquiv X e) :=
  mkFanLimit _ (fun s => Pi.lift (fun j‚ÇÇ => s.proj (e.symm j‚ÇÇ) ‚â´ eqToHom (by simp) ))
    (fun s j => by simp [Fan.congr_proj _ (e.symm_apply_apply j)])
    (fun s m hm => Pi.hom_ext _ _ (fun j => by
      dsimp
      simp only [limit.lift_œÄ, Fan.mk_pt, Fan.mk_œÄ_app, ‚Üê hm,
        Function.comp_apply, fanOfEquiv_proj, assoc]
      rw [Pi.congr_œÄ]
      simp))

lemma hasProductOfEquiv : HasProduct (X ‚àò e) :=
  ‚ü®‚ü®_, isLimitFanOfEquiv X e‚ü©‚ü©

noncomputable def productIsoOfEquiv [HasProduct (X ‚àò e)] :  ‚àè (X ‚àò e) ‚âÖ ‚àè X :=
  IsLimit.conePointUniqueUpToIso (limit.isLimit _) (isLimitFanOfEquiv X e)

noncomputable def productOptionIso {C J : Type _} [Category C]
    (X : Option J ‚Üí C) [HasProduct X] [HasProduct (fun j => X (some j))]
    [HasBinaryProduct (‚àè (fun j => X (some j))) (X none)] :
    (‚àè X) ‚âÖ (‚àè (fun j => X (some j))) ‚®Ø (X none) where
  hom := prod.lift (Pi.lift (fun j => Pi.œÄ _ (some j))) (Pi.œÄ _ none)
  inv := Pi.lift (fun b => match b with
    | some j => prod.fst ‚â´ Pi.œÄ _ j
    | none => prod.snd)

end Limits

namespace Arrow

-- should be moved to Arrow.lean

variable {C D : Type _} [Category C] [Category D]

@[simps]
def mapArrowNatTransOfNatTrans {F G : C ‚•§ D} (œÑ : F ‚ü∂ G) : F.mapArrow ‚ü∂ G.mapArrow where
  app f :=
    { left := œÑ.app _
      right := œÑ.app _}

@[simps]
def mapArrowNatIsoOfNatIso {F G : C ‚•§ D} (e : F ‚âÖ G) : F.mapArrow ‚âÖ G.mapArrow where
  hom := mapArrowNatTransOfNatTrans e.hom
  inv := mapArrowNatTransOfNatTrans e.inv

end Arrow

namespace Triangulated

open Pretriangulated

variable (C : Type _) [Category C] [HasZeroObject C] [HasShift C ‚Ñ§]
  [Preadditive C] [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]

structure Subcategory where
  set : Set C
  zero' : ‚àÉ (Z : C) (_ : IsZero Z), Z ‚àà set
  shift : ‚àÄ (X : C) (n : ‚Ñ§) (_ : X ‚àà set), X‚ü¶n‚üß ‚àà set
  ext‚ÇÇ' : ‚àÄ (T : Triangle C) (_ : T ‚àà distTriang C), T.obj‚ÇÅ ‚àà set ‚Üí T.obj‚ÇÉ ‚àà set ‚Üí T.obj‚ÇÇ ‚àà set.isoClosure

namespace Subcategory

variable {C}

def isoClosure (S : Subcategory C) : Subcategory C where
  set := S.set.isoClosure
  zero' := by
    obtain ‚ü®Z, hZ, hZ'‚ü© := S.zero'
    exact ‚ü®Z, hZ, Z, hZ', ‚ü®Iso.refl _‚ü©‚ü©
  shift X n := by
    rintro ‚ü®Y, hY, ‚ü®e‚ü©‚ü©
    exact ‚ü®Y‚ü¶n‚üß, S.shift Y n hY, ‚ü®(shiftFunctor C n).mapIso e‚ü©‚ü©
  ext‚ÇÇ' := by
    intro T hT
    rintro ‚ü®X‚ÇÅ, h‚ÇÅ, ‚ü®e‚ÇÅ‚ü©‚ü© ‚ü®X‚ÇÉ, h‚ÇÉ, ‚ü®e‚ÇÉ‚ü©‚ü©
    let T' := Triangle.mk (e‚ÇÅ.inv ‚â´ T.mor‚ÇÅ) (T.mor‚ÇÇ ‚â´ e‚ÇÉ.hom) (e‚ÇÉ.inv ‚â´ T.mor‚ÇÉ ‚â´ e‚ÇÅ.hom‚ü¶1‚üß')
    have hT' : T' ‚àà distTriang C := isomorphic_distinguished _ hT _ (by
      refine' Triangle.isoMk _ _ e‚ÇÅ.symm (Iso.refl _) e‚ÇÉ.symm (by aesop_cat) (by aesop_cat) _
      dsimp
      simp only [assoc, ‚Üê Functor.map_comp, e‚ÇÅ.hom_inv_id, Functor.map_id, comp_id])
    exact Set.subset_isoClosure _ (S.ext‚ÇÇ' T' hT' h‚ÇÅ h‚ÇÉ)

instance (S : Subcategory C) : S.isoClosure.set.RespectsIso := by
  dsimp only [isoClosure]
  infer_instance

section

variable (set : Set C) (zero : 0 ‚àà set)
  (shift : ‚àÄ (X : C) (n : ‚Ñ§) (_ : X ‚àà set), X‚ü¶n‚üß ‚àà set)
  (ext‚ÇÇ : ‚àÄ (T : Triangle C) (_ : T ‚àà distTriang C), T.obj‚ÇÅ ‚àà set ‚Üí T.obj‚ÇÉ ‚àà set ‚Üí T.obj‚ÇÇ ‚àà set)

def mk' : Subcategory C where
  set := set
  zero' := ‚ü®0, isZero_zero _, zero‚ü©
  shift := shift
  ext‚ÇÇ' T hT h‚ÇÅ h‚ÇÉ := set.subset_isoClosure (ext‚ÇÇ T hT h‚ÇÅ h‚ÇÉ)

instance : (mk' set zero shift ext‚ÇÇ).set.RespectsIso := ‚ü®fun X Y e hX => by
  refine' ext‚ÇÇ (Triangle.mk e.hom (0 : Y ‚ü∂ 0) 0) _ hX zero
  refine' isomorphic_distinguished _ (contractible_distinguished X) _ _
  exact Triangle.isoMk _ _ (Iso.refl _) e.symm (Iso.refl _)
    (by aesop_cat) (by aesop_cat) (by aesop_cat)‚ü©

end

variable (S : Subcategory C)

variable {S}

lemma ext‚ÇÇ [S.set.RespectsIso] (T : Triangle C) (hT : T ‚àà distTriang C) (h‚ÇÅ : T.obj‚ÇÅ ‚àà S.set)
    (h‚ÇÉ : T.obj‚ÇÉ ‚àà S.set) : T.obj‚ÇÇ ‚àà S.set := by
  simpa only [S.set.isoClosure_eq_self] using S.ext‚ÇÇ' T hT h‚ÇÅ h‚ÇÉ

variable (S)

noncomputable def zeroObject : C := S.zero'.choose

lemma isZero_zeroObject : IsZero S.zeroObject := S.zero'.choose_spec.choose

lemma zeroObject_mem : S.zeroObject ‚àà S.set := S.zero'.choose_spec.choose_spec

lemma zero'' [S.set.RespectsIso] (X : C) (hX : IsZero X) : X ‚àà S.set :=
  S.set.mem_of_iso (S.isZero_zeroObject.isoZero.trans hX.isoZero.symm) S.zeroObject_mem

lemma zero [S.set.RespectsIso] : 0 ‚àà S.set := S.zero'' _ (isZero_zero _)

def W : MorphismProperty C := fun X Y f => ‚àÉ (Z : C) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß)
  (_ : Triangle.mk f g h ‚àà distTriang C), Z ‚àà S.set

def W' : MorphismProperty C := fun Y Z g => ‚àÉ (X : C) (f : X ‚ü∂ Y) (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß)
  (_ : Triangle.mk f g h ‚àà distTriang C), X ‚àà S.set

variable {S}

lemma W.mk {T : Triangle C} (hT : T ‚àà distTriang C) (h : T.obj‚ÇÉ ‚àà S.set) : S.W T.mor‚ÇÅ :=
  ‚ü®T.obj‚ÇÉ, T.mor‚ÇÇ, T.mor‚ÇÉ, hT, h‚ü©

lemma W'.mk {T : Triangle C} (hT : T ‚àà distTriang C) (h : T.obj‚ÇÅ ‚àà S.set) : S.W' T.mor‚ÇÇ :=
  ‚ü®T.obj‚ÇÅ, T.mor‚ÇÅ, T.mor‚ÇÉ, hT, h‚ü©

noncomputable def W.triangle {X Y : C} (f : X ‚ü∂ Y) (hf : S.W f) : Triangle C :=
  Triangle.mk f hf.choose_spec.choose hf.choose_spec.choose_spec.choose

lemma W.triangle_distinguished {X Y : C} (f : X ‚ü∂ Y) (hf : S.W f) :
   (W.triangle f hf) ‚àà distTriang C :=
  hf.choose_spec.choose_spec.choose_spec.choose

lemma W.triangle_obj‚ÇÉ_mem {X Y : C} (f : X ‚ü∂ Y) (hf : S.W f) :
  (W.triangle f hf).obj‚ÇÉ ‚àà S.set :=
  hf.choose_spec.choose_spec.choose_spec.choose_spec

variable (S)

lemma mem_W_iff_of_distinguished [S.set.RespectsIso] (T : Triangle C) (hT : T ‚àà distTriang C) :
    S.W T.mor‚ÇÅ ‚Üî T.obj‚ÇÉ ‚àà S.set := by
  constructor
  ¬∑ intro hf
    obtain ‚ü®e, _‚ü© := exists_iso_of_arrow_iso _ _ (W.triangle_distinguished _ hf) hT (Iso.refl _)
    exact S.set.mem_of_iso (Triangle.œÄ‚ÇÉ.mapIso e) (W.triangle_obj‚ÇÉ_mem _ hf)
  ¬∑ intro h
    exact ‚ü®_, _, _, hT, h‚ü©

lemma W_eq_W' : S.W = S.W' := by
  apply MorphismProperty.ext
  intro X Y f
  constructor
  ¬∑ rintro ‚ü®Z, g, h, H, mem‚ü©
    exact ‚ü®_, _, _, inv_rot_of_distTriang _ H, S.shift _ (-1) mem‚ü©
  ¬∑ rintro ‚ü®Z, g, h, H, mem‚ü©
    exact ‚ü®_, _, _, rot_of_distTriang _ H, S.shift _ 1 mem‚ü©

variable {S}

lemma W.mk' {T : Triangle C} (hT : T ‚àà distTriang C) (h : T.obj‚ÇÅ ‚àà S.set) : S.W T.mor‚ÇÇ := by
  simpa only [W_eq_W'] using W'.mk hT h

variable (S)

lemma isoClosure_W : S.isoClosure.W = S.W := by
  ext X Y f
  constructor
  ¬∑ rintro ‚ü®Z, g, h, mem, ‚ü®Z', hZ', ‚ü®e‚ü©‚ü©‚ü©
    refine' ‚ü®Z', g ‚â´ e.hom, e.inv ‚â´ h, isomorphic_distinguished _ mem _ _, hZ'‚ü©
    exact Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) e.symm
      (by aesop_cat) (by aesop_cat) (by aesop_cat)
  ¬∑ rintro ‚ü®Z, g, h, mem, hZ‚ü©
    exact ‚ü®Z, g, h, mem, Set.subset_isoClosure _ hZ‚ü©

instance instContainsIdentitiesW : S.W.ContainsIdentities := by
  rw [‚Üê isoClosure_W]
  exact ‚ü®fun X => ‚ü®_, _, _, contractible_distinguished X, S.isoClosure.zero‚ü©‚ü©

lemma stableUnderCompositionW [IsTriangulated C] : (W S).StableUnderComposition := by
  rw [‚Üê isoClosure_W]
  rintro X‚ÇÅ X‚ÇÇ X‚ÇÉ u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ ‚ü®Z‚ÇÅ‚ÇÇ, v‚ÇÅ‚ÇÇ, w‚ÇÅ‚ÇÇ, H‚ÇÅ‚ÇÇ, mem‚ÇÅ‚ÇÇ‚ü© ‚ü®Z‚ÇÇ‚ÇÉ, v‚ÇÇ‚ÇÉ, w‚ÇÇ‚ÇÉ, H‚ÇÇ‚ÇÉ, mem‚ÇÇ‚ÇÉ‚ü©
  obtain ‚ü®Z‚ÇÅ‚ÇÉ, v‚ÇÅ‚ÇÉ, w‚ÇÅ‚ÇÇ, H‚ÇÅ‚ÇÉ‚ü© := distinguished_cocone_triangle (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ)
  refine' ‚ü®_, _, _, H‚ÇÅ‚ÇÉ, S.isoClosure.ext‚ÇÇ _ (someOctahedron rfl H‚ÇÅ‚ÇÇ H‚ÇÇ‚ÇÉ H‚ÇÅ‚ÇÉ).mem mem‚ÇÅ‚ÇÇ mem‚ÇÇ‚ÇÉ‚ü©

instance multiplicativeW [IsTriangulated C] : S.W.IsMultiplicative where
  stableUnderComposition := S.stableUnderCompositionW

lemma respectsIsoW : S.W.RespectsIso where
  left := by
    rintro X' X Y e f ‚ü®Z, g, h, mem, mem'‚ü©
    refine' ‚ü®Z, g, h ‚â´ e.inv‚ü¶(1 : ‚Ñ§)‚üß', isomorphic_distinguished _ mem _ _, mem'‚ü©
    refine' Triangle.isoMk _ _ e (Iso.refl _) (Iso.refl _) (by aesop_cat) (by aesop_cat) _
    dsimp
    simp only [assoc, ‚Üê Functor.map_comp, e.inv_hom_id, Functor.map_id, comp_id, id_comp]
  right := by
    rintro X Y Y' e f ‚ü®Z, g, h, mem, mem'‚ü©
    refine' ‚ü®Z, e.inv ‚â´ g, h, isomorphic_distinguished _ mem _ _, mem'‚ü©
    exact Triangle.isoMk _ _ (Iso.refl _) e.symm (Iso.refl _)
      (by aesop_cat) (by aesop_cat) (by aesop_cat)


instance [IsTriangulated C] : S.W.HasLeftCalculusOfFractions where
  exists_leftFraction := by
    rintro X Y œÜ
    obtain ‚ü®Z, f, g, H, mem‚ü© := œÜ.hs
    obtain ‚ü®Y', s', f', mem'‚ü© := distinguished_cocone_triangle‚ÇÇ (g ‚â´ œÜ.f‚ü¶1‚üß')
    obtain ‚ü®b, ‚ü®hb‚ÇÅ, _‚ü©‚ü© :=
      complete_distinguished_triangle_morphism‚ÇÇ _ _ H mem' œÜ.f (ùüô Z) (by simp)
    exact ‚ü®MorphismProperty.LeftFraction.mk b s' ‚ü®_, _, _, mem', mem‚ü©, hb‚ÇÅ.symm‚ü©
  ext := by
    rintro X' X Y f‚ÇÅ f‚ÇÇ s ‚ü®Z, g, h, H, mem‚ü© hf‚ÇÅ
    have hf‚ÇÇ : s ‚â´ (f‚ÇÅ - f‚ÇÇ) = 0 := by rw [comp_sub, hf‚ÇÅ, sub_self]
    obtain ‚ü®q, hq‚ü© := Triangle.yoneda_exact‚ÇÇ _ H _ hf‚ÇÇ
    obtain ‚ü®Y', r, t, mem'‚ü© := distinguished_cocone_triangle q
    refine' ‚ü®Y', r, _, _‚ü©
    ¬∑ exact ‚ü®_, _, _, rot_of_distTriang _ mem', S.shift _ _ mem‚ü©
    ¬∑ have eq := comp_distTriang_mor_zero‚ÇÅ‚ÇÇ _ mem'
      dsimp at eq
      rw [‚Üê sub_eq_zero, ‚Üê sub_comp, hq, assoc, eq, comp_zero]

instance [IsTriangulated C] : S.W.HasRightCalculusOfFractions where
  exists_rightFraction := by
    rintro X Y œÜ
    obtain ‚ü®Z, f, g, H, mem‚ü© := œÜ.hs
    obtain ‚ü®X', f', h', mem'‚ü© := distinguished_cocone_triangle‚ÇÅ (œÜ.f ‚â´ f)
    obtain ‚ü®a, ‚ü®ha‚ÇÅ, _‚ü©‚ü© := complete_distinguished_triangle_morphism‚ÇÅ _ _
      mem' H œÜ.f (ùüô Z) (by simp)
    exact ‚ü®MorphismProperty.RightFraction.mk f' ‚ü®_, _, _, mem', mem‚ü© a, ha‚ÇÅ‚ü©
  ext := by
    rintro Y Z Z' f‚ÇÅ f‚ÇÇ s hs hf‚ÇÅ
    have hf‚ÇÇ : (f‚ÇÅ - f‚ÇÇ) ‚â´ s = 0 := by rw [sub_comp, hf‚ÇÅ, sub_self]
    rw [W_eq_W'] at hs
    obtain ‚ü®Z, g, h, H, mem‚ü© := hs
    obtain ‚ü®q, hq‚ü© := Triangle.coyoneda_exact‚ÇÇ _ H _ hf‚ÇÇ
    obtain ‚ü®Y', r, t, mem'‚ü© := distinguished_cocone_triangle‚ÇÅ q
    refine' ‚ü®Y', r, _, _‚ü©
    ¬∑ exact ‚ü®_, _, _, mem', mem‚ü©
    ¬∑ have eq := comp_distTriang_mor_zero‚ÇÅ‚ÇÇ _ mem'
      dsimp at eq
      rw [‚Üê sub_eq_zero, ‚Üê comp_sub, hq, reassoc_of% eq, zero_comp]

lemma W_of_isIso {X Y : C} (f : X ‚ü∂ Y) [IsIso f] : S.W f := by
  rw [‚Üê isoClosure_W]
  refine' ‚ü®0, 0, 0, isomorphic_distinguished _ (contractible_distinguished Y) _ _, S.isoClosure.zero‚ü©
  exact Triangle.isoMk _ _ (asIso f) (Iso.refl _) (Iso.refl _)
    (by aesop_cat) (by aesop_cat) (by aesop_cat)

lemma mul_mem_W_iff {X Y : C} (f : X ‚ü∂ Y) (n : ‚Ñ§À£) :
    S.W (n ‚Ä¢ f) ‚Üî S.W f :=
  S.respectsIsoW.arrow_mk_iso_iff
    (Arrow.isoMk (n ‚Ä¢ (Iso.refl _)) (Iso.refl _))

instance WIsCompatibleWithShift : S.W.IsCompatibleWithShift ‚Ñ§ := ‚ü®by
  have : ‚àÄ {X Y : C} (f : X ‚ü∂ Y) (hf : S.W f) (n : ‚Ñ§), S.W (f‚ü¶n‚üß') := by
    rintro X Y f ‚ü®Z, g, h, H, mem‚ü© n
    rw [‚Üê mul_mem_W_iff S _ n.negOnePow]
    exact ‚ü®_, _, _, Triangle.shift_distinguished _ H n, S.shift _ n mem‚ü©
  intro n
  apply MorphismProperty.ext
  intro X Y f
  constructor
  ¬∑ intro hf
    have H := S.respectsIsoW.arrow_mk_iso_iff
     ((Arrow.mapArrowNatIsoOfNatIso (shiftEquiv C n).unitIso).app (Arrow.mk f))
    dsimp at H
    rw [H]
    exact this _ hf (-n)
  ¬∑ intro hf
    exact this _ hf n‚ü©

variable {S}

lemma W.shift {X‚ÇÅ X‚ÇÇ : C} {f : X‚ÇÅ ‚ü∂ X‚ÇÇ} (hf : S.W f) (n : ‚Ñ§) : S.W (f‚ü¶n‚üß') := by
  simpa only [MorphismProperty.IsCompatibleWithShift.iff S.W f n] using hf

lemma W.unshift {X‚ÇÅ X‚ÇÇ : C} {f : X‚ÇÅ ‚ü∂ X‚ÇÇ} {n : ‚Ñ§} (hf : S.W (f‚ü¶n‚üß')) : S.W f := by
  simpa only [‚Üê MorphismProperty.IsCompatibleWithShift.iff S.W f n] using hf

variable (S)

lemma binary_product_stable [S.set.RespectsIso] (X‚ÇÅ X‚ÇÇ : C) (hX‚ÇÅ : X‚ÇÅ ‚àà S.set) (hX‚ÇÇ : X‚ÇÇ ‚àà S.set) :
    (X‚ÇÅ ‚®Ø X‚ÇÇ) ‚àà S.set :=
  S.ext‚ÇÇ _ (binaryProductTriangle_distinguished X‚ÇÅ X‚ÇÇ) hX‚ÇÅ hX‚ÇÇ

lemma pi_finite_stable [S.set.RespectsIso] {J : Type} [Finite J] (X : J ‚Üí C) (hX : ‚àÄ j, X j ‚àà S.set) :
    (‚àè X) ‚àà S.set := by
  revert hX X
  let P : Type ‚Üí Prop := fun J =>
    ‚àÄ [hJ : Finite J] (X : J ‚Üí C) (_ : ‚àÄ j, X j ‚àà S.set), (‚àè X) ‚àà S.set
  change P J
  apply @Finite.induction_empty_option
  ¬∑ intro J‚ÇÅ J‚ÇÇ e hJ‚ÇÅ _ X hX
    have : Finite J‚ÇÅ := Finite.of_equiv _ e.symm
    exact Set.mem_of_iso _ (productIsoOfEquiv X e) (hJ‚ÇÅ (fun j‚ÇÅ => X (e j‚ÇÅ)) (fun j‚ÇÅ => hX _))
  ¬∑ intro _ X _
    refine' Set.mem_of_iso _ (IsZero.isoZero _).symm S.zero
    rw [IsZero.iff_id_eq_zero]
    ext ‚ü®‚ü©
  ¬∑ intro J _ hJ _ X hX
    exact Set.mem_of_iso _ (productOptionIso  X).symm
      (S.binary_product_stable _ _ (hJ (fun j => X (some j)) (fun j => hX _)) (hX none))

instance : S.W.IsStableUnderFiniteProducts := by
  rw [‚Üê isoClosure_W]
  exact ‚ü®fun J _ => by
    refine' MorphismProperty.IsStableUnderProductsOfShape.mk _ _ (S.isoClosure.respectsIsoW) _
    intro X‚ÇÅ X‚ÇÇ f hf
    exact W.mk (productTriangle_distinguished _ (fun j => W.triangle_distinguished _ (hf j)))
      (pi_finite_stable _ _ (fun j => W.triangle_obj‚ÇÉ_mem _ _))‚ü©

instance [IsTriangulated C] : S.W.IsCompatibleWithTriangulation := ‚ü®by
  rintro T‚ÇÅ T‚ÇÉ mem‚ÇÅ mem‚ÇÉ a b ‚ü®Z‚ÇÖ, g‚ÇÖ, h‚ÇÖ, mem‚ÇÖ, mem‚ÇÖ'‚ü© ‚ü®Z‚ÇÑ, g‚ÇÑ, h‚ÇÑ, mem‚ÇÑ, mem‚ÇÑ'‚ü© comm
  obtain ‚ü®Z‚ÇÇ, g‚ÇÇ, h‚ÇÇ, mem‚ÇÇ‚ü© := distinguished_cocone_triangle (T‚ÇÅ.mor‚ÇÅ ‚â´ b)
  have H := someOctahedron rfl mem‚ÇÅ mem‚ÇÑ mem‚ÇÇ
  have H' := someOctahedron comm.symm mem‚ÇÖ mem‚ÇÉ mem‚ÇÇ
  let œÜ : T‚ÇÅ ‚ü∂ T‚ÇÉ := H.triangleMorphism‚ÇÅ ‚â´ H'.triangleMorphism‚ÇÇ
  exact ‚ü®œÜ.hom‚ÇÉ,
    S.W.comp_mem _ _ (W.mk H.mem mem‚ÇÑ') (W.mk' H'.mem mem‚ÇÖ'),
    ‚ü®by simpa using œÜ.comm‚ÇÇ, by simpa using œÜ.comm‚ÇÉ‚ü©‚ü©‚ü©

lemma ext‚ÇÅ [S.set.RespectsIso] (T : Triangle C) (hT : T ‚àà distTriang C) (h‚ÇÇ : T.obj‚ÇÇ ‚àà S.set)
    (h‚ÇÉ : T.obj‚ÇÉ ‚àà S.set) : T.obj‚ÇÅ ‚àà S.set :=
  S.ext‚ÇÇ _ (inv_rot_of_distTriang _ hT) (S.shift _ _ h‚ÇÉ) h‚ÇÇ

lemma ext‚ÇÉ [S.set.RespectsIso] (T : Triangle C) (hT : T ‚àà distTriang C) (h‚ÇÅ : T.obj‚ÇÅ ‚àà S.set)
    (h‚ÇÇ : T.obj‚ÇÇ ‚àà S.set) : T.obj‚ÇÉ ‚àà S.set :=
  S.ext‚ÇÇ _ (rot_of_distTriang _ hT) h‚ÇÇ (S.shift _ _ h‚ÇÅ)

lemma ext‚ÇÅ' (T : Triangle C) (hT : T ‚àà distTriang C) (h‚ÇÇ : T.obj‚ÇÇ ‚àà S.set)
    (h‚ÇÉ : T.obj‚ÇÉ ‚àà S.set) : T.obj‚ÇÅ ‚àà S.set.isoClosure :=
  S.ext‚ÇÇ' _ (inv_rot_of_distTriang _ hT) (S.shift _ _ h‚ÇÉ) h‚ÇÇ

lemma ext‚ÇÉ' (T : Triangle C) (hT : T ‚àà distTriang C) (h‚ÇÅ : T.obj‚ÇÅ ‚àà S.set)
    (h‚ÇÇ : T.obj‚ÇÇ ‚àà S.set) : T.obj‚ÇÉ ‚àà S.set.isoClosure :=
  S.ext‚ÇÇ' _ (rot_of_distTriang _ hT) h‚ÇÇ (S.shift _ _ h‚ÇÅ)

noncomputable example [IsTriangulated C] : Pretriangulated (S.W.Localization) := inferInstance

def category := FullSubcategory S.set

instance : Category S.category := FullSubcategory.category _

def Œπ : S.category ‚•§ C := fullSubcategoryInclusion _

instance : Full S.Œπ := FullSubcategory.full _
instance : Faithful S.Œπ := FullSubcategory.faithful _

instance : Preadditive S.category := by
  dsimp [category]
  infer_instance

instance : S.Œπ.Additive := by
  dsimp [Œπ, category]
  infer_instance

noncomputable instance hasShift : HasShift S.category ‚Ñ§ :=
  hasShiftOfFullyFaithful S.Œπ (fun n => FullSubcategory.lift _ (S.Œπ ‚ãô shiftFunctor C n)
    (fun X => S.shift _ _ X.2)) (fun _ => FullSubcategory.lift_comp_inclusion _ _ _)

instance commShiftŒπ : S.Œπ.CommShift ‚Ñ§ :=
  Functor.CommShift.of_hasShiftOfFullyFaithful _ _ _

-- these definitions are made irreducible to prevent (at least temporarily) any abuse of defeq
attribute [irreducible] hasShift commShiftŒπ

instance (n : ‚Ñ§) : (shiftFunctor S.category n).Additive := by
  have := Functor.additive_of_iso (S.Œπ.commShiftIso n).symm
  apply Functor.additive_of_comp_faithful _ S.Œπ

instance : HasZeroObject S.category where
  zero := by
    refine' ‚ü®‚ü®S.zeroObject, S.zeroObject_mem‚ü©, _‚ü©
    rw [IsZero.iff_id_eq_zero]
    apply S.Œπ.map_injective
    change ùüô (S.zeroObject) = 0
    apply S.isZero_zeroObject.eq_of_tgt

instance : Pretriangulated S.category where
  distinguishedTriangles := fun T => S.Œπ.mapTriangle.obj T ‚àà distTriang C
  isomorphic_distinguished := fun T‚ÇÅ hT‚ÇÅ T‚ÇÇ e =>
    isomorphic_distinguished _ hT‚ÇÅ _ (S.Œπ.mapTriangle.mapIso e)
  contractible_distinguished X := by
    refine' isomorphic_distinguished _ (contractible_distinguished (S.Œπ.obj X)) _ _
    exact Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) S.Œπ.mapZeroObject
      (by aesop_cat) (by aesop_cat) (by aesop_cat)
  distinguished_cocone_triangle {X Y} f := by
    obtain ‚ü®Z', g', h', mem‚ü© := distinguished_cocone_triangle (S.Œπ.map f)
    obtain ‚ü®Z'', hZ'', ‚ü®e‚ü©‚ü© := S.ext‚ÇÉ' _ mem X.2 Y.2
    let Z : S.category := ‚ü®Z'', hZ''‚ü©
    refine' ‚ü®Z, S.Œπ.preimage (g' ‚â´ e.hom),
      S.Œπ.preimage (e.inv ‚â´ h' ‚â´ (S.Œπ.commShiftIso (1 : ‚Ñ§)).inv.app X),
      isomorphic_distinguished _ mem _ _‚ü©
    exact Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) e.symm
      (by aesop_cat) (by aesop_cat) (by aesop_cat)
  rotate_distinguished_triangle T :=
    (rotate_distinguished_triangle (S.Œπ.mapTriangle.obj T)).trans
      (distinguished_iff_of_iso (S.Œπ.mapTriangleRotateIso.app T))
  complete_distinguished_triangle_morphism T‚ÇÅ T‚ÇÇ hT‚ÇÅ hT‚ÇÇ a b comm := by
    obtain ‚ü®c, ‚ü®hc‚ÇÅ, hc‚ÇÇ‚ü©‚ü© := complete_distinguished_triangle_morphism (S.Œπ.mapTriangle.obj T‚ÇÅ)
      (S.Œπ.mapTriangle.obj T‚ÇÇ) hT‚ÇÅ hT‚ÇÇ (S.Œπ.map a) (S.Œπ.map b)
      (by simpa using S.Œπ.congr_map comm)
    have ‚ü®c', hc'‚ü© : ‚àÉ (c' : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ), c = S.Œπ.map c' := ‚ü®S.Œπ.preimage c, by simp‚ü©
    dsimp at hc‚ÇÅ hc‚ÇÇ
    rw [hc'] at hc‚ÇÅ
    rw [hc', assoc, ‚Üê Functor.commShiftIso_hom_naturality] at hc‚ÇÇ
    refine' ‚ü®c', ‚ü®S.Œπ.map_injective _, S.Œπ.map_injective _‚ü©‚ü©
    ¬∑ simpa using hc‚ÇÅ
    ¬∑ rw [‚Üê cancel_mono ((Functor.commShiftIso (Œπ S) (1 : ‚Ñ§)).hom.app T‚ÇÇ.obj‚ÇÅ),
        S.Œπ.map_comp, S.Œπ.map_comp, assoc, assoc, hc‚ÇÇ]

instance : S.Œπ.IsTriangulated := ‚ü®fun _ hT => hT‚ü©

instance [IsTriangulated C] : IsTriangulated S.category :=
  IsTriangulated.of_fully_faithful_triangulated_functor S.Œπ

/-inductive setSpan (S : Set C) : C ‚Üí Prop
  | subset (X : C) (hX : X ‚àà S) : setSpan S X
  | zero : setSpan S 0
  | shift (X : C) (n : ‚Ñ§) (hX : setSpan S X) : setSpan S (X‚ü¶n‚üß)
  | ext‚ÇÇ (T : Triangle C) (hT : T ‚àà distTriang C) (h‚ÇÅ : setSpan S T.obj‚ÇÅ) (h‚ÇÉ : setSpan S T.obj‚ÇÉ) :
      setSpan S T.obj‚ÇÇ

def span (S : Set C) : Subcategory C where
  set := setSpan S
  zero := setSpan.zero
  shift X n hX := setSpan.shift X n hX
  ext‚ÇÇ T hT h‚ÇÅ h‚ÇÉ := setSpan.ext‚ÇÇ T hT h‚ÇÅ h‚ÇÉ

lemma subset_span_set (S : Set C) : S ‚äÜ (span S).set :=
  setSpan.subset

instance : PartialOrder (Subcategory C) where
  le S‚ÇÅ S‚ÇÇ := S‚ÇÅ.set ‚äÜ S‚ÇÇ.set
  le_refl S := (by rfl : S.set ‚äÜ S.set)
  le_trans := by
    intro S‚ÇÅ S‚ÇÇ S‚ÇÉ (h‚ÇÅ‚ÇÇ : S‚ÇÅ.set ‚äÜ S‚ÇÇ.set) (h‚ÇÇ‚ÇÉ : S‚ÇÇ.set ‚äÜ S‚ÇÉ.set)
    exact h‚ÇÅ‚ÇÇ.trans h‚ÇÇ‚ÇÉ
  le_antisymm := by
    rintro S‚ÇÅ S‚ÇÇ (h‚ÇÅ‚ÇÇ : S‚ÇÅ.set ‚äÜ S‚ÇÇ.set) (h‚ÇÇ‚ÇÅ : S‚ÇÇ.set ‚äÜ S‚ÇÅ.set)
    have := le_antisymm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÅ
    cases S‚ÇÅ
    cases S‚ÇÇ
    congr

lemma span_LE (S : Set C) (A : Subcategory C) (hA : S ‚äÜ A.set ) :
    span S ‚â§ A := by
  intro X (hX : setSpan S X)
  induction' hX with Y hY Y n _ hY T hT _ _ h‚ÇÅ h‚ÇÉ
  ¬∑ exact hA hY
  ¬∑ exact A.zero
  ¬∑ exact A.shift Y n hY
  ¬∑ exact A.ext‚ÇÇ T hT h‚ÇÅ h‚ÇÉ

def iInf {Œπ : Type _} (S : Œπ ‚Üí Subcategory C) : Subcategory C where
  set := Set.iInter (fun i => (S i).set)
  zero := by
    rw [Set.mem_iInter]
    intro i
    exact (S i).zero
  shift X n hX := by
    simp only [Set.mem_iInter] at hX ‚ä¢
    intro i
    exact (S i).shift X n (hX i)
  ext‚ÇÇ T hT h‚ÇÅ h‚ÇÉ := by
    simp only [Set.mem_iInter] at h‚ÇÅ h‚ÇÉ ‚ä¢
    intro i
    exact (S i).ext‚ÇÇ T hT (h‚ÇÅ i) (h‚ÇÉ i)

lemma mem_iInf_set_iff {Œπ : Type _} (S : Œπ ‚Üí Subcategory C) (X : C) :
    X ‚àà (iInf S).set ‚Üî ‚àÄ (i : Œπ), X ‚àà (S i).set := by
  dsimp [iInf]
  rw [Set.mem_iInter]

def sInf (S : Set (Subcategory C)) : Subcategory C :=
  iInf (Subtype.val : S ‚Üí _)

lemma mem_sInf_set_iff (S : Set (Subcategory C)) (X : C) :
    X ‚àà (sInf S).set ‚Üî ‚àÄ (A : Subcategory C) (_ : A ‚àà S), X ‚àà A.set := by
  dsimp [sInf]
  rw [mem_iInf_set_iff]
  constructor
  ¬∑ intro hX A hA
    exact hX ‚ü®_, hA‚ü©
  ¬∑ intro hX A
    exact hX A.1 A.2

instance : InfSet (Subcategory C) where
  sInf := sInf

instance : CompleteSemilatticeInf (Subcategory C) where
  sInf_le := by
    intro S A hA X hX
    erw [mem_sInf_set_iff] at hX
    exact hX _ hA
  le_sInf := by
    intro B A hA X hX
    erw [mem_sInf_set_iff]
    intro A' hA'
    exact hA _ hA' hX

instance : SupSet (Subcategory C) where
  sSup S := span (sSup (Subcategory.set '' S))

instance : CompleteSemilatticeSup (Subcategory C) where
  le_sSup := by
    intro S A hA X hX
    refine' subset_span_set _ _
    simp only [Set.sSup_eq_sUnion, Set.sUnion_image,
      Set.mem_iUnion, exists_prop]
    exact ‚ü®A, hA, hX‚ü©
  sSup_le := by
    intro S A hA
    apply span_LE
    rintro X ‚ü®_, ‚ü®B, hB, rfl‚ü©, hX‚ü©
    exact hA B hB hX

instance : Lattice (Subcategory C) where
  sup S‚ÇÅ S‚ÇÇ := sSup {S‚ÇÅ, S‚ÇÇ}
  le_sup_left S‚ÇÅ S‚ÇÇ := le_sSup (Set.mem_insert _ _ )
  le_sup_right S‚ÇÅ S‚ÇÇ := le_sSup (Set.mem_insert_of_mem _ rfl)
  sup_le := by
    rintro S‚ÇÅ S‚ÇÇ S‚ÇÉ (h‚ÇÅ‚ÇÉ : S‚ÇÅ.set ‚äÜ S‚ÇÉ.set) (h‚ÇÇ‚ÇÉ : S‚ÇÇ.set ‚äÜ S‚ÇÉ.set)
    apply span_LE
    rintro X ‚ü®_, ‚ü®B, hB, rfl‚ü©, hX‚ü©
    simp only [Set.mem_singleton_iff, Set.mem_insert_iff] at hB
    obtain (rfl|rfl) := hB
    ¬∑ exact h‚ÇÅ‚ÇÉ hX
    ¬∑ exact h‚ÇÇ‚ÇÉ hX
  inf S‚ÇÅ S‚ÇÇ :=
    { set := S‚ÇÅ.set ‚à© S‚ÇÇ.set
      zero := ‚ü®S‚ÇÅ.zero, S‚ÇÇ.zero‚ü©
      shift := fun X n hX => ‚ü®S‚ÇÅ.shift X n hX.1, S‚ÇÇ.shift X n hX.2‚ü©
      ext‚ÇÇ := fun T hT h‚ÇÅ h‚ÇÉ => ‚ü®S‚ÇÅ.ext‚ÇÇ T hT h‚ÇÅ.1 h‚ÇÉ.1,
        S‚ÇÇ.ext‚ÇÇ T hT h‚ÇÅ.2 h‚ÇÉ.2‚ü© }
  inf_le_left := fun S‚ÇÅ S‚ÇÇ X hX => hX.1
  inf_le_right := fun S‚ÇÅ S‚ÇÇ X hX => hX.2
  le_inf := fun S‚ÇÅ S‚ÇÇ S‚ÇÉ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ X hX => ‚ü®h‚ÇÅ‚ÇÇ hX, h‚ÇÇ‚ÇÉ hX‚ü©

variable (C)

def top : Subcategory C where
  set := ‚ä§
  zero := by tauto
  shift := by tauto
  ext‚ÇÇ := by tauto


variable {C}

instance : CompleteLattice (Subcategory C) where
  le_sSup := CompleteSemilatticeSup.le_sSup
  sSup_le := CompleteSemilatticeSup.sSup_le
  le_sInf := CompleteSemilatticeInf.le_sInf
  sInf_le := CompleteSemilatticeInf.sInf_le
  top :=
    { set := ‚ä§
      zero := by tauto
      shift := by tauto
      ext‚ÇÇ := by tauto }
  bot :=
    { set := IsZero
      zero := isZero_zero _
      shift := fun X n (hX : IsZero X) => by
        change IsZero _
        simp only [IsZero.iff_id_eq_zero] at hX ‚ä¢
        rw [‚Üê (shiftFunctor C n).map_id, hX, Functor.map_zero]
      ext‚ÇÇ := fun T hT h‚ÇÅ h‚ÇÉ => T.isZero‚ÇÇ_of_isZero‚ÇÅ‚ÇÉ hT h‚ÇÅ h‚ÇÉ }
  le_top _ _ _ := Set.mem_univ _
  bot_le := fun A X (hX : IsZero X) => A.zero' _ hX-/

section

variable {D : Type*} [Category D] [HasZeroObject D] [Preadditive D]
    [HasShift D ‚Ñ§] [‚àÄ (n : ‚Ñ§), (shiftFunctor D n).Additive] [Pretriangulated D]
    (F : C ‚•§ D) [F.CommShift ‚Ñ§] [F.IsTriangulated] [Full F]

-- note: does not require `[Faithful F]` !

def essImage : Subcategory D :=
  Subcategory.mk' F.essImage ‚ü®0, ‚ü®F.mapZeroObject‚ü©‚ü©
    (fun X n ‚ü®Y, ‚ü®e‚ü©‚ü© => ‚ü®(shiftFunctor C n).obj Y,
      ‚ü®(F.commShiftIso n).app Y ‚â™‚â´ (shiftFunctor D n).mapIso e‚ü©‚ü©)
    (fun T hT ‚ü®X‚ÇÅ, ‚ü®e‚ÇÅ‚ü©‚ü© ‚ü®X‚ÇÉ, ‚ü®e‚ÇÉ‚ü©‚ü© => by
      have ‚ü®h, hh‚ü© := F.map_surjective (e‚ÇÉ.hom ‚â´ T.mor‚ÇÉ ‚â´ e‚ÇÅ.inv‚ü¶1‚üß' ‚â´
        (F.commShiftIso (1 : ‚Ñ§)).inv.app X‚ÇÅ)
      obtain ‚ü®X‚ÇÇ, f, g, H‚ü© := distinguished_cocone_triangle‚ÇÇ h
      exact ‚ü®X‚ÇÇ, ‚ü®Triangle.œÄ‚ÇÇ.mapIso
        (isoTriangleOfIso‚ÇÅ‚ÇÉ _ _ (F.map_distinguished _ H) hT e‚ÇÅ e‚ÇÉ (by
          dsimp
          simp only [hh, assoc, Iso.inv_hom_id_app, Functor.comp_obj,
            comp_id, Iso.cancel_iso_hom_left, ‚Üê Functor.map_comp,
            Iso.inv_hom_id, Functor.map_id]))‚ü©‚ü©)

instance : (essImage F).set.RespectsIso := by
  dsimp only [essImage]
  infer_instance

end

section

variable {D : Type*} [Category D] (F : D ‚•§ C) (hF : ‚àÄ (X : D), F.obj X ‚àà S.set)

def lift : D ‚•§ S.category := FullSubcategory.lift S.set F hF

lemma lift_comp_inclusion_eq : S.lift F hF ‚ãô S.Œπ = F :=
  FullSubcategory.lift_comp_inclusion_eq _ _ _

def liftCompInclusion : S.lift F hF ‚ãô S.Œπ ‚âÖ F := Iso.refl _

-- should be generalized
instance [Preadditive D] [F.Additive] : (S.lift F hF).Additive where
  map_add {X Y f g} := by
    apply S.Œπ.map_injective
    apply F.map_add

noncomputable instance [HasShift D ‚Ñ§] [F.CommShift ‚Ñ§] : (S.lift F hF).CommShift ‚Ñ§ :=
  Functor.CommShift.ofComp (S.liftCompInclusion F hF) ‚Ñ§

noncomputable instance [HasShift D ‚Ñ§] [F.CommShift ‚Ñ§] :
  NatTrans.CommShift (S.liftCompInclusion F hF).hom ‚Ñ§ :=
    Functor.CommShift.ofComp_compatibility _ _

instance [HasShift D ‚Ñ§] [Preadditive D] [F.CommShift ‚Ñ§] [HasZeroObject D]
    [‚àÄ (n : ‚Ñ§), (shiftFunctor D n).Additive] [Pretriangulated D] [F.IsTriangulated]:
    (S.lift F hF).IsTriangulated := by
  rw [Functor.isTriangulated_iff_comp_right (S.liftCompInclusion F hF)]
  infer_instance

end

section

variable {D : Type*} [Category D] [Preadditive D] [HasZeroObject D] [HasShift D ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor D n).Additive] [Pretriangulated D]
  (F : D ‚•§ C) [F.CommShift ‚Ñ§] [F.IsTriangulated]
  [S.set.RespectsIso]

def inverseImage : Subcategory D :=
  Subcategory.mk' (fun X => F.obj X ‚àà S.set)
    (S.set.mem_of_iso F.mapZeroObject.symm S.zero)
    (fun X n hX => S.set.mem_of_iso ((F.commShiftIso n).symm.app X) (S.shift _ n hX))
    (fun _ hT h‚ÇÅ h‚ÇÉ => S.ext‚ÇÇ _ (F.map_distinguished _ hT) h‚ÇÅ h‚ÇÉ)

lemma mem_inverseImage_iff (X : D) :
    X ‚àà (S.inverseImage F).set ‚Üî F.obj X ‚àà S.set := by rfl

instance : (S.inverseImage F).set.RespectsIso where
  condition X Y e hX := by
    rw [mem_inverseImage_iff] at hX ‚ä¢
    exact S.set.mem_of_iso (F.mapIso e) hX

end

end Subcategory

end Triangulated

end CategoryTheory

namespace CategoryTheory

open Category Limits

variable {C : Type _} [Category C] [HasZeroObject C] [HasShift C ‚Ñ§] [Preadditive C]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C] [IsTriangulated C]
  (S : Triangulated.Subcategory C)

noncomputable example : Pretriangulated S.W.Localization := inferInstance
noncomputable example : IsTriangulated S.W.Localization := inferInstance
noncomputable example : S.W.Q.IsTriangulated := inferInstance

end CategoryTheory
