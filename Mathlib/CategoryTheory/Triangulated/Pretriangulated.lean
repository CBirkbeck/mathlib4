/-
Copyright (c) 2021 Luke Kershaw. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Luke Kershaw

! This file was ported from Lean 3 source module category_theory.triangulated.pretriangulated
! leanprover-community/mathlib commit 6876fa15e3158ff3e4a4e2af1fb6e1945c6e8803
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathlib.CategoryTheory.Preadditive.AdditiveFunctor
import Mathlib.CategoryTheory.Shift.Basic
import Mathlib.CategoryTheory.Triangulated.TriangleShift
import Mathlib.CategoryTheory.Limits.Constructions.FiniteProductsOfBinaryProducts
import Mathlib.CategoryTheory.Adjunction.Limits
import Mathlib.Algebra.Homology.ShortComplex.Basic

/-!
# Pretriangulated Categories

This file contains the definition of pretriangulated categories and triangulated functors
between them.

## Implementation Notes

We work under the assumption that pretriangulated categories are preadditive categories,
but not necessarily additive categories, as is assumed in some sources.

TODO: generalise this to n-angulated categories as in https://arxiv.org/abs/1006.4592
-/


noncomputable section

open CategoryTheory

open CategoryTheory.Preadditive

open CategoryTheory.Limits

universe v v‚ÇÄ v‚ÇÅ v‚ÇÇ u u‚ÇÄ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

namespace Limits

-- should be moved to a better place
namespace BinaryBiproductData

variable {C : Type _} [Category C]
    {X‚ÇÅ X‚ÇÇ : C} [HasZeroMorphisms C] [HasBinaryBiproduct X‚ÇÅ X‚ÇÇ] (d : BinaryBiproductData X‚ÇÅ X‚ÇÇ)

def isoBiprod {C : Type _} [Category C]
    {X‚ÇÅ X‚ÇÇ : C} [HasZeroMorphisms C] [HasBinaryBiproduct X‚ÇÅ X‚ÇÇ] (d : BinaryBiproductData X‚ÇÅ X‚ÇÇ) :
    X‚ÇÅ ‚äû X‚ÇÇ ‚âÖ d.bicone.pt :=
  IsLimit.conePointUniqueUpToIso (BinaryBiproduct.isLimit X‚ÇÅ X‚ÇÇ) d.isBilimit.isLimit

@[reassoc (attr := simp)]
lemma isoBiprod_inv_fst : d.isoBiprod.inv ‚â´ biprod.fst = d.bicone.fst :=
  IsLimit.conePointUniqueUpToIso_inv_comp _ d.isBilimit.isLimit ‚ü®WalkingPair.left‚ü©

@[reassoc (attr := simp)]
lemma isoBiprod_inv_snd : d.isoBiprod.inv ‚â´ biprod.snd = d.bicone.snd :=
  IsLimit.conePointUniqueUpToIso_inv_comp _ d.isBilimit.isLimit ‚ü®WalkingPair.right‚ü©

@[reassoc (attr := simp)]
lemma isoBiprod_hom_fst : d.isoBiprod.hom ‚â´ d.bicone.fst = biprod.fst := by
  rw [‚Üê isoBiprod_inv_fst, Iso.hom_inv_id_assoc]

@[reassoc (attr := simp)]
lemma isoBiprod_hom_snd : d.isoBiprod.hom ‚â´ d.bicone.snd = biprod.snd := by
  rw [‚Üê isoBiprod_inv_snd, Iso.hom_inv_id_assoc]

end BinaryBiproductData

end Limits

lemma isIso_of_yoneda_map_bijective {C : Type _} [Category C] {X Y : C} (f : X ‚ü∂ Y)
  (hf : ‚àÄ (T : C), Function.Bijective (fun (x : T ‚ü∂ X) => x ‚â´ f)):
    IsIso f := by
  obtain ‚ü®g, hg : g ‚â´ f = ùüô Y‚ü© := (hf Y).2 (ùüô Y)
  exact ‚ü®g, (hf _).1 (by aesop_cat), hg‚ü©

end CategoryTheory

namespace CategoryTheory

open Category Pretriangulated ZeroObject

/-
We work in a preadditive category `C` equipped with an additive shift.
-/
variable (C : Type u) [Category.{v} C] [HasZeroObject C] [HasShift C ‚Ñ§] [Preadditive C]

/-- A preadditive category `C` with an additive shift, and a class of "distinguished triangles"
relative to that shift is called pretriangulated if the following hold:
* Any triangle that is isomorphic to a distinguished triangle is also distinguished.
* Any triangle of the form `(X,X,0,id,0,0)` is distinguished.
* For any morphism `f : X ‚ü∂ Y` there exists a distinguished triangle of the form `(X,Y,Z,f,g,h)`.
* The triangle `(X,Y,Z,f,g,h)` is distinguished if and only if `(Y,Z,X‚ü¶1‚üß,g,h,-f‚ü¶1‚üß)` is.
* Given a diagram:
  ```
        f       g       h
    X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
    ‚îÇ       ‚îÇ                ‚îÇ
    ‚îÇa      ‚îÇb               ‚îÇa‚ü¶1‚üß'
    V       V                V
    X' ‚îÄ‚îÄ‚îÄ> Y' ‚îÄ‚îÄ‚îÄ> Z' ‚îÄ‚îÄ‚îÄ> X'‚ü¶1‚üß
        f'      g'      h'
  ```
  where the left square commutes, and whose rows are distinguished triangles,
  there exists a morphism `c : Z ‚ü∂ Z'` such that `(a,b,c)` is a triangle morphism.

See <https://stacks.math.columbia.edu/tag/0145>
-/
class Pretriangulated [‚àÄ n : ‚Ñ§, Functor.Additive (shiftFunctor C n)] where
  /-- a class of triangle which are called `distinguished` -/
  distinguishedTriangles : Set (Triangle C)
  /-- a triangle that is isomorphic to a distinguished triangle is distinguished -/
  isomorphic_distinguished :
    ‚àÄ T‚ÇÅ ‚àà distinguishedTriangles, ‚àÄ (T‚ÇÇ) (_ : T‚ÇÇ ‚âÖ T‚ÇÅ), T‚ÇÇ ‚àà distinguishedTriangles
  /-- obvious triangles `X ‚ü∂ X ‚ü∂ 0 ‚ü∂ X‚ü¶1‚üß` are distinguished -/
  contractible_distinguished : ‚àÄ X : C, contractibleTriangle X ‚àà distinguishedTriangles
  /-- any morphism `X ‚ü∂ Y` is part of a distinguished triangle `X ‚ü∂ Y ‚ü∂ Z ‚ü∂ X‚ü¶1‚üß` -/
  distinguished_cocone_triangle :
    ‚àÄ {X Y : C} (f : X ‚ü∂ Y),
      ‚àÉ (Z : C)(g : Y ‚ü∂ Z)(h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß), Triangle.mk f g h ‚àà distinguishedTriangles
  /-- a triangle is distinguished iff it is so after rotating it -/
  rotate_distinguished_triangle :
    ‚àÄ T : Triangle C, T ‚àà distinguishedTriangles ‚Üî T.rotate ‚àà distinguishedTriangles
  /-- given two distinguished triangle, a commutative square
        can be extended as morphism of triangles -/
  complete_distinguished_triangle_morphism :
    ‚àÄ (T‚ÇÅ T‚ÇÇ : Triangle C) (_ : T‚ÇÅ ‚àà distinguishedTriangles) (_ : T‚ÇÇ ‚àà distinguishedTriangles)
      (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ) (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ) (_ : T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ),
      ‚àÉ c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ, T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ ‚àß T‚ÇÅ.mor‚ÇÉ ‚â´ a‚ü¶1‚üß' = c ‚â´ T‚ÇÇ.mor‚ÇÉ
#align category_theory.pretriangulated CategoryTheory.Pretriangulated


namespace Pretriangulated

variable [‚àÄ n : ‚Ñ§, Functor.Additive (shiftFunctor C n)] [hC : Pretriangulated C]

-- porting note: increased the priority so that we can write `T ‚àà distTriang C`, and
-- not just `T ‚àà (distTriang C)`
/-- distinguished triangles in a pretriangulated category -/
notation:60 "distTriang " C => @distinguishedTriangles C _ _ _ _ _ _

variable {C}

/-- Given any distinguished triangle `T`, then we know `T.rotate` is also distinguished.
-/
theorem rot_of_dist_triangle (T : Triangle C) (H : T ‚àà distTriang C) : T.rotate ‚àà distTriang C :=
  (rotate_distinguished_triangle T).mp H
#align category_theory.pretriangulated.rot_of_dist_triangle CategoryTheory.Pretriangulated.rot_of_dist_triangle

/-- Given any distinguished triangle `T`, then we know `T.inv_rotate` is also distinguished.
-/
theorem inv_rot_of_dist_triangle (T : Triangle C) (H : T ‚àà distTriang C) :
    T.invRotate ‚àà distTriang C :=
  (rotate_distinguished_triangle T.invRotate).mpr
    (isomorphic_distinguished T H T.invRotate.rotate (invRotCompRot.app T))
#align category_theory.pretriangulated.inv_rot_of_dist_triangle CategoryTheory.Pretriangulated.inv_rot_of_dist_triangle

/-- Given any distinguished triangle
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
the composition `f ‚â´ g = 0`.
See <https://stacks.math.columbia.edu/tag/0146>
-/
@[reassoc]
theorem comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ (T) (H : T ‚àà (distTriang C)) : T.mor‚ÇÅ ‚â´ T.mor‚ÇÇ = 0 := by
  obtain ‚ü®c, hc‚ü© :=
    complete_distinguished_triangle_morphism _ _ (contractible_distinguished T.obj‚ÇÅ) H (ùüô T.obj‚ÇÅ)
      T.mor‚ÇÅ rfl
  simpa only [contractibleTriangle_mor‚ÇÇ, zero_comp] using hc.left.symm
#align category_theory.pretriangulated.comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ CategoryTheory.Pretriangulated.comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ

@[simps]
def shortComplexOfDistTriangle (T : Triangle C) (hT : T ‚àà distTriang C) : ShortComplex C :=
  ShortComplex.mk T.mor‚ÇÅ T.mor‚ÇÇ (comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ _ hT)

@[simps!]
def shortComplexOfDistTriangleIsoOfIso {T T' : Triangle C} (e : T ‚âÖ T') (hT : T ‚àà distTriang C) :
  shortComplexOfDistTriangle T hT ‚âÖ shortComplexOfDistTriangle T'
    (isomorphic_distinguished _ hT _ e.symm) :=
  ShortComplex.mkIso (Triangle.œÄ‚ÇÅ.mapIso e) (Triangle.œÄ‚ÇÇ.mapIso e) (Triangle.œÄ‚ÇÉ.mapIso e)
    (by aesop_cat) (by aesop_cat)

/-- Given any distinguished triangle
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
the composition `g ‚â´ h = 0`.
See <https://stacks.math.columbia.edu/tag/0146>
-/
@[reassoc]
theorem comp_dist_triangle_mor_zero‚ÇÇ‚ÇÉ (T : Triangle C) (H : T ‚àà distTriang C) :
  T.mor‚ÇÇ ‚â´ T.mor‚ÇÉ = 0 :=
  comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ T.rotate (rot_of_dist_triangle T H)
#align category_theory.pretriangulated.comp_dist_triangle_mor_zero‚ÇÇ‚ÇÉ CategoryTheory.Pretriangulated.comp_dist_triangle_mor_zero‚ÇÇ‚ÇÉ

/-- Given any distinguished triangle
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
the composition `h ‚â´ f‚ü¶1‚üß = 0`.
See <https://stacks.math.columbia.edu/tag/0146>
-/
@[reassoc]
theorem comp_dist_triangle_mor_zero‚ÇÉ‚ÇÅ (T : Triangle C) (H : T ‚àà distTriang C) :
    T.mor‚ÇÉ ‚â´ T.mor‚ÇÅ‚ü¶1‚üß' = 0 := by
  have H‚ÇÇ := rot_of_dist_triangle T.rotate (rot_of_dist_triangle T H)
  simpa using comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ T.rotate.rotate H‚ÇÇ
#align category_theory.pretriangulated.comp_dist_triangle_mor_zero‚ÇÉ‚ÇÅ CategoryTheory.Pretriangulated.comp_dist_triangle_mor_zero‚ÇÉ‚ÇÅ

lemma distinguished_cocone_triangle‚ÇÅ {Y Z : C} (g : Y ‚ü∂ Z) :
  ‚àÉ (X : C) (f : X ‚ü∂ Y) (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß), Triangle.mk f g h ‚àà distTriang C := by
  obtain ‚ü®X', f', g', mem‚ü© := distinguished_cocone_triangle g
  exact ‚ü®_, _, _, inv_rot_of_dist_triangle _ mem‚ü©

lemma distinguished_cocone_triangle‚ÇÇ {Z X : C} (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß) :
    ‚àÉ (Y : C) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z), Triangle.mk f g h ‚àà distTriang C := by
  obtain ‚ü®Y', f', g', mem‚ü© := distinguished_cocone_triangle h
  let T' := (Triangle.mk h f' g').invRotate.invRotate
  let T'' := Triangle.mk (((shiftEquiv C (1 : ‚Ñ§)).unitIso.app X).hom ‚â´ T'.mor‚ÇÅ) T'.mor‚ÇÇ
    (T'.mor‚ÇÉ ‚â´ ((shiftEquiv C (1 : ‚Ñ§)).counitIso.app (X‚ü¶(1 : ‚Ñ§)‚üß)).hom)
  refine' ‚ü®T''.obj‚ÇÇ, T''.mor‚ÇÅ, T''.mor‚ÇÇ, isomorphic_distinguished _
    (inv_rot_of_dist_triangle _ (inv_rot_of_dist_triangle _ mem)) _ _‚ü©
  exact Triangle.isoMk _ _ ((shiftEquiv C (1 : ‚Ñ§)).unitIso.app X) (Iso.refl _) (Iso.refl _)
    (by aesop_cat) (by aesop_cat)
    (by dsimp ; simp only [shift_shiftFunctorCompIsoId_inv_app, id_comp])

lemma complete_distinguished_triangle_morphism‚ÇÅ (T‚ÇÅ T‚ÇÇ : Triangle C)
    (hT‚ÇÅ : T‚ÇÅ ‚àà distTriang C) (hT‚ÇÇ : T‚ÇÇ ‚àà distTriang C) (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ)
    (c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ) (comm : T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ) :
    ‚àÉ (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ), T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ ‚àß
      T‚ÇÅ.mor‚ÇÉ ‚â´ a‚ü¶(1 : ‚Ñ§)‚üß' = c ‚â´ T‚ÇÇ.mor‚ÇÉ := by
  obtain ‚ü®a, ‚ü®ha‚ÇÅ, ha‚ÇÇ‚ü©‚ü© := complete_distinguished_triangle_morphism _ _
    (rot_of_dist_triangle _ hT‚ÇÅ) (rot_of_dist_triangle _ hT‚ÇÇ) b c comm
  refine' ‚ü®(shiftFunctor C (1 : ‚Ñ§)).preimage a, ‚ü®_, _‚ü©‚ü©
  . apply (shiftFunctor C (1 : ‚Ñ§)).map_injective
    dsimp at ha‚ÇÇ
    rw [neg_comp, comp_neg, neg_inj] at ha‚ÇÇ
    simpa only [Functor.map_comp, Functor.image_preimage] using ha‚ÇÇ
  . simpa only [Functor.image_preimage] using ha‚ÇÅ

lemma complete_distinguished_triangle_morphism‚ÇÇ (T‚ÇÅ T‚ÇÇ : Triangle C)
    (hT‚ÇÅ : T‚ÇÅ ‚àà distTriang C) (hT‚ÇÇ : T‚ÇÇ ‚àà distTriang C) (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ)
    (c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ) (comm : T‚ÇÅ.mor‚ÇÉ ‚â´ a‚ü¶(1 : ‚Ñ§)‚üß' = c ‚â´ T‚ÇÇ.mor‚ÇÉ) :
    ‚àÉ (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ), T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ ‚àß T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ := by
  obtain ‚ü®a, ‚ü®ha‚ÇÅ, ha‚ÇÇ‚ü©‚ü© := complete_distinguished_triangle_morphism _ _
    (inv_rot_of_dist_triangle _ hT‚ÇÅ) (inv_rot_of_dist_triangle _ hT‚ÇÇ) (c‚ü¶(-1 : ‚Ñ§)‚üß') a (by
    dsimp
    simp only [neg_comp, assoc, comp_neg, neg_inj, ‚Üê Functor.map_comp_assoc, ‚Üê comm,
      Functor.map_comp, shift_shift_neg', Functor.id_obj, assoc, Iso.inv_hom_id_app, comp_id])
  refine' ‚ü®a, ‚ü®ha‚ÇÅ, _‚ü©‚ü©
  dsimp only [Triangle.invRotate, Triangle.mk] at ha‚ÇÇ
  rw [‚Üê cancel_mono ((shiftEquiv C (1 : ‚Ñ§)).counitIso.inv.app T‚ÇÇ.obj‚ÇÉ), assoc, assoc, ‚Üê ha‚ÇÇ]
  simp only [shiftEquiv'_inverse, shiftEquiv'_functor, Functor.comp_obj, Functor.id_obj,
    shiftEquiv'_counitIso, shift_neg_shift', assoc, Iso.inv_hom_id_app_assoc]

lemma contractible_distinguished‚ÇÅ (X : C) : Triangle.mk (0 : 0 ‚ü∂ X) (ùüô X) 0 ‚àà distTriang C := by
  refine' isomorphic_distinguished _ (inv_rot_of_dist_triangle _ (contractible_distinguished X)) _ _
  exact Triangle.isoMk _ _ (Functor.mapZeroObject _).symm (Iso.refl _) (Iso.refl _)
    (by aesop_cat) (by aesop_cat) (by aesop_cat)

lemma contractible_distinguished‚ÇÇ (X : C) :
    Triangle.mk (0 : X ‚ü∂ 0) 0 (ùüô (X‚ü¶1‚üß)) ‚àà distTriang C := by
  refine' isomorphic_distinguished _ (inv_rot_of_dist_triangle _
    (contractible_distinguished‚ÇÅ (X‚ü¶(1 : ‚Ñ§)‚üß))) _ _
  refine' Triangle.isoMk _ _ ((shiftEquiv C (1 : ‚Ñ§)).unitIso.app X) (Iso.refl _) (Iso.refl _)
    (by aesop_cat) (by aesop_cat)
    (by dsimp ; simp only [shift_shiftFunctorCompIsoId_inv_app, id_comp])

lemma contravariant_yoneda_exact‚ÇÇ (T : Triangle C) (hT : T ‚àà distTriang C) {X : C}
    (f : T.obj‚ÇÇ ‚ü∂ X) (hf : T.mor‚ÇÅ ‚â´ f = 0) : ‚àÉ (g : T.obj‚ÇÉ ‚ü∂ X), f = T.mor‚ÇÇ ‚â´ g := by
  obtain ‚ü®g, ‚ü®hg‚ÇÅ, _‚ü©‚ü© := complete_distinguished_triangle_morphism T _ hT
    (contractible_distinguished‚ÇÅ X) 0 f (by aesop_cat)
  exact ‚ü®g, by simpa using hg‚ÇÅ.symm‚ü©

lemma contravariant_yoneda_exact‚ÇÉ (T : Triangle C) (hT : T ‚àà distTriang C) {X : C}
    (f : T.obj‚ÇÉ ‚ü∂ X) (hf : T.mor‚ÇÇ ‚â´ f = 0) : ‚àÉ (g : T.obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ X), f = T.mor‚ÇÉ ‚â´ g :=
  contravariant_yoneda_exact‚ÇÇ _ (rot_of_dist_triangle _ hT) f hf

lemma covariant_yoneda_exact‚ÇÇ (T : Triangle C) (hT : T ‚àà distTriang C) {X : C} (f : X ‚ü∂ T.obj‚ÇÇ)
    (hf : f ‚â´ T.mor‚ÇÇ = 0) : ‚àÉ (g : X ‚ü∂ T.obj‚ÇÅ), f = g ‚â´ T.mor‚ÇÅ := by
  obtain ‚ü®a, ‚ü®ha‚ÇÅ, _‚ü©‚ü© := complete_distinguished_triangle_morphism‚ÇÅ _ T
    (contractible_distinguished X) hT f 0 (by aesop_cat)
  exact ‚ü®a, by simpa using ha‚ÇÅ‚ü©

lemma covariant_yoneda_exact‚ÇÅ (T : Triangle C) (hT : T ‚àà distTriang C) {X : C}
    (f : X ‚ü∂ T.obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß) (hf : f ‚â´ T.mor‚ÇÅ‚ü¶1‚üß' = 0) : ‚àÉ (g : X ‚ü∂ T.obj‚ÇÉ), f = g ‚â´ T.mor‚ÇÉ :=
  covariant_yoneda_exact‚ÇÇ _ (rot_of_dist_triangle _
  (rot_of_dist_triangle _ hT)) f (by aesop_cat)

lemma covariant_yoneda_exact‚ÇÉ (T : Triangle C) (hT : T ‚àà distTriang C) {X : C} (f : X ‚ü∂ T.obj‚ÇÉ)
    (hf : f ‚â´ T.mor‚ÇÉ = 0) : ‚àÉ (g : X ‚ü∂ T.obj‚ÇÇ), f = g ‚â´ T.mor‚ÇÇ :=
  covariant_yoneda_exact‚ÇÇ _ (rot_of_dist_triangle _ hT) f hf

lemma shift_distinguished
  (T : Triangle C) (hT : T ‚àà distTriang C) (n : ‚Ñ§) :
    (Triangle.shiftFunctor C n).obj T ‚àà distTriang C := by
  revert T hT
  let H : ‚Ñ§ ‚Üí Prop := fun n => ‚àÄ (T : Triangle C) (_ : T ‚àà distTriang C),
    (Triangle.shiftFunctor C n).obj T ‚àà distTriang C
  change H n
  have H_zero : H 0 := fun T hT =>
    isomorphic_distinguished _ hT _ ((Triangle.shiftFunctorZero C).app T)
  have H_one : H 1 := fun T hT =>
    isomorphic_distinguished _ (rot_of_dist_triangle _
      (rot_of_dist_triangle _ (rot_of_dist_triangle _ hT))) _
        ((rotateRotateRotateIso C).symm.app T)
  have H_neg_one : H (-1):= fun T hT =>
    isomorphic_distinguished _ (inv_rot_of_dist_triangle _
      (inv_rot_of_dist_triangle _ (inv_rot_of_dist_triangle _ hT))) _
        ((invRotateInvRotateInvRotateIso C).symm.app T)
  have H_add : ‚àÄ {a b c : ‚Ñ§} (_ : H a) (_ : H b) (_ : a + b = c), H c :=
    fun {a b c} ha hb hc T hT =>
      isomorphic_distinguished _ (hb _ (ha _ hT)) _ ((Triangle.shiftFunctorAdd' C _ _ _ hc).app T)
  obtain (n|n) := n
  . induction' n with n hn
    . exact H_zero
    . exact H_add hn H_one rfl
  . induction' n with n hn
    . exact H_neg_one
    . exact H_add hn H_neg_one rfl

lemma triangle_mor‚ÇÉ_eq_zero_of_epi_mor‚ÇÇ (T : Triangle C) (hT : T ‚àà distTriang C) (h : Epi T.mor‚ÇÇ) :
    T.mor‚ÇÉ = 0 := by
  rw [‚Üê cancel_epi T.mor‚ÇÇ, comp_dist_triangle_mor_zero‚ÇÇ‚ÇÉ _ hT, comp_zero]

lemma triangle_mor‚ÇÉ_eq_zero_of_mono_mor‚ÇÅ (T : Triangle C) (hT : T ‚àà distTriang C)
    (h : Mono T.mor‚ÇÅ) : T.mor‚ÇÉ = 0 := by
  rw [‚Üê cancel_mono (T.mor‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß'), comp_dist_triangle_mor_zero‚ÇÉ‚ÇÅ _ hT, zero_comp]

lemma triangle_mono_mor‚ÇÅ (T : Triangle C) (hT : T ‚àà distTriang C) (h : T.mor‚ÇÉ = 0) :
    Mono T.mor‚ÇÅ := by
  refine' (shiftFunctor C (1 : ‚Ñ§)).mono_of_mono_map _
  rw [mono_iff_cancel_zero]
  intro P f hf
  obtain ‚ü®g, hg‚ü© := covariant_yoneda_exact‚ÇÅ _ hT f hf
  rw [hg, h, comp_zero]

section

@[simps]
def binaryBiproductData (T : Triangle C) (hT : T ‚àà distTriang C) (hT‚ÇÄ : T.mor‚ÇÉ = 0)
    (inr : T.obj‚ÇÉ ‚ü∂ T.obj‚ÇÇ) (inr_snd : inr ‚â´ T.mor‚ÇÇ = ùüô _) (fst : T.obj‚ÇÇ ‚ü∂ T.obj‚ÇÅ)
    (total : fst ‚â´ T.mor‚ÇÅ + T.mor‚ÇÇ ‚â´ inr = ùüô T.obj‚ÇÇ) :
    BinaryBiproductData T.obj‚ÇÅ T.obj‚ÇÉ where
  bicone :=
    { pt := T.obj‚ÇÇ
      fst := fst
      snd := T.mor‚ÇÇ
      inl := T.mor‚ÇÅ
      inr := inr
      inl_fst := by
        have : Mono T.mor‚ÇÅ := triangle_mono_mor‚ÇÅ T hT hT‚ÇÄ
        have eq : fst ‚â´ T.mor‚ÇÅ = ùüô T.obj‚ÇÇ - T.mor‚ÇÇ ‚â´ inr := by rw [‚Üê total, add_sub_cancel]
        simp only [‚Üê cancel_mono T.mor‚ÇÅ, assoc, id_comp, eq, comp_sub, comp_id,
          comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ_assoc _ hT, zero_comp, sub_zero]
      inl_snd := comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ _ hT
      inr_fst := by
        have : Mono T.mor‚ÇÅ := triangle_mono_mor‚ÇÅ T hT hT‚ÇÄ
        have eq : fst ‚â´ T.mor‚ÇÅ = ùüô T.obj‚ÇÇ - T.mor‚ÇÇ ‚â´ inr := by rw [‚Üê total, add_sub_cancel]
        simp only [‚Üê cancel_mono T.mor‚ÇÅ, assoc, eq, comp_sub, reassoc_of% inr_snd, comp_id,
          sub_self, zero_comp]
      inr_snd := inr_snd }
  isBilimit := isBinaryBilimitOfTotal _ total

end

instance : HasBinaryBiproducts C := ‚ü®fun X‚ÇÅ X‚ÇÉ => by
  obtain ‚ü®X‚ÇÇ, inl, snd, mem‚ü© := distinguished_cocone_triangle‚ÇÇ (0 : X‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß)
  obtain ‚ü®inr : X‚ÇÉ ‚ü∂ X‚ÇÇ, inr_snd : ùüô _ = inr ‚â´ snd‚ü© := covariant_yoneda_exact‚ÇÉ _ mem (ùüô X‚ÇÉ) (by simp)
  obtain ‚ü®fst : X‚ÇÇ ‚ü∂ X‚ÇÅ, hfst : ùüô X‚ÇÇ - snd ‚â´ inr = fst ‚â´ inl‚ü© :=
    covariant_yoneda_exact‚ÇÇ _ mem (ùüô X‚ÇÇ - snd ‚â´ inr) (by
      dsimp
      simp only [sub_comp, assoc, id_comp, ‚Üê inr_snd, comp_id, sub_self])
  refine' ‚ü®‚ü®binaryBiproductData _ mem rfl inr inr_snd.symm fst _‚ü©‚ü©
  dsimp
  simp only [‚Üê hfst, sub_add_cancel]‚ü©

instance : HasFiniteProducts C := hasFiniteProducts_of_has_binary_and_terminal
instance : HasFiniteCoproducts C := hasFiniteCoproducts_of_has_binary_and_initial
instance : HasFiniteBiproducts C := HasFiniteBiproducts.of_hasFiniteProducts

lemma exists_iso_binaryBiroduct_of_dist_triang (T : Triangle C) (hT : T ‚àà distTriang C)
  (zero : T.mor‚ÇÉ = 0) :
    ‚àÉ (e : T.obj‚ÇÇ ‚âÖ T.obj‚ÇÅ ‚äû T.obj‚ÇÉ), T.mor‚ÇÅ ‚â´ e.hom = biprod.inl ‚àß
      T.mor‚ÇÇ = e.hom ‚â´ biprod.snd := by
  obtain ‚ü®inr, inr_snd‚ü© := covariant_yoneda_exact‚ÇÉ _ hT (ùüô _) (by aesop_cat)
  obtain ‚ü®fst, hfst‚ü© := covariant_yoneda_exact‚ÇÇ _ hT (ùüô T.obj‚ÇÇ - T.mor‚ÇÇ ‚â´ inr) (by
    simp only [sub_comp, assoc, ‚Üê inr_snd, comp_id, id_comp, sub_self])
  let d := binaryBiproductData _ hT zero inr inr_snd.symm fst
    (by dsimp ; simp only [‚Üê hfst, sub_add_cancel])
  refine' ‚ü®d.isoBiprod.symm, ‚ü®_, by simp‚ü©‚ü©
  ext
  . simpa using d.bicone.inl_fst
  . simpa using d.bicone.inl_snd

lemma binaryBiproductTriangle_distinguished (X‚ÇÅ X‚ÇÇ : C) :
    binaryBiproductTriangle X‚ÇÅ X‚ÇÇ ‚àà distTriang C := by
  obtain ‚ü®Y, g, h, mem‚ü© := distinguished_cocone_triangle‚ÇÇ (0 : X‚ÇÇ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß)
  obtain ‚ü®e, ‚ü®he‚ÇÅ, he‚ÇÇ‚ü©‚ü© := exists_iso_binaryBiroduct_of_dist_triang _ mem rfl
  dsimp at he‚ÇÅ he‚ÇÇ
  refine' isomorphic_distinguished _ mem _ (Iso.symm _)
  refine' Triangle.isoMk _ _ (Iso.refl _) e (Iso.refl _)
    (by aesop_cat) (by aesop_cat) (by aesop_cat)

lemma binaryProductTriangle_distinguished (X‚ÇÅ X‚ÇÇ : C) :
    binaryProductTriangle X‚ÇÅ X‚ÇÇ ‚àà distTriang C :=
  isomorphic_distinguished _ (binaryBiproductTriangle_distinguished X‚ÇÅ X‚ÇÇ) _
    (binaryProductTriangleIsoBinaryBiproductTriangle X‚ÇÅ X‚ÇÇ)

@[simps!]
def productTriangle {J : Type _} (T : J ‚Üí Triangle C)
    [HasProduct (fun j => (T j).obj‚ÇÅ)] [HasProduct (fun j => (T j).obj‚ÇÇ)]
    [HasProduct (fun j => (T j).obj‚ÇÉ)]
    [HasProduct (fun j => (T j).obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß)] : Triangle C :=
  Triangle.mk (Pi.map (fun j => (T j).mor‚ÇÅ))
    (Pi.map (fun j => (T j).mor‚ÇÇ))
    (Pi.map (fun j => (T j).mor‚ÇÉ) ‚â´ inv (piComparison _ _))

@[simps]
def productTriangle.œÄ {J : Type _} (T : J ‚Üí Triangle C)
    [HasProduct (fun j => (T j).obj‚ÇÅ)] [HasProduct (fun j => (T j).obj‚ÇÇ)]
    [HasProduct (fun j => (T j).obj‚ÇÉ)]
    [HasProduct (fun j => (T j).obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß)] (j : J) :
    productTriangle T ‚ü∂ T j where
  hom‚ÇÅ := Pi.œÄ _ j
  hom‚ÇÇ := Pi.œÄ _ j
  hom‚ÇÉ := Pi.œÄ _ j
  comm‚ÇÅ := by simp
  comm‚ÇÇ := by simp
  comm‚ÇÉ := by
    dsimp
    rw [‚Üê piComparison_comp_œÄ, assoc, IsIso.inv_hom_id_assoc]
    simp only [limMap_œÄ, Discrete.natTrans_app]

lemma productTriangle.œÄ_zero‚ÇÉ‚ÇÅ (T : J ‚Üí Triangle C)
    [HasProduct (fun j => (T j).obj‚ÇÅ)] [HasProduct (fun j => (T j).obj‚ÇÇ)]
    [HasProduct (fun j => (T j).obj‚ÇÉ)]
    [HasProduct (fun j => (T j).obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß)]
    [HasProduct (fun j => (T j).obj‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß)]
    (h : ‚àÄ j, (T j).mor‚ÇÉ ‚â´ (T j).mor‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß' = 0) :
    (productTriangle T).mor‚ÇÉ ‚â´ (productTriangle T).mor‚ÇÅ‚ü¶1‚üß' = 0 := by
  dsimp
  have eq : (Pi.map fun j => (T j).mor‚ÇÅ) = Pi.lift (fun j => Pi.œÄ _ j ‚â´ (T j).mor‚ÇÅ) := by
    aesop_cat
  rw [eq, assoc, ‚Üê cancel_mono (piComparison _ _), zero_comp, assoc, assoc]
  refine' Limits.Pi.hom_ext _ _ (fun j => _)
  simp only [map_lift_piComparison, assoc, limit.lift_œÄ, Fan.mk_pt, Fan.mk_œÄ_app, zero_comp,
    Functor.map_comp, ‚Üê piComparison_comp_œÄ_assoc, IsIso.inv_hom_id_assoc,
    limMap_œÄ_assoc, Discrete.natTrans_app, h j, comp_zero]

@[simps]
def productTriangle.lift {J : Type _} {T' : Triangle C} (T : J ‚Üí Triangle C)
  (œÜ : ‚àÄ j, T' ‚ü∂ T j)
    [HasProduct (fun j => (T j).obj‚ÇÅ)] [HasProduct (fun j => (T j).obj‚ÇÇ)]
    [HasProduct (fun j => (T j).obj‚ÇÉ)]
    [HasProduct (fun j => (T j).obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß)] : T' ‚ü∂ productTriangle T where
  hom‚ÇÅ := Pi.lift (fun j => (œÜ j).hom‚ÇÅ)
  hom‚ÇÇ := Pi.lift (fun j => (œÜ j).hom‚ÇÇ)
  hom‚ÇÉ := Pi.lift (fun j => (œÜ j).hom‚ÇÉ)
  comm‚ÇÅ := Limits.Pi.hom_ext _ _ (fun j => by simp)
  comm‚ÇÇ := Limits.Pi.hom_ext _ _ (fun j => by simp)
  comm‚ÇÉ := by
    dsimp
    rw [‚Üê cancel_mono (piComparison _ _), assoc, assoc, assoc, IsIso.inv_hom_id]
    refine' Limits.Pi.hom_ext _ _ (fun j => by simp)

lemma productTriangle_distinguished {J : Type _} (T : J ‚Üí Triangle C)
    (hT : ‚àÄ j, T j ‚àà distTriang C)
    [HasProduct (fun j => (T j).obj‚ÇÅ)] [HasProduct (fun j => (T j).obj‚ÇÇ)]
    [HasProduct (fun j => (T j).obj‚ÇÉ)]
    [HasProduct (fun j => (T j).obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß)]
    [HasProduct (fun j => (T j).obj‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß)] :
    productTriangle T ‚àà distTriang C := by
  let f‚ÇÅ := Pi.map (fun j => (T j).mor‚ÇÅ)
  obtain ‚ü®Z, f‚ÇÇ, f‚ÇÉ, hT'‚ü©  := distinguished_cocone_triangle f‚ÇÅ
  let T' := Triangle.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ
  change T' ‚àà distTriang C at hT'
  have h := fun j => complete_distinguished_triangle_morphism _ _ hT' (hT j)
    (Pi.œÄ _ j) (Pi.œÄ _ j) (by simp)
  let œÜ : ‚àÄ j, T' ‚ü∂ T j := fun j =>
    { hom‚ÇÅ := Pi.œÄ _ j
      hom‚ÇÇ := Pi.œÄ _ j
      hom‚ÇÉ := (h j).choose
      comm‚ÇÅ := by simp
      comm‚ÇÇ := (h j).choose_spec.1
      comm‚ÇÉ := (h j).choose_spec.2 }
  obtain ‚ü®œÜ', hœÜ'‚ü© : ‚àÉ (œÜ' : T' ‚ü∂ productTriangle T), œÜ' = productTriangle.lift _ œÜ := ‚ü®_, rfl‚ü©
  suffices IsIso œÜ' by
    apply isomorphic_distinguished _ hT' _ (asIso œÜ').symm
  have h‚ÇÅ : œÜ'.hom‚ÇÅ = ùüô _ := Limits.Pi.hom_ext _ _ (by simp [hœÜ'])
  have h‚ÇÇ : œÜ'.hom‚ÇÇ = ùüô _ := Limits.Pi.hom_ext _ _ (by simp [hœÜ'])
  have : IsIso œÜ'.hom‚ÇÅ := by rw [h‚ÇÅ] ; infer_instance
  have : IsIso œÜ'.hom‚ÇÇ := by rw [h‚ÇÇ] ; infer_instance
  suffices IsIso œÜ'.hom‚ÇÉ from inferInstance
  have : Mono œÜ'.hom‚ÇÉ := by
    rw [mono_iff_cancel_zero]
    intro A f hf
    have hf' : f ‚â´ T'.mor‚ÇÉ = 0 := by
      rw [‚Üê cancel_mono (œÜ'.hom‚ÇÅ‚ü¶1‚üß'), zero_comp, assoc, œÜ'.comm‚ÇÉ, reassoc_of% hf, zero_comp]
    obtain ‚ü®g, hg‚ü© := covariant_yoneda_exact‚ÇÉ _ hT' f hf'
    have hg' : ‚àÄ j, (g ‚â´ Pi.œÄ _ j) ‚â´ (T j).mor‚ÇÇ = 0 := fun j => by
      have : g ‚â´ T'.mor‚ÇÇ ‚â´ œÜ'.hom‚ÇÉ ‚â´ Pi.œÄ _ j = 0 := by rw [‚Üê reassoc_of% hg,
        reassoc_of% hf, zero_comp]
      rw [œÜ'.comm‚ÇÇ_assoc, h‚ÇÇ, id_comp] at this
      simpa using this
    have hg'' := fun j => covariant_yoneda_exact‚ÇÇ _ (hT j) _ (hg' j)
    let Œ± := fun j => (hg'' j).choose
    have hŒ± : ‚àÄ j, _ = Œ± j ‚â´ _ := fun j => (hg'' j).choose_spec
    have hg''' : g = Pi.lift Œ± ‚â´ T'.mor‚ÇÅ := Limits.Pi.hom_ext _ _
        (fun j => by rw [hŒ±] ; simp)
    rw [hg, hg''', assoc, comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ _ hT', comp_zero]
  refine' isIso_of_yoneda_map_bijective _ (fun A => ‚ü®_, _‚ü©)
  . intro a‚ÇÅ a‚ÇÇ ha
    simpa only [‚Üê cancel_mono œÜ'.hom‚ÇÉ] using ha
  . intro a
    obtain ‚ü®a', ha'‚ü© : ‚àÉ (a' : A ‚ü∂ Z), a' ‚â´ T'.mor‚ÇÉ = a ‚â´ (productTriangle T).mor‚ÇÉ := by
      have eq := œÜ'.comm‚ÇÉ
      rw [h‚ÇÅ, Functor.map_id, comp_id] at eq
      have zero : ((productTriangle T).mor‚ÇÉ) ‚â´ (shiftFunctor C 1).map T'.mor‚ÇÅ = 0 := by
        rw [‚Üê cancel_mono (œÜ'.hom‚ÇÇ‚ü¶1‚üß'), zero_comp, assoc, ‚Üê Functor.map_comp, œÜ'.comm‚ÇÅ, h‚ÇÅ,
          id_comp]
        rw [productTriangle.œÄ_zero‚ÇÉ‚ÇÅ]
        intro j
        exact comp_dist_triangle_mor_zero‚ÇÉ‚ÇÅ _ (hT j)
      have ‚ü®g, hg‚ü© := covariant_yoneda_exact‚ÇÅ _ hT' (a ‚â´ (productTriangle T).mor‚ÇÉ) (by
        rw [assoc, zero, comp_zero])
      exact ‚ü®g, hg.symm‚ü©
    have ha'' := fun (j : J) => covariant_yoneda_exact‚ÇÉ _ (hT j)
      ((a - a' ‚â´ œÜ'.hom‚ÇÉ) ‚â´ Pi.œÄ _ j) (by
        simp only [sub_comp, assoc]
        erw [‚Üê (productTriangle.œÄ T j).comm‚ÇÉ]
        erw [‚Üê œÜ'.comm‚ÇÉ_assoc]
        rw [reassoc_of% ha']
        simp [h‚ÇÅ])
    let b := fun j => (ha'' j).choose
    have hb : ‚àÄ j, _  = b j ‚â´ _ := fun j => (ha'' j).choose_spec
    have hb' : a - a' ‚â´ œÜ'.hom‚ÇÉ = Pi.lift b ‚â´ (productTriangle T).mor‚ÇÇ :=
      Limits.Pi.hom_ext _ _ (fun j => by rw [hb] ; simp)
    have : (a' + (by exact Pi.lift b) ‚â´ T'.mor‚ÇÇ) ‚â´ œÜ'.hom‚ÇÉ = a := by
      rw [add_comp, assoc, œÜ'.comm‚ÇÇ, h‚ÇÇ, id_comp, ‚Üê hb', add_sub_cancel'_right]
    exact ‚ü®_, this‚ü©

lemma isZero_of_isIso_mor‚ÇÅ (T : Triangle C) (hT : T ‚àà distTriang C) (h : IsIso T.mor‚ÇÅ) :
    IsZero T.obj‚ÇÉ := by
  have eq : T.mor‚ÇÉ = 0 := triangle_mor‚ÇÉ_eq_zero_of_mono_mor‚ÇÅ _ hT inferInstance
  rw [IsZero.iff_id_eq_zero]
  obtain ‚ü®f, hf‚ü© := covariant_yoneda_exact‚ÇÉ _ hT (ùüô _) (by rw [eq, comp_zero])
  obtain ‚ü®g, hg‚ü© : ‚àÉ g, f = g ‚â´ T.mor‚ÇÅ := by
    refine' ‚ü®f ‚â´ inv T.mor‚ÇÅ, by simp only [assoc, IsIso.inv_hom_id, comp_id]‚ü©
  rw [hf, hg, assoc, comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ _ hT, comp_zero]

lemma isIso‚ÇÇ_of_isIso‚ÇÅ‚ÇÉ {T T' : Triangle C} (œÜ : T ‚ü∂ T') (hT : T ‚àà distTriang C)
    (hT' : T' ‚àà distTriang C) (h‚ÇÅ : IsIso œÜ.hom‚ÇÅ) (h‚ÇÉ : IsIso œÜ.hom‚ÇÉ) : IsIso œÜ.hom‚ÇÇ := by
  have : Mono œÜ.hom‚ÇÇ := by
    rw [mono_iff_cancel_zero]
    intro A f hf
    obtain ‚ü®g, rfl‚ü© := covariant_yoneda_exact‚ÇÇ _ hT f (by
      rw [‚Üê cancel_mono œÜ.hom‚ÇÉ, assoc, œÜ.comm‚ÇÇ, reassoc_of% hf, zero_comp, zero_comp])
    rw [assoc] at hf
    obtain ‚ü®h, hh‚ü© := covariant_yoneda_exact‚ÇÇ T'.invRotate (inv_rot_of_dist_triangle _ hT')
      (g ‚â´ œÜ.hom‚ÇÅ) (by dsimp ; rw [assoc, ‚Üê œÜ.comm‚ÇÅ, hf])
    obtain ‚ü®k, rfl‚ü© : ‚àÉ (k : A ‚ü∂ T.invRotate.obj‚ÇÅ), k ‚â´ T.invRotate.mor‚ÇÅ = g := by
      refine' ‚ü®h ‚â´ inv (œÜ.hom‚ÇÉ‚ü¶(-1 : ‚Ñ§)‚üß'), _‚ü©
      have eq := ((invRotate C).map œÜ).comm‚ÇÅ
      dsimp only [invRotate] at eq
      rw [‚Üê cancel_mono œÜ.hom‚ÇÅ, assoc, assoc, eq, IsIso.inv_hom_id_assoc, hh]
    erw [assoc, comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ _ (inv_rot_of_dist_triangle _ hT), comp_zero]
  refine' isIso_of_yoneda_map_bijective _ (fun A => ‚ü®_, _‚ü©)
  . intro f‚ÇÅ f‚ÇÇ h
    simpa only [‚Üê cancel_mono œÜ.hom‚ÇÇ] using h
  . intro y‚ÇÇ
    obtain ‚ü®x‚ÇÉ, hx‚ÇÉ‚ü© : ‚àÉ (x‚ÇÉ : A ‚ü∂ T.obj‚ÇÉ), x‚ÇÉ ‚â´ œÜ.hom‚ÇÉ = y‚ÇÇ ‚â´ T'.mor‚ÇÇ :=
      ‚ü®y‚ÇÇ ‚â´ T'.mor‚ÇÇ ‚â´ inv œÜ.hom‚ÇÉ, by simp‚ü©
    obtain ‚ü®x‚ÇÇ, hx‚ÇÇ‚ü© := covariant_yoneda_exact‚ÇÉ _ hT x‚ÇÉ (by
      rw [‚Üê cancel_mono (œÜ.hom‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß'), assoc, zero_comp, œÜ.comm‚ÇÉ, reassoc_of% hx‚ÇÉ,
        comp_dist_triangle_mor_zero‚ÇÇ‚ÇÉ _ hT', comp_zero])
    obtain ‚ü®y‚ÇÅ, hy‚ÇÅ‚ü© := covariant_yoneda_exact‚ÇÇ _ hT' (y‚ÇÇ - x‚ÇÇ ‚â´ œÜ.hom‚ÇÇ) (by
      rw [sub_comp, assoc, ‚Üê œÜ.comm‚ÇÇ, ‚Üê reassoc_of% hx‚ÇÇ, hx‚ÇÉ, sub_self])
    obtain ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü© : ‚àÉ (x‚ÇÅ : A ‚ü∂ T.obj‚ÇÅ), x‚ÇÅ ‚â´ œÜ.hom‚ÇÅ = y‚ÇÅ := ‚ü®y‚ÇÅ ‚â´ inv œÜ.hom‚ÇÅ, by simp‚ü©
    refine' ‚ü®x‚ÇÇ + x‚ÇÅ ‚â´ T.mor‚ÇÅ, _‚ü©
    dsimp
    rw [add_comp, assoc, œÜ.comm‚ÇÅ, reassoc_of% hx‚ÇÅ, ‚Üê hy‚ÇÅ, add_sub_cancel'_right]

lemma isIso‚ÇÉ_of_isIso‚ÇÅ‚ÇÇ {T T' : Triangle C} (œÜ : T ‚ü∂ T') (hT : T ‚àà distTriang C)
    (hT' : T' ‚àà distTriang C) (h‚ÇÅ : IsIso œÜ.hom‚ÇÅ) (h‚ÇÇ : IsIso œÜ.hom‚ÇÇ) : IsIso œÜ.hom‚ÇÉ :=
    isIso‚ÇÇ_of_isIso‚ÇÅ‚ÇÉ ((rotate C).map œÜ) (rot_of_dist_triangle _ hT)
      (rot_of_dist_triangle _ hT') h‚ÇÇ (by dsimp ; infer_instance)

lemma complete_distinguished_triangle_morphism' (T‚ÇÅ T‚ÇÇ : Triangle C)
    (hT‚ÇÅ : T‚ÇÅ ‚àà distTriang C) (hT‚ÇÇ : T‚ÇÇ ‚àà distTriang C)
    (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ) (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ) (comm : T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ) :
      ‚àÉ (œÜ : T‚ÇÅ ‚ü∂ T‚ÇÇ), œÜ.hom‚ÇÅ = a ‚àß œÜ.hom‚ÇÇ = b := by
  obtain ‚ü®c, ‚ü®hc‚ÇÅ, hc‚ÇÇ‚ü©‚ü© := complete_distinguished_triangle_morphism _ _ hT‚ÇÅ hT‚ÇÇ a b comm
  exact ‚ü®{  hom‚ÇÅ := a
            hom‚ÇÇ := b
            hom‚ÇÉ := c
            comm‚ÇÅ := comm
            comm‚ÇÇ := hc‚ÇÅ
            comm‚ÇÉ := hc‚ÇÇ }, rfl, rfl‚ü©

lemma exists_iso_of_arrow_iso (T‚ÇÅ T‚ÇÇ : Triangle C) (hT‚ÇÅ : T‚ÇÅ ‚àà distTriang C)
    (hT‚ÇÇ : T‚ÇÇ ‚àà distTriang C) (e : Arrow.mk T‚ÇÅ.mor‚ÇÅ ‚âÖ Arrow.mk T‚ÇÇ.mor‚ÇÅ) :
    ‚àÉ (e' : T‚ÇÅ ‚âÖ T‚ÇÇ), e'.hom.hom‚ÇÅ = e.hom.left ‚àß e'.hom.hom‚ÇÇ = e.hom.right := by
  obtain ‚ü®œÜ, ‚ü®hœÜ‚ÇÅ, hœÜ‚ÇÇ‚ü©‚ü© :=
    complete_distinguished_triangle_morphism' T‚ÇÅ T‚ÇÇ hT‚ÇÅ hT‚ÇÇ e.hom.left e.hom.right e.hom.w.symm
  have : IsIso œÜ.hom‚ÇÅ := by rw [hœÜ‚ÇÅ] ; infer_instance
  have : IsIso œÜ.hom‚ÇÇ := by rw [hœÜ‚ÇÇ] ; infer_instance
  have : IsIso œÜ.hom‚ÇÉ := isIso‚ÇÉ_of_isIso‚ÇÅ‚ÇÇ œÜ hT‚ÇÅ hT‚ÇÇ inferInstance inferInstance
  exact ‚ü®asIso œÜ, hœÜ‚ÇÅ, hœÜ‚ÇÇ‚ü©

/-
TODO: If `C` is pretriangulated with respect to a shift,
then `C·µí·µñ` is pretriangulated with respect to the inverse shift.
-/

end Pretriangulated

end CategoryTheory
