import Mathlib.CategoryTheory.Triangulated.Subcategory
import Mathlib.CategoryTheory.Localization.Triangulated
import Mathlib.CategoryTheory.Localization.CalculusOfFractions.Lemmas

namespace CategoryTheory

open Category Limits Pretriangulated

namespace Triangulated

variable {A C D D' : Type*} [Category A] [Category C] [Category D] [Category D']
  [HasZeroObject A] [HasZeroObject C]
  [HasShift A ‚Ñ§] [HasShift C ‚Ñ§]
  [Preadditive A] [Preadditive C]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor A n).Additive]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive]
  [Pretriangulated A] [Pretriangulated C] [IsTriangulated C]
  (F : A ‚•§ C) [F.CommShift ‚Ñ§] [F.IsTriangulated]
  [Full F] [Faithful F]
  (B : Subcategory C) [ClosedUnderIsomorphisms B.P]

class IsRightLocalizing where
  fac {Y : C} {X : A} (œÜ : Y ‚ü∂ F.obj X) (hY : B.P Y) :
    ‚àÉ (Y' : A) (_ : B.P (F.obj Y')) (a : Y ‚ü∂ F.obj Y') (b : Y' ‚ü∂ X),
      a ‚â´ F.map b = œÜ

lemma fac_of_isRightLocalizing [IsRightLocalizing F B]
    {Y : C} {X : A} (œÜ : Y ‚ü∂ F.obj X) (hY : B.P Y) :
    ‚àÉ (Y' : A) (_ : B.P (F.obj Y')) (a : Y ‚ü∂ F.obj Y') (b : Y' ‚ü∂ X),
      a ‚â´ F.map b = œÜ :=
  IsRightLocalizing.fac œÜ hY

lemma fac_of_isRightLocalizing' [IsRightLocalizing F B]
    {X : A} {Y : C} (s : F.obj X ‚ü∂ Y) (hs : B.W s) :
    ‚àÉ (X' : A) (s' : X ‚ü∂ X') (_ : (B.inverseImage F).W s') (b : Y ‚ü∂ F.obj X'),
      s ‚â´ b = F.map s' := by
  rw [Subcategory.W_iff'] at hs
  obtain ‚ü®W, a, b, hT, hW‚ü© := hs
  obtain ‚ü®W', hW', c, d, fac‚ü© := fac_of_isRightLocalizing F B a hW
  obtain ‚ü®U, e, f, hT'‚ü© := distinguished_cocone_triangle d
  obtain ‚ü®Œ≤, hŒ≤, _‚ü© := complete_distinguished_triangle_morphism _ _ hT (F.map_distinguished _ hT')
    c (ùüô _) (by simpa using fac.symm)
  dsimp at Œ≤ hŒ≤
  refine' ‚ü®U, e, _, Œ≤, by simpa using hŒ≤‚ü©
  rw [Subcategory.W_iff']
  exact ‚ü®_, _, _, hT', hW'‚ü©

lemma IsRightLocalizing.mk'
    (h : ‚àÄ ‚¶ÉX : A‚¶Ñ ‚¶ÉY : C‚¶Ñ (s : F.obj X ‚ü∂ Y) (_ : B.W s),
      ‚àÉ (X' : A) (s' : X ‚ü∂ X') (_ : (B.inverseImage F).W s')
        (b : Y ‚ü∂ F.obj X'), s ‚â´ b = F.map s') :
    IsRightLocalizing F B where
  fac {Y X} œÜ hY := by
    obtain ‚ü®Z, s, b, hT‚ü© := distinguished_cocone_triangle œÜ
    have hs : B.W s := by
      rw [Subcategory.W_iff']
      exact ‚ü®_, _, _, hT, hY‚ü©
    obtain ‚ü®W, s', hs', c, fac‚ü© := h s hs
    obtain ‚ü®U, d, e, hT'‚ü© := distinguished_cocone_triangle‚ÇÅ s'
    obtain ‚ü®Œ≤, hŒ≤, _‚ü© := complete_distinguished_triangle_morphism‚ÇÅ _ _ hT
      (F.map_distinguished _ hT') (ùüô _) c (by simpa using fac)
    dsimp at Œ≤ hŒ≤
    refine' ‚ü®U, (B.mem_W_iff_of_distinguished' _ (F.map_distinguished _ hT')).1 _,
      Œ≤, d, by simpa using hŒ≤.symm‚ü©
    rw [Subcategory.W_iff] at hs' ‚ä¢
    obtain ‚ü®_, _, _, hT'', hV‚ü© := hs'
    exact ‚ü®_, _, _, F.map_distinguished _ hT'', hV‚ü©



variable (L : C ‚•§ D) [L.IsLocalization B.W] [IsRightLocalizing F B]

section

variable (L' : A ‚•§ D') [L'.IsLocalization (B.inverseImage F).W]
  (F' : D' ‚•§ D) [Localization.Lifting L' (B.inverseImage F).W (F ‚ãô L) F']

noncomputable def full_of_isRightLocalizing : Full F' := by
  have := Localization.essSurj L' (B.inverseImage F).W
  apply F'.full_of_precomp_essSurj L'
  intro X‚ÇÅ X‚ÇÇ œÜ
  have e := Localization.Lifting.iso L' (B.inverseImage F).W (F ‚ãô L) F'
  obtain ‚ü®œÜ', hœÜ'‚ü© : ‚àÉ œÜ', œÜ = e.hom.app X‚ÇÅ ‚â´ œÜ' ‚â´ e.inv.app X‚ÇÇ :=
    ‚ü®e.inv.app X‚ÇÅ ‚â´ œÜ ‚â´ e.hom.app X‚ÇÇ, by simp‚ü©
  obtain ‚ü®f, hf‚ü© := Localization.exists_leftFraction L B.W œÜ'
  obtain ‚ü®X‚ÇÉ, s', hs', t, fac‚ü© := fac_of_isRightLocalizing' F B f.s f.hs
  let f' : (B.inverseImage F).W.LeftFraction X‚ÇÅ X‚ÇÇ :=
    { f := F.preimage (f.f ‚â´ t)
      s := F.preimage (f.s ‚â´ t)
      hs := by
        rw [B.mem_inverseImage_W_iff, F.image_preimage, fac, ‚Üê B.mem_inverseImage_W_iff F]
        exact hs' }
  have hf' : œÜ' ‚â´ L.map (F.map f'.s) = L.map (F.map f'.f) := by
    replace hf := hf =‚â´ L.map (f.s)
    rw [f.map_comp_map_s] at hf
    dsimp
    rw [F.image_preimage, F.image_preimage, L.map_comp, L.map_comp, reassoc_of% hf]
  have : IsIso (F'.map (L'.map f'.s)) :=
    ((MorphismProperty.RespectsIso.isomorphisms D).arrow_mk_iso_iff
      ((Arrow.isoOfNatIso e) (Arrow.mk f'.s))).2
        (Localization.inverts _ B.W _
          (by simpa only [‚Üê B.mem_inverseImage_W_iff F] using f'.hs))
  refine' ‚ü®f'.map L' (Localization.inverts _ _), _‚ü©
  rw [hœÜ', ‚Üê cancel_mono (F'.map (L'.map f'.s)), ‚Üê F'.map_comp, f'.map_comp_map_s,
    assoc, assoc]
  erw [‚Üê e.inv.naturality]
  rw [Functor.comp_map, reassoc_of% hf']
  erw [e.inv.naturality, e.hom_inv_id_app_assoc]
  rfl

--noncomputable def faithful_of_isRightLocalizing : Faithful F' := by
--  sorry


end

variable {L : C ‚•§ D} {L' : A ‚•§ D'} {H : D' ‚•§ D} (e : L' ‚ãô H ‚âÖ F ‚ãô L)
  [Full H] [Faithful H] [L.IsLocalization B.W]

--lemma isLocalization_of_isRightLocalizing : L'.IsLocalization (B.inverseImage F).W := by
--  sorry

-- TODO: Verdier, b) p. 131

end Triangulated

end CategoryTheory
