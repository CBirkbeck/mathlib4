/-
Copyright (c) 2021 Luke Kershaw. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Luke Kershaw

! This file was ported from Lean 3 source module category_theory.triangulated.rotate
! leanprover-community/mathlib commit 19786714ebe478f40b503acb4705fb058ba47303
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathlib.CategoryTheory.Preadditive.AdditiveFunctor
import Mathlib.CategoryTheory.Triangulated.Basic

/-!
# Rotate

This file adds the ability to rotate triangles and triangle morphisms.
It also shows that rotation gives an equivalence on the category of triangles.

-/


noncomputable section

open CategoryTheory

open CategoryTheory.Preadditive

open CategoryTheory.Limits

universe v v‚ÇÄ v‚ÇÅ v‚ÇÇ u u‚ÇÄ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory.Pretriangulated

open CategoryTheory.Category

variable {C : Type u} [Category.{v} C] [Preadditive C]

variable [HasShift C ‚Ñ§]

variable (X : C)

/-- If you rotate a triangle, you get another triangle.
Given a triangle of the form:
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
applying `rotate` gives a triangle of the form:
```
      g       h        -f‚ü¶1‚üß'
  Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ>  X‚ü¶1‚üß ‚îÄ‚îÄ‚îÄ> Y‚ü¶1‚üß
```
-/
@[simps!]
def Triangle.rotate (T : Triangle C) : Triangle C :=
  Triangle.mk T.mor‚ÇÇ T.mor‚ÇÉ (-T.mor‚ÇÅ‚ü¶1‚üß')
#align category_theory.pretriangulated.triangle.rotate CategoryTheory.Pretriangulated.Triangle.rotate

section

/-- Given a triangle of the form:
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
applying `invRotate` gives a triangle that can be thought of as:
```
        -h‚ü¶-1‚üß'     f       g
  Z‚ü¶-1‚üß  ‚îÄ‚îÄ‚îÄ>  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z
```
(note that this diagram doesn't technically fit the definition of triangle, as `Z‚ü¶-1‚üß‚ü¶1‚üß` is
not necessarily equal to `Z`, but it is isomorphic, by the `counitIso` of `shift C`)
-/
@[simps!]
def Triangle.invRotate (T : Triangle C) : Triangle C :=
  Triangle.mk (-T.mor‚ÇÉ‚ü¶(-1 : ‚Ñ§)‚üß' ‚â´ (shiftShiftNeg _ _).hom) T.mor‚ÇÅ
    (T.mor‚ÇÇ ‚â´ (shiftNegShift _ _).inv)
#align category_theory.pretriangulated.triangle.inv_rotate CategoryTheory.Pretriangulated.Triangle.invRotate

end

namespace TriangleMorphism

variable {T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ : Triangle C}

open Triangle

/-- You can also rotate a triangle morphism to get a morphism between the two rotated triangles.
Given a triangle morphism of the form:
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
  ‚îÇ       ‚îÇ       ‚îÇ        ‚îÇ
  ‚îÇa      ‚îÇb      ‚îÇc       ‚îÇa‚ü¶1‚üß
  V       V       V        V
  X' ‚îÄ‚îÄ‚îÄ> Y' ‚îÄ‚îÄ‚îÄ> Z' ‚îÄ‚îÄ‚îÄ> X'‚ü¶1‚üß
      f'      g'      h'
```
applying `rotate` gives a triangle morphism of the form:

```
      g        h       -f‚ü¶1‚üß
  Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ>  X‚ü¶1‚üß ‚îÄ‚îÄ‚îÄ> Y‚ü¶1‚üß
  ‚îÇ       ‚îÇ         ‚îÇ         ‚îÇ
  ‚îÇb      ‚îÇc        ‚îÇa‚ü¶1‚üß     ‚îÇb‚ü¶1‚üß'
  V       V         V         V
  Y' ‚îÄ‚îÄ‚îÄ> Z' ‚îÄ‚îÄ‚îÄ> X'‚ü¶1‚üß ‚îÄ‚îÄ‚îÄ> Y'‚ü¶1‚üß
      g'      h'       -f'‚ü¶1‚üß
```
-/
@[simps]
def rotate (f : TriangleMorphism T‚ÇÅ T‚ÇÇ) : TriangleMorphism T‚ÇÅ.rotate T‚ÇÇ.rotate
    where
  hom‚ÇÅ := f.hom‚ÇÇ
  hom‚ÇÇ := f.hom‚ÇÉ
  hom‚ÇÉ := f.hom‚ÇÅ‚ü¶1‚üß'
  comm‚ÇÉ := by
    dsimp
    simp only [rotate_mor‚ÇÉ, comp_neg, neg_comp, ‚Üê Functor.map_comp, f.comm‚ÇÅ]
#align category_theory.pretriangulated.triangle_morphism.rotate CategoryTheory.Pretriangulated.TriangleMorphism.rotate

/-- Given a triangle morphism of the form:
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
  ‚îÇ       ‚îÇ       ‚îÇ        ‚îÇ
  ‚îÇa      ‚îÇb      ‚îÇc       ‚îÇa‚ü¶1‚üß
  V       V       V        V
  X' ‚îÄ‚îÄ‚îÄ> Y' ‚îÄ‚îÄ‚îÄ> Z' ‚îÄ‚îÄ‚îÄ> X'‚ü¶1‚üß
      f'      g'      h'
```
applying `invRotate` gives a triangle morphism that can be thought of as:
```
        -h‚ü¶-1‚üß      f         g
  Z‚ü¶-1‚üß  ‚îÄ‚îÄ‚îÄ>  X   ‚îÄ‚îÄ‚îÄ>  Y   ‚îÄ‚îÄ‚îÄ>  Z
    ‚îÇ          ‚îÇ         ‚îÇ         ‚îÇ
    ‚îÇc‚ü¶-1‚üß'    ‚îÇa        ‚îÇb        ‚îÇc
    V          V         V         V
  Z'‚ü¶-1‚üß ‚îÄ‚îÄ‚îÄ>  X'  ‚îÄ‚îÄ‚îÄ>  Y'  ‚îÄ‚îÄ‚îÄ>  Z'
       -h'‚ü¶-1‚üß     f'        g'
```
(note that this diagram doesn't technically fit the definition of triangle morphism,
as `Z‚ü¶-1‚üß‚ü¶1‚üß` is not necessarily equal to `Z`, and `Z'‚ü¶-1‚üß‚ü¶1‚üß` is not necessarily equal to `Z'`,
but they are isomorphic, by the `counitIso` of `shift C`)
-/
@[simps]
def invRotate (f : TriangleMorphism T‚ÇÅ T‚ÇÇ) : TriangleMorphism T‚ÇÅ.invRotate T‚ÇÇ.invRotate
    where
  hom‚ÇÅ := f.hom‚ÇÉ‚ü¶-1‚üß'
  hom‚ÇÇ := f.hom‚ÇÅ
  hom‚ÇÉ := f.hom‚ÇÇ
  comm‚ÇÅ := by
    dsimp [Triangle.invRotate]
    simp only [Discrete.functor_map_id, NatTrans.id_app, id_comp, neg_comp, assoc,
      comp_neg, neg_inj]
    rw [‚Üê Functor.map_comp_assoc, ‚Üê f.comm‚ÇÉ, Functor.map_comp_assoc, Œº_naturality_assoc,
      NatTrans.naturality, Functor.id_map]
  comm‚ÇÉ := by
    dsimp [Triangle.invRotate] --, shiftFunctorNegCompShiftFunctor]
    erw [‚Üê reassoc_of% f.comm‚ÇÇ, Category.assoc,
      ‚Üê (shiftFunctorNegCompShiftFunctor C (1 : ‚Ñ§)).inv.naturality f.hom‚ÇÉ]
    rfl
#align category_theory.pretriangulated.triangle_morphism.inv_rotate CategoryTheory.Pretriangulated.TriangleMorphism.invRotate

end TriangleMorphism

variable (C)

/-- Rotating triangles gives an endofunctor on the category of triangles in `C`.
-/
@[simps]
def rotate : Triangle C ‚•§ Triangle C
    where
  obj := Triangle.rotate
  map f := f.rotate
#align category_theory.pretriangulated.rotate CategoryTheory.Pretriangulated.rotate

/-- The inverse rotation of triangles gives an endofunctor on the category of triangles in `C`.
-/
@[simps]
def invRotate : Triangle C ‚•§ Triangle C
    where
  obj := Triangle.invRotate
  map f := f.invRotate
#align category_theory.pretriangulated.inv_rotate CategoryTheory.Pretriangulated.invRotate

variable {C}

variable [‚àÄ n : ‚Ñ§, Functor.Additive (shiftFunctor C n)]

/-- There is a natural map from a triangle to the `invRotate` of its `rotate`. -/
@[simps]
def toInvRotateRotate (T : Triangle C) : T ‚ü∂ (invRotate C).obj ((rotate C).obj T)
    where
  hom‚ÇÅ := (shiftShiftNeg _ _).inv
  hom‚ÇÇ := ùüô T.obj‚ÇÇ
  hom‚ÇÉ := ùüô T.obj‚ÇÉ
  comm‚ÇÉ := by
    dsimp [invRotate, Triangle.invRotate, Triangle.rotate]
    simp only [Category.id_comp]
    erw [shiftShiftNeg_inv_shift (1 : ‚Ñ§) T.obj‚ÇÅ]
    rfl
#align category_theory.pretriangulated.to_inv_rotate_rotate CategoryTheory.Pretriangulated.toInvRotateRotate

/-- There is a natural transformation between the identity functor on triangles in `C`,
and the composition of a rotation with an inverse rotation.
-/
@[simps]
def rotCompInvRotHom : ùü≠ (Triangle C) ‚ü∂ rotate C ‚ãô invRotate C
    where
  app := toInvRotateRotate
  naturality _ _ f := by
    ext
    . exact (shiftFunctorCompShiftFunctorNeg C (1 : ‚Ñ§)).inv.naturality f.hom‚ÇÅ
    . dsimp
      simp only [comp_id, id_comp]
    . dsimp
      simp only [comp_id, id_comp]
#align category_theory.pretriangulated.rot_comp_inv_rot_hom CategoryTheory.Pretriangulated.rotCompInvRotHom

/-- There is a natural map from the `invRotate` of the `rotate` of a triangle to itself. -/
@[simps]
def fromInvRotateRotate (T : Triangle C) : (invRotate C).obj ((rotate C).obj T) ‚ü∂ T
    where
  hom‚ÇÅ := (shiftEquiv C 1).unitInv.app T.obj‚ÇÅ
  hom‚ÇÇ := ùüô T.obj‚ÇÇ
  hom‚ÇÉ := ùüô T.obj‚ÇÉ
  comm‚ÇÅ := by
    dsimp [Triangle.invRotate]
    simp
    sorry
  comm‚ÇÇ := by
    aesop_cat
  comm‚ÇÉ := by
    sorry
  --comm‚ÇÉ' := by
  --  dsimp
  --  rw [unit_of_tensor_iso_unit_inv_app, Œµ_app_obj]
  --  simp only [discrete.functor_map_id, nat_trans.id_app, id_comp, assoc, functor.map_comp,
  --    obj_Œº_app, obj_Œµ_inv_app, comp_id, Œº_inv_hom_app_assoc]
  --  erw [Œº_inv_hom_app, Œº_inv_hom_app_assoc, category.comp_id]
#align category_theory.pretriangulated.from_inv_rotate_rotate CategoryTheory.Pretriangulated.fromInvRotateRotate
#exit

/-- There is a natural transformation between the composition of a rotation with an inverse rotation
on triangles in `C`, and the identity functor.
-/
@[simps]
def rotCompInvRotInv : rotate C ‚ãô invRotate C ‚ü∂ ùü≠ (Triangle C) where app := fromInvRotateRotate
#align category_theory.pretriangulated.rot_comp_inv_rot_inv CategoryTheory.Pretriangulated.rotCompInvRotInv

/-- The natural transformations between the identity functor on triangles in `C` and the composition
of a rotation with an inverse rotation are natural isomorphisms (they are isomorphisms in the
category of functors).
-/
@[simps]
def rotCompInvRot : ùü≠ (Triangle C) ‚âÖ rotate C ‚ãô invRotate C
    where
  Hom := rotCompInvRotHom
  inv := rotCompInvRotInv
#align category_theory.pretriangulated.rot_comp_inv_rot CategoryTheory.Pretriangulated.rotCompInvRot

/-- There is a natural map from the `rotate` of the `inv_rotate` of a triangle to itself. -/
@[simps]
def fromRotateInvRotate (T : Triangle C) : (rotate C).obj ((invRotate C).obj T) ‚ü∂ T
    where
  hom‚ÇÅ := ùüô T.obj‚ÇÅ
  hom‚ÇÇ := ùüô T.obj‚ÇÇ
  hom‚ÇÉ := (shiftEquiv C 1).counit.app T.obj‚ÇÉ
  comm‚ÇÇ' := by
    dsimp
    rw [unit_of_tensor_iso_unit_inv_app]
    simp only [discrete.functor_map_id, nat_trans.id_app, id_comp, add_neg_equiv_counit_iso_hom,
      eq_to_hom_refl, nat_trans.comp_app, assoc, Œº_inv_hom_app_assoc, Œµ_hom_inv_app]
    exact category.comp_id _
  comm‚ÇÉ' := by
    dsimp
    simp only [discrete.functor_map_id, nat_trans.id_app, id_comp, functor.map_neg,
      functor.map_comp, obj_Œº_app, obj_Œµ_inv_app, comp_id, assoc, Œº_naturality_assoc, neg_neg,
      CategoryTheory.Functor.map_id, add_neg_equiv_counit_iso_hom, eq_to_hom_refl,
      nat_trans.comp_app]
    erw [Œº_inv_hom_app, category.comp_id, obj_zero_map_Œº_app]
    rw [discrete.functor_map_id, nat_trans.id_app, comp_id]
#align category_theory.pretriangulated.from_rotate_inv_rotate CategoryTheory.Pretriangulated.fromRotateInvRotate

/-- There is a natural transformation between the composition of an inverse rotation with a rotation
on triangles in `C`, and the identity functor.
-/
@[simps]
def invRotCompRotHom : invRotate C ‚ãô rotate C ‚ü∂ ùü≠ (Triangle C) where app := fromRotateInvRotate
#align category_theory.pretriangulated.inv_rot_comp_rot_hom CategoryTheory.Pretriangulated.invRotCompRotHom

/-- There is a natural map from a triangle to the `rotate` of its `inv_rotate`. -/
@[simps]
def toRotateInvRotate (T : Triangle C) : T ‚ü∂ (rotate C).obj ((invRotate C).obj T)
    where
  hom‚ÇÅ := ùüô T.obj‚ÇÅ
  hom‚ÇÇ := ùüô T.obj‚ÇÇ
  hom‚ÇÉ := (shiftEquiv C 1).counitInv.app T.obj‚ÇÉ
  comm‚ÇÉ' := by
    dsimp
    rw [CategoryTheory.Functor.map_id]
    simp only [comp_id, add_neg_equiv_counit_iso_inv, eq_to_hom_refl, id_comp, nat_trans.comp_app,
      discrete.functor_map_id, nat_trans.id_app, functor.map_neg, functor.map_comp, obj_Œº_app,
      obj_Œµ_inv_app, assoc, Œº_naturality_assoc, neg_neg, Œº_inv_hom_app_assoc]
    erw [Œº_inv_hom_app, category.comp_id, obj_zero_map_Œº_app]
    simp only [discrete.functor_map_id, nat_trans.id_app, comp_id, Œµ_hom_inv_app_assoc]
#align category_theory.pretriangulated.to_rotate_inv_rotate CategoryTheory.Pretriangulated.toRotateInvRotate

/-- There is a natural transformation between the identity functor on triangles in `C`,
and the composition of an inverse rotation with a rotation.
-/
@[simps]
def invRotCompRotInv : ùü≠ (Triangle C) ‚ü∂ invRotate C ‚ãô rotate C
    where
  app := toRotateInvRotate
  naturality' := by
    introv ; ext
    ¬∑ dsimp
      rw [comp_id, id_comp]
    ¬∑ dsimp
      rw [comp_id, id_comp]
    ¬∑ dsimp
      rw [add_neg_equiv_counit_iso_inv, eq_to_hom_map, eq_to_hom_refl, id_comp]
      simp only [nat_trans.comp_app, assoc]
      erw [Œº_inv_naturality, Œµ_naturality_assoc]
#align category_theory.pretriangulated.inv_rot_comp_rot_inv CategoryTheory.Pretriangulated.invRotCompRotInv

/-- The natural transformations between the composition of a rotation with an inverse rotation
on triangles in `C`, and the identity functor on triangles are natural isomorphisms
(they are isomorphisms in the category of functors).
-/
@[simps]
def invRotCompRot : invRotate C ‚ãô rotate C ‚âÖ ùü≠ (Triangle C)
    where
  Hom := invRotCompRotHom
  inv := invRotCompRotInv
#align category_theory.pretriangulated.inv_rot_comp_rot CategoryTheory.Pretriangulated.invRotCompRot

variable (C)

/-- Rotating triangles gives an auto-equivalence on the category of triangles in `C`.
-/
@[simps]
def triangleRotation : Equivalence (Triangle C) (Triangle C)
    where
  Functor := rotate C
  inverse := invRotate C
  unitIso := rotCompInvRot
  counitIso := invRotCompRot
  functor_unitIso_comp' := by
    introv ; ext
    ¬∑ dsimp
      rw [comp_id]
    ¬∑ dsimp
      rw [comp_id]
    ¬∑ dsimp
      rw [unit_of_tensor_iso_unit_inv_app]
      simp only [discrete.functor_map_id, nat_trans.id_app, id_comp, functor.map_comp, obj_Œµ_app,
        obj_Œº_inv_app, assoc, add_neg_equiv_counit_iso_hom, eq_to_hom_refl, nat_trans.comp_app,
        Œµ_inv_app_obj, comp_id, Œº_inv_hom_app_assoc]
      erw [Œº_inv_hom_app_assoc, Œº_inv_hom_app]
      rfl
#align category_theory.pretriangulated.triangle_rotation CategoryTheory.Pretriangulated.triangleRotation

variable {C}

instance : IsEquivalence (rotate C) := by
  change is_equivalence (triangle_rotation C).Functor
  infer_instance

instance : IsEquivalence (invRotate C) := by
  change is_equivalence (triangle_rotation C).inverse
  infer_instance

end CategoryTheory.Pretriangulated
