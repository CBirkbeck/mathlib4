import Mathlib.CategoryTheory.Triangulated.Triangulated
import Mathlib.CategoryTheory.Shift.CommShift
import Mathlib.CategoryTheory.Triangulated.Basic

universe u v

namespace CategoryTheory

open Limits Category Functor Pretriangulated

namespace Triangulated

variable {C : Type u} [Category.{v,u} C] [Preadditive C] [HasZeroObject C] [HasShift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C] [IsTriangulated C]

abbrev IsTriangleMorphism (T T' : Triangle C) (u : T.obj‚ÇÅ ‚ü∂ T'.obj‚ÇÅ) (v : T.obj‚ÇÇ ‚ü∂ T'.obj‚ÇÇ)
    (w : T.obj‚ÇÉ ‚ü∂ T'.obj‚ÇÉ) :=
  (T.mor‚ÇÅ ‚â´ v = u ‚â´ T'.mor‚ÇÅ) ‚àß (T.mor‚ÇÇ ‚â´ w = v ‚â´ T'.mor‚ÇÇ) ‚àß
  (T.mor‚ÇÉ ‚â´ (shiftFunctor C 1).map u = w ‚â´ T'.mor‚ÇÉ)

lemma NineGrid' {T_X T_Y : Triangle C} (dT_X : T_X ‚àà distinguishedTriangles)
    (dT_Y : T_Y ‚àà distinguishedTriangles) (u‚ÇÅ : T_X.obj‚ÇÅ ‚ü∂ T_Y.obj‚ÇÅ) (u‚ÇÇ : T_X.obj‚ÇÇ ‚ü∂ T_Y.obj‚ÇÇ)
    (comm : T_X.mor‚ÇÅ ‚â´ u‚ÇÇ = u‚ÇÅ ‚â´ T_Y.mor‚ÇÅ) {Z‚ÇÇ : C} (v‚ÇÇ : T_Y.obj‚ÇÇ ‚ü∂ Z‚ÇÇ) (w‚ÇÇ : Z‚ÇÇ ‚ü∂ T_X.obj‚ÇÇ‚ü¶1‚üß)
    (dT‚ÇÇ : Triangle.mk u‚ÇÇ v‚ÇÇ w‚ÇÇ ‚àà distinguishedTriangles) :
    ‚àÉ (Z‚ÇÅ Z‚ÇÉ : C) (f : Z‚ÇÅ ‚ü∂ Z‚ÇÇ) (g : Z‚ÇÇ ‚ü∂ Z‚ÇÉ) (h : Z‚ÇÉ ‚ü∂ Z‚ÇÅ‚ü¶1‚üß) (v‚ÇÅ : T_Y.obj‚ÇÅ ‚ü∂ Z‚ÇÅ)
    (w‚ÇÅ : Z‚ÇÅ ‚ü∂ T_X.obj‚ÇÅ‚ü¶1‚üß) (u‚ÇÉ : T_X.obj‚ÇÉ ‚ü∂ T_Y.obj‚ÇÉ) (v‚ÇÉ : T_Y.obj‚ÇÉ ‚ü∂ Z‚ÇÉ)
    (w‚ÇÉ : Z‚ÇÉ ‚ü∂ T_X.obj‚ÇÉ‚ü¶1‚üß),
    Triangle.mk f g h ‚àà distinguishedTriangles ‚àß
    Triangle.mk u‚ÇÅ v‚ÇÅ w‚ÇÅ ‚àà distinguishedTriangles ‚àß
    Triangle.mk u‚ÇÉ v‚ÇÉ w‚ÇÉ ‚àà distinguishedTriangles ‚àß
    IsTriangleMorphism T_X T_Y u‚ÇÅ u‚ÇÇ u‚ÇÉ ‚àß
    IsTriangleMorphism T_Y (Triangle.mk f g h) v‚ÇÅ v‚ÇÇ v‚ÇÉ ‚àß
    w‚ÇÅ ‚â´ T_X.mor‚ÇÅ‚ü¶1‚üß' = f ‚â´ w‚ÇÇ ‚àß w‚ÇÇ ‚â´ T_X.mor‚ÇÇ‚ü¶1‚üß' = g ‚â´ w‚ÇÉ ‚àß
    w‚ÇÉ ‚â´ T_X.mor‚ÇÉ‚ü¶1‚üß' = - h ‚â´ w‚ÇÅ‚ü¶1‚üß' := by
  obtain ‚ü®Z‚ÇÅ, v‚ÇÅ, w‚ÇÅ, dT‚ÇÅ‚ü© := distinguished_cocone_triangle u‚ÇÅ
  obtain ‚ü®A, a, b, dTdiag‚ü© := distinguished_cocone_triangle (T_X.mor‚ÇÅ ‚â´ u‚ÇÇ)
  set oct‚ÇÅ := someOctahedron (u‚ÇÅ‚ÇÇ := T_X.mor‚ÇÅ) (u‚ÇÇ‚ÇÉ := u‚ÇÇ) (u‚ÇÅ‚ÇÉ := T_X.mor‚ÇÅ ‚â´ u‚ÇÇ) rfl dT_X
    dT‚ÇÇ dTdiag
  set oct‚ÇÇ := someOctahedron (u‚ÇÅ‚ÇÇ := u‚ÇÅ) (u‚ÇÇ‚ÇÉ := T_Y.mor‚ÇÅ) (u‚ÇÅ‚ÇÉ := T_X.mor‚ÇÅ ‚â´ u‚ÇÇ)
    comm.symm dT‚ÇÅ dT_Y dTdiag
  obtain ‚ü®Z‚ÇÉ, g, h, dT_Z‚ü© := distinguished_cocone_triangle (oct‚ÇÇ.m‚ÇÅ ‚â´ oct‚ÇÅ.m‚ÇÉ)
  set oct‚ÇÉ := someOctahedron (u‚ÇÅ‚ÇÇ := oct‚ÇÇ.m‚ÇÅ) (u‚ÇÇ‚ÇÉ := oct‚ÇÅ.m‚ÇÉ) (u‚ÇÅ‚ÇÉ := oct‚ÇÇ.m‚ÇÅ ‚â´ oct‚ÇÅ.m‚ÇÉ) rfl
    oct‚ÇÇ.mem ((rotate_distinguished_triangle _).mp oct‚ÇÅ.mem) dT_Z
  existsi Z‚ÇÅ, Z‚ÇÉ, (oct‚ÇÇ.m‚ÇÅ ‚â´ oct‚ÇÅ.m‚ÇÉ), g, h, v‚ÇÅ, w‚ÇÅ, oct‚ÇÅ.m‚ÇÅ ‚â´ oct‚ÇÇ.m‚ÇÉ, oct‚ÇÉ.m‚ÇÅ, oct‚ÇÉ.m‚ÇÉ
  constructor
  . exact dT_Z
  ¬∑ constructor
    ¬∑ exact dT‚ÇÅ
    ¬∑ constructor
      ¬∑ have := inv_rot_of_distTriang _ oct‚ÇÉ.mem
        refine isomorphic_distinguished _ this _ (Triangle.isoMk _ _ ?_ ?_ ?_ ?_ ?_ ?_)
        ¬∑ have := (shiftFunctorCompIsoId C 1 (-1)
              (by simp only [Int.reduceNeg, add_right_neg])).app T_X.obj‚ÇÉ
          simp only [Int.reduceNeg, Functor.comp_obj, Functor.id_obj] at this
          exact this.symm
        ¬∑ exact Iso.refl _
        ¬∑ exact Iso.refl _
        ¬∑ simp only [Triangle.mk_obj‚ÇÅ, Triangle.mk_mor‚ÇÉ, Triangle.mk_obj‚ÇÇ, Triangle.mk_mor‚ÇÅ,
          Triangle.invRotate_obj‚ÇÇ, Iso.refl_hom, comp_id, Triangle.invRotate_obj‚ÇÅ, Int.reduceNeg,
          Triangle.mk_obj‚ÇÉ, Iso.symm_hom, Iso.app_inv, Triangle.invRotate_mor‚ÇÅ,
          Preadditive.neg_comp, Functor.map_neg, Functor.map_comp, assoc, neg_neg]
          rw [‚Üê cancel_epi ((shiftFunctorCompIsoId C 1 (-1) (by simp only [Int.reduceNeg,
            add_right_neg])).hom.app T_X.obj‚ÇÉ)]
          rw [‚Üê cancel_mono ((shiftFunctorCompIsoId C 1 (-1) (by simp only [Int.reduceNeg,
            add_right_neg])).inv.app T_Y.obj‚ÇÉ)]
          rw [assoc]; conv_lhs => erw [‚Üê shift_shift_neg']
          simp only [Int.reduceNeg, Functor.comp_obj, Functor.id_obj, Iso.hom_inv_id_app_assoc,
            assoc, Iso.hom_inv_id_app, comp_id]
          simp only [Int.reduceNeg, Functor.map_comp]
        ¬∑ simp only [Triangle.mk_obj‚ÇÇ, Triangle.invRotate_obj‚ÇÉ, Triangle.mk_obj‚ÇÉ,
          Triangle.mk_mor‚ÇÇ, Iso.refl_hom, comp_id, Triangle.invRotate_obj‚ÇÇ, Triangle.mk_obj‚ÇÅ,
          Triangle.invRotate_mor‚ÇÇ, Triangle.mk_mor‚ÇÅ, id_comp]
        ¬∑ simp only [Triangle.mk_obj‚ÇÉ, Triangle.invRotate_obj‚ÇÅ, Int.reduceNeg, Triangle.mk_obj‚ÇÅ,
           Triangle.mk_mor‚ÇÉ, id_eq, Iso.symm_hom, Iso.app_inv, Triangle.invRotate_obj‚ÇÉ,
           Triangle.mk_obj‚ÇÇ, Iso.refl_hom, Triangle.invRotate_mor‚ÇÉ, Triangle.mk_mor‚ÇÇ, id_comp]
          rw [shift_shiftFunctorCompIsoId_inv_app]
      ¬∑ constructor
        ¬∑ constructor
          ¬∑ exact comm
          ¬∑ constructor
            ¬∑ rw [‚Üê assoc, oct‚ÇÅ.comm‚ÇÅ, assoc, oct‚ÇÇ.comm‚ÇÉ]
            ¬∑ conv_rhs => rw [assoc, ‚Üê oct‚ÇÇ.comm‚ÇÑ, ‚Üê assoc, oct‚ÇÅ.comm‚ÇÇ]
        ¬∑ constructor
          ¬∑ constructor
            ¬∑ simp only [Triangle.mk_obj‚ÇÇ, Triangle.mk_obj‚ÇÅ, Triangle.mk_mor‚ÇÅ]
              conv_rhs => rw [‚Üê assoc, oct‚ÇÇ.comm‚ÇÅ, assoc, oct‚ÇÅ.comm‚ÇÉ]
            ¬∑ constructor
              ¬∑ simp only [Triangle.mk_obj‚ÇÉ, Triangle.mk_obj‚ÇÅ, Triangle.mk_mor‚ÇÉ, Triangle.mk_obj‚ÇÇ,
                Triangle.mk_mor‚ÇÅ, Triangle.mk_mor‚ÇÇ]
                conv_lhs => congr; rw [‚Üê oct‚ÇÇ.comm‚ÇÉ]
                rw [assoc, oct‚ÇÉ.comm‚ÇÅ, ‚Üê assoc, oct‚ÇÅ.comm‚ÇÉ]
              ¬∑ exact oct‚ÇÉ.comm‚ÇÇ.symm
          ¬∑ constructor
            ¬∑ simp only [Triangle.mk_obj‚ÇÅ, Triangle.shiftFunctor_obj, Int.negOnePow_one,
              Functor.comp_obj, Triangle.mk_obj‚ÇÇ, Triangle.mk_mor‚ÇÅ, assoc, Units.neg_smul, one_smul,
              Preadditive.comp_neg]
              rw [‚Üê oct‚ÇÅ.comm‚ÇÑ, ‚Üê assoc, oct‚ÇÇ.comm‚ÇÇ]
            ¬∑ constructor
              ¬∑ rw [oct‚ÇÉ.comm‚ÇÉ]; simp only [Triangle.mk_mor‚ÇÉ]
              ¬∑ conv_rhs => congr; rw [‚Üê oct‚ÇÇ.comm‚ÇÇ]
                simp only [Triangle.mk_obj‚ÇÅ, Triangle.mk_mor‚ÇÉ, Triangle.mk_obj‚ÇÇ, Triangle.mk_mor‚ÇÅ,
                  Functor.map_comp]
                conv_lhs => congr; rfl; rw [‚Üê oct‚ÇÅ.comm‚ÇÇ]
                have := oct‚ÇÉ.comm‚ÇÑ
                simp only [Triangle.mk_obj‚ÇÅ, Triangle.mk_mor‚ÇÉ, Triangle.mk_obj‚ÇÇ, Triangle.mk_mor‚ÇÅ,
                  Preadditive.comp_neg] at this
                rw [‚Üê assoc, this]
                simp only [Functor.map_comp, Preadditive.neg_comp, assoc, neg_neg]

/-- Proposition 1.1.11 of of [BBD].
-/
lemma NineGrid {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : C} (u‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (u‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (f_X : X‚ÇÅ ‚ü∂ X‚ÇÇ) (f_Y : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
    (comm : f_X ‚â´ u‚ÇÇ = u‚ÇÅ ‚â´ f_Y) :
    ‚àÉ (X‚ÇÉ Y‚ÇÉ Z‚ÇÅ Z‚ÇÇ Z‚ÇÉ : C) (g_X : X‚ÇÇ ‚ü∂ X‚ÇÉ) (h_X : X‚ÇÉ ‚ü∂ X‚ÇÅ‚ü¶1‚üß) (g_Y : Y‚ÇÇ ‚ü∂ Y‚ÇÉ)
    (h_Y : Y‚ÇÉ ‚ü∂ Y‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß) (f : Z‚ÇÅ ‚ü∂ Z‚ÇÇ) (g : Z‚ÇÇ ‚ü∂ Z‚ÇÉ) (h : Z‚ÇÉ ‚ü∂ Z‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß) (u‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ)
    (v‚ÇÅ : Y‚ÇÅ ‚ü∂ Z‚ÇÅ) (v‚ÇÇ : Y‚ÇÇ ‚ü∂ Z‚ÇÇ) (v‚ÇÉ : Y‚ÇÉ ‚ü∂ Z‚ÇÉ) (w‚ÇÅ : Z‚ÇÅ ‚ü∂ X‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß) (w‚ÇÇ : Z‚ÇÇ ‚ü∂ X‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß)
    (w‚ÇÉ : Z‚ÇÉ ‚ü∂ X‚ÇÉ‚ü¶(1 : ‚Ñ§)‚üß),
    Triangle.mk f_X g_X h_X ‚àà distinguishedTriangles ‚àß
    Triangle.mk f_Y g_Y h_Y ‚àà distinguishedTriangles ‚àß
    Triangle.mk f g h ‚àà distinguishedTriangles ‚àß
    Triangle.mk u‚ÇÅ v‚ÇÅ w‚ÇÅ ‚àà distinguishedTriangles ‚àß
    Triangle.mk u‚ÇÇ v‚ÇÇ w‚ÇÇ ‚àà distinguishedTriangles ‚àß
    Triangle.mk u‚ÇÉ v‚ÇÉ w‚ÇÉ ‚àà distinguishedTriangles ‚àß
    IsTriangleMorphism (Triangle.mk f_X g_X h_X) (Triangle.mk f_Y g_Y h_Y) u‚ÇÅ u‚ÇÇ u‚ÇÉ ‚àß
    IsTriangleMorphism (Triangle.mk f_Y g_Y h_Y) (Triangle.mk f g h) v‚ÇÅ v‚ÇÇ v‚ÇÉ ‚àß
    w‚ÇÅ ‚â´ f_X‚ü¶1‚üß' = f ‚â´ w‚ÇÇ ‚àß w‚ÇÇ ‚â´ g_X‚ü¶1‚üß' = g ‚â´ w‚ÇÉ ‚àß w‚ÇÉ ‚â´ h_X‚ü¶1‚üß' = - h ‚â´ w‚ÇÅ‚ü¶1‚üß' := by
  obtain ‚ü®X‚ÇÉ, g_X, h_X, dT_X‚ü© := Pretriangulated.distinguished_cocone_triangle f_X
  obtain ‚ü®Y‚ÇÉ, g_Y, h_Y, dT_Y‚ü© := Pretriangulated.distinguished_cocone_triangle f_Y
  obtain ‚ü®Z‚ÇÇ, v‚ÇÇ, w‚ÇÇ, dT‚ÇÇ‚ü© := Pretriangulated.distinguished_cocone_triangle u‚ÇÇ
  obtain ‚ü®Z‚ÇÅ, Z‚ÇÉ, f, g, h, v‚ÇÅ, w‚ÇÅ, u‚ÇÉ, v‚ÇÉ, w‚ÇÉ, dT_Z, dT‚ÇÅ, dT‚ÇÉ, comm_XY, comm_YZ, comm‚ÇÅ, comm‚ÇÇ,
    comm‚ÇÉ‚ü© := NineGrid' dT_X dT_Y u‚ÇÅ u‚ÇÇ comm v‚ÇÇ w‚ÇÇ dT‚ÇÇ
  existsi X‚ÇÉ, Y‚ÇÉ, Z‚ÇÅ, Z‚ÇÇ, Z‚ÇÉ, g_X, h_X, g_Y, h_Y, f, g, h, u‚ÇÉ, v‚ÇÅ, v‚ÇÇ, v‚ÇÉ, w‚ÇÅ, w‚ÇÇ, w‚ÇÉ
  exact ‚ü®dT_X, dT_Y, dT_Z, dT‚ÇÅ, dT‚ÇÇ, dT‚ÇÉ, comm_XY, comm_YZ, comm‚ÇÅ, comm‚ÇÇ, comm‚ÇÉ‚ü©

end Triangulated

namespace Pretriangulated

variable {C : Type u} [Category.{v,u} C] [Preadditive C] [HasZeroObject C] [HasShift C ‚Ñ§]
  [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive] [Pretriangulated C]

noncomputable instance : (Triangle.œÄ‚ÇÅ (C := C)).CommShift ‚Ñ§ where
  iso n := by
    refine NatIso.ofComponents (fun X ‚Ü¶ Iso.refl _) ?_
    intro _ _ _
    simp only [Triangle.shiftFunctor_eq, comp_obj, Triangle.shiftFunctor_obj, Triangle.œÄ‚ÇÅ_obj,
      Triangle.mk_obj‚ÇÅ, Functor.comp_map, Triangle.œÄ‚ÇÅ_map, Triangle.shiftFunctor_map_hom‚ÇÅ,
      Iso.refl_hom, comp_id, id_comp]
  zero := by aesop_cat
  add n m := by
    apply Iso.ext; apply NatTrans.ext; ext T
    simp only [Triangle.shiftFunctor_eq, comp_obj, Triangle.shiftFunctor_obj, Triangle.œÄ‚ÇÅ_obj,
      Triangle.mk_obj‚ÇÅ, NatIso.ofComponents_hom_app, Iso.refl_hom, CommShift.isoAdd_hom_app,
      Triangle.mk_obj‚ÇÇ, Triangle.mk_obj‚ÇÉ, Triangle.mk_mor‚ÇÅ, Triangle.mk_mor‚ÇÇ, Triangle.mk_mor‚ÇÉ,
      Triangle.shiftFunctorAdd_eq, Triangle.œÄ‚ÇÅ_map, Triangle.shiftFunctorAdd'_hom_app_hom‚ÇÅ, map_id,
      id_comp]
    rw [shiftFunctorAdd'_eq_shiftFunctorAdd, Iso.hom_inv_id_app]

lemma Triangle_œÄ‚ÇÅ_commShiftIso (a : ‚Ñ§) (T : Triangle C) :
    ((Triangle.œÄ‚ÇÅ (C := C)).commShiftIso a).app T = Iso.refl _ := rfl

lemma Triangle_œÄ‚ÇÅ_commShiftIso_hom (a : ‚Ñ§) (T : Triangle C) :
    ((Triangle.œÄ‚ÇÅ (C := C)).commShiftIso a).hom.app T = ùüô _ := rfl

noncomputable instance : (Triangle.œÄ‚ÇÇ (C := C)).CommShift ‚Ñ§ where
  iso n := by
    refine NatIso.ofComponents (fun X ‚Ü¶ Iso.refl _) ?_
    intro _ _ _
    simp only [Triangle.shiftFunctor_eq, comp_obj, Triangle.shiftFunctor_obj, Triangle.œÄ‚ÇÇ_obj,
      Triangle.mk_obj‚ÇÇ, Functor.comp_map, Triangle.œÄ‚ÇÇ_map, Triangle.shiftFunctor_map_hom‚ÇÇ,
      Iso.refl_hom, comp_id, id_comp]
  zero := by aesop_cat
  add n m := by
    apply Iso.ext; apply NatTrans.ext; ext T
    simp only [Triangle.shiftFunctor_eq, comp_obj, Triangle.shiftFunctor_obj, Triangle.œÄ‚ÇÇ_obj,
      Triangle.mk_obj‚ÇÇ, NatIso.ofComponents_hom_app, Iso.refl_hom, CommShift.isoAdd_hom_app,
      Triangle.mk_obj‚ÇÅ, Triangle.mk_obj‚ÇÉ, Triangle.mk_mor‚ÇÅ, Triangle.mk_mor‚ÇÇ, Triangle.mk_mor‚ÇÉ,
      Triangle.shiftFunctorAdd_eq, Triangle.œÄ‚ÇÇ_map, Triangle.shiftFunctorAdd'_hom_app_hom‚ÇÇ, map_id,
      id_comp]
    rw [shiftFunctorAdd'_eq_shiftFunctorAdd, Iso.hom_inv_id_app]

lemma Triangle_œÄ‚ÇÇ_commShiftIso (a : ‚Ñ§) (T : Triangle C) :
    ((Triangle.œÄ‚ÇÇ (C := C)).commShiftIso a).app T = Iso.refl _ := rfl

lemma Triangle_œÄ‚ÇÇ_commShiftIso_hom (a : ‚Ñ§) (T : Triangle C) :
    ((Triangle.œÄ‚ÇÇ (C := C)).commShiftIso a).hom.app T = ùüô _ := rfl

noncomputable instance : (Triangle.œÄ‚ÇÉ (C := C)).CommShift ‚Ñ§ where
  iso n := by
    refine NatIso.ofComponents (fun X ‚Ü¶ Iso.refl _) ?_
    intro _ _ _
    simp only [Triangle.shiftFunctor_eq, comp_obj, Triangle.shiftFunctor_obj, Triangle.œÄ‚ÇÉ_obj,
      Triangle.mk_obj‚ÇÉ, Functor.comp_map, Triangle.œÄ‚ÇÉ_map, Triangle.shiftFunctor_map_hom‚ÇÉ,
      Iso.refl_hom, comp_id, id_comp]
  zero := by aesop_cat
  add n m := by
    apply Iso.ext; apply NatTrans.ext; ext T
    simp only [Triangle.shiftFunctor_eq, comp_obj, Triangle.shiftFunctor_obj, Triangle.œÄ‚ÇÉ_obj,
      Triangle.mk_obj‚ÇÉ, NatIso.ofComponents_hom_app, Iso.refl_hom, CommShift.isoAdd_hom_app,
      Triangle.mk_obj‚ÇÅ, Triangle.mk_obj‚ÇÇ, Triangle.mk_mor‚ÇÅ, Triangle.mk_mor‚ÇÇ, Triangle.mk_mor‚ÇÉ,
      Triangle.shiftFunctorAdd_eq, Triangle.œÄ‚ÇÉ_map, Triangle.shiftFunctorAdd'_hom_app_hom‚ÇÉ, map_id,
      id_comp]
    rw [shiftFunctorAdd'_eq_shiftFunctorAdd, Iso.hom_inv_id_app]

lemma Triangle_œÄ‚ÇÉ_commShiftIso (a : ‚Ñ§) (T : Triangle C) :
    ((Triangle.œÄ‚ÇÉ (C := C)).commShiftIso a).app T = Iso.refl _ := rfl

lemma Triangle_œÄ‚ÇÉ_commShiftIso_hom (a : ‚Ñ§) (T : Triangle C) :
    ((Triangle.œÄ‚ÇÉ (C := C)).commShiftIso a).hom.app T = ùüô _ := rfl

end Pretriangulated

namespace Pretriangulated.TriangleMorphism

variable {C : Type u} [CategoryTheory.Category.{v, u} C] [CategoryTheory.HasShift C ‚Ñ§]
  [Preadditive C] [‚àÄ (n : ‚Ñ§), (shiftFunctor C n).Additive]

@[simp]
theorem smul_iso_hom {T‚ÇÅ T‚ÇÇ : CategoryTheory.Pretriangulated.Triangle C} (f : T‚ÇÅ ‚âÖ T‚ÇÇ) (n : ‚Ñ§À£) :
    (n ‚Ä¢ f).hom = n.1 ‚Ä¢ f.hom := sorry

@[simp]
theorem smul_hom‚ÇÅ {T‚ÇÅ T‚ÇÇ : CategoryTheory.Pretriangulated.Triangle C} (f : T‚ÇÅ ‚ü∂ T‚ÇÇ) (n : ‚Ñ§) :
    (n ‚Ä¢ f).hom‚ÇÅ = n ‚Ä¢ f.hom‚ÇÅ := sorry

@[simp]
theorem smul_hom‚ÇÇ {T‚ÇÅ T‚ÇÇ : CategoryTheory.Pretriangulated.Triangle C} (f : T‚ÇÅ ‚ü∂ T‚ÇÇ) (n : ‚Ñ§) :
    (n ‚Ä¢ f).hom‚ÇÇ = n ‚Ä¢ f.hom‚ÇÇ := sorry

@[simp]
theorem smul_hom‚ÇÉ {T‚ÇÅ T‚ÇÇ : CategoryTheory.Pretriangulated.Triangle C} (f : T‚ÇÅ ‚ü∂ T‚ÇÇ) (n : ‚Ñ§) :
    (n ‚Ä¢ f).hom‚ÇÉ = n ‚Ä¢ f.hom‚ÇÉ := sorry

end Pretriangulated.TriangleMorphism

end CategoryTheory
