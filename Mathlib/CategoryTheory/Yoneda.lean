/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import Mathlib.CategoryTheory.Functor.Hom
import Mathlib.CategoryTheory.Products.Basic
import Mathlib.Data.ULift
import Mathlib.Logic.Function.ULift

/-!
# The Yoneda embedding

The Yoneda embedding as a functor `yoneda : C ‚•§ (C·µí·µñ ‚•§ Type v‚ÇÅ)`,
along with an instance that it is `FullyFaithful`.

Also the Yoneda lemma, `yonedaLemma : (yoneda_pairing C) ‚âÖ (yoneda_evaluation C)`.

## References
* [Stacks: Opposite Categories and the Yoneda Lemma](https://stacks.math.columbia.edu/tag/001L)
-/

namespace CategoryTheory

open Opposite

universe v‚ÇÅ u‚ÇÅ u‚ÇÇ

-- morphism levels before object levels. See note [CategoryTheory universes].
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]

/-- The Yoneda embedding, as a functor from `C` into presheaves on `C`.

See <https://stacks.math.columbia.edu/tag/001O>.
-/
@[simps]
def yoneda : C ‚•§ C·µí·µñ ‚•§ Type v‚ÇÅ where
  obj X :=
    { obj := fun Y => unop Y ‚ü∂ X
      map := fun f g => f.unop ‚â´ g }
  map f :=
    { app := fun Y g => g ‚â´ f }

/-- The co-Yoneda embedding, as a functor from `C·µí·µñ` into co-presheaves on `C`.
-/
@[simps]
def coyoneda : C·µí·µñ ‚•§ C ‚•§ Type v‚ÇÅ where
  obj X :=
    { obj := fun Y => unop X ‚ü∂ Y
      map := fun f g => g ‚â´ f }
  map f :=
    { app := fun Y g => f.unop ‚â´ g }

namespace Yoneda

theorem obj_map_id {X Y : C} (f : op X ‚ü∂ op Y) :
    (yoneda.obj X).map f (ùüô X) = (yoneda.map f.unop).app (op Y) (ùüô Y) := by
  dsimp
  simp

@[simp]
theorem naturality {X Y : C} (Œ± : yoneda.obj X ‚ü∂ yoneda.obj Y) {Z Z' : C} (f : Z ‚ü∂ Z')
    (h : Z' ‚ü∂ X) : f ‚â´ Œ±.app (op Z') h = Œ±.app (op Z) (f ‚â´ h) :=
  (FunctorToTypes.naturality _ _ Œ± f.op h).symm

/-- The Yoneda embedding is fully faithful. -/
def fullyFaithful : (yoneda (C := C)).FullyFaithful where
  preimage f := f.app _ (ùüô _)

lemma fullyFaithful_preimage {X Y : C} (f : yoneda.obj X ‚ü∂ yoneda.obj Y) :
    fullyFaithful.preimage f = f.app (op X) (ùüô X) := rfl

/-- The Yoneda embedding is full.

See <https://stacks.math.columbia.edu/tag/001P>.
-/
instance yoneda_full : (yoneda : C ‚•§ C·µí·µñ ‚•§ Type v‚ÇÅ).Full :=
  fullyFaithful.full

/-- The Yoneda embedding is faithful.

See <https://stacks.math.columbia.edu/tag/001P>.
-/
instance yoneda_faithful : (yoneda : C ‚•§ C·µí·µñ ‚•§ Type v‚ÇÅ).Faithful :=
  fullyFaithful.faithful

/-- Extensionality via Yoneda. The typical usage would be
```
-- Goal is `X ‚âÖ Y`
apply yoneda.ext,
-- Goals are now functions `(Z ‚ü∂ X) ‚Üí (Z ‚ü∂ Y)`, `(Z ‚ü∂ Y) ‚Üí (Z ‚ü∂ X)`, and the fact that these
-- functions are inverses and natural in `Z`.
```
-/
def ext (X Y : C) (p : ‚àÄ {Z : C}, (Z ‚ü∂ X) ‚Üí (Z ‚ü∂ Y))
    (q : ‚àÄ {Z : C}, (Z ‚ü∂ Y) ‚Üí (Z ‚ü∂ X))
    (h‚ÇÅ : ‚àÄ {Z : C} (f : Z ‚ü∂ X), q (p f) = f) (h‚ÇÇ : ‚àÄ {Z : C} (f : Z ‚ü∂ Y), p (q f) = f)
    (n : ‚àÄ {Z Z' : C} (f : Z' ‚ü∂ Z) (g : Z ‚ü∂ X), p (f ‚â´ g) = f ‚â´ p g) : X ‚âÖ Y :=
  fullyFaithful.preimageIso
    (NatIso.ofComponents fun Z =>
      { hom := p
        inv := q })

/-- If `yoneda.map f` is an isomorphism, so was `f`.
-/
theorem isIso {X Y : C} (f : X ‚ü∂ Y) [IsIso (yoneda.map f)] : IsIso f :=
  isIso_of_fully_faithful yoneda f

end Yoneda

namespace Coyoneda

@[simp]
theorem naturality {X Y : C·µí·µñ} (Œ± : coyoneda.obj X ‚ü∂ coyoneda.obj Y) {Z Z' : C} (f : Z' ‚ü∂ Z)
    (h : unop X ‚ü∂ Z') : Œ±.app Z' h ‚â´ f = Œ±.app Z (h ‚â´ f) :=
  (FunctorToTypes.naturality _ _ Œ± f h).symm

/-- The co-Yoneda embedding is fully faithful. -/
def fullyFaithful : (coyoneda (C := C)).FullyFaithful where
  preimage f := (f.app _ (ùüô _)).op

lemma fullyFaithful_preimage {X Y : C·µí·µñ} (f : coyoneda.obj X ‚ü∂ coyoneda.obj Y) :
    fullyFaithful.preimage f = (f.app X.unop (ùüô X.unop)).op := rfl

/-- The morphism `X ‚ü∂ Y` corresponding to a natural transformation
`coyoneda.obj X ‚ü∂ coyoneda.obj Y`. -/
def preimage {X Y : C·µí·µñ} (f : coyoneda.obj X ‚ü∂ coyoneda.obj Y) : X ‚ü∂ Y :=
  (f.app _ (ùüô X.unop)).op

instance coyoneda_full : (coyoneda : C·µí·µñ ‚•§ C ‚•§ Type v‚ÇÅ).Full :=
  fullyFaithful.full

instance coyoneda_faithful : (coyoneda : C·µí·µñ ‚•§ C ‚•§ Type v‚ÇÅ).Faithful :=
  fullyFaithful.faithful

/-- If `coyoneda.map f` is an isomorphism, so was `f`.
-/
theorem isIso {X Y : C·µí·µñ} (f : X ‚ü∂ Y) [IsIso (coyoneda.map f)] : IsIso f :=
  isIso_of_fully_faithful coyoneda f

/-- The identity functor on `Type` is isomorphic to the coyoneda functor coming from `PUnit`. -/
def punitIso : coyoneda.obj (Opposite.op PUnit) ‚âÖ ùü≠ (Type v‚ÇÅ) :=
  NatIso.ofComponents fun X =>
    { hom := fun f => f ‚ü®‚ü©
      inv := fun x _ => x }

/-- Taking the `unop` of morphisms is a natural isomorphism. -/
@[simps!]
def objOpOp (X : C) : coyoneda.obj (op (op X)) ‚âÖ yoneda.obj X :=
  NatIso.ofComponents fun _ => (opEquiv _ _).toIso

end Coyoneda

namespace Functor

/-- A functor `F : C·µí·µñ ‚•§ Type v‚ÇÅ` is representable if there is object `X` so `F ‚âÖ yoneda.obj X`.

See <https://stacks.math.columbia.edu/tag/001Q>.
-/
class Representable (F : C·µí·µñ ‚•§ Type v‚ÇÅ) : Prop where
  /-- `Hom(-,X) ‚âÖ F` via `f` -/
  has_representation : ‚àÉ (X : _), Nonempty (yoneda.obj X ‚âÖ F)

instance {X : C} : Representable (yoneda.obj X) where has_representation := ‚ü®X, ‚ü®Iso.refl _‚ü©‚ü©

/-- A functor `F : C ‚•§ Type v‚ÇÅ` is corepresentable if there is object `X` so `F ‚âÖ coyoneda.obj X`.

See <https://stacks.math.columbia.edu/tag/001Q>.
-/
class Corepresentable (F : C ‚•§ Type v‚ÇÅ) : Prop where
  /-- `Hom(X,-) ‚âÖ F` via `f` -/
  has_corepresentation : ‚àÉ (X : _), Nonempty (coyoneda.obj X ‚âÖ F)

instance {X : C·µí·µñ} : Corepresentable (coyoneda.obj X) where
  has_corepresentation := ‚ü®X, ‚ü®Iso.refl _‚ü©‚ü©

-- instance : corepresentable (ùü≠ (Type v‚ÇÅ)) :=
-- corepresentable_of_nat_iso (op punit) coyoneda.punit_iso
section Representable

variable (F : C·µí·µñ ‚•§ Type v‚ÇÅ)
variable [hF : F.Representable]

/-- The representing object for the representable functor `F`. -/
noncomputable def reprX : C := hF.has_representation.choose

/-- An isomorphism between a representable `F` and a functor of the
form `C(-, F.reprX)`.  Note the components `F.reprW.app X`
definitionally have type `(X.unop ‚ü∂ F.repr_X) ‚âÖ F.obj X`.
-/
noncomputable def reprW : yoneda.obj F.reprX ‚âÖ F :=
  Representable.has_representation.choose_spec.some

/-- The representing element for the representable functor `F`, sometimes called the universal
element of the functor.
-/
noncomputable def reprx : F.obj (op F.reprX) :=
  F.reprW.hom.app (op F.reprX) (ùüô F.reprX)

theorem reprW_app_hom (X : C·µí·µñ) (f : unop X ‚ü∂ F.reprX) :
    (F.reprW.app X).hom f = F.map f.op F.reprx := by
  simp only [yoneda_obj_obj, Iso.app_hom, op_unop, reprx, ‚Üê FunctorToTypes.naturality,
    yoneda_obj_map, unop_op, Quiver.Hom.unop_op, Category.comp_id]

end Representable

section Corepresentable

variable (F : C ‚•§ Type v‚ÇÅ)
variable [hF : F.Corepresentable]

/-- The representing object for the corepresentable functor `F`. -/
noncomputable def coreprX : C :=
  hF.has_corepresentation.choose.unop

/-- An isomorphism between a corepresnetable `F` and a functor of the form
`C(F.corepr X, -)`. Note the components `F.coreprW.app X`
definitionally have type `F.corepr_X ‚ü∂ X ‚âÖ F.obj X`.
-/
noncomputable def coreprW : coyoneda.obj (op F.coreprX) ‚âÖ F :=
  hF.has_corepresentation.choose_spec.some

/-- The representing element for the corepresentable functor `F`, sometimes called the universal
element of the functor.
-/
noncomputable def coreprx : F.obj F.coreprX :=
  F.coreprW.hom.app F.coreprX (ùüô F.coreprX)

theorem coreprW_app_hom (X : C) (f : F.coreprX ‚ü∂ X) :
    (F.coreprW.app X).hom f = F.map f F.coreprx := by
  simp only [coyoneda_obj_obj, unop_op, Iso.app_hom, coreprx, ‚Üê FunctorToTypes.naturality,
    coyoneda_obj_map, Category.id_comp]

end Corepresentable

end Functor

theorem representable_of_natIso (F : C·µí·µñ ‚•§ Type v‚ÇÅ) {G} (i : F ‚âÖ G) [F.Representable] :
    G.Representable :=
  { has_representation := ‚ü®F.reprX, ‚ü®F.reprW ‚â™‚â´ i‚ü©‚ü© }

theorem corepresentable_of_natIso (F : C ‚•§ Type v‚ÇÅ) {G} (i : F ‚âÖ G) [F.Corepresentable] :
    G.Corepresentable :=
  { has_corepresentation := ‚ü®op F.coreprX, ‚ü®F.coreprW ‚â™‚â´ i‚ü©‚ü© }

instance : Functor.Corepresentable (ùü≠ (Type v‚ÇÅ)) :=
  corepresentable_of_natIso (coyoneda.obj (op PUnit)) Coyoneda.punitIso

open Opposite

variable (C)

-- We need to help typeclass inference with some awkward universe levels here.
instance prodCategoryInstance1 : Category ((C·µí·µñ ‚•§ Type v‚ÇÅ) √ó C·µí·µñ) :=
  CategoryTheory.prod.{max u‚ÇÅ v‚ÇÅ, v‚ÇÅ} (C·µí·µñ ‚•§ Type v‚ÇÅ) C·µí·µñ

instance prodCategoryInstance2 : Category (C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) :=
  CategoryTheory.prod.{v‚ÇÅ, max u‚ÇÅ v‚ÇÅ} C·µí·µñ (C·µí·µñ ‚•§ Type v‚ÇÅ)

open Yoneda

section YonedaLemma

variable {C}

/-- We have a type-level equivalence between natural transformations from the yoneda embedding
and elements of `F.obj X`, without any universe switching.
-/
def yonedaEquiv {X : C} {F : C·µí·µñ ‚•§ Type v‚ÇÅ} : (yoneda.obj X ‚ü∂ F) ‚âÉ F.obj (op X) where
  toFun Œ∑ := Œ∑.app (op X) (ùüô X)
  invFun Œæ := { app := fun Y f ‚Ü¶ F.map f.op Œæ }
  left_inv := by
    intro Œ∑
    ext Y f
    dsimp
    rw [‚Üê FunctorToTypes.naturality]
    simp
  right_inv := by intro Œæ; simp

theorem yonedaEquiv_apply {X : C} {F : C·µí·µñ ‚•§ Type v‚ÇÅ} (f : yoneda.obj X ‚ü∂ F) :
    yonedaEquiv f = f.app (op X) (ùüô X) :=
  rfl

@[simp]
theorem yonedaEquiv_symm_app_apply {X : C} {F : C·µí·µñ ‚•§ Type v‚ÇÅ} (x : F.obj (op X)) (Y : C·µí·µñ)
    (f : Y.unop ‚ü∂ X) : (yonedaEquiv.symm x).app Y f = F.map f.op x :=
  rfl

lemma yonedaEquiv_naturality {X Y : C} {F : C·µí·µñ ‚•§ Type v‚ÇÅ} (f : yoneda.obj X ‚ü∂ F)
    (g : Y ‚ü∂ X) : F.map g.op (yonedaEquiv f) = yonedaEquiv (yoneda.map g ‚â´ f) := by
  change (f.app (op X) ‚â´ F.map g.op) (ùüô X) = f.app (op Y) (ùüô Y ‚â´ g)
  rw [‚Üê f.naturality]
  dsimp
  simp

lemma yonedaEquiv_naturality' {X Y : C·µí·µñ} {F : C·µí·µñ ‚•§ Type v‚ÇÅ} (f : yoneda.obj (unop X) ‚ü∂ F)
    (g : X ‚ü∂ Y) : F.map g (yonedaEquiv f) = yonedaEquiv (yoneda.map g.unop ‚â´ f) :=
  yonedaEquiv_naturality _ _

lemma yonedaEquiv_comp {X : C} {F G : C·µí·µñ ‚•§ Type v‚ÇÅ} (Œ± : yoneda.obj X ‚ü∂ F) (Œ≤ : F ‚ü∂ G) :
    yonedaEquiv (Œ± ‚â´ Œ≤) = Œ≤.app _ (yonedaEquiv Œ±) :=
  rfl

lemma yonedaEquiv_yoneda_map {X Y : C} (f : X ‚ü∂ Y) : yonedaEquiv (yoneda.map f) = f := by
  rw [yonedaEquiv_apply]
  simp

lemma yonedaEquiv_symm_map {X Y : C·µí·µñ} (f : X ‚ü∂ Y) {F : C·µí·µñ ‚•§ Type v‚ÇÅ} (t : F.obj X) :
    yonedaEquiv.symm (F.map f t) = yoneda.map f.unop ‚â´ yonedaEquiv.symm t := by
  obtain ‚ü®u, rfl‚ü© := yonedaEquiv.surjective t
  rw [yonedaEquiv_naturality', Equiv.symm_apply_apply, Equiv.symm_apply_apply]

/-- Two morphisms of presheaves of types `P ‚ü∂ Q` coincide if the precompositions
with morphisms `yoneda.obj X ‚ü∂ P` agree. -/
lemma hom_ext_yoneda {P Q : C·µí·µñ ‚•§ Type v‚ÇÅ} {f g : P ‚ü∂ Q}
    (h : ‚àÄ (X : C) (p : yoneda.obj X ‚ü∂ P), p ‚â´ f = p ‚â´ g) :
    f = g := by
  ext X x
  simpa only [yonedaEquiv_comp, Equiv.apply_symm_apply]
    using congr_arg (yonedaEquiv) (h _ (yonedaEquiv.symm x))

variable (C)

/-- The "Yoneda evaluation" functor, which sends `X : C·µí·µñ` and `F : C·µí·µñ ‚•§ Type`
to `F.obj X`, functorially in both `X` and `F`.
-/
def yonedaEvaluation : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ Type max u‚ÇÅ v‚ÇÅ :=
  evaluationUncurried C·µí·µñ (Type v‚ÇÅ) ‚ãô uliftFunctor

@[simp]
theorem yonedaEvaluation_map_down (P Q : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) (Œ± : P ‚ü∂ Q)
    (x : (yonedaEvaluation C).obj P) :
    ((yonedaEvaluation C).map Œ± x).down = Œ±.2.app Q.1 (P.2.map Œ±.1 x.down) :=
  rfl

/-- The "Yoneda pairing" functor, which sends `X : C·µí·µñ` and `F : C·µí·µñ ‚•§ Type`
to `yoneda.op.obj X ‚ü∂ F`, functorially in both `X` and `F`.
-/
def yonedaPairing : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ Type max u‚ÇÅ v‚ÇÅ :=
  Functor.prod yoneda.op (ùü≠ (C·µí·µñ ‚•§ Type v‚ÇÅ)) ‚ãô Functor.hom (C·µí·µñ ‚•§ Type v‚ÇÅ)

-- Porting note (#5229): we need to provide this `@[ext]` lemma separately,
-- as `ext` will not look through the definition.
@[ext]
lemma yonedaPairingExt {X : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)} {x y : (yonedaPairing C).obj X}
    (w : ‚àÄ Y, x.app Y = y.app Y) : x = y :=
  NatTrans.ext (funext w)

@[simp]
theorem yonedaPairing_map (P Q : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) (Œ± : P ‚ü∂ Q) (Œ≤ : (yonedaPairing C).obj P) :
    (yonedaPairing C).map Œ± Œ≤ = yoneda.map Œ±.1.unop ‚â´ Œ≤ ‚â´ Œ±.2 :=
  rfl

universe w in
variable {C} in
/-- A bijection `(yoneda.obj X ‚ãô uliftFunctor ‚ü∂ F) ‚âÉ F.obj (op X)` which is a variant
of `yonedaEquiv` with heterogeneous universes. -/
def yonedaCompUliftFunctorEquiv (F : C·µí·µñ ‚•§ Type max v‚ÇÅ w) (X : C) :
    (yoneda.obj X ‚ãô uliftFunctor ‚ü∂ F) ‚âÉ F.obj (op X) where
  toFun œÜ := œÜ.app (op X) (ULift.up (ùüô _))
  invFun f :=
    { app := fun Y x => F.map (ULift.down x).op f }
  left_inv œÜ := by
    ext Y f
    dsimp
    rw [‚Üê FunctorToTypes.naturality]
    dsimp
    rw [Category.comp_id]
    rfl
  right_inv f := by aesop_cat

/-- The Yoneda lemma asserts that the Yoneda pairing
`(X : C·µí·µñ, F : C·µí·µñ ‚•§ Type) ‚Ü¶ (yoneda.obj (unop X) ‚ü∂ F)`
is naturally isomorphic to the evaluation `(X, F) ‚Ü¶ F.obj X`.

See <https://stacks.math.columbia.edu/tag/001P>.
-/
def yonedaLemma : yonedaPairing C ‚âÖ yonedaEvaluation C :=
  NatIso.ofComponents
    (fun X ‚Ü¶ Equiv.toIso (yonedaEquiv.trans Equiv.ulift.symm))
    (by intro (X, F) (Y, G) f
        ext (a : yoneda.obj X.unop ‚ü∂ F)
        apply ULift.ext
        simp only [Functor.prod_obj, Functor.id_obj, types_comp_apply, yonedaEvaluation_map_down]
        erw [Equiv.ulift_symm_down, Equiv.ulift_symm_down]
        dsimp [yonedaEquiv]
        simp [‚Üê FunctorToTypes.naturality])

variable {C}

/- Porting note: this used to be two calls to `tidy` -/
/-- The curried version of yoneda lemma when `C` is small. -/
def curriedYonedaLemma {C : Type u‚ÇÅ} [SmallCategory C] :
    (yoneda.op ‚ãô coyoneda : C·µí·µñ ‚•§ (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ Type u‚ÇÅ) ‚âÖ evaluation C·µí·µñ (Type u‚ÇÅ) :=
  NatIso.ofComponents (fun X ‚Ü¶ NatIso.ofComponents (fun F ‚Ü¶ Equiv.toIso yonedaEquiv)) (by
    intro X Y f
    ext a b
    dsimp [yonedaEquiv]
    simp [‚Üê FunctorToTypes.naturality])

/-- The curried version of the Yoneda lemma. -/
def largeCurriedYonedaLemma {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] :
    yoneda.op ‚ãô coyoneda ‚âÖ
      evaluation C·µí·µñ (Type v‚ÇÅ) ‚ãô (whiskeringRight _ _ _).obj uliftFunctor.{u‚ÇÅ} :=
  NatIso.ofComponents
    (fun X => NatIso.ofComponents
      (fun Y => Equiv.toIso <| yonedaEquiv.trans Equiv.ulift.symm)
      (by
        intros Y Z f
        ext g
        rw [‚Üê ULift.down_inj]
        simpa using yonedaEquiv_comp _ _))
    (by
      intros Y Z f
      ext F g
      rw [‚Üê ULift.down_inj]
      simpa using (yonedaEquiv_naturality _ _).symm)

/-- Version of the Yoneda lemma where the presheaf is fixed but the argument varies. -/
def yonedaOpCompYonedaObj {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] (P : C·µí·µñ ‚•§ Type v‚ÇÅ) :
    yoneda.op ‚ãô yoneda.obj P ‚âÖ P ‚ãô uliftFunctor.{u‚ÇÅ} :=
  isoWhiskerRight largeCurriedYonedaLemma ((evaluation _ _).obj P)

/-- The curried version of yoneda lemma when `C` is small. -/
def curriedYonedaLemma' {C : Type u‚ÇÅ} [SmallCategory C] :
    yoneda ‚ãô (whiskeringLeft C·µí·µñ (C·µí·µñ ‚•§ Type u‚ÇÅ)·µí·µñ (Type u‚ÇÅ)).obj yoneda.op
      ‚âÖ ùü≠ (C·µí·µñ ‚•§ Type u‚ÇÅ) :=
  NatIso.ofComponents (fun F ‚Ü¶ NatIso.ofComponents (fun X ‚Ü¶ Equiv.toIso yonedaEquiv) (by
    intro X Y f
    ext a
    dsimp [yonedaEquiv]
    simp [‚Üê FunctorToTypes.naturality]))

lemma isIso_of_yoneda_map_bijective {X Y : C} (f : X ‚ü∂ Y)
    (hf : ‚àÄ (T : C), Function.Bijective (fun (x : T ‚ü∂ X) => x ‚â´ f)) :
    IsIso f := by
  obtain ‚ü®g, hg : g ‚â´ f = ùüô Y‚ü© := (hf Y).2 (ùüô Y)
  exact ‚ü®g, (hf _).1 (by aesop_cat), hg‚ü©

attribute [nolint simpNF] CategoryTheory.yonedaEquiv_yoneda_map
end CategoryTheory
