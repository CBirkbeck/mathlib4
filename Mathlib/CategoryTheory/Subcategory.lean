import Mathlib.CategoryTheory.Arrow
import Mathlib.CategoryTheory.EssentiallySmall
import Mathlib.CategoryTheory.MorphismProperty
import Mathlib.Data.Set.Image

universe w v u

namespace CategoryTheory

variable {C : Type u} [Category.{v} C]

lemma Arrow.eq_iff (œÜ œÜ' : Arrow C) : œÜ = œÜ' ‚Üî ‚àÉ (h : œÜ.left = œÜ'.left)
        (h' : œÜ.right = œÜ'.right), œÜ.hom = eqToHom h ‚â´ œÜ'.hom ‚â´ eqToHom h'.symm := by
  constructor
  ¬∑ rintro rfl
    exact ‚ü®rfl, rfl, by simp‚ü©
  ¬∑ cases œÜ
    cases œÜ'
    dsimp
    rintro ‚ü®rfl, rfl, h‚ü©
    simp only [h, eqToHom_refl, Category.comp_id, Category.id_comp]

lemma Arrow.mk_eq_iff {X Y X' Y' : C} (f : X ‚ü∂ Y) (g : X' ‚ü∂ Y') :
    Arrow.mk f = Arrow.mk g ‚Üî ‚àÉ (h : X = X') (h' : Y = Y'),
      f = eqToHom h ‚â´ g ‚â´ eqToHom h'.symm :=
  Arrow.eq_iff _ _

variable (C)

structure ArrowFamily :=
  J : Type w
  s : J ‚Üí Arrow C

variable {C}

def ArrowFamily.W (F : ArrowFamily C) : MorphismProperty C :=
  fun _ _ f => Arrow.mk f ‚àà Set.range F.s

lemma ArrowFamily.mem_W_iff (F : ArrowFamily C) {X Y : C} (f : X ‚ü∂ Y) :
    F.W f ‚Üî ‚àÉ (i : F.J), F.s i = Arrow.mk f := by
  dsimp [W]
  simp only [Set.mem_range]

lemma ArrowFamily.mem_W (F : ArrowFamily C) (i : F.J) :
    F.W (F.s i).hom := by
  rw [ArrowFamily.mem_W_iff]
  exact ‚ü®i, rfl‚ü©

variable (C)

structure Subcategory where
  F : ArrowFamily.{w} C
  id‚ÇÅ : ‚àÄ (i : F.J), F.W (ùüô (F.s i).left)
  id‚ÇÇ : ‚àÄ (i : F.J), F.W (ùüô (F.s i).right)
  comp' : F.W.StableUnderComposition

namespace Subcategory

variable {C}

variable (S : Subcategory C)

@[pp_dot]
def objSet : Set C :=
  fun X => ‚àÉ (i : S.F.J), X = (S.F.s i).left

@[pp_dot]
def obj : Type u := S.objSet

@[pp_dot]
def homSet (X Y : S.obj) : Set (X.1 ‚ü∂ Y.1) := fun f => ‚àÉ (i : S.F.J), S.F.s i = Arrow.mk f

@[simp]
lemma mem_homSet_iff {X Y : S.obj} (f : X.1 ‚ü∂ Y.1) :
    f ‚àà S.homSet X Y ‚Üî ‚àÉ (i : S.F.J), S.F.s i = Arrow.mk f := by rfl

@[pp_dot]
def hom (X Y : S.obj) : Type v := S.homSet X Y

lemma hom_ext {X Y : S.obj} (f g : S.hom X Y) (h : f.1 = g.1) : f = g :=
  Subtype.ext h

@[simps, pp_dot]
def id (X : S.obj) : S.hom X X := ‚ü®ùüô _, by
  obtain ‚ü®i, hi‚ü© := X.2
  ¬∑ simp only [mem_homSet_iff]
    obtain ‚ü®j, hj‚ü© := S.id‚ÇÅ i
    exact ‚ü®j, by convert hj‚ü©‚ü©

@[simps, pp_dot]
def comp {X Y Z : S.obj} (f : S.hom X Y) (g : S.hom Y Z) : S.hom X Z :=
  ‚ü®f.1 ‚â´ g.1, S.comp' _ _ f.2 g.2‚ü©

instance : Category S.obj where
  Hom X Y := S.hom X Y
  id := S.id
  comp := S.comp
  id_comp _ := S.hom_ext _ _ (by aesop_cat)
  comp_id _ := S.hom_ext _ _ (by aesop_cat)
  assoc _ _ _ := S.hom_ext _ _ (by aesop_cat)

def S.Œπ : S.obj ‚•§ C where
  obj X := X.1
  map œÜ := œÜ.1

instance : Small.{w} S.obj := by
  let œÄ : S.F.J ‚Üí S.obj := fun i => ‚ü®(S.F.s i).left, ‚ü®i, rfl‚ü©‚ü©
  have : Function.Surjective œÄ := fun X => by
    obtain ‚ü®i, hi‚ü© := X.2
    exact ‚ü®i, Subtype.ext hi.symm‚ü©
  exact small_of_surjective this

instance : Small.{w} (Skeleton S.obj) := by
  have : Function.Injective (fromSkeleton S.obj).obj := fun _ _ h => by simpa using h
  exact small_of_injective this

instance : LocallySmall.{w} S.obj := ‚ü®fun X Y => by
  let Z : Set S.F.J := fun i => X.1 = (S.F.s i).left ‚àß Y.1 = (S.F.s i).right
  let œÄ : Z ‚Üí S.hom X Y := fun i => by
    refine' ‚ü®eqToHom i.2.1 ‚â´ (S.F.s i).hom ‚â´ eqToHom i.2.2.symm, ‚ü®i, _‚ü© ‚ü©
    rw [Arrow.eq_iff]
    exact ‚ü®i.2.1.symm, i.2.2.symm, by simp‚ü©
  have : Function.Surjective œÄ := fun f => by
    obtain ‚ü®i, hi‚ü© := f.2
    rw [Arrow.eq_iff] at hi
    obtain ‚ü®h‚ÇÅ, h‚ÇÇ, hi‚ü© := hi
    dsimp at h‚ÇÅ h‚ÇÇ
    exact ‚ü®‚ü®i, ‚ü®h‚ÇÅ.symm, h‚ÇÇ.symm‚ü©‚ü©, Subtype.ext (by simp [hi])‚ü©
  exact small_of_surjective this‚ü©

instance : EssentiallySmall.{w} S.obj := by
  rw [essentiallySmall_iff]
  constructor <;> infer_instance

end Subcategory

namespace ArrowFamily

variable {C}
variable (F : ArrowFamily.{w} C)

inductive selfCompJ : Type w
  | id‚ÇÅ (j : F.J)
  | id‚ÇÇ (j : F.J)
  | mk (j : F.J)
  | comp (j‚ÇÅ j‚ÇÇ : F.J) (h : (F.s j‚ÇÅ).right = (F.s j‚ÇÇ).left)

def selfCompArrows : F.selfCompJ ‚Üí Arrow C
  | selfCompJ.id‚ÇÅ j => Arrow.mk (ùüô (F.s j).left)
  | selfCompJ.id‚ÇÇ j => Arrow.mk (ùüô (F.s j).right)
  | selfCompJ.mk j => F.s j
  | selfCompJ.comp j‚ÇÅ j‚ÇÇ h => Arrow.mk ((F.s j‚ÇÅ).hom ‚â´ eqToHom h ‚â´ (F.s j‚ÇÇ).hom)

def selfComp (F : ArrowFamily C) : ArrowFamily C where
  J := F.selfCompJ
  s := F.selfCompArrows

lemma selfComp_W_le : F.W ‚â§ F.selfComp.W := fun X Y f hf => by
  rw [ArrowFamily.mem_W_iff] at hf
  obtain ‚ü®i, hi‚ü© := hf
  exact ‚ü®selfCompJ.mk i, by simp only [‚Üê hi]; rfl‚ü©

def selfCompIter (F : ArrowFamily C) : ‚Ñï ‚Üí ArrowFamily C
  | 0 => F
  | n+1 => (selfCompIter F n).selfComp

lemma SelfCompIterMonotone (F : ArrowFamily C) (i j : ‚Ñï) (hij : i ‚â§ j) :
    (F.selfCompIter i).W ‚â§ (F.selfCompIter j).W := by
  obtain ‚ü®k, rfl‚ü© := Nat.exists_eq_add_of_le hij
  revert i
  induction' k with k hk
  ¬∑ intro i
    simp
  ¬∑ intro i _
    simp only [Nat.succ_eq_add_one, ‚Üê add_assoc]
    exact (hk i (by simp)).trans (selfComp_W_le _)

def compClosure : ArrowFamily.{w} C where
  J := Sigma (fun n => (F.selfCompIter n).J)
  s := fun ‚ü®_, j‚ü© => ArrowFamily.s _ j

lemma mem_compClosureW_iff {X Y : C} (f : X ‚ü∂ Y) :
    F.compClosure.W f ‚Üî ‚àÉ (n : ‚Ñï), (F.selfCompIter n).W f := by
  simp only [ArrowFamily.mem_W_iff]
  constructor
  ¬∑ rintro ‚ü®‚ü®n, i‚ü©, hi‚ü©
    exact ‚ü®n, i, hi‚ü©
  ¬∑ rintro ‚ü®n, i, hi‚ü©
    exact ‚ü®‚ü®n, i‚ü©, hi‚ü©

end ArrowFamily

def Subcategory.compClosure (F : ArrowFamily.{w} C) : Subcategory C where
  F := F.compClosure
  id‚ÇÅ := fun ‚ü®n, i‚ü© => by
    rw [ArrowFamily.mem_compClosureW_iff]
    refine' ‚ü®n+1, _‚ü©
    unfold ArrowFamily.selfCompIter
    simp only [Nat.add_eq, add_zero]
    exact (F.selfCompIter n).selfComp.mem_W (ArrowFamily.selfCompJ.id‚ÇÅ i)
  id‚ÇÇ := fun ‚ü®n, i‚ü© => by
    rw [ArrowFamily.mem_compClosureW_iff]
    refine' ‚ü®n+1, _‚ü©
    unfold ArrowFamily.selfCompIter
    simp only [Nat.add_eq, add_zero]
    exact (F.selfCompIter n).selfComp.mem_W (ArrowFamily.selfCompJ.id‚ÇÇ i)
  comp' := fun X Y Z f g hf hg => by
    rw [ArrowFamily.mem_compClosureW_iff]
    obtain ‚ü®n, hf', hg'‚ü© : ‚àÉ (n : ‚Ñï), (F.selfCompIter n).W f ‚àß (F.selfCompIter n).W g := by
      rw [ArrowFamily.mem_compClosureW_iff] at hf hg
      obtain ‚ü®n‚ÇÅ, hf‚ü© := hf
      obtain ‚ü®n‚ÇÇ, hg‚ü© := hg
      exact ‚ü®max n‚ÇÅ n‚ÇÇ,
        F.SelfCompIterMonotone _ _ (le_max_left _ _) _ _ _ hf,
        F.SelfCompIterMonotone _ _ (le_max_right _ _) _ _ _ hg‚ü©
    rw [ArrowFamily.mem_W_iff] at hf' hg'
    obtain ‚ü®i, hi‚ü© := hf'
    obtain ‚ü®j, hj‚ü© := hg'
    refine' ‚ü®n+1, _‚ü©
    unfold ArrowFamily.selfCompIter
    simp only [Nat.add_eq, add_zero]
    rw [ArrowFamily.mem_W_iff]
    rw [Arrow.eq_iff] at hi hj
    obtain ‚ü®h‚ÇÅ, h‚ÇÇ, hi‚ü© := hi
    obtain ‚ü®h‚ÇÉ, h‚ÇÑ, hj‚ü© := hj
    refine' ‚ü®ArrowFamily.selfCompJ.comp i j (h‚ÇÇ.trans h‚ÇÉ.symm), _‚ü©
    dsimp [ArrowFamily.selfCompArrows, ArrowFamily.selfComp]
    rw [Arrow.eq_iff]
    exact ‚ü®h‚ÇÅ, h‚ÇÑ, by simp [hi, hj]‚ü©

end CategoryTheory
