import Mathlib.CategoryTheory.Arrow
import Mathlib.CategoryTheory.EssentiallySmall
import Mathlib.Data.Set.Image

universe w v u

namespace CategoryTheory

variable {C : Type u} [Category.{v} C]

lemma Arrow.eq_iff (œÜ œÜ' : Arrow C) : œÜ = œÜ' ‚Üî ‚àÉ (h : œÜ.left = œÜ'.left)
        (h' : œÜ.right = œÜ'.right), œÜ.hom = eqToHom h ‚â´ œÜ'.hom ‚â´ eqToHom h'.symm := by
  constructor
  ¬∑ rintro rfl
    exact ‚ü®rfl, rfl, by simp‚ü©
  ¬∑ cases œÜ
    cases œÜ'
    dsimp
    rintro ‚ü®rfl, rfl, h‚ü©
    simp only [h, eqToHom_refl, Category.comp_id, Category.id_comp]

lemma Arrow.mk_eq_iff {X Y X' Y' : C} (f : X ‚ü∂ Y) (g : X' ‚ü∂ Y') :
    Arrow.mk f = Arrow.mk g ‚Üî ‚àÉ (h : X = X') (h' : Y = Y'),
      f = eqToHom h ‚â´ g ‚â´ eqToHom h'.symm :=
  Arrow.eq_iff _ _

variable (C)

structure Subcategory where
  J : Type w
  s : J ‚Üí Arrow C
  id‚ÇÅ : ‚àÄ (i : J), Arrow.mk (ùüô (s i).left) ‚àà Set.range s
  id‚ÇÇ : ‚àÄ (i : J), Arrow.mk (ùüô (s i).right) ‚àà Set.range s
  comp' : ‚àÄ (i j : J) (hij : (s i).right = (s j).left),
    Arrow.mk ((s i).hom ‚â´ eqToHom hij ‚â´ (s j).hom) ‚àà Set.range s

namespace Subcategory

variable {C}

variable (S : Subcategory C)

@[pp_dot]
def objSet : Set C :=
  fun X => ‚àÉ (i : S.J), X = (S.s i).left

@[pp_dot]
def obj : Type u := S.objSet

@[pp_dot]
def homSet (X Y : S.obj) : Set (X.1 ‚ü∂ Y.1) := fun f => ‚àÉ (i : S.J), S.s i = Arrow.mk f

@[simp]
lemma mem_homSet_iff {X Y : S.obj} (f : X.1 ‚ü∂ Y.1) :
    f ‚àà S.homSet X Y ‚Üî ‚àÉ (i : S.J), S.s i = Arrow.mk f := by rfl

@[pp_dot]
def hom (X Y : S.obj) : Type v := S.homSet X Y

lemma hom_ext {X Y : S.obj} (f g : S.hom X Y) (h : f.1 = g.1) : f = g :=
  Subtype.ext h

@[simps, pp_dot]
def id (X : S.obj) : S.hom X X := ‚ü®ùüô _, by
  obtain ‚ü®i, hi‚ü© := X.2
  ¬∑ simp only [mem_homSet_iff]
    obtain ‚ü®j, hj‚ü© := S.id‚ÇÅ i
    exact ‚ü®j, by convert hj‚ü©‚ü©

@[simps, pp_dot]
def comp {X Y Z : S.obj} (f : S.hom X Y) (g : S.hom Y Z) : S.hom X Z := ‚ü®f.1 ‚â´ g.1, by
  obtain ‚ü®i, hi‚ü© := f.2
  obtain ‚ü®j, hj‚ü© := g.2
  obtain ‚ü®k, hk‚ü© := S.comp' i j (by rw [hi, hj]; rfl)
  simp only [mem_homSet_iff]
  refine' ‚ü®k, _‚ü©
  rw [hk]
  simp [Arrow.eq_iff] at hi hj ‚ä¢
  obtain ‚ü®h‚ÇÅ, h‚ÇÇ, hi‚ü© := hi
  obtain ‚ü®h‚ÇÉ, h‚ÇÑ, hj‚ü© := hj
  exact ‚ü®h‚ÇÅ, h‚ÇÑ, by simp [hi, hj]‚ü©‚ü©

instance : Category S.obj where
  Hom X Y := S.hom X Y
  id := S.id
  comp := S.comp
  id_comp _ := S.hom_ext _ _ (by aesop_cat)
  comp_id _ := S.hom_ext _ _ (by aesop_cat)
  assoc _ _ _ := S.hom_ext _ _ (by aesop_cat)

def S.Œπ : S.obj ‚•§ C where
  obj X := X.1
  map œÜ := œÜ.1

instance : Small.{w} S.obj := by
  let œÄ : S.J ‚Üí S.obj := fun i => ‚ü®(S.s i).left, ‚ü®i, rfl‚ü©‚ü©
  have : Function.Surjective œÄ := fun X => by
    obtain ‚ü®i, hi‚ü© := X.2
    exact ‚ü®i, Subtype.ext hi.symm‚ü©
  exact small_of_surjective this

instance : Small.{w} (Skeleton S.obj) := by
  have : Function.Injective (fromSkeleton S.obj).obj := fun _ _ h => by simpa using h
  exact small_of_injective this

instance : LocallySmall.{w} S.obj := ‚ü®fun X Y => by
  let Z : Set S.J := fun i => X.1 = (S.s i).left ‚àß Y.1 = (S.s i).right
  let œÄ : Z ‚Üí S.hom X Y := fun i => by
    refine' ‚ü®eqToHom i.2.1 ‚â´ (S.s i).hom ‚â´ eqToHom i.2.2.symm, ‚ü®i, _‚ü© ‚ü©
    rw [Arrow.eq_iff]
    exact ‚ü®i.2.1.symm, i.2.2.symm, by simp‚ü©
  have : Function.Surjective œÄ := fun f => by
    obtain ‚ü®i, hi‚ü© := f.2
    rw [Arrow.eq_iff] at hi
    obtain ‚ü®h‚ÇÅ, h‚ÇÇ, hi‚ü© := hi
    dsimp at h‚ÇÅ h‚ÇÇ
    exact ‚ü®‚ü®i, ‚ü®h‚ÇÅ.symm, h‚ÇÇ.symm‚ü©‚ü©, Subtype.ext (by simp [hi])‚ü©
  exact small_of_surjective this‚ü©

instance : EssentiallySmall.{w} S.obj := by
  rw [essentiallySmall_iff]
  constructor <;> infer_instance

end Subcategory

end CategoryTheory
