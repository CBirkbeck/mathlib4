/-
Copyright (c) 2024 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import Mathlib.CategoryTheory.Galois.Full
import Mathlib.CategoryTheory.Galois.Topology
import Mathlib.Topology.Algebra.OpenSubgroup

/-!

# Essential surjectivity of fiber functors

Let `F : C ‚•§ FintypeCat` be a fiber functor of a Galois category `C` and denote by
`H` the induced functor `C ‚•§ Action (Aut F) FintypeCat`.

In this file we show that the essential image of `H` are the finite `Aut F`-sets where
the `Aut F` action is continuous.

## Main results

- `exists_lift_of_quotient_openSubgroup`: If `U` is an open subgroup of `Aut F`, then
  there exists an object `X` such that `F.obj X` is isomorphic to `Aut F ‚ß∏ U` as
  `Aut F`-sets.

## Strategy

We use the fact that the category of
finite `Aut F`-sets with continuous action is a Galois category (TODO). In particular, every
continuous, finite `Aut F`-set `Y` has a decomposition into connected components and each connected
component is of the form `Aut F ‚ß∏ U` for an open subgroup `U` (TODO). Since `H` preserves
finite coproducts, it hence suffices to treat the case `Y = Aut F ‚ß∏ U`.
For the case `Y = Aut F ‚ß∏ U` we closely follow the second part of Stacks Project Tag 0BN4.

-/

universe u

namespace CategoryTheory

namespace PreGaloisCategory

variable {C : Type u} [Category.{u} C] {F : C ‚•§ FintypeCat.{u}}

open Limits Functor

variable [GaloisCategory C] [FiberFunctor F]

noncomputable local instance fintypeQuotient (H : OpenSubgroup (Aut F)) :
    Fintype (Aut F ‚ß∏ (H : Subgroup (Aut F))) :=
  have : Finite (Aut F ‚ß∏ H.toSubgroup) := H.toSubgroup.quotient_finite_of_isOpen H.isOpen'
  Fintype.ofFinite _

noncomputable local instance fintypeQuotientStabilizer (X : C) (x : F.obj X) :
    Fintype (Aut F ‚ß∏ (MulAction.stabilizer (Aut F) x)) :=
  fintypeQuotient ‚ü®MulAction.stabilizer (Aut F) x, stabilizer_isOpen (Aut F) x‚ü©

/-- If `X` is connected and `x` is in the fiber of `X`, `F.obj X` is isomorphic
to the quotient of `Aut F` by the stabilizer of `x` as `Aut F`-sets. -/
noncomputable def fiberIsoQuotientStabilizer (X : C) [IsConnected X] (x : F.obj X) :
    (functorToAction F).obj X ‚âÖ Aut F ‚ß∏‚Çê MulAction.stabilizer (Aut F) x :=
  haveI : IsConnected ((functorToAction F).obj X) := PreservesIsConnected.preserves
  letI : Fintype (Aut F ‚ß∏ MulAction.stabilizer (Aut F) x) := fintypeQuotientStabilizer X x
  FintypeCat.isoQuotientStabilizerOfIsConnected ((functorToAction F).obj X) x

section

open Action.FintypeCat

variable (V : OpenSubgroup (Aut F)) {U : OpenSubgroup (Aut F)}
  (h : Subgroup.Normal U.toSubgroup) {A : C} (u : (functorToAction F).obj A ‚âÖ Aut F ‚ß∏‚Çê U.toSubgroup)

/-

### Strategy outline

Let `A` be object of `C` with fiber `Aut F`-isomorphic to `Aut F ‚ß∏ U` for an open normal
subgroup `U`. Then for any open subgroup `V` of `Aut F`, `V ‚ß∏ (U ‚äì V)` acts on `A`. This
induces the diagram `quotientDiag`. Now assume `U ‚â§ V`. Then we can also postcompose
the diagram `quotientDiag` with `F`. The goal of this section is to compute that the colimit
of this composed diagram is `Aut F ‚ß∏ V`. Finally, we obtain `F.obj (A ‚ß∏ V) ‚âÖ Aut F ‚ß∏ V` as
`Aut F`-sets.
-/

private noncomputable def quotientToEndObjectHom :
    V.toSubgroup ‚ß∏ Subgroup.subgroupOf U.toSubgroup V.toSubgroup ‚Üí* End A :=
  let ff : (functorToAction F).FullyFaithful := FullyFaithful.ofFullyFaithful (functorToAction F)
  let e : End A ‚âÉ* End (Aut F ‚ß∏‚Çê U.toSubgroup) := (ff.mulEquivEnd A).trans (Iso.conj u)
  e.symm.toMonoidHom.comp (quotientToEndHom V.toSubgroup U.toSubgroup)

private lemma functorToAction_map_quotientToEndObjectHom
    (m : SingleObj.star (V ‚ß∏ Subgroup.subgroupOf U.toSubgroup V.toSubgroup) ‚ü∂
      SingleObj.star (V ‚ß∏ Subgroup.subgroupOf U.toSubgroup V.toSubgroup)) :
    (functorToAction F).map (quotientToEndObjectHom V h u m) =
      u.hom ‚â´ quotientToEndHom V.toSubgroup U.toSubgroup m ‚â´ u.inv := by
  simp [‚Üê cancel_epi u.inv, ‚Üê cancel_mono u.hom, ‚Üê Iso.conj_apply, quotientToEndObjectHom]

@[simps!]
private noncomputable def quotientDiag : SingleObj (V.toSubgroup ‚ß∏ Subgroup.subgroupOf U V) ‚•§ C :=
  SingleObj.functor (quotientToEndObjectHom V h u)

variable {V} (hUinV : U ‚â§ V)

@[simps]
private noncomputable def coconeQuotientDiag :
    Cocone (quotientDiag V h u ‚ãô functorToAction F) where
  pt := Aut F ‚ß∏‚Çê V.toSubgroup
  Œπ := SingleObj.natTrans (u.hom ‚â´ quotientToQuotientOfLE V.toSubgroup U.toSubgroup hUinV) <| by
    intro (m : V ‚ß∏ Subgroup.subgroupOf U V)
    simp only [const_obj_obj, Functor.comp_map, const_obj_map, Category.comp_id]
    rw [‚Üê cancel_epi (u.inv), Iso.inv_hom_id_assoc]
    apply Action.hom_ext
    ext (x : Aut F ‚ß∏ U.toSubgroup)
    induction' m, x using Quotient.inductionOn‚ÇÇ with œÉ Œº
    suffices h : ‚ü¶Œº * œÉ‚Åª¬π‚üß = ‚ü¶Œº‚üß by
      simp only [quotientToQuotientOfLE_hom_mk, quotientDiag_map,
        functorToAction_map_quotientToEndObjectHom V _ u]
      simpa
    apply Quotient.sound
    apply (QuotientGroup.leftRel_apply).mpr
    simp

@[simps]
private noncomputable def coconeQuotientDiagDesc
    (s : Cocone (quotientDiag V h u ‚ãô functorToAction F)) :
      (coconeQuotientDiag h u hUinV).pt ‚ü∂ s.pt where
  hom := Quotient.lift (fun œÉ ‚Ü¶ (u.inv ‚â´ s.Œπ.app (SingleObj.star _)).hom ‚ü¶œÉ‚üß) <| fun œÉ œÑ hst ‚Ü¶ by
    let J' := quotientDiag V h u ‚ãô functorToAction F
    let m : End (SingleObj.star (V.toSubgroup ‚ß∏ Subgroup.subgroupOf U V)) :=
      ‚ü¶‚ü®œÉ‚Åª¬π * œÑ, (QuotientGroup.leftRel_apply).mp hst‚ü©‚üß
    have h1 : J'.map m ‚â´ s.Œπ.app (SingleObj.star _) = s.Œπ.app (SingleObj.star _) := s.Œπ.naturality m
    conv_rhs => rw [‚Üê h1]
    have h2 : (J'.map m).hom (u.inv.hom ‚ü¶œÑ‚üß) = u.inv.hom ‚ü¶œÉ‚üß := by
      simp only [comp_obj, quotientDiag_obj, Functor.comp_map, quotientDiag_map, J',
        functorToAction_map_quotientToEndObjectHom V h u m]
      show (u.inv ‚â´ u.hom ‚â´ _ ‚â´ u.inv).hom ‚ü¶œÑ‚üß = u.inv.hom ‚ü¶œÉ‚üß
      simp [m]
    simp only [‚Üê h2, const_obj_obj, Action.comp_hom, FintypeCat.comp_apply]
  comm g := by
    ext (x : Aut F ‚ß∏ V.toSubgroup)
    induction' x using Quotient.inductionOn with œÉ
    simp only [const_obj_obj]
    show (((Aut F ‚ß∏‚Çê U.toSubgroup).œÅ g ‚â´ u.inv.hom) ‚â´ (s.Œπ.app (SingleObj.star _)).hom) ‚ü¶œÉ‚üß =
      ((s.Œπ.app (SingleObj.star _)).hom ‚â´ s.pt.œÅ g) (u.inv.hom ‚ü¶œÉ‚üß)
    have : ((functorToAction F).obj A).œÅ g ‚â´ (s.Œπ.app (SingleObj.star _)).hom =
        (s.Œπ.app (SingleObj.star _)).hom ‚â´ s.pt.œÅ g :=
      (s.Œπ.app (SingleObj.star _)).comm g
    rw [‚Üê this, u.inv.comm g]
    rfl

/-- The constructed cocone `coconeQuotientDiag` on the diagram `quotientDiag` is colimiting. -/
private noncomputable def coconeQuotientDiagIsColimit :
    IsColimit (coconeQuotientDiag h u hUinV) where
  desc := coconeQuotientDiagDesc h u hUinV
  fac s j := by
    apply (cancel_epi u.inv).mp
    apply Action.hom_ext
    ext (x : Aut F ‚ß∏ U.toSubgroup)
    induction' x using Quotient.inductionOn with œÉ
    simp
    rfl
  uniq s f hf := by
    apply Action.hom_ext
    ext (x : Aut F ‚ß∏ V.toSubgroup)
    induction' x using Quotient.inductionOn with œÉ
    simp [‚Üê hf (SingleObj.star _)]

end

/-- For every open subgroup `V` of `Aut F`, there exists an `X : C` such that
`F.obj X ‚âÖ Aut F ‚ß∏ V` as `Aut F`-sets. -/
lemma exists_lift_of_quotient_openSubgroup (V : OpenSubgroup (Aut F)) :
    ‚àÉ (X : C), Nonempty ((functorToAction F).obj X ‚âÖ Aut F ‚ß∏‚Çê V.toSubgroup) := by
  obtain ‚ü®I, hf, hc, hi‚ü© := exists_set_ker_evaluation_subset_of_isOpen F (one_mem V) V.isOpen'
  haveI (X : I) : IsConnected X.val := hc X X.property
  haveI (X : I) : Nonempty (F.obj X.val) := nonempty_fiber_of_isConnected F X
  have hn : Nonempty (F.obj <| (‚àè·∂ú fun X : I => X)) := nonempty_fiber_pi_of_nonempty_of_finite F _
  obtain ‚ü®A, f, hgal‚ü© := exists_hom_from_galois_of_fiber_nonempty F (‚àè·∂ú fun X : I => X) hn
  obtain ‚ü®a‚ü© := nonempty_fiber_of_isConnected F A
  let U : OpenSubgroup (Aut F) := ‚ü®MulAction.stabilizer (Aut F) a, stabilizer_isOpen (Aut F) a‚ü©
  let u := fiberIsoQuotientStabilizer A a
  have hUnormal : U.toSubgroup.Normal := stabilizer_normal_of_isGalois F A a
  have h1 (œÉ : Aut F) (œÉinU : œÉ ‚àà U) : œÉ.hom.app A = ùüô (F.obj A) := by
    have hi : (Aut F ‚ß∏‚Çê MulAction.stabilizer (Aut F) a).œÅ œÉ = ùüô _ := by
      refine FintypeCat.hom_ext _ _ (fun x ‚Ü¶ ?_)
      induction' x using Quotient.inductionOn with œÑ
      show ‚ü¶œÉ * œÑ‚üß = ‚ü¶œÑ‚üß
      apply Quotient.sound
      apply (QuotientGroup.leftRel_apply).mpr
      simp only [mul_inv_rev]
      exact Subgroup.Normal.conj_mem hUnormal _ (Subgroup.inv_mem U.toSubgroup œÉinU) _
    simp [‚Üê cancel_mono u.hom.hom, show œÉ.hom.app A ‚â´ u.hom.hom = _ from u.hom.comm œÉ, hi]
  have h2 (œÉ : Aut F) (œÉinU : œÉ ‚àà U) : ‚àÄ X : I, œÉ.hom.app X = ùüô (F.obj X) := by
    intro ‚ü®X, hX‚ü©
    ext (x : F.obj X)
    let p : A ‚ü∂ X := f ‚â´ Pi.œÄ (fun Z : I => (Z : C)) ‚ü®X, hX‚ü©
    have : IsConnected X := hc X hX
    obtain ‚ü®a, rfl‚ü© := surjective_of_nonempty_fiber_of_isConnected F p x
    simp only [FintypeCat.id_apply, FunctorToFintypeCat.naturality, h1 œÉ œÉinU]
  have hUinV : (U : Set (Aut F)) ‚â§ V := fun u uinU ‚Ü¶ hi u (h2 u uinU)
  have := V.quotient_finite_of_isOpen' U V.isOpen' U.isOpen'
  exact ‚ü®colimit (quotientDiag V hUnormal u),
    ‚ü®preservesColimitIso (functorToAction F) (quotientDiag V hUnormal u) ‚â™‚â´
    colimit.isoColimitCocone ‚ü®coconeQuotientDiag hUnormal u hUinV,
    coconeQuotientDiagIsColimit hUnormal u hUinV‚ü©‚ü©‚ü©

--instance (X : Action FintypeCat (MonCat.of (Aut F))) : TopologicalSpace X.V := ‚ä•

lemma decomp_sum_quotients (X : Action FintypeCat (MonCat.of (Aut F)))
    [TopologicalSpace X.V] [DiscreteTopology X.V] [ContinuousSMul (Aut F) X.V] :
    ‚àÉ (Œπ : Type) (_ : Finite Œπ) (f : Œπ ‚Üí OpenSubgroup (Aut F)),
      Nonempty ((‚àê fun i ‚Ü¶ Aut F ‚ß∏‚Çê (f i).toSubgroup) ‚âÖ X) := by
  obtain ‚ü®Œπ, hf, f, u, hc‚ü© := has_decomp_connected_components' X
  use Œπ
  use hf
  letI (i : Œπ) : TopologicalSpace (f i).V := ‚ä•
  haveI (i : Œπ) : DiscreteTopology (f i).V := ‚ü®rfl‚ü©
  have (i : Œπ) : ContinuousSMul (Aut F) (f i).V := by
    constructor
    let r : f i ‚ü∂ X := Sigma.Œπ f i ‚â´ u.hom
    have : Mono (Sigma.Œπ f i) := inferInstance
    let r' : (f i).V ‚Üí X.V := r.hom
    let r'' (p : Aut F √ó (f i).V) : Aut F √ó X.V := (p.1, r' p.2)
    have : Continuous r'' := by fun_prop
    let q (p : Aut F √ó X.V) : X.V := X.œÅ p.1 p.2
    let q' (p : Aut F √ó (f i).V) : (f i).V := (f i).œÅ p.1 p.2
    have heq : q ‚àò r'' = r' ‚àò q' := by
      ext (p : Aut F √ó (f i).V)
      show (r.hom ‚â´ X.œÅ p.1) p.2 = ((f i).œÅ p.1 ‚â´ r.hom) p.2
      rw [r.comm]
    have : Function.Injective r' := by
      show Function.Injective ((forget _).map r)
      erw [‚Üê ConcreteCategory.mono_iff_injective_of_preservesPullback]
      apply mono_comp
    have : Continuous q := continuous_smul
    have : Continuous r'' := by fun_prop
    have : Continuous r' := by fun_prop
    let t‚ÇÅ : TopologicalSpace (Aut F √ó (f i).V) := inferInstance
    let t‚ÇÇ : TopologicalSpace (f i).V := ‚ä•
    let t‚ÇÉ : TopologicalSpace (f i).V := TopologicalSpace.induced r' ‚ä•
    show @Continuous _ _ t‚ÇÅ t‚ÇÇ q'
    have : t‚ÇÉ = t‚ÇÇ := by
      show t‚ÇÉ = ‚ä•
      have : t‚ÇÉ ‚â§ ‚ä• := by
        intro s _
        use r' '' s
        constructor
        trivial
        apply Set.preimage_image_eq s
        assumption
      exact le_bot_iff.mp this
    rw [‚Üê this]
    have : Continuous (r' ‚àò q') := by
      rw [‚Üê heq]
      apply Continuous.comp
      assumption
      assumption
    convert continuous_induced_rng.mpr this
    exact DiscreteTopology.eq_bot.symm
  have (i : Œπ) : ‚àÉ (U : OpenSubgroup (Aut F))
    (_ : (f i) ‚âÖ Aut F ‚ß∏‚Çê U.toSubgroup), True := by
    have : Nonempty (f i).V := nonempty_fiber_of_isConnected (forget‚ÇÇ _ _) (f i)
    obtain ‚ü®x‚ü© := this
    let U : OpenSubgroup (Aut F) := ‚ü®MulAction.stabilizer (Aut F) x, stabilizer_isOpen (Aut F) x‚ü©
    letI : Fintype (Aut F ‚ß∏ MulAction.stabilizer (Aut F) x) := fintypeQuotient U
    let u := FintypeCat.isoQuotientStabilizerOfIsConnected (f i) x
    use U
    use u
  choose g ui _ using this
  use g
  exact ‚ü®(Sigma.mapIso ui).symm ‚â™‚â´ u‚ü©

lemma exists_lift_of_continuous (X : Action FintypeCat (MonCat.of (Aut F)))
    [TopologicalSpace X.V] [DiscreteTopology X.V] [ContinuousSMul (Aut F) X.V] :
    ‚àÉ A, Nonempty ((functorToAction F).obj A ‚âÖ X) := by
  obtain ‚ü®Œπ, hfin, f, ‚ü®u‚ü©‚ü© := decomp_sum_quotients X
  have (i : Œπ) :
    ‚àÉ (A : C)
    (_ : (functorToAction F).obj A ‚âÖ (Aut F ‚ß∏‚Çê (f i).toSubgroup)),
    True := by
      obtain ‚ü®X, ‚ü®v‚ü©‚ü© := exists_lift_of_quotient_openSubgroup (f i)
      use X
      use v
  choose g gu _ using this
  let v : (‚àê fun i => (functorToAction F).obj (g i)) ‚âÖ
      ‚àê fun i => (Aut F ‚ß∏‚Çê (f i).toSubgroup) :=
    Sigma.mapIso gu
  let A : C := ‚àê g
  use A
  have : Fintype Œπ := Fintype.ofFinite Œπ
  let i : (functorToAction F).obj A ‚âÖ ‚àê fun i => (functorToAction F).obj (g i) :=
    PreservesCoproduct.iso (functorToAction F) g
  constructor
  exact i ‚â™‚â´ v ‚â™‚â´ u

variable (F)

instance (X : C) : MulAction (Aut F) (FinTopCat.of <| F.obj X) :=
  inferInstanceAs <| MulAction (Aut F) (F.obj X)

def functorToAction' : C ‚•§ Action FinTopCat (MonCat.of (Aut F)) where
  obj X := Action.FinTopCat.ofMulAction (Aut F) (FinTopCat.of <| F.obj X) (by fun_prop)
  map {X Y} f := {
    hom := ‚ü®F.map f, ‚ü®fun s ‚Ü¶ id‚ü©‚ü©
    comm := fun g ‚Ü¶ by
      simp
      apply ContinuousMap.ext
      intro a
      sorry
      --symm <| g.hom.naturality f
  }

def functorToContAction : C ‚•§ DiscreteContAction FinTopCat (MonCat.of (Aut F)) :=
  FullSubcategory.lift ContAction.IsDiscrete (FullSubcategory.lift
    Action.IsContinuous (functorToAction' F) <|
    continuousSMul_aut_fiber F) (fun _ ‚Ü¶ ‚ü®rfl‚ü©)

def G : DiscreteContAction FinTopCat (MonCat.of (Aut F)) ‚•§ Action FintypeCat (MonCat.of (Aut F)) :=
  fullSubcategoryInclusion _ ‚ãô fullSubcategoryInclusion _ ‚ãô
    (forget‚ÇÇ FinTopCat FintypeCat).mapAction _

instance : (G F).Full where
  map_surjective {X Y} f := by
    refine ‚ü®‚ü®‚ü®f.hom, sorry‚ü©, ?_‚ü©, rfl‚ü©
    intro g
    apply ContinuousMap.ext
    intro a
    sorry

instance : (G F).Faithful := by
  --haveI : (fullSubcategoryInclusion ContAction.IsDiscrete).Faithful := sorry
  haveI : (fullSubcategoryInclusion Action.IsContinuous ‚ãô
    (forget‚ÇÇ FinTopCat FintypeCat).mapAction (MonCat.of (Aut F))).Faithful := sorry
  --apply Faithful.comp
  sorry

lemma functorToContAction_G_eq : functorToContAction F ‚ãô G F = functorToAction F :=
  rfl

instance : (functorToContAction F).EssSurj := by
  constructor
  intro X
  have : ContinuousSMul _ _ := X.obj.property
  letI : TopologicalSpace ((G F).obj X).V :=
    inferInstanceAs <| TopologicalSpace X.obj.obj.V
  haveI : DiscreteTopology ((G F).obj X).V := X.property
  have : ContinuousSMul (Aut F) ((G F).obj X).V := X.obj.property
  obtain ‚ü®A, ‚ü®u‚ü©‚ü© := exists_lift_of_continuous ((G F).obj X)
  use A
  constructor
  exact (G F).preimageIso u

end PreGaloisCategory

end CategoryTheory
