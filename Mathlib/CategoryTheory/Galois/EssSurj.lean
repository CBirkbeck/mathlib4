/-
Copyright (c) 2024 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import Mathlib.CategoryTheory.Galois.Topology
import Mathlib.CategoryTheory.Galois.Basic
import Mathlib.CategoryTheory.Galois.Full
import Mathlib.Topology.Algebra.OpenSubgroup
import Mathlib.CategoryTheory.Endomorphism

/-!

# Essential surjectivity of fiber functors

-/

universe u‚ÇÅ u‚ÇÇ w u v‚ÇÅ

section Profinite

--open TopologicalSpace

variable {G : Type*} [Group G]

open Function Set

lemma QuotientGroup.preimage_mk_singleton_mk (H : Subgroup G) (g : G) :
    mk (s := H) ‚Åª¬π' {mk g} = (g * ¬∑) '' H := by
  ext g'
  simp only [mem_preimage, mem_singleton_iff, QuotientGroup.eq, image_mul_left, SetLike.mem_coe]
  rw [‚Üê H.inv_mem_iff]
  simp

variable [TopologicalSpace G] [TopologicalGroup G]

instance (X : Type*) [MulAction G X] [Fintype X] : MulAction G (FintypeCat.of X) :=
  inferInstanceAs <| MulAction G X

lemma closed_of_open (U : Subgroup G) (h : IsOpen (U : Set G)) : IsClosed (U : Set G) :=
  OpenSubgroup.isClosed ‚ü®U, h‚ü©

lemma Subgroup.discreteTopology (U : Subgroup G) (U_open : IsOpen (U : Set G)) :
    DiscreteTopology (G ‚ß∏ U) := by
  apply singletons_open_iff_discrete.mp
  rintro ‚ü®g‚ü©
  erw [isOpen_mk, QuotientGroup.preimage_mk_singleton_mk]
  exact Homeomorph.mulLeft g |>.isOpen_image|>.mpr U_open

def finiteQuotientOfOpen [CompactSpace G] (U : Subgroup G) (h : IsOpen (U : Set G)) :
    Finite (G ‚ß∏ U) :=
  have : CompactSpace (G ‚ß∏ U) := Quotient.compactSpace
  have : DiscreteTopology (G ‚ß∏ U) := U.discreteTopology h
  finite_of_compact_of_discrete

def finiteQuotientSubgroups [CompactSpace G] (U K : Subgroup G) (hUopen : IsOpen (U : Set G))
    (hKpoen : IsOpen (K : Set G)) : Finite (U ‚ß∏ Subgroup.subgroupOf K U) := by
  have : CompactSpace U := isCompact_iff_compactSpace.mp <| IsClosed.isCompact
    <| closed_of_open U hUopen
  apply finiteQuotientOfOpen (Subgroup.subgroupOf K U)
  show IsOpen (((Subgroup.subtype U) ‚Åª¬π' K) : Set U)
  apply Continuous.isOpen_preimage
  continuity
  assumption

end Profinite

namespace CategoryTheory

namespace PreGaloisCategory

variable {C : Type u} [Category.{u} C] (F : C ‚•§ FintypeCat.{u})

open Limits Functor

lemma stabilizer_open (X : C) (x : ((functorToAction F).obj X).V) :
    IsOpen (MulAction.stabilizer (Aut F) x : Set (Aut F)) := by
  let q (g : Aut F) : Aut F √ó F.obj X := (g, x)
  have : Continuous q := by
    continuity
  let h (p : Aut F √ó F.obj X) : F.obj X := p.1.hom.app X p.2
  have : Continuous h := continuous_smul
  let p (g : Aut F) : F.obj X := g.hom.app X x
  have : p ‚Åª¬π' {x} = MulAction.stabilizer (Aut F) x := rfl
  rw [‚Üêthis]
  apply IsOpen.preimage
  show Continuous (h ‚àò q)
  apply Continuous.comp
  assumption
  assumption
  trivial

variable [GaloisCategory C] [FiberFunctor F]

noncomputable instance (G : Type u) [Group G] [Finite G] :
    PreservesColimitsOfShape (SingleObj G) (functorToAction F) := by
  apply Action.preservesColimitsOfShapeOfPreserves
  show PreservesColimitsOfShape (SingleObj G) F
  infer_instance

section

noncomputable instance fintypeQuotient (H : OpenSubgroup (Aut F)) :
    Fintype (Aut F ‚ß∏ (H : Subgroup (Aut F))) := by
  have : Finite (Aut F ‚ß∏ H.toSubgroup) := finiteQuotientOfOpen H.toSubgroup H.isOpen'
  apply Fintype.ofFinite

instance (H : Subgroup (Aut F)) : MulAction (Aut F) (Aut F ‚ß∏ H) := inferInstance

end

private lemma help0 (X : C) [IsGalois X] :
    ‚àÉ (U : OpenSubgroup (Aut F))
      (_ : (functorToAction F).obj X ‚âÖ Action.FintypeCat.ofMulAction (Aut F)
        (FintypeCat.of <| Aut F ‚ß∏ U.toSubgroup)),
    Subgroup.Normal U.toSubgroup := by
  have hc : IsConnected ((functorToAction F).obj X) := PreservesIsConnected.preserves
  have : Nonempty (F.obj X) := nonempty_fiber_of_isConnected F X
  obtain ‚ü®x : ((functorToAction F).obj X).V‚ü© := this
  have : MulAction (Aut F) (F.obj X) := by
    show MulAction (Aut F) ((functorToAction F).obj X).V
    infer_instance
  have : MulAction.IsPretransitive (Aut F) ((functorToAction F).obj X).V :=
    FintypeCat.Action.pretransitive_of_isConnected (Aut F) ((functorToAction F).obj X)
  have : MulAction.orbit (Aut F) x ‚âÉ Aut F ‚ß∏ MulAction.stabilizer (Aut F) x :=
    MulAction.orbitEquivQuotientStabilizer (Aut F) x
  have : MulAction.orbit (Aut F) x = Set.univ := MulAction.orbit_eq_univ (Aut F) x
  have : MulAction.orbit (Aut F) x ‚âÉ Set.univ := Equiv.setCongr this
  let e : ((functorToAction F).obj X).V ‚âÉ Aut F ‚ß∏ MulAction.stabilizer (Aut F) x := by
    trans
    exact (Equiv.Set.univ ‚Üë(F.obj X)).symm
    trans
    apply Equiv.setCongr
    exact (MulAction.orbit_eq_univ (Aut F) x).symm
    exact MulAction.orbitEquivQuotientStabilizer (Aut F) x
  let U : OpenSubgroup (Aut F) := ‚ü®MulAction.stabilizer (Aut F) x, stabilizer_open F X x‚ü©
  use U
  let inst : Fintype (Aut F ‚ß∏ U.toSubgroup) := fintypeQuotient F U
  let u : Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ U.toSubgroup) ‚âÖ
      (functorToAction F).obj X := by
    apply Action.mkIso
    swap
    exact (FintypeCat.equivEquivIso e.symm)
    intro (œÉ : Aut F)
    ext (a : Aut F ‚ß∏ MulAction.stabilizer (Aut F) x)
    obtain ‚ü®œÑ, hœÑ‚ü© := Quotient.exists_rep a
    rw [‚ÜêhœÑ]
    rfl
  use u.symm
  constructor
  intro n ninstab g
  simp
  show g ‚Ä¢ n ‚Ä¢ (g‚Åª¬π ‚Ä¢ x) = x
  have : MulAction.IsPretransitive (Aut X) (F.obj X) := inferInstance
  let inst : SMul (Aut X) ((functorToAction F).obj X).V :=
    inferInstanceAs <| SMul (Aut X) (F.obj X)
  have : MulAction.IsPretransitive (Aut X) ((functorToAction F).obj X).V :=
    isPretransitive_of_isGalois F X
  have : ‚àÉ (œÜ : Aut X), F.map œÜ.hom x = g‚Åª¬π ‚Ä¢ x :=
    MulAction.IsPretransitive.exists_smul_eq x (g‚Åª¬π ‚Ä¢ x)
  obtain ‚ü®œÜ, h‚ü© := this
  rw [‚Üê h]
  show g ‚Ä¢ n ‚Ä¢ _ = x
  --show g ‚Ä¢ n ‚Ä¢ (F.map œÜ.hom x) = x
  show g ‚Ä¢ (((functorToAction F).map œÜ.hom).hom ‚â´ ((functorToAction F).obj X).œÅ n) x = x
  rw [‚Üê ((functorToAction F).map œÜ.hom).comm]
  simp only [FintypeCat.comp_apply]
  show g ‚Ä¢ ((functorToAction F).map œÜ.hom).hom (n ‚Ä¢ x) = x
  have : ((functorToAction F).map œÜ.hom).hom = F.map œÜ.hom := rfl
  rw [this]
  --show g ‚Ä¢ F.map œÜ.hom (n ‚Ä¢ x) = x
  rw [ninstab, h]
  show (g * g‚Åª¬π) ‚Ä¢ x = x
  simp

lemma FintypeCat.jointly_surjective {J : Type} [SmallCategory J] [FinCategory J]
    (F : J ‚•§ FintypeCat.{u}) (t : Cocone F) (h : IsColimit t) (x : t.pt) :
    ‚àÉ j y, t.Œπ.app j y = x := by
  let s : Cocone (F ‚ãô FintypeCat.incl) := FintypeCat.incl.mapCocone t
  let hs : IsColimit s := isColimitOfPreserves FintypeCat.incl.{u} h
  exact Types.jointly_surjective (F ‚ãô FintypeCat.incl) hs x

private lemma help1 (H : Subgroup (Aut F)) (h : IsOpen (H : Set (Aut F))) : ‚àÉ (I : Set C)
    (_ : Fintype I), (‚àÄ X ‚àà I, IsConnected X) ‚àß
    ((œÉ : Aut F) ‚Üí (‚àÄ X : I, œÉ.hom.app X = ùüô (F.obj X)) ‚Üí œÉ ‚àà H) := by
  obtain ‚ü®U, hUopen, hU‚ü© := isOpen_induced_iff.mp h
  have h1inU : 1 ‚àà U := by
    show 1 ‚àà autEmbedding F ‚Åª¬π' U
    rw [hU]
    exact Subgroup.one_mem H
  obtain ‚ü®I, u, ho, ha‚ü© := isOpen_pi_iff.mp hUopen 1 h1inU
  choose fŒπ ff fc h4 h5 h6 using (fun X : I => has_decomp_connected_components X.val)
  let J : Set C := ‚ãÉ X, Set.range (ff X)
  use J
  use Fintype.ofFinite J
  constructor
  intro X ‚ü®A, ‚ü®Y, hY‚ü©, hA2‚ü©
  have : X ‚àà Set.range (ff Y) := by simpa [hY]
  obtain ‚ü®i, hi‚ü© := this
  rw [‚Üê hi]
  exact h5 Y i
  intro œÉ h
  have (X : I) : œÉ.hom.app X = ùüô (F.obj X) := by
    --have is : ‚àê ff X ‚âÖ X := h3 X
    let t : ColimitCocone (Discrete.functor (ff X)) := ‚ü®Cofan.mk X (fc X), h4 X‚ü©
    let s : Cocone (Discrete.functor (ff X) ‚ãô F) := F.mapCocone t.cocone
    have : Fintype (fŒπ X) := Fintype.ofFinite _
    let hs : IsColimit s := isColimitOfPreserves F t.isColimit
    --rw [h6]
    ext (x : F.obj t.cocone.pt)
    obtain ‚ü®‚ü®j‚ü©, a, ha : F.map (t.cocone.Œπ.app ‚ü®j‚ü©) a = x‚ü© :=
      FintypeCat.jointly_surjective (Discrete.functor (ff X) ‚ãô F) s hs x
    show œÉ.hom.app X x = x
    rw [‚Üê ha]
    show (F.map (t.cocone.Œπ.app ‚ü®j‚ü©) ‚â´ œÉ.hom.app X) a = F.map (t.cocone.Œπ.app ‚ü®j‚ü©) a
    erw [œÉ.hom.naturality]
    simp
    have : œÉ.hom.app ((ff X) j) = ùüô (F.obj ((ff X) j)) := by
      have : (ff X) j ‚àà J := by aesop
      exact h ‚ü®(ff X) j, this‚ü©
    rw [this]
    rfl
  have (X : I) : autEmbedding F œÉ X = 1 := by
    apply Iso.ext
    exact this X
  have (X : I) : autEmbedding F œÉ X ‚àà u X := by
    rw [this X]
    exact (ho X.val X.property).right
  have : autEmbedding F œÉ ‚àà Set.pi I u := by
    intro X XinI
    exact this ‚ü®X, XinI‚ü©
  have : œÉ ‚àà autEmbedding F ‚Åª¬π' U := by
    apply ha
    exact this
  rw [hU] at this
  exact this

private lemma help2 (I : Set C) [Fintype I] (h : ‚àÄ X ‚àà I, IsConnected X) :
    Nonempty (F.obj (‚àè·∂ú fun X : I ‚Ü¶ X)) := by
  let P : FintypeCat := ‚àè·∂ú fun X : I => F.obj X
  have i1 : F.obj (‚àè·∂ú fun X : I => X) ‚âÖ P := PreservesProduct.iso F _
  let f (X : I) : Type u := F.obj X
  have i2 : FintypeCat.incl.obj P ‚âÖ ‚àè·∂ú f := PreservesProduct.iso FintypeCat.incl _
  have (X : I) : Nonempty (F.obj X) := by
    have : IsConnected (X : C) := h X.val X.property
    exact nonempty_fiber_of_isConnected F (X : C)
  have : Nonempty (‚àÄ X : I, F.obj X) := inferInstance
  obtain ‚ü®x‚ü© := this
  have i3 : ‚àè·∂ú f ‚âÖ Shrink.{u, u} (‚àÄ X : I, f X) := Types.Small.productIso f
  let y : ‚àè·∂ú f := i3.inv ((equivShrink _) x)
  let y' : P := i2.inv y
  use i1.inv y'

variable (H N : OpenSubgroup (Aut F)) [Subgroup.Normal N.toSubgroup]

private noncomputable def help3 (H N : OpenSubgroup (Aut F)) (hn : Subgroup.Normal N.toSubgroup) :
    H.toSubgroup ‚ß∏ Subgroup.subgroupOf N H ‚Üí*
      End (Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ N.toSubgroup)) := by
  let œÜ' : H ‚Üí* End (Action.FintypeCat.ofMulAction (Aut F)
      (FintypeCat.of <| Aut F ‚ß∏ N.toSubgroup)) := by
    refine ‚ü®‚ü®?_, ?_‚ü©, ?_‚ü©
    intro ‚ü®v, _‚ü©
    show Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ N.toSubgroup) ‚ü∂
      Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ N.toSubgroup)
    let fh : (Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ N.toSubgroup)).V
        ‚ü∂ (Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ N.toSubgroup)).V := by
      show Aut F ‚ß∏ N.toSubgroup ‚Üí Aut F ‚ß∏ N.toSubgroup
      apply Quotient.lift
      swap
      intro œÉ
      exact ‚ü¶œÉ * v‚Åª¬π‚üß
      intro œÉ œÑ hst
      apply Quotient.sound
      apply (QuotientGroup.leftRel_apply).mpr
      simp
      show v * (œÉ‚Åª¬π * œÑ) * v‚Åª¬π ‚àà N
      apply Subgroup.Normal.conj_mem hn
      exact QuotientGroup.leftRel_apply.mp hst
    constructor
    swap
    exact fh
    intro (œÉ : Aut F)
    ext (x : Aut F ‚ß∏ N.toSubgroup)
    obtain ‚ü®œÑ, hœÑ‚ü© := Quotient.exists_rep x
    rw [‚ÜêhœÑ]
    rfl
    apply Action.hom_ext
    ext (x : Aut F ‚ß∏ N.toSubgroup)
    obtain ‚ü®œÑ, hœÑ‚ü© := Quotient.exists_rep x
    rw [‚ÜêhœÑ]
    rfl
    intro œÉ œÑ
    apply Action.hom_ext
    ext (x : Aut F ‚ß∏ N.toSubgroup)
    obtain ‚ü®Œº, hŒº‚ü© := Quotient.exists_rep x
    rw [‚ÜêhŒº]
    show ‚ü¶Œº * (œÉ * œÑ)‚Åª¬π‚üß = ‚ü¶Œº * œÑ‚Åª¬π * œÉ‚Åª¬π‚üß
    group
    rfl
  apply QuotientGroup.lift (Subgroup.subgroupOf N.toSubgroup H.toSubgroup) œÜ'
  intro u uinU'
  show œÜ' u = 1
  apply Action.hom_ext
  ext (x : Aut F ‚ß∏ N.toSubgroup)
  obtain ‚ü®Œº, hŒº‚ü© := Quotient.exists_rep x
  rw [‚ÜêhŒº]
  show ‚ü¶Œº * u‚Åª¬π‚üß = ‚ü¶Œº‚üß
  apply Quotient.sound
  apply (QuotientGroup.leftRel_apply).mpr
  simpa

--private def help411 {G M : Type*} [Group G] [Group M]
--    (J : SingleObj M ‚•§ Action FintypeCat (MonCat.of G)) :
--    Action FintypeCat (MonCat.of G) where
--  V := (J.obj (SingleObj.star M)).V ‚ß∏ M

--private def help41 {G M : Type*} [Group G] [Group M]
--    (J : SingleObj M ‚•§ Action FintypeCat (MonCat.of G)) :
--    Cocone J where
--  pt := J.obj (SingleObj.star M) ‚ß∏ M
--  Œπ := {
--    app := fun _ => ùüô (J.obj _)
--    --naturality := 
--  }

--private def help42 {G M : Type*} [Group G] [Group M] (H N : Subgroup G) (h : Subgroup.Normal N)
--  (J : SingleObj M ‚•§ Action FintypeCat (MonCat.of G))

--private lemma help4 {G M : Type*} [Group G] [Group M] [Finite M]
--    (J : SingleObj M ‚•§ Action FintypeCat (MonCat.of G)) :
--  colimit J ‚âÖ Action.ofMulAction' G (G ‚ß∏ H) := sorry

def help43 {G : Type*} [Group G] (H N : Subgroup G) [Fintype (G ‚ß∏ N)]
    [Fintype (G ‚ß∏ H)] (h : N ‚â§ H) :
    Action.FintypeCat.ofMulAction G (FintypeCat.of <| G ‚ß∏ N) ‚ü∂
      Action.FintypeCat.ofMulAction G (FintypeCat.of <| G ‚ß∏ H) := by
  constructor
  swap
  apply Quotient.lift
  intro a b hab
  apply Quotient.sound
  apply (QuotientGroup.leftRel_apply).mpr
  apply h
  exact (QuotientGroup.leftRel_apply).mp hab
  intro (g : G)
  ext (x : G ‚ß∏ N)
  obtain ‚ü®Œº, hŒº‚ü© := Quotient.exists_rep x
  rw [‚ÜêhŒº]
  rfl

noncomputable def help44 (V U : OpenSubgroup (Aut F)) (h : Subgroup.Normal U.toSubgroup) (A : C)
    (u : (functorToAction F).obj A ‚âÖ Action.FintypeCat.ofMulAction
      (Aut F) (FintypeCat.of <| Aut F ‚ß∏ U.toSubgroup)) :
    V.toSubgroup ‚ß∏ Subgroup.subgroupOf U.toSubgroup V.toSubgroup ‚Üí* End A := by
  let œÜ : V.toSubgroup ‚ß∏ Subgroup.subgroupOf U.toSubgroup V.toSubgroup ‚Üí*
      End (Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ U.toSubgroup)) :=
    help3 F V U h
  let ff : (functorToAction F).FullyFaithful := FullyFaithful.ofFullyFaithful (functorToAction F)
  let e1 : End A ‚âÉ* End ((functorToAction F).obj A) := ff.mulEquivEnd A
  let e2 : End ((functorToAction F).obj A) ‚âÉ*
      End (Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ U.toSubgroup)) :=
    Iso.conj u
  let e : End A ‚âÉ* End (Action.FintypeCat.ofMulAction (Aut F)
    (FintypeCat.of <| Aut F ‚ß∏ U.toSubgroup)) := e1.trans e2
  exact MonoidHom.comp e.symm.toMonoidHom œÜ

lemma help441 (V U : OpenSubgroup (Aut F)) (h : Subgroup.Normal U.toSubgroup) (A : C)
    (u : (functorToAction F).obj A ‚âÖ
      Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ U.toSubgroup))
    (m : SingleObj.star (V ‚ß∏ Subgroup.subgroupOf U.toSubgroup V.toSubgroup) ‚ü∂
      SingleObj.star (V ‚ß∏ Subgroup.subgroupOf U.toSubgroup V.toSubgroup)) :
    (functorToAction F).map (help44 F V U h A u m) = u.hom ‚â´ help3 F V U h m ‚â´ u.inv := by
  apply (cancel_epi (u.inv)).mp
  apply (cancel_mono (u.hom)).mp
  simp [‚ÜêIso.conj_apply, MulEquiv.apply_symm_apply, help44]

noncomputable def help45 (V U : OpenSubgroup (Aut F)) (h : Subgroup.Normal U.toSubgroup) (A : C)
    (u : (functorToAction F).obj A ‚âÖ
      Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ U.toSubgroup)) :
    SingleObj (V.toSubgroup ‚ß∏ Subgroup.subgroupOf U.toSubgroup V.toSubgroup) ‚•§ C :=
  SingleObj.functor (help44 F V U h A u)

noncomputable def help46 (V U : OpenSubgroup (Aut F)) (h : Subgroup.Normal U.toSubgroup) (A : C)
    (hUinV : U ‚â§ V)
    (u : (functorToAction F).obj A ‚âÖ
      Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ U.toSubgroup)) :
    Cocone (help45 F V U h A u ‚ãô functorToAction F) where
  pt := Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ V.toSubgroup)
  Œπ := by
    apply SingleObj.natTrans
    swap
    show (functorToAction F).obj A ‚ü∂ Action.FintypeCat.ofMulAction (Aut F)
      (FintypeCat.of <| Aut F ‚ß∏ V.toSubgroup)
    exact (u.hom ‚â´ help43 V.toSubgroup U.toSubgroup hUinV)
    intro (m : V ‚ß∏ Subgroup.subgroupOf U V)
    show (functorToAction F).map (help44 F V U h A u m) ‚â´ u.hom ‚â´
      help43 V.toSubgroup U.toSubgroup hUinV = u.hom ‚â´ help43 V.toSubgroup U.toSubgroup hUinV
    apply (cancel_epi (u.inv)).mp
    rw [Iso.inv_hom_id_assoc]
    apply Action.hom_ext
    ext (x : Aut F ‚ß∏ U.toSubgroup)
    obtain ‚ü®Œº, hŒº‚ü© := Quotient.exists_rep x
    rw [‚ÜêhŒº]
    let œÜ : V.toSubgroup ‚ß∏ Subgroup.subgroupOf U.toSubgroup V.toSubgroup ‚Üí*
        End (Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ U.toSubgroup)) :=
      help3 F V U h
    have : u.inv ‚â´ (functorToAction F).map (help44 F V U h A u m) ‚â´ u.hom = œÜ m := by
      simp [‚Üê Iso.conj_apply, MulEquiv.apply_symm_apply, help44]
    show Action.Hom.hom ((u.inv ‚â´ (functorToAction F).map (help44 F V U h A u m) ‚â´ u.hom) ‚â´
      help43 V.toSubgroup U.toSubgroup hUinV) ‚ü¶Œº‚üß
      = ‚ü¶Œº‚üß
    rw [this]
    show ((œÜ m).hom ‚â´ (help43 V.toSubgroup U.toSubgroup hUinV).hom) ‚ü¶Œº‚üß = ‚ü¶Œº‚üß
    obtain ‚ü®œÉ, hœÉ‚ü© := Quotient.exists_rep m
    rw [‚ÜêhœÉ]
    show ‚ü¶Œº * œÉ‚Åª¬π‚üß = ‚ü¶Œº‚üß
    apply Quotient.sound
    apply (QuotientGroup.leftRel_apply).mpr
    simp only [InvMemClass.coe_inv, mul_inv_rev, _root_.inv_inv, inv_mul_cancel_right,
      SetLike.coe_mem]

noncomputable def help461 (V U : OpenSubgroup (Aut F)) (h : Subgroup.Normal U.toSubgroup) (A : C)
    (hUinV : U ‚â§ V)
    (u : (functorToAction F).obj A ‚âÖ
      Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ U.toSubgroup)) :
    (s : Cocone (help45 F V U h A u ‚ãô functorToAction F)) ‚Üí
      (help46 F V U h A hUinV u).pt ‚ü∂ s.pt := by
  let M := V.toSubgroup ‚ß∏ Subgroup.subgroupOf U V
  let J : SingleObj M ‚•§ C := help45 F V U h A u
  let J' : SingleObj M ‚•§ Action FintypeCat (MonCat.of (Aut F)) := J ‚ãô functorToAction F
  let œÜ : M ‚Üí* End (Action.FintypeCat.ofMulAction (Aut F)
      (FintypeCat.of <| Aut F ‚ß∏ U.toSubgroup)) :=
    help3 F V U h
  intro s
  constructor
  swap
  show Aut F ‚ß∏ V.toSubgroup ‚ü∂ s.pt.V
  apply Quotient.lift
  swap
  intro (œÉ : Aut F)
  let f : (functorToAction F).obj A ‚ü∂ s.pt := s.Œπ.app (SingleObj.star M)
  exact (u.inv ‚â´ f).hom ‚ü¶œÉ‚üß
  intro œÉ œÑ hst
  have : œÉ‚Åª¬π * œÑ ‚àà V := (QuotientGroup.leftRel_apply).mp hst
  let m : (SingleObj.star M ‚ü∂ SingleObj.star M) := ‚ü¶‚ü®œÉ‚Åª¬π * œÑ, this‚ü©‚üß
  have h1 : J'.map m ‚â´ s.Œπ.app (SingleObj.star M) = s.Œπ.app (SingleObj.star M) :=
    s.Œπ.naturality m
  have h2 : (J'.map m).hom (u.inv.hom ‚ü¶œÑ‚üß) = u.inv.hom ‚ü¶œÉ‚üß := by
    erw [(help441 F V U h A u m : J'.map m = u.hom ‚â´ œÜ m ‚â´ u.inv)]
    show Action.Hom.hom (u.inv ‚â´ u.hom ‚â´ œÜ m ‚â´ u.inv) ‚ü¶œÑ‚üß = Action.Hom.hom u.inv ‚ü¶œÉ‚üß
    simp only [Iso.inv_hom_id_assoc, Action.comp_hom, FintypeCat.comp_apply]
    apply congrArg
    show ‚ü¶œÑ * (œÉ‚Åª¬π * œÑ)‚Åª¬π‚üß = ‚ü¶œÉ‚üß
    simp only [mul_inv_rev, _root_.inv_inv, mul_inv_cancel_left]
  have h3 : (u.inv ‚â´ s.Œπ.app (SingleObj.star M)).hom ‚ü¶œÉ‚üß
      = (u.inv ‚â´ J'.map m ‚â´ s.Œπ.app (SingleObj.star M)).hom ‚ü¶œÑ‚üß := by
    show (u.inv ‚â´ s.Œπ.app (SingleObj.star M)).hom ‚ü¶œÉ‚üß
      = (s.Œπ.app (SingleObj.star M)).hom ((J'.map m).hom (u.inv.hom ‚ü¶œÑ‚üß))
    rw [h2]
    rfl
  rw [h1] at h3
  exact h3
  intro (g : Aut F)
  ext (x : Aut F ‚ß∏ V.toSubgroup)
  obtain ‚ü®œÉ, hœÉ‚ü© := Quotient.exists_rep x
  rw [‚ÜêhœÉ]
  simp only [MonoidHom.coe_comp, MulEquiv.coe_toMonoidHom, Function.comp_apply,
    MulEquiv.symm_trans_apply, id_eq, Action.comp_hom, FintypeCat.comp_apply,
    InvMemClass.coe_inv, eq_mpr_eq_cast]
  have : ((functorToAction F).obj A).œÅ g ‚â´ (s.Œπ.app (SingleObj.star M)).hom
    = (s.Œπ.app (SingleObj.star M)).hom ‚â´ s.pt.œÅ g := (s.Œπ.app (SingleObj.star M)).comm g
  show (((Action.FintypeCat.ofMulAction (Aut F)
    (FintypeCat.of <| Aut F ‚ß∏ U.toSubgroup)).œÅ g ‚â´ u.inv.hom) ‚â´
      (s.Œπ.app (SingleObj.star M)).hom) ‚ü¶œÉ‚üß =
    ((s.Œπ.app (SingleObj.star M)).hom ‚â´ s.pt.œÅ g) (u.inv.hom ‚ü¶œÉ‚üß)
  rw [‚Üêthis, u.inv.comm g]
  rfl

noncomputable def help47 (V U : OpenSubgroup (Aut F)) (h : Subgroup.Normal U.toSubgroup) (A : C)
    (hUinV : U ‚â§ V)
    (u : (functorToAction F).obj A ‚âÖ
        Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ U.toSubgroup)) :
    IsColimit (help46 F V U h A hUinV u) where
  desc := help461 F V U h A hUinV u
  fac s j := by
    apply (cancel_epi u.inv).mp
    apply Action.hom_ext
    ext (x : Aut F ‚ß∏ U.toSubgroup)
    obtain ‚ü®œÉ, hœÉ‚ü© := Quotient.exists_rep x
    rw [‚ÜêhœÉ]
    show Action.Hom.hom (help461 F V U h A hUinV u s)
      (Action.Hom.hom (u.inv ‚â´ u.hom ‚â´ help43 V.toSubgroup U.toSubgroup hUinV) ‚ü¶œÉ‚üß) =
      Action.Hom.hom (s.Œπ.app j) (Action.Hom.hom u.inv ‚ü¶œÉ‚üß)
    simp only [Iso.inv_hom_id_assoc, comp_obj, const_obj_obj]
    rfl
  uniq s := by
    let M := V ‚ß∏ Subgroup.subgroupOf U V
    intro f hf
    apply Action.hom_ext
    ext (x : Aut F ‚ß∏ V.toSubgroup)
    obtain ‚ü®œÉ, hœÉ‚ü© := Quotient.exists_rep x
    rw [‚ÜêhœÉ]
    let y : F.obj A := u.inv.hom ‚ü¶œÉ‚üß
    have h1 : ‚ü¶œÉ‚üß = ((help46 F V U h A hUinV u).Œπ.app (SingleObj.star M)).hom y := by
      show ‚ü¶œÉ‚üß = (u.inv ‚â´ u.hom ‚â´ help43 V.toSubgroup U.toSubgroup hUinV).hom ‚ü¶œÉ‚üß
      simp only [Iso.inv_hom_id_assoc]
      rfl
    show Action.Hom.hom f ‚ü¶œÉ‚üß = (s.Œπ.app (SingleObj.star M)).hom y
    rw [‚Üêhf (SingleObj.star M), h1]
    rfl

lemma ess_surj_of_quotient_by_open (V : OpenSubgroup (Aut F)) :
    ‚àÉ (X : C), Nonempty ((functorToAction F).obj X ‚âÖ
      Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ V.toSubgroup)) := by
  obtain ‚ü®I, hf, hc, hi‚ü© := help1 F V.toSubgroup V.isOpen'
  have : Fintype I := inferInstance
  let Y : C := ‚àè·∂ú fun X : I => X
  have hn : Nonempty (F.obj Y) := help2 F I hc
  obtain ‚ü®A, f, hgal‚ü© := exists_hom_from_galois_of_fiber_nonempty F Y hn
  obtain ‚ü®U, u, hUnormal‚ü© := help0 F A
  have h1 : ‚àÄ œÉ ‚àà U, œÉ.hom.app A = ùüô (F.obj A) := by
    intro œÉ œÉinU
    have hi : (Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ U.toSubgroup)).œÅ œÉ =
        ùüô (Aut F ‚ß∏ U.toSubgroup) := by
      apply FintypeCat.hom_ext
      intro (x : Aut F ‚ß∏ U.toSubgroup)
      obtain ‚ü®œÑ, hœÑ‚ü© := Quotient.exists_rep x
      rw [‚ÜêhœÑ]
      show ‚ü¶œÉ * œÑ‚üß = ‚ü¶œÑ‚üß
      apply Quotient.sound
      apply (QuotientGroup.leftRel_apply).mpr
      simp only [mul_inv_rev]
      apply Subgroup.Normal.conj_mem hUnormal
      exact Subgroup.inv_mem U.toSubgroup œÉinU
    have : Mono u.hom.hom := by
      show Mono ((forget‚ÇÇ _ FintypeCat).map u.hom)
      infer_instance
    apply (cancel_mono u.hom.hom).mp
    erw [u.hom.comm œÉ, hi]
    rfl
  have h2 : ‚àÄ œÉ ‚àà U, ‚àÄ X : I, œÉ.hom.app X = ùüô (F.obj X) := by
    intro œÉ œÉinU ‚ü®X, hX‚ü©
    ext (x : F.obj X)
    have hne : Nonempty (F.obj A) := nonempty_fiber_of_isConnected F A
    let p : A ‚ü∂ X := f ‚â´ Pi.œÄ (fun Z : I => (Z : C)) ‚ü®X, hX‚ü©
    have : IsConnected X := hc X hX
    have : Function.Surjective (F.map p) := surjective_of_nonempty_fiber_of_isConnected F p
    obtain ‚ü®a, ha‚ü© := this x
    simp only [FintypeCat.id_apply, ‚Üêha]
    show (F.map p ‚â´ œÉ.hom.app X) a = F.map p a
    rw [œÉ.hom.naturality, h1 œÉ œÉinU]
    rfl
  have hUinV : (U : Set (Aut F)) ‚â§ V := by
    intro u uinU
    exact hi u (h2 u uinU)
  let U' : Subgroup V := Subgroup.subgroupOf U.toSubgroup V
  have hU'normal : Subgroup.Normal U' := Subgroup.Normal.subgroupOf hUnormal V
  let M := V ‚ß∏ U'
  have : Finite M := finiteQuotientSubgroups V U V.isOpen' U.isOpen'
  let J : SingleObj M ‚•§ C := help45 F V U hUnormal A u
  let i1 : (functorToAction F).obj (colimit J) ‚âÖ
    colimit (J ‚ãô functorToAction F) := preservesColimitIso (functorToAction F) J
  let c : Cocone (J ‚ãô functorToAction F) := help46 F V U hUnormal A hUinV u
  let ci : IsColimit c := help47 F V U hUnormal A hUinV u
  let i2 : colimit (J ‚ãô functorToAction F) ‚âÖ
      Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ V.toSubgroup) :=
    colimit.isoColimitCocone ‚ü®c, ci‚ü©
  let i3 : (functorToAction F).obj (colimit J) ‚âÖ
    Action.FintypeCat.ofMulAction (Aut F) (FintypeCat.of <| Aut F ‚ß∏ V.toSubgroup) := i1 ‚â™‚â´ i2
  let X : C := colimit J
  use X
  exact ‚ü®i3‚ü©

end PreGaloisCategory

end CategoryTheory
