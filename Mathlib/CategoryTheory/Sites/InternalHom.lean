import Mathlib.CategoryTheory.Sites.Over

namespace CategoryTheory

open Category

variable {C : Type*} [Category C] {J : GrothendieckTopology C} {A : Type*} [Category A]

section

variable {I : Type*} {X : C} (Y : I ‚Üí C) (f : ‚àÄ i, Y i ‚ü∂ X)

abbrev Sieve.ofArrows : Sieve X :=
    Sieve.generate (Presieve.ofArrows Y f)

lemma Sieve.mem_ofArrows_iff {W : C} (g : W ‚ü∂ X) :
    Sieve.ofArrows Y f g ‚Üî ‚àÉ (i : I) (a : W ‚ü∂ Y i), g = a ‚â´ f i := by
  dsimp [Sieve.ofArrows]
  constructor
  ¬∑ rintro ‚ü®T, a, b, ‚ü®i‚ü©, rfl‚ü©
    exact ‚ü®i, a, rfl‚ü©
  ¬∑ rintro ‚ü®i, a, rfl‚ü©
    exact ‚ü®_, a, f i, ‚ü®i‚ü©, rfl‚ü©

end

namespace Presheaf

lemma IsSheaf.ext_of_arrows {F : C·µí·µñ ‚•§ A} (hF : IsSheaf J F) {I : Type*} {X : C}
    (Y : I ‚Üí C) (f : ‚àÄ i, Y i ‚ü∂ X)
    (hf : Sieve.ofArrows Y f ‚àà J X)
    {W : A} {a b : W ‚ü∂ F.obj (Opposite.op X)}
    (h : ‚àÄ (i : I), a ‚â´ F.map (f i).op = b ‚â´ F.map (f i).op) :
    a = b := by
  apply hF.hom_ext ‚ü®_, hf‚ü©
  rintro ‚ü®W, g, T, p, q, ‚ü®i‚ü©, rfl‚ü©
  dsimp
  simp only [Functor.map_comp, reassoc_of% (h i)]

section

variable (F G : C·µí·µñ ‚•§ A)

@[simps obj]
def internalHom : C·µí·µñ ‚•§ Type _ where
  obj X := (Over.forget X.unop).op ‚ãô F ‚ü∂ (Over.forget X.unop).op ‚ãô G
  map f := whiskerLeft (Over.map f.unop).op
  map_id := by
    rintro ‚ü®X‚ü©
    dsimp
    ext œÜ ‚ü®Y‚ü©
    simpa [Over.mapId] using œÜ.naturality ((@Over.mapId _ _ X).hom.app Y).op
  map_comp := by
    rintro ‚ü®X‚ü© ‚ü®Y‚ü© ‚ü®Z‚ü© ‚ü®f : Y ‚ü∂ X‚ü© ‚ü®g : Z ‚ü∂ Y‚ü©
    dsimp
    ext œÜ ‚ü®W‚ü©
    simpa [Over.mapComp] using œÜ.naturality ((Over.mapComp g f).hom.app W).op

lemma InternalHom.isAmalgamation_iff {X : C} (S : Sieve X) {T : Type _}
    (x : Presieve.FamilyOfElements (internalHom F G ‚ãô coyoneda.obj (Opposite.op T)) S)
    (hx : x.Compatible) (y : T ‚Üí (internalHom F G).obj ‚ü®X‚ü©) :
    x.IsAmalgamation y ‚Üî ‚àÄ (t : T) (Y : C) (g : Y ‚ü∂ X) (hg : S g),
      (y t).app ‚ü®Over.mk g‚ü© = (x g hg t).app  ‚ü®Over.mk (ùüô Y)‚ü© := by
  constructor
  ¬∑ intro h t Y g hg
    rw [‚Üê h g hg]
    dsimp [internalHom]
    congr
    simp
  ¬∑ intro h Y g hg
    dsimp [internalHom] at y ‚ä¢
    ext t ‚ü®W‚ü©
    dsimp
    refine' (h t W.left (W.hom ‚â´ g) (S.downward_closed hg _)).trans _
    dsimp
    have H := hx (ùüô _) W.hom (S.downward_closed hg W.hom) hg (by simp)
    dsimp at H
    erw [Functor.map_id, comp_id] at H
    rw [H]
    dsimp [internalHom, Over.map, Comma.mapRight]
    congr
    cases W
    simp

/-lemma internalHom_isSheaf (hG : IsSheaf J G) : IsSheaf J (internalHom F G) := by
  intro T X S hS x hx
  apply exists_unique_of_exists_of_unique
  ¬∑ sorry
  ¬∑ intro y‚ÇÅ y‚ÇÇ hy‚ÇÅ hy‚ÇÇ
    dsimp at y‚ÇÅ y‚ÇÇ ‚ä¢
    ext (t : T) ‚ü®W‚ü©
    dsimp
    sorry-/

end

end Presheaf

namespace Sheaf


end Sheaf



end CategoryTheory
