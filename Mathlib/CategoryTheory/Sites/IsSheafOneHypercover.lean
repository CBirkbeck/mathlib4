import Mathlib.CategoryTheory.Sites.OneHypercover

universe w v v' u u'

namespace CategoryTheory

open Category Limits

variable {C : Type u} [Category.{v} C] {J : GrothendieckTopology C}
  {A : Type u'} [Category.{v'} A]

namespace GrothendieckTopology

variable (H : ‚àÄ ‚¶ÉX : C‚¶Ñ, OneHypercover.{w} J X ‚Üí Prop)

class IsGeneratingOneHypercoverFamily : Prop where
  le {X : C} (S : Sieve X) (hS : S ‚àà J X) :
    ‚àÉ (E : J.OneHypercover X) (_ : H E), E.sieve‚ÇÄ ‚â§ S

variable (J) in
lemma exists_oneHypercover_of_isGeneratingOneHypercoverFamily
    [GrothendieckTopology.IsGeneratingOneHypercoverFamily H] {X : C}
    (S : Sieve X) (hS : S ‚àà J X) :
    ‚àÉ (E : J.OneHypercover X) (_ : H E), E.sieve‚ÇÄ ‚â§ S :=
  IsGeneratingOneHypercoverFamily.le _ hS

variable (J) in
abbrev IsGeneratedByOneHypercovers : Prop :=
  IsGeneratingOneHypercoverFamily.{w} (J := J) ‚ä§

structure Cover.Relation‚ÇÇ {X : C} (S : J.Cover X) (f‚ÇÅ f‚ÇÇ : S.Arrow) where
  Y : C
  p‚ÇÅ : Y ‚ü∂ f‚ÇÅ.Y
  p‚ÇÇ : Y ‚ü∂ f‚ÇÇ.Y
  w : p‚ÇÅ ‚â´ f‚ÇÅ.f = p‚ÇÇ ‚â´ f‚ÇÇ.f

namespace Cover

variable {X : C} (S : J.Cover X)

@[simps]
def preOneHypercover  :
    PreOneHypercover X where
  I‚ÇÄ := S.Arrow
  X f := f.Y
  f f := f.f
  I‚ÇÅ f‚ÇÅ f‚ÇÇ := S.Relation‚ÇÇ f‚ÇÅ f‚ÇÇ
  Y _ _ œÅ := œÅ.Y
  p‚ÇÅ _ _ œÅ := œÅ.p‚ÇÅ
  p‚ÇÇ _ _ œÅ := œÅ.p‚ÇÇ
  w _ _ œÅ := œÅ.w

@[simp]
lemma preOneHypercover_sieve‚ÇÄ : S.preOneHypercover.sieve‚ÇÄ = S.1 := by
  ext Y f
  constructor
  ¬∑ rintro ‚ü®_, a, _, ‚ü®f‚ü©, rfl‚ü©
    exact S.1.downward_closed f.hf _
  ¬∑ intro hf
    exact ‚ü®Y, ùüô _, f, ‚ü®(‚ü®_, f, hf‚ü© : S.Arrow)‚ü©, by simp‚ü©

lemma preOneHypercover_sieve‚ÇÅ {i‚ÇÅ i‚ÇÇ : S.preOneHypercover.I‚ÇÄ} {W : C}
    (p‚ÇÅ : W ‚ü∂ S.preOneHypercover.X i‚ÇÅ)
    (p‚ÇÇ : W ‚ü∂ S.preOneHypercover.X i‚ÇÇ)
    (w : p‚ÇÅ ‚â´ i‚ÇÅ.f = p‚ÇÇ ‚â´ i‚ÇÇ.f) :
    S.preOneHypercover.sieve‚ÇÅ p‚ÇÅ p‚ÇÇ = ‚ä§ := by
  ext Y f
  constructor
  ¬∑ simp
  ¬∑ intro
    exact ‚ü®‚ü®_, p‚ÇÅ, p‚ÇÇ, w‚ü©, f, rfl, rfl‚ü©

@[simps toPreOneHypercover]
def OneHypercover {X : C} (S : J.Cover X) :
    J.OneHypercover X where
  toPreOneHypercover := S.preOneHypercover
  mem‚ÇÄ := by simp
  mem‚ÇÅ i‚ÇÅ i‚ÇÇ W p‚ÇÅ p‚ÇÇ w := by simp [preOneHypercover_sieve‚ÇÅ _ _ _ w]

end Cover

instance : IsGeneratedByOneHypercovers.{max u v} J where
  le {X} S hS := ‚ü®Cover.OneHypercover ‚ü®_, hS‚ü©, by simp, by simp‚ü©

end GrothendieckTopology

namespace Presheaf

section

variable (H : ‚àÄ ‚¶ÉX : C‚¶Ñ, GrothendieckTopology.OneHypercover.{w} J X ‚Üí Prop)
  [GrothendieckTopology.IsGeneratingOneHypercoverFamily H] (P : C·µí·µñ ‚•§ A)

namespace IsSheafOfIsGeneratingOneHypercover

open GrothendieckTopology

variable (hP : ‚àÄ ‚¶ÉX : C‚¶Ñ (E : J.OneHypercover X)
  (_ : H E), Nonempty (IsLimit (E.multifork P)))

lemma hom_ext {X : C} (S : Sieve X) (hS : S ‚àà J X) {T : A}
    {x y : T ‚ü∂ P.obj (Opposite.op X)}
    (h : ‚àÄ ‚¶ÉY : C‚¶Ñ (f : Y ‚ü∂ X) (_ : S f), x ‚â´ P.map f.op = y ‚â´ P.map f.op) :
    x = y := by
  obtain ‚ü®E, hE, le‚ü© :=
    J.exists_oneHypercover_of_isGeneratingOneHypercoverFamily H S hS
  apply Multifork.IsLimit.hom_ext (hP E hE).some
  intro j
  exact h _ (le _ (Sieve.ofArrows_mk _ _ _))

variable {P H}
variable {X : C} {S : Sieve X}
  {E : J.OneHypercover X} (hE : H E) (le : E.sieve‚ÇÄ ‚â§ S)

section

variable (F : Multifork (Cover.index ‚ü®S, J.superset_covering le E.mem‚ÇÄ‚ü© P))

noncomputable def lift : F.pt ‚ü∂ P.obj (Opposite.op X) :=
  Multifork.IsLimit.lift (hP E hE).some
    (fun i => F.Œπ ‚ü®_, E.f i, le _ (Sieve.ofArrows_mk _ _ _)‚ü©)
    (fun ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, j‚ü© => F.condition
        { h‚ÇÅ := le _ ((Sieve.ofArrows_mk _ _ i‚ÇÅ))
          h‚ÇÇ := le _ ((Sieve.ofArrows_mk _ _ i‚ÇÇ))
          w := E.w j })

@[reassoc]
lemma fac' (i : E.I‚ÇÄ) :
    lift hP hE le F ‚â´ P.map (E.f i).op =
      F.Œπ ‚ü®_, E.f i, le _ (Sieve.ofArrows_mk _ _ _)‚ü© :=
  Multifork.IsLimit.fac (hP E hE).some _ _ i

lemma fac {Y : C} (f : Y ‚ü∂ X) (hf : S f) :
    lift hP hE le F ‚â´ P.map f.op = F.Œπ ‚ü®Y, f, hf‚ü© := by
  apply hom_ext H P hP _ (J.pullback_stable f E.mem‚ÇÄ)
  intro Z g
  rintro ‚ü®T, a, b, hb, fac‚ü©
  obtain ‚ü®i, rfl, hi‚ü© := hb.exists
  dsimp at hi
  rw [id_comp] at hi
  subst hi
  rw [assoc, ‚Üê P.map_comp, ‚Üê op_comp, ‚Üê fac,
    op_comp, P.map_comp, fac'_assoc]
  exact F.condition
    { h‚ÇÅ := le _ (Sieve.ofArrows_mk _ _ _)
      h‚ÇÇ := hf
      w := fac }

end

noncomputable def isLimit :
    IsLimit (Cover.multifork ‚ü®S, J.superset_covering le E.mem‚ÇÄ‚ü© P) :=
  Multifork.IsLimit.mk _ (fun F => lift hP hE le F) (fun F => by
    rintro ‚ü®Y, f, hf‚ü©
    apply fac) (fun F m hm => by
      apply hom_ext H P hP S (J.superset_covering le E.mem‚ÇÄ)
      intro Y f hf
      dsimp
      rw [fac _ _ _ _ _ hf]
      exact hm ‚ü®_, _, hf‚ü©)

end IsSheafOfIsGeneratingOneHypercover

lemma isSheaf_iff_of_isGeneratingOneHypercover :
    IsSheaf J P ‚Üî ‚àÄ ‚¶ÉX : C‚¶Ñ (E : J.OneHypercover X)
      (_ : H E), Nonempty (IsLimit (E.multifork P)) := by
  constructor
  ¬∑ intro hP X E _
    exact ‚ü®E.isLimitMultifork ‚ü®_, hP‚ü©‚ü©
  ¬∑ intro hP
    rw [isSheaf_iff_multifork]
    rintro X ‚ü®S, hS‚ü©
    obtain ‚ü®E, hE, le‚ü© :=
      J.exists_oneHypercover_of_isGeneratingOneHypercoverFamily H S hS
    exact ‚ü®IsSheafOfIsGeneratingOneHypercover.isLimit hP hE le‚ü©

end

variable (J)

lemma isSheaf_iff_of_isGeneratedByOneHypercovers
      [GrothendieckTopology.IsGeneratedByOneHypercovers.{w} J]
      (P : C·µí·µñ ‚•§ A) :
    IsSheaf J P ‚Üî ‚àÄ ‚¶ÉX : C‚¶Ñ (E : GrothendieckTopology.OneHypercover.{w} J X),
        Nonempty (IsLimit (E.multifork P)) := by
  rw [isSheaf_iff_of_isGeneratingOneHypercover.{w} ‚ä§]
  simp

end Presheaf

end CategoryTheory
