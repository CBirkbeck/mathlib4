/-
Copyright (c) 2023 Dagur Asgeirsson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Dagur Asgeirsson, Filippo A. E. Nuccio, Riccardo Brasca
-/
import Mathlib.CategoryTheory.Limits.Final
import Mathlib.CategoryTheory.Preadditive.Projective
import Mathlib.CategoryTheory.Sites.Canonical
import Mathlib.CategoryTheory.Sites.Coherent.Basic
/-!

# Sheaves for the regular topology

This file characterises sheaves for the regular topology.

## Main results

* `isSheaf_iff_equalizerCondition`:¬†In a preregular category with pullbacks, the sheaves for the
  regular topology are precisely the presheaves satisfying an equaliser condition with respect to
  effective epimorphisms.

* `isSheaf_of_projective`: In a preregular category in which every object is projective, every
  presheaf is a sheaf for the regular topology.
-/

namespace CategoryTheory

open Limits

variable {C D E : Type*} [Category C] [Category D] [Category E]

open Opposite Presieve Functor

/-- A presieve is *regular* if it consists of a single effective epimorphism. -/
class Presieve.regular {X : C} (R : Presieve X) : Prop where
  /-- `R` consists of a single epimorphism. -/
  single_epi : ‚àÉ (Y : C) (f : Y ‚ü∂ X), R = Presieve.ofArrows (fun (_ : Unit) ‚Ü¶ Y)
    (fun (_ : Unit) ‚Ü¶ f) ‚àß EffectiveEpi f

namespace regularTopology

lemma equalizerCondition_w (P : C·µí·µñ ‚•§ D) {X B : C} {œÄ : X ‚ü∂ B} (c : PullbackCone œÄ œÄ) :
    P.map œÄ.op ‚â´ P.map c.fst.op = P.map œÄ.op ‚â´ P.map c.snd.op := by
  simp only [‚Üê Functor.map_comp, ‚Üê op_comp, c.condition]

def SingleEqualizerCondition (P : C·µí·µñ ‚•§ D) ‚¶ÉX B : C‚¶Ñ (œÄ : X ‚ü∂ B) : Prop :=
  ‚àÄ (c : PullbackCone œÄ œÄ) (_ : IsLimit c),
    Nonempty (IsLimit (Fork.ofŒπ (P.map œÄ.op) (equalizerCondition_w P c)))

/--
A contravariant functor on `C` satisfies `EqualizerCondition`¬†if it takes kernel pairs of effective
epimorphisms to equalizer diagrams.
-/
def EqualizerCondition (P : C·µí·µñ ‚•§ D) : Prop :=
  ‚àÄ ‚¶ÉX B : C‚¶Ñ (œÄ : X ‚ü∂ B) [EffectiveEpi œÄ], SingleEqualizerCondition P œÄ

/-- The equalizer condition is preserved by natural isomorphism. -/
theorem equalizerCondition_of_natIso {P P' : C·µí·µñ ‚•§ D} (i : P ‚âÖ P')
    (hP : EqualizerCondition P) : EqualizerCondition P' := fun X B œÄ _ c hc ‚Ü¶
  ‚ü®Fork.isLimitOfIsos _ (hP œÄ c hc).some _ (i.app _) (i.app _) (i.app _)‚ü©

/-- Precomposing with a pullback-preserving functor preserves the equalizer condition. -/
theorem equalizerCondition_precomp_of_preservesPullback (P : C·µí·µñ ‚•§ D) (F : E ‚•§ C)
    [‚àÄ {X B} (œÄ : X ‚ü∂ B) [EffectiveEpi œÄ], PreservesLimit (cospan œÄ œÄ) F]
    [F.PreservesEffectiveEpis] (hP : EqualizerCondition P) : EqualizerCondition (F.op ‚ãô P) := by
  intro X B œÄ _ c hc
  have h : P.map (F.map œÄ).op = (F.op ‚ãô P).map œÄ.op := by simp
  refine ‚ü®(IsLimit.equivIsoLimit (ForkOfŒπ.ext ?_ _ h)) ?_‚ü©
  ¬∑ simp only [Functor.comp_map, op_map, Quiver.Hom.unop_op, ‚Üê map_comp, ‚Üê op_comp, c.condition]
  ¬∑ refine (hP (F.map œÄ) (PullbackCone.mk (F.map c.fst) (F.map c.snd) ?_) ?_).some
    ¬∑ simp only [‚Üê map_comp, c.condition]
    ¬∑ exact (isLimitMapConePullbackConeEquiv F c.condition)
        (isLimitOfPreserves F (hc.ofIsoLimit (PullbackCone.ext (Iso.refl _) (by simp) (by simp))))

/-- The canonical map to the explicit equalizer. -/
def MapToEqualizer (P : C·µí·µñ ‚•§ Type*) {W X B : C} (f : X ‚ü∂ B)
    (g‚ÇÅ g‚ÇÇ : W ‚ü∂ X) (w : g‚ÇÅ ‚â´ f = g‚ÇÇ ‚â´ f) :
    P.obj (op B) ‚Üí { x : P.obj (op X) | P.map g‚ÇÅ.op x = P.map g‚ÇÇ.op x } := fun t ‚Ü¶
  ‚ü®P.map f.op t, by simp only [Set.mem_setOf_eq, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, w]‚ü©

theorem EqualizerCondition.bijective_mapToEqualizer_pullback (P : C·µí·µñ ‚•§ Type*)
    (hP : EqualizerCondition P) : ‚àÄ (X B : C) (œÄ : X ‚ü∂ B) [EffectiveEpi œÄ] [HasPullback œÄ œÄ],
    Function.Bijective
      (MapToEqualizer P œÄ (pullback.fst (f := œÄ) (g := œÄ)) (pullback.snd (f := œÄ) (g := œÄ))
        pullback.condition) := by
  intro X B œÄ _ _
  specialize hP œÄ _ (pullbackIsPullback œÄ œÄ)
  rw [Types.type_equalizer_iff_unique] at hP
  rw [Function.bijective_iff_existsUnique]
  intro ‚ü®b, hb‚ü©
  obtain ‚ü®a, ha‚ÇÅ, ha‚ÇÇ‚ü© := hP b hb
  refine ‚ü®a, ?_, ?_‚ü©
  ¬∑ simpa [MapToEqualizer] using ha‚ÇÅ
  ¬∑ simpa [MapToEqualizer] using ha‚ÇÇ

theorem EqualizerCondition.mk (P : C·µí·µñ ‚•§ Type*)
    (hP : ‚àÄ (X B : C) (œÄ : X ‚ü∂ B) [EffectiveEpi œÄ] [HasPullback œÄ œÄ], Function.Bijective
    (MapToEqualizer P œÄ (pullback.fst (f := œÄ) (g := œÄ)) (pullback.snd (f := œÄ) (g := œÄ))
    pullback.condition)) : EqualizerCondition P := by
  intro X B œÄ _ c hc
  have : HasPullback œÄ œÄ := ‚ü®c, hc‚ü©
  specialize hP X B œÄ
  rw [Types.type_equalizer_iff_unique]
  rw [Function.bijective_iff_existsUnique] at hP
  intro b hb
  have h‚ÇÅ : ((pullbackIsPullback œÄ œÄ).conePointUniqueUpToIso hc).hom ‚â´ c.fst =
    pullback.fst (f := œÄ) (g := œÄ) := by simp
  have hb' : P.map (pullback.fst (f := œÄ) (g := œÄ)).op b = P.map pullback.snd.op b := by
    rw [‚Üê h‚ÇÅ, op_comp, FunctorToTypes.map_comp_apply, hb]
    simp [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp]
  obtain ‚ü®a, ha‚ÇÅ, ha‚ÇÇ‚ü© := hP ‚ü®b, hb'‚ü©
  refine ‚ü®a, ?_, ?_‚ü©
  ¬∑ simpa [MapToEqualizer] using ha‚ÇÅ
  ¬∑ simpa [MapToEqualizer] using ha‚ÇÇ

lemma equalizerCondition_iff_isIso_lift_w (P : C·µí·µñ ‚•§ Type*) {X B : C} (œÄ : X ‚ü∂ B)
    [HasPullback œÄ œÄ] : P.map œÄ.op ‚â´ P.map (pullback.fst (f := œÄ) (g := œÄ)).op =
    P.map œÄ.op ‚â´ P.map (pullback.snd).op := by
  simp only [‚Üê Functor.map_comp, ‚Üê op_comp, pullback.condition]

lemma mapToEqualizer_eq_comp (P : C·µí·µñ ‚•§ Type*) {X B : C} (œÄ : X ‚ü∂ B)
    [HasPullback œÄ œÄ] : MapToEqualizer P œÄ pullback.fst pullback.snd pullback.condition =
    equalizer.lift (P.map œÄ.op) (equalizerCondition_iff_isIso_lift_w P œÄ) ‚â´
    (Types.equalizerIso _ _).hom := by
  rw [‚Üê Iso.comp_inv_eq (Œ± := Types.equalizerIso _ _)]
  apply equalizer.hom_ext
  aesop

/-- An alternative phrasing of the explicit equalizer condition, using more categorical language. -/
theorem equalizerCondition_iff_isIso_lift (P : C·µí·µñ ‚•§ Type*) : EqualizerCondition P ‚Üî
    ‚àÄ (X B : C) (œÄ : X ‚ü∂ B) [EffectiveEpi œÄ] [HasPullback œÄ œÄ], IsIso
    (equalizer.lift (P.map œÄ.op) (equalizerCondition_iff_isIso_lift_w P œÄ)) := by
  constructor
  ¬∑ intro hP X B œÄ _ _
    have h := hP.bijective_mapToEqualizer_pullback _ X B œÄ
    rw [‚Üê isIso_iff_bijective, mapToEqualizer_eq_comp] at h
    exact IsIso.of_isIso_comp_right (equalizer.lift (P.map œÄ.op)
      (equalizerCondition_iff_isIso_lift_w P œÄ))
      (Types.equalizerIso _ _).hom
  ¬∑ intro hP
    apply EqualizerCondition.mk
    intro X B œÄ _ _
    rw [mapToEqualizer_eq_comp, ‚Üê isIso_iff_bijective]
    infer_instance

/-- `P`¬†satisfies the equalizer condition iff its precomposition by an equivalence does. -/
theorem equalizerCondition_iff_of_equivalence (P : C·µí·µñ ‚•§ D)
    (e : C ‚âå E) : EqualizerCondition P ‚Üî EqualizerCondition (e.op.inverse ‚ãô P) :=
  ‚ü®fun h ‚Ü¶ equalizerCondition_precomp_of_preservesPullback P e.inverse h, fun h ‚Ü¶
    equalizerCondition_of_natIso (e.op.funInvIdAssoc P)
      (equalizerCondition_precomp_of_preservesPullback (e.op.inverse ‚ãô P) e.functor h)‚ü©

lemma equalizerConditionMap_iff_nonempty_isLimit (P : C·µí·µñ ‚•§ D) ‚¶ÉX B : C‚¶Ñ (œÄ : X ‚ü∂ B)
    [EffectiveEpi œÄ] [HasPullback œÄ œÄ]:
    SingleEqualizerCondition P œÄ ‚Üî
      Nonempty (IsLimit (P.mapCone
        (Sieve.ofArrows (fun (_ : Unit) => X) (fun _ => œÄ)).arrows.cocone.op)) := by
  unfold SingleEqualizerCondition
  constructor
  ¬∑ intro h
    let c : PullbackCone œÄ œÄ := PullbackCone.mk pullback.fst pullback.snd pullback.condition
    let hc : IsLimit c := pullbackIsPullback œÄ œÄ
    let S := (Sieve.ofArrows (fun (_ : Unit) => X) (fun _ => œÄ)).arrows
    let E := @FullSubcategory (Over B) (fun f ‚Ü¶ S f.hom)
    let F : E·µí·µñ ‚•§ D := S.diagram.op ‚ãô P
    let G := parallelPair (P.map (PullbackCone.fst c).op) (P.map (PullbackCone.snd c).op)
    let X' : E := ‚ü®Over.mk œÄ, ‚ü®_, ùüô _, œÄ, ofArrows.mk (), Category.id_comp _‚ü©‚ü©
    let P' : E := ‚ü®Over.mk ((pullback.fst (f := œÄ) (g := œÄ)) ‚â´ œÄ),
      ‚ü®_, pullback.fst, œÄ, ofArrows.mk (), rfl‚ü©‚ü©
    let fst : P' ‚ü∂ X' := Over.homMk pullback.fst
    let snd : P' ‚ü∂ X' := Over.homMk pullback.snd pullback.condition.symm
    let H := parallelPair fst.op snd.op
    obtain ‚ü®(lift : ‚àÄ s : Cone G, _), fac : ‚àÄ s : Cone G, _, uniq : ‚àÄ s : Cone G, _‚ü© := (h c hc).some
    let i : H ‚ãô F ‚âÖ G := by
      refine parallelPair.ext (Iso.refl _) (Iso.refl _) ?_ ?_
      all_goals simp only [id_obj, comp_obj, parallelPair_obj_zero, op_obj, unop_op,
          fullSubcategoryInclusion.obj, Over.forget_obj, Over.mk_left, parallelPair_obj_one,
          Functor.comp_map, parallelPair_map_left, op_map, Quiver.Hom.unop_op,
          fullSubcategoryInclusion.map, Over.forget_map, Over.homMk_left, Iso.refl_hom,
          Category.comp_id, Category.id_comp, H, fst, snd, F, G]; rfl
    refine ‚ü®?_‚ü©
    let hhh : IsLimit
        ((P.mapCone (Sieve.ofArrows (fun x ‚Ü¶ X) fun x ‚Ü¶ œÄ).arrows.cocone.op).whisker H) := by
      refine IsLimit.equivOfNatIsoOfIso i.symm _ _ ?_ (h c hc).some
      refine Cones.ext ?_ ?_
      ¬∑ rfl
      ¬∑ rintro ‚ü®_ | _‚ü©
        ¬∑ simp only [id_obj, comp_obj, Functor.comp_map, Iso.refl_hom, id_eq, eq_mpr_eq_cast,
            const_obj_obj, parallelPair_map_right, Quiver.Hom.unop_op, Over.homMk_left, Iso.symm_hom,
            Cones.postcompose_obj_pt, Fork.ofŒπ_pt, Cones.postcompose_obj_œÄ, NatTrans.comp_app,
            Fork.ofŒπ_œÄ_app, parallelPair.ext_inv_app, Iso.refl_inv, Sieve.generate_apply,
            Cone.whisker_pt, mapCone_pt, Cocone.op_pt, Cocone.whisker_pt, Over.forgetCocone_pt,
            Cone.whisker_œÄ, whiskerLeft_app, mapCone_œÄ_app, op_obj, fullSubcategoryInclusion.obj,
            Over.forget_obj, Cocone.op_œÄ, Cocone.whisker_Œπ, NatTrans.op_app, Over.forgetCocone_Œπ_app,
            Category.id_comp, i]
          erw [Category.comp_id]
          congr
        ¬∑ simp only [id_obj, comp_obj, Functor.comp_map, Iso.refl_hom, id_eq, eq_mpr_eq_cast,
            const_obj_obj, parallelPair_map_right, Quiver.Hom.unop_op, Over.homMk_left, Iso.symm_hom,
            Cones.postcompose_obj_pt, Fork.ofŒπ_pt, Cones.postcompose_obj_œÄ, NatTrans.comp_app,
            Fork.ofŒπ_œÄ_app, parallelPair_obj_one, parallelPair.ext_inv_app, Iso.refl_inv,
            Category.assoc, Sieve.generate_apply, Cone.whisker_pt, mapCone_pt, Cocone.op_pt,
            Cocone.whisker_pt, Over.forgetCocone_pt, Cone.whisker_œÄ, whiskerLeft_app, mapCone_œÄ_app,
            op_obj, fullSubcategoryInclusion.obj, Over.forget_obj, Cocone.op_œÄ, Cocone.whisker_Œπ,
            NatTrans.op_app, Over.forgetCocone_Œπ_app, Category.id_comp, i]
          erw [Category.comp_id, ‚Üê Functor.map_comp]
          congr
    refine ‚ü®fun s ‚Ü¶ hhh.lift (s.whisker H), fun s d ‚Ü¶ ?_, fun s m h ‚Ü¶ ?_‚ü©
    ¬∑ simp
      have h‚ÇÅ := hhh.fac (s.whisker H) WalkingParallelPair.zero
      have h‚ÇÇ := hhh.fac (s.whisker H) WalkingParallelPair.one
      simp [H] at h‚ÇÅ
      simp [H] at h‚ÇÇ
      obtain ‚ü®_, f, g, h, w‚ü© := d.unop.property
      cases h
      rw [‚Üê w]
      simp [H]
      rw [‚Üê Category.assoc, h‚ÇÅ]
      have := s.w (j := op X') (j' := d)
      let ff : d.unop ‚ü∂ X' := Over.homMk (f : _ ‚ü∂ X'.obj.left) w
      rw [‚Üê this ff.op]
      rfl
    ¬∑ refine hhh.uniq (s.whisker H) m ?_
      rintro ‚ü®_ | _‚ü©
      exacts [h _, h _]
  ¬∑ sorry

lemma equalizerCondition_iff_isSheaf (F : C·µí·µñ ‚•§ D) [Preregular C]
    [‚àÄ {Y X : C} (f : Y ‚ü∂ X) [EffectiveEpi f], HasPullback f f] :
    EqualizerCondition F ‚Üî Presheaf.IsSheaf (regularTopology C) F := by
  dsimp [regularTopology]
  rw [Presheaf.isSheaf_iff_isLimit_coverage]
  constructor
  ¬∑ rintro hF X _ ‚ü®Y, f, rfl, _‚ü©
    exact (equalizerConditionMap_iff_nonempty_isLimit F f).1 (hF f)
  ¬∑ intro hF Y X f _
    exact (equalizerConditionMap_iff_nonempty_isLimit F f).2 (hF _ ‚ü®_, f, rfl, inferInstance‚ü©)

lemma EqualizerCondition.isSheafFor {B : C} {S : Presieve B} [S.regular] [S.hasPullbacks]
    {F : C·µí·µñ ‚•§ Type*} (hF : EqualizerCondition F) : S.IsSheafFor F := by
  obtain ‚ü®X, œÄ, hS, œÄsurj‚ü© := Presieve.regular.single_epi (R := S)
  subst hS
  rw [isSheafFor_arrows_iff_pullbacks]
  intro y h
  have : (Presieve.singleton œÄ).hasPullbacks := by rw [‚Üê ofArrows_pUnit]; infer_instance
  have : HasPullback œÄ œÄ := hasPullbacks.has_pullbacks Presieve.singleton.mk Presieve.singleton.mk
  let c : PullbackCone œÄ œÄ := (IsPullback.of_hasPullback œÄ œÄ).cone
  have hc : IsLimit c := IsPullback.isLimit _
  specialize hF œÄ c hc
  rw [Types.type_equalizer_iff_unique] at hF
  obtain ‚ü®t, ht‚ü© := hF (y ()) (h () ())
  exact ‚ü®t, fun _ ‚Ü¶ ht.1, fun _ h ‚Ü¶ ht.2 _ (h _)‚ü©

lemma equalizerCondition_of_regular {F : C·µí·µñ ‚•§ Type*}
    (hSF : ‚àÄ {B : C} (S : Presieve B) [S.regular] [S.hasPullbacks], S.IsSheafFor F) :
    EqualizerCondition F := by
  apply EqualizerCondition.mk
  intro X B œÄ _ _
  have : (ofArrows (fun _ ‚Ü¶ X) (fun _ ‚Ü¶ œÄ)).regular := ‚ü®X, œÄ, rfl, inferInstance‚ü©
  have : (ofArrows (fun () ‚Ü¶ X) (fun _ ‚Ü¶ œÄ)).hasPullbacks := ‚ü®
      fun hf _ hg ‚Ü¶ (by cases hf; cases hg; infer_instance)‚ü©
  specialize hSF (ofArrows (fun () ‚Ü¶ X) (fun _ ‚Ü¶ œÄ))
  rw [isSheafFor_arrows_iff_pullbacks] at hSF
  rw [Function.bijective_iff_existsUnique]
  intro ‚ü®x, hx‚ü©
  obtain ‚ü®t, ht, ht'‚ü© := hSF (fun _ ‚Ü¶ x) (fun _ _ ‚Ü¶ hx)
  refine ‚ü®t, ?_, fun y h ‚Ü¶ ht' y ?_‚ü©
  ¬∑ simpa [MapToEqualizer] using ht ()
  ¬∑ simpa [MapToEqualizer] using h

lemma isSheafFor_regular_of_projective {X : C} (S : Presieve X) [S.regular] [Projective X]
    (F : C·µí·µñ ‚•§ Type*) : S.IsSheafFor F := by
  obtain ‚ü®Y, f, rfl, hf‚ü© := Presieve.regular.single_epi (R := S)
  rw [isSheafFor_arrows_iff]
  refine fun x hx ‚Ü¶ ‚ü®F.map (Projective.factorThru (ùüô _) f).op <| x (), fun _ ‚Ü¶ ?_, fun y h ‚Ü¶ ?_‚ü©
  ¬∑ simpa using (hx () () Y (ùüô Y) (f ‚â´ (Projective.factorThru (ùüô _) f)) (by simp)).symm
  ¬∑ simp only [‚Üê h (), ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, Projective.factorThru_comp,
      op_id, FunctorToTypes.map_id_apply]

/-- A presheaf is a sheaf for the regular topology iff it satisfies `EqualizerCondition` -/
theorem EqualizerCondition.isSheaf_iff (F : C·µí·µñ ‚•§ Type*) [Preregular C]
    [h : ‚àÄ {Y X : C} (f : Y ‚ü∂ X) [EffectiveEpi f], HasPullback f f]  :
    Presieve.IsSheaf (regularTopology C) F ‚Üî EqualizerCondition F := by
  rw [‚Üê isSheaf_iff_isSheaf_of_type]
  exact (@equalizerCondition_iff_isSheaf _ _ _ _ F _ h).symm
    -- why doesn't typeclass inference find `h`?
  -- rw [regularTopology, Presieve.isSheaf_coverage]
  -- refine ‚ü®fun h ‚Ü¶ equalizerCondition_of_regular fun S ‚ü®Y, f, hh‚ü© _ ‚Ü¶ h S ‚ü®Y, f, hh‚ü©, ?_‚ü©
  -- rintro h X S ‚ü®Y, f, rfl, hf‚ü©
  -- exact @isSheafFor _ _ _ _ ‚ü®Y, f, rfl, hf‚ü© ‚ü®fun g _ h ‚Ü¶ by cases g; cases h; infer_instance‚ü© _ h

/-- Every presheaf is a sheaf for the regular topology if every object of `C` is projective. -/
theorem isSheaf_of_projective (F : C·µí·µñ ‚•§ Type*) [Preregular C] [‚àÄ (X : C), Projective X] :
    IsSheaf (regularTopology C) F :=
  (isSheaf_coverage _ _).mpr fun S ‚ü®_, h‚ü© ‚Ü¶ have : S.regular := ‚ü®_, h‚ü©
    isSheafFor_regular_of_projective _ _

/-- Every Yoneda-presheaf is a sheaf for the regular topology. -/
lemma isSheaf_yoneda_obj [Preregular C] (W : C)  :
    Presieve.IsSheaf (regularTopology C) (yoneda.obj W) := by
  rw [regularTopology, isSheaf_coverage]
  intro X S ‚ü®_, hS‚ü©
  have : S.regular := ‚ü®_, hS‚ü©
  obtain ‚ü®Y, f, rfl, hf‚ü© := Presieve.regular.single_epi (R := S)
  have h_colim := isColimitOfEffectiveEpiStruct f hf.effectiveEpi.some
  rw [‚Üê Sieve.generateSingleton_eq, ‚Üê Presieve.ofArrows_pUnit] at h_colim
  intro x hx
  let x_ext := Presieve.FamilyOfElements.sieveExtend x
  have hx_ext := Presieve.FamilyOfElements.Compatible.sieveExtend hx
  let S := Sieve.generate (Presieve.ofArrows (fun () ‚Ü¶ Y) (fun () ‚Ü¶ f))
  obtain ‚ü®t, t_amalg, t_uniq‚ü© :=
    (Sieve.forallYonedaIsSheaf_iff_colimit S).mpr ‚ü®h_colim‚ü© W x_ext hx_ext
  refine ‚ü®t, ?_, ?_‚ü©
  ¬∑ convert Presieve.isAmalgamation_restrict (Sieve.le_generate
      (Presieve.ofArrows (fun () ‚Ü¶ Y) (fun () ‚Ü¶ f))) _ _ t_amalg
    exact (Presieve.restrict_extend hx).symm
  ¬∑ exact fun y hy ‚Ü¶ t_uniq y <| Presieve.isAmalgamation_sieveExtend x y hy

/-- The regular topology on any preregular category is subcanonical. -/
theorem subcanonical [Preregular C] : Sheaf.Subcanonical (regularTopology C) :=
  Sheaf.Subcanonical.of_yoneda_isSheaf _ isSheaf_yoneda_obj

end regularTopology

end CategoryTheory
