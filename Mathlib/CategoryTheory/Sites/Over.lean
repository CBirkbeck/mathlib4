import Mathlib.CategoryTheory.Sites.Grothendieck

universe v u

namespace CategoryTheory

open Category

variable {C : Type u} [Category.{v} C]

namespace Sieve

def overEquiv {X : C} (Y : Over X) :
    Sieve Y ‚âÉ Sieve Y.left where
  toFun S := Sieve.functorPushforward (Over.forget X) S
  invFun S' := Sieve.functorPullback (Over.forget X) S'
  left_inv S := by
    ext Z g
    dsimp [Presieve.functorPullback, Presieve.functorPushforward]
    constructor
    ¬∑ rintro ‚ü®W, a, b, h, w‚ü©
      let Œ≤ : Z ‚ü∂ W := Over.homMk b
        (by rw [‚Üê Over.w g, w, assoc, Over.w a])
      rw [show g = Œ≤ ‚â´ a by ext; exact w]
      exact S.downward_closed h _
    ¬∑ intro h
      exact ‚ü®Z, g, ùüô _, h, by simp‚ü©
  right_inv S' := by
    ext Z g
    dsimp [Presieve.functorPullback, Presieve.functorPushforward]
    constructor
    ¬∑ rintro ‚ü®W, a, b, h, rfl‚ü©
      exact S'.downward_closed h _
    ¬∑ intro h
      exact ‚ü®Over.mk ((g ‚â´ Y.hom)), Over.homMk g, ùüô _, h, by simp‚ü©

@[simp]
lemma overEquiv_top {X : C} (Y : Over X) :
    overEquiv Y ‚ä§ = ‚ä§ := by
  ext Z g
  simp only [top_apply, iff_true]
  dsimp [overEquiv, Presieve.functorPushforward]
  exact ‚ü®Y, ùüô Y, g, by simp, by simp‚ü©

@[simp]
lemma overEquiv_symm_top {X : C} (Y : Over X) :
    (overEquiv Y).symm ‚ä§ = ‚ä§ :=
  (overEquiv Y).injective (by simp)

lemma overEquiv_pullback {X : C} {Y‚ÇÅ Y‚ÇÇ : Over X} (f : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
    (S : Sieve Y‚ÇÇ) :
    overEquiv _ (S.pullback f) = (overEquiv _ S).pullback f.left := by
  ext Z g
  dsimp [overEquiv, Presieve.functorPushforward]
  constructor
  ¬∑ rintro ‚ü®W, a, b, h, rfl‚ü©
    exact ‚ü®W, a ‚â´ f, b, h, by simp‚ü©
  ¬∑ rintro ‚ü®W, a, b, h, w‚ü©
    let T := Over.mk (b ‚â´ W.hom)
    let c : T ‚ü∂ Y‚ÇÅ := Over.homMk g (by dsimp; rw [‚Üê Over.w a, ‚Üê reassoc_of% w, Over.w f])
    let d : T ‚ü∂ W := Over.homMk b
    refine' ‚ü®T, c, ùüô Z, _, by simp‚ü©
    have eq : c ‚â´ f = d ‚â´ a := by ext; exact w
    rw [eq]
    exact S.downward_closed h _

end Sieve

variable (J : GrothendieckTopology C)

namespace GrothendieckTopology

/-def over (X : C) : GrothendieckTopology (Over X) where
  sieves Y := fun S => Sieve.overEquiv _ S ‚àà J _
  top_mem' Y := by
    change _ ‚àà J Y.left
    simp
  pullback_stable' Y‚ÇÅ Y‚ÇÇ S‚ÇÅ f h‚ÇÅ := by
    change _ ‚àà J _ at h‚ÇÅ ‚ä¢
    rw [Sieve.overEquiv_pullback]
    exact J.pullback_stable _ h‚ÇÅ
  transitive' Y S (hS : _ ‚àà J _) R hR := by
    change _ ‚àà J _
    sorry-/

end GrothendieckTopology


end CategoryTheory
