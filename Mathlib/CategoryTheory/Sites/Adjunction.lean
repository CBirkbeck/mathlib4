/-
Copyright (c) 2021 Adam Topaz. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Adam Topaz
-/
import Mathlib.CategoryTheory.Adjunction.Whiskering
import Mathlib.CategoryTheory.Sites.Sheafification
import Mathlib.CategoryTheory.Sites.Whiskering

#align_import category_theory.sites.adjunction from "leanprover-community/mathlib"@"70fd9563a21e7b963887c9360bd29b2393e6225a"

/-!

In this file, we show that an adjunction `F ‚ä£ G` induces an adjunction between
categories of sheaves, under certain hypotheses on `F` and `G`.

-/


namespace CategoryTheory

open GrothendieckTopology CategoryTheory Limits Opposite

universe w‚ÇÅ w‚ÇÇ v u

variable {C : Type u} [Category.{v} C] (J : GrothendieckTopology C)

variable {D : Type w‚ÇÅ} [Category.{max v u} D]

variable {E : Type w‚ÇÇ} [Category.{max v u} E]

variable {F : D ‚•§ E} {G : E ‚•§ D}

variable [‚àÄ (X : C) (S : J.Cover X) (P : C·µí·µñ ‚•§ D), PreservesLimit (S.index P).multicospan F]

variable [ConcreteCategory.{max v u} D] [PreservesLimits (forget D)]

/-- The forgetful functor from `Sheaf J D` to sheaves of types, for a concrete category `D`
whose forgetful functor preserves the correct limits. -/
abbrev sheafForget : Sheaf J D ‚•§ SheafOfTypes J :=
  sheafCompose J (forget D) ‚ãô (sheafEquivSheafOfTypes J).functor
set_option linter.uppercaseLean3 false in
#align category_theory.Sheaf_forget CategoryTheory.sheafForget

-- We need to sheafify...
variable [‚àÄ (P : C·µí·µñ ‚•§ D) (X : C) (S : J.Cover X), HasMultiequalizer (S.index P)]
  [‚àÄ X : C, HasColimitsOfShape (J.Cover X)·µí·µñ D]
  [‚àÄ X : C, PreservesColimitsOfShape (J.Cover X)·µí·µñ (forget D)] [ReflectsIsomorphisms (forget D)]

namespace Sheaf

noncomputable section

/-- This is the functor sending a sheaf `X : Sheaf J E` to the sheafification
of `X ‚ãô G`. -/
abbrev composeAndSheafify (G : E ‚•§ D) : Sheaf J E ‚•§ Sheaf J D :=
  sheafToPresheaf J E ‚ãô (whiskeringRight _ _ _).obj G ‚ãô presheafToSheaf J D
set_option linter.uppercaseLean3 false in
#align category_theory.Sheaf.compose_and_sheafify CategoryTheory.Sheaf.composeAndSheafify

/-- An auxiliary definition to be used in defining `CategoryTheory.Sheaf.adjunction` below. -/
@[simps]
def composeEquiv (adj : G ‚ä£ F) (X : Sheaf J E) (Y : Sheaf J D) :
    ((composeAndSheafify J G).obj X ‚ü∂ Y) ‚âÉ (X ‚ü∂ (sheafCompose J F).obj Y) :=
  let A := adj.whiskerRight C·µí·µñ
  { toFun := fun Œ∑ => ‚ü®A.homEquiv _ _ (J.toSheafify _ ‚â´ Œ∑.val)‚ü©
    invFun := fun Œ≥ => ‚ü®J.sheafifyLift ((A.homEquiv _ _).symm ((sheafToPresheaf _ _).map Œ≥)) Y.2‚ü©
    left_inv := by
      intro Œ∑
      -- ‚ä¢ (fun Œ≥ => { val := sheafifyLift J (‚Üë(Adjunction.homEquiv A ((sheafToPresheaf ‚Ä¶
      ext1
      -- ‚ä¢ ((fun Œ≥ => { val := sheafifyLift J (‚Üë(Adjunction.homEquiv A ((sheafToPreshea ‚Ä¶
      dsimp
      -- ‚ä¢ sheafifyLift J (‚Üë(Adjunction.homEquiv (Adjunction.whiskerRight C·µí·µñ adj) X.va ‚Ä¶
      symm
      -- ‚ä¢ Œ∑.val = sheafifyLift J (‚Üë(Adjunction.homEquiv (Adjunction.whiskerRight C·µí·µñ a ‚Ä¶
      apply J.sheafifyLift_unique
      -- ‚ä¢ toSheafify J (X.val ‚ãô G) ‚â´ Œ∑.val = ‚Üë(Adjunction.homEquiv (Adjunction.whisker ‚Ä¶
      rw [Equiv.symm_apply_apply]
      -- üéâ no goals
    right_inv := by
      intro Œ≥
      -- ‚ä¢ (fun Œ∑ => { val := ‚Üë(Adjunction.homEquiv A ((sheafToPresheaf J E).obj X) Y.v ‚Ä¶
      ext1
      -- ‚ä¢ ((fun Œ∑ => { val := ‚Üë(Adjunction.homEquiv A ((sheafToPresheaf J E).obj X) Y. ‚Ä¶
      dsimp
      -- ‚ä¢ ‚Üë(Adjunction.homEquiv (Adjunction.whiskerRight C·µí·µñ adj) X.val Y.val) (toShea ‚Ä¶
      rw [J.toSheafify_sheafifyLift, Equiv.apply_symm_apply] }
      -- üéâ no goals
set_option linter.uppercaseLean3 false in
#align category_theory.Sheaf.compose_equiv CategoryTheory.Sheaf.composeEquiv

/-- An adjunction `adj : G ‚ä£ F` with `F : D ‚•§ E` and `G : E ‚•§ D` induces an adjunction
between `Sheaf J D` and `Sheaf J E`, in contexts where one can sheafify `D`-valued presheaves,
and `F` preserves the correct limits. -/
@[simps! unit_app_val counit_app_val]
def adjunction (adj : G ‚ä£ F) : composeAndSheafify J G ‚ä£ sheafCompose J F :=
  Adjunction.mkOfHomEquiv
    { homEquiv := composeEquiv J adj
      homEquiv_naturality_left_symm := fun f g => by
        ext1
        -- ‚ä¢ (‚Üë(composeEquiv J adj X'‚úù Y‚úù).symm (f ‚â´ g)).val = ((composeAndSheafify J G). ‚Ä¶
        dsimp [composeEquiv]
        -- ‚ä¢ sheafifyLift J (‚Üë(Adjunction.homEquiv (Adjunction.whiskerRight C·µí·µñ adj) X'‚úù. ‚Ä¶
        rw [sheafifyMap_sheafifyLift]
        -- ‚ä¢ sheafifyLift J (‚Üë(Adjunction.homEquiv (Adjunction.whiskerRight C·µí·µñ adj) X'‚úù. ‚Ä¶
        erw [Adjunction.homEquiv_naturality_left_symm]
        -- ‚ä¢ sheafifyLift J (((whiskeringRight C·µí·µñ E D).obj G).map f.val ‚â´ ‚Üë(Adjunction.h ‚Ä¶
        rw [whiskeringRight_obj_map]
        -- ‚ä¢ sheafifyLift J (whiskerRight f.val G ‚â´ ‚Üë(Adjunction.homEquiv (Adjunction.whi ‚Ä¶
        rfl
        -- üéâ no goals
      homEquiv_naturality_right := fun f g => by
        ext
        -- ‚ä¢ NatTrans.app (‚Üë(composeEquiv J adj X‚úù Y'‚úù) (f ‚â´ g)).val x‚úù = NatTrans.app (‚Üë ‚Ä¶
        dsimp [composeEquiv]
        -- ‚ä¢ NatTrans.app (‚Üë(Adjunction.homEquiv (Adjunction.whiskerRight C·µí·µñ adj) X‚úù.val ‚Ä¶
        erw [Adjunction.homEquiv_unit, Adjunction.homEquiv_unit]
        -- ‚ä¢ NatTrans.app (NatTrans.app (Adjunction.whiskerRight C·µí·µñ adj).unit X‚úù.val ‚â´ ( ‚Ä¶
        dsimp
        -- ‚ä¢ NatTrans.app (NatTrans.app (Adjunction.whiskerRight C·µí·µñ adj).unit X‚úù.val) x‚úù ‚Ä¶
        simp }
        -- üéâ no goals
set_option linter.uppercaseLean3 false in
#align category_theory.Sheaf.adjunction CategoryTheory.Sheaf.adjunction

instance [IsRightAdjoint F] : IsRightAdjoint (sheafCompose J F) :=
  ‚ü®_, adjunction J (Adjunction.ofRightAdjoint F)‚ü©

section ForgetToType

/-- This is the functor sending a sheaf of types `X` to the sheafification of `X ‚ãô G`. -/
abbrev composeAndSheafifyFromTypes (G : Type max v u ‚•§ D) : SheafOfTypes J ‚•§ Sheaf J D :=
  (sheafEquivSheafOfTypes J).inverse ‚ãô composeAndSheafify _ G
set_option linter.uppercaseLean3 false in
#align category_theory.Sheaf.compose_and_sheafify_from_types CategoryTheory.Sheaf.composeAndSheafifyFromTypes

/-- A variant of the adjunction between sheaf categories, in the case where the right adjoint
is the forgetful functor to sheaves of types. -/
def adjunctionToTypes {G : Type max v u ‚•§ D} (adj : G ‚ä£ forget D) :
    composeAndSheafifyFromTypes J G ‚ä£ sheafForget J :=
  (sheafEquivSheafOfTypes J).symm.toAdjunction.comp (adjunction J adj)
set_option linter.uppercaseLean3 false in
#align category_theory.Sheaf.adjunction_to_types CategoryTheory.Sheaf.adjunctionToTypes

@[simp]
theorem adjunctionToTypes_unit_app_val {G : Type max v u ‚•§ D} (adj : G ‚ä£ forget D)
    (Y : SheafOfTypes J) :
    ((adjunctionToTypes J adj).unit.app Y).val =
      (adj.whiskerRight _).unit.app ((sheafOfTypesToPresheaf J).obj Y) ‚â´
        whiskerRight (J.toSheafify _) (forget D) := by
  dsimp [adjunctionToTypes, Adjunction.comp]
  -- ‚ä¢ (NatTrans.app (Equivalence.toAdjunction (Equivalence.symm (sheafEquivSheafOf ‚Ä¶
  simp
  -- ‚ä¢ (NatTrans.app (Equivalence.toAdjunction (Equivalence.symm (sheafEquivSheafOf ‚Ä¶
  rfl
  -- üéâ no goals
set_option linter.uppercaseLean3 false in
#align category_theory.Sheaf.adjunction_to_types_unit_app_val CategoryTheory.Sheaf.adjunctionToTypes_unit_app_val

@[simp]
theorem adjunctionToTypes_counit_app_val {G : Type max v u ‚•§ D} (adj : G ‚ä£ forget D)
    (X : Sheaf J D) :
    ((adjunctionToTypes J adj).counit.app X).val =
      J.sheafifyLift ((Functor.associator _ _ _).hom ‚â´ (adj.whiskerRight _).counit.app _) X.2 := by
  apply J.sheafifyLift_unique
  -- ‚ä¢ toSheafify J (((whiskeringRight C·µí·µñ (Type (max u v)) D).obj G).obj ((sheafTo ‚Ä¶
  dsimp only [adjunctionToTypes, Adjunction.comp, NatTrans.comp_app,
    instCategorySheaf_comp_val, instCategorySheaf_id_val]
  rw [adjunction_counit_app_val]
  -- ‚ä¢ toSheafify J (((whiskeringRight C·µí·µñ (Type (max u v)) D).obj G).obj ((sheafTo ‚Ä¶
  erw [Category.id_comp, J.sheafifyMap_sheafifyLift, J.toSheafify_sheafifyLift]
  -- ‚ä¢ ((whiskeringRight C·µí·µñ (Type (max u v)) D).obj G).map ((sheafToPresheaf J (Ty ‚Ä¶
  ext
  -- ‚ä¢ ‚Üë(NatTrans.app (((whiskeringRight C·µí·µñ (Type (max u v)) D).obj G).map ((sheaf ‚Ä¶
  dsimp [sheafEquivSheafOfTypes, Equivalence.symm, Equivalence.toAdjunction,
    NatIso.ofComponents, Adjunction.whiskerRight, Adjunction.mkOfUnitCounit]
  simp
  -- üéâ no goals

set_option linter.uppercaseLean3 false in
#align category_theory.Sheaf.adjunction_to_types_counit_app_val CategoryTheory.Sheaf.adjunctionToTypes_counit_app_val

instance [IsRightAdjoint (forget D)] : IsRightAdjoint (sheafForget J : Sheaf J D ‚•§ _) :=
  ‚ü®_, adjunctionToTypes J (Adjunction.ofRightAdjoint (forget D))‚ü©

end ForgetToType

end

end Sheaf

end CategoryTheory
