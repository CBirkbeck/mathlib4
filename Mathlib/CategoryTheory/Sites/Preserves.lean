/-
Copyright (c) 2023 Dagur Asgeirsson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Dagur Asgeirsson
-/
import Mathlib.CategoryTheory.Limits.Opposites
import Mathlib.CategoryTheory.Limits.Preserves.Shapes.Products
import Mathlib.CategoryTheory.Sites.EqualizerSheafCondition
import Mathlib.Tactic.ApplyFun

/-!
# Sheaves preserve products

We prove that a presheaf which satisfies the sheaf condition with respect to certain presieves
preserve "the corresponding products".

More precisely, given a presheaf `F : C·µí·µñ ‚•§ Type*`, we have:

## Main results

* If `F` satisfies the sheaf condition with respect to the empty sieve on the initial object of `C`,
  then `F`¬†preserves terminal objects.
See `preservesTerminalOfIsSheafForEmpty`.

* If `F`¬†furthermore satisfies the sheaf condition with respect to the presieve consisting of the
  inclusion arrows in a coproduct in `C`, then `F`¬†preserves the corresponding product.
See `preservesProductOfIsSheafFor`.
-/

universe v u

namespace CategoryTheory.Presieve

open Limits Opposite

variable {C : Type u} [Category.{v} C] (I : C) (F : C·µí·µñ ‚•§ Type (max u v))
    (hF : (ofArrows (X := I) Empty.elim instIsEmptyEmpty.elim).IsSheafFor F)

/--
If `F`¬†is a presheaf which satisfies the sheaf condition with respect to the empty presieve on the
initial object, then `F`¬†takes the initial object to the terminal object.
-/
noncomputable
def isTerminal_obj_initial_of_isSheafFor_empty_presieve : IsTerminal (F.obj (op I)) := by
  refine @IsTerminal.ofUnique _ _ _ fun Y ‚Ü¶ ?_
  choose t h using hF (by tauto) (by tauto)
  exact ‚ü®‚ü®fun _ ‚Ü¶ t‚ü©, fun a ‚Ü¶ by ext; exact h.2 _ (by tauto)‚ü©

variable {I} (hI : IsInitial I)

/--
If `F`¬†is a presheaf which satisfies the sheaf condition with respect to the empty presieve on the
initial object, then `F`¬†preserves terminal objects.
-/
noncomputable
def preservesTerminalOfIsSheafForEmpty : PreservesLimit (Functor.empty C·µí·µñ) F :=
  haveI := hI.hasInitial
  (preservesTerminalOfIso F
    ((F.mapIso (terminalIsoIsTerminal (terminalOpOfInitial initialIsInitial)) ‚â™‚â´
    (F.mapIso (initialIsoIsInitial hI).symm.op) ‚â™‚â´
    (terminalIsoIsTerminal (isTerminal_obj_initial_of_isSheafFor_empty_presieve I F hF)).symm)))

variable {Œ± : Type} (X : Œ± ‚Üí C) [HasCoproduct X]
    [(ofArrows X (fun i ‚Ü¶ Sigma.Œπ X i)).hasPullbacks]
    (hd : ‚àÄ i j, i ‚â† j ‚Üí IsInitial (pullback (Sigma.Œπ X i) (Sigma.Œπ X j)))
    [‚àÄ i, Mono (Sigma.Œπ X i)]

theorem firstMap_eq_secondMap : Equalizer.Presieve.Arrows.firstMap F X (fun j ‚Ü¶ Sigma.Œπ X j) =
    Equalizer.Presieve.Arrows.secondMap F X (fun j ‚Ü¶ Sigma.Œπ X j) := by
  ext a ‚ü®i, j‚ü©
  simp only [Equalizer.Presieve.Arrows.firstMap, Types.pi_lift_œÄ_apply, types_comp_apply,
    Equalizer.Presieve.Arrows.secondMap]
  by_cases hi : i = j
  ¬∑ subst hi
    suffices pullback.fst (f := Sigma.Œπ X i) (g := Sigma.Œπ X i) =
      pullback.snd (f := Sigma.Œπ X i) (g := Sigma.Œπ X i) by rw [this]
    apply Mono.right_cancellation (f := Sigma.Œπ X i)
    exact pullback.condition
  ¬∑ haveI := preservesTerminalOfIsSheafForEmpty F hF
    haveI := hI.hasInitial
    let i‚ÇÅ : op (pullback (Sigma.Œπ X i) (Sigma.Œπ X j)) ‚âÖ op (‚ä•_ _) :=
      (initialIsoIsInitial (hd i j hi)).op
    let i‚ÇÇ : op (‚ä•_ C) ‚âÖ (‚ä§_ C·µí·µñ) :=
      (terminalIsoIsTerminal (terminalOpOfInitial initialIsInitial)).symm
    let _ := preservesTerminalOfIsSheafForEmpty F hF hI
    apply_fun (F.mapIso i‚ÇÅ ‚â™‚â´ F.mapIso i‚ÇÇ ‚â™‚â´ (PreservesTerminal.iso F)).hom using
      injective_of_mono _
    simp

/--
If `F` is a presheaf which `IsSheafFor` a presieve of arrows and the empty presieve, then it
preserves the product corresponding to the presieve of arrows.
-/
theorem preservesProductOfIsSheafFor : (ofArrows X (fun i ‚Ü¶ Sigma.Œπ X i)).IsSheafFor F ‚Üî
    Nonempty (PreservesLimit (Discrete.functor (fun x ‚Ü¶ op (X x))) F) := by
  have h‚ÇÅ : Pi.lift (fun j ‚Ü¶ Pi.œÄ (fun a ‚Ü¶ (op (X a))) j) = ùüô _ := by ext; simp
  have h‚ÇÇ : (fun j ‚Ü¶ (opCoproductIsoProduct X).inv ‚â´ (Sigma.Œπ X j).op) =
    fun j ‚Ü¶ Pi.œÄ (fun a ‚Ü¶ (op (X a))) j := by ext; exact opCoproductIsoProduct_inv_comp_Œπ _ _
  have h‚ÇÉ : F.map (Pi.lift (fun j ‚Ü¶ (opCoproductIsoProduct X).inv ‚â´ (Sigma.Œπ X j).op)) ‚â´
    piComparison F (fun z ‚Ü¶ op (X z)) =
    (F.map (opCoproductIsoProduct X).inv ‚â´ Pi.lift fun j ‚Ü¶ F.map ((fun j ‚Ü¶ Sigma.Œπ X j) j).op)
  ¬∑ ext j x
    simp only [h‚ÇÇ, h‚ÇÅ, Functor.map_id, Category.id_comp, piComparison, types_comp_apply,
      Types.pi_lift_œÄ_apply, ‚Üê FunctorToTypes.map_comp_apply, congr_fun h‚ÇÇ j]
  have : piComparison F (fun x ‚Ü¶ op (X x)) = F.map (opCoproductIsoProduct X).inv ‚â´
      Equalizer.Presieve.Arrows.forkMap F X (fun i ‚Ü¶ Sigma.Œπ X i)
  ¬∑ rw [Equalizer.Presieve.Arrows.forkMap, ‚Üê h‚ÇÉ, h‚ÇÇ, h‚ÇÅ]
    simp
  refine ‚ü®fun hF' ‚Ü¶ ?_, fun hF' ‚Ü¶ ?_‚ü©
  ¬∑ constructor
    refine @PreservesProduct.ofIsoComparison _ _ _ _ F _ (fun x ‚Ü¶ op (X x)) _ _ ?_
    rw [this]
    refine @IsIso.comp_isIso _ _ _ _ _ _ _ inferInstance ?_
    rw [isIso_iff_bijective, Function.bijective_iff_existsUnique]
    rw [Equalizer.Presieve.Arrows.sheaf_condition, Limits.Types.type_equalizer_iff_unique] at hF'
    exact fun b ‚Ü¶ hF' b (congr_fun (firstMap_eq_secondMap F hF hI X hd) b)
  ¬∑ rw [Equalizer.Presieve.Arrows.sheaf_condition, Limits.Types.type_equalizer_iff_unique]
    let _ := hF'.some
    have hc : IsIso (piComparison F (fun x ‚Ü¶ op (X x))) := inferInstance
    rw [this, isIso_iff_bijective, Function.bijective_iff_existsUnique] at hc
    intro b _
    obtain ‚ü®t, ht‚ÇÅ, ht‚ÇÇ‚ü© := hc b
    refine ‚ü®F.map (opCoproductIsoProduct X).inv t, ht‚ÇÅ, fun y hy ‚Ü¶ ?_‚ü©
    specialize ht‚ÇÇ (F.map (opCoproductIsoProduct X).hom y)
    apply_fun (F.mapIso (opCoproductIsoProduct X)).hom using injective_of_mono _
    simp only [Functor.mapIso_hom, FunctorToTypes.map_hom_map_inv_apply]
    apply ht‚ÇÇ
    simpa only [types_comp_apply, FunctorToTypes.map_inv_map_hom_apply]



end CategoryTheory.Presieve
