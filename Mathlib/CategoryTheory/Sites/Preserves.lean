/-
Copyright (c) 2023 Dagur Asgeirsson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Dagur Asgeirsson
-/
import Mathlib.CategoryTheory.Limits.Opposites
import Mathlib.CategoryTheory.Limits.Preserves.Shapes.Products
import Mathlib.CategoryTheory.Limits.Shapes.DisjointCoproduct
import Mathlib.CategoryTheory.Sites.SheafOfTypes
import Mathlib.Tactic.ApplyFun

universe v u w

open CategoryTheory Limits Opposite

variable {C : Type u} [Category.{v} C] (F : C·µí·µñ ‚•§ Type (max u v)) [HasInitial C]
    (hF : (Presieve.ofArrows (X := ‚ä•_ C) Empty.elim instIsEmptyEmpty.elim).IsSheafFor F)

instance : (Presieve.ofArrows (X := ‚ä•_ C) Empty.elim instIsEmptyEmpty.elim).hasPullbacks := by
  constructor
  intro _ _ _ hf
  cases' hf with i
  exact Empty.elim i

instance : IsEmpty (Œ£(Y : C), {f : Y ‚ü∂ ‚ä•_ C //
    (Presieve.ofArrows (X := ‚ä•_ C) Empty.elim instIsEmptyEmpty.elim) f}) := by
  constructor
  rintro ‚ü®_, _, ‚ü®i‚ü©‚ü©
  exact Empty.elim i

lemma isoTerminalComparisonOfIsSheafForEmpty : IsIso (terminalComparison F) := by
  rw [isIso_iff_bijective, Function.bijective_iff_existsUnique]
  rw [Equalizer.Presieve.sheaf_condition, Limits.Types.type_equalizer_iff_unique] at hF
  intro b
  let S := (Presieve.ofArrows (X := ‚ä•_ C) Empty.elim instIsEmptyEmpty.elim)
  let SO := (fg : (Œ£(Y : C), {f : Y ‚ü∂ ‚ä•_ C // S f}) √ó (Œ£(Y : C), {f : Y ‚ü∂ ‚ä•_ C // S f})) ‚Üí
      F.obj ((op (@pullback _ _ _ _ _ fg.1.2.1 fg.2.2.1
      (Presieve.hasPullbacks.has_pullbacks fg.1.2.2 fg.2.2.2))))
  let i : Equalizer.Presieve.SecondObj F S ‚âÖ SO :=
      (Types.productIso.{(max u v), v} _)
  specialize hF ((Types.productIso.{(max u v), v} _).inv (IsEmpty.elim inferInstance)) ?_
  ¬∑ have hU : Subsingleton SO := (Pi.uniqueOfIsEmpty _).instSubsingleton
    apply_fun i.hom using injective_of_mono _
    exact hU.allEq _ _
  ¬∑ obtain ‚ü®x, _, h‚ü© := hF
    let i' : ‚ä§_ C·µí·µñ ‚âÖ op (‚ä•_ C) := (terminalIsoIsTerminal (terminalOpOfInitial initialIsInitial))
    refine ‚ü®(F.mapIso i').inv x, by simp, ?_‚ü©
    intro z _
    apply_fun (F.mapIso i').hom using injective_of_mono _
    simp only [inv_hom_id_apply]
    apply h
    ext Y g hg
    cases' hg with i
    cases i

/--
If `F`¬†is a presheaf which satisfies the sheaf condition with respect to the empty presieve on the
initial object, then `F`¬†takes the initial object to the terminal object.
-/
noncomputable
def preservesTerminalOfIsSheafForEmpty : PreservesLimit (Functor.empty C·µí·µñ) F :=
  letI := isoTerminalComparisonOfIsSheafForEmpty F hF
  PreservesTerminal.ofIsoComparison F

instance {Œ± : Type w} {X : Œ± ‚Üí C} {B : C} (œÄ : (a : Œ±) ‚Üí X a ‚ü∂ B)
    [(Presieve.ofArrows X œÄ).hasPullbacks] (a b : Œ±) : HasPullback (œÄ a) (œÄ b) :=
  Presieve.hasPullbacks.has_pullbacks (Presieve.ofArrows.mk _) (Presieve.ofArrows.mk _)
-- TODO: move

variable {Œ± : Type} [UnivLE.{w, (max u v)}] {X : Œ± ‚Üí C} [HasCoproduct X]
    [(Presieve.ofArrows X (fun i ‚Ü¶ Sigma.Œπ X i)).hasPullbacks]
    (hd : ‚àÄ i j, i ‚â† j ‚Üí IsInitial (pullback (Sigma.Œπ X i) (Sigma.Œπ X j)))
    [‚àÄ i, Mono (Sigma.Œπ X i)]
-- `Œ±` should be `Type w`

/-- The canonical map from `Equalizer.FirstObj` to a product indexed by `Œ±` -/
noncomputable
def prod_map {B : C} (œÄ : (a : Œ±) ‚Üí X a ‚ü∂ B) (F : C·µí·µñ ‚•§ Type max u v) :
    (‚àè fun (f : (Œ£(Y : C), { f : Y ‚ü∂ B // Presieve.ofArrows X œÄ f })) => F.obj (op f.fst)) ‚ü∂
    ‚àè fun a => F.obj (op (X a)) :=
  Pi.lift (fun a => Pi.œÄ (fun (f : (Œ£(Y : C), { f : Y ‚ü∂ B // Presieve.ofArrows X œÄ f })) =>
    F.obj (op f.fst)) ‚ü®X a, œÄ a, Presieve.ofArrows.mk a‚ü©)

lemma one : F.map (opCoproductIsoProduct X).inv ‚â´
    Equalizer.forkMap F (Presieve.ofArrows X (fun j ‚Ü¶ Sigma.Œπ X j)) ‚â´ prod_map _ F =
    piComparison F (fun z ‚Ü¶ op (X z)) := by
  have : (Equalizer.forkMap F (Presieve.ofArrows X (fun j ‚Ü¶ Sigma.Œπ X j)) ‚â´
      prod_map (fun j ‚Ü¶ Sigma.Œπ X j) F) = Pi.lift (fun j ‚Ü¶ F.map ((fun j ‚Ü¶ Sigma.Œπ X j) j).op) := by
    ext; simp [prod_map, Equalizer.forkMap]
  rw [this]
  have t : Pi.lift (fun j ‚Ü¶ Pi.œÄ (fun a ‚Ü¶ (op (X a))) j) = ùüô _ := by ext; simp -- why not just simp?
  have hh : (fun j ‚Ü¶ (opCoproductIsoProduct X).inv ‚â´ (Sigma.Œπ X j).op) =
      fun j ‚Ü¶ Pi.œÄ (fun a ‚Ü¶ (op (X a))) j
  ¬∑ ext j
    exact opCoproductIsoProduct_inv_comp_Œπ _ _
  have : F.map (Pi.lift (fun j ‚Ü¶ (opCoproductIsoProduct X).inv ‚â´ (Sigma.Œπ X j).op)) ‚â´
      piComparison F (fun z ‚Ü¶ op (X z)) =
      (F.map (opCoproductIsoProduct X).inv ‚â´ Pi.lift fun j ‚Ü¶ F.map ((fun j ‚Ü¶ Sigma.Œπ X j) j).op)
  ¬∑ rw [hh, t]
    ext j x
    simp only [Functor.map_id, Category.id_comp, piComparison, types_comp_apply,
      Types.pi_lift_œÄ_apply, ‚Üê FunctorToTypes.map_comp_apply, congr_fun hh j]
  rw [‚Üê this, hh]
  congr
  ext
  simp [t]

lemma two : Equalizer.Presieve.firstMap F (Presieve.ofArrows X (fun j ‚Ü¶ Sigma.Œπ X j)) =
    Equalizer.Presieve.secondMap F (Presieve.ofArrows X (fun j ‚Ü¶ Sigma.Œπ X j)) := by
  ext a
  simp only [Equalizer.Presieve.SecondObj, Equalizer.Presieve.firstMap,
    Equalizer.Presieve.secondMap]
  ext ‚ü®j‚ü©
  simp only [Discrete.functor_obj, Types.pi_lift_œÄ_apply, types_comp_apply]
  obtain ‚ü®‚ü®Y, f, hf‚ü©, ‚ü®Z, g, hg‚ü©‚ü© := j
  cases' hf with i
  cases' hg with j
  by_cases hi : i = j
  ¬∑ subst hi
    suffices pullback.fst (f := Sigma.Œπ X i) (g := Sigma.Œπ X i) =
      pullback.snd (f := Sigma.Œπ X i) (g := Sigma.Œπ X i) by rw [this]
    apply Mono.right_cancellation (f := Sigma.Œπ X i)
    exact pullback.condition
  ¬∑ haveI := preservesTerminalOfIsSheafForEmpty F hF
    let i‚ÇÅ : op (pullback (Sigma.Œπ X i) (Sigma.Œπ X j)) ‚âÖ op (‚ä•_ _) :=
      (initialIsoIsInitial (hd i j hi)).op
    let i‚ÇÇ : op (‚ä•_ C) ‚âÖ (‚ä§_ C·µí·µñ) :=
      (terminalIsoIsTerminal (terminalOpOfInitial initialIsInitial)).symm
    apply_fun (F.mapIso i‚ÇÅ ‚â™‚â´ F.mapIso i‚ÇÇ ‚â™‚â´ (PreservesTerminal.iso F)).hom using
      injective_of_mono _
    simp

lemma sigma_surjective {B : C} (œÄ : (a : Œ±) ‚Üí X a ‚ü∂ B) :
    Function.Surjective (fun a ‚Ü¶ ‚ü®X a, œÄ a, Presieve.ofArrows.mk a‚ü© :
    Œ± ‚Üí Œ£(Y : C), { f : Y ‚ü∂ B // Presieve.ofArrows X œÄ f }) :=
  fun ‚ü®_, ‚ü®_, hf‚ü©‚ü© ‚Ü¶ by cases' hf with a _; exact ‚ü®a, rfl‚ü©

lemma prod_map_inj : Function.Injective (prod_map (fun j ‚Ü¶ Sigma.Œπ X j) F) := by
  intro a b h
  ext ‚ü®f‚ü©
  obtain ‚ü®c, hc‚ü© := sigma_surjective (fun j ‚Ü¶ Sigma.Œπ X j) f
  subst hc
  apply_fun Pi.œÄ (fun i ‚Ü¶ F.obj (op (X i))) c at h
  simp only [prod_map, Types.pi_lift_œÄ_apply] at h
  exact h

variable (hF' : (Presieve.ofArrows X (fun i ‚Ü¶ Sigma.Œπ X i)).IsSheafFor F)

lemma map_eq {B : C} (œÄ : (a : Œ±) ‚Üí X a ‚ü∂ B)
    (f : Œ£(Y : C), { f : Y ‚ü∂ B // Presieve.ofArrows X œÄ f }) :
    ‚àÉ i, f.fst = X i := by
  obtain ‚ü®Y, g, h‚ü© := f
  cases' h with i
  exact ‚ü®i, rfl‚ü©

variable (X) in
lemma sigma_injective : Function.Injective
  ((fun a ‚Ü¶ ‚ü®X a.val, Sigma.Œπ X a.val, Presieve.ofArrows.mk a.val‚ü©) :
   {a : Œ± // ‚àÄ b, X a = X b ‚Üí a = b} ‚Üí
    Œ£(Y : C), {f : Y ‚ü∂ ‚àê X // (Presieve.ofArrows X (fun i ‚Ü¶ Sigma.Œπ X i)) f}) := by
  intro a b h
  simp only [Sigma.mk.inj_iff] at h
  ext
  exact a.prop b h.1

noncomputable
instance : PreservesLimit (Discrete.functor (fun x ‚Ü¶ op (X x))) F := by
  refine @PreservesProduct.ofIsoComparison _ _ _ _ F _ (fun x ‚Ü¶ op (X x)) _ _ ?_
  rw [‚Üê one F]
  refine @IsIso.comp_isIso _ _ _ _ _ _ _ inferInstance (@IsIso.comp_isIso _ _ _ _ _ _ _ ?_ ?_)
  ¬∑ rw [isIso_iff_bijective, Function.bijective_iff_existsUnique]
    rw [Equalizer.Presieve.sheaf_condition, Limits.Types.type_equalizer_iff_unique] at hF'
    exact fun b ‚Ü¶ hF' b (congr_fun (two F hF hd) b)
  ¬∑ rw [isIso_iff_bijective]
    refine ‚ü®prod_map_inj _, ?_‚ü©
    intro a
    dsimp at a
    let i : ‚àè (fun x ‚Ü¶ F.obj (op (X x))) ‚âÖ (x : Œ±) ‚Üí F.obj (op (X x)) := Types.productIso _
    let b : (f : Œ£(Y : C), {f : Y ‚ü∂ ‚àê X // (Presieve.ofArrows X (fun i ‚Ü¶ Sigma.Œπ X i)) f}) ‚Üí
        F.obj (op f.fst) := by
      intro f
      rw [(map_eq (fun j ‚Ü¶ Sigma.Œπ X j) f).choose_spec]
      exact i.hom a (map_eq (fun j ‚Ü¶ Sigma.Œπ X j) f).choose
    use (Types.productIso.{max u v, v} _).inv b
    simp only [prod_map, eq_mpr_eq_cast, Types.productIso_hom_comp_eval_apply]
    ext ‚ü®j‚ü©
    simp only [Discrete.functor_obj, Pi.lift, Types.pi_lift_œÄ_apply, Pi.œÄ]
    sorry
