import Mathlib.CategoryTheory.Sites.CoverPreserving
import Mathlib.CategoryTheory.Sites.CoverLifting
import Mathlib.CategoryTheory.Sites.OneHypercover

universe w v‚ÇÉ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ u‚ÇÉ

namespace CategoryTheory

open Category Limits

variable {C‚ÇÄ : Type u‚ÇÅ} [Category.{v‚ÇÅ} C‚ÇÄ] {C : Type u‚ÇÇ} [Category.{v‚ÇÇ} C]
  (F : C‚ÇÄ ‚•§ C) (J‚ÇÄ : GrothendieckTopology C‚ÇÄ) (J : GrothendieckTopology C)
  {A : Type u‚ÇÉ} [Category.{v‚ÇÉ} A]

namespace Functor

structure PreOneHypercoverDenseData (S : C) where
  I‚ÇÄ : Type w
  X (i : I‚ÇÄ) : C‚ÇÄ
  f (i : I‚ÇÄ) : F.obj (X i) ‚ü∂ S
  I‚ÇÅ (i‚ÇÅ i‚ÇÇ : I‚ÇÄ) : Type w
  Y ‚¶Éi‚ÇÅ i‚ÇÇ : I‚ÇÄ‚¶Ñ (j : I‚ÇÅ i‚ÇÅ i‚ÇÇ) : C‚ÇÄ
  p‚ÇÅ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚ÇÄ‚¶Ñ (j : I‚ÇÅ i‚ÇÅ i‚ÇÇ) : Y j ‚ü∂ X i‚ÇÅ
  p‚ÇÇ ‚¶Éi‚ÇÅ i‚ÇÇ : I‚ÇÄ‚¶Ñ (j : I‚ÇÅ i‚ÇÅ i‚ÇÇ) : Y j ‚ü∂ X i‚ÇÇ
  w ‚¶Éi‚ÇÅ i‚ÇÇ : I‚ÇÄ‚¶Ñ (j : I‚ÇÅ i‚ÇÅ i‚ÇÇ) : F.map (p‚ÇÅ j) ‚â´ f i‚ÇÅ = F.map (p‚ÇÇ j) ‚â´ f i‚ÇÇ

namespace PreOneHypercoverDenseData

attribute [reassoc] w

variable {F}

variable {X : C} (data : F.PreOneHypercoverDenseData X)

@[simps]
def toPreOneHypercover : PreOneHypercover X where
  I‚ÇÄ := data.I‚ÇÄ
  X i := F.obj (data.X i)
  f i := data.f i
  I‚ÇÅ := data.I‚ÇÅ
  Y _ _ j := F.obj (data.Y j)
  p‚ÇÅ _ _ j := F.map (data.p‚ÇÅ j)
  p‚ÇÇ _ _ j := F.map (data.p‚ÇÇ j)
  w := data.w

/-- The sigma type of all `data.I‚ÇÅ i‚ÇÅ i‚ÇÇ` for `‚ü®i‚ÇÅ, i‚ÇÇ‚ü© : data.I‚ÇÄ √ó data.I‚ÇÄ`. -/
abbrev I‚ÇÅ' : Type w := Sigma (fun (i : data.I‚ÇÄ √ó data.I‚ÇÄ) => data.I‚ÇÅ i.1 i.2)

@[simps]
def multicospanIndex (P : C‚ÇÄ·µí·µñ ‚•§ A) : MulticospanIndex A where
  L := data.I‚ÇÄ
  R := data.I‚ÇÅ'
  fstTo j := j.1.1
  sndTo j := j.1.2
  left i := P.obj (Opposite.op (data.X i))
  right j := P.obj (Opposite.op (data.Y j.2))
  fst j := P.map ((data.p‚ÇÅ j.2).op)
  snd j := P.map ((data.p‚ÇÇ j.2).op)

@[simps]
def sieve‚ÇÅ‚ÇÄ {i‚ÇÅ i‚ÇÇ : data.I‚ÇÄ} {W‚ÇÄ : C‚ÇÄ} (p‚ÇÅ : W‚ÇÄ ‚ü∂ data.X i‚ÇÅ) (p‚ÇÇ : W‚ÇÄ ‚ü∂ data.X i‚ÇÇ) :
    Sieve W‚ÇÄ where
  arrows Z‚ÇÄ g := ‚àÉ (j : data.I‚ÇÅ i‚ÇÅ i‚ÇÇ) (h : Z‚ÇÄ ‚ü∂ data.Y j),
    g ‚â´ p‚ÇÅ = h ‚â´ data.p‚ÇÅ j ‚àß g ‚â´ p‚ÇÇ = h ‚â´ data.p‚ÇÇ j
  downward_closed := by
    rintro Z Z' g ‚ü®j, h, fac‚ÇÅ, fac‚ÇÇ‚ü© œÜ
    exact ‚ü®j, œÜ ‚â´ h, by simpa using œÜ ‚â´= fac‚ÇÅ, by simpa using œÜ ‚â´= fac‚ÇÇ‚ü©

end PreOneHypercoverDenseData

structure OneHypercoverDenseData (S : C) extends PreOneHypercoverDenseData.{w} F S where
  mem‚ÇÄ : toPreOneHypercoverDenseData.toPreOneHypercover.sieve‚ÇÄ ‚àà J S
  mem‚ÇÅ‚ÇÄ (i‚ÇÅ i‚ÇÇ : I‚ÇÄ) ‚¶ÉW‚ÇÄ : C‚ÇÄ‚¶Ñ (p‚ÇÅ : W‚ÇÄ ‚ü∂ X i‚ÇÅ) (p‚ÇÇ : W‚ÇÄ ‚ü∂ X i‚ÇÇ)
    (w : F.map p‚ÇÅ ‚â´ f i‚ÇÅ = F.map p‚ÇÇ ‚â´ f i‚ÇÇ) :
    toPreOneHypercoverDenseData.sieve‚ÇÅ‚ÇÄ p‚ÇÅ p‚ÇÇ ‚àà J‚ÇÄ W‚ÇÄ

class IsOneHypercoverDense extends F.IsCocontinuous J‚ÇÄ J : Prop where
  coverPreserving : CoverPreserving J‚ÇÄ J F
  nonempty_oneHypercoverDenseData (X : C) :
    Nonempty (OneHypercoverDenseData.{w} F J‚ÇÄ J X)

variable [IsOneHypercoverDense.{w} F J‚ÇÄ J]

lemma coverPreserving_of_isOneHypercoverDense : CoverPreserving J‚ÇÄ J F :=
  IsOneHypercoverDense.coverPreserving

noncomputable def oneHypercoverDenseData (X : C) : F.OneHypercoverDenseData J‚ÇÄ J X :=
  (IsOneHypercoverDense.nonempty_oneHypercoverDenseData X).some

namespace OneHypercoverDenseData

variable {F J‚ÇÄ J}
variable {X : C} (data : F.OneHypercoverDenseData J‚ÇÄ J X) [F.Full]

lemma mem‚ÇÅ (i‚ÇÅ i‚ÇÇ : data.I‚ÇÄ) {W : C} (p‚ÇÅ : W ‚ü∂ F.obj (data.X i‚ÇÅ)) (p‚ÇÇ : W ‚ü∂ F.obj (data.X i‚ÇÇ))
    (w : p‚ÇÅ ‚â´ data.f i‚ÇÅ = p‚ÇÇ ‚â´ data.f i‚ÇÇ) : data.toPreOneHypercover.sieve‚ÇÅ p‚ÇÅ p‚ÇÇ ‚àà J W := by
  have hF : CoverPreserving J‚ÇÄ J F := IsOneHypercoverDense.coverPreserving
  let data‚ÇÅ := F.oneHypercoverDenseData J‚ÇÄ J W
  let R : ‚àÄ ‚¶ÉY : C‚¶Ñ ‚¶Éf : Y ‚ü∂ W‚¶Ñ, data‚ÇÅ.toPreOneHypercover.sieve‚ÇÄ.arrows f ‚Üí Sieve Y :=
    fun Y f hf => ((data.sieve‚ÇÅ‚ÇÄ (F.preimage (data‚ÇÅ.f (Sieve.ofArrows.i hf) ‚â´ p‚ÇÅ))
      (F.preimage (data‚ÇÅ.f (Sieve.ofArrows.i hf) ‚â´ p‚ÇÇ))).functorPushforward F).pullback
        (Sieve.ofArrows.a hf)
  refine J.superset_covering ?_ (J.bind_covering data‚ÇÅ.mem‚ÇÄ (R := R) ?_)
  ¬∑ rintro Y f ‚ü®T, a, b, hb, ha, rfl‚ü©
    obtain ‚ü®X‚ÇÄ, c, d, hc, fac‚ü© := ha
    obtain ‚ü®j, e, w‚ÇÅ, w‚ÇÇ‚ü© := hc
    refine' ‚ü®j, d ‚â´ F.map e, _, _‚ü©
    ¬∑ rw [Sieve.ofArrows.fac hb, assoc, assoc, assoc]
      dsimp
      rw [‚Üê F.map_comp, ‚Üê w‚ÇÅ, F.map_comp, F.map_preimage, reassoc_of% fac]
    ¬∑ rw [Sieve.ofArrows.fac hb, assoc, assoc, assoc]
      dsimp
      rw [‚Üê F.map_comp, ‚Üê w‚ÇÇ, F.map_comp, F.map_preimage, reassoc_of% fac]
  ¬∑ intro Y f hf
    apply J.pullback_stable
    apply hF.cover_preserve
    apply data.mem‚ÇÅ‚ÇÄ i‚ÇÅ i‚ÇÇ
    simp [w]

@[simps toPreOneHypercover]
def toOneHypercover {X : C} (data : F.OneHypercoverDenseData J‚ÇÄ J X) :
    J.OneHypercover X where
  toPreOneHypercover := data.toPreOneHypercover
  mem‚ÇÄ := data.mem‚ÇÄ
  mem‚ÇÅ := data.mem‚ÇÅ

end OneHypercoverDenseData

namespace isContinuous_of_isOneHypercoverDense

variable (P : C·µí·µñ ‚•§ A) (hP : Presheaf.IsSheaf J P)

variable [F.Full] [F.Faithful]
variable {F J‚ÇÄ J P}
variable {X‚ÇÄ : C‚ÇÄ} {S : J‚ÇÄ.Cover X‚ÇÄ} (E : Multifork (S.index (F.op.comp P)))

noncomputable def liftAux' {Y : C} (f : Y ‚ü∂ F.obj X‚ÇÄ)
    {Z‚ÇÄ : C‚ÇÄ} (g : Z‚ÇÄ ‚ü∂ X‚ÇÄ) (hg : S g) (h : Y ‚ü∂ F.obj Z‚ÇÄ) (_ : f = h ‚â´ F.map g) :
    E.pt ‚ü∂ P.obj (Opposite.op Y) :=
  E.Œπ ‚ü®_, _, hg‚ü© ‚â´ P.map h.op

lemma liftAux'_eq_liftAux' {Y : C} (f : Y ‚ü∂ F.obj X‚ÇÄ)
    {Z‚ÇÄ : C‚ÇÄ} (g : Z‚ÇÄ ‚ü∂ X‚ÇÄ) (hg : S g) (h : Y ‚ü∂ F.obj Z‚ÇÄ) (fac : f = h ‚â´ F.map g)
    {Z‚ÇÄ' : C‚ÇÄ} (g' : Z‚ÇÄ' ‚ü∂ X‚ÇÄ) (hg' : S g') (h' : Y ‚ü∂ F.obj Z‚ÇÄ') (fac' : f = h' ‚â´ F.map g') :
    liftAux' E f g hg h fac = liftAux' E f g' hg' h' fac' := by
  let data‚ÇÅ := F.oneHypercoverDenseData J‚ÇÄ J Y
  apply hP.hom_ext ‚ü®_, data‚ÇÅ.mem‚ÇÄ‚ü©
  rintro ‚ü®T, f, ‚ü®U, a, b, hb, rfl‚ü©‚ü©
  obtain ‚ü®i, rfl, hi‚ü© := hb.exists
  simp only [eqToHom_refl, id_comp] at hi
  subst hi
  dsimp [liftAux']
  simp only [map_comp, ‚Üê assoc]
  congr 1
  simp only [assoc, ‚Üê map_comp]
  simpa using E.condition
    (GrothendieckTopology.Cover.Relation.mk { hf := hg } { hf := hg' }
      { Z := data‚ÇÅ.X i
        g‚ÇÅ := F.preimage (data‚ÇÅ.f i ‚â´ h)
        g‚ÇÇ := F.preimage (data‚ÇÅ.f i ‚â´ h')
        w := F.map_injective (by simp only [map_comp, map_preimage, assoc, ‚Üê fac, ‚Üê fac']) })

noncomputable def liftAux {Y : C} (f : Y ‚ü∂ F.obj X‚ÇÄ) (hf : S.1.functorPushforward F f) :
    E.pt ‚ü∂ P.obj (Opposite.op Y) :=
  liftAux' E f _ (Presieve.getFunctorPushforwardStructure hf).cover _
    (Presieve.getFunctorPushforwardStructure hf).fac

noncomputable def liftAux_eq_liftAux' {Y : C} (f : Y ‚ü∂ F.obj X‚ÇÄ)
    {Z‚ÇÄ : C‚ÇÄ} (g : Z‚ÇÄ ‚ü∂ X‚ÇÄ) (hg : S g) (h : Y ‚ü∂ F.obj Z‚ÇÄ) (fac : f = h ‚â´ F.map g) :
    liftAux E f ‚ü®_, g, h, hg, fac‚ü© = liftAux' E f g hg h fac := by
  apply liftAux'_eq_liftAux' hP

lemma liftAux_map {Y : C} (f : Y ‚ü∂ F.obj X‚ÇÄ) (hf : S.1.functorPushforward F f)
    {Z : C} (g : Z ‚ü∂ Y) :
    liftAux E f hf ‚â´ P.map g.op = liftAux E (g ‚â´ f) (Sieve.downward_closed _ hf _) := by
  obtain ‚ü®W‚ÇÄ, b, a, hb, rfl‚ü© := hf
  rw [liftAux_eq_liftAux' hP E (a ‚â´ F.map b) b hb a rfl,
    liftAux_eq_liftAux' hP E (g ‚â´ a ‚â´ F.map b) b hb (g ‚â´ a) (by simp)]
  simp [liftAux']

noncomputable def lift : E.pt ‚ü∂ P.obj (Opposite.op (F.obj X‚ÇÄ)) :=
  hP.amalgamate ‚ü®_, (F.coverPreserving_of_isOneHypercoverDense J‚ÇÄ J).cover_preserve S.2‚ü©
    (fun ‚ü®Y, f, hf‚ü© => liftAux E f hf) (by
      rintro ‚ü®Y‚ÇÅ, f‚ÇÅ, hf‚ÇÅ‚ü© ‚ü®Y‚ÇÇ, f‚ÇÇ, hf‚ÇÇ‚ü© ‚ü®Z, p‚ÇÅ, p‚ÇÇ, w‚ü©
      simp [liftAux_map hP, w])

@[reassoc]
lemma fac (i : S.Arrow) : lift hP E ‚â´ P.map (F.map (i.f)).op = E.Œπ i := by
  apply (hP.amalgamate_map ‚ü®_, (F.coverPreserving_of_isOneHypercoverDense J‚ÇÄ J).cover_preserve S.2‚ü©
    (fun ‚ü®Y, f, hf‚ü© => liftAux E f hf) (by
      rintro ‚ü®Y‚ÇÅ, f‚ÇÅ, hf‚ÇÅ‚ü© ‚ü®Y‚ÇÇ, f‚ÇÇ, hf‚ÇÇ‚ü© ‚ü®Z, p‚ÇÅ, p‚ÇÇ, w‚ü©
      simp [liftAux_map hP, w])
    ‚ü®_, F.map i.f, Sieve.image_mem_functorPushforward _ _ i.hf‚ü©).trans
  simpa [liftAux'] using liftAux_eq_liftAux' hP E (F.map i.f) i.f i.hf (ùüô _) (by simp)

lemma isSheaf [F.Faithful] :
    Presheaf.IsSheaf J‚ÇÄ (F.op ‚ãô P) := by
  rw [Presheaf.isSheaf_iff_multifork]
  rintro X‚ÇÄ S
  constructor
  exact Multifork.IsLimit.mk _ (lift hP) (fac hP) (by
    intro E m hm
    dsimp at m hm
    apply hP.hom_ext ‚ü®_, (F.coverPreserving_of_isOneHypercoverDense J‚ÇÄ J).cover_preserve S.2‚ü©
    rintro ‚ü®Y, f, ‚ü®T, a, b, ha, rfl‚ü©‚ü©
    dsimp
    simp only [map_comp, ‚Üê assoc]
    congr 1
    exact (hm ‚ü®_, _, ha‚ü©).trans (fac hP E ‚ü®_, _, ha‚ü©).symm)

end isContinuous_of_isOneHypercoverDense


lemma isContinuous_of_isOneHypercoverDense [F.Full] [F.Faithful] :
    Functor.IsContinuous.{v‚ÇÉ} F J‚ÇÄ J where
  op_comp_isSheafOfTypes := by
    rintro ‚ü®P, hP‚ü©
    dsimp
    rw [‚Üê isSheaf_iff_isSheaf_of_type] at hP ‚ä¢
    exact isContinuous_of_isOneHypercoverDense.isSheaf hP

namespace IsOneHypercoverDense

variable [F.Full] [Functor.IsContinuous.{v‚ÇÉ} F J‚ÇÄ J]

lemma restriction_map_injective {P Q : C·µí·µñ ‚•§ A} {f g : P ‚ü∂ Q} (hQ : Presheaf.IsSheaf J Q)
    (h : ‚àÄ (X‚ÇÄ : C‚ÇÄ), f.app (Opposite.op (F.obj X‚ÇÄ)) = g.app (Opposite.op (F.obj X‚ÇÄ))) :
    f = g := by
  ext X
  apply Presheaf.IsSheaf.hom_ext_ofArrows hQ _
    ((F.oneHypercoverDenseData J‚ÇÄ J X.unop).toOneHypercover).mem‚ÇÄ
  intro i
  dsimp
  simp only [‚Üê NatTrans.naturality, h]

section

variable {P Q : C·µí·µñ ‚•§ A} (f‚ÇÄ : F.op ‚ãô P ‚ü∂ F.op ‚ãô Q) (hQ : Presheaf.IsSheaf J Q)

namespace restriction_map_surjective

noncomputable def app (X : C·µí·µñ) : P.obj X ‚ü∂ Q.obj X :=
  (((F.oneHypercoverDenseData J‚ÇÄ J X.unop).toOneHypercover).isLimitMultifork ‚ü®Q, hQ‚ü©).lift
    (Multifork.ofŒπ _ (P := P.obj X) (fun i =>
      P.map ((F.oneHypercoverDenseData J‚ÇÄ J X.unop).f i).op ‚â´ f‚ÇÄ.app _) (fun j => by
        dsimp at j ‚ä¢
        simp only [assoc]
        erw [‚Üê NatTrans.naturality, ‚Üê NatTrans.naturality]
        dsimp
        rw [‚Üê Functor.map_comp_assoc, ‚Üê Functor.map_comp_assoc]
        congr 2
        apply Quiver.Hom.unop_inj
        apply (F.oneHypercoverDenseData J‚ÇÄ J X.unop).w))

@[reassoc (attr := simp)]
lemma app_fac (X : C·µí·µñ) (i : (F.oneHypercoverDenseData J‚ÇÄ J X.unop).I‚ÇÄ) :
    app F J‚ÇÄ J f‚ÇÄ hQ X ‚â´ Q.map ((F.oneHypercoverDenseData J‚ÇÄ J X.unop).f i).op =
      P.map ((F.oneHypercoverDenseData J‚ÇÄ J X.unop).f i).op ‚â´ f‚ÇÄ.app _ :=
  IsLimit.fac _ _ (WalkingMulticospan.left i)

set_option pp.universes true
@[simp]
lemma naturality {X Y : C·µí·µñ} (f : X ‚ü∂ Y) :
    P.map f ‚â´ app F J‚ÇÄ J f‚ÇÄ hQ Y = app F J‚ÇÄ J f‚ÇÄ hQ X ‚â´ Q.map f :=
  hQ.hom_ext_ofArrows _ (F.oneHypercoverDenseData J‚ÇÄ J Y.unop).mem‚ÇÄ (fun i => by
    dsimp at i ‚ä¢
    rw [assoc, assoc, app_fac]
    apply (F.op_comp_isSheaf J‚ÇÄ J ‚ü®_, hQ‚ü©).hom_ext ‚ü®_, F.cover_lift J‚ÇÄ J
      (J.pullback_stable ((F.oneHypercoverDenseData J‚ÇÄ J Y.unop).f i ‚â´ f.unop)
      (F.oneHypercoverDenseData J‚ÇÄ J X.unop).mem‚ÇÄ)‚ü©
    rintro ‚ü®Z, a, W, b, c, ha, fac‚ü©
    obtain ‚ü®i', rfl, hc‚ü© := ha.exists
    dsimp at hc
    rw [id_comp] at hc
    subst hc
    replace fac := congr_arg Quiver.Hom.op fac
    dsimp at b fac ‚ä¢
    rw [assoc] at fac
    rw [assoc, assoc, assoc, assoc, ‚Üê Q.map_comp, ‚Üê Q.map_comp, ‚Üê fac, Q.map_comp, app_fac_assoc]
    obtain ‚ü®b, rfl‚ü© := F.map_surjective b
    erw [‚Üê f‚ÇÄ.naturality b.op, ‚Üê f‚ÇÄ.naturality a.op]
    dsimp
    simp only [‚Üê P.map_comp_assoc, fac])

@[simp]
lemma app_obj (X‚ÇÄ : C‚ÇÄ) :
    app F J‚ÇÄ J f‚ÇÄ hQ (Opposite.op (F.obj X‚ÇÄ)) = f‚ÇÄ.app (Opposite.op X‚ÇÄ) :=
  hQ.hom_ext_ofArrows _ (F.oneHypercoverDenseData J‚ÇÄ J _).mem‚ÇÄ (fun i => by
    dsimp
    rw [app_fac]
    simpa using f‚ÇÄ.naturality (F.preimage ((F.oneHypercoverDenseData J‚ÇÄ J (F.obj X‚ÇÄ)).f i)).op)

end restriction_map_surjective

open restriction_map_surjective in
lemma restriction_map_surjective :
    ‚àÉ (f : P ‚ü∂ Q), whiskerLeft F.op f = f‚ÇÄ :=
   ‚ü®{ app := app F J‚ÇÄ J f‚ÇÄ hQ }, by ext; dsimp; simp‚ü©

end

instance faithful_sheafPushforwardContinuous :
    (F.sheafPushforwardContinuous A J‚ÇÄ J).Faithful  where
  map_injective {P G} f g h := by
    ext1
    apply restriction_map_injective F J‚ÇÄ J G.cond
    intro X‚ÇÄ
    exact congr_app (Prefunctor.congr_map (sheafToPresheaf _ _).toPrefunctor h) (Opposite.op X‚ÇÄ)

instance full_sheafPushforwardContinuous :
    (F.sheafPushforwardContinuous A J‚ÇÄ J).Full where
  map_surjective {P Q} f := by
    obtain ‚ü®f‚ÇÄ, hf‚ÇÄ‚ü© := restriction_map_surjective F J‚ÇÄ J ((sheafToPresheaf _ _).map f) Q.cond
    exact ‚ü®‚ü®f‚ÇÄ‚ü©, by ext1; exact hf‚ÇÄ‚ü©

variable [HasLimitsOfSize.{w, w} A] [F.Faithful]

namespace essSurj_sheafPushforwardContinuous

variable (P‚ÇÄ : C‚ÇÄ·µí·µñ ‚•§ A) (hP‚ÇÄ : Presheaf.IsSheaf J‚ÇÄ P‚ÇÄ)

noncomputable abbrev extensionObj (X : C·µí·µñ) : A :=
  multiequalizer ((F.oneHypercoverDenseData J‚ÇÄ J X.unop).multicospanIndex P‚ÇÄ)

variable {P‚ÇÄ}

variable (P‚ÇÄ) in
noncomputable def extensionObjRestrict' {X : C·µí·µñ} {Y‚ÇÄ : C‚ÇÄ} (f : F.obj Y‚ÇÄ ‚ü∂ X.unop)
    (hf : ‚àÉ (i : (F.oneHypercoverDenseData J‚ÇÄ J X.unop).I‚ÇÄ)
      (a : Y‚ÇÄ ‚ü∂ (F.oneHypercoverDenseData J‚ÇÄ J X.unop).X i),
        F.map a ‚â´ (F.oneHypercoverDenseData J‚ÇÄ J X.unop).f i = f) :
    extensionObj F J‚ÇÄ J P‚ÇÄ X ‚ü∂ P‚ÇÄ.obj (Opposite.op Y‚ÇÄ) :=
  Multiequalizer.Œπ _ _ ‚â´ P‚ÇÄ.map hf.choose_spec.choose.op

lemma extensionObjRestrict'_eq {X : C·µí·µñ} {Y‚ÇÄ : C‚ÇÄ} (f : F.obj Y‚ÇÄ ‚ü∂ X.unop)
    (i : (F.oneHypercoverDenseData J‚ÇÄ J X.unop).I‚ÇÄ)
    (a : Y‚ÇÄ ‚ü∂ (F.oneHypercoverDenseData J‚ÇÄ J X.unop).X i)
    (fac : F.map a ‚â´ (F.oneHypercoverDenseData J‚ÇÄ J X.unop).f i = f) :
    extensionObjRestrict' F J‚ÇÄ J P‚ÇÄ f ‚ü®i, a, fac‚ü© =
      Multiequalizer.Œπ ((F.oneHypercoverDenseData J‚ÇÄ J X.unop).multicospanIndex P‚ÇÄ) i ‚â´
        P‚ÇÄ.map a.op := by
  have hf : ‚àÉ (i : (F.oneHypercoverDenseData J‚ÇÄ J X.unop).I‚ÇÄ)
    (a : Y‚ÇÄ ‚ü∂ (F.oneHypercoverDenseData J‚ÇÄ J X.unop).X i),
    F.map a ‚â´ (F.oneHypercoverDenseData J‚ÇÄ J X.unop).f i = f := ‚ü®i, a, fac‚ü©
  obtain ‚ü®i', a', fac', h'‚ü© : ‚àÉ (i' : (F.oneHypercoverDenseData J‚ÇÄ J X.unop).I‚ÇÄ)
    (a' : Y‚ÇÄ ‚ü∂ (F.oneHypercoverDenseData J‚ÇÄ J X.unop).X i')
    (_ : F.map a' ‚â´ (F.oneHypercoverDenseData J‚ÇÄ J X.unop).f i' = f),
      extensionObjRestrict' F J‚ÇÄ J P‚ÇÄ f hf =
        (by exact Multiequalizer.Œπ _ _) ‚â´ P‚ÇÄ.map a'.op := by
    exact ‚ü®hf.choose, hf.choose_spec.choose, hf.choose_spec.choose_spec, rfl‚ü©
  apply hP‚ÇÄ.hom_ext ‚ü®_, (F.oneHypercoverDenseData J‚ÇÄ J X.unop).mem‚ÇÅ‚ÇÄ i i' a a' (fac.trans fac'.symm)‚ü©
  rintro ‚ü®W‚ÇÄ, g, hg‚ü©
  dsimp
  obtain ‚ü®j, c, ha, ha'‚ü© := hg
  simp only [h', assoc, ‚Üê P‚ÇÄ.map_comp, ‚Üê op_comp, ha, ha']
  simp only [op_comp, P‚ÇÄ.map_comp]
  exact (Multiequalizer.condition_assoc
    ((F.oneHypercoverDenseData J‚ÇÄ J X.unop).multicospanIndex P‚ÇÄ) ‚ü®‚ü®i, i'‚ü©, j‚ü© _).symm

noncomputable def extensionObjRestrict {X : C·µí·µñ} {Y‚ÇÄ : C‚ÇÄ} (f : F.obj Y‚ÇÄ ‚ü∂ X.unop) :
    extensionObj F J‚ÇÄ J P‚ÇÄ X ‚ü∂ P‚ÇÄ.obj (Opposite.op Y‚ÇÄ) :=
  hP‚ÇÄ.amalgamate (‚ü®_, F.cover_lift J‚ÇÄ J
    (J.pullback_stable f (F.oneHypercoverDenseData J‚ÇÄ J X.unop).mem‚ÇÄ)‚ü©)
    (fun ‚ü®W‚ÇÄ, g, hg‚ü© => extensionObjRestrict' F J‚ÇÄ J P‚ÇÄ (F.map g ‚â´ f) (by
      obtain ‚ü®_, a, _, ‚ü®i‚ü©, fac‚ü© := hg
      obtain ‚ü®a, rfl‚ü© := F.map_surjective a
      exact ‚ü®_, _, fac‚ü©)) (by
        rintro ‚ü®Y‚ÇÅ, q‚ÇÅ, hq‚ÇÅ‚ü© ‚ü®Y‚ÇÇ, q‚ÇÇ, hq‚ÇÇ‚ü©
        rintro ‚ü®Z, p‚ÇÅ, p‚ÇÇ, w‚ü©
        obtain ‚ü®_, a‚ÇÅ, b‚ÇÅ, h‚ÇÅ, fac‚ÇÅ‚ü© := hq‚ÇÅ
        obtain ‚ü®_, a‚ÇÇ, b‚ÇÇ, h‚ÇÇ, fac‚ÇÇ‚ü© := hq‚ÇÇ
        obtain ‚ü®i‚ÇÅ, rfl, hi‚ÇÅ‚ü© := h‚ÇÅ.exists
        obtain ‚ü®i‚ÇÇ, rfl, hi‚ÇÇ‚ü© := h‚ÇÇ.exists
        dsimp at hi‚ÇÅ hi‚ÇÇ
        rw [id_comp] at hi‚ÇÅ hi‚ÇÇ
        subst hi‚ÇÅ hi‚ÇÇ
        obtain ‚ü®a‚ÇÅ, rfl‚ü© := F.map_surjective a‚ÇÅ
        obtain ‚ü®a‚ÇÇ, rfl‚ü© := F.map_surjective a‚ÇÇ
        dsimp
        rw [extensionObjRestrict'_eq F J‚ÇÄ J hP‚ÇÄ (F.map q‚ÇÅ ‚â´ f) i‚ÇÅ a‚ÇÅ fac‚ÇÅ,
          extensionObjRestrict'_eq F J‚ÇÄ J hP‚ÇÄ (F.map q‚ÇÇ ‚â´ f) i‚ÇÇ a‚ÇÇ fac‚ÇÇ,
          assoc, assoc, ‚Üê P‚ÇÄ.map_comp, ‚Üê P‚ÇÄ.map_comp]
        apply hP‚ÇÄ.hom_ext ‚ü®_, (F.oneHypercoverDenseData J‚ÇÄ J X.unop).mem‚ÇÅ‚ÇÄ i‚ÇÅ i‚ÇÇ
            (p‚ÇÅ ‚â´ a‚ÇÅ) (p‚ÇÇ ‚â´ a‚ÇÇ) (by
              simp only [F.map_comp, assoc, fac‚ÇÅ, fac‚ÇÇ]
              simp only [‚Üê F.map_comp_assoc, w])‚ü©
        rintro ‚ü®T, g, hg‚ü©
        obtain ‚ü®j, b, w‚ÇÅ, w‚ÇÇ‚ü© := hg
        dsimp
        simp only [assoc, ‚Üê P‚ÇÄ.map_comp, ‚Üê op_comp, w‚ÇÅ, w‚ÇÇ]
        simp only [op_comp, P‚ÇÄ.map_comp]
        apply Multiequalizer.condition_assoc
          ((F.oneHypercoverDenseData J‚ÇÄ J X.unop).multicospanIndex P‚ÇÄ) ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, j‚ü©)

noncomputable def extensionObjRestrict_map_eq_extensionObjRestrict'
    {X : C·µí·µñ} {Y‚ÇÄ W‚ÇÄ : C‚ÇÄ} (f : F.obj Y‚ÇÄ ‚ü∂ X.unop)
    (g : Opposite.op Y‚ÇÄ ‚ü∂ Opposite.op W‚ÇÄ) (i : (F.oneHypercoverDenseData J‚ÇÄ J X.unop).I‚ÇÄ)
    (a : W‚ÇÄ ‚ü∂ (F.oneHypercoverDenseData J‚ÇÄ J X.unop).X i)
    (fac : F.map a ‚â´ (F.oneHypercoverDenseData J‚ÇÄ J X.unop).f i = F.map g.unop ‚â´ f) :
    extensionObjRestrict F J‚ÇÄ J hP‚ÇÄ f ‚â´ P‚ÇÄ.map g =
      extensionObjRestrict' F J‚ÇÄ J P‚ÇÄ (F.map g.unop ‚â´ f) ‚ü®i, a, fac‚ü© :=
  hP‚ÇÄ.amalgamate_map _ _ _ ‚ü®W‚ÇÄ, g.unop, by exact ‚ü®_, _, _, ‚ü®i‚ü©, fac‚ü©‚ü©

lemma extensionObjRestrict_eq_œÄ {X : C·µí·µñ} (i : (F.oneHypercoverDenseData J‚ÇÄ J X.unop).I‚ÇÄ) :
    extensionObjRestrict F J‚ÇÄ J hP‚ÇÄ ((F.oneHypercoverDenseData J‚ÇÄ J X.unop).f i) =
      Multiequalizer.Œπ ((F.oneHypercoverDenseData J‚ÇÄ J X.unop).multicospanIndex P‚ÇÄ) i := by
  have eq := extensionObjRestrict_map_eq_extensionObjRestrict' F J‚ÇÄ J hP‚ÇÄ
      ((F.oneHypercoverDenseData J‚ÇÄ J X.unop).f i) (ùüô _) i (ùüô _) (by simp)
  dsimp at eq
  simp only [map_id, comp_id, id_comp] at eq
  rw [eq, extensionObjRestrict'_eq F J‚ÇÄ J hP‚ÇÄ _ i (ùüô _) (by simp)]
  simp

@[reassoc (attr := simp)]
def extensionObjRestrict_map {X : C·µí·µñ} {Y‚ÇÄ Z‚ÇÄ : C‚ÇÄ} (f : F.obj Y‚ÇÄ ‚ü∂ X.unop)
    (g : Opposite.op Y‚ÇÄ ‚ü∂ Opposite.op Z‚ÇÄ) :
    extensionObjRestrict F J‚ÇÄ J hP‚ÇÄ f ‚â´ P‚ÇÄ.map g =
      extensionObjRestrict F J‚ÇÄ J hP‚ÇÄ (F.map g.unop ‚â´ f) :=
  hP‚ÇÄ.hom_ext ‚ü®_, F.cover_lift J‚ÇÄ J (J.pullback_stable (F.map g.unop ‚â´ f)
    (F.oneHypercoverDenseData J‚ÇÄ J X.unop).mem‚ÇÄ)‚ü© _ _ (by
      rintro ‚ü®T, a, ha‚ü©
      obtain ‚ü®W, b, c, ‚ü®i‚ü©, fac‚ü© := ha
      obtain ‚ü®b, rfl‚ü© := F.map_surjective b
      dsimp at a g i fac ‚ä¢
      rw [assoc, ‚Üê P‚ÇÄ.map_comp, extensionObjRestrict_map_eq_extensionObjRestrict'
          F J‚ÇÄ J hP‚ÇÄ f (g ‚â´ a.op) i b (by simpa using fac),
        extensionObjRestrict_map_eq_extensionObjRestrict' F J‚ÇÄ J hP‚ÇÄ
          (F.map g.unop ‚â´ f) a.op i b (by simpa using fac)]
      simp)

noncomputable def extensionMap {X Y : C·µí·µñ} (f : X ‚ü∂ Y) :
    extensionObj F J‚ÇÄ J P‚ÇÄ X ‚ü∂ extensionObj F J‚ÇÄ J P‚ÇÄ Y :=
  Multiequalizer.lift _ _ (fun i => extensionObjRestrict F J‚ÇÄ J hP‚ÇÄ
    ((F.oneHypercoverDenseData J‚ÇÄ J Y.unop).f i ‚â´ f.unop)) (by
      rintro ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, j‚ü©
      simp [PreOneHypercoverDenseData.w_assoc])

@[reassoc (attr := simp)]
lemma extensionMap_restrict {X Y : C·µí·µñ} (f : X ‚ü∂ Y) {X‚ÇÄ : C‚ÇÄ} (g : F.obj X‚ÇÄ ‚ü∂ Y.unop) :
    extensionMap F J‚ÇÄ J hP‚ÇÄ f ‚â´ extensionObjRestrict F J‚ÇÄ J hP‚ÇÄ g =
      extensionObjRestrict F J‚ÇÄ J hP‚ÇÄ (g ‚â´ f.unop) :=
  hP‚ÇÄ.hom_ext ‚ü®_, F.cover_lift J‚ÇÄ J (J.pullback_stable g
    (F.oneHypercoverDenseData J‚ÇÄ J Y.unop).mem‚ÇÄ)‚ü© _ _ (by
      rintro ‚ü®W‚ÇÄ, œÜ, hœÜ‚ü©
      obtain ‚ü®T‚ÇÄ, a, b, hb, fac‚ü© := hœÜ
      obtain ‚ü®i, rfl, hi‚ü© := hb.exists
      obtain ‚ü®a, rfl‚ü© := F.map_surjective a
      dsimp at hi a b
      rw [id_comp] at hi
      subst hi
      dsimp
      rw [assoc, extensionObjRestrict_map]
      dsimp
      rw [‚Üê fac]
      erw [‚Üê extensionObjRestrict_map]
      rw [extensionObjRestrict_eq_œÄ]
      dsimp only [extensionMap]
      rw [limit.lift_œÄ_assoc]
      dsimp
      rw [extensionObjRestrict_map, extensionObjRestrict_map]
      congr 1
      dsimp
      rw [‚Üê reassoc_of% fac]
      rfl)

variable {F J‚ÇÄ J} in
lemma extensionObj_hom_ext {X : C·µí·µñ} {T : A} {f g : T ‚ü∂ extensionObj F J‚ÇÄ J P‚ÇÄ X}
    (h : ‚àÄ (Y‚ÇÄ : C‚ÇÄ) (œÜ : F.obj Y‚ÇÄ ‚ü∂ X.unop),
      f ‚â´ extensionObjRestrict F J‚ÇÄ J hP‚ÇÄ œÜ = g ‚â´ extensionObjRestrict F J‚ÇÄ J hP‚ÇÄ œÜ) :
    f = g :=
  Multiequalizer.hom_ext _ _ _ (fun i => by rw [‚Üê extensionObjRestrict_eq_œÄ _ _ _ hP‚ÇÄ, h])

@[simps]
noncomputable def extension : C·µí·µñ ‚•§ A where
  obj X := extensionObj F J‚ÇÄ J P‚ÇÄ X
  map f := extensionMap F J‚ÇÄ J hP‚ÇÄ f
  map_id X := extensionObj_hom_ext hP‚ÇÄ (by aesop_cat)
  map_comp f g := extensionObj_hom_ext hP‚ÇÄ (by aesop_cat)

variable (P‚ÇÄ) in
noncomputable def extensionIsoAppInv (X‚ÇÄ : C‚ÇÄ·µí·µñ) :
    P‚ÇÄ.obj X‚ÇÄ ‚ü∂ extensionObj F J‚ÇÄ J P‚ÇÄ (F.op.obj X‚ÇÄ) :=
  Multiequalizer.lift _ _
    (fun i => P‚ÇÄ.map (F.preimage ((F.oneHypercoverDenseData J‚ÇÄ J (F.obj X‚ÇÄ.unop)).f i)).op) (by
      rintro ‚ü®‚ü®i‚ÇÅ, i‚ÇÇ‚ü©, j‚ü©
      dsimp at i‚ÇÅ i‚ÇÇ j ‚ä¢
      simp only [‚Üê P‚ÇÄ.map_comp, ‚Üê op_comp]
      congr 2
      apply F.map_injective
      simp [(F.oneHypercoverDenseData J‚ÇÄ J (F.obj X‚ÇÄ.unop)).w j])

@[simps! hom]
noncomputable def extensionIsoApp (X‚ÇÄ : C‚ÇÄ·µí·µñ) :
    extensionObj F J‚ÇÄ J P‚ÇÄ (F.op.obj X‚ÇÄ) ‚âÖ P‚ÇÄ.obj X‚ÇÄ where
  hom := extensionObjRestrict F J‚ÇÄ J hP‚ÇÄ (ùüô (F.obj X‚ÇÄ.unop))
  inv := extensionIsoAppInv F J‚ÇÄ J P‚ÇÄ X‚ÇÄ
  hom_inv_id := sorry
  inv_hom_id := sorry

noncomputable def extensionIso : F.op ‚ãô extension F J‚ÇÄ J hP‚ÇÄ ‚âÖ P‚ÇÄ :=
  NatIso.ofComponents (fun X‚ÇÄ => extensionIsoApp F J‚ÇÄ J hP‚ÇÄ X‚ÇÄ)

lemma extension_isSheaf : Presheaf.IsSheaf J (extension F J‚ÇÄ J hP‚ÇÄ) := sorry

end essSurj_sheafPushforwardContinuous

open essSurj_sheafPushforwardContinuous in
instance essSurj_sheafPushforwardContinuous :
    (F.sheafPushforwardContinuous A J‚ÇÄ J).EssSurj where
  mem_essImage F‚ÇÄ := ‚ü®‚ü®_, extension_isSheaf F J‚ÇÄ J F‚ÇÄ.cond‚ü©,
    ‚ü®(sheafToPresheaf _ _).preimageIso (extensionIso F J‚ÇÄ J F‚ÇÄ.cond)‚ü©‚ü©

instance isEquivalence_sheafPushforwardContinuous [F.Full] :
    (F.sheafPushforwardContinuous A J‚ÇÄ J).IsEquivalence where

end IsOneHypercoverDense

end Functor

end CategoryTheory
