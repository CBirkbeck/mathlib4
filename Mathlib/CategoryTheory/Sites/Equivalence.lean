import Mathlib.CategoryTheory.Sites.InducedTopology

universe u

open CategoryTheory LocallyCoverDense Functor Limits GrothendieckTopology

variable {C : Type (u+1)} [LargeCategory C] (J : GrothendieckTopology C) (F : C ‚•§ C) (i : F ‚âÖ ùü≠ C)

theorem coverDense_of_iso_id : F.IsCoverDense J where
  is_cover U := by
    convert J.top_mem U
    ext Y f
    simp only [Sieve.coverByImage, Presieve.coverByImage, Sieve.top_apply, iff_true]
    refine ‚ü®‚ü®U, f ‚â´ i.inv.app U, i.hom.app U, (by simp)‚ü©‚ü©

theorem inducedTopology_of_iso_id_eq_self : haveI := Full.ofIso i.symm
    haveI := Faithful.of_iso i.symm
    haveI : IsCoverDense F J := coverDense_of_iso_id J F i
    (locallyCoverDense_of_isCoverDense F J).inducedTopology = J := by
  ext Y S
  simp only [inducedTopology]
  refine ‚ü®fun (h : S.functorPushforward F ‚àà J.sieves (F.obj Y)) ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ convert J.pullback_stable (i.inv.app Y) h
    simp only [Functor.id_obj]
    ext Z f
    simp only [Sieve.pullback_apply, Sieve.functorPushforward_apply, Presieve.functorPushforward,
      exists_and_left]
    refine ‚ü®fun hf ‚Ü¶ ?_, fun hf ‚Ü¶ ?_‚ü©
    ¬∑ refine ‚ü®F.obj Z, i.hom.app Z ‚â´ f, S.downward_closed hf (i.hom.app Z),
        i.inv.app Z ‚â´ F.map (i.inv.app Z), ?_‚ü©
      simp only [Category.assoc, ‚Üê Functor.map_comp]
      simpa using i.inv.naturality f
    ¬∑ obtain ‚ü®W, g, hg, x, hx‚ü© := hf
      have : f = (f ‚â´ i.inv.app Y) ‚â´ i.hom.app Y := by simp
      rw [this, hx, Category.assoc]
      apply S.downward_closed
      rw [i.hom.naturality g]
      apply S.downward_closed
      exact hg
  ¬∑ change S.functorPushforward F ‚àà J.sieves (F.obj Y)
    convert J.pullback_stable (i.hom.app Y) h
    ext T Z f
    simp only [Sieve.functorPushforward_apply, Presieve.functorPushforward, exists_and_left,
      Functor.id_obj, Sieve.pullback_apply]
    refine ‚ü®fun hf ‚Ü¶ ?_, fun hf ‚Ü¶ ?_‚ü©
    ¬∑ obtain ‚ü®W, g, hg, x, hx‚ü© := hf
      rw [hx, Category.assoc, i.hom.naturality g, ‚Üê Category.assoc]
      exact T.downward_closed hg (x ‚â´ i.hom.app W)
    ¬∑ refine ‚ü®Z, f ‚â´ i.hom.app Y, hf, ?_‚ü©
      refine ‚ü®i.inv.app Z, ?_‚ü©
      simp only [Functor.map_comp, ‚Üê Category.assoc]
      rw [‚Üê i.inv.naturality f]
      have : F.map (i.hom.app Y) = i.hom.app (F.obj Y) := by
        have := i.hom.naturality (i.hom.app Y)
        apply_fun fun g ‚Ü¶ g ‚â´ i.inv.app Y at this
        simp only [Functor.id_obj, Functor.id_map, Category.assoc,
          Iso.hom_inv_id_app, Category.comp_id] at this
        exact this
      simp [this]

variable {D : Type u} [SmallCategory D] (e : C ‚âå D)

theorem locallyCoverDense_equiv : LocallyCoverDense J e.inverse := by
  intro X T
  convert T.prop
  ext Z f
  constructor
  ¬∑ rintro ‚ü®_, _, g', hg, rfl‚ü©
    exact T.val.downward_closed hg g'
  ¬∑ intro hf
    refine ‚ü®e.functor.obj Z, (Adjunction.homEquiv e.toAdjunction _ _).symm f, e.unit.app Z, ?_, ?_‚ü©
    ¬∑ simp only [Adjunction.homEquiv_counit, Functor.id_obj, Equivalence.toAdjunction_counit,
        Sieve.functorPullback_apply, Presieve.functorPullback_mem, Functor.map_comp,
        Equivalence.inv_fun_map, Functor.comp_obj, Category.assoc, Equivalence.unit_inverse_comp,
        Category.comp_id]
      exact T.val.downward_closed hf _
    ¬∑ simp

theorem coverPreserving_equiv :
    CoverPreserving J (locallyCoverDense_equiv J e).inducedTopology e.functor where
  cover_preserve {U S} h := by
    simp only [inducedTopology]
    rw [‚Üê inducedTopology_of_iso_id_eq_self J (i := e.unitIso.symm)] at h
    simp only [inducedTopology, comp_obj] at h
    have hS : S.functorPushforward (e.functor ‚ãô e.inverse) ‚àà
      J.sieves (e.inverse.obj (e.functor.obj U)) := h
    rw [Sieve.functorPushforward_comp] at hS
    change _ ‚àà J.sieves (e.inverse.obj (e.functor.obj U))
    exact hS

instance : IsCoverDense e.functor (locallyCoverDense_equiv J e).inducedTopology where
  is_cover U := by
    change _ ‚àà J.sieves _
    convert J.top_mem (e.inverse.obj U)
    ext Y f
    simp only [Sieve.functorPushforward_apply, Presieve.functorPushforward, exists_and_left,
      Sieve.top_apply, iff_true]
    exact ‚ü®e.functor.obj Y, (Adjunction.homEquiv e.toAdjunction _ _).symm f,
      Presieve.in_coverByImage _ _, e.unit.app _, (by simp)‚ü©

variable {A : Type (u + 1)} [LargeCategory A] [HasLimits A] [HasColimits A]

/-- This would allow to weaken the assumption `HasLimits A`. -/
proof_wanted hasMultiEqualizer_index_of_equiv
    [‚àÄ (P : C·µí·µñ ‚•§ A) (X : C) (S : J.Cover X), HasMultiequalizer (S.index P)]
    (P : D·µí·µñ ‚•§ A) (X : D) (S : (locallyCoverDense_equiv J e).inducedTopology.Cover X) :
    HasMultiequalizer (S.index P)

/-- This would allow to weaken the assumption `HasColimits A`. -/
proof_wanted hasColimitsOfShape_cover_of_equiv
    [‚àÄ (X : C), HasColimitsOfShape (J.Cover X)·µí·µñ A] (X : D) :
    HasColimitsOfShape ((locallyCoverDense_equiv J e).inducedTopology.Cover X)·µí·µñ A

noncomputable
def CategoryTheory.GrothendieckTopology.smallSheafify (F : C·µí·µñ ‚•§ A) : C·µí·µñ ‚•§ A :=
  e.functor.op ‚ãô (locallyCoverDense_equiv J e).inducedTopology.sheafify (e.inverse.op ‚ãô F)

variable [ConcreteCategory A] [PreservesLimits (forget A)] [ReflectsIsomorphisms (forget A)]
  [PreservesFilteredColimits (forget A)]

/-- This would allow to weaken the assumption `PreservesFilteredColimits (forget A)`. -/
proof_wanted preservesColimitsOfShape_cover
    [‚àÄ (X : C), PreservesColimitsOfShape (J.Cover X)·µí·µñ (forget A)] (X : D) :
    Nonempty (PreservesColimitsOfShape
      ((locallyCoverDense_equiv J e).inducedTopology.Cover X)·µí·µñ (forget A))

theorem smallSheafify_isSheaf (F : C·µí·µñ ‚•§ A) : Presheaf.IsSheaf J (J.smallSheafify e F) := by
  have : IsContinuous e.functor J (locallyCoverDense_equiv J e).inducedTopology :=
    IsCoverDense.isContinuous _ _ _ (coverPreserving_equiv J e)
  let G : Sheaf (locallyCoverDense_equiv J e).inducedTopology A :=
    ‚ü®(locallyCoverDense_equiv J e).inducedTopology.sheafify (e.inverse.op ‚ãô F),
      (locallyCoverDense_equiv J e).inducedTopology.sheafify_isSheaf _‚ü©
  change Presheaf.IsSheaf J (e.functor.op ‚ãô G.val)
  exact e.functor.op_comp_isSheaf _ _ _
