/-
Copyright (c) 2021 Adam Topaz. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Adam Topaz
-/
import Mathlib.CategoryTheory.Sites.Sheafification
import Mathlib.CategoryTheory.Sites.Limits
import Mathlib.CategoryTheory.Limits.FunctorCategory
import Mathlib.CategoryTheory.Limits.FilteredColimitCommutesFiniteLimit

#align_import category_theory.sites.left_exact from "leanprover-community/mathlib"@"59382264386afdbaf1727e617f5fdda511992eb9"

/-!
# Left exactness of sheafification
In this file we show that sheafification commutes with finite limits.
-/


open CategoryTheory Limits Opposite

universe w v u

-- porting note: was `C : Type max v u` which made most instances non automatically applicable
-- it seems to me it is better to declare `C : Type u`: it works better, and it is more general
variable {C : Type u} [Category.{v} C] {J : GrothendieckTopology C}

variable {D : Type w} [Category.{max v u} D]

variable [โ (P : Cแตแต โฅค D) (X : C) (S : J.Cover X), HasMultiequalizer (S.index P)]

noncomputable section

namespace CategoryTheory.GrothendieckTopology

/-- An auxiliary definition to be used in the proof of the fact that
`J.diagramFunctor D X` preserves limits. -/
@[simps]
def coneCompEvaluationOfConeCompDiagramFunctorCompEvaluation {X : C} {K : Type max v u}
    [SmallCategory K] {F : K โฅค Cแตแต โฅค D} {W : J.Cover X} (i : W.Arrow)
    (E : Cone (F โ J.diagramFunctor D X โ (evaluation (J.Cover X)แตแต D).obj (op W))) :
    Cone (F โ (evaluation _ _).obj (op i.Y)) where
  pt := E.pt
  ฯ :=
    { app := fun k => E.ฯ.app k โซ Multiequalizer.ฮน (W.index (F.obj k)) i
      naturality := by
        intro a b f
        -- โข ((Functor.const K).obj E.pt).map f โซ (fun k => NatTrans.app E.ฯ k โซ Multiequ โฆ
        dsimp
        -- โข ๐ E.pt โซ NatTrans.app E.ฯ b โซ Multiequalizer.ฮน (Cover.index W (F.obj b)) i = โฆ
        rw [Category.id_comp, Category.assoc, โ E.w f]
        -- โข (NatTrans.app E.ฯ a โซ (F โ diagramFunctor J D X โ (evaluation (Cover J X)แตแต  โฆ
        dsimp [diagramNatTrans]
        -- โข (NatTrans.app E.ฯ a โซ Multiequalizer.lift (Cover.index W (F.obj b)) (multieq โฆ
        simp only [Multiequalizer.lift_ฮน, Category.assoc] }
        -- ๐ no goals
#align category_theory.grothendieck_topology.cone_comp_evaluation_of_cone_comp_diagram_functor_comp_evaluation CategoryTheory.GrothendieckTopology.coneCompEvaluationOfConeCompDiagramFunctorCompEvaluation

/-- An auxiliary definition to be used in the proof of the fact that
`J.diagramFunctor D X` preserves limits. -/
abbrev liftToDiagramLimitObj {X : C} {K : Type max v u} [SmallCategory K] [HasLimitsOfShape K D]
    {W : (J.Cover X)แตแต} (F : K โฅค Cแตแต โฅค D)
    (E : Cone (F โ J.diagramFunctor D X โ (evaluation (J.Cover X)แตแต D).obj W)) :
    E.pt โถ (J.diagram (limit F) X).obj W :=
  Multiequalizer.lift ((unop W).index (limit F)) E.pt
    (fun i => (isLimitOfPreserves ((evaluation Cแตแต D).obj (op i.Y)) (limit.isLimit F)).lift
        (coneCompEvaluationOfConeCompDiagramFunctorCompEvaluation.{w, v, u} i E))
    (by
      intro i
      -- โข (fun i => IsLimit.lift (isLimitOfPreserves ((evaluation Cแตแต D).obj (op i.Y)) โฆ
      change (_ โซ _) โซ _ = (_ โซ _) โซ _
      -- โข ((IsLimit.liftConeMorphism (IsLimit.ofIsoLimit (limit.isLimit (F โ (evaluati โฆ
      dsimp [evaluateCombinedCones]
      -- โข ((limit.lift (F โ (evaluation Cแตแต D).obj (op (MulticospanIndex.fstTo (Cover. โฆ
      erw [Category.comp_id, Category.comp_id, Category.assoc, Category.assoc, โ
        (limit.lift F _).naturality, โ (limit.lift F _).naturality, โ Category.assoc, โ
        Category.assoc]
      congr 1
      -- โข limit.lift (F โ (evaluation Cแตแต D).obj (op (MulticospanIndex.fstTo (Cover.in โฆ
      refine' limit.hom_ext (fun j => _)
      -- โข (limit.lift (F โ (evaluation Cแตแต D).obj (op (MulticospanIndex.fstTo (Cover.i โฆ
      erw [Category.assoc, Category.assoc, limit.lift_ฯ, limit.lift_ฯ, limit.lift_ฯ_assoc,
        limit.lift_ฯ_assoc, Category.assoc, Category.assoc, Multiequalizer.condition]
      rfl)
      -- ๐ no goals
#align category_theory.grothendieck_topology.lift_to_diagram_limit_obj CategoryTheory.GrothendieckTopology.liftToDiagramLimitObj

instance preservesLimit_diagramFunctor
    (X : C) (K : Type max v u) [SmallCategory K] [HasLimitsOfShape K D] (F : K โฅค Cแตแต โฅค D) :
    PreservesLimit F (J.diagramFunctor D X) :=
  preservesLimitOfEvaluation _ _ fun W =>
    preservesLimitOfPreservesLimitCone (limit.isLimit _)
      { lift := fun E => liftToDiagramLimitObj.{w, v, u} F E
        fac := by
          intro E k
          -- โข (fun E => liftToDiagramLimitObj F E) E โซ NatTrans.app ((diagramFunctor J D X โฆ
          dsimp [diagramNatTrans]
          -- โข liftToDiagramLimitObj F E โซ Multiequalizer.lift (Cover.index W.unop (F.obj k โฆ
          refine' Multiequalizer.hom_ext _ _ _ (fun a => _)
          -- โข (liftToDiagramLimitObj F E โซ Multiequalizer.lift (Cover.index W.unop (F.obj  โฆ
          simp only [Multiequalizer.lift_ฮน, Multiequalizer.lift_ฮน_assoc, Category.assoc]
          -- โข IsLimit.lift (isLimitOfPreserves ((evaluation Cแตแต D).obj (op a.Y)) (limit.is โฆ
          change (_ โซ _) โซ _ = _
          -- โข ((IsLimit.liftConeMorphism (IsLimit.ofIsoLimit (limit.isLimit (F โ (evaluati โฆ
          dsimp [evaluateCombinedCones]
          -- โข ((limit.lift (F โ (evaluation Cแตแต D).obj (op a.Y)) (coneCompEvaluationOfCone โฆ
          erw [Category.comp_id, Category.assoc, โ NatTrans.comp_app, limit.lift_ฯ, limit.lift_ฯ]
          -- โข NatTrans.app (coneCompEvaluationOfConeCompDiagramFunctorCompEvaluation a E). โฆ
          rfl
          -- ๐ no goals
        uniq := by
          intro E m hm
          -- โข m = (fun E => liftToDiagramLimitObj F E) E
          refine' Multiequalizer.hom_ext _ _ _ (fun a => limit_obj_ext (fun j => _))
          -- โข (m โซ Multiequalizer.ฮน (Cover.index W.unop (limit.cone F).pt) a) โซ NatTrans.a โฆ
          delta liftToDiagramLimitObj
          -- โข (m โซ Multiequalizer.ฮน (Cover.index W.unop (limit.cone F).pt) a) โซ NatTrans.a โฆ
          erw [Multiequalizer.lift_ฮน, Category.assoc]
          -- โข m โซ Multiequalizer.ฮน (Cover.index W.unop (limit.cone F).pt) a โซ NatTrans.app โฆ
          change _ = (_ โซ _) โซ _
          -- โข m โซ Multiequalizer.ฮน (Cover.index W.unop (limit.cone F).pt) a โซ NatTrans.app โฆ
          dsimp [evaluateCombinedCones]
          -- โข m โซ Multiequalizer.ฮน (Cover.index W.unop (limit F)) a โซ NatTrans.app (limit. โฆ
          erw [Category.comp_id, Category.assoc, โ NatTrans.comp_app, limit.lift_ฯ, limit.lift_ฯ]
          -- โข m โซ Multiequalizer.ฮน (Cover.index W.unop (limit F)) a โซ NatTrans.app (limit. โฆ
          dsimp
          -- โข m โซ Multiequalizer.ฮน (Cover.index W.unop (limit F)) a โซ NatTrans.app (limit. โฆ
          rw [โ hm]
          -- โข m โซ Multiequalizer.ฮน (Cover.index W.unop (limit F)) a โซ NatTrans.app (limit. โฆ
          dsimp [diagramNatTrans]
          -- โข m โซ Multiequalizer.ฮน (Cover.index W.unop (limit F)) a โซ NatTrans.app (limit. โฆ
          simp }
          -- ๐ no goals

instance preservesLimitsOfShape_diagramFunctor
    (X : C) (K : Type max v u) [SmallCategory K] [HasLimitsOfShape K D] :
    PreservesLimitsOfShape K (J.diagramFunctor D X) :=
  โจby apply preservesLimit_diagramFunctor.{w, v, u}โฉ
      -- ๐ no goals

instance preservesLimits_diagramFunctor (X : C) [HasLimits D] :
    PreservesLimits (J.diagramFunctor D X) := by
  constructor
  -- โข autoParam ({J_1 : Type (max u v)} โ [inst : Category.{max u v, max u v} J_1] โฆ
  intro _ _
  -- โข PreservesLimitsOfShape Jโ (diagramFunctor J D X)
  apply preservesLimitsOfShape_diagramFunctor.{w, v, u}
  -- ๐ no goals

variable [โ X : C, HasColimitsOfShape (J.Cover X)แตแต D]

variable [ConcreteCategory.{max v u} D]

variable [โ X : C, PreservesColimitsOfShape (J.Cover X)แตแต (forget D)]

/-- An auxiliary definition to be used in the proof that `J.plusFunctor D` commutes
with finite limits. -/
def liftToPlusObjLimitObj {K : Type max v u} [SmallCategory K] [FinCategory K]
    [HasLimitsOfShape K D] [PreservesLimitsOfShape K (forget D)]
    [ReflectsLimitsOfShape K (forget D)] (F : K โฅค Cแตแต โฅค D) (X : C)
    (S : Cone (F โ J.plusFunctor D โ (evaluation Cแตแต D).obj (op X))) :
    S.pt โถ (J.plusObj (limit F)).obj (op X) :=
  let e := colimitLimitIso (F โ J.diagramFunctor D X)
  let t : J.diagram (limit F) X โ limit (F โ J.diagramFunctor D X) :=
    (isLimitOfPreserves (J.diagramFunctor D X) (limit.isLimit F)).conePointUniqueUpToIso
      (limit.isLimit _)
  let p : (J.plusObj (limit F)).obj (op X) โ colimit (limit (F โ J.diagramFunctor D X)) :=
    HasColimit.isoOfNatIso t
  let s :
    colimit (F โ J.diagramFunctor D X).flip โ F โ J.plusFunctor D โ (evaluation Cแตแต D).obj (op X) :=
    NatIso.ofComponents (fun k => colimitObjIsoColimitCompEvaluation _ k)
      (by
        intro i j f
        -- โข (colimit (Functor.flip (F โ diagramFunctor J D X))).map f โซ ((fun k => colim โฆ
        rw [โ Iso.eq_comp_inv, Category.assoc, โ Iso.inv_comp_eq]
        -- โข ((fun k => colimitObjIsoColimitCompEvaluation (Functor.flip (F โ diagramFunc โฆ
        refine' colimit.hom_ext (fun w => _)
        -- โข colimit.ฮน (diagram J (F.obj i) (op X).unop) w โซ ((fun k => colimitObjIsoColi โฆ
        dsimp [plusMap]
        -- โข colimit.ฮน (diagram J (F.obj i) X) w โซ (colimitObjIsoColimitCompEvaluation (F โฆ
        erw [colimit.ฮน_map_assoc,
          colimitObjIsoColimitCompEvaluation_ฮน_inv (F โ J.diagramFunctor D X).flip w j,
          colimitObjIsoColimitCompEvaluation_ฮน_inv_assoc (F โ J.diagramFunctor D X).flip w i]
        rw [โ (colimit.ฮน (F โ J.diagramFunctor D X).flip w).naturality]
        -- โข ((Functor.flip (F โ diagramFunctor J D X)).obj w).map f โซ NatTrans.app (coli โฆ
        rfl)
        -- ๐ no goals
  limit.lift _ S โซ (HasLimit.isoOfNatIso s.symm).hom โซ e.inv โซ p.inv
#align category_theory.grothendieck_topology.lift_to_plus_obj_limit_obj CategoryTheory.GrothendieckTopology.liftToPlusObjLimitObj

-- This lemma should not be used directly. Instead, one should use the fact that
-- `J.plusFunctor D` preserves finite limits, along with the fact that
-- evaluation preserves limits.
theorem liftToPlusObjLimitObj_fac {K : Type max v u} [SmallCategory K] [FinCategory K]
    [HasLimitsOfShape K D] [PreservesLimitsOfShape K (forget D)]
    [ReflectsLimitsOfShape K (forget D)] (F : K โฅค Cแตแต โฅค D) (X : C)
    (S : Cone (F โ J.plusFunctor D โ (evaluation Cแตแต D).obj (op X))) (k) :
    liftToPlusObjLimitObj.{w, v, u} F X S โซ (J.plusMap (limit.ฯ F k)).app (op X) = S.ฯ.app k := by
  dsimp only [liftToPlusObjLimitObj]
  -- โข (limit.lift (F โ plusFunctor J D โ (evaluation Cแตแต D).obj (op X)) S โซ (HasLi โฆ
  rw [โ (limit.isLimit (F โ J.plusFunctor D โ (evaluation Cแตแต D).obj (op X))).fac S k,
    Category.assoc]
  congr 1
  -- โข ((HasLimit.isoOfNatIso (NatIso.ofComponents fun k => colimitObjIsoColimitCom โฆ
  dsimp
  -- โข ((HasLimit.isoOfNatIso (NatIso.ofComponents fun k => colimitObjIsoColimitCom โฆ
  rw [Category.assoc, Category.assoc, โ Iso.eq_inv_comp, Iso.inv_comp_eq, Iso.inv_comp_eq]
  -- โข NatTrans.app (plusMap J (limit.ฯ F k)) (op X) = (HasColimit.isoOfNatIso (IsL โฆ
  refine' colimit.hom_ext (fun j => _)
  -- โข colimit.ฮน (diagram J (limit F) (op X).unop) j โซ NatTrans.app (plusMap J (lim โฆ
  dsimp [plusMap]
  -- โข colimit.ฮน (diagram J (limit F) X) j โซ colimMap (diagramNatTrans J (limit.ฯ F โฆ
  simp only [HasColimit.isoOfNatIso_ฮน_hom_assoc, ฮน_colimMap]
  -- โข NatTrans.app (diagramNatTrans J (limit.ฯ F k) X) j โซ colimit.ฮน (diagram J (F โฆ
  dsimp [IsLimit.conePointUniqueUpToIso, HasLimit.isoOfNatIso, IsLimit.map]
  -- โข Multiequalizer.lift (Cover.index j.unop (F.obj k)) (multiequalizer (Cover.in โฆ
  rw [limit.lift_ฯ]
  -- โข Multiequalizer.lift (Cover.index j.unop (F.obj k)) (multiequalizer (Cover.in โฆ
  dsimp
  -- โข Multiequalizer.lift (Cover.index j.unop (F.obj k)) (multiequalizer (Cover.in โฆ
  rw [ฮน_colimitLimitIso_limit_ฯ_assoc]
  -- โข Multiequalizer.lift (Cover.index j.unop (F.obj k)) (multiequalizer (Cover.in โฆ
  simp_rw [โ Category.assoc, โ NatTrans.comp_app]
  -- โข Multiequalizer.lift (Cover.index j.unop (F.obj k)) (multiequalizer (Cover.in โฆ
  rw [limit.lift_ฯ, Category.assoc]
  -- โข Multiequalizer.lift (Cover.index j.unop (F.obj k)) (multiequalizer (Cover.in โฆ
  congr 1
  -- โข colimit.ฮน (diagram J (F.obj k) X) j = NatTrans.app (colimit.ฮน (Functor.flip  โฆ
  rw [โ Iso.comp_inv_eq]
  -- โข colimit.ฮน (diagram J (F.obj k) X) j โซ (colimitObjIsoColimitCompEvaluation (F โฆ
  erw [colimit.ฮน_desc]
  -- โข NatTrans.app (((evaluation K D).obj k).mapCocone (colimit.cocone (Functor.fl โฆ
  rfl
  -- ๐ no goals
#align category_theory.grothendieck_topology.lift_to_plus_obj_limit_obj_fac CategoryTheory.GrothendieckTopology.liftToPlusObjLimitObj_fac

instance preservesLimitsOfShape_plusFunctor
    (K : Type max v u) [SmallCategory K] [FinCategory K] [HasLimitsOfShape K D]
    [PreservesLimitsOfShape K (forget D)] [ReflectsLimitsOfShape K (forget D)] :
    PreservesLimitsOfShape K (J.plusFunctor D) := by
  constructor; intro F; apply preservesLimitOfEvaluation; intro X
  -- โข autoParam ({K_1 : K โฅค Cแตแต โฅค D} โ PreservesLimit K_1 (plusFunctor J D)) _autoโ
               -- โข PreservesLimit F (plusFunctor J D)
                        -- โข (k : Cแตแต) โ PreservesLimit F (plusFunctor J D โ (evaluation Cแตแต D).obj k)
                                                          -- โข PreservesLimit F (plusFunctor J D โ (evaluation Cแตแต D).obj X)
  apply preservesLimitOfPreservesLimitCone (limit.isLimit F)
  -- โข IsLimit ((plusFunctor J D โ (evaluation Cแตแต D).obj X).mapCone (limit.cone F))
  refine' โจfun S => liftToPlusObjLimitObj.{w, v, u} F X.unop S, _, _โฉ
  -- โข โ (s : Cone (F โ plusFunctor J D โ (evaluation Cแตแต D).obj X)) (j : K), (fun  โฆ
  ยท intro S k
    -- โข (fun S => liftToPlusObjLimitObj F X.unop S) S โซ NatTrans.app ((plusFunctor J โฆ
    apply liftToPlusObjLimitObj_fac
    -- ๐ no goals
  ยท intro S m hm
    -- โข m = (fun S => liftToPlusObjLimitObj F X.unop S) S
    dsimp [liftToPlusObjLimitObj]
    -- โข m = limit.lift (F โ plusFunctor J D โ (evaluation Cแตแต D).obj X) S โซ (HasLimi โฆ
    simp_rw [โ Category.assoc, Iso.eq_comp_inv, โ Iso.comp_inv_eq]
    -- โข ((m โซ (HasColimit.isoOfNatIso (IsLimit.conePointUniqueUpToIso (isLimitOfPres โฆ
    refine' limit.hom_ext (fun k => _)
    -- โข (((m โซ (HasColimit.isoOfNatIso (IsLimit.conePointUniqueUpToIso (isLimitOfPre โฆ
    simp only [limit.lift_ฯ, Category.assoc, โ hm]
    -- โข m โซ (HasColimit.isoOfNatIso (IsLimit.conePointUniqueUpToIso (isLimitOfPreser โฆ
    congr 1
    -- โข (HasColimit.isoOfNatIso (IsLimit.conePointUniqueUpToIso (isLimitOfPreserves  โฆ
    refine' colimit.hom_ext (fun k => _)
    -- โข colimit.ฮน (diagram J (limit.cone F).pt X.unop) k โซ (HasColimit.isoOfNatIso ( โฆ
    dsimp [plusMap, plusObj]
    -- โข colimit.ฮน (diagram J (limit F) X.unop) k โซ (HasColimit.isoOfNatIso (IsLimit. โฆ
    erw [colimit.ฮน_map, colimit.ฮน_desc_assoc, limit.lift_ฯ]
    -- โข NatTrans.app ((Cocones.precompose (IsLimit.conePointUniqueUpToIso (isLimitOf โฆ
    conv_lhs => dsimp
    -- โข (NatTrans.app (IsLimit.conePointUniqueUpToIso (isLimitOfPreserves (diagramFu โฆ
    simp only [Category.assoc]
    -- โข NatTrans.app (IsLimit.conePointUniqueUpToIso (isLimitOfPreserves (diagramFun โฆ
    rw [ฮน_colimitLimitIso_limit_ฯ_assoc]
    -- โข NatTrans.app (IsLimit.conePointUniqueUpToIso (isLimitOfPreserves (diagramFun โฆ
    simp only [NatIso.ofComponents_inv_app, colimitObjIsoColimitCompEvaluation_ฮน_app_hom,
      Iso.symm_inv]
    conv_lhs =>
      dsimp [IsLimit.conePointUniqueUpToIso]
    rw [โ Category.assoc, โ NatTrans.comp_app, limit.lift_ฯ]
    -- โข NatTrans.app (NatTrans.app ((diagramFunctor J D X.unop).mapCone (limit.cone  โฆ
    rfl
    -- ๐ no goals

instance preserveFiniteLimits_plusFunctor
    [HasFiniteLimits D] [PreservesFiniteLimits (forget D)] [ReflectsIsomorphisms (forget D)] :
    PreservesFiniteLimits (J.plusFunctor D) := by
  apply preservesFiniteLimitsOfPreservesFiniteLimitsOfSize.{max v u}
  -- โข (J_1 : Type (max v u)) โ {๐ฅ : SmallCategory J_1} โ FinCategory J_1 โ Preserv โฆ
  intro K _ _
  -- โข PreservesLimitsOfShape K (plusFunctor J D)
  have : ReflectsLimitsOfShape K (forget D) := reflectsLimitsOfShapeOfReflectsIsomorphisms
  -- โข PreservesLimitsOfShape K (plusFunctor J D)
  apply preservesLimitsOfShape_plusFunctor.{w, v, u}
  -- ๐ no goals

instance preservesLimitsOfShape_sheafification
    (K : Type max v u) [SmallCategory K] [FinCategory K] [HasLimitsOfShape K D]
    [PreservesLimitsOfShape K (forget D)] [ReflectsLimitsOfShape K (forget D)] :
    PreservesLimitsOfShape K (J.sheafification D) :=
  Limits.compPreservesLimitsOfShape _ _

instance preservesFiniteLimits_sheafification
    [HasFiniteLimits D] [PreservesFiniteLimits (forget D)] [ReflectsIsomorphisms (forget D)] :
    PreservesFiniteLimits (J.sheafification D) :=
  Limits.compPreservesFiniteLimits _ _

end CategoryTheory.GrothendieckTopology

namespace CategoryTheory

variable [โ X : C, HasColimitsOfShape (J.Cover X)แตแต D]

variable [ConcreteCategory.{max v u} D]

variable [โ X : C, PreservesColimitsOfShape (J.Cover X)แตแต (forget D)]

variable [PreservesLimits (forget D)]

variable [ReflectsIsomorphisms (forget D)]

variable (K : Type max v u)

variable [SmallCategory K] [FinCategory K] [HasLimitsOfShape K D]

instance preservesLimitsOfShape_presheafToSheaf :
    PreservesLimitsOfShape K (presheafToSheaf J D) := by
  constructor; intro F; constructor; intro S hS
  -- โข autoParam ({K_1 : K โฅค Cแตแต โฅค D} โ PreservesLimit K_1 (presheafToSheaf J D)) _ โฆ
               -- โข PreservesLimit F (presheafToSheaf J D)
                        -- โข {c : Cone F} โ IsLimit c โ IsLimit ((presheafToSheaf J D).mapCone c)
                                     -- โข IsLimit ((presheafToSheaf J D).mapCone S)
  apply isLimitOfReflects (sheafToPresheaf J D)
  -- โข IsLimit ((sheafToPresheaf J D).mapCone ((presheafToSheaf J D).mapCone S))
  have : ReflectsLimitsOfShape K (forget D) := reflectsLimitsOfShapeOfReflectsIsomorphisms
  -- โข IsLimit ((sheafToPresheaf J D).mapCone ((presheafToSheaf J D).mapCone S))
  -- porting note: the mathlib proof was by `apply is_limit_of_preserves (J.sheafification D) hS`
  have : PreservesLimitsOfShape K (presheafToSheaf J D โ sheafToPresheaf J D) :=
    preservesLimitsOfShapeOfNatIso (J.sheafificationIsoPresheafToSheafCompSheafToPreasheaf D)
  exact isLimitOfPreserves (presheafToSheaf J D โ sheafToPresheaf J D) hS
  -- ๐ no goals

instance preservesfiniteLimits_presheafToSheaf [HasFiniteLimits D] :
    PreservesFiniteLimits (presheafToSheaf J D) := by
  apply preservesFiniteLimitsOfPreservesFiniteLimitsOfSize.{max v u}
  -- โข (J_1 : Type (max v u)) โ {๐ฅ : SmallCategory J_1} โ FinCategory J_1 โ Preserv โฆ
  intros
  -- โข PreservesLimitsOfShape Jโ (presheafToSheaf J D)
  infer_instance
  -- ๐ no goals

end CategoryTheory
