import Mathlib.AlgebraicTopology.AlternatingFaceMapComplex

universe w v v' v'' u u' u''

namespace CategoryTheory

open Limits Opposite AlgebraicTopology

variable {C : Type u} [Category.{v} C] (J : Type u') [Category.{v'} J]
  (A : Type u'') [Category.{v''} A]

variable [โ (I : Type w), HasProductsOfShape I A]

variable (C) in
structure FormalCoproduct where
  I : Type w
  obj (i : I) : C

namespace FormalCoproduct

@[ext] structure Hom (X Y : FormalCoproduct.{w} C) where
  f : X.I โ Y.I
  ฯ (i : X.I) : X.obj i โถ Y.obj (f i)

-- this category identifies to the fullsubcategory of the category of
-- presheaves of sets on `C` which are coproducts of representable presheaves
@[simps!] instance category : Category (FormalCoproduct.{w} C) where
  Hom := Hom
  id X := { f := id, ฯ := fun _ โฆ ๐ _ }
  comp ฮฑ ฮฒ := { f := ฮฒ.f โ ฮฑ.f, ฯ := fun _ โฆ ฮฑ.ฯ _ โซ ฮฒ.ฯ _ }

@[simps] noncomputable def eval (X : FormalCoproduct.{w} C) : (Cแตแต โฅค A) โฅค A where
  obj F := โแถ (fun (i : X.I) โฆ F.obj (op (X.obj i)))
  map ฮฑ := Pi.map (fun _ โฆ ฮฑ.app _)

variable (C)

@[simps] noncomputable def evalFunctor : (FormalCoproduct.{w} C)แตแต โฅค (Cแตแต โฅค A) โฅค A where
  obj X := X.unop.eval A
  map {X Y} ฯ :=
    { app := fun F โฆ Pi.map' ฯ.unop.f (fun i โฆ F.map (ฯ.unop.ฯ i).op) }

noncomputable def evalFunctor' : (Jแตแต โฅค FormalCoproduct.{w} C)แตแต โฅค (Cแตแต โฅค A) โฅค (J โฅค A) :=
  ((whiskeringRight Jแตแต _ _).obj ((evalFunctor C A).rightOp)).op โ (by
    let ฯ : (Jแตแต โฅค ((Cแตแต โฅค A) โฅค A)แตแต)แตแต โฅค (J โฅค ((Cแตแต โฅค A) โฅค A)) := sorry
    let ฯ : (J โฅค (Cแตแต โฅค A) โฅค A) โฅค (Cแตแต โฅค A) โฅค J โฅค A := sorry -- Functor.flip as a functor...
    exact ฯ โ ฯ)

noncomputable abbrev simplicialEvalFunctor : (SimplicialObject (FormalCoproduct.{w} C))แตแต โฅค
    (Cแตแต โฅค A) โฅค CosimplicialObject A :=
  evalFunctor' C SimplexCategory A

noncomputable abbrev cochainComplexFunctor [Preadditive A] :
    (SimplicialObject (FormalCoproduct.{w} C))แตแต โฅค
      (Cแตแต โฅค A) โฅค CochainComplex A โ :=
  simplicialEvalFunctor C A โ ((whiskeringRight _ _ _).obj (alternatingCofaceMapComplex A))

variable {C} in
def cechSimplicial {I : Type w} (U : I โ C) [HasFiniteProducts C] :
    SimplicialObject (FormalCoproduct C) := by
  -- variant of `cechNerve` where in degree `n` we take the formal coproduct
  -- over maps `a : {0,...,n} โ I` of the finite product of the `U (a i)`.
  sorry

end FormalCoproduct

noncomputable def cechComplexFunctor {I : Type w} (U : I โ C)
    [HasFiniteProducts C] [Preadditive A] :
    (Cแตแต โฅค A) โฅค CochainComplex A โ :=
  (FormalCoproduct.cochainComplexFunctor.{w} C A).obj (op (FormalCoproduct.cechSimplicial U))

-- apply this to a family of objects `U : I โ C` which satisfies `J.CoversTop U` for
-- a Grothendieck topology, or if `X : C` and we have a covering family of arrows
--  `f i : U i โถ X` identified as a family of objects in `Over X`.

-- next step: show that if `V` refines `U`, then the induced maps are homotopic

end CategoryTheory
