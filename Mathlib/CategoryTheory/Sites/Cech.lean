import Mathlib.AlgebraicTopology.AlternatingFaceMapComplex

universe w v v' v'' u u' u''

namespace CategoryTheory

open Limits Opposite AlgebraicTopology

variable {C : Type u} [Category.{v} C] (J : Type u') [Category.{v'} J]
  (A : Type u'') [Category.{v''} A]

variable [‚àÄ (I : Type w), HasProductsOfShape I A]

variable (C) in
structure FormalCoproduct where
  I : Type w
  obj (i : I) : C

namespace FormalCoproduct

structure Hom (X Y : FormalCoproduct.{w} C) where
  f : X.I ‚Üí Y.I
  œÜ (i : X.I) : X.obj i ‚ü∂ Y.obj (f i)

-- this category identifies to the fullsubcategory of the category of
-- presheaves of sets on `C` which are coproducts of representable presheaves
@[simps!] instance category : Category (FormalCoproduct.{w} C) where
  Hom := Hom
  id X := { f := id, œÜ := fun _ ‚Ü¶ ùüô _ }
  comp Œ± Œ≤ := { f := Œ≤.f ‚àò Œ±.f, œÜ := fun _ ‚Ü¶ Œ±.œÜ _ ‚â´ Œ≤.œÜ _ }

@[ext]
lemma hom_ext {X Y : FormalCoproduct.{w} C} {f g : X ‚ü∂ Y} (h‚ÇÅ : f.f = g.f)
    (h‚ÇÇ : ‚àÄ (i : X.I), f.œÜ i ‚â´ eqToHom (by rw [h‚ÇÅ]) = g.œÜ i): f = g := by
  sorry

@[simps] noncomputable def eval (X : FormalCoproduct.{w} C) : (C·µí·µñ ‚•§ A) ‚•§ A where
  obj F := ‚àè·∂ú (fun (i : X.I) ‚Ü¶ F.obj (op (X.obj i)))
  map Œ± := Pi.map (fun _ ‚Ü¶ Œ±.app _)

variable (C)

@[simps] noncomputable def evalFunctor : (FormalCoproduct.{w} C)·µí·µñ ‚•§ (C·µí·µñ ‚•§ A) ‚•§ A where
  obj X := X.unop.eval A
  map {X Y} œÄ :=
    { app := fun F ‚Ü¶ Pi.map' œÄ.unop.f (fun i ‚Ü¶ F.map (œÄ.unop.œÜ i).op) }

noncomputable def evalFunctor' : (J·µí·µñ ‚•§ FormalCoproduct.{w} C)·µí·µñ ‚•§ (C·µí·µñ ‚•§ A) ‚•§ (J ‚•§ A) :=
  ((evalFunctor C A).flip ‚ãô whiskeringRight J (FormalCoproduct C)·µí·µñ A ‚ãô
    (whiskeringLeft _ _ _).obj ((Functor.leftOpRightOpEquiv _ _).functor)).flip

noncomputable abbrev simplicialEvalFunctor : (SimplicialObject (FormalCoproduct.{w} C))·µí·µñ ‚•§
    (C·µí·µñ ‚•§ A) ‚•§ CosimplicialObject A :=
  evalFunctor' C SimplexCategory A

noncomputable abbrev cochainComplexFunctor [Preadditive A] :
    (SimplicialObject (FormalCoproduct.{w} C))·µí·µñ ‚•§
      (C·µí·µñ ‚•§ A) ‚•§ CochainComplex A ‚Ñï :=
  simplicialEvalFunctor C A ‚ãô (whiskeringRight _ _ _).obj (alternatingCofaceMapComplex A)

-- this is a variant of `cechNerve`
variable {C} in
noncomputable def cechSimplicial {I : Type w} (U : I ‚Üí C) [HasFiniteProducts C] :
    SimplicialObject (FormalCoproduct C) where
  obj := fun Œî ‚Ü¶
    { I := Fin (Œî.unop.len + 1) ‚Üí I
      obj := fun a ‚Ü¶ ‚àè·∂ú (fun x ‚Ü¶ U (a x)) }
  map {Œî Œî'} f :=
    { f := fun a x ‚Ü¶ a (f.unop.toOrderHom x)
      œÜ := fun a ‚Ü¶ Pi.map' (fun x ‚Ü¶ f.unop.toOrderHom x) (fun x ‚Ü¶ ùüô _) }
  map_id _ := by ext <;> simp
  map_comp _ _ := by ext <;> simp

end FormalCoproduct

noncomputable def cechComplexFunctor {I : Type w} (U : I ‚Üí C)
    [HasFiniteProducts C] [Preadditive A] :
    (C·µí·µñ ‚•§ A) ‚•§ CochainComplex A ‚Ñï :=
  (FormalCoproduct.cochainComplexFunctor.{w} C A).obj (op (FormalCoproduct.cechSimplicial U))

-- apply this to a family of objects `U : I ‚Üí C` which satisfies `J.CoversTop U` for
-- a Grothendieck topology, or if `X : C` and we have a covering family of arrows
--  `f i : U i ‚ü∂ X` identified as a family of objects in `Over X`.

-- next step: show that if `V` refines `U`, then two refinements induce homotopic maps

end CategoryTheory
