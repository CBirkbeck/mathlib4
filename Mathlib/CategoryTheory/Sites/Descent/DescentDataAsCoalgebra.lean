/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Sites.Descent.DescentDataPrime
import Mathlib.CategoryTheory.Bicategory.Adjunction.Adj
import Mathlib.CategoryTheory.Monad.Adjunction
import Mathlib.CategoryTheory.Bicategory.Adjunction.BaseChange

/-!
# Descent data as coalgebras...

-/

namespace CategoryTheory

@[simps]
def Bicategory.Adjunction.toCategory {C D : Cat} {F : C ‚ü∂ D} {G : D ‚ü∂ C}
    (adj : Bicategory.Adjunction F G) :
    CategoryTheory.Adjunction F G where
  unit := adj.unit
  counit := adj.counit
  left_triangle_components X := by
    have := congr_app adj.left_triangle X
    dsimp [leftZigzag, bicategoricalComp] at this
    simpa [Cat.associator_hom_app, Cat.leftUnitor_hom_app, Cat.rightUnitor_inv_app] using this
  right_triangle_components X := by
    have := congr_app adj.right_triangle X
    dsimp [rightZigzag, bicategoricalComp] at this
    simpa [Cat.associator_inv_app, Cat.leftUnitor_inv_app] using this

open Opposite Limits Bicategory

namespace Pseudofunctor

/-- A slightly reformulated characterisation of the composition condition in `DescentData'`. -/
lemma DescentData'.pullHom'_comp_pullHom'_eq_iff
    {C : Type*} [Category C] (F : Pseudofunctor (LocallyDiscrete C·µí·µñ) Cat)
    {Œπ : Type*} {S : C} {X : Œπ ‚Üí C} (f : ‚àÄ i, X i ‚ü∂ S) (sq : ‚àÄ i j, ChosenPullback (f i) (f j))
    (sq‚ÇÉ : (i‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ) ‚Üí ChosenPullback‚ÇÉ (sq i‚ÇÅ i‚ÇÇ) (sq i‚ÇÇ i‚ÇÉ) (sq i‚ÇÅ i‚ÇÉ))
    (obj : ‚àÄ i, F.obj (.mk (op (X i))))
    (hom : ‚àÄ i j, (F.map (sq i j).p‚ÇÅ.op.toLoc).obj (obj i) ‚ü∂
      (F.map (sq i j).p‚ÇÇ.op.toLoc).obj (obj j))
    {i‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ} :
    DescentData'.pullHom' hom (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÇ
        (by simp) (by simp) ‚â´
      DescentData'.pullHom' hom (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÇ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÉ
        (by simp) (by simp) =
      DescentData'.pullHom' hom (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÉ
        (by simp) (by simp) ‚Üî
        (F.isoMapOfCommSq ‚ü®by simp [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp]‚ü©).hom.app _ ‚â´
        (F.map ((sq i‚ÇÅ i‚ÇÇ).isPullback.lift
          (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÇ (by simp)).op.toLoc).map (hom i‚ÇÅ i‚ÇÇ) ‚â´
        (F.isoMapOfCommSq ‚ü®by simp [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp]‚ü©).hom.app _ ‚â´
        (F.map ((sq i‚ÇÇ i‚ÇÉ).isPullback.lift
          (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÇ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÉ (by simp)).op.toLoc).map (hom i‚ÇÇ i‚ÇÉ) ‚â´
        (F.isoMapOfCommSq ‚ü®by simp [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp]‚ü©).hom.app _ =
        (F.map ((sq i‚ÇÅ i‚ÇÉ).isPullback.lift
            (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÉ (by simp)).op.toLoc).map (hom i‚ÇÅ i‚ÇÉ) := by
  dsimp [DescentData'.pullHom', LocallyDiscreteOpToCat.pullHom]
  simp only [Category.assoc]
  rw [‚Üê cancel_epi ((F.mapComp' (sq i‚ÇÅ i‚ÇÉ).p‚ÇÅ.op.toLoc _ _ _).inv.app (obj i‚ÇÅ))]
  rw [Iso.inv_hom_id_app_assoc]
  rw [‚Üê cancel_mono ((F.mapComp' (sq i‚ÇÅ i‚ÇÉ).p‚ÇÇ.op.toLoc _ _ _).hom.app _)]
  ¬∑ simp_rw [Category.assoc]
    rw [Iso.inv_hom_id_app]
    simp only [Cat.comp_obj, Category.comp_id]
    rw [isoMapOfCommSq_eq, isoMapOfCommSq_eq, isoMapOfCommSq_eq]
    ¬∑ simp only [Iso.trans_hom, Iso.symm_hom, Cat.comp_app, Cat.comp_obj, Category.assoc]
      rfl
    ¬∑ simp [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp]
    ¬∑ simp [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp]
    ¬∑ simp [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp]

variable {C : Type*} [Category C] (F : Pseudofunctor (LocallyDiscrete C·µí·µñ) (Adj Cat))

namespace LocallyDiscreteToAdjCat

set_option quotPrecheck false in
scoped notation g:80 " _* " M:81 => ((_ : Pseudofunctor _ (Adj Cat)).map
  (Quiver.Hom.op g).toLoc).r.obj M

set_option quotPrecheck false in
scoped notation g:80 " ^* " M:81 => ((_ : Pseudofunctor _ (Adj Cat)).map
  (Quiver.Hom.op g).toLoc).l.obj M

end LocallyDiscreteToAdjCat

open LocallyDiscreteToAdjCat

@[ext]
structure DescentDataAsCoalgebra {Œπ : Type*} {S : C} {X : Œπ ‚Üí C} (f : ‚àÄ i, X i ‚ü∂ S) where
  obj (i : Œπ) : (F.obj (.mk (op (X i)))).obj
  hom (i‚ÇÅ i‚ÇÇ : Œπ) : obj i‚ÇÅ ‚ü∂ (f i‚ÇÅ) ^* (f i‚ÇÇ) _* (obj i‚ÇÇ)
  counit (i : Œπ) : hom i i ‚â´ (F.map (f i).op.toLoc).adj.counit.app _ = ùüô _ := by aesop_cat
  coassoc (i‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ) :
    hom i‚ÇÅ i‚ÇÇ ‚â´ (F.map (f i‚ÇÅ).op.toLoc).l.map ((F.map (f i‚ÇÇ).op.toLoc).r.map (hom i‚ÇÇ i‚ÇÉ)) =
      hom i‚ÇÅ i‚ÇÉ ‚â´
        (F.map (f i‚ÇÅ).op.toLoc).l.map ((F.map (f i‚ÇÇ).op.toLoc).adj.unit.app _) := by aesop_cat

namespace DescentDataAsCoalgebra

attribute [reassoc (attr := simp)] counit coassoc
variable {F}

section

variable {Œπ : Type*} {S : C} {X : Œπ ‚Üí C} {f : ‚àÄ i, X i ‚ü∂ S}

@[ext]
structure Hom (D‚ÇÅ D‚ÇÇ : F.DescentDataAsCoalgebra f) where
  hom (i : Œπ) : D‚ÇÅ.obj i ‚ü∂ D‚ÇÇ.obj i
  comm (i‚ÇÅ i‚ÇÇ : Œπ) :
    D‚ÇÅ.hom i‚ÇÅ i‚ÇÇ ‚â´
      (F.map (f i‚ÇÅ).op.toLoc).l.map ((F.map (f i‚ÇÇ).op.toLoc).r.map (hom i‚ÇÇ)) =
    hom i‚ÇÅ ‚â´ D‚ÇÇ.hom i‚ÇÅ i‚ÇÇ := by aesop_cat

attribute [reassoc (attr := simp)] Hom.comm

@[simps]
def Hom.id (D : F.DescentDataAsCoalgebra f) : Hom D D where
  hom _ := ùüô _

@[simps]
def Hom.comp {D‚ÇÅ D‚ÇÇ D‚ÇÉ : F.DescentDataAsCoalgebra f} (œÜ : Hom D‚ÇÅ D‚ÇÇ) (œÜ' : Hom D‚ÇÇ D‚ÇÉ) :
    Hom D‚ÇÅ D‚ÇÉ where
  hom i := œÜ.hom i ‚â´ œÜ'.hom i

instance : Category (F.DescentDataAsCoalgebra f) where
  Hom := Hom
  id := Hom.id
  comp := Hom.comp

@[ext]
lemma hom_ext {D‚ÇÅ D‚ÇÇ : F.DescentDataAsCoalgebra f} {œÜ œÜ' : D‚ÇÅ ‚ü∂ D‚ÇÇ}
    (h : ‚àÄ i, œÜ.hom i = œÜ'.hom i): œÜ = œÜ' :=
  Hom.ext (funext h)

@[simp]
lemma id_hom (D : F.DescentDataAsCoalgebra f) (i : Œπ) :
    Hom.hom (ùüô D) i = ùüô _ := rfl

@[reassoc, simp]
lemma comp_hom {D‚ÇÅ D‚ÇÇ D‚ÇÉ : F.DescentDataAsCoalgebra f} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) (œÜ' : D‚ÇÇ ‚ü∂ D‚ÇÉ) (i : Œπ) :
    (œÜ ‚â´ œÜ').hom i = œÜ.hom i ‚â´ œÜ'.hom i := rfl

@[simps]
def isoMk {D‚ÇÅ D‚ÇÇ : F.DescentDataAsCoalgebra f} (e : ‚àÄ (i : Œπ), D‚ÇÅ.obj i ‚âÖ D‚ÇÇ.obj i)
    (comm : ‚àÄ (i‚ÇÅ i‚ÇÇ : Œπ), D‚ÇÅ.hom i‚ÇÅ i‚ÇÇ ‚â´
      (F.map (f i‚ÇÅ).op.toLoc).l.map ((F.map (f i‚ÇÇ).op.toLoc).r.map (e i‚ÇÇ).hom) =
      (e i‚ÇÅ).hom ‚â´ D‚ÇÇ.hom i‚ÇÅ i‚ÇÇ := by aesop_cat) :
    D‚ÇÅ ‚âÖ D‚ÇÇ where
  hom.hom i := (e i).hom
  hom.comm := comm
  inv.hom i := (e i).inv
  inv.comm i‚ÇÅ i‚ÇÇ := by
    rw [‚Üê cancel_epi (e i‚ÇÅ).hom, ‚Üê reassoc_of% (comm i‚ÇÅ i‚ÇÇ), ‚Üê Functor.map_comp, ‚Üê Functor.map_comp]
    simp

end

section Unit

variable {X S : C} {f : X ‚ü∂ S}

@[simps]
def toCoalgebra (D : F.DescentDataAsCoalgebra (fun (_ : Unit) ‚Ü¶ f)) :
    (F.map f.op.toLoc).adj.toCategory.toComonad.Coalgebra where
  A := D.obj .unit
  a := D.hom .unit .unit

@[simps]
def ofCoalgebra (A : (F.map f.op.toLoc).adj.toCategory.toComonad.Coalgebra) :
    F.DescentDataAsCoalgebra (fun (_ : Unit) ‚Ü¶ f) where
  obj _ := A.A
  hom _ _ := A.a
  counit _ := A.counit
  coassoc _ _ _ := A.coassoc.symm

variable (F f)

@[simps]
def toCoalgebraFunctor :
    F.DescentDataAsCoalgebra (fun (_ : Unit) ‚Ü¶ f) ‚•§
    (F.map f.op.toLoc).adj.toCategory.toComonad.Coalgebra where
  obj D := D.toCoalgebra
  map œÜ := { f := œÜ.hom .unit }

@[simps]
def fromCoalgebraFunctor :
    (F.map f.op.toLoc).adj.toCategory.toComonad.Coalgebra ‚•§
      F.DescentDataAsCoalgebra (fun (_ : Unit) ‚Ü¶ f) where
  obj A := ofCoalgebra A
  map œÜ :=
    { hom _ := œÜ.f
      comm _ _ := œÜ.h }

@[simps]
def coalgebraEquivalence :
    F.DescentDataAsCoalgebra (fun (_ : Unit) ‚Ü¶ f) ‚âå
    (F.map f.op.toLoc).adj.toCategory.toComonad.Coalgebra where
  functor := toCoalgebraFunctor F f
  inverse := fromCoalgebraFunctor F f
  unitIso := Iso.refl _
  counitIso := Iso.refl _

end Unit

variable (F) {Œπ : Type*} {S : C} {X : Œπ ‚Üí C} {f : ‚àÄ i, X i ‚ü∂ S}
  (sq : ‚àÄ i j, ChosenPullback (f i) (f j))
  (sq‚ÇÉ : ‚àÄ (i‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ), ChosenPullback‚ÇÉ (sq i‚ÇÅ i‚ÇÇ) (sq i‚ÇÇ i‚ÇÉ) (sq i‚ÇÅ i‚ÇÉ))

section

variable {F}

variable (A : F.DescentDataAsCoalgebra f)

@[simps]
def descentData' : (F.comp Adj.forget‚ÇÅ).DescentData' sq sq‚ÇÉ where
  obj := A.obj
  hom i j := F.coalgHom (sq i j).commSq.flip.op.toLoc (A.hom i j)
  pullHom'_hom_self i := by
    dsimp [DescentData'.pullHom', LocallyDiscreteOpToCat.pullHom]
    rw [map_coalgHom_of_comp_eq_id]
    ¬∑ simp [A.counit]
    ¬∑ simp [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp]
    ¬∑ simp [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp]
  pullHom'_hom_comp i‚ÇÅ i‚ÇÇ i‚ÇÉ := by
    rw [DescentData'.pullHom'_comp_pullHom'_eq_iff]
    simp only [comp_toPrelaxFunctor, PrelaxFunctor.comp_toPrelaxFunctorStruct,
      PrelaxFunctorStruct.comp_toPrefunctor, Prefunctor.comp_obj, Adj.forget‚ÇÅ_obj,
      Prefunctor.comp_map, Adj.forget‚ÇÅ_map, Cat.comp_obj]
    rw [coalgHom_eq_coalgHom_coalgHom (f‚ÇÇ := (f i‚ÇÇ).op.toLoc) (A‚ÇÇ := A.obj i‚ÇÇ)
      (u‚ÇÅ‚ÇÇ := (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ.op.toLoc) (u‚ÇÇ‚ÇÅ := (sq i‚ÇÅ i‚ÇÇ).p‚ÇÇ.op.toLoc)
      (u‚ÇÇ‚ÇÉ := (sq i‚ÇÇ i‚ÇÉ).p‚ÇÅ.op.toLoc) (u‚ÇÉ‚ÇÇ := (sq i‚ÇÇ i‚ÇÉ).p‚ÇÇ.op.toLoc)
      (p‚ÇÅ‚ÇÇ := ((sq i‚ÇÅ i‚ÇÇ).isPullback.lift (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÇ (by simp)).op.toLoc)
      (p‚ÇÇ‚ÇÉ := ((sq i‚ÇÇ i‚ÇÉ).isPullback.lift (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÇ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÉ (by simp)).op.toLoc)
      (sq‚ÇÅ‚ÇÇ := (sq i‚ÇÅ i‚ÇÇ).commSq.flip.op.toLoc) (sq‚ÇÇ‚ÇÉ := (sq i‚ÇÇ i‚ÇÉ).commSq.flip.op.toLoc)
      (sq‚ÇÅ‚ÇÉ := (sq i‚ÇÅ i‚ÇÉ).commSq.flip.op.toLoc)
      (a‚ÇÅ‚ÇÇ := (A.hom i‚ÇÅ i‚ÇÇ)) (a‚ÇÇ‚ÇÉ := (A.hom i‚ÇÇ i‚ÇÉ))]
    simp

@[simps]
def Hom.descentData' {D E : F.DescentDataAsCoalgebra f} (b : D ‚ü∂ E) :
    D.descentData' sq sq‚ÇÉ ‚ü∂ E.descentData' sq sq‚ÇÉ where
  hom := b.hom
  comm i‚ÇÅ i‚ÇÇ := by
    apply map_comp_coalgHom_eq_coalgHom_map
    exact b.comm i‚ÇÅ i‚ÇÇ

@[simps]
def toDescentData' : F.DescentDataAsCoalgebra f ‚•§ (F.comp Adj.forget‚ÇÅ).DescentData' sq sq‚ÇÉ where
  obj := descentData' sq sq‚ÇÉ
  map {D E} b := b.descentData' sq sq‚ÇÉ

@[simps]
noncomputable
def ofDescentData' [‚àÄ i‚ÇÅ i‚ÇÇ, IsIso (F.baseChange (sq i‚ÇÅ i‚ÇÇ).commSq.flip.op.toLoc)]
    (D : (F.comp Adj.forget‚ÇÅ).DescentData' sq sq‚ÇÉ) : F.DescentDataAsCoalgebra f where
  obj := D.obj
  hom i‚ÇÅ i‚ÇÇ := (F.coalgEquiv (sq i‚ÇÅ i‚ÇÇ).commSq.flip.op.toLoc _ _).symm (D.hom i‚ÇÅ i‚ÇÇ)
  counit i := by
    have := D.pullHom'_hom_self i
    dsimp [DescentData'.pullHom', LocallyDiscreteOpToCat.pullHom] at this
    rw [F.comp_counit_eq_id_iff _ _ _ (sq i i).commSq.flip.op.toLoc
      (((sq i i).isPullback.lift (ùüô (X i)) (ùüô (X i)) (by simp)).op.toLoc)]
    ¬∑ simp only [comp_toPrelaxFunctor, PrelaxFunctor.comp_toPrelaxFunctorStruct,
        PrelaxFunctorStruct.comp_toPrefunctor, Prefunctor.comp_obj, Adj.forget‚ÇÅ_obj,
        Prefunctor.comp_map, Adj.forget‚ÇÅ_map, Cat.comp_obj]
      rw [‚Üê cancel_epi (((F.comp Adj.forget‚ÇÅ).mapComp' (sq i i).p‚ÇÅ.op.toLoc _ (ùüô _) _).hom.app _)]
      ¬∑ rw [‚Üê cancel_mono (((F.comp Adj.forget‚ÇÅ).mapComp' _ _ (ùüô _) _).inv.app _)]
        ¬∑ simp only [comp_toPrelaxFunctor, PrelaxFunctor.comp_toPrelaxFunctorStruct,
            PrelaxFunctorStruct.comp_toPrefunctor, Prefunctor.comp_obj, Adj.forget‚ÇÅ_obj,
            Prefunctor.comp_map, Adj.forget‚ÇÅ_map, Cat.comp_obj, Category.assoc,
            Iso.hom_inv_id_app_assoc, Iso.hom_inv_id_app]
          convert this
          apply (F.coalgEquiv _ (D.obj i) (D.obj i)).apply_symm_apply
        ¬∑ simp [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp]
        ¬∑ simp [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp]
  coassoc i‚ÇÅ i‚ÇÇ i‚ÇÉ := by
    rw [F.coalgHom_eq_coalgHom_coalgHom_iff (sq i‚ÇÅ i‚ÇÇ).commSq.flip.op.toLoc
      (sq i‚ÇÇ i‚ÇÉ).commSq.flip.op.toLoc (sq i‚ÇÅ i‚ÇÉ).commSq.flip.op.toLoc
      (p‚ÇÅ‚ÇÇ := ((sq i‚ÇÅ i‚ÇÇ).isPullback.lift (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÇ (by simp)).op.toLoc)
      (p‚ÇÇ‚ÇÉ := ((sq i‚ÇÇ i‚ÇÉ).isPullback.lift (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÇ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÉ (by simp)).op.toLoc)
      (p‚ÇÅ‚ÇÉ := ((sq i‚ÇÅ i‚ÇÉ).isPullback.lift (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÉ (by simp)).op.toLoc)]
    ¬∑ have := D.pullHom'_hom_comp i‚ÇÅ i‚ÇÇ i‚ÇÉ
      rw [DescentData'.pullHom'_comp_pullHom'_eq_iff] at this
      simp only [comp_toPrelaxFunctor, PrelaxFunctor.comp_toPrelaxFunctorStruct,
        PrelaxFunctorStruct.comp_toPrefunctor, Prefunctor.comp_obj, Adj.forget‚ÇÅ_obj,
        Prefunctor.comp_map, Adj.forget‚ÇÅ_map, Cat.comp_obj] at this
      simp only [coalgHom_coalgEquiv_symm, comp_toPrelaxFunctor,
        PrelaxFunctor.comp_toPrelaxFunctorStruct, PrelaxFunctorStruct.comp_toPrefunctor,
        Prefunctor.comp_obj, Adj.forget‚ÇÅ_obj, Prefunctor.comp_map, Adj.forget‚ÇÅ_map, Cat.comp_obj]
      exact this.symm

lemma ofDescentData'_descentData' [‚àÄ i‚ÇÅ i‚ÇÇ, IsIso (F.baseChange (sq i‚ÇÅ i‚ÇÇ).commSq.flip.op.toLoc)]
    (A : F.DescentDataAsCoalgebra f) :
    ofDescentData' sq sq‚ÇÉ (descentData' sq sq‚ÇÉ A) = A := by
  ext
  ¬∑ simp
  ¬∑ simp only [ofDescentData'_obj, descentData'_obj, heq_eq_eq]
    ext
    simp

@[simps]
noncomputable
def Hom.ofDescentData' [‚àÄ i‚ÇÅ i‚ÇÇ, IsIso (F.baseChange (sq i‚ÇÅ i‚ÇÇ).commSq.flip.op.toLoc)]
    {D E : (F.comp Adj.forget‚ÇÅ).DescentData' sq sq‚ÇÉ} (f : D ‚ü∂ E) :
    ofDescentData' sq sq‚ÇÉ D ‚ü∂ ofDescentData' sq sq‚ÇÉ E where
  hom := f.hom
  comm i‚ÇÅ i‚ÇÇ := by
    rw [F.iff_map_comp_coalgHom_eq_coalgHom_map (sq i‚ÇÅ i‚ÇÇ).commSq.flip.op.toLoc]
    simpa using f.comm i‚ÇÅ i‚ÇÇ

end

-- needs "base change" assumptions
noncomputable
def descentData'Equivalence [‚àÄ i‚ÇÅ i‚ÇÇ, IsIso (F.baseChange (sq i‚ÇÅ i‚ÇÇ).commSq.flip.op.toLoc)] :
    F.DescentDataAsCoalgebra f ‚âå (F.comp Adj.forget‚ÇÅ).DescentData' sq sq‚ÇÉ where
  functor := toDescentData' sq sq‚ÇÉ
  inverse.obj D := .ofDescentData' sq sq‚ÇÉ D
  inverse.map f := .ofDescentData' sq sq‚ÇÉ f
  unitIso := NatIso.ofComponents (fun A ‚Ü¶ isoMk (fun i ‚Ü¶ Iso.refl _)) <| fun _ ‚Ü¶ by ext; simp
  counitIso := NatIso.ofComponents (fun A ‚Ü¶ DescentData'.isoMk (fun i ‚Ü¶ Iso.refl _))

end DescentDataAsCoalgebra

namespace DescentData'

variable {X S : C} {f : X ‚ü∂ S} (sq : ChosenPullback f f) (sq‚ÇÉ : ChosenPullback‚ÇÉ sq sq sq)

-- needs "base change" assumptions
noncomputable def equivalenceOfComonadicLeftAdjoint [IsIso (F.baseChange sq.commSq.flip.op.toLoc)]
    [(Comonad.comparison (F.map f.op.toLoc).adj.toCategory).IsEquivalence] :
    (F.obj (.mk (op S))).obj ‚âå
      (F.comp Adj.forget‚ÇÅ).DescentData' (fun (_ : Unit) _ ‚Ü¶ sq) (fun _ _ _ ‚Ü¶ sq‚ÇÉ) :=
  (Comonad.comparison (F.map f.op.toLoc).adj.toCategory).asEquivalence.trans
    ((DescentDataAsCoalgebra.coalgebraEquivalence _ _).symm.trans
      (DescentDataAsCoalgebra.descentData'Equivalence _ _ _))

end DescentData'

namespace DescentData

variable {X S : C} (f : X ‚ü∂ S) (sq : ChosenPullback f f) (sq‚ÇÉ : ChosenPullback‚ÇÉ sq sq sq)

-- needs "base change" assumptions
noncomputable def equivalenceOfComonadicLeftAdjoint [IsIso (F.baseChange sq.commSq.flip.op.toLoc)]
    [(Comonad.comparison (F.map f.op.toLoc).adj.toCategory).IsEquivalence] :
    (F.obj (.mk (op S))).obj ‚âå
      (F.comp Adj.forget‚ÇÅ).DescentData (fun (_ : Unit) ‚Ü¶ f) :=
  (DescentData'.equivalenceOfComonadicLeftAdjoint F sq sq‚ÇÉ).trans
    (DescentData'.descentDataEquivalence (F.comp Adj.forget‚ÇÅ) _ _)

end DescentData

end Pseudofunctor

end CategoryTheory
