/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Christian Merten
-/
import Mathlib.CategoryTheory.Sites.Descent.DescentDataPrime
import Mathlib.CategoryTheory.Sites.Descent.DescentDataAsCoalgebra
import Mathlib.CategoryTheory.Bicategory.Adjunction.Adj

/-!
# Descent data ...

-/

namespace CategoryTheory

open Opposite Limits Bicategory

namespace Pseudofunctor

open LocallyDiscreteOpToCat

variable {C : Type*} [Category C] (F : Pseudofunctor (LocallyDiscrete C·µí·µñ) (Adj Cat))
  {Œπ : Type*} {S : C} {X : Œπ ‚Üí C} {f : ‚àÄ i, X i ‚ü∂ S}
  (sq : ‚àÄ i j, ChosenPullback (f i) (f j))
  (sq‚ÇÉ : ‚àÄ (i‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ), ChosenPullback‚ÇÉ (sq i‚ÇÅ i‚ÇÇ) (sq i‚ÇÇ i‚ÇÉ) (sq i‚ÇÅ i‚ÇÉ))

namespace DescentData''

variable {F sq}
section

variable {obj : ‚àÄ (i : Œπ), (F.obj (.mk (op (X i)))).obj}
  (hom : ‚àÄ (i‚ÇÅ i‚ÇÇ : Œπ), obj i‚ÇÅ ‚ü∂ (F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ.op.toLoc).g.obj
    ((F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÇ.op.toLoc).f.obj (obj i‚ÇÇ)))

def homComp (i‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ) : obj i‚ÇÅ ‚ü∂ (F.map (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ.op.toLoc).g.obj
      ((F.map (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÉ.op.toLoc).f.obj (obj i‚ÇÉ)) :=
  hom i‚ÇÅ i‚ÇÇ ‚â´ (F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ.op.toLoc).g.map
      ((F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÇ.op.toLoc).f.map (hom i‚ÇÇ i‚ÇÉ)) ‚â´
        (F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ.op.toLoc).g.map
          ((F.baseChange (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).isPullback‚ÇÇ.toCommSq.flip.op.toLoc).app _) ‚â´
    (Adj.gIso (F.mapComp' (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ.op.toLoc (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ‚ÇÇ.op.toLoc
          (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ.op.toLoc (by aesoptoloc))).inv.app _ ‚â´
    (F.map (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ.op.toLoc).g.map
      ((Adj.fIso (F.mapComp' (sq i‚ÇÇ i‚ÇÉ).p‚ÇÇ.op.toLoc (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÇ‚ÇÉ.op.toLoc
          (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÉ.op.toLoc (by aesoptoloc))).inv.app _)

end

section

variable {X‚ÇÅ‚ÇÇ X‚ÇÅ X‚ÇÇ : C}
  {obj‚ÇÅ : (F.obj (.mk (op X‚ÇÅ))).obj} {obj‚ÇÇ : (F.obj (.mk (op X‚ÇÇ))).obj}
  {p‚ÇÅ : X‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ} {p‚ÇÇ : X‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÇ}
  (hom : obj‚ÇÅ ‚ü∂ (F.map p‚ÇÅ.op.toLoc).g.obj ((F.map p‚ÇÇ.op.toLoc).f.obj obj‚ÇÇ))

def pullHom'' ‚¶ÉY‚ÇÅ‚ÇÇ : C‚¶Ñ (p‚ÇÅ‚ÇÇ : Y‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ÇÇ) (q‚ÇÅ : Y‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ) (q‚ÇÇ : Y‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÇ)
    (hq‚ÇÅ : p‚ÇÅ‚ÇÇ ‚â´ p‚ÇÅ = q‚ÇÅ := by aesop_cat) (hq‚ÇÇ : p‚ÇÅ‚ÇÇ ‚â´ p‚ÇÇ = q‚ÇÇ := by aesop_cat) :
    obj‚ÇÅ ‚ü∂ (F.map q‚ÇÅ.op.toLoc).g.obj ((F.map q‚ÇÇ.op.toLoc).f.obj obj‚ÇÇ) :=
  hom ‚â´ (F.map p‚ÇÅ.op.toLoc).g.map ((F.map p‚ÇÅ‚ÇÇ.op.toLoc).adj.unit.app _) ‚â´
    (Adj.gIso (F.mapComp' p‚ÇÅ.op.toLoc p‚ÇÅ‚ÇÇ.op.toLoc q‚ÇÅ.op.toLoc (by aesoptoloc))).inv.app _ ‚â´
      (F.map q‚ÇÅ.op.toLoc).g.map
    ((Adj.fIso (F.mapComp' p‚ÇÇ.op.toLoc p‚ÇÅ‚ÇÇ.op.toLoc q‚ÇÇ.op.toLoc (by aesoptoloc))).inv.app _)

end

lemma homEquiv_symm_pullHom' ‚¶ÉX‚ÇÅ X‚ÇÇ : C‚¶Ñ
    ‚¶Éobj‚ÇÅ : (F.obj (.mk (op X‚ÇÅ))).obj‚¶Ñ ‚¶Éobj‚ÇÇ : (F.obj (.mk (op X‚ÇÇ))).obj‚¶Ñ
    ‚¶ÉX‚ÇÅ‚ÇÇ : C‚¶Ñ ‚¶Ép‚ÇÅ : X‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚¶Ñ ‚¶Ép‚ÇÇ : X‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÇ‚¶Ñ
    (hom : obj‚ÇÅ ‚ü∂ (F.map p‚ÇÅ.op.toLoc).g.obj ((F.map p‚ÇÇ.op.toLoc).f.obj obj‚ÇÇ))
    ‚¶ÉY‚ÇÅ‚ÇÇ : C‚¶Ñ (g : Y‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ‚ÇÇ) (gp‚ÇÅ : Y‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÅ) (gp‚ÇÇ : Y‚ÇÅ‚ÇÇ ‚ü∂ X‚ÇÇ)
    (hgp‚ÇÅ : g ‚â´ p‚ÇÅ = gp‚ÇÅ) (hgp‚ÇÇ : g ‚â´ p‚ÇÇ = gp‚ÇÇ) :
    ((F.map gp‚ÇÅ.op.toLoc).adj.toCategory.homEquiv _ _ ).symm (pullHom'' hom g gp‚ÇÅ gp‚ÇÇ hgp‚ÇÅ hgp‚ÇÇ) =
      pullHom (F := F.comp Adj.forget‚ÇÅ)
        ((((F.map p‚ÇÅ.op.toLoc).adj.toCategory).homEquiv _ _ ).symm hom) g gp‚ÇÅ gp‚ÇÇ hgp‚ÇÅ hgp‚ÇÇ := by
  sorry

end DescentData''

open DescentData'' in
structure DescentData'' where
  obj (i : Œπ) : (F.obj (.mk (op (X i)))).obj
  hom (i‚ÇÅ i‚ÇÇ : Œπ) : obj i‚ÇÅ ‚ü∂
    (F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ.op.toLoc).g.obj
      ((F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÇ.op.toLoc).f.obj (obj i‚ÇÇ))
  hom_self (i : Œπ) (Œ¥ : (sq i i).Diagonal) :
    pullHom'' (hom i i) Œ¥.f (ùüô _) (ùüô _) = (F.map (ùüô (.mk (op (X i))))).adj.unit.app _
  hom_comp (i‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ) :
    homComp sq‚ÇÉ hom i‚ÇÅ i‚ÇÇ i‚ÇÉ = pullHom'' (hom i‚ÇÅ i‚ÇÉ) (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ‚ÇÉ _ _

namespace DescentData''

variable {F} {sq} {obj : ‚àÄ (i : Œπ), (F.obj (.mk (op (X i)))).obj}
  (hom : ‚àÄ i‚ÇÅ i‚ÇÇ, obj i‚ÇÅ ‚ü∂ (F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ.op.toLoc).g.obj
    ((F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÇ.op.toLoc).f.obj (obj i‚ÇÇ)))

section

def dataEquivDescentData' :
    (‚àÄ i‚ÇÅ i‚ÇÇ, obj i‚ÇÅ ‚ü∂ (F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ.op.toLoc).g.obj
      ((F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÇ.op.toLoc).f.obj (obj i‚ÇÇ))) ‚âÉ
    (‚àÄ i‚ÇÅ i‚ÇÇ, (F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ.op.toLoc).f.obj (obj i‚ÇÅ) ‚ü∂
      (F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÇ.op.toLoc).f.obj (obj i‚ÇÇ)) :=
  Equiv.piCongrRight (fun i‚ÇÅ ‚Ü¶ Equiv.piCongrRight (fun i‚ÇÇ ‚Ü¶
    (((F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ.op.toLoc).adj.toCategory).homEquiv _ _).symm))


lemma hom_self_iff_dataEquivDescentData' :
    (‚àÄ (i : Œπ) (Œ¥ : (sq i i).Diagonal),
      pullHom'' (hom i i) Œ¥.f (ùüô _) (ùüô _) = (F.map (ùüô (.mk (op (X i))))).adj.unit.app _) ‚Üî
    ‚àÄ (i : Œπ), DescentData'.pullHom' (F := F.comp Adj.forget‚ÇÅ)
        (dataEquivDescentData' hom) (f i) (ùüô (X i)) (ùüô (X i)) = ùüô _ := by
  refine forall_congr' (fun i ‚Ü¶ ?_)
  have Œ¥ : (sq i i).Diagonal := Classical.arbitrary _
  trans ((F.map (ùüô (.mk (op (X i))))).adj.toCategory.homEquiv _ _).symm
    (pullHom'' (hom i i) Œ¥.f (ùüô (X i)) (ùüô (X i))) = ùüô _
  ¬∑ dsimp
    rw [‚Üê Adjunction.toCategory_unit, ‚Üê Adjunction.homEquiv_id,
      Equiv.apply_eq_iff_eq_symm_apply]
    constructor
    ¬∑ intro h
      rw [h, Equiv.symm_symm]
    ¬∑ intro h Œ¥'
      obtain rfl := Subsingleton.elim Œ¥ Œ¥'
      exact h
  ¬∑ convert Iff.rfl using 2
    have := homEquiv_symm_pullHom' (hom _ _) Œ¥.f (ùüô _) (ùüô _) (by simp) (by simp)
    dsimp at this ‚ä¢
    rw [this]
    apply DescentData'.pullHom'_eq_pullHom <;> simp

lemma hom_comp_iff_dataEquivDescentData' :
    (‚àÄ i‚ÇÅ i‚ÇÇ i‚ÇÉ, homComp sq‚ÇÉ hom i‚ÇÅ i‚ÇÇ i‚ÇÉ = pullHom'' (hom i‚ÇÅ i‚ÇÉ) (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ‚ÇÉ _ _) ‚Üî
      ‚àÄ (i‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ),
        DescentData'.pullHom' (F := F.comp Adj.forget‚ÇÅ)
          (dataEquivDescentData' hom) (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÇ ‚â´
        DescentData'.pullHom'
          (dataEquivDescentData' hom) (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÇ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÉ =
        DescentData'.pullHom'
          (dataEquivDescentData' hom) (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÉ := by
  refine forall_congr' (fun i‚ÇÅ ‚Ü¶ forall_congr' (fun i‚ÇÇ ‚Ü¶ forall_congr' (fun i‚ÇÉ ‚Ü¶ ?_)))
  sorry

end

section

variable [‚àÄ i‚ÇÅ i‚ÇÇ, IsIso (F.baseChange (sq i‚ÇÅ i‚ÇÇ).isPullback.toCommSq.flip.op.toLoc)]
-- should require the same for `(sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).isPullback‚ÇÇ`.

noncomputable def dataEquivCoalgebra
  [‚àÄ i‚ÇÅ i‚ÇÇ, IsIso (F.baseChange (sq i‚ÇÅ i‚ÇÇ).isPullback.toCommSq.flip.op.toLoc)] :
    (‚àÄ i‚ÇÅ i‚ÇÇ, obj i‚ÇÅ ‚ü∂ (F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ.op.toLoc).g.obj
      ((F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÇ.op.toLoc).f.obj (obj i‚ÇÇ))) ‚âÉ
    (‚àÄ i‚ÇÅ i‚ÇÇ, obj i‚ÇÅ ‚ü∂ (F.map (f i‚ÇÅ).op.toLoc).f.obj ((F.map (f i‚ÇÇ).op.toLoc).g.obj (obj i‚ÇÇ))) :=
  Equiv.piCongrRight (fun i‚ÇÅ ‚Ü¶ Equiv.piCongrRight (fun i‚ÇÇ ‚Ü¶
    Iso.homCongr (Iso.refl _)
      ((asIso (F.baseChange (sq i‚ÇÅ i‚ÇÇ).isPullback.toCommSq.flip.op.toLoc)).symm.app _)))

lemma hom_self_iff_dataEquivCoalgebra :
    (‚àÄ (i : Œπ) (Œ¥ : (sq i i).Diagonal),
      pullHom'' (hom i i) Œ¥.f (ùüô _) (ùüô _) = (F.map (ùüô (.mk (op (X i))))).adj.unit.app _) ‚Üî
    ‚àÄ i, dataEquivCoalgebra hom i i ‚â´ (F.map (f i).op.toLoc).adj.counit.app _ = ùüô _ := by
  refine forall_congr' (fun i ‚Ü¶ ?_)
  sorry

lemma hom_comp_iff_dataEquivCoalgebra :
    (‚àÄ i‚ÇÅ i‚ÇÇ i‚ÇÉ, homComp sq‚ÇÉ hom i‚ÇÅ i‚ÇÇ i‚ÇÉ = pullHom'' (hom i‚ÇÅ i‚ÇÉ) (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ‚ÇÉ _ _) ‚Üî
    ‚àÄ (i‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ),
      dataEquivCoalgebra hom i‚ÇÅ i‚ÇÇ ‚â´ (F.map (f i‚ÇÅ).op.toLoc).f.map
        ((F.map (f i‚ÇÇ).op.toLoc).g.map (dataEquivCoalgebra hom i‚ÇÇ i‚ÇÉ)) =
      dataEquivCoalgebra hom i‚ÇÅ i‚ÇÉ ‚â´
        (F.map (f i‚ÇÅ).op.toLoc).f.map ((F.map (f i‚ÇÇ).op.toLoc).adj.unit.app _) := by
  refine forall_congr' (fun i‚ÇÅ ‚Ü¶ forall_congr' (fun i‚ÇÇ ‚Ü¶ forall_congr' (fun i‚ÇÉ ‚Ü¶ ?_)))
  sorry


end

end DescentData''

end Pseudofunctor

end CategoryTheory
