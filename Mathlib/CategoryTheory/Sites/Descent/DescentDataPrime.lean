/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Sites.Descent.DescentData

/-!
# Descent data ...

-/

namespace CategoryTheory

open Opposite Limits

namespace Pseudofunctor

variable {C : Type*} [Category C] (F : Pseudofunctor (LocallyDiscrete C·µí·µñ) Cat)
  {Œπ : Type*} {S : C} {X : Œπ ‚Üí C} {f : ‚àÄ i, X i ‚ü∂ S}
  (sq : ‚àÄ i j, ChosenPullback (f i) (f j))
  (sq‚ÇÉ : ‚àÄ (i‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ), ChosenPullback‚ÇÉ (sq i‚ÇÅ i‚ÇÇ) (sq i‚ÇÇ i‚ÇÉ) (sq i‚ÇÅ i‚ÇÉ))

namespace DescentData'

variable {F sq}

section

variable {obj obj' : ‚àÄ (i : Œπ), F.obj (.mk (op (X i)))}
  (hom : ‚àÄ (i j : Œπ), (F.map (sq i j).p‚ÇÅ.op.toLoc).obj (obj i) ‚ü∂
    (F.map (sq i j).p‚ÇÇ.op.toLoc).obj (obj' j))

noncomputable def pullHom ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ)
    (hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q := by aesop_cat) (hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q := by aesop_cat) :
    (F.map f‚ÇÅ.op.toLoc).obj (obj i‚ÇÅ) ‚ü∂ (F.map f‚ÇÇ.op.toLoc).obj (obj' i‚ÇÇ) :=
  DescentData.pull (hom i‚ÇÅ i‚ÇÇ) ((sq i‚ÇÅ i‚ÇÇ).isPullback.lift f‚ÇÅ f‚ÇÇ (by aesop)) f‚ÇÅ f‚ÇÇ

@[reassoc]
lemma pullHom_eq_pull ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ)
    (hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q) (hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q) (p : Y ‚ü∂ (sq i‚ÇÅ i‚ÇÇ).pullback)
    (hp‚ÇÅ : p ‚â´ (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ = f‚ÇÅ) (hp‚ÇÇ : p ‚â´ (sq i‚ÇÅ i‚ÇÇ).p‚ÇÇ = f‚ÇÇ) :
  pullHom hom q f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ =
    DescentData.pull (hom i‚ÇÅ i‚ÇÇ) p f‚ÇÅ f‚ÇÇ := by
  obtain rfl : p = (sq i‚ÇÅ i‚ÇÇ).isPullback.lift f‚ÇÅ f‚ÇÇ (by rw [hf‚ÇÅ, hf‚ÇÇ]) := by
    apply (sq i‚ÇÅ i‚ÇÇ).isPullback.hom_ext <;> aesop
  rfl

@[reassoc]
  lemma pull_pullHom ‚¶ÉY Y' : C‚¶Ñ (g : Y' ‚ü∂ Y) (q : Y ‚ü∂ S) (q' : Y' ‚ü∂ S) (hq : g ‚â´ q = q')
    ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ) (hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q) (hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q)
    (gf‚ÇÅ : Y' ‚ü∂ X i‚ÇÅ) (gf‚ÇÇ : Y' ‚ü∂ X i‚ÇÇ) (hgf‚ÇÅ : g ‚â´ f‚ÇÅ = gf‚ÇÅ) (hgf‚ÇÇ : g ‚â´ f‚ÇÇ = gf‚ÇÇ) :
    DescentData.pull (pullHom hom q f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ) g gf‚ÇÅ gf‚ÇÇ =
      pullHom hom q' gf‚ÇÅ gf‚ÇÇ := by
  let p := (sq i‚ÇÅ i‚ÇÇ).isPullback.lift f‚ÇÅ f‚ÇÇ (by aesop)
  dsimp
  rw [pullHom_eq_pull _ _ _ _ _ _ p (by aesop) (by aesop),
    pullHom_eq_pull _ _ _ _ _ _ (g ‚â´ p) (by aesop) (by aesop)]
  dsimp [DescentData.pull]
  simp only [Functor.map_comp, Category.assoc]
  rw [‚Üê F.mapComp'_hom_app_comp_mapComp'_hom_app_map_obj_assoc
    _ _ _ _ _ _ (by rw [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp, IsPullback.lift_fst]) rfl
    (by rw [‚Üê Quiver.Hom.comp_toLoc, ‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp, ‚Üê op_comp,
        Category.assoc, IsPullback.lift_fst, hgf‚ÇÅ])]
  rw [F.map_map_mapComp'_inv_app_comp_mapComp'_inv_app
    _ _ _ _ _ _ (by rw [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp, IsPullback.lift_snd]) rfl
    (by rw [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp, hgf‚ÇÇ]),
    mapComp'_inv_naturality_assoc, Iso.hom_inv_id_app_assoc]

end

section

variable {obj : ‚àÄ (i : Œπ), F.obj (.mk (op (X i)))}
  (hom : ‚àÄ (i j : Œπ), (F.map (sq i j).p‚ÇÅ.op.toLoc).obj (obj i) ‚ü∂
    (F.map (sq i j).p‚ÇÇ.op.toLoc).obj (obj j))

@[simp]
lemma pullHom_p‚ÇÅ_p‚ÇÇ (i : Œπ) :
    pullHom hom (sq i i).p (sq i i).p‚ÇÅ (sq i i).p‚ÇÇ (by simp) (by simp) = hom i i := by
  rw [pullHom_eq_pull hom (sq i i).p (sq i i).p‚ÇÅ (sq i i).p‚ÇÇ (by simp) (by simp)
    (ùüô _) (by simp)  (by simp)]
  simp [DescentData.pull, mapComp'_comp_id_hom_app, mapComp'_comp_id_inv_app]

lemma pullHom_self' (hom_self : ‚àÄ i, pullHom hom (f i) (ùüô (X i)) (ùüô (X i)) = ùüô _)
    ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi : Œπ‚¶Ñ (g : Y ‚ü∂ X i) (hg : g ‚â´ f i = q) :
    pullHom hom q g g hg hg = ùüô _ := by
  simp [‚Üê pull_pullHom hom g (f i) q hg (ùüô (X i)) (ùüô (X i)) (by simp) (by simp) g g
    (by simp) (by simp), hom_self, DescentData.pull]

variable {sq‚ÇÉ} in
@[reassoc]
lemma comp_pullHom' (hom_comp : ‚àÄ (i‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ),
    pullHom hom (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÇ ‚â´
    pullHom hom (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÇ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÉ =
    pullHom hom (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÉ)
    ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ)
    (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ) (f‚ÇÉ : Y ‚ü∂ X i‚ÇÉ) (hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q)
    (hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q) (hf‚ÇÉ : f‚ÇÉ ‚â´ f i‚ÇÉ = q) :
    pullHom hom q f‚ÇÅ f‚ÇÇ ‚â´ pullHom hom q f‚ÇÇ f‚ÇÉ = pullHom hom q f‚ÇÅ f‚ÇÉ := by
  obtain ‚ü®œÜ, _, _, _‚ü© := (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).exists_lift f‚ÇÅ f‚ÇÇ f‚ÇÉ q hf‚ÇÅ hf‚ÇÇ hf‚ÇÉ
  rw [‚Üê pull_pullHom_assoc hom œÜ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p _ _ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÇ,
    DescentData.pull, Category.assoc, Category.assoc,
    ‚Üê pull_pullHom hom œÜ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p _ _ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÇ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÉ,
    ‚Üê pull_pullHom hom œÜ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p _ _ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÉ,
    DescentData.pull, DescentData.pull,
    Iso.inv_hom_id_app_assoc, ‚Üê Functor.map_comp_assoc, hom_comp]
  all_goals aesop

end

end DescentData'

open DescentData' in

structure DescentData' where
  obj (i : Œπ) : F.obj (.mk (op (X i)))
  hom : ‚àÄ (i j : Œπ), (F.map (sq i j).p‚ÇÅ.op.toLoc).obj (obj i) ‚ü∂
    (F.map (sq i j).p‚ÇÇ.op.toLoc).obj (obj j)
  hom_self : ‚àÄ i, pullHom hom (f i) (ùüô (X i)) (ùüô (X i)) = ùüô _
  hom_comp (i‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ) :
    pullHom hom (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÇ ‚â´
    pullHom hom (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÇ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÉ =
    pullHom hom (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÉ

namespace DescentData'

variable {F sq sq‚ÇÉ}

@[simp]
lemma pullHom_self (D : F.DescentData' sq sq‚ÇÉ)
    ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi : Œπ‚¶Ñ (g : Y ‚ü∂ X i) (hg : g ‚â´ f i = q) :
    pullHom D.hom q g g hg hg = ùüô _ :=
  pullHom_self' _ D.hom_self _ _ _

@[reassoc (attr := simp)]
lemma comp_pullHom (D : F.DescentData' sq sq‚ÇÉ)
    ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ)
    (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ) (f‚ÇÉ : Y ‚ü∂ X i‚ÇÉ) (hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q)
    (hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q) (hf‚ÇÉ : f‚ÇÉ ‚â´ f i‚ÇÉ = q) :
    pullHom D.hom q f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ ‚â´ pullHom D.hom q f‚ÇÇ f‚ÇÉ hf‚ÇÇ hf‚ÇÉ =
      pullHom D.hom q f‚ÇÅ f‚ÇÉ hf‚ÇÅ hf‚ÇÉ :=
  comp_pullHom' _ D.hom_comp _ _ _ _ hf‚ÇÅ hf‚ÇÇ hf‚ÇÉ

@[ext]
structure Hom (D‚ÇÅ D‚ÇÇ : F.DescentData' sq sq‚ÇÉ) where
  hom (i : Œπ) : D‚ÇÅ.obj i ‚ü∂ D‚ÇÇ.obj i
  comm (i‚ÇÅ i‚ÇÇ : Œπ) :
    (F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ.op.toLoc).map (hom i‚ÇÅ) ‚â´
      pullHom D‚ÇÇ.hom (sq i‚ÇÅ i‚ÇÇ).p (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ (sq i‚ÇÅ i‚ÇÇ).p‚ÇÇ =
    pullHom D‚ÇÅ.hom (sq i‚ÇÅ i‚ÇÇ).p (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ (sq i‚ÇÅ i‚ÇÇ).p‚ÇÇ ‚â´
      (F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÇ.op.toLoc).map (hom i‚ÇÇ) := by aesop_cat

attribute [reassoc (attr := simp)] Hom.comm

@[simps]
def Hom.id (D : F.DescentData' sq sq‚ÇÉ) : Hom D D where
  hom _ := ùüô _

@[simps]
def Hom.comp {D‚ÇÅ D‚ÇÇ D‚ÇÉ : F.DescentData' sq sq‚ÇÉ} (f : Hom D‚ÇÅ D‚ÇÇ) (g : Hom D‚ÇÇ D‚ÇÉ) : Hom D‚ÇÅ D‚ÇÉ where
  hom i := f.hom i ‚â´ g.hom i

instance : Category (F.DescentData' sq sq‚ÇÉ) where
  Hom := Hom
  id := Hom.id
  comp := Hom.comp

@[ext]
lemma hom_ext {D‚ÇÅ D‚ÇÇ : F.DescentData' sq sq‚ÇÉ} {f g : D‚ÇÅ ‚ü∂ D‚ÇÇ}
    (h : ‚àÄ i, f.hom i = g.hom i) : f = g :=
  Hom.ext (funext h)

@[reassoc, simp]
lemma comp_hom {D‚ÇÅ D‚ÇÇ D‚ÇÉ : F.DescentData' sq sq‚ÇÉ} (f : D‚ÇÅ ‚ü∂ D‚ÇÇ) (g : D‚ÇÇ ‚ü∂ D‚ÇÉ) (i : Œπ) :
    (f ‚â´ g).hom i = f.hom i ‚â´ g.hom i :=
  rfl

@[simp]
lemma id_hom (D : F.DescentData' sq sq‚ÇÉ) (i : Œπ) :
    Hom.hom (ùüô D) i = ùüô _ :=
  rfl

@[reassoc]
lemma comm {D‚ÇÅ D‚ÇÇ : F.DescentData' sq sq‚ÇÉ} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ)
    ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ)
    (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ) (hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q) (hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q) :
    (F.map f‚ÇÅ.op.toLoc).map (œÜ.hom i‚ÇÅ) ‚â´ pullHom D‚ÇÇ.hom q f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ =
      pullHom D‚ÇÅ.hom q f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ ‚â´ (F.map f‚ÇÇ.op.toLoc).map (œÜ.hom i‚ÇÇ) := by
  obtain ‚ü®p, _, _‚ü©  := (sq i‚ÇÅ i‚ÇÇ).isPullback.exists_lift f‚ÇÅ f‚ÇÇ (by aesop)
  rw [‚Üê pull_pullHom D‚ÇÇ.hom p (sq i‚ÇÅ i‚ÇÇ).p q (by aesop) (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ (sq i‚ÇÅ i‚ÇÇ).p‚ÇÇ
    (by simp) (by simp) f‚ÇÅ f‚ÇÇ (by aesop) (by aesop),
    ‚Üê pull_pullHom D‚ÇÅ.hom p (sq i‚ÇÅ i‚ÇÇ).p q (by aesop) (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ (sq i‚ÇÅ i‚ÇÇ).p‚ÇÇ
      (by simp) (by simp) f‚ÇÅ f‚ÇÇ (by aesop) (by aesop)]
  dsimp only [DescentData.pull]
  rw [NatTrans.naturality_assoc]
  dsimp
  rw [‚Üê Functor.map_comp_assoc, œÜ.comm i‚ÇÅ i‚ÇÇ, Functor.map_comp_assoc,
    mapComp'_inv_naturality]
  simp only [Category.assoc]

@[simps]
def isoMk {D‚ÇÅ D‚ÇÇ : F.DescentData' sq sq‚ÇÉ} (e : ‚àÄ (i : Œπ), D‚ÇÅ.obj i ‚âÖ D‚ÇÇ.obj i)
    (comm : ‚àÄ (i‚ÇÅ i‚ÇÇ : Œπ), (F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ.op.toLoc).map (e i‚ÇÅ).hom ‚â´
      pullHom D‚ÇÇ.hom (sq i‚ÇÅ i‚ÇÇ).p (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ (sq i‚ÇÅ i‚ÇÇ).p‚ÇÇ =
    pullHom D‚ÇÅ.hom (sq i‚ÇÅ i‚ÇÇ).p (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ (sq i‚ÇÅ i‚ÇÇ).p‚ÇÇ ‚â´
      (F.map (sq i‚ÇÅ i‚ÇÇ).p‚ÇÇ.op.toLoc).map (e i‚ÇÇ).hom := by aesop_cat) : D‚ÇÅ ‚âÖ D‚ÇÇ where
  hom :=
    { hom i := (e i).hom
      comm := comm }
  inv :=
    { hom i := (e i).inv
      comm i‚ÇÅ i‚ÇÇ := by
        rw [‚Üê cancel_mono ((F.map _).map (e i‚ÇÇ).hom), Category.assoc,
          Category.assoc, Iso.map_inv_hom_id, Category.comp_id,
          ‚Üê cancel_epi ((F.map _).map (e i‚ÇÅ).hom),
          Iso.map_hom_inv_id_assoc, comm i‚ÇÅ i‚ÇÇ] }

@[simps]
noncomputable def descentData (D : F.DescentData' sq sq‚ÇÉ) : F.DescentData f where
  obj := D.obj
  hom _ _ _ _ _ _ hf‚ÇÅ hf‚ÇÇ := pullHom D.hom _ _ _ hf‚ÇÅ hf‚ÇÇ
  pull_hom _ _ _ _ _ hq _ _ _ _ _ _ _ _ hgf‚ÇÅ hgf‚ÇÇ :=
    pull_pullHom _ _ _ _ hq _ _ _ _ _ _ hgf‚ÇÅ hgf‚ÇÇ

@[simps]
def ofDescentData (D : F.DescentData f) : F.DescentData' sq sq‚ÇÉ where
  obj := D.obj
  hom i‚ÇÅ i‚ÇÇ := D.hom (sq i‚ÇÅ i‚ÇÇ).p (sq i‚ÇÅ i‚ÇÇ).p‚ÇÅ (sq i‚ÇÅ i‚ÇÇ).p‚ÇÇ
  hom_self i := by
    obtain ‚ü®p, h‚ÇÅ, h‚ÇÇ‚ü© := (sq i i).isPullback.exists_lift (ùüô _) (ùüô _) (by simp)
    have : p ‚â´ (sq i i).p = f i := by rw [‚Üê (sq i i).hp‚ÇÅ, reassoc_of% h‚ÇÅ]
    rw [pullHom_eq_pull _ _ _ _ _ _ p, D.pull_hom _ _ (f i), D.hom_self (f i) (ùüô _)]
    all_goals aesop
  hom_comp i‚ÇÅ i‚ÇÇ i‚ÇÉ := by
    rw [pullHom_eq_pull _ _ _ _ _ _ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ‚ÇÇ,
      pullHom_eq_pull _ _ _ _ _ _ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÇ‚ÇÉ,
      pullHom_eq_pull _ _ _ _ _ _ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p‚ÇÅ‚ÇÉ,
      D.pull_hom _ _ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p, D.pull_hom _ _ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p,
      D.pull_hom _ _ (sq‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ).p,
      D.hom_comp]
    all_goals aesop

@[simps]
noncomputable def toDescentDataFunctor : F.DescentData' sq sq‚ÇÉ ‚•§ F.DescentData f where
  obj D := D.descentData
  map œÜ :=
    { hom := œÜ.hom
      comm := comm œÜ }

@[simps]
noncomputable def fromDescentDataFunctor : F.DescentData f ‚•§ F.DescentData' sq sq‚ÇÉ where
  obj D := .ofDescentData D
  map {D‚ÇÅ D‚ÇÇ} œÜ :=
    { hom := œÜ.hom
      comm i‚ÇÅ i‚ÇÇ := by
        rw [pullHom_eq_pull _ _ _ _ _ _ (ùüô _) (by simp) (by simp),
          pullHom_eq_pull _ _ _ _ _ _ (ùüô _) (by simp) (by simp)]
        simp }

end DescentData'

end Pseudofunctor

end CategoryTheory
