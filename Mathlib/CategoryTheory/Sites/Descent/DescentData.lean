/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Sites.Grothendieck
import Mathlib.CategoryTheory.Bicategory.Functor.Pseudofunctor
import Mathlib.CategoryTheory.Bicategory.LocallyDiscrete

/-!
# Descent data

-/

universe t w v' u' v u

namespace CategoryTheory

open Category Limits Bicategory

namespace Pseudofunctor

section

variable {B C : Type*} [Bicategory B] [Bicategory C]
  (F : Pseudofunctor B C)
  {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (fg : a ‚ü∂ c) (hfg : f ‚â´ g = fg)

def mapComp' : F.map fg ‚âÖ F.map f ‚â´ F.map g := by
  subst hfg
  exact F.mapComp f g

@[simp]
lemma mapComp_rfl : F.mapComp' f g _ rfl = F.mapComp f g := rfl

end

variable {C : Type u} [Bicategory.{w, v} C] [IsLocallyDiscrete C]
  (F : Pseudofunctor C Cat.{v', u'})
  {Œπ : Type w} (X : Œπ ‚Üí C)

structure DescentData where
  obj (i : Œπ) : F.obj (X i)
  iso ‚¶ÉY : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y) :
      (F.map f‚ÇÅ).obj (obj i‚ÇÅ) ‚âÖ (F.map f‚ÇÇ).obj (obj i‚ÇÇ)
  iso_comp ‚¶ÉY' Y : C‚¶Ñ (g : Y ‚ü∂ Y') ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y) :
      iso (f‚ÇÅ ‚â´ g) (f‚ÇÇ ‚â´ g) =
        (F.mapComp f‚ÇÅ g).app _ ‚â™‚â´
          Functor.mapIso (F.map g) (iso f‚ÇÅ f‚ÇÇ) ‚â™‚â´
            (F.mapComp f‚ÇÇ g).symm.app _ := by aesop_cat
  iso_trans ‚¶ÉY : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ‚¶Ñ (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y) (f‚ÇÉ : X i‚ÇÉ ‚ü∂ Y) :
    iso f‚ÇÅ f‚ÇÇ ‚â™‚â´ iso f‚ÇÇ f‚ÇÉ = iso f‚ÇÅ f‚ÇÉ := by aesop_cat

namespace DescentData

variable {F X}

def mk' (obj : ‚àÄ i, F.obj (X i))
    (hom : ‚àÄ ‚¶ÉY : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y),
      (F.map f‚ÇÅ).obj (obj i‚ÇÅ) ‚ü∂ (F.map f‚ÇÇ).obj (obj i‚ÇÇ))
    (hom_comp : ‚àÄ ‚¶ÉY' Y : C‚¶Ñ (g : Y ‚ü∂ Y') ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y),
      hom (f‚ÇÅ ‚â´ g) (f‚ÇÇ ‚â´ g) =
        (F.mapComp f‚ÇÅ g).hom.app _ ‚â´
          (F.map g).map (hom f‚ÇÅ f‚ÇÇ) ‚â´
            (F.mapComp f‚ÇÇ g).inv.app _ := by aesop_cat)
    (hom_self : ‚àÄ ‚¶ÉY : C‚¶Ñ ‚¶Éi : Œπ‚¶Ñ (f : X i ‚ü∂ Y), hom f f = ùüô _ := by aesop_cat)
    (comp_hom : ‚àÄ ‚¶ÉY : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ‚¶Ñ (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y) (f‚ÇÉ : X i‚ÇÉ ‚ü∂ Y),
      hom f‚ÇÅ f‚ÇÇ ‚â´ hom f‚ÇÇ f‚ÇÉ = hom f‚ÇÅ f‚ÇÉ := by aesop_cat) : F.DescentData X where
  obj := obj
  iso Y i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ :=
    { hom := hom f‚ÇÅ f‚ÇÇ
      inv := hom f‚ÇÇ f‚ÇÅ }

@[ext]
structure Hom (D‚ÇÅ D‚ÇÇ : F.DescentData X) where
  hom (i : Œπ) : D‚ÇÅ.obj i ‚ü∂ D‚ÇÇ.obj i
  comm ‚¶ÉY : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y) :
    (F.map f‚ÇÅ).map (hom i‚ÇÅ) ‚â´ (D‚ÇÇ.iso f‚ÇÅ f‚ÇÇ).hom =
      (D‚ÇÅ.iso f‚ÇÅ f‚ÇÇ).hom ‚â´ (F.map f‚ÇÇ).map (hom i‚ÇÇ) := by aesop_cat

attribute [reassoc (attr := simp)] Hom.comm

instance : Category (F.DescentData X) where
  Hom := Hom
  id D := { hom i := ùüô _ }
  comp {D‚ÇÅ D‚ÇÇ D‚ÇÉ} œÜ œà :=
    { hom i := œÜ.hom i ‚â´ œà.hom i
      comm Y i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ := by
        simp only [Functor.map_comp, assoc]
        rw [œà.comm, œÜ.comm_assoc] }

end DescentData

def toDescentDataOfIsTerminal (X‚ÇÄ : C) (hX‚ÇÄ : IsInitial X‚ÇÄ) :
    F.obj X‚ÇÄ ‚•§ F.DescentData X where
  obj A :=
    { obj i := (F.map (hX‚ÇÄ.to (X i))).obj A
      iso Y i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ :=
        (F.mapComp' (hX‚ÇÄ.to (X i‚ÇÅ)) f‚ÇÅ (hX‚ÇÄ.to Y) (by simp)).symm.app A ‚â™‚â´
          (F.mapComp' (hX‚ÇÄ.to (X i‚ÇÇ)) f‚ÇÇ (hX‚ÇÄ.to Y) (by simp)).app A
      iso_comp Y' Y g i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ := by
        sorry }
  map {A B} f :=
    { hom i := (F.map _).map f
      comm Y i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ := by
        dsimp
        sorry }

end Pseudofunctor

end CategoryTheory
