/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Sites.Grothendieck
import Mathlib.CategoryTheory.Limits.Shapes.Pullback.CommSq
import Mathlib.CategoryTheory.Bicategory.Functor.Cat
import Mathlib.CategoryTheory.Bicategory.LocallyDiscrete

/-!
# Descent data

-/

universe t w v v' u u'

namespace CategoryTheory

open Category Limits Bicategory

namespace Pseudofunctor

variable {C : Type u} [Bicategory.{w, v} C]
  (F : Pseudofunctor C Cat.{v', u'}) {Œπ : Type t} (X : Œπ ‚Üí C)

structure DescentData where
  obj (i : Œπ) : F.obj (X i)
  iso ‚¶ÉY : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y) :
      (F.map f‚ÇÅ).obj (obj i‚ÇÅ) ‚âÖ (F.map f‚ÇÇ).obj (obj i‚ÇÇ)
  iso_comp' ‚¶ÉY' Y : C‚¶Ñ (g : Y ‚ü∂ Y') ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y)
      (f‚ÇÅg : X i‚ÇÅ ‚ü∂ Y') (f‚ÇÇg : X i‚ÇÇ ‚ü∂ Y') (hf‚ÇÅg : f‚ÇÅ ‚â´ g = f‚ÇÅg) (hf‚ÇÇg : f‚ÇÇ ‚â´ g = f‚ÇÇg) :
      iso f‚ÇÅg f‚ÇÇg =
        (F.mapComp' f‚ÇÅ g f‚ÇÅg).app (obj i‚ÇÅ) ‚â™‚â´ Functor.mapIso (F.map g) (iso f‚ÇÅ f‚ÇÇ) ‚â™‚â´
          (F.mapComp' f‚ÇÇ g f‚ÇÇg).symm.app (obj i‚ÇÇ)
  iso_trans ‚¶ÉY : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ‚¶Ñ (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y) (f‚ÇÉ : X i‚ÇÉ ‚ü∂ Y) :
    iso f‚ÇÅ f‚ÇÇ ‚â™‚â´ iso f‚ÇÇ f‚ÇÉ = iso f‚ÇÅ f‚ÇÉ := by aesop_cat

namespace DescentData

variable {F X}

@[simps]
def mk' (obj : ‚àÄ i, F.obj (X i))
    (hom : ‚àÄ ‚¶ÉY : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y),
      (F.map f‚ÇÅ).obj (obj i‚ÇÅ) ‚ü∂ (F.map f‚ÇÇ).obj (obj i‚ÇÇ))
    (hom_comp' : ‚àÄ ‚¶ÉY' Y : C‚¶Ñ (g : Y ‚ü∂ Y') ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y)
      (f‚ÇÅg : X i‚ÇÅ ‚ü∂ Y') (f‚ÇÇg : X i‚ÇÇ ‚ü∂ Y') (hf‚ÇÅg : f‚ÇÅ ‚â´ g = f‚ÇÅg) (hf‚ÇÇg : f‚ÇÇ ‚â´ g = f‚ÇÇg),
      hom f‚ÇÅg f‚ÇÇg =
        (F.mapComp' f‚ÇÅ g f‚ÇÅg).hom.app _ ‚â´
          (F.map g).map (hom f‚ÇÅ f‚ÇÇ) ‚â´
            (F.mapComp' f‚ÇÇ g f‚ÇÇg).inv.app _ := by aesop_cat)
    (hom_self : ‚àÄ ‚¶ÉY : C‚¶Ñ ‚¶Éi : Œπ‚¶Ñ (f : X i ‚ü∂ Y), hom f f = ùüô _ := by aesop_cat)
    (comp_hom : ‚àÄ ‚¶ÉY : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ‚¶Ñ (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y) (f‚ÇÉ : X i‚ÇÉ ‚ü∂ Y),
      hom f‚ÇÅ f‚ÇÇ ‚â´ hom f‚ÇÇ f‚ÇÉ = hom f‚ÇÅ f‚ÇÉ := by aesop_cat) : F.DescentData X where
  obj := obj
  iso Y i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ :=
    { hom := hom f‚ÇÅ f‚ÇÇ
      inv := hom f‚ÇÇ f‚ÇÅ }
  iso_comp' Y' Y g i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅg f‚ÇÇg hf‚ÇÅg hf‚ÇÇg := by
    ext
    exact hom_comp' g f‚ÇÅ f‚ÇÇ f‚ÇÅg f‚ÇÇg hf‚ÇÅg hf‚ÇÇg

section

variable (D : F.DescentData X)

@[simp]
lemma iso_hom_iso_hom ‚¶ÉY : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ‚¶Ñ
    (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y) (f‚ÇÉ : X i‚ÇÉ ‚ü∂ Y) :
    (D.iso f‚ÇÅ f‚ÇÇ).hom ‚â´ (D.iso f‚ÇÇ f‚ÇÉ).hom = (D.iso f‚ÇÅ f‚ÇÉ).hom := by
  simp [‚Üê D.iso_trans f‚ÇÅ f‚ÇÇ f‚ÇÉ]

@[simp]
lemma iso_self ‚¶ÉY : C‚¶Ñ ‚¶Éi : Œπ‚¶Ñ (f : X i ‚ü∂ Y) :
    D.iso f f = Iso.refl _ := by
  ext
  simp [‚Üê cancel_epi (D.iso f f).hom]

@[simp]
lemma iso_symm ‚¶ÉY : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ
    (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y) :
    (D.iso f‚ÇÅ f‚ÇÇ).symm = D.iso f‚ÇÇ f‚ÇÅ := by
  ext
  simp [‚Üê cancel_epi (D.iso f‚ÇÅ f‚ÇÇ).hom]

lemma iso_inv ‚¶ÉY : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ
    (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y) :
    (D.iso f‚ÇÅ f‚ÇÇ).inv = (D.iso f‚ÇÇ f‚ÇÅ).hom :=
  congr_arg Iso.hom (D.iso_symm f‚ÇÅ f‚ÇÇ)

end

@[ext]
structure Hom (D‚ÇÅ D‚ÇÇ : F.DescentData X) where
  hom (i : Œπ) : D‚ÇÅ.obj i ‚ü∂ D‚ÇÇ.obj i
  comm ‚¶ÉY : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y) :
    (F.map f‚ÇÅ).map (hom i‚ÇÅ) ‚â´ (D‚ÇÇ.iso f‚ÇÅ f‚ÇÇ).hom =
      (D‚ÇÅ.iso f‚ÇÅ f‚ÇÇ).hom ‚â´ (F.map f‚ÇÇ).map (hom i‚ÇÇ) := by aesop_cat

attribute [reassoc (attr := simp)] Hom.comm

instance : Category (F.DescentData X) where
  Hom := Hom
  id D := { hom i := ùüô _ }
  comp {D‚ÇÅ D‚ÇÇ D‚ÇÉ} œÜ œà :=
    { hom i := œÜ.hom i ‚â´ œà.hom i
      comm Y i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ := by
        simp only [Functor.map_comp, assoc]
        rw [œà.comm, œÜ.comm_assoc] }

@[ext]
lemma hom_ext {D‚ÇÅ D‚ÇÇ : F.DescentData X} {f g : D‚ÇÅ ‚ü∂ D‚ÇÇ}
    (h : ‚àÄ i, f.hom i = g.hom i) : f = g :=
  Hom.ext (funext h)

@[simp]
lemma id_hom (D : F.DescentData X) (i : Œπ) : Hom.hom (ùüô D) i = ùüô _ := rfl

@[simp, reassoc]
lemma comp_hom {D‚ÇÅ D‚ÇÇ D‚ÇÉ : F.DescentData X} (f : D‚ÇÅ ‚ü∂ D‚ÇÇ) (g : D‚ÇÇ ‚ü∂ D‚ÇÉ) (i : Œπ) :
    (f ‚â´ g).hom i = f.hom i ‚â´ g.hom i := rfl


namespace Hom

variable {D‚ÇÅ D‚ÇÇ : F.DescentData X} (f : D‚ÇÅ ‚ü∂ D‚ÇÇ)

@[reassoc]
lemma map_map ‚¶ÉY : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y) :
    (F.map f‚ÇÅ).map (f.hom i‚ÇÅ) =
      (D‚ÇÅ.iso f‚ÇÅ f‚ÇÇ).hom ‚â´ (F.map f‚ÇÇ).map (f.hom i‚ÇÇ) ‚â´ (D‚ÇÇ.iso f‚ÇÅ f‚ÇÇ).inv := by
  rw [‚Üê comm_assoc, Iso.hom_inv_id, comp_id]

@[reassoc]
lemma map_map' ‚¶ÉY : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : X i‚ÇÅ ‚ü∂ Y) (f‚ÇÇ : X i‚ÇÇ ‚ü∂ Y) :
    (F.map f‚ÇÇ).map (f.hom i‚ÇÇ) =
      (D‚ÇÅ.iso f‚ÇÅ f‚ÇÇ).inv ‚â´ (F.map f‚ÇÅ).map (f.hom i‚ÇÅ) ‚â´ (D‚ÇÇ.iso f‚ÇÅ f‚ÇÇ).hom := by
  simp

end Hom

end DescentData

variable [Strict C]

def toDescentDataOfIsInitial (X‚ÇÄ : C) (hX‚ÇÄ : IsInitial X‚ÇÄ) :
    F.obj X‚ÇÄ ‚•§ F.DescentData X where
  obj A :=
    { obj i := (F.map (hX‚ÇÄ.to (X i))).obj A
      iso Y i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ :=
        (F.mapComp' (hX‚ÇÄ.to (X i‚ÇÅ)) f‚ÇÅ (hX‚ÇÄ.to Y) (by simp)).symm.app A ‚â™‚â´
          (F.mapComp' (hX‚ÇÄ.to (X i‚ÇÇ)) f‚ÇÇ (hX‚ÇÄ.to Y) (by simp)).app A
      iso_comp' Y' Y g i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅg f‚ÇÇg hf‚ÇÅg hf‚ÇÇg := by
        ext
        dsimp
        rw [Functor.map_comp, assoc, F.mapComp'‚ÇÄ‚ÇÅ‚ÇÉ_inv_app_assoc (hX‚ÇÄ.to (X i‚ÇÅ))
          f‚ÇÅ g (hX‚ÇÄ.to Y) f‚ÇÅg (hX‚ÇÄ.to Y') (by simp) hf‚ÇÅg (by simp) A,
          F.mapComp'‚ÇÄ‚ÇÅ‚ÇÉ_hom_app (hX‚ÇÄ.to (X i‚ÇÇ))
            f‚ÇÇ g (hX‚ÇÄ.to Y) f‚ÇÇg (hX‚ÇÄ.to Y') (by simp) hf‚ÇÇg (by simp) A,
            Iso.inv_hom_id_app_assoc]
      iso_trans := by
        intros
        ext
        dsimp
        rw [assoc, Iso.hom_inv_id_app_assoc] }
  map {A B} f :=
    { hom i := (F.map _).map f
      comm := by
        intros
        dsimp
        rw [mapComp'_inv_naturality_assoc, NatTrans.naturality, assoc, Cat.comp_map] }
  map_id := by intros; ext; dsimp; simp only [Functor.map_id]
  map_comp := by intros; ext; dsimp; simp only [Functor.map_comp]

namespace DescentData

section Unique

variable {X : C} (obj : F.obj X) (c : BinaryCofan X X)
    (hc : IsColimit c) (map : c.pt ‚ü∂ X)
    (heq : map = hc.desc (BinaryCofan.mk (ùüô _) (ùüô _)))
    {Z : C} {Œπ‚ÇÅ‚ÇÇ Œπ‚ÇÇ‚ÇÉ : c.pt ‚ü∂ Z}
    (h : IsPushout c.inl c.inr Œπ‚ÇÇ‚ÇÉ Œπ‚ÇÅ‚ÇÇ)
    (p‚ÇÅ p‚ÇÇ p‚ÇÉ : X ‚ü∂ Z)
    (hp‚ÇÅ : c.inl ‚â´ Œπ‚ÇÅ‚ÇÇ = p‚ÇÅ) (hp‚ÇÇ : c.inr ‚â´ Œπ‚ÇÅ‚ÇÇ = p‚ÇÇ) (hp‚ÇÉ : c.inr ‚â´ Œπ‚ÇÇ‚ÇÉ = p‚ÇÉ)
    (hom : (F.map c.inl).obj obj ‚ü∂ (F.map c.inr).obj obj)
    (hom_self : (F.map map).map hom =
      (F.mapComp' c.inl map (ùüô X)).inv.app obj ‚â´
      (F.mapComp' c.inr map (ùüô X)).hom.app obj)

def mk''Hom {Y : C} (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) :
    (F.map f‚ÇÅ).obj obj ‚ü∂ (F.map f‚ÇÇ).obj obj :=
  (F.mapComp' c.inl _ f‚ÇÅ (by simp)).hom.app obj ‚â´
    (F.map (hc.desc (BinaryCofan.mk f‚ÇÅ f‚ÇÇ))).map hom ‚â´
      (F.mapComp' c.inr _ f‚ÇÇ (by simp)).inv.app obj

lemma mk''Hom_eq {Y : C} (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (p : c.pt ‚ü∂ Y) (hp‚ÇÅ : c.inl ‚â´ p = f‚ÇÅ)
    (hp‚ÇÇ : c.inr ‚â´ p = f‚ÇÇ) :
    mk''Hom F obj c hc hom f‚ÇÅ f‚ÇÇ =
      (F.mapComp' c.inl p f‚ÇÅ hp‚ÇÅ).hom.app obj ‚â´ (F.map p).map hom ‚â´
        (F.mapComp' c.inr p f‚ÇÇ hp‚ÇÇ).inv.app obj := by
  obtain rfl : p = (hc.desc <| BinaryCofan.mk f‚ÇÅ f‚ÇÇ) := by
    apply BinaryCofan.IsColimit.hom_ext hc <;> simp [hp‚ÇÅ, hp‚ÇÇ]
  rfl

@[simp]
lemma mk''Hom_inl_inr :
    mk''Hom F obj c hc hom c.inl c.inr = hom := by
  simp [mk''Hom_eq F obj c hc hom c.inl c.inr (ùüô _) (by simp) (by simp),
    mapComp'_comp_id_hom_app, mapComp'_comp_id_inv_app]

lemma mk''Hom_comp' {Y' Y : C} (g : Y ‚ü∂ Y') (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y)
      (f‚ÇÅg : X ‚ü∂ Y') (f‚ÇÇg : X ‚ü∂ Y') (hf‚ÇÅg : f‚ÇÅ ‚â´ g = f‚ÇÅg) (hf‚ÇÇg : f‚ÇÇ ‚â´ g = f‚ÇÇg) :
    mk''Hom F obj c hc hom f‚ÇÅg f‚ÇÇg =
      (F.mapComp' f‚ÇÅ g f‚ÇÅg hf‚ÇÅg).hom.app obj ‚â´
        (F.map g).map (mk''Hom F obj c hc hom f‚ÇÅ f‚ÇÇ) ‚â´
          (F.mapComp' f‚ÇÇ g f‚ÇÇg hf‚ÇÇg).inv.app obj := by
  let p : c.pt ‚ü∂ Y := hc.desc (BinaryCofan.mk f‚ÇÅ f‚ÇÇ)
  dsimp
  rw [mk''Hom_eq _ _ _ _ _ _ _ p (by simp [p]) (by simp [p]),
    mk''Hom_eq _ _ _ _ _ _ _ (p ‚â´ g) (by aesop_cat) (by aesop_cat)]
  dsimp
  simp only [Functor.map_comp, assoc]
  rw [‚Üê F.mapComp'_hom_app_comp_mapComp'_hom_app_map_obj_assoc
    _ _ _ _ (p ‚â´ g) _ (by aesop_cat) (by aesop_cat) (by aesop_cat),
    F.map_map_mapComp'_inv_app_comp_mapComp'_inv_app
    _ _ _ _ (p ‚â´ g) _ (by aesop_cat) (by aesop_cat) (by aesop_cat),
    ‚Üê F.mapComp'_hom_naturality_assoc, Iso.hom_inv_id_app_assoc]

include hom_self in
lemma mk''Hom_self {Y : C} (f : X ‚ü∂ Y) :
    mk''Hom F obj c hc hom f f = ùüô _ := by
  rw [mk''Hom_comp' F obj c hc hom (map ‚â´ f) c.inl c.inr f f
      (by aesop_cat) (by aesop_cat), mk''Hom_inl_inr,
    ‚Üê F.mapComp'_naturality_2_assoc map f (map ‚â´ f) rfl hom,
    hom_self, Functor.map_comp_assoc,
    F.mapComp'_inv_app_map_obj_comp_mapComp'_inv_app _ _ _
      (ùüô X) _ _ (by aesop_cat) (by aesop_cat) (by aesop_cat),
    ‚Üê Functor.map_comp_assoc, ‚Üê Functor.map_comp_assoc, assoc,
    Iso.hom_inv_id_app, comp_id,
    F.mapComp'_hom_app_comp_mapComp'_hom_app_map_obj_assoc
      _ _ _ (ùüô X) _ _ (by aesop_cat) (by aesop_cat) (by aesop_cat),
    ‚Üê Functor.map_comp_assoc, Iso.hom_inv_id_app,
    Functor.map_id]
  simp only [id_comp, Iso.hom_inv_id_app]

/-- Constructor for `Pseudofunctor.DescentData` for a family consisting
of only one object `X` equipped with a chosen binary and ternary coproduct. -/
def mk''
    (hom_comp : mk''Hom F obj c hc hom p‚ÇÅ p‚ÇÇ ‚â´ mk''Hom F obj c hc hom p‚ÇÇ p‚ÇÉ =
      mk''Hom F obj c hc hom p‚ÇÅ p‚ÇÉ) : F.DescentData (fun _ : PUnit.{t + 1} ‚Ü¶ X) :=
  mk' (fun _ ‚Ü¶ obj) (fun _ _ _ ‚Ü¶ mk''Hom F obj c hc hom)
    (fun _ _ _ _ _ ‚Ü¶ mk''Hom_comp' _ _ _ _ _ _) (by
      rintro Y ‚ü®‚ü© f
      exact mk''Hom_self F obj c hc map heq hom hom_self f) (by
      rintro Y ‚ü®‚ü© ‚ü®‚ü© ‚ü®‚ü© f‚ÇÅ f‚ÇÇ f‚ÇÉ
      obtain ‚ü®œÜ, hœÜ‚ÇÅ, hœÜ‚ÇÇ, hœÜ‚ÇÉ‚ü© :
          ‚àÉ (œÜ : Z ‚ü∂ Y), c.inl ‚â´ Œπ‚ÇÅ‚ÇÇ ‚â´ œÜ = f‚ÇÅ ‚àß
            c.inr ‚â´ Œπ‚ÇÅ‚ÇÇ ‚â´ œÜ = f‚ÇÇ ‚àß c.inr ‚â´ Œπ‚ÇÇ‚ÇÉ ‚â´ œÜ = f‚ÇÉ :=
        ‚ü®h.desc (hc.desc (BinaryCofan.mk f‚ÇÇ f‚ÇÉ))
          (hc.desc (BinaryCofan.mk f‚ÇÅ f‚ÇÇ)) (by simp), by simp, by simp, by simp‚ü©
      simp only [mk''Hom_comp' F obj c hc hom œÜ p‚ÇÅ p‚ÇÇ f‚ÇÅ f‚ÇÇ (by aesop_cat) (by aesop_cat),
        mk''Hom_comp' F obj c hc hom œÜ p‚ÇÇ p‚ÇÉ f‚ÇÇ f‚ÇÉ (by aesop_cat) (by aesop_cat),
        mk''Hom_comp' F obj c hc hom œÜ p‚ÇÅ p‚ÇÉ f‚ÇÅ f‚ÇÉ (by aesop_cat) (by aesop_cat),
        assoc, Iso.inv_hom_id_app_assoc, ‚Üê Functor.map_comp_assoc, hom_comp])

end Unique

end DescentData

end Pseudofunctor

end CategoryTheory
