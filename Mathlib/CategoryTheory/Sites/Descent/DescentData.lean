/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Christian Merten
-/
import Mathlib.CategoryTheory.Bicategory.Functor.LocallyDiscrete
import Mathlib.CategoryTheory.Sites.Descent.Morphisms
import Mathlib.CategoryTheory.Sites.Descent.CodescentData
import Mathlib.CategoryTheory.Sites.Descent.PullbackStruct

/-!
# Descent data

-/

universe t v' v u' u

namespace CategoryTheory

open Opposite Limits

namespace Pseudofunctor

section

@[simp]
lemma mapComp'_mapLocallyDiscrete_comp
    {C D : Type*} [Category C] [Category D] (F : C ‚•§ D)
    (G : Pseudofunctor (LocallyDiscrete D) Cat)
    {X Y Z : LocallyDiscrete C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (fg : X ‚ü∂ Z) (hfg : f ‚â´ g = fg) :
      ((mapLocallyDiscrete F).comp G).mapComp' f g fg hfg =
      G.mapComp' ((mapLocallyDiscrete F).map f) ((mapLocallyDiscrete F).map g)
        ((mapLocallyDiscrete F).map fg) (by aesop) := by
  ext
  subst hfg
  rw [mapComp'_eq_mapComp]
  rfl

end

variable {C : Type u} [Category.{v} C] (F : Pseudofunctor (LocallyDiscrete C·µí·µñ) Cat.{v', u'})
  {Œπ : Type t} {S : C} {X : Œπ ‚Üí C} (f : ‚àÄ i, X i ‚ü∂ S)

/-- If `F` is a pseudofunctor from `(LocallyDiscrete C·µí·µñ)` to `Cat` and `f i : X i ‚ü∂ S`
is a family of morphisms in `C`, this is the type of family of objects in `F.obj (X i)`
equipped with a descent datum relative to the morphisms `f i`. -/
abbrev DescentData :=
  ((mapLocallyDiscrete (Over.forget S).op).comp F).CodescentData
    (fun (i : Œπ) ‚Ü¶ .mk (op (Over.mk (f i))))

/-- The functor `F.obj (.mk (op S)) ‚•§ F.DescentData f`. -/
def toDescentData : F.obj (.mk (op S)) ‚•§ F.DescentData f :=
  ((mapLocallyDiscrete (Over.forget S).op).comp F).toCodescentDataOfIsInitial
    (fun (i : Œπ) ‚Ü¶ .mk (op (Over.mk (f i)))) (.mk (op (Over.mk (ùüô _))))
      (IsInitial.ofUniqueHom
        (fun Z ‚Ü¶ .toLoc (Quiver.Hom.op (Over.homMk Z.as.unop.hom)))
        (fun ‚ü®‚ü®Z‚ü©‚ü© ‚ü®‚ü®m‚ü©‚ü© ‚Ü¶ by
          congr
          ext
          simpa using Over.w m))

namespace DescentData

variable {F f}

@[simps!]
def mk' (obj : ‚àÄ i, F.obj (.mk (op (X i))))
    (hom : ‚àÄ ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ)
      (_hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q) (_hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q),
        (F.map f‚ÇÅ.op.toLoc).obj (obj i‚ÇÅ) ‚ü∂ (F.map f‚ÇÇ.op.toLoc).obj (obj i‚ÇÇ))
    (hom_comp' : ‚àÄ ‚¶ÉY Y' : C‚¶Ñ (g : Y' ‚ü∂ Y) (q : Y ‚ü∂ S) (q' : Y' ‚ü∂ S) (hq : g ‚â´ q = q')
      ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ) (hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q) (hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q)
      (gf‚ÇÅ : Y' ‚ü∂ X i‚ÇÅ) (gf‚ÇÇ : Y' ‚ü∂ X i‚ÇÇ) (hgf‚ÇÅ : g ‚â´ f‚ÇÅ = gf‚ÇÅ) (hgf‚ÇÇ : g ‚â´ f‚ÇÇ = gf‚ÇÇ),
      hom q' gf‚ÇÅ gf‚ÇÇ (by aesop_cat) (by aesop_cat) =
        (F.mapComp' f‚ÇÅ.op.toLoc g.op.toLoc gf‚ÇÅ.op.toLoc
          (by rw [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp, hgf‚ÇÅ])).hom.app _ ‚â´
          (F.map (.toLoc g.op)).map (hom q f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ) ‚â´
          (F.mapComp' f‚ÇÇ.op.toLoc g.op.toLoc gf‚ÇÇ.op.toLoc
          (by rw [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp, hgf‚ÇÇ])).inv.app _)
    (hom_self : ‚àÄ ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi : Œπ‚¶Ñ (g : Y ‚ü∂ X i) (hg : g ‚â´ f i = q),
      hom q g g hg hg = ùüô _)
    (comp_hom : ‚àÄ ‚¶ÉY : C‚¶Ñ (q : Y ‚ü∂ S) ‚¶Éi‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ)
      (f‚ÇÉ : Y ‚ü∂ X i‚ÇÉ) (hf‚ÇÅ : f‚ÇÅ ‚â´ f i‚ÇÅ = q) (hf‚ÇÇ : f‚ÇÇ ‚â´ f i‚ÇÇ = q) (hf‚ÇÉ : f‚ÇÉ ‚â´ f i‚ÇÉ = q),
        hom q f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ ‚â´ hom q f‚ÇÇ f‚ÇÉ hf‚ÇÇ hf‚ÇÉ = hom q f‚ÇÅ f‚ÇÉ hf‚ÇÅ hf‚ÇÉ) :
    F.DescentData f :=
  CodescentData.mk' obj
    (fun Y i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ ‚Ü¶ hom Y.as.unop.hom f‚ÇÅ.as.unop.left f‚ÇÇ.as.unop.left
      (Over.w f‚ÇÅ.as.unop) (Over.w f‚ÇÇ.as.unop))
    (fun Y' Y g i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅg f‚ÇÇg hf‚ÇÅg hf‚ÇÇg ‚Ü¶ by
      simpa using hom_comp' g.as.unop.left Y.as.unop.hom Y'.as.unop.hom
        (Over.w g.as.unop) f‚ÇÅ.as.unop.left f‚ÇÇ.as.unop.left
        (Over.w f‚ÇÅ.as.unop) (Over.w f‚ÇÇ.as.unop) f‚ÇÅg.as.unop.left f‚ÇÇg.as.unop.left
        (by simp [‚Üê hf‚ÇÅg]) (by simp [‚Üê hf‚ÇÇg]))
    (fun _ _ _ ‚Ü¶ hom_self _ _ _)
    (fun Y i‚ÇÅ i‚ÇÇ i‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚Ü¶ comp_hom _ _ _ _ _ _ _)

end DescentData

end Pseudofunctor

end CategoryTheory
