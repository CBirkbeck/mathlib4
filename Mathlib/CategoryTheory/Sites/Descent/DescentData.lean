/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Christian Merten
-/
import Mathlib.CategoryTheory.Bicategory.Functor.LocallyDiscrete
import Mathlib.CategoryTheory.Sites.Descent.Morphisms
import Mathlib.CategoryTheory.Sites.Descent.CodescentData

/-!
# Descent data

-/

universe t w v' v u' u

namespace CategoryTheory

open Opposite

namespace Presieve

variable {C : Type u} [Category.{v} C] (P : C·µí·µñ ‚•§ Type w) {X : C} (R : Presieve X)

@[simps]
def toCompatible (s : P.obj (op X)) :
    Subtype (FamilyOfElements.Compatible (P := P) (R := R)) where
  val Y f hf := P.map f.op s
  property Y‚ÇÅ Y‚ÇÇ Z g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ fac := by
    simp only [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, fac]

lemma isSheafFor_iff_bijective_toCompatible (P : C·µí·µñ ‚•§ Type w) (R : Presieve X) :
    IsSheafFor P R ‚Üî Function.Bijective (toCompatible P R) := by
  constructor
  ¬∑ intro h
    constructor
    ¬∑ intro s‚ÇÅ s‚ÇÇ hs
      simp only [Subtype.ext_iff] at hs
      apply h.isSeparatedFor.ext
      intro Y f hf
      exact congr_fun (congr_fun (congr_fun hs Y) f) hf
    ¬∑ rintro ‚ü®x, hx‚ü©
      exact ‚ü®h.amalgamate x hx, by ext; funext; apply h.valid_glue‚ü©
  ¬∑ intro h x hx
    apply existsUnique_of_exists_of_unique
    ¬∑ obtain ‚ü®s, hs‚ü© := h.surjective ‚ü®x, hx‚ü©
      simp only [Subtype.ext_iff] at hs
      exact ‚ü®s, fun Y f hf ‚Ü¶ congr_fun (congr_fun (congr_fun hs Y) f) hf‚ü©
    ¬∑ intro s‚ÇÅ s‚ÇÇ hs‚ÇÅ hs‚ÇÇ
      apply h.injective
      ext
      funext Y f hf
      simp only [toCompatible_coe, hs‚ÇÅ f hf, hs‚ÇÇ f hf]

end Presieve

open Limits Bicategory

namespace Pseudofunctor

variable {C : Type u} [Category.{v} C] (F : Pseudofunctor (LocallyDiscrete C·µí·µñ) Cat.{v', u'})
  {Œπ : Type t} {S : C} {X : Œπ ‚Üí C} (f : ‚àÄ i, X i ‚ü∂ S)

-- to be moved
instance {X Y : C} (f : X ‚ü∂ Y) [IsIso f] (F : Pseudofunctor (LocallyDiscrete C) Cat.{v', u'}) :
    (F.map (.toLoc f)).IsEquivalence := by
  let e : F.obj (.mk X) ‚âå F.obj (.mk Y) :=
    Equivalence.mk (F.map (.toLoc f)) (F.map (.toLoc (inv f)))
    ((F.mapId _).symm ‚â™‚â´ F.mapComp' f.toLoc (inv f).toLoc (ùüô _) (by
        rw [‚Üê Quiver.Hom.comp_toLoc, IsIso.hom_inv_id, Quiver.Hom.id_toLoc]))
    ((F.mapComp' (inv f).toLoc f.toLoc (ùüô _) (by
        rw [‚Üê Quiver.Hom.comp_toLoc, IsIso.inv_hom_id, Quiver.Hom.id_toLoc])).symm ‚â™‚â´ F.mapId _)
  exact e.isEquivalence_functor

/-- If `F` is a pseudofunctor from `(LocallyDiscrete C·µí·µñ)` to `Cat` and `f i : X i ‚ü∂ S`
is a family of morphisms in `C`, this is the type of family of objects in `F.obj (X i)`
equipped with a descent datum relative to the morphisms `f i`. -/
abbrev DescentData :=
  ((mapLocallyDiscrete (Over.forget S).op).comp F).CodescentData
    (fun (i : Œπ) ‚Ü¶ .mk (op (Over.mk (f i))))

/-- The functor `F.obj (.mk (op S)) ‚•§ F.DescentData f`. -/
def toDescentData : F.obj (.mk (op S)) ‚•§ F.DescentData f :=
  ((mapLocallyDiscrete (Over.forget S).op).comp F).toCodescentDataOfIsInitial
    (fun (i : Œπ) ‚Ü¶ .mk (op (Over.mk (f i)))) (.mk (op (Over.mk (ùüô _))))
      (IsInitial.ofUniqueHom
        (fun Z ‚Ü¶ .toLoc (Quiver.Hom.op (Over.homMk Z.as.unop.hom)))
        (fun ‚ü®‚ü®Z‚ü©‚ü© ‚ü®‚ü®m‚ü©‚ü© ‚Ü¶ by
          congr
          ext
          simpa using Over.w m))

end Pseudofunctor

end CategoryTheory
