/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Sites.Grothendieck
import Mathlib.CategoryTheory.Bicategory.Functor.Pseudofunctor
import Mathlib.CategoryTheory.Bicategory.LocallyDiscrete

/-!
# Descent data

-/

universe w v' u' v u

namespace CategoryTheory

open Category Limits

namespace Pseudofunctor

section

variable {B C : Type*} [Bicategory B] [Bicategory C]
  (F : Pseudofunctor B C)
  {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (fg : a ‚ü∂ c) (hfg : f ‚â´ g = fg)

def mapComp' : F.map fg ‚âÖ F.map f ‚â´ F.map g := by
  subst hfg
  exact F.mapComp f g

@[simp]
lemma mapComp_rfl : F.mapComp' f g _ rfl = F.mapComp f g := rfl

end

variable {C : Type u} [Category.{v} C]
  (F : Pseudofunctor (LocallyDiscrete C·µí·µñ) Cat.{v', u'})
  {Œπ : Type w} (X : Œπ ‚Üí C)

structure DescentData where
  obj (i : Œπ) : F.obj ‚ü®‚ü®X i‚ü©‚ü©
  iso ‚¶ÉY : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ) :
      (F.map ‚ü®f‚ÇÅ.op‚ü©).obj (obj i‚ÇÅ) ‚âÖ (F.map ‚ü®f‚ÇÇ.op‚ü©).obj (obj i‚ÇÇ)
  iso_comp ‚¶ÉY' Y : C‚¶Ñ (g : Y' ‚ü∂ Y) ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ) :
      iso (g ‚â´ f‚ÇÅ) (g ‚â´ f‚ÇÇ) =
    (F.mapComp ‚ü®f‚ÇÅ.op‚ü© ‚ü®g.op‚ü©).app _ ‚â™‚â´
      Functor.mapIso (F.map ‚ü®g.op‚ü©) (iso f‚ÇÅ f‚ÇÇ) ‚â™‚â´
      (F.mapComp ‚ü®f‚ÇÇ.op‚ü© ‚ü®g.op‚ü©).symm.app _
  iso_trans ‚¶ÉY : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ i‚ÇÉ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ) (f‚ÇÉ : Y ‚ü∂ X i‚ÇÉ) :
    iso f‚ÇÅ f‚ÇÇ ‚â™‚â´ iso f‚ÇÇ f‚ÇÉ = iso f‚ÇÅ f‚ÇÉ := by aesop_cat

namespace DescentData

variable {F X}

@[ext]
structure Hom (D‚ÇÅ D‚ÇÇ : F.DescentData X) where
  hom (i : Œπ) : D‚ÇÅ.obj i ‚ü∂ D‚ÇÇ.obj i
  comm ‚¶ÉY : C‚¶Ñ ‚¶Éi‚ÇÅ i‚ÇÇ : Œπ‚¶Ñ (f‚ÇÅ : Y ‚ü∂ X i‚ÇÅ) (f‚ÇÇ : Y ‚ü∂ X i‚ÇÇ) :
    (F.map ‚ü®f‚ÇÅ.op‚ü©).map (hom i‚ÇÅ) ‚â´ (D‚ÇÇ.iso f‚ÇÅ f‚ÇÇ).hom =
      (D‚ÇÅ.iso f‚ÇÅ f‚ÇÇ).hom ‚â´ (F.map ‚ü®f‚ÇÇ.op‚ü©).map (hom i‚ÇÇ) := by aesop_cat

attribute [reassoc (attr := simp)] Hom.comm

instance : Category (F.DescentData X) where
  Hom := Hom
  id D := { hom i := ùüô _ }
  comp {D‚ÇÅ D‚ÇÇ D‚ÇÉ} œÜ œà :=
    { hom i := œÜ.hom i ‚â´ œà.hom i
      comm Y i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ := by
        dsimp
        simp only [Functor.map_comp, assoc]
        rw [œà.comm, œÜ.comm_assoc] }

end DescentData

def toDescentDataOfIsTerminal (X‚ÇÄ : C) (hX‚ÇÄ : IsTerminal X‚ÇÄ) :
    F.obj ‚ü®‚ü®X‚ÇÄ‚ü©‚ü© ‚•§ F.DescentData X where
  obj A :=
    { obj i := (F.map (hX‚ÇÄ.from (X i)).op.toLoc).obj A
      iso Y i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ :=
        (F.mapComp' (hX‚ÇÄ.from (X i‚ÇÅ)).op.toLoc f‚ÇÅ.op.toLoc (hX‚ÇÄ.from Y).op.toLoc
            --(by rw [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp, IsTerminal.comp_from])
            sorry).symm.app A ‚â™‚â´
          (F.mapComp' (hX‚ÇÄ.from (X i‚ÇÇ)).op.toLoc f‚ÇÇ.op.toLoc (hX‚ÇÄ.from Y).op.toLoc
            --(by rw [‚Üê Quiver.Hom.comp_toLoc, ‚Üê op_comp, IsTerminal.comp_from])
            sorry).app A
      iso_comp Y' Y g i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ := by
        sorry }
  map {A B} f :=
    { hom i := (F.map _).map f
      comm Y i‚ÇÅ i‚ÇÇ f‚ÇÅ f‚ÇÇ := by
        dsimp
        simp
        sorry }

end Pseudofunctor

end CategoryTheory
