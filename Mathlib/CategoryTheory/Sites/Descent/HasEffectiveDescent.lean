/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Christian Merten
-/
import Mathlib.CategoryTheory.Sites.Descent.DescentData

/-!
# Effectiveness of descent

-/

universe t v' v u' u

namespace CategoryTheory

open Opposite

namespace Pseudofunctor

variable {C : Type u} [Category.{v} C] (F : Pseudofunctor (LocallyDiscrete C·µí·µñ) Cat.{v', u'})
  {Œπ : Type t} {S : C} {X : Œπ ‚Üí C} (f : ‚àÄ i, X i ‚ü∂ S)

/-- The property that a pseudofunctor `(LocallyDiscrete C·µí·µñ)` to `Cat` has
effective descent relative to a family of morphisms `f i : X i ‚ü∂ S` in `C`. -/
abbrev HasEffectiveDescentRelativeTo : Prop := (F.toDescentData f).IsEquivalence

lemma toDescentData_fullyFaithful_iff :
    Nonempty (F.toDescentData f).FullyFaithful ‚Üî
      ‚àÄ (M N : F.obj (.mk (op S))),
        Presieve.IsSheafFor (F.presheafHom M N)
          (Presieve.ofArrows (X := Over.mk (ùüô S)) (fun (i : Œπ) ‚Ü¶ Over.mk (f i))
            (fun (i : Œπ) ‚Ü¶ Over.homMk (f i))) := by
  trans ‚àÄ (M N : F.obj (.mk (op S))),
      Function.Bijective ((F.toDescentData f).map : (M ‚ü∂ N) ‚Üí _)
  ¬∑ exact ‚ü®fun ‚ü®h‚ü© ‚Ü¶ h.map_bijective, fun h ‚Ü¶ ‚ü®{
        preimage {M N}:= (Equiv.ofBijective _ (h M N)).invFun
        preimage_map := (Equiv.ofBijective _ (h _ _)).left_inv
        map_preimage := (Equiv.ofBijective _ (h _ _)).right_inv
      }‚ü©‚ü©
  ¬∑ refine forall_congr' (fun M ‚Ü¶ forall_congr' (fun N ‚Ü¶ ?_))
    -- instead we need a variant of `isSheafFor_arrows_iff`
    rw [Presieve.isSheafFor_iff_bijective_toCompatible]
    let R := (Presieve.ofArrows (X := Over.mk (ùüô S)) (fun (i : Œπ) ‚Ü¶ Over.mk (f i))
            (fun (i : Œπ) ‚Ü¶ Over.homMk (f i)))
    let T := Subtype (Presieve.FamilyOfElements.Compatible (P := F.presheafHom M N) (R := R))
    let Œ± : ((F.toDescentData f).obj M ‚ü∂ (F.toDescentData f).obj N) ‚âÉ T := {
      toFun g := ‚ü®fun Y f hf ‚Ü¶ by
        sorry, sorry‚ü©
      invFun := sorry
      left_inv := sorry
      right_inv := sorry
    }
    let Œ≤ : (M ‚ü∂ N) ‚âÉ (F.presheafHom M N).obj (op (Over.mk (ùüô S))) :=
      Equiv.ofBijective _ (Functor.FullyFaithful.map_bijective
        (Functor.FullyFaithful.ofFullyFaithful (F.map (.toLoc (ùüô (op S))))) M N)
    have : Function.comp Œ± (F.toDescentData f).map =
      (Presieve.toCompatible (F.presheafHom M N) R).comp Œ≤ := sorry
    rw [‚Üê Function.Bijective.of_comp_iff' Œ±.bijective, this,
      Function.Bijective.of_comp_iff _ Œ≤.bijective]

class HasEffectiveDescent (J : GrothendieckTopology C) : Prop where
  hasEffectiveDescentRelativeTo_of_sieve_mem {S : C} (U : Sieve S) (hU : U ‚àà J S) :
    F.HasEffectiveDescentRelativeTo (f := fun (i : U.arrows.category) ‚Ü¶ i.obj.hom)

lemma hasEffectiveDescentRelativeTo_of_sieve_mem (J : GrothendieckTopology C)
    [F.HasEffectiveDescent J]
    {S : C} (U : Sieve S) (hU : U ‚àà J S) :
    F.HasEffectiveDescentRelativeTo (f := fun (i : U.arrows.category) ‚Ü¶ i.obj.hom) :=
  HasEffectiveDescent.hasEffectiveDescentRelativeTo_of_sieve_mem _ hU

instance (J : GrothendieckTopology C) [F.HasEffectiveDescent J] :
    F.HasDescentOfMorphisms J where
  isSheaf {S} M N := by
    rw [isSheaf_iff_isSheaf_of_type]
    rintro ‚ü®X, ‚ü®‚ü©, p : X ‚ü∂ S‚ü© U hU
    obtain ‚ü®U : Sieve X, rfl‚ü© := (Sieve.overEquiv _).symm.surjective U
    simp only [J.mem_over_iff, Equiv.apply_symm_apply] at hU
    sorry

end Pseudofunctor

end CategoryTheory
