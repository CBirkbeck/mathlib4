/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Christian Merten
-/
import Mathlib.CategoryTheory.Limits.Shapes.Pullback.CommSq

/-!
# Chosen pullbacks

-/

universe v u

namespace CategoryTheory

variable {C : Type u} [Category.{v} C]

namespace Limits

structure ChosenPullback {X‚ÇÅ X‚ÇÇ S : C} (f‚ÇÅ : X‚ÇÅ ‚ü∂ S) (f‚ÇÇ : X‚ÇÇ ‚ü∂ S) where
  pullback : C
  p‚ÇÅ : pullback ‚ü∂ X‚ÇÅ
  p‚ÇÇ : pullback ‚ü∂ X‚ÇÇ
  isPullback : IsPullback p‚ÇÅ p‚ÇÇ f‚ÇÅ f‚ÇÇ
  p : pullback ‚ü∂ S := p‚ÇÅ ‚â´ f‚ÇÅ
  hp‚ÇÅ : p‚ÇÅ ‚â´ f‚ÇÅ = p := by aesop_cat

namespace ChosenPullback

section

variable {X‚ÇÅ X‚ÇÇ S : C} {f‚ÇÅ : X‚ÇÅ ‚ü∂ S} {f‚ÇÇ : X‚ÇÇ ‚ü∂ S}
  (h : ChosenPullback f‚ÇÅ f‚ÇÇ)

@[reassoc]
lemma w : h.p‚ÇÅ ‚â´ f‚ÇÅ = h.p‚ÇÇ ‚â´ f‚ÇÇ :=
  h.isPullback.w

attribute [reassoc (attr := simp)] hp‚ÇÅ

@[reassoc (attr := simp)]
lemma hp‚ÇÇ : h.p‚ÇÇ ‚â´ f‚ÇÇ = h.p := by rw [‚Üê h.w, hp‚ÇÅ]

structure LiftStruct {Y : C} (g‚ÇÅ : Y ‚ü∂ X‚ÇÅ) (g‚ÇÇ : Y ‚ü∂ X‚ÇÇ) (b : Y ‚ü∂ S) where
  f : Y ‚ü∂ h.pullback
  f_p‚ÇÅ : f ‚â´ h.p‚ÇÅ = g‚ÇÅ
  f_p‚ÇÇ : f ‚â´ h.p‚ÇÇ = g‚ÇÇ
  f_p : f ‚â´ h.p = b

namespace LiftStruct

attribute [reassoc (attr := simp)] f_p‚ÇÅ f_p‚ÇÇ f_p

variable {h} {Y : C} {g‚ÇÅ : Y ‚ü∂ X‚ÇÅ} {g‚ÇÇ : Y ‚ü∂ X‚ÇÇ} {b : Y ‚ü∂ S} (l : h.LiftStruct g‚ÇÅ g‚ÇÇ b)

include l in
@[reassoc]
lemma w : g‚ÇÅ ‚â´ f‚ÇÅ = g‚ÇÇ ‚â´ f‚ÇÇ := by
  simp only [‚Üê l.f_p‚ÇÅ, ‚Üê l.f_p‚ÇÇ, Category.assoc, h.w]

end LiftStruct

end

variable {X S : C} {f : X ‚ü∂ S} (h : ChosenPullback f f)

abbrev Diagonal := h.LiftStruct (ùüô X) (ùüô X) f

end ChosenPullback

variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ S : C} {f‚ÇÅ : X‚ÇÅ ‚ü∂ S} {f‚ÇÇ : X‚ÇÇ ‚ü∂ S} {f‚ÇÉ : X‚ÇÉ ‚ü∂ S}
  (h‚ÇÅ‚ÇÇ : ChosenPullback f‚ÇÅ f‚ÇÇ) (h‚ÇÇ‚ÇÉ : ChosenPullback f‚ÇÇ f‚ÇÉ) (h‚ÇÅ‚ÇÉ : ChosenPullback f‚ÇÅ f‚ÇÉ)

structure ChosenPullback‚ÇÉ where
  chosenPullback : ChosenPullback h‚ÇÅ‚ÇÇ.p‚ÇÇ h‚ÇÇ‚ÇÉ.p‚ÇÅ
  p : chosenPullback.pullback ‚ü∂ S := chosenPullback.p‚ÇÅ ‚â´ h‚ÇÅ‚ÇÇ.p
  -- should this be a `LiftStruct` on `p‚ÇÅ` and `p‚ÇÉ`?
  l : h‚ÇÅ‚ÇÉ.LiftStruct (chosenPullback.p‚ÇÅ ‚â´ h‚ÇÅ‚ÇÇ.p‚ÇÅ) (chosenPullback.p‚ÇÇ ‚â´ h‚ÇÇ‚ÇÉ.p‚ÇÇ) p
  p‚ÇÅ : chosenPullback.pullback ‚ü∂ X‚ÇÅ := chosenPullback.p‚ÇÅ ‚â´ h‚ÇÅ‚ÇÇ.p‚ÇÅ
  p‚ÇÉ : chosenPullback.pullback ‚ü∂ X‚ÇÉ := chosenPullback.p‚ÇÇ ‚â´ h‚ÇÇ‚ÇÉ.p‚ÇÇ
  hp‚ÇÅ : chosenPullback.p‚ÇÅ ‚â´ h‚ÇÅ‚ÇÇ.p‚ÇÅ = p‚ÇÅ := by aesop_cat
  hp‚ÇÉ : chosenPullback.p‚ÇÇ ‚â´ h‚ÇÇ‚ÇÉ.p‚ÇÇ = p‚ÇÉ := by aesop_cat

namespace ChosenPullback‚ÇÉ

variable {h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ} (h : ChosenPullback‚ÇÉ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ)

def p‚ÇÅ‚ÇÉ : h.chosenPullback.pullback ‚ü∂ h‚ÇÅ‚ÇÉ.pullback := h.l.f
def p‚ÇÅ‚ÇÇ : h.chosenPullback.pullback ‚ü∂ h‚ÇÅ‚ÇÇ.pullback := h.chosenPullback.p‚ÇÅ
def p‚ÇÇ‚ÇÉ : h.chosenPullback.pullback ‚ü∂ h‚ÇÇ‚ÇÉ.pullback := h.chosenPullback.p‚ÇÇ
def p‚ÇÇ : h.chosenPullback.pullback ‚ü∂ X‚ÇÇ := h.chosenPullback.p

@[reassoc (attr := simp)]
lemma p‚ÇÅ‚ÇÇ_p‚ÇÅ : h.p‚ÇÅ‚ÇÇ ‚â´ h‚ÇÅ‚ÇÇ.p‚ÇÅ = h.p‚ÇÅ := by simp [p‚ÇÅ‚ÇÇ, hp‚ÇÅ]

@[reassoc (attr := simp)]
lemma p‚ÇÅ‚ÇÇ_p‚ÇÇ : h.p‚ÇÅ‚ÇÇ ‚â´ h‚ÇÅ‚ÇÇ.p‚ÇÇ = h.p‚ÇÇ := by simp [p‚ÇÅ‚ÇÇ, p‚ÇÇ]

@[reassoc (attr := simp)]
lemma p‚ÇÇ‚ÇÉ_p‚ÇÇ : h.p‚ÇÇ‚ÇÉ ‚â´ h‚ÇÇ‚ÇÉ.p‚ÇÅ = h.p‚ÇÇ := by simp [p‚ÇÇ‚ÇÉ, p‚ÇÇ]

@[reassoc (attr := simp)]
lemma p‚ÇÇ‚ÇÉ_p‚ÇÉ : h.p‚ÇÇ‚ÇÉ ‚â´ h‚ÇÇ‚ÇÉ.p‚ÇÇ = h.p‚ÇÉ := by simp [p‚ÇÇ‚ÇÉ, hp‚ÇÉ]

@[reassoc (attr := simp)]
lemma p‚ÇÅ‚ÇÉ_p‚ÇÅ : h.p‚ÇÅ‚ÇÉ ‚â´ h‚ÇÅ‚ÇÉ.p‚ÇÅ = h.p‚ÇÅ := by simp [p‚ÇÅ‚ÇÉ, hp‚ÇÅ]

@[reassoc (attr := simp)]
lemma p‚ÇÅ‚ÇÉ_p‚ÇÉ : h.p‚ÇÅ‚ÇÉ ‚â´ h‚ÇÅ‚ÇÉ.p‚ÇÇ = h.p‚ÇÉ := by simp [p‚ÇÅ‚ÇÉ, hp‚ÇÉ]

@[reassoc (attr := simp)]
lemma w‚ÇÅ : h.p‚ÇÅ ‚â´ f‚ÇÅ = h.p := by
  simpa only [‚Üê hp‚ÇÅ, Category.assoc, h‚ÇÅ‚ÇÉ.hp‚ÇÅ, h.l.f_p] using h.l.f_p‚ÇÅ.symm =‚â´ f‚ÇÅ

@[reassoc (attr := simp)]
lemma w‚ÇÉ : h.p‚ÇÉ ‚â´ f‚ÇÉ = h.p := by
  simpa only [‚Üê hp‚ÇÉ, Category.assoc, h‚ÇÅ‚ÇÉ.hp‚ÇÇ, h.l.f_p] using h.l.f_p‚ÇÇ.symm =‚â´ f‚ÇÉ

@[reassoc (attr := simp)]
lemma w‚ÇÇ : h.p‚ÇÇ ‚â´ f‚ÇÇ = h.p := by
  rw [‚Üê p‚ÇÇ‚ÇÉ_p‚ÇÇ_assoc, h‚ÇÇ‚ÇÉ.w, ‚Üê w‚ÇÉ, p‚ÇÇ‚ÇÉ_p‚ÇÉ_assoc]

lemma exists_lift {Y : C} (g‚ÇÅ : Y ‚ü∂ X‚ÇÅ) (g‚ÇÇ : Y ‚ü∂ X‚ÇÇ) (g‚ÇÉ : Y ‚ü∂ X‚ÇÉ) (b : Y ‚ü∂ S)
    (hg‚ÇÅ : g‚ÇÅ ‚â´ f‚ÇÅ = b) (hg‚ÇÇ : g‚ÇÇ ‚â´ f‚ÇÇ = b) (hg‚ÇÉ : g‚ÇÉ ‚â´ f‚ÇÉ = b) :
    ‚àÉ (œÜ : Y ‚ü∂ h.chosenPullback.pullback), œÜ ‚â´ h.p‚ÇÅ = g‚ÇÅ ‚àß œÜ ‚â´ h.p‚ÇÇ = g‚ÇÇ ‚àß œÜ ‚â´ h.p‚ÇÉ = g‚ÇÉ := by
  obtain ‚ü®œÜ‚ÇÅ‚ÇÇ, w‚ÇÅ, w‚ÇÇ‚ü© := h‚ÇÅ‚ÇÇ.isPullback.exists_lift g‚ÇÅ g‚ÇÇ (by aesop)
  obtain ‚ü®œÜ‚ÇÇ‚ÇÉ, w‚ÇÇ', w‚ÇÉ‚ü© := h‚ÇÇ‚ÇÉ.isPullback.exists_lift g‚ÇÇ g‚ÇÉ (by aesop)
  obtain ‚ü®œÜ, w‚ÇÅ‚ÇÇ, w‚ÇÇ‚ÇÉ‚ü© := h.chosenPullback.isPullback.exists_lift œÜ‚ÇÅ‚ÇÇ œÜ‚ÇÇ‚ÇÉ (by aesop)
  refine ‚ü®œÜ, ?_, ?_, ?_‚ü©
  ¬∑ rw [‚Üê w‚ÇÅ, ‚Üê w‚ÇÅ‚ÇÇ, Category.assoc, ‚Üê p‚ÇÅ‚ÇÇ, p‚ÇÅ‚ÇÇ_p‚ÇÅ]
  ¬∑ rw [‚Üê w‚ÇÇ, ‚Üê w‚ÇÅ‚ÇÇ, Category.assoc, ‚Üê p‚ÇÅ‚ÇÇ, p‚ÇÅ‚ÇÇ_p‚ÇÇ]
  ¬∑ rw [‚Üê w‚ÇÉ, ‚Üê w‚ÇÇ‚ÇÉ, Category.assoc, ‚Üê p‚ÇÇ‚ÇÉ, p‚ÇÇ‚ÇÉ_p‚ÇÉ]

end ChosenPullback‚ÇÉ

end Limits

end CategoryTheory
