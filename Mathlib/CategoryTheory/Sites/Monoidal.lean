import Mathlib.CategoryTheory.Monoidal.FunctorCategory
import Mathlib.CategoryTheory.Sites.Sheafification

noncomputable section

open CategoryTheory Monoidal MonoidalCategory

namespace CategoryTheory

namespace Monoidal

variable {C D : Type*} [Category C] [Category D] [MonoidalCategory C] (L : C ‚•§ D) (R : D ‚•§ C)
    [R.Full] [R.Faithful] (adj : L ‚ä£ R)

example : IsIso adj.counit := inferInstance

def monnoidalCategoryStructMap : MonoidalCategoryStruct D where
  tensorObj X Y := L.obj (R.obj X ‚äó R.obj Y)
  tensorHom Œ± Œ≤ := L.map (R.map Œ± ‚äó R.map Œ≤)
  whiskerLeft X _ _ Œ± := L.map (R.obj X ‚óÅ R.map Œ±)
  whiskerRight Œ± X := L.map (R.map Œ± ‚ñ∑ R.obj X)
  tensorUnit := L.obj (ùüô_ _)
  associator X Y Z := by
    dsimp only
    -- refine L.mapIso (asIso (adj.counit.app _) ‚â™‚â´ ?_)
    let i := Œ±_ (R.obj X) (R.obj Y) (R.obj Z)
    sorry
  leftUnitor := sorry
  rightUnitor := sorry


namespace Sheaf

variable {C : Type*} [Category C] {J : GrothendieckTopology C}
variable {D : Type*} [Category D] [MonoidalCategory D] [HasWeakSheafify J D]



/-- (An auxiliary definition for `sheafCategoryMonoidal`.)
Tensor product of functors `C ‚•§ D`, when `D` is monoidal.
-/
def tensorObj (F G : Sheaf J D) : Sheaf J D :=
  (presheafToSheaf J D).obj (F.val ‚äó G.val)

variable {F G F' G' : Sheaf J D}
variable (Œ± : F ‚ü∂ G) (Œ≤ : F' ‚ü∂ G')

/-- (An auxiliary definition for `sheafCategoryMonoidal`.)
Tensor product of natural transformations into `D`, when `D` is monoidal.
-/
def tensorHom : tensorObj F F' ‚ü∂ tensorObj G G' :=
  (presheafToSheaf J D).map (Œ±.val ‚äó Œ≤.val)

/-- (An auxiliary definition for `sheafCategoryMonoidal`.) -/
def whiskerLeft (F) (Œ≤ : F' ‚ü∂ G') : tensorObj F F' ‚ü∂ tensorObj F G' :=
  (presheafToSheaf J D).map (F.val ‚óÅ Œ≤.val)

/-- (An auxiliary definition for `sheafCategoryMonoidal`.) -/
def whiskerRight (F') : tensorObj F F' ‚ü∂ tensorObj G F' :=
  (presheafToSheaf J D).map (Œ±.val ‚ñ∑ F'.val)

instance : MonoidalCategoryStruct (Sheaf J D) where
  tensorObj F G := tensorObj F G
  whiskerLeft := sorry
  whiskerRight := sorry
  tensorHom := sorry
  tensorUnit := sorry
  associator := sorry
  leftUnitor := sorry
  rightUnitor := sorry

-- instance : MonoidalCategory (Sheaf J D) where
--   tensorHom_def := sorry
--   pentagon F G H K := sorry

end CategoryTheory.Monoidal.Sheaf
