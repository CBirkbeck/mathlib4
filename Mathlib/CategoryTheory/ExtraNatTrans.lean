/-
Copyright (c) 2024 Brendan Murphy. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Brendan Murphy
-/
import Mathlib.CategoryTheory.Functor.Trifunctor
import Mathlib.CategoryTheory.Functor.Hom

/-!
# Extranatural transformations

Defines extranatural transformations between functors
with a variable of mixed variance.

An extranatural transformation `Œ± : ExtraNatTrans F G` between two functors
`F : A ‚•§ B ‚•§ B·µí·µñ ‚•§ D`, `G : A ‚•§ C ‚•§ C·µí·µñ ‚•§ D` consists of morphisms
`Œ±.app X Y Z : F.obj X Y Y ‚ü∂ G.obj X Z Z`, and three naturality squares:
* In the `A`-variable we have usual naturality,
`Œ±.naturality‚ÇÅ f Y Z : F.map‚ÇÉ f (ùüô Y) (ùüô Y) ‚â´ Œ±.app X' Y Z = Œ±.app X Y Z ‚â´ G.map‚ÇÉ f (ùüô Z) (ùüô Z)`,
where `f : X ‚ü∂ X'`.
* In the `B`-variable we have extranaturality,
`Œ±.naturality‚ÇÇ X g Z : F.map‚ÇÉ (ùüô X) (ùüô Y) g ‚â´ Œ±.app X Y Z = F.map‚ÇÉ (ùüô X) g (ùüô Y') ‚â´ Œ±.app X Y' Z`,
where `g : Y ‚ü∂ Y'`.
* In the `C`-variable we have extranaturality,
`Œ±.naturality‚ÇÉ X Y h : Œ±.app X Y Z ‚â´ G.map‚ÇÉ (ùüô X) h (ùüô Z) = Œ±.app X Y Z' ‚â´ G.map‚ÇÉ (ùüô X) (ùüô Z') h`,
where `h : Z ‚ü∂ Z'`.

-/

namespace CategoryTheory

-- declare the `v`'s first; see note [CategoryTheory universes].
universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

variable {A : Type u‚ÇÅ} [Category.{v‚ÇÅ} A] {B : Type u‚ÇÇ} [Category.{v‚ÇÇ} B]
         {C : Type u‚ÇÉ} [Category.{v‚ÇÉ} C] {D : Type u‚ÇÑ} [Category.{v‚ÇÑ} D]

open Opposite

/-- `ExtraNatTrans F G` represents a transformation between functors `F` and `G`
which is ordinary-natural in the first variable and extranatural in the other two.

The field `app` provides the components of the natural transformation.

Naturality is expressed by `Œ±.naturality‚ÇÅ`, `Œ±.naturality‚ÇÇ`, and `Œ±.naturality‚ÇÉ`.
-/
@[ext, pp_dot]
structure ExtraNatTrans (F : A ‚•§ B ‚•§ B·µí·µñ ‚•§ D) (G : A ‚•§ C ‚•§ C·µí·µñ ‚•§ D) :
    Type max u‚ÇÅ u‚ÇÇ u‚ÇÉ v‚ÇÑ where
  /-- The component of an extranatural transformation. -/
  app : ‚àÄ X Y Z, F.obj‚ÇÉ X Y (op Y) ‚ü∂ G.obj‚ÇÉ X Z (op Z)
  /-- The naturality square. -/
  naturality‚ÇÅ : ‚àÄ ‚¶ÉX X'‚¶Ñ (f : X ‚ü∂ X') Y Z,
    F.map‚ÇÉ f (ùüô Y) (ùüô (op Y)) ‚â´ app X' Y Z = app X Y Z ‚â´ G.map‚ÇÉ f (ùüô Z) (ùüô (op Z)) :=
    by aesop_cat
  /-- The extranaturality cowedge. -/
  naturality‚ÇÇ : ‚àÄ X ‚¶ÉY Y'‚¶Ñ (g : Y ‚ü∂ Y') Z,
    F.map‚ÇÉ (ùüô X) (ùüô Y) (op g) ‚â´ app X Y Z = F.map‚ÇÉ (ùüô X) g (ùüô (op Y')) ‚â´ app X Y' Z :=
    by aesop_cat
  /-- The extranaturality wedge. -/
  naturality‚ÇÉ : ‚àÄ X Y ‚¶ÉZ Z'‚¶Ñ (h : Z ‚ü∂ Z'),
    app X Y Z ‚â´ G.map‚ÇÉ (ùüô X) h (ùüô (op Z)) = app X Y Z' ‚â´ G.map‚ÇÉ (ùüô X) (ùüô Z') (op h) :=
    by aesop_cat

attribute [reassoc (attr := simp)]
  ExtraNatTrans.naturality‚ÇÅ ExtraNatTrans.naturality‚ÇÇ  ExtraNatTrans.naturality‚ÇÉ

namespace ExtraNatTrans

variable {F : A ‚•§ B ‚•§ B·µí·µñ ‚•§ D} {G : A ‚•§ C ‚•§ C·µí·µñ ‚•§ D}

theorem congr_app {Œ± Œ≤ : ExtraNatTrans F G} (h : Œ± = Œ≤) (X : A) (Y : B) (Z : C) :
    Œ±.app X Y Z = Œ≤.app X Y Z := by aesop_cat

attribute [pp_dot] ExtraNatTrans.app

@[simps!]
def fixMixedVar (F : A ‚•§ B ‚•§ B·µí·µñ ‚•§ C) (b : B) : A ‚•§ C :=
  (F.flip.obj b).flip.obj (op b)

lemma fixMixedVar_curry‚ÇÉ (F : A √ó B √ó B·µí·µñ ‚•§ C) (b : B) :
    fixMixedVar (curry‚ÇÉ.obj F) b = (Prod.sectl A (b, op b)) ‚ãô F := rfl

lemma fixMixedVar_obj_eq_obj‚ÇÉ (F : A ‚•§ B ‚•§ B·µí·µñ ‚•§ C) (b : B) (a : A) :
    (fixMixedVar F b).obj a = F.obj‚ÇÉ a b (op b) := rfl

lemma fixMixedVar_map_eq_map‚ÇÉ (F : A ‚•§ B ‚•§ B·µí·µñ ‚•§ C) (b : B) {a‚ÇÅ a‚ÇÇ : A}
    (f : a‚ÇÅ ‚ü∂ a‚ÇÇ) : (fixMixedVar F b).map f = F.map‚ÇÉ f (ùüô _) (ùüô _) :=
  (F.map‚ÇÉ_id‚ÇÇ_id‚ÇÉ f _ _).symm

private
lemma fixMixedVar_eq_comp_uncurry‚ÇÉ (F : A ‚•§ B ‚•§ B·µí·µñ ‚•§ C) (b : B) :
    fixMixedVar F b = (Prod.sectl A (b, op b)) ‚ãô uncurry‚ÇÉ.obj F :=
  Functor.hext (fun _ => rfl) $ fun _ _ _ => heq_of_eq
    $ Eq.trans (fixMixedVar_map_eq_map‚ÇÉ F b _)
    $ Eq.symm $ uncurry‚ÇÉ_obj_map_apply_eq_uncurry‚ÇÉ_map‚ÇÉ_apply _ _

def fixMixedVar_iso_comp_uncurry‚ÇÉ (F : A ‚•§ B ‚•§ B·µí·µñ ‚•§ C) (b : B) :
    fixMixedVar F b ‚âÖ (Prod.sectl A (b, op b)) ‚ãô uncurry‚ÇÉ.obj F :=
  eqToIso (fixMixedVar_eq_comp_uncurry‚ÇÉ F b)

lemma fixMixedVar_iso_comp_uncurry‚ÇÉ_app (F : A ‚•§ B ‚•§ B·µí·µñ ‚•§ C) (b : B)
    (a : A) : (fixMixedVar_iso_comp_uncurry‚ÇÉ F b).app a = Iso.refl _ :=
  eqToIso_app _ _

@[pp_dot]
def natTransComponent (Œ± : ExtraNatTrans F G) (Y : B) (Z : C) :
    NatTrans (fixMixedVar F Y) (fixMixedVar G Z) where
  app X := Œ±.app X Y Z
  naturality _ _ f :=
    Eq.trans (congrArg (. ‚â´ _) (fixMixedVar_map_eq_map‚ÇÉ F Y f))
    $ Eq.trans (Œ±.naturality‚ÇÅ f Y Z)
    $ congrArg (_ ‚â´ .) (fixMixedVar_map_eq_map‚ÇÉ G Z f).symm

end ExtraNatTrans

-- We refrain from implementing composition until mathlib has multicategories

end CategoryTheory
