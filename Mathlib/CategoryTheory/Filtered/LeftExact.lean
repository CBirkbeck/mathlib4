import Mathlib.CategoryTheory.Filtered.CostructuredArrow
import Mathlib.CategoryTheory.Functor.Flat

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Limits

instance {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [IsFilteredOrEmpty C] : IsPreconnected C :=
  zigzag_isPreconnected fun c‚ÇÅ c‚ÇÇ =>
    .trans (.of_hom (IsFiltered.leftToMax c‚ÇÅ c‚ÇÇ)) (.of_inv (IsFiltered.rightToMax c‚ÇÅ c‚ÇÇ))

instance {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [IsCofilteredOrEmpty C] : IsPreconnected C :=
  zigzag_isPreconnected fun c‚ÇÅ c‚ÇÇ =>
    .trans (.of_inv (IsCofiltered.minToLeft c‚ÇÅ c‚ÇÇ)) (.of_hom (IsCofiltered.minToRight c‚ÇÅ c‚ÇÇ))

instance {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [IsFiltered C] : IsConnected C where
  is_nonempty := IsFiltered.nonempty

instance {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [IsCofiltered C] : IsConnected C where
  is_nonempty := IsCofiltered.nonempty

variable {C : Type u‚ÇÅ} [SmallCategory C]
variable {D : Type u‚ÇÅ} [SmallCategory D]
variable (F : C ‚•§ D)

instance [h : RepresentablyFlat F] : F.Final := ‚ü®inferInstance‚ü©

lemma isFiltered_of_representablyFlat [IsFiltered C] [RepresentablyFlat F] : IsFiltered D :=
  haveI : PreservesFiniteLimits F := preservesFiniteLimits_of_flat F
  isFiltered_of_isFiltered_costructuredArrow (ùü≠ _) F

lemma isCofiltered_of_representablyCoflat [IsCofiltered C] [RepresentablyCoflat F] :
    IsCofiltered D := by
  have := isFiltered_of_representablyFlat F.op
  exact isCofiltered_of_isFiltered_op D

end CategoryTheory
