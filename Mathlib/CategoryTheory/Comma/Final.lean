/-
Copyright (c) 2024 Markus Himmel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Markus Himmel
-/
import Mathlib.CategoryTheory.Limits.Final
import Mathlib.CategoryTheory.Functor.KanExtension.Adjunction
import Mathlib.CategoryTheory.Grothendieck

/-!

-/


namespace CategoryTheory

open CategoryTheory Limits Functor

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

section ArbitraryUniverses

variable {A : Type u‚ÇÅ} [Category.{v‚ÇÅ} A]
variable {B : Type u‚ÇÇ} [Category.{v‚ÇÇ} B]
variable {T : Type u‚ÇÉ} [Category.{v‚ÇÉ} T]
variable (L : A ‚•§ T) (R : B ‚•§ T)

@[simps]
def canonicalFunctor' (b‚ÇÄ : B) : CostructuredArrow L (R.obj b‚ÇÄ) ‚•§ Comma L R where
  obj X := Comma.mk X.left b‚ÇÄ X.hom
  map {X Y} f :=
    { left := f.left
      right := ùüô b‚ÇÄ }

#check toCostructuredArrow

@[simps! obj map]
def canonicalFunctor (b‚ÇÄ : B) :
    CostructuredArrow L (R.obj b‚ÇÄ) ‚•§ CostructuredArrow (Comma.snd L R) b‚ÇÄ :=
  Functor.toCostructuredArrow (canonicalFunctor' L R b‚ÇÄ) _ _ (fun _ => ùüô b‚ÇÄ) (by aesop_cat)

@[simps!]
def backToA (b‚ÇÄ : B) : CostructuredArrow (Comma.snd L R) b‚ÇÄ ‚•§ A :=
  CostructuredArrow.proj _ _ ‚ãô Comma.fst _ _

@[simps! obj map]
def backwards (b‚ÇÄ : B) : CostructuredArrow (Comma.snd L R) b‚ÇÄ ‚•§ CostructuredArrow L (R.obj b‚ÇÄ) :=
  Functor.toCostructuredArrow (backToA L R b‚ÇÄ) _ _ (fun Y => Y.left.hom ‚â´ R.map Y.hom) fun f => by
    have := f.w
    dsimp at this ‚ä¢
    rw [reassoc_of% f.left.w, ‚Üê R.map_comp, this, Category.comp_id]

def adjunction (b‚ÇÄ : B) : backwards L R b‚ÇÄ ‚ä£ canonicalFunctor L R b‚ÇÄ := by
  refine' Adjunction.mkOfHomEquiv ‚ü®fun X Y => _, _, _‚ü©
  ¬∑ dsimp
    refine' ‚ü®_, _, _, fun f => CostructuredArrow.hom_ext _ _ <| Comma.hom_ext _ _ _ _‚ü©
    ¬∑ exact fun f => CostructuredArrow.homMk (CommaMorphism.mk f.left X.hom (by simp)) (by simp)
    ¬∑ refine' fun f => CostructuredArrow.homMk f.left.left _
      have fw : f.left.right = X.hom := by simpa using f.w
      have flw : L.map f.left.left ‚â´ Y.hom = X.left.hom ‚â´ R.map f.left.right := by
        simpa using f.left.w
      simp [flw, fw]
    ¬∑ aesop_cat
    ¬∑ simp
    ¬∑ simpa using f.w.symm
  ¬∑ simp
  ¬∑ aesop_cat

theorem cofinal_canonicalFunctor (b‚ÇÄ : B) : Functor.Final (canonicalFunctor L R b‚ÇÄ) :=
  Functor.final_of_adjunction (adjunction L R b‚ÇÄ)

end ArbitraryUniverses

section SmallCategory
variable {C : Type (max u‚ÇÅ v‚ÇÅ)} [Category.{v‚ÇÅ} C]
variable {A : Type v‚ÇÅ} [Category.{v‚ÇÅ} A]
variable {B : Type v‚ÇÅ} [Category.{v‚ÇÅ} B]
variable {T : Type v‚ÇÅ} [Category.{v‚ÇÅ} T]
variable (L : A ‚•§ T) (R : B ‚•§ T)

-- noncomputable def bleb : B ‚•§

noncomputable def bla (F : Comma L R ‚•§ C) [HasColimits C] : B ‚•§ C :=
  (lan (Comma.snd L R)).obj F

theorem innerFunctor_aux {C : Type*} [Category C] {D : Type*} [Category D] {I : Type*} [Category I]
  {G : I ‚•§ C} {F : C ‚•§ D} {X Y : I} (f : G.obj X ‚ü∂ G.obj Y) {Z : D} (h : ‚àÄ X, F.obj (G.obj X) ‚ü∂ Z)
  (he : X = Y) (hf : f ‚â´ G.map (eqToHom he.symm) = ùüô _) : F.map f ‚â´ h _ = h _ := by
  cases he
  simp only [eqToHom_refl, map_id, Category.comp_id] at hf
  rw [hf]
  simp

@[simps]
noncomputable def innerFunctor (F : Comma L R ‚•§ C) [HasColimits C] : B ‚•§ C where
  obj b‚ÇÄ := colimit (canonicalFunctor' L R b‚ÇÄ ‚ãô F)
  map {b b'} f := by
    refine ?_ ‚â´ colimit.pre (canonicalFunctor' L R _ ‚ãô F) (CostructuredArrow.map (S := L) (R.map f))
    apply colimMap
    refine ‚ü®fun X => F.map (CommaMorphism.mk (ùüô X.left) f (by simp)), ?_‚ü©
    intros X Y g
    dsimp
    rw [‚Üê F.map_comp, ‚Üê F.map_comp]
    congr 1
    aesop_cat
  map_id b := by
    ext X
    simp only [comp_obj, Functor.comp_map, id_eq, eq_mpr_eq_cast, Œπ_colimMap_assoc, colimit.Œπ_pre,
      Category.comp_id] at *
    apply innerFunctor_aux _ (colimit.Œπ (canonicalFunctor' L R b ‚ãô F)) (by simp)
    simp [Comma.hom_ext_iff]
  map_comp {X Y Z} f g := by
    ext W
    simp
    sorry

noncomputable def colimitComparison (F : Comma L R ‚•§ C) [HasColimits C] :
    colimit F ‚âÖ colimit (innerFunctor L R F) :=
  sorry

/-- `CostructuredArrow L` induces a strict functor `T ‚•§ Cat`. -/
@[simps]
def CostructuredArrow.functor : T ‚•§ Cat where
  obj t := .of <| CostructuredArrow L t
  map f := CostructuredArrow.map f
  map_id t := by
    apply Functor.ext
    intro
    simp [CostructuredArrow.map, Comma.mapRight]
    simp
  map_comp f g := by
    apply Functor.ext
    intro
    simp [CostructuredArrow.map, Comma.mapRight]
    simp

/-- This is not an equivalence, is it? -/
def CostructuredArrow.grothendieckCommaFunctor :
    Grothendieck (R ‚ãô CostructuredArrow.functor L) ‚•§ Comma L R where
  obj := fun P => ‚ü®P.fiber.left, P.base, P.fiber.hom‚ü©
  map := fun f => ‚ü®f.fiber.left, f.base, by simp at *‚ü©

/-- Fully pointless phrasing of 3.4.3 -/
def colimThm [HasColimits C] :
    colim (J := Comma L R) (C := C) ‚âÖ
    (whiskeringLeft _ _ _).obj (CostructuredArrow.grothendieckCommaFunctor L R) ‚ãô colim := _

end SmallCategory

end CategoryTheory
