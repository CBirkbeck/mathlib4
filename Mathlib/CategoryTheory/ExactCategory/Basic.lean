import Mathlib.CategoryTheory.RespectsIso
import Mathlib.CategoryTheory.MorphismProperty
import Mathlib.CategoryTheory.Preadditive.Basic
import Mathlib.CategoryTheory.Limits.Shapes.Biproducts
import Mathlib.Algebra.Homology.ShortComplex.ShortExact

namespace CategoryTheory

open Category Limits ZeroObject

namespace IsPullback

variable {C : Type _} [Category C] [HasZeroMorphisms C] [HasZeroObject C]

lemma of_hasBinaryBiproduct_fst_snd (X‚ÇÅ X‚ÇÇ : C) [HasBinaryBiproduct X‚ÇÅ X‚ÇÇ] :
    IsPullback biprod.fst biprod.snd (0 : X‚ÇÅ ‚ü∂ 0) (0 : X‚ÇÇ ‚ü∂ 0) where
  w := by simp
  isLimit' :=
    ‚ü®{  lift := fun s => biprod.lift (s.œÄ.app WalkingCospan.left) (s.œÄ.app WalkingCospan.right)
        fac := fun s => by rintro (_|_|_) <;> aesop_cat
        uniq := fun s m hm => by
          apply biprod.hom_ext
          . simpa using hm WalkingCospan.left
          . simpa using hm WalkingCospan.right }‚ü©

end IsPullback

variable (C : Type _) [Category C] [Preadditive C]

namespace ShortComplex

variable {C}
variable (S : Set (ShortComplex C))

def fAdmissible : MorphismProperty C := fun _ Y f =>
  ‚àÉ (Z : C) (g : Y ‚ü∂ Z) (zero : f ‚â´ g = 0), ShortComplex.mk f g zero ‚àà S

lemma fAdmissible_respectsIso [S.RespectsIso] : (fAdmissible S).RespectsIso := by
  constructor
  . intro X X' Y e f ‚ü®Z, g, zero, mem‚ü©
    refine' ‚ü®Z, g, by rw [assoc, zero, comp_zero], S.mem_of_iso _ mem‚ü©
    exact ShortComplex.mkIso e.symm (Iso.refl _) (Iso.refl _) (by aesop_cat) (by aesop_cat)
  . intro X Y Y' e f ‚ü®Z, g, zero, mem‚ü©
    refine' ‚ü®Z, e.inv ‚â´ g, by rw [assoc, e.hom_inv_id_assoc, zero], S.mem_of_iso _ mem‚ü©
    exact ShortComplex.mkIso (Iso.refl _) e (Iso.refl _) (by aesop_cat) (by aesop_cat)

def gAdmissible : MorphismProperty C := fun Y _ g =>
  ‚àÉ (X : C) (f : X ‚ü∂ Y) (zero : f ‚â´ g = 0), ShortComplex.mk f g zero ‚àà S

lemma gAdmissible_respectsIso [S.RespectsIso] : (gAdmissible S).RespectsIso := by
  constructor
  . intro Y Y' Z e g ‚ü®X, f, zero, mem‚ü©
    refine' ‚ü®X, f ‚â´ e.inv, by rw [assoc, e.inv_hom_id_assoc, zero], S.mem_of_iso _ mem‚ü©
    exact ShortComplex.mkIso (Iso.refl _) e.symm (Iso.refl _) (by aesop_cat) (by aesop_cat)
  . intro Y Z Z' e g ‚ü®X, f, zero, mem‚ü©
    refine' ‚ü®X, f, by rw [reassoc_of% zero, zero_comp], S.mem_of_iso _ mem‚ü©
    exact ShortComplex.mkIso (Iso.refl _) (Iso.refl _) e (by aesop_cat) (by aesop_cat)

end ShortComplex

-- see _Exact Categories_, Theo B√ºhler, Expo. Math 28 (2010), 1-69

class ExactCategory [HasZeroObject C] [HasBinaryBiproducts C] where
  shortExact' : Set (ShortComplex C)
  respectsIso_shortExact' : shortExact'.RespectsIso
  shortExact_kernel' :
    ‚àÄ S (_ : S ‚àà shortExact'), Nonempty (IsLimit (KernelFork.ofŒπ _ S.zero))
  shortExact_cokernel' :
    ‚àÄ S (_ : S ‚àà shortExact'), Nonempty (IsColimit (CokernelCofork.ofœÄ _ S.zero))
  admissibleMono_id (X : C) : (ShortComplex.fAdmissible shortExact') (ùüô X)
  admissibleEpi_id (X : C) : (ShortComplex.gAdmissible shortExact') (ùüô X)
  admissibleMono_stableUnderComposition :
    (ShortComplex.fAdmissible shortExact').StableUnderComposition
  admissibleEpi_stableUnderComposition :
    (ShortComplex.gAdmissible shortExact').StableUnderComposition
  admissibleMono_coquarrable :
    ShortComplex.fAdmissible shortExact' ‚äÜ MorphismProperty.coquarrable C
  admissibleEpi_quarrable :
    ShortComplex.gAdmissible shortExact' ‚äÜ MorphismProperty.quarrable C
  admissibleMono_stableUnderCobaseChange :
    (ShortComplex.fAdmissible shortExact').StableUnderCobaseChange
  admissibleEpi_stableUnderBaseChange :
    (ShortComplex.gAdmissible shortExact').StableUnderBaseChange

variable [HasZeroObject C] [HasBinaryBiproducts C] [ExactCategory C]
  {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)

def ExactCategory.shortExact : Set (ShortComplex C) := ExactCategory.shortExact'

open ExactCategory

instance respectsIso_shortExact : (shortExact C).RespectsIso := respectsIso_shortExact'

variable {C}

lemma isLimit_kernelFork_of_shortExact (S : ShortComplex C) (hS : S ‚àà shortExact C) :
    IsLimit (KernelFork.ofŒπ _ S.zero) :=
  (shortExact_kernel' _ hS).some

lemma isColimit_cokernelCofork_of_shortExact (S : ShortComplex C) (hS : S ‚àà shortExact C) :
    IsColimit (CokernelCofork.ofœÄ _ S.zero) :=
  (shortExact_cokernel' _ hS).some

class AdmissibleMono : Prop where
  mem' : (ShortComplex.fAdmissible (shortExact C)) f

lemma AdmissibleMono.mem [AdmissibleMono f] : (ShortComplex.fAdmissible (shortExact C)) f :=
  AdmissibleMono.mem'

class AdmissibleEpi : Prop where
  mem' : (ShortComplex.gAdmissible (shortExact C)) g

lemma AdmissibleEpi.mem [AdmissibleEpi f] : (ShortComplex.gAdmissible (shortExact C)) f :=
  AdmissibleEpi.mem'

instance [AdmissibleMono f] [AdmissibleMono g] : AdmissibleMono (f ‚â´ g) :=
  ‚ü®ExactCategory.admissibleMono_stableUnderComposition f g
    (AdmissibleMono.mem f) (AdmissibleMono.mem g)‚ü©

instance [AdmissibleEpi f] [AdmissibleEpi g] : AdmissibleEpi (f ‚â´ g) :=
  ‚ü®ExactCategory.admissibleEpi_stableUnderComposition f g
    (AdmissibleEpi.mem f) (AdmissibleEpi.mem g)‚ü©

instance [AdmissibleMono f] : Mono f := by
  obtain ‚ü®Z, g, zero, mem‚ü© := AdmissibleMono.mem f
  exact mono_of_isLimit_fork (isLimit_kernelFork_of_shortExact _ mem)

instance [AdmissibleEpi g] : Epi g := by
  obtain ‚ü®Z, f, zero, mem‚ü© := AdmissibleEpi.mem g
  exact epi_of_isColimit_cofork (isColimit_cokernelCofork_of_shortExact _ mem)

instance [hg : IsIso g] : AdmissibleEpi g where
  mem' := by
    refine' (MorphismProperty.RespectsIso.arrow_mk_iso_iff
      (ShortComplex.gAdmissible_respectsIso (shortExact C)) _).1 (admissibleEpi_id Y)
    exact Arrow.isoMk (Iso.refl _) (asIso g) (by aesop_cat)

instance [hg : IsIso f] : AdmissibleMono f where
  mem' := by
    refine' (MorphismProperty.RespectsIso.arrow_mk_iso_iff
      (ShortComplex.fAdmissible_respectsIso (shortExact C)) _).1 (admissibleMono_id X)
    exact Arrow.isoMk (Iso.refl _) (asIso f) (by aesop_cat)

instance [AdmissibleEpi g] (f : Z' ‚ü∂ Z) : HasPullback g f :=
  MorphismProperty.quarrable.hasPullback g (admissibleEpi_quarrable g (AdmissibleEpi.mem g)) f

instance [AdmissibleEpi g] (f : Z' ‚ü∂ Z) : HasPullback f g :=
  MorphismProperty.quarrable.hasPullback' g (admissibleEpi_quarrable g (AdmissibleEpi.mem g)) f

instance [AdmissibleEpi g] (f : Z' ‚ü∂ Z) : AdmissibleEpi (pullback.snd : pullback g f ‚ü∂ _) where
  mem' := ExactCategory.admissibleEpi_stableUnderBaseChange
    (IsPullback.of_hasPullback g f) (AdmissibleEpi.mem g)

instance [AdmissibleEpi g] (f : Z' ‚ü∂ Z) : AdmissibleEpi (pullback.fst : pullback f g ‚ü∂ _) where
  mem' := ExactCategory.admissibleEpi_stableUnderBaseChange
    (IsPullback.of_hasPullback f g).flip (AdmissibleEpi.mem g)

instance [AdmissibleMono f] (g : X ‚ü∂ X') : HasPushout f g :=
  MorphismProperty.coquarrable.hasPushout f (admissibleMono_coquarrable f (AdmissibleMono.mem f)) g

instance [AdmissibleMono f] (g : X ‚ü∂ X') : HasPushout g f :=
  MorphismProperty.coquarrable.hasPushout' f (admissibleMono_coquarrable f (AdmissibleMono.mem f)) g

instance [AdmissibleMono f] (g : X ‚ü∂ X') : AdmissibleMono (pushout.inl : _ ‚ü∂ pushout g f) where
  mem' := ExactCategory.admissibleMono_stableUnderCobaseChange
    (IsPushout.of_hasPushout g f) (AdmissibleMono.mem f)

instance [AdmissibleMono f] (g : X ‚ü∂ X') : AdmissibleMono (pushout.inr : _ ‚ü∂ pushout f g) where
  mem' := ExactCategory.admissibleMono_stableUnderCobaseChange
    (IsPushout.of_hasPushout f g).flip (AdmissibleMono.mem f)

namespace ExactCategory

lemma shortExact_of_admissibleMono_of_isColimit (S : ShortComplex C)
    (hf : AdmissibleMono S.f) (hS : IsColimit (CokernelCofork.ofœÄ _ S.zero)) :
    S ‚àà shortExact C := by
  obtain ‚ü®X‚ÇÉ', g', zero, mem‚ü© := hf.mem
  refine' Set.mem_of_iso _ _ mem
  have hg' := isColimit_cokernelCofork_of_shortExact _ mem
  refine' ShortComplex.mkIso (Iso.refl _) (Iso.refl _)
      (IsColimit.coconePointUniqueUpToIso hg' hS) (by aesop_cat) _
  have eq := IsColimit.comp_coconePointUniqueUpToIso_hom hg' hS WalkingParallelPair.one
  dsimp at eq ‚ä¢
  rw [eq, id_comp]

lemma shortExact_of_admissibleEpi_of_isLimit (S : ShortComplex C)
    (hg : AdmissibleEpi S.g) (hS : IsLimit (KernelFork.ofŒπ _ S.zero)) :
    S ‚àà shortExact C := by
  obtain ‚ü®X‚ÇÅ', f', zero, mem‚ü© := hg.mem
  refine' Set.mem_of_iso _ _ mem
  have hf' := isLimit_kernelFork_of_shortExact _ mem
  refine' ShortComplex.mkIso (IsLimit.conePointUniqueUpToIso hf' hS) (Iso.refl _) (Iso.refl _)
    _ (by aesop_cat)
  have eq := IsLimit.conePointUniqueUpToIso_hom_comp hf' hS WalkingParallelPair.zero
  dsimp at eq ‚ä¢
  rw [eq, comp_id]

instance (X : C) : AdmissibleEpi (0 : X ‚ü∂ 0) := by
  obtain ‚ü®Z, g, zero, mem'‚ü© := AdmissibleMono.mem (ùüô X)
  have : AdmissibleEpi g := ‚ü®_, _, _, mem'‚ü©
  have hZ : IsZero Z := by
    rw [IsZero.iff_id_eq_zero, ‚Üê cancel_epi g]
    simpa only [comp_id, comp_zero, id_comp] using zero
  rw [(isZero_zero C).eq_of_tgt 0 (g ‚â´ hZ.isoZero.hom)]
  infer_instance

instance (X : C) : AdmissibleMono (0 : 0 ‚ü∂ X) := by
  obtain ‚ü®Z, f, zero, mem'‚ü© := AdmissibleEpi.mem (ùüô X)
  have : AdmissibleMono f := ‚ü®_, _, _, mem'‚ü©
  have hZ : IsZero Z := by
    rw [IsZero.iff_id_eq_zero, ‚Üê cancel_mono f]
    simpa only [comp_id, zero_comp, id_comp] using zero
  rw [(isZero_zero C).eq_of_src 0 (hZ.isoZero.inv ‚â´ f)]
  infer_instance

instance (X‚ÇÅ X‚ÇÇ : C) : AdmissibleEpi (biprod.snd : X‚ÇÅ ‚äû X‚ÇÇ ‚ü∂ X‚ÇÇ) where
  mem' := ExactCategory.admissibleEpi_stableUnderBaseChange
    (IsPullback.of_hasBinaryBiproduct_fst_snd X‚ÇÅ X‚ÇÇ) (AdmissibleEpi.mem _)

instance (X‚ÇÅ X‚ÇÇ : C) : AdmissibleEpi (biprod.fst : X‚ÇÅ ‚äû X‚ÇÇ ‚ü∂ X‚ÇÅ) := by
  have eq : (biprod.fst : X‚ÇÅ ‚äû X‚ÇÇ ‚ü∂ X‚ÇÅ) = (biprod.braiding X‚ÇÅ X‚ÇÇ).hom ‚â´ biprod.snd := by aesop_cat
  rw [eq]
  infer_instance

lemma binaryBiproduct_shortExact (X‚ÇÅ X‚ÇÇ : C) :
    ShortComplex.mk (biprod.inl : X‚ÇÅ ‚ü∂ _) (biprod.snd : _ ‚ü∂ X‚ÇÇ) (by simp) ‚àà shortExact C := by
  apply shortExact_of_admissibleEpi_of_isLimit
  . dsimp
    infer_instance
  . exact(ShortComplex.Splitting.ofHasBinaryBiproduct X‚ÇÅ X‚ÇÇ).fIsKernel

instance (X‚ÇÅ X‚ÇÇ : C) : AdmissibleMono (biprod.inl : _ ‚ü∂ X‚ÇÅ ‚äû X‚ÇÇ) where
  mem' := ‚ü®_, _, _, binaryBiproduct_shortExact X‚ÇÅ X‚ÇÇ‚ü©

instance (X‚ÇÅ X‚ÇÇ : C) : AdmissibleMono (biprod.inr : _ ‚ü∂ X‚ÇÅ ‚äû X‚ÇÇ) := by
  rw [show biprod.inr = biprod.inl ‚â´ (biprod.braiding X‚ÇÅ X‚ÇÇ).inv by aesop_cat]
  infer_instance

instance {Y' : C} (f : X ‚ü∂ Y) (g : Y' ‚ü∂ Y) [hf : AdmissibleMono f] [AdmissibleEpi g] :
    AdmissibleMono (pullback.snd : pullback f g ‚ü∂ _) := by
  have hf' := hf
  obtain ‚ü®Z, p, hp, mem‚ü© := hf'
  have hf'' : IsLimit (KernelFork.ofŒπ f hp) := isLimit_kernelFork_of_shortExact _ mem
  have : AdmissibleEpi p := ‚ü®_, _, _, mem‚ü©
  let S := ShortComplex.mk (pullback.snd : pullback f g ‚ü∂ _) (g ‚â´ p) (by
    rw [‚Üê pullback.condition_assoc, hp, comp_zero])
  have hS : S ‚àà shortExact C := by
    apply shortExact_of_admissibleEpi_of_isLimit
    . dsimp
      infer_instance
    . exact KernelFork.IsLimit.ofŒπ _ _
        (fun a ha => pullback.lift (KernelFork.IsLimit.lift' hf'' (a ‚â´ g)
          (by rw [assoc, ha])).1 a (by exact (KernelFork.IsLimit.lift' _ _ _).2))
        (fun a ha => by dsimp ; simp)
        (fun a ha b hb => by
          dsimp at a b ha hb
          apply pullback.hom_ext
          . dsimp
            rw [‚Üê cancel_mono f, assoc, pullback.condition, reassoc_of% hb]
            simpa using (KernelFork.IsLimit.lift' hf'' (a ‚â´ g) (by rw [assoc, ha])).2.symm
          . dsimp
            simp [hb])
  exact ‚ü®_, _, _, hS‚ü©

end ExactCategory

end CategoryTheory
