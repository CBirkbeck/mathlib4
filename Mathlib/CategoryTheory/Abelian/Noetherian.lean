/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Subobject.Lattice
import Mathlib.CategoryTheory.ObjectProperty.Basic
import Mathlib.CategoryTheory.Abelian.Basic
import Mathlib.Order.OrderIsoNat

/-!
# Noetherian objects in an abelian category

-/

universe v u

open CategoryTheory

lemma PartialOrder.isIso_iff_eq {C : Type u} [PartialOrder C]
    {X Y : C} (f : X ‚ü∂ Y) : IsIso f ‚Üî X = Y := by
  constructor
  ¬∑ intro _
    exact _root_.le_antisymm (leOfHom f) (leOfHom (inv f))
  ¬∑ rintro rfl
    obtain rfl : f = ùüô _ := rfl
    infer_instance

namespace CategoryTheory

open Limits

variable {C : Type u} [Category.{v} C]

namespace MonoOver

variable {X : C} {A B : MonoOver X} (f : A ‚ü∂ B)

instance [IsIso f] : IsIso f.left :=
  inferInstanceAs (IsIso ((MonoOver.forget _ ‚ãô Over.forget _).map f))

lemma isIso_iff_isIso_left : IsIso f ‚Üî IsIso f.left := by
  constructor
  ¬∑ intro
    infer_instance
  ¬∑ intro
    exact ‚ü®MonoOver.homMk (inv f.left) (by simpa using (MonoOver.w f).symm),
      Subsingleton.elim _ _, Subsingleton.elim _ _‚ü©

lemma isIso_left_iff_subobjectMk_eq :
    IsIso f.left ‚Üî Subobject.mk A.1.hom = Subobject.mk B.1.hom := by
  constructor
  ¬∑ intro
    exact Subobject.mk_eq_mk_of_comm _ _ (asIso f.left) (by simp)
  ¬∑ intro h
    exact ‚ü®Subobject.ofMkLEMk _ _ h.symm.le, by simp [‚Üê cancel_mono A.1.hom],
      by simp [‚Üê cancel_mono B.1.hom]‚ü©

end MonoOver

namespace Subobject

instance (X : C) : (representative (X := X)).IsEquivalence := by
  dsimp only [representative]
  infer_instance

end Subobject

namespace Abelian

variable [Abelian C] {X Y X' Y' : C} (f : X ‚ü∂ Y) (f' : X' ‚ü∂ Y')
  (p : X ‚ü∂ X') (q : Y ‚ü∂ Y') (fac : f ‚â´ q = p ‚â´ f')

noncomputable def image.map : Abelian.image f ‚ü∂ Abelian.image f' :=
  kernel.map _ _ q (cokernel.map _ _ p q fac) (by simp)

@[reassoc (attr := simp)]
lemma image.map_Œπ :
    image.map f f' p q fac ‚â´ Abelian.image.Œπ f' = Abelian.image.Œπ f ‚â´ q := by
  simp [image.map]

end Abelian

-- to be moved
namespace ObjectProperty

variable (P : ObjectProperty C)

@[mk_iff]
class Is (X : C) : Prop where
  prop : P X

lemma prop_of_is (X : C) [P.Is X] : P X := by rwa [‚Üê P.is_iff]

lemma is_of_prop {X : C} (hX : P X) : P.Is X := by rwa [P.is_iff]

end ObjectProperty

def isNoetherianObject : ObjectProperty C :=
  fun X ‚Ü¶ WellFoundedGT (Subobject X)

variable (X Y : C)

abbrev IsNoetherianObject : Prop := isNoetherianObject.Is X

instance [IsNoetherianObject X] : WellFoundedGT (Subobject X) :=
  isNoetherianObject.prop_of_is X

lemma isNoetherianObject_iff_monotone_chain_condition :
    IsNoetherianObject X ‚Üî ‚àÄ (f : ‚Ñï ‚Üío Subobject X),
      ‚àÉ (n : ‚Ñï), ‚àÄ (m : ‚Ñï), n ‚â§ m ‚Üí f n = f m := by
  dsimp only [IsNoetherianObject]
  rw [ObjectProperty.is_iff, isNoetherianObject,
    wellFoundedGT_iff_monotone_chain_condition]

variable {X} in
lemma monotone_chain_condition_of_isNoetherianObject
    [IsNoetherianObject X] (f : ‚Ñï ‚Üío Subobject X) :
    ‚àÉ (n : ‚Ñï), ‚àÄ (m : ‚Ñï), n ‚â§ m ‚Üí f n = f m :=
  (isNoetherianObject_iff_monotone_chain_condition X).1 inferInstance f

lemma isNoetherianObject_iff_not_strictMono :
    IsNoetherianObject X ‚Üî ‚àÄ (f : ‚Ñï ‚Üí Subobject X), ¬¨ StrictMono f := by
  refine ‚ü®fun _ ‚Ü¶ not_strictMono_of_wellFoundedGT, fun h ‚Ü¶ ?_‚ü©
  dsimp only [IsNoetherianObject]
  rw [ObjectProperty.is_iff, isNoetherianObject, WellFoundedGT,
    isWellFounded_iff, RelEmbedding.wellFounded_iff_no_descending_seq]
  exact ‚ü®fun f ‚Ü¶ h f.toFun (fun a b h ‚Ü¶ f.map_rel_iff.2 h)‚ü©

lemma not_strictMono_of_isNoetherianObject
    [IsNoetherianObject X] (f : ‚Ñï ‚Üí Subobject X) :
    ¬¨ StrictMono f :=
  (isNoetherianObject_iff_not_strictMono X).1 inferInstance f

lemma isNoetherianObject_iff_monoOver_chain_condition :
    IsNoetherianObject X ‚Üî ‚àÄ (F : ‚Ñï ‚•§ MonoOver X),
      ‚àÉ (n : ‚Ñï), ‚àÄ (m : ‚Ñï) (a : n ‚ü∂ m), IsIso (F.map a).left := by
  rw [isNoetherianObject_iff_monotone_chain_condition]
  constructor
  ¬∑ intro h G
    obtain ‚ü®n, hn‚ü© := h ‚ü®_, (G ‚ãô (Subobject.equivMonoOver _).inverse).monotone‚ü©
    refine ‚ü®n, fun m hm ‚Ü¶ ?_‚ü©
    rw [MonoOver.isIso_left_iff_subobjectMk_eq]
    exact hn m (leOfHom hm)
  ¬∑ intro h F
    obtain ‚ü®n, hn‚ü© := h (F.monotone.functor ‚ãô Subobject.representative)
    refine ‚ü®n, fun m hm ‚Ü¶ ?_‚ü©
    have := hn m (homOfLE hm)
    simpa [‚Üê MonoOver.isIso_iff_isIso_left, isIso_iff_of_reflects_iso,
      PartialOrder.isIso_iff_eq] using hn m (homOfLE hm)

variable {X Y}

lemma isNoetherianObject_of_mono (i : X ‚ü∂ Y) [Mono i] [IsNoetherianObject Y] :
    IsNoetherianObject X := by
  rw [isNoetherianObject_iff_monotone_chain_condition]
  intro f
  obtain ‚ü®n, hn‚ü© := monotone_chain_condition_of_isNoetherianObject
    ‚ü®_, (Subobject.map i).monotone.comp f.2‚ü©
  exact ‚ü®n, fun m hm ‚Ü¶ Subobject.map_obj_injective i (hn m hm)‚ü©

@[simps]
noncomputable def MonoOver.abelianImage [Abelian C] (f : X ‚ü∂ Y) :
    MonoOver X ‚•§ MonoOver Y where
  obj A := MonoOver.mk' (Abelian.image.Œπ (A.1.hom ‚â´ f))
  map {A B} g := MonoOver.homMk (Abelian.image.map _ _ g.left (ùüô _) (by simp))

noncomputable def Subobject.abelianImage [Abelian C] (f : X ‚ü∂ Y) :
    Subobject X ‚•§ Subobject Y :=
  lower (MonoOver.abelianImage f)

lemma Subobject.mk_abelianImageŒπ_eq [Abelian C]
    (f : X ‚ü∂ Y) {Z : C} (œÄ : X ‚ü∂ Z) [Epi œÄ] (Œπ : Z ‚ü∂ Y) [Mono Œπ] (fac : œÄ ‚â´ Œπ = f):
    mk (Abelian.image.Œπ f) = mk Œπ := by
  let g : Z ‚ü∂ Abelian.image f := kernel.lift _ Œπ (by
    rw [‚Üê cancel_epi œÄ, reassoc_of% fac, cokernel.condition, comp_zero])
  have fac‚ÇÅ : g ‚â´ Abelian.image.Œπ f = Œπ := by simp [g]
  have fac‚ÇÇ : œÄ ‚â´ g = Abelian.factorThruImage f := by
    rw [‚Üê cancel_mono (Abelian.image.Œπ f), Category.assoc, fac‚ÇÅ, kernel.lift_Œπ, fac]
  have := mono_of_mono_fac fac‚ÇÅ
  have := epi_of_epi_fac fac‚ÇÇ
  have := isIso_of_mono_of_epi g
  exact (mk_eq_mk_of_comm _ _ (asIso g) fac‚ÇÅ).symm

lemma Subobject.abelianImage_obj_mk [Abelian C] (f : X ‚ü∂ Y)
    {A B : C} (i : A ‚ü∂ X) [Mono i] (œÄ : A ‚ü∂ B) [Epi œÄ] (Œπ : B ‚ü∂ Y) [Mono Œπ]
    (fac : i ‚â´ f = œÄ ‚â´ Œπ) :
    (abelianImage f).obj (.mk i) = .mk Œπ := by
  exact Subobject.mk_abelianImageŒπ_eq (i ‚â´ f) œÄ Œπ fac.symm

lemma Subobject.abelianImage_obj_pullback_obj_of_epi [Abelian C] (p : X ‚ü∂ Y) [Epi p]
    (A : Subobject Y) : (abelianImage p).obj ((pullback p).obj A) = A := by
  revert A
  apply Subobject.ind
  intro A f _
  exact Subobject.abelianImage_obj_mk p (pullback.snd f p) (pullback.fst f p) f
    pullback.condition.symm

lemma Subobject.pullback_obj_injective [Abelian C] (p : X ‚ü∂ Y) [Epi p] :
    Function.Injective (Subobject.pullback p).obj := by
  intro A B h
  rw [‚Üê abelianImage_obj_pullback_obj_of_epi p A, h, abelianImage_obj_pullback_obj_of_epi]

namespace Abelian

variable [Abelian C]

lemma isNoetherianObject_of_epi (p : X ‚ü∂ Y) [Epi p] [IsNoetherianObject X] :
    IsNoetherianObject Y := by
  rw [isNoetherianObject_iff_monotone_chain_condition]
  intro f
  obtain ‚ü®n, hn‚ü© := monotone_chain_condition_of_isNoetherianObject
    ‚ü®_, (Subobject.pullback p).monotone.comp f.2‚ü©
  exact ‚ü®n, fun m hm ‚Ü¶ Subobject.pullback_obj_injective p (hn m hm)‚ü©

end Abelian

end CategoryTheory
