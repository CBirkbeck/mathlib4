import Mathlib.CategoryTheory.Abelian.Refinements
import Mathlib.CategoryTheory.Sites.Canonical
import Mathlib.CategoryTheory.Sites.Limits

universe w v u

namespace CategoryTheory

open Opposite Limits Category

namespace Abelian

variable (C : Type u) [Category.{v} C] [Abelian C]

def refinementsTopology : GrothendieckTopology C where
  sieves X S := ‚àÉ (T : C) (p : T ‚ü∂ X) (_ : Epi p), S p
  top_mem' X := ‚ü®X, ùüô X, inferInstance, by simp‚ü©
  pullback_stable' X Y S f hS := by
    obtain ‚ü®T, p, hp, h‚ü© := hS
    refine' ‚ü®pullback f p, pullback.fst, inferInstance, _‚ü©
    dsimp
    rw [pullback.condition]
    apply S.downward_closed h
  transitive' X S hS R hR := by
    obtain ‚ü®T, p, hp, h‚ü© := hS
    obtain ‚ü®U, q, hq, h'‚ü© := hR h
    exact ‚ü®_, q ‚â´ p, epi_comp _ _, h'‚ü©

end Abelian

namespace Sheaf

variable {C : Type u} [Category.{u} C] {J : GrothendieckTopology C}
  {F G : Sheaf J (Type u)} (œÜ : F ‚ü∂ G)

lemma mono_of_injective
    (hœÜ : ‚àÄ (X : C·µí·µñ), Function.Injective (fun (x : F.1.obj X) => œÜ.1.app _ x)) : Mono œÜ where
  right_cancellation := by
    intro H f‚ÇÅ f‚ÇÇ h
    ext Z x
    exact hœÜ Z (congr_fun (congr_app (congr_arg Sheaf.Hom.val h) Z) x)

lemma mono_iff_injective :
    Mono œÜ ‚Üî ‚àÄ (X : C·µí·µñ), Function.Injective (fun (x : F.1.obj X) => œÜ.1.app _ x) := by
  constructor
  ¬∑ intro hœÜ X
    simp only [‚Üê CategoryTheory.mono_iff_injective]
    change Mono (((evaluation _ _).obj X).map ((sheafToPresheaf _ _).map œÜ))
    infer_instance
  ¬∑ intro hœÜ
    exact mono_of_injective œÜ hœÜ

lemma epi_of_locally_surjective (hœÜ : ‚àÄ (X : C·µí·µñ) (x : G.1.obj X),
    ‚àÉ (S : Sieve X.unop) (_ : S ‚àà J X.unop),
    ‚àÄ (Y : C) (f : Y ‚ü∂ X.unop) (_ : S f), ‚àÉ (y : F.1.obj (op Y)),
    œÜ.1.app _ y = G.1.map f.op x) : Epi œÜ where
  left_cancellation := by
    intro H f‚ÇÅ f‚ÇÇ h
    ext X x
    obtain ‚ü®S, hS, hS'‚ü© := hœÜ _ x
    apply ((Presieve.isSeparated_of_isSheaf _ _
      ((isSheaf_iff_isSheaf_of_type _ _).1 H.2)) S hS).ext
    intro Y f hf
    obtain ‚ü®y, hy‚ü© := hS' Y f hf
    have h‚ÇÅ := congr_fun (f‚ÇÅ.1.naturality f.op) x
    have h‚ÇÇ := congr_fun (f‚ÇÇ.1.naturality f.op) x
    dsimp at h‚ÇÅ h‚ÇÇ
    simp only [‚Üê h‚ÇÅ, ‚Üê h‚ÇÇ, ‚Üê hy]
    exact congr_fun (congr_app (congr_arg Sheaf.Hom.val h) (op Y)) y

namespace EpiMonoFactorization

@[simps]
def presheafI : C·µí·µñ ‚•§ Type u where
  obj X := { x : G.1.obj X | ‚àÉ (S : Sieve X.unop) (_ : S ‚àà J X.unop),
    ‚àÄ (Y : C) (f : Y ‚ü∂ X.unop) (_ : S f), ‚àÉ (y : F.1.obj (op Y)),
      œÜ.1.app _ y = G.1.map f.op x }
  map {X X'} g a := ‚ü®G.1.map g a.1, by
    obtain ‚ü®S, hS, h‚ü© := a.2
    refine' ‚ü®S.pullback g.unop, J.pullback_stable _ hS, fun Y f hf => _‚ü©
    obtain ‚ü®y, hy‚ü© := h Y (f ‚â´ g.unop) hf
    exact ‚ü®y, by simp [hy]‚ü©‚ü©

@[simps]
def presheafŒπ : presheafI œÜ ‚ü∂ G.1 where
  app _ x := x.1
  naturality _ _ _ := rfl

@[simps]
def I : Sheaf J (Type u) := ‚ü®presheafI œÜ, by
  rw [isSheaf_iff_isSheaf_of_type]
  intro X S hS Œ± hŒ±
  have hS' := (((isSheaf_iff_isSheaf_of_type _ _).1 G.2) _ hS)
  refine' ‚ü®‚ü®hS'.amalgamate _
    (hŒ±.compPresheafMap (presheafŒπ œÜ)), _‚ü©, _, _‚ü©
  ¬∑ let U := fun ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ (hf : S.arrows f) => (Œ± f hf).2.choose
    have hU : ‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ (hf : S.arrows f), U hf ‚àà J _:= fun Y f hf =>
        (Œ± f hf).2.choose_spec.choose
    refine' ‚ü®_, J.bind_covering hS hU, fun Y f hf => _‚ü©
    obtain ‚ü®T, a, b, hb, ha : U hb a, fac‚ü© := hf
    obtain ‚ü®y, hy‚ü© := (Œ± _ hb).2.choose_spec.choose_spec _ a ha
    refine' ‚ü®y, _‚ü©
    have hf : S.arrows f := by
      rw [‚Üê fac]
      apply S.downward_closed hb
    rw [hy, Presieve.IsSheafFor.valid_glue hS' (hŒ±.compPresheafMap (presheafŒπ œÜ)) f hf]
    simpa using (hŒ±.compPresheafMap (presheafŒπ œÜ)) a (ùüô _) hb hf (by simpa using fac)
  ¬∑ intro Y f hf
    apply Subtype.ext
    apply Presieve.IsSheafFor.valid_glue hS' (hŒ±.compPresheafMap (presheafŒπ œÜ))
  ¬∑ rintro ‚ü®y, _‚ü© hy
    apply Subtype.ext
    apply ((Presieve.isSeparated_of_isSheaf _ _
      ((isSheaf_iff_isSheaf_of_type _ _).1 G.2)) S hS).ext
    intro Y f hf
    dsimp
    replace hy := hy f hf
    rw [Subtype.ext_iff] at hy
    dsimp at hy
    rw [hy]
    symm
    apply Presieve.IsSheafFor.valid_glue‚ü©

@[simps]
def Œπ : I œÜ ‚ü∂ G := Sheaf.Hom.mk (presheafŒπ œÜ)

@[simps]
def œÄ : F ‚ü∂ I œÜ where
  val :=
    { app := fun X x => ‚ü®œÜ.1.app X x, ‚ü®‚ä§, J.top_mem X.unop, fun Y f _ =>
        ‚ü®F.1.map f.op x, congr_fun (œÜ.val.naturality f.op) x‚ü©‚ü©‚ü©
      naturality := fun X X' g => by
        ext x
        exact Subtype.ext (congr_fun (œÜ.val.naturality g) x) }

instance : Epi (œÄ œÜ) := by
  apply epi_of_locally_surjective
  intro X x
  obtain ‚ü®S, hS, hS'‚ü© := x.2
  refine' ‚ü®S, hS, fun Y f hf => _‚ü©
  obtain ‚ü®y, hy‚ü© := hS' Y f hf
  exact ‚ü®y, Subtype.ext hy‚ü©

instance : Mono (Œπ œÜ) := by
  apply mono_of_injective
  intro X x‚ÇÅ x‚ÇÇ h
  exact Subtype.ext h

@[reassoc (attr := simp)]
lemma œÄ_Œπ : œÄ œÜ ‚â´ Œπ œÜ = œÜ := rfl

/-instance : StrongEpiCategory (Sheaf J (Type u)) where
  strongEpi_of_epi {F G} p hp := ‚ü®hp, fun A B i hi => ‚ü®fun {a b} sq => by
    suffices ‚àÉ (c : G ‚ü∂ A), c ‚â´ i = b by
      obtain ‚ü®c, hc‚ü© := this
      exact ‚ü®‚ü®{
        l := c
        fac_left := by rw [‚Üê cancel_mono i, assoc, hc, sq.w]
        fac_right := hc }‚ü©‚ü©
    have : ‚àÄ ‚¶ÉX : C·µí·µñ‚¶Ñ (g : G.1.obj X), ‚àÉ (a : A.1.obj X), i.1.app _ a = b.1.app _ g := by
      intro X g
      sorry
    rw [mono_iff_injective] at hi
    refine' ‚ü®Sheaf.Hom.mk
      { app := fun X g => (this g).choose
        naturality := fun X Y f => by
          ext g
          apply hi
          have H := congr_fun (i.1.naturality f) (this g).choose
          dsimp at H ‚ä¢
          erw [(this (G.1.map f g)).choose_spec, H, (this g).choose_spec]
          apply congr_fun (b.1.naturality f) }, _‚ü©
    ext X g
    exact (this g).choose_spec ‚ü©‚ü©-/

end EpiMonoFactorization

end Sheaf

end CategoryTheory
