/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Abelian.SerreClass.Basic
import Mathlib.CategoryTheory.Abelian.DiagramLemmas.KernelCokernelComp
import Mathlib.CategoryTheory.MorphismProperty.Composition
import Mathlib.CategoryTheory.MorphismProperty.Retract
import Mathlib.CategoryTheory.Subobject.Lattice

/-!
# Localization with respect to a Serre class

-/

universe v u

namespace CategoryTheory

open Category Limits

variable {C : Type u} [Category.{v} C]

namespace Limits

variable [HasZeroMorphisms C]

lemma isZero_kernel_of_mono {X Y : C} (f : X ‚ü∂ Y) [Mono f] [HasKernel f] :
    IsZero (kernel f) := by
  rw [IsZero.iff_id_eq_zero, ‚Üê cancel_mono (kernel.Œπ f), ‚Üê cancel_mono f,
    assoc, assoc, kernel.condition, comp_zero, zero_comp]

lemma isZero_cokernel_of_epi {X Y : C} (f : X ‚ü∂ Y) [Epi f] [HasCokernel f] :
    IsZero (cokernel f) := by
  rw [IsZero.iff_id_eq_zero, ‚Üê cancel_epi (cokernel.œÄ f), ‚Üê cancel_epi f,
    cokernel.condition_assoc, zero_comp, comp_zero, comp_zero]

end Limits

variable [Abelian C]

namespace ObjectProperty

variable (P : ObjectProperty C) [P.IsSerreClass]

def serreW : MorphismProperty C := fun _ _ f ‚Ü¶ P (kernel f) ‚àß P (cokernel f)

lemma serreW_iff_of_mono {X Y : C} (f : X ‚ü∂ Y) [Mono f] : P.serreW f ‚Üî P (cokernel f) := by
  dsimp [serreW]
  have := P.prop_of_isZero (isZero_kernel_of_mono f)
  tauto

lemma serreW_iff_of_epi {X Y : C} (f : X ‚ü∂ Y) [Epi f] : P.serreW f ‚Üî P (kernel f) := by
  dsimp [serreW]
  have := P.prop_of_isZero (isZero_cokernel_of_epi f)
  tauto

lemma serreW_of_mono {X Y : C} (f : X ‚ü∂ Y) [Mono f] (hf : P (cokernel f)) : P.serreW f := by
  rwa [serreW_iff_of_mono]

lemma serreW_of_epi {X Y : C} (f : X ‚ü∂ Y) [Epi f] (hf : P (kernel f)) : P.serreW f := by
  rwa [serreW_iff_of_epi]

lemma serreW_of_isIso {X Y : C} (f : X ‚ü∂ Y) [IsIso f] : P.serreW f :=
  P.serreW_of_epi _ (P.prop_of_isZero (isZero_kernel_of_mono f))

instance : P.serreW.IsMultiplicative where
  id_mem _ := P.serreW_of_isIso _
  comp_mem f g hf hg :=
    ‚ü®P.prop_X‚ÇÇ_of_exact ((kernelCokernelCompSequence_exact f g).exact 0) hf.1 hg.1,
      P.prop_X‚ÇÇ_of_exact ((kernelCokernelCompSequence_exact f g).exact 3) hf.2 hg.2‚ü©

instance : P.serreW.HasTwoOutOfThreeProperty where
  of_postcomp f g hg hfg :=
    ‚ü®P.prop_of_mono (kernel.map f (f ‚â´ g) (ùüô _) g (by simp)) hfg.1,
      P.prop_X‚ÇÇ_of_exact ((kernelCokernelCompSequence_exact f g).exact 2) hg.1 hfg.2‚ü©
  of_precomp f g hf hfg :=
    ‚ü®P.prop_X‚ÇÇ_of_exact ((kernelCokernelCompSequence_exact f g).exact 1) hfg.1 hf.2,
      P.prop_of_epi (cokernel.map (f ‚â´ g) g f (ùüô _) (by simp)) hfg.2‚ü©

instance : P.serreW.IsStableUnderRetracts where
  of_retract {X' Y' X Y} f' f h hf :=
    ‚ü®P.prop_of_mono (kernel.map f' f h.left.i h.right.i (by simp)) hf.1,
      P.prop_of_epi (cokernel.map f f' h.left.r h.right.r (by simp)) hf.2‚ü©

@[nolint unusedArguments]
structure SerreWLocalization (P : ObjectProperty C) [P.IsSerreClass] : Type u where
  obj : C

namespace SerreWLocalization

variable {P} (X Y : P.SerreWLocalization)

namespace Hom

structure DefDomain  where
  src : C
  i : src ‚ü∂ X.obj
  [mono_i : Mono i]
  hi : P.serreW i
  tgt : C
  p : Y.obj ‚ü∂ tgt
  [epi_p : Epi p]
  hp : P.serreW p

namespace DefDomain

attribute [instance] mono_i epi_p

variable {X Y} (d‚ÇÅ d‚ÇÇ d‚ÇÉ : DefDomain X Y)

structure Hom where
  Œπ : d‚ÇÅ.src ‚ü∂ d‚ÇÇ.src
  Œπ_i : Œπ ‚â´ d‚ÇÇ.i = d‚ÇÅ.i := by aesop_cat
  œÄ : d‚ÇÇ.tgt ‚ü∂ d‚ÇÅ.tgt
  p_œÄ : d‚ÇÇ.p ‚â´ œÄ = d‚ÇÅ.p := by aesop_cat

namespace Hom

attribute [reassoc (attr := simp)] Œπ_i p_œÄ

@[simps]
def id (d : DefDomain X Y) : Hom d d where
  Œπ := ùüô _
  œÄ := ùüô _

variable {d‚ÇÅ d‚ÇÇ d‚ÇÉ} in
@[simps]
def comp (œÜ : Hom d‚ÇÅ d‚ÇÇ) (œà : Hom d‚ÇÇ d‚ÇÉ) : Hom d‚ÇÅ d‚ÇÉ where
  Œπ := œÜ.Œπ ‚â´ œà.Œπ
  œÄ := œà.œÄ ‚â´ œÜ.œÄ

variable (œÜ : Hom d‚ÇÅ d‚ÇÇ)

instance : Mono œÜ.Œπ := mono_of_mono_fac œÜ.Œπ_i

instance : Epi œÜ.œÄ := epi_of_epi_fac œÜ.p_œÄ

instance : Subsingleton (Hom d‚ÇÅ d‚ÇÇ) where
  allEq œÜ œà := by
    suffices œÜ.Œπ = œà.Œπ ‚àß œÜ.œÄ = œà.œÄ by cases œÜ; cases œà; aesop
    constructor
    ¬∑ simp [‚Üê cancel_mono d‚ÇÇ.i]
    ¬∑ simp [‚Üê cancel_epi d‚ÇÇ.p]

instance : Category (DefDomain X Y) where
  id := Hom.id
  comp := Hom.comp

end Hom

lemma exists_min (d‚ÇÅ d‚ÇÇ : DefDomain X Y) :
    ‚àÉ (d : DefDomain X Y), Nonempty (d ‚ü∂ d‚ÇÅ) ‚àß Nonempty (d ‚ü∂ d‚ÇÇ) := by
  let d : DefDomain X Y :=
    { src := pullback d‚ÇÅ.i d‚ÇÇ.i
      i := pullback.fst _ _ ‚â´ d‚ÇÅ.i
      hi := by
        refine MorphismProperty.comp_mem _ _ _ ?_ d‚ÇÅ.hi
        sorry
      tgt := pushout d‚ÇÅ.p d‚ÇÇ.p
      p := d‚ÇÅ.p ‚â´ pushout.inl _ _
      hp := by
        refine MorphismProperty.comp_mem _ _ _ d‚ÇÅ.hp ?_
        sorry }
  refine ‚ü®d, ‚ü®{ Œπ := pullback.fst _ _, œÄ := pushout.inl _ _ }‚ü©, ‚ü®
    { Œπ := pullback.snd _ _,
      Œπ_i := pullback.condition.symm
      œÄ := pushout.inr _ _
      p_œÄ := pushout.condition.symm }‚ü©‚ü©

end DefDomain


end Hom

end SerreWLocalization

end ObjectProperty

end CategoryTheory
