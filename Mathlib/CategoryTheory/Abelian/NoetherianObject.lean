/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Subobject.Lattice
import Mathlib.CategoryTheory.Subobject.NoetherianObject
import Mathlib.CategoryTheory.Abelian.SerreClass.Basic
import Mathlib.CategoryTheory.Abelian.Refinements
import Mathlib.CategoryTheory.Limits.Constructions.EventuallyConstant
import Mathlib.Order.OrderIsoNat

/-!
# Noetherian objects in an abelian category form a Serre class

-/

universe v u

open CategoryTheory ZeroObject

namespace CategoryTheory

open Limits

variable {C : Type u} [Category.{v} C]

namespace Abelian

variable [Abelian C] {X Y X' Y' : C} (f : X ‚ü∂ Y) (f' : X' ‚ü∂ Y')
  (p : X ‚ü∂ X') (q : Y ‚ü∂ Y') (fac : f ‚â´ q = p ‚â´ f')

noncomputable def image.map : Abelian.image f ‚ü∂ Abelian.image f' :=
  kernel.map _ _ q (cokernel.map _ _ p q fac) (by simp)

@[reassoc (attr := simp)]
lemma image.map_Œπ :
    image.map f f' p q fac ‚â´ Abelian.image.Œπ f' = Abelian.image.Œπ f ‚â´ q := by
  simp [image.map]

end Abelian

variable {X Y : C}

@[simps (config := .lemmasOnly)]
noncomputable def MonoOver.abelianImage [Abelian C] (f : X ‚ü∂ Y) :
    MonoOver X ‚•§ MonoOver Y where
  obj A := MonoOver.mk' (Abelian.image.Œπ (A.1.hom ‚â´ f))
  map {A B} g := MonoOver.homMk (Abelian.image.map _ _ g.left (ùüô _) (by simp))

noncomputable def Subobject.abelianImage [Abelian C] (f : X ‚ü∂ Y) :
    Subobject X ‚•§ Subobject Y :=
  lower (MonoOver.abelianImage f)

lemma Subobject.mk_abelianImageŒπ_eq [Abelian C]
    (f : X ‚ü∂ Y) {Z : C} (œÄ : X ‚ü∂ Z) [Epi œÄ] (Œπ : Z ‚ü∂ Y) [Mono Œπ] (fac : œÄ ‚â´ Œπ = f):
    mk (Abelian.image.Œπ f) = mk Œπ := by
  let g : Z ‚ü∂ Abelian.image f := kernel.lift _ Œπ (by
    rw [‚Üê cancel_epi œÄ, reassoc_of% fac, cokernel.condition, comp_zero])
  have fac‚ÇÅ : g ‚â´ Abelian.image.Œπ f = Œπ := by simp [g]
  have fac‚ÇÇ : œÄ ‚â´ g = Abelian.factorThruImage f := by
    rw [‚Üê cancel_mono (Abelian.image.Œπ f), Category.assoc, fac‚ÇÅ, kernel.lift_Œπ, fac]
  have := mono_of_mono_fac fac‚ÇÅ
  have := epi_of_epi_fac fac‚ÇÇ
  have := isIso_of_mono_of_epi g
  exact (mk_eq_mk_of_comm _ _ (asIso g) fac‚ÇÅ).symm

lemma Subobject.abelianImage_obj_mk [Abelian C] (f : X ‚ü∂ Y)
    {A B : C} (i : A ‚ü∂ X) [Mono i] (œÄ : A ‚ü∂ B) [Epi œÄ] (Œπ : B ‚ü∂ Y) [Mono Œπ]
    (fac : i ‚â´ f = œÄ ‚â´ Œπ) :
    (abelianImage f).obj (.mk i) = .mk Œπ := by
  exact Subobject.mk_abelianImageŒπ_eq (i ‚â´ f) œÄ Œπ fac.symm

lemma Subobject.abelianImage_obj_pullback_obj_of_epi [Abelian C] (p : X ‚ü∂ Y) [Epi p]
    (A : Subobject Y) : (abelianImage p).obj ((pullback p).obj A) = A := by
  revert A
  apply Subobject.ind
  intro A f _
  exact Subobject.abelianImage_obj_mk p (pullback.snd f p) (pullback.fst f p) f
    pullback.condition.symm

lemma Subobject.pullback_obj_injective [Abelian C] (p : X ‚ü∂ Y) [Epi p] :
    Function.Injective (Subobject.pullback p).obj := by
  intro A B h
  rw [‚Üê abelianImage_obj_pullback_obj_of_epi p A, h, abelianImage_obj_pullback_obj_of_epi]

namespace Abelian

variable [Abelian C]

lemma isNoetherianObject_of_epi (p : X ‚ü∂ Y) [Epi p] [IsNoetherianObject X] :
    IsNoetherianObject Y := by
  rw [isNoetherianObject_iff_monotone_chain_condition]
  intro f
  obtain ‚ü®n, hn‚ü© := monotone_chain_condition_of_isNoetherianObject
    ‚ü®_, (Subobject.pullback p).monotone.comp f.2‚ü©
  exact ‚ü®n, fun m hm ‚Ü¶ Subobject.pullback_obj_injective p (hn m hm)‚ü©

instance : (isNoetherianObject (C := C)).IsClosedUnderQuotients where
  prop_of_epi f _ hX := by
    rw [‚Üê isNoetherianObject.is_iff] at hX ‚ä¢
    exact isNoetherianObject_of_epi f

section

variable (S : ShortComplex C)

@[simps]
noncomputable def fromMonoOverOfShortComplex :
    MonoOver S.X‚ÇÇ ‚•§ ShortComplex C where
  obj A :=
    { X‚ÇÅ := pullback A.1.hom S.f
      X‚ÇÇ := A.1.left
      X‚ÇÉ := Abelian.image (A.1.hom ‚â´ S.g)
      f := pullback.fst _ _
      g := Abelian.factorThruImage _
      zero := by ext; simp [pullback.condition_assoc] }
  map {A B} œÜ :=
    { œÑ‚ÇÅ := ((MonoOver.pullback S.f).map œÜ).left
      œÑ‚ÇÇ := œÜ.left
      œÑ‚ÇÉ := ((MonoOver.abelianImage S.g).map œÜ).left
      comm‚ÇÅ‚ÇÇ := by simp [MonoOver.pullback, MonoOver.forget]
      comm‚ÇÇ‚ÇÉ := by ext; simp [MonoOver.abelianImage] }

variable {S}

lemma shortExact_fromMonoOverOfShortComplex_obj
    (hS : S.ShortExact) (A : MonoOver S.X‚ÇÇ) :
    ((fromMonoOverOfShortComplex S).obj A).ShortExact := by
  have := hS.mono_f
  have := hS.epi_g
  dsimp [fromMonoOverOfShortComplex]
  exact
    { exact := by
        rw [ShortComplex.exact_iff_exact_up_to_refinements]
        intro Y x‚ÇÇ hx‚ÇÇ
        dsimp at x‚ÇÇ hx‚ÇÇ ‚ä¢
        rw [‚Üê cancel_mono (Abelian.image.Œπ _), Category.assoc,
          kernel.lift_Œπ, zero_comp] at hx‚ÇÇ
        obtain ‚ü®A', œÄ, _, x‚ÇÅ, hx‚ÇÅ‚ü©  :=
          hS.exact.exact_up_to_refinements (x‚ÇÇ ‚â´ A.obj.hom) (by simpa using hx‚ÇÇ)
        exact ‚ü®A', œÄ, inferInstance, pullback.lift (œÄ ‚â´ x‚ÇÇ) x‚ÇÅ (by simpa),
          by simp‚ü©}

end

lemma isIso_monoOver_iff_of_shortExact
    {S : ShortComplex C} (hS : S.ShortExact)
    {A B : MonoOver S.X‚ÇÇ} (œÜ : A ‚ü∂ B) :
    IsIso œÜ ‚Üî IsIso ((MonoOver.pullback S.f).map œÜ) ‚àß
      IsIso ((MonoOver.abelianImage S.g).map œÜ):= by
  constructor
  ¬∑ intro
    constructor <;> infer_instance
  ¬∑ rintro ‚ü®h‚ÇÅ, h‚ÇÉ‚ü©
    rw [MonoOver.isIso_iff_isIso_left] at h‚ÇÅ h‚ÇÉ ‚ä¢
    let œà := ((fromMonoOverOfShortComplex S).map œÜ)
    have : IsIso œà.œÑ‚ÇÅ := h‚ÇÅ
    have : IsIso œà.œÑ‚ÇÉ := h‚ÇÉ
    exact ShortComplex.isIso‚ÇÇ_of_shortExact_of_isIso‚ÇÅ‚ÇÉ œà
      (shortExact_fromMonoOverOfShortComplex_obj hS _)
      (shortExact_fromMonoOverOfShortComplex_obj hS _)

lemma isNoetherianObject_of_shortExact {S : ShortComplex C}
    (hS : S.ShortExact) (h‚ÇÅ : IsNoetherianObject S.X‚ÇÅ)
    (h‚ÇÉ : IsNoetherianObject S.X‚ÇÉ) :
    IsNoetherianObject S.X‚ÇÇ := by
  rw [isNoetherianObject_iff_isEventuallyConstant]
  intro F‚ÇÇ
  obtain ‚ü®n‚ÇÅ, hn‚ÇÅ‚ü© := isEventuallyConstant_of_isNoetherianObject
    (F‚ÇÇ ‚ãô MonoOver.pullback S.f)
  obtain ‚ü®n‚ÇÉ, hn‚ÇÉ‚ü© := isEventuallyConstant_of_isNoetherianObject
    (F‚ÇÇ ‚ãô MonoOver.abelianImage S.g)
  refine ‚ü®max n‚ÇÅ n‚ÇÉ, fun m hm ‚Ü¶ ?_‚ü©
  rw [isIso_monoOver_iff_of_shortExact hS]
  exact ‚ü®hn‚ÇÅ.isIso_map _ (homOfLE (le_max_left n‚ÇÅ n‚ÇÉ)),
    hn‚ÇÉ.isIso_map _ (homOfLE (le_max_right n‚ÇÅ n‚ÇÉ))‚ü©

instance : (isNoetherianObject (C := C)).IsClosedUnderExtensions where
  prop_X‚ÇÇ_of_shortExact hS h‚ÇÅ h‚ÇÉ := by
    rw [‚Üê isNoetherianObject.is_iff] at h‚ÇÅ h‚ÇÉ ‚ä¢
    exact isNoetherianObject_of_shortExact hS h‚ÇÅ h‚ÇÉ

instance : (isNoetherianObject (C := C)).IsSerreClass where

end Abelian

end CategoryTheory
