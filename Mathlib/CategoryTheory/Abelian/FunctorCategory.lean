/-
Copyright (c) 2022 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import Mathlib.CategoryTheory.Abelian.Basic
import Mathlib.CategoryTheory.Preadditive.FunctorCategory
import Mathlib.CategoryTheory.Limits.Shapes.FunctorCategory
import Mathlib.CategoryTheory.Limits.Preserves.Shapes.Kernels

#align_import category_theory.abelian.functor_category from "leanprover-community/mathlib"@"8abfb3ba5e211d8376b855dab5d67f9eba9e0774"

/-!
# If `D` is abelian, then the functor category `C ‚•§ D` is also abelian.

-/


noncomputable section

namespace CategoryTheory

open CategoryTheory.Limits

namespace Abelian

section

universe z w v u

-- porting note: removed restrictions on universes

variable {C : Type u} [Category.{v} C]

variable {D : Type w} [Category.{z} D] [Abelian D]

namespace FunctorCategory

variable {F G : C ‚•§ D} (Œ± : F ‚ü∂ G) (X : C)

/-- The abelian coimage in a functor category can be calculated componentwise. -/
@[simps!]
def coimageObjIso : (Abelian.coimage Œ±).obj X ‚âÖ Abelian.coimage (Œ±.app X) :=
  PreservesCokernel.iso ((evaluation C D).obj X) _ ‚â™‚â´
    cokernel.mapIso _ _ (PreservesKernel.iso ((evaluation C D).obj X) _) (Iso.refl _)
      (by
        dsimp
        -- ‚ä¢ NatTrans.app (kernel.Œπ Œ±) X ‚â´ ùüô (F.obj X) = (PreservesKernel.iso ((evaluatio ‚Ä¶
        simp only [Category.comp_id, PreservesKernel.iso_hom]
        -- ‚ä¢ NatTrans.app (kernel.Œπ Œ±) X = kernelComparison Œ± ((evaluation C D).obj X) ‚â´  ‚Ä¶
        exact (kernelComparison_comp_Œπ _ ((evaluation C D).obj X)).symm)
        -- üéâ no goals
#align category_theory.abelian.functor_category.coimage_obj_iso CategoryTheory.Abelian.FunctorCategory.coimageObjIso

/-- The abelian image in a functor category can be calculated componentwise. -/
@[simps!]
def imageObjIso : (Abelian.image Œ±).obj X ‚âÖ Abelian.image (Œ±.app X) :=
  PreservesKernel.iso ((evaluation C D).obj X) _ ‚â™‚â´
    kernel.mapIso _ _ (Iso.refl _) (PreservesCokernel.iso ((evaluation C D).obj X) _)
      (by
        apply (cancel_mono (PreservesCokernel.iso ((evaluation C D).obj X) Œ±).inv).1
        -- ‚ä¢ (((evaluation C D).obj X).map (cokernel.œÄ Œ±) ‚â´ (PreservesCokernel.iso ((eval ‚Ä¶
        simp only [Category.assoc, Iso.hom_inv_id]
        -- ‚ä¢ ((evaluation C D).obj X).map (cokernel.œÄ Œ±) ‚â´ ùüô (((evaluation C D).obj X).ob ‚Ä¶
        dsimp
        -- ‚ä¢ NatTrans.app (cokernel.œÄ Œ±) X ‚â´ ùüô ((cokernel Œ±).obj X) = ùüô (G.obj X) ‚â´ coker ‚Ä¶
        simp only [PreservesCokernel.iso_inv, Category.id_comp, Category.comp_id]
        -- ‚ä¢ NatTrans.app (cokernel.œÄ Œ±) X = cokernel.œÄ (NatTrans.app Œ± X) ‚â´ cokernelComp ‚Ä¶
        exact (œÄ_comp_cokernelComparison _ ((evaluation C D).obj X)).symm)
        -- üéâ no goals
#align category_theory.abelian.functor_category.image_obj_iso CategoryTheory.Abelian.FunctorCategory.imageObjIso

theorem coimageImageComparison_app :
    coimageImageComparison (Œ±.app X) =
      (coimageObjIso Œ± X).inv ‚â´ (coimageImageComparison Œ±).app X ‚â´ (imageObjIso Œ± X).hom := by
  ext
  -- ‚ä¢ (coequalizer.œÄ (kernel.Œπ (NatTrans.app Œ± X)) 0 ‚â´ coimageImageComparison (Nat ‚Ä¶
  dsimp
  -- ‚ä¢ (cokernel.œÄ (kernel.Œπ (NatTrans.app Œ± X)) ‚â´ coimageImageComparison (NatTrans ‚Ä¶
  dsimp [imageObjIso, coimageObjIso, cokernel.map]
  -- ‚ä¢ (cokernel.œÄ (kernel.Œπ (NatTrans.app Œ± X)) ‚â´ coimageImageComparison (NatTrans ‚Ä¶
  simp only [coimage_image_factorisation, PreservesKernel.iso_hom, Category.assoc,
    kernel.lift_Œπ, Category.comp_id, PreservesCokernel.iso_inv,
    cokernel.œÄ_desc_assoc, Category.id_comp]
  erw [kernelComparison_comp_Œπ _ ((evaluation C D).obj X),
    œÄ_comp_cokernelComparison_assoc _ ((evaluation C D).obj X)]
  conv_lhs => rw [‚Üê coimage_image_factorisation Œ±]
  -- üéâ no goals
#align category_theory.abelian.functor_category.coimage_image_comparison_app CategoryTheory.Abelian.FunctorCategory.coimageImageComparison_app

theorem coimageImageComparison_app' :
    (coimageImageComparison Œ±).app X =
      (coimageObjIso Œ± X).hom ‚â´ coimageImageComparison (Œ±.app X) ‚â´ (imageObjIso Œ± X).inv := by
  simp only [coimageImageComparison_app, Iso.hom_inv_id_assoc, Iso.hom_inv_id, Category.assoc,
    Category.comp_id]
#align category_theory.abelian.functor_category.coimage_image_comparison_app' CategoryTheory.Abelian.FunctorCategory.coimageImageComparison_app'

instance functor_category_isIso_coimageImageComparison :
    IsIso (Abelian.coimageImageComparison Œ±) := by
  have : ‚àÄ X : C, IsIso ((Abelian.coimageImageComparison Œ±).app X) := by
    intros
    rw [coimageImageComparison_app']
    infer_instance
  apply NatIso.isIso_of_isIso_app
  -- üéâ no goals
#align category_theory.abelian.functor_category.functor_category_is_iso_coimage_image_comparison CategoryTheory.Abelian.FunctorCategory.functor_category_isIso_coimageImageComparison

end FunctorCategory

noncomputable instance functorCategoryAbelian : Abelian (C ‚•§ D) :=
  let _ : HasKernels (C ‚•§ D) := inferInstance
  let _ : HasCokernels (C ‚•§ D) := inferInstance
  Abelian.ofCoimageImageComparisonIsIso
#align category_theory.abelian.functor_category_abelian CategoryTheory.Abelian.functorCategoryAbelian

end

--porting note: the following section should be unnecessary because there are no longer
--any universe restrictions for `functorCategoryAbelian`
--
--section
--
--universe u
--
--variable {C : Type u} [SmallCategory C]
--
--variable {D : Type (u + 1)} [LargeCategory D] [Abelian D]
--
--/-- A variant with specialized universes for a common case. -/
--noncomputable instance functorCategoryAbelian' : Abelian (C ‚•§ D) :=
--  Abelian.functorCategoryAbelian.{u, u + 1, u, u}
--#align category_theory.abelian.functor_category_abelian' CategoryTheory.Abelian.functorCategoryAbelian'
--
--end

end Abelian

end CategoryTheory
