import Mathlib.CategoryTheory.Localization.Predicate
import Mathlib.CategoryTheory.CatCommSq

namespace CategoryTheory

open Localization Category

section

variable {C‚ÇÅ C‚ÇÇ D‚ÇÅ D‚ÇÇ : Type _} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category D‚ÇÅ] [Category D‚ÇÇ]
  (W‚ÇÅ : MorphismProperty C‚ÇÅ) (W‚ÇÇ : MorphismProperty C‚ÇÇ)

/-- If `W‚ÇÅ : MorphismProperty C‚ÇÅ` and `W‚ÇÇ : MorphismProperty C‚ÇÇ`, a `LocalizorMorphism W‚ÇÅ W‚ÇÇ`
is the datum of a functor `C‚ÇÅ ‚•§ C‚ÇÇ` which sends morphisms in `W‚ÇÅ` to morphisms in `W‚ÇÇ` -/
structure LocalizorMorphism where
  /-- a functor between the two categories -/
  functor : C‚ÇÅ ‚•§ C‚ÇÇ
  /-- the functor is compatible with the `MorphismProperty` -/
  map : W‚ÇÅ ‚äÜ W‚ÇÇ.inverseImage functor

namespace LocalizorMorphism

variable {W‚ÇÅ W‚ÇÇ} (Œ¶ : LocalizorMorphism W‚ÇÅ W‚ÇÇ) (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) [L‚ÇÅ.IsLocalization W‚ÇÅ]
  (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) [L‚ÇÇ.IsLocalization W‚ÇÇ]

lemma inverts : W‚ÇÅ.IsInvertedBy (Œ¶.functor ‚ãô L‚ÇÇ) :=
  fun _ _ _ hf => Localization.inverts L‚ÇÇ W‚ÇÇ _ (Œ¶.map _ hf)

/-- When `Œ¶ : LocalizorMorphism W‚ÇÅ W‚ÇÇ` and that `L‚ÇÅ` and `L‚ÇÇ` are localization functors
for `W‚ÇÅ` and `W‚ÇÇ`, then `Œ¶.localizedFunctor L‚ÇÅ L‚ÇÇ` is the induced functor on the
localized categories. --/
noncomputable def localizedFunctor : D‚ÇÅ ‚•§ D‚ÇÇ :=
  lift (Œ¶.functor ‚ãô L‚ÇÇ) (Œ¶.inverts _) L‚ÇÅ

/-- The 2-commutative square expressing that `Œ¶.localizedFunctor L‚ÇÅ L‚ÇÇ` lifts the
functor `Œ¶.functor`  -/
noncomputable instance catCommSq : CatCommSq L‚ÇÅ Œ¶.functor L‚ÇÇ (Œ¶.localizedFunctor L‚ÇÅ L‚ÇÇ) :=
  CatCommSq.mk ((Localization.fac _ _ _).symm)

noncomputable instance : Lifting L‚ÇÅ W‚ÇÅ (Œ¶.functor ‚ãô L‚ÇÇ) (Œ¶.localizedFunctor L‚ÇÅ L‚ÇÇ) :=
  ‚ü®Iso.symm (CatCommSq.iso _ _ _ _)‚ü©

section

variable {L‚ÇÅ L‚ÇÇ} {D‚ÇÅ' D‚ÇÇ' : Type _} [Category D‚ÇÅ'] [Category D‚ÇÇ'] {L‚ÇÅ' : C‚ÇÅ ‚•§ D‚ÇÅ'} {L‚ÇÇ' : C‚ÇÇ ‚•§ D‚ÇÇ'}
  {G : D‚ÇÅ ‚•§ D‚ÇÇ} {G' : D‚ÇÅ' ‚•§ D‚ÇÇ'} [L‚ÇÅ'.IsLocalization W‚ÇÅ] [L‚ÇÇ'.IsLocalization W‚ÇÇ]
  (c : CatCommSq L‚ÇÅ Œ¶.functor L‚ÇÇ G) (c' : CatCommSq L‚ÇÅ' Œ¶.functor L‚ÇÇ' G')

/-- If a localizor morphism induces an equivalence on some choice of localized categories,
it will be so for any choice of localized categoriees. -/
noncomputable def isEquivalence_imp [IsEquivalence G] :
  IsEquivalence G' := by
    let E‚ÇÅ := Localization.uniq L‚ÇÅ L‚ÇÅ' W‚ÇÅ
    let E‚ÇÇ := Localization.uniq L‚ÇÇ L‚ÇÇ' W‚ÇÇ
    letI : Lifting L‚ÇÅ W‚ÇÅ (Œ¶.functor ‚ãô L‚ÇÇ') (G ‚ãô E‚ÇÇ.functor) :=
      Lifting.mk ((Functor.associator _ _ _).symm ‚â™‚â´ isoWhiskerRight (Iso.symm c.iso) _ ‚â™‚â´
        Functor.associator _ _ _ ‚â™‚â´ isoWhiskerLeft _ (compUniqFunctor L‚ÇÇ L‚ÇÇ' W‚ÇÇ))
    letI : Lifting L‚ÇÅ W‚ÇÅ (L‚ÇÅ' ‚ãô G') (E‚ÇÅ.functor ‚ãô G') :=
      Lifting.mk ((Functor.associator _ _ _).symm ‚â™‚â´
        isoWhiskerRight (compUniqFunctor L‚ÇÅ L‚ÇÅ' W‚ÇÅ) _)
    have œÜ : CatCommSq E‚ÇÅ.functor G E‚ÇÇ.functor G' :=
      CatCommSq.mk (liftNatIso L‚ÇÅ W‚ÇÅ (Œ¶.functor ‚ãô L‚ÇÇ') (L‚ÇÅ' ‚ãô G') _ _ c'.iso)
    exact IsEquivalence.cancelCompLeft E‚ÇÅ.functor G' inferInstance
      (IsEquivalence.ofIso œÜ.iso inferInstance)

lemma nonempty_isEquivalence_iff : Nonempty (IsEquivalence G) ‚Üî Nonempty (IsEquivalence G') := by
  constructor
  . rintro ‚ü®e‚ü©
    exact ‚ü®Œ¶.isEquivalence_imp c c'‚ü©
  . rintro ‚ü®e'‚ü©
    exact ‚ü®Œ¶.isEquivalence_imp c' c‚ü©

/-- condition that `LocalizorMorphism` induces an equivalence of localized categories -/
class IsLocalizedEquivalence : Prop :=
  /-- the induced functor on the constructed localized categories is an equivalence -/
  nonempty_isEquivalence : Nonempty (IsEquivalence (Œ¶.localizedFunctor W‚ÇÅ.Q W‚ÇÇ.Q))

lemma IsLocalizedEquivalence.mk' (c : CatCommSq L‚ÇÅ Œ¶.functor L‚ÇÇ G) [IsEquivalence G] :
  Œ¶.IsLocalizedEquivalence := by
    constructor
    rw [Œ¶.nonempty_isEquivalence_iff (Œ¶.catCommSq W‚ÇÅ.Q W‚ÇÇ.Q) c]
    exact ‚ü®inferInstance‚ü©

/-- If a `LocalizorMorphism` is a localized equivalence, then any compatible functor
on the localized categories is an equivalence. -/
noncomputable def isEquivalence [h : Œ¶.IsLocalizedEquivalence] (c : CatCommSq L‚ÇÅ Œ¶.functor L‚ÇÇ G) :
    IsEquivalence G := by
  apply Nonempty.some
  rw [Œ¶.nonempty_isEquivalence_iff c (Œ¶.catCommSq W‚ÇÅ.Q W‚ÇÇ.Q)]
  exact h.nonempty_isEquivalence

variable (L‚ÇÅ L‚ÇÇ)

/-- If a `LocalizorMorphism` is a localized equivalence, then the induced functor on
the localized categories is an equivalence -/
noncomputable def localizedFunctor_isEquivalence [Œ¶.IsLocalizedEquivalence] :
    IsEquivalence ((Œ¶.localizedFunctor L‚ÇÅ L‚ÇÇ)) :=
  Œ¶.isEquivalence (Œ¶.catCommSq L‚ÇÅ L‚ÇÇ)

end

end LocalizorMorphism

end

namespace Localization

variable {C‚ÇÅ C‚ÇÇ D‚ÇÅ D‚ÇÇ : Type _} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category D‚ÇÅ] [Category D‚ÇÇ]
  (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (W‚ÇÅ : MorphismProperty C‚ÇÅ) [L‚ÇÅ.IsLocalization W‚ÇÅ]
  (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (W‚ÇÇ : MorphismProperty C‚ÇÇ) [L‚ÇÇ.IsLocalization W‚ÇÇ]
  (G : C‚ÇÅ ‚•§ D‚ÇÇ) (G' : D‚ÇÅ ‚•§ D‚ÇÇ) [Lifting L‚ÇÅ W‚ÇÅ G G']
  (F : C‚ÇÇ ‚•§ D‚ÇÅ) (F' : D‚ÇÇ ‚•§ D‚ÇÅ) [Lifting L‚ÇÇ W‚ÇÇ F F']
  (Œ± : G ‚ãô F' ‚âÖ L‚ÇÅ) (Œ≤ : F ‚ãô G' ‚âÖ L‚ÇÇ)

/-- basic constructor of an equivalence between localized categories -/
noncomputable def equivalence : D‚ÇÅ ‚âå D‚ÇÇ :=
  Equivalence.mk G' F' (liftNatIso L‚ÇÅ W‚ÇÅ L‚ÇÅ (G ‚ãô F') (ùü≠ D‚ÇÅ) (G' ‚ãô F') Œ±.symm)
    (liftNatIso L‚ÇÇ W‚ÇÇ (F ‚ãô G') L‚ÇÇ (F' ‚ãô G') (ùü≠ D‚ÇÇ) Œ≤)

@[simp]
lemma equivalence_counit_app (X : C‚ÇÇ) :
    (equivalence L‚ÇÅ W‚ÇÅ L‚ÇÇ W‚ÇÇ G G' F F' Œ± Œ≤).counitIso.app (L‚ÇÇ.obj X) =
      (Lifting.iso L‚ÇÇ W‚ÇÇ (F ‚ãô G') (F' ‚ãô G')).app X ‚â™‚â´ Œ≤.app X := by
  ext
  dsimp [equivalence, Equivalence.mk]
  rw [liftNatTrans_app]
  dsimp [Lifting.iso]
  rw [comp_id]

end Localization

end CategoryTheory
