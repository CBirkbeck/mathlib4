/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Localization.Opposite

/-!
# Calculus of fractions

Following the definitions by [Gabriel and Zisman][gabriel-zisman-1967],
given a morphism property `W : MorphismProperty C` on a category `C`,
we introduce the class `W.HasLeftCalculusOfFractions`. The main
result is that if `L : C ‚•§ D` is a localization functor for `W`,
then for any morphism `L.obj X ‚ü∂ L.obj Y` in `D`, there exists an auxiliary
object `Y' : C` and morphisms `g : X ‚ü∂ Y'` and `s : Y ‚ü∂ Y'`, with `W s`, such
that the given morphism is a sort of fraction `g / s`, or more precisely of
the form `L.map g ‚â´ (Localization.isoOfHom L W s hs).inv`. This is stated
as `MorphismProperty.HasLeftCalculusOfFractions.fac`. Similarly as for
the localization of rings, we have lemmas which give necessary and sufficient
conditions for the equality of two fractions.

In order to obtain these results, we construct a candidate for the
localized category in which the morphisms are defined as equivalence classes
of fractions.

## References

* [P. Gabriel, M. Zisman, *Calculus of fractions and homotopy theory*][gabriel-zisman-1967]

-/

namespace CategoryTheory

namespace Functor

lemma congr_map_conjugate {C D : Type _} [Category C] [Category D] {F‚ÇÅ F‚ÇÇ : C ‚•§ D}
    (h : F‚ÇÅ = F‚ÇÇ) {X Y : C} (f : X ‚ü∂ Y) :
    F‚ÇÅ.map f = eqToHom (by congr) ‚â´ F‚ÇÇ.map f ‚â´ eqToHom (by symm; congr) := by
  subst h
  simp

end Functor

namespace MorphismProperty

variable {C D : Type _} [Category C] [Category D]

structure LeftFraction (W : MorphismProperty C) (X Y : C) where
  {Y' : C}
  f : X ‚ü∂ Y'
  s : Y ‚ü∂ Y'
  hs : W s

namespace LeftFraction

variable (W : MorphismProperty C)

variable {X Y : C}

@[simps]
def mkOfHom (f : X ‚ü∂ Y) [W.ContainsIdentities] :
  W.LeftFraction X Y := mk f (ùüô Y) (W.id_mem Y)

@[simps]
def mkOfInv (s : Y ‚ü∂ X) (hs : W s) :
  W.LeftFraction X Y := mk (ùüô X) s hs

variable {W}

noncomputable def map (œÜ : W.LeftFraction X Y) (L : C ‚•§ D) [L.IsLocalization W] :
    L.obj X ‚ü∂ L.obj Y :=
  L.map œÜ.f ‚â´ (Localization.isoOfHom L W œÜ.s œÜ.hs).inv

lemma map_eq (œÜ : W.LeftFraction X Y) (L : C ‚•§ D) [L.IsLocalization W] :
    œÜ.map L = L.map œÜ.f ‚â´ (Localization.isoOfHom L W œÜ.s œÜ.hs).inv := rfl

variable (W)

lemma map_mkOfHom (f : X ‚ü∂ Y) (L : C ‚•§ D) [L.IsLocalization W] [W.ContainsIdentities] :
    (mkOfHom W f).map L = L.map f := by
  simp [map_eq]

@[simp]
lemma map_mkOfInv (s : Y ‚ü∂ X) (hs : W s) (L : C ‚•§ D) [L.IsLocalization W] :
    (mkOfInv W s hs).map L = (Localization.isoOfHom L W s hs).inv := by
  simp [map_eq]

end LeftFraction

structure RightFraction (W : MorphismProperty C) (X Y : C) where
  {X' : C}
  s : X' ‚ü∂ X
  hs : W s
  f : X' ‚ü∂ Y

namespace RightFraction

variable (W : MorphismProperty C)

variable {X Y : C}

@[simps]
def mkOfHom (f : X ‚ü∂ Y) [W.ContainsIdentities] :
  W.RightFraction X Y := mk (ùüô X) (W.id_mem X) f

@[simps]
def mkOfInv (s : Y ‚ü∂ X) (hs : W s) :
  W.RightFraction X Y := mk s hs (ùüô Y)

variable {W}

noncomputable def map (œÜ : W.RightFraction X Y) (L : C ‚•§ D) [L.IsLocalization W] :
    L.obj X ‚ü∂ L.obj Y :=
  (Localization.isoOfHom L W œÜ.s œÜ.hs).inv ‚â´ L.map œÜ.f

lemma map_eq (œÜ : W.RightFraction X Y) (L : C ‚•§ D) [L.IsLocalization W] :
    œÜ.map L = (Localization.isoOfHom L W œÜ.s œÜ.hs).inv ‚â´ L.map œÜ.f := rfl

variable (W)

lemma map_mkOfHom (f : X ‚ü∂ Y) (L : C ‚•§ D) [L.IsLocalization W] [W.ContainsIdentities] :
    (mkOfHom W f).map L = L.map f := by
  simp [map_eq, Localization.isoOfHom_id_inv L W X]

@[simp]
lemma map_mkOfInv (s : Y ‚ü∂ X) (hs : W s) (L : C ‚•§ D) [L.IsLocalization W] :
    (mkOfInv W s hs).map L = (Localization.isoOfHom L W s hs).inv := by
  simp [map_eq]

end RightFraction

variable (L : C ‚•§ D) (W : MorphismProperty C)

class HasLeftCalculusOfFractions' extends W.IsMultiplicative : Prop where
  exists_leftFraction ‚¶ÉX Y : C‚¶Ñ (œÜ : W.RightFraction X Y) :
    ‚àÉ (œà : W.LeftFraction X Y), œÜ.f ‚â´ œà.s = œÜ.s ‚â´ œà.f
  ext : ‚àÄ ‚¶ÉX' X Y : C‚¶Ñ (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (s : X' ‚ü∂ X) (_ : W s)
    (_ : s ‚â´ f‚ÇÅ = s ‚â´ f‚ÇÇ), ‚àÉ (Y' : C) (t : Y ‚ü∂ Y') (_ : W t), f‚ÇÅ ‚â´ t = f‚ÇÇ ‚â´ t

class HasRightCalculusOfFractions' extends W.IsMultiplicative : Prop :=
  exists_rightFraction ‚¶ÉX Y : C‚¶Ñ (œÜ : W.LeftFraction X Y) :
    ‚àÉ (œà : W.RightFraction X Y), œà.s ‚â´ œÜ.f = œà.f ‚â´ œÜ.s
  ext : ‚àÄ ‚¶ÉX Y Y' : C‚¶Ñ (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (s : Y ‚ü∂ Y') (_ : W s)
    (_ : f‚ÇÅ ‚â´ s = f‚ÇÇ ‚â´ s), ‚àÉ (X' : C) (t : X' ‚ü∂ X) (_ : W t), t ‚â´ f‚ÇÅ = t ‚â´ f‚ÇÇ

variable {W}

noncomputable def RightFraction.leftFraction [W.HasLeftCalculusOfFractions'] {X Y : C}
    (œÜ : W.RightFraction X Y) : W.LeftFraction X Y :=
  (HasLeftCalculusOfFractions'.exists_leftFraction œÜ).choose

@[reassoc]
lemma RightFraction.leftFraction_fac [W.HasLeftCalculusOfFractions'] {X Y : C}
    (œÜ : W.RightFraction X Y) : œÜ.f ‚â´ œÜ.leftFraction.s = œÜ.s ‚â´ œÜ.leftFraction.f :=
  (HasLeftCalculusOfFractions'.exists_leftFraction œÜ).choose_spec

noncomputable def LeftFraction.rightFraction [W.HasRightCalculusOfFractions'] {X Y : C}
    (œÜ : W.LeftFraction X Y) : W.RightFraction X Y :=
  (HasRightCalculusOfFractions'.exists_rightFraction œÜ).choose

@[reassoc]
lemma LeftFraction.rightFraction_fac [W.HasRightCalculusOfFractions'] {X Y : C}
    (œÜ : W.LeftFraction X Y) : œÜ.rightFraction.s ‚â´ œÜ.f = œÜ.rightFraction.f ‚â´ œÜ.s :=
  (HasRightCalculusOfFractions'.exists_rightFraction œÜ).choose_spec


def LeftFractionRel ‚¶ÉX Y : C‚¶Ñ (z‚ÇÅ z‚ÇÇ : W.LeftFraction X Y) : Prop :=
  ‚àÉ (Z : C)  (t‚ÇÅ : z‚ÇÅ.Y' ‚ü∂ Z) (t‚ÇÇ : z‚ÇÇ.Y' ‚ü∂ Z) (_ : z‚ÇÅ.s ‚â´ t‚ÇÅ = z‚ÇÇ.s ‚â´ t‚ÇÇ)
    (_ : z‚ÇÅ.f ‚â´ t‚ÇÅ = z‚ÇÇ.f ‚â´ t‚ÇÇ), W (z‚ÇÅ.s ‚â´ t‚ÇÅ)

namespace LeftFractionRel

lemma refl {X Y : C} (z : W.LeftFraction X Y) : LeftFractionRel z z :=
  ‚ü®z.Y', ùüô _, ùüô _, rfl, rfl, by simpa only [Category.comp_id] using z.hs‚ü©

lemma symm {X Y : C} {z‚ÇÅ z‚ÇÇ : W.LeftFraction X Y} (h : LeftFractionRel z‚ÇÅ z‚ÇÇ) :
    LeftFractionRel z‚ÇÇ z‚ÇÅ := by
  obtain ‚ü®Z, t‚ÇÅ, t‚ÇÇ, hst, hft, ht‚ü© := h
  exact ‚ü®Z, t‚ÇÇ, t‚ÇÅ, hst.symm, hft.symm, by simpa only [‚Üê hst] using ht‚ü©

lemma trans {X Y : C} {z‚ÇÅ z‚ÇÇ z‚ÇÉ : W.LeftFraction X Y}
    (h‚ÇÅ‚ÇÇ : LeftFractionRel z‚ÇÅ z‚ÇÇ) (h‚ÇÇ‚ÇÉ : LeftFractionRel z‚ÇÇ z‚ÇÉ)
    [HasLeftCalculusOfFractions' W] :
    LeftFractionRel z‚ÇÅ z‚ÇÉ := by
  obtain ‚ü®Z‚ÇÑ, t‚ÇÅ, t‚ÇÇ, hst, hft, ht‚ü© := h‚ÇÅ‚ÇÇ
  obtain ‚ü®Z‚ÇÖ, u‚ÇÇ, u‚ÇÉ, hsu, hfu, hu‚ü© := h‚ÇÇ‚ÇÉ
  obtain ‚ü®‚ü®v‚ÇÑ, v‚ÇÖ, hv‚ÇÖ‚ü©, fac‚ü© := HasLeftCalculusOfFractions'.exists_leftFraction
    (RightFraction.mk (z‚ÇÅ.s ‚â´ t‚ÇÅ) ht (z‚ÇÉ.s ‚â´ u‚ÇÉ))
  simp only [Category.assoc] at fac
  have eq : z‚ÇÇ.s ‚â´ u‚ÇÇ ‚â´ v‚ÇÖ  = z‚ÇÇ.s ‚â´ t‚ÇÇ ‚â´ v‚ÇÑ := by
    simpa only [‚Üê reassoc_of% hsu, reassoc_of% hst] using fac
  obtain ‚ü®Z‚Çá, w, hw, fac'‚ü© := HasLeftCalculusOfFractions'.ext _ _ _ z‚ÇÇ.hs eq
  simp only [Category.assoc] at fac'
  refine' ‚ü®Z‚Çá, t‚ÇÅ ‚â´ v‚ÇÑ ‚â´ w, u‚ÇÉ ‚â´ v‚ÇÖ ‚â´ w, _, _, _‚ü©
  ¬∑ rw [reassoc_of% fac]
  ¬∑ rw [reassoc_of% hft, ‚Üê fac', reassoc_of% hfu]
  ¬∑ rw [‚Üê reassoc_of% fac, ‚Üê reassoc_of% hsu, ‚Üê Category.assoc]
    exact W.comp_mem _ _ hu (W.comp_mem _ _ hv‚ÇÖ hw)

end LeftFractionRel

structure HasLeftCalculusOfFractions.ToSq {X' X Y : C} (s : X ‚ü∂ X') (hs : W s) (u : X ‚ü∂ Y) where
  obj : C
  g : X' ‚ü∂ obj
  s' : Y ‚ü∂ obj
  hs' : W s'
  fac : u ‚â´ s' = s ‚â´ g

structure HasRightCalculusOfFractions.ToSq {X Y Y' : C} (s : Y' ‚ü∂ Y) (hs : W s) (u : X ‚ü∂ Y) where
  obj : C
  g : obj ‚ü∂ Y'
  s' : obj ‚ü∂ X
  hs' : W s'
  fac : s' ‚â´ u = g ‚â´ s

attribute [reassoc] HasLeftCalculusOfFractions.ToSq.fac
  HasRightCalculusOfFractions.ToSq.fac

variable (W)

class HasLeftCalculusOfFractions extends W.IsMultiplicative : Prop :=
  nonempty_toSq : ‚àÄ ‚¶ÉX' X Y : C‚¶Ñ (s : X ‚ü∂ X') (hs : W s) (u : X ‚ü∂ Y),
    Nonempty (HasLeftCalculusOfFractions.ToSq s hs u)
  ext : ‚àÄ ‚¶ÉX' X Y : C‚¶Ñ (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (s : X' ‚ü∂ X) (_ : W s)
    (_ : s ‚â´ f‚ÇÅ = s ‚â´ f‚ÇÇ), ‚àÉ (Y' : C) (t : Y ‚ü∂ Y') (_ : W t), f‚ÇÅ ‚â´ t = f‚ÇÇ ‚â´ t

class HasRightCalculusOfFractions extends W.IsMultiplicative : Prop :=
  nonempty_toSq : ‚àÄ ‚¶ÉX Y Y' : C‚¶Ñ (s : Y' ‚ü∂ Y) (hs : W s) (u : X ‚ü∂ Y),
    Nonempty (HasRightCalculusOfFractions.ToSq s hs u)
  ext : ‚àÄ ‚¶ÉX Y Y' : C‚¶Ñ (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (s : Y ‚ü∂ Y') (_ : W s)
    (_ : f‚ÇÅ ‚â´ s = f‚ÇÇ ‚â´ s), ‚àÉ (X' : C) (t : X' ‚ü∂ X) (_ : W t), t ‚â´ f‚ÇÅ = t ‚â´ f‚ÇÇ

variable {W}

noncomputable def HasLeftCalculusOfFractions.toSq {X' X Y : C} (s : X ‚ü∂ X') (hs : W s) (u : X ‚ü∂ Y)
    [HasLeftCalculusOfFractions W] : HasLeftCalculusOfFractions.ToSq s hs u :=
  (HasLeftCalculusOfFractions.nonempty_toSq s hs u).some

noncomputable def HasRightCalculusOfFractions.toSq {X Y Y' : C} (s : Y' ‚ü∂ Y) (hs : W s) (u : X ‚ü∂ Y)
    [HasRightCalculusOfFractions W] : HasRightCalculusOfFractions.ToSq s hs u :=
  (HasRightCalculusOfFractions.nonempty_toSq s hs u).some

variable (W)

lemma HasLeftCalculusOfFractions.op [HasLeftCalculusOfFractions W] :
    W.op.HasRightCalculusOfFractions where
  nonempty_toSq := fun _ _ _ s hs u => ‚ü®by
    let h := HasLeftCalculusOfFractions.toSq s.unop hs u.unop
    exact ‚ü®_, h.g.op, h.s'.op, h.hs', Quiver.Hom.unop_inj h.fac‚ü©‚ü©
  ext := fun _ _ _ f‚ÇÅ f‚ÇÇ s hs fac => by
    obtain ‚ü®X', t, ht, eq‚ü© := HasLeftCalculusOfFractions.ext f‚ÇÅ.unop f‚ÇÇ.unop s.unop hs
      (Quiver.Hom.op_inj fac)
    exact ‚ü®_, t.op, ht, Quiver.Hom.unop_inj eq‚ü©

lemma HasLeftCalculusOfFractions.unop (W : MorphismProperty C·µí·µñ) [HasLeftCalculusOfFractions W] :
    W.unop.HasRightCalculusOfFractions := by
  have : W.unop.IsMultiplicative := IsMultiplicative.unop W
  exact {
    nonempty_toSq := fun _ _ _ s hs u => ‚ü®by
      let h := HasLeftCalculusOfFractions.toSq s.op hs u.op
      exact ‚ü®_, h.g.unop, h.s'.unop, h.hs', Quiver.Hom.op_inj h.fac‚ü©‚ü©
    ext := fun _ _ _ f‚ÇÅ f‚ÇÇ s hs fac => by
      obtain ‚ü®X', t, ht, eq‚ü© := HasLeftCalculusOfFractions.ext f‚ÇÅ.op f‚ÇÇ.op s.op hs
        (Quiver.Hom.unop_inj fac)
      exact ‚ü®_, t.unop, ht, Quiver.Hom.op_inj eq‚ü© }

lemma HasRightCalculusOfFractions.op [HasRightCalculusOfFractions W] :
    W.op.HasLeftCalculusOfFractions where
  nonempty_toSq := fun _ _ _ s hs u => ‚ü®by
    let h := HasRightCalculusOfFractions.toSq s.unop hs u.unop
    exact ‚ü®_, h.g.op, h.s'.op, h.hs', Quiver.Hom.unop_inj h.fac‚ü©‚ü©
  ext := fun _ _ _ f‚ÇÅ f‚ÇÇ s hs fac => by
    obtain ‚ü®X', t, ht, eq‚ü© := HasRightCalculusOfFractions.ext f‚ÇÅ.unop f‚ÇÇ.unop s.unop hs
      (Quiver.Hom.op_inj fac)
    exact ‚ü®_, t.op, ht, Quiver.Hom.unop_inj eq‚ü©

lemma HasRightCalculusOfFractions.unop (W : MorphismProperty C·µí·µñ) [HasRightCalculusOfFractions W] :
    W.unop.HasLeftCalculusOfFractions := by
  have : W.unop.IsMultiplicative := IsMultiplicative.unop W
  exact {
    nonempty_toSq := fun _ _ _ s hs u => ‚ü®by
      let h := HasRightCalculusOfFractions.toSq s.op hs u.op
      exact ‚ü®_, h.g.unop, h.s'.unop, h.hs', Quiver.Hom.op_inj h.fac‚ü©‚ü©
    ext := fun _ _ _ f‚ÇÅ f‚ÇÇ s hs fac => by
      obtain ‚ü®X', t, ht, eq‚ü© := HasRightCalculusOfFractions.ext f‚ÇÅ.op f‚ÇÇ.op s.op hs
        (Quiver.Hom.unop_inj fac)
      exact ‚ü®_, t.unop, ht, Quiver.Hom.op_inj eq‚ü© }

attribute [instance] HasLeftCalculusOfFractions.op HasRightCalculusOfFractions.op

namespace HasLeftCalculusOfFractions

structure Roof (X Y : C) :=
(Z : C)
(f : X ‚ü∂ Z)
(s : Y ‚ü∂ Z)
(hs : W s)

@[simps]
def Roof.ofHom [ContainsIdentities W] {X Y : C} (f : X ‚ü∂ Y) : Roof W X Y :=
  ‚ü®Y, f, ùüô Y, W.id_mem Y‚ü©

variable {W}

@[simps]
def Roof.inv {X Y : C} (s : X ‚ü∂ Y) (hs : W s) : Roof W Y X := ‚ü®Y, ùüô Y, s, hs‚ü©

def roofRel ‚¶ÉX Y : C‚¶Ñ (z‚ÇÅ z‚ÇÇ : Roof W X Y) : Prop :=
  ‚àÉ (Z‚ÇÉ : C)  (t‚ÇÅ : z‚ÇÅ.Z ‚ü∂ Z‚ÇÉ) (t‚ÇÇ : z‚ÇÇ.Z ‚ü∂ Z‚ÇÉ) (_ : z‚ÇÅ.s ‚â´ t‚ÇÅ = z‚ÇÇ.s ‚â´ t‚ÇÇ)
    (_ : z‚ÇÅ.f ‚â´ t‚ÇÅ = z‚ÇÇ.f ‚â´ t‚ÇÇ), W (z‚ÇÅ.s ‚â´ t‚ÇÅ)

namespace roofRel

lemma refl {X Y : C} (z : Roof W X Y) : roofRel z z :=
  ‚ü®z.Z, ùüô _, ùüô _, rfl, rfl, by simpa only [Category.comp_id] using z.hs‚ü©

lemma symm {X Y : C} {z‚ÇÅ z‚ÇÇ : Roof W X Y} (h : roofRel z‚ÇÅ z‚ÇÇ) : roofRel z‚ÇÇ z‚ÇÅ := by
  obtain ‚ü®Z‚ÇÉ, t‚ÇÅ, t‚ÇÇ, hst, hft, ht‚ü© := h
  exact ‚ü®Z‚ÇÉ, t‚ÇÇ, t‚ÇÅ, hst.symm, hft.symm, by simpa only [‚Üê hst] using ht‚ü©

lemma trans {X Y : C} {z‚ÇÅ z‚ÇÇ z‚ÇÉ : Roof W X Y} (h‚ÇÅ‚ÇÇ : roofRel z‚ÇÅ z‚ÇÇ) (h‚ÇÇ‚ÇÉ : roofRel z‚ÇÇ z‚ÇÉ)
    [HasLeftCalculusOfFractions W] :
    roofRel z‚ÇÅ z‚ÇÉ := by
  obtain ‚ü®Z‚ÇÑ, t‚ÇÅ, t‚ÇÇ, hst, hft, ht‚ü© := h‚ÇÅ‚ÇÇ
  obtain ‚ü®Z‚ÇÖ, u‚ÇÇ, u‚ÇÉ, hsu, hfu, hu‚ü© := h‚ÇÇ‚ÇÉ
  obtain ‚ü®Z‚ÇÜ, v‚ÇÑ, v‚ÇÖ, hv‚ÇÖ, fac‚ü© := toSq (z‚ÇÅ.s ‚â´ t‚ÇÅ) ht (z‚ÇÉ.s ‚â´ u‚ÇÉ)
  simp only [Category.assoc] at fac
  have eq : z‚ÇÇ.s ‚â´ u‚ÇÇ ‚â´ v‚ÇÖ  = z‚ÇÇ.s ‚â´ t‚ÇÇ ‚â´ v‚ÇÑ := by
    simpa only [‚Üê reassoc_of% hsu, reassoc_of% hst] using fac
  obtain ‚ü®Z‚Çá, w, hw, fac'‚ü© := ext _ _ _ z‚ÇÇ.hs eq
  simp only [Category.assoc] at fac'
  refine' ‚ü®Z‚Çá, t‚ÇÅ ‚â´ v‚ÇÑ ‚â´ w, u‚ÇÉ ‚â´ v‚ÇÖ ‚â´ w, _, _, _‚ü©
  ¬∑ rw [reassoc_of% fac]
  ¬∑ rw [reassoc_of% hft, ‚Üê fac', reassoc_of% hfu]
  ¬∑ rw [‚Üê reassoc_of% fac, ‚Üê reassoc_of% hsu, ‚Üê Category.assoc]
    exact W.comp_mem _ _ hu (W.comp_mem _ _ hv‚ÇÖ hw)

end roofRel

variable [W.HasLeftCalculusOfFractions]

instance {X Y : C} : IsEquiv (Roof W X Y) (fun z‚ÇÅ z‚ÇÇ => roofRel z‚ÇÅ z‚ÇÇ) where
  refl := roofRel.refl
  symm := fun _ _ => roofRel.symm
  trans := fun _ _ _ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ => roofRel.trans h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ

namespace Roof

def comp‚ÇÄ {X Y Z : C} (z : Roof W X Y) (z' : Roof W Y Z)
    (sq : ToSq z.s z.hs z'.f) : Roof W X Z :=
  ‚ü®sq.obj, z.f ‚â´ sq.g, z'.s ‚â´ sq.s', W.comp_mem _ _ z'.hs sq.hs'‚ü©

lemma comp‚ÇÄ_rel {X Y Z : C} (z : Roof W X Y) (z' : Roof W Y Z)
    (sq sq' : ToSq z.s z.hs z'.f) : roofRel (z.comp‚ÇÄ z' sq) (z.comp‚ÇÄ z' sq') := by
  have H := toSq sq.s' sq.hs' sq'.s'
  have eq : z.s ‚â´ sq.g ‚â´ H.g = z.s ‚â´ sq'.g ‚â´ H.s' := by
    rw [‚Üê sq.fac_assoc, ‚Üê sq'.fac_assoc, H.fac]
  obtain ‚ü®Y, t, ht, fac‚ü© := ext _ _ _ z.hs eq
  simp only [Category.assoc] at fac
  refine' ‚ü®Y, H.g ‚â´ t, H.s' ‚â´ t, _, _, _‚ü©
  ¬∑ dsimp [comp‚ÇÄ]
    simp only [Category.assoc, H.fac_assoc]
  ¬∑ dsimp [comp‚ÇÄ]
    simp only [Category.assoc, ‚Üê fac]
  ¬∑ dsimp [comp‚ÇÄ]
    simp only [Category.assoc, ‚Üê H.fac_assoc]
    exact W.comp_mem _ _ z'.hs (W.comp_mem _ _ sq'.hs' (W.comp_mem _ _ H.hs' ht))

end Roof

variable (W)

def Hom (X Y : C) := Quot (fun (z‚ÇÅ z‚ÇÇ : Roof W X Y) => roofRel z‚ÇÅ z‚ÇÇ)

variable {W}

noncomputable def Roof.comp {X Y Z : C} (z : Roof W X Y) (z' : Roof W Y Z) :
    Hom W X Z :=
  Quot.mk _ (z.comp‚ÇÄ z' (toSq _ _ _ ))

lemma Roof.comp_eq {X Y Z : C} (z : Roof W X Y) (z' : Roof W Y Z)
    (sq : ToSq z.s z.hs z'.f) : z.comp z' = Quot.mk _ (z.comp‚ÇÄ z' sq) :=
  Quot.sound (Roof.comp‚ÇÄ_rel z z' _ _)

lemma Roof.ofHom_comp {X Y Z : C} (f : X ‚ü∂ Y) (g : Roof W Y Z) :
    Roof.comp (Roof.ofHom W f) g = Quot.mk _ ‚ü®g.Z, f ‚â´ g.f, g.s, g.hs‚ü© := by
  let sq : ToSq (ùüô Y) (W.id_mem Y) g.f :=
    ‚ü®_, g.f, ùüô _, W.id_mem _, by simp‚ü©
  rw [Roof.comp_eq (Roof.ofHom W f) g sq]
  dsimp [comp‚ÇÄ]
  congr
  simp

variable (W)

lemma Roof.ofHom_comp_ofHom {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    Roof.comp (Roof.ofHom W f) (Roof.ofHom W g) = Quot.mk _ (Roof.ofHom W (f ‚â´ g)) :=
  Roof.ofHom_comp _ _

variable {W}

noncomputable def Hom.comp {X Y Z : C} :
    Hom W X Y ‚Üí Hom W Y Z ‚Üí Hom W X Z := by
  refine' Quot.lift‚ÇÇ (fun z z' => Roof.comp z z') _ _
  ¬∑ rintro z‚ÇÅ‚ÇÇ z‚ÇÇ‚ÇÉ z‚ÇÇ‚ÇÉ' ‚ü®Y, t, t', hst, hft, ht‚ü©
    have sq := toSq z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs z‚ÇÇ‚ÇÉ.f
    have sq' := toSq z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs z‚ÇÇ‚ÇÉ'.f
    have H‚ÇÄ := toSq sq.s' sq.hs' t
    have H‚ÇÄ' := toSq sq'.s' sq'.hs' t'
    have H‚ÇÅ := toSq H‚ÇÄ.s' H‚ÇÄ.hs' H‚ÇÄ'.s'
    have eq : z‚ÇÅ‚ÇÇ.s ‚â´ sq.g ‚â´ H‚ÇÄ.g ‚â´ H‚ÇÅ.g = z‚ÇÅ‚ÇÇ.s ‚â´ sq'.g ‚â´ H‚ÇÄ'.g ‚â´ H‚ÇÅ.s' := by
      rw [‚Üê sq.fac_assoc, ‚Üê sq'.fac_assoc, ‚Üê H‚ÇÄ.fac_assoc, ‚Üê H‚ÇÄ'.fac_assoc,
        reassoc_of% hft, H‚ÇÅ.fac]
    obtain ‚ü®Z, u, hu, fac‚ü© := ext _ _ _ z‚ÇÅ‚ÇÇ.hs eq
    simp only [Category.assoc] at fac
    dsimp
    rw [Roof.comp_eq _ _ sq, Roof.comp_eq _ _ sq']
    apply Quot.sound
    refine' ‚ü®Z, H‚ÇÄ.g ‚â´ H‚ÇÅ.g ‚â´ u, H‚ÇÄ'.g ‚â´ H‚ÇÅ.s' ‚â´ u, _, _, _‚ü©
    ¬∑ simp only [Roof.comp‚ÇÄ, Category.assoc, ‚Üê H‚ÇÄ.fac_assoc, ‚Üê H‚ÇÄ'.fac_assoc,
        reassoc_of% hst, reassoc_of% H‚ÇÅ.fac]
    ¬∑ simp only [Roof.comp‚ÇÄ, Category.assoc, fac]
    ¬∑ simp only [Roof.comp‚ÇÄ, Category.assoc]
      rw [‚Üê H‚ÇÄ.fac_assoc, ‚Üê H‚ÇÅ.fac_assoc, ‚Üê Category.assoc]
      exact W.comp_mem _ _ ht
        (W.comp_mem _ _ H‚ÇÄ'.hs'
        (W.comp_mem _ _ H‚ÇÅ.hs' hu))
  ¬∑ rintro z‚ÇÅ‚ÇÇ z‚ÇÅ‚ÇÇ' z‚ÇÇ‚ÇÉ ‚ü®Y, t, t', hst, hft, ht‚ü©
    have sq := toSq z‚ÇÅ‚ÇÇ.s z‚ÇÅ‚ÇÇ.hs z‚ÇÇ‚ÇÉ.f
    have sq' := toSq z‚ÇÅ‚ÇÇ'.s z‚ÇÅ‚ÇÇ'.hs z‚ÇÇ‚ÇÉ.f
    have H := toSq (z‚ÇÅ‚ÇÇ.s ‚â´ t) ht (z‚ÇÇ‚ÇÉ.f ‚â´ sq.s')
    have H' := toSq (z‚ÇÅ‚ÇÇ'.s ‚â´ t') (show W _ by rw [‚Üê hst]; exact ht) (z‚ÇÇ‚ÇÉ.f ‚â´ sq'.s')
    let z : Roof W X Z := ‚ü®H.obj, z‚ÇÅ‚ÇÇ.f ‚â´ t ‚â´ H.g, z‚ÇÇ‚ÇÉ.s ‚â´ sq.s' ‚â´ H.s',
      W.comp_mem _ _ z‚ÇÇ‚ÇÉ.hs (W.comp_mem _ _ sq.hs' H.hs')‚ü©
    let z' : Roof W X Z := ‚ü®H'.obj, z‚ÇÅ‚ÇÇ'.f ‚â´ t' ‚â´ H'.g, z‚ÇÇ‚ÇÉ.s ‚â´ sq'.s' ‚â´ H'.s',
      W.comp_mem _ _ z‚ÇÇ‚ÇÉ.hs (W.comp_mem _ _ sq'.hs' H'.hs')‚ü©
    dsimp
    rw [Roof.comp_eq _ _ sq, Roof.comp_eq _ _ sq']
    apply Quot.sound
    refine' roofRel.trans _ (roofRel.trans (_ : roofRel z z') (symm _))
    ¬∑ have eq : z‚ÇÅ‚ÇÇ.s ‚â´ sq.g ‚â´ H.s' = z‚ÇÅ‚ÇÇ.s ‚â´ t ‚â´ H.g := by
        have h := H.fac
        simp only [Category.assoc] at h
        rw [‚Üê h, sq.fac_assoc]
      obtain ‚ü®Z, u, hu, fac‚ü© := ext _ _ _ z‚ÇÅ‚ÇÇ.hs eq
      simp only [Category.assoc] at fac
      refine' ‚ü®Z, H.s' ‚â´ u, u, _, _, _‚ü©
      ¬∑ simp only [Roof.comp‚ÇÄ, Category.assoc, Category.comp_id]
      ¬∑ simp only [Roof.comp‚ÇÄ, Category.assoc, Category.comp_id, fac]
      ¬∑ simp only [Roof.comp‚ÇÄ, Category.assoc]
        exact W.comp_mem _ _ z‚ÇÇ‚ÇÉ.hs
          (W.comp_mem _ _ sq.hs'
          (W.comp_mem _ _ H.hs' hu))
    ¬∑ have T := toSq (sq.s' ‚â´ H.s') (W.comp_mem _ _ sq.hs' H.hs') (sq'.s' ‚â´ H'.s')
      have Tfac := T.fac
      have fac := H.fac
      have fac' := H'.fac
      simp only [Category.assoc] at Tfac fac fac'
      have eq : z‚ÇÅ‚ÇÇ.s ‚â´ t ‚â´ H.g ‚â´ T.g = z‚ÇÅ‚ÇÇ.s ‚â´ t ‚â´ H'.g ‚â´ T.s' := by
        simp only [reassoc_of% hst, ‚Üê reassoc_of% fac', Tfac, reassoc_of% fac]
      obtain ‚ü®Z, u, hu, fac''‚ü© := ext _ _ _ z‚ÇÅ‚ÇÇ.hs eq
      simp only [Category.assoc] at fac''
      refine' ‚ü®Z, T.g ‚â´ u, T.s' ‚â´ u, _, _, _‚ü©
      ¬∑ simp only [Category.assoc, reassoc_of% Tfac]
      ¬∑ rw [Category.assoc, Category.assoc, Category.assoc, Category.assoc, fac'', reassoc_of% hft]
      ¬∑ simp only [Category.assoc, ‚Üê reassoc_of% Tfac]
        exact W.comp_mem _ _ z‚ÇÇ‚ÇÉ.hs
          (W.comp_mem _ _ sq'.hs'
          (W.comp_mem _ _ H'.hs'
          (W.comp_mem _ _ T.hs' hu)))
    ¬∑ have eq : z‚ÇÅ‚ÇÇ'.s ‚â´ sq'.g ‚â´ H'.s' = z‚ÇÅ‚ÇÇ'.s ‚â´ t' ‚â´ H'.g := by
        have h := H'.fac
        simp only [Category.assoc] at h
        rw [‚Üê h, sq'.fac_assoc]
      obtain ‚ü®Z, u, hu, fac‚ü© := ext _ _ _ z‚ÇÅ‚ÇÇ'.hs eq
      simp only [Category.assoc] at fac
      refine' ‚ü®Z, H'.s' ‚â´ u, u, _, _, _‚ü©
      ¬∑ simp only [Roof.comp‚ÇÄ, Category.assoc, Category.comp_id]
      ¬∑ simp only [Roof.comp‚ÇÄ, Category.assoc, Category.comp_id, fac]
      ¬∑ simp only [Roof.comp‚ÇÄ, Category.assoc]
        exact W.comp_mem _ _ z‚ÇÇ‚ÇÉ.hs
          (W.comp_mem _ _ sq'.hs'
          (W.comp_mem _ _ H'.hs' hu))

lemma Hom.comp_eq {X Y Z : C} (z : Roof W X Y) (z' : Roof W Y Z)
    (sq : ToSq z.s z.hs z'.f) :
      Hom.comp (Quot.mk _ z) (Quot.mk _ z') =
        Quot.mk _ (Roof.comp‚ÇÄ z z' sq) :=
  Roof.comp_eq _ _ _

-- the category `Localization W` that is constructed when `[HasLeftCalculusOfFractions W]` should
-- not be used: it is introduced only in order to prove the lemmas
-- `HasLeftCalculusOfFractions.fac` and `HasLeftCalculusOfFractions.map_eq_iff`
structure Localization (W : MorphismProperty C) :=
(obj : C)

namespace Localization

variable (W)

noncomputable instance : Category (Localization W) where
  Hom X Y := Hom W X.obj Y.obj
  id X := Quot.mk _ (Roof.ofHom _ (ùüô X.obj))
  comp f g := Hom.comp f g
  id_comp := by
    rintro ‚ü®X‚ü© ‚ü®Y‚ü© ‚ü®f‚ü©
    dsimp [Hom.comp]
    let sq : ToSq (ùüô X) (W.id_mem _) f.f :=
      ‚ü®f.Z, f.f, ùüô _, W.id_mem _, by simp‚ü©
    rw [Roof.comp_eq (Roof.ofHom _ (ùüô X)) f sq]
    dsimp [Roof.comp‚ÇÄ]
    congr <;> simp
  comp_id := by
    rintro ‚ü®X‚ü© ‚ü®Y‚ü© ‚ü®f‚ü©
    dsimp [Hom.comp]
    let sq : ToSq f.s f.hs (ùüô Y) :=
      ‚ü®f.Z, ùüô _, f.s, f.hs, by simp‚ü©
    rw [Roof.comp_eq f (Roof.ofHom _ (ùüô Y)) sq]
    dsimp [Roof.comp‚ÇÄ]
    congr <;> simp
  assoc := by
    rintro ‚ü®X‚ÇÅ‚ü© ‚ü®X‚ÇÇ‚ü© ‚ü®X‚ÇÉ‚ü© ‚ü®X‚ÇÑ‚ü© ‚ü®f‚ÇÅ‚ÇÇ : Roof W X‚ÇÅ X‚ÇÇ‚ü©
      ‚ü®f‚ÇÇ‚ÇÉ : Roof W X‚ÇÇ X‚ÇÉ‚ü© ‚ü®f‚ÇÉ‚ÇÑ : Roof W X‚ÇÉ X‚ÇÑ‚ü©
    have sq‚ÇÅ‚ÇÉ := toSq f‚ÇÅ‚ÇÇ.s f‚ÇÅ‚ÇÇ.hs f‚ÇÇ‚ÇÉ.f
    have sq‚ÇÇ‚ÇÑ := toSq f‚ÇÇ‚ÇÉ.s f‚ÇÇ‚ÇÉ.hs f‚ÇÉ‚ÇÑ.f
    have sq := toSq sq‚ÇÅ‚ÇÉ.s' sq‚ÇÅ‚ÇÉ.hs' sq‚ÇÇ‚ÇÑ.g
    change Hom.comp (Hom.comp _ _) _ = Hom.comp _ (Hom.comp _ _)
    rw [Hom.comp_eq f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ sq‚ÇÅ‚ÇÉ, Hom.comp_eq f‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÑ sq‚ÇÇ‚ÇÑ,
      Hom.comp_eq (Roof.comp‚ÇÄ f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ sq‚ÇÅ‚ÇÉ) f‚ÇÉ‚ÇÑ
      ‚ü®sq.obj, sq.g, sq‚ÇÇ‚ÇÑ.s' ‚â´ sq.s', W.comp_mem _ _ sq‚ÇÇ‚ÇÑ.hs' sq.hs', by
        simp only [Roof.comp‚ÇÄ, Category.assoc, sq‚ÇÇ‚ÇÑ.fac_assoc, sq.fac]‚ü©,
      Hom.comp_eq f‚ÇÅ‚ÇÇ (Roof.comp‚ÇÄ f‚ÇÇ‚ÇÉ f‚ÇÉ‚ÇÑ sq‚ÇÇ‚ÇÑ)
      ‚ü®sq.obj, sq‚ÇÅ‚ÇÉ.g ‚â´ sq.g, sq.s', sq.hs', by
        simp only [Roof.comp‚ÇÄ, Category.assoc, sq.fac, sq‚ÇÅ‚ÇÉ.fac_assoc]‚ü©]
    dsimp [Roof.comp‚ÇÄ]
    simp only [Category.assoc]

variable {W}

lemma comp_eq {X Y Z : Localization W} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  f ‚â´ g = Hom.comp f g := rfl

lemma id_eq (X : Localization W) :
  ùüô X = Quot.mk _ (Roof.ofHom _ (ùüô X.obj)) := rfl

def homOfRoof {X Y : C} (z : Roof W X Y) : (‚ü®X‚ü© : Localization W) ‚ü∂ ‚ü®Y‚ü© :=
  Quot.mk _ z

variable (W)

def Q : C ‚•§ Localization W where
  obj X := ‚ü®X‚ü©
  map f := homOfRoof (Roof.ofHom _ f)
  map_id _ := rfl
  map_comp f g := by
    symm
    apply Roof.ofHom_comp_ofHom W f g

variable {W}

noncomputable def Qinv {X Y : C} (s : X ‚ü∂ Y) (hs : W s) : (Q W).obj Y ‚ü∂ (Q W).obj X :=
  homOfRoof (Roof.inv s hs)

@[reassoc]
lemma Qinv_comp {X Y : C} (s : X ‚ü∂ Y) (hs : W s) : Qinv s hs ‚â´ (Q W).map s = ùüô _ := by
  dsimp only [Qinv, comp_eq, id_eq]
  erw [Hom.comp_eq (Roof.inv s hs) (Roof.ofHom W s)
    ‚ü®Y, ùüô Y, ùüô Y, W.id_mem _, rfl‚ü©]
  simp [Roof.comp‚ÇÄ, Roof.ofHom]
  rfl

@[reassoc]
lemma comp_Qinv {X Y : C} (s : X ‚ü∂ Y) (hs : W s) : (Q W).map s ‚â´ Qinv s hs = ùüô _ := by
  dsimp only [Qinv, comp_eq, id_eq]
  erw [Hom.comp_eq (Roof.ofHom W s) (Roof.inv s hs)
    ‚ü®Y, ùüô Y, ùüô Y, W.id_mem _, rfl‚ü©]
  dsimp [Roof.comp‚ÇÄ]
  apply Quot.sound
  refine' ‚ü®Y, ùüô Y, s, by simp, _ , by simpa using hs‚ü©
  ¬∑ simp only [Category.comp_id, Roof.ofHom_Z, Roof.ofHom_f]
    erw [Category.id_comp]

noncomputable def iso {X Y : C} (s : X ‚ü∂ Y) (hs : W s) : (Q W).obj X ‚âÖ (Q W).obj Y where
  hom := (Q W).map s
  inv := Qinv s hs
  hom_inv_id := comp_Qinv s hs
  inv_hom_id := Qinv_comp s hs

lemma isIso_Qmap {X Y : C} (s : X ‚ü∂ Y) (hs : W s) : IsIso ((Q W).map s) :=
  IsIso.of_iso (iso s hs)

instance {X Y : C} (s : X ‚ü∂ Y) (hs : W s) : IsIso (Qinv s hs) :=
  IsIso.of_iso (iso s hs).symm

lemma facOfRoof {X Y : C} (z : Roof W X Y) :
    homOfRoof z = (Q W).map z.f ‚â´ Qinv z.s z.hs := by
  dsimp only [Qinv, comp_eq, homOfRoof, Q]
  erw [Hom.comp_eq (Roof.ofHom W z.f) (Roof.inv z.s z.hs)
    ‚ü®_, ùüô _, ùüô _, W.id_mem _, rfl‚ü©]
  dsimp [Roof.comp‚ÇÄ]
  apply Quot.sound
  exact ‚ü®z.Z, ùüô _, ùüô _, by simp, by simp, by simpa using z.hs‚ü©

variable (W)

lemma inverts : W.IsInvertedBy (Q W) := fun _ _ s hs => isIso_Qmap s hs

variable {E : Type _} [Category E]
variable {W}

noncomputable def lift (F : C ‚•§ E) (hF : W.IsInvertedBy F) : Localization W ‚•§ E := by
  haveI : ‚àÄ {X Y : C} (z : Roof W X Y), IsIso (F.map z.s) := fun z => hF z.s z.hs
  exact
  { obj := fun ‚ü®X‚ü© => F.obj X
    map := by
      rintro ‚ü®X‚ü© ‚ü®Y‚ü©
      refine' Quot.lift (fun z => F.map z.f ‚â´ inv (F.map z.s))
        (fun z z' ‚ü®Z‚ÇÉ, t‚ÇÅ, t‚ÇÇ, hs, hf, hst‚ü© => by
          dsimp
          haveI : IsIso (F.map (z.s ‚â´ t‚ÇÅ)) := hF _ hst
          haveI : IsIso (F.map (z'.s ‚â´ t‚ÇÇ)) := by
            rw [‚Üê hs]
            infer_instance
          have eq‚ÇÅ : inv (F.map z.s) = F.map t‚ÇÅ ‚â´ inv (F.map (z.s ‚â´ t‚ÇÅ)) := by
            rw [‚Üê cancel_mono (F.map (z.s ‚â´ t‚ÇÅ)), ‚Üê cancel_epi (F.map z.s),
              Category.assoc, IsIso.hom_inv_id_assoc, IsIso.inv_hom_id, Category.comp_id,
              F.map_comp]
          have eq‚ÇÇ : inv (F.map z'.s) = F.map t‚ÇÇ ‚â´ inv (F.map (z'.s ‚â´ t‚ÇÇ)) := by
            rw [‚Üê cancel_mono (F.map (z'.s ‚â´ t‚ÇÇ)), ‚Üê cancel_epi (F.map z'.s),
              Category.assoc, IsIso.hom_inv_id_assoc, IsIso.inv_hom_id, Category.comp_id,
              F.map_comp]
          rw [eq‚ÇÅ, ‚Üê F.map_comp_assoc, hf, F.map_comp, Category.assoc]
          simp only [hs, eq‚ÇÇ])
    map_id := by
      rintro ‚ü®X‚ü©
      dsimp [id_eq]
      simp
    map_comp := by
      rintro ‚ü®X‚ü© ‚ü®Y‚ü© ‚ü®Z‚ü© ‚ü®f : Roof W X Y‚ü© ‚ü®g : Roof W Y Z‚ü©
      dsimp
      have sq := toSq f.s f.hs g.f
      haveI : IsIso (F.map sq.s') := hF _ sq.hs'
      haveI : IsIso (F.map (g.s ‚â´ sq.s')) := by
        rw [F.map_comp]
        infer_instance
      rw [comp_eq, Hom.comp_eq f g sq]
      dsimp [Roof.comp‚ÇÄ]
      rw [‚Üê cancel_mono (F.map (g.s ‚â´ sq.s')), Category.assoc, Category.assoc, Category.assoc,
        Category.assoc, IsIso.inv_hom_id, Category.comp_id, F.map_comp g.s, IsIso.inv_hom_id_assoc,
        ‚Üê F.map_comp, sq.fac, F.map_comp f.s, IsIso.inv_hom_id_assoc, F.map_comp] }

lemma fac (F : C ‚•§ E) (hF : W.IsInvertedBy F) : (Q W) ‚ãô lift F hF = F :=
  Functor.ext (fun X => rfl) (fun X Y f => by simp [lift, Q, homOfRoof])

lemma uniq (F‚ÇÅ F‚ÇÇ : Localization W ‚•§ E) (h : Q W ‚ãô F‚ÇÅ = Q W ‚ãô F‚ÇÇ) : F‚ÇÅ = F‚ÇÇ := by
  refine' Functor.ext _ _
  ¬∑ rintro ‚ü®X‚ü©
    exact Functor.congr_obj h X
  ¬∑ rintro ‚ü®X‚ü© ‚ü®Y‚ü© ‚ü®f : Roof W X Y‚ü©
    have eq := facOfRoof f
    dsimp only [homOfRoof] at eq
    have eq' : F‚ÇÇ.map (Qinv f.s f.hs) = eqToHom (Functor.congr_obj h.symm f.Z) ‚â´
        F‚ÇÅ.map (Qinv f.s f.hs) ‚â´ eqToHom (Functor.congr_obj h Y) := by
      haveI : IsIso (((Q W) ‚ãô F‚ÇÇ).map f.s) := by
        haveI : IsIso ((Q W).map f.s) := inverts _ _ f.hs
        dsimp
        infer_instance
      rw [‚Üê cancel_mono (((Q W) ‚ãô F‚ÇÇ).map f.s)]
      erw [‚Üê F‚ÇÇ.map_comp, Qinv_comp, F‚ÇÇ.map_id, Functor.congr_map_conjugate h.symm f.s]
      simp only [Functor.comp_obj, Functor.comp_map, Category.assoc, eqToHom_trans_assoc,
        eqToHom_refl, Category.id_comp, ‚Üê F‚ÇÅ.map_comp_assoc, Qinv_comp, F‚ÇÅ.map_id, eqToHom_trans]
    simp only [eq, Functor.map_comp]
    erw [Functor.congr_map_conjugate h f.f, eq']
    simp

variable (W E)

noncomputable def strictUniversalPropertyFixedTarget :
    Localization.StrictUniversalPropertyFixedTarget (Q W) W E where
  inverts := inverts W
  lift := lift
  fac := fac
  uniq := uniq

instance : (Q W).IsLocalization W :=
  Functor.IsLocalization.mk' _ _ (strictUniversalPropertyFixedTarget W _)
    (strictUniversalPropertyFixedTarget W _)

end Localization

variable [W.HasLeftCalculusOfFractions] [L.IsLocalization W]

instance {X Y : C} (z : Roof W X Y) : IsIso (L.map z.s) :=
  CategoryTheory.Localization.inverts L W _ z.hs

noncomputable def Roof.map {X Y : C} (z : Roof W X Y) (L : C ‚•§ D) [L.IsLocalization W] :
    L.obj X ‚ü∂ L.obj Y :=
  L.map z.f ‚â´ CategoryTheory.inv (L.map z.s)

variable (W)

@[simp]
lemma Roof.map_ofHom {X Y : C} (f : X ‚ü∂ Y) (L : C ‚•§ D) [L.IsLocalization W] :
    (Roof.ofHom W f).map L = L.map f := by
  simp [Roof.map]

variable {W}

lemma Roof.map_eq {X Y : C} (z : Roof W X Y) (L : C ‚•§ D) [L.IsLocalization W] :
  z.map L = (Localization.compUniqFunctor (HasLeftCalculusOfFractions.Localization.Q W) L W).inv.app _ ‚â´
    ((CategoryTheory.Localization.uniq _ L W).functor.map (Localization.homOfRoof z)) ‚â´
    ((Localization.compUniqFunctor _ _ W)).hom.app _  := by
  let E := CategoryTheory.Localization.uniq (HasLeftCalculusOfFractions.Localization.Q W) L W
  let e : Localization.Q W ‚ãô E.functor ‚âÖ L := Localization.compUniqFunctor _ _ W
  change L.map z.f ‚â´ _ = e.inv.app X ‚â´ E.functor.map (Localization.homOfRoof z) ‚â´ e.hom.app Y
  rw [‚Üê cancel_mono (L.map z.s), Category.assoc, IsIso.inv_hom_id, Category.comp_id,
    ‚Üê cancel_epi (e.hom.app X), Category.assoc, Category.assoc, Iso.hom_inv_id_app_assoc,
    Localization.facOfRoof, E.functor.map_comp, Category.assoc, ‚Üê e.hom.naturality z.s,
    Functor.comp_map, ‚Üê E.functor.map_comp_assoc _ ((Localization.Q W).map z.s),
    Localization.Qinv_comp, E.functor.map_id, Category.id_comp]
  exact (e.hom.naturality z.f).symm

variable (W)

lemma fac' {X Y : C} (f : L.obj X ‚ü∂ L.obj Y) :
    ‚àÉ (z : Roof W X Y), f = z.map L := by
  let E := CategoryTheory.Localization.uniq
    (HasLeftCalculusOfFractions.Localization.Q W) L W
  let e : _ ‚ãô E.functor ‚âÖ L := Localization.compUniqFunctor _ _ _
  obtain ‚ü®f', rfl‚ü© : ‚àÉ (f' : E.functor.obj ‚ü®X‚ü© ‚ü∂ E.functor.obj ‚ü®Y‚ü©),
      f = e.inv.app _ ‚â´ f' ‚â´ e.hom.app _ :=
    ‚ü®e.hom.app _ ‚â´ f ‚â´ e.inv.app _, by simp‚ü©
  obtain ‚ü®‚ü®z : Roof W X Y‚ü©,
    hz : E.functor.map (Localization.homOfRoof z) = _‚ü© := E.functor.map_surjective f'
  exact ‚ü®z, by simp only [‚Üê hz, Roof.map_eq]‚ü©

lemma fac {X Y : C} (f : L.obj X ‚ü∂ L.obj Y) :
  ‚àÉ (Z : C) (g : X ‚ü∂ Z) (s : Y ‚ü∂ Z) (hs : W s),
    f = L.map g ‚â´ (Localization.isoOfHom L W s hs).inv := by
  obtain ‚ü®z, hz‚ü© := fac' L W f
  exact ‚ü®_, z.f, z.s, z.hs, hz‚ü©

lemma map_eq_iff' {X Y : C} (z‚ÇÅ z‚ÇÇ : Roof W X Y) :
    z‚ÇÅ.map L = z‚ÇÇ.map L ‚Üî roofRel z‚ÇÅ z‚ÇÇ := by
  have H : Localization.homOfRoof z‚ÇÅ = Localization.homOfRoof z‚ÇÇ ‚Üî roofRel z‚ÇÅ z‚ÇÇ := by
    constructor
    ¬∑ intro h
      dsimp only [Localization.homOfRoof] at h
      rw [Quot.eq] at h
      induction' h with _ _ _ _ _ _ _ h‚ÇÅ _ _ _ _ _ h‚ÇÇ h‚ÇÉ
      ¬∑ assumption
      ¬∑ apply refl
      ¬∑ exact h‚ÇÅ.symm
      ¬∑ exact h‚ÇÇ.trans h‚ÇÉ
    ¬∑ apply Quot.sound
  refine' Iff.trans _ H
  simp only [Roof.map_eq]
  constructor
  ¬∑ intro h
    apply (CategoryTheory.Localization.uniq (Localization.Q W) L W).functor.map_injective
    simpa only [NatIso.cancel_natIso_inv_left, NatIso.cancel_natIso_hom_right
      (Localization.compUniqFunctor (Localization.Q W) L W)] using h
  ¬∑ intro h
    rw [h]

lemma map_eq_iff {X Y : C} (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) :
    L.map f‚ÇÅ = L.map f‚ÇÇ ‚Üî ‚àÉ (Z : C) (s : Y ‚ü∂ Z) (_ : W s), f‚ÇÅ ‚â´ s = f‚ÇÇ ‚â´ s := by
  constructor
  ¬∑ intro h
    have h' : (Roof.ofHom W f‚ÇÅ).map L = (Roof.ofHom W f‚ÇÇ).map L := by simpa using h
    rw [map_eq_iff'] at h'
    obtain ‚ü®Z, t‚ÇÅ, t‚ÇÇ, hst, hft, ht‚ü© := h'
    dsimp at t‚ÇÅ t‚ÇÇ hst hft ht
    simp only [Category.id_comp] at hst ht
    subst hst
    exact ‚ü®Z, t‚ÇÅ, ht, hft‚ü©
  ¬∑ rintro ‚ü®Z, s, hs, fac‚ü©
    rw [‚Üê cancel_mono (Localization.isoOfHom L W s hs).hom]
    dsimp
    simp only [‚Üê L.map_comp, fac]

lemma exists_lift_arrow (f : Arrow D) : ‚àÉ (g : Arrow C), Nonempty (f ‚âÖ L.mapArrow.obj g) := by
  have : EssSurj L := Localization.essSurj L W
  let e‚ÇÅ := L.objObjPreimageIso f.left
  let e‚ÇÇ := L.objObjPreimageIso f.right
  let f' := e‚ÇÅ.hom ‚â´ f.hom ‚â´ e‚ÇÇ.inv
  obtain ‚ü®X, g, s, hs, eq‚ü© := fac L W f'
  refine' ‚ü®Arrow.mk g, ‚ü®Arrow.isoMk e‚ÇÅ.symm (e‚ÇÇ.symm ‚â™‚â´ Localization.isoOfHom L W s hs) _‚ü©‚ü©
  dsimp
  simp only [‚Üê cancel_mono ((Localization.isoOfHom L W s hs).inv), Category.assoc, ‚Üê eq,
    Functor.id_obj, Iso.inv_hom_id_assoc]
  erw [(Localization.isoOfHom L W s hs).hom_inv_id, Category.comp_id]

noncomputable def liftMap‚ÇÅ {X Y : D} (f : X ‚ü∂ Y) : C :=
  (exists_lift_arrow L W (Arrow.mk f)).choose.left
noncomputable def liftMap‚ÇÇ {X Y : D} (f : X ‚ü∂ Y) : C :=
  (exists_lift_arrow L W (Arrow.mk f)).choose.right
noncomputable def liftMap {X Y : D} (f : X ‚ü∂ Y) : liftMap‚ÇÅ L W f ‚ü∂ liftMap‚ÇÇ L W f :=
  (exists_lift_arrow L W (Arrow.mk f)).choose.hom
noncomputable def mapLiftMapIso {X Y : D} (f : X ‚ü∂ Y) :
  Arrow.mk f ‚âÖ Arrow.mk (L.map (liftMap L W f)) :=
  (exists_lift_arrow L W (Arrow.mk f)).choose_spec.some
noncomputable def liftMapIso‚ÇÅ {X Y : D} (f : X ‚ü∂ Y) : X ‚âÖ L.obj (liftMap‚ÇÅ L W f) :=
  Arrow.leftFunc.mapIso (mapLiftMapIso L W f)
noncomputable def liftMapIso‚ÇÇ {X Y : D} (f : X ‚ü∂ Y) : Y ‚âÖ L.obj (liftMap‚ÇÇ L W f) :=
  Arrow.rightFunc.mapIso (mapLiftMapIso L W f)

lemma liftMap_fac {X Y : D} (f : X ‚ü∂ Y) : f ‚â´ (liftMapIso‚ÇÇ L W f).hom =
    (liftMapIso‚ÇÅ L W f).hom ‚â´ L.map (liftMap L W f) :=
  (mapLiftMapIso L W f).hom.w.symm

lemma essSurj_mapArrow : EssSurj L.mapArrow := ‚ü®fun f =>
  ‚ü®Arrow.mk (liftMap L W f.hom), ‚ü®(mapLiftMapIso L W f.hom).symm‚ü©‚ü©‚ü©

end HasLeftCalculusOfFractions

namespace HasRightCalculusOfFractions

variable [W.HasRightCalculusOfFractions] [L.IsLocalization W]

lemma fac {X Y : C} (f : L.obj X ‚ü∂ L.obj Y) :
  ‚àÉ (Z : C) (g : Z ‚ü∂ Y) (s : Z ‚ü∂ X) (hs : W s),
    f = (Localization.isoOfHom L W s hs).inv ‚â´ L.map g := by
  obtain ‚ü®Z, g, s, hs, fac‚ü© := HasLeftCalculusOfFractions.fac L.op W.op f.op
  refine' ‚ü®_, g.unop, s.unop, hs, Quiver.Hom.op_inj _‚ü©
  rw [‚Üê cancel_mono (Localization.isoOfHom (Functor.op L) (MorphismProperty.op W) s hs).hom,
    Category.assoc, Iso.inv_hom_id, Category.comp_id] at fac
  rw [‚Üê cancel_mono (Localization.isoOfHom L W (Quiver.Hom.unop s) hs).hom.op, ‚Üê op_comp, ‚Üê op_comp,
    Iso.hom_inv_id_assoc, op_comp]
  exact fac

lemma map_eq_iff {X Y : C} (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) :
    L.map f‚ÇÅ = L.map f‚ÇÇ ‚Üî ‚àÉ (Z : C) (s : Z ‚ü∂ X) (_ : W s), s ‚â´ f‚ÇÅ = s ‚â´ f‚ÇÇ := by
  refine' Iff.trans _ ((HasLeftCalculusOfFractions.map_eq_iff L.op W.op f‚ÇÅ.op f‚ÇÇ.op).trans _)
  ¬∑ constructor
    ¬∑ apply Quiver.Hom.unop_inj
    ¬∑ apply Quiver.Hom.op_inj
  ¬∑ constructor
    ¬∑ rintro ‚ü®Z, s, hs, fac‚ü©
      exact ‚ü®_, s.unop, hs, Quiver.Hom.op_inj fac‚ü©
    ¬∑ rintro ‚ü®Z, s, hs, fac‚ü©
      exact ‚ü®_, s.op, hs, Quiver.Hom.unop_inj fac‚ü©

end HasRightCalculusOfFractions

end MorphismProperty

end CategoryTheory
