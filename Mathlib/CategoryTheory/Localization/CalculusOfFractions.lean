import Mathlib.CategoryTheory.Localization.Opposite

namespace CategoryTheory

namespace MorphismProperty

variable {C D : Type _} [Category C] [Category D] (L : C ‚•§ D) {W : MorphismProperty C}

structure HasLeftCalculusOfFractions.ToSq {X' X Y : C} (s : X ‚ü∂ X') (hs : W s) (u : X ‚ü∂ Y) :=
(obj : C)
(g : X' ‚ü∂ obj)
(s' : Y ‚ü∂ obj)
(hs' : W s')
(fac : u ‚â´ s' = s ‚â´ g)

structure HasRightCalculusOfFractions.ToSq {X Y Y' : C} (s : Y' ‚ü∂ Y) (hs : W s) (u : X ‚ü∂ Y) :=
(obj : C)
(g : obj ‚ü∂ Y')
(s' : obj ‚ü∂ X)
(hs' : W s')
(fac : s' ‚â´ u = g ‚â´ s)

attribute [reassoc] HasLeftCalculusOfFractions.ToSq.fac
  HasRightCalculusOfFractions.ToSq.fac

variable (W)

class HasLeftCalculusOfFractions : Prop :=
  multiplicative : W.IsMultiplicative := by infer_instance
  nonempty_toSq : ‚àÄ ‚¶ÉX' X Y : C‚¶Ñ (s : X ‚ü∂ X') (hs : W s) (u : X ‚ü∂ Y),
    Nonempty (HasLeftCalculusOfFractions.ToSq s hs u)
  ext : ‚àÄ ‚¶ÉX' X Y : C‚¶Ñ (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (s : X' ‚ü∂ X) (_ : W s)
    (_ : s ‚â´ f‚ÇÅ = s ‚â´ f‚ÇÇ), ‚àÉ (Y' : C) (t : Y ‚ü∂ Y') (_ : W t), f‚ÇÅ ‚â´ t = f‚ÇÇ ‚â´ t

class HasRightCalculusOfFractions : Prop :=
  multiplicative : W.IsMultiplicative := by infer_instance
  nonempty_toSq : ‚àÄ ‚¶ÉX Y Y' : C‚¶Ñ (s : Y' ‚ü∂ Y) (hs : W s) (u : X ‚ü∂ Y),
    Nonempty (HasRightCalculusOfFractions.ToSq s hs u)
  ext : ‚àÄ ‚¶ÉX Y Y' : C‚¶Ñ (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (s : Y ‚ü∂ Y') (_ : W s)
    (_ : f‚ÇÅ ‚â´ s = f‚ÇÇ ‚â´ s), ‚àÉ (X' : C) (t : X' ‚ü∂ X) (_ : W t), t ‚â´ f‚ÇÅ = t ‚â´ f‚ÇÇ

attribute [instance] HasLeftCalculusOfFractions.multiplicative
  HasRightCalculusOfFractions.multiplicative

variable {W}

noncomputable def HasLeftCalculusOfFractions.toSq {X' X Y : C} (s : X ‚ü∂ X') (hs : W s) (u : X ‚ü∂ Y)
    [HasLeftCalculusOfFractions W] : HasLeftCalculusOfFractions.ToSq s hs u :=
  (HasLeftCalculusOfFractions.nonempty_toSq s hs u).some

noncomputable def HasRightCalculusOfFractions.toSq {X Y Y' : C} (s : Y' ‚ü∂ Y) (hs : W s) (u : X ‚ü∂ Y)
    [HasRightCalculusOfFractions W] : HasRightCalculusOfFractions.ToSq s hs u :=
  (HasRightCalculusOfFractions.nonempty_toSq s hs u).some

variable (W)

lemma HasLeftCalculusOfFractions.op [HasLeftCalculusOfFractions W] :
    W.op.HasRightCalculusOfFractions where
  nonempty_toSq := fun _ _ _ s hs u => ‚ü®by
    let h := HasLeftCalculusOfFractions.toSq s.unop hs u.unop
    exact ‚ü®_, h.g.op, h.s'.op, h.hs', Quiver.Hom.unop_inj h.fac‚ü©‚ü©
  ext := fun _ _ _ f‚ÇÅ f‚ÇÇ s hs fac => by
    obtain ‚ü®X', t, ht, eq‚ü© := HasLeftCalculusOfFractions.ext f‚ÇÅ.unop f‚ÇÇ.unop s.unop hs
      (Quiver.Hom.op_inj fac)
    exact ‚ü®_, t.op, ht, Quiver.Hom.unop_inj eq‚ü©

lemma HasLeftCalculusOfFractions.unop (W : MorphismProperty C·µí·µñ) [HasLeftCalculusOfFractions W] :
    W.unop.HasRightCalculusOfFractions where
  multiplicative := IsMultiplicative.unop W
  nonempty_toSq := fun _ _ _ s hs u => ‚ü®by
    let h := HasLeftCalculusOfFractions.toSq s.op hs u.op
    exact ‚ü®_, h.g.unop, h.s'.unop, h.hs', Quiver.Hom.op_inj h.fac‚ü©‚ü©
  ext := fun _ _ _ f‚ÇÅ f‚ÇÇ s hs fac => by
    obtain ‚ü®X', t, ht, eq‚ü© := HasLeftCalculusOfFractions.ext f‚ÇÅ.op f‚ÇÇ.op s.op hs
      (Quiver.Hom.unop_inj fac)
    exact ‚ü®_, t.unop, ht, Quiver.Hom.op_inj eq‚ü©

lemma HasRightCalculusOfFractions.op [HasRightCalculusOfFractions W] :
    W.op.HasLeftCalculusOfFractions where
  nonempty_toSq := fun _ _ _ s hs u => ‚ü®by
    let h := HasRightCalculusOfFractions.toSq s.unop hs u.unop
    exact ‚ü®_, h.g.op, h.s'.op, h.hs', Quiver.Hom.unop_inj h.fac‚ü©‚ü©
  ext := fun _ _ _ f‚ÇÅ f‚ÇÇ s hs fac => by
    obtain ‚ü®X', t, ht, eq‚ü© := HasRightCalculusOfFractions.ext f‚ÇÅ.unop f‚ÇÇ.unop s.unop hs
      (Quiver.Hom.op_inj fac)
    exact ‚ü®_, t.op, ht, Quiver.Hom.unop_inj eq‚ü©

lemma HasRightCalculusOfFractions.unop (W : MorphismProperty C·µí·µñ) [HasRightCalculusOfFractions W] :
    W.unop.HasLeftCalculusOfFractions where
  multiplicative := IsMultiplicative.unop W
  nonempty_toSq := fun _ _ _ s hs u => ‚ü®by
    let h := HasRightCalculusOfFractions.toSq s.op hs u.op
    exact ‚ü®_, h.g.unop, h.s'.unop, h.hs', Quiver.Hom.op_inj h.fac‚ü©‚ü©
  ext := fun _ _ _ f‚ÇÅ f‚ÇÇ s hs fac => by
    obtain ‚ü®X', t, ht, eq‚ü© := HasRightCalculusOfFractions.ext f‚ÇÅ.op f‚ÇÇ.op s.op hs
      (Quiver.Hom.unop_inj fac)
    exact ‚ü®_, t.unop, ht, Quiver.Hom.op_inj eq‚ü©

attribute [instance] HasLeftCalculusOfFractions.op HasRightCalculusOfFractions.op

namespace HasLeftCalculusOfFractions

section

structure Roof (X Y : C) :=
(Z : C)
(f : X ‚ü∂ Z)
(s : Y ‚ü∂ Z)
(hs : W s)

@[simps]
def Roof.ofHom [ContainsIdentities W] {X Y : C} (f : X ‚ü∂ Y) : Roof W X Y :=
  ‚ü®Y, f, ùüô Y, ContainsIdentities.mem W Y‚ü©

variable {W}

def roofRel ‚¶ÉX Y : C‚¶Ñ (z‚ÇÅ z‚ÇÇ : Roof W X Y) : Prop :=
  ‚àÉ (Z‚ÇÉ : C)  (t‚ÇÅ : z‚ÇÅ.Z ‚ü∂ Z‚ÇÉ) (t‚ÇÇ : z‚ÇÇ.Z ‚ü∂ Z‚ÇÉ) (_ : z‚ÇÅ.s ‚â´ t‚ÇÅ = z‚ÇÇ.s ‚â´ t‚ÇÇ)
    (_ : z‚ÇÅ.f ‚â´ t‚ÇÅ = z‚ÇÇ.f ‚â´ t‚ÇÇ), W (z‚ÇÅ.s ‚â´ t‚ÇÅ)

namespace roofRel

lemma refl {X Y : C} (z : Roof W X Y) : roofRel z z :=
  ‚ü®z.Z, ùüô _, ùüô _, rfl, rfl, by simpa only [Category.comp_id] using z.hs‚ü©

lemma symm {X Y : C} {z‚ÇÅ z‚ÇÇ : Roof W X Y} (h : roofRel z‚ÇÅ z‚ÇÇ) : roofRel z‚ÇÇ z‚ÇÅ := by
  obtain ‚ü®Z‚ÇÉ, t‚ÇÅ, t‚ÇÇ, hst, hft, ht‚ü© := h
  exact ‚ü®Z‚ÇÉ, t‚ÇÇ, t‚ÇÅ, hst.symm, hft.symm, by simpa only [‚Üê hst] using ht‚ü©

lemma trans {X Y : C} {z‚ÇÅ z‚ÇÇ z‚ÇÉ : Roof W X Y} (h‚ÇÅ‚ÇÇ : roofRel z‚ÇÅ z‚ÇÇ) (h‚ÇÇ‚ÇÉ : roofRel z‚ÇÇ z‚ÇÉ)
    [HasLeftCalculusOfFractions W] :
    roofRel z‚ÇÅ z‚ÇÉ := by
  obtain ‚ü®Z‚ÇÑ, t‚ÇÅ, t‚ÇÇ, hst, hft, ht‚ü© := h‚ÇÅ‚ÇÇ
  obtain ‚ü®Z‚ÇÖ, u‚ÇÇ, u‚ÇÉ, hsu, hfu, hu‚ü© := h‚ÇÇ‚ÇÉ
  obtain ‚ü®Z‚ÇÜ, v‚ÇÑ, v‚ÇÖ, hv‚ÇÖ, fac‚ü© := toSq (z‚ÇÅ.s ‚â´ t‚ÇÅ) ht (z‚ÇÉ.s ‚â´ u‚ÇÉ)
  simp only [Category.assoc] at fac
  have eq : z‚ÇÇ.s ‚â´ u‚ÇÇ ‚â´ v‚ÇÖ  = z‚ÇÇ.s ‚â´ t‚ÇÇ ‚â´ v‚ÇÑ := by
    simpa only [‚Üê reassoc_of% hsu, reassoc_of% hst] using fac
  obtain ‚ü®Z‚Çá, w, hw, fac'‚ü© := ext _ _ _ z‚ÇÇ.hs eq
  simp only [Category.assoc] at fac'
  refine' ‚ü®Z‚Çá, t‚ÇÅ ‚â´ v‚ÇÑ ‚â´ w, u‚ÇÉ ‚â´ v‚ÇÖ ‚â´ w, _, _, _‚ü©
  . rw [reassoc_of% fac]
  . rw [reassoc_of% hft, ‚Üê fac', reassoc_of% hfu]
  . rw [‚Üê reassoc_of% fac, ‚Üê reassoc_of% hsu, ‚Üê Category.assoc]
    exact IsMultiplicative.comp _ _ _ hu (IsMultiplicative.comp _ _ _ hv‚ÇÖ hw)

end roofRel

variable [W.HasLeftCalculusOfFractions]

instance {X Y : C} : IsEquiv (Roof W X Y) (fun z‚ÇÅ z‚ÇÇ => roofRel z‚ÇÅ z‚ÇÇ) where
  refl := roofRel.refl
  symm := fun _ _ => roofRel.symm
  trans := fun _ _ _ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ => roofRel.trans h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ

namespace Roof

def comp‚ÇÄ {X Y Z : C} (z : Roof W X Y) (z' : Roof W Y Z)
    (sq : ToSq z.s z.hs z'.f) : Roof W X Z := by
  refine' ‚ü®sq.obj, z.f ‚â´ sq.g, z'.s ‚â´ sq.s',
    IsMultiplicative.comp _ _ _ z'.hs sq.hs'‚ü©

lemma comp‚ÇÄ_rel {X Y Z : C} (z : Roof W X Y) (z' : Roof W Y Z)
    (sq sq' : ToSq z.s z.hs z'.f) : roofRel (z.comp‚ÇÄ z' sq) (z.comp‚ÇÄ z' sq') := by
  have H := toSq sq.s' sq.hs' sq'.s'
  have eq : z.s ‚â´ sq.g ‚â´ H.g = z.s ‚â´ sq'.g ‚â´ H.s' := by
    rw [‚Üê sq.fac_assoc, ‚Üê sq'.fac_assoc, H.fac]
  obtain ‚ü®Y, t, ht, fac‚ü© := ext _ _ _ z.hs eq
  simp only [Category.assoc] at fac
  refine' ‚ü®Y, H.g ‚â´ t, H.s' ‚â´ t, _, _, _‚ü©
  . dsimp [comp‚ÇÄ]
    simp only [Category.assoc, H.fac_assoc]
  . dsimp [comp‚ÇÄ]
    simp only [Category.assoc, ‚Üê fac]
  . dsimp [comp‚ÇÄ]
    simp only [Category.assoc, ‚Üê H.fac_assoc]
    exact IsMultiplicative.comp _ _ _ z'.hs
      (IsMultiplicative.comp _ _ _ sq'.hs'
      (IsMultiplicative.comp _ _ _ H.hs' ht))

end Roof

variable (W)

def Hom (X Y : C) := Quot (fun (z‚ÇÅ z‚ÇÇ : Roof W X Y) => roofRel z‚ÇÅ z‚ÇÇ)

variable {W}

noncomputable def Roof.comp {X Y Z : C} (z : Roof W X Y) (z' : Roof W Y Z) :
    Hom W X Z :=
  Quot.mk _ (z.comp‚ÇÄ z' (toSq _ _ _ ))

lemma Roof.comp_eq {X Y Z : C} (z : Roof W X Y) (z' : Roof W Y Z)
    (sq : ToSq z.s z.hs z'.f) : z.comp z' = Quot.mk _ (z.comp‚ÇÄ z' sq) :=
  Quot.sound (Roof.comp‚ÇÄ_rel z z' _ _)

noncomputable def Hom.comp {X Y Z : C} :
    Hom W X Y ‚Üí Hom W Y Z ‚Üí Hom W X Z := by
  refine' Quot.lift‚ÇÇ (fun z z' => Roof.comp z z') _ _
  . sorry
  . sorry

lemma Hom.comp_eq {X Y Z : C} (z : Roof W X Y) (z' : Roof W Y Z)
    (sq : ToSq z.s z.hs z'.f) :
      Hom.comp (Quot.mk _ z) (Quot.mk _ z') =
        Quot.mk _ (Roof.comp‚ÇÄ z z' sq) :=
  Roof.comp_eq _ _ _

structure Localization (W : MorphismProperty C) :=
(obj : C)

noncomputable instance : Category (Localization W) where
  Hom X Y := Hom W X.obj Y.obj
  id X := Quot.mk _ (Roof.ofHom _ (ùüô X.obj))
  comp f g := Hom.comp f g
  id_comp := by
    rintro ‚ü®X‚ü© ‚ü®Y‚ü© ‚ü®f‚ü©
    dsimp [Hom.comp]
    let sq : ToSq (ùüô X) (ContainsIdentities.mem W _) f.f :=
      ‚ü®f.Z, f.f, ùüô _, ContainsIdentities.mem W _, by simp‚ü©
    rw [Roof.comp_eq (Roof.ofHom _ (ùüô X)) f sq]
    dsimp [Roof.comp‚ÇÄ]
    congr <;> simp
  comp_id := by
    rintro ‚ü®X‚ü© ‚ü®Y‚ü© ‚ü®f‚ü©
    dsimp [Hom.comp]
    let sq : ToSq f.s f.hs (ùüô Y) :=
      ‚ü®f.Z, ùüô _, f.s, f.hs, by simp‚ü©
    rw [Roof.comp_eq f (Roof.ofHom _ (ùüô Y)) sq]
    dsimp [Roof.comp‚ÇÄ]
    congr <;> simp
  assoc := sorry

end

variable [W.HasLeftCalculusOfFractions] [L.IsLocalization W]

lemma fac {X Y : C} (f : L.obj X ‚ü∂ L.obj Y) :
  ‚àÉ (Z : C) (g : X ‚ü∂ Z) (s : Y ‚ü∂ Z) (hs : W s),
    f = L.map g ‚â´ (Localization.isoOfHom L W s hs).inv := by
  have h : HasLeftCalculusOfFractions W := inferInstance
  sorry

lemma map_eq_iff {X Y : C} (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) :
    L.map f‚ÇÅ = L.map f‚ÇÇ ‚Üî ‚àÉ (Z : C) (s : Y ‚ü∂ Z) (hs : W s), f‚ÇÅ ‚â´ s = f‚ÇÇ ‚â´ s := by
  have h : HasLeftCalculusOfFractions W := inferInstance
  constructor
  . sorry
  . rintro ‚ü®Z, s, hs, fac‚ü©
    rw [‚Üê cancel_mono (Localization.isoOfHom L W s hs).hom]
    dsimp
    simp only [‚Üê L.map_comp, fac]
end HasLeftCalculusOfFractions

namespace HasRightCalculusOfFractions

variable [W.HasRightCalculusOfFractions] [L.IsLocalization W]

lemma fac {X Y : C} (f : L.obj X ‚ü∂ L.obj Y) :
  ‚àÉ (Z : C) (g : Z ‚ü∂ Y) (s : Z ‚ü∂ X) (hs : W s),
    f = (Localization.isoOfHom L W s hs).inv ‚â´ L.map g := by
  obtain ‚ü®Z, g, s, hs, fac‚ü© := HasLeftCalculusOfFractions.fac L.op W.op f.op
  refine' ‚ü®_, g.unop, s.unop, hs, Quiver.Hom.op_inj _‚ü©
  rw [‚Üê cancel_mono (Localization.isoOfHom (Functor.op L) (MorphismProperty.op W) s hs).hom,
    Category.assoc, Iso.inv_hom_id, Category.comp_id] at fac
  rw [‚Üê cancel_mono (Localization.isoOfHom L W (Quiver.Hom.unop s) hs).hom.op, ‚Üê op_comp, ‚Üê op_comp,
    Iso.hom_inv_id_assoc, op_comp]
  exact fac

lemma map_eq_iff {X Y : C} (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) :
    L.map f‚ÇÅ = L.map f‚ÇÇ ‚Üî ‚àÉ (Z : C) (s : Z ‚ü∂ X) (_ : W s), s ‚â´ f‚ÇÅ = s ‚â´ f‚ÇÇ := by
  refine' Iff.trans _ ((HasLeftCalculusOfFractions.map_eq_iff L.op W.op f‚ÇÅ.op f‚ÇÇ.op).trans _)
  . constructor
    . apply Quiver.Hom.unop_inj
    . apply Quiver.Hom.op_inj
  . constructor
    . rintro ‚ü®Z, s, hs, fac‚ü©
      exact ‚ü®_, s.unop, hs, Quiver.Hom.op_inj fac‚ü©
    . rintro ‚ü®Z, s, hs, fac‚ü©
      exact ‚ü®_, s.op, hs, Quiver.Hom.unop_inj fac‚ü©

end HasRightCalculusOfFractions

end MorphismProperty

end CategoryTheory
