import Mathlib.CategoryTheory.Localization.DerivabilityStructure

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Category Localization

variable {C‚ÇÅ : Type u‚ÇÅ} {C‚ÇÇ : Type u‚ÇÇ} [Category.{v‚ÇÅ} C‚ÇÅ] [Category.{v‚ÇÇ} C‚ÇÇ]
  {W‚ÇÅ : MorphismProperty C‚ÇÅ} {W‚ÇÇ : MorphismProperty C‚ÇÇ}

@[simp]
lemma Localization.isoOfHom_id (L : C‚ÇÅ ‚•§ C‚ÇÇ) (W : MorphismProperty C‚ÇÅ)
    [L.IsLocalization W] (X : C‚ÇÅ) (hX : W (ùüô X)) :
    isoOfHom L W (ùüô X) hX = Iso.refl _ := by aesop_cat

lemma Arrow.cases (f : Arrow C‚ÇÅ) : ‚àÉ (X Y : C‚ÇÅ) (g : X ‚ü∂ Y), f = Arrow.mk g := ‚ü®_, _, f.hom, rfl‚ü©
lemma Arrow.hom_cases {f g : Arrow C‚ÇÅ} (œÜ : f ‚ü∂ g) :
  ‚àÉ (œÜ‚ÇÅ : f.left ‚ü∂ g.left) (œÜ‚ÇÇ : f.right ‚ü∂ g.right) (comm : œÜ‚ÇÅ ‚â´ g.hom = f.hom ‚â´ œÜ‚ÇÇ),
    œÜ = Arrow.homMk comm := ‚ü®œÜ.left, œÜ.right, Arrow.w œÜ, rfl‚ü©

namespace LocalizerMorphism

variable (Œ¶ : LocalizerMorphism W‚ÇÅ W‚ÇÇ)

namespace IsRightDerivabilityStructure

variable {D‚ÇÅ D‚ÇÇ : Type*} [Category D‚ÇÅ] [Category D‚ÇÇ]
  (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) [L‚ÇÅ.IsLocalization W‚ÇÅ] [L‚ÇÇ.IsLocalization W‚ÇÇ]
  (F : D‚ÇÅ ‚•§ D‚ÇÇ)
  [Full F] [Faithful F] [W‚ÇÅ.IsMultiplicative] [W‚ÇÇ.ContainsIdentities]
  [‚àÄ X‚ÇÇ, IsConnected (Œ¶.RightResolution X‚ÇÇ)]
  [HasRightResolutions Œ¶.arrow]

namespace Constructor

variable {L‚ÇÅ L‚ÇÇ F} (e : Œ¶.functor ‚ãô L‚ÇÇ ‚âÖ L‚ÇÅ ‚ãô F)
  {X‚ÇÇ X‚ÇÇ' : C‚ÇÇ} {X‚ÇÉ : D‚ÇÅ} (g : L‚ÇÇ.obj X‚ÇÇ ‚ü∂ F.obj X‚ÇÉ)

namespace FromRightResolution

@[simps! left]
noncomputable def obj (f : Œ¶.RightResolution X‚ÇÇ) : TwoSquare.JDownwards e.hom g := by
  refine' CostructuredArrow.mk (_ : (TwoSquare.structuredArrowDownwards e.hom X‚ÇÇ).obj (StructuredArrow.mk f.w) ‚ü∂ _)
  exact StructuredArrow.homMk (F.preimage (e.inv.app _ ‚â´ (Localization.isoOfHom L‚ÇÇ W‚ÇÇ _ f.hw).inv ‚â´ g))

@[simp]
lemma map_obj_hom_right (f : Œ¶.RightResolution X‚ÇÇ) :
    F.map (obj Œ¶ e g f).hom.right =
      e.inv.app _ ‚â´ (Localization.isoOfHom L‚ÇÇ W‚ÇÇ _ f.hw).inv ‚â´ g := by
  simp [obj]

@[simps!]
noncomputable def map {f f' : Œ¶.RightResolution X‚ÇÇ} (œÜ : f ‚ü∂ f') : obj Œ¶ e g f ‚ü∂ obj Œ¶ e g f' :=
  CostructuredArrow.homMk (StructuredArrow.homMk œÜ.f) (by
    ext
    dsimp
    apply F.map_injective
    simp only [Functor.map_comp, map_obj_hom_right, Functor.comp_obj]
    erw [e.inv.naturality_assoc]
    congr 1
    rw [‚Üê cancel_epi (isoOfHom L‚ÇÇ W‚ÇÇ f.w f.hw).hom]
    simp only [isoOfHom_hom, Functor.comp_obj, Functor.comp_map, isoOfHom_hom_inv_id_assoc,
      ‚Üê L‚ÇÇ.map_comp_assoc, œÜ.comm])

end FromRightResolution

@[simps]
noncomputable def fromRightResolution : Œ¶.RightResolution X‚ÇÇ ‚•§
      TwoSquare.JDownwards e.hom g where
  obj := FromRightResolution.obj Œ¶ e g
  map := FromRightResolution.map Œ¶ e g

-- this is extravagant...
set_option maxHeartbeats 1600000 in
@[simps]
def precompJDownwards (Œ≥ : X‚ÇÇ' ‚ü∂ X‚ÇÇ) (g' : L‚ÇÇ.obj X‚ÇÇ' ‚ü∂ F.obj X‚ÇÉ) (hg' : L‚ÇÇ.map Œ≥ ‚â´ g = g'):
    TwoSquare.JDownwards e.hom g ‚•§ TwoSquare.JDownwards e.hom g' where
  obj f := CostructuredArrow.mk' (StructuredArrow.mk' f.left.right (Œ≥ ‚â´ f.left.hom))
      (StructuredArrow.homMk f.hom.right (by
        have eq := L‚ÇÇ.map Œ≥ ‚â´= StructuredArrow.w f.hom
        dsimp at eq ‚ä¢
        simp only [Functor.map_comp, assoc] at eq ‚ä¢
        rw [eq, hg']))
  map {f‚ÇÅ f‚ÇÇ} œÜ := CostructuredArrow.homMk (StructuredArrow.homMk œÜ.left.right) (by
    ext
    have eq := CostructuredArrow.w œÜ
    dsimp at eq ‚ä¢
    rw [‚Üê eq]
    rfl)

lemma isConnected_JDownwards :
    IsConnected (TwoSquare.JDownwards e.hom g) := by
  have : Nonempty (TwoSquare.JDownwards e.hom g) :=
    ‚ü®(fromRightResolution Œ¶ e g).obj (Classical.arbitrary _)‚ü©
  suffices ‚àÄ (X : TwoSquare.JDownwards e.hom g),
      ‚àÉ (Y : Œ¶.RightResolution X‚ÇÇ), Zigzag X ((fromRightResolution Œ¶ e g).obj Y) by
    refine' zigzag_isConnected (fun X X' => _)
    obtain ‚ü®Y, hX‚ü© := this X
    obtain ‚ü®Y', hX'‚ü© := this X'
    exact hX.trans ((zigzag_obj_of_zigzag _ (isConnected_zigzag Y Y')).trans (zigzag_symmetric hX'))
  intro Œ≥‚ÇÄ
  -- Œ≥ is named g in Kahn-Maltsiniotis
  -- Œ≥' is named g'
  -- g is named y
  -- X‚ÇÇ is named d
  -- X‚ÇÉ is named c bar
  -- L‚ÇÅ is named P
  -- L‚ÇÇ is named Q
  -- Œ¶.functor is named K
  -- F is named K bar
  obtain ‚ü®c, Œ≥, x, comm, hŒ≥‚ÇÄ‚ü© := Œ≥‚ÇÄ.cases
  have R : Œ¶.arrow.RightResolution (Arrow.mk Œ≥) := Classical.arbitrary _
  obtain ‚ü®œÅ, w, ‚ü®ht'', ht'‚ü©, rfl‚ü© := R.cases
  obtain ‚ü®c'', c', f, rfl‚ü© := œÅ.cases
  obtain ‚ü®t'', t', commf, rfl‚ü© := Arrow.hom_cases w
  dsimp at commf t' t'' ht' ht''
  obtain ‚ü®z, hz‚ü© : ‚àÉ (z : L‚ÇÅ.obj c ‚ü∂ L‚ÇÅ.obj c'), F.map z = e.inv.app c ‚â´ L‚ÇÇ.map t' ‚â´ e.hom.app c' :=
    F.map_surjective _
  have : IsIso (L‚ÇÇ.map t') := Localization.inverts _ _ _ ht'
  have : IsIso (F.map z) := by rw [hz]; infer_instance
  have : IsIso z := isIso_of_reflects_iso z F
  have hz' : inv (F.map z) = e.inv.app c' ‚â´ (isoOfHom L‚ÇÇ _ _ ht').inv ‚â´ e.hom.app c := by
    rw [‚Üê cancel_epi (F.map z), IsIso.hom_inv_id, hz]
    simp only [Functor.comp_obj, assoc, Iso.hom_inv_id_app_assoc,
      isoOfHom_hom_inv_id_assoc, Iso.inv_hom_id_app]
  let x' := inv z ‚â´ x
  let Œ≥' := Œ≥ ‚â´ t'
  let cgx' : TwoSquare.JDownwards e.hom g := TwoSquare.JDownwards.mk e.hom g c' Œ≥' x' (by
    dsimp
    simp only [Functor.map_comp, Functor.map_inv, assoc, hz',
      Functor.comp_obj, Iso.hom_inv_id_app_assoc, isoOfHom_hom_inv_id_assoc, comm])
  let x'' := L‚ÇÅ.map f ‚â´ x'
  let cgx'' : TwoSquare.JDownwards e.hom g := TwoSquare.JDownwards.mk e.hom g c'' t'' x'' (by
    dsimp
    simp only [F.map_comp, F.map_inv, hz', ‚Üê comm, ‚Üê assoc]
    congr 2
    simp only [assoc, ‚Üê cancel_mono (isoOfHom L‚ÇÇ W‚ÇÇ t' ht').hom,
      Functor.comp_obj, isoOfHom_hom, isoOfHom_inv_hom_id, comp_id, ‚Üê L‚ÇÇ.map_comp, ‚Üê commf]
    rw [L‚ÇÇ.map_comp]
    erw [‚Üê NatTrans.naturality_assoc, Iso.hom_inv_id_app, comp_id]
    rfl)
  let y' := F.map x
  let d' := Œ¶.functor.obj c
  have hy' : g = L‚ÇÇ.map Œ≥ ‚â´ e.hom.app c ‚â´ y' := comm.symm
  let R‚ÇÅ : Œ¶.RightResolution d' :=
    { X‚ÇÅ := c
      w := ùüô _
      hw := W‚ÇÇ.id_mem _ }
  let R‚ÇÇ : Œ¶.RightResolution d' :=
    { X‚ÇÅ := c'
      w := t'
      hw := ht' }
  let R‚ÇÉ : Œ¶.RightResolution X‚ÇÇ := RightResolution.mk _ ht''
  have hR‚ÇÉ : cgx'' ‚ü∂ (fromRightResolution Œ¶ e g).obj R‚ÇÉ :=
    CostructuredArrow.homMk (StructuredArrow.homMk (ùüô _)) (by
      ext
      apply F.map_injective
      dsimp
      simp only [Functor.map_id, id_comp, FromRightResolution.map_obj_hom_right,
        Functor.comp_obj, ‚Üê comm, Functor.map_comp, Functor.map_inv, hz', assoc]
      simp only [‚Üê assoc]
      congr 2
      simp only [‚Üê cancel_mono (isoOfHom L‚ÇÇ W‚ÇÇ t' ht').hom,
        assoc, isoOfHom_hom, isoOfHom_inv_hom_id, comp_id, ‚Üê L‚ÇÇ.map_comp, ‚Üê commf]
      simp only [Functor.map_comp, isoOfHom_inv_hom_id_assoc]
      erw [e.inv.naturality f]
      rfl)
  let Œ∫ : Œ¶.RightResolution d' ‚•§ TwoSquare.JDownwards e.hom g :=
    fromRightResolution Œ¶ e (e.hom.app c ‚â´ y') ‚ãô
      precompJDownwards Œ¶ e (e.hom.app c ‚â´ y') Œ≥ g comm
  have hŒ∫‚ÇÅ : Œ≥‚ÇÄ ‚ü∂ Œ∫.obj R‚ÇÅ := by
    rw [hŒ≥‚ÇÄ]
    refine' CostructuredArrow.homMk (StructuredArrow.homMk (ùüô _)) _
    ext
    apply F.map_injective
    dsimp
    simp
  have hŒ∫‚ÇÇ : Œ∫.obj R‚ÇÇ ‚ü∂ cgx' :=
    CostructuredArrow.homMk (StructuredArrow.homMk (ùüô _)) (by
      ext
      apply F.map_injective
      dsimp
      simp [hz])
  have zigzag‚ÇÅ : Zigzag Œ≥‚ÇÄ cgx' :=
    (Relation.ReflTransGen.single (Or.inl ‚ü®hŒ∫‚ÇÅ‚ü©) : Zigzag Œ≥‚ÇÄ (Œ∫.obj R‚ÇÅ)).trans
      ((zigzag_obj_of_zigzag Œ∫ (isConnected_zigzag R‚ÇÅ R‚ÇÇ)).trans (Relation.ReflTransGen.single (Or.inl ‚ü®hŒ∫‚ÇÇ‚ü©)))
  have zigzag‚ÇÇ : Zigzag cgx' cgx'' :=
    Relation.ReflTransGen.single (Or.inr ‚ü®CostructuredArrow.homMk (StructuredArrow.homMk f commf)‚ü©)
  exact ‚ü®R‚ÇÉ, zigzag‚ÇÅ.trans (zigzag‚ÇÇ.trans (Relation.ReflTransGen.single (Or.inl ‚ü®hR‚ÇÉ‚ü©)))‚ü©

end Constructor

-- Kahn-Maltsiniotis, Lemme 6.5
lemma mk' [CatCommSq Œ¶.functor L‚ÇÅ L‚ÇÇ F] : Œ¶.IsRightDerivabilityStructure := by
  rw [Œ¶.isRightDerivabilityStructure_iff L‚ÇÅ L‚ÇÇ F (CatCommSq.iso _ _ _ _),
    TwoSquare.guitartExact_iff_isConnected_downwards]
  apply Constructor.isConnected_JDownwards

end IsRightDerivabilityStructure

end LocalizerMorphism

end CategoryTheory
