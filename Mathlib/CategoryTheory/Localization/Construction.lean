/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.MorphismProperty
import Mathlib.CategoryTheory.Category.QuivCat

#align_import category_theory.localization.construction from "leanprover-community/mathlib"@"1a5e56f2166e4e9d0964c71f4273b1d39227678d"

/-!

# Construction of the localized category

This file constructs the localized category, obtained by formally inverting
a class of maps `W : MorphismProperty C` in a category `C`.

We first construct a quiver `LocQuiver W` whose objects are the same as those
of `C` and whose maps are the maps in `C` and placeholders for the formal
inverses of the maps in `W`.

The localized category `W.Localization` is obtained by taking the quotient
of the path category of `LocQuiver W` by the congruence generated by four
types of relations.

The obvious functor `Q W : C ‚•§ W.Localization` satisfies the universal property
of the localization. Indeed, if `G : C ‚•§ D` sends morphisms in `W` to isomorphisms
in `D` (i.e. we have `hG : W.IsInvertedBy G`), then there exists a unique functor
`G' : W.Localization ‚•§ D` such that `Q W ‚â´ G' = G`. This `G'` is `lift G hG`.
The expected property of `lift G hG` if expressed by the lemma `fac` and the
uniqueness is expressed by `uniq`.

## References

* [P. Gabriel, M. Zisman, *Calculus of fractions and homotopy theory*][gabriel-zisman-1967]

-/


noncomputable section

open CategoryTheory.Category

namespace CategoryTheory

-- category universes first for convenience
universe uC' uD' uC uD
variable {C : Type uC} [Category.{uC'} C] (W : MorphismProperty C) {D : Type uD} [Category.{uD'} D]

namespace Localization

namespace Construction

-- porting note: removed @[nolint has_nonempty_instance]
/-- If `W : MorphismProperty C`, `LocQuiver W` is a quiver with the same objects
as `C`, and whose morphisms are those in `C` and placeholders for formal
inverses of the morphisms in `W`. -/
structure LocQuiver (W : MorphismProperty C) where
  /-- underlying object -/
  obj : C
#align category_theory.localization.construction.loc_quiver CategoryTheory.Localization.Construction.LocQuiver

instance : Quiver (LocQuiver W) where Hom A B := Sum (A.obj ‚ü∂ B.obj) { f : B.obj ‚ü∂ A.obj // W f }

/-- The object in the path category of `LocQuiver W` attached to an object in
the category `C` -/
def ŒπPaths (X : C) : Paths (LocQuiver W) :=
  ‚ü®X‚ü©
#align category_theory.localization.construction.Œπ_paths CategoryTheory.Localization.Construction.ŒπPaths

/-- The morphism in the path category associated to a morphism in the original category. -/
@[simp]
def œà‚ÇÅ {X Y : C} (f : X ‚ü∂ Y) : ŒπPaths W X ‚ü∂ ŒπPaths W Y :=
  Paths.of.map (Sum.inl f)
#align category_theory.localization.construction.œà‚ÇÅ CategoryTheory.Localization.Construction.œà‚ÇÅ

/-- The morphism in the path category corresponding to a formal inverse. -/
@[simp]
def œà‚ÇÇ {X Y : C} (w : X ‚ü∂ Y) (hw : W w) : ŒπPaths W Y ‚ü∂ ŒπPaths W X :=
  Paths.of.map (Sum.inr ‚ü®w, hw‚ü©)
#align category_theory.localization.construction.œà‚ÇÇ CategoryTheory.Localization.Construction.œà‚ÇÇ

/-- The relations by which we take the quotient in order to get the localized category. -/
inductive relations : HomRel (Paths (LocQuiver W))
  | id (X : C) : relations (œà‚ÇÅ W (ùüô X)) (ùüô _)
  | comp {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : relations (œà‚ÇÅ W (f ‚â´ g)) (œà‚ÇÅ W f ‚â´ œà‚ÇÅ W g)
  | Winv‚ÇÅ {X Y : C} (w : X ‚ü∂ Y) (hw : W w) : relations (œà‚ÇÅ W w ‚â´ œà‚ÇÇ W w hw) (ùüô _)
  | Winv‚ÇÇ {X Y : C} (w : X ‚ü∂ Y) (hw : W w) : relations (œà‚ÇÇ W w hw ‚â´ œà‚ÇÅ W w) (ùüô _)
#align category_theory.localization.construction.relations CategoryTheory.Localization.Construction.relations

end Construction

end Localization

namespace MorphismProperty

open Localization.Construction

-- porting note: removed @[nolint has_nonempty_instance]
/-- The localized category obtained by formally inverting the morphisms
in `W : MorphismProperty C` -/
def Localization :=
  CategoryTheory.Quotient (Localization.Construction.relations W)
#align category_theory.morphism_property.localization CategoryTheory.MorphismProperty.Localization

instance : Category (Localization W) := by
  dsimp only [Localization]
  -- ‚ä¢ Category.{?u.3575, uC} (Quotient (relations W))
  infer_instance
  -- üéâ no goals

/-- The obvious functor `C ‚•§ W.Localization` -/
def Q : C ‚•§ W.Localization
    where
  obj X := (Quotient.functor _).obj (Paths.of.obj ‚ü®X‚ü©)
  map f := (Quotient.functor _).map (œà‚ÇÅ W f)
  map_id X := Quotient.sound _ (relations.id X)
  map_comp f g := Quotient.sound _ (relations.comp f g)
set_option linter.uppercaseLean3 false in
#align category_theory.morphism_property.Q CategoryTheory.MorphismProperty.Q

end MorphismProperty

namespace Localization

namespace Construction

variable {W}
/-- The isomorphism in `W.Localization` associated to a morphism `w` in W -/
def wIso {X Y : C} (w : X ‚ü∂ Y) (hw : W w) : Iso (W.Q.obj X) (W.Q.obj Y)
    where
  hom := W.Q.map w
  inv := (Quotient.functor _).map (by dsimp; exact Paths.of.map (Sum.inr ‚ü®w, hw‚ü©))
                                      -- ‚ä¢ { obj := Y } ‚ü∂ { obj := X }
                                             -- üéâ no goals
  hom_inv_id := Quotient.sound _ (relations.Winv‚ÇÅ w hw)
  inv_hom_id := Quotient.sound _ (relations.Winv‚ÇÇ w hw)
set_option linter.uppercaseLean3 false in
#align category_theory.localization.construction.Wiso CategoryTheory.Localization.Construction.wIso

/-- The formal inverse in `W.Localization` of a morphism `w` in `W`. -/
abbrev winv {X Y : C} (w : X ‚ü∂ Y) (hw : W w) :=
  (wIso w hw).inv
set_option linter.uppercaseLean3 false in
#align category_theory.localization.construction.Winv CategoryTheory.Localization.Construction.winv

variable (W)

theorem _root_.CategoryTheory.MorphismProperty.Q_inverts : W.IsInvertedBy W.Q := fun _ _ w hw =>
  IsIso.of_iso (Localization.Construction.wIso w hw)
set_option linter.uppercaseLean3 false in
#align category_theory.morphism_property.Q_inverts CategoryTheory.MorphismProperty.Q_inverts

variable {W} (G : C ‚•§ D) (hG : W.IsInvertedBy G)

/-- The lifting of a functor to the path category of `LocQuiver W` -/
@[simps!]
def liftToPathCategory : Paths (LocQuiver W) ‚•§ D :=
  QuivCat.lift
    { obj := fun X => G.obj X.obj
      map := by
        intros X Y
        -- ‚ä¢ (X ‚ü∂ Y) ‚Üí ((fun X => G.obj X.obj) X ‚ü∂ (fun X => G.obj X.obj) Y)
        rintro (f | ‚ü®g, hg‚ü©)
        -- ‚ä¢ (fun X => G.obj X.obj) X ‚ü∂ (fun X => G.obj X.obj) Y
        ¬∑ exact G.map f
          -- üéâ no goals
        ¬∑ haveI := hG g hg
          -- ‚ä¢ (fun X => G.obj X.obj) X ‚ü∂ (fun X => G.obj X.obj) Y
          exact inv (G.map g) }
          -- üéâ no goals
#align category_theory.localization.construction.lift_to_path_category CategoryTheory.Localization.Construction.liftToPathCategory

/-- The lifting of a functor `C ‚•§ D` inverting `W` as a functor `W.Localization ‚•§ D` -/
@[simps!]
def lift : W.Localization ‚•§ D :=
  Quotient.lift (relations W) (liftToPathCategory G hG)
    (by
      rintro ‚ü®X‚ü© ‚ü®Y‚ü© f‚ÇÅ f‚ÇÇ r
      -- ‚ä¢ (liftToPathCategory G hG).map f‚ÇÅ = (liftToPathCategory G hG).map f‚ÇÇ
      --Porting note: rest of proof was `rcases r with ‚ü®‚ü©; tidy`
      rcases r with (_|_|‚ü®f,hf‚ü©|‚ü®f,hf‚ü©)
      ¬∑ aesop_cat
        -- üéâ no goals
      ¬∑ aesop_cat
        -- üéâ no goals
      all_goals
        dsimp
        haveI := hG f hf
        simp
        rfl)
#align category_theory.localization.construction.lift CategoryTheory.Localization.Construction.lift

@[simp]
theorem fac : W.Q ‚ãô lift G hG = G :=
  Functor.ext (fun X => rfl)
    (by
      intro X Y f
      -- ‚ä¢ (MorphismProperty.Q W ‚ãô lift G hG).map f = eqToHom (_ : (MorphismProperty.Q  ‚Ä¶
      simp only [Functor.comp_map, eqToHom_refl, comp_id, id_comp]
      -- ‚ä¢ (lift G hG).map ((MorphismProperty.Q W).map f) = G.map f
      dsimp [MorphismProperty.Q, Quot.liftOn]
      -- ‚ä¢ composePath (Quiver.Hom.toPath (G.map f)) = G.map f
      rw [composePath_toPath])
      -- üéâ no goals
#align category_theory.localization.construction.fac CategoryTheory.Localization.Construction.fac

theorem uniq (G‚ÇÅ G‚ÇÇ : W.Localization ‚•§ D) (h : W.Q ‚ãô G‚ÇÅ = W.Q ‚ãô G‚ÇÇ) : G‚ÇÅ = G‚ÇÇ := by
  suffices h' : Quotient.functor _ ‚ãô G‚ÇÅ = Quotient.functor _ ‚ãô G‚ÇÇ
  -- ‚ä¢ G‚ÇÅ = G‚ÇÇ
  ¬∑ refine' Functor.ext _ _
    -- ‚ä¢ ‚àÄ (X : MorphismProperty.Localization W), G‚ÇÅ.obj X = G‚ÇÇ.obj X
    ¬∑ rintro ‚ü®‚ü®X‚ü©‚ü©
      -- ‚ä¢ G‚ÇÅ.obj { as := { obj := X } } = G‚ÇÇ.obj { as := { obj := X } }
      apply Functor.congr_obj h
      -- üéâ no goals
    ¬∑ rintro ‚ü®‚ü®X‚ü©‚ü© ‚ü®‚ü®Y‚ü©‚ü© ‚ü®f‚ü©
      -- ‚ä¢ G‚ÇÅ.map (Quot.mk (Quotient.CompClosure (relations W)) f) = eqToHom (_ : G‚ÇÅ.ob ‚Ä¶
      apply Functor.congr_hom h'
      -- üéâ no goals
  ¬∑ refine' Paths.ext_functor _ _
    -- ‚ä¢ (Quotient.functor (relations W) ‚ãô G‚ÇÅ).toPrefunctor.obj = (Quotient.functor ( ‚Ä¶
    ¬∑ ext X
      -- ‚ä¢ (Quotient.functor (relations W) ‚ãô G‚ÇÅ).obj X = (Quotient.functor (relations W ‚Ä¶
      cases X
      -- ‚ä¢ (Quotient.functor (relations W) ‚ãô G‚ÇÅ).obj { obj := obj‚úù } = (Quotient.functo ‚Ä¶
      apply Functor.congr_obj h
      -- üéâ no goals
    ¬∑ rintro ‚ü®X‚ü© ‚ü®Y‚ü© (f | ‚ü®w, hw‚ü©)
      -- ‚ä¢ (Quotient.functor (relations W) ‚ãô G‚ÇÅ).map (Quiver.Hom.toPath (Sum.inl f)) =  ‚Ä¶
      ¬∑ simpa only using Functor.congr_hom h f
        -- üéâ no goals
      ¬∑ have hw : W.Q.map w = (wIso w hw).hom := rfl
        -- ‚ä¢ (Quotient.functor (relations W) ‚ãô G‚ÇÅ).map (Quiver.Hom.toPath (Sum.inr { val  ‚Ä¶
        have hw' := Functor.congr_hom h w
        -- ‚ä¢ (Quotient.functor (relations W) ‚ãô G‚ÇÅ).map (Quiver.Hom.toPath (Sum.inr { val  ‚Ä¶
        simp only [Functor.comp_map, hw] at hw'
        -- ‚ä¢ (Quotient.functor (relations W) ‚ãô G‚ÇÅ).map (Quiver.Hom.toPath (Sum.inr { val  ‚Ä¶
        refine' Functor.congr_inv_of_congr_hom _ _ _ _ _ hw'
        -- ‚ä¢ G‚ÇÅ.obj ((MorphismProperty.Q W).obj Y) = G‚ÇÇ.obj ((MorphismProperty.Q W).obj Y)
        all_goals apply Functor.congr_obj h
        -- üéâ no goals
#align category_theory.localization.construction.uniq CategoryTheory.Localization.Construction.uniq

variable (W)

/-- The canonical bijection between objects in a category and its
localization with respect to a morphism_property `W` -/
@[simps]
def objEquiv : C ‚âÉ W.Localization where
  toFun := W.Q.obj
  invFun X := X.as.obj
  left_inv X := rfl
  right_inv := by
    rintro ‚ü®‚ü®X‚ü©‚ü©
    -- ‚ä¢ (MorphismProperty.Q W).obj ((fun X => X.as.obj) { as := { obj := X } }) = {  ‚Ä¶
    rfl
    -- üéâ no goals
#align category_theory.localization.construction.obj_equiv CategoryTheory.Localization.Construction.objEquiv

variable {W}

/-- A `MorphismProperty` in `W.Localization` is satisfied by all
morphisms in the localized category if it contains the image of the
morphisms in the original category, the inverses of the morphisms
in `W` and if it is stable under composition -/
theorem morphismProperty_is_top (P : MorphismProperty W.Localization)
    (hP‚ÇÅ : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y), P (W.Q.map f))
    (hP‚ÇÇ : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (w : X ‚ü∂ Y) (hw : W w), P (winv w hw)) (hP‚ÇÉ : P.StableUnderComposition) :
    P = ‚ä§ := by
  funext X Y f
  -- ‚ä¢ P f = ‚ä§ f
  ext
  -- ‚ä¢ P f ‚Üî ‚ä§ f
  constructor
  -- ‚ä¢ P f ‚Üí ‚ä§ f
  ¬∑ intro
    -- ‚ä¢ ‚ä§ f
    apply MorphismProperty.top_apply
    -- üéâ no goals
  ¬∑ intro
    -- ‚ä¢ P f
    let G : _ ‚•§ W.Localization := Quotient.functor _
    -- ‚ä¢ P f
    haveI : Full G := Quotient.fullFunctor _
    -- ‚ä¢ P f
    suffices ‚àÄ (X‚ÇÅ X‚ÇÇ : Paths (LocQuiver W)) (f : X‚ÇÅ ‚ü∂ X‚ÇÇ), P (G.map f) by
      rcases X with ‚ü®‚ü®X‚ü©‚ü©
      rcases Y with ‚ü®‚ü®Y‚ü©‚ü©
      simpa only [Functor.image_preimage] using this _ _ (G.preimage f)
    intros X‚ÇÅ X‚ÇÇ p
    -- ‚ä¢ P (G.map p)
    induction' p with X‚ÇÇ X‚ÇÉ p g hp
    -- ‚ä¢ P (G.map Quiver.Path.nil)
    ¬∑ simpa only [Functor.map_id] using hP‚ÇÅ (ùüô X‚ÇÅ.obj)
      -- üéâ no goals
    ¬∑ let p' : X‚ÇÅ ‚ü∂X‚ÇÇ := p
      -- ‚ä¢ P (G.map (Quiver.Path.cons p g))
      rw [show p'.cons g = p' ‚â´ Quiver.Hom.toPath g by rfl, G.map_comp]
      -- ‚ä¢ P (G.map p' ‚â´ G.map (Quiver.Hom.toPath g))
      refine' hP‚ÇÉ _ _ hp _
      -- ‚ä¢ P (G.map (Quiver.Hom.toPath g))
      rcases g with (g | ‚ü®g, hg‚ü©)
      -- ‚ä¢ P (G.map (Quiver.Hom.toPath (Sum.inl g)))
      ¬∑ apply hP‚ÇÅ
        -- üéâ no goals
      ¬∑ apply hP‚ÇÇ
        -- üéâ no goals
#align category_theory.localization.construction.morphism_property_is_top CategoryTheory.Localization.Construction.morphismProperty_is_top

/-- A `MorphismProperty` in `W.Localization` is satisfied by all
morphisms in the localized category if it contains the image of the
morphisms in the original category, if is stable under composition
and if the property is stable by passing to inverses. -/
theorem morphismProperty_is_top' (P : MorphismProperty W.Localization)
    (hP‚ÇÅ : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y), P (W.Q.map f))
    (hP‚ÇÇ : ‚àÄ ‚¶ÉX Y : W.Localization‚¶Ñ (e : X ‚âÖ Y) (_ : P e.hom), P e.inv)
    (hP‚ÇÉ : P.StableUnderComposition) : P = ‚ä§ :=
  morphismProperty_is_top P hP‚ÇÅ (fun _ _ w _ => hP‚ÇÇ _ (hP‚ÇÅ w)) hP‚ÇÉ
#align category_theory.localization.construction.morphism_property_is_top' CategoryTheory.Localization.Construction.morphismProperty_is_top'

namespace NatTransExtension

variable {F‚ÇÅ F‚ÇÇ : W.Localization ‚•§ D} (œÑ : W.Q ‚ãô F‚ÇÅ ‚ü∂ W.Q ‚ãô F‚ÇÇ)

/-- If `F‚ÇÅ` and `F‚ÇÇ` are functors `W.Localization ‚•§ D` and if we have
`œÑ : W.Q ‚ãô F‚ÇÅ ‚ü∂ W.Q ‚ãô F‚ÇÇ`, we shall define a natural transformation `F‚ÇÅ ‚ü∂ F‚ÇÇ`.
This is the `app` field of this natural transformation. -/
def app (X : W.Localization) : F‚ÇÅ.obj X ‚ü∂ F‚ÇÇ.obj X :=
  eqToHom (congr_arg F‚ÇÅ.obj ((objEquiv W).right_inv X).symm) ‚â´
    œÑ.app ((objEquiv W).invFun X) ‚â´ eqToHom (congr_arg F‚ÇÇ.obj ((objEquiv W).right_inv X))
#align category_theory.localization.construction.nat_trans_extension.app CategoryTheory.Localization.Construction.NatTransExtension.app

@[simp]
theorem app_eq (X : C) : (app œÑ) (W.Q.obj X) = œÑ.app X := by
  simp only [app, eqToHom_refl, comp_id, id_comp]
  -- ‚ä¢ NatTrans.app œÑ (Equiv.invFun (objEquiv W) ((MorphismProperty.Q W).obj X)) =  ‚Ä¶
  rfl
  -- üéâ no goals
#align category_theory.localization.construction.nat_trans_extension.app_eq CategoryTheory.Localization.Construction.NatTransExtension.app_eq

end NatTransExtension

/-- If `F‚ÇÅ` and `F‚ÇÇ` are functors `W.Localization ‚•§ D`, a natural transformation `F‚ÇÅ ‚ü∂ F‚ÇÇ`
can be obtained from a natural transformation `W.Q ‚ãô F‚ÇÅ ‚ü∂ W.Q ‚ãô F‚ÇÇ`. -/
@[simps]
def natTransExtension {F‚ÇÅ F‚ÇÇ : W.Localization ‚•§ D} (œÑ : W.Q ‚ãô F‚ÇÅ ‚ü∂ W.Q ‚ãô F‚ÇÇ) : F‚ÇÅ ‚ü∂ F‚ÇÇ
    where
  app := NatTransExtension.app œÑ
  naturality := by
    suffices MorphismProperty.naturalityProperty (NatTransExtension.app œÑ) = ‚ä§ by
      intro X Y f
      simpa only [‚Üê this] using MorphismProperty.top_apply f
    refine' morphismProperty_is_top'
      (MorphismProperty.naturalityProperty (NatTransExtension.app œÑ))
      _ (MorphismProperty.naturalityProperty.stableUnderInverse _)
      (MorphismProperty.naturalityProperty.stableUnderComposition _)
    intros X Y f
    -- ‚ä¢ MorphismProperty.naturalityProperty (NatTransExtension.app œÑ) ((MorphismProp ‚Ä¶
    dsimp
    -- ‚ä¢ F‚ÇÅ.map ((MorphismProperty.Q W).map f) ‚â´ NatTransExtension.app œÑ ((MorphismPr ‚Ä¶
    simpa only [NatTransExtension.app_eq] using œÑ.naturality f
    -- üéâ no goals
#align category_theory.localization.construction.nat_trans_extension CategoryTheory.Localization.Construction.natTransExtension

@[simp]
theorem natTransExtension_hcomp {F G : W.Localization ‚•§ D} (œÑ : W.Q ‚ãô F ‚ü∂ W.Q ‚ãô G) :
    ùüô W.Q ‚ó´ natTransExtension œÑ = œÑ := by aesop_cat
                                          -- üéâ no goals
#align category_theory.localization.construction.nat_trans_extension_hcomp CategoryTheory.Localization.Construction.natTransExtension_hcomp

theorem natTrans_hcomp_injective {F G : W.Localization ‚•§ D} {œÑ‚ÇÅ œÑ‚ÇÇ : F ‚ü∂ G}
    (h : ùüô W.Q ‚ó´ œÑ‚ÇÅ = ùüô W.Q ‚ó´ œÑ‚ÇÇ) : œÑ‚ÇÅ = œÑ‚ÇÇ := by
  ext X
  -- ‚ä¢ NatTrans.app œÑ‚ÇÅ X = NatTrans.app œÑ‚ÇÇ X
  have eq := (objEquiv W).right_inv X
  -- ‚ä¢ NatTrans.app œÑ‚ÇÅ X = NatTrans.app œÑ‚ÇÇ X
  simp only [objEquiv] at eq
  -- ‚ä¢ NatTrans.app œÑ‚ÇÅ X = NatTrans.app œÑ‚ÇÇ X
  rw [‚Üê eq, ‚Üê NatTrans.id_hcomp_app, ‚Üê NatTrans.id_hcomp_app, h]
  -- üéâ no goals
#align category_theory.localization.construction.nat_trans_hcomp_injective CategoryTheory.Localization.Construction.natTrans_hcomp_injective

variable (W D)

namespace WhiskeringLeftEquivalence

/-- The functor `(W.Localization ‚•§ D) ‚•§ (W.FunctorsInverting D)` induced by the
composition with `W.Q : C ‚•§ W.Localization`. -/
@[simps!]
def functor : (W.Localization ‚•§ D) ‚•§ W.FunctorsInverting D :=
  FullSubcategory.lift _ ((whiskeringLeft _ _ D).obj W.Q) fun _ =>
    MorphismProperty.IsInvertedBy.of_comp W W.Q W.Q_inverts _
#align category_theory.localization.construction.whiskering_left_equivalence.functor CategoryTheory.Localization.Construction.WhiskeringLeftEquivalence.functor

/-- The function `(W.FunctorsInverting D) ‚•§ (W.Localization ‚•§ D)` induced by
`Construction.lift`. -/
@[simps!]
def inverse : W.FunctorsInverting D ‚•§ W.Localization ‚•§ D
    where
  obj G := lift G.obj G.property
  map œÑ := natTransExtension (eqToHom (by rw [fac]) ‚â´ œÑ ‚â´ eqToHom (by rw [fac]))
                                          -- üéâ no goals
                                                                      -- üéâ no goals
  map_id G :=
    natTrans_hcomp_injective
      (by
        rw [natTransExtension_hcomp]
        -- ‚ä¢ eqToHom (_ : MorphismProperty.Q W ‚ãô (fun G => lift G.obj (_ : MorphismProper ‚Ä¶
        ext X
        -- ‚ä¢ NatTrans.app (eqToHom (_ : MorphismProperty.Q W ‚ãô (fun G => lift G.obj (_ :  ‚Ä¶
        simp only [NatTrans.comp_app, eqToHom_app, eqToHom_refl, comp_id, id_comp,
          NatTrans.hcomp_id_app, NatTrans.id_app, Functor.map_id]
        rfl )
        -- üéâ no goals
  map_comp œÑ‚ÇÅ œÑ‚ÇÇ :=
    natTrans_hcomp_injective
      (by
        ext X
        -- ‚ä¢ NatTrans.app (ùüô (MorphismProperty.Q W) ‚ó´ { obj := fun G => lift G.obj (_ : M ‚Ä¶
        simp only [natTransExtension_hcomp, NatTrans.comp_app, eqToHom_app, eqToHom_refl,
          id_comp, comp_id, NatTrans.hcomp_app, NatTrans.id_app, Functor.map_id,
          natTransExtension_app, NatTransExtension.app_eq]
        rfl)
        -- üéâ no goals
#align category_theory.localization.construction.whiskering_left_equivalence.inverse CategoryTheory.Localization.Construction.WhiskeringLeftEquivalence.inverse

/-- The unit isomorphism of the equivalence of categories `whiskeringLeftEquivalence W D`. -/
@[simps!]
def unitIso : ùü≠ (W.Localization ‚•§ D) ‚âÖ functor W D ‚ãô inverse W D :=
  eqToIso
    (by
      refine' Functor.ext (fun G => _) fun G‚ÇÅ G‚ÇÇ œÑ => _
      -- ‚ä¢ (ùü≠ (MorphismProperty.Localization W ‚•§ D)).obj G = (functor W D ‚ãô inverse W D ‚Ä¶
      ¬∑ apply uniq
        -- ‚ä¢ MorphismProperty.Q W ‚ãô (ùü≠ (MorphismProperty.Localization W ‚•§ D)).obj G = Mor ‚Ä¶
        dsimp [Functor]
        -- ‚ä¢ MorphismProperty.Q W ‚ãô G = MorphismProperty.Q W ‚ãô (inverse W D).obj ((functo ‚Ä¶
        erw [fac]
        -- ‚ä¢ MorphismProperty.Q W ‚ãô G = ((functor W D).obj G).obj
        rfl
        -- üéâ no goals
      ¬∑ apply natTrans_hcomp_injective
        -- ‚ä¢ ùüô (MorphismProperty.Q W) ‚ó´ (ùü≠ (MorphismProperty.Localization W ‚•§ D)).map œÑ = ‚Ä¶
        ext X
        -- ‚ä¢ NatTrans.app (ùüô (MorphismProperty.Q W) ‚ó´ (ùü≠ (MorphismProperty.Localization W ‚Ä¶
        simp)
        -- üéâ no goals
#align category_theory.localization.construction.whiskering_left_equivalence.unit_iso CategoryTheory.Localization.Construction.WhiskeringLeftEquivalence.unitIso

/-- The counit isomorphism of the equivalence of categories `WhiskeringLeftEquivalence W D`. -/
@[simps!]
def counitIso : inverse W D ‚ãô functor W D ‚âÖ ùü≠ (W.FunctorsInverting D) :=
  eqToIso
    (by
      refine' Functor.ext _ _
      -- ‚ä¢ ‚àÄ (X : MorphismProperty.FunctorsInverting W D), (inverse W D ‚ãô functor W D). ‚Ä¶
      ¬∑ rintro ‚ü®G, hG‚ü©
        -- ‚ä¢ (inverse W D ‚ãô functor W D).obj { obj := G, property := hG } = (ùü≠ (MorphismP ‚Ä¶
        ext
        -- ‚ä¢ ((inverse W D ‚ãô functor W D).obj { obj := G, property := hG }).obj = ((ùü≠ (Mo ‚Ä¶
        exact fac G hG
        -- üéâ no goals
      ¬∑ rintro ‚ü®G‚ÇÅ, hG‚ÇÅ‚ü© ‚ü®G‚ÇÇ, hG‚ÇÇ‚ü© f
        -- ‚ä¢ (inverse W D ‚ãô functor W D).map f = eqToHom (_ : (inverse W D ‚ãô functor W D) ‚Ä¶
        ext
        -- ‚ä¢ NatTrans.app ((inverse W D ‚ãô functor W D).map f) x‚úù = NatTrans.app (eqToHom  ‚Ä¶
        apply NatTransExtension.app_eq)
        -- üéâ no goals
#align category_theory.localization.construction.whiskering_left_equivalence.counit_iso CategoryTheory.Localization.Construction.WhiskeringLeftEquivalence.counitIso

end WhiskeringLeftEquivalence

/-- The equivalence of categories `(W.localization ‚•§ D) ‚âå (W.FunctorsInverting D)`
induced by the composition with `W.Q : C ‚•§ W.localization`. -/
def whiskeringLeftEquivalence : W.Localization ‚•§ D ‚âå W.FunctorsInverting D
    where
  functor := WhiskeringLeftEquivalence.functor W D
  inverse := WhiskeringLeftEquivalence.inverse W D
  unitIso := WhiskeringLeftEquivalence.unitIso W D
  counitIso := WhiskeringLeftEquivalence.counitIso W D
  functor_unitIso_comp F := by
    ext
    -- ‚ä¢ NatTrans.app ((WhiskeringLeftEquivalence.functor W D).map (NatTrans.app (Whi ‚Ä¶
    simp only [WhiskeringLeftEquivalence.unitIso_hom, eqToHom_app, eqToHom_refl,
      WhiskeringLeftEquivalence.counitIso_hom, eqToHom_map, eqToHom_trans]
    rfl
    -- üéâ no goals
#align category_theory.localization.construction.whiskering_left_equivalence CategoryTheory.Localization.Construction.whiskeringLeftEquivalence

end Construction

end Localization

end CategoryTheory
