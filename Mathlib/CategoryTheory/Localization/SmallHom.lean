/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Localization.LocalizerMorphism
import Mathlib.Logic.Small.Defs

/-!
# Shrinking morphisms in localized categories

Given a class of morphisms `W : MorphismProperty C`, and two objects `X` and `Y`,
we introduce a type-class `HasSmallLocalizedHom.{w} W X Y` which expresses
that in the localized category with respect to `W`, the type of morphisms from `X`
to `Y` is `w`-small for a certain universe `w`. Under this assumption,
we define `SmallHom.{w} W X Y : Type w` as the shrunk type. For any localization
functor `L : C ‚•§ D` for `W`, we provide a bijection
`SmallHom.equiv.{w} W L : SmallHom.{w} W X Y ‚âÉ (L.obj X ‚ü∂ L.obj Y)` that is compatible
with the composition of morphisms.

-/

universe w w' v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ v‚ÇÖ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ u‚ÇÖ

namespace CategoryTheory

open Category

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {W : MorphismProperty C}
  {C' : Type u‚ÇÇ} [Category.{v‚ÇÇ} C'] {W' : MorphismProperty C'}
  {D : Type u‚ÇÉ} [Category.{v‚ÇÉ} D]
  {D' : Type u‚ÇÑ} [Category.{v‚ÇÑ} D']
  {D'' : Type u‚ÇÖ} [Category.{v‚ÇÖ} D'']

namespace LocalizerMorphism

variable (Œ¶ : LocalizerMorphism W W')
  (L : C ‚•§ D) [L.IsLocalization W]
  (L' : C' ‚•§ D') [L'.IsLocalization W'] {X Y : C}

/-- If `Œ¶ : LocalizerMorphism W W'` is a morphism of localizer, `L` and `L'`
are localization functors for `W` and `W'`, then this is the induced map
`(L.obj X ‚ü∂ L.obj Y) ‚Üí (L'.obj (Œ¶.functor.obj X) ‚ü∂ L'.obj (Œ¶.functor.obj Y))`
for all objects `X` and `Y`. -/
noncomputable def homMap (f : L.obj X ‚ü∂ L.obj Y) :
    L'.obj (Œ¶.functor.obj X) ‚ü∂ L'.obj (Œ¶.functor.obj Y) :=
  Iso.homEquiv ((CatCommSq.iso _ _ _ _).symm.app _) ((CatCommSq.iso _ _ _ _).symm.app _)
    ((Œ¶.localizedFunctor L L').map f)

lemma homMap_apply (G : D ‚•§ D') (e : Œ¶.functor ‚ãô L' ‚âÖ L ‚ãô G) (f : L.obj X ‚ü∂ L.obj Y) :
    Œ¶.homMap L L' f = e.hom.app X ‚â´ G.map f ‚â´ e.inv.app Y := by
  let G' := Œ¶.localizedFunctor L L'
  let e' := CatCommSq.iso Œ¶.functor L L' G'
  change e'.hom.app X ‚â´ G'.map f ‚â´ e'.inv.app Y = _
  letI : Localization.Lifting L W (Œ¶.functor ‚ãô L') G := ‚ü®e.symm‚ü©
  let Œ± : G' ‚âÖ G := Localization.liftNatIso L W (L ‚ãô G') (Œ¶.functor ‚ãô L') _ _ e'.symm
  have : e = e' ‚â™‚â´ isoWhiskerLeft _ Œ± := by
    ext X
    dsimp [Œ±]
    rw [Localization.liftNatTrans_app]
    erw [id_comp]
    rw [Iso.hom_inv_id_app_assoc]
    rfl
  simp [this]

end LocalizerMorphism

variable (W)

namespace MorphismProperty

variable (L : C ‚•§ D) [L.IsLocalization W] (L' : C ‚•§ D') [L'.IsLocalization W]
  (L'' : C ‚•§ D'') [L''.IsLocalization W] (X Y Z : C)

/-- This property holds if the type of morphisms between `X` and `Y`
in the localized category with respect to `W : MorphismProperty C`
is small. -/
class HasSmallLocalizedHom : Prop where
  small : Small.{w} (W.Q.obj X ‚ü∂ W.Q.obj Y)

variable {X Y Z}

/-- Bijection between types of morphisms in two localized categories
for the same class of morphisms `W`. -/
noncomputable def localizationsHomEquiv :
    (L.obj X ‚ü∂ L.obj Y) ‚âÉ (L'.obj X ‚ü∂ L'.obj Y) :=
  (Localization.uniq L L' W).fullyFaithfulFunctor.homEquiv.trans
    (Iso.homEquiv ((Localization.compUniqFunctor L L' W).app X)
      ((Localization.compUniqFunctor L L' W).app Y))

lemma localizationsHomEquiv_eq_homMap (f : L.obj X ‚ü∂ L.obj Y) :
    localizationsHomEquiv W L L' f = (LocalizerMorphism.id W).homMap L L' f :=
  ((LocalizerMorphism.id W).homMap_apply L L' (Localization.uniq L L' W).functor
    (Localization.compUniqFunctor L L' W).symm f).symm

lemma localizationsHomEquiv_eq (G : D ‚•§ D') (e : L ‚ãô G ‚âÖ L') (f : L.obj X ‚ü∂ L.obj Y) :
    localizationsHomEquiv W L L' f = e.inv.app X ‚â´ G.map f ‚â´ e.hom.app Y := by
  rw [localizationsHomEquiv_eq_homMap]
  exact (LocalizerMorphism.id W).homMap_apply L L' G e.symm f

@[simp]
lemma localizationsHomEquiv_map (f : X ‚ü∂ Y) :
    localizationsHomEquiv W L L' (L.map f) = L'.map f := by
  dsimp [localizationsHomEquiv]
  erw [‚Üê NatTrans.naturality_assoc]
  simp

variable (X) in
@[simp]
lemma localizationsHomEquiv_id :
    localizationsHomEquiv W L L' (ùüô (L.obj X)) = ùüô (L'.obj X) := by
  simpa using localizationsHomEquiv_map W L L' (ùüô X)

@[simp]
lemma localizationHomEquiv_refl :
    localizationsHomEquiv W L L (X := X) (Y := Y) = Equiv.refl _ := by
  ext f
  simpa using localizationsHomEquiv_eq W L L (ùü≠ _) (Iso.refl _) f

lemma localizationHomEquiv_symm (f : L.obj X ‚ü∂ L.obj Y) :
    (localizationsHomEquiv W L' L).symm f = localizationsHomEquiv W L L' f := by
  apply (W.localizationsHomEquiv L' L).injective
  let E := Localization.uniq L L' W
  let Œ± : L ‚ãô E.functor ‚âÖ L' := (Localization.compUniqFunctor L L' W)
  rw [Equiv.apply_symm_apply, localizationsHomEquiv_eq W L L' E.functor Œ± f,
    localizationsHomEquiv_eq W L' L E.inverse
      (isoWhiskerRight Œ±.symm E.inverse ‚â™‚â´ Functor.associator _ _ _ ‚â™‚â´
        isoWhiskerLeft L E.unitIso.symm ‚â™‚â´ L.rightUnitor)]
  dsimp
  simp only [assoc, id_comp, comp_id, Functor.map_comp, Equivalence.inv_fun_map]
  simp only [‚Üê Functor.map_comp_assoc, Iso.hom_inv_id_app, Functor.comp_obj, Functor.map_id,
    id_comp, Iso.hom_inv_id_app_assoc, Functor.id_obj, comp_id]

lemma localizationHomEquiv_trans (f : L.obj X ‚ü∂ L.obj Y) :
    (localizationsHomEquiv W L' L'') (localizationsHomEquiv W L L' f) =
      localizationsHomEquiv W L L'' f := by
  let E := Localization.uniq L L' W
  let Œ± : L ‚ãô E.functor ‚âÖ L' := (Localization.compUniqFunctor L L' W)
  let E' := Localization.uniq L' L'' W
  let Œ±' : L' ‚ãô E'.functor ‚âÖ L'' := (Localization.compUniqFunctor L' L'' W)
  simp [localizationsHomEquiv_eq W L L' E.functor Œ±,
    localizationsHomEquiv_eq W L' L'' E'.functor Œ±',
    localizationsHomEquiv_eq W L L'' (E.functor ‚ãô E'.functor)
      ((Functor.associator _ _ _).symm ‚â™‚â´ isoWhiskerRight Œ± E'.functor ‚â™‚â´ Œ±')]

lemma localizationHomEquiv_comp (f : L.obj X ‚ü∂ L.obj Y) (g : L.obj Y ‚ü∂ L.obj Z) :
    localizationsHomEquiv W L L' (f ‚â´ g) =
      localizationsHomEquiv W L L' f ‚â´ localizationsHomEquiv W L L' g := by
  simp [localizationsHomEquiv]

lemma localizationsHomEquiv_isoOfHom_inv (f : X ‚ü∂ Y) (hf : W f):
    localizationsHomEquiv W L L' ((Localization.isoOfHom L W f hf).inv) =
      (Localization.isoOfHom L' W f hf).inv := by
  rw [‚Üê cancel_mono (Localization.isoOfHom L' W f hf).hom, Iso.inv_hom_id,
    Localization.isoOfHom_hom, ‚Üê localizationsHomEquiv_map W L,
    ‚Üê localizationHomEquiv_comp, Localization.isoOfHom_inv, IsIso.inv_hom_id,
    localizationsHomEquiv_id]

lemma hasSmallLocalizedHom_iff :
    HasSmallLocalizedHom.{w} W X Y ‚Üî Small.{w} (L.obj X ‚ü∂ L.obj Y) := by
  constructor
  ¬∑ intro h
    have := h.small
    exact small_map (localizationsHomEquiv W W.Q L).symm
  ¬∑ intro h
    exact ‚ü®small_map (localizationsHomEquiv W W.Q L)‚ü©

lemma hasSmallLocalizedHom_of_isLocalization :
    HasSmallLocalizedHom.{v‚ÇÉ} W X Y := by
  rw [W.hasSmallLocalizedHom_iff L]
  infer_instance

variable (X Y) in
lemma small_of_hasSmallLocalizedHom [HasSmallLocalizedHom.{w} W X Y] :
    Small.{w} (L.obj X ‚ü∂ L.obj Y) := by
  rwa [‚Üê W.hasSmallLocalizedHom_iff]

lemma hasSmallLocalizedHom_iff_of_isos {X' Y' : C} (e : X ‚âÖ X') (e' : Y ‚âÖ Y') :
    HasSmallLocalizedHom.{w} W X Y ‚Üî HasSmallLocalizedHom.{w} W X' Y' := by
  simp only [W.hasSmallLocalizedHom_iff W.Q]
  exact small_congr (Iso.homEquiv (W.Q.mapIso e) (W.Q.mapIso e'))

end MorphismProperty

namespace Localization

variable (Œ¶ : LocalizerMorphism W W') (L : C ‚•§ D) [L.IsLocalization W]

open MorphismProperty

/-- The type of morphisms from `X` to `Y` in the localized category
with respect to `W : MorphismProperty C` that is shrunk to `Type w`
when `HasSmallLocalizedHom.{w} W X Y` holds. -/
def SmallHom (X Y : C) [HasSmallLocalizedHom.{w} W X Y] : Type w :=
  letI := small_of_hasSmallLocalizedHom.{w} W W.Q X Y
  Shrink.{w} (W.Q.obj X ‚ü∂ W.Q.obj Y)

namespace SmallHom

/-- The canonical bijection `SmallHom.{w} W X Y ‚âÉ (L.obj X ‚ü∂ L.obj Y)`
when `L` is a localization functor for `W : MorphismProperty C` and
that `HasSmallLocalizedHom.{w} W X Y` holds. -/
noncomputable def equiv {X Y : C} [HasSmallLocalizedHom.{w} W X Y] :
    SmallHom.{w} W X Y ‚âÉ (L.obj X ‚ü∂ L.obj Y) :=
  letI := small_of_hasSmallLocalizedHom.{w} W W.Q X Y
  (equivShrink _).symm.trans (W.localizationsHomEquiv W.Q L)

lemma equiv_equiv_symm (L' : C ‚•§ D') [L'.IsLocalization W] (G : D ‚•§ D')
    (e : L ‚ãô G ‚âÖ L') {X Y : C} (f : L.obj X ‚ü∂ L.obj Y)
    [HasSmallLocalizedHom.{w} W X Y] : equiv W L' ((equiv W L).symm f) =
      e.inv.app X ‚â´ G.map f ‚â´ e.hom.app Y := by
  dsimp [equiv]
  rw [Equiv.symm_apply_apply, localizationHomEquiv_symm, localizationHomEquiv_trans]
  apply localizationsHomEquiv_eq

section

variable {X Y Z T : C} [HasSmallLocalizedHom.{w} W X Y]

/-- The element in `SmallHom W X Y` induced by `f : X ‚ü∂ Y`. -/
noncomputable def mk (f : X ‚ü∂ Y) : SmallHom.{w} W X Y :=
  (equiv.{w} W W.Q).symm (W.Q.map f)

@[simp]
lemma equiv_mk (f : X ‚ü∂ Y) : equiv.{w} W L (mk W f) = L.map f := by
  simp [equiv, mk]

variable {W} in
/-- The formal inverse in `SmallHom W X Y` of a morphism `f : Y ‚ü∂ X` such that `W f`. -/
noncomputable def mkInv (f : Y ‚ü∂ X) (hf : W f) : SmallHom.{w} W X Y :=
  (equiv.{w} W W.Q).symm (Localization.isoOfHom W.Q W f hf).inv

@[simp]
lemma equiv_mkInv (f : Y ‚ü∂ X) (hf : W f) :
    equiv.{w} W L (mkInv f hf) = (Localization.isoOfHom L W f hf).inv := by
  dsimp only [equiv, mkInv]
  simp only [localizationHomEquiv_refl, Equiv.trans_refl, Equiv.symm_symm,
    Equiv.trans_apply, Equiv.symm_apply_apply, localizationsHomEquiv_isoOfHom_inv]

section

variable [HasSmallLocalizedHom.{w} W Y Z] [HasSmallLocalizedHom.{w} W X Z]

variable {W}

variable (Œ± : SmallHom.{w} W X Y) (Œ≤ : SmallHom.{w} W Y Z)

/-- The composition on `SmallHom W`. -/
noncomputable def comp (Œ± : SmallHom.{w} W X Y) (Œ≤ : SmallHom.{w} W Y Z) :
    SmallHom.{w} W X Z :=
  (equiv W W.Q).symm (equiv W W.Q Œ± ‚â´ equiv W W.Q Œ≤)

lemma equiv_comp : equiv W L (Œ±.comp Œ≤) = equiv W L Œ± ‚â´ equiv W L Œ≤ := by
  letI := small_of_hasSmallLocalizedHom.{w} W W.Q X Y
  letI := small_of_hasSmallLocalizedHom.{w} W W.Q Y Z
  obtain ‚ü®Œ±, rfl‚ü© := (equivShrink _).surjective Œ±
  obtain ‚ü®Œ≤, rfl‚ü© := (equivShrink _).surjective Œ≤
  dsimp [equiv, comp]
  rw [Equiv.symm_apply_apply]
  erw [(equivShrink _).symm_apply_apply, (equivShrink _).symm_apply_apply]
  rw [‚Üê localizationHomEquiv_comp, localizationHomEquiv_refl, Equiv.refl_symm,
    Equiv.refl_apply, Equiv.refl_apply, localizationHomEquiv_comp]

lemma mk_comp_mk (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (mk W f).comp (mk W g) = mk W (f ‚â´ g) :=
  (equiv W W.Q).injective (by simp [equiv_comp])

@[simp]
lemma comp_mk_id (Œ± : SmallHom.{w} W X Y) [HasSmallLocalizedHom.{w} W Y Y] :
    Œ±.comp (mk W (ùüô Y)) = Œ± :=
  (equiv W W.Q).injective (by simp [equiv_comp])

@[simp]
lemma mk_id_comp (Œ± : SmallHom.{w} W X Y) [HasSmallLocalizedHom.{w} W X X] :
    (mk W (ùüô X)).comp Œ± = Œ± :=
  (equiv W W.Q).injective (by simp [equiv_comp])

variable [HasSmallLocalizedHom.{w} W Z T] [HasSmallLocalizedHom.{w} W X T]
  [HasSmallLocalizedHom.{w} W Y T]

@[simp]
lemma comp_assoc (Œ± : SmallHom.{w} W X Y) (Œ≤ : SmallHom.{w} W Y Z)
    (Œ≥ : SmallHom.{w} W Z T) :
    (Œ±.comp Œ≤).comp Œ≥ = Œ±.comp (Œ≤.comp Œ≥) := by
  apply (equiv W W.Q).injective
  simp only [equiv_comp, assoc]

end

section

variable [HasSmallLocalizedHom.{w} W Y X]

@[simp]
lemma mk_comp_mkInv (f : Y ‚ü∂ X) (hf : W f) [HasSmallLocalizedHom.{w} W Y Y] :
    (mk W f).comp (mkInv f hf) = mk W (ùüô Y) :=
  (equiv W W.Q).injective (by simp [equiv_comp])

@[simp]
lemma mkInv_comp_mk (f : Y ‚ü∂ X) (hf : W f) [HasSmallLocalizedHom.{w} W X X] :
    (mkInv f hf).comp (mk W f)= mk W (ùüô X) :=
  (equiv W W.Q).injective (by simp [equiv_comp])

end

end

variable {W}

section

variable (L' : C' ‚•§ D') [L'.IsLocalization W']
variable {X Y Z : C}

variable [W.HasSmallLocalizedHom X Y]
  [W'.HasSmallLocalizedHom (Œ¶.functor.obj X) (Œ¶.functor.obj Y)]

/-- The action of a localizer morphism on `SmallHom`. -/
noncomputable def map (f : SmallHom.{w} W X Y) :
    SmallHom.{w'} W' (Œ¶.functor.obj X) (Œ¶.functor.obj Y) :=
  (equiv W' W'.Q).symm
    (Iso.homEquiv ((CatCommSq.iso Œ¶.functor W.Q W'.Q _).symm.app _)
      ((CatCommSq.iso Œ¶.functor W.Q W'.Q _).symm.app _)
      ((Œ¶.localizedFunctor W.Q W'.Q).map ((equiv W W.Q) f)))

lemma equiv_map (G : D ‚•§ D') (e : Œ¶.functor ‚ãô L' ‚âÖ L ‚ãô G) (f : SmallHom.{w} W X Y) :
    (equiv W' L') (f.map Œ¶) = e.hom.app X ‚â´ G.map (equiv W L f) ‚â´ e.inv.app Y := by
  obtain ‚ü®g, rfl‚ü© := (equiv W W.Q).symm.surjective f
  simp only [map, Equiv.apply_symm_apply]
  let G' := Œ¶.localizedFunctor W.Q W'.Q
  let Œ≤ := CatCommSq.iso Œ¶.functor W.Q W'.Q G'
  let E := (uniq W.Q L W).functor
  let Œ± : W.Q ‚ãô E ‚âÖ L := compUniqFunctor W.Q L W
  let E' := (uniq W'.Q L' W').functor
  let Œ±' : W'.Q ‚ãô E' ‚âÖ L' := compUniqFunctor W'.Q L' W'
  rw [equiv_equiv_symm W W.Q L E Œ±, equiv_equiv_symm W' W'.Q L' E' Œ±']
  change Œ±'.inv.app _ ‚â´ E'.map (Œ≤.hom.app X ‚â´ G'.map g ‚â´ Œ≤.inv.app Y) ‚â´ _ = _
  let Œ≥ : G' ‚ãô E' ‚âÖ E ‚ãô G := liftNatIso W.Q W (W.Q ‚ãô G' ‚ãô E') (W.Q ‚ãô E ‚ãô G) _ _
    ((Functor.associator _ _ _).symm ‚â™‚â´ isoWhiskerRight Œ≤.symm E' ‚â™‚â´
      Functor.associator _ _ _ ‚â™‚â´ isoWhiskerLeft _ Œ±' ‚â™‚â´ e ‚â™‚â´
      isoWhiskerRight Œ±.symm G ‚â™‚â´ Functor.associator _ _ _)
  have hŒ≥ : ‚àÄ (X : C), Œ≥.hom.app (W.Q.obj X) =
      E'.map (Œ≤.inv.app X) ‚â´ Œ±'.hom.app (Œ¶.functor.obj X) ‚â´
        e.hom.app X ‚â´ G.map (Œ±.inv.app X) := fun X ‚Ü¶ by
    dsimp [Œ≥]
    rw [liftNatTrans_app]
    dsimp
    rw [id_comp, id_comp, comp_id]
    erw [id_comp, comp_id]
  simp only [Functor.map_comp, assoc]
  erw [‚Üê NatIso.naturality_1 Œ≥]
  simp only [Functor.comp_map, ‚Üê cancel_epi (e.inv.app X), ‚Üê cancel_epi (G.map (Œ±.hom.app X)),
    ‚Üê cancel_epi (Œ≥.hom.app (W.Q.obj X)), assoc, Iso.inv_hom_id_app_assoc,
    ‚Üê Functor.map_comp_assoc, Iso.hom_inv_id_app, Functor.map_id, id_comp,
    Iso.hom_inv_id_app_assoc]
  simp only [hŒ≥, assoc, ‚Üê Functor.map_comp_assoc, Iso.inv_hom_id_app,
    Functor.map_id, id_comp, Iso.hom_inv_id_app_assoc,
    Iso.inv_hom_id_app_assoc, Iso.hom_inv_id_app, Functor.comp_obj, comp_id]

end

variable {X Y Z : C}

variable [HasSmallLocalizedHom.{w} W X Y] [HasSmallLocalizedHom.{w} W Y Z]
  [HasSmallLocalizedHom.{w} W X Z]
  [W'.HasSmallLocalizedHom (Œ¶.functor.obj X) (Œ¶.functor.obj Y)]
  [W'.HasSmallLocalizedHom (Œ¶.functor.obj Y) (Œ¶.functor.obj Z)]
  [W'.HasSmallLocalizedHom (Œ¶.functor.obj X) (Œ¶.functor.obj Z)]

lemma map_comp (f : SmallHom.{w} W X Y) (g : SmallHom.{w} W Y Z) :
    (f.comp g).map Œ¶ = (f.map Œ¶).comp (g.map Œ¶) := by
  apply (equiv W' W'.Q).injective
  simp [equiv_map Œ¶ W.Q W'.Q (Œ¶.localizedFunctor W.Q W'.Q) (CatCommSq.iso _ _ _ _), equiv_comp]

end SmallHom

end Localization

end CategoryTheory
