import Mathlib.CategoryTheory.Localization.Bifunctor
import Mathlib.CategoryTheory.Monoidal.Functor

namespace CategoryTheory

open Category MonoidalCategory

namespace MonoidalCategory

variable {C : Type*} [Category C] [MonoidalCategoryStruct C]

def Pentagon (Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ Y‚ÇÑ : C) : Prop :=
    (Œ±_ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ).hom ‚ñ∑ Y‚ÇÑ ‚â´ (Œ±_ Y‚ÇÅ (Y‚ÇÇ ‚äó Y‚ÇÉ) Y‚ÇÑ).hom ‚â´ Y‚ÇÅ ‚óÅ (Œ±_ Y‚ÇÇ Y‚ÇÉ Y‚ÇÑ).hom =
      (Œ±_ (Y‚ÇÅ ‚äó Y‚ÇÇ) Y‚ÇÉ Y‚ÇÑ).hom ‚â´ (Œ±_ Y‚ÇÅ Y‚ÇÇ (Y‚ÇÉ ‚äó Y‚ÇÑ)).hom

variable (naturality : ‚àÄ {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : C}
    (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ),
    ((f‚ÇÅ ‚äó f‚ÇÇ) ‚äó f‚ÇÉ) ‚â´ (Œ±_ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ).hom = (Œ±_ X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom ‚â´ (f‚ÇÅ ‚äó f‚ÇÇ ‚äó f‚ÇÉ))
    (tensorHom_def : ‚àÄ {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : C} (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (g : X‚ÇÇ ‚ü∂ Y‚ÇÇ), f ‚äó g = f ‚ñ∑ X‚ÇÇ ‚â´ Y‚ÇÅ ‚óÅ g)

variable {X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ Y‚ÇÑ : C} (e‚ÇÅ : X‚ÇÅ ‚âÖ Y‚ÇÅ) (e‚ÇÇ : X‚ÇÇ ‚âÖ Y‚ÇÇ) (e‚ÇÉ : X‚ÇÉ ‚âÖ Y‚ÇÉ)
  (e‚ÇÑ : X‚ÇÑ ‚âÖ Y‚ÇÑ)

lemma pentagon_of_iso (h : Pentagon X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ) : Pentagon Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ Y‚ÇÑ := by
  dsimp [Pentagon] at h ‚ä¢
  have := @naturality
  refine' Eq.trans _ (((((e‚ÇÅ.inv ‚äó e‚ÇÇ.inv) ‚äó e‚ÇÉ.inv) ‚äó e‚ÇÑ.inv) ‚â´= h =‚â´ (e‚ÇÅ.hom ‚äó e‚ÇÇ.hom ‚äó e‚ÇÉ.hom ‚äó e‚ÇÑ.hom)).trans sorry)
  ¬∑ dsimp
    simp only [assoc]
    --rw [‚Üê tensorHom_id]
    sorry

end MonoidalCategory

variable {C D : Type*} [Category C] [Category D] (L : C ‚•§ D) (W : MorphismProperty C)
  [MonoidalCategory C]

namespace MorphismProperty

class Monoidal extends W.IsMultiplicative : Prop where
  whiskerLeft (X : C) {Y‚ÇÅ Y‚ÇÇ : C} (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) (hg : W g) : W (X ‚óÅ g)
  whiskerRight {X‚ÇÅ X‚ÇÇ : C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (hf : W f) (Y : C) : W (f ‚ñ∑ Y)

variable [W.Monoidal]

lemma whiskerLeft_mem (X : C) {Y‚ÇÅ Y‚ÇÇ : C} (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) (hg : W g) : W (X ‚óÅ g) :=
  Monoidal.whiskerLeft _ _ hg

lemma whiskerRight_mem {X‚ÇÅ X‚ÇÇ : C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (hf : W f) (Y : C) : W (f ‚ñ∑ Y) :=
  Monoidal.whiskerRight _ hf Y

lemma tensorHom_mem {X‚ÇÅ X‚ÇÇ : C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) {Y‚ÇÅ Y‚ÇÇ : C} (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
    (hf : W f) (hg : W g) : W (f ‚äó g) := by
  rw [tensorHom_def]
  exact comp_mem _ _ _ (whiskerRight_mem _ _ hf _) (whiskerLeft_mem _ _ _ hg)

end MorphismProperty

@[nolint unusedArguments]
def LocalizedMonoidal (L : C ‚•§ D) (W : MorphismProperty C)
    [W.Monoidal] [L.IsLocalization W] {unit : D}
    (_ : L.obj (ùüô_ C) ‚âÖ unit) := D

variable [W.Monoidal] [L.IsLocalization W] {unit : D} (Œµ : L.obj (ùüô_ C) ‚âÖ unit)

namespace Localization

instance : Category (LocalizedMonoidal L W Œµ) :=
  inferInstanceAs (Category D)

namespace Monoidal

def toMonoidalCategory : C ‚•§ LocalizedMonoidal L W Œµ := L

abbrev Œµ' : (toMonoidalCategory L W Œµ).obj (ùüô_ C) ‚âÖ unit := Œµ

local notation "L'" => toMonoidalCategory L W Œµ

instance : (L').IsLocalization W := inferInstanceAs (L.IsLocalization W)

lemma isInvertedBy‚ÇÇ :
    MorphismProperty.IsInvertedBy‚ÇÇ W W
      ((whiskeringRight‚ÇÇ' _ _ L').obj (curriedTensor C)) := by
  rintro ‚ü®X‚ÇÅ, Y‚ÇÅ‚ü© ‚ü®X‚ÇÇ, Y‚ÇÇ‚ü© ‚ü®f‚ÇÅ, f‚ÇÇ‚ü© ‚ü®hf‚ÇÅ, hf‚ÇÇ‚ü©
  have := Localization.inverts L' W _ (W.whiskerRight_mem f‚ÇÅ hf‚ÇÅ Y‚ÇÅ)
  have := Localization.inverts L' W _ (W.whiskerLeft_mem X‚ÇÇ f‚ÇÇ hf‚ÇÇ)
  dsimp
  infer_instance

noncomputable abbrev tensorBifunctor :
    LocalizedMonoidal L W Œµ ‚•§ LocalizedMonoidal L W Œµ ‚•§ LocalizedMonoidal L W Œµ :=
  Localization.lift‚ÇÇ _ (isInvertedBy‚ÇÇ L W Œµ) L L

noncomputable abbrev tensorBifunctorIso :
    (whiskeringLeft‚ÇÇObjObj L' L' D).obj (tensorBifunctor L W Œµ) ‚âÖ
      (whiskeringRight‚ÇÇ' C C L').obj (curriedTensor C) :=
  Lifting‚ÇÇ.iso L L W W (((whiskeringRight‚ÇÇ' _ _ L').obj (curriedTensor C))) (tensorBifunctor L W Œµ)

noncomputable abbrev tensorLeftFunctor (X : LocalizedMonoidal L W Œµ) :
    LocalizedMonoidal L W Œµ ‚•§ LocalizedMonoidal L W Œµ := (tensorBifunctor L W Œµ).obj X

noncomputable abbrev tensorRightFunctor (Y : LocalizedMonoidal L W Œµ) :
    LocalizedMonoidal L W Œµ ‚•§ LocalizedMonoidal L W Œµ :=
  (tensorBifunctor L W Œµ).flip.obj Y

noncomputable instance (X : C) :
    Lifting L' W (tensorLeft X ‚ãô L') (tensorLeftFunctor L W Œµ ((L').obj X)) :=
  inferInstanceAs (Lifting L W ((((whiskeringRight‚ÇÇ' _ _ L').obj (curriedTensor C))).obj X)
    ((tensorBifunctor L W Œµ).obj (L.obj X)))

noncomputable instance (Y : C) :
    Lifting L' W (tensorRight Y ‚ãô L') (tensorRightFunctor L W Œµ ((L').obj Y)) :=
  inferInstanceAs (Lifting L W ((((whiskeringRight‚ÇÇ' _ _ L').obj (curriedTensor C))).flip.obj Y)
    ((tensorBifunctor L W Œµ).flip.obj (L.obj Y)))

noncomputable def leftUnitor : tensorLeftFunctor L W Œµ unit ‚âÖ ùü≠ _ :=
  (tensorBifunctor L W Œµ).mapIso Œµ.symm ‚â™‚â´
    Localization.liftNatIso L' W (tensorLeft (ùüô_ C) ‚ãô L') L'
      (tensorLeftFunctor L W Œµ ((L').obj (ùüô_ _))) _
      (isoWhiskerRight (leftUnitorNatIso C) _ ‚â™‚â´ L.leftUnitor)

noncomputable def rightUnitor : tensorRightFunctor L W Œµ unit ‚âÖ ùü≠ _ :=
  (tensorBifunctor L W Œµ).flip.mapIso Œµ.symm ‚â™‚â´
    Localization.liftNatIso L' W (tensorRight (ùüô_ C) ‚ãô L') L'
      (tensorRightFunctor L W Œµ ((L').obj (ùüô_ _))) _
      (isoWhiskerRight (rightUnitorNatIso C) _ ‚â™‚â´ L.leftUnitor)

noncomputable instance monoidalCategoryStruct :
    MonoidalCategoryStruct (LocalizedMonoidal L W Œµ) where
  tensorObj X Y := ((tensorBifunctor L W Œµ).obj X).obj Y
  whiskerLeft X _ _ g := (tensorLeftFunctor L W Œµ X).map g
  whiskerRight f Y := (tensorRightFunctor L W Œµ Y).map f
  tensorUnit := unit
  associator := sorry -- needs localization of trifunctors
  leftUnitor Y := (leftUnitor L W Œµ).app Y
  rightUnitor X := (rightUnitor L W Œµ).app X

noncomputable def Œº (X Y : C) : (L').obj X ‚äó (L').obj Y ‚âÖ (L').obj (X ‚äó Y) :=
  ((tensorBifunctorIso L W Œµ).app X).app Y

@[reassoc (attr := simp)]
lemma Œº_natural_left {X‚ÇÅ X‚ÇÇ : C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (Y : C) :
    (L').map f ‚ñ∑ (L').obj Y ‚â´ (Œº L W Œµ X‚ÇÇ Y).hom =
      (Œº L W Œµ X‚ÇÅ Y).hom ‚â´ (L').map (f ‚ñ∑ Y) :=
  NatTrans.naturality_app (tensorBifunctorIso L W Œµ).hom Y f

@[reassoc (attr := simp)]
lemma Œº_natural_right (X : C) {Y‚ÇÅ Y‚ÇÇ : C} (g : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) :
    (L').obj X ‚óÅ (L').map g ‚â´ (Œº L W Œµ X Y‚ÇÇ).hom =
      (Œº L W Œµ X Y‚ÇÅ).hom ‚â´ (toMonoidalCategory L W Œµ).map (X ‚óÅ g) :=
  ((tensorBifunctorIso L W Œµ).hom.app X).naturality g

lemma leftUnitor_hom_app (Y : C) :
    (Œª_ ((L').obj Y)).hom =
      (Œµ' L W Œµ).inv ‚ñ∑ (L').obj Y ‚â´ (Œº _ _ _ _ _).hom ‚â´ (L').map (Œª_ Y).hom := by
  dsimp [monoidalCategoryStruct, leftUnitor]
  rw [liftNatTrans_app]
  dsimp
  rw [assoc]
  change _ ‚â´ (Œº L W Œµ  _ _).hom ‚â´ _ ‚â´ ùüô _ ‚â´ ùüô _ = _
  simp only [comp_id]

lemma rightUnitor_hom_app (X : C) :
    (œÅ_ ((L').obj X)).hom =
      (L').obj X ‚óÅ (Œµ' L W Œµ).inv ‚â´ (Œº _ _ _ _ _).hom ‚â´
        (L').map (œÅ_ X).hom := by
  dsimp [monoidalCategoryStruct, rightUnitor]
  rw [liftNatTrans_app]
  dsimp
  rw [assoc]
  change _ ‚â´ (Œº L W Œµ  _ _).hom ‚â´ _ ‚â´ ùüô _ ‚â´ ùüô _ = _
  simp only [comp_id]

lemma associator_naturality {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : LocalizedMonoidal L W Œµ}
    (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ) :
    ((f‚ÇÅ ‚äó f‚ÇÇ) ‚äó f‚ÇÉ) ‚â´ (Œ±_ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ).hom = (Œ±_ X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom ‚â´ (f‚ÇÅ ‚äó f‚ÇÇ ‚äó f‚ÇÉ) := sorry

variable {L W Œµ} in
lemma pentagon (Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ Y‚ÇÑ : LocalizedMonoidal L W Œµ) :
    Pentagon Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ Y‚ÇÑ := by
  have : (L').EssSurj := Localization.essSurj L' W
  obtain ‚ü®X‚ÇÅ, ‚ü®e‚ÇÅ‚ü©‚ü© : ‚àÉ X‚ÇÅ, Nonempty ((L').obj X‚ÇÅ ‚âÖ Y‚ÇÅ) := ‚ü®_, ‚ü®(L').objObjPreimageIso Y‚ÇÅ‚ü©‚ü©
  obtain ‚ü®X‚ÇÇ, ‚ü®e‚ÇÇ‚ü©‚ü© : ‚àÉ X‚ÇÇ, Nonempty ((L').obj X‚ÇÇ ‚âÖ Y‚ÇÇ) := ‚ü®_, ‚ü®(L').objObjPreimageIso Y‚ÇÇ‚ü©‚ü©
  obtain ‚ü®X‚ÇÉ, ‚ü®e‚ÇÉ‚ü©‚ü© : ‚àÉ X‚ÇÉ, Nonempty ((L').obj X‚ÇÉ ‚âÖ Y‚ÇÉ) := ‚ü®_, ‚ü®(L').objObjPreimageIso Y‚ÇÉ‚ü©‚ü©
  obtain ‚ü®X‚ÇÑ, ‚ü®e‚ÇÑ‚ü©‚ü© : ‚àÉ X‚ÇÑ, Nonempty ((L').obj X‚ÇÑ ‚âÖ Y‚ÇÑ) := ‚ü®_, ‚ü®(L').objObjPreimageIso Y‚ÇÑ‚ü©‚ü©
  apply pentagon_of_iso (associator_naturality L W Œµ) e‚ÇÅ e‚ÇÇ e‚ÇÉ e‚ÇÑ
  dsimp [Pentagon]
  sorry

noncomputable instance :
    MonoidalCategory (LocalizedMonoidal L W Œµ) where
  tensorHom_def := by intros; simp [monoidalCategoryStruct]
  tensor_id := by intros; simp [monoidalCategoryStruct]
  tensor_comp := by intros; simp [monoidalCategoryStruct]
  whiskerLeft_id := by intros; simp [monoidalCategoryStruct]
  id_whiskerRight := by intros; simp [monoidalCategoryStruct]
  associator_naturality {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ} f‚ÇÅ f‚ÇÇ f‚ÇÉ := by
    sorry
  leftUnitor_naturality := by intros; simp [monoidalCategoryStruct]
  rightUnitor_naturality f := (rightUnitor L W Œµ).hom.naturality f
  pentagon := pentagon
  triangle := sorry

end Monoidal

end Localization

open Localization.Monoidal

noncomputable def toLocalizedMonoidal :
    MonoidalFunctor C (LocalizedMonoidal L W Œµ) where
  toFunctor := toMonoidalCategory L W Œµ
  Œµ := Œµ.inv
  Œº X Y := (Œº L W Œµ X Y).hom
  associativity := sorry
  left_unitality Y := leftUnitor_hom_app L W Œµ Y
  right_unitality X := rightUnitor_hom_app L W Œµ X

end CategoryTheory
