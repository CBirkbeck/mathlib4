import Mathlib.CategoryTheory.Localization.LocalizerMorphism

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Category Localization

variable {C‚ÇÅ : Type u‚ÇÅ} {C‚ÇÇ : Type u‚ÇÇ}
  [Category.{v‚ÇÅ} C‚ÇÅ] [Category.{v‚ÇÇ} C‚ÇÇ]
  {W‚ÇÅ : MorphismProperty C‚ÇÅ} {W‚ÇÇ : MorphismProperty C‚ÇÇ}

namespace LocalizerMorphism

variable (Œ¶ : LocalizerMorphism W‚ÇÅ W‚ÇÇ)

structure RightResolution (X‚ÇÇ : C‚ÇÇ) where
  {X‚ÇÅ : C‚ÇÅ}
  w : X‚ÇÇ ‚ü∂ Œ¶.functor.obj X‚ÇÅ
  hw : W‚ÇÇ w

section

variable {Œ¶ X‚ÇÇ}

lemma RightResolution.mk_surjective (R : Œ¶.RightResolution X‚ÇÇ) :
    ‚àÉ (X‚ÇÅ : C‚ÇÅ) (w : X‚ÇÇ ‚ü∂ Œ¶.functor.obj X‚ÇÅ) (hw : W‚ÇÇ w), R = RightResolution.mk w hw :=
  ‚ü®_, R.w, R.hw, rfl‚ü©

end

abbrev HasRightResolutions := ‚àÄ (X‚ÇÇ : C‚ÇÇ), Nonempty (Œ¶.RightResolution X‚ÇÇ)

namespace RightResolution

variable {Œ¶} {X‚ÇÇ : C‚ÇÇ}

@[ext]
structure Hom (R R' : Œ¶.RightResolution X‚ÇÇ) where
  f : R.X‚ÇÅ ‚ü∂ R'.X‚ÇÅ
  hf : W‚ÇÅ f
  comm : R.w ‚â´ Œ¶.functor.map f = R'.w := by aesop_cat

attribute [reassoc (attr := simp)] Hom.comm

@[simps]
def Hom.id [W‚ÇÅ.ContainsIdentities] (R : Œ¶.RightResolution X‚ÇÇ) : Hom R R where
  f := ùüô _
  hf := W‚ÇÅ.id_mem _

@[simps]
def Hom.comp [W‚ÇÅ.IsMultiplicative] {R R' R'' : Œ¶.RightResolution X‚ÇÇ}
    (œÜ : Hom R R') (œà : Hom R' R'') : Hom R R'' where
  f := œÜ.f ‚â´ œà.f
  hf := W‚ÇÅ.comp_mem _ _ œÜ.hf œà.hf

instance [W‚ÇÅ.IsMultiplicative] : Category (Œ¶.RightResolution X‚ÇÇ) where
  Hom := Hom
  id := Hom.id
  comp := Hom.comp

end RightResolution

section

variable [Œ¶.HasRightResolutions]
    {D‚ÇÇ : Type*} [Category D‚ÇÇ] (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) [L‚ÇÇ.IsLocalization W‚ÇÇ]

lemma essSurj_of_hasRightResolutions : EssSurj (Œ¶.functor ‚ãô L‚ÇÇ) where
  mem_essImage X‚ÇÇ := by
    have : EssSurj L‚ÇÇ := Localization.essSurj L‚ÇÇ W‚ÇÇ
    have R : Œ¶.RightResolution (L‚ÇÇ.objPreimage X‚ÇÇ) := Classical.arbitrary _
    exact ‚ü®R.X‚ÇÅ, ‚ü®(Localization.isoOfHom L‚ÇÇ W‚ÇÇ _ R.hw).symm ‚â™‚â´ L‚ÇÇ.objObjPreimageIso X‚ÇÇ‚ü©‚ü©

lemma isIso_iff_of_hasRightResolutions
    {H : Type*} [Category H] {F G : D‚ÇÇ ‚•§ H} (Œ± : F ‚ü∂ G) :
    IsIso Œ± ‚Üî ‚àÄ (X‚ÇÅ : C‚ÇÅ), IsIso (Œ±.app (L‚ÇÇ.obj (Œ¶.functor.obj X‚ÇÅ))) := by
  constructor
  ¬∑ intros
    infer_instance
  ¬∑ intro hŒ±
    suffices ‚àÄ (X‚ÇÇ : D‚ÇÇ), IsIso (Œ±.app X‚ÇÇ) from NatIso.isIso_of_isIso_app Œ±
    have := Œ¶.essSurj_of_hasRightResolutions L‚ÇÇ
    intro X‚ÇÇ
    rw [‚Üê NatTrans.isIso_app_iff_of_iso Œ± ((Œ¶.functor ‚ãô L‚ÇÇ).objObjPreimageIso X‚ÇÇ)]
    exact hŒ± ((Œ¶.functor ‚ãô L‚ÇÇ).objPreimage X‚ÇÇ)
end

end LocalizerMorphism
