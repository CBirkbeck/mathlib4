import Mathlib.CategoryTheory.Localization.LocalizerMorphism

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Category Localization

variable {C‚ÇÅ : Type u‚ÇÅ} {C‚ÇÇ : Type u‚ÇÇ}
  [Category.{v‚ÇÅ} C‚ÇÅ] [Category.{v‚ÇÇ} C‚ÇÇ]
  {W‚ÇÅ : MorphismProperty C‚ÇÅ} {W‚ÇÇ : MorphismProperty C‚ÇÇ}

namespace LocalizerMorphism

variable (Œ¶ : LocalizerMorphism W‚ÇÅ W‚ÇÇ)

structure RightResolution (X‚ÇÇ : C‚ÇÇ) where
  {X‚ÇÅ : C‚ÇÅ}
  w : X‚ÇÇ ‚ü∂ Œ¶.functor.obj X‚ÇÅ
  hw : W‚ÇÇ w

class HasRightResolutions : Prop where
  nonempty_rightResolution (X‚ÇÇ : C‚ÇÇ) : Nonempty (Œ¶.RightResolution X‚ÇÇ)

namespace RightResolution

variable {Œ¶} {X‚ÇÇ : C‚ÇÇ}

@[ext]
structure Hom (R R' : Œ¶.RightResolution X‚ÇÇ) where
  f : R.X‚ÇÅ ‚ü∂ R'.X‚ÇÅ
  hf : W‚ÇÅ f
  comm : R.w ‚â´ Œ¶.functor.map f = R'.w := by aesop_cat

attribute [reassoc (attr := simp)] Hom.comm

@[simps]
def Hom.id [W‚ÇÅ.ContainsIdentities] (R : Œ¶.RightResolution X‚ÇÇ) : Hom R R where
  f := ùüô _
  hf := W‚ÇÅ.id_mem _

@[simps]
def Hom.comp [W‚ÇÅ.IsMultiplicative] {R R' R'' : Œ¶.RightResolution X‚ÇÇ}
    (œÜ : Hom R R') (œà : Hom R' R'') : Hom R R'' where
  f := œÜ.f ‚â´ œà.f
  hf := W‚ÇÅ.comp_mem _ _ œÜ.hf œà.hf

instance [W‚ÇÅ.IsMultiplicative] : Category (Œ¶.RightResolution X‚ÇÇ) where
  Hom := Hom
  id := Hom.id
  comp := Hom.comp

end RightResolution

end LocalizerMorphism
