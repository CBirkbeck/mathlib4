import Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer
import Mathlib.CategoryTheory.Enriched.Basic
import Mathlib.CategoryTheory.Closed.Monoidal
import Mathlib.CategoryTheory.Monoidal.FunctorCategory

universe v v' v'' u u' u''

namespace CategoryTheory

open Limits MonoidalCategory

variable {C : Type u} [Category.{v} C] {D : Type u'} [Category.{v'} D]
  [MonoidalCategory D] [MonoidalClosed D]

section

lemma MonoidalClosed.curry_natural_right'
    {X Y Z T : D} (f : X ‚ü∂ Y) (g : Y ‚äó Z ‚ü∂ T) :
    curry (f ‚ñ∑ Z ‚â´ g) = curry g ‚â´ (pre f).app T := by
  obtain ‚ü®h, rfl‚ü© : ‚àÉ h, g = uncurry h := ‚ü®curry g, by simp‚ü©
  apply uncurry_injective
  rw [uncurry_curry, curry_uncurry, uncurry_natural_left, uncurry_pre,
    whisker_exchange_assoc, uncurry_eq]

def ihom.id (X : D) : ùüô_ D ‚ü∂ (ihom X).obj X :=
  MonoidalClosed.curry (œÅ_ _).hom

def ihom.comp (X Y Z : D) : (ihom X).obj Y ‚äó (ihom Y).obj Z ‚ü∂ (ihom X).obj Z :=
  MonoidalClosed.curry ((Œ±_ _ _ _).inv ‚â´ (ihom.ev _).app _ ‚ñ∑ _ ‚â´ (ihom.ev _).app _)

@[reassoc]
lemma ihom.id_pre_app {X Y : D} (f : X ‚ü∂ Y) :
    ihom.id Y ‚â´ (MonoidalClosed.pre f).app Y =
      ihom.id X ‚â´ (ihom _).map f := by
  dsimp [id]
  rw [‚Üê MonoidalClosed.curry_natural_right, ‚Üê MonoidalCategory.rightUnitor_naturality,
    ‚Üê MonoidalClosed.curry_natural_right']

-- is it what it actually needed?
@[reassoc]
lemma ihom.map_tensor_comp_pre_app {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : D}
    (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ) :
    ((ihom Y‚ÇÅ).map f‚ÇÇ ‚äó (ihom Y‚ÇÇ).map f‚ÇÉ) ‚â´
    ihom.comp Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ ‚â´ (MonoidalClosed.pre f‚ÇÅ).app Y‚ÇÉ =
      ((MonoidalClosed.pre f‚ÇÅ).app X‚ÇÇ ‚äó (MonoidalClosed.pre f‚ÇÇ).app X‚ÇÉ) ‚â´
        ihom.comp X‚ÇÅ X‚ÇÇ X‚ÇÉ ‚â´ (ihom X‚ÇÅ).map f‚ÇÉ :=
  sorry

end

namespace Functor

section

variable (F G : C ‚•§ D)

@[simps]
def enrichedHom.multicospanIndex : MulticospanIndex D where
  L := ULift C
  R := Arrow C
  fstTo f := ULift.up f.left
  sndTo f := ULift.up f.right
  left := fun ‚ü®X‚ü© ‚Ü¶ (ihom (F.obj X)).obj (G.obj X)
  right f := (ihom (F.obj f.left)).obj (G.obj f.right)
  fst f := (ihom _).map (G.map f.hom)
  snd f := (MonoidalClosed.pre (F.map f.hom)).app (G.obj f.right)

abbrev HasEnrichedHom := HasMultiequalizer (enrichedHom.multicospanIndex F G)

noncomputable def enrichedHom [HasEnrichedHom F G] : D :=
  multiequalizer (enrichedHom.multicospanIndex F G)

end

namespace enrichedHom

section

variable (F G : C ‚•§ D) [HasEnrichedHom F G] (X : C)

noncomputable abbrev app : enrichedHom F G ‚ü∂ (ihom (F.obj X)).obj (G.obj X) :=
  Multiequalizer.Œπ (enrichedHom.multicospanIndex F G) (ULift.up X)

end

noncomputable def id (F : C ‚•§ D) [HasEnrichedHom F F] : ùüô_ D ‚ü∂ enrichedHom F F :=
    Multiequalizer.lift _ _ (fun ‚ü®X‚ü© ‚Ü¶ ihom.id _)
      (fun _ ‚Ü¶ by dsimp; rw [ihom.id_pre_app])

noncomputable def comp (F G H : C ‚•§ D)
    [HasEnrichedHom F G] [HasEnrichedHom G H] [HasEnrichedHom F H] :
    F.enrichedHom G ‚äó G.enrichedHom H ‚ü∂ F.enrichedHom H :=
  Multiequalizer.lift _ _ (fun ‚ü®X‚ü© ‚Ü¶ (app F G X ‚äó app G H X) ‚â´ ihom.comp _ _ _)
    (fun a ‚Ü¶ by
      dsimp
      simp only [Category.assoc]
      have := ihom.map_tensor_comp_pre_app (F.map a.hom)
        (G.map a.hom) (H.map a.hom)
      dsimp at this
      dsimp [app]
      sorry)

@[reassoc (attr := simp)]
lemma id_comp (F G : C ‚•§ D) [HasEnrichedHom F G] [HasEnrichedHom F F] :
    (Œª_ _).inv ‚â´ enrichedHom.id F ‚ñ∑ _ ‚â´ enrichedHom.comp F F G = ùüô (F.enrichedHom G) := by
  sorry

@[reassoc (attr := simp)]
lemma comp_id (F G : C ‚•§ D) [HasEnrichedHom F G] [HasEnrichedHom G G] :
    (œÅ_ _).inv ‚â´ _ ‚óÅ enrichedHom.id G ‚â´ enrichedHom.comp F G G = ùüô (F.enrichedHom G) := by
  sorry

@[reassoc (attr := simp)]
lemma assoc (F‚ÇÅ F‚ÇÇ F‚ÇÉ F‚ÇÑ : C ‚•§ D)
    [HasEnrichedHom F‚ÇÅ F‚ÇÇ] [HasEnrichedHom F‚ÇÇ F‚ÇÉ] [HasEnrichedHom F‚ÇÉ F‚ÇÑ] [HasEnrichedHom F‚ÇÅ F‚ÇÉ]
    [HasEnrichedHom F‚ÇÅ F‚ÇÑ] [HasEnrichedHom F‚ÇÇ F‚ÇÑ] :
    (Œ±_ (F‚ÇÅ.enrichedHom F‚ÇÇ) (F‚ÇÇ.enrichedHom F‚ÇÉ) (F‚ÇÉ.enrichedHom F‚ÇÑ)).inv ‚â´
    enrichedHom.comp F‚ÇÅ F‚ÇÇ F‚ÇÉ ‚ñ∑ F‚ÇÉ.enrichedHom F‚ÇÑ ‚â´ enrichedHom.comp F‚ÇÅ F‚ÇÉ F‚ÇÑ =
  F‚ÇÅ.enrichedHom F‚ÇÇ ‚óÅ enrichedHom.comp F‚ÇÇ F‚ÇÉ F‚ÇÑ ‚â´ enrichedHom.comp F‚ÇÅ F‚ÇÇ F‚ÇÑ := sorry

end enrichedHom

variable [‚àÄ (F G : C ‚•§ D), HasEnrichedHom F G]

noncomputable instance : EnrichedCategory D (C ‚•§ D) where
  Hom F G := enrichedHom F G
  id F := enrichedHom.id F
  comp F G H := enrichedHom.comp F G H

end Functor

end CategoryTheory
