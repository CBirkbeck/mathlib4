import Mathlib.CategoryTheory.Bicategory.LocallyDiscrete

namespace CategoryTheory

namespace Bicategory

universe w v u u‚ÇÅ

variable {B : Type u} [Bicategory.{w, v} B]

structure Monad (a : B) where
  -- a : B
  t : a ‚ü∂ a
  Œº : t ‚â´ t ‚ü∂ t
  Œ∑ : ùüô a ‚ü∂ t
  assoc : Œº ‚ñ∑ t ‚â´ Œº = (Œ±_ _ _ _).hom ‚â´ t ‚óÅ Œº ‚â´ Œº := by aesop_cat
  left_unit : Œ∑ ‚ñ∑ t ‚â´ Œº = (Œª_ t).hom := by aesop_cat
  right_unit : t ‚óÅ Œ∑ ‚â´ Œº = (œÅ_ t).hom := by aesop_cat

-- local notation "ùü≠" => (LocallyDiscrete (Discrete PUnit))

namespace Monad

def ofLaxFromPunit (F : LaxFunctor (LocallyDiscrete (Discrete PUnit.{u‚ÇÅ+1})) B) :
    Monad (F.obj ‚ü®‚ü®PUnit.unit‚ü©‚ü©) where
  t := F.map (ùüô _)
  Œº := F.mapComp _ _ ‚â´ F.map‚ÇÇ (œÅ_ _).hom
  Œ∑ := F.mapId _
  assoc := by
    set a : LocallyDiscrete (Discrete PUnit.{u‚ÇÅ+1}) := ‚ü®‚ü®PUnit.unit‚ü©‚ü©
    simp only [comp_whiskerRight, Category.assoc, whiskerLeft_comp]
    rw [‚Üê F.mapComp_naturality_left_assoc, F.mapComp_assoc_left_assoc,
      ‚Üê F.mapComp_naturality_right_assoc]
    simp
  left_unit := (F.map‚ÇÇ_leftUnitor_hom _).symm
  right_unit := (F.map‚ÇÇ_rightUnitor_hom _).symm

end Monad

end Bicategory

end CategoryTheory
