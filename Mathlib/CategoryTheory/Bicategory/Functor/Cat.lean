/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Christian Merten
-/
import Mathlib.CategoryTheory.Bicategory.Functor.Strict

/-!
# Pseudofunctors to Cat

In this file, the equalities stated in `CategoryTheory.Bicategory.Functor.Strict`
for pseudofunctors (from a strict bicategory) are rephrased in the particular
case the target bicategory is `Cat`. Indeed, in that case, the general lemmas
for pseudofunctors involve equalities between natural transformations:
we rephrase them after the application of `NatTrans.app`.

-/

namespace CategoryTheory

open Bicategory

namespace Pseudofunctor

variable {B : Type*} [Bicategory B] [Strict B] (F : Pseudofunctor B Cat)

attribute [local simp] Cat.leftUnitor_hom_app Cat.rightUnitor_hom_app
  Cat.leftUnitor_inv_app Cat.rightUnitor_inv_app
  Cat.associator_hom_app Cat.associator_inv_app

section unitality

variable {b‚ÇÄ b‚ÇÅ : B} (f : b‚ÇÄ ‚ü∂ b‚ÇÅ) (X : F.obj b‚ÇÄ)

lemma mapComp'_comp_id_hom_app :
    (F.mapComp' f (ùüô b‚ÇÅ) f).hom.app X = (F.mapId b‚ÇÅ).inv.app ((F.map f).obj X) := by
  simp [mapComp'_comp_id]

lemma mapComp'_comp_id_inv_app :
    (F.mapComp' f (ùüô b‚ÇÅ) f).inv.app X = (F.mapId b‚ÇÅ).hom.app ((F.map f).obj X) := by
  simp [mapComp'_comp_id]

lemma mapComp'_id_comp_hom_app :
    (F.mapComp' (ùüô b‚ÇÄ) f f).hom.app X = (F.map f).map ((F.mapId b‚ÇÄ).inv.app X) := by
  simp [mapComp'_id_comp]

lemma mapComp'_id_comp_inv_app :
    (F.mapComp' (ùüô b‚ÇÄ) f f).inv.app X = (F.map f).map ((F.mapId b‚ÇÄ).hom.app X) := by
  simp [mapComp'_id_comp]

end unitality

section associativity

variable {b‚ÇÄ b‚ÇÅ b‚ÇÇ b‚ÇÉ : B} (f‚ÇÄ‚ÇÅ : b‚ÇÄ ‚ü∂ b‚ÇÅ)
  (f‚ÇÅ‚ÇÇ : b‚ÇÅ ‚ü∂ b‚ÇÇ) (f‚ÇÇ‚ÇÉ : b‚ÇÇ ‚ü∂ b‚ÇÉ) (f‚ÇÄ‚ÇÇ : b‚ÇÄ ‚ü∂ b‚ÇÇ) (f‚ÇÅ‚ÇÉ : b‚ÇÅ ‚ü∂ b‚ÇÉ) (f : b‚ÇÄ ‚ü∂ b‚ÇÉ)
  (h‚ÇÄ‚ÇÇ : f‚ÇÄ‚ÇÅ ‚â´ f‚ÇÅ‚ÇÇ = f‚ÇÄ‚ÇÇ) (h‚ÇÅ‚ÇÉ : f‚ÇÅ‚ÇÇ ‚â´ f‚ÇÇ‚ÇÉ = f‚ÇÅ‚ÇÉ)

@[reassoc]
lemma mapComp'_hom_app_comp_mapComp'_hom_app_map_obj (hf : f‚ÇÄ‚ÇÅ ‚â´ f‚ÇÅ‚ÇÉ = f) (X : F.obj b‚ÇÄ) :
    (F.mapComp' f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÉ f).hom.app X ‚â´
      (F.mapComp' f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÅ‚ÇÉ h‚ÇÅ‚ÇÉ).hom.app ((F.map f‚ÇÄ‚ÇÅ).obj X) =
      (F.mapComp' f‚ÇÄ‚ÇÇ f‚ÇÇ‚ÇÉ f).hom.app X ‚â´
        (F.map f‚ÇÇ‚ÇÉ).map ((F.mapComp' f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÄ‚ÇÇ h‚ÇÄ‚ÇÇ).hom.app X) := by
  simpa using NatTrans.congr_app (F.mapComp'_hom_comp_whiskerLeft_mapComp'_hom
    f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÄ‚ÇÇ f‚ÇÅ‚ÇÉ f h‚ÇÄ‚ÇÇ h‚ÇÅ‚ÇÉ hf) X

@[reassoc]
lemma mapComp'_inv_app_comp_mapComp'_hom_app (hf : f‚ÇÄ‚ÇÅ ‚â´ f‚ÇÅ‚ÇÉ = f) (X : F.obj b‚ÇÄ) :
    (F.mapComp' f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÉ f).inv.app X ‚â´ (F.mapComp' f‚ÇÄ‚ÇÇ f‚ÇÇ‚ÇÉ f).hom.app X =
      (F.mapComp' f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÅ‚ÇÉ h‚ÇÅ‚ÇÉ).hom.app ((F.map f‚ÇÄ‚ÇÅ).obj X) ‚â´
        (F.map f‚ÇÇ‚ÇÉ).map ((F.mapComp' f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÄ‚ÇÇ h‚ÇÄ‚ÇÇ).inv.app X) := by
  simpa using NatTrans.congr_app (F.mapComp'_inv_comp_mapComp'_hom
    f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÄ‚ÇÇ f‚ÇÅ‚ÇÉ f h‚ÇÄ‚ÇÇ h‚ÇÅ‚ÇÉ hf) X

@[reassoc]
lemma mapComp'_inv_app_map_obj_comp_mapComp'_inv_app (hf : f‚ÇÄ‚ÇÅ ‚â´ f‚ÇÅ‚ÇÉ = f) (X : F.obj b‚ÇÄ) :
    (F.mapComp' f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÅ‚ÇÉ h‚ÇÅ‚ÇÉ).inv.app ((F.map f‚ÇÄ‚ÇÅ).obj X) ‚â´ (F.mapComp' f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÉ f).inv.app X =
    (F.map f‚ÇÇ‚ÇÉ).map ((F.mapComp' f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÄ‚ÇÇ h‚ÇÄ‚ÇÇ).inv.app X) ‚â´
      (F.mapComp' f‚ÇÄ‚ÇÇ f‚ÇÇ‚ÇÉ f).inv.app X := by
  simpa using NatTrans.congr_app (F.whiskerLeft_mapComp'_inv_comp_mapComp'_inv
    f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÄ‚ÇÇ f‚ÇÅ‚ÇÉ f h‚ÇÄ‚ÇÇ h‚ÇÅ‚ÇÉ hf) X

@[reassoc]
lemma mapComp'_hom_app_comp_map_map_mapComp'_hom_app (hf : f‚ÇÄ‚ÇÇ ‚â´ f‚ÇÇ‚ÇÉ = f) (X : F.obj b‚ÇÄ) :
    (F.mapComp' f‚ÇÄ‚ÇÇ f‚ÇÇ‚ÇÉ f).hom.app X ‚â´ (F.map f‚ÇÇ‚ÇÉ).map ((F.mapComp' f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÄ‚ÇÇ h‚ÇÄ‚ÇÇ).hom.app X) =
      (F.mapComp' f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÉ f).hom.app X ‚â´
        (F.mapComp' f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÅ‚ÇÉ h‚ÇÅ‚ÇÉ).hom.app ((F.map f‚ÇÄ‚ÇÅ).obj X) := by
  simpa using NatTrans.congr_app (F.mapComp'_hom_comp_mapComp'_hom_whiskerRight
    f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÄ‚ÇÇ f‚ÇÅ‚ÇÉ f h‚ÇÄ‚ÇÇ h‚ÇÅ‚ÇÉ hf) X

@[reassoc]
lemma map_map_mapComp'_inv_app_comp_mapComp'_inv_app (hf : f‚ÇÄ‚ÇÇ ‚â´ f‚ÇÇ‚ÇÉ = f) (X : F.obj b‚ÇÄ) :
    (F.map f‚ÇÇ‚ÇÉ).map ((F.mapComp' f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÄ‚ÇÇ h‚ÇÄ‚ÇÇ).inv.app X) ‚â´ (F.mapComp' f‚ÇÄ‚ÇÇ f‚ÇÇ‚ÇÉ f).inv.app X =
    (F.mapComp' f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÅ‚ÇÉ h‚ÇÅ‚ÇÉ).inv.app ((F.map f‚ÇÄ‚ÇÅ).obj X) ‚â´
      (F.mapComp' f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÉ f).inv.app X := by
  simpa using NatTrans.congr_app (F.mapComp'_inv_whiskerRight_comp_mapComp'_inv
    f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÄ‚ÇÇ f‚ÇÅ‚ÇÉ f h‚ÇÄ‚ÇÇ h‚ÇÅ‚ÇÉ hf) X

end associativity

end Pseudofunctor

end CategoryTheory
