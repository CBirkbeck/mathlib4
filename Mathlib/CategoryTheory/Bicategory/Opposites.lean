/-
Copyright (c) 2024 Calle S├Хnne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Calle S├Хnne
-/
import Mathlib.CategoryTheory.Bicategory.LocallyDiscrete
import Mathlib.CategoryTheory.Opposites

/-!
# Opposite bicategories

We provide a bicategory instance on `Cрхњрхќ` given a bicategory instance on `C`.
The morphisms `X РЪХ Y` in `Cрхњрхќ` are the morphisms `Y РЪХ X` in `C`.
The natural transformations `F РЪХ G` in `Cрхњрхќ` are the natural transformations `unop F РЪХ unop G` in
`C`, in other words the directions of natural transformations are preserved.

We also provide various lemmas in going between `LocallyDiscrete Cрхњрхќ` and `(LocallyDiscrete C)рхњрхќ`.

# Remarks
There are multiple notions of opposite categories for bicategories.
- There is `Cрхњрхќ` as defined above, also known as the "1-cell dual".
- There is the "2-cell dual", `CрХюрхњ` where only the natural transformations are reversed
- There is the "bi-dual" `CрХюрхњрхњрхќ` where the directions of both the morphisms and the natural
  transformations are reversed.
-/

universe w v u

open CategoryTheory Bicategory Opposite


/-- The type of objects of the 1-cell opposite of a bicategory `B` -/
structure Bicategory.Opposite (B : Type u) where
  /-- The object of `Bр┤«рхњрхќ` that represents `b : B` -/  bop ::
  /-- The object of `B` that represents `b : Bр┤«рхњрхќ` -/ unbop : B

namespace Bicategory.Opposite

variable {B : Type u}

@[inherit_doc]
notation:max B "р┤«рхњрхќ" => Bicategory.Opposite B

theorem bop_injective : Function.Injective (bop : B Рєњ Bр┤«рхњрхќ) := fun _ _ => congr_arg Opposite.unbop

theorem unbop_injective : Function.Injective (unbop : Bр┤«рхњрхќ Рєњ B) := fun _ _ h => congrArg bop h

theorem bop_inj_iff (x y : B) : bop x = bop y Рєћ x = y :=
  bop_injective.eq_iff

@[simp]
theorem unbop_inj_iff (x y : Bр┤«рхњрхќ) : unbop x = unbop y Рєћ x = y :=
  unbop_injective.eq_iff

@[simp]
theorem bop_unbop (a : Bр┤«рхњрхќ) : bop (unbop a) = a :=
  rfl

@[simp]
theorem unbop_bop (a : B) : unbop (bop a) = a :=
  rfl

/-- The type-level equivalence between a type and its opposite. -/
def equivToOpposite : B РЅЃ Bр┤«рхњрхќ where
  toFun := bop
  invFun := unbop
  left_inv := unop_op -- todo whyyy is this typo OK??
  right_inv := bop_unbop

theorem bop_surjective : Function.Surjective (bop : B Рєњ Bр┤«рхњрхќ) := equivToOpposite.surjective

theorem unbop_surjective : Function.Surjective (unbop : Bр┤«рхњрхќ Рєњ B) := equivToOpposite.symm.surjective

@[simp]
theorem equivToBopposite_coe : (equivToOpposite : B Рєњ Bр┤«рхњрхќ) = bop :=
  rfl

@[simp]
theorem equivToBopposite_symm_coe : (equivToOpposite.symm : Bр┤«рхњрхќ Рєњ B) = unbop :=
  rfl

theorem bop_eq_iff_eq_unbop {x : B} {y} : bop x = y Рєћ x = unbop y :=
  equivToOpposite.apply_eq_iff_eq_symm_apply

theorem unbop_eq_iff_eq_bop {x} {y : B} : unbop x = y Рєћ x = bop y :=
  equivToOpposite.symm.apply_eq_iff_eq_symm_apply

end Bicategory.Opposite

variable {B : Type u} [Bicategory.{w, v} B]

section

-- renaming to make bop_inj and unbop_inj work... TODO
open Bicategory.Opposite renaming bop Рєњ bop', unbop Рєњ unbop'

/-- `Bр┤«рхњрхќ` reverses the 1-morphisms in `B` -/
instance Hom : Quiver (Bр┤«рхњрхќ) where
  Hom := fun a b => (unbop' b РЪХ unbop' a)р┤«рхњрхќ

namespace Quiver.Hom
/-- The opposite of a 1-morphism in `B`. -/
def bop {a b : B} (f : a РЪХ b) : bop' b РЪХ bop' a := РЪеfРЪЕ

/-- Given a 1-morhpism in `Bр┤«рхњрхќ`, we can take the "unopposite" back in `B`. -/
def unbop {a b : Bр┤«рхњрхќ} (f : a РЪХ b) : unbop' b РЪХ unbop' a :=
  Bicategory.Opposite.unbop f

-- theorem bop_inj {X Y : B} :
--     Function.Injective (bop : (X РЪХ Y) Рєњ (bop' X РЪХ bop' Y)) :=
--   fun _ _ H => congr_arg Quiver.Hom.unbop H

-- theorem unbop_inj {X Y : Bр┤«рхњрхќ} :
--     Function.Injective (Quiver.Hom.unbop : (X РЪХ Y) Рєњ (unbop' X РЪХ unbop' Y)) :=
--   fun _ _ H => congr_arg Quiver.Hom.mop H

@[simp]
theorem unbop_bop {X Y : B} (f : X РЪХ Y) : f.bop.unbop = f :=
  rfl

@[simp]
theorem bop_unbop {X Y : Bр┤«рхњрхќ} (f : X РЪХ Y) : f.unbop.bop = f :=
  rfl

end Quiver.Hom

end

namespace Bicategory.Opposite

/-- `Bр┤«рхњрхќ` preserves the direction of all 2-morphisms in `B` -/
instance homCategory (a b : Bр┤«рхњрхќ) : Quiver (a РЪХ b) where
  Hom := fun f g => (f.unbop РЪХ g.unbop)р┤«рхњрхќ

abbrev bop2 {a b : B} {f g : a РЪХ b} (╬и : f РЪХ g) : f.bop РЪХ g.bop :=
  Bicategory.Opposite.bop ╬и

abbrev unbop2 {a b : Bр┤«рхњрхќ} {f g : a РЪХ b} (╬и : f РЪХ g) : f.unbop РЪХ g.unbop :=
  Bicategory.Opposite.unbop ╬и

-- @[simps] here causes a loop!!!!
instance homCategory.Opposite {a b : Bр┤«рхњрхќ} : Category.{w} (a РЪХ b) where
  id := fun f => bop2 (­ЮЪЎ f.unbop)
  comp := fun ╬и ╬И => bop2 ((unbop2 ╬и) РЅФ (unbop2 ╬И))
  -- TODO: why do I need to specify Category.id_comp here...
  id_comp := fun {f g} ╬и => by simp [Category.id_comp (unbop2 ╬и)]

@[simp]
theorem bop2_comp {a b : B} {f g h : a РЪХ b} (╬и : f РЪХ g) (╬И : g РЪХ h) :
    bop2 (╬и РЅФ ╬И) = bop2 ╬и РЅФ bop2 ╬И :=
  rfl

@[simp]
theorem bop2_id {a b : B} {f : a РЪХ b} : bop2 (­ЮЪЎ f) = ­ЮЪЎ f.bop :=
  rfl

@[simp]
theorem unbop2_comp {a b : Bр┤«рхњрхќ} {f g h : a РЪХ b} (╬и : f РЪХ g) (╬И : g РЪХ h) :
    unbop2 (╬и РЅФ ╬И) = unbop2 ╬и РЅФ unbop2 ╬И :=
  rfl

@[simp]
theorem unbop2_id {a b : Bр┤«рхњрхќ} {f : a РЪХ b} : unbop2 (­ЮЪЎ f) = ­ЮЪЎ f.unbop :=
  rfl

@[simp]
theorem unbop2_id_bop {a b : B} {f : a РЪХ b} : unbop2 (­ЮЪЎ f.bop) = ­ЮЪЎ f :=
  rfl

@[simp]
theorem bop2_id_unbop {a b : Bр┤«рхњрхќ} {f : a РЪХ b} : bop2 (­ЮЪЎ f.unbop) = ­ЮЪЎ f :=
  rfl

@[simps]
def bopFunctor (a b : B) : (a РЪХ b) РЦц (bop b РЪХ bop a) where
  obj f := f.bop
  map ╬и := bop2 ╬и

@[simps]
def unbopFunctor (a b : Bр┤«рхњрхќ) : (a РЪХ b) РЦц (unbop b РЪХ unbop a) where
  obj f := f.unbop
  map ╬и := unbop2 ╬и

end Bicategory.Opposite

namespace CategoryTheory.Iso

open Bicategory.Opposite

@[simps!]
abbrev bop2 {a b : B} {f g : a РЪХ b} (╬и : f РЅЁ g) : f.bop РЅЁ g.bop := (bopFunctor a b).mapIso ╬и

@[simps!]
abbrev unbop2 {a b : Bр┤«рхњрхќ} {f g : a РЪХ b} (╬и : f РЅЁ g) : f.unbop РЅЁ g.unbop :=
  (unbopFunctor a b).mapIso ╬и

@[simp]
theorem unbop2_bop2 {a b : Bр┤«рхњрхќ} {f g : a РЪХ b} (╬и : f РЅЁ g) : ╬и.unbop2.bop2 = ╬и := by (ext; rfl)

@[simp]
theorem unbop2_bop {a b : Bр┤«рхњрхќ} {f g : a РЪХ b} (╬и : f РЅЁ g) : ╬и.unbop2.bop2 = ╬и := by (ext; rfl)

-- TODO: MAKE ABBREV?? (if I have some bop functor yeah)
-- /-- The opposite natural isomorphism  -/
-- @[simps]
-- protected def bop2 {a b : B} {f g : a РЪХ b} (╬и : f РЅЁ g) : f.bop РЅЁ g.bop where
--   hom := bop2 ╬и.hom
--   inv := bop2 ╬и.inv
--   hom_inv_id := unbop2_inj <| by simp
--   inv_hom_id := unbop2_inj <| by simp

-- /-- The natural isomorphism obtained from a natural isomorphism in `Bр┤«рхњрхќ` -/
-- @[simps]
-- protected def unbop2 {a b : Bр┤«рхњрхќ} {f g : a РЪХ b} (╬и : f РЅЁ g) : f.unbop РЅЁ g.unbop where
--   hom := unbop2 ╬и.hom
--   inv := unbop2 ╬и.inv
--   hom_inv_id := bop2_inj <| by simp
--   inv_hom_id := bop2_inj <| by simp

end CategoryTheory.Iso

namespace Bicategory.Opposite

/-- The 1-dual bicategory `Bр┤«рхњрхќ`

See ...
-/
@[simps!]
instance bicategory : Bicategory.{w, v} Bр┤«рхњрхќ where
  id := fun a => (­ЮЪЎ a.unbop).bop
  comp := fun f g => (g.unbop РЅФ f.unbop).bop
  whiskerLeft f g h ╬и := bop2 ((unbop2 ╬и) Рќи f.unbop)
  whiskerRight ╬и h := bop2 (h.unbop РЌЂ (unbop2 ╬и))
  -- I'm not sure why I need to do `by exact` here...
  associator f g h := by exact (Bicategory.associator h.unbop g.unbop f.unbop).symm.bop2
  leftUnitor f := by exact (Bicategory.rightUnitor f.unbop).bop2
  rightUnitor f := by exact (Bicategory.leftUnitor f.unbop).bop2
  whiskerLeft_id f g := unbop_injective <| Bicategory.id_whiskerRight g.unbop f.unbop
  whiskerLeft_comp f g h i ╬и ╬И := unbop_injective <|
    Bicategory.comp_whiskerRight (unbop2 ╬и) (unbop2 ╬И) f.unbop
  id_whiskerLeft ╬и := unbop_injective <| whiskerRight_id (unbop2 ╬и)
  comp_whiskerLeft {a b c d} f g {h h'} ╬и := unbop_injective <|
    whiskerRight_comp (unbop2 ╬и) g.unbop f.unbop
  id_whiskerRight f g := unbop_injective <| Bicategory.whiskerLeft_id g.unbop f.unbop
  comp_whiskerRight ╬и ╬И i := unbop_injective <|
    Bicategory.whiskerLeft_comp i.unbop (unbop2 ╬и) (unbop2 ╬И)
  whiskerRight_id ╬и := unbop_injective <| id_whiskerLeft (unbop2 ╬и)
  whiskerRight_comp ╬и g h := unbop_injective <| comp_whiskerLeft h.unbop g.unbop (unbop2 ╬и)
  whisker_assoc f g g' ╬и i := by apply unbop_injective; simp
  whisker_exchange ╬и ╬И := by apply unbop_injective; simp [(whisker_exchange _ _).symm]
  pentagon f g h i := by apply unbop_injective; simp
  triangle f g := by apply unbop_injective; simp

end Bicategory.Opposite
