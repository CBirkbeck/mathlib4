/-
Copyright (c) 2024 Calle S√∂nne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Calle S√∂nne
-/

import Mathlib.CategoryTheory.Bicategory.Basic
import Mathlib.CategoryTheory.FullSubcategory

/-!

# Sub-bicategories

In this file we develop API for constructing a locally full sub-bicategory of a
bicategory.

Ideas:
- Should have: inclusion of objects & inclusion of morphisms


-/

namespace CategoryTheory

namespace Bicategory

open Category

open scoped Bicategory

universe w v u w‚ÇÅ v‚ÇÅ u‚ÇÅ

variable {B : Type u} [CategoryStruct.{v} B] (C : Type u‚ÇÅ) [Bicategory.{w‚ÇÅ, v‚ÇÅ} C]

-- TODO: F' needs to respect compositions!! (i.e. F needs to be a prefunctor)
-- TODO: maybe not...?
variable (F : Prefunctor B C)

/-- `InducedBicategory B C`, where `F : B ‚Üí C`, is a typeclass synonym for `B`,
which provides a bicategory structure so that the 2-morphisms `X ‚ü∂ Y` are the 2-morphisms
in `C` from `F X` to `F Y`.
-/
-- TODO: make this a structure...
structure InducedBicategory (_F : Prefunctor B C) : Type u :=
  as : B

structure InducedBicategory' where
  obj : Type u
  categoryStruct : CategoryStruct.{v} obj
  -- TODO: hom as above or sth
  F : Prefunctor obj C
  -- commute w/ comp
  mapComp : ‚àÄ {a b c : obj} (f : a ‚ü∂ b) (g : b ‚ü∂ c), F.map (f ‚â´ g) ‚âÖ F.map f ‚â´ F.map g
  mapId : ‚àÄ {a : obj}, F.map (ùüô a) ‚âÖ ùüô (F.obj a)
  -- respects associators etc



namespace InducedBicategory

variable {C}

instance hasCoeToSort {Œ± : Sort*} [CoeSort C Œ±] :
    CoeSort (InducedBicategory C F) Œ± :=
  ‚ü®fun c ‚Ü¶ F.obj c.1‚ü©

instance categoryStruct : CategoryStruct (InducedBicategory C F) where
  Hom a b := InducedCategory (F.obj a.1 ‚ü∂ F.obj b.1) (F.map (X := a.1) (Y := b.1))
  id a := ùüô a.1
  comp f g := f ‚â´ g

-- TODO: fix universe
instance bicategory : Bicategory.{w‚ÇÅ, v} (InducedBicategory C F) where
  toCategoryStruct := categoryStruct F
  homCategory a b := InducedCategory.category (F.map (X := a.1) (Y:=b.1))
  -- Need "F" "PseudoStruct" here (so mapId + mapComp + coherences + no 2-morphisms)
  whiskerLeft {a b c} f {g h} Œ∑ := ((F.map f) ‚óÅ Œ∑)
  whiskerRight := sorry
  associator f g h := Œ±_ (F.map f) (F.map g) (F.map h)
  leftUnitor := sorry
  rightUnitor := sorry
  whiskerLeft_id := sorry
  whiskerLeft_comp := sorry
  id_whiskerLeft := sorry
  comp_whiskerLeft := sorry
  id_whiskerRight := sorry
  comp_whiskerRight := sorry
  whiskerRight_id := sorry
  whiskerRight_comp := sorry
  whisker_assoc := sorry
  whisker_exchange := sorry
  pentagon := sorry
  triangle := sorry
  -- -- TODO: bad definition here?
  -- toCategoryStruct := by unfold InducedBicategory; infer_instance

end InducedBicategory

end Bicategory

end CategoryTheory
