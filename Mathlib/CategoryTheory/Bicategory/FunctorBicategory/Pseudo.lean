/-
Copyright (c) 2024 Calle S√∂nne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Calle S√∂nne
-/

import Mathlib.CategoryTheory.Bicategory.Modification.Pseudo
import Mathlib.CategoryTheory.Bicategory.FunctorBicategory.Oplax

/-!
# The bicategory of pseudofunctors between two bicategories

Given bicategories `B` and `C`, we give a bicategory structure on `Pseudofunctor B C` whose
* objects are pseudofunctors,
* 1-morphisms are strong natural transformations, and
* 2-morphisms are modifications.
-/


namespace CategoryTheory.Pseudofunctor

open Category Bicategory

open scoped Bicategory

universe w‚ÇÅ w‚ÇÇ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

variable {B : Type u‚ÇÅ} [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] {C : Type u‚ÇÇ} [Bicategory.{w‚ÇÇ, v‚ÇÇ} C]

namespace StrongTrans

variable {F G H I : Pseudofunctor B C}

/-- Left whiskering of a strong natural transformation between pseudofunctors
and a modification. -/
@[simps]
def whiskerLeft (Œ∑ : F ‚ü∂ G) {Œ∏ Œπ : G ‚ü∂ H} (Œì : Œ∏ ‚ü∂ Œπ) : Œ∑ ‚â´ Œ∏ ‚ü∂ Œ∑ ‚â´ Œπ where
  app a := Œ∑.app a ‚óÅ Œì.app a
  naturality {a b} f := by
    dsimp
    rw [associator_inv_naturality_right_assoc, whisker_exchange_assoc]
    simp
  -- Modification.mkOfOplax <| OplaxTrans.whiskerLeft Œ∑.toOplax Œì.toOplax

/-- Right whiskering of an strong natural transformation between pseudofunctors
and a modification. -/
@[simps]
def whiskerRight {Œ∑ Œ∏ : F ‚ü∂ G} (Œì : Œ∑ ‚ü∂ Œ∏) (Œπ : G ‚ü∂ H) : Œ∑ ‚â´ Œπ ‚ü∂ Œ∏ ‚â´ Œπ where
  app a := Œì.app a ‚ñ∑ Œπ.app a
  naturality {a b} f := by
    dsimp
    simp_rw [assoc, ‚Üê associator_inv_naturality_left, whisker_exchange_assoc]
    simp
  -- Modification.mkOfOplax <| OplaxTrans.whiskerRight Œì.toOplax Œπ.toOplax

/-- Associator for the vertical composition of strong natural transformations
between pseudofunctors. -/
@[simps!]
def associator (Œ∑ : F ‚ü∂ G) (Œ∏ : G ‚ü∂ H) (Œπ : H ‚ü∂ I) : (Œ∑ ‚â´ Œ∏) ‚â´ Œπ ‚âÖ Œ∑ ‚â´ Œ∏ ‚â´ Œπ :=
  ModificationIso.ofComponents (fun a => Œ±_ (Œ∑.app a) (Œ∏.app a) (Œπ.app a)) (by aesop_cat)

/-- Left unitor for the vertical composition of strong natural transformations
between pseudofunctors. -/
@[simps!]
def leftUnitor (Œ∑ : F ‚ü∂ G) : ùüô F ‚â´ Œ∑ ‚âÖ Œ∑ :=
  ModificationIso.ofComponents (fun a => Œª_ (Œ∑.app a)) (by aesop_cat)
  -- { Modification.mkOfOplax (OplaxTrans.leftUnitor Œ∑.toOplax) with }

/-- Right unitor for the vertical composition of strong natural transformations
between pseudofunctors. -/
@[simps!]
def rightUnitor (Œ∑ : F ‚ü∂ G) : Œ∑ ‚â´ ùüô G ‚âÖ Œ∑ :=
  ModificationIso.ofComponents (fun a => œÅ_ (Œ∑.app a)) (by aesop_cat)
  -- { OplaxTrans.rightUnitor Œ∑.toOplax with }

end StrongTrans

variable (B C)

/-- A bicategory structure on the pseudofunctors between two bicategories. -/
@[simps!]
instance bicategory : Bicategory (Pseudofunctor B C) where
  whiskerLeft {F G H} Œ∑ _ _ Œì := StrongTrans.whiskerLeft Œ∑ Œì
  whiskerRight {F G H} _ _ Œì Œ∑ := StrongTrans.whiskerRight Œì Œ∑
  associator {F G H} I := StrongTrans.associator
  leftUnitor {F G} := StrongTrans.leftUnitor
  rightUnitor {F G} := StrongTrans.rightUnitor
  whisker_exchange {a b c f g h i} Œ∑ Œ∏ := by ext; exact whisker_exchange _ _

-- example (B : Type u‚ÇÅ) [inst : CategoryTheory.Bicategory B] (C : Type u‚ÇÇ)
--   [inst_1 : CategoryTheory.Bicategory C] {X Y Z : CategoryTheory.Pseudofunctor B C}
--   (Œ∑ : X ‚ü∂ Y) (Œ∏ : Y ‚ü∂ Z) {a b : B} (f : a ‚ü∂ b) :
--     ((Œ∑ ‚â´ Œ∏).naturality f).inv =
--       (Œ±_ (Œ∑.app a) (Œ∏.app a) (Z.map f)).hom ‚â´
--         Œ∑.app a ‚óÅ (Œ∏.naturality f).inv ‚â´
--           (Œ±_ (Œ∑.app a) (Y.map f) (Œ∏.app b)).inv ‚â´
--             (Œ∑.naturality f).inv ‚ñ∑ Œ∏.app b ‚â´ (Œ±_ (X.map f) (Œ∑.app b) (Œ∏.app b)).hom := by
--   --apply bicategory_comp_naturality_inv _ _ _
--   simp only [Pseudofunctor.categoryStruct_comp, Pseudofunctor.StrongTrans.vcomp_naturality_inv]

end CategoryTheory.Pseudofunctor
