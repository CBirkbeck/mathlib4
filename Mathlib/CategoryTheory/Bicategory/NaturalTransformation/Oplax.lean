/-
Copyright (c) 2022 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno, Calle Sรถnne
-/
import Mathlib.CategoryTheory.Bicategory.Functor.Oplax

/-!
# Oplax transformations

Just as there are natural transformations between functors, there are oplax transformations
between oplax functors. The equality in the naturality of natural transformations is replaced by a
specified 2-morphism `F.map f โซ app b โถ app a โซ G.map f` in the case of oplax natural
transformations.

## Main definitions

* `OplaxTrans F G` : oplax transformations between oplax functors `F` and `G`
* `OplaxTrans.vcomp ฮท ฮธ` : the vertical composition of oplax transformations `ฮท`
  and `ฮธ`
* `OplaxTrans.category F G` : the category structure on the oplax transformations
  between `F` and `G`
-/

namespace CategoryTheory

open Category Bicategory

open scoped Bicategory

universe wโ wโ vโ vโ uโ uโ

variable {B : Type uโ} [Bicategory.{wโ, vโ} B] {C : Type uโ} [Bicategory.{wโ, vโ} C]

/-- If `ฮท` is an oplax transformation between `F` and `G`, we have a 1-morphism
`ฮท.app a : F.obj a โถ G.obj a` for each object `a : B`. We also have a 2-morphism
`ฮท.naturality f : F.map f โซ app b โถ app a โซ G.map f` for each 1-morphism `f : a โถ b`.
These 2-morphisms satisfies the naturality condition, and preserve the identities and
the compositions modulo some adjustments of domains and codomains of 2-morphisms.
-/
structure OplaxTrans (F G : OplaxFunctor B C) where
  app (a : B) : F.obj a โถ G.obj a
  naturality {a b : B} (f : a โถ b) : F.map f โซ app b โถ app a โซ G.map f
  naturality_naturality :
    โ {a b : B} {f g : a โถ b} (ฮท : f โถ g),
      F.mapโ ฮท โท app b โซ naturality g = naturality f โซ app a โ G.mapโ ฮท := by
    aesop_cat
  naturality_id :
    โ a : B,
      naturality (๐ a) โซ app a โ G.mapId a =
        F.mapId a โท app a โซ (ฮป_ (app a)).hom โซ (ฯ_ (app a)).inv := by
    aesop_cat
  naturality_comp :
    โ {a b c : B} (f : a โถ b) (g : b โถ c),
      naturality (f โซ g) โซ app a โ G.mapComp f g =
        F.mapComp f g โท app c โซ
          (ฮฑ_ _ _ _).hom โซ
            F.map f โ naturality g โซ (ฮฑ_ _ _ _).inv โซ naturality f โท G.map g โซ (ฮฑ_ _ _ _).hom := by
    aesop_cat

attribute [nolint docBlame] CategoryTheory.OplaxTrans.app
  CategoryTheory.OplaxTrans.naturality
  CategoryTheory.OplaxTrans.naturality_naturality
  CategoryTheory.OplaxTrans.naturality_id
  CategoryTheory.OplaxTrans.naturality_comp

attribute [reassoc (attr := simp)] OplaxTrans.naturality_naturality OplaxTrans.naturality_id
  OplaxTrans.naturality_comp

namespace OplaxTrans

section

variable (F : OplaxFunctor B C)

/-- The identity oplax transformation. -/
@[simps]
def id : OplaxTrans F F where
  app a := ๐ (F.obj a)
  naturality {a b} f := (ฯ_ (F.map f)).hom โซ (ฮป_ (F.map f)).inv

instance : Inhabited (OplaxTrans F F) :=
  โจid Fโฉ

variable {F} {G H : OplaxFunctor B C} (ฮท : OplaxTrans F G) (ฮธ : OplaxTrans G H)

section

variable {a b c : B} {a' : C}

@[reassoc (attr := simp)]
theorem whiskerLeft_naturality_naturality (f : a' โถ G.obj a) {g h : a โถ b} (ฮฒ : g โถ h) :
    f โ G.mapโ ฮฒ โท ฮธ.app b โซ f โ ฮธ.naturality h =
      f โ ฮธ.naturality g โซ f โ ฮธ.app a โ H.mapโ ฮฒ := by
  simp_rw [โ whiskerLeft_comp, naturality_naturality]

@[reassoc (attr := simp)]
theorem whiskerRight_naturality_naturality {f g : a โถ b} (ฮฒ : f โถ g) (h : G.obj b โถ a') :
    F.mapโ ฮฒ โท ฮท.app b โท h โซ ฮท.naturality g โท h =
      ฮท.naturality f โท h โซ (ฮฑ_ _ _ _).hom โซ ฮท.app a โ G.mapโ ฮฒ โท h โซ (ฮฑ_ _ _ _).inv := by
  rw [โ comp_whiskerRight, naturality_naturality, comp_whiskerRight, whisker_assoc]

@[reassoc (attr := simp)]
theorem whiskerLeft_naturality_comp (f : a' โถ G.obj a) (g : a โถ b) (h : b โถ c) :
    f โ ฮธ.naturality (g โซ h) โซ f โ ฮธ.app a โ H.mapComp g h =
      f โ G.mapComp g h โท ฮธ.app c โซ
        f โ (ฮฑ_ _ _ _).hom โซ
          f โ G.map g โ ฮธ.naturality h โซ
            f โ (ฮฑ_ _ _ _).inv โซ f โ ฮธ.naturality g โท H.map h โซ f โ (ฮฑ_ _ _ _).hom := by
  simp_rw [โ whiskerLeft_comp, naturality_comp]

@[reassoc (attr := simp)]
theorem whiskerRight_naturality_comp (f : a โถ b) (g : b โถ c) (h : G.obj c โถ a') :
    ฮท.naturality (f โซ g) โท h โซ (ฮฑ_ _ _ _).hom โซ ฮท.app a โ G.mapComp f g โท h =
      F.mapComp f g โท ฮท.app c โท h โซ
        (ฮฑ_ _ _ _).hom โท h โซ
          (ฮฑ_ _ _ _).hom โซ
            F.map f โ ฮท.naturality g โท h โซ
              (ฮฑ_ _ _ _).inv โซ
                (ฮฑ_ _ _ _).inv โท h โซ
                  ฮท.naturality f โท G.map g โท h โซ (ฮฑ_ _ _ _).hom โท h โซ (ฮฑ_ _ _ _).hom := by
  rw [โ associator_naturality_middle, โ comp_whiskerRight_assoc, naturality_comp]; simp

@[reassoc (attr := simp)]
theorem whiskerLeft_naturality_id (f : a' โถ G.obj a) :
    f โ ฮธ.naturality (๐ a) โซ f โ ฮธ.app a โ H.mapId a =
      f โ G.mapId a โท ฮธ.app a โซ f โ (ฮป_ (ฮธ.app a)).hom โซ f โ (ฯ_ (ฮธ.app a)).inv := by
  simp_rw [โ whiskerLeft_comp, naturality_id]

@[reassoc (attr := simp)]
theorem whiskerRight_naturality_id (f : G.obj a โถ a') :
    ฮท.naturality (๐ a) โท f โซ (ฮฑ_ _ _ _).hom โซ ฮท.app a โ G.mapId a โท f =
    F.mapId a โท ฮท.app a โท f โซ (ฮป_ (ฮท.app a)).hom โท f โซ (ฯ_ (ฮท.app a)).inv โท f โซ (ฮฑ_ _ _ _).hom := by
  rw [โ associator_naturality_middle, โ comp_whiskerRight_assoc, naturality_id]; simp

end

/-- Vertical composition of oplax transformations. -/
@[simps]
def vcomp (ฮท : OplaxTrans F G) (ฮธ : OplaxTrans G H) : OplaxTrans F H where
  app a := ฮท.app a โซ ฮธ.app a
  naturality {a b} f :=
    (ฮฑ_ _ _ _).inv โซ
      ฮท.naturality f โท ฮธ.app b โซ (ฮฑ_ _ _ _).hom โซ ฮท.app a โ ฮธ.naturality f โซ (ฮฑ_ _ _ _).inv
  naturality_comp {a b c} f g :=
    calc
      _ =
        (ฮฑ_ _ _ _).inv โซ
          F.mapComp f g โท ฮท.app c โท ฮธ.app c โซ
            (ฮฑ_ _ _ _).hom โท _ โซ (ฮฑ_ _ _ _).hom โซ
              F.map f โ ฮท.naturality g โท ฮธ.app c โซ
                _ โ (ฮฑ_ _ _ _).hom โซ (ฮฑ_ _ _ _).inv โซ
                  (F.map f โซ ฮท.app b) โ ฮธ.naturality g โซ
                    ฮท.naturality f โท (ฮธ.app b โซ H.map g) โซ
                      (ฮฑ_ _ _ _).hom โซ _ โ (ฮฑ_ _ _ _).inv โซ
                        ฮท.app a โ ฮธ.naturality f โท H.map g โซ
                          _ โ (ฮฑ_ _ _ _).hom โซ (ฮฑ_ _ _ _).inv := by
        rw [whisker_exchange_assoc]; simp
      _ = _ := by simp

variable (B C)

@[simps id comp]
instance : CategoryStruct (OplaxFunctor B C) where
  Hom := OplaxTrans
  id := OplaxTrans.id
  comp := OplaxTrans.vcomp

end

/-- A structure on an Oplax transformation that promotes it to a strong natural
transformation.

See `StrongNatTrans.mkOfOplax`. -/
structure StrongCore {F G : OplaxFunctor B C} (ฮท : OplaxTrans F G) where
  naturality {a b : B} (f : a โถ b) : F.map f โซ ฮท.app b โ ฮท.app a โซ G.map f
  naturality_hom {a b : B} (f : a โถ b) : (naturality f).hom = ฮท.naturality f := by aesop_cat

attribute [nolint docBlame] CategoryTheory.OplaxTrans.StrongCore.naturality
  CategoryTheory.OplaxTrans.StrongCore.naturality_hom

attribute [simp] StrongCore.naturality_hom

end OplaxTrans

/-- A strong natural transformation between oplax functors `F` and `G` is a natural transformation
that is "natural up to 2-isomorphisms".

More precisely, it consists of the following:
* a 1-morphism `ฮท.app a : F.obj a โถ G.obj a` for each object `a : B`.
* a 2-isomorphism `ฮท.naturality f : F.map f โซ app b โถ app a โซ G.map f` for each 1-morphism
`f : a โถ b`.
* These 2-isomorphisms satisfy the naturality condition, and preserve the identities and the
compositions modulo some adjustments of domains and codomains of 2-morphisms.
-/
structure StrongOplaxTrans (F G : OplaxFunctor B C) where
  app (a : B) : F.obj a โถ G.obj a
  naturality {a b : B} (f : a โถ b) : F.map f โซ app b โ app a โซ G.map f
  naturality_naturality :
    โ {a b : B} {f g : a โถ b} (ฮท : f โถ g),
      F.mapโ ฮท โท app b โซ (naturality g).hom = (naturality f).hom โซ app a โ G.mapโ ฮท := by
    aesop_cat
  naturality_id :
    โ a : B,
      (naturality (๐ a)).hom โซ app a โ G.mapId a =
        F.mapId a โท app a โซ (ฮป_ (app a)).hom โซ (ฯ_ (app a)).inv := by
    aesop_cat
  naturality_comp :
    โ {a b c : B} (f : a โถ b) (g : b โถ c),
      (naturality (f โซ g)).hom โซ app a โ G.mapComp f g =
        F.mapComp f g โท app c โซ (ฮฑ_ _ _ _).hom โซ F.map f โ (naturality g).hom โซ
        (ฮฑ_ _ _ _).inv โซ (naturality f).hom โท G.map g โซ (ฮฑ_ _ _ _).hom := by
    aesop_cat

attribute [nolint docBlame] CategoryTheory.StrongOplaxTrans.app
  CategoryTheory.StrongOplaxTrans.naturality
  CategoryTheory.StrongOplaxTrans.naturality_naturality
  CategoryTheory.StrongOplaxTrans.naturality_id
  CategoryTheory.StrongOplaxTrans.naturality_comp

attribute [reassoc (attr := simp)] StrongOplaxTrans.naturality_naturality
  StrongOplaxTrans.naturality_id StrongOplaxTrans.naturality_comp

namespace StrongOplaxTrans

section

-- TODO: Are these unecessary? Should I just have OplaxTrans (and isomorphisms!)
/-- The underlying oplax transformation of a strong natural transformation. -/
@[simps]
def toOplax {F G : OplaxFunctor B C} (ฮท : StrongOplaxTrans F G) : OplaxTrans F G where
  app := ฮท.app
  naturality f := (ฮท.naturality f).hom

/-- Construct a strong natural transformation from an oplax transformation whose
naturality 2-cell is an isomorphism. -/
def mkOfOplax {F G : OplaxFunctor B C} (ฮท : OplaxTrans F G) (ฮท' : OplaxTrans.StrongCore ฮท) :
    StrongOplaxTrans F G where
  app := ฮท.app
  naturality := ฮท'.naturality

/-- Construct a strong natural transformation from an oplax transformation whose
naturality 2-cell is an isomorphism. -/
noncomputable def mkOfOplax' {F G : OplaxFunctor B C} (ฮท : OplaxTrans F G)
    [โ a b (f : a โถ b), IsIso (ฮท.naturality f)] : StrongOplaxTrans F G where
  app := ฮท.app
  naturality := fun f => asIso (ฮท.naturality _)

variable (F : OplaxFunctor B C)


/-- The identity strong natural transformation. -/
@[simps!]
def id : StrongOplaxTrans F F :=
  mkOfOplax (OplaxTrans.id F) { naturality := ฮป f โฆ (ฯ_ (F.map f)) โชโซ (ฮป_ (F.map f)).symm }

@[simp]
lemma id.toOplax : (id F).toOplax = OplaxTrans.id F :=
  rfl

instance : Inhabited (StrongOplaxTrans F F) :=
  โจid Fโฉ

variable {F} {G H : OplaxFunctor B C} (ฮท : StrongOplaxTrans F G) (ฮธ : StrongOplaxTrans G H)

section

variable {a b c : B} {a' : C}

@[reassoc (attr := simp)]
theorem whiskerLeft_naturality_naturality (f : a' โถ G.obj a) {g h : a โถ b} (ฮฒ : g โถ h) :
    f โ G.mapโ ฮฒ โท ฮธ.app b โซ f โ (ฮธ.naturality h).hom =
      f โ (ฮธ.naturality g).hom โซ f โ ฮธ.app a โ H.mapโ ฮฒ := by
  apply ฮธ.toOplax.whiskerLeft_naturality_naturality

@[reassoc (attr := simp)]
theorem whiskerRight_naturality_naturality {f g : a โถ b} (ฮฒ : f โถ g) (h : G.obj b โถ a') :
    F.mapโ ฮฒ โท ฮท.app b โท h โซ (ฮท.naturality g).hom โท h =
      (ฮท.naturality f).hom โท h โซ (ฮฑ_ _ _ _).hom โซ ฮท.app a โ G.mapโ ฮฒ โท h โซ (ฮฑ_ _ _ _).inv := by
  apply ฮท.toOplax.whiskerRight_naturality_naturality

@[reassoc (attr := simp)]
theorem whiskerLeft_naturality_comp (f : a' โถ G.obj a) (g : a โถ b) (h : b โถ c) :
    f โ (ฮธ.naturality (g โซ h)).hom โซ f โ ฮธ.app a โ H.mapComp g h =
      f โ G.mapComp g h โท ฮธ.app c โซ
        f โ (ฮฑ_ _ _ _).hom โซ
          f โ G.map g โ (ฮธ.naturality h).hom โซ
            f โ (ฮฑ_ _ _ _).inv โซ f โ (ฮธ.naturality g).hom โท H.map h โซ f โ (ฮฑ_ _ _ _).hom := by
  apply ฮธ.toOplax.whiskerLeft_naturality_comp

@[reassoc (attr := simp)]
theorem whiskerRight_naturality_comp (f : a โถ b) (g : b โถ c) (h : G.obj c โถ a') :
    (ฮท.naturality (f โซ g)).hom โท h โซ (ฮฑ_ _ _ _).hom โซ ฮท.app a โ G.mapComp f g โท h =
      F.mapComp f g โท ฮท.app c โท h โซ
        (ฮฑ_ _ _ _).hom โท h โซ
          (ฮฑ_ _ _ _).hom โซ
            F.map f โ (ฮท.naturality g).hom โท h โซ
              (ฮฑ_ _ _ _).inv โซ
                (ฮฑ_ _ _ _).inv โท h โซ
                 (ฮท.naturality f).hom โท G.map g โท h โซ (ฮฑ_ _ _ _).hom โท h โซ (ฮฑ_ _ _ _).hom := by
  apply ฮท.toOplax.whiskerRight_naturality_comp

@[reassoc (attr := simp)]
theorem whiskerLeft_naturality_id (f : a' โถ G.obj a) :
    f โ (ฮธ.naturality (๐ a)).hom โซ f โ ฮธ.app a โ H.mapId a =
      f โ G.mapId a โท ฮธ.app a โซ f โ (ฮป_ (ฮธ.app a)).hom โซ f โ (ฯ_ (ฮธ.app a)).inv := by
  apply ฮธ.toOplax.whiskerLeft_naturality_id

@[reassoc (attr := simp)]
theorem whiskerRight_naturality_id (f : G.obj a โถ a') :
    (ฮท.naturality (๐ a)).hom โท f โซ (ฮฑ_ _ _ _).hom โซ ฮท.app a โ G.mapId a โท f =
    F.mapId a โท ฮท.app a โท f โซ (ฮป_ (ฮท.app a)).hom โท f โซ (ฯ_ (ฮท.app a)).inv โท f โซ
    (ฮฑ_ _ _ _).hom := by
  apply ฮท.toOplax.whiskerRight_naturality_id

end

/-- Vertical composition of strong natural transformations. -/
@[simps!]
def vcomp (ฮท : StrongOplaxTrans F G) (ฮธ : StrongOplaxTrans G H) : StrongOplaxTrans F H :=
  mkOfOplax (OplaxTrans.vcomp ฮท.toOplax ฮธ.toOplax)
    { naturality := ฮป {a b} f โฆ
        (ฮฑ_ _ _ _).symm โชโซ whiskerRightIso (ฮท.naturality f) (ฮธ.app b) โชโซ
        (ฮฑ_ _ _ _) โชโซ whiskerLeftIso (ฮท.app a) (ฮธ.naturality f) โชโซ (ฮฑ_ _ _ _).symm }
end

end StrongOplaxTrans

end CategoryTheory
