/-
Copyright (c) 2024 Calle Sรถnne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Calle Sรถnne
-/

import Mathlib.CategoryTheory.Bicategory.Functor.Pseudofunctor
import Mathlib.CategoryTheory.Bicategory.NaturalTransformation.Oplax

/-!

# Strong transformations of pseudofunctors

A strong transformation is an oplax transformation such that each component 2-cell
is an isomorphism.

## Main definitions

* `StrongTrans F G` : strong transformations between oplax functors `F` and `G`.
* `mkOfOplax ฮท ฮท'` : given an oplax transformation `ฮท` such that each component 2-cell
  is an isomorphism, `mkOfOplax` gives the corresponding strong transformation.
* `StrongTrans.vcomp ฮท ฮธ` : the vertical composition of strong transformations `ฮท`
  and `ฮธ`.
* `StrongTrans.category F G` : a category structure on Pseudofunctors between `F` and `G`,
  where the morphisms are strong transformations.

## References
* [Niles Johnson, Donald Yau, *2-Dimensional Categories*](https://arxiv.org/abs/2002.06055)

-/

namespace CategoryTheory.Pseudofunctor

open Category Bicategory Oplax

open scoped Bicategory

universe wโ wโ vโ vโ uโ uโ

variable {B : Type uโ} [Bicategory.{wโ, vโ} B] {C : Type uโ} [Bicategory.{wโ, vโ} C]

/-- A strong transformation between pseudofunctors `F` and `G` is a natural transformation
that is "natural up to 2-isomorphisms".
More precisely, it consists of the following:
* a 1-morphism `ฮท.app a : F.obj a โถ G.obj a` for each object `a : B`.
* a 2-isomorphism `ฮท.naturality f : F.map f โซ app b โ app a โซ G.map f` for each 1-morphism
`f : a โถ b`.
* These 2-isomorphisms satisfy the naturality condition, and preserve the identities and the
compositions modulo some adjustments of domains and codomains of 2-morphisms.
-/
abbrev StrongTrans (F G : Pseudofunctor B C) := Oplax.StrongTrans F.toOplax G.toOplax

namespace StrongTrans

variable {F G : Pseudofunctor B C} (ฮท : StrongTrans F G)

@[reassoc (attr := simp), to_app]
lemma naturality_naturality {a b : B} (f g : a โถ b) (ฯ : f โถ g) :
    F.mapโ ฯ โท ฮท.app b โซ (ฮท.naturality g).hom = (ฮท.naturality f).hom โซ ฮท.app a โ G.mapโ ฯ :=
  Oplax.StrongTrans.naturality_naturality ฮท ฯ

@[reassoc (attr := simp), to_app]
lemma naturality_id (a : B) :
    (ฮท.naturality (๐ a)).hom โซ ฮท.app a โ (G.mapId a).hom =
      (F.mapId a).hom โท ฮท.app a โซ (ฮป_ (ฮท.app a)).hom โซ (ฯ_ (ฮท.app a)).inv :=
  Oplax.StrongTrans.naturality_id ฮท a

@[reassoc (attr := simp), to_app]
lemma naturality_comp {a b c : B} (f : a โถ b) (g : b โถ c) :
    (ฮท.naturality (f โซ g)).hom โซ ฮท.app a โ (G.mapComp f g).hom =
      (F.mapComp f g).hom โท ฮท.app c โซ (ฮฑ_ _ _ _).hom โซ F.map f โ (ฮท.naturality g).hom โซ
        (ฮฑ_ _ _ _).inv โซ (ฮท.naturality f).hom โท G.map g โซ (ฮฑ_ _ _ _).hom :=
  Oplax.StrongTrans.naturality_comp ฮท f g


section

variable {F G H : Pseudofunctor B C} (ฮท : StrongTrans F G) (ฮธ : StrongTrans G H)
  {a b c : B} {a' : C}

@[reassoc (attr := simp), to_app]
theorem whiskerLeft_naturality_naturality (f : a' โถ G.obj a) {g h : a โถ b} (ฮฒ : g โถ h) :
    f โ G.mapโ ฮฒ โท ฮธ.app b โซ f โ (ฮธ.naturality h).hom =
      f โ (ฮธ.naturality g).hom โซ f โ ฮธ.app a โ H.mapโ ฮฒ :=
  ฮธ.toOplax.whiskerLeft_naturality_naturality _ _

@[reassoc (attr := simp), to_app]
theorem whiskerRight_naturality_naturality {f g : a โถ b} (ฮฒ : f โถ g) (h : G.obj b โถ a') :
    F.mapโ ฮฒ โท ฮท.app b โท h โซ (ฮท.naturality g).hom โท h =
      (ฮท.naturality f).hom โท h โซ (ฮฑ_ _ _ _).hom โซ ฮท.app a โ G.mapโ ฮฒ โท h โซ (ฮฑ_ _ _ _).inv :=
  ฮท.toOplax.whiskerRight_naturality_naturality _ _

@[reassoc (attr := simp), to_app]
theorem whiskerLeft_naturality_comp (f : a' โถ G.obj a) (g : a โถ b) (h : b โถ c) :
    f โ (ฮธ.naturality (g โซ h)).hom โซ f โ ฮธ.app a โ (H.mapComp g h).hom =
      f โ (G.mapComp g h).hom โท ฮธ.app c โซ
        f โ (ฮฑ_ _ _ _).hom โซ
          f โ G.map g โ (ฮธ.naturality h).hom โซ
            f โ (ฮฑ_ _ _ _).inv โซ f โ (ฮธ.naturality g).hom โท H.map h โซ f โ (ฮฑ_ _ _ _).hom :=
  ฮธ.toOplax.whiskerLeft_naturality_comp _ _ _

@[reassoc (attr := simp), to_app]
theorem whiskerRight_naturality_comp (f : a โถ b) (g : b โถ c) (h : G.obj c โถ a') :
    (ฮท.naturality (f โซ g)).hom โท h โซ (ฮฑ_ _ _ _).hom โซ ฮท.app a โ (G.mapComp f g).hom โท h =
      (F.mapComp f g).hom โท ฮท.app c โท h โซ
        (ฮฑ_ _ _ _).hom โท h โซ
          (ฮฑ_ _ _ _).hom โซ
            F.map f โ (ฮท.naturality g).hom โท h โซ
              (ฮฑ_ _ _ _).inv โซ
                (ฮฑ_ _ _ _).inv โท h โซ
                 (ฮท.naturality f).hom โท G.map g โท h โซ (ฮฑ_ _ _ _).hom โท h โซ (ฮฑ_ _ _ _).hom :=
  ฮท.toOplax.whiskerRight_naturality_comp _ _ _

@[reassoc (attr := simp), to_app]
theorem whiskerLeft_naturality_id (f : a' โถ G.obj a) :
    f โ (ฮธ.naturality (๐ a)).hom โซ f โ ฮธ.app a โ (H.mapId a).hom =
      f โ (G.mapId a).hom โท ฮธ.app a โซ f โ (ฮป_ (ฮธ.app a)).hom โซ f โ (ฯ_ (ฮธ.app a)).inv :=
  ฮธ.toOplax.whiskerLeft_naturality_id _

@[reassoc (attr := simp), to_app]
theorem whiskerRight_naturality_id (f : G.obj a โถ a') :
    (ฮท.naturality (๐ a)).hom โท f โซ (ฮฑ_ _ _ _).hom โซ ฮท.app a โ (G.mapId a).hom โท f =
    (F.mapId a).hom โท ฮท.app a โท f โซ (ฮป_ (ฮท.app a)).hom โท f โซ (ฯ_ (ฮท.app a)).inv โท f โซ
    (ฮฑ_ _ _ _).hom :=
  ฮท.toOplax.whiskerRight_naturality_id _

end

/-- The identity strong transformation. -/
abbrev id (F : Pseudofunctor B C) : StrongTrans F F := Oplax.StrongTrans.id F.toOplax

instance (F : Pseudofunctor B C) : Inhabited (StrongTrans F F) :=
  โจid Fโฉ

/-- Vertical composition of strong transformations. -/
abbrev vcomp {F G H : Pseudofunctor B C} (ฮท : StrongTrans F G) (ฮธ : StrongTrans G H) :
    StrongTrans F H :=
  Oplax.StrongTrans.vcomp ฮท ฮธ

end StrongTrans

variable (B C)

@[simps! id_app id_naturality_hom id_naturality_inv comp_naturality_hom
comp_naturality_inv]
scoped instance categoryStruct : CategoryStruct (Pseudofunctor B C) where
  Hom F G := StrongTrans F G
  id F := StrongTrans.id F
  comp := StrongTrans.vcomp

section

variable {F G H : Pseudofunctor B C}

@[simp]
lemma StrongTrans.comp_app (ฮท : F โถ G) (ฮธ : G โถ H) (a : B) :
    (ฮท โซ ฮธ).app a = ฮท.app a โซ ฮธ.app a :=
  rfl

end

end CategoryTheory.Pseudofunctor
