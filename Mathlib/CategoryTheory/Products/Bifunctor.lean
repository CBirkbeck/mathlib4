/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stephen Morgan, Scott Morrison, Andrea Laretto
-/
import Mathlib.CategoryTheory.Products.Basic
import Mathlib.Tactic.CategoryTheory.Reassoc
import Mathlib.CategoryTheory.Opposites

#align_import category_theory.products.bifunctor from "leanprover-community/mathlib"@"dc6c365e751e34d100e80fe6e314c3c3e0fd2988"

/-!
# Lemmas about functors out of product categories.
-/

open CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

variable {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} {E : Type u‚ÇÉ} {F : Type u‚ÇÑ}

variable [Category.{v‚ÇÅ} C] [Category.{v‚ÇÇ} D] [Category.{v‚ÇÉ} E] [Category.{v‚ÇÑ} F]

namespace CategoryTheory.Bifunctor

@[simp]
theorem map_id (F : C √ó D ‚•§ E) (X : C) (Y : D) :
    F.map ((ùüô X, ùüô Y) : (X, Y) ‚ü∂ (X, Y)) = ùüô (F.obj (X, Y)) :=
  F.map_id (X, Y)
#align category_theory.bifunctor.map_id CategoryTheory.Bifunctor.map_id

@[simp]
theorem map_id_comp (F : C √ó D ‚•§ E) (W : C) {X Y Z : D} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    F.map ((ùüô W, f ‚â´ g) : (W, X) ‚ü∂ (W, Z)) =
      F.map ((ùüô W, f) : (W, X) ‚ü∂ (W, Y)) ‚â´ F.map ((ùüô W, g) : (W, Y) ‚ü∂ (W, Z)) := by
  rw [‚Üê Functor.map_comp, prod_comp, Category.comp_id]
#align category_theory.bifunctor.map_id_comp CategoryTheory.Bifunctor.map_id_comp

@[simp]
theorem map_comp_id (F : C √ó D ‚•§ E) (X Y Z : C) (W : D) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    F.map ((f ‚â´ g, ùüô W) : (X, W) ‚ü∂ (Z, W)) =
      F.map ((f, ùüô W) : (X, W) ‚ü∂ (Y, W)) ‚â´ F.map ((g, ùüô W) : (Y, W) ‚ü∂ (Z, W)) := by
  rw [‚Üê Functor.map_comp, prod_comp, Category.comp_id]
#align category_theory.bifunctor.map_comp_id CategoryTheory.Bifunctor.map_comp_id

@[simp]
theorem diagonal (F : C √ó D ‚•§ E) (X X' : C) (f : X ‚ü∂ X') (Y Y' : D) (g : Y ‚ü∂ Y') :
    F.map ((ùüô X, g) : (X, Y) ‚ü∂ (X, Y')) ‚â´ F.map ((f, ùüô Y') : (X, Y') ‚ü∂ (X', Y')) =
      F.map ((f, g) : (X, Y) ‚ü∂ (X', Y')) := by
  rw [‚Üê Functor.map_comp, prod_comp, Category.id_comp, Category.comp_id]
#align category_theory.bifunctor.diagonal CategoryTheory.Bifunctor.diagonal

@[simp]
theorem diagonal' (F : C √ó D ‚•§ E) (X X' : C) (f : X ‚ü∂ X') (Y Y' : D) (g : Y ‚ü∂ Y') :
    F.map ((f, ùüô Y) : (X, Y) ‚ü∂ (X', Y)) ‚â´ F.map ((ùüô X', g) : (X', Y) ‚ü∂ (X', Y')) =
      F.map ((f, g) : (X, Y) ‚ü∂ (X', Y')) := by
  rw [‚Üê Functor.map_comp, prod_comp, Category.id_comp, Category.comp_id]
#align category_theory.bifunctor.diagonal' CategoryTheory.Bifunctor.diagonal'

end CategoryTheory.Bifunctor

namespace CategoryTheory.Functor

/-- Opposite of a bifunctor.
-/
@[simps!]
def biop (F : C·µí·µñ ‚•§ D ‚•§ E) : C ‚•§ D·µí·µñ ‚•§ E·µí·µñ := F.rightOp ‚ãô Functor.opHom _ _

end CategoryTheory.Functor

namespace CategoryTheory

variable {C‚ÇÅ C‚ÇÇ : C} {D‚ÇÅ D‚ÇÇ : D} {E‚ÇÅ E‚ÇÇ : E}

/-- Action of two-variable functors on objects. -/
abbrev Functor.obj‚ÇÇ (H : C ‚•§ D ‚•§ E) (A : C) (B : D) : E := (H.obj A).obj B

/-- Action of three-variable functors on objects. -/
abbrev Functor.obj‚ÇÉ (H : C ‚•§ D ‚•§ E ‚•§ F) (A : C) (B : D) (C : E) : F :=
  ((H.obj A).obj B).obj C

/-- Apply a natural transformation between bifunctors to two objects. -/
abbrev NatTrans.app‚ÇÇ {F G : C ‚•§ D ‚•§ E} (Œ± : NatTrans F G) (X : C) (Y : D) :
    F.obj‚ÇÇ X Y ‚ü∂ G.obj‚ÇÇ X Y :=
  (Œ±.app X).app Y

/-- Apply a natural transformation between bifunctors in three variables to three objects. -/
abbrev NatTrans.app‚ÇÉ {H G : C ‚•§ D ‚•§ E ‚•§ F} (Œ± : NatTrans H G) (X : C) (Y : D) (Z : E) :
    H.obj‚ÇÉ X Y Z ‚ü∂ G.obj‚ÇÉ X Y Z :=
  ((Œ±.app X).app Y).app Z

/-- Action of two-variable functors on morphisms. -/
abbrev Functor.map‚ÇÇ (H : C ‚•§ D ‚•§ E) (f : C‚ÇÅ ‚ü∂ C‚ÇÇ) (g : D‚ÇÅ ‚ü∂ D‚ÇÇ) :
    H.obj‚ÇÇ C‚ÇÅ D‚ÇÅ ‚ü∂ H.obj‚ÇÇ C‚ÇÇ D‚ÇÇ :=
  (H.map f).app D‚ÇÅ ‚â´ (H.obj C‚ÇÇ).map g

/-- Action of three-variable functors on morphisms. -/
abbrev Functor.map‚ÇÉ (H : C ‚•§ D ‚•§ E ‚•§ F) (f : C‚ÇÅ ‚ü∂ C‚ÇÇ) (g : D‚ÇÅ ‚ü∂ D‚ÇÇ) (h : E‚ÇÅ ‚ü∂ E‚ÇÇ) :
    H.obj‚ÇÉ C‚ÇÅ D‚ÇÅ E‚ÇÅ ‚ü∂ H.obj‚ÇÉ C‚ÇÇ D‚ÇÇ E‚ÇÇ :=
  (H.map f).app‚ÇÇ D‚ÇÅ E‚ÇÅ ‚â´ ((H.obj C‚ÇÇ).map g).app E‚ÇÅ ‚â´ (H.obj‚ÇÇ C‚ÇÇ D‚ÇÇ).map h

/- Natural transformations between functors with many variables. -/
namespace NatTrans

@[reassoc]
lemma comp_app‚ÇÇ {H G K : C ‚•§ D ‚•§ E} (Œ± : H ‚ü∂ G) (Œ≤ : G ‚ü∂ K) (X : C) (Y : D) :
    (Œ± ‚â´ Œ≤).app‚ÇÇ X Y = Œ±.app‚ÇÇ X Y ‚â´ Œ≤.app‚ÇÇ X Y :=
  by rw [app‚ÇÇ, comp_app, comp_app]

@[reassoc]
lemma comp_app‚ÇÉ {H G K : C ‚•§ D ‚•§ E ‚•§ F} (Œ± : H ‚ü∂ G) (Œ≤ : G ‚ü∂ K) (X : C) (Y : D)
    (Z : E) : (Œ± ‚â´ Œ≤).app‚ÇÉ X Y Z = Œ±.app‚ÇÉ X Y Z ‚â´ Œ≤.app‚ÇÉ X Y Z := rfl

/- Naturality for natural transformations in two variables. -/
@[reassoc]
lemma naturality‚ÇÇ {H G : C ‚•§ D ‚•§ E} (Œ± : NatTrans H G) {X Y X' Y'} (f : X ‚ü∂ X')
    (g : Y ‚ü∂ Y') : H.map‚ÇÇ f g ‚â´ Œ±.app‚ÇÇ X' Y' = Œ±.app‚ÇÇ X Y ‚â´ G.map‚ÇÇ f g := by
  rw [Category.assoc, naturality, naturality_app_assoc]

@[reassoc]
theorem naturality_app_app {G H : C ‚•§ D ‚•§ E ‚•§ F} (T : G ‚ü∂ H) (Z : E) {X‚ÇÅ Y‚ÇÅ : C}
    {X‚ÇÇ Y‚ÇÇ : D} (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (g : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
    (G.map f).app‚ÇÇ X‚ÇÇ Z ‚â´ ((G.obj Y‚ÇÅ).map g).app Z ‚â´ T.app‚ÇÉ Y‚ÇÅ Y‚ÇÇ Z =
      T.app‚ÇÉ X‚ÇÅ X‚ÇÇ Z ‚â´ (H.map‚ÇÇ f g).app Z := by
  rw [naturality_app, ‚Üê Category.assoc, ‚Üê comp_app‚ÇÇ,
    naturality, comp_app‚ÇÇ, Category.assoc]
  rfl

/- Naturality for natural transformations in three variables. -/
@[reassoc (attr := simp)]
lemma naturality‚ÇÉ {H G : C ‚•§ D ‚•§ E ‚•§ F} (Œ± : H ‚ü∂ G) {X Y Z X' Y' Z'}
    (f : X ‚ü∂ X') (g : Y ‚ü∂ Y') (h : Z ‚ü∂ Z') :
    H.map‚ÇÉ f g h ‚â´ Œ±.app‚ÇÉ X' Y' Z' = Œ±.app‚ÇÉ X Y Z ‚â´ G.map‚ÇÉ f g h := by
  simp only [Category.assoc, comp_app, naturality, naturality_app_app_assoc]

end NatTrans

end CategoryTheory
