/-
Copyright (c) 2023 Jakob von Raumer. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jakob von Raumer
-/
import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Comma.Arrow
import Mathlib.CategoryTheory.Comma.Over.Basic
import Mathlib.CategoryTheory.Limits.Shapes.Terminal

/-!
# The Factorisation Category of a Category

`Factorisation f` is the category containing as objects all factorisations of a morphism `f`.

We show that `Factorisation f` always has an initial and a terminal object.

we also show that `Factorisation f` is isomorphic to a comma category in two ways,
both as iterated comma categories. Given `f : X ‚ü∂ Y`, `(X/C)/f ‚âå Factorisation f ‚âå f/(C/Y)`.

TODO: Make `MonoFactorisation f` a special case of a `Factorisation f`.
-/

namespace CategoryTheory

universe v u

variable {C : Type u} [Category.{v} C]

/-- Factorisations of a morphism `f` as a structure, containing, one object, two morphisms,
and the condition that their composition equals `f`. -/
structure Factorisation {X Y : C} (f : X ‚ü∂ Y) where
  /-- The midpoint of the factorisation. -/
  mid : C
  /-- The morphism into the factorisation midpoint. -/
  Œπ   : X ‚ü∂ mid
  /-- The morphism out of the factorisation midpoint. -/
  œÄ   : mid ‚ü∂ Y
  /-- The factorisation condition. -/
  Œπ_œÄ : Œπ ‚â´ œÄ = f := by aesop_cat

attribute [simp] Factorisation.Œπ_œÄ

namespace Factorisation

variable {X Y : C} {f : X ‚ü∂ Y}

/-- Morphisms of `Factorisation f` consist of morphism between their midpoints and the obvious
commutativity conditions. -/
@[ext]
protected structure Hom (d e : Factorisation f) : Type (max u v) where
  /-- The morphism between the midpoints of the factorizations. -/
  h : d.mid ‚ü∂ e.mid
  /-- The left commuting triangle of the factorization morphism. -/
  Œπ_h : d.Œπ ‚â´ h = e.Œπ := by aesop_cat
  /-- The right commuting triangle of the factorization morphism. -/
  h_œÄ : h ‚â´ e.œÄ = d.œÄ := by aesop_cat

attribute [simp] Factorisation.Hom.Œπ_h Factorisation.Hom.h_œÄ

/-- The identity morphism of `Factorisation f`. -/
@[simps]
protected def Hom.id (d : Factorisation f) : Factorisation.Hom d d where
  h := ùüô _

/-- Composition of morphisms in `Factorisation f`. -/
@[simps]
protected def Hom.comp {d‚ÇÅ d‚ÇÇ d‚ÇÉ : Factorisation f}
    (f : Factorisation.Hom d‚ÇÅ d‚ÇÇ) (g : Factorisation.Hom d‚ÇÇ d‚ÇÉ) : Factorisation.Hom d‚ÇÅ d‚ÇÉ where
  h := f.h ‚â´ g.h
  Œπ_h := by rw [‚Üê Category.assoc, f.Œπ_h, g.Œπ_h]
  h_œÄ := by rw [Category.assoc, g.h_œÄ, f.h_œÄ]

instance : Category.{max u v} (Factorisation f) where
  Hom d e := Factorisation.Hom d e
  id d := Factorisation.Hom.id d
  comp f g := Factorisation.Hom.comp f g

/- We now aim to show that `Factorisation f` is equivalent to iterated comma categories
in two different ways.
Namely, given `f : X ‚ü∂ Y`, we will have `(X/C)/f` ‚âå `Factorisation f` ‚âå `f/(C/Y)`.

To give an idea of how the proof works:

Both
1. an object in `C/Y`
2. an object in `X/C`
can be viewed as a morphism `f : X ‚ü∂ Y` in Category `C`
from the perspective of over/under categories.

Let's first consider `(X/C)/f`

Similarly, an object `Œ±` in `(X/C)/f` can be viewed as a morphism `f‚ÇÅ : f‚ÇÄ ‚ü∂ f` in Category `X/C`
where `f‚ÇÄ` and `f` are both objects of `X/C`,
thus morphisms of form `X ‚ü∂ ?` in Category `C` (morphisms with domain X).
We know `f : X ‚ü∂ Y`. Take `f‚ÇÄ : X ‚ü∂ Z‚ÇÅ`.
Then `Œ±` is determined by the object-morphism pair of `(f‚ÇÄ, f‚ÇÅ)`.
By definitions of Under Categories, we can know that the morphism `f‚ÇÅ` will satisfy:
`f‚ÇÄ ‚â´ f‚ÇÅ = f`.

Assume another similar object-morphism pair in `X/C`, `(g‚ÇÄ, g‚ÇÅ)` determines
another object `Œ≤` in `(X / C) / f`, with `g‚ÇÄ : X ‚ü∂ Z‚ÇÇ`.

A morphism `Œ∫ : Œ± ‚ü∂ Œ≤` in `(X / C) / f`, by definition of Over Categories,
is a morphism in `X/C` making the following diagram commute:
           Œ∫
    Œ±  ---------> Œ≤
    |             |
f‚ÇÅ  |             | g‚ÇÅ
    ‚à®             ‚à®
    f      ==     f

so f‚ÇÅ = Œ∫ ‚â´ g‚ÇÅ.

As we have discussed, `Œ±` can be determined by the pair `(f‚ÇÄ, f‚ÇÅ)`, where the latter could be used
to formulate objects in the factorisation category.

Given `f‚ÇÄ : X ‚ü∂ Z`, and `f‚ÇÄ ‚â´ f‚ÇÅ = f`, we can see that the pair `(f‚ÇÄ, f‚ÇÅ)` can also be used to
structure a factorisation.
The map `Œ∫ : Œ± ‚ü∂ Œ≤` could thus be transferred to a map `Œ∫' : ‚ü® f‚ÇÄ, f‚ÇÅ ‚ü© ‚ü∂ ‚ü® g‚ÇÄ, g‚ÇÅ ‚ü©` in `Fact f`.
Such assignment of mapping and object would form a functor, and evidently this functor is an iso if
we try to construct the `Œ±`s and `Œ≤`s in the reversed direction from factorisations.
Thus we have conceptually shown `Factorisation f` is equivalent to one iterated comma category
`(X/C)/f` (being an over category on an under category),
and we can show similar results for `f/(C/Y)` (an under category on an over category).
-/
section IteratedCommaCategories

variable (f : X ‚ü∂ Y)

/- `Factorisation f ‚âå (X/C)/f` -/
section OverOfUnder

/-- The functor from `Factorisation f` to `(X/C)/f` -/
def fromFactToOverOfUnder : Factorisation f ‚•§ Over (Under.mk f) where
  obj Œ± := Over.mk (Under.homMk Œ±.œÄ : Under.mk Œ±.Œπ ‚ü∂ Under.mk f)
  map Œ∫ := Over.homMk (Under.homMk Œ∫.h Œ∫.Œπ_h) (Under.UnderMorphism.ext (by simp))

/-- The functor from `(X/C)/f` to `Factorisation f` -/
def fromOverOfUndertoFact : Over (Under.mk f) ‚•§ Factorisation f where
  obj Œ± := {
    mid := Œ±.left.right,
    Œπ := Œ±.left.hom,
    œÄ := Œ±.hom.right
  }
  map Œ∫ := {
    h := Œ∫.left.right,
    Œπ_h := Under.w Œ∫.left,
    h_œÄ := by (rw [‚Üê Under.comp_right, Over.w])
  }

/-- We aim to show `Factorisation f` ‚âå `(X/C)/f`. That is to say,
we aim to show the two functors we defined above are inverses of each other.
-/
def factEqOverOfUnder : Factorisation f ‚âå Over (Under.mk f) where
  functor := fromFactToOverOfUnder f
  inverse := fromOverOfUndertoFact f
  unitIso := NatIso.ofComponents (fun g => {
    hom := ùüô g
    inv := ùüô g
  })
  counitIso := NatIso.ofComponents (fun g => {
    hom := ùüô (fromOverOfUndertoFact f ‚ãô fromFactToOverOfUnder f).obj g
    inv := ùüô (fromOverOfUndertoFact f ‚ãô fromFactToOverOfUnder f).obj g
  })

end OverOfUnder

/- `Factorisation f ‚âå f/(C/Y)` -/
section UnderOfOver

/-- The functor turning `Factorisation f` into `f/(C/Y)` -/
def fromFactToUnderOfOver : Factorisation f ‚•§ Under (Over.mk f) where
  obj Œ± := Under.mk (Over.homMk Œ±.Œπ : Over.mk f ‚ü∂ Over.mk Œ±.œÄ)
  map Œ∫ := Under.homMk (Over.homMk Œ∫.h Œ∫.h_œÄ) (Over.OverMorphism.ext (by simp))

/-- The functor turning `f/(C/Y)` into `Factorisation f` -/
def fromUnderOfOvertoFact : Under (Over.mk f) ‚•§ Factorisation f where
  obj Œ± := { mid := Œ±.right.left, Œπ := Œ±.hom.left, œÄ := Œ±.right.hom}
  map Œ∫ := {h := Œ∫.right.left, Œπ_h := by (rw [‚Üê Over.comp_left, Under.w]), h_œÄ := Over.w Œ∫.right}

/-- proving that the two functors above are inverses of each other.
Thus formulating the ‚âå relationship. -/
def factEqUnderOfOver : Factorisation f ‚âå Under (Over.mk f) where
  functor := fromFactToUnderOfOver f
  inverse := fromUnderOfOvertoFact f
  unitIso := NatIso.ofComponents (fun g => {
    hom := ùüô g
    inv := ùüô g
  })
  counitIso := NatIso.ofComponents (fun g => {
    hom := ùüô (fromUnderOfOvertoFact f ‚ãô fromFactToUnderOfOver f).obj g
    inv := ùüô (fromUnderOfOvertoFact f ‚ãô fromFactToUnderOfOver f).obj g
  })

end UnderOfOver

end IteratedCommaCategories

variable (d : Factorisation f)

/-- The initial object in `Factorisation f`, with the domain of `f` as its midpoint. -/
@[simps]
protected def initial : Factorisation f where
  mid := X
  Œπ := ùüô _
  œÄ := f

/-- The unique morphism out of `Factorisation.initial f`. -/
@[simps]
protected def initialHom (d : Factorisation f) :
    Factorisation.Hom (Factorisation.initial : Factorisation f) d where
  h := d.Œπ

instance : Unique ((Factorisation.initial : Factorisation f) ‚ü∂ d) where
  default := Factorisation.initialHom d
  uniq f := by apply Factorisation.Hom.ext; simp [‚Üê f.Œπ_h]

/-- The terminal object in `Factorisation f`, with the codomain of `f` as its midpoint. -/
@[simps]
protected def terminal : Factorisation f where
  mid := Y
  Œπ := f
  œÄ := ùüô _

/-- The unique morphism into `Factorisation.terminal f`. -/
@[simps]
protected def terminalHom (d : Factorisation f) :
    Factorisation.Hom d (Factorisation.terminal : Factorisation f) where
  h := d.œÄ

instance : Unique (d ‚ü∂ (Factorisation.terminal : Factorisation f)) where
  default := Factorisation.terminalHom d
  uniq f := by apply Factorisation.Hom.ext; simp [‚Üê f.h_œÄ]

open Limits

/-- The initial factorisation is an initial object -/
def IsInitial_initial : IsInitial (Factorisation.initial : Factorisation f) := IsInitial.ofUnique _

instance : HasInitial (Factorisation f) := Limits.hasInitial_of_unique Factorisation.initial

/-- The terminal factorisation is a terminal object -/
def IsTerminal_terminal : IsTerminal (Factorisation.terminal : Factorisation f) :=
IsTerminal.ofUnique _

instance : HasTerminal (Factorisation f) := Limits.hasTerminal_of_unique Factorisation.terminal

/-- The forgetful functor from `Factorisation f` to the underlying category `C`. -/
@[simps]
def forget : Factorisation f ‚•§ C where
  obj := Factorisation.mid
  map f := f.h

end Factorisation

end CategoryTheory
