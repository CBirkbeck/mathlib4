/-
Copyright (c) 2022 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import Mathlib.CategoryTheory.Preadditive.FunctorCategory
import Mathlib.CategoryTheory.Linear.Basic

#align_import category_theory.linear.functor_category from "leanprover-community/mathlib"@"829895f162a1f29d0133f4b3538f4cd1fb5bffd3"

/-!
# Linear structure on functor categories

If `C` and `D` are categories and `D` is `R`-linear,
then `C โฅค D` is also `R`-linear.

-/


open BigOperators

namespace CategoryTheory

open CategoryTheory.Limits Linear

variable {R : Type*} [Semiring R]

variable {C D : Type*} [Category C] [Category D] [Preadditive D] [Linear R D]

instance functorCategoryLinear : Linear R (C โฅค D)
    where
  homModule F G :=
    { smul := fun r ฮฑ =>
        { app := fun X => r โข ฮฑ.app X
          naturality := by
            intros
            -- โข F.map fโ โซ (fun X => r โข NatTrans.app ฮฑ X) Yโ = (fun X => r โข NatTrans.app ฮฑ โฆ
            rw [comp_smul, smul_comp, ฮฑ.naturality] }
            -- ๐ no goals
      one_smul := by
        intros
        -- โข 1 โข bโ = bโ
        ext
        -- โข NatTrans.app (1 โข bโ) xโ = NatTrans.app bโ xโ
        apply one_smul
        -- ๐ no goals
      zero_smul := by
        intros
        -- โข 0 โข xโ = 0
        ext
        -- โข NatTrans.app (0 โข xโยน) xโ = NatTrans.app 0 xโ
        apply zero_smul
        -- โข aโ โข 0 = 0
        -- ๐ no goals
        -- โข NatTrans.app (aโ โข 0) xโ = NatTrans.app 0 xโ
      smul_zero := by
        -- ๐ no goals
        intros
        ext
        -- โข (rโ + sโ) โข xโ = rโ โข xโ + sโ โข xโ
        apply smul_zero
        -- โข NatTrans.app ((rโ + sโ) โข xโยน) xโ = NatTrans.app (rโ โข xโยน + sโ โข xโยน) xโ
      add_smul := by
        -- โข aโ โข (xโ + yโ) = aโ โข xโ + aโ โข yโ
        -- โข (xโ * yโ) โข bโ = xโ โข yโ โข bโ
        -- ๐ no goals
        -- โข NatTrans.app ((xโยน * yโ) โข bโ) xโ = NatTrans.app (xโยน โข yโ โข bโ) xโ
        -- โข NatTrans.app (aโ โข (xโยน + yโ)) xโ = NatTrans.app (aโ โข xโยน + aโ โข yโ) xโ
        -- ๐ no goals
        intros
        -- ๐ no goals
        ext
        apply add_smul
      smul_add := by
        intros
        ext
        apply smul_add
      mul_smul := by
        intros
        ext
        apply mul_smul }
  smul_comp := by
    intros
    -- โข (rโ โข fโ) โซ gโ = rโ โข fโ โซ gโ
    ext
    -- โข NatTrans.app ((rโ โข fโ) โซ gโ) xโ = NatTrans.app (rโ โข fโ โซ gโ) xโ
    apply smul_comp
    -- ๐ no goals
  comp_smul := by
    intros
    -- โข fโ โซ (rโ โข gโ) = rโ โข fโ โซ gโ
    ext
    -- โข NatTrans.app (fโ โซ (rโ โข gโ)) xโ = NatTrans.app (rโ โข fโ โซ gโ) xโ
    apply comp_smul
    -- ๐ no goals
#align category_theory.functor_category_linear CategoryTheory.functorCategoryLinear

namespace NatTrans

variable {F G : C โฅค D}

/-- Application of a natural transformation at a fixed object,
as group homomorphism -/
@[simps]
def appLinearMap (X : C) : (F โถ G) โโ[R] F.obj X โถ G.obj X where
  toFun ฮฑ := ฮฑ.app X
  map_add' _ _ := rfl
  map_smul' _ _ := rfl
#align category_theory.nat_trans.app_linear_map CategoryTheory.NatTrans.appLinearMap

@[simp]
theorem app_smul (X : C) (r : R) (ฮฑ : F โถ G) : (r โข ฮฑ).app X = r โข ฮฑ.app X :=
  rfl
#align category_theory.nat_trans.app_smul CategoryTheory.NatTrans.app_smul

end NatTrans

end CategoryTheory
