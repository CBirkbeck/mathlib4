import Mathlib.AlgebraicTopology.Nerve

namespace CategoryTheory

open Category

variable (C : Type*) [Category C]

abbrev ComposableArrows (n : ‚Ñï) := Fin (n + 1) ‚•§ C

namespace ComposableArrows

variable {C} {n : ‚Ñï}
variable (F : ComposableArrows C n)

@[simp]
abbrev obj' (i : ‚Ñï) (hi : i ‚â§ n := by linarith) : C := F.obj ‚ü®i, by linarith‚ü©

@[simp]
abbrev map' (i j : ‚Ñï) (hij : i ‚â§ j := by linarith) (hjn : j ‚â§ n := by linarith) :
  F.obj ‚ü®i, by linarith‚ü© ‚ü∂ F.obj ‚ü®j, by linarith‚ü© := F.map (homOfLE (by
    simp only [Fin.mk_le_mk]
    linarith))

variable {F}

@[simp]
abbrev app' {G : ComposableArrows C n} (œÜ : F ‚ü∂ G) (i : ‚Ñï) (hi : i ‚â§ n := by linarith) :
    F.obj' i ‚ü∂ G.obj' i := œÜ.app _

variable (F)

variable {X : C} (f : X ‚ü∂ F.obj' 0)

namespace Precomp

variable (X)

def obj : Fin (n + 1 + 1) ‚Üí C
  | ‚ü®0, _‚ü© => X
  | ‚ü®i + 1, hi‚ü© => F.obj' i

@[simp]
lemma obj_zero : obj F X 0 = X := rfl

@[simp]
lemma obj_one : obj F X 1 = F.obj' 0 := rfl

@[simp]
lemma obj_succ (i : ‚Ñï) (hi : i + 1 < n + 1 + 1) : obj F X ‚ü®i + 1, hi‚ü© = F.obj' i := rfl

variable {X}

def map : ‚àÄ (i j : Fin (n + 1 + 1)) (_ : i ‚â§ j), obj F X i ‚ü∂ obj F X j
  | ‚ü®0, _‚ü©, ‚ü®0, _‚ü©, _ => ùüô X
  | ‚ü®0, _‚ü©, ‚ü®1, _‚ü©, _ => f
  | ‚ü®0, _‚ü©, ‚ü®j+2, hj‚ü©, _ => f ‚â´ F.map' 0 (j+1)
  | ‚ü®i+1, hi‚ü©, ‚ü®j+1, hj‚ü©, hij => F.map' i j (by simpa using hij)

@[simp]
lemma map_zero_zero : map F f 0 0 (by simp) = ùüô X := rfl

@[simp]
lemma map_one_one : map F f 1 1 (by simp) = F.map (ùüô _) := rfl

@[simp]
lemma map_zero_one : map F f 0 1 (by simp) = f := rfl

@[simp]
lemma map_zero_one' : map F f 0 ‚ü®0 + 1, by simp‚ü© (by simp) = f := rfl

@[simp]
lemma map_zero_succ_succ (j : ‚Ñï) (hj : j + 2 < n + 1 + 1) :
    map F f 0 ‚ü®j+2, hj‚ü© (by simp) = f ‚â´ F.map' 0 (j+1) := rfl

@[simp]
lemma map_succ_succ (i j : ‚Ñï) (hi : i + 1 < n + 1 + 1) (hj : j + 1 < n + 1 + 1) (hij : i + 1 ‚â§ j + 1) :
    map F f ‚ü®i + 1, hi‚ü© ‚ü®j+1, hj‚ü© hij = F.map' i j := rfl

@[simp]
lemma map_one_succ (j : ‚Ñï) (hj : j + 1 < n + 1 + 1) :
    map F f 1 ‚ü®j + 1, hj‚ü© (by simp [Fin.le_def]) = F.map' 0 j := rfl

lemma map_id (i : Fin (n + 1 + 1)) : map F f i i (by simp) = ùüô _ := by
  obtain ‚ü®i, hi‚ü© := i
  cases i
  ¬∑ rfl
  ¬∑ apply F.map_id

lemma map_comp {i j k : Fin (n + 1 + 1)} (hij : i ‚â§ j) (hjk : j ‚â§ k) :
    map F f i k (hij.trans hjk) = map F f i j hij ‚â´ map F f j k hjk := by
  obtain ‚ü®i, hi‚ü© := i
  obtain ‚ü®j, hj‚ü© := j
  obtain ‚ü®k, hk‚ü© := k
  cases i
  ¬∑ obtain _ | _ | j := j
    ¬∑ dsimp
      erw [id_comp]
    ¬∑ obtain _ | _ | k := k
      ¬∑ simp at hjk
      ¬∑ dsimp
        erw [F.map_id, comp_id]
      ¬∑ rfl
    ¬∑ obtain _ | _ | k := k
      ¬∑ simp [Fin.ext_iff] at hjk
      ¬∑ simp [Fin.le_def, Nat.succ_eq_add_one] at hjk
      ¬∑ dsimp
        rw [assoc, ‚Üê F.map_comp, homOfLE_comp]
  ¬∑ obtain _ | j := j
    ¬∑ simp [Fin.ext_iff] at hij
    ¬∑ obtain _ | k := k
      ¬∑ simp [Fin.ext_iff] at hjk
      ¬∑ change F.map _ = F.map _ ‚â´ F.map _
        rw [‚Üê F.map_comp, homOfLE_comp]

end Precomp

@[simps]
def precomp : ComposableArrows C (n + 1) where
  obj := Precomp.obj F X
  map g := Precomp.map F f _ _ (leOfHom g)
  map_id := Precomp.map_id F f
  map_comp g g' := (Precomp.map_comp F f (leOfHom g) (leOfHom g'))

@[simps!]
def mk‚ÇÄ (X : C) : ComposableArrows C 0 := (Functor.const (Fin 1)).obj X

@[simps]
def homMk‚ÇÄ {X Y : ComposableArrows C 0} (œÜ : X.obj' 0 ‚ü∂ Y.obj' 0) : X ‚ü∂ Y where
  app := fun ‚ü®0, _‚ü©  => œÜ
  naturality := fun ‚ü®0, _‚ü© ‚ü®0, _‚ü© _ => by
    erw [X.map_id, Y.map_id, id_comp, comp_id]

@[simps]
def isoMk‚ÇÄ {X Y : ComposableArrows C 0} (œÜ : X.obj' 0 ‚âÖ Y.obj' 0) : X ‚âÖ Y where
  hom := homMk‚ÇÄ œÜ.hom
  inv := homMk‚ÇÄ œÜ.inv

@[ext]
lemma hom_ext‚ÇÄ {X Y : ComposableArrows C 0} (f g : X ‚ü∂ Y) (h : app' f 0 = app' g 0) : f = g := by
  apply NatTrans.ext
  ext1 x
  match x with
    | 0 => exact h

namespace Mk‚ÇÅ

variable (X‚ÇÄ X‚ÇÅ : C) (f : X‚ÇÄ ‚ü∂ X‚ÇÅ)

@[simp]
def obj : Fin 2 ‚Üí C
  | ‚ü®0, _‚ü© => X‚ÇÄ
  | ‚ü®1, _‚ü©  => X‚ÇÅ

variable {X‚ÇÄ X‚ÇÅ}

@[simp]
def map : ‚àÄ (i j : Fin 2) (_ : i ‚â§ j), obj X‚ÇÄ X‚ÇÅ i ‚ü∂ obj X‚ÇÄ X‚ÇÅ j
  | ‚ü®0, _‚ü©, ‚ü®0, _‚ü©, _ => ùüô _
  | ‚ü®0, _‚ü©, ‚ü®1, _‚ü©, _ => f
  | ‚ü®1, _‚ü©, ‚ü®1, _‚ü©, _ => ùüô _

lemma map_id (i : Fin 2) : map f i i (by simp) = ùüô _ :=
  match i with
    | 0 => rfl
    | 1 => rfl

lemma _root_.Fin.eq_one_of_neq_zero (i : Fin 2) (hi : i ‚â† 0) : i = 1 :=
  match i with
    | 0 => by simp at hi
    | 1 => rfl

lemma map_comp {i j k : Fin 2} (hij : i ‚â§ j) (hjk : j ‚â§ k) :
    map f i k (hij.trans hjk) = map f i j hij ‚â´ map f j k hjk :=
  match i with
    | 0 =>
        match j with
          | 0 => by rw [map_id, id_comp]
          | 1 => by
              obtain rfl : k = 1 := k.eq_one_of_neq_zero (by rintro rfl; simp at hjk)
              rw [map_id, comp_id]
    | 1 => by
        obtain rfl := j.eq_one_of_neq_zero (by rintro rfl; simp at hij)
        obtain rfl := k.eq_one_of_neq_zero (by rintro rfl; simp at hjk)
        rw [map_id, id_comp]

end Mk‚ÇÅ

@[simps]
def mk‚ÇÅ {X‚ÇÄ X‚ÇÅ : C} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) : ComposableArrows C 1 where
  obj := Mk‚ÇÅ.obj X‚ÇÄ X‚ÇÅ
  map g := Mk‚ÇÅ.map f _ _ (leOfHom g)
  map_id := Mk‚ÇÅ.map_id f
  map_comp g g' := Mk‚ÇÅ.map_comp f (leOfHom g) (leOfHom g')

@[simps]
def homMk‚ÇÅ {f g : ComposableArrows C 1} (left : f.obj' 0 ‚ü∂ g.obj' 0) (right : f.obj' 1 ‚ü∂ g.obj' 1)
    (w : f.map' 0 1 ‚â´ right = left ‚â´ g.map' 0 1 := by aesop_cat) :
    f ‚ü∂ g where
  app i :=
    match i with
      | ‚ü®0, _‚ü© => left
      | ‚ü®1, _‚ü© => right
  naturality {i j} hij := by
    replace hij := leOfHom hij
    match i with
      | ‚ü®0, _‚ü© =>
          match j with
            | ‚ü®0, _‚ü© =>
                dsimp
                erw [f.map_id, g.map_id, id_comp, comp_id]
            | ‚ü®1, _‚ü© => exact w
      | ‚ü®1, _‚ü©  =>
          obtain rfl : j = ‚ü®1, _‚ü© := j.eq_one_of_neq_zero (by rintro rfl; simp at hij)
          dsimp
          erw [f.map_id, g.map_id, id_comp, comp_id]

@[ext]
lemma hom_ext‚ÇÅ {f g : ComposableArrows C 1} (œÜ œÜ' : f ‚ü∂ g)
    (h‚ÇÄ : app' œÜ 0 = app' œÜ' 0) (h‚ÇÅ : app' œÜ 1 = app' œÜ' 1) :
    œÜ = œÜ' := by
  apply NatTrans.ext
  ext i
  match i with
    | 0 => exact h‚ÇÄ
    | 1 => exact h‚ÇÅ

@[simps]
def isoMk‚ÇÅ {f g : ComposableArrows C 1} (left : f.obj' 0 ‚âÖ g.obj' 0) (right : f.obj' 1 ‚âÖ g.obj' 1)
    (w : f.map' 0 1 ‚â´ right.hom = left.hom ‚â´ g.map' 0 1) :
    f ‚âÖ g where
  hom := homMk‚ÇÅ left.hom right.hom w
  inv := homMk‚ÇÅ left.inv right.inv (by
    rw [‚Üê cancel_mono right.hom, assoc, assoc, w, right.inv_hom_id, left.inv_hom_id_assoc]
    dsimp
    erw [comp_id])

@[simp]
def mk‚ÇÇ {X‚ÇÄ X‚ÇÅ X‚ÇÇ : C} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) (g : X‚ÇÅ ‚ü∂ X‚ÇÇ) : ComposableArrows C 2 :=
  (mk‚ÇÅ g).precomp f

@[simp]
def mk‚ÇÉ {X‚ÇÄ X‚ÇÅ X‚ÇÇ X‚ÇÉ : C}
    (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) (g : X‚ÇÅ ‚ü∂ X‚ÇÇ) (h : X‚ÇÇ ‚ü∂ X‚ÇÉ) : ComposableArrows C 3 :=
  (mk‚ÇÇ g h).precomp f

@[simp]
def mk‚ÇÑ {X‚ÇÄ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : C}
    (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) (g : X‚ÇÅ ‚ü∂ X‚ÇÇ) (h : X‚ÇÇ ‚ü∂ X‚ÇÉ) (i : X‚ÇÉ ‚ü∂ X‚ÇÑ) : ComposableArrows C 4 :=
  (mk‚ÇÉ g h i).precomp f

@[simp]
def mk‚ÇÖ {X‚ÇÄ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ X‚ÇÖ : C}
    (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) (g : X‚ÇÅ ‚ü∂ X‚ÇÇ) (h : X‚ÇÇ ‚ü∂ X‚ÇÉ) (i : X‚ÇÉ ‚ü∂ X‚ÇÑ) (j : X‚ÇÑ ‚ü∂ X‚ÇÖ) : ComposableArrows C 5 :=
  (mk‚ÇÑ g h i j).precomp f

@[simp]
def mk‚ÇÜ {X‚ÇÄ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ X‚ÇÖ X‚ÇÜ : C}
    (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) (g : X‚ÇÅ ‚ü∂ X‚ÇÇ) (h : X‚ÇÇ ‚ü∂ X‚ÇÉ) (i : X‚ÇÉ ‚ü∂ X‚ÇÑ) (j : X‚ÇÑ ‚ü∂ X‚ÇÖ) (k : X‚ÇÖ ‚ü∂ X‚ÇÜ) :
    ComposableArrows C 6 :=
  (mk‚ÇÖ g h i j k ).precomp f

@[simp]
def mk‚Çá {X‚ÇÄ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ X‚ÇÖ X‚ÇÜ X‚Çá : C} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) (g : X‚ÇÅ ‚ü∂ X‚ÇÇ) (h : X‚ÇÇ ‚ü∂ X‚ÇÉ)
    (i : X‚ÇÉ ‚ü∂ X‚ÇÑ) (j : X‚ÇÑ ‚ü∂ X‚ÇÖ) (k : X‚ÇÖ ‚ü∂ X‚ÇÜ) (l : X‚ÇÜ ‚ü∂ X‚Çá) :
    ComposableArrows C 7 :=
  (mk‚ÇÜ g h i j k l).precomp f

example {X‚ÇÄ X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ X‚ÇÖ X‚ÇÜ X‚Çá : C} (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) (g : X‚ÇÅ ‚ü∂ X‚ÇÇ) (h : X‚ÇÇ ‚ü∂ X‚ÇÉ)
    (i : X‚ÇÉ ‚ü∂ X‚ÇÑ) (j : X‚ÇÑ ‚ü∂ X‚ÇÖ) (k : X‚ÇÖ ‚ü∂ X‚ÇÜ) (l : X‚ÇÜ ‚ü∂ X‚Çá) :
    (mk‚Çá f g h i j k l).map' 0 7 = f ‚â´ g ‚â´ h ‚â´ i ‚â´ j ‚â´ k ‚â´ l := by dsimp

@[simps]
def _root_.Fin.succFunctor (n : ‚Ñï) : Fin n ‚•§ Fin (n + 1) where
  obj i := i.succ
  map {i j} hij := homOfLE (Fin.succ_le_succ_iff.2 (leOfHom hij))

@[simps!]
def Œ¥‚ÇÄFunctor : ComposableArrows C (n + 1) ‚•§ ComposableArrows C n :=
  (whiskeringLeft _ _ _).obj (Fin.succFunctor _)

abbrev Œ¥‚ÇÄ (F : ComposableArrows C (n + 1)) := Œ¥‚ÇÄFunctor.obj F

section

variable {F G : ComposableArrows C (n + 1)}
  (Œ± : F.obj' 0 ‚ü∂ G.obj' 0)
  (Œ≤ : F.Œ¥‚ÇÄ ‚ü∂ G.Œ¥‚ÇÄ)
  (w : F.map' 0 1 ‚â´ app' Œ≤ 0 = Œ± ‚â´ G.map' 0 1)

def homMk : F ‚ü∂ G where
  app i := match i with
    | ‚ü®0, _‚ü© => Œ±
    | ‚ü®i+1, hi‚ü© => app' Œ≤ i
  naturality {i j} hij := by
    have hij' := leOfHom hij
    match i with
      | ‚ü®0, _‚ü© =>
          match j with
            | ‚ü®0, _‚ü© => erw [F.map_id, G.map_id, id_comp, comp_id]
            | ‚ü®j+1, hj‚ü© =>
                have hj' : j ‚â§ n := by linarith
                have hj'' : j < n + 1 := by linarith
                have h‚ÇÅ : (0 : Fin (n+1+1)) ‚â§ 1 := Fin.zero_le 1
                have h‚ÇÇ' : (0 : Fin (n+1)) ‚â§ ‚ü®j, hj''‚ü© := Fin.zero_le _
                have h‚ÇÇ : (1 : Fin (n+1+1)) ‚â§ ‚ü®j+1, hj‚ü© := by simp [Fin.le_def]
                obtain rfl : hij = homOfLE (h‚ÇÅ.trans h‚ÇÇ) := rfl
                nth_rewrite 2 [‚Üê homOfLE_comp h‚ÇÅ h‚ÇÇ]
                rw [G.map_comp]
                change _ ‚â´ app' Œ≤ j hj' = Œ± ‚â´ _
                rw [‚Üê reassoc_of% w]
                erw [‚Üê Œ≤.naturality (homOfLE h‚ÇÇ')]
                erw [‚Üê Functor.map_comp_assoc]
                rfl
      | ‚ü®i+1, hi‚ü©  =>
          match j with
            | ‚ü®0, _‚ü© => simp [Fin.ext_iff] at hij'
            | ‚ü®j+1, hj‚ü© =>
                have h : (‚ü®i, by linarith‚ü© : Fin (n+1)) ‚â§ ‚ü®j, by linarith‚ü© := by simpa using hij'
                exact Œ≤.naturality (homOfLE h)

@[simp]
lemma homMk_app_zero : (homMk Œ± Œ≤ w).app 0 = Œ± := rfl

@[simp]
lemma homMk_app_succ (i : ‚Ñï) (hi : i + 1 < n + 1 + 1) :
    (homMk Œ± Œ≤ w).app ‚ü®i + 1, hi‚ü© = app' Œ≤ i := rfl

example {X‚ÇÄ X‚ÇÅ X‚ÇÇ X‚ÇÉ : C}
    (f : X‚ÇÄ ‚ü∂ X‚ÇÅ) (g : X‚ÇÅ ‚ü∂ X‚ÇÇ) (h : X‚ÇÇ ‚ü∂ X‚ÇÉ) : mk‚ÇÇ f (g ‚â´ h) ‚ü∂ mk‚ÇÇ (f ‚â´ g) h :=
  homMk (ùüô _) (homMk‚ÇÅ g (ùüô _) (by aesop_cat)) (by aesop_cat)

end

lemma hom_ext_succ {F G : ComposableArrows C (n + 1)} {f g : F ‚ü∂ G}
    (h‚ÇÄ : app' f 0 = app' g 0) (h‚ÇÅ : Œ¥‚ÇÄFunctor.map f = Œ¥‚ÇÄFunctor.map g) : f = g := by
  ext ‚ü®i, hi‚ü©
  obtain _ | i := i
  ¬∑ exact h‚ÇÄ
  ¬∑ rw [Nat.succ_eq_add_one] at hi
    exact congr_app h‚ÇÅ ‚ü®i, by linarith‚ü©

section

@[simps]
def isoMk {F G : ComposableArrows C (n + 1)} (Œ± : F.obj' 0 ‚âÖ G.obj' 0)
    (Œ≤ : F.Œ¥‚ÇÄ ‚âÖ G.Œ¥‚ÇÄ) (w : F.map' 0 1 ‚â´ app' Œ≤.hom 0 = Œ±.hom ‚â´ G.map' 0 1) : F ‚âÖ G where
  hom := homMk Œ±.hom Œ≤.hom w
  inv := homMk Œ±.inv Œ≤.inv (by
    rw [‚Üê cancel_epi Œ±.hom, ‚Üê reassoc_of% w, Œ±.hom_inv_id_assoc, Œ≤.hom_inv_id_app]
    dsimp
    rw [comp_id])
  hom_inv_id := by
    apply hom_ext_succ
    ¬∑ simp
    ¬∑ ext ‚ü®i, hi‚ü©
      simp
  inv_hom_id := by
    apply hom_ext_succ
    ¬∑ simp
    ¬∑ ext ‚ü®i, hi‚ü©
      simp

end

lemma _root_.CategoryTheory.Functor.ext_of_iso {C D : Type*} [Category C] [Category D]
    {F G : C ‚•§ D} (e : F ‚âÖ G) (hobj : ‚àÄ X, F.obj X = G.obj X)
    (happ : ‚àÄ X, e.hom.app X = eqToHom (hobj X)) : F = G :=
  Functor.ext hobj (fun X Y f => by
    rw [‚Üê cancel_mono (e.hom.app Y), e.hom.naturality f, happ, happ, assoc, assoc,
      eqToHom_trans, eqToHom_refl, comp_id])

end ComposableArrows

@[simps]
def composableArrowsZeroEquivalence : ComposableArrows C 0 ‚âå C where
  functor :=
    { obj := fun f => f.obj' 0
      map := fun f => ComposableArrows.app' f 0 }
  inverse :=
    { obj := fun X => ComposableArrows.mk‚ÇÄ X
      map := fun f => ComposableArrows.homMk‚ÇÄ f }
  unitIso := NatIso.ofComponents (fun X => ComposableArrows.isoMk‚ÇÄ (Iso.refl _))
    (by aesop_cat)
  counitIso := Iso.refl _

set_option maxHeartbeats 600000 in
@[simps]
def composableArrowsOneEquivalence : ComposableArrows C 1 ‚âå Arrow C where
  functor :=
    { obj := fun F => Arrow.mk (F.map' 0 1)
      map := fun {F G} f =>
        { left := ComposableArrows.app' f 0
          right := ComposableArrows.app' f 1
          w := (f.naturality _).symm } }
  inverse :=
    { obj := fun f => ComposableArrows.mk‚ÇÅ f.hom
      map := fun {f g} œÜ => ComposableArrows.homMk‚ÇÅ œÜ.left œÜ.right œÜ.w.symm }
  unitIso := NatIso.ofComponents
    (fun f => ComposableArrows.isoMk‚ÇÅ (Iso.refl _) (Iso.refl _) (by aesop_cat))
      (by aesop_cat)
  counitIso := Iso.refl _

end CategoryTheory
