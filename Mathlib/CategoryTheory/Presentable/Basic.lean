/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import Mathlib.CategoryTheory.Filtered.Basic
import Mathlib.CategoryTheory.Limits.Preserves.Basic
import Mathlib.CategoryTheory.Comma.CardinalArrow
import Mathlib.Data.Set.Finite.Basic
import Mathlib.SetTheory.Cardinal.Cofinality

/-! # Presentable objects

If `Œ∫` is a regular cardinal, we introduce the notion of `Œ∫`-filtered
category, which generalizes the notion of filtered category.
Indeed, we obtain the equivalence
`IsCardinalFiltered J ‚Ñµ‚ÇÄ ‚Üî IsFiltered J`.

A functor `F : C ‚•§ D` is `Œ∫`-accessible (`Functor.IsAccessible`)
if it commutes with colimits of shape `J` where `J` is any `Œ∫`-filtered category.

An object `X` of a category is `Œ∫`-presentable (`IsPresentable`)
if the functor `Hom(X, _)` (i.e. `coyoneda.obj (op X)`) is `Œ∫`-accessible.

## References
* [Ad√°mek, J. and Rosick√Ω, J., *Locally presentable and accessible categories*][Adamek_Rosicky_1994]

-/

universe w w' v' v u' u

namespace CategoryTheory

open Limits Opposite

-- to be moved
@[simp]
lemma cardinal_arrow_discrete (S : Type w) :
    Cardinal.mk (Arrow (Discrete S)) = Cardinal.mk S := by
  let e : Arrow (Discrete S) ‚âÉ S :=
    { toFun f := f.left.as
      invFun s := Arrow.mk (ùüô (Discrete.mk s))
      left_inv := by
        rintro ‚ü®‚ü®a‚ü©, ‚ü®b‚ü©, f‚ü©
        obtain rfl := Discrete.eq_of_hom f
        rfl
      right_inv _ := rfl }
  exact Cardinal.mk_congr e

section

/-- A category `J` is `Œ∫`-filtered (for a regular cardinal `Œ∫`) is
any functor `F : A ‚•§ J` from a `Œ∫`-small category (`Cardinal.mk (Arrow A) < Œ∫`)
admits a cocone. -/
class IsCardinalFiltered (J : Type w) [SmallCategory J]
    (Œ∫ : Cardinal.{w}) [Fact Œ∫.IsRegular] : Prop where
  nonempty_cocone {A : Type w} [SmallCategory A] (F : A ‚•§ J)
    (hA : Cardinal.mk (Arrow A) < Œ∫) : Nonempty (Cocone F)

namespace IsCardinalFiltered

variable {J : Type w} [SmallCategory J] {Œ∫ : Cardinal.{w}} [hŒ∫ : Fact Œ∫.IsRegular]
  [IsCardinalFiltered J Œ∫]

/-- A choice of cocone for a functor `F : A ‚•§ J` such that `Cardinal.mk (Arrow A) < Œ∫`
when `J` is a `Œ∫`-filtered category. -/
noncomputable def cocone {A : Type w} [SmallCategory A]
    (F : A ‚•§ J) (hA : Cardinal.mk (Arrow A) < Œ∫) :
    Cocone F :=
  (nonempty_cocone (Œ∫ := Œ∫) _ hA).some

/-- When `S : Set J` is of cardinality `< Œ∫` and `J` is `Œ∫`-filtered, this is
a choice of object in `J` which is the target of a map from any object in `S`. -/
noncomputable def max (S : Set J) (hS : Cardinal.mk S < Œ∫) : J := by
  have : Cardinal.mk (Arrow (Discrete S)) < Œ∫ := by simpa using hS
  exact (cocone (Discrete.functor Subtype.val) this).pt

/-- When `S : Set J` is of cardinality `< Œ∫` and `J` is `Œ∫`-filtered,
this is a choice of map `s.1 ‚ü∂ max S hS` for any `s : S`. -/
noncomputable def toMax (S : Set J) (hS : Cardinal.mk S < Œ∫) (s : S) :
    s.1 ‚ü∂ max S hS := by
  have : Cardinal.mk (Arrow (Discrete S)) < Œ∫ := by simpa using hS
  exact (cocone (Discrete.functor Subtype.val) this).Œπ.app ‚ü®s‚ü©

variable (J)

lemma of_le {Œ∫' : Cardinal.{w}} [Fact Œ∫'.IsRegular] (h : Œ∫' ‚â§ Œ∫) :
    IsCardinalFiltered J Œ∫' where
  nonempty_cocone F hA := ‚ü®cocone F (lt_of_lt_of_le hA h)‚ü©

end IsCardinalFiltered

-- to be moved
/-- `Arrow A` is equivalent to a sigma type. -/
@[simps!]
def Arrow.equivSigma (A : Type u) [Category.{v} A] :
    Arrow A ‚âÉ Œ£ (X : A) (Y : A), X ‚ü∂ Y where
  toFun f := ‚ü®_, _, f.hom‚ü©
  invFun x := Arrow.mk x.2.2
  left_inv _ := rfl
  right_inv _ := rfl

-- to be moved
lemma Arrow.finite_iff (A : Type u) [SmallCategory A] :
    Finite (Arrow A) ‚Üî Nonempty (FinCategory A) := by
  constructor
  ¬∑ intro
    refine ‚ü®?_, fun a b ‚Ü¶ ?_‚ü©
    ¬∑ have := Finite.of_injective (fun (a : A) ‚Ü¶ Arrow.mk (ùüô a))
        (fun _ _  ‚Ü¶ congr_arg Comma.left)
      apply Fintype.ofFinite
    ¬∑ have := Finite.of_injective (fun (f : a ‚ü∂ b) ‚Ü¶ Arrow.mk f)
        (fun f g h ‚Ü¶ by
          change (Arrow.mk f).hom = (Arrow.mk g).hom
          congr)
      apply Fintype.ofFinite
  ¬∑ rintro ‚ü®_‚ü©
    have := Fintype.ofEquiv  _ (Arrow.equivSigma A).symm
    infer_instance

-- to be moved
instance {A : Type u} [SmallCategory A] [FinCategory A] :
    Finite (Arrow A) := by
  rw [Arrow.finite_iff]
  exact ‚ü®inferInstance‚ü©

open IsCardinalFiltered in
lemma isFiltered_of_isCardinalDirected (J : Type w) [SmallCategory J]
    (Œ∫ : Cardinal.{w}) [hŒ∫ : Fact Œ∫.IsRegular] [IsCardinalFiltered J Œ∫]:
    IsFiltered J := by
  rw [IsFiltered.iff_cocone_nonempty.{w}]
  intro A _ _ F
  have hA : Cardinal.mk (Arrow A) < Œ∫ := by
    refine lt_of_lt_of_le ?_ hŒ∫.out.aleph0_le
    rw [Cardinal.mk_lt_aleph0_iff]
    infer_instance
  exact ‚ü®cocone F hA‚ü©

instance : Fact Cardinal.aleph0.IsRegular where
  out := Cardinal.isRegular_aleph0

lemma isCardinalFiltered_aleph0_iff (J : Type w) [SmallCategory J] :
    IsCardinalFiltered J Cardinal.aleph0 ‚Üî IsFiltered J := by
  constructor
  ¬∑ intro
    exact isFiltered_of_isCardinalDirected J Cardinal.aleph0
  ¬∑ intro
    constructor
    intro A _ F hA
    rw [Cardinal.mk_lt_aleph0_iff] at hA
    have := ((Arrow.finite_iff A).1 hA).some
    exact ‚ü®IsFiltered.cocone F‚ü©

-- to be moved
lemma cardinal_le_cardinal_arrow (A : Type u) [SmallCategory A] :
    Cardinal.mk A ‚â§ Cardinal.mk (Arrow A) :=
  Cardinal.mk_le_of_injective (f := fun a ‚Ü¶ Arrow.mk (ùüô a)) (fun _ _ ‚Ü¶ congr_arg Comma.left)

lemma isCardinalFiltered_preorder (J : Type w) [Preorder J]
    (Œ∫ : Cardinal.{w}) [Fact Œ∫.IsRegular]
    (h : ‚àÄ (S : Set J) (_ : Cardinal.mk S < Œ∫), ‚àÉ (j : J), ‚àÄ (s : S), s.1 ‚â§ j) :
    IsCardinalFiltered J Œ∫ where
  nonempty_cocone {A _ F hA} := by
    let S := Set.range F.obj
    have hS : Cardinal.mk S < Œ∫ := by
      let f : A ‚Üí S := fun a ‚Ü¶ ‚ü®F.obj a, ‚ü®a, rfl‚ü©‚ü©
      have hf : Function.Surjective f := by
        rintro ‚ü®_, ‚ü®a, rfl‚ü©‚ü©
        exact ‚ü®a, rfl‚ü©
      exact lt_of_le_of_lt (Cardinal.mk_le_of_surjective hf)
        (lt_of_le_of_lt (cardinal_le_cardinal_arrow A) hA)
    obtain ‚ü®j, hj‚ü© := h S hS
    refine ‚ü®Cocone.mk j
      { app a := homOfLE (hj ‚ü®F.obj a, ‚ü®a, rfl‚ü©‚ü©)
        naturality _ _ _ := rfl }‚ü©

end

variable {C : Type u} [Category.{v} C] {D : Type u'} [Category.{v'} D]

namespace Functor

variable (F : C ‚•§ D) (Œ∫ : Cardinal.{w}) [Fact Œ∫.IsRegular]

/-- A functor is `Œ∫`-accessible (with `Œ∫` a regular cardinal)
if it preserves colimits of shape `J` where `J` is any `Œ∫`-filtered category. -/
class IsAccessible : Prop where
  preservesColimitOfShape {J : Type w} [SmallCategory J] [IsCardinalFiltered J Œ∫] :
    PreservesColimitsOfShape J F

lemma preservesColimitsOfShape_of_isAccessible [F.IsAccessible Œ∫]
    (J : Type w) [SmallCategory J] [IsCardinalFiltered J Œ∫] :
    PreservesColimitsOfShape J F :=
  IsAccessible.preservesColimitOfShape Œ∫

variable {Œ∫} in
lemma isAccessible_of_le
    [F.IsAccessible Œ∫] {Œ∫' : Cardinal.{w}} [Fact Œ∫'.IsRegular] (h : Œ∫ ‚â§ Œ∫') :
    F.IsAccessible Œ∫' where
  preservesColimitOfShape {J _ _} := by
    have := IsCardinalFiltered.of_le J h
    exact F.preservesColimitsOfShape_of_isAccessible Œ∫ J

end Functor

variable (X : C) (Œ∫ : Cardinal.{w}) [Fact Œ∫.IsRegular]

/-- An object `X` in a category is `Œ∫`-presentable (for `Œ∫` a regular cardinal)
when the functor `Hom(X, _)` preserves colimits indexed by
`Œ∫`-filtered categories. -/
abbrev IsPresentable : Prop := (coyoneda.obj (op X)).IsAccessible Œ∫

lemma preservesColimitsOfShape_of_isPresentable [IsPresentable X Œ∫]
    (J : Type w) [SmallCategory J] [IsCardinalFiltered J Œ∫] :
    PreservesColimitsOfShape J (coyoneda.obj (op X)) :=
  (coyoneda.obj (op X)).preservesColimitsOfShape_of_isAccessible Œ∫ J

variable {Œ∫} in
lemma isPresentable_of_le [IsPresentable X Œ∫]
    {Œ∫' : Cardinal.{w}} [Fact Œ∫'.IsRegular] (h : Œ∫ ‚â§ Œ∫') :
    IsPresentable X Œ∫' :=
  (coyoneda.obj (op X)).isAccessible_of_le h

end CategoryTheory
