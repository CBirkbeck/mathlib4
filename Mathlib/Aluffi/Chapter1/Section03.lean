import Mathlib.CategoryTheory.Category.Basic
import Mathlib.Data.Fintype.BigOperators
import Mathlib.Data.Matrix.Basic
import Mathlib.Data.Real.Basic

set_option autoImplicit false

universe u

open CategoryTheory

-- 3.1. Let C be a category. Consider a structure C·µí·µñ with Obj(C·µí·µñ) := Obj(C);
-- for A, B objects of C·µí·µñ (hence objects of C), Hom_C·µí·µñ(A, B) := Hom_C(B, A).
-- Show how to make this into a category (that is, define composition of morphisms in C·µí·µñ
-- and verify the properties listed in ¬ß3.1).
-- Intuitively, the 'opposite' category C·µí·µñ is simply obtained by `reversing all thearrows' in C.
-- [5.1, ¬ßVIII.1.1, ¬ßIX.1.2, IX.1.10]
example {C : Type _} [hC : Category C] : Category (C·µí·µñ) where
  Hom a b := (hC.Hom b.unop a.unop)
  id X := ùüô X.unop
  comp f g := g ‚â´ f
  id_comp f := hC.comp_id f
  comp_id f := hC.id_comp f
  assoc f g h := (hC.assoc h g f).symm

example {C : Type _} [hC : Category C] : Category (C·µí·µñ) where
  Hom a b := (hC.Hom b.unop a.unop)·µí·µñ
  id X := (ùüô X.unop).op
  comp f g := (g.unop ‚â´ f.unop).op
  id_comp f := Opposite.unop_injective (hC.comp_id f.unop)
  comp_id f := Opposite.unop_injective (hC.id_comp f.unop)
  assoc f g h := Opposite.unop_injective (hC.assoc h.unop g.unop f.unop).symm

-- 3.2. If A is a finite set, how large is End_Set(A)?
-- this is like applying 2.10
example (A : Type _) [Fintype A] [DecidableEq A] :
    Fintype.card (A ‚Üí A) = Fintype.card A ^ Fintype.card A := by
  simp

-- 3.3. Formulate precisely what it means to say that `ùüô` is an identity with respect
-- to composition in Example 3.3, and prove this assertion. [¬ß3.2]
inductive example33Hom {S : Type u} (r : S ‚Üí S ‚Üí Prop) (a b : S)
| ofRel : r a b ‚Üí example33Hom r a b

-- I also tried `if r a b then Œ£ (a : S) (b : S), Unit else PEmpty`
-- and `if r a b then (({(a, b)} : Set (S √ó S)) : Type u) else PEmpty`

def example33 (S : Type u) (r : S ‚Üí S ‚Üí Prop) [IsRefl S r] [IsTrans S r] : Category S where
  Hom a b := example33Hom r a b
  id a := .ofRel (refl a)
  comp := Œª ‚ü®f‚ü© ‚ü®g‚ü© => .ofRel (_root_.trans f g)
  id_comp := by
    rintro a b ‚ü®f‚ü©
    -- there is no `.ofRel.inj`??
    exact congrArg example33Hom.ofRel (rfl : _root_.trans (refl a) f = f)
  comp_id := by
    rintro a b ‚ü®f‚ü©
    exact congrArg example33Hom.ofRel (rfl : f = _root_.trans f (refl b))
  assoc := by
    rintro a b c d ‚ü®f‚ü© ‚ü®g‚ü© ‚ü®h‚ü©
    have : _root_.trans (_root_.trans f g) h = _root_.trans f (_root_.trans g h) := rfl
    dsimp
    exact congrArg example33Hom.ofRel this

-- 3.4. Can we define a category in the style of Example 3.3 using the relation < onthe set ‚Ñ§?
-- No, because `<` is not reflexive, so we do not have identity morphisms.

-- 3.5. Explain in what sense Example 3.4 is an instance of the categories considered in Example
-- 3.3. [¬ß3.2]
def example34 (S : Type _) : Category (Set S) :=
  example33 _ (¬∑ ‚äÜ ¬∑)

-- 3.6 (Assuming some familiarity with linear algebra.) Define a category V by taking Obj(V) = N and
-- letting Hom_V(n, m) = the set of m x n matrices with real entries, for all n, m ‚àà N.
-- (We will leave the reader the task of making sense of a matrix with 0 rows or columns.)
-- Use product of matrices to define composition.
-- Does this category `feel' familiar? [¬ßVI.2.1, ¬ßVIII.I.3]
example : Category ‚Ñï where
  Hom m n := Matrix (Fin m) (Fin n) ‚Ñù
  id n := (1 : Matrix (Fin n) (Fin n) ‚Ñù)
  comp := Matrix.mul
  id_comp := Matrix.one_mul
  comp_id := Matrix.mul_one
  assoc := Matrix.mul_assoc

-- 3.7 Define carefully objects and morphisms in Example 3.7,
-- and draw the diagram corresponding to composition. [¬ß3.2]
-- An entirely similar example to the one explored in Example 3.5 maybe obtained by considering
-- morphisms in a category C from a fixed object A to all objects in C, again with morphisms
-- defined by suitable commutative diagrams. This leads to coslice categories.
--        A
-- ‚Üìf    ‚Üìg   ‚Üìh
-- Z‚ÇÅ ‚ÜíœÉ Z‚ÇÇ ‚ÜíœÑ Z‚ÇÉ
example {X : Type _} [C : Category X] (A : X) : Category (Œ£ (Z : X), C.Hom A Z)  where
  Hom := Œª ‚ü®Z‚ÇÅ, f‚ÇÅ‚ü© ‚ü®Z‚ÇÇ, f‚ÇÇ‚ü© => {œÉ : C.Hom Z‚ÇÅ Z‚ÇÇ // f‚ÇÅ ‚â´ œÉ = f‚ÇÇ}
  id := Œª ‚ü®Z, f‚ü© => ‚ü®ùüô Z, C.comp_id _‚ü©
  comp := Œª ‚ü®f, hf‚ü© ‚ü®g, hg‚ü© => by
    refine' ‚ü®f ‚â´ g, _‚ü©
    rw [‚ÜêC.assoc, hf, hg]
  id_comp f := by exact Subtype.ext (C.id_comp _)
  comp_id f := by exact Subtype.ext (C.comp_id _)
  assoc f g h := by exact Subtype.ext (C.assoc _ _ _)

-- 3.8. A subcategory C' of a category C consists of a collection of objects of C, with morphisms
-- Hom_C'(A, B) ‚äÜ Hom_C(A, B) for all objects A, B in Obj(C'), such that
-- identities and compositions in C make C' into a category. A subcategory C' is _full_ if
-- Hom_C'(A, B) = Hom_C(A, B) for all A, B in Obj(C'). Construct a category of infinite sets and
-- explain how it may be viewed as a full subcategory of Set. [4.4, ¬ßVI.1.1, ¬ßVIII.1.3]
def exercise38 {X : Type _} [C : Category X] (S : Set X) : Category S where
  Hom a b := C.Hom a b
  id a := ùüô a.val
  comp f g := f ‚â´ g
  id_comp := C.id_comp
  comp_id := C.comp_id
  assoc := C.assoc

instance exercise38' {X : Type _} [C : Category X] (S : Set X) (P : ‚àÄ a b, C.Hom a b ‚Üí Prop)
  (hrefl : ‚àÄ a, P a a (ùüô a)) (htrans : ‚àÄ a b c f g, P a b f ‚Üí P b c g ‚Üí P a c (f ‚â´ g)) :
    Category S where
  Hom a b := {f : C.Hom a b // P a b f}
  id a := ‚ü®ùüô a.val, hrefl a‚ü©
  comp f g := ‚ü®f.val ‚â´ g.val, htrans _ _ _ _ _ f.prop g.prop‚ü©
  id_comp := by
    intros
    exact Subtype.ext (C.id_comp _)
  comp_id := by
    intros
    exact Subtype.ext (C.comp_id _)
  assoc := by
    intros
    exact Subtype.ext (C.assoc _ _ _)

-- def exercise38full {X : Type _} [Category X] (S : Set X) : Prop :=
--   ‚àÄ a b : S, (a ‚ü∂ b) = (a.val ‚ü∂ b.val)

def exercise38full' {X : Type _} [C : Category X] (S : Set X) (P : ‚àÄ a b, C.Hom a b ‚Üí Prop)
  (_hrefl : ‚àÄ a, P a a (ùüô a)) (_htrans : ‚àÄ a b c f g, P a b f ‚Üí P b c g ‚Üí P a c (f ‚â´ g))
  : Prop :=
  ‚àÄ a b : S, (C.Hom a b) = (a.val ‚ü∂ b.val)

instance : Category (Type u) where
  Hom X Y := X ‚Üí Y
  id _ := id
  comp f g := g ‚àò f
  id_comp := Function.comp.right_id
  comp_id := Function.comp.left_id
  assoc _ _ _ := Function.comp.assoc _ _ _

instance exercise38infinite : Category ({X : Type u | Infinite X}) :=
  exercise38' ({X : Type u | Infinite X}) (Œª _ _ _ => True) (Œª _ => trivial)
    (Œª _ _ _ _ _ _ _ => trivial)

-- this is somehow too easy -- it's because I defined subcategories to have the same Hom
-- instead of some predicate on Hom
-- example : exercise38full {X : Type u | Infinite X} := Œª _ _ => rfl
-- and after setting to `exercise38full'`, it's obvious that they're "equal",
-- it's the subtype by True

-- 3.9 An alternative to the notion of multiset introduced in ¬ß2.2 is obtained by considering sets
-- endowed with equivalence relations; equivalent elements are taken to be multiple instances of
-- elements 'of the same kind'. Define a notion of morphism between such enhanced sets,
-- obtaining a category MSet containing (a 'copy' of) Set as a full subcategory. (There may be more
-- than one reasonable way to do this! This is intentionally an open-ended exercise.)
-- Which objects in MSet determine ordinary multisets as defined in ¬ß2.2 and how?
-- Spell out what a morphism of multisets would be from this point of view.
-- (There are several natural notions of morphisms of multisets. Try to define morphisms in MSet so
-- that the notion you obtain for ordinary multisets captures your intuitive understanding of these
-- objects.) 1¬ß2.2, ¬ß3.2, 4.5]

instance exercise39 : Category (Œ£ X : Type u, {r : X ‚Üí X ‚Üí Prop // Equivalence r}) where
  Hom := Œª ‚ü®X, r, _‚ü© ‚ü®Y, s, _‚ü© => {f : X ‚Üí Y // ‚àÄ ‚¶Éa b : X‚¶Ñ, r a b ‚Üí s (f a) (f b)}
  id := Œª ‚ü®X, r, _‚ü© => ‚ü®id, Œª _ _ h => h‚ü©
  comp := Œª ‚ü®f, hf‚ü© ‚ü®g, hg‚ü© => ‚ü®g ‚àò f, Œª _ _ h => hg (hf h)‚ü©
  id_comp := by
    intros
    exact Subtype.ext (Function.comp.right_id _)
  comp_id := by
    intros
    exact Subtype.ext (Function.comp.left_id _)
  assoc := by
    intros
    exact Subtype.ext (Function.comp.assoc _ _ _)

-- Type is a subcategory because `Eq` is an Equivalence
-- Not sure about which objects in MSet determine ordinary multisets

-- 3.10. Since the objects of a category C are not (necessarily) sets, it is not clear how to make
-- sense of a notion of 'subobject' in general. In some situations it does make sense to talk about
-- subobjects, and the subobjects of any given object A in C are in one-to-one correspondence with
-- the morphisms A ‚ü∂ Œ© for a fixed, special object Œ© of C, called a subobject classifier.
-- Show that Set has a subobject classifier.
example : ‚àÉ Œ© : Type u, ‚àÄ A : Type u, Nonempty (Set A ‚âÉ (A ‚ü∂ Œ©)) := by
  refine' ‚ü®ULift Prop, _‚ü©
  intros A
  refine' ‚ü®_‚ü©
  classical
  refine' {
    toFun := Œª s x => ULift.up (x ‚àà s)
    invFun := Œª f => {a : A | ULift.down (f a)}
    left_inv := ?_
    right_inv := ?_
  }
  ¬∑ intro
    simp
  ¬∑ intro
    simp

-- 3.11. Draw the relevant diagrams and define composition and identities for thecategory C^A,B
-- mentioned in Example 3.9. Do the same for the category C^Œ±,Œ≤ mentioned in Example 3.10.
-- [¬ß5.5, 5.12]
def example39_up {C : Type _} [hC : Category C] (A B : C) :
    Category (Œ£ (Z : C), hC.Hom A Z √ó hC.Hom B Z) where
  Hom := Œª ‚ü®Z‚ÇÅ, f‚ÇÅ‚ü© ‚ü®Z‚ÇÇ, f‚ÇÇ‚ü© => {œÉ : Z‚ÇÅ ‚ü∂ Z‚ÇÇ // f‚ÇÅ.fst ‚â´ œÉ = f‚ÇÇ.fst ‚àß f‚ÇÅ.snd ‚â´ œÉ = f‚ÇÇ.snd}
  id  _ := ‚ü®ùüô _, hC.comp_id _, hC.comp_id _‚ü©
  comp := Œª ‚ü®f, hf‚ü© ‚ü®g, hg‚ü© => ‚ü®f ‚â´ g,
    by rw [‚ÜêhC.assoc, ‚Üêhg.left, ‚Üêhf.left],
    by rw [‚ÜêhC.assoc, ‚Üêhg.right, ‚Üêhf.right]‚ü©
  id_comp := by
    intros
    exact Subtype.ext (hC.id_comp _)
  comp_id := by
    intros
    exact Subtype.ext (hC.comp_id _)
  assoc := by
    intros
    exact Subtype.ext (hC.assoc _ _ _)

def example310_up {D : Type _} [hD : Category D] {A B C : D} (Œ± : C ‚ü∂ A) (Œ≤ : C ‚ü∂ B) :
    Category (Œ£ (Z : D), {fg : hD.Hom A Z √ó hD.Hom B Z // Œ± ‚â´ fg.fst = Œ≤ ‚â´ fg.snd}) where
  Hom := Œª ‚ü®Z‚ÇÅ, ‚ü®f‚ÇÅ, g‚ÇÅ‚ü©, _‚ü© ‚ü®Z‚ÇÇ, ‚ü®f‚ÇÇ, g‚ÇÇ‚ü©, _‚ü© => {œÉ : Z‚ÇÅ ‚ü∂ Z‚ÇÇ // f‚ÇÅ ‚â´ œÉ = f‚ÇÇ ‚àß g‚ÇÅ ‚â´ œÉ = g‚ÇÇ}
  id _ := ‚ü®ùüô _, hD.comp_id _, hD.comp_id _‚ü©
  comp := Œª ‚ü®f, hf‚ü© ‚ü®g, hg‚ü© => ‚ü®f ‚â´ g,
    by rw [‚ÜêhD.assoc, ‚Üêhg.left, ‚Üêhf.left],
    by rw [‚ÜêhD.assoc, ‚Üêhg.right, ‚Üêhf.right]‚ü©
  id_comp := by
    intros
    exact Subtype.ext (hD.id_comp _)
  comp_id := by
    intros
    exact Subtype.ext (hD.comp_id _)
  assoc := by
    intros
    exact Subtype.ext (hD.assoc _ _ _)


example {S : Type u} (r : S ‚Üí S ‚Üí Prop) (a b : S) : Subsingleton (example33Hom r a b) := by
  constructor
  rintro ‚ü®‚ü© ‚ü®‚ü©
  exact congrArg _ rfl
