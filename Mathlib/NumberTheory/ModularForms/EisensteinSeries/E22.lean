/-
Copyright (c) 2025 Chris Birkbeck. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Birkbeck
-/
import Mathlib.Algebra.Order.Ring.Star
import Mathlib.Analysis.CStarAlgebra.Classes
import Mathlib.Data.Int.Star
import Mathlib.NumberTheory.LSeries.RiemannZeta
import Mathlib.NumberTheory.ModularForms.EisensteinSeries.UniformConvergence
import Mathlib.NumberTheory.ModularForms.EisensteinSeries.QExpansion
import Mathlib.NumberTheory.IccSums
import Mathlib.Topology.Algebra.InfiniteSum.NatInt
import Mathlib.Analysis.Normed.Group.Tannery

/-!
# Eisenstein Series E2

We define the Eisenstein series `E2` of weight `2` and level `1` as a limit of partial sums
over non-symmetric intervals.

-/

open UpperHalfPlane hiding I

open ModularForm EisensteinSeries  TopologicalSpace  intervalIntegral
  Metric Filter Function Complex MatrixGroups Finset ArithmeticFunction Set

open scoped Interval Real Topology BigOperators Nat

noncomputable section

variable {Œ± Œ≤ Œ≥ : Type*}

variable [CommMonoid Œ±] [TopologicalSpace Œ±]

@[to_additive]
def HasProdFilter (L : Filter (Finset Œ≤)) (f : Œ≤ ‚Üí Œ±) (a : Œ±) : Prop :=
  Tendsto (fun s : Finset Œ≤ ‚Ü¶ ‚àè b ‚àà s, f b) L (ùìù a)

@[to_additive
/-- `SummableAlongFilter f` means that `f` has some (infinite) sum. -/]
def MultipliableFilter (L : Filter (Finset Œ≤)) (f : Œ≤ ‚Üí Œ±) : Prop :=
  ‚àÉ a, HasProdFilter L f a

open scoped Classical in
/-- `‚àè' i, f i` is the product of `f` if along the filter `L` if it exists or 1 otherwise. -/
@[to_additive /-- `‚àë' i, f i` is the sum  of `f` if along the filter `L` if it exists
 or 0 otherwise. -/]
noncomputable irreducible_def tprodFilter {Œ≤} (L : Filter (Finset Œ≤)) (f : Œ≤ ‚Üí Œ±) :=
  if h : MultipliableFilter L f then
   h.choose
  else 1

@[inherit_doc tprod]
notation3 "‚àè' " "[" L "]" (...)", "r:67:(scoped f => tprodFilter L f) => r
@[inherit_doc tsumFilter]
notation3 "‚àë' " "[" L "]" (...)", "r:67:(scoped f => tsumFilter L f) => r

variable (L : Filter (Finset Œ≤)) {f : Œ≤ ‚Üí Œ±} {a : Œ±}

@[to_additive]
theorem HasProdFilter.multipliableFilter (h : HasProdFilter L f a) : MultipliableFilter L f :=
  ‚ü®a, h‚ü©

@[to_additive]
theorem tprodFilter_eq_one_of_not_multipliableFilter (h : ¬¨MultipliableFilter L f) :
    ‚àè'[L] b, f b = 1 := by
  simp [tprodFilter_def, h]

@[to_additive, simp]
lemma tprod_one_eq_one {Œ≤ : Type*} (L : Filter (Finset Œ≤)) : ‚àè'[L] b, (1 : Œ±) = 1 := by
  simp [tprodFilter_def, MultipliableFilter, HasProdFilter]
  sorry



@[to_additive]
theorem MultipliableFilter.hasProdFilter (ha : MultipliableFilter L f) :
    HasProdFilter L f (‚àè'[L] b, f b) := by
  simp only [tprodFilter_def, ha, dite_true]
  apply ha.choose_spec

@[to_additive]
theorem HasProdFilter.unique {a‚ÇÅ a‚ÇÇ : Œ±} [T2Space Œ±] [L.NeBot] :
    HasProdFilter L f a‚ÇÅ ‚Üí HasProdFilter L f a‚ÇÇ ‚Üí a‚ÇÅ = a‚ÇÇ := by
  classical exact tendsto_nhds_unique

variable [T2Space Œ±]

@[to_additive]
theorem HasProdFilter.tprodFilter_eq (ha : HasProdFilter L f a) [L.NeBot] : ‚àè'[L] b, f b = a :=
  (MultipliableFilter.hasProdFilter L ha.multipliableFilter).unique L ha


@[to_additive]
theorem MultipliableFilter.hasProdFilter_iff (h : MultipliableFilter L f) [L.NeBot] :
    HasProdFilter L f a ‚Üî ‚àè'[L] b, f b = a := by
  apply Iff.intro
  ¬∑ intro h
    apply h.tprodFilter_eq
  ¬∑ intro H
    have := h.hasProdFilter
    rw [H] at this
    exact this

@[to_additive]
protected theorem HasProdFilter.map [CommMonoid Œ≥] [TopologicalSpace Œ≥] (hf : HasProdFilter L f a) {G}
    [FunLike G Œ± Œ≥] [MonoidHomClass G Œ± Œ≥] (g : G) (hg : Continuous g) :
    HasProdFilter L (g ‚àò f) (g a) := by
  have : (g ‚àò fun s : Finset Œ≤ ‚Ü¶ ‚àè b ‚àà s, f b) = fun s : Finset Œ≤ ‚Ü¶ ‚àè b ‚àà s, (g ‚àò f) b :=
    funext <| map_prod g _
  unfold HasProdFilter
  rw [‚Üê this]
  exact (hg.tendsto a).comp hf

variable {Œ≥ : Type*} [NonUnitalNonAssocSemiring Œ≥] [TopologicalSpace Œ≥] [IsTopologicalSemiring Œ≥] {f : Œ≤ ‚Üí Œ≥}
[T2Space Œ≥]

theorem HasSumFilter.mul_left (a a‚ÇÅ : Œ≥) (L : Filter (Finset Œ≤)) (h : HasSumFilter L f a‚ÇÅ) :
      HasSumFilter L (fun i ‚Ü¶ a * f i) (a * a‚ÇÅ) := by
  simpa using h.map L (AddMonoidHom.mulLeft a)  (continuous_const.mul continuous_id)

theorem SummableFilter.mul_left (a) (hf : SummableFilter L f) : SummableFilter L fun i ‚Ü¶ a * f i :=
  (hf.hasSumFilter.mul_left _).summableFilter

protected theorem SummableFilter.tsumFilter_mul_left {Œ± : Type*} [DivisionSemiring Œ±]
    [TopologicalSpace Œ±] [T2Space Œ±] [IsTopologicalSemiring Œ±] (a : Œ±) (f : Œ≤ ‚Üí Œ±)
    [L.NeBot] (hf : SummableFilter L f) :
    ‚àë'[L] i, a * f i = a * ‚àë'[L] i, f i :=
  ((hf.hasSumFilter.mul_left) a).tsumFilter_eq

theorem hasSumFilter_mul_left_iff {Œ± : Type*} [DivisionSemiring Œ±] [TopologicalSpace Œ±] [T2Space Œ±]
    [L.NeBot] [IsTopologicalSemiring Œ±] {a a‚ÇÅ : Œ±} (h : a ‚â† 0) (f : Œ≤ ‚Üí Œ±) :
      HasSumFilter L (fun i ‚Ü¶ a * f i) (a * a‚ÇÅ) ‚Üî HasSumFilter L f a‚ÇÅ :=
  ‚ü®fun H ‚Ü¶ by simpa only [inv_mul_cancel_left‚ÇÄ h] using H.mul_left a‚Åª¬π, HasSumFilter.mul_left _ _ L‚ü©

theorem summableFilter_mul_left_iff {Œ± : Type*} [DivisionSemiring Œ±] [TopologicalSpace Œ±] [T2Space Œ±]
    [ L.NeBot] [ IsTopologicalSemiring Œ±] {a : Œ±}  (h : a ‚â† 0) (f : Œ≤ ‚Üí Œ±) :
      (SummableFilter L fun i ‚Ü¶ a * f i) ‚Üî SummableFilter L f :=
  ‚ü®fun H ‚Ü¶ by simpa only [inv_mul_cancel_left‚ÇÄ h] using H.mul_left L a‚Åª¬π , fun H ‚Ü¶ H.mul_left L _‚ü©

lemma tprodFilter_mul_left {Œ± : Type*} [DivisionSemiring Œ±] [TopologicalSpace Œ±] [T2Space Œ±]
    [ L.NeBot] [ IsTopologicalSemiring Œ±] (a : Œ±) (f : Œ≤ ‚Üí Œ±) :
    ‚àë'[L] b, a * f b = a * ‚àë'[L] b, f b := by
  classical
  exact if hf : SummableFilter L f then hf.tsumFilter_mul_left L a
  else if ha : a = 0 then by simp [ha];  apply tsum_zero_eq_zero
  else by rw [tsumFilter_eq_zero_of_not_summableFilter L hf,
              tsumFilter_eq_zero_of_not_summableFilter L
                (mt (summableFilter_mul_left_iff L ha f).mp hf), mul_zero]


omit [T2Space Œ±] in
@[to_additive]
theorem MultipliableFilter.mul {f g : Œ≤ ‚Üí Œ±} [ContinuousMul Œ±] (hf : MultipliableFilter L f)
    (hg : MultipliableFilter L g) :
    MultipliableFilter L (fun b ‚Ü¶ f b * g b) := by
  obtain ‚ü®a, ha‚ü© := hf
  obtain ‚ü®b, hb‚ü© := hg
  use a * b
  simp [HasProdFilter] at *
  have := Tendsto.mul (ha) (hb)
  apply this.congr
  intro s
  exact Eq.symm prod_mul_distrib

omit [T2Space Œ±] in
@[to_additive]
lemma mulipliable_iff_multipliableFilter_atTop {f : Œ≤ ‚Üí Œ±} :
    Multipliable f ‚Üî MultipliableFilter atTop f := by
  simp [Multipliable, MultipliableFilter, HasProd, HasProdFilter]

omit [T2Space Œ±] in
@[to_additive]
lemma hasProd_iff_hasProdFilter_atTop {f : Œ≤ ‚Üí Œ±} {a : Œ±} :
    HasProd f a ‚Üî HasProdFilter atTop f a := by
  simp [HasProd, HasProdFilter]

lemma tprod_eq_tproFilter_atTop (f : Œ≤ ‚Üí Œ±) : ‚àè' [atTop] b, f b = ‚àè' b, f b := by
  by_cases h : MultipliableFilter atTop f
  ¬∑ have := h.hasProdFilter
    rw [this.tprodFilter_eq atTop]
    rw [‚Üê mulipliable_iff_multipliableFilter_atTop] at h
    have H := h.hasProd
    rw [‚Üê hasProd_iff_hasProdFilter_atTop] at this
    apply HasProd.unique this H
  ¬∑ rw [tprodFilter_eq_one_of_not_multipliableFilter atTop h, tprod_eq_one_of_not_multipliable h]

variable {Œπ : Type*} {X : Œ± ‚Üí Type*} [‚àÄ x, CommMonoid (X x)] [‚àÄ x, TopologicalSpace (X x)]

omit [CommMonoid Œ±] [TopologicalSpace Œ±] [T2Space Œ±] in
@[to_additive]
theorem Pi.hasProdFilter {f : Œ≤ ‚Üí ‚àÄ x, X x} {g : ‚àÄ x, X x} :
    HasProdFilter L f g ‚Üî ‚àÄ x, HasProdFilter L (fun i ‚Ü¶ f i x) (g x) := by
  simp only [HasProdFilter, tendsto_pi_nhds, prod_apply]

omit [CommMonoid Œ±] [TopologicalSpace Œ±] [T2Space Œ±] in
@[to_additive]
theorem Pi.multipliableFilter {f : Œ≤ ‚Üí ‚àÄ x, X x} :
    MultipliableFilter L f ‚Üî ‚àÄ x, MultipliableFilter L fun i ‚Ü¶ f i x := by
  simp only [MultipliableFilter, Pi.hasProdFilter, Classical.skolem]

omit [CommMonoid Œ±] [TopologicalSpace Œ±] [T2Space Œ±] in
@[to_additive]
theorem tprodFilter_apply [‚àÄ x, T2Space (X x)] {f : Œ≤ ‚Üí ‚àÄ x, X x} {x : Œ±} [L.NeBot]
    (hf : MultipliableFilter L f) : (‚àè'[L] i, f i) x = ‚àè'[L] i, f i x :=
  ((Pi.hasProdFilter L).mp hf.hasProdFilter x).tprodFilter_eq.symm

def Icc_filter : Filter (Finset ‚Ñ§) := atTop.map (fun N : ‚Ñï ‚Ü¶ Icc (-(N : ‚Ñ§)) N)

def Ico_filter : Filter (Finset ‚Ñ§) := atTop.map (fun N : ‚Ñï ‚Ü¶ Ico (-(N : ‚Ñ§)) N)

instance : NeBot (Icc_filter) := by
  simp [Icc_filter, Filter.NeBot.map]

instance : NeBot (Ico_filter) := by
  simp [Ico_filter, Filter.NeBot.map]

@[to_additive]
lemma prodFilter_int_atTop_eq_Icc_filter {f : ‚Ñ§ ‚Üí Œ±}
    (hf : MultipliableFilter atTop f) : ‚àè'[atTop] b, f b  = ‚àè'[Icc_filter] b, f b := by
  have := (hf.hasProdFilter).comp tendsto_Icc_atTop_atTop
  simp only [Icc_filter] at *
  apply symm
  apply HasProdFilter.tprodFilter_eq
  simp only [HasProdFilter, tendsto_map'_iff]
  apply this.congr
  simp


@[to_additive]
lemma prodFilter_int_atTop_eq_Ico_filter {f : ‚Ñ§ ‚Üí Œ±}
    (hf : MultipliableFilter atTop f) : ‚àè'[atTop] b, f b  = ‚àè'[Ico_filter] b, f b := by
  have := (hf.hasProdFilter).comp tendsto_Ico_atTop_atTop
  simp only [Ico_filter] at *
  apply symm
  apply HasProdFilter.tprodFilter_eq
  simp only [HasProdFilter, tendsto_map'_iff]
  apply this.congr
  simp

@[to_additive] --this needs a hyp, but lets see what the min it needs
lemma multipliableFilter_int_Icc_eq_Ico_filter {Œ± : Type*} {f : ‚Ñ§ ‚Üí Œ±} [CommGroup Œ±]
    [TopologicalSpace Œ±] [ContinuousMul Œ±] [T2Space Œ±] (hf : MultipliableFilter Icc_filter f)
    (hf2 : Tendsto (fun N : ‚Ñï ‚Ü¶ (f ‚ÜëN)‚Åª¬π) atTop (ùìù 1)) : MultipliableFilter Ico_filter f := by
  have := (hf.hasProdFilter)
  apply HasProdFilter.multipliableFilter
  simp only [Ico_filter] at *
  simp only [HasProdFilter, tendsto_map'_iff] at *
  apply Filter.Tendsto_of_div_tendsto_one _ (by apply this)
  conv =>
    enter [1, N]
    simp
    rw [prod_Icc_eq_prod_Ico_succ _ (by omega)]
    simp
  apply hf2

@[to_additive] --this needs a hyp, but lets see what the min it needs
lemma prodFilter_int_Icc_eq_Ico_filter {Œ± : Type*} {f : ‚Ñ§ ‚Üí Œ±} [CommGroup Œ±] [TopologicalSpace Œ±]
    [ContinuousMul Œ±] [T2Space Œ±] (hf : MultipliableFilter Icc_filter f)
    (hf2 : Tendsto (fun N : ‚Ñï ‚Ü¶ (f ‚ÜëN)‚Åª¬π) atTop (ùìù 1)) :
    ‚àè'[Icc_filter] b, f b  = ‚àè'[Ico_filter] b, f b := by
  have := (hf.hasProdFilter)
  simp only [Ico_filter] at *
  apply symm
  apply HasProdFilter.tprodFilter_eq
  simp only [HasProdFilter, tendsto_map'_iff] at *
  apply Filter.Tendsto_of_div_tendsto_one _ (by apply this)
  conv =>
    enter [1, N]
    simp
    rw [prod_Icc_eq_prod_Ico_succ _ (by omega)]
    simp
  apply hf2


/-- This is an auxilary summand used to define the Eisenstein serires `G2`. -/
def e2Summand (m : ‚Ñ§) (z : ‚Ñç) : ‚ÑÇ := ‚àë' n, eisSummand 2 ![m, n] z

lemma e2Summand_summable (m : ‚Ñ§) (z : ‚Ñç) : Summable (fun n => eisSummand 2 ![m, n] z) := by
  apply (linear_right_summable z m (k := 2) (by omega)).congr
  simp [eisSummand]

@[simp]
lemma e2Summand_zero_eq_riemannZeta_two (z : ‚Ñç) : e2Summand 0 z = 2 * riemannZeta 2 := by
  simpa [e2Summand, eisSummand] using
    (two_riemannZeta_eq_tsum_int_inv_even_pow (k := 2) (by omega) (by simp)).symm

theorem e2Summand_even (z : ‚Ñç) (n : ‚Ñ§) : e2Summand n z = e2Summand (-n) z := by
  simp only [e2Summand, ‚Üê tsum_int_eq_tsum_neg (fun a => eisSummand 2 ![-n, a] z)]
  congr
  ext b
  simp only [eisSummand, Fin.isValue, Matrix.cons_val_zero, Matrix.cons_val_one,
    Matrix.cons_val_fin_one, Int.reduceNeg, zpow_neg, Int.cast_neg, neg_mul, inv_inj]
  rw_mod_cast [Int.cast_neg]
  ring

/-- The Eisenstein series of weight `2` and level `1` defined as the limit as `N` tends to
infinity of the partial sum of `m` in `[N,N)` of `e2Summand m`. This sum over symmetric
intervals is handy in showing it is Cauchy. -/
def G2 : ‚Ñç ‚Üí ‚ÑÇ := fun z => ‚àë'[Icc_filter] m, e2Summand m z

/-- The normalised Eisenstein series of weight `2` and level `1`. -/
def E2 : ‚Ñç ‚Üí ‚ÑÇ := (1 / (2 * riemannZeta 2)) ‚Ä¢  G2

/-- This function measures the defect in `E2` being a modular form. -/
def D2 (Œ≥ : SL(2, ‚Ñ§)) : ‚Ñç ‚Üí ‚ÑÇ := fun z => (2 * œÄ * I * Œ≥ 1 0) / (denom Œ≥ z)

lemma G2_partial_sum_eq (z : ‚Ñç) (N : ‚Ñï) : ‚àë m ‚àà Icc (-N : ‚Ñ§) N, e2Summand m z =
    (2 * riemannZeta 2) + (‚àë m ‚àà range N, -8 * œÄ ^ 2  *
    ‚àë' n : ‚Ñï+, n  * cexp (2 * œÄ * I * (m + 1) * z) ^ (n : ‚Ñï)) := by
  rw [sum_Icc_of_even_eq_range (e2Summand_even z), Finset.sum_range_succ', mul_add]
  nth_rw 2 [two_mul]
  ring_nf
  have (a : ‚Ñï) := EisensteinSeries.qExpansion_identity_pnat (k := 1) (by omega)
    ‚ü®(a + 1) * z, by simpa [show  0 < a + (1 : ‚Ñù) by positivity] using z.2‚ü©
  simp only [coe_mk_subtype, add_comm, Nat.reduceAdd, one_div, mul_comm, mul_neg, even_two,
    Even.neg_pow, Nat.factorial_one, Nat.cast_one, div_one, pow_one, e2Summand, eisSummand,
    Nat.cast_add, Fin.isValue, Matrix.cons_val_zero, Int.cast_add, Int.cast_natCast, Int.cast_one,
    Matrix.cons_val_one, Matrix.cons_val_fin_one, Int.reduceNeg, zpow_neg, mul_sum, Int.cast_zero,
    zero_mul, add_zero] at *
  congr
  ¬∑ simpa using (two_riemannZeta_eq_tsum_int_inv_even_pow (k := 2) (by omega) (by simp)).symm
  ¬∑ ext a
    norm_cast at *
    simp_rw [this a, ‚Üê tsum_mul_left, ‚Üê tsum_neg,ofReal_mul, ofReal_ofNat, mul_pow, I_sq, neg_mul,
      one_mul, Nat.cast_add, Nat.cast_one, mul_neg, ofReal_pow]
    grind

private lemma aux_tsum_identity (z : ‚Ñç) : ‚àë' m : ‚Ñï, (-8 * œÄ ^ 2  *
    ‚àë' n : ‚Ñï+, n * cexp (2 * œÄ * I * (m + 1) * z) ^ (n : ‚Ñï))  =
    -8 * œÄ ^ 2 * ‚àë' (n : ‚Ñï+), (œÉ 1 n) * cexp (2 * œÄ * I * z) ^ (n : ‚Ñï) := by
  have := tsum_prod_pow_cexp_eq_tsum_sigma 1 z
  rw [tsum_pnat_eq_tsum_succ (f:= fun d =>
    ‚àë' (c : ‚Ñï+), (c ^ 1 : ‚ÑÇ) * cexp (2 * œÄ * I * d * z) ^ (c : ‚Ñï))] at this
  simp [‚Üê tsum_mul_left, ‚Üê this]

private lemma aux_G2_tendsto (z : ‚Ñç) : Tendsto (fun N ‚Ü¶ ‚àë x ‚àà range N, -8 * œÄ ^ 2 *
    ‚àë' (n : ‚Ñï+), n * cexp (2 * œÄ * I * (x + 1) * z) ^ (n : ‚Ñï)) atTop
    (ùìù (-8 * œÄ ^ 2 * ‚àë' (n : ‚Ñï+), ((œÉ 1) n) * cexp (2 * œÄ * I * z) ^ (n : ‚Ñï))) := by
  rw [‚Üê aux_tsum_identity]
  have hf : Summable fun m : ‚Ñï => (-8 * œÄ ^ 2 *
      ‚àë' n : ‚Ñï+, n ^ ((2 - 1)) * cexp (2 * œÄ * I * (m + 1) * z) ^ (n : ‚Ñï)) := by
    apply Summable.mul_left
    have := (summable_prod_aux 1 z).prod
    have h0 := summable_pnat_iff_summable_succ
      (f := fun b ‚Ü¶ ‚àë' (c : ‚Ñï+), c * cexp (2 * œÄ * I * b * z) ^ (c : ‚Ñï))
    simp only [pow_one, cexp_pow_aux, Nat.cast_add, Nat.cast_one, Nat.add_one_sub_one] at *
    rw [‚Üê h0]
    apply this
  simpa using (hf.hasSum).comp tendsto_finset_range

lemma G2_cauchy (z : ‚Ñç) : CauchySeq (fun N : ‚Ñï ‚Ü¶ ‚àë m ‚àà Icc (-N : ‚Ñ§) N, e2Summand m z) := by
  conv =>
    enter [1, n]
    rw [G2_partial_sum_eq]
  apply CauchySeq.const_add
  apply Tendsto.cauchySeq (x := -8 * œÄ ^ 2 * ‚àë' (n : ‚Ñï+), (œÉ 1 n) * cexp (2 * œÄ * I * z) ^ (n : ‚Ñï))
  simpa using aux_G2_tendsto z


def G2' : ‚Ñç ‚Üí ‚ÑÇ := fun z => ‚àë'[Icc_filter] m, e2Summand m z

lemma SummableFilter_G2 (z : ‚Ñç) : SummableFilter Icc_filter (fun m : ‚Ñ§ => e2Summand m z) := by
  simp [SummableFilter, HasSumFilter, Icc_filter ]
  have := G2_cauchy z
  have := cauchySeq_tendsto_of_complete this
  simpa using this



lemma G2_q_exp (z : ‚Ñç) : G2 z =
    (2 * riemannZeta 2) - 8 * œÄ ^ 2 * ‚àë' n : ‚Ñï+, œÉ 1 n * cexp (2 * œÄ * I * z) ^ (n : ‚Ñï) := by
  rw [G2, sub_eq_add_neg]
  apply  HasSumFilter.tsumFilter_eq
  simp only [HasSumFilter, Icc_filter, tendsto_map'_iff]
  conv =>
    enter [1, N]
    simp [G2_partial_sum_eq z N]
  apply Filter.Tendsto.add (by simp) (by simpa using aux_G2_tendsto z)

section transform

private lemma tendsto_zero_of_cauchySeq_sum_Icc {F : Type*} [NormedRing F] [NormSMulClass ‚Ñ§ F]
    {f : ‚Ñ§ ‚Üí F} (hc : CauchySeq fun N : ‚Ñï ‚Ü¶ ‚àë m ‚àà Icc (-N : ‚Ñ§) N, f m) (hs : ‚àÄ n , f n = f (-n)) :
    Tendsto f atTop (ùìù 0) := by
  simp only [cauchySeq_iff_le_tendsto_0, Metric.tendsto_atTop, gt_iff_lt, ge_iff_le,
    dist_zero_right, Real.norm_eq_abs] at *
  obtain ‚ü®g, hg, H, Hg‚ü© := hc
  intro Œµ hŒµ
  obtain ‚ü®N, hN‚ü© := (Hg (2 * Œµ) (by positivity))
  refine ‚ü®N + 1, fun n hn => ?_‚ü©
  have H2 := (H n.natAbs (n -1).natAbs N (by omega) (by omega))
  rw [sum_Icc_add_endpoints f (by omega)] at H2
  have h1 : |n| = n := by
    rw [abs_eq_self]
    omega
  have h2 : |n - 1| = n - 1 := by
    rw [abs_eq_self, Int.sub_nonneg]
    omega
  have := norm_smul (2 : ‚Ñ§) (f n)
  simp only [Nat.cast_natAbs, h1, Int.cast_eq, ‚Üê hs n, (two_mul (f n)).symm, neg_sub, h2,
    Int.cast_sub, Int.cast_one, dist_add_self_left, zsmul_eq_mul, Int.cast_ofNat] at *
  simpa [this, Int.norm_eq_abs] using lt_of_le_of_lt (le_trans H2 (le_abs_self (g N)))
    (hN N (by rfl))


lemma SummableFilter_G2_Ico (z : ‚Ñç) : SummableFilter Ico_filter (fun m : ‚Ñ§ => e2Summand m z) := by
  apply summableFilter_int_Icc_eq_Ico_filter (SummableFilter_G2 z)
  have h0 := tendsto_zero_of_cauchySeq_sum_Icc (G2_cauchy z) (by apply e2Summand_even)
  simpa using  (Filter.Tendsto.neg h0).comp tendsto_natCast_atTop_atTop

lemma G2_eq_Ico (z : ‚Ñç) : G2 z = ‚àë'[Ico_filter] m, e2Summand m z := by
  rw [G2, sumFilter_int_Icc_eq_Ico_filter (SummableFilter_G2 z) ?_]
  have h0 := tendsto_zero_of_cauchySeq_sum_Icc (G2_cauchy z) (by apply e2Summand_even)
  simpa using  (Filter.Tendsto.neg h0).comp tendsto_natCast_atTop_atTop

lemma aux_tendsto_Ico (z : ‚Ñç) :
    Tendsto (fun (N : ‚Ñï) ‚Ü¶ ‚àë m ‚àà Ico (-(N : ‚Ñ§)) N, e2Summand m z) atTop (ùìù (G2 z)) := by
  have := SummableFilter_G2_Ico z
  obtain ‚ü®a, ha‚ü© := this
  have HA := ha
  rw [SummableFilter.hasSumFilter_iff] at ha
  ¬∑ rw [G2_eq_Ico z, ha]
    simp [HasSumFilter, Ico_filter, tendsto_map'_iff] at *
    apply HA.congr
    simp
  ¬∑ apply SummableFilter_G2_Ico

/- lemma G2_Ico (z : ‚Ñç) : G2 z = limUnder atTop (fun N : ‚Ñï ‚Ü¶ ‚àë m ‚àà Ico (-N : ‚Ñ§) N, e2Summand m z) := by
  apply symm
  rw [G2, Filter.Tendsto.limUnder_eq]
  apply Tendsto_of_sub_tendsto_zero _ (CauchySeq.tendsto_limUnder (G2_cauchy z))
  have h0 := tendsto_zero_of_cauchySeq_sum_Icc (G2_cauchy z) (by apply e2Summand_even)
  conv =>
    enter [1, N]
    rw [Pi.sub_apply, sum_Icc_eq_sum_Ico_succ _ (by omega), sub_add_cancel_left]
  simpa using  (Filter.Tendsto.neg h0).comp tendsto_natCast_atTop_atTop -/

lemma aux_cauchySeq_Ico (z : ‚Ñç) : CauchySeq fun N : ‚Ñï ‚Ü¶ ‚àë m ‚àà Ico (-N : ‚Ñ§) N, e2Summand m z := by
  apply Filter.Tendsto.cauchySeq
  apply (aux_tendsto_Ico z)

theorem aux_sum_Ico_S_indentity (z : ‚Ñç) (N : ‚Ñï) :
    ((z : ‚ÑÇ) ^ 2)‚Åª¬π * (‚àë x ‚àà Ico (-N : ‚Ñ§) N, ‚àë' (n : ‚Ñ§), (((x : ‚ÑÇ) * (-‚Üëz)‚Åª¬π + n) ^ 2)‚Åª¬π) =
    ‚àë' (n : ‚Ñ§), ‚àë x ‚àà Ico (-N : ‚Ñ§) N, (((n : ‚ÑÇ) * z + x) ^ 2)‚Åª¬π := by
  simp_rw [inv_neg, mul_neg]
  rw [Finset.mul_sum, Summable.tsum_finsetSum]
  ¬∑ apply sum_congr rfl fun n hn => ?_
    rw [‚Üê tsum_mul_left, ‚Üê tsum_int_eq_tsum_neg]
    apply tsum_congr fun d => ?_
    rw [‚Üê mul_inv,  ‚Üê mul_pow, ‚Üê neg_pow_two]
    congr
    field_simp [ne_zero z]
    simp
  ¬∑ exact fun i hi => linear_left_summable (ne_zero z) (i : ‚Ñ§) (k := 2) (by omega)

lemma G2_S_act (z : ‚Ñç) :
    Tendsto (fun N : ‚Ñï => (‚àë' (n : ‚Ñ§), ‚àë m ‚àà Ico (-N : ‚Ñ§) N, (1 / ((n : ‚ÑÇ) * z + m) ^ 2))) atTop
    (ùìù ((z.1 ^ 2)‚Åª¬π * G2 (ModularGroup.S ‚Ä¢ z))) := by
  rw [modular_S_smul, G2_eq_Ico]
  congr
  ext N
  simpa [UpperHalfPlane.coe, e2Summand, eisSummand, UpperHalfPlane.mk] using
    (aux_sum_Ico_S_indentity z N)

lemma Ico_succ_eq (b : ‚Ñï) : Finset.Ico (-(b+1) : ‚Ñ§) (b+1) = Finset.Ico (-(b : ‚Ñ§)) (b) ‚à™
    {-((b+1) : ‚Ñ§), (b : ‚Ñ§)} :=  by
  ext n
  simp only [neg_add_rev, Int.reduceNeg, Finset.mem_Ico, add_neg_le_iff_le_add, Finset.union_insert,
    Finset.union_singleton, neg_le_self_iff, Nat.cast_nonneg, Finset.Ico_insert_right,
    Finset.mem_insert, Finset.mem_Icc]
  omega

theorem telescope_aux (z : ‚ÑÇ) (m : ‚Ñ§) (b : ‚Ñï) :
    ‚àë n ‚àà Ico (-b : ‚Ñ§) b, (1 / ((m : ‚ÑÇ) * z + n) - 1 / (m * z + n + 1)) =
    1 / (m * z - b) - 1 / (m * z + b) := by
  induction' b  with b ihb
  ¬∑ aesop
  ¬∑ simp only [Nat.cast_add, Nat.cast_one, one_div, Finset.sum_sub_distrib] at *
    rw [Ico_succ_eq, Finset.sum_union (by simp), Finset.sum_union (by simp),
      Finset.sum_pair (by omega), Finset.sum_pair (by omega), add_sub_add_comm]
    simp only [ihb, neg_add_rev, Int.reduceNeg, Int.cast_add, Int.cast_neg, Int.cast_one,
      Int.cast_natCast]
    ring

theorem tendstozero_inv_linear (z : ‚ÑÇ) (b : ‚Ñ§) :
    Tendsto (fun d : ‚Ñï ‚Ü¶ 1 / ((b : ‚ÑÇ) * z + d)) atTop (ùìù 0) := by
  apply Asymptotics.IsBigO.trans_tendsto ?_ tendsto_inverse_atTop_nhds_zero_nat
  have := (Asymptotics.isBigO_sup.mp (Int.cofinite_eq ‚ñ∏ linear_inv_isBigO_right b z)).2
  simpa [‚Üê Nat.map_cast_int_atTop, Asymptotics.isBigO_map] using this

theorem tendstozero_inv_linear_sub (z : ‚Ñç) (b : ‚Ñ§) :
    Tendsto (fun d : ‚Ñï ‚Ü¶ 1 / ((b : ‚ÑÇ) * z - d)) atTop (ùìù 0) := by
  have := (tendstozero_inv_linear z (-b)).neg
  simp only [Int.cast_neg, neg_mul, one_div, neg_zero, ‚Üê inv_neg] at *
  exact this.congr (fun _ => by ring)

lemma limUnder_sum_eq_zero (z : ‚Ñç) (m : ‚Ñ§) : limUnder atTop (fun N : ‚Ñï =>
    ‚àë n ‚àà (Finset.Ico (-(N : ‚Ñ§)) (N : ‚Ñ§)), (1 / ((m : ‚ÑÇ) * z + n) -  1 / (m * z + n + 1))) = 0 := by
  apply Filter.Tendsto.limUnder_eq
  conv =>
    enter [1, N]
    rw [telescope_aux z m N]
  simpa using Filter.Tendsto.sub (tendstozero_inv_linear_sub z m) (tendstozero_inv_linear z m)


theorem int_tsum_pNat {Œ± : Type*} [UniformSpace Œ±] [CommRing Œ±] [IsUniformAddGroup Œ±]
  [CompleteSpace Œ±] [T2Space Œ±] {f : ‚Ñ§ ‚Üí Œ±} (hf2 : Summable f) :
  ‚àë' n, f n = f 0 + ‚àë' n : ‚Ñï+, f n + ‚àë' m : ‚Ñï+, f (-m) := by
  rw [summable_int_iff_summable_nat_and_neg_add_zero, tsum_of_add_one_of_neg_add_one] at *
  ¬∑ simp only [neg_add_rev, Int.reduceNeg, tsum_pnat_eq_tsum_succ (f := fun n => f n), Nat.cast_add,
    Nat.cast_one, tsum_pnat_eq_tsum_succ (f := fun n => f (-n)), add_left_inj]
    ring
  ¬∑ have hf21 := hf2.1
    rw [‚Üê summable_nat_add_iff (k := 1)] at hf21
    simpa using hf21
  ¬∑ simpa using hf2.2

lemma summable_pnat_iff_summable_nat {G : Type*} [AddCommGroup G] [TopologicalSpace G]
    [IsTopologicalAddGroup G] {f : ‚Ñï ‚Üí G} : Summable (fun n : ‚Ñï+ => f n) ‚Üî Summable f := by
  rw [summable_pnat_iff_summable_succ , summable_nat_add_iff]

private lemma linear_sub_linear_eq (z : ‚Ñç) (a b m : ‚Ñ§) (hm : m ‚â† 0) :
    1 / ((m : ‚ÑÇ) * z + a) - 1 / (m * z + b) = (b - a) * (1 / ((m * z + a) * (m * z + b))) := by
  rw [‚Üê one_div_mul_sub_mul_one_div_eq_one_div_add_one_div]
  ¬∑ simp only [one_div, add_sub_add_left_eq_sub, mul_inv_rev]
    ring
  ¬∑ simpa using UpperHalfPlane.linear_ne_zero z (cd := ![m, a]) (by simp [hm])
  ¬∑ simpa using UpperHalfPlane.linear_ne_zero z (cd := ![m, b]) (by simp [hm])

lemma summable_one_div_linear_sub_one_div_linear (z : ‚Ñç) (a b : ‚Ñ§) :
    Summable fun m : ‚Ñ§ ‚Ü¶ 1 / (m * (z : ‚ÑÇ) + a) - 1 / (m * z + b) := by
  have := Summable.mul_left  (b - a : ‚ÑÇ) (summable_linear_mul_linear (ne_zero z) a b)
  rw [‚Üê Finset.summable_compl_iff (s := {0})] at *
  apply this.congr
  intro m
  rw [linear_sub_linear_eq z a b m (by grind)]
  simp

private lemma aux_tsum_identity_2 (z : ‚Ñç) (d : ‚Ñï+) :
    ‚àë' (m : ‚Ñ§), (1 / ((m : ‚ÑÇ) * z - d) - 1 / (m * z + d)) = -(2 / d) +
    ‚àë' m : ‚Ñï+, (1 / ((m : ‚ÑÇ) * z - d) + 1 / (-m * z + -d) - 1 / ((m : ‚ÑÇ) * z + d) -
    1 / (-m * z + d)) := by
  rw [eq_neg_add_iff_add_eq (b := 2 / (d : ‚ÑÇ)), int_tsum_pNat]
  ¬∑ simp only [Int.cast_zero, zero_mul, zero_sub, one_div, zero_add, Int.cast_natCast, Int.cast_neg,
      neg_mul]
    ring_nf
    rw [‚Üê  Summable.tsum_add]
    ¬∑ grind
    ¬∑ apply (summable_pnat_iff_summable_nat.mpr ((summable_int_iff_summable_nat_and_neg.mp
        (summable_one_div_linear_sub_one_div_linear z (-d) d)).1)).congr
      grind [Int.cast_natCast, Int.cast_neg, one_div]
    ¬∑ apply (summable_pnat_iff_summable_nat.mpr ((summable_int_iff_summable_nat_and_neg.mp
        (summable_one_div_linear_sub_one_div_linear z (-d) d)).2)).congr
      grind [Int.cast_neg, Int.cast_natCast, neg_mul, one_div]
  ¬∑ apply (summable_one_div_linear_sub_one_div_linear z (-d) d).congr
    grind [Int.cast_neg, Int.cast_natCast, one_div, sub_left_inj, inv_inj]

private lemma aux_tsum_identity_3 (z : ‚Ñç) (d : ‚Ñï+) :
    ‚àë' m : ‚Ñï+, ((1 / ((m : ‚ÑÇ) * z - d) + 1 / (-m * z + -d)) - (1 / (m * z + d)) -
    1 / (-m * z + d)) = (2 / z) * ‚àë' m : ‚Ñï+, ((1 / (-(d : ‚ÑÇ) / z - m) + 1 / (-d / z + m))) := by
  rw [‚Üê Summable.tsum_mul_left]
  ¬∑ congr
    funext m
    simp_rw [sub_eq_add_neg, ‚Üê div_neg]
    ring_nf
    rw [add_comm]
    field_simp [ne_zero z]
  ¬∑ have := (Summable_cotTerm (x := -d / (z : ‚ÑÇ))
      (by simpa using int_div_upperHalfPlane_mem_integerComplement z (-d) (by simp at *)))
    simp only [cotTerm, one_div] at *
    conv at this =>
      enter [1, n]
      rw [show ((n : ‚ÑÇ) + 1) = (n + 1 : ‚Ñï) by simp]
    rw [summable_nat_add_iff (k := 1)
      (f := fun n => (-d / (z : ‚ÑÇ) - (n))‚Åª¬π + (-d / (z : ‚ÑÇ) + (n))‚Åª¬π)] at this
    apply this.subtype

lemma pnat_div_upper (n : ‚Ñï+) (z : ‚Ñç) : 0 < (-(n : ‚ÑÇ) / z).im := by
  simp only [div_im, neg_im, natCast_im, neg_zero, coe_re, zero_mul,
    zero_div, neg_re, natCast_re, coe_im, neg_mul, zero_sub, Left.neg_pos_iff, div_neg_iff]
  right
  simpa using ‚ü®z.2, ne_zero z‚ü©

variable {ùïú : Type*} [NontriviallyNormedField ùïú] [CompleteSpace ùïú]

lemma tendsto_zero_geometric_tsum {r : ùïú} (hr : ‚Äñr‚Äñ < 1) :
    Tendsto (fun m : ‚Ñï+ => ‚àë' (n : ‚Ñï+), r ^ (n * m : ‚Ñï)) atTop (ùìù 0) := by
  have := tendsto_tsum_of_dominated_convergence (ùìï := atTop) (g := fun (n : ‚Ñï+) => 0)
    (f := fun d n : ‚Ñï+ => r ^ (n * d : ‚Ñï)) (bound := fun n : ‚Ñï+ => (‚Äñr ^ (n : ‚Ñï)‚Äñ))
  simp only [tsum_zero] at this
  apply this
  ¬∑ have hs : Summable fun n : ‚Ñï ‚Ü¶ ‚Äñr ^ n‚Äñ := by simp [hr]
    apply hs.subtype
  ¬∑ intro k
    have ht : Tendsto (fun x : ‚Ñï ‚Ü¶ r ^ (k * x)) atTop (ùìù 0) := by
      rw [tendsto_zero_iff_norm_tendsto_zero]
      simp [pow_mul, tendsto_pow_atTop_nhds_zero_iff, pow_lt_one_iff_of_nonneg, hr]
    exact tendsto_comp_val_Ioi_atTop.mpr ht
  ¬∑ simp only [eventually_atTop, ge_iff_le, norm_pow]
    exact ‚ü®1, fun b hb k =>
      pow_le_pow_of_le_one (norm_nonneg _) hr.le (Nat.le_mul_of_pos_right k hb)‚ü©

lemma aux_tendsto_tsum_cexp_pnat (z : ‚Ñç) :
    Tendsto (fun N : ‚Ñï+ => ‚àë' (n : ‚Ñï+), cexp (2 * œÄ * I * (-N / z)) ^ (n : ‚Ñï)) atTop (ùìù 0) := by
  have := tendsto_zero_geometric_tsum (UpperHalfPlane.norm_exp_two_pi_I_lt_one ‚ü®-1 / z,
    by simpa using (pnat_div_upper 1 z)‚ü©)
  simp only [‚Üê exp_nsmul, mul_neg, neg_div] at *
  apply this.congr fun n => ?_
  congr
  grind [one_div, coe_mk_subtype, mul_neg, smul_neg, nsmul_eq_mul, Nat.cast_mul, neg_inj]

private theorem aux_tendsto_tsum (z : ‚Ñç) : Tendsto (fun n : ‚Ñï => (2 / z *
    ‚àë' (m : ‚Ñï+), (1 / (-(n : ‚ÑÇ) / z - m) + 1 / (-n / z + m)))) atTop (ùìù (-2 * œÄ * I / z)) := by
  suffices Tendsto (fun n : ‚Ñï+ => (2 / (z : ‚ÑÇ) * ‚àë' (m : ‚Ñï+),
      (1 / (-(n : ‚ÑÇ) / z - m) + 1 / (-n / z + m)))) atTop (ùìù (-2 * œÄ * I / z)) by
    rw [‚Üê tendsto_comp_val_Ioi_atTop]
    exact this
  have H0 : (fun n : ‚Ñï+ => (2 / z * ‚àë' (m : ‚Ñï+), (1 / (-(n : ‚ÑÇ) / z - m) + 1 / (-n / z + m)))) =
      (fun N : ‚Ñï+ => (-2 * œÄ * I / z) - (2 / z * (2 * œÄ * I)) *
      (‚àë' n : ‚Ñï+, cexp (2 * œÄ * I * (-N / z)) ^ (n : ‚Ñï)) + 2 / N) := by
    ext N
    let Z : ‚Ñç := ‚ü®-N / z, pnat_div_upper N z‚ü©
    have h2 := cot_series_rep (UpperHalfPlane.coe_mem_integerComplement Z)
    rw [pi_mul_cot_pi_q_exp, ‚Üê sub_eq_iff_eq_add'] at h2
    simp only [coe_mk_subtype, one_div, inv_div, neg_mul, Z] at *
    rw [‚Üê h2, ‚Üê tsum_zero_pnat_eq_tsum_nat
      (by simpa using norm_exp_two_pi_I_lt_one ‚ü®-N / z, pnat_div_upper N z‚ü©), mul_sub]
    field_simp [ne_zero z]
    ring
  rw [H0]
  nth_rw 2 [show -2 * œÄ * I / z = (-2 * œÄ * I / z) - (2 / z * (2 * œÄ * I)) * 0 + 2 * 0 by ring]
  apply Tendsto.add (Tendsto.sub (by simp) ((aux_tendsto_tsum_cexp_pnat z).const_mul _))
  apply Tendsto.const_mul
  have H4 : Tendsto (fun x : ‚Ñï ‚Ü¶ 1 / (x : ‚ÑÇ)) atTop (ùìù 0) := by
    simpa using tendstozero_inv_linear z 0
  rw [‚Üê tendsto_comp_val_Ioi_atTop] at H4
  simpa using H4

lemma tendsto_tsum_one_div_linear_sub_succ_eq (z : ‚Ñç) : Tendsto (fun N : ‚Ñï+ ‚Ü¶ ‚àë n ‚àà Ico (-N : ‚Ñ§) N,
    ‚àë' m : ‚Ñ§, (1 / ((m : ‚ÑÇ) * z + n) - 1 / (m * z + n + 1))) atTop (ùìù (-2 * œÄ * I / z)) := by
  have : (fun N : ‚Ñï+ => ‚àë n ‚àà (Ico (-N : ‚Ñ§) N),
      ‚àë' m : ‚Ñ§ , (1 / ((m : ‚ÑÇ) * z + n) -  1 / (m * z + n + 1))) = (fun N : ‚Ñï+ =>
      ‚àë' m : ‚Ñ§ ,  ‚àë n ‚àà Ico (-N : ‚Ñ§) N, (1 / ((m : ‚ÑÇ) * z + n) -  1 / (m * z + n + 1))) := by
    ext n
    rw [Summable.tsum_finsetSum]
    intro i hi
    apply (summable_one_div_linear_sub_one_div_linear z ((i : ‚Ñ§)) (i + 1 : ‚Ñ§)).congr
    grind [one_div, Int.cast_add, Int.cast_one, sub_right_inj, inv_inj]
  conv at this =>
    enter [2, n]
    conv =>
      enter [1, m]
      rw [telescope_aux z]
    rw [show (n : ‚ÑÇ) = (n : ‚Ñï+) by simp, aux_tsum_identity_2 z]
  rw [this, show -2 * œÄ * I / z = 0 + -2 * œÄ * I / z by ring]
  apply Tendsto.add
  ¬∑ have : Tendsto (fun x : ‚Ñï ‚Ü¶ -(2 / (x : ‚ÑÇ))) atTop (ùìù 0) := by
      simpa [tendsto_zero_iff_norm_tendsto_zero] using Filter.Tendsto.const_div_atTop
        (g := fun n : ‚Ñï => ‚Äñ(n : ‚ÑÇ)‚Äñ) (r := 2) (by simpa using tendsto_natCast_atTop_atTop)
    exact tendsto_comp_val_Ioi_atTop.mpr this
  ¬∑ conv =>
      enter [1, n]
      rw [aux_tsum_identity_3]
    have HH := aux_tendsto_tsum z
    rw [‚Üê tendsto_comp_val_Ioi_atTop] at HH
    exact HH

--these are the two key lemmas
lemma limUnder_tsum_eq (z : ‚Ñç) : limUnder atTop (fun N : ‚Ñï => ‚àë n ‚àà (Ico (-N : ‚Ñ§) N),
    ‚àë' m : ‚Ñ§ , (1 / ((m : ‚ÑÇ) * z + n) -  1 / (m * z + n + 1))) = -2 * œÄ * I / z := by
  apply Filter.Tendsto.limUnder_eq
  exact tendsto_comp_val_Ioi_atTop.mp (tendsto_tsum_one_div_linear_sub_succ_eq z)

lemma tsum_limUnder_eq (z : ‚Ñç) : ‚àë' m : ‚Ñ§, (limUnder atTop (fun N : ‚Ñï => ‚àë n ‚àà (Ico (-N : ‚Ñ§) N),
    (1 / ((m : ‚ÑÇ) * z + n) -  1 / (m * z + n + 1)))) = 0 := by
  convert tsum_zero
  exact limUnder_sum_eq_zero z _

/-- This is an auxiliary correction term for proving how E2 transforms. It allows us to work with
nicer indexing sets for our infinite sums. -/
private def Œ¥ (x : Fin 2 ‚Üí ‚Ñ§) : ‚ÑÇ := if x = ![0,0] then 1 else if x = ![0, -1] then 2 else 0

@[simp]
private lemma Œ¥_eq : Œ¥ ![0,0] = 1 := by simp [Œ¥]

private lemma Œ¥_eq2 : Œ¥ ![0, -1] = 2 := by simp [Œ¥]

private lemma Œ¥_neq (a b : ‚Ñ§) (h : a ‚â† 0) : Œ¥ ![a,b] = 0 := by
  simp [Œ¥, h]

/-- This gives term gives and alternative infinte sum for G2 which is absolutely convergent. -/
abbrev G2Term (z : ‚Ñç) (m : Fin 2 ‚Üí ‚Ñ§) : ‚ÑÇ := (((m 0 : ‚ÑÇ) * z + m 1) ^ 2 * (m 0 * z + m 1 + 1))‚Åª¬π

lemma G_2_alt_summable (z : ‚Ñç) : Summable (fun m => (G2Term z m)) := by
  have hk' : 2 < (3 : ‚Ñù) := by linarith
  apply summable_inv_of_isBigO_rpow_norm_inv hk'
  simpa [pow_three, pow_two, ‚Üê mul_assoc] using ((isBigO_linear_add_const_vec z 0 1).mul
    (isBigO_linear_add_const_vec z 0 0)).mul (isBigO_linear_add_const_vec z 0 0)

lemma G_2_alt_summable_Œ¥ (z : ‚Ñç) : Summable fun (m : Fin 2 ‚Üí ‚Ñ§) => (G2Term z m + Œ¥ m):= by
  let s : Finset (Fin 2 ‚Üí ‚Ñ§) := {![0,0], ![0,-1]}
  rw [‚Üê Finset.summable_compl_iff s]
  apply ((G_2_alt_summable z).subtype s·∂ú).congr
  intro b
  have hb1 : b.1 ‚â† ![0, 0] := by aesop
  have hb2 : b.1 ‚â† ![0, -1] := by aesop
  simp [Œ¥, hb1, hb2]

lemma G2_prod_summable1_Œ¥ (z : ‚Ñç) (b : ‚Ñ§) : Summable fun c ‚Ü¶ G2Term z ![b,c] + Œ¥ ![b, c] := by
  have := G_2_alt_summable_Œ¥ z
  simp only [G2Term, Fin.isValue, mul_inv_rev, ‚Üê (finTwoArrowEquiv _).symm.summable_iff,
    finTwoArrowEquiv_symm_apply, Matrix.cons_val_zero, Matrix.cons_val_one,
    Matrix.cons_val_fin_one] at *
  exact this.prod_factor b

theorem extracted_2_Œ¥ (z : ‚Ñç) (b : ‚Ñ§) : CauchySeq fun N : ‚Ñï ‚Ü¶ ‚àë n ‚àà Ico (-N : ‚Ñ§) N,
    (G2Term z ![b,n] + Œ¥ ![b, n]) := by
  apply Filter.Tendsto.cauchySeq (x := ‚àë' (x : ‚Ñ§),
        (((b  : ‚ÑÇ) * z + x + 1)‚Åª¬π * (((b : ‚ÑÇ) * z + x) ^ 2)‚Åª¬π  + Œ¥ ![b, x]))
  simpa using (G2_prod_summable1_Œ¥ z b).hasSum.comp tendsto_Ico_atTop_atTop

theorem extracted_3 (z : ‚Ñç) (b : ‚Ñ§) : CauchySeq fun N : ‚Ñï ‚Ü¶
  ‚àë n ‚àà Finset.Ico (-N : ‚Ñ§) N, (1 / ((b : ‚ÑÇ) * z + n) - 1 / (b * z + n + 1)) := by
  simp_rw [telescope_aux ]
  apply Filter.Tendsto.cauchySeq
  simpa using Filter.Tendsto.sub (tendstozero_inv_linear_sub z b) (tendstozero_inv_linear z b)

lemma extracted_4 (z : ‚Ñç) (b : ‚Ñ§) :
    CauchySeq fun N : ‚Ñï ‚Ü¶ ‚àë n ‚àà Ico (-N : ‚Ñ§) N, (1 / ((b : ‚ÑÇ) * z + n) ^ 2 ) := by
  apply Filter.Tendsto.cauchySeq (x := ‚àë' (x : ‚Ñ§), ((((b : ‚ÑÇ) * z + x) ^ 2)‚Åª¬π))
  simpa using ((linear_right_summable z b  (k := 2) (by norm_num)).hasSum).comp
    tendsto_Ico_atTop_atTop

lemma poly_id (z : ‚Ñç) (b n : ‚Ñ§) : ((b : ‚ÑÇ) * z + n + 1)‚Åª¬π * (((b : ‚ÑÇ) * z + n) ^ 2)‚Åª¬π +
    (Œ¥ ![b, n]) + (((b : ‚ÑÇ) * z + n)‚Åª¬π - ((b : ‚ÑÇ) * z + n + 1)‚Åª¬π) = (((b : ‚ÑÇ) * z + n) ^ 2)‚Åª¬π := by
  by_cases h : b = 0 ‚àß n = 0
  ¬∑ simp_rw [h.1, h.2]
    simp
  ¬∑ simp only [not_and] at h
    by_cases hb : b = 0
    ¬∑ by_cases hn : n = -1
      ¬∑ simp only [hb, Int.cast_zero, zero_mul, hn, Int.reduceNeg, Int.cast_neg, Int.cast_one,
        zero_add, neg_add_cancel, inv_zero, even_two, Even.neg_pow, one_pow, inv_one, mul_one,
        Œ¥_eq2, inv_neg, sub_zero]
        ring
      ¬∑ have hn0 : (n : ‚ÑÇ) ‚â† 0 := by aesop
        have hn1 : (n : ‚ÑÇ) + 1 ‚â† 0 := by norm_cast; omega
        simp only [hb, Int.cast_zero, zero_mul, zero_add, Œ¥, Nat.succ_eq_add_one, Nat.reduceAdd,
          Matrix.vecCons_inj, h hb, and_true, and_false, ‚ÜìreduceIte, Int.reduceNeg, hn, add_zero]
        field_simp
        ring
    ¬∑ simp only [Œ¥, Nat.succ_eq_add_one, Nat.reduceAdd, Matrix.vecCons_inj, hb, and_true,
        false_and, ‚ÜìreduceIte, Int.reduceNeg, add_zero]
      have h0 : ((b : ‚ÑÇ) * z + n + 1) ‚â† 0 := by
        simpa [add_assoc] using linear_ne_zero (cd := ![b, n + 1]) z (by aesop)
      have h1 : ((b : ‚ÑÇ) * z + n) ‚â† 0 := by
        simpa using linear_ne_zero (cd := ![b, n]) z (by aesop)
      field_simp
      ring

lemma auxr (z : ‚Ñç) (b : ‚Ñ§) :
    ((limUnder atTop fun N : ‚Ñï ‚Ü¶
    ‚àë n ‚àà Finset.Ico (-N : ‚Ñ§) N, (G2Term z ![b,n] + Œ¥ ![b, n])) +
    limUnder atTop fun N : ‚Ñï ‚Ü¶
    ‚àë n ‚àà Finset.Ico (-N : ‚Ñ§) N, (1 / ((b : ‚ÑÇ) * z + n) - 1 / (b * z + n + 1))) =
    limUnder atTop fun N : ‚Ñï ‚Ü¶
    ‚àë n ‚àà Finset.Ico (-N : ‚Ñ§) N, (1 / ((b : ‚ÑÇ) * z + n) ^ 2) := by
  have := limUnder.add (f := fun N : ‚Ñï ‚Ü¶
    ‚àë n ‚àà Finset.Ico (-N : ‚Ñ§) N, (G2Term z ![b,n] + Œ¥ ![b, n]))
    (g := fun N : ‚Ñï ‚Ü¶
    ‚àë n ‚àà Finset.Ico (-N : ‚Ñ§) N, (1 / ((b : ‚ÑÇ) * z + n) - 1 / (b * z + n + 1)))
      (by simpa [G2Term] using extracted_2_Œ¥ z b) (by apply extracted_3 z b)
  rw [this]
  apply limUnder_congr_eventually _ _ _
    (by apply CauchySeq.add (by simpa [G2Term] using extracted_2_Œ¥ z b) (extracted_3 z b))
    (by apply extracted_4 z b)
  simp only [one_div, mul_inv_rev, Pi.add_apply, eventually_atTop,
    ge_iff_le]
  use 1
  intro c hc
  rw [‚Üê Finset.sum_add_distrib ]
  congr
  exact funext fun n ‚Ü¶ poly_id z b n


--this sum is now abs convergent. Idea is to subtract limUnder_sum_eq_zero from the G2 defn.
lemma G2_alt_eq (z : ‚Ñç) : G2 z = ‚àë' m, ‚àë' n, (G2Term z ![m, n] + Œ¥ ![m, n]) := by
  set t :=  ‚àë' m, ‚àë' n,  (G2Term z ![m, n] + Œ¥ ![m, n])
  rw [G2, show t = t + 0 by ring, ‚Üê  tsum_limUnder_eq z, ‚Üê Summable.tsum_add]
  ¬∑ rw [int_tsum_limUnder_Icc_atTop]
    ¬∑ congr
      ext n
      congr
      ext m
      rw [e2Summand, int_tsum_limUnder_Ico_atTop ( e2Summand_summable m z),
        int_tsum_limUnder_Ico_atTop (by simpa using G2_prod_summable1_Œ¥ z m), auxr z m]
      simp only [eisSummand, Fin.isValue, Matrix.cons_val_zero, Matrix.cons_val_one,
        Matrix.cons_val_fin_one, Int.reduceNeg, zpow_neg, one_div]
      rfl
    ¬∑ apply (((finTwoArrowEquiv _).symm.summable_iff.mpr (G_2_alt_summable_Œ¥ z)).prod).congr
      intro b
      simpa using limUnder_sum_eq_zero z b
  ¬∑ apply (((finTwoArrowEquiv _).symm.summable_iff.mpr (G_2_alt_summable_Œ¥ z)).prod).congr
    simp
  ¬∑ apply summable_zero.congr
    intro b
    simp [‚Üê limUnder_sum_eq_zero z b]

lemma CauchySeq.const_smul {ùïú : Type*} [NormedRing ùïú] [NormMulClass ùïú] {f : ‚Ñï ‚Üí ùïú} (c : ùïú)
    (hf : CauchySeq f) : CauchySeq (c ‚Ä¢ f) := by
  simp [Metric.cauchySeq_iff'] at *
  by_cases hc : c = 0
  ¬∑ simp only [hc, zero_mul, dist_self]
    aesop
  ¬∑ intro Œµ hŒµ
    have hC : 0 < ‚Äñc‚Äñ := by simp [ne_eq, hc, not_false_eq_true]
    obtain ‚ü®N, hN‚ü© := hf (Œµ / ‚Äñc‚Äñ) (by rw [lt_div_iff‚ÇÄ' hC]; simp [hŒµ])
    refine ‚ü®N, fun n hn => ?_‚ü©
    have h1 := hN n hn
    simp only [dist_eq_norm, gt_iff_lt, ‚Üê mul_sub, norm_mul] at *
    rw [lt_div_iff‚ÇÄ' (by simp [hc])] at h1
    exact h1

/-- The map that swaps the two co-ordinates of a `Fin 2 ‚Üí Œ±` -/
def swap {Œ± : Type*} : (Fin 2 ‚Üí Œ±) ‚Üí (Fin 2 ‚Üí Œ±) := fun x => ![x 1, x 0]

@[simp]
lemma swap_apply {Œ± : Type*} (b : Fin 2 ‚Üí Œ±) : swap b = ![b 1, b 0] := rfl

lemma swap_involutive {Œ± : Type*} (b : Fin 2 ‚Üí Œ±) : swap (swap b) = b := by
  ext i
  fin_cases i <;> rfl

/-- An equivalence between `Fin 2 ‚Üí Œ±` and itself given by swapping the two co-ordinates -/
def swap_equiv {Œ± : Type*} : Equiv (Fin 2 ‚Üí Œ±) (Fin 2 ‚Üí Œ±) := Equiv.mk swap swap
  (by rw [Function.LeftInverse]; apply swap_involutive)
  (by rw [Function.RightInverse]; apply swap_involutive)

lemma G2_inde_lhs (z : ‚Ñç) : (z.1 ^ 2)‚Åª¬π * G2 (ModularGroup.S ‚Ä¢ z) - -2 * œÄ * I / z =
  ‚àë' n : ‚Ñ§, ‚àë' m : ‚Ñ§, (G2Term z ![m, n] + Œ¥ ![m, n]) := by
  rw [G2_S_act, ‚Üê limUnder_tsum_eq z, int_tsum_limUnder_Ico_atTop, limUnder.sub]
  ¬∑ congr
    ext N
    simp only [one_div, Pi.sub_apply, mul_inv_rev]
    rw [Summable.tsum_finsetSum , ‚Üê Finset.sum_sub_distrib ]
    ¬∑ apply sum_congr rfl fun n hn => ?_
      simp only [Fin.isValue, Matrix.cons_val_zero, Matrix.cons_val_one, Matrix.cons_val_fin_one]
      rw [‚Üê Summable.tsum_sub]
      ¬∑ exact tsum_congr fun m => by nth_rw 1 [‚Üê poly_id z m n, add_sub_cancel_right]
      ¬∑ exact linear_left_summable (ne_zero z) n (k := 2) (by norm_num)
      ¬∑ simpa [‚Üê add_assoc] using (summable_one_div_linear_sub_one_div_linear z n (n + 1))
    ¬∑ exact fun i hi => linear_left_summable (ne_zero z) i (k := 2) (by norm_num)
  ¬∑ conv =>
      enter [1, N]
      rw [Summable.tsum_finsetSum
        (by intro i hi; simpa using linear_left_summable (ne_zero z) i (k := 2) (by norm_num))]
    have hzn : ((UpperHalfPlane.coe z) ^ 2)‚Åª¬π ‚â† 0 := by simp [ne_eq, ne_zero z, pow_eq_zero_iff]
    have := (aux_cauchySeq_Ico ‚ü®-1 / z, by simpa using pnat_div_upper 1 z‚ü©).const_smul
      ((UpperHalfPlane.coe z) ^ 2)‚Åª¬π
    simp only [ne_eq, inv_eq_zero, OfNat.ofNat_ne_zero, not_false_eq_true, pow_eq_zero_iff,
      e2Summand, eisSummand, Fin.isValue, Matrix.cons_val_zero, coe_mk_subtype, Matrix.cons_val_one,
      Matrix.cons_val_fin_one, Int.reduceNeg, zpow_neg, one_div] at *
    conv at this =>
      enter [1, 2, N, 2, x]
      rw [‚Üê tsum_int_eq_tsum_neg]
    convert this
    simp_rw [Int.cast_neg, Pi.smul_apply, smul_eq_mul, mul_sum, ‚Üê tsum_mul_left]
    exact sum_congr (rfl) fun a ha => tsum_congr fun b => by field_simp; ring
  ¬∑ apply Filter.Tendsto.cauchySeq (x := (-2 * œÄ * I / z))
    rw [‚Üê tendsto_comp_val_Ioi_atTop]
    simpa using (tendsto_tsum_one_div_linear_sub_succ_eq z)
  ¬∑ have := G_2_alt_summable_Œ¥ z
    rw [‚Üê swap_equiv.summable_iff, ‚Üê (finTwoArrowEquiv _).symm.summable_iff] at this
    simpa using Summable.prod this

lemma G2_alt_indexing_Œ¥ (z : ‚Ñç) : ‚àë' (m : Fin 2 ‚Üí ‚Ñ§), (G2Term z m + Œ¥ m)  =
    ‚àë' m : ‚Ñ§, ‚àë' n : ‚Ñ§, (G2Term z ![m, n] + (Œ¥ ![m, n])) := by
  rw [ ‚Üê (finTwoArrowEquiv _).symm.tsum_eq]
  simp only [Fin.isValue, finTwoArrowEquiv_symm_apply, Matrix.cons_val_zero, Matrix.cons_val_one,
    Matrix.cons_val_fin_one, mul_inv_rev]
  refine Summable.tsum_prod' ?_ ?_
  ¬∑ have := G_2_alt_summable_Œ¥ z
    simp at this
    rw [‚Üê (finTwoArrowEquiv _).symm.summable_iff] at this
    exact this
  ¬∑ intro b
    have := G_2_alt_summable_Œ¥ z
    simp only [Fin.isValue, mul_inv_rev, ‚Üê (finTwoArrowEquiv _).symm.summable_iff] at this
    exact this.prod_factor b

lemma G2_alt_indexing2_Œ¥ (z : ‚Ñç) : ‚àë' (m : Fin 2 ‚Üí ‚Ñ§), (G2Term z m + Œ¥ m)  =
    ‚àë' n : ‚Ñ§, ‚àë' m : ‚Ñ§, (G2Term z ![m, n] + Œ¥ ![m, n]) := by
  have := (G_2_alt_summable_Œ¥ z)
  simp at this
  rw [‚Üê (finTwoArrowEquiv _).symm.summable_iff] at this
  rw [ Summable.tsum_comm', G2_alt_indexing_Œ¥]
  ¬∑ apply this.congr
    intro b
    simp
    rfl
  ¬∑ intro b
    simp only [mul_inv_rev]
    apply this.prod_factor
  ¬∑ intro c
    have H := (G_2_alt_summable_Œ¥ z)
    rw [‚Üê swap_equiv.summable_iff, ‚Üê (finTwoArrowEquiv _).symm.summable_iff] at H
    simpa using H.prod_factor c

lemma G2_transf_aux (z : ‚Ñç) :
    (z.1 ^ 2)‚Åª¬π * G2 (ModularGroup.S ‚Ä¢ z) - -2 * œÄ * I / z = G2 z := by
  rw [G2_inde_lhs, G2_alt_eq z , ‚Üê G2_alt_indexing2_Œ¥ , G2_alt_indexing_Œ¥]

end transform
