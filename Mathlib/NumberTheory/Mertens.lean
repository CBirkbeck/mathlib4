/-
Copyright (c) 2025 Arend Mellendijk. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Arend Mellendijk
-/
import Mathlib

open Filter Nat Real Finset
open Asymptotics
open MeasureTheory

set_option linter.style.longLine false

section fun_prop

@[fun_prop]
theorem MeasureTheory.AEStronglyMeasurable.mul' {Œ± : Type*} {Œ≤ : Type*} [TopologicalSpace Œ≤] {m‚ÇÄ : MeasurableSpace Œ±} {mu : Measure Œ±} {f g : Œ± ‚Üí Œ≤} [Mul Œ≤] [ContinuousMul Œ≤] (hf : AEStronglyMeasurable f mu) (hg : AEStronglyMeasurable g mu) :
    AEStronglyMeasurable (fun x ‚Ü¶ f x * g x) mu := hf.mul hg

@[fun_prop]
theorem MeasureTheory.AEStronglyMeasurable.inv' {Œ± : Type*} {Œ≤ : Type*} [TopologicalSpace Œ≤] {m m‚ÇÄ : MeasurableSpace Œ±} {Œº : Measure Œ±} {f : Œ± ‚Üí Œ≤} [Inv Œ≤] [ContinuousInv Œ≤] (hf : AEStronglyMeasurable f Œº) :
AEStronglyMeasurable (fun x ‚Ü¶ (f x)‚Åª¬π) Œº := hf.inv

@[fun_prop]
theorem MeasureTheory.AEStronglyMeasurable.pow' {Œ± : Type*} {Œ≤ : Type*} [TopologicalSpace Œ≤] {m m‚ÇÄ : MeasurableSpace Œ±} {Œº : Measure Œ±} {f : Œ± ‚Üí Œ≤} [Monoid Œ≤] [ContinuousMul Œ≤] (hf : AEStronglyMeasurable f Œº) (n : ‚Ñï) :
    AEStronglyMeasurable (fun x ‚Ü¶ f x ^ n) Œº := hf.pow n

attribute [fun_prop] measurable_log Measurable.aestronglyMeasurable

end fun_prop


section MeasureTheory

theorem integrableAtFilter_principal_iff
  {Œ± : Type*} {E : Type*} [MeasurableSpace Œ±] [NormedAddCommGroup E] {f : Œ± ‚Üí E} {S : Set Œ±} {mu : Measure Œ±}  :
  IntegrableAtFilter f (ùìü S) mu ‚Üî IntegrableOn f S mu := by
  rw [IntegrableAtFilter]
  simp only [mem_principal]
  refine ‚ü®fun ‚ü®s, hsS, hfs‚ü© ‚Ü¶ hfs.mono hsS le_rfl, fun h ‚Ü¶ ‚ü®S, le_rfl, h‚ü©‚ü©

theorem MeasureTheory.IntegrableAtFilter.integrableOn_of_principal
    {Œ± : Type*} {E : Type*} [MeasurableSpace Œ±] [NormedAddCommGroup E] {f : Œ± ‚Üí E} {S : Set Œ±} {mu : Measure Œ±}
    (h : IntegrableAtFilter f (ùìü S) mu) : IntegrableOn f S mu :=
  integrableAtFilter_principal_iff.mp h

theorem MeasureTheory.IntegrableOn.integrableAtFilter
    {Œ± : Type*} {E : Type*} [MeasurableSpace Œ±] [NormedAddCommGroup E] {f : Œ± ‚Üí E} {S : Set Œ±} {mu : Measure Œ±}
    (h : IntegrableOn f S mu) : IntegrableAtFilter f (ùìü S) mu :=
  integrableAtFilter_principal_iff.mpr h

theorem IsBigO.set_integral_isBigO {Œ± E F : Type*} [NormedAddCommGroup E] {l : Filter Œ±} {Œπ : Type*} [MeasurableSpace Œπ] {f g : Œπ √ó Œ± ‚Üí ‚Ñù} {s : Set Œπ} {Œº : Measure Œπ}  [NormedSpace ‚Ñù E] [NormedAddCommGroup F]
    (hf : f =O[ùìü s √óÀ¢ l] g) (hg : (‚àÄ i ‚àà s, ‚àÄ x, 0 ‚â§ g (i, x))) (hs : MeasurableSet s):
    (fun x ‚Ü¶ ‚à´ i in s, f (i, x) ‚àÇŒº) =O[l] (fun x ‚Ü¶ ‚à´ i in s, g (i, x) ‚àÇŒº) := by
  obtain ‚ü®C, hC‚ü© := hf.bound
  obtain ‚ü®t, htl, ht‚ü© := hC.exists_mem
  obtain ‚ü®u, hu, v, hv, huv‚ü© := Filter.mem_prod_iff.mp htl
  refine isBigO_iff.mpr ‚ü®C, eventually_iff_exists_mem.mpr ‚ü®v, hv, fun x hx ‚Ü¶ ?_‚ü©‚ü©

  -- rw [‚Üê smul_eq_mul (a' := ‚Äñg x‚Äñ), ‚Üê MeasureTheory.Measure.restrict_apply_univ,
  --   ‚Üê integral_const, mul_comm, ‚Üê smul_eq_mul, ‚Üê integral_smul_const]
  -- haveI : IsFiniteMeasure (Œº.restrict s) := ‚ü®by rw [Measure.restrict_apply_univ s]; exact hŒº‚ü©
  refine (norm_integral_le_integral_norm _).trans <| ?_
  simp only [norm_eq_abs]
  rw [abs_of_nonneg (setIntegral_nonneg hs (fun i h ‚Ü¶ hg i h x)), ‚Üê smul_eq_mul, ‚Üê integral_smul]
  gcongr
  ¬∑ sorry

  -- filter_upwards [MeasureTheory.self_mem_ae_restrict hs]
  ¬∑ sorry
  ¬∑ sorry
  -- intro y hy
  -- rw [smul_eq_mul, mul_comm]
  -- exact ht (y, x) <| huv ‚ü®hu hy, hx‚ü©
theorem MeasureTheory.setIntegral_mono_on' {X : Type*} [MeasurableSpace X] {Œº : Measure X}
    {f g : X ‚Üí ‚Ñù} {s : Set X} (hf : Measurable f) (hg : IntegrableOn g s Œº)
    (hs : MeasurableSet s) (h : ‚àÄ x ‚àà s, f x ‚â§ g x) :
    ‚à´ (x : X) in s, f x ‚àÇŒº ‚â§ ‚à´ (x : X) in s, g x ‚àÇŒº := by
  sorry

end MeasureTheory

open scoped ArithmeticFunction

axiom hpsi_cheby : (fun n => ‚àë k ‚àà Finset.range (n+1), Œõ k) =O[atTop] (fun n ‚Ü¶ (n:‚Ñù))

theorem ArithmeticFunction.sum_range_mul_zeta
    {R : Type*} [Semiring R] (f : ArithmeticFunction R) (N : ‚Ñï) :
    ‚àë d in range (N + 1), (f * Œ∂) d = ‚àë d in range (N + 1), (N / d) ‚Ä¢ f d := by
  induction N with
  | zero => simp
  | succ n h_ind =>
    rw [Finset.sum_range_succ]
    simp_rw [Nat.succ_div, add_smul, Finset.sum_add_distrib, h_ind]
    congr 1
    ¬∑ apply Finset.sum_subset
      ¬∑ refine range_subset.mpr (le_succ _)
      ¬∑ simp only [mem_range, not_lt, nsmul_eq_mul]
        intro d hd1 hd2
        obtain rfl : d = n+1 := by omega
        apply mul_eq_zero_of_left
        convert cast_zero
        simp only [Nat.div_eq_zero_iff, AddLeftCancelMonoid.add_eq_zero, one_ne_zero, and_false,
          lt_add_iff_pos_right, zero_lt_one, or_true]
    ¬∑ simp_rw [boole_smul, ‚Üê Finset.sum_filter]
      rw [Nat.filter_dvd_eq_divisors (add_one_ne_zero n)]
      exact coe_mul_zeta_apply

theorem log_stirling :
  Tendsto (fun n => Real.log (n)!
    - (n * Real.log n - n + Real.log n / 2 + Real.log œÄ / 2 + Real.log 2 / 2))
    atTop (nhds 0) := by
  have :=  Stirling.factorial_isEquivalent_stirling
  rw [Asymptotics.isEquivalent_iff_tendsto_one ?case] at this
  case case =>
    filter_upwards [eventually_ge_atTop 1]
    intro n hn
    positivity
  have tendsto_log_one_zero : Tendsto Real.log (nhds 1) (nhds 0) := by
    convert ContinuousAt.tendsto ?_
    ¬∑ simp only [log_one]
    ¬∑ simp only [continuousAt_log_iff, ne_eq, one_ne_zero, not_false_eq_true]
  apply  (tendsto_log_one_zero.comp this).congr'
  filter_upwards [eventually_ne_atTop 0]
  intro n hn
  have hsqrt_pi : ‚àöœÄ ‚â† 0 := by
    simp [Real.pi_nonneg, Real.pi_ne_zero]
  simp only [ofNat_pos, mul_nonneg_iff_of_pos_left, cast_nonneg, ofNat_nonneg,
    Function.comp_apply, Pi.div_apply]
  rw [Real.log_div (by positivity) (by simp [hn, hsqrt_pi])]
  rw [Real.log_mul (by positivity) (by positivity), Real.log_sqrt (by positivity),
    Real.log_mul (by positivity) (by positivity), Real.log_mul (by positivity) (by positivity),
    Real.log_pow, Real.log_div (by positivity) (by positivity)]
  simp only [log_exp, sub_right_inj]
  ring

theorem multiplicity_factorial
    {p : ‚Ñï} (hp : Nat.Prime p) {n b : ‚Ñï} (hlog : Nat.log p n < b) :
    multiplicity p n.factorial = ‚àë i ‚àà Finset.Ico 1 b, n / p ^ i := by
  apply multiplicity_eq_of_emultiplicity_eq_some
  exact Prime.emultiplicity_factorial hp hlog

theorem factorization_factorial
    {p : ‚Ñï} (hp : Nat.Prime p) {n b : ‚Ñï} (hlog : Nat.log p n < b) :
    n.factorial.factorization p = ‚àë i ‚àà Finset.Ico 1 b, n / p ^ i := by
  rw [‚Üê multiplicity_factorial hp hlog]
  refine Eq.symm (multiplicity_eq_factorization hp (factorial_ne_zero n))

theorem isBigO_pow_right_of_le {a b : ‚Ñï} (h : a ‚â§ b) :
    (fun (x:‚Ñù) ‚Ü¶ x^a) =O[atTop]  (fun x ‚Ü¶ x^b) := by
  refine Eventually.isBigO ?_
  filter_upwards [Filter.eventually_ge_atTop 1, Filter.eventually_ge_atTop 0]
  intro x hx hx'
  simp only [norm_pow, norm_eq_abs, abs_of_nonneg hx']
  gcongr
  exact hx

example : (fun _ ‚Ü¶ 1 : ‚Ñù ‚Üí ‚Ñù) =O[atTop] (fun x ‚Ü¶ (x : ‚Ñù)) := by
  convert isBigO_pow_right_of_le zero_le_one with x
  simp


/- One pain point I'm running into here is finding the right theorems in the library - say I need a
IsBigO statement but it's phrased as IsLittleO in the library. Things like natCast_atTop also make
exact? and the like less useful.
-/
theorem log_fac_sub_id_mul_log_isBigO_id :
    (fun n ‚Ü¶ Real.log (n !) - n * Real.log n) =O[atTop] (fun n ‚Ü¶ (n:‚Ñù)) := by
  have hstirling := log_stirling
  rw [‚Üê Asymptotics.isLittleO_one_iff ‚Ñù] at hstirling
  have : (fun _ ‚Ü¶ 1 : ‚Ñù ‚Üí ‚Ñù) =O[atTop] (fun x ‚Ü¶ (x : ‚Ñù)) := by
    convert isBigO_pow_right_of_le zero_le_one with x
    simp
  have const_isBigO (c : ‚Ñù) : (fun (_ : ‚Ñï) ‚Ü¶ c) =O[atTop] (fun (n : ‚Ñï) ‚Ü¶ (n : ‚Ñù)) := by
    convert (this.const_mul_left c).natCast_atTop
    simp only [mul_one]
  have hlog : Real.log =O[atTop] id := by
    exact Real.isLittleO_log_id_atTop.isBigO
  have hlarger := hstirling.isBigO.trans (const_isBigO 1).natCast_atTop
  have hrfl : (fun (n : ‚Ñï) ‚Ü¶ (n : ‚Ñù)) =O[atTop] (fun (n : ‚Ñï) ‚Ü¶ (n : ‚Ñù)) :=
    Asymptotics.isBigO_refl (Œ± := ‚Ñï) (fun n ‚Ü¶ (n:‚Ñù)) atTop
  convert ((hlarger.sub hrfl).add (const_isBigO (Real.log œÄ / 2 + Real.log 2 / 2))).add
    (hlog.const_mul_left (1/2) |>.natCast_atTop) using 1
  ext x
  ring





-- theorem factorial_eq_prod {n : ‚Ñï} :
--   n ! = ‚àè p in primesBelow (n+1), p ^ (

-- This is another general result about convolutions :
-- ‚àë (k <= n), (1*f) k =  ‚àë (k <= n), (n/d) * f d
-- Not currently in mathlib, in PNT+:
-- https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/fea8d484879ed4697fcbb22cae90d9a127c93fb5/PrimeNumberTheoremAnd/Mathlib/NumberTheory/ArithmeticFunction.lean#L17


theorem log_factorial (n : ‚Ñï) :
  Real.log (n)! = ‚àë d ‚àà Finset.range (n+1), ‚Üë(n / d) * Œõ d := by
  induction n with
  | zero => simp
  | succ n h_ind =>
    rw [Nat.factorial_succ]
    push_cast
    rw [mul_comm, Real.log_mul (by positivity) (by norm_cast)]
    simp_rw [Nat.succ_div, cast_add, add_mul, Finset.sum_add_distrib, h_ind]
    congr 1
    ¬∑ apply Finset.sum_subset
      ¬∑ intro d hd
        simp at hd ‚ä¢
        linarith
      intro d hd hdnin
      obtain rfl : d = n+1 := by
        simp_all
        linarith
      simp only [_root_.mul_eq_zero, cast_eq_zero, Nat.div_eq_zero_iff,
        AddLeftCancelMonoid.add_eq_zero, one_ne_zero, and_false, lt_add_iff_pos_right, zero_lt_one,
        or_true, true_or]
    ¬∑ push_cast
      simp_rw [boole_mul, ‚Üê Finset.sum_filter]
      rw [Nat.filter_dvd_eq_divisors (add_one_ne_zero n)]
      exact_mod_cast ArithmeticFunction.vonMangoldt_sum.symm



theorem sum_floor_mul_vonmangoldt (n : ‚Ñï) : ‚àë d ‚àà Finset.range (n+1), ‚Üë(n / d) * Œõ d =
  n * ‚àë d ‚àà Finset.range (n+1), Œõ d / d + ‚àë d ‚àà Finset.range (n+1), (‚Üë(n/d) - n/d) * Œõ d := by
  rw [mul_sum, ‚Üê sum_add_distrib]
  congr 1 with d
  ring
-- Nat.Prime.emultiplicity_factorial
-- Nat.multiplicity_eq_factorization
-- emultiplicity_eq_iff_multiplicity_eq_of_ne_one




theorem floor_approx (x : ‚Ñù) (hx : 0 ‚â§ x) : |‚Üë((Nat.floor x)) - x| ‚â§ 1  := by
  rw [abs_le]
  refine ‚ü®by linarith [Nat.lt_floor_add_one x], by linarith [Nat.floor_le hx]‚ü©

theorem abs_natCast_div_sub_div_le_one {n d : ‚Ñï}: |(‚Üë(n/d) - n/d:‚Ñù)| ‚â§ 1 := by
  rw [‚Üê Nat.floor_div_eq_div (Œ± := ‚Ñù)]
  apply floor_approx
  positivity

theorem sum_integer_mul_vonMangoldt : (fun n ‚Ü¶ ‚àë d ‚àà Finset.range (n+1), (‚Üë(n/d) - n/d) * Œõ d)
    =O[atTop] (fun n ‚Ü¶ (n : ‚Ñù)) := by
  calc
    _ =O[atTop] (fun n ‚Ü¶ ‚àë d ‚àà Finset.range (n+1), 1 * Œõ d)  := by
      apply Filter.Eventually.isBigO
      filter_upwards
      intro n
      simp only [norm_eq_abs, eventually_atTop, ge_iff_le]
      apply (abs_sum_le_sum_abs ..).trans _
      gcongr with d hd
      rw [abs_mul, abs_of_nonneg ArithmeticFunction.vonMangoldt_nonneg]
      gcongr
      ¬∑ exact ArithmeticFunction.vonMangoldt_nonneg
      ¬∑ exact abs_natCast_div_sub_div_le_one
    _ =O[atTop] _ := by
      simp only [one_mul]
      exact hpsi_cheby

-- n! = ‚àè k ‚â§ n, n.factorization.prod fun p i => p ^ i = ‚àè k ‚â§ n, ‚àè p in primesBelow n, p ^ (Nat.factorization k n)
-- Nat.prod_factorization_eq_prod_primeFactors ()
theorem sum_cheby_div_id :
  (fun n : ‚Ñï ‚Ü¶ (‚àë k ‚àà Finset.range (n+1), Œõ k / k) - Real.log n) =O[atTop] fun _ ‚Ü¶ (1:‚Ñù) := by
  have : (fun n ‚Ü¶ n * ‚àë d in Finset.range (n+1), Œõ d / d - n * Real.log n) =O[atTop]
      (fun n ‚Ü¶ (n:‚Ñù)) := by
    have := log_fac_sub_id_mul_log_isBigO_id
    simp_rw [log_factorial, sum_floor_mul_vonmangoldt] at this
    convert this.sub sum_integer_mul_vonMangoldt using 2 with n
    ring
  apply this.mul (isBigO_refl (fun (n : ‚Ñï) ‚Ü¶ (n : ‚Ñù)‚Åª¬π) atTop) |>.congr'
  ¬∑ filter_upwards [eventually_gt_atTop 0]
    intro x hx
    field_simp
    ring
  ¬∑ filter_upwards [eventually_ne_atTop 0]
    intro x hx
    field_simp

@[simp]
theorem pow_prime_iff (n k : ‚Ñï) : Nat.Prime (n ^ k) ‚Üî n.Prime ‚àß k = 1 := by
  constructor
  ¬∑ intro h
    obtain rfl := Nat.Prime.eq_one_of_pow h
    simp_all
  ¬∑ simp +contextual

@[simp]
theorem Nat.Primes.prime (p : Nat.Primes) : Nat.Prime p := p.2

theorem isBigO_fun : (fun x ‚Ü¶ Real.log x / (x * (x - 1)))
    =O[atTop] fun x ‚Ü¶ x ^ (-3 / 2:‚Ñù) := by
  have hlog := isLittleO_log_rpow_atTop (show 0 < (1/2:‚Ñù) by norm_num)
  have hpoly : (fun x ‚Ü¶ x^2) =O[atTop] fun x:‚Ñù ‚Ü¶ x * (x - 1) := by
    let P : Polynomial ‚Ñù := .X^2
    let Q : Polynomial ‚Ñù := .X * (.X - 1)
    convert Polynomial.isBigO_of_degree_le P Q ?_ with x x <;> simp only [P, Q]
    ¬∑ simp
    ¬∑ simp
    convert_to (Polynomial.X^2).degree ‚â§ 2 using 1
    ¬∑ compute_degree
      ¬∑ norm_num
      ¬∑ decide
    compute_degree
  have := hpoly.inv_rev ?inv
  case inv =>
    filter_upwards [eventually_ne_atTop 0] with a ha ha'
    simp_all
  apply (hlog.isBigO.mul this).congr'
  ¬∑ simp_rw [div_eq_mul_inv]
    rfl
  ¬∑ filter_upwards [eventually_gt_atTop 0] with x hx
    simp_rw [‚Üê rpow_natCast, ‚Üê rpow_neg hx.le, ‚Üê rpow_add hx]
    norm_num

theorem sum_strictPow_convergent : Summable (fun (n:‚Ñï) ‚Ü¶
  if ¬¨ Nat.Prime n then Œõ n / n else 0) := by
  convert_to Summable ({k : ‚Ñï | IsPrimePow k}.indicator
    fun (n:‚Ñï) ‚Ü¶ if ¬¨ Nat.Prime n then Œõ n / n else 0)
  ¬∑ ext n
    by_cases h : IsPrimePow n
    ¬∑ simp [h]
    ¬∑ simp [h, ArithmeticFunction.vonMangoldt_eq_zero_iff]
  rw [‚Üê summable_subtype_iff_indicator]

  have hassum_p (p : Primes) :
      HasSum (fun y => if y = 0 then 0 else Real.log p / p^(y+1)) (Real.log p / (p * (p-1))) := by
    have hp : (p : ‚Ñù) ‚â† 0 := by
      exact_mod_cast p.2.ne_zero
    have hp' : (p : ‚Ñù)‚Åª¬π ‚â† 0 := by
      exact inv_ne_zero hp
    rw [‚Üê hasSum_nat_add_iff' 1]
    simp only [AddLeftCancelMonoid.add_eq_zero, one_ne_zero, and_false, ‚ÜìreduceIte, range_one,
      sum_singleton, sub_zero, div_eq_mul_inv, ]
    rw [hasSum_mul_left_iff (Real.log_pos (by exact_mod_cast p.2.one_lt)).ne.symm, ]
    simp_rw [‚Üê inv_pow, pow_succ]
    rw [show (p * (p - 1 : ‚Ñù))‚Åª¬π = (1-(p:‚Ñù)‚Åª¬π)‚Åª¬π * (p : ‚Ñù)‚Åª¬π * (p : ‚Ñù)‚Åª¬π from ?rw]
    case rw =>
      rw [‚Üê mul_inv, sub_mul]
      simp only [mul_inv_rev, one_mul, isUnit_iff_ne_zero, ne_eq, hp,
        not_false_eq_true, IsUnit.inv_mul_cancel]
    rw [hasSum_mul_right_iff hp', hasSum_mul_right_iff hp']
    apply hasSum_geometric_of_lt_one (r := (p:‚Ñù)‚Åª¬π) (by positivity)
    apply inv_lt_one_of_one_lt‚ÇÄ
    exact_mod_cast p.2.one_lt
  set f := (fun (n:‚Ñï) ‚Ü¶ if ¬¨ Nat.Prime n then Œõ n / n else 0) ‚àò
    (fun x : {k : ‚Ñï | IsPrimePow k} ‚Ü¶ (x : ‚Ñï))
  let e := Nat.Primes.prodNatEquiv
  rw [‚Üê Equiv.summable_iff e]
  have : f ‚àò e = fun p ‚Ü¶ if p.2 = 0 then 0 else Real.log p.1 / p.1 ^ (p.2+1) := by
    ext ‚ü®p, k‚ü©
    simp +contextual [Set.coe_setOf, Set.mem_setOf_eq, ite_not, Function.comp_apply,
      Primes.prodNatEquiv_apply, pow_prime_iff, Primes.prime, add_left_eq_self, true_and, cast_pow,
      f, e, ArithmeticFunction.vonMangoldt_apply_pow, ArithmeticFunction.vonMangoldt_apply_prime]
  rw [this, summable_prod_of_nonneg]
  ¬∑ refine ‚ü®?_, ?_‚ü©
    ¬∑ intro p
      apply (hassum_p p).summable
    simp_rw [fun p : Primes ‚Ü¶ (hassum_p p).tsum_eq]
    simp [Primes]
    -- need Nat not Primes...
    -- -- why do I need to give f here...
    -- apply Summable.comp_injective (i := (fun p : Primes ‚Ü¶ (p : ‚Ñï)))
    --   (f := fun (n: ‚Ñï) => Real.log n / (n * (n - 1:‚Ñù)) )
    apply summable_of_isBigO (g := fun p : Primes ‚Ü¶ (p:‚Ñù) ^ (-3/2:‚Ñù))
    ¬∑ rw [Nat.Primes.summable_rpow]
      norm_num
    convert_to (((fun x ‚Ü¶ Real.log x / (x * (x-1))) ‚àò (fun n : ‚Ñï ‚Ü¶ (n : ‚Ñù))) ‚àò
      (fun p : Primes ‚Ü¶ (p : ‚Ñï)))
      =O[cofinite] (((fun x ‚Ü¶ x^(-3/2:‚Ñù)) ‚àò (fun n : ‚Ñï ‚Ü¶ (n : ‚Ñù))) ‚àò (fun p : Primes ‚Ü¶ (p : ‚Ñï)))
    apply Asymptotics.IsBigO.comp_tendsto (l := cofinite)
    ¬∑ rw [Nat.cofinite_eq_atTop]
      exact Asymptotics.IsBigO.comp_tendsto isBigO_fun tendsto_natCast_atTop_atTop
    ¬∑ apply Function.Injective.tendsto_cofinite Primes.coe_nat_injective
  ¬∑ intro p
    simp only [Pi.zero_apply, e, f]
    positivity

theorem sum_primesBelow_log_div_id_eq_vonMangoldt_sub (n : ‚Ñï) :
  ‚àë p ‚àà primesBelow (n+1), Real.log p / p = ‚àë k ‚àà Finset.range (n+1), Œõ k / k
    - ‚àë k ‚àà Finset.range (n+1), if ¬¨ Nat.Prime k then Œõ k / k else 0 := by
  trans ‚àë p ‚àà primesBelow (n+1), Œõ p / p
  ¬∑ apply sum_congr rfl
    simp +contextual [mem_primesBelow, ArithmeticFunction.vonMangoldt_apply_prime]
  rw [eq_sub_iff_add_eq, ‚Üê Finset.sum_filter, ‚Üê Finset.sum_union]
  ¬∑ apply sum_subset <;>
    ¬∑ intro a
      simp +contextual only [mem_union, mem_primesBelow, mem_filter, mem_range]
      tauto
  ¬∑ rw [Finset.disjoint_left]
    simp +contextual only [mem_primesBelow, mem_filter, mem_range, not_true_eq_false, and_false,
      not_false_eq_true, implies_true]

theorem sum_properPower_vonMangoldt_div_id_isBigO_one :
  (fun n ‚Ü¶ ‚àë k ‚àà Finset.range (n+1), if ¬¨ Nat.Prime k then Œõ k / k else 0) =O[atTop]
    (fun _ ‚Ü¶ (1 : ‚Ñù)) := by
  apply Filter.IsBoundedUnder.isBigO_one
  use (‚àë' (n:‚Ñï), if ¬¨ Nat.Prime n then Œõ n / n else 0)
  simp only [norm_eq_abs, eventually_map, ge_iff_le]
  filter_upwards with a
  rw [abs_of_nonneg ?pos]
  case pos =>
    apply Finset.sum_nonneg
    intro k __
    have := ArithmeticFunction.vonMangoldt_nonneg (n:=k)
    positivity
  apply sum_le_tsum (Finset.range (a+1)) _ (sum_strictPow_convergent)
  intro k _
  have := ArithmeticFunction.vonMangoldt_nonneg (n:=k)
  positivity


theorem tmp {f g : ‚Ñï ‚Üí ‚Ñù} (hfg : f =O[atTop] g) (h : ‚àÄ n, g n = 0 ‚Üí f n = 0) : f =O[‚ä§] g := by
  obtain ‚ü®C, hC_pos, hC‚ü© := Asymptotics.bound_of_isBigO_nat_atTop hfg
  refine isBigO_top.mpr ?_
  use C
  intro x
  by_cases hf : f x = 0
  ¬∑ simp [hf, hC_pos]
  apply hC
  exact fun a ‚Ü¶ hf (h x a)

theorem mertens_first : (fun n : ‚Ñï ‚Ü¶ (‚àë p ‚àà primesBelow (n+1), Real.log p / p) - Real.log n)
    =O[‚ä§] (fun _ ‚Ü¶ (1 : ‚Ñù)) := by
  apply tmp _ (fun _ h ‚Ü¶ (one_ne_zero h).elim)
  simp_rw [sum_primesBelow_log_div_id_eq_vonMangoldt_sub]
  have h‚ÇÄ := sum_properPower_vonMangoldt_div_id_isBigO_one
  have h‚ÇÅ := sum_cheby_div_id
  apply (h‚ÇÅ.sub h‚ÇÄ).congr <;>
  ¬∑ intro x
    ring
set_option linter.style.longLine false

@[reducible]
private noncomputable def E‚ÇÅ (t : ‚Ñù) : ‚Ñù := (‚àë p ‚àà primesBelow (‚åät‚åã‚Çä+1), Real.log p / p) - Real.log t

private theorem E‚ÇÅ_eq : E‚ÇÅ = fun t ‚Ü¶ (‚àë p ‚àà primesBelow (‚åät‚åã‚Çä+1), Real.log p / p) - Real.log t := rfl

theorem E‚ÇÅ_eq_add (t : ‚Ñù) : (‚àë p ‚àà primesBelow (‚åät‚åã‚Çä+1), Real.log p / p) = Real.log t + E‚ÇÅ t := by
  rw [E‚ÇÅ_eq]
  ring

theorem E‚ÇÅ_of_lt_two (t : ‚Ñù) (ht_nonneg : 0 ‚â§ t) (ht : t < 2) : E‚ÇÅ t = - Real.log t := by
  have : ‚åät‚åã‚Çä ‚â§ 1 := by
    apply Nat.le_of_lt_succ
    rw [Nat.floor_lt ht_nonneg]
    exact ht
  have : (‚åät‚åã‚Çä + 1).primesBelow = ‚àÖ := by
    ext p
    simp [mem_primesBelow]
    intro h hp
    have := hp.two_le
    omega
  rw [E‚ÇÅ, this, Finset.sum_empty, zero_sub]

@[fun_prop, measurability]
theorem E‚ÇÅ_measurable : Measurable E‚ÇÅ := by
  rw [E‚ÇÅ_eq]
  apply Measurable.sub
  ¬∑ apply (measurable_from_nat (f := fun n ‚Ü¶ ‚àë p ‚àà primesBelow (n+1), Real.log p / p)).comp
      Nat.measurable_floor
  ¬∑ fun_prop

theorem Asymptotics.IsBigO.nat_floor {f g : ‚Ñï ‚Üí ‚Ñù} (h : f =O[‚ä§] g) :
  (fun x ‚Ü¶ f (Nat.floor x)) =O[‚ä§] (fun x ‚Ü¶ (g (Nat.floor x)) : ‚Ñù ‚Üí ‚Ñù) := by
  apply h.comp_tendsto tendsto_top

open Filter
theorem antitoneOn_id_div_sub : AntitoneOn (fun x : ‚Ñù ‚Ü¶ x / (x-1)) (Set.Ioi 1) := by
  have := (sub_inv_antitoneOn_Ioi (c:=(1:‚Ñù))).add_const 1
  apply this.congr
  intro x hx
  simp only [Set.mem_Ioi] at hx
  apply Eq.symm
  calc _ = ((x-1) + 1)/(x-1) := by ring
    _ = _ := by
      rw [_root_.add_div, div_self (by linarith)]
      ring

-- ouchie
/- There should be some general theorem: given f : ‚Ñï ‚Üí ‚Ñù and g h : ‚Ñù ‚Üí ‚Ñù, got from f n - g n =O h n
 to f ‚åäx‚åã‚Çä - g x =O h x under certain "smoothnes"/monotonicity assumptions on g -/
theorem E‚ÇÅ_isBigO_one {t : ‚Ñù} (ht : 1 < t) : E‚ÇÅ =O[ùìü <| Set.Ici t] (fun _ ‚Ü¶ (1:‚Ñù)) := by
  have h‚ÇÄ : (fun t ‚Ü¶ Real.log t - Real.log (‚åät‚åã‚Çä)) =O[ùìü <| Set.Ici t] (fun t ‚Ü¶ Real.log t - Real.log (t-1)) := by
    have h1 (t : ‚Ñù) (ht : 1 < t) : Real.log (t-1) ‚â§ Real.log (‚åät‚åã‚Çä) := by
      gcongr
      ¬∑ linarith only [ht]
      ¬∑ linarith only [Nat.lt_floor_add_one t]
    have h2 (t : ‚Ñù) (ht : 1 ‚â§ t) : Real.log (‚åät‚åã‚Çä) ‚â§ Real.log t := by
      gcongr
      ¬∑ exact_mod_cast Nat.floor_pos.mpr ht
      ¬∑ apply Nat.floor_le (zero_le_one.trans ht)
    apply Eventually.isBigO
    simp only [norm_eq_abs, eventually_principal, Set.mem_Ici]
    intro t ht
    rw [abs_of_nonneg (by linarith only [h2 t (by linarith)])]
    gcongr
    ¬∑ linarith
    ¬∑ linarith only [Nat.lt_floor_add_one t]
  have h‚ÇÅ : (fun t ‚Ü¶ Real.log t - Real.log (t-1)) =O[ùìü <| Set.Ici t] (fun _ ‚Ü¶ (1:‚Ñù)) := by
    apply IsBigO.trans _ (Asymptotics.isBigO_const_const (t/(t-1)) one_ne_zero _)
    apply Filter.Eventually.isBigO
    simp only [norm_eq_abs, eventually_principal, Set.mem_Ici]
    intro x hx
    rw [abs_of_nonneg ?nonneg]
    case nonneg =>
      rw [sub_nonneg]
      gcongr <;> linarith
    rw [‚Üê Real.log_div]
    ¬∑ apply (Real.log_le_self _).trans
      ¬∑ apply antitoneOn_id_div_sub _ _ hx <;> simp only [Set.mem_Ioi, ht]
        linarith
      apply div_nonneg (by linarith)
      linarith
    ¬∑ linarith
    ¬∑ exact sub_ne_zero_of_ne (by linarith)
  simp_rw [E‚ÇÅ_eq]
  apply ((mertens_first.mono le_top).nat_floor.mono le_top |>.sub (h‚ÇÄ.trans h‚ÇÅ)).congr <;>
  ¬∑ intro x
    ring

section MertensSecond

theorem Icc_filter_prime (n : ‚Ñï) : filter (fun a ‚Ü¶ Nat.Prime a) (Icc 0 n) = Nat.primesBelow (n+1) := by
  ext p
  simp only [mem_filter, mem_Icc, _root_.zero_le, true_and, mem_primesBelow, and_congr_left_iff]
  omega

theorem helper1 (n : ‚Ñï) :
    ‚àë x ‚àà Icc 0 n, (if Nat.Prime x then Real.log ‚Üëx / ‚Üëx else 0) =
    ‚àë p ‚àà (n+1).primesBelow, Real.log p / p := by
  rw [‚Üê sum_filter, sum_congr]
  ¬∑ ext p
    simp only [mem_filter, mem_Icc, _root_.zero_le, true_and, mem_primesBelow, and_congr_left_iff]
    omega
  ¬∑ simp only [implies_true]

theorem extracted_1 (a b : ‚Ñù) (ha : 1 < a):
  MeasureTheory.Integrable (fun t ‚Ü¶ t‚Åª¬π * (Real.log t)‚Åª¬π)
    (MeasureTheory.volume.restrict (Set.Icc a b)) := by
  rw [‚Üê MeasureTheory.IntegrableOn]
  have hsub : Set.Icc a b ‚äÜ {0}·∂ú := by
    simp only [Set.subset_compl_singleton_iff, Set.mem_Icc, not_and, not_le]
    intros
    linarith
  apply ((continuousOn_inv‚ÇÄ.mono hsub).mul ((continuousOn_log.mono hsub).inv‚ÇÄ ?_))
    |>.integrableOn_compact isCompact_Icc
  intro x
  simp only [Set.mem_Icc, ne_eq, not_or, and_imp]
  intro hx _
  apply (Real.log_pos (by linarith)).ne.symm

section IntegralLogInv

/-- Computing the integral of $(log x)^{-1}$-/

theorem hasDerivAt_log_inv (x : ‚Ñù) (hx : 1 < x): HasDerivAt (fun x ‚Ü¶ (Real.log x)‚Åª¬π) (- x‚Åª¬π * (Real.log x)‚Åª¬π^2) x := by
  have hlog :
    HasDerivAt Real.log (x‚Åª¬π) (x) := by
    convert Real.hasDerivAt_log (by linarith)
  convert (hasDerivAt_inv (Real.log_pos hx).ne.symm).comp x hlog using 1
  ring

theorem integrable_inv_mul_log_inv_sq (x : ‚Ñù) (hx : 1 < x) :
    MeasureTheory.IntegrableOn (fun t ‚Ü¶ t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2)  (Set.Ici x) := by
  rw [integrableOn_Ici_iff_integrableOn_Ioi]
  have (t : ‚Ñù) (ht : t ‚àà Set.Ioi x): HasDerivAt (fun x ‚Ü¶ - (Real.log x)‚Åª¬π) (t‚Åª¬π * (Real.log t)‚Åª¬π^2) t := by
    simp only [Set.mem_Ioi] at ht
    convert (hasDerivAt_log_inv t (hx.trans ht)).neg using 1
    ring

  apply MeasureTheory.integrableOn_Ioi_deriv_of_nonneg _ this (l := 0)
  ¬∑ simp only [Set.mem_Ioi, inv_pow]
    intro t hxt
    have : 0 < t := by linarith
    have := Real.log_pos (hx.trans hxt)
    positivity
  ¬∑ rw [‚Üê neg_zero]
    apply (tendsto_inv_atTop_zero.comp tendsto_log_atTop).neg
  ¬∑ refine ((continuousAt_log (by linarith)).continuousWithinAt).inv‚ÇÄ (Real.log_pos hx).ne.symm |>.neg

theorem setIntegral_Ioi_inv_mul_inv_log_sq (a : ‚Ñù) (ha : 1 < a) :
    ‚à´ t in Set.Ioi a, t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2 = (Real.log a)‚Åª¬π := by
  rw [show (Real.log a)‚Åª¬π = 0 - -(Real.log a)‚Åª¬π by ring]
  apply integral_Ioi_of_hasDerivAt_of_tendsto
  ¬∑ apply ContinuousAt.continuousWithinAt
    apply ContinuousAt.neg
    refine ContinuousAt.comp' ?_ ?_
    ¬∑ refine continuousAt_inv‚ÇÄ (Real.log_pos (by linarith)).ne.symm
    ¬∑ refine continuousAt_log (by linarith)
  ¬∑ intro x hx
    simp only [Set.mem_Ioi] at hx
    convert (hasDerivAt_log_inv _ _).neg using 1
    ¬∑ ring
    ¬∑ linarith
  ¬∑ rw [‚Üê integrableOn_Ici_iff_integrableOn_Ioi]
    apply integrable_inv_mul_log_inv_sq a ha
  ¬∑ rw [‚Üê neg_zero]
    apply Tendsto.neg
    apply Tendsto.comp tendsto_inv_atTop_zero tendsto_log_atTop

end IntegralLogInv

theorem mul_E‚ÇÅ_measurable : Measurable (fun a ‚Ü¶ a‚Åª¬π * (Real.log a)‚Åª¬π ^ 2 * E‚ÇÅ a) := by
  fun_prop

theorem integrableOn_Ici_fun_mul_E‚ÇÅ (t : ‚Ñù) (ht : 1 < t) :
    MeasureTheory.IntegrableOn (fun a ‚Ü¶ a‚Åª¬π * (Real.log a)‚Åª¬π ^ 2 * E‚ÇÅ a) (Set.Ici t) := by
  have isBigO : (fun a ‚Ü¶ a‚Åª¬π * (Real.log a)‚Åª¬π ^ 2 * E‚ÇÅ a) =O[ùìü (Set.Ici t)] (fun a ‚Ü¶ a‚Åª¬π * (Real.log a)‚Åª¬π ^ 2) := by
    simp_rw [mul_assoc]
    convert (isBigO_refl (fun a ‚Ü¶ a‚Åª¬π * (Real.log a)‚Åª¬π ^ 2) _).mul (E‚ÇÅ_isBigO_one ht) using 1
    ¬∑ ext; ring
    ¬∑ ext; ring
  have hmg : (ùìü (Set.Ici t)).IsMeasurablyGenerated := principal_isMeasurablyGenerated_iff.mpr
    measurableSet_Ici
  have := isBigO.integrableAtFilter (¬´Œº¬ª := volume) (mul_E‚ÇÅ_measurable.stronglyMeasurable.stronglyMeasurableAtFilter)
    (integrable_inv_mul_log_inv_sq t ht).integrableAtFilter
  rw [integrableAtFilter_principal_iff] at this
  exact this

theorem integral_mul_E‚ÇÅ_eq_const_sub_integral (x a : ‚Ñù) (ha : 1 < a) (hx : a ‚â§ x) :
    ‚à´ (t : ‚Ñù) in Set.Icc a x, t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2 * E‚ÇÅ t =
    (‚à´ (t : ‚Ñù) in Set.Ioi a, t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2 * E‚ÇÅ t) - ‚à´ (t : ‚Ñù) in Set.Ioi x, t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2 * E‚ÇÅ t := by
  rw [eq_sub_iff_add_eq, ‚Üê setIntegral_union]
  ¬∑ rw [‚Üê integral_Ici_eq_integral_Ioi]
    congr
    refine Set.Icc_union_Ioi_eq_Ici hx
  ¬∑ rw [Set.disjoint_iff]
    intro t
    simp
  ¬∑ measurability
  ¬∑ apply (integrableOn_Ici_fun_mul_E‚ÇÅ a ha).mono Set.Icc_subset_Ici_self le_rfl
  ¬∑ apply (integrableOn_Ici_fun_mul_E‚ÇÅ a ha).mono (Set.Ioi_subset_Ici hx) le_rfl

/-- Let `f : X x Y ‚Üí Z`. If as `y` tends to `l`, `f(x, y) = O(g(y))` uniformly on `s : Set X`
of finite measure, then the integral of `f` along `s` is `O(g(y))`. -/

theorem integral_mul_E‚ÇÅ_tail_isBigO (a : ‚Ñù) (ha : 1 < a) :
    (fun x ‚Ü¶ ‚à´ (t : ‚Ñù) in Set.Ioi x, t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2 * E‚ÇÅ t)
    =O[ùìü (Set.Ioi a)] (fun x ‚Ü¶ (Real.log x)‚Åª¬π) := by
  obtain ‚ü®C, hC_pos, hC‚ü© := (E‚ÇÅ_isBigO_one ha).exists_pos
  rw [isBigO_iff]
  use C
  simp only [isBigOWith_principal, Set.mem_Ici, norm_eq_abs, norm_one, mul_one] at hC
  simp only [norm_eq_abs, norm_inv, eventually_principal, Set.mem_Ioi]
  intro x hx
  calc
    _ ‚â§ ‚à´ t in Set.Ioi x, |t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2 * E‚ÇÅ t| := by
      apply abs_integral_le_integral_abs
    _ = ‚à´ t in Set.Ioi x, t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2 * |E‚ÇÅ t| := by
      apply setIntegral_congr_fun
      ¬∑ exact measurableSet_Ioi
      intro t ht
      simp only [Set.mem_Ioi] at ht
      simp_rw [abs_mul, abs_pow]
      rw [abs_of_nonneg, abs_of_nonneg]
      ¬∑ rw [inv_nonneg]
        apply Real.log_nonneg (by linarith)
      ¬∑ rw [inv_nonneg]
        linarith
    _ ‚â§ C * ‚à´ t in Set.Ioi x, t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2 := by
      simp_rw [‚Üê smul_eq_mul, ‚Üê integral_smul, smul_eq_mul]
      apply setIntegral_mono_on
      ¬∑ rw [‚Üê integrableOn_Ici_iff_integrableOn_Ioi]
        apply ((integrable_norm_iff _).mpr (integrableOn_Ici_fun_mul_E‚ÇÅ ..)).congr'
        ¬∑ apply Measurable.aestronglyMeasurable
          fun_prop
        ¬∑ simp only [inv_pow, norm_mul, norm_inv, norm_eq_abs, norm_pow, sq_abs, abs_abs,
          measurableSet_Ici, ae_restrict_eq, eventually_true]
        ¬∑ apply Measurable.aestronglyMeasurable
          fun_prop
        ¬∑ linarith
      ¬∑ rw [IntegrableOn]
        apply Integrable.const_mul
        rw [‚Üê IntegrableOn]
        apply (integrable_inv_mul_log_inv_sq x (ha.trans hx)).mono _ le_rfl
        exact Set.Ioi_subset_Ici_self
      ¬∑ exact measurableSet_Ioi
      intro t ht
      simp only [Set.mem_Ioi] at ht
      rw [mul_comm C]
      gcongr
      ¬∑ have : 0 ‚â§ t := by linarith
        have : 0 ‚â§ Real.log t := (Real.log_nonneg (by linarith))
        positivity
      ¬∑ apply hC _ (hx.trans ht).le
    _ = _ := by
      rw [abs_of_nonneg, setIntegral_Ioi_inv_mul_inv_log_sq ]
      ¬∑ exact ha.trans hx
      ¬∑ apply Real.log_nonneg (by linarith)

-- This was a pain point: I want uniform bounds to show integrability of E‚ÇÅ, since E‚ÇÅ is definitely not continuous
-- Perhaps one could argue, E‚ÇÅ is a step function plus a

theorem integrable_mul_E‚ÇÅ (a b : ‚Ñù) (ha : 1 < a) :
  MeasureTheory.Integrable (fun a ‚Ü¶ a‚Åª¬π * (Real.log a)‚Åª¬π ^ 2 * E‚ÇÅ a)
    (MeasureTheory.volume.restrict (Set.Icc a b)) := by
  rw [‚Üê IntegrableOn]
  apply (integrableOn_Ici_fun_mul_E‚ÇÅ a (by linarith)).mono Set.Icc_subset_Ici_self le_rfl

theorem hasDerivAt_loglog (x : ‚Ñù) (hx : 1 < x) : HasDerivAt (fun t ‚Ü¶ Real.log (Real.log t)) (x‚Åª¬π * (Real.log x)‚Åª¬π) x := by
  rw [‚Üê Function.comp_def, mul_comm]
  apply (hasDerivAt_log (Real.log_pos hx).ne.symm).comp
  apply hasDerivAt_log (by linarith)

theorem integral_inv_mul_invlog (a b : ‚Ñù) (ha : 1 < a) (hb : a ‚â§ b) :
    ‚à´ (t : ‚Ñù) in Set.Ioc a b, (t‚Åª¬π * (Real.log t)‚Åª¬π) =
      Real.log (Real.log b) - Real.log (Real.log a) := by
  have hsub : Set.uIcc (3 / 2) b ‚äÜ {0}·∂ú := by
    simp only [Set.subset_compl_singleton_iff]
    refine Set.not_mem_uIcc_of_lt (by norm_num) (by linarith)
  have htzero : b ‚â† 0 := by linarith
  have hlogzero : Real.log b ‚â† 0 := (Real.log_pos (by linarith)).ne.symm
  rw [‚Üê intervalIntegral.integral_of_le hb]
  apply intervalIntegral.integral_eq_sub_of_hasDerivAt
  ¬∑ intro x
    simpa only [hasDerivAt_loglog, Set.uIcc_of_le hb, Set.mem_Icc, and_imp] using
      fun h _ ‚Ü¶ hasDerivAt_loglog _ (by linarith)
  apply MeasureTheory.IntegrableOn.intervalIntegrable
  rw [Set.uIcc_of_le hb, MeasureTheory.IntegrableOn]
  exact extracted_1 a b ha

noncomputable def mertens‚ÇÇConst : ‚Ñù := (‚à´ (t : ‚Ñù) in Set.Ioi 2, t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2 * E‚ÇÅ t)
  - Real.log (Real.log 2) + 1

theorem mertens‚ÇÇConst_eq (a : ‚Ñù) (ha : 1 < a) (ha' : a ‚â§ 2) :
  mertens‚ÇÇConst = (‚à´ (t : ‚Ñù) in Set.Ioi a, t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2 * E‚ÇÅ t)
  - Real.log (Real.log a) + 1 := by
  have h‚ÇÄ : ‚à´ (t : ‚Ñù) in Set.Ioi a, t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2 * E‚ÇÅ t =
    (‚à´ (t : ‚Ñù) in Set.Ioc a 2, t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2 * E‚ÇÅ t) +
      ‚à´ (t : ‚Ñù) in Set.Ioi 2, t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2 * E‚ÇÅ t := by
    rw [‚Üê setIntegral_union]
    ¬∑ rw [Set.Ioc_union_Ioi_eq_Ioi ha']
    ¬∑ exact Set.Ioc_disjoint_Ioi_same
    ¬∑ exact measurableSet_Ioi
    ¬∑ apply (integrableOn_Ici_fun_mul_E‚ÇÅ a ha).mono _ le_rfl
      intro x
      simp +contextual only [Set.mem_Ioc, Set.mem_Ici, LT.lt.le, implies_true]
    ¬∑ apply (integrableOn_Ici_fun_mul_E‚ÇÅ a ha).mono _ le_rfl
      intro x
      simp only [Set.mem_Ioi, Set.mem_Ici]
      intro hx
      apply (ha'.trans hx.le)
  have h‚ÇÅ := calc
    ‚à´ (t : ‚Ñù) in Set.Ioc a 2, t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2 * E‚ÇÅ t = - ‚à´ (t : ‚Ñù) in Set.Ioc a 2, t‚Åª¬π * (Real.log t)‚Åª¬π := by
      rw [‚Üê integral_neg]
      simp_rw [integral_Ioc_eq_integral_Ioo]
      apply integral_congr_ae
      filter_upwards [ae_restrict_mem (by measurability)] with t ht
      simp only [Set.mem_Ioo] at ht
      rw [E‚ÇÅ_of_lt_two t (by linarith) ht.2]
      have : Real.log t ‚â† 0 := (Real.log_pos (by linarith)).ne.symm
      have : t ‚â† 0 := by linarith
      field_simp
      ring
    _ = Real.log (Real.log a) - Real.log (Real.log 2) := by
      rw [integral_inv_mul_invlog a 2 ha ha']
      ring
  rw [h‚ÇÄ, h‚ÇÅ, mertens‚ÇÇConst]
  ring

/-
Notable pain points: positivity / nonnegativity and log, proving Real.log x ‚â† 0 is annoying. Automation
like `positivity` and `field_simp` can't work with this very well.
-/


theorem mertens_second (a : ‚Ñù) (ha : 1 < a) (ha' : a < 2)
: (fun t : ‚Ñù ‚Ü¶ (‚àë p ‚àà primesBelow (‚åät‚åã‚Çä+1), 1 / (p : ‚Ñù)) - (Real.log (Real.log t) + mertens‚ÇÇConst))
    =O[ùìü (Set.Ioi a)] (fun n ‚Ü¶ (Real.log n)‚Åª¬π) := by
  have ha_pos : 0 < a := by linarith
  let œï (x : ‚Ñù) : ‚Ñù := (Real.log x)‚Åª¬π
  let c (n : ‚Ñï) : ‚Ñù := if n.Prime then Real.log n / n else 0
  have h' (b : ‚Ñù) : ContinuousOn (fun x:‚Ñù ‚Ü¶ - x‚Åª¬π * (Real.log x)‚Åª¬π^2) (Set.Icc a b) := by
    intro x
    simp only [Set.mem_Icc, inv_pow, neg_mul, and_imp]
    intro hx _
    apply ContinuousAt.continuousWithinAt
    have : x ‚â† 0 := by linarith
    apply (continuousAt_inv‚ÇÄ this).mul ((continuousAt_inv‚ÇÄ _).comp ((continuousAt_id.log this).pow 2)) |>.neg
    simp only [id_eq, ne_eq, OfNat.ofNat_ne_zero, not_false_eq_true, pow_eq_zero_iff, log_eq_zero,
      not_or]
    refine ‚ü®this, ?_, ?_‚ü© <;> linarith
  have hœï := hasDerivAt_log_inv
  have hfloor : ‚åä(a : ‚Ñù)‚åã‚Çä = 1 := by
    rw [Nat.floor_eq_iff (by linarith)]
    norm_num
    constructor <;> linarith
  have (b : ‚Ñù) (hb : a ‚â§ b) :
      ‚àë k ‚àà Finset.Ioc 1 ‚åäb‚åã‚Çä, œï k * c k = œï b * ‚àë k ‚àà Finset.Icc 0 ‚åäb‚åã‚Çä, c k - œï a * 0 -
        ‚à´ t in Set.Ioc a b, deriv œï t * ‚àë k ‚àà Finset.Icc 0 ‚åät‚åã‚Çä, c k := by
    convert sum_mul_eq_sub_sub_integral_mul c ?_ hb ?_ ?_
    ¬∑ rw [hfloor]
    ¬∑ apply (sum_eq_zero ..).symm
      simp only [hfloor, mem_Icc, _root_.zero_le, true_and, ite_eq_right_iff, div_eq_zero_iff,
        log_eq_zero, cast_eq_zero, cast_eq_one, c]
      omega
    ¬∑ exact ha_pos.le
    ¬∑ simp only [Set.mem_Icc, and_imp, c]
      intro t ht _
      exact (hœï t (by linarith)).differentiableAt
    ¬∑ apply MeasureTheory.LocallyIntegrableOn.integrableOn_isCompact
      ¬∑ apply ContinuousOn.locallyIntegrableOn _ (by measurability)
        apply (h' b).congr
        intro x
        simp only [Set.mem_Icc, inv_pow, neg_mul, and_imp, c]
        intro hx _
        rw [(hœï x (by linarith)).deriv]
        ring
      ¬∑ exact isCompact_Icc
  simp only [mul_zero, sub_zero, œï, c, ‚Üê sum_filter, Icc_filter_prime, E‚ÇÅ_eq_add] at this

  have eqn (t : ‚Ñù) (ht : a ‚â§ t) :=
    have hlogt : Real.log t ‚â† 0 := (Real.log_pos (ha.trans_le ht)).ne.symm
    calc
    ‚àë p ‚àà (‚åät‚åã‚Çä + 1).primesBelow, 1 / ‚Üëp = (‚àë x ‚àà Ioc 1 ‚åät‚åã‚Çä, (Real.log ‚Üëx)‚Åª¬π * if Nat.Prime x then Real.log ‚Üëx / ‚Üëx else 0) := by
      simp_rw [mul_ite, mul_zero, ‚Üê sum_filter]
      apply sum_congr
      ¬∑ ext p
        simp only [mem_primesBelow, mem_filter, mem_Ioc, and_congr_left_iff, œï, c]
        intro hp
        refine ‚ü®fun hpt ‚Ü¶ ‚ü®hp.one_lt, (by omega)‚ü©, fun ‚ü®_, hpt‚ü© ‚Ü¶ (by omega)‚ü©
      simp only [mem_filter, mem_Ioc, one_div, and_imp]
      intro x hx _ _
      rw [div_eq_mul_inv, ‚Üê mul_assoc, inv_mul_cancel‚ÇÄ, one_mul]
      apply (Real.log_pos (mod_cast hx)).ne.symm
    _ =
     (1 + (Real.log t)‚Åª¬π * E‚ÇÅ t) -
        ‚à´ (t : ‚Ñù) in Set.Ioc a t, deriv (fun x ‚Ü¶ (Real.log x)‚Åª¬π) t * (Real.log t + E‚ÇÅ t) := by
      convert this t ht using 2
      rw [mul_add, inv_mul_cancel‚ÇÄ hlogt]
    _ =
     (1 + (Real.log t)‚Åª¬π * E‚ÇÅ t) -
        ‚à´ (t : ‚Ñù) in Set.Ioc a t, (- t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2) * (Real.log t + E‚ÇÅ t) := by
      congr 1
      apply MeasureTheory.integral_congr_ae
      filter_upwards [MeasureTheory.ae_restrict_mem (by measurability)]
      intro x
      simp only [Set.mem_Ioc, add_sub_cancel, inv_pow, neg_mul, and_imp]
      intro hx _
      rw [(hœï x (by linarith)).deriv]
      ring
    _ =
     (1 + (Real.log t)‚Åª¬π * E‚ÇÅ t) +
        (‚à´ (t : ‚Ñù) in Set.Icc a t, t‚Åª¬π * (Real.log t)‚Åª¬π + t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2 * E‚ÇÅ t) := by
      simp_rw [‚Üê MeasureTheory.integral_Icc_eq_integral_Ioc, neg_mul, MeasureTheory.integral_neg, sub_neg_eq_add, mul_add]
      congr 1
      apply MeasureTheory.integral_congr_ae
      filter_upwards [MeasureTheory.ae_restrict_mem (by measurability)]
      intro x
      simp only [Set.mem_Icc, add_left_inj, and_imp]
      intro hx _
      have := (Real.log_pos (by linarith)).ne.symm
      field_simp [show x ‚â† 0 by linarith]
      ring
    _ =
     (1 + (Real.log t)‚Åª¬π * E‚ÇÅ t) +
        ((‚à´ (t : ‚Ñù) in Set.Icc a t, t‚Åª¬π * (Real.log t)‚Åª¬π) +
          ‚à´ (t : ‚Ñù) in Set.Icc a t, t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2 * E‚ÇÅ t) := by
      rw [MeasureTheory.integral_add (extracted_1 _ _ (by linarith)) (integrable_mul_E‚ÇÅ _ _ (by linarith))]
    _ =
        Real.log (Real.log t) + mertens‚ÇÇConst + (Real.log t)‚Åª¬π * E‚ÇÅ t -
          ‚à´ (t : ‚Ñù) in Set.Ioi t, t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2 * E‚ÇÅ t := by
      rw [mertens‚ÇÇConst_eq a ha ha'.le, integral_Icc_eq_integral_Ioc, integral_inv_mul_invlog _ _ ha ht,
        integral_mul_E‚ÇÅ_eq_const_sub_integral _ _ ha ht]
      ring

  apply Asymptotics.IsBigO.congr'  (f‚ÇÅ := fun t ‚Ü¶ (Real.log t)‚Åª¬π * E‚ÇÅ t -
    ‚à´ (t : ‚Ñù) in Set.Ioi t, t‚Åª¬π * (Real.log t)‚Åª¬π ^ 2 * E‚ÇÅ t) (g‚ÇÅ := fun t ‚Ü¶ (Real.log t)‚Åª¬π)
      (g‚ÇÇ := fun t ‚Ü¶ (Real.log t)‚Åª¬π)
  ¬∑ apply Asymptotics.IsBigO.sub
    ¬∑ apply (Asymptotics.isBigO_refl (fun t ‚Ü¶ (Real.log t)‚Åª¬π) _).mul (E‚ÇÅ_isBigO_one ha) |>.mono _ |>.congr_right
      ¬∑ simp only [mul_one, implies_true]
      ¬∑ simp only [le_principal_iff, mem_principal, Set.Ioi_subset_Ici_iff, le_refl]
    ¬∑ exact integral_mul_E‚ÇÅ_tail_isBigO a ha
  ¬∑ simp only [eventuallyEq_principal]
    intro t ht
    simp only [Set.mem_Ioi] at ht
    simp only
    rw [eqn t ht.le]
    ring
  ¬∑ exact fun ‚¶Éa_1‚¶Ñ ‚Ü¶ congrFun rfl

end MertensSecond

-- #print axioms mertens_second



section MertensThird

theorem hasSum_pow_div_add_two {x : ‚Ñù} (hx : |x| < 1) : HasSum (fun n : ‚Ñï ‚Ü¶ x ^ (n+2) / (n+2)) (-Real.log (1-x) - x) := by
  norm_cast
  erw [hasSum_nat_add_iff (f := fun n ‚Ü¶ x ^ (n+1) / ‚Üë(n+1)) 1]
  simp only [cast_add, cast_one, range_one, sum_singleton, zero_add, pow_one, CharP.cast_eq_zero,
    div_one]
  convert Real.hasSum_pow_div_log_of_abs_lt_one hx using 1
  ring

theorem sum_inv_sub_sum_log (n : ‚Ñï)  :
  ‚àë p in primesBelow (n+1), -Real.log (1 - (p:‚Ñù)‚Åª¬π) - ‚àë p in primesBelow (n + 1), (p:‚Ñù)‚Åª¬π =
    ‚àë p in primesBelow (n+1), ‚àë' n : ‚Ñï, (p:‚Ñù)‚Åª¬π^(n+2) / (n+2)  := by
  rw [‚Üê sum_sub_distrib]
  apply sum_congr rfl
  intro p hp
  simp only [mem_primesBelow] at hp
  rw [(hasSum_pow_div_add_two _).tsum_eq]
  rw [abs_inv, inv_lt_one_iff‚ÇÄ]
  simp only [abs_cast, cast_nonpos, one_lt_cast, hp.2.one_lt, or_true]


theorem tsum_inv_pow_div_id_le (p : ‚Ñï) (hp : 1 < p)  :
  ‚àë' n : ‚Ñï, (p:‚Ñù)‚Åª¬π^(n+2) / (n+2) ‚â§ (p * (p-1):‚Ñù)‚Åª¬π :=
  have geom : HasSum (fun n : ‚Ñï ‚Ü¶ (p : ‚Ñù)‚Åª¬π ^ n) ((1 - (p:‚Ñù)‚Åª¬π)‚Åª¬π) := by
    apply hasSum_geometric_of_abs_lt_one
    rw [abs_inv, inv_lt_one_iff‚ÇÄ]
    simp [hp]
  have summable : Summable fun i ‚Ü¶ (p:‚Ñù)‚Åª¬π ^ (i + 2) := by
    rw [summable_nat_add_iff]
    exact geom.summable
  calc
  _ ‚â§ ‚àë' n : ‚Ñï, (p:‚Ñù)‚Åª¬π^(n+2) := by
    apply tsum_le_tsum
    ¬∑ intro n
      apply _root_.div_le_self
      ¬∑ positivity
      ¬∑ norm_cast
        omega
    ¬∑ apply (hasSum_pow_div_add_two _).summable
      ¬∑ simp [abs_inv, hp]
        simp [inv_lt_one_iff‚ÇÄ, hp]
    ¬∑ apply summable
  _ = (p * (p - 1):‚Ñù)‚Åª¬π  := by
    have : HasSum (fun n : ‚Ñï ‚Ü¶ (p : ‚Ñù)‚Åª¬π^(n+2)) ((1-(p:‚Ñù)‚Åª¬π)‚Åª¬π*(p:‚Ñù)‚Åª¬π^2) := by
      simp_rw [pow_add, ]
      rw [hasSum_mul_right_iff (by positivity)]
      ¬∑ exact geom
    convert this.tsum_eq using 1
    rw [inv_pow, ‚Üê mul_inv]
    congr 1
    field_simp [show (p : ‚Ñù) ‚â† 0 by positivity]
    ring

theorem hassum_aux :
    HasSum (fun n : ‚Ñï ‚Ü¶ (n * (n-1):‚Ñù)‚Åª¬π) sorry := by
  sorry

theorem summable_thing :
  Summable (fun p : ‚Ñï ‚Ü¶ ‚àë' n : ‚Ñï, (p:‚Ñù)‚Åª¬π^(n+2) / (n+2)) := by

  sorry

theorem summable_thing' :
  Summable (fun p : Primes ‚Ü¶ ‚àë' n : ‚Ñï, (p:‚Ñù)‚Åª¬π^(n+2) / (n+2)) := by
  sorry

example (k : ‚Ñï):
    ‚àë p in primesBelow (k+1), ‚àë' n : ‚Ñï, (p:‚Ñù)‚Åª¬π^(n+2) / (n+2) =
      ‚àë' p : Primes, ‚àë' n : ‚Ñï, (p:‚Ñù)‚Åª¬π^(n+2) / (n+2)
      - ‚àë' p : Primes, if p ‚â§ k then ‚àë' n : ‚Ñï, (p:‚Ñù)‚Åª¬π^(n+2) / (n+2) else 0:= by
  rw [‚Üê tsum_sub]
  ¬∑ sorry
  ¬∑ sorry
  sorry

def mertens‚ÇÉConst : ‚Ñù := sorry

theorem mertens_third_log_aux (a : ‚Ñù) (ha : 1 < a):
  (fun x : ‚Ñù ‚Ü¶ ‚àë p in primesBelow (‚åäx‚åã‚Çä + 1), -Real.log (1 - (p:‚Ñù)‚Åª¬π) -
    (Real.log (Real.log x) - mertens‚ÇÉConst))
    =O[ùìü (Set.Ioi a)] (fun x ‚Ü¶ (Real.log x)‚Åª¬π) := by
  sorry

theorem mertens_third_log (a : ‚Ñù) (ha : 1 < a):
  (fun x : ‚Ñù ‚Ü¶ ‚àë p in primesBelow (‚åäx‚åã‚Çä + 1), Real.log (1 - (p:‚Ñù)‚Åª¬π) -
    (-Real.log (Real.log x) + mertens‚ÇÉConst))
    =O[ùìü (Set.Ioi a)] (fun x ‚Ü¶ (Real.log x)‚Åª¬π) := by
  convert (mertens_third_log_aux a ha).neg_left using 2 with x
  simp only [sum_neg_distrib, neg_sub, sub_neg_eq_add]
  ring



end MertensThird
