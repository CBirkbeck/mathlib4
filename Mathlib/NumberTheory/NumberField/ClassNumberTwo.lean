/-
Copyright (c) 2024 Julian Berman. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Julian Berman
-/
import Mathlib.NumberTheory.NumberField.ClassNumber

/-!
# Characterizations for a ring of algebraic numbers having class number at most two
-/

open scoped BigOperators Classical NumberField
open Multiset (card)

class HalfFactorialMonoid (Œ± : Type*) [CommMonoid Œ±] : Prop where
  card_unique
    (f g : Multiset Œ±)
    (hf : ‚àÄ x ‚àà f, Irreducible x)
    (hg : ‚àÄ x ‚àà g, Irreducible x)
    (h : f.prod = g.prod) :
      Multiset.card f = Multiset.card g

instance {Œ± : Type*} [CancelCommMonoidWithZero Œ±] [UniqueFactorizationMonoid Œ±] :
  HalfFactorialMonoid Œ± where
    card_unique := fun _ _ hf hg h ‚Ü¶
      Multiset.card_eq_card_of_rel <|
        UniqueFactorizationMonoid.factors_unique hf hg <|
          Associates.mk_eq_mk_iff_associated.mp <|
            congrArg Associates.mk h

section

variable {R : Type*} [CommRing R] [IsDomain R] [IsDedekindDomain R] [Fintype (ClassGroup R)]

theorem exists_prime (g : ClassGroup R) :
  ‚àÉ (p : nonZeroDivisors (Ideal R)), ClassGroup.mk0 p = g ‚àß p.val.IsPrime := sorry

lemma exists_pair_of_two_lt_card {T : Type*} {a : T} [Fintype T] (h : 2 < Fintype.card T) : ‚àÉ b c : T, a ‚â† b ‚àß a ‚â† c ‚àß b ‚â† c := by
  have h : 1 < Fintype.card {x // x ‚â† a} := by
    simp_all only [ne_eq, Fintype.card_subtype_compl, Fintype.card_ofSubsingleton]
    omega
  have ‚ü®‚ü®b, hba‚ü©, c, hbc‚ü© := Fintype.exists_pair_of_one_lt_card h
  exact ‚ü®b, c, hba.symm, c.property.symm, by aesop‚ü©

-- two_lt_card_iff
example {T : Type} [Fintype T] (h : 2 < Fintype.card T) : ‚àÉ a b c : T, a ‚â† b ‚àß a ‚â† c ‚àß b ‚â† c := by
  have nonempty := Fintype.card_pos_iff.mp <| Nat.zero_lt_of_lt h
  exact ‚ü®Classical.choice nonempty, exists_pair_of_two_lt_card h‚ü©

lemma one_lt_orderOf_iff {G : Type*} [Group G] {g : G} {h : IsOfFinOrder g} : 1 < orderOf g ‚Üî g ‚â† 1 where
  mp := fun h ‚Ü¶ orderOf_eq_one_iff.not.mp <| Nat.ne_of_lt' h
  mpr := fun hne ‚Ü¶ Nat.lt_of_le_of_ne h.orderOf_pos <|
    fun a => orderOf_eq_one_iff.not.mpr hne a.symm

example : 1 < n ‚Üí n ‚â† 2 ‚Üí 2 < n := fun a b => Nat.lt_of_le_of_ne a b.symm

theorem exists_prod_of_two_lt_card_classGroup (hcard : 2 < Fintype.card (ClassGroup R)) :
  ‚àÉ Œ±‚ÇÅ Œ±‚ÇÇ Œ≤‚ÇÅ Œ≤‚ÇÇ Œ≤‚ÇÉ : R,
    Irreducible Œ±‚ÇÅ
    ‚àß Irreducible Œ±‚ÇÇ
    ‚àß Irreducible Œ≤‚ÇÅ
    ‚àß Irreducible Œ≤‚ÇÇ
    ‚àß Irreducible Œ≤‚ÇÉ
    ‚àß Œ±‚ÇÅ * Œ±‚ÇÇ = Œ≤‚ÇÅ * Œ≤‚ÇÇ * Œ≤‚ÇÉ := by
      by_cases horder : ‚àÄ {g : ClassGroup R}, 1 ‚â† g ‚Üí orderOf g = 2
      ¬∑ have ‚ü®g‚ÇÅ, g‚ÇÇ, hg‚ÇÅ, hg‚ÇÇ, hg‚ÇÅ‚ÇÇ‚ü© : ‚àÉ g‚ÇÅ g‚ÇÇ : ClassGroup R, 1 ‚â† g‚ÇÅ ‚àß 1 ‚â† g‚ÇÇ ‚àß g‚ÇÅ ‚â† g‚ÇÇ :=
          exists_pair_of_two_lt_card hcard
        set g‚ÇÉ := g‚ÇÅ * g‚ÇÇ
        have g‚ÇÇ‚ÇÉ : g‚ÇÇ ‚â† g‚ÇÉ := (mul_left_ne_self.mpr hg‚ÇÅ.symm).symm
        have g‚ÇÅ‚ÇÉ : g‚ÇÅ ‚â† g‚ÇÉ := self_ne_mul_right.mpr hg‚ÇÇ.symm
        have g‚ÇÅ‚Çí : orderOf g‚ÇÅ = 2 := horder hg‚ÇÅ
        have g‚ÇÇ‚Çí : orderOf g‚ÇÇ = 2 := horder hg‚ÇÇ
        have ‚ü®p‚ÇÅ, hgp‚ÇÅ, hp‚ÇÅ‚ü© := exists_prime g‚ÇÅ
        have ‚ü®p‚ÇÇ, hgp‚ÇÇ, hp‚ÇÇ‚ü© := exists_prime g‚ÇÇ
        have ‚ü®p‚ÇÉ, hgp‚ÇÉ, hp‚ÇÉ‚ü© := exists_prime g‚ÇÉ
        have ‚ü®Œ≤‚ÇÅ, hŒ≤‚ÇÅ‚Çõ, hŒ≤‚ÇÅ‚ü© : ‚àÉ Œ≤‚ÇÅ : R, p‚ÇÅ * p‚ÇÅ = Ideal.span {Œ≤‚ÇÅ} ‚àß Irreducible Œ≤‚ÇÅ := by
          refine ‚ü®?_, ?_, ?_‚ü©
          sorry
          sorry
          sorry
        have ‚ü®Œ≤‚ÇÇ, hŒ≤‚ÇÇ‚Çõ, hŒ≤‚ÇÇ‚ü© : ‚àÉ Œ≤‚ÇÇ : R, p‚ÇÇ * p‚ÇÇ = Ideal.span {Œ≤‚ÇÇ} ‚àß Irreducible Œ≤‚ÇÇ := by sorry
        have ‚ü®Œ≤‚ÇÉ, hŒ≤‚ÇÉ‚Çõ, hŒ≤‚ÇÉ‚ü© : ‚àÉ Œ≤‚ÇÉ : R, p‚ÇÉ * p‚ÇÉ = Ideal.span {Œ≤‚ÇÉ} ‚àß Irreducible Œ≤‚ÇÉ := by sorry
        have ‚ü®Œ±, hŒ±‚Çõ, hŒ±‚ü© : ‚àÉ Œ± : R, p‚ÇÅ * p‚ÇÇ * p‚ÇÉ = Ideal.span {Œ±} ‚àß Irreducible Œ± := by sorry
        refine ‚ü®Œ±, Œ±, Œ≤‚ÇÅ, Œ≤‚ÇÇ, Œ≤‚ÇÉ, hŒ±, hŒ±, hŒ≤‚ÇÅ, hŒ≤‚ÇÇ, hŒ≤‚ÇÉ, ?_‚ü©
        sorry
      ¬∑ push_neg at horder
        rcases horder with ‚ü®g, hne, hg‚ü©
        have horder' := (Iff.mpr <| @one_lt_orderOf_iff _ _ _ (isOfFinOrder_of_finite g)) hne.symm
        have horder : 2 < orderOf g := Nat.lt_of_le_of_ne horder' hg.symm
        clear horder'
        set n := orderOf g
        have ‚ü®p‚ÇÅ, hgp‚ÇÅ, hp‚ÇÅ‚ü© := exists_prime g
        have ‚ü®p‚ÇÇ, hgp‚ÇÇ, hp‚ÇÇ‚ü© := exists_prime <| g ^ 2
        have ‚ü®p‚ÇÉ, hgp‚ÇÉ, hp‚ÇÉ‚ü© := exists_prime <| g ^ (n - 2)
        have ‚ü®p‚ÇÑ, hgp‚ÇÑ, hp‚ÇÑ‚ü© := exists_prime <| g ^ (n - 1)
        have ‚ü®Œ±, hŒ±, hŒ±·µ¢‚ü© : ‚àÉ r : R, Ideal.span {r} = p‚ÇÅ * p‚ÇÑ ‚àß Irreducible r := by
          have hprincipal : (p‚ÇÅ * p‚ÇÑ : Ideal R).IsPrincipal := by sorry
          obtain ‚ü®Œ±, h''‚ü© := hprincipal.principal
          refine ‚ü®Œ±, by simp only [h'', Ideal.submodule_span_eq], by sorry‚ü©

        have ‚ü®Œ≤, hŒ≤, hŒ≤·µ¢‚ü© : ‚àÉ r : R, Ideal.span {r} = p‚ÇÅ ^ 2 * p‚ÇÉ ‚àß Irreducible r := by sorry
        have ‚ü®Œ≥, hŒ≥, hŒ≥·µ¢‚ü© : ‚àÉ r : R, Ideal.span {r} = p‚ÇÇ * p‚ÇÉ ‚àß Irreducible r := by sorry
        have ‚ü®Œ¥, hŒ¥, hŒ¥·µ¢‚ü© : ‚àÉ r : R, Ideal.span {r} = p‚ÇÇ * p‚ÇÑ ^ 2 ‚àß Irreducible r := by sorry
        use Œ≤, Œ¥, Œ±, Œ±, Œ≥, hŒ≤·µ¢, hŒ¥·µ¢, hŒ±·µ¢, hŒ±·µ¢, hŒ≥·µ¢
        have : (p‚ÇÅ ^ 2 * p‚ÇÉ) * (p‚ÇÑ ^ 2 * p‚ÇÇ) = (p‚ÇÅ * p‚ÇÑ) * (p‚ÇÅ * p‚ÇÑ) * (p‚ÇÇ * p‚ÇÉ) := by sorry
        sorry


/-- The class number of a half-factorial domain is `2`. -/
theorem card_classGroup_le_two [HalfFactorialMonoid R] : Fintype.card (ClassGroup R) ‚â§ 2 := by
  by_contra! h
  have ‚ü®Œ±‚ÇÅ, Œ±‚ÇÇ, Œ≤‚ÇÅ, Œ≤‚ÇÇ, Œ≤‚ÇÉ, _, _, _, _, _, hab‚ü© := exists_prod_of_two_lt_card_classGroup h
  let a : Multiset R := {Œ±‚ÇÅ, Œ±‚ÇÇ}
  let b : Multiset R := {Œ≤‚ÇÅ, Œ≤‚ÇÇ, Œ≤‚ÇÉ}
  have ha : ‚àÄ i ‚àà a, Irreducible i := by simp_all [a]
  have hb : ‚àÄ i ‚àà b, Irreducible i := by simp_all [b]
  have := HalfFactorialMonoid.card_unique _ _ ha hb <| by simp_all [a, b, hab, mul_assoc]
  exact Nat.ne_of_beq_eq_false (by rfl) this

theorem nonzero_ne_zero (a : R) (ha : a ‚â† 0) : Ideal.span ({a} : Set R) ‚â† 0 := by
  simp_all only [ne_eq, Submodule.zero_eq_bot, Ideal.span_singleton_eq_bot, not_false_eq_true]

/-- The class number is `‚â§ 2` iff the ring of integers is a half-factorial domain. -/
theorem card_classGroup_le_two_iff : Fintype.card (ClassGroup R) ‚â§ 2 ‚Üî HalfFactorialMonoid R := by
  refine ‚ü®fun _ ‚Ü¶ ?_, fun _ ‚Ü¶ card_classGroup_le_two‚ü©
  -- it suffices to prove this direction for card = 2, because otherwise R is a UFD
  by_cases hcard : Fintype.card (ClassGroup R) = 2
  ¬∑ refine ‚ü®fun a b ha hb heq ‚Ü¶ ?_‚ü©
    by_cases nonzero : a.prod = 0
    ¬∑ exfalso
      exact not_irreducible_zero <| ha 0 <| (a.prod_eq_zero_iff).mp nonzero
    ¬∑ let X := Ideal.span ({a.prod} : Set R)
      have ‚ü®F, hprime, hprod‚ü© : ‚àÉ (F : Multiset (Ideal R)), (‚àÄ I ‚àà F, I.IsPrime) ‚àß F.prod = X := by
        have ‚ü®F', hprime', _, hu‚ü© := UniqueFactorizationMonoid.exists_prime_factors X <| nonzero_ne_zero a.prod nonzero
        exact ‚ü®F', fun I a ‚Ü¶ Ideal.isPrime_of_prime <| hprime' I a, by simp [‚Üê hu, units_eq_one]‚ü©
      set Q : Multiset (Ideal R) := F.filter Submodule.IsPrincipal
      set P := F - Q
      have : Q.prod * P.prod = X := by
        simp only [P, Q, Multiset.sub_filter_eq_filter_not, Multiset.prod_filter_mul_prod_filter_not, hprod]
      have hcard : ‚àÄ (f : Multiset R), (‚àÄ i ‚àà f, Irreducible i) ‚Üí f.prod = a.prod ‚Üí card f = card Q + (card P / 2) := by
        intro f hf hfprod
        sorry
      exact hcard a ha rfl |>.trans (hcard b hb heq.symm).symm
  ¬∑ have : IsPrincipalIdealRing R := card_classGroup_eq_one_iff.mp <| by
      have : 0 < Fintype.card (ClassGroup R) := Fintype.card_pos
      interval_cases (Fintype.card (ClassGroup R)) <;> aesop
    infer_instance
end

variable {K : Type*} [Field K] [NumberField K]

namespace NumberField

/-- The class number of a number field is `2` iff the ring of integers is a half factorial
    domain. -/
theorem classNumber_eq_two_iff : classNumber K ‚â§ 2 ‚Üî HalfFactorialMonoid (ùìû K) :=
  card_classGroup_le_two_iff

variable {Œ± Œ≤ : ùìû K}

end NumberField
