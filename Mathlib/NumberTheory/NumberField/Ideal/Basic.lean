/-
Copyright (c) 2025 Xavier Roblot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Xavier Roblot
-/
import Mathlib.NumberTheory.NumberField.Units.Basic
import Mathlib.RingTheory.Ideal.Norm.AbsNorm

import Mathlib.Sandbox

/-!
# Basic results on integral ideals of a number field

## Main definitions and results

*
-/

section torsionMapQuot

open Ideal NumberField Units

variable {K : Type*} [Field K] (I : Ideal (ùìû K))

def Ideal.torsionMapQuot : (Units.torsion K) ‚Üí* ((ùìû K) ‚ß∏ I)À£ :=
  (Units.map (Ideal.Quotient.mk I).toMonoidHom).restrict (torsion K)

@[simp]
theorem Ideal.torsionMapQuot_apply {x : (ùìû K)À£} (hx : x ‚àà torsion K) :
    torsionMapQuot I ‚ü®x, hx‚ü© = Ideal.Quotient.mk I x := rfl

variable [NumberField K]

theorem Ideal.torsionMapQuot_injective (hI‚ÇÅ : absNorm I ‚â† 1)
    (hI‚ÇÇ : (absNorm I).Coprime (torsionOrder K)) :
    Function.Injective (torsionMapQuot I) := by
  refine (injective_iff_map_eq_one _).mpr fun ‚ü®Œ∂, hŒ∂‚ü© h ‚Ü¶ ?_
  rw [‚Üê rootsOfUnity_eq_torsion] at hŒ∂
  obtain ‚ü®t, ht‚ÇÄ, ht, hŒ∂‚ü© := isPrimitiveRoot_of_mem_rootsOfUnity hŒ∂
  by_cases ht' : 2 ‚â§ t
  ¬∑ exfalso
    rw [Units.ext_iff, torsionMapQuot_apply, Units.val_one, show 1 = Quotient.mk I 1 by rfl,
      Quotient.eq] at h
    obtain ‚ü®p, hp, h‚ÇÅ‚ü© := Nat.exists_prime_and_dvd hI‚ÇÅ
    have h‚ÇÇ : (p : ‚Ñ§) ‚à£ (Algebra.norm ‚Ñ§) ((Œ∂ : ùìû K) - 1) :=
      Int.dvd_trans (Int.natCast_dvd_natCast.mpr h‚ÇÅ) (absNorm_dvd_norm_of_mem h)
    
#exit


    have h‚ÇÅ := Ideal.absNorm_dvd_norm_of_mem h

    have h‚ÇÉ : (p : ‚Ñ§) ‚à£ (Algebra.norm ‚Ñ§) ((Œ∂.val : ùìû K) - 1) := by
      rw [‚Üê Int.natCast_dvd_natCast] at h‚ÇÇ
      exact Int.dvd_trans h‚ÇÇ h‚ÇÅ
    have : Fact (Nat.Prime p) := { out := hp }
    have h‚ÇÑ := IsPrimitiveRoot.prime_dvd_of_dvd_norm_sub_one (K := K) ht' (by simpa using hŒ∂) h‚ÇÉ
    have h‚ÇÖ : p ‚à£ n := by exact dvd_trans h‚ÇÑ ht
    have h‚ÇÜ := Nat.dvd_gcd h‚ÇÇ h‚ÇÖ
    rw [hI‚ÇÇ] at h‚ÇÜ
    exact (hp.not_dvd_one h‚ÇÜ).elim
  ¬∑ have : t = 1 := le_antisymm (Nat.le_of_lt_succ (not_le.mp ht')) (Nat.pos_of_ne_zero ht‚ÇÄ)
    simpa [this] using hŒ∂
