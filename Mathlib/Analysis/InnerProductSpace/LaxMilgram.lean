/-
Copyright (c) 2022 Daniel Roca Gonz√°lez. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Daniel Roca Gonz√°lez
-/
import Mathlib.Analysis.InnerProductSpace.Projection
import Mathlib.Analysis.InnerProductSpace.Dual
import Mathlib.Analysis.NormedSpace.Banach
import Mathlib.Analysis.NormedSpace.OperatorNorm
import Mathlib.Topology.MetricSpace.Antilipschitz

#align_import analysis.inner_product_space.lax_milgram from "leanprover-community/mathlib"@"46b633fd842bef9469441c0209906f6dddd2b4f5"

/-!
# The Lax-Milgram Theorem

We consider a Hilbert space `V` over `‚Ñù`
equipped with a bounded bilinear form `B : V ‚ÜíL[‚Ñù] V ‚ÜíL[‚Ñù] ‚Ñù`.

Recall that a bilinear form `B : V ‚ÜíL[‚Ñù] V ‚ÜíL[‚Ñù] ‚Ñù` is *coercive*
iff `‚àÉ C, (0 < C) ‚àß ‚àÄ u, C * ‚Äñu‚Äñ * ‚Äñu‚Äñ ‚â§ B u u`.
Under the hypothesis that `B` is coercive we prove the Lax-Milgram theorem:
that is, the map `InnerProductSpace.continuousLinearMapOfBilin` from
`Analysis.InnerProductSpace.Dual` can be upgraded to a continuous equivalence
`IsCoercive.continuousLinearEquivOfBilin : V ‚âÉL[‚Ñù] V`.

## References

* We follow the notes of Peter Howard's Spring 2020 *M612: Partial Differential Equations* lecture,
  see[howard]

## Tags

dual, Lax-Milgram
-/


noncomputable section

open IsROrC LinearMap ContinuousLinearMap InnerProductSpace

open LinearMap (ker range)

open RealInnerProductSpace NNReal

universe u

namespace IsCoercive

variable {V : Type u} [NormedAddCommGroup V] [InnerProductSpace ‚Ñù V] [CompleteSpace V]

variable {B : V ‚ÜíL[‚Ñù] V ‚ÜíL[‚Ñù] ‚Ñù}

local postfix:1024 "‚ôØ" => @continuousLinearMapOfBilin ‚Ñù V _ _ _ _

theorem bounded_below (coercive : IsCoercive B) : ‚àÉ C, 0 < C ‚àß ‚àÄ v, C * ‚Äñv‚Äñ ‚â§ ‚ÄñB‚ôØ v‚Äñ := by
  rcases coercive with ‚ü®C, C_ge_0, coercivity‚ü©
  -- ‚ä¢ ‚àÉ C, 0 < C ‚àß ‚àÄ (v : V), C * ‚Äñv‚Äñ ‚â§ ‚Äñ‚Üë(continuousLinearMapOfBilin B) v‚Äñ
  refine' ‚ü®C, C_ge_0, _‚ü©
  -- ‚ä¢ ‚àÄ (v : V), C * ‚Äñv‚Äñ ‚â§ ‚Äñ‚Üë(continuousLinearMapOfBilin B) v‚Äñ
  intro v
  -- ‚ä¢ C * ‚Äñv‚Äñ ‚â§ ‚Äñ‚Üë(continuousLinearMapOfBilin B) v‚Äñ
  by_cases h : 0 < ‚Äñv‚Äñ
  -- ‚ä¢ C * ‚Äñv‚Äñ ‚â§ ‚Äñ‚Üë(continuousLinearMapOfBilin B) v‚Äñ
  ¬∑ refine' (mul_le_mul_right h).mp _
    -- ‚ä¢ C * ‚Äñv‚Äñ * ‚Äñv‚Äñ ‚â§ ‚Äñ‚Üë(continuousLinearMapOfBilin B) v‚Äñ * ‚Äñv‚Äñ
    calc
      C * ‚Äñv‚Äñ * ‚Äñv‚Äñ ‚â§ B v v := coercivity v
      _ = ‚ü™B‚ôØ v, v‚ü´_‚Ñù := (continuousLinearMapOfBilin_apply B v v).symm
      _ ‚â§ ‚ÄñB‚ôØ v‚Äñ * ‚Äñv‚Äñ := real_inner_le_norm (B‚ôØ v) v
  ¬∑ have : v = 0 := by simpa using h
    -- ‚ä¢ C * ‚Äñv‚Äñ ‚â§ ‚Äñ‚Üë(continuousLinearMapOfBilin B) v‚Äñ
    simp [this]
    -- üéâ no goals
#align is_coercive.bounded_below IsCoercive.bounded_below

theorem antilipschitz (coercive : IsCoercive B) : ‚àÉ C : ‚Ñù‚â•0, 0 < C ‚àß AntilipschitzWith C B‚ôØ := by
  rcases coercive.bounded_below with ‚ü®C, C_pos, below_bound‚ü©
  -- ‚ä¢ ‚àÉ C, 0 < C ‚àß AntilipschitzWith C ‚Üë(continuousLinearMapOfBilin B)
  refine' ‚ü®C‚Åª¬π.toNNReal, Real.toNNReal_pos.mpr (inv_pos.mpr C_pos), _‚ü©
  -- ‚ä¢ AntilipschitzWith (Real.toNNReal C‚Åª¬π) ‚Üë(continuousLinearMapOfBilin B)
  refine' ContinuousLinearMap.antilipschitz_of_bound B‚ôØ _
  -- ‚ä¢ ‚àÄ (x : V), ‚Äñx‚Äñ ‚â§ ‚Üë(Real.toNNReal C‚Åª¬π) * ‚Äñ‚Üë(continuousLinearMapOfBilin B) x‚Äñ
  simp_rw [Real.coe_toNNReal', max_eq_left_of_lt (inv_pos.mpr C_pos), ‚Üê
    inv_mul_le_iff (inv_pos.mpr C_pos)]
  simpa using below_bound
  -- üéâ no goals
#align is_coercive.antilipschitz IsCoercive.antilipschitz

theorem ker_eq_bot (coercive : IsCoercive B) : ker B‚ôØ = ‚ä• := by
  rw [LinearMapClass.ker_eq_bot]
  -- ‚ä¢ Function.Injective ‚Üë(continuousLinearMapOfBilin B)
  rcases coercive.antilipschitz with ‚ü®_, _, antilipschitz‚ü©
  -- ‚ä¢ Function.Injective ‚Üë(continuousLinearMapOfBilin B)
  exact antilipschitz.injective
  -- üéâ no goals
#align is_coercive.ker_eq_bot IsCoercive.ker_eq_bot

theorem closed_range (coercive : IsCoercive B) : IsClosed (range B‚ôØ : Set V) := by
  rcases coercive.antilipschitz with ‚ü®_, _, antilipschitz‚ü©
  -- ‚ä¢ IsClosed ‚Üë(range (continuousLinearMapOfBilin B))
  exact antilipschitz.isClosed_range B‚ôØ.uniformContinuous
  -- üéâ no goals
#align is_coercive.closed_range IsCoercive.closed_range

theorem range_eq_top (coercive : IsCoercive B) : range B‚ôØ = ‚ä§ := by
  haveI := coercive.closed_range.completeSpace_coe
  -- ‚ä¢ range (continuousLinearMapOfBilin B) = ‚ä§
  rw [‚Üê (range B‚ôØ).orthogonal_orthogonal]
  -- ‚ä¢ (range (continuousLinearMapOfBilin B))·óÆ·óÆ = ‚ä§
  rw [Submodule.eq_top_iff']
  -- ‚ä¢ ‚àÄ (x : V), x ‚àà (range (continuousLinearMapOfBilin B))·óÆ·óÆ
  intro v w mem_w_orthogonal
  -- ‚ä¢ inner w v = 0
  rcases coercive with ‚ü®C, C_pos, coercivity‚ü©
  -- ‚ä¢ inner w v = 0
  obtain rfl : w = 0 := by
    rw [‚Üê norm_eq_zero, ‚Üê mul_self_eq_zero, ‚Üê mul_right_inj' C_pos.ne', mul_zero, ‚Üê
      mul_assoc]
    apply le_antisymm
    ¬∑ calc
        C * ‚Äñw‚Äñ * ‚Äñw‚Äñ ‚â§ B w w := coercivity w
        _ = ‚ü™B‚ôØ w, w‚ü´_‚Ñù := (continuousLinearMapOfBilin_apply B w w).symm
        _ = 0 := mem_w_orthogonal _ ‚ü®w, rfl‚ü©
    ¬∑ exact mul_nonneg (mul_nonneg C_pos.le (norm_nonneg w)) (norm_nonneg w)
  exact inner_zero_left _
  -- üéâ no goals
#align is_coercive.range_eq_top IsCoercive.range_eq_top

/-- The Lax-Milgram equivalence of a coercive bounded bilinear operator:
for all `v : V`, `continuousLinearEquivOfBilin B v` is the unique element `V`
such that `continuousLinearEquivOfBilin B v, w‚ü´ = B v w`.
The Lax-Milgram theorem states that this is a continuous equivalence.
-/
def continuousLinearEquivOfBilin (coercive : IsCoercive B) : V ‚âÉL[‚Ñù] V :=
  ContinuousLinearEquiv.ofBijective B‚ôØ coercive.ker_eq_bot coercive.range_eq_top
#align is_coercive.continuous_linear_equiv_of_bilin IsCoercive.continuousLinearEquivOfBilin

@[simp]
theorem continuousLinearEquivOfBilin_apply (coercive : IsCoercive B) (v w : V) :
    ‚ü™coercive.continuousLinearEquivOfBilin v, w‚ü´_‚Ñù = B v w :=
  continuousLinearMapOfBilin_apply B v w
#align is_coercive.continuous_linear_equiv_of_bilin_apply IsCoercive.continuousLinearEquivOfBilin_apply

theorem unique_continuousLinearEquivOfBilin (coercive : IsCoercive B) {v f : V}
    (is_lax_milgram : ‚àÄ w, ‚ü™f, w‚ü´_‚Ñù = B v w) : f = coercive.continuousLinearEquivOfBilin v :=
  unique_continuousLinearMapOfBilin B is_lax_milgram
#align is_coercive.unique_continuous_linear_equiv_of_bilin IsCoercive.unique_continuousLinearEquivOfBilin

end IsCoercive
