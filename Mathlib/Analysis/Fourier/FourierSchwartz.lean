/-
Copyright (c) 2023 Alex Kontorovich and Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Alex Kontorovich, Heather Macbeth
-/

import Mathlib.Analysis.Fourier.FourierTransform
import Mathlib.Analysis.Distribution.SchwartzSpace
import Mathlib.MeasureTheory.Measure.Haar.InnerProductSpace
import Mathlib.Analysis.Calculus.ParametricIntegral

/-!
# The Fourier transform of a Schwartz function is Schwartz
-/

open MeasureTheory RealInnerProductSpace Complex Real

variable (E : Type*) [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E] [MeasurableSpace E]
  [BorelSpace E] [FiniteDimensional ‚Ñù E]

noncomputable section

abbrev innerFourier (f : SchwartzMap E ‚ÑÇ) := (VectorFourier.fourierIntegral (E := ‚ÑÇ)) Real.fourierChar (volume : Measure E) (inner‚Çõ‚Çó ‚Ñù) f

theorem hasFDerivAt_fourier (f : SchwartzMap E ‚ÑÇ) (x : E) :
    HasFDerivAt (innerFourier E f)
      ((innerFourier E f x) ‚Ä¢ (Complex.ofRealClm ‚àòL (innerSL ‚Ñù) x)) x := by
  dsimp [innerFourier]
  have := ((innerFourier E f x) ‚Ä¢ (Complex.ofRealClm ‚àòL (innerSL ‚Ñù x : E ‚ÜíL[‚Ñù] ‚Ñù)))
  let F' := fun v w : E ‚Ü¶
    ((Real.fourierChar (-‚ü™v,w‚ü´_‚Ñù)) * (f w)) ‚Ä¢ (Complex.ofRealClm ‚àòL (innerSL ‚Ñù) v)
  convert (@hasFDerivAt_integral_of_dominated_of_fderiv_le (ùïú := ‚Ñù)
    (Œµ_pos := (by norm_num : (0:‚Ñù) < 1)) (Œ± := E) (H := E) (E := ‚ÑÇ) _ volume _ _ _ _ _ _
    _ _ F' x ?_ ?_ ?_ ?_ ?_ ?_ ?_)
  ¬∑ dsimp [VectorFourier.fourierIntegral]
    rw [@integral_smul_const]
    congr! 5
    rw [inner‚Çõ‚Çó_apply, real_inner_comm]
    rfl
  ¬∑ sorry
  ¬∑ filter_upwards [] with a
    sorry -- AEStronglyMeasurable
  ¬∑ -- integrable |f|
    sorry
  ¬∑ sorry -- AEStronglyMeasurable
  ¬∑ filter_upwards [] with w
    intro v hv
    dsimp
    sorry -- actual math!
  ¬∑ sorry -- integrability of the bound
  ¬∑ -- checking the derivative formula
    filter_upwards [] with w
    intro v hv
    dsimp
    have h :
      HasFDerivAt (fun y : E ‚Ü¶ ((fourierChar (Multiplicative.ofAdd (((inner‚Çõ‚Çó ‚Ñù) w) y))‚Åª¬π) : ‚ÑÇ))
      (((fourierChar (‚Üë(- inner v w : ‚Ñù)))) ‚Ä¢ ContinuousLinearMap.comp ofRealClm ((innerSL ‚Ñù) v)) v
    ¬∑ simp only [fourierChar, expMapCircle, ContinuousMap.coe_mk, ofReal_mul, ofReal_ofNat,
      inner‚Çõ‚Çó_apply, map_inv, MonoidHom.coe_mk, OneHom.coe_mk, toAdd_ofAdd, coe_inv_unitSphere]
      change HasFDerivAt (fun y ‚Ü¶ (cexp (2 * ‚ÜëœÄ * ‚Üë(inner w y) * I))‚Åª¬π)
  (cexp (2 * ‚ÜëœÄ * ‚Üë(‚ÜëMultiplicative.toAdd (-inner v w)) * I) ‚Ä¢
    ContinuousLinearMap.comp ofRealClm (‚Üë(innerSL ‚Ñù) v))
  v
      sorry
    convert h.mul_const (f w) using 1
    rw [mul_comm, mul_smul]
    congr!





  sorry

  -- let F' : E ‚Üí E ‚Üí E ‚ÜíL[‚Ñù] ‚ÑÇ := ((innerFourier E f x) ‚Ä¢ (Complex.ofRealClm ‚àòL (innerSL ‚Ñù)))

  -- refine (@hasFDerivAt_integral_of_dominated_of_fderiv_le (ùïú := ‚Ñù)
  --   (Œµ_pos := (by norm_num : (0:‚Ñù) < 1)) (Œ± := E) (H := E) (E := ‚ÑÇ) _ volume _ _ _ _ _ _
  --   _ _ ((innerFourier E f x) ‚Ä¢ (Complex.ofRealClm ‚àòL (innerSL ‚Ñù) x)) x ?_ ?_ ?_ ?_ ?_ ?_ ?_) using 1



#exit

def SchwartzMap.fourierTransform (f : SchwartzMap E ‚ÑÇ) : SchwartzMap E ‚ÑÇ where
  toFun := VectorFourier.fourierIntegral Real.fourierChar (volume : Measure E) (inner‚Çõ‚Çó ‚Ñù) f
  smooth' := by
      refine contDiff_top.mpr ?_
      intro n
      have : n = 1 := by sorry
      rw [this]
      norm_cast
      refine contDiff_one_iff_fderiv.mpr ?_
      constructor
      ¬∑ intro x
        refine (@hasFDerivAt_integral_of_dominated_of_fderiv_le (ùïú := ‚Ñù)
          (Œµ_pos := (by norm_num : (0:‚Ñù) < 1)) (Œ± := E) (H := E) (E := ‚ÑÇ) _ volume _ _ _ _ _ _
          _ _ ?_ x ?_ ?_ ?_ ?_ ?_ ?_ ?_).differentiableAt
        ¬∑
      ¬∑ sorry


  decay' := _
