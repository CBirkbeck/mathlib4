/-
Copyright (c) 2024 Alex Kontorovich, Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Alex Kontorovich, Heather Macbeth
-/
import Mathlib

open scoped ComplexConjugate
open scoped NNReal ENNReal Matrix Real
open MeasureTheory Complex

#check Finsupp.prod

def SupportedCoprime (Œº : Finsupp (Fin 2 ‚Üí ‚Ñ§) ‚ÑÇ) : Prop :=
  ‚àÄ p ‚àà Œº.support, IsCoprime (p 0) (p 1)

variable (Œº ŒΩ : Finsupp (Fin 2 ‚Üí ‚Ñ§) ‚ÑÇ)
  (hŒº : SupportedCoprime Œº) (hŒΩ : SupportedCoprime ŒΩ)
  (Œ≤ : ‚Ñù) (a q : ‚Ñï) (hq‚ÇÄ : q ‚â† 0) (haq : IsCoprime a q) (N Q K : ‚Ñù) (hK‚ÇÄ : 0 ‚â§ K) (hQ‚ÇÄ : 0 ‚â§ Q)
  (hQ : Q ^ 2 < N)
  (hK : Q ^ 2 * K ^ 2 < N) (hq‚ÇÅ : Q / 2 ‚â§ q) (hq‚ÇÇ : q ‚â§ Q) (hŒ≤‚ÇÅ : K / (2 * N) ‚â§ |Œ≤|)
  (hŒ≤‚ÇÇ : |Œ≤| ‚â§ K / N)
  (hŒºN : ‚àÄ x ‚àà Œº.support, x ‚¨ù·µ• x ‚â§ N)
  (hŒΩN : ‚àÄ y ‚àà ŒΩ.support, y ‚¨ù·µ• y ‚â§ N)

-- FIXME why isn't this notation showing up?
set_option quotPrecheck false in
notation "Œ∏" => (a:‚Ñù) / q + Œ≤

noncomputable def fourierBit (x y : Fin 2 ‚Üí ‚Ñ§) : ‚ÑÇ := exp (2 * œÄ * I * Œ∏ * (x ‚¨ù·µ• y))

noncomputable def thing : Finsupp (Fin 2 ‚Üí ‚Ñ§) ‚ÑÇ := ‚àë x in Œº.support, ‚àë y in ŒΩ.support, fourierBit x y

set_option quotPrecheck false in
notation "S" => ‚àë x : Fin 2 ‚Üí ‚Ñ§, ‚à´ y : Fin 2 ‚Üí ‚Ñ§, exp (2 * œÄ * I * Œ∏ * (x ‚¨ù·µ• y)) ‚àÇŒΩ ‚àÇŒº


#exit

#check Finsupp.sum

/-! Delaborator for complex conjugation -- to be added to Mathlib. -/
open Lean PrettyPrinter Delaborator SubExpr in
@[delab app.DFunLike.coe]
def conjDelab : Delab := do
  let f ‚Üê withNaryArg 4 delab
  let Syntax.node _ _ #[starRingEndSyntax, cplxSyntax‚ÇÅ] := (f : Syntax) | failure
  let Syntax.ident _ _ ``starRingEnd _ := starRingEndSyntax | failure
  let Syntax.node _ _ #[cplxSyntax‚ÇÇ] := cplxSyntax‚ÇÅ | failure
  let Syntax.node _ _ #[cplxSyntax‚ÇÉ] := cplxSyntax‚ÇÇ | failure
  let Syntax.atom _ "‚ÑÇ" := cplxSyntax‚ÇÉ | failure
  let z ‚Üê withNaryArg 5 delab
  `(conj $z)

-- rename
class WellDistributed {Œπ : Type*} [MeasurableSpace Œπ] (Œº : Measure Œπ) : Prop where
  is_well_distributed : ‚àÄ i : Œπ, Œº {i} ‚â§ 1

-- alternative implementation: l‚àû norm ‚â§ 1
-- variable (Œº ŒΩ : lp (fun _ : (Fin 2 ‚Üí ‚Ñ§) ‚Ü¶ ‚Ñù) ‚àû)

def SupportedCoprime (Œº : Measure (Fin 2 ‚Üí ‚Ñ§)) : Prop :=
  ‚àÄ p : Fin 2 ‚Üí ‚Ñ§, Œº {p} ‚â† 0 ‚Üí IsCoprime (p 0) (p 1)

variable (Œº ŒΩ : Measure (Fin 2 ‚Üí ‚Ñ§)) [IsFiniteMeasure Œº]
  [WellDistributed Œº] [WellDistributed ŒΩ]
  (hŒº : SupportedCoprime Œº) (hŒΩ : SupportedCoprime ŒΩ)
  (Œ≤ : ‚Ñù) (a q : ‚Ñï) (hq‚ÇÄ : q ‚â† 0) (haq : IsCoprime a q) (N Q K : ‚Ñù) (hK‚ÇÄ : 0 ‚â§ K) (hQ‚ÇÄ : 0 ‚â§ Q)
  (hQ : Q ^ 2 < N)
  (hK : Q ^ 2 * K ^ 2 < N) (hq‚ÇÅ : Q ‚â§ q) (hq‚ÇÇ : q ‚â§ 2 * Q) (hŒ≤‚ÇÅ : K / (2 * N) ‚â§ |Œ≤|)
  (hŒ≤‚ÇÇ : |Œ≤| ‚â§ K / N)
  (hŒºN : ‚àÄ x : Fin 2 ‚Üí ‚Ñ§, Œº {x} ‚â† 0 ‚Üí x ‚¨ù·µ• x ‚â§ N)
  (hŒΩN : ‚àÄ y : Fin 2 ‚Üí ‚Ñ§, ŒΩ {y} ‚â† 0 ‚Üí y ‚¨ù·µ• y ‚â§ N)



theorem MeasureTheory.Lp.norm_const'' {Œ± : Type*} {E : Type*} {m0 : MeasurableSpace Œ±} (p : ‚Ñù‚â•0‚àû)
    (Œº : Measure Œ±) [NormedAddCommGroup E] [IsFiniteMeasure Œº] (c : E) [NeZero Œº]
    (hp_zero : p ‚â† 0) :
    ‚Äñ(Lp.const p Œº) c‚Äñ = ‚Äñc‚Äñ * (measureUnivNNReal Œº) ^ (1 / p.toReal) :=
  sorry

section CauchySchwarzIntegral

variable {Œ± : Type*} {ùïú : Type*} [RCLike ùïú] [MeasurableSpace Œ±]
  (Œº : Measure Œ±)
  (f g : Œ± ‚Üí ùïú)

theorem cauchy_schwarz (hf : Mem‚Ñíp f 2 Œº) (hg : Mem‚Ñíp g 2 Œº) :
    ‚Äñ‚à´ a, f a * g a ‚àÇŒº‚Äñ ^ 2 ‚â§ (‚à´ a, ‚Äñf a‚Äñ ^ 2 ‚àÇŒº) * (‚à´ a, ‚Äñg a‚Äñ ^ 2 ‚àÇŒº) :=
  sorry

@[simp] theorem measure_univ_toReal : (Œº Set.univ).toReal = measureUnivNNReal Œº := rfl

end CauchySchwarzIntegral

/-- Nonnegative function at least one near zero, whose Fourier transform is supported near 0. -/
def Œ≥ (x : Fin 2 ‚Üí ‚Ñù) : ‚Ñù‚â•0 := sorry

example : ‚ÄñS‚Äñ ^ 2 ‚â§ (measureUnivNNReal Œº) ^ 2 * (measureUnivNNReal ŒΩ) ^ 2 / (K * Q) ^ 2 := by
  have : SFinite ŒΩ := sorry
  let f : (Fin 2 ‚Üí ‚Ñ§) ‚Üí ‚ÑÇ := 1
  have hf : Mem‚Ñíp f 2 Œº := sorry --indicatorConstLp (Œº := Œº) (s := Set.univ) 2 sorry sorry 1
  let g : (Fin 2 ‚Üí ‚Ñ§) ‚Üí ‚ÑÇ := fun x ‚Ü¶ ‚à´ y : Fin 2 ‚Üí ‚Ñ§, exp (2 * œÄ * I * Œ∏ * (x ‚¨ù·µ• y)) ‚àÇŒΩ
  calc
    _ = _ := by simp [f, g]
    _ ‚â§ _ := cauchy_schwarz (ùïú := ‚ÑÇ) Œº f g hf sorry
    _ = (measureUnivNNReal Œº) * (‚à´ a, ‚Äñg a‚Äñ ^ 2 ‚àÇŒº) := by simp [f]
    _ ‚â§ (measureUnivNNReal Œº) *
          ((measureUnivNNReal Œº) * (measureUnivNNReal ŒΩ) ^ 2 / (K * Q) ^ 2) := ?_
    _ = _ := by ring
  gcongr
  let Œº' : Measure (Fin 2 ‚Üí ‚Ñ§) := (Œ≥ ((N:‚Ñù)‚Åª¬π ‚Ä¢ (Int.cast ‚àò a))) ‚Ä¢ Measure.count
  have : SFinite Œº' := sorry
  have hŒº : Œº ‚â§ Œº' := sorry
  calc _ ‚â§ ‚à´ (a : Fin 2 ‚Üí ‚Ñ§), ‚Äñg a‚Äñ ^ 2  ‚àÇŒº' := by
          refine integral_mono_measure hŒº ?hf ?hfi
          ¬∑ apply Filter.Eventually.of_forall (fun _ ‚Ü¶ ?_)
            positivity
          ¬∑ sorry -- integrability
    _ = ‚Äñ‚à´ (a : Fin 2 ‚Üí ‚Ñ§), conj (g a) * g a ‚àÇŒº'‚Äñ := sorry
    _ ‚â§ _ := ?_
  dsimp only [g]
  simp_rw [‚Üê integral_conj]
  simp_rw [‚Üê integral_prod_mul]
  rw [integral_integral_swap]
  calc _ ‚â§ _ := norm_integral_le_integral_norm ..
    _ ‚â§ _ := ?_
  norm_cast
  simp only [‚Üê exp_conj, ‚Üê exp_add]
  set Œ∏' := a / q + Œ≤
  conv =>
    enter [1, 2, a, 1, 2, x, 1]
    simp [conj_ofNat, -Matrix.vec2_dotProduct]
    rw [add_comm]
    rw [‚Üê sub_eq_add_neg]
    rw [‚Üê mul_sub]
  norm_cast
  conv =>
    enter [1, 2, a, 1, 2, x, 1, 2, 1]
    rw [‚Üê Matrix.dotProduct_sub]
  dsimp only [Œº']
  -- simp_rw [integral_smul_measure]
  sorry
  sorry
