/-
Copyright (c) 2024 Alex Kontorovich, Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Alex Kontorovich, Heather Macbeth
-/
import Mathlib

open scoped NNReal ENNReal Matrix Real
open MeasureTheory Complex

-- rename
class WellDistributed {Œπ : Type*} [MeasurableSpace Œπ] (Œº : Measure Œπ) : Prop where
  is_well_distributed : ‚àÄ i : Œπ, Œº {i} ‚â§ 1

-- alternative implementation: l‚àû norm ‚â§ 1
-- variable (Œº ŒΩ : lp (fun _ : (Fin 2 ‚Üí ‚Ñ§) ‚Ü¶ ‚Ñù) ‚àû)

def SupportedCoprime (Œº : Measure (Fin 2 ‚Üí ‚Ñ§)) : Prop :=
  ‚àÄ p : Fin 2 ‚Üí ‚Ñ§, Œº {p} ‚â† 0 ‚Üí IsCoprime (p 0) (p 1)

variable (Œº ŒΩ : Measure (Fin 2 ‚Üí ‚Ñ§)) [IsFiniteMeasure Œº]
  [WellDistributed Œº] [WellDistributed ŒΩ]
  (hŒº : SupportedCoprime Œº) (hŒΩ : SupportedCoprime ŒΩ)
  (Œ≤ : ‚Ñù) (a q : ‚Ñï) (hq‚ÇÄ : q ‚â† 0) (haq : IsCoprime a q) (N Q K : ‚Ñù) (hK‚ÇÄ : 0 ‚â§ K) (hQ‚ÇÄ : 0 ‚â§ Q)
  (hQ : Q ^ 2 < N)
  (hK : Q ^ 2 * K ^ 2 < N) (hq‚ÇÅ : Q ‚â§ q) (hq‚ÇÇ : q ‚â§ 2 * Q) (hŒ≤‚ÇÅ : K / (2 * N) ‚â§ |Œ≤|)
  (hŒ≤‚ÇÇ : |Œ≤| ‚â§ K / N)
  (hŒºN : ‚àÄ x : Fin 2 ‚Üí ‚Ñ§, Œº {x} ‚â† 0 ‚Üí x ‚¨ù·µ• x ‚â§ N)
  (hŒºN : ‚àÄ y : Fin 2 ‚Üí ‚Ñ§, Œº {y} ‚â† 0 ‚Üí y ‚¨ù·µ• y ‚â§ N)

set_option quotPrecheck false in
notation "Œ∏" => (a:‚Ñù) / q + Œ≤

set_option quotPrecheck false in
notation "S" => ‚à´ x : Fin 2 ‚Üí ‚Ñ§, ‚à´ y : Fin 2 ‚Üí ‚Ñ§, exp (2 * œÄ * I * Œ∏ * (x ‚¨ù·µ• y)) ‚àÇŒΩ ‚àÇŒº

theorem MeasureTheory.Lp.norm_const'' {Œ± : Type*} {E : Type*} {m0 : MeasurableSpace Œ±} (p : ‚Ñù‚â•0‚àû)
    (Œº : Measure Œ±) [NormedAddCommGroup E] [IsFiniteMeasure Œº] (c : E) [NeZero Œº]
    (hp_zero : p ‚â† 0) :
    ‚Äñ(Lp.const p Œº) c‚Äñ = ‚Äñc‚Äñ * (measureUnivNNReal Œº) ^ (1 / p.toReal) :=
  sorry

example : abs S ‚â§ (measureUnivNNReal Œº) * (measureUnivNNReal ŒΩ) / (K * Q) := by
  let f : Lp ‚ÑÇ 2 Œº := indicatorConstLp (Œº := Œº) (s := Set.univ) 2 sorry sorry 1
  let g : Lp ‚ÑÇ 2 Œº := Mem‚Ñíp.toLp (fun x ‚Ü¶ ‚à´ y : Fin 2 ‚Üí ‚Ñ§, exp (2 * œÄ * I * Œ∏ * (x ‚¨ù·µ• y)) ‚àÇŒΩ) sorry
  have H := norm_inner_le_norm (ùïú := ‚ÑÇ) f g
  have : NeZero Œº := sorry
  rw [L2.inner_indicatorConstLp_one] at H
  simp [f, Lp.norm_const''] at H
  calc
    _ = _ := by
        congrm Complex.abs ?_
        apply integral_congr_ae
        symm
        apply Mem‚Ñíp.coeFn_toLp
    _ ‚â§ _ := H
  apply le_of_pow_le_pow_left (n := 2) (by norm_num) (by positivity)
  calc _ = measureUnivNNReal Œº * ‚Äñg‚Äñ ^ ((2:‚Ñù‚â•0):‚Ñù) := by norm_cast; sorry -- squ
    _ ‚â§ (measureUnivNNReal Œº) * (measureUnivNNReal Œº * ((measureUnivNNReal ŒΩ) / (K * Q)) ^ 2) := ?_
    _ = _ := by ring
  gcongr
  sorry
