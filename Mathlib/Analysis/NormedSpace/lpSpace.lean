/-
Copyright (c) 2021 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth
-/
import Mathlib.Analysis.MeanInequalities
import Mathlib.Analysis.MeanInequalitiesPow
import Mathlib.Analysis.SpecialFunctions.Pow.Continuity
import Mathlib.Topology.Algebra.Order.LiminfLimsup

#align_import analysis.normed_space.lp_space from "leanprover-community/mathlib"@"de83b43717abe353f425855fcf0cedf9ea0fe8a4"

/-!
# ‚Ñìp space

This file describes properties of elements `f` of a pi-type `‚àÄ i, E i` with finite "norm",
defined for `p:‚Ñù‚â•0‚àû` as the size of the support of `f` if `p=0`, `(‚àë' a, ‚Äñf a‚Äñ^p) ^ (1/p)` for
`0 < p < ‚àû` and `‚®Ü a, ‚Äñf a‚Äñ` for `p=‚àû`.

The Prop-valued `Mem‚Ñìp f p` states that a function `f : ‚àÄ i, E i` has finite norm according
to the above definition; that is, `f` has finite support if `p = 0`, `Summable (fun a ‚Ü¶ ‚Äñf a‚Äñ^p)` if
`0 < p < ‚àû`, and `BddAbove (norm '' (Set.range f))` if `p = ‚àû`.

The space `lp E p` is the subtype of elements of `‚àÄ i : Œ±, E i` which satisfy `Mem‚Ñìp f p`. For
`1 ‚â§ p`, the "norm" is genuinely a norm and `lp` is a complete metric space.

## Main definitions

* `Mem‚Ñìp f p` : property that the function `f` satisfies, as appropriate, `f` finitely supported
  if `p = 0`, `Summable (fun a ‚Ü¶ ‚Äñf a‚Äñ^p)` if `0 < p < ‚àû`, and `BddAbove (norm '' (Set.range f))` if
  `p = ‚àû`.
* `lp E p` : elements of `‚àÄ i : Œ±, E i` such that `Mem‚Ñìp f p`. Defined as an `AddSubgroup` of
  a type synonym `PreLp` for `‚àÄ i : Œ±, E i`, and equipped with a `NormedAddCommGroup` structure.
  Under appropriate conditions, this is also equipped with the instances `lp.normedSpace`,
  `lp.completeSpace`. For `p=‚àû`, there is also `lp.inftyNormedRing`,
  `lp.inftyNormedAlgebra`, `lp.inftyStarRing` and `lp.inftyCstarRing`.

## Main results

* `Mem‚Ñìp.of_exponent_ge`: For `q ‚â§ p`, a function which is `Mem‚Ñìp` for `q` is also `Mem‚Ñìp` for `p`.
* `lp.mem‚Ñìp_of_tendsto`, `lp.norm_le_of_tendsto`: A pointwise limit of functions in `lp`, all with
  `lp` norm `‚â§ C`, is itself in `lp` and has `lp` norm `‚â§ C`.
* `lp.tsum_mul_le_mul_norm`: basic form of H√∂lder's inequality

## Implementation

Since `lp` is defined as an `AddSubgroup`, dot notation does not work. Use `lp.norm_neg f` to
say that `‚Äñ-f‚Äñ = ‚Äñf‚Äñ`, instead of the non-working `f.norm_neg`.

## TODO

* More versions of H√∂lder's inequality (for example: the case `p = 1`, `q = ‚àû`; a version for normed
  rings which has `‚Äñ‚àë' i, f i * g i‚Äñ` rather than `‚àë' i, ‚Äñf i‚Äñ * g i‚Äñ` on the RHS; a version for
  three exponents satisfying `1 / r = 1 / p + 1 / q`)

-/

set_option autoImplicit true


local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y) -- Porting note: See issue lean4#2220

noncomputable section

open scoped NNReal ENNReal BigOperators Function

variable {Œ± : Type*} {E : Œ± ‚Üí Type*} {p q : ‚Ñù‚â•0‚àû} [‚àÄ i, NormedAddCommGroup (E i)]

/-!
### `Mem‚Ñìp` predicate

-/


/-- The property that `f : ‚àÄ i : Œ±, E i`
* is finitely supported, if `p = 0`, or
* admits an upper bound for `Set.range (fun i ‚Ü¶ ‚Äñf i‚Äñ)`, if `p = ‚àû`, or
* has the series `‚àë' i, ‚Äñf i‚Äñ ^ p` be summable, if `0 < p < ‚àû`. -/
def Mem‚Ñìp (f : ‚àÄ i, E i) (p : ‚Ñù‚â•0‚àû) : Prop :=
  if p = 0 then Set.Finite { i | f i ‚â† 0 }
  else if p = ‚àû then BddAbove (Set.range fun i => ‚Äñf i‚Äñ)
  else Summable fun i => ‚Äñf i‚Äñ ^ p.toReal
#align mem_‚Ñìp Mem‚Ñìp

theorem mem‚Ñìp_zero_iff {f : ‚àÄ i, E i} : Mem‚Ñìp f 0 ‚Üî Set.Finite { i | f i ‚â† 0 } := by
  dsimp [Mem‚Ñìp]
  -- ‚ä¢ (if 0 = 0 then Set.Finite {i | ¬¨f i = 0} else if 0 = ‚ä§ then BddAbove (Set.ra ‚Ä¶
  rw [if_pos rfl]
  -- üéâ no goals
#align mem_‚Ñìp_zero_iff mem‚Ñìp_zero_iff

theorem mem‚Ñìp_zero {f : ‚àÄ i, E i} (hf : Set.Finite { i | f i ‚â† 0 }) : Mem‚Ñìp f 0 :=
  mem‚Ñìp_zero_iff.2 hf
#align mem_‚Ñìp_zero mem‚Ñìp_zero

theorem mem‚Ñìp_infty_iff {f : ‚àÄ i, E i} : Mem‚Ñìp f ‚àû ‚Üî BddAbove (Set.range fun i => ‚Äñf i‚Äñ) := by
  dsimp [Mem‚Ñìp]
  -- ‚ä¢ (if ‚ä§ = 0 then Set.Finite {i | ¬¨f i = 0} else if ‚ä§ = ‚ä§ then BddAbove (Set.ra ‚Ä¶
  rw [if_neg ENNReal.top_ne_zero, if_pos rfl]
  -- üéâ no goals
#align mem_‚Ñìp_infty_iff mem‚Ñìp_infty_iff

theorem mem‚Ñìp_infty {f : ‚àÄ i, E i} (hf : BddAbove (Set.range fun i => ‚Äñf i‚Äñ)) : Mem‚Ñìp f ‚àû :=
  mem‚Ñìp_infty_iff.2 hf
#align mem_‚Ñìp_infty mem‚Ñìp_infty

theorem mem‚Ñìp_gen_iff (hp : 0 < p.toReal) {f : ‚àÄ i, E i} :
    Mem‚Ñìp f p ‚Üî Summable fun i => ‚Äñf i‚Äñ ^ p.toReal := by
  rw [ENNReal.toReal_pos_iff] at hp
  -- ‚ä¢ Mem‚Ñìp f p ‚Üî Summable fun i => ‚Äñf i‚Äñ ^ ENNReal.toReal p
  dsimp [Mem‚Ñìp]
  -- ‚ä¢ (if p = 0 then Set.Finite {i | ¬¨f i = 0} else if p = ‚ä§ then BddAbove (Set.ra ‚Ä¶
  rw [if_neg hp.1.ne', if_neg hp.2.ne]
  -- üéâ no goals
#align mem_‚Ñìp_gen_iff mem‚Ñìp_gen_iff

theorem mem‚Ñìp_gen {f : ‚àÄ i, E i} (hf : Summable fun i => ‚Äñf i‚Äñ ^ p.toReal) : Mem‚Ñìp f p := by
  rcases p.trichotomy with (rfl | rfl | hp)
  ¬∑ apply mem‚Ñìp_zero
    -- ‚ä¢ Set.Finite {i | f i ‚â† 0}
    have H : Summable fun _ : Œ± => (1 : ‚Ñù) := by simpa using hf
    -- ‚ä¢ Set.Finite {i | f i ‚â† 0}
    exact (Set.Finite.of_summable_const (by norm_num) H).subset (Set.subset_univ _)
    -- üéâ no goals
  ¬∑ apply mem‚Ñìp_infty
    -- ‚ä¢ BddAbove (Set.range fun i => ‚Äñf i‚Äñ)
    have H : Summable fun _ : Œ± => (1 : ‚Ñù) := by simpa using hf
    -- ‚ä¢ BddAbove (Set.range fun i => ‚Äñf i‚Äñ)
    simpa using ((Set.Finite.of_summable_const (by norm_num) H).image fun i => ‚Äñf i‚Äñ).bddAbove
    -- üéâ no goals
  exact (mem‚Ñìp_gen_iff hp).2 hf
  -- üéâ no goals
#align mem_‚Ñìp_gen mem‚Ñìp_gen

theorem mem‚Ñìp_gen' {C : ‚Ñù} {f : ‚àÄ i, E i} (hf : ‚àÄ s : Finset Œ±, ‚àë i in s, ‚Äñf i‚Äñ ^ p.toReal ‚â§ C) :
    Mem‚Ñìp f p := by
  apply mem‚Ñìp_gen
  -- ‚ä¢ Summable fun i => ‚Äñf i‚Äñ ^ ENNReal.toReal p
  use ‚®Ü s : Finset Œ±, ‚àë i in s, ‚Äñf i‚Äñ ^ p.toReal
  -- ‚ä¢ HasSum (fun i => ‚Äñf i‚Äñ ^ ENNReal.toReal p) (‚®Ü (s : Finset Œ±), ‚àë i in s, ‚Äñf i ‚Ä¶
  apply hasSum_of_isLUB_of_nonneg
  -- ‚ä¢ ‚àÄ (i : Œ±), 0 ‚â§ ‚Äñf i‚Äñ ^ ENNReal.toReal p
  ¬∑ intro b
    -- ‚ä¢ 0 ‚â§ ‚Äñf b‚Äñ ^ ENNReal.toReal p
    exact Real.rpow_nonneg_of_nonneg (norm_nonneg _) _
    -- üéâ no goals
  apply isLUB_ciSup
  -- ‚ä¢ BddAbove (Set.range fun s => ‚àë i in s, ‚Äñf i‚Äñ ^ ENNReal.toReal p)
  use C
  -- ‚ä¢ C ‚àà upperBounds (Set.range fun s => ‚àë i in s, ‚Äñf i‚Äñ ^ ENNReal.toReal p)
  rintro - ‚ü®s, rfl‚ü©
  -- ‚ä¢ (fun s => ‚àë i in s, ‚Äñf i‚Äñ ^ ENNReal.toReal p) s ‚â§ C
  exact hf s
  -- üéâ no goals
#align mem_‚Ñìp_gen' mem‚Ñìp_gen'

theorem zero_mem‚Ñìp : Mem‚Ñìp (0 : ‚àÄ i, E i) p := by
  rcases p.trichotomy with (rfl | rfl | hp)
  ¬∑ apply mem‚Ñìp_zero
    -- ‚ä¢ Set.Finite {i | OfNat.ofNat 0 i ‚â† 0}
    simp
    -- üéâ no goals
  ¬∑ apply mem‚Ñìp_infty
    -- ‚ä¢ BddAbove (Set.range fun i => ‚ÄñOfNat.ofNat 0 i‚Äñ)
    simp only [norm_zero, Pi.zero_apply]
    -- ‚ä¢ BddAbove (Set.range fun i => 0)
    exact bddAbove_singleton.mono Set.range_const_subset
    -- üéâ no goals
  ¬∑ apply mem‚Ñìp_gen
    -- ‚ä¢ Summable fun i => ‚ÄñOfNat.ofNat 0 i‚Äñ ^ ENNReal.toReal p
    simp [Real.zero_rpow hp.ne', summable_zero]
    -- üéâ no goals
#align zero_mem_‚Ñìp zero_mem‚Ñìp

theorem zero_mem_‚Ñìp' : Mem‚Ñìp (fun i : Œ± => (0 : E i)) p :=
  zero_mem‚Ñìp
#align zero_mem_‚Ñìp' zero_mem_‚Ñìp'

namespace Mem‚Ñìp

theorem finite_dsupport {f : ‚àÄ i, E i} (hf : Mem‚Ñìp f 0) : Set.Finite { i | f i ‚â† 0 } :=
  mem‚Ñìp_zero_iff.1 hf
#align mem_‚Ñìp.finite_dsupport Mem‚Ñìp.finite_dsupport

theorem bddAbove {f : ‚àÄ i, E i} (hf : Mem‚Ñìp f ‚àû) : BddAbove (Set.range fun i => ‚Äñf i‚Äñ) :=
  mem‚Ñìp_infty_iff.1 hf
#align mem_‚Ñìp.bdd_above Mem‚Ñìp.bddAbove

theorem summable (hp : 0 < p.toReal) {f : ‚àÄ i, E i} (hf : Mem‚Ñìp f p) :
    Summable fun i => ‚Äñf i‚Äñ ^ p.toReal :=
  (mem‚Ñìp_gen_iff hp).1 hf
#align mem_‚Ñìp.summable Mem‚Ñìp.summable

theorem neg {f : ‚àÄ i, E i} (hf : Mem‚Ñìp f p) : Mem‚Ñìp (-f) p := by
  rcases p.trichotomy with (rfl | rfl | hp)
  ¬∑ apply mem‚Ñìp_zero
    -- ‚ä¢ Set.Finite {i | (-f) i ‚â† 0}
    simp [hf.finite_dsupport]
    -- üéâ no goals
  ¬∑ apply mem‚Ñìp_infty
    -- ‚ä¢ BddAbove (Set.range fun i => ‚Äñ(-f) i‚Äñ)
    simpa using hf.bddAbove
    -- üéâ no goals
  ¬∑ apply mem‚Ñìp_gen
    -- ‚ä¢ Summable fun i => ‚Äñ(-f) i‚Äñ ^ ENNReal.toReal p
    simpa using hf.summable hp
    -- üéâ no goals
#align mem_‚Ñìp.neg Mem‚Ñìp.neg

@[simp]
theorem neg_iff {f : ‚àÄ i, E i} : Mem‚Ñìp (-f) p ‚Üî Mem‚Ñìp f p :=
  ‚ü®fun h => neg_neg f ‚ñ∏ h.neg, Mem‚Ñìp.neg‚ü©
#align mem_‚Ñìp.neg_iff Mem‚Ñìp.neg_iff

theorem of_exponent_ge {p q : ‚Ñù‚â•0‚àû} {f : ‚àÄ i, E i} (hfq : Mem‚Ñìp f q) (hpq : q ‚â§ p) : Mem‚Ñìp f p := by
  rcases ENNReal.trichotomy‚ÇÇ hpq with
    (‚ü®rfl, rfl‚ü© | ‚ü®rfl, rfl‚ü© | ‚ü®rfl, hp‚ü© | ‚ü®rfl, rfl‚ü© | ‚ü®hq, rfl‚ü© | ‚ü®hq, _, hpq'‚ü©)
  ¬∑ exact hfq
    -- üéâ no goals
  ¬∑ apply mem‚Ñìp_infty
    -- ‚ä¢ BddAbove (Set.range fun i => ‚Äñf i‚Äñ)
    obtain ‚ü®C, hC‚ü© := (hfq.finite_dsupport.image fun i => ‚Äñf i‚Äñ).bddAbove
    -- ‚ä¢ BddAbove (Set.range fun i => ‚Äñf i‚Äñ)
    use max 0 C
    -- ‚ä¢ max 0 C ‚àà upperBounds (Set.range fun i => ‚Äñf i‚Äñ)
    rintro x ‚ü®i, rfl‚ü©
    -- ‚ä¢ (fun i => ‚Äñf i‚Äñ) i ‚â§ max 0 C
    by_cases hi : f i = 0
    -- ‚ä¢ (fun i => ‚Äñf i‚Äñ) i ‚â§ max 0 C
    ¬∑ simp [hi]
      -- üéâ no goals
    ¬∑ exact (hC ‚ü®i, hi, rfl‚ü©).trans (le_max_right _ _)
      -- üéâ no goals
  ¬∑ apply mem‚Ñìp_gen
    -- ‚ä¢ Summable fun i => ‚Äñf i‚Äñ ^ ENNReal.toReal p
    have : ‚àÄ (i) (_ : i ‚àâ hfq.finite_dsupport.toFinset), ‚Äñf i‚Äñ ^ p.toReal = 0 := by
      intro i hi
      have : f i = 0 := by simpa using hi
      simp [this, Real.zero_rpow hp.ne']
    exact summable_of_ne_finset_zero this
    -- üéâ no goals
  ¬∑ exact hfq
    -- üéâ no goals
  ¬∑ apply mem‚Ñìp_infty
    -- ‚ä¢ BddAbove (Set.range fun i => ‚Äñf i‚Äñ)
    obtain ‚ü®A, hA‚ü© := (hfq.summable hq).tendsto_cofinite_zero.bddAbove_range_of_cofinite
    -- ‚ä¢ BddAbove (Set.range fun i => ‚Äñf i‚Äñ)
    use A ^ q.toReal‚Åª¬π
    -- ‚ä¢ A ^ (ENNReal.toReal q)‚Åª¬π ‚àà upperBounds (Set.range fun i => ‚Äñf i‚Äñ)
    rintro x ‚ü®i, rfl‚ü©
    -- ‚ä¢ (fun i => ‚Äñf i‚Äñ) i ‚â§ A ^ (ENNReal.toReal q)‚Åª¬π
    have : 0 ‚â§ ‚Äñf i‚Äñ ^ q.toReal := Real.rpow_nonneg_of_nonneg (norm_nonneg _) _
    -- ‚ä¢ (fun i => ‚Äñf i‚Äñ) i ‚â§ A ^ (ENNReal.toReal q)‚Åª¬π
    simpa [‚Üê Real.rpow_mul, mul_inv_cancel hq.ne'] using
      Real.rpow_le_rpow this (hA ‚ü®i, rfl‚ü©) (inv_nonneg.mpr hq.le)
  ¬∑ apply mem‚Ñìp_gen
    -- ‚ä¢ Summable fun i => ‚Äñf i‚Äñ ^ ENNReal.toReal p
    have hf' := hfq.summable hq
    -- ‚ä¢ Summable fun i => ‚Äñf i‚Äñ ^ ENNReal.toReal p
    refine' summable_of_norm_bounded_eventually _ hf' (@Set.Finite.subset _ { i | 1 ‚â§ ‚Äñf i‚Äñ } _ _ _)
    -- ‚ä¢ Set.Finite {i | 1 ‚â§ ‚Äñf i‚Äñ}
    ¬∑ have H : { x : Œ± | 1 ‚â§ ‚Äñf x‚Äñ ^ q.toReal }.Finite := by
        simpa using eventually_lt_of_tendsto_lt (by norm_num) hf'.tendsto_cofinite_zero
      exact H.subset fun i hi => Real.one_le_rpow hi hq.le
      -- üéâ no goals
    ¬∑ show ‚àÄ i, ¬¨|‚Äñf i‚Äñ ^ p.toReal| ‚â§ ‚Äñf i‚Äñ ^ q.toReal ‚Üí 1 ‚â§ ‚Äñf i‚Äñ
      -- ‚ä¢ ‚àÄ (i : Œ±), ¬¨|‚Äñf i‚Äñ ^ ENNReal.toReal p| ‚â§ ‚Äñf i‚Äñ ^ ENNReal.toReal q ‚Üí 1 ‚â§ ‚Äñf i‚Äñ
      intro i hi
      -- ‚ä¢ 1 ‚â§ ‚Äñf i‚Äñ
      have : 0 ‚â§ ‚Äñf i‚Äñ ^ p.toReal := Real.rpow_nonneg_of_nonneg (norm_nonneg _) p.toReal
      -- ‚ä¢ 1 ‚â§ ‚Äñf i‚Äñ
      simp only [abs_of_nonneg, this] at hi
      -- ‚ä¢ 1 ‚â§ ‚Äñf i‚Äñ
      contrapose! hi
      -- ‚ä¢ ‚Äñf i‚Äñ ^ ENNReal.toReal p ‚â§ ‚Äñf i‚Äñ ^ ENNReal.toReal q
      exact Real.rpow_le_rpow_of_exponent_ge' (norm_nonneg _) hi.le hq.le hpq'
      -- üéâ no goals
#align mem_‚Ñìp.of_exponent_ge Mem‚Ñìp.of_exponent_ge

theorem add {f g : ‚àÄ i, E i} (hf : Mem‚Ñìp f p) (hg : Mem‚Ñìp g p) : Mem‚Ñìp (f + g) p := by
  rcases p.trichotomy with (rfl | rfl | hp)
  ¬∑ apply mem‚Ñìp_zero
    -- ‚ä¢ Set.Finite {i | (f + g) i ‚â† 0}
    refine' (hf.finite_dsupport.union hg.finite_dsupport).subset fun i => _
    -- ‚ä¢ i ‚àà {i | (f + g) i ‚â† 0} ‚Üí i ‚àà {i | f i ‚â† 0} ‚à™ {i | g i ‚â† 0}
    simp only [Pi.add_apply, Ne.def, Set.mem_union, Set.mem_setOf_eq]
    -- ‚ä¢ ¬¨f i + g i = 0 ‚Üí ¬¨f i = 0 ‚à® ¬¨g i = 0
    contrapose!
    -- ‚ä¢ f i = 0 ‚àß g i = 0 ‚Üí f i + g i = 0
    rintro ‚ü®hf', hg'‚ü©
    -- ‚ä¢ f i + g i = 0
    simp [hf', hg']
    -- üéâ no goals
  ¬∑ apply mem‚Ñìp_infty
    -- ‚ä¢ BddAbove (Set.range fun i => ‚Äñ(f + g) i‚Äñ)
    obtain ‚ü®A, hA‚ü© := hf.bddAbove
    -- ‚ä¢ BddAbove (Set.range fun i => ‚Äñ(f + g) i‚Äñ)
    obtain ‚ü®B, hB‚ü© := hg.bddAbove
    -- ‚ä¢ BddAbove (Set.range fun i => ‚Äñ(f + g) i‚Äñ)
    refine' ‚ü®A + B, _‚ü©
    -- ‚ä¢ A + B ‚àà upperBounds (Set.range fun i => ‚Äñ(f + g) i‚Äñ)
    rintro a ‚ü®i, rfl‚ü©
    -- ‚ä¢ (fun i => ‚Äñ(f + g) i‚Äñ) i ‚â§ A + B
    exact le_trans (norm_add_le _ _) (add_le_add (hA ‚ü®i, rfl‚ü©) (hB ‚ü®i, rfl‚ü©))
    -- üéâ no goals
  apply mem‚Ñìp_gen
  -- ‚ä¢ Summable fun i => ‚Äñ(f + g) i‚Äñ ^ ENNReal.toReal p
  let C : ‚Ñù := if p.toReal < 1 then 1 else (2 : ‚Ñù) ^ (p.toReal - 1)
  -- ‚ä¢ Summable fun i => ‚Äñ(f + g) i‚Äñ ^ ENNReal.toReal p
  refine'
    summable_of_nonneg_of_le _ (fun i => _) (((hf.summable hp).add (hg.summable hp)).mul_left C)
  ¬∑ exact fun b => Real.rpow_nonneg_of_nonneg (norm_nonneg (f b + g b)) p.toReal
    -- üéâ no goals
  ¬∑ refine' (Real.rpow_le_rpow (norm_nonneg _) (norm_add_le _ _) hp.le).trans _
    -- ‚ä¢ (‚Äñf i‚Äñ + ‚Äñg i‚Äñ) ^ ENNReal.toReal p ‚â§ C * (‚Äñf i‚Äñ ^ ENNReal.toReal p + ‚Äñg i‚Äñ ^ ‚Ä¶
    dsimp only
    -- ‚ä¢ (‚Äñf i‚Äñ + ‚Äñg i‚Äñ) ^ ENNReal.toReal p ‚â§ (if ENNReal.toReal p < 1 then 1 else 2  ‚Ä¶
    split_ifs with h
    -- ‚ä¢ (‚Äñf i‚Äñ + ‚Äñg i‚Äñ) ^ ENNReal.toReal p ‚â§ 1 * (‚Äñf i‚Äñ ^ ENNReal.toReal p + ‚Äñg i‚Äñ ^ ‚Ä¶
    ¬∑ simpa using NNReal.coe_le_coe.2 (NNReal.rpow_add_le_add_rpow ‚Äñf i‚Äñ‚Çä ‚Äñg i‚Äñ‚Çä hp.le h.le)
      -- üéâ no goals
    ¬∑ let F : Fin 2 ‚Üí ‚Ñù‚â•0 := ![‚Äñf i‚Äñ‚Çä, ‚Äñg i‚Äñ‚Çä]
      -- ‚ä¢ (‚Äñf i‚Äñ + ‚Äñg i‚Äñ) ^ ENNReal.toReal p ‚â§ 2 ^ (ENNReal.toReal p - 1) * (‚Äñf i‚Äñ ^ E ‚Ä¶
      simp only [not_lt] at h
      -- ‚ä¢ (‚Äñf i‚Äñ + ‚Äñg i‚Äñ) ^ ENNReal.toReal p ‚â§ 2 ^ (ENNReal.toReal p - 1) * (‚Äñf i‚Äñ ^ E ‚Ä¶
      simpa [Fin.sum_univ_succ] using
        Real.rpow_sum_le_const_mul_sum_rpow_of_nonneg Finset.univ h fun i _ => (F i).coe_nonneg
#align mem_‚Ñìp.add Mem‚Ñìp.add

theorem sub {f g : ‚àÄ i, E i} (hf : Mem‚Ñìp f p) (hg : Mem‚Ñìp g p) : Mem‚Ñìp (f - g) p := by
  rw [sub_eq_add_neg]; exact hf.add hg.neg
  -- ‚ä¢ Mem‚Ñìp (f + -g) p
                       -- üéâ no goals
#align mem_‚Ñìp.sub Mem‚Ñìp.sub

theorem finset_sum {Œπ} (s : Finset Œπ) {f : Œπ ‚Üí ‚àÄ i, E i} (hf : ‚àÄ i ‚àà s, Mem‚Ñìp (f i) p) :
    Mem‚Ñìp (fun a => ‚àë i in s, f i a) p := by
  haveI : DecidableEq Œπ := Classical.decEq _
  -- ‚ä¢ Mem‚Ñìp (fun a => ‚àë i in s, f i a) p
  revert hf
  -- ‚ä¢ (‚àÄ (i : Œπ), i ‚àà s ‚Üí Mem‚Ñìp (f i) p) ‚Üí Mem‚Ñìp (fun a => ‚àë i in s, f i a) p
  refine' Finset.induction_on s _ _
  -- ‚ä¢ (‚àÄ (i : Œπ), i ‚àà ‚àÖ ‚Üí Mem‚Ñìp (f i) p) ‚Üí Mem‚Ñìp (fun a => ‚àë i in ‚àÖ, f i a) p
  ¬∑ simp only [zero_mem_‚Ñìp', Finset.sum_empty, imp_true_iff]
    -- üéâ no goals
  ¬∑ intro i s his ih hf
    -- ‚ä¢ Mem‚Ñìp (fun a => ‚àë i in insert i s, f i a) p
    simp only [his, Finset.sum_insert, not_false_iff]
    -- ‚ä¢ Mem‚Ñìp (fun a => f i a + ‚àë i in s, f i a) p
    exact (hf i (s.mem_insert_self i)).add (ih fun j hj => hf j (Finset.mem_insert_of_mem hj))
    -- üéâ no goals
#align mem_‚Ñìp.finset_sum Mem‚Ñìp.finset_sum

section BoundedSMul

variable {ùïú : Type*} [NormedRing ùïú] [‚àÄ i, Module ùïú (E i)] [‚àÄ i, BoundedSMul ùïú (E i)]

theorem const_smul {f : ‚àÄ i, E i} (hf : Mem‚Ñìp f p) (c : ùïú) : Mem‚Ñìp (c ‚Ä¢ f) p := by
  rcases p.trichotomy with (rfl | rfl | hp)
  ¬∑ apply mem‚Ñìp_zero
    -- ‚ä¢ Set.Finite {i | (c ‚Ä¢ f) i ‚â† 0}
    refine' hf.finite_dsupport.subset fun i => (_ : ¬¨c ‚Ä¢ f i = 0 ‚Üí ¬¨f i = 0)
    -- ‚ä¢ ¬¨c ‚Ä¢ f i = 0 ‚Üí ¬¨f i = 0
    exact not_imp_not.mpr fun hf' => hf'.symm ‚ñ∏ smul_zero c
    -- üéâ no goals
  ¬∑ obtain ‚ü®A, hA‚ü© := hf.bddAbove
    -- ‚ä¢ Mem‚Ñìp (c ‚Ä¢ f) ‚ä§
    refine' mem‚Ñìp_infty ‚ü®‚Äñc‚Äñ * A, _‚ü©
    -- ‚ä¢ ‚Äñc‚Äñ * A ‚àà upperBounds (Set.range fun i => ‚Äñ(c ‚Ä¢ f) i‚Äñ)
    rintro a ‚ü®i, rfl‚ü©
    -- ‚ä¢ (fun i => ‚Äñ(c ‚Ä¢ f) i‚Äñ) i ‚â§ ‚Äñc‚Äñ * A
    refine' (norm_smul_le _ _).trans _
    -- ‚ä¢ ‚Äñc‚Äñ * ‚Äñf i‚Äñ ‚â§ ‚Äñc‚Äñ * A
    exact mul_le_mul_of_nonneg_left (hA ‚ü®i, rfl‚ü©) (norm_nonneg c)
    -- üéâ no goals
  ¬∑ apply mem‚Ñìp_gen
    -- ‚ä¢ Summable fun i => ‚Äñ(c ‚Ä¢ f) i‚Äñ ^ ENNReal.toReal p
    have := (hf.summable hp).mul_left (‚Üë(‚Äñc‚Äñ‚Çä ^ p.toReal) : ‚Ñù)
    -- ‚ä¢ Summable fun i => ‚Äñ(c ‚Ä¢ f) i‚Äñ ^ ENNReal.toReal p
    simp_rw [‚Üê coe_nnnorm, ‚Üê NNReal.coe_rpow, ‚Üê NNReal.coe_mul, NNReal.summable_coe,
      ‚Üê NNReal.mul_rpow] at this ‚ä¢
    refine' NNReal.summable_of_le _ this
    -- ‚ä¢ ‚àÄ (b : Œ±), ‚Äñ(c ‚Ä¢ f) b‚Äñ‚Çä ^ ENNReal.toReal p ‚â§ (‚Äñc‚Äñ‚Çä * ‚Äñf b‚Äñ‚Çä) ^ ENNReal.toRea ‚Ä¶
    intro i
    -- ‚ä¢ ‚Äñ(c ‚Ä¢ f) i‚Äñ‚Çä ^ ENNReal.toReal p ‚â§ (‚Äñc‚Äñ‚Çä * ‚Äñf i‚Äñ‚Çä) ^ ENNReal.toReal p
    exact NNReal.rpow_le_rpow (nnnorm_smul_le _ _) ENNReal.toReal_nonneg
    -- üéâ no goals
#align mem_‚Ñìp.const_smul Mem‚Ñìp.const_smul

theorem const_mul {f : Œ± ‚Üí ùïú} (hf : Mem‚Ñìp f p) (c : ùïú) : Mem‚Ñìp (fun x => c * f x) p :=
  @Mem‚Ñìp.const_smul Œ± (fun _ => ùïú) _ _ ùïú _ _ (fun i => by infer_instance) _ hf c
                                                          -- üéâ no goals
#align mem_‚Ñìp.const_mul Mem‚Ñìp.const_mul

end BoundedSMul

end Mem‚Ñìp

/-!
### lp space

The space of elements of `‚àÄ i, E i` satisfying the predicate `Mem‚Ñìp`.
-/


/-- We define `PreLp E` to be a type synonym for `‚àÄ i, E i` which, importantly, does not inherit
the `pi` topology on `‚àÄ i, E i` (otherwise this topology would descend to `lp E p` and conflict
with the normed group topology we will later equip it with.)

We choose to deal with this issue by making a type synonym for `‚àÄ i, E i` rather than for the `lp`
subgroup itself, because this allows all the spaces `lp E p` (for varying `p`) to be subgroups of
the same ambient group, which permits lemma statements like `lp.monotone` (below). -/
@[nolint unusedArguments]
def PreLp (E : Œ± ‚Üí Type*) [‚àÄ i, NormedAddCommGroup (E i)] : Type _ :=
  ‚àÄ i, E i --deriving AddCommGroup
#align pre_lp PreLp

instance : AddCommGroup (PreLp E) := by unfold PreLp; infer_instance
                                        -- ‚ä¢ AddCommGroup ((i : Œ±) ‚Üí E i)
                                                      -- üéâ no goals

instance PreLp.unique [IsEmpty Œ±] : Unique (PreLp E) :=
  Pi.uniqueOfIsEmpty E
#align pre_lp.unique PreLp.unique

/-- lp space -/
def lp (E : Œ± ‚Üí Type*) [‚àÄ i, NormedAddCommGroup (E i)] (p : ‚Ñù‚â•0‚àû) : AddSubgroup (PreLp E) where
  carrier := { f | Mem‚Ñìp f p }
  zero_mem' := zero_mem‚Ñìp
  add_mem' := Mem‚Ñìp.add
  neg_mem' := Mem‚Ñìp.neg
#align lp lp

scoped[lp] notation "‚Ñì^‚àû(" Œπ ", " E ")" => lp (fun i : Œπ => E) ‚àû
scoped[lp] notation "‚Ñì^‚àû(" Œπ ")" => lp (fun i : Œπ => ‚Ñù) ‚àû

namespace lp

-- Porting note: was `Coe`
instance : CoeOut (lp E p) (‚àÄ i, E i) :=
  ‚ü®Subtype.val (Œ± := ‚àÄ i, E i)‚ü© -- Porting note: Originally `coeSubtype`

instance coeFun : CoeFun (lp E p) fun _ => ‚àÄ i, E i :=
  ‚ü®fun f => (f : ‚àÄ i, E i)‚ü©

@[ext]
theorem ext {f g : lp E p} (h : (f : ‚àÄ i, E i) = g) : f = g :=
  Subtype.ext h
#align lp.ext lp.ext

protected theorem ext_iff {f g : lp E p} : f = g ‚Üî (f : ‚àÄ i, E i) = g :=
  Subtype.ext_iff
#align lp.ext_iff lp.ext_iff

theorem eq_zero' [IsEmpty Œ±] (f : lp E p) : f = 0 :=
  Subsingleton.elim f 0
#align lp.eq_zero' lp.eq_zero'

protected theorem monotone {p q : ‚Ñù‚â•0‚àû} (hpq : q ‚â§ p) : lp E q ‚â§ lp E p :=
  fun _ hf => Mem‚Ñìp.of_exponent_ge hf hpq
#align lp.monotone lp.monotone

protected theorem mem‚Ñìp (f : lp E p) : Mem‚Ñìp f p :=
  f.prop
#align lp.mem_‚Ñìp lp.mem‚Ñìp

variable (E p)

@[simp]
theorem coeFn_zero : ‚áë(0 : lp E p) = 0 :=
  rfl
#align lp.coe_fn_zero lp.coeFn_zero

variable {E p}

@[simp]
theorem coeFn_neg (f : lp E p) : ‚áë(-f) = -f :=
  rfl
#align lp.coe_fn_neg lp.coeFn_neg

@[simp]
theorem coeFn_add (f g : lp E p) : ‚áë(f + g) = f + g :=
  rfl
#align lp.coe_fn_add lp.coeFn_add

-- porting note: removed `@[simp]` because `simp` can prove this
theorem coeFn_sum {Œπ : Type*} (f : Œπ ‚Üí lp E p) (s : Finset Œπ) :
    ‚áë(‚àë i in s, f i) = ‚àë i in s, ‚áë(f i) := by
  simp
  -- üéâ no goals
#align lp.coe_fn_sum lp.coeFn_sum

@[simp]
theorem coeFn_sub (f g : lp E p) : ‚áë(f - g) = f - g :=
  rfl
#align lp.coe_fn_sub lp.coeFn_sub

instance : Norm (lp E p) where
  norm f :=
    if hp : p = 0 then by
      subst hp
      -- ‚ä¢ ‚Ñù
      exact ((lp.mem‚Ñìp f).finite_dsupport.toFinset.card : ‚Ñù)
      -- üéâ no goals
    else if p = ‚àû then ‚®Ü i, ‚Äñf i‚Äñ else (‚àë' i, ‚Äñf i‚Äñ ^ p.toReal) ^ (1 / p.toReal)

theorem norm_eq_card_dsupport (f : lp E 0) : ‚Äñf‚Äñ = (lp.mem‚Ñìp f).finite_dsupport.toFinset.card :=
  dif_pos rfl
#align lp.norm_eq_card_dsupport lp.norm_eq_card_dsupport

theorem norm_eq_ciSup (f : lp E ‚àû) : ‚Äñf‚Äñ = ‚®Ü i, ‚Äñf i‚Äñ := by
  dsimp [norm]
  -- ‚ä¢ (if hp : ‚ä§ = 0 then Eq.rec (motive := fun x x_1 => { x_2 // x_2 ‚àà lp E x } ‚Üí ‚Ä¶
  rw [dif_neg ENNReal.top_ne_zero, if_pos rfl]
  -- üéâ no goals
#align lp.norm_eq_csupr lp.norm_eq_ciSup

theorem isLUB_norm [Nonempty Œ±] (f : lp E ‚àû) : IsLUB (Set.range fun i => ‚Äñf i‚Äñ) ‚Äñf‚Äñ := by
  rw [lp.norm_eq_ciSup]
  -- ‚ä¢ IsLUB (Set.range fun i => ‚Äñ‚Üëf i‚Äñ) (‚®Ü (i : Œ±), ‚Äñ‚Üëf i‚Äñ)
  exact isLUB_ciSup (lp.mem‚Ñìp f)
  -- üéâ no goals
#align lp.is_lub_norm lp.isLUB_norm

theorem norm_eq_tsum_rpow (hp : 0 < p.toReal) (f : lp E p) :
    ‚Äñf‚Äñ = (‚àë' i, ‚Äñf i‚Äñ ^ p.toReal) ^ (1 / p.toReal) := by
  dsimp [norm]
  -- ‚ä¢ (if hp : p = 0 then Eq.rec (motive := fun x x_1 => { x_2 // x_2 ‚àà lp E x } ‚Üí ‚Ä¶
  rw [ENNReal.toReal_pos_iff] at hp
  -- ‚ä¢ (if hp : p = 0 then Eq.rec (motive := fun x x_1 => { x_2 // x_2 ‚àà lp E x } ‚Üí ‚Ä¶
  rw [dif_neg hp.1.ne', if_neg hp.2.ne]
  -- üéâ no goals
#align lp.norm_eq_tsum_rpow lp.norm_eq_tsum_rpow

theorem norm_rpow_eq_tsum (hp : 0 < p.toReal) (f : lp E p) :
    ‚Äñf‚Äñ ^ p.toReal = ‚àë' i, ‚Äñf i‚Äñ ^ p.toReal := by
  rw [norm_eq_tsum_rpow hp, ‚Üê Real.rpow_mul]
  -- ‚ä¢ (‚àë' (i : Œ±), ‚Äñ‚Üëf i‚Äñ ^ ENNReal.toReal p) ^ (1 / ENNReal.toReal p * ENNReal.to ‚Ä¶
  ¬∑ field_simp
    -- üéâ no goals
  apply tsum_nonneg
  -- ‚ä¢ ‚àÄ (i : Œ±), 0 ‚â§ ‚Äñ‚Üëf i‚Äñ ^ ENNReal.toReal p
  intro i
  -- ‚ä¢ 0 ‚â§ ‚Äñ‚Üëf i‚Äñ ^ ENNReal.toReal p
  calc
    (0 : ‚Ñù) = (0 : ‚Ñù) ^ p.toReal := by rw [Real.zero_rpow hp.ne']
    _ ‚â§ _ := Real.rpow_le_rpow rfl.le (norm_nonneg (f i)) hp.le
#align lp.norm_rpow_eq_tsum lp.norm_rpow_eq_tsum

theorem hasSum_norm (hp : 0 < p.toReal) (f : lp E p) :
    HasSum (fun i => ‚Äñf i‚Äñ ^ p.toReal) (‚Äñf‚Äñ ^ p.toReal) := by
  rw [norm_rpow_eq_tsum hp]
  -- ‚ä¢ HasSum (fun i => ‚Äñ‚Üëf i‚Äñ ^ ENNReal.toReal p) (‚àë' (i : Œ±), ‚Äñ‚Üëf i‚Äñ ^ ENNReal.to ‚Ä¶
  exact ((lp.mem‚Ñìp f).summable hp).hasSum
  -- üéâ no goals
#align lp.has_sum_norm lp.hasSum_norm

theorem norm_nonneg' (f : lp E p) : 0 ‚â§ ‚Äñf‚Äñ := by
  rcases p.trichotomy with (rfl | rfl | hp)
  ¬∑ simp [lp.norm_eq_card_dsupport f]
    -- üéâ no goals
  ¬∑ cases' isEmpty_or_nonempty Œ± with _i _i
    -- ‚ä¢ 0 ‚â§ ‚Äñf‚Äñ
    ¬∑ rw [lp.norm_eq_ciSup]
      -- ‚ä¢ 0 ‚â§ ‚®Ü (i : Œ±), ‚Äñ‚Üëf i‚Äñ
      simp [Real.ciSup_empty]
      -- üéâ no goals
    inhabit Œ±
    -- ‚ä¢ 0 ‚â§ ‚Äñf‚Äñ
    exact (norm_nonneg (f default)).trans ((lp.isLUB_norm f).1 ‚ü®default, rfl‚ü©)
    -- üéâ no goals
  ¬∑ rw [lp.norm_eq_tsum_rpow hp f]
    -- ‚ä¢ 0 ‚â§ (‚àë' (i : Œ±), ‚Äñ‚Üëf i‚Äñ ^ ENNReal.toReal p) ^ (1 / ENNReal.toReal p)
    refine' Real.rpow_nonneg_of_nonneg (tsum_nonneg _) _
    -- ‚ä¢ ‚àÄ (i : Œ±), 0 ‚â§ ‚Äñ‚Üëf i‚Äñ ^ ENNReal.toReal p
    exact fun i => Real.rpow_nonneg_of_nonneg (norm_nonneg _) _
    -- üéâ no goals
#align lp.norm_nonneg' lp.norm_nonneg'

@[simp]
theorem norm_zero : ‚Äñ(0 : lp E p)‚Äñ = 0 := by
  rcases p.trichotomy with (rfl | rfl | hp)
  ¬∑ simp [lp.norm_eq_card_dsupport]
    -- üéâ no goals
  ¬∑ simp [lp.norm_eq_ciSup]
    -- üéâ no goals
  ¬∑ rw [lp.norm_eq_tsum_rpow hp]
    -- ‚ä¢ (‚àë' (i : Œ±), ‚Äñ‚Üë0 i‚Äñ ^ ENNReal.toReal p) ^ (1 / ENNReal.toReal p) = 0
    have hp' : 1 / p.toReal ‚â† 0 := one_div_ne_zero hp.ne'
    -- ‚ä¢ (‚àë' (i : Œ±), ‚Äñ‚Üë0 i‚Äñ ^ ENNReal.toReal p) ^ (1 / ENNReal.toReal p) = 0
    simpa [Real.zero_rpow hp.ne'] using Real.zero_rpow hp'
    -- üéâ no goals
#align lp.norm_zero lp.norm_zero

theorem norm_eq_zero_iff {f : lp E p} : ‚Äñf‚Äñ = 0 ‚Üî f = 0 := by
  refine' ‚ü®fun h => _, by rintro rfl; exact norm_zero‚ü©
  -- ‚ä¢ f = 0
  rcases p.trichotomy with (rfl | rfl | hp)
  ¬∑ ext i
    -- ‚ä¢ ‚Üëf i = ‚Üë0 i
    have : { i : Œ± | ¬¨f i = 0 } = ‚àÖ := by simpa [lp.norm_eq_card_dsupport f] using h
    -- ‚ä¢ ‚Üëf i = ‚Üë0 i
    have : (¬¨f i = 0) = False := congr_fun this i
    -- ‚ä¢ ‚Üëf i = ‚Üë0 i
    tauto
    -- üéâ no goals
  ¬∑ cases' isEmpty_or_nonempty Œ± with _i _i
    -- ‚ä¢ f = 0
    ¬∑ simp
      -- üéâ no goals
    have H : IsLUB (Set.range fun i => ‚Äñf i‚Äñ) 0 := by simpa [h] using lp.isLUB_norm f
    -- ‚ä¢ f = 0
    ext i
    -- ‚ä¢ ‚Üëf i = ‚Üë0 i
    have : ‚Äñf i‚Äñ = 0 := le_antisymm (H.1 ‚ü®i, rfl‚ü©) (norm_nonneg _)
    -- ‚ä¢ ‚Üëf i = ‚Üë0 i
    simpa using this
    -- üéâ no goals
  ¬∑ have hf : HasSum (fun i : Œ± => ‚Äñf i‚Äñ ^ p.toReal) 0 := by
      have := lp.hasSum_norm hp f
      rwa [h, Real.zero_rpow hp.ne'] at this
    have : ‚àÄ i, 0 ‚â§ ‚Äñf i‚Äñ ^ p.toReal := fun i => Real.rpow_nonneg_of_nonneg (norm_nonneg _) _
    -- ‚ä¢ f = 0
    rw [hasSum_zero_iff_of_nonneg this] at hf
    -- ‚ä¢ f = 0
    ext i
    -- ‚ä¢ ‚Üëf i = ‚Üë0 i
    have : f i = 0 ‚àß p.toReal ‚â† 0 := by
      simpa [Real.rpow_eq_zero_iff_of_nonneg (norm_nonneg (f i))] using congr_fun hf i
    exact this.1
    -- üéâ no goals
#align lp.norm_eq_zero_iff lp.norm_eq_zero_iff

theorem eq_zero_iff_coeFn_eq_zero {f : lp E p} : f = 0 ‚Üî ‚áëf = 0 := by
  rw [lp.ext_iff, coeFn_zero]
  -- üéâ no goals
#align lp.eq_zero_iff_coe_fn_eq_zero lp.eq_zero_iff_coeFn_eq_zero

-- porting note: this was very slow, so I squeezed the `simp` calls
@[simp]
theorem norm_neg ‚¶Éf : lp E p‚¶Ñ : ‚Äñ-f‚Äñ = ‚Äñf‚Äñ := by
  rcases p.trichotomy with (rfl | rfl | hp)
  ¬∑ simp only [norm_eq_card_dsupport, coeFn_neg, Pi.neg_apply, ne_eq, neg_eq_zero]
    -- üéâ no goals
  ¬∑ cases isEmpty_or_nonempty Œ±
    -- ‚ä¢ ‚Äñ-f‚Äñ = ‚Äñf‚Äñ
    ¬∑ simp only [lp.eq_zero' f, neg_zero, norm_zero]
      -- üéâ no goals
    apply (lp.isLUB_norm (-f)).unique
    -- ‚ä¢ IsLUB (Set.range fun i => ‚Äñ‚Üë(-f) i‚Äñ) ‚Äñf‚Äñ
    simpa only [coeFn_neg, Pi.neg_apply, norm_neg] using lp.isLUB_norm f
    -- üéâ no goals
  ¬∑ suffices ‚Äñ-f‚Äñ ^ p.toReal = ‚Äñf‚Äñ ^ p.toReal by
      exact Real.rpow_left_injOn hp.ne' (norm_nonneg' _) (norm_nonneg' _) this
    apply (lp.hasSum_norm hp (-f)).unique
    -- ‚ä¢ HasSum (fun i => ‚Äñ‚Üë(-f) i‚Äñ ^ ENNReal.toReal p) (‚Äñf‚Äñ ^ ENNReal.toReal p)
    simpa only [coeFn_neg, Pi.neg_apply, _root_.norm_neg] using lp.hasSum_norm hp f
    -- üéâ no goals
#align lp.norm_neg lp.norm_neg

instance normedAddCommGroup [hp : Fact (1 ‚â§ p)] : NormedAddCommGroup (lp E p) :=
  AddGroupNorm.toNormedAddCommGroup
    { toFun := norm
      map_zero' := norm_zero
      neg' := norm_neg
      add_le' := fun f g => by
        rcases p.dichotomy with (rfl | hp')
        -- ‚ä¢ ‚Äñf + g‚Äñ ‚â§ ‚Äñf‚Äñ + ‚Äñg‚Äñ
        ¬∑ cases isEmpty_or_nonempty Œ±
          -- ‚ä¢ ‚Äñf + g‚Äñ ‚â§ ‚Äñf‚Äñ + ‚Äñg‚Äñ
          ¬∑ -- Porting note: was `simp [lp.eq_zero' f]`
            rw [lp.eq_zero' f]
            -- ‚ä¢ ‚Äñ0 + g‚Äñ ‚â§ ‚Äñ0‚Äñ + ‚Äñg‚Äñ
            simp only [zero_add, norm_zero, le_refl] -- porting note: just `simp` was slow
            -- üéâ no goals
          refine' (lp.isLUB_norm (f + g)).2 _
          -- ‚ä¢ ‚Äñf‚Äñ + ‚Äñg‚Äñ ‚àà upperBounds (Set.range fun i => ‚Äñ‚Üë(f + g) i‚Äñ)
          rintro x ‚ü®i, rfl‚ü©
          -- ‚ä¢ (fun i => ‚Äñ‚Üë(f + g) i‚Äñ) i ‚â§ ‚Äñf‚Äñ + ‚Äñg‚Äñ
          refine' le_trans _ (add_mem_upperBounds_add
            (lp.isLUB_norm f).1 (lp.isLUB_norm g).1 ‚ü®_, _, ‚ü®i, rfl‚ü©, ‚ü®i, rfl‚ü©, rfl‚ü©)
          exact norm_add_le (f i) (g i)
          -- üéâ no goals
        ¬∑ have hp'' : 0 < p.toReal := zero_lt_one.trans_le hp'
          -- ‚ä¢ ‚Äñf + g‚Äñ ‚â§ ‚Äñf‚Äñ + ‚Äñg‚Äñ
          have hf‚ÇÅ : ‚àÄ i, 0 ‚â§ ‚Äñf i‚Äñ := fun i => norm_nonneg _
          -- ‚ä¢ ‚Äñf + g‚Äñ ‚â§ ‚Äñf‚Äñ + ‚Äñg‚Äñ
          have hg‚ÇÅ : ‚àÄ i, 0 ‚â§ ‚Äñg i‚Äñ := fun i => norm_nonneg _
          -- ‚ä¢ ‚Äñf + g‚Äñ ‚â§ ‚Äñf‚Äñ + ‚Äñg‚Äñ
          have hf‚ÇÇ := lp.hasSum_norm hp'' f
          -- ‚ä¢ ‚Äñf + g‚Äñ ‚â§ ‚Äñf‚Äñ + ‚Äñg‚Äñ
          have hg‚ÇÇ := lp.hasSum_norm hp'' g
          -- ‚ä¢ ‚Äñf + g‚Äñ ‚â§ ‚Äñf‚Äñ + ‚Äñg‚Äñ
          -- apply Minkowski's inequality
          obtain ‚ü®C, hC‚ÇÅ, hC‚ÇÇ, hCfg‚ü© :=
            Real.Lp_add_le_hasSum_of_nonneg hp' hf‚ÇÅ hg‚ÇÅ (norm_nonneg' _) (norm_nonneg' _) hf‚ÇÇ hg‚ÇÇ
          refine' le_trans _ hC‚ÇÇ
          -- ‚ä¢ ‚Äñf + g‚Äñ ‚â§ C
          rw [‚Üê Real.rpow_le_rpow_iff (norm_nonneg' (f + g)) hC‚ÇÅ hp'']
          -- ‚ä¢ ‚Äñf + g‚Äñ ^ ENNReal.toReal p ‚â§ C ^ ENNReal.toReal p
          refine' hasSum_le _ (lp.hasSum_norm hp'' (f + g)) hCfg
          -- ‚ä¢ ‚àÄ (i : Œ±), ‚Äñ‚Üë(f + g) i‚Äñ ^ ENNReal.toReal p ‚â§ (‚Äñ‚Üëf i‚Äñ + ‚Äñ‚Üëg i‚Äñ) ^ ENNReal.toR ‚Ä¶
          intro i
          -- ‚ä¢ ‚Äñ‚Üë(f + g) i‚Äñ ^ ENNReal.toReal p ‚â§ (‚Äñ‚Üëf i‚Äñ + ‚Äñ‚Üëg i‚Äñ) ^ ENNReal.toReal p
          exact Real.rpow_le_rpow (norm_nonneg _) (norm_add_le _ _) hp''.le
          -- üéâ no goals
      eq_zero_of_map_eq_zero' := fun f => norm_eq_zero_iff.1 }

-- TODO: define an `ENNReal` version of `IsConjugateExponent`, and then express this inequality
-- in a better version which also covers the case `p = 1, q = ‚àû`.
/-- H√∂lder inequality -/
protected theorem tsum_mul_le_mul_norm {p q : ‚Ñù‚â•0‚àû} (hpq : p.toReal.IsConjugateExponent q.toReal)
    (f : lp E p) (g : lp E q) :
    (Summable fun i => ‚Äñf i‚Äñ * ‚Äñg i‚Äñ) ‚àß ‚àë' i, ‚Äñf i‚Äñ * ‚Äñg i‚Äñ ‚â§ ‚Äñf‚Äñ * ‚Äñg‚Äñ := by
  have hf‚ÇÅ : ‚àÄ i, 0 ‚â§ ‚Äñf i‚Äñ := fun i => norm_nonneg _
  -- ‚ä¢ (Summable fun i => ‚Äñ‚Üëf i‚Äñ * ‚Äñ‚Üëg i‚Äñ) ‚àß ‚àë' (i : Œ±), ‚Äñ‚Üëf i‚Äñ * ‚Äñ‚Üëg i‚Äñ ‚â§ ‚Äñf‚Äñ * ‚Äñg‚Äñ
  have hg‚ÇÅ : ‚àÄ i, 0 ‚â§ ‚Äñg i‚Äñ := fun i => norm_nonneg _
  -- ‚ä¢ (Summable fun i => ‚Äñ‚Üëf i‚Äñ * ‚Äñ‚Üëg i‚Äñ) ‚àß ‚àë' (i : Œ±), ‚Äñ‚Üëf i‚Äñ * ‚Äñ‚Üëg i‚Äñ ‚â§ ‚Äñf‚Äñ * ‚Äñg‚Äñ
  have hf‚ÇÇ := lp.hasSum_norm hpq.pos f
  -- ‚ä¢ (Summable fun i => ‚Äñ‚Üëf i‚Äñ * ‚Äñ‚Üëg i‚Äñ) ‚àß ‚àë' (i : Œ±), ‚Äñ‚Üëf i‚Äñ * ‚Äñ‚Üëg i‚Äñ ‚â§ ‚Äñf‚Äñ * ‚Äñg‚Äñ
  have hg‚ÇÇ := lp.hasSum_norm hpq.symm.pos g
  -- ‚ä¢ (Summable fun i => ‚Äñ‚Üëf i‚Äñ * ‚Äñ‚Üëg i‚Äñ) ‚àß ‚àë' (i : Œ±), ‚Äñ‚Üëf i‚Äñ * ‚Äñ‚Üëg i‚Äñ ‚â§ ‚Äñf‚Äñ * ‚Äñg‚Äñ
  obtain ‚ü®C, -, hC', hC‚ü© :=
    Real.inner_le_Lp_mul_Lq_hasSum_of_nonneg hpq (norm_nonneg' _) (norm_nonneg' _) hf‚ÇÅ hg‚ÇÅ hf‚ÇÇ hg‚ÇÇ
  rw [‚Üê hC.tsum_eq] at hC'
  -- ‚ä¢ (Summable fun i => ‚Äñ‚Üëf i‚Äñ * ‚Äñ‚Üëg i‚Äñ) ‚àß ‚àë' (i : Œ±), ‚Äñ‚Üëf i‚Äñ * ‚Äñ‚Üëg i‚Äñ ‚â§ ‚Äñf‚Äñ * ‚Äñg‚Äñ
  exact ‚ü®hC.summable, hC'‚ü©
  -- üéâ no goals
#align lp.tsum_mul_le_mul_norm lp.tsum_mul_le_mul_norm

protected theorem summable_mul {p q : ‚Ñù‚â•0‚àû} (hpq : p.toReal.IsConjugateExponent q.toReal)
    (f : lp E p) (g : lp E q) : Summable fun i => ‚Äñf i‚Äñ * ‚Äñg i‚Äñ :=
  (lp.tsum_mul_le_mul_norm hpq f g).1
#align lp.summable_mul lp.summable_mul

protected theorem tsum_mul_le_mul_norm' {p q : ‚Ñù‚â•0‚àû} (hpq : p.toReal.IsConjugateExponent q.toReal)
    (f : lp E p) (g : lp E q) : ‚àë' i, ‚Äñf i‚Äñ * ‚Äñg i‚Äñ ‚â§ ‚Äñf‚Äñ * ‚Äñg‚Äñ :=
  (lp.tsum_mul_le_mul_norm hpq f g).2
#align lp.tsum_mul_le_mul_norm' lp.tsum_mul_le_mul_norm'

section ComparePointwise

theorem norm_apply_le_norm (hp : p ‚â† 0) (f : lp E p) (i : Œ±) : ‚Äñf i‚Äñ ‚â§ ‚Äñf‚Äñ := by
  rcases eq_or_ne p ‚àû with (rfl | hp')
  -- ‚ä¢ ‚Äñ‚Üëf i‚Äñ ‚â§ ‚Äñf‚Äñ
  ¬∑ haveI : Nonempty Œ± := ‚ü®i‚ü©
    -- ‚ä¢ ‚Äñ‚Üëf i‚Äñ ‚â§ ‚Äñf‚Äñ
    exact (isLUB_norm f).1 ‚ü®i, rfl‚ü©
    -- üéâ no goals
  have hp'' : 0 < p.toReal := ENNReal.toReal_pos hp hp'
  -- ‚ä¢ ‚Äñ‚Üëf i‚Äñ ‚â§ ‚Äñf‚Äñ
  have : ‚àÄ i, 0 ‚â§ ‚Äñf i‚Äñ ^ p.toReal := fun i => Real.rpow_nonneg_of_nonneg (norm_nonneg _) _
  -- ‚ä¢ ‚Äñ‚Üëf i‚Äñ ‚â§ ‚Äñf‚Äñ
  rw [‚Üê Real.rpow_le_rpow_iff (norm_nonneg _) (norm_nonneg' _) hp'']
  -- ‚ä¢ ‚Äñ‚Üëf i‚Äñ ^ ENNReal.toReal p ‚â§ ‚Äñf‚Äñ ^ ENNReal.toReal p
  convert le_hasSum (hasSum_norm hp'' f) i fun i _ => this i
  -- üéâ no goals
#align lp.norm_apply_le_norm lp.norm_apply_le_norm

theorem sum_rpow_le_norm_rpow (hp : 0 < p.toReal) (f : lp E p) (s : Finset Œ±) :
    ‚àë i in s, ‚Äñf i‚Äñ ^ p.toReal ‚â§ ‚Äñf‚Äñ ^ p.toReal := by
  rw [lp.norm_rpow_eq_tsum hp f]
  -- ‚ä¢ ‚àë i in s, ‚Äñ‚Üëf i‚Äñ ^ ENNReal.toReal p ‚â§ ‚àë' (i : Œ±), ‚Äñ‚Üëf i‚Äñ ^ ENNReal.toReal p
  have : ‚àÄ i, 0 ‚â§ ‚Äñf i‚Äñ ^ p.toReal := fun i => Real.rpow_nonneg_of_nonneg (norm_nonneg _) _
  -- ‚ä¢ ‚àë i in s, ‚Äñ‚Üëf i‚Äñ ^ ENNReal.toReal p ‚â§ ‚àë' (i : Œ±), ‚Äñ‚Üëf i‚Äñ ^ ENNReal.toReal p
  refine' sum_le_tsum _ (fun i _ => this i) _
  -- ‚ä¢ Summable fun i => ‚Äñ‚Üëf i‚Äñ ^ ENNReal.toReal p
  exact (lp.mem‚Ñìp f).summable hp
  -- üéâ no goals
#align lp.sum_rpow_le_norm_rpow lp.sum_rpow_le_norm_rpow

theorem norm_le_of_forall_le' [Nonempty Œ±] {f : lp E ‚àû} (C : ‚Ñù) (hCf : ‚àÄ i, ‚Äñf i‚Äñ ‚â§ C) :
    ‚Äñf‚Äñ ‚â§ C := by
  refine' (isLUB_norm f).2 _
  -- ‚ä¢ C ‚àà upperBounds (Set.range fun i => ‚Äñ‚Üëf i‚Äñ)
  rintro - ‚ü®i, rfl‚ü©
  -- ‚ä¢ (fun i => ‚Äñ‚Üëf i‚Äñ) i ‚â§ C
  exact hCf i
  -- üéâ no goals
#align lp.norm_le_of_forall_le' lp.norm_le_of_forall_le'

theorem norm_le_of_forall_le {f : lp E ‚àû} {C : ‚Ñù} (hC : 0 ‚â§ C) (hCf : ‚àÄ i, ‚Äñf i‚Äñ ‚â§ C) :
    ‚Äñf‚Äñ ‚â§ C := by
  cases isEmpty_or_nonempty Œ±
  -- ‚ä¢ ‚Äñf‚Äñ ‚â§ C
  ¬∑ simpa [eq_zero' f] using hC
    -- üéâ no goals
  ¬∑ exact norm_le_of_forall_le' C hCf
    -- üéâ no goals
#align lp.norm_le_of_forall_le lp.norm_le_of_forall_le

theorem norm_le_of_tsum_le (hp : 0 < p.toReal) {C : ‚Ñù} (hC : 0 ‚â§ C) {f : lp E p}
    (hf : ‚àë' i, ‚Äñf i‚Äñ ^ p.toReal ‚â§ C ^ p.toReal) : ‚Äñf‚Äñ ‚â§ C := by
  rw [‚Üê Real.rpow_le_rpow_iff (norm_nonneg' _) hC hp, norm_rpow_eq_tsum hp]
  -- ‚ä¢ ‚àë' (i : Œ±), ‚Äñ‚Üëf i‚Äñ ^ ENNReal.toReal p ‚â§ C ^ ENNReal.toReal p
  exact hf
  -- üéâ no goals
#align lp.norm_le_of_tsum_le lp.norm_le_of_tsum_le

theorem norm_le_of_forall_sum_le (hp : 0 < p.toReal) {C : ‚Ñù} (hC : 0 ‚â§ C) {f : lp E p}
    (hf : ‚àÄ s : Finset Œ±, ‚àë i in s, ‚Äñf i‚Äñ ^ p.toReal ‚â§ C ^ p.toReal) : ‚Äñf‚Äñ ‚â§ C :=
  norm_le_of_tsum_le hp hC (tsum_le_of_sum_le ((lp.mem‚Ñìp f).summable hp) hf)
#align lp.norm_le_of_forall_sum_le lp.norm_le_of_forall_sum_le

end ComparePointwise

section BoundedSMul

variable {ùïú : Type*} {ùïú' : Type*}

variable [NormedRing ùïú] [NormedRing ùïú']

variable [‚àÄ i, Module ùïú (E i)] [‚àÄ i, Module ùïú' (E i)]

instance : Module ùïú (PreLp E) :=
  Pi.module Œ± E ùïú

instance [‚àÄ i, SMulCommClass ùïú' ùïú (E i)] : SMulCommClass ùïú' ùïú (PreLp E) :=
  Pi.smulCommClass

instance [SMul ùïú' ùïú] [‚àÄ i, IsScalarTower ùïú' ùïú (E i)] : IsScalarTower ùïú' ùïú (PreLp E) :=
  Pi.isScalarTower

instance [‚àÄ i, Module ùïú·µê·µí·µñ (E i)] [‚àÄ i, IsCentralScalar ùïú (E i)] : IsCentralScalar ùïú (PreLp E) :=
  Pi.isCentralScalar

variable [‚àÄ i, BoundedSMul ùïú (E i)] [‚àÄ i, BoundedSMul ùïú' (E i)]

theorem mem_lp_const_smul (c : ùïú) (f : lp E p) : c ‚Ä¢ (f : PreLp E) ‚àà lp E p :=
  (lp.mem‚Ñìp f).const_smul c
#align lp.mem_lp_const_smul lp.mem_lp_const_smul

variable (E p ùïú)

/-- The `ùïú`-submodule of elements of `‚àÄ i : Œ±, E i` whose `lp` norm is finite. This is `lp E p`,
with extra structure. -/
def _root_.lpSubmodule : Submodule ùïú (PreLp E) :=
  { lp E p with smul_mem' := fun c f hf => by simpa using mem_lp_const_smul c ‚ü®f, hf‚ü© }
                                              -- üéâ no goals
#align lp_submodule lpSubmodule

variable {E p ùïú}

theorem coe_lpSubmodule : (lpSubmodule E p ùïú).toAddSubgroup = lp E p :=
  rfl
#align lp.coe_lp_submodule lp.coe_lpSubmodule

instance : Module ùïú (lp E p) :=
  { (lpSubmodule E p ùïú).module with }

@[simp]
theorem coeFn_smul (c : ùïú) (f : lp E p) : ‚áë(c ‚Ä¢ f) = c ‚Ä¢ ‚áëf :=
  rfl
#align lp.coe_fn_smul lp.coeFn_smul

instance [‚àÄ i, SMulCommClass ùïú' ùïú (E i)] : SMulCommClass ùïú' ùïú (lp E p) :=
  ‚ü®fun _ _ _ => Subtype.ext <| smul_comm _ _ _‚ü©

instance [SMul ùïú' ùïú] [‚àÄ i, IsScalarTower ùïú' ùïú (E i)] : IsScalarTower ùïú' ùïú (lp E p) :=
  ‚ü®fun _ _ _ => Subtype.ext <| smul_assoc _ _ _‚ü©

instance [‚àÄ i, Module ùïú·µê·µí·µñ (E i)] [‚àÄ i, IsCentralScalar ùïú (E i)] : IsCentralScalar ùïú (lp E p) :=
  ‚ü®fun _ _ => Subtype.ext <| op_smul_eq_smul _ _‚ü©

theorem norm_const_smul_le (hp : p ‚â† 0) (c : ùïú) (f : lp E p) : ‚Äñc ‚Ä¢ f‚Äñ ‚â§ ‚Äñc‚Äñ * ‚Äñf‚Äñ := by
  rcases p.trichotomy with (rfl | rfl | hp)
  ¬∑ exact absurd rfl hp
    -- üéâ no goals
  ¬∑ cases isEmpty_or_nonempty Œ±
    -- ‚ä¢ ‚Äñc ‚Ä¢ f‚Äñ ‚â§ ‚Äñc‚Äñ * ‚Äñf‚Äñ
    ¬∑ simp [lp.eq_zero' f]
      -- üéâ no goals
    have hcf := lp.isLUB_norm (c ‚Ä¢ f)
    -- ‚ä¢ ‚Äñc ‚Ä¢ f‚Äñ ‚â§ ‚Äñc‚Äñ * ‚Äñf‚Äñ
    have hfc := (lp.isLUB_norm f).mul_left (norm_nonneg c)
    -- ‚ä¢ ‚Äñc ‚Ä¢ f‚Äñ ‚â§ ‚Äñc‚Äñ * ‚Äñf‚Äñ
    simp_rw [‚Üê Set.range_comp, Function.comp] at hfc
    -- ‚ä¢ ‚Äñc ‚Ä¢ f‚Äñ ‚â§ ‚Äñc‚Äñ * ‚Äñf‚Äñ
    -- TODO: some `IsLUB` API should make it a one-liner from here.
    refine' hcf.right _
    -- ‚ä¢ ‚Äñc‚Äñ * ‚Äñf‚Äñ ‚àà upperBounds (Set.range fun i => ‚Äñ‚Üë(c ‚Ä¢ f) i‚Äñ)
    have := hfc.left
    -- ‚ä¢ ‚Äñc‚Äñ * ‚Äñf‚Äñ ‚àà upperBounds (Set.range fun i => ‚Äñ‚Üë(c ‚Ä¢ f) i‚Äñ)
    simp_rw [mem_upperBounds, Set.mem_range,
      forall_exists_index, forall_apply_eq_imp_iff'] at this ‚ä¢
    intro a
    -- ‚ä¢ ‚Äñ‚Üë(c ‚Ä¢ f) a‚Äñ ‚â§ ‚Äñc‚Äñ * ‚Äñf‚Äñ
    exact (norm_smul_le _ _).trans (this a)
    -- üéâ no goals
  ¬∑ letI inst : NNNorm (lp E p) := ‚ü®fun f => ‚ü®‚Äñf‚Äñ, norm_nonneg' _‚ü©‚ü©
    -- ‚ä¢ ‚Äñc ‚Ä¢ f‚Äñ ‚â§ ‚Äñc‚Äñ * ‚Äñf‚Äñ
    have coe_nnnorm : ‚àÄ f : lp E p, ‚Üë‚Äñf‚Äñ‚Çä = ‚Äñf‚Äñ := fun _ => rfl
    -- ‚ä¢ ‚Äñc ‚Ä¢ f‚Äñ ‚â§ ‚Äñc‚Äñ * ‚Äñf‚Äñ
    suffices ‚Äñc ‚Ä¢ f‚Äñ‚Çä ^ p.toReal ‚â§ (‚Äñc‚Äñ‚Çä * ‚Äñf‚Äñ‚Çä) ^ p.toReal by
      rwa [NNReal.rpow_le_rpow_iff hp] at this
    clear_value inst
    -- ‚ä¢ ‚Äñc ‚Ä¢ f‚Äñ‚Çä ^ ENNReal.toReal p ‚â§ (‚Äñc‚Äñ‚Çä * ‚Äñf‚Äñ‚Çä) ^ ENNReal.toReal p
    rw [NNReal.mul_rpow]
    -- ‚ä¢ ‚Äñc ‚Ä¢ f‚Äñ‚Çä ^ ENNReal.toReal p ‚â§ ‚Äñc‚Äñ‚Çä ^ ENNReal.toReal p * ‚Äñf‚Äñ‚Çä ^ ENNReal.toRea ‚Ä¶
    have hLHS := lp.hasSum_norm hp (c ‚Ä¢ f)
    -- ‚ä¢ ‚Äñc ‚Ä¢ f‚Äñ‚Çä ^ ENNReal.toReal p ‚â§ ‚Äñc‚Äñ‚Çä ^ ENNReal.toReal p * ‚Äñf‚Äñ‚Çä ^ ENNReal.toRea ‚Ä¶
    have hRHS := (lp.hasSum_norm hp f).mul_left (‚Äñc‚Äñ ^ p.toReal)
    -- ‚ä¢ ‚Äñc ‚Ä¢ f‚Äñ‚Çä ^ ENNReal.toReal p ‚â§ ‚Äñc‚Äñ‚Çä ^ ENNReal.toReal p * ‚Äñf‚Äñ‚Çä ^ ENNReal.toRea ‚Ä¶
    simp_rw [‚Üê coe_nnnorm, ‚Üê _root_.coe_nnnorm, ‚Üê NNReal.coe_rpow, ‚Üê NNReal.coe_mul,
      NNReal.hasSum_coe] at hRHS hLHS
    refine' hasSum_mono hLHS hRHS fun i => _
    -- ‚ä¢ ‚Äñ‚Üë(c ‚Ä¢ f) i‚Äñ‚Çä ^ ENNReal.toReal p ‚â§ ‚Äñc‚Äñ‚Çä ^ ENNReal.toReal p * ‚Äñ‚Üëf i‚Äñ‚Çä ^ ENNRe ‚Ä¶
    dsimp only
    -- ‚ä¢ ‚Äñ‚Üë(c ‚Ä¢ f) i‚Äñ‚Çä ^ ENNReal.toReal p ‚â§ ‚Äñc‚Äñ‚Çä ^ ENNReal.toReal p * ‚Äñ‚Üëf i‚Äñ‚Çä ^ ENNRe ‚Ä¶
    rw [‚Üê NNReal.mul_rpow]
    -- ‚ä¢ ‚Äñ‚Üë(c ‚Ä¢ f) i‚Äñ‚Çä ^ ENNReal.toReal p ‚â§ (‚Äñc‚Äñ‚Çä * ‚Äñ‚Üëf i‚Äñ‚Çä) ^ ENNReal.toReal p
    -- Porting note: added
    rw [lp.coeFn_smul, Pi.smul_apply]
    -- ‚ä¢ ‚Äñc ‚Ä¢ ‚Üëf i‚Äñ‚Çä ^ ENNReal.toReal p ‚â§ (‚Äñc‚Äñ‚Çä * ‚Äñ‚Üëf i‚Äñ‚Çä) ^ ENNReal.toReal p
    exact NNReal.rpow_le_rpow (nnnorm_smul_le _ _) ENNReal.toReal_nonneg
    -- üéâ no goals
#align lp.norm_const_smul_le lp.norm_const_smul_le

instance [Fact (1 ‚â§ p)] : BoundedSMul ùïú (lp E p) :=
  BoundedSMul.of_norm_smul_le <| norm_const_smul_le (zero_lt_one.trans_le <| Fact.out).ne'

end BoundedSMul

section DivisionRing

variable {ùïú : Type*}

variable [NormedDivisionRing ùïú] [‚àÄ i, Module ùïú (E i)] [‚àÄ i, BoundedSMul ùïú (E i)]

theorem norm_const_smul (hp : p ‚â† 0) {c : ùïú} (f : lp E p) : ‚Äñc ‚Ä¢ f‚Äñ = ‚Äñc‚Äñ * ‚Äñf‚Äñ := by
  obtain rfl | hc := eq_or_ne c 0
  -- ‚ä¢ ‚Äñ0 ‚Ä¢ f‚Äñ = ‚Äñ0‚Äñ * ‚Äñf‚Äñ
  ¬∑ simp
    -- üéâ no goals
  refine' le_antisymm (norm_const_smul_le hp c f) _
  -- ‚ä¢ ‚Äñc‚Äñ * ‚Äñf‚Äñ ‚â§ ‚Äñc ‚Ä¢ f‚Äñ
  have := mul_le_mul_of_nonneg_left (norm_const_smul_le hp c‚Åª¬π (c ‚Ä¢ f)) (norm_nonneg c)
  -- ‚ä¢ ‚Äñc‚Äñ * ‚Äñf‚Äñ ‚â§ ‚Äñc ‚Ä¢ f‚Äñ
  rwa [inv_smul_smul‚ÇÄ hc, norm_inv, mul_inv_cancel_left‚ÇÄ (norm_ne_zero_iff.mpr hc)] at this
  -- üéâ no goals
#align lp.norm_const_smul lp.norm_const_smul

end DivisionRing

section NormedSpace

variable {ùïú : Type*} [NormedField ùïú] [‚àÄ i, NormedSpace ùïú (E i)]

instance instNormedSpace [Fact (1 ‚â§ p)] : NormedSpace ùïú (lp E p) where
  norm_smul_le c f := norm_smul_le c f

end NormedSpace

section NormedStarGroup

variable [‚àÄ i, StarAddMonoid (E i)] [‚àÄ i, NormedStarGroup (E i)]

theorem _root_.Mem‚Ñìp.star_mem {f : ‚àÄ i, E i} (hf : Mem‚Ñìp f p) : Mem‚Ñìp (star f) p := by
  rcases p.trichotomy with (rfl | rfl | hp)
  ¬∑ apply mem‚Ñìp_zero
    -- ‚ä¢ Set.Finite {i | star f i ‚â† 0}
    simp [hf.finite_dsupport]
    -- üéâ no goals
  ¬∑ apply mem‚Ñìp_infty
    -- ‚ä¢ BddAbove (Set.range fun i => ‚Äñstar f i‚Äñ)
    simpa using hf.bddAbove
    -- üéâ no goals
  ¬∑ apply mem‚Ñìp_gen
    -- ‚ä¢ Summable fun i => ‚Äñstar f i‚Äñ ^ ENNReal.toReal p
    simpa using hf.summable hp
    -- üéâ no goals
#align mem_‚Ñìp.star_mem Mem‚Ñìp.star_mem

@[simp]
theorem _root_.Mem‚Ñìp.star_iff {f : ‚àÄ i, E i} : Mem‚Ñìp (star f) p ‚Üî Mem‚Ñìp f p :=
  ‚ü®fun h => star_star f ‚ñ∏ Mem‚Ñìp.star_mem h, Mem‚Ñìp.star_mem‚ü©
#align mem_‚Ñìp.star_iff Mem‚Ñìp.star_iff

instance : Star (lp E p) where
  star f := ‚ü®(star f : ‚àÄ i, E i), f.property.star_mem‚ü©

@[simp]
theorem coeFn_star (f : lp E p) : ‚áë(star f) = star (‚áëf) :=
  rfl
#align lp.coe_fn_star lp.coeFn_star

@[simp]
protected theorem star_apply (f : lp E p) (i : Œ±) : star f i = star (f i) :=
  rfl
#align lp.star_apply lp.star_apply

instance instInvolutiveStar : InvolutiveStar (lp E p) where
  star_involutive x := by simp [star]
                          -- üéâ no goals

instance instStarAddMonoid : StarAddMonoid (lp E p) where
  star_add _f _g := ext <| star_add (R := ‚àÄ i, E i) _ _

instance [hp : Fact (1 ‚â§ p)] : NormedStarGroup (lp E p) where
  norm_star f := by
    rcases p.trichotomy with (rfl | rfl | h)
    ¬∑ exfalso
      -- ‚ä¢ False
      have := ENNReal.toReal_mono ENNReal.zero_ne_top hp.elim
      -- ‚ä¢ False
      norm_num at this
      -- üéâ no goals
    ¬∑ simp only [lp.norm_eq_ciSup, lp.star_apply, norm_star]
      -- üéâ no goals
    ¬∑ simp only [lp.norm_eq_tsum_rpow h, lp.star_apply, norm_star]
      -- üéâ no goals

variable {ùïú : Type*} [Star ùïú] [NormedRing ùïú]

variable [‚àÄ i, Module ùïú (E i)] [‚àÄ i, BoundedSMul ùïú (E i)] [‚àÄ i, StarModule ùïú (E i)]

instance : StarModule ùïú (lp E p) where
  star_smul _r _f := ext <| star_smul (A := ‚àÄ i, E i) _ _

end NormedStarGroup

section NonUnitalNormedRing

variable {I : Type*} {B : I ‚Üí Type*} [‚àÄ i, NonUnitalNormedRing (B i)]

theorem _root_.Mem‚Ñìp.infty_mul {f g : ‚àÄ i, B i} (hf : Mem‚Ñìp f ‚àû) (hg : Mem‚Ñìp g ‚àû) :
    Mem‚Ñìp (f * g) ‚àû := by
  rw [mem‚Ñìp_infty_iff]
  -- ‚ä¢ BddAbove (Set.range fun i => ‚Äñ(f * g) i‚Äñ)
  obtain ‚ü®‚ü®Cf, hCf‚ü©, ‚ü®Cg, hCg‚ü©‚ü© := hf.bddAbove, hg.bddAbove
  -- ‚ä¢ BddAbove (Set.range fun i => ‚Äñ(f * g) i‚Äñ)
  refine' ‚ü®Cf * Cg, _‚ü©
  -- ‚ä¢ Cf * Cg ‚àà upperBounds (Set.range fun i => ‚Äñ(f * g) i‚Äñ)
  rintro _ ‚ü®i, rfl‚ü©
  -- ‚ä¢ (fun i => ‚Äñ(f * g) i‚Äñ) i ‚â§ Cf * Cg
  calc
    ‚Äñ(f * g) i‚Äñ ‚â§ ‚Äñf i‚Äñ * ‚Äñg i‚Äñ := norm_mul_le (f i) (g i)
    _ ‚â§ Cf * Cg :=
      mul_le_mul (hCf ‚ü®i, rfl‚ü©) (hCg ‚ü®i, rfl‚ü©) (norm_nonneg _)
        ((norm_nonneg _).trans (hCf ‚ü®i, rfl‚ü©))
#align mem_‚Ñìp.infty_mul Mem‚Ñìp.infty_mul

instance : Mul (lp B ‚àû) where
  mul f g := ‚ü®HMul.hMul (Œ± := ‚àÄ i, B i) _ _ , f.property.infty_mul g.property‚ü©

@[simp]
theorem infty_coeFn_mul (f g : lp B ‚àû) : ‚áë(f * g) = ‚áëf * ‚áëg :=
  rfl
#align lp.infty_coe_fn_mul lp.infty_coeFn_mul

instance nonUnitalRing : NonUnitalRing (lp B ‚àû) :=
  Function.Injective.nonUnitalRing lp.coeFun.coe Subtype.coe_injective (lp.coeFn_zero B ‚àû)
    lp.coeFn_add infty_coeFn_mul lp.coeFn_neg lp.coeFn_sub (fun _ _ => rfl) fun _ _ => rfl

instance nonUnitalNormedRing : NonUnitalNormedRing (lp B ‚àû) :=
  { lp.normedAddCommGroup, lp.nonUnitalRing with
    norm_mul := fun f g =>
      lp.norm_le_of_forall_le (mul_nonneg (norm_nonneg f) (norm_nonneg g)) fun i =>
        calc
          ‚Äñ(f * g) i‚Äñ ‚â§ ‚Äñf i‚Äñ * ‚Äñg i‚Äñ := norm_mul_le _ _
          _ ‚â§ ‚Äñf‚Äñ * ‚Äñg‚Äñ :=
            mul_le_mul (lp.norm_apply_le_norm ENNReal.top_ne_zero f i)
              (lp.norm_apply_le_norm ENNReal.top_ne_zero g i) (norm_nonneg _) (norm_nonneg _) }

-- we also want a `non_unital_normed_comm_ring` instance, but this has to wait for #13719
instance infty_isScalarTower {ùïú} [NormedRing ùïú] [‚àÄ i, Module ùïú (B i)] [‚àÄ i, BoundedSMul ùïú (B i)]
    [‚àÄ i, IsScalarTower ùïú (B i) (B i)] : IsScalarTower ùïú (lp B ‚àû) (lp B ‚àû) :=
  ‚ü®fun r f g => lp.ext <| smul_assoc (N := ‚àÄ i, B i) (Œ± := ‚àÄ i, B i) r (‚áëf) (‚áëg)‚ü©
#align lp.infty_is_scalar_tower lp.infty_isScalarTower

instance infty_sMulCommClass {ùïú} [NormedRing ùïú] [‚àÄ i, Module ùïú (B i)] [‚àÄ i, BoundedSMul ùïú (B i)]
    [‚àÄ i, SMulCommClass ùïú (B i) (B i)] : SMulCommClass ùïú (lp B ‚àû) (lp B ‚àû) :=
  ‚ü®fun r f g => lp.ext <| smul_comm (N := ‚àÄ i, B i) (Œ± := ‚àÄ i, B i) r (‚áëf) (‚áëg)‚ü©
#align lp.infty_smul_comm_class lp.infty_sMulCommClass

section StarRing

variable [‚àÄ i, StarRing (B i)] [‚àÄ i, NormedStarGroup (B i)]

instance inftyStarRing : StarRing (lp B ‚àû) :=
  { lp.instStarAddMonoid with
    star_mul := fun _f _g => ext <| star_mul (R := ‚àÄ i, B i) _ _ }
#align lp.infty_star_ring lp.inftyStarRing

instance inftyCstarRing [‚àÄ i, CstarRing (B i)] : CstarRing (lp B ‚àû) where
  norm_star_mul_self := by
    intro f
    -- ‚ä¢ ‚Äñstar f * f‚Äñ = ‚Äñf‚Äñ * ‚Äñf‚Äñ
    apply le_antisymm
    -- ‚ä¢ ‚Äñstar f * f‚Äñ ‚â§ ‚Äñf‚Äñ * ‚Äñf‚Äñ
    ¬∑ rw [‚Üê sq]
      -- ‚ä¢ ‚Äñstar f * f‚Äñ ‚â§ ‚Äñf‚Äñ ^ 2
      refine' lp.norm_le_of_forall_le (sq_nonneg ‚Äñf‚Äñ) fun i => _
      -- ‚ä¢ ‚Äñ‚Üë(star f * f) i‚Äñ ‚â§ ‚Äñf‚Äñ ^ 2
      simp only [lp.star_apply, CstarRing.norm_star_mul_self, ‚Üê sq, infty_coeFn_mul, Pi.mul_apply]
      -- ‚ä¢ ‚Äñ‚Üëf i‚Äñ ^ 2 ‚â§ ‚Äñf‚Äñ ^ 2
      refine' sq_le_sq' _ (lp.norm_apply_le_norm ENNReal.top_ne_zero _ _)
      -- ‚ä¢ -‚Äñf‚Äñ ‚â§ ‚Äñ‚Üëf i‚Äñ
      linarith [norm_nonneg (f i), norm_nonneg f]
      -- üéâ no goals
    ¬∑ rw [‚Üê sq, ‚Üê Real.le_sqrt (norm_nonneg _) (norm_nonneg _)]
      -- ‚ä¢ ‚Äñf‚Äñ ‚â§ Real.sqrt ‚Äñstar f * f‚Äñ
      refine' lp.norm_le_of_forall_le ‚Äñstar f * f‚Äñ.sqrt_nonneg fun i => _
      -- ‚ä¢ ‚Äñ‚Üëf i‚Äñ ‚â§ Real.sqrt ‚Äñstar f * f‚Äñ
      rw [Real.le_sqrt (norm_nonneg _) (norm_nonneg _), sq, ‚Üê CstarRing.norm_star_mul_self]
      -- ‚ä¢ ‚Äñstar (‚Üëf i) * ‚Üëf i‚Äñ ‚â§ ‚Äñstar f * f‚Äñ
      exact lp.norm_apply_le_norm ENNReal.top_ne_zero (star f * f) i
      -- üéâ no goals
#align lp.infty_cstar_ring lp.inftyCstarRing

end StarRing

end NonUnitalNormedRing

section NormedRing

variable {I : Type*} {B : I ‚Üí Type*} [‚àÄ i, NormedRing (B i)]

instance _root_.PreLp.ring : Ring (PreLp B) :=
  Pi.ring
#align pre_lp.ring PreLp.ring

variable [‚àÄ i, NormOneClass (B i)]

theorem _root_.one_mem‚Ñìp_infty : Mem‚Ñìp (1 : ‚àÄ i, B i) ‚àû :=
  ‚ü®1, by rintro i ‚ü®i, rfl‚ü©; exact norm_one.le‚ü©
         -- ‚ä¢ (fun i => ‚ÄñOfNat.ofNat 1 i‚Äñ) i ‚â§ 1
                            -- üéâ no goals
#align one_mem_‚Ñìp_infty one_mem‚Ñìp_infty

variable (B)

/-- The `ùïú`-subring of elements of `‚àÄ i : Œ±, B i` whose `lp` norm is finite. This is `lp E ‚àû`,
with extra structure. -/
def _root_.lpInftySubring : Subring (PreLp B) :=
  { lp B ‚àû with
    carrier := { f | Mem‚Ñìp f ‚àû }
    one_mem' := one_mem‚Ñìp_infty
    mul_mem' := Mem‚Ñìp.infty_mul }
#align lp_infty_subring lpInftySubring

variable {B}

instance inftyRing : Ring (lp B ‚àû) :=
  (lpInftySubring B).toRing
#align lp.infty_ring lp.inftyRing

theorem _root_.Mem‚Ñìp.infty_pow {f : ‚àÄ i, B i} (hf : Mem‚Ñìp f ‚àû) (n : ‚Ñï) : Mem‚Ñìp (f ^ n) ‚àû :=
  (lpInftySubring B).pow_mem hf n
#align mem_‚Ñìp.infty_pow Mem‚Ñìp.infty_pow

theorem _root_.nat_cast_mem‚Ñìp_infty (n : ‚Ñï) : Mem‚Ñìp (n : ‚àÄ i, B i) ‚àû :=
  natCast_mem (lpInftySubring B) n
#align nat_cast_mem_‚Ñìp_infty nat_cast_mem‚Ñìp_infty

theorem _root_.int_cast_mem‚Ñìp_infty (z : ‚Ñ§) : Mem‚Ñìp (z : ‚àÄ i, B i) ‚àû :=
  coe_int_mem (lpInftySubring B) z
#align int_cast_mem_‚Ñìp_infty int_cast_mem‚Ñìp_infty

@[simp]
theorem infty_coeFn_one : ‚áë(1 : lp B ‚àû) = 1 :=
  rfl
#align lp.infty_coe_fn_one lp.infty_coeFn_one

@[simp]
theorem infty_coeFn_pow (f : lp B ‚àû) (n : ‚Ñï) : ‚áë(f ^ n) = (‚áëf) ^ n :=
  rfl
#align lp.infty_coe_fn_pow lp.infty_coeFn_pow

@[simp]
theorem infty_coeFn_nat_cast (n : ‚Ñï) : ‚áë(n : lp B ‚àû) = n :=
  rfl
#align lp.infty_coe_fn_nat_cast lp.infty_coeFn_nat_cast

@[simp]
theorem infty_coeFn_int_cast (z : ‚Ñ§) : ‚áë(z : lp B ‚àû) = z :=
  rfl
#align lp.infty_coe_fn_int_cast lp.infty_coeFn_int_cast

instance [Nonempty I] : NormOneClass (lp B ‚àû) where
  norm_one := by simp_rw [lp.norm_eq_ciSup, infty_coeFn_one, Pi.one_apply, norm_one, ciSup_const]
                 -- üéâ no goals

instance inftyNormedRing : NormedRing (lp B ‚àû) :=
  { lp.inftyRing, lp.nonUnitalNormedRing with }
#align lp.infty_normed_ring lp.inftyNormedRing

end NormedRing

section NormedCommRing

variable {I : Type*} {B : I ‚Üí Type*} [‚àÄ i, NormedCommRing (B i)] [‚àÄ i, NormOneClass (B i)]

instance inftyCommRing : CommRing (lp B ‚àû) :=
  { lp.inftyRing with
    mul_comm := fun f g => by ext; simp only [lp.infty_coeFn_mul, Pi.mul_apply, mul_comm] }
                              -- ‚ä¢ ‚Üë(f * g) x‚úù = ‚Üë(g * f) x‚úù
                                   -- üéâ no goals
#align lp.infty_comm_ring lp.inftyCommRing

instance inftyNormedCommRing : NormedCommRing (lp B ‚àû) :=
  { lp.inftyCommRing, lp.inftyNormedRing with }
#align lp.infty_normed_comm_ring lp.inftyNormedCommRing

end NormedCommRing

section Algebra

variable {I : Type*} {ùïú : Type*} {B : I ‚Üí Type*}

variable [NormedField ùïú] [‚àÄ i, NormedRing (B i)] [‚àÄ i, NormedAlgebra ùïú (B i)]

/-- A variant of `Pi.algebra` that lean can't find otherwise. -/
instance _root_.Pi.algebraOfNormedAlgebra : Algebra ùïú (‚àÄ i, B i) :=
  @Pi.algebra I ùïú B _ _ fun _ => NormedAlgebra.toAlgebra
#align pi.algebra_of_normed_algebra Pi.algebraOfNormedAlgebra

instance _root_.PreLp.algebra : Algebra ùïú (PreLp B) :=
  Pi.algebraOfNormedAlgebra
#align pre_lp.algebra PreLp.algebra

variable [‚àÄ i, NormOneClass (B i)]

theorem _root_.algebraMap_mem‚Ñìp_infty (k : ùïú) : Mem‚Ñìp (algebraMap ùïú (‚àÄ i, B i) k) ‚àû := by
  rw [Algebra.algebraMap_eq_smul_one]
  -- ‚ä¢ Mem‚Ñìp (k ‚Ä¢ 1) ‚ä§
  exact (one_mem‚Ñìp_infty.const_smul k : Mem‚Ñìp (k ‚Ä¢ (1 : ‚àÄ i, B i)) ‚àû)
  -- üéâ no goals
#align algebra_map_mem_‚Ñìp_infty algebraMap_mem‚Ñìp_infty

variable (ùïú B)

/-- The `ùïú`-subalgebra of elements of `‚àÄ i : Œ±, B i` whose `lp` norm is finite. This is `lp E ‚àû`,
with extra structure. -/
def _root_.lpInftySubalgebra : Subalgebra ùïú (PreLp B) :=
  { lpInftySubring B with
    carrier := { f | Mem‚Ñìp f ‚àû }
    algebraMap_mem' := algebraMap_mem‚Ñìp_infty }
#align lp_infty_subalgebra lpInftySubalgebra

variable {ùïú B}

instance inftyNormedAlgebra : NormedAlgebra ùïú (lp B ‚àû) :=
  { (lpInftySubalgebra ùïú B).algebra, (lp.instNormedSpace : NormedSpace ùïú (lp B ‚àû)) with }
#align lp.infty_normed_algebra lp.inftyNormedAlgebra

end Algebra

section Single

variable {ùïú : Type*} [NormedRing ùïú] [‚àÄ i, Module ùïú (E i)] [‚àÄ i, BoundedSMul ùïú (E i)]

variable [DecidableEq Œ±]

/-- The element of `lp E p` which is `a : E i` at the index `i`, and zero elsewhere. -/
protected def single (p) (i : Œ±) (a : E i) : lp E p :=
  ‚ü®fun j => if h : j = i then Eq.ndrec a h.symm else 0, by
    refine' (mem‚Ñìp_zero _).of_exponent_ge (zero_le p)
    -- ‚ä¢ Set.Finite {i_1 | (fun j => if h : j = i then (_ : i = j) ‚ñ∏ a else 0) i_1 ‚â† 0}
    refine' (Set.finite_singleton i).subset _
    -- ‚ä¢ {i_1 | (fun j => if h : j = i then (_ : i = j) ‚ñ∏ a else 0) i_1 ‚â† 0} ‚äÜ {i}
    intro j
    -- ‚ä¢ j ‚àà {i_1 | (fun j => if h : j = i then (_ : i = j) ‚ñ∏ a else 0) i_1 ‚â† 0} ‚Üí j  ‚Ä¶
    simp only [forall_exists_index, Set.mem_singleton_iff, Ne.def, dite_eq_right_iff,
      Set.mem_setOf_eq, not_forall]
    rintro rfl
    -- ‚ä¢ ¬¨(_ : j = j) ‚ñ∏ a = 0 ‚Üí j = j
    simp‚ü©
    -- üéâ no goals
#align lp.single lp.single

protected theorem single_apply (p) (i : Œ±) (a : E i) (j : Œ±) :
    lp.single p i a j = if h : j = i then Eq.ndrec a h.symm else 0 :=
  rfl
#align lp.single_apply lp.single_apply

protected theorem single_apply_self (p) (i : Œ±) (a : E i) : lp.single p i a i = a := by
  rw [lp.single_apply, dif_pos rfl]
  -- üéâ no goals
#align lp.single_apply_self lp.single_apply_self

protected theorem single_apply_ne (p) (i : Œ±) (a : E i) {j : Œ±} (hij : j ‚â† i) :
    lp.single p i a j = 0 := by
  rw [lp.single_apply, dif_neg hij]
  -- üéâ no goals
#align lp.single_apply_ne lp.single_apply_ne

@[simp]
protected theorem single_neg (p) (i : Œ±) (a : E i) : lp.single p i (-a) = -lp.single p i a := by
  refine' ext (funext (fun (j : Œ±) => _))
  -- ‚ä¢ ‚Üë(lp.single p i (-a)) j = ‚Üë(-lp.single p i a) j
  by_cases hi : j = i
  -- ‚ä¢ ‚Üë(lp.single p i (-a)) j = ‚Üë(-lp.single p i a) j
  ¬∑ subst hi
    -- ‚ä¢ ‚Üë(lp.single p j (-a)) j = ‚Üë(-lp.single p j a) j
    simp [lp.single_apply_self]
    -- üéâ no goals
  ¬∑ simp [lp.single_apply_ne p i _ hi]
    -- üéâ no goals
#align lp.single_neg lp.single_neg

@[simp]
protected theorem single_smul (p) (i : Œ±) (a : E i) (c : ùïú) :
    lp.single p i (c ‚Ä¢ a) = c ‚Ä¢ lp.single p i a := by
  refine' ext (funext (fun (j : Œ±) => _))
  -- ‚ä¢ ‚Üë(lp.single p i (c ‚Ä¢ a)) j = ‚Üë(c ‚Ä¢ lp.single p i a) j
  by_cases hi : j = i
  -- ‚ä¢ ‚Üë(lp.single p i (c ‚Ä¢ a)) j = ‚Üë(c ‚Ä¢ lp.single p i a) j
  ¬∑ subst hi
    -- ‚ä¢ ‚Üë(lp.single p j (c ‚Ä¢ a)) j = ‚Üë(c ‚Ä¢ lp.single p j a) j
    dsimp
    -- ‚ä¢ ‚Üë(lp.single p j (c ‚Ä¢ a)) j = c ‚Ä¢ ‚Üë(lp.single p j a) j
    simp [lp.single_apply_self]
    -- üéâ no goals
  ¬∑ dsimp
    -- ‚ä¢ ‚Üë(lp.single p i (c ‚Ä¢ a)) j = c ‚Ä¢ ‚Üë(lp.single p i a) j
    simp [lp.single_apply_ne p i _ hi]
    -- üéâ no goals
#align lp.single_smul lp.single_smul

protected theorem norm_sum_single (hp : 0 < p.toReal) (f : ‚àÄ i, E i) (s : Finset Œ±) :
    ‚Äñ‚àë i in s, lp.single p i (f i)‚Äñ ^ p.toReal = ‚àë i in s, ‚Äñf i‚Äñ ^ p.toReal := by
  refine' (hasSum_norm hp (‚àë i in s, lp.single p i (f i))).unique _
  -- ‚ä¢ HasSum (fun i => ‚Äñ‚Üë(‚àë i in s, lp.single p i (f i)) i‚Äñ ^ ENNReal.toReal p) (‚àë ‚Ä¶
  simp only [lp.single_apply, coeFn_sum, Finset.sum_apply, Finset.sum_dite_eq]
  -- ‚ä¢ HasSum (fun i => ‚Äñif i ‚àà s then f i else 0‚Äñ ^ ENNReal.toReal p) (‚àë i in s, ‚Äñ ‚Ä¶
  have h : ‚àÄ (i) (_ : i ‚àâ s), ‚Äñite (i ‚àà s) (f i) 0‚Äñ ^ p.toReal = 0 := by
    intro i hi
    simp [if_neg hi, Real.zero_rpow hp.ne']
  have h' : ‚àÄ i ‚àà s, ‚Äñf i‚Äñ ^ p.toReal = ‚Äñite (i ‚àà s) (f i) 0‚Äñ ^ p.toReal := by
    intro i hi
    rw [if_pos hi]
  simpa [Finset.sum_congr rfl h'] using hasSum_sum_of_ne_finset_zero h
  -- üéâ no goals
#align lp.norm_sum_single lp.norm_sum_single

protected theorem norm_single (hp : 0 < p.toReal) (f : ‚àÄ i, E i) (i : Œ±) :
    ‚Äñlp.single p i (f i)‚Äñ = ‚Äñf i‚Äñ := by
  refine' Real.rpow_left_injOn hp.ne' (norm_nonneg' _) (norm_nonneg _) _
  -- ‚ä¢ (fun y => y ^ ENNReal.toReal p) ‚Äñlp.single p i (f i)‚Äñ = (fun y => y ^ ENNRea ‚Ä¶
  simpa using lp.norm_sum_single hp f {i}
  -- üéâ no goals
#align lp.norm_single lp.norm_single

protected theorem norm_sub_norm_compl_sub_single (hp : 0 < p.toReal) (f : lp E p) (s : Finset Œ±) :
    ‚Äñf‚Äñ ^ p.toReal - ‚Äñf - ‚àë i in s, lp.single p i (f i)‚Äñ ^ p.toReal =
      ‚àë i in s, ‚Äñf i‚Äñ ^ p.toReal := by
  refine' ((hasSum_norm hp f).sub (hasSum_norm hp (f - ‚àë i in s, lp.single p i (f i)))).unique _
  -- ‚ä¢ HasSum (fun b => ‚Äñ‚Üëf b‚Äñ ^ ENNReal.toReal p - ‚Äñ‚Üë(f - ‚àë i in s, lp.single p i  ‚Ä¶
  let F : Œ± ‚Üí ‚Ñù := fun i => ‚Äñf i‚Äñ ^ p.toReal - ‚Äñ(f - ‚àë i in s, lp.single p i (f i)) i‚Äñ ^ p.toReal
  -- ‚ä¢ HasSum (fun b => ‚Äñ‚Üëf b‚Äñ ^ ENNReal.toReal p - ‚Äñ‚Üë(f - ‚àë i in s, lp.single p i  ‚Ä¶
  have hF : ‚àÄ (i) (_ : i ‚àâ s), F i = 0 := by
    intro i hi
    suffices ‚Äñf i‚Äñ ^ p.toReal - ‚Äñf i - ite (i ‚àà s) (f i) 0‚Äñ ^ p.toReal = 0 by
      simpa only [coeFn_sum, lp.single_apply, coeFn_sub, Pi.sub_apply, Finset.sum_apply,
        Finset.sum_dite_eq] using this
    simp only [if_neg hi, sub_zero, sub_self]
  have hF' : ‚àÄ i ‚àà s, F i = ‚Äñf i‚Äñ ^ p.toReal := by
    intro i hi
    simp only [coeFn_sum, lp.single_apply, if_pos hi, sub_self, eq_self_iff_true, coeFn_sub,
      Pi.sub_apply, Finset.sum_apply, Finset.sum_dite_eq, sub_eq_self]
    simp [Real.zero_rpow hp.ne']
  have : HasSum F (‚àë i in s, F i) := hasSum_sum_of_ne_finset_zero hF
  -- ‚ä¢ HasSum (fun b => ‚Äñ‚Üëf b‚Äñ ^ ENNReal.toReal p - ‚Äñ‚Üë(f - ‚àë i in s, lp.single p i  ‚Ä¶
  rwa [Finset.sum_congr rfl hF'] at this
  -- üéâ no goals
#align lp.norm_sub_norm_compl_sub_single lp.norm_sub_norm_compl_sub_single

protected theorem norm_compl_sum_single (hp : 0 < p.toReal) (f : lp E p) (s : Finset Œ±) :
    ‚Äñf - ‚àë i in s, lp.single p i (f i)‚Äñ ^ p.toReal = ‚Äñf‚Äñ ^ p.toReal - ‚àë i in s, ‚Äñf i‚Äñ ^ p.toReal :=
  by linarith [lp.norm_sub_norm_compl_sub_single hp f s]
     -- üéâ no goals
#align lp.norm_compl_sum_single lp.norm_compl_sum_single

/-- The canonical finitely-supported approximations to an element `f` of `lp` converge to it, in the
`lp` topology. -/
protected theorem hasSum_single [Fact (1 ‚â§ p)] (hp : p ‚â† ‚ä§) (f : lp E p) :
    HasSum (fun i : Œ± => lp.single p i (f i : E i)) f := by
  have hp‚ÇÄ : 0 < p := zero_lt_one.trans_le Fact.out
  -- ‚ä¢ HasSum (fun i => lp.single p i (‚Üëf i)) f
  have hp' : 0 < p.toReal := ENNReal.toReal_pos hp‚ÇÄ.ne' hp
  -- ‚ä¢ HasSum (fun i => lp.single p i (‚Üëf i)) f
  have := lp.hasSum_norm hp' f
  -- ‚ä¢ HasSum (fun i => lp.single p i (‚Üëf i)) f
  rw [HasSum, Metric.tendsto_nhds] at this ‚ä¢
  -- ‚ä¢ ‚àÄ (Œµ : ‚Ñù), Œµ > 0 ‚Üí ‚àÄ·∂† (x : Finset Œ±) in Filter.atTop, dist (‚àë b in x, lp.sin ‚Ä¶
  intro Œµ hŒµ
  -- ‚ä¢ ‚àÄ·∂† (x : Finset Œ±) in Filter.atTop, dist (‚àë b in x, lp.single p b (‚Üëf b)) f < Œµ
  refine' (this _ (Real.rpow_pos_of_pos hŒµ p.toReal)).mono _
  -- ‚ä¢ ‚àÄ (x : Finset Œ±), dist (‚àë b in x, ‚Äñ‚Üëf b‚Äñ ^ ENNReal.toReal p) (‚Äñf‚Äñ ^ ENNReal. ‚Ä¶
  intro s hs
  -- ‚ä¢ dist (‚àë b in s, lp.single p b (‚Üëf b)) f < Œµ
  rw [‚Üê Real.rpow_lt_rpow_iff dist_nonneg (le_of_lt hŒµ) hp']
  -- ‚ä¢ dist (‚àë b in s, lp.single p b (‚Üëf b)) f ^ ENNReal.toReal p < Œµ ^ ENNReal.toR ‚Ä¶
  rw [dist_comm] at hs
  -- ‚ä¢ dist (‚àë b in s, lp.single p b (‚Üëf b)) f ^ ENNReal.toReal p < Œµ ^ ENNReal.toR ‚Ä¶
  simp only [dist_eq_norm, Real.norm_eq_abs] at hs ‚ä¢
  -- ‚ä¢ ‚Äñ‚àë x in s, lp.single p x (‚Üëf x) - f‚Äñ ^ ENNReal.toReal p < Œµ ^ ENNReal.toReal p
  have H : ‚Äñ(‚àë i in s, lp.single p i (f i : E i)) - f‚Äñ ^ p.toReal =
      ‚Äñf‚Äñ ^ p.toReal - ‚àë i in s, ‚Äñf i‚Äñ ^ p.toReal := by
    simpa only [coeFn_neg, Pi.neg_apply, lp.single_neg, Finset.sum_neg_distrib, neg_sub_neg,
      norm_neg, _root_.norm_neg] using lp.norm_compl_sum_single hp' (-f) s
  rw [‚Üê H] at hs
  -- ‚ä¢ ‚Äñ‚àë x in s, lp.single p x (‚Üëf x) - f‚Äñ ^ ENNReal.toReal p < Œµ ^ ENNReal.toReal p
  have : |‚Äñ(‚àë i in s, lp.single p i (f i : E i)) - f‚Äñ ^ p.toReal| =
      ‚Äñ(‚àë i in s, lp.single p i (f i : E i)) - f‚Äñ ^ p.toReal := by
    simp only [Real.abs_rpow_of_nonneg (norm_nonneg _), abs_norm]
  exact this ‚ñ∏ hs
  -- üéâ no goals
#align lp.has_sum_single lp.hasSum_single

end Single

section Topology

open Filter

open scoped Topology uniformity

/-- The coercion from `lp E p` to `‚àÄ i, E i` is uniformly continuous. -/
theorem uniformContinuous_coe [_i : Fact (1 ‚â§ p)] :
    UniformContinuous (Œ± := lp E p) ((‚Üë) : lp E p ‚Üí ‚àÄ i, E i) := by
  have hp : p ‚â† 0 := (zero_lt_one.trans_le _i.elim).ne'
  -- ‚ä¢ UniformContinuous Subtype.val
  rw [uniformContinuous_pi]
  -- ‚ä¢ ‚àÄ (i : Œ±), UniformContinuous fun x => ‚Üëx i
  intro i
  -- ‚ä¢ UniformContinuous fun x => ‚Üëx i
  rw [NormedAddCommGroup.uniformity_basis_dist.uniformContinuous_iff
    NormedAddCommGroup.uniformity_basis_dist]
  intro Œµ hŒµ
  -- ‚ä¢ ‚àÉ j, 0 < j ‚àß ‚àÄ (x y : { x // x ‚àà lp E p }), (x, y) ‚àà {p_1 | ‚Äñp_1.fst - p_1.s ‚Ä¶
  refine' ‚ü®Œµ, hŒµ, _‚ü©
  -- ‚ä¢ ‚àÄ (x y : { x // x ‚àà lp E p }), (x, y) ‚àà {p_1 | ‚Äñp_1.fst - p_1.snd‚Äñ < Œµ} ‚Üí (‚Üë ‚Ä¶
  rintro f g (hfg : ‚Äñf - g‚Äñ < Œµ)
  -- ‚ä¢ (‚Üëf i, ‚Üëg i) ‚àà {p | ‚Äñp.fst - p.snd‚Äñ < Œµ}
  have : ‚Äñf i - g i‚Äñ ‚â§ ‚Äñf - g‚Äñ := norm_apply_le_norm hp (f - g) i
  -- ‚ä¢ (‚Üëf i, ‚Üëg i) ‚àà {p | ‚Äñp.fst - p.snd‚Äñ < Œµ}
  exact this.trans_lt hfg
  -- üéâ no goals
#align lp.uniform_continuous_coe lp.uniformContinuous_coe

variable {Œπ : Type*} {l : Filter Œπ} [Filter.NeBot l]

theorem norm_apply_le_of_tendsto {C : ‚Ñù} {F : Œπ ‚Üí lp E ‚àû} (hCF : ‚àÄ·∂† k in l, ‚ÄñF k‚Äñ ‚â§ C)
    {f : ‚àÄ a, E a} (hf : Tendsto (id fun i => F i : Œπ ‚Üí ‚àÄ a, E a) l (ùìù f)) (a : Œ±) : ‚Äñf a‚Äñ ‚â§ C := by
  have : Tendsto (fun k => ‚ÄñF k a‚Äñ) l (ùìù ‚Äñf a‚Äñ) :=
    (Tendsto.comp (continuous_apply a).continuousAt hf).norm
  refine' le_of_tendsto this (hCF.mono _)
  -- ‚ä¢ ‚àÄ (x : Œπ), ‚ÄñF x‚Äñ ‚â§ C ‚Üí ‚Äñ‚Üë(F x) a‚Äñ ‚â§ C
  intro k hCFk
  -- ‚ä¢ ‚Äñ‚Üë(F k) a‚Äñ ‚â§ C
  exact (norm_apply_le_norm ENNReal.top_ne_zero (F k) a).trans hCFk
  -- üéâ no goals
#align lp.norm_apply_le_of_tendsto lp.norm_apply_le_of_tendsto

variable [_i : Fact (1 ‚â§ p)]

theorem sum_rpow_le_of_tendsto (hp : p ‚â† ‚àû) {C : ‚Ñù} {F : Œπ ‚Üí lp E p} (hCF : ‚àÄ·∂† k in l, ‚ÄñF k‚Äñ ‚â§ C)
    {f : ‚àÄ a, E a} (hf : Tendsto (id fun i => F i : Œπ ‚Üí ‚àÄ a, E a) l (ùìù f)) (s : Finset Œ±) :
    ‚àë i : Œ± in s, ‚Äñf i‚Äñ ^ p.toReal ‚â§ C ^ p.toReal := by
  have hp' : p ‚â† 0 := (zero_lt_one.trans_le _i.elim).ne'
  -- ‚ä¢ ‚àë i in s, ‚Äñf i‚Äñ ^ ENNReal.toReal p ‚â§ C ^ ENNReal.toReal p
  have hp'' : 0 < p.toReal := ENNReal.toReal_pos hp' hp
  -- ‚ä¢ ‚àë i in s, ‚Äñf i‚Äñ ^ ENNReal.toReal p ‚â§ C ^ ENNReal.toReal p
  let G : (‚àÄ a, E a) ‚Üí ‚Ñù := fun f => ‚àë a in s, ‚Äñf a‚Äñ ^ p.toReal
  -- ‚ä¢ ‚àë i in s, ‚Äñf i‚Äñ ^ ENNReal.toReal p ‚â§ C ^ ENNReal.toReal p
  have hG : Continuous G := by
    refine' continuous_finset_sum s _
    intro a _
    have : Continuous fun f : ‚àÄ a, E a => f a := continuous_apply a
    exact this.norm.rpow_const fun _ => Or.inr hp''.le
  refine' le_of_tendsto (hG.continuousAt.tendsto.comp hf) _
  -- ‚ä¢ ‚àÄ·∂† (c : Œπ) in l, (G ‚àò id fun i => ‚Üë(F i)) c ‚â§ C ^ ENNReal.toReal p
  refine' hCF.mono _
  -- ‚ä¢ ‚àÄ (x : Œπ), ‚ÄñF x‚Äñ ‚â§ C ‚Üí (G ‚àò id fun i => ‚Üë(F i)) x ‚â§ C ^ ENNReal.toReal p
  intro k hCFk
  -- ‚ä¢ (G ‚àò id fun i => ‚Üë(F i)) k ‚â§ C ^ ENNReal.toReal p
  refine' (lp.sum_rpow_le_norm_rpow hp'' (F k) s).trans _
  -- ‚ä¢ ‚ÄñF k‚Äñ ^ ENNReal.toReal p ‚â§ C ^ ENNReal.toReal p
  exact Real.rpow_le_rpow (norm_nonneg _) hCFk hp''.le
  -- üéâ no goals
#align lp.sum_rpow_le_of_tendsto lp.sum_rpow_le_of_tendsto

/-- "Semicontinuity of the `lp` norm": If all sufficiently large elements of a sequence in `lp E p`
 have `lp` norm `‚â§ C`, then the pointwise limit, if it exists, also has `lp` norm `‚â§ C`. -/
theorem norm_le_of_tendsto {C : ‚Ñù} {F : Œπ ‚Üí lp E p} (hCF : ‚àÄ·∂† k in l, ‚ÄñF k‚Äñ ‚â§ C) {f : lp E p}
    (hf : Tendsto (id fun i => F i : Œπ ‚Üí ‚àÄ a, E a) l (ùìù f)) : ‚Äñf‚Äñ ‚â§ C := by
  obtain ‚ü®i, hi‚ü© := hCF.exists
  -- ‚ä¢ ‚Äñf‚Äñ ‚â§ C
  have hC : 0 ‚â§ C := (norm_nonneg _).trans hi
  -- ‚ä¢ ‚Äñf‚Äñ ‚â§ C
  rcases eq_top_or_lt_top p with (rfl | hp)
  -- ‚ä¢ ‚Äñf‚Äñ ‚â§ C
  ¬∑ apply norm_le_of_forall_le hC
    -- ‚ä¢ ‚àÄ (i : Œ±), ‚Äñ‚Üëf i‚Äñ ‚â§ C
    exact norm_apply_le_of_tendsto hCF hf
    -- üéâ no goals
  ¬∑ have : 0 < p := zero_lt_one.trans_le _i.elim
    -- ‚ä¢ ‚Äñf‚Äñ ‚â§ C
    have hp' : 0 < p.toReal := ENNReal.toReal_pos this.ne' hp.ne
    -- ‚ä¢ ‚Äñf‚Äñ ‚â§ C
    apply norm_le_of_forall_sum_le hp' hC
    -- ‚ä¢ ‚àÄ (s : Finset Œ±), ‚àë i in s, ‚Äñ‚Üëf i‚Äñ ^ ENNReal.toReal p ‚â§ C ^ ENNReal.toReal p
    exact sum_rpow_le_of_tendsto hp.ne hCF hf
    -- üéâ no goals
#align lp.norm_le_of_tendsto lp.norm_le_of_tendsto

/-- If `f` is the pointwise limit of a bounded sequence in `lp E p`, then `f` is in `lp E p`. -/
theorem mem‚Ñìp_of_tendsto {F : Œπ ‚Üí lp E p} (hF : Metric.Bounded (Set.range F)) {f : ‚àÄ a, E a}
    (hf : Tendsto (id fun i => F i : Œπ ‚Üí ‚àÄ a, E a) l (ùìù f)) : Mem‚Ñìp f p := by
  obtain ‚ü®C, _, hCF'‚ü© := hF.exists_pos_norm_le
  -- ‚ä¢ Mem‚Ñìp f p
  have hCF : ‚àÄ k, ‚ÄñF k‚Äñ ‚â§ C := fun k => hCF' _ ‚ü®k, rfl‚ü©
  -- ‚ä¢ Mem‚Ñìp f p
  rcases eq_top_or_lt_top p with (rfl | hp)
  -- ‚ä¢ Mem‚Ñìp f ‚ä§
  ¬∑ apply mem‚Ñìp_infty
    -- ‚ä¢ BddAbove (Set.range fun i => ‚Äñf i‚Äñ)
    use C
    -- ‚ä¢ C ‚àà upperBounds (Set.range fun i => ‚Äñf i‚Äñ)
    rintro _ ‚ü®a, rfl‚ü©
    -- ‚ä¢ (fun i => ‚Äñf i‚Äñ) a ‚â§ C
    refine' norm_apply_le_of_tendsto (eventually_of_forall hCF) hf a
    -- üéâ no goals
  ¬∑ apply mem‚Ñìp_gen'
    -- ‚ä¢ ‚àÄ (s : Finset Œ±), ‚àë i in s, ‚Äñf i‚Äñ ^ ENNReal.toReal p ‚â§ ?intro.intro.inr.C
    exact sum_rpow_le_of_tendsto hp.ne (eventually_of_forall hCF) hf
    -- üéâ no goals
#align lp.mem_‚Ñìp_of_tendsto lp.mem‚Ñìp_of_tendsto

/-- If a sequence is Cauchy in the `lp E p` topology and pointwise convergent to an element `f` of
`lp E p`, then it converges to `f` in the `lp E p` topology. -/
theorem tendsto_lp_of_tendsto_pi {F : ‚Ñï ‚Üí lp E p} (hF : CauchySeq F) {f : lp E p}
    (hf : Tendsto (id fun i => F i : ‚Ñï ‚Üí ‚àÄ a, E a) atTop (ùìù f)) : Tendsto F atTop (ùìù f) := by
  rw [Metric.nhds_basis_closedBall.tendsto_right_iff]
  -- ‚ä¢ ‚àÄ (i : ‚Ñù), 0 < i ‚Üí ‚àÄ·∂† (x : ‚Ñï) in atTop, F x ‚àà Metric.closedBall f i
  intro Œµ hŒµ
  -- ‚ä¢ ‚àÄ·∂† (x : ‚Ñï) in atTop, F x ‚àà Metric.closedBall f Œµ
  have hŒµ' : { p : lp E p √ó lp E p | ‚Äñp.1 - p.2‚Äñ < Œµ } ‚àà uniformity (lp E p) :=
    NormedAddCommGroup.uniformity_basis_dist.mem_of_mem hŒµ
  refine' (hF.eventually_eventually hŒµ').mono _
  -- ‚ä¢ ‚àÄ (x : ‚Ñï), (‚àÄ·∂† (l : ‚Ñï) in atTop, (F x, F l) ‚àà {p_1 | ‚Äñp_1.fst - p_1.snd‚Äñ < Œµ ‚Ä¶
  rintro n (hn : ‚àÄ·∂† l in atTop, ‚Äñ(fun f => F n - f) (F l)‚Äñ < Œµ)
  -- ‚ä¢ F n ‚àà Metric.closedBall f Œµ
  refine' norm_le_of_tendsto (hn.mono fun k hk => hk.le) _
  -- ‚ä¢ Tendsto (id fun i => ‚Üë((fun f => F n - f) (F i))) atTop (ùìù ‚Üë(F n - f))
  rw [tendsto_pi_nhds]
  -- ‚ä¢ ‚àÄ (x : Œ±), Tendsto (fun i => id (fun i => ‚Üë((fun f => F n - f) (F i))) i x)  ‚Ä¶
  intro a
  -- ‚ä¢ Tendsto (fun i => id (fun i => ‚Üë((fun f => F n - f) (F i))) i a) atTop (ùìù (‚Üë ‚Ä¶
  exact (hf.apply a).const_sub (F n a)
  -- üéâ no goals
#align lp.tendsto_lp_of_tendsto_pi lp.tendsto_lp_of_tendsto_pi

variable [‚àÄ a, CompleteSpace (E a)]

instance completeSpace : CompleteSpace (lp E p) :=
  Metric.complete_of_cauchySeq_tendsto (by
    intro F hF
    -- ‚ä¢ ‚àÉ a, Tendsto F atTop (ùìù a)
    -- A Cauchy sequence in `lp E p` is pointwise convergent; let `f` be the pointwise limit.
    obtain ‚ü®f, hf‚ü© := cauchySeq_tendsto_of_complete
      ((uniformContinuous_coe (p := p)).comp_cauchySeq hF)
    -- Since the Cauchy sequence is bounded, its pointwise limit `f` is in `lp E p`.
    have hf' : Mem‚Ñìp f p := mem‚Ñìp_of_tendsto hF.bounded_range hf
    -- ‚ä¢ ‚àÉ a, Tendsto F atTop (ùìù a)
    -- And therefore `f` is its limit in the `lp E p` topology as well as pointwise.
    exact ‚ü®‚ü®f, hf'‚ü©, tendsto_lp_of_tendsto_pi hF hf‚ü©)
    -- üéâ no goals

end Topology

end lp

section Lipschitz

open ENNReal lp

lemma LipschitzWith.uniformly_bounded [PseudoMetricSpace Œ±] (g : Œ± ‚Üí Œπ ‚Üí ‚Ñù) {K : ‚Ñù‚â•0}
    (hg : ‚àÄ i, LipschitzWith K (g ¬∑ i)) (a‚ÇÄ : Œ±) (hga‚ÇÄb : Mem‚Ñìp (g a‚ÇÄ) ‚àû) (a : Œ±) :
    Mem‚Ñìp (g a) ‚àû := by
  rcases hga‚ÇÄb with ‚ü®M, hM‚ü©
  -- ‚ä¢ Mem‚Ñìp (g a) ‚ä§
  use ‚ÜëK * dist a a‚ÇÄ + M
  -- ‚ä¢ ‚ÜëK * dist a a‚ÇÄ + M ‚àà upperBounds (Set.range fun i => ‚Äñg a i‚Äñ)
  rintro - ‚ü®i, rfl‚ü©
  -- ‚ä¢ (fun i => ‚Äñg a i‚Äñ) i ‚â§ ‚ÜëK * dist a a‚ÇÄ + M
  calc
    |g a i| = |g a i - g a‚ÇÄ i + g a‚ÇÄ i| := by simp
    _ ‚â§ |g a i - g a‚ÇÄ i| + |g a‚ÇÄ i| := abs_add _ _
    _ ‚â§ ‚ÜëK * dist a a‚ÇÄ + M := by
        gcongr
        ¬∑ exact lipschitzWith_iff_dist_le_mul.1 (hg i) a a‚ÇÄ
        ¬∑ exact hM ‚ü®i, rfl‚ü©

theorem LipschitzOnWith.coordinate [PseudoMetricSpace Œ±] (f : Œ± ‚Üí ‚Ñì^‚àû(Œπ)) (s : Set Œ±) (K : ‚Ñù‚â•0) :
    LipschitzOnWith K f s ‚Üî ‚àÄ i : Œπ, LipschitzOnWith K (fun a : Œ± ‚Ü¶ f a i) s := by
  simp_rw [lipschitzOnWith_iff_dist_le_mul]
  -- ‚ä¢ (‚àÄ (x : Œ±), x ‚àà s ‚Üí ‚àÄ (y : Œ±), y ‚àà s ‚Üí dist (f x) (f y) ‚â§ ‚ÜëK * dist x y) ‚Üî ‚àÄ ‚Ä¶
  constructor
  -- ‚ä¢ (‚àÄ (x : Œ±), x ‚àà s ‚Üí ‚àÄ (y : Œ±), y ‚àà s ‚Üí dist (f x) (f y) ‚â§ ‚ÜëK * dist x y) ‚Üí ‚àÄ ‚Ä¶
  ¬∑ intro hfl i x hx y hy
    -- ‚ä¢ dist (‚Üë(f x) i) (‚Üë(f y) i) ‚â§ ‚ÜëK * dist x y
    calc
      dist (f x i) (f y i) ‚â§ dist (f x) (f y) := lp.norm_apply_le_norm top_ne_zero (f x - f y) i
      _ ‚â§ K * dist x y := hfl x hx y hy
  ¬∑ intro hgl x hx y hy
    -- ‚ä¢ dist (f x) (f y) ‚â§ ‚ÜëK * dist x y
    apply lp.norm_le_of_forall_le; positivity
    -- ‚ä¢ 0 ‚â§ ‚ÜëK * dist x y
                                   -- ‚ä¢ ‚àÄ (i : Œπ), ‚Äñ‚Üë(f x - f y) i‚Äñ ‚â§ ‚ÜëK * dist x y
    intro i
    -- ‚ä¢ ‚Äñ‚Üë(f x - f y) i‚Äñ ‚â§ ‚ÜëK * dist x y
    apply hgl i x hx y hy
    -- üéâ no goals

theorem LipschitzWith.coordinate [PseudoMetricSpace Œ±] {f : Œ± ‚Üí ‚Ñì^‚àû(Œπ)} (K : ‚Ñù‚â•0) :
    LipschitzWith K f ‚Üî ‚àÄ i : Œπ, LipschitzWith K (fun a : Œ± ‚Ü¶ f a i) := by
  simp_rw [‚Üê lipschitz_on_univ]
  -- ‚ä¢ LipschitzOnWith K f Set.univ ‚Üî ‚àÄ (i : Œπ), LipschitzOnWith K (fun a => ‚Üë(f a) ‚Ä¶
  apply LipschitzOnWith.coordinate
  -- üéâ no goals

end Lipschitz
