/-
Copyright (c) 2025 Chris Birkbeck. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Birkbeck
-/
import Mathlib.Algebra.Order.Ring.Star
import Mathlib.Analysis.CStarAlgebra.Classes
import Mathlib.Analysis.NormedSpace.FunctionSeries
import Mathlib.Analysis.SpecialFunctions.Log.Summable
import Mathlib.Topology.Algebra.InfiniteSum.UniformOn

/-!
# Uniform convergence of products of functions

We gather some results about the uniform convergence of infinite products, in particular those of
the form `‚àè' i, (1 + f i x)` for a sequence `f` of complex valued functions.
-/

open Filter Function Complex Finset Topology

variable {Œ± Œ≤ Œπ : Type*} [UniformSpace Œ≤] [AddGroup Œ≤] [IsUniformAddGroup Œ≤] [LinearOrder Œ≤]
  [OrderTopology Œ≤] [AddLeftMono Œ≤] [AddRightMono Œ≤]
section cexp_clog

/- These next three results feel like they should go elsewhere, but find_home says to leave them
here. -/
lemma TendstoUniformlyOn.eventually_forall_lt {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {p : Filter Œπ} {g : Œ± ‚Üí Œ≤}
    {K : Set Œ±} {u v : Œ≤} (huv : u < v) (hf : TendstoUniformlyOn f g p K) (hg : ‚àÄ x ‚àà K, g x ‚â§ u) :
    ‚àÄ·∂† i in p, ‚àÄ x ‚àà K, f i x < v := by
  simp only [tendstoUniformlyOn_iff_tendsto, uniformity_eq_comap_neg_add_nhds_zero,
    tendsto_iff_eventually, eventually_comap, Prod.forall] at *
  conv at hf => enter [2]; rw [eventually_iff_exists_mem]
  have hf2 := hf (fun x ‚Ü¶ -x.1 + x.2 < -u + v) ‚ü®_, (isOpen_gt' (-u + v)).mem_nhds (by simp [huv]),
    fun y hy a b hab => (hab.symm ‚ñ∏ hy :)‚ü©
  filter_upwards [eventually_prod_principal_iff.mp hf2] with i hi x hx
  simpa using add_lt_add_of_le_of_lt (hg x hx) (hi x hx)

lemma TendstoUniformlyOn.eventually_forall_le {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {p : Filter Œπ} {g : Œ± ‚Üí Œ≤}
    {K : Set Œ±} {u v : Œ≤} (huv : u < v) (hf : TendstoUniformlyOn f g p K) (hg : ‚àÄ x ‚àà K, g x ‚â§ u) :
    ‚àÄ·∂† i in p, ‚àÄ x ‚àà K, f i x ‚â§ v := by
  filter_upwards [hf.eventually_forall_lt huv hg] with i hi x hx using (hi x hx).le

lemma TendstoUniformlyOn.comp_cexp {p : Filter Œπ} {f : Œπ ‚Üí Œ± ‚Üí ‚ÑÇ} {g : Œ± ‚Üí ‚ÑÇ}
    {K : Set Œ±} (hf : TendstoUniformlyOn f g p K) (hg : BddAbove <| (fun x ‚Ü¶ (g x).re) '' K) :
    TendstoUniformlyOn (cexp ‚àò f ¬∑) (cexp ‚àò g) p K := by
  obtain ‚ü®v, hv‚ü© : ‚àÉ v, ‚àÄ x ‚àà K, (g x).re ‚â§ v := hg.imp fun _ h ‚Ü¶ by simpa [mem_upperBounds] using h
  have : ‚àÄ·∂† i in p, ‚àÄ x ‚àà K, (f i x).re ‚â§ v + 1 := hf.re.eventually_forall_le (lt_add_one v) hv
  refine (UniformContinuousOn.cexp _).comp_tendstoUniformlyOn_eventually (by simpa) ?_ hf
  simpa using fun a ha ‚Ü¶ (hv a ha).trans (lt_add_one v).le

lemma Complex.HasSumUniformlyOn_log_one_add {Œ± : Type*} {f : Œπ ‚Üí Œ± ‚Üí ‚ÑÇ} (K : Set Œ±)
    {u : Œπ ‚Üí ‚Ñù} (hu : Summable u) (h : ‚àÄ·∂† n in cofinite, ‚àÄ x ‚àà K, ‚Äñf n x‚Äñ ‚â§ u n) :
    HasSumUniformlyOn (fun i a ‚Ü¶ log (1 + f i a)) (fun a ‚Ü¶ ‚àë' i, log (1 + f i a)) {K} := by
  simp only [hasSumUniformlyOn_iff_tendstoUniformlyOn, Set.mem_singleton_iff, forall_eq]
  apply tendstoUniformlyOn_tsum_of_cofinite_eventually <| hu.mul_left (3 / 2)
  filter_upwards [h, hu.tendsto_cofinite_zero.eventually_le_const one_half_pos] with i hi hn' x hx
    using (norm_log_one_add_half_le_self <| (hi x hx).trans hn').trans (by simpa using hi x hx)

lemma Complex.tendstoUniformlyOn_tsum_nat_log_one_add {Œ± : Type*} {f : ‚Ñï ‚Üí Œ± ‚Üí ‚ÑÇ} (K : Set Œ±)
    {u : ‚Ñï ‚Üí ‚Ñù} (hu : Summable u) (h : ‚àÄ·∂† n in atTop, ‚àÄ x ‚àà K, ‚Äñf n x‚Äñ ‚â§ u n) :
    TendstoUniformlyOn (fun n a => ‚àë i ‚àà Finset.range n,
    (Complex.log (1 + f i a))) (fun a => ‚àë' i : ‚Ñï, Complex.log (1 + f i a)) atTop K := by
  rw [‚Üê Nat.cofinite_eq_atTop] at h
  simpa only [Set.mem_singleton_iff, forall_eq] using
    hasSumUniformlyOn_tendstoUniformlyOn_nat (Complex.HasSumUniformlyOn_log_one_add K hu h)

end cexp_clog

section UniformlyOn

lemma HasProdUniformlyOn_of_clog {f : Œπ ‚Üí Œ± ‚Üí ‚ÑÇ} {ùîñ : Set (Set Œ±)}
    (hf : SummableUniformlyOn (fun i a => log (f i a)) ùîñ) (hfn : ‚àÄ K ‚àà ùîñ, ‚àÄ x ‚àà K, ‚àÄ i, f i x ‚â† 0)
    (hg : ‚àÄ K ‚àà ùîñ, BddAbove <| (fun x => (‚àë' n : Œπ, log (f n x)).re) '' K) :
    HasProdUniformlyOn f (fun a => ‚àè' i, f i a) ùîñ := by
  simp only [hasProdUniformlyOn_iff_tendstoUniformlyOn, Set.mem_singleton_iff, forall_eq]
  obtain ‚ü®r, hr‚ü© := hf.exists
  intro K hK
  suffices H : TendstoUniformlyOn (fun s a => ‚àè i ‚àà s, f i a) (cexp ‚àò r) atTop K by
        apply TendstoUniformlyOn.congr_right H
        apply Set.EqOn.trans (Set.EqOn.comp_left (hr.tsum_eqOn hK)).symm
        exact fun x hx ‚Ü¶ (cexp_tsum_eq_tprod (hfn K hK x hx) (hf.summable hK hx))
  have h1 := (hr.tsum_eqOn (s := K) hK)
  simp only [hasSumUniformlyOn_iff_tendstoUniformlyOn, Set.mem_singleton_iff, forall_eq] at hr
  apply TendstoUniformlyOn.congr ((hr K hK).comp_cexp ?_)
  ¬∑ filter_upwards with s i hi using by simp [exp_sum, fun y ‚Ü¶ exp_log (hfn K hK i hi y)]
  ¬∑ convert hg K hK
    simp_all only [h1 _, ne_eq]

lemma HasProdUniformlyOn_nat_one_add [TopologicalSpace Œ±] {f : ‚Ñï ‚Üí Œ± ‚Üí ‚ÑÇ} {K : Set Œ±}
    (hK : IsCompact K) {u : ‚Ñï ‚Üí ‚Ñù} (hu : Summable u) (h : ‚àÄ·∂† n in atTop, ‚àÄ x ‚àà K, ‚Äñf n x‚Äñ ‚â§ u n)
    (hfn : ‚àÄ x ‚àà K, ‚àÄ n, 1 + f n x ‚â† 0) (hcts : ‚àÄ n, ContinuousOn (f n) K) :
    HasProdUniformlyOn (fun n a => (1 + f n a)) (fun a => ‚àè' i, (1 + f i a)) {K} := by
  refine HasProdUniformlyOn_of_clog ?_ (by simpa using hfn) ?_
  ¬∑ apply HasSumUniformlyOn.summableUniformlyOn (g := fun x => ‚àë' i, log (1 + f i x))
    apply Complex.HasSumUniformlyOn_log_one_add K hu (Nat.cofinite_eq_atTop ‚ñ∏ h)
  ¬∑ simp only [Set.mem_singleton_iff, forall_eq]
    apply (hK.bddAbove_image)
    apply (tendstoUniformlyOn_tsum_nat_log_one_add K hu h).re.continuousOn
    simp only [re_sum, log_re]
    filter_upwards with n using continuousOn_finset_sum _ fun c _ ‚Ü¶
      (continuousOn_const.add (hcts c)).norm.log (fun z hz ‚Ü¶ by simpa using hfn z hz c)

lemma MultipliableUniformlyOn_nat_one_add [TopologicalSpace Œ±] {f : ‚Ñï ‚Üí Œ± ‚Üí ‚ÑÇ} {K : Set Œ±}
    (hK : IsCompact K) {u : ‚Ñï ‚Üí ‚Ñù} (hu : Summable u) (h : ‚àÄ·∂† n in atTop, ‚àÄ x ‚àà K, ‚Äñf n x‚Äñ ‚â§ u n)
    (hfn : ‚àÄ x ‚àà K, ‚àÄ n, 1 + f n x ‚â† 0) (hcts : ‚àÄ n, ContinuousOn (f n) K) :
    MultipliableUniformlyOn (fun n a => (1 + f n a)) {K} :=
  ‚ü®(fun a => ‚àè' i, (1 + f i a)), HasProdUniformlyOn_nat_one_add hK hu h hfn hcts‚ü©

lemma HasProdLocallyUniformlyOn_nat_one_add [TopologicalSpace Œ±] [LocallyCompactSpace Œ±]
    {f : ‚Ñï ‚Üí Œ± ‚Üí ‚ÑÇ} {K : Set Œ±} (hK : IsOpen K) {u : ‚Ñï ‚Üí ‚Ñù} (hu : Summable u)
    (h : ‚àÄ·∂† n in atTop, ‚àÄ x ‚àà K, ‚Äñf n x‚Äñ ‚â§ u n) (hfn : ‚àÄ x ‚àà K, ‚àÄ n, 1 + f n x ‚â† 0)
    (hcts : ‚àÄ n, ContinuousOn (f n) K) :
    HasProdLocallyUniformlyOn (fun n a => (1 + f n a)) (fun a => ‚àè' i, (1 + (f i a))) K := by
  apply hasProdLocallyUniformlyOn_of_forall_compact hK
  refine fun S hS hC => HasProdUniformlyOn_nat_one_add hC hu ?_ (by tauto) fun n => (hcts n).mono hS
  filter_upwards [h] with n hn a ha using hn a (hS ha)

lemma MultipliableLocallyUniformlyOn_nat_one_add [TopologicalSpace Œ±] [LocallyCompactSpace Œ±]
    {f : ‚Ñï ‚Üí Œ± ‚Üí ‚ÑÇ} {K : Set Œ±} (hK : IsOpen K) {u : ‚Ñï ‚Üí ‚Ñù} (hu : Summable u)
    (h : ‚àÄ·∂† n in atTop, ‚àÄ x ‚àà K, ‚Äñf n x‚Äñ ‚â§ u n) (hfn : ‚àÄ x ‚àà K, ‚àÄ n, 1 + f n x ‚â† 0)
    (hcts : ‚àÄ n, ContinuousOn (f n) K) :
    MultipliableLocallyUniformlyOn (fun n a => (1 + f n a)) K :=
  ‚ü®(fun a => ‚àè' i, (1 + (f i a))), HasProdLocallyUniformlyOn_nat_one_add hK hu h hfn hcts‚ü©

end UniformlyOn
