/-
Copyright (c) 2023 Eric Wieser. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Eric Wieser
-/
import Mathlib.Analysis.Quaternion
import Mathlib.Analysis.NormedSpace.Exponential
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Series

#align_import analysis.normed_space.quaternion_exponential from "leanprover-community/mathlib"@"f0c8bf9245297a541f468be517f1bde6195105e9"

/-!
# Lemmas about `exp` on `Quaternion`s

This file contains results about `exp` on `Quaternion ‚Ñù`.

## Main results

* `Quaternion.exp_eq`: the general expansion of the quaternion exponential in terms of `Real.cos`
  and `Real.sin`.
* `Quaternion.exp_of_re_eq_zero`: the special case when the quaternion has a zero real part.
* `Quaternion.norm_exp`: the norm of the quaternion exponential is the norm of the exponential of
  the real part.

-/


open scoped Quaternion Nat

namespace Quaternion

@[simp, norm_cast]
theorem exp_coe (r : ‚Ñù) : exp ‚Ñù (r : ‚Ñç[‚Ñù]) = ‚Üë(exp ‚Ñù r) :=
  (map_exp ‚Ñù (algebraMap ‚Ñù ‚Ñç[‚Ñù]) (continuous_algebraMap _ _) _).symm
#align quaternion.exp_coe Quaternion.exp_coe

local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y) -- Porting note: See issue lean4#2220

/-- Auxiliary result; if the power series corresponding to `Real.cos` and `Real.sin` evaluated
at `‚Äñq‚Äñ` tend to `c` and `s`, then the exponential series tends to `c + (s / ‚Äñq‚Äñ)`. -/
theorem hasSum_expSeries_of_imaginary {q : Quaternion ‚Ñù} (hq : q.re = 0) {c s : ‚Ñù}
    (hc : HasSum (fun n => (-1 : ‚Ñù) ^ n * ‚Äñq‚Äñ ^ (2 * n) / (2 * n)!) c)
    (hs : HasSum (fun n => (-1 : ‚Ñù) ^ n * ‚Äñq‚Äñ ^ (2 * n + 1) / (2 * n + 1)!) s) :
    HasSum (fun n => expSeries ‚Ñù (Quaternion ‚Ñù) n fun _ => q) (‚Üëc + (s / ‚Äñq‚Äñ) ‚Ä¢ q) := by
  replace hc := hasSum_coe.mpr hc
  -- ‚ä¢ HasSum (fun n => ‚Üë(expSeries ‚Ñù ‚Ñç n) fun x => q) (‚Üëc + (s / ‚Äñq‚Äñ) ‚Ä¢ q)
  replace hs := (hs.div_const ‚Äñq‚Äñ).smul_const q
  -- ‚ä¢ HasSum (fun n => ‚Üë(expSeries ‚Ñù ‚Ñç n) fun x => q) (‚Üëc + (s / ‚Äñq‚Äñ) ‚Ä¢ q)
  obtain rfl | hq0 := eq_or_ne q 0
  -- ‚ä¢ HasSum (fun n => ‚Üë(expSeries ‚Ñù ‚Ñç n) fun x => 0) (‚Üëc + (s / ‚Äñ0‚Äñ) ‚Ä¢ 0)
  ¬∑ simp_rw [expSeries_apply_zero, norm_zero, div_zero, zero_smul, add_zero]
    -- ‚ä¢ HasSum (fun n => Pi.single 0 1 n) ‚Üëc
    simp_rw [norm_zero] at hc
    -- ‚ä¢ HasSum (fun n => Pi.single 0 1 n) ‚Üëc
    convert hc using 1
    -- ‚ä¢ (fun n => Pi.single 0 1 n) = fun a => ‚Üë((-1) ^ a * 0 ^ (2 * a) / ‚Üë(2 * a)!)
    ext (_ | n) : 1
    -- ‚ä¢ Pi.single 0 1 Nat.zero = ‚Üë((-1) ^ Nat.zero * 0 ^ (2 * Nat.zero) / ‚Üë(2 * Nat. ‚Ä¶
    ¬∑ rw [pow_zero, Nat.zero_eq, mul_zero, pow_zero, Nat.factorial_zero, Nat.cast_one,
        div_one, one_mul, Pi.single_eq_same, coe_one]
    ¬∑ rw [zero_pow (mul_pos two_pos (Nat.succ_pos _)), mul_zero, zero_div,
        Pi.single_eq_of_ne n.succ_ne_zero, coe_zero]
  simp_rw [expSeries_apply_eq]
  -- ‚ä¢ HasSum (fun n => (‚Üën !)‚Åª¬π ‚Ä¢ q ^ n) (‚Üëc + (s / ‚Äñq‚Äñ) ‚Ä¢ q)
  have hq2 : q ^ 2 = -normSq q := sq_eq_neg_normSq.mpr hq
  -- ‚ä¢ HasSum (fun n => (‚Üën !)‚Åª¬π ‚Ä¢ q ^ n) (‚Üëc + (s / ‚Äñq‚Äñ) ‚Ä¢ q)
  have hqn := norm_ne_zero_iff.mpr hq0
  -- ‚ä¢ HasSum (fun n => (‚Üën !)‚Åª¬π ‚Ä¢ q ^ n) (‚Üëc + (s / ‚Äñq‚Äñ) ‚Ä¢ q)
  refine' HasSum.even_add_odd _ _
  -- ‚ä¢ HasSum (fun k => (‚Üë(2 * k)!)‚Åª¬π ‚Ä¢ q ^ (2 * k)) ‚Üëc
  ¬∑ convert hc using 1
    -- ‚ä¢ (fun k => (‚Üë(2 * k)!)‚Åª¬π ‚Ä¢ q ^ (2 * k)) = fun a => ‚Üë((-1) ^ a * ‚Äñq‚Äñ ^ (2 * a) ‚Ä¶
    ext n : 1
    -- ‚ä¢ (‚Üë(2 * n)!)‚Åª¬π ‚Ä¢ q ^ (2 * n) = ‚Üë((-1) ^ n * ‚Äñq‚Äñ ^ (2 * n) / ‚Üë(2 * n)!)
    letI k : ‚Ñù := ‚Üë(2 * n)!
    -- ‚ä¢ (‚Üë(2 * n)!)‚Åª¬π ‚Ä¢ q ^ (2 * n) = ‚Üë((-1) ^ n * ‚Äñq‚Äñ ^ (2 * n) / ‚Üë(2 * n)!)
    calc
      k‚Åª¬π ‚Ä¢ q ^ (2 * n) = k‚Åª¬π ‚Ä¢ (-normSq q) ^ n := by rw [pow_mul, hq2]; norm_cast
      _ = k‚Åª¬π ‚Ä¢ ‚Üë((-1 : ‚Ñù) ^ n * ‚Äñq‚Äñ ^ (2 * n)) := ?_
      _ = ‚Üë((-1 : ‚Ñù) ^ n * ‚Äñq‚Äñ ^ (2 * n) / k) := ?_
    ¬∑ congr 1
      -- ‚ä¢ ‚Üë(k‚Åª¬π ‚Ä¢ (-‚ÜënormSq q) ^ n) = k‚Åª¬π ‚Ä¢ ‚Üë((-1) ^ n * ‚Äñq‚Äñ ^ (2 * n))
      rw [neg_pow, normSq_eq_norm_mul_self, pow_mul, sq]
      -- ‚ä¢ ‚Üë(k‚Åª¬π ‚Ä¢ ((-1) ^ n * (‚Äñq‚Äñ * ‚Äñq‚Äñ) ^ n)) = k‚Åª¬π ‚Ä¢ ‚Üë((-1) ^ n * (‚Äñq‚Äñ * ‚Äñq‚Äñ) ^ n)
      push_cast
      -- ‚ä¢ (‚Üë(2 * n)!)‚Åª¬π ‚Ä¢ ((-1) ^ n * (‚Üë‚Äñq‚Äñ * ‚Üë‚Äñq‚Äñ) ^ n) = (‚Üë(2 * n)!)‚Åª¬π ‚Ä¢ ((-1) ^ n * ‚Ä¶
      rfl
      -- üéâ no goals
    ¬∑ rw [‚Üê coe_mul_eq_smul, div_eq_mul_inv]
      -- ‚ä¢ ‚Üëk‚Åª¬π * ‚Üë((-1) ^ n * ‚Äñq‚Äñ ^ (2 * n)) = ‚Üë((-1) ^ n * ‚Äñq‚Äñ ^ (2 * n) * k‚Åª¬π)
      norm_cast
      -- ‚ä¢ ‚Üë(k‚Åª¬π * (‚Üë(Int.negSucc 0 ^ n) * ‚Äñq‚Äñ ^ (2 * n))) = ‚Üë(‚Üë(Int.negSucc 0 ^ n) * ‚Äñ ‚Ä¶
      ring_nf
      -- üéâ no goals
  ¬∑ convert hs using 1
    -- ‚ä¢ (fun k => (‚Üë(2 * k + 1)!)‚Åª¬π ‚Ä¢ q ^ (2 * k + 1)) = fun z => ((-1) ^ z * ‚Äñq‚Äñ ^  ‚Ä¶
    ext n : 1
    -- ‚ä¢ (‚Üë(2 * n + 1)!)‚Åª¬π ‚Ä¢ q ^ (2 * n + 1) = ((-1) ^ n * ‚Äñq‚Äñ ^ (2 * n + 1) / ‚Üë(2 *  ‚Ä¶
    let k : ‚Ñù := ‚Üë(2 * n + 1)!
    -- ‚ä¢ (‚Üë(2 * n + 1)!)‚Åª¬π ‚Ä¢ q ^ (2 * n + 1) = ((-1) ^ n * ‚Äñq‚Äñ ^ (2 * n + 1) / ‚Üë(2 *  ‚Ä¶
    calc
      k‚Åª¬π ‚Ä¢ q ^ (2 * n + 1) = k‚Åª¬π ‚Ä¢ ((-normSq q) ^ n * q) := by
        rw [pow_succ', pow_mul, hq2]
        norm_cast
      _ = k‚Åª¬π ‚Ä¢ ((-1 : ‚Ñù) ^ n * ‚Äñq‚Äñ ^ (2 * n)) ‚Ä¢ q := ?_
      _ = ((-1 : ‚Ñù) ^ n * ‚Äñq‚Äñ ^ (2 * n + 1) / k / ‚Äñq‚Äñ) ‚Ä¢ q := ?_
    ¬∑ congr 1
      -- ‚ä¢ ‚Üë((-‚ÜënormSq q) ^ n) * q = ((-1) ^ n * ‚Äñq‚Äñ ^ (2 * n)) ‚Ä¢ q
      rw [neg_pow, normSq_eq_norm_mul_self, pow_mul, sq, ‚Üê coe_mul_eq_smul]
      -- üéâ no goals
    ¬∑ rw [smul_smul]
      -- ‚ä¢ (k‚Åª¬π * ((-1) ^ n * ‚Äñq‚Äñ ^ (2 * n))) ‚Ä¢ q = ((-1) ^ n * ‚Äñq‚Äñ ^ (2 * n + 1) / k / ‚Ä¶
      congr 1
      -- ‚ä¢ k‚Åª¬π * ((-1) ^ n * ‚Äñq‚Äñ ^ (2 * n)) = (-1) ^ n * ‚Äñq‚Äñ ^ (2 * n + 1) / k / ‚Äñq‚Äñ
      simp_rw [pow_succ', mul_div_assoc, div_div_cancel_left' hqn]
      -- ‚ä¢ (‚Üë(2 * n + 1)!)‚Åª¬π * ((-1) ^ n * ‚Äñq‚Äñ ^ (2 * n)) = (-1) ^ n * (‚Äñq‚Äñ ^ (2 * n) * ‚Ä¶
      ring
      -- üéâ no goals
#align quaternion.has_sum_exp_series_of_imaginary Quaternion.hasSum_expSeries_of_imaginary

/-- The closed form for the quaternion exponential on imaginary quaternions. -/
theorem exp_of_re_eq_zero (q : Quaternion ‚Ñù) (hq : q.re = 0) :
    exp ‚Ñù q = ‚Üë(Real.cos ‚Äñq‚Äñ) + (Real.sin ‚Äñq‚Äñ / ‚Äñq‚Äñ) ‚Ä¢ q := by
  rw [exp_eq_tsum]
  -- ‚ä¢ (fun x => ‚àë' (n : ‚Ñï), (‚Üën !)‚Åª¬π ‚Ä¢ x ^ n) q = ‚Üë(Real.cos ‚Äñq‚Äñ) + (Real.sin ‚Äñq‚Äñ  ‚Ä¶
  refine' HasSum.tsum_eq _
  -- ‚ä¢ HasSum (fun n => (‚Üën !)‚Åª¬π ‚Ä¢ q ^ n) (‚Üë(Real.cos ‚Äñq‚Äñ) + (Real.sin ‚Äñq‚Äñ / ‚Äñq‚Äñ) ‚Ä¢ ‚Ä¶
  simp_rw [‚Üê expSeries_apply_eq]
  -- ‚ä¢ HasSum (fun n => ‚Üë(expSeries ‚Ñù ‚Ñç n) fun x => q) (‚Üë(Real.cos ‚Äñq‚Äñ) + (Real.sin ‚Ä¶
  exact hasSum_expSeries_of_imaginary hq (Real.hasSum_cos _) (Real.hasSum_sin _)
  -- üéâ no goals
#align quaternion.exp_of_re_eq_zero Quaternion.exp_of_re_eq_zero

/-- The closed form for the quaternion exponential on arbitrary quaternions. -/
theorem exp_eq (q : Quaternion ‚Ñù) :
    exp ‚Ñù q = exp ‚Ñù q.re ‚Ä¢ (‚Üë(Real.cos ‚Äñq.im‚Äñ) + (Real.sin ‚Äñq.im‚Äñ / ‚Äñq.im‚Äñ) ‚Ä¢ q.im) := by
  rw [‚Üê exp_of_re_eq_zero q.im q.im_re, ‚Üê coe_mul_eq_smul, ‚Üê exp_coe, ‚Üê exp_add_of_commute,
    re_add_im]
  exact Algebra.commutes q.re (_ : ‚Ñç[‚Ñù])
  -- üéâ no goals
#align quaternion.exp_eq Quaternion.exp_eq

theorem re_exp (q : ‚Ñç[‚Ñù]) : (exp ‚Ñù q).re = exp ‚Ñù q.re * Real.cos ‚Äñq - q.re‚Äñ := by simp [exp_eq]
                                                                                  -- üéâ no goals
#align quaternion.re_exp Quaternion.re_exp

theorem im_exp (q : ‚Ñç[‚Ñù]) : (exp ‚Ñù q).im = (exp ‚Ñù q.re * (Real.sin ‚Äñq.im‚Äñ / ‚Äñq.im‚Äñ)) ‚Ä¢ q.im := by
  simp [exp_eq, smul_smul]
  -- üéâ no goals
#align quaternion.im_exp Quaternion.im_exp

theorem normSq_exp (q : ‚Ñç[‚Ñù]) : normSq (exp ‚Ñù q) = exp ‚Ñù q.re ^ 2 :=
  calc
    normSq (exp ‚Ñù q) =
        normSq (exp ‚Ñù q.re ‚Ä¢ (‚Üë(Real.cos ‚Äñq.im‚Äñ) + (Real.sin ‚Äñq.im‚Äñ / ‚Äñq.im‚Äñ) ‚Ä¢ q.im)) :=
      by rw [exp_eq]
         -- üéâ no goals
    _ = exp ‚Ñù q.re ^ 2 * normSq (‚Üë(Real.cos ‚Äñq.im‚Äñ) + (Real.sin ‚Äñq.im‚Äñ / ‚Äñq.im‚Äñ) ‚Ä¢ q.im) := by
      rw [normSq_smul]
      -- üéâ no goals
    _ = exp ‚Ñù q.re ^ 2 * (Real.cos ‚Äñq.im‚Äñ ^ 2 + Real.sin ‚Äñq.im‚Äñ ^ 2) := by
      congr 1
      -- ‚ä¢ ‚ÜënormSq (‚Üë(Real.cos ‚Äñim q‚Äñ) + (Real.sin ‚Äñim q‚Äñ / ‚Äñim q‚Äñ) ‚Ä¢ im q) = Real.cos  ‚Ä¶
      obtain hv | hv := eq_or_ne ‚Äñq.im‚Äñ 0
      -- ‚ä¢ ‚ÜënormSq (‚Üë(Real.cos ‚Äñim q‚Äñ) + (Real.sin ‚Äñim q‚Äñ / ‚Äñim q‚Äñ) ‚Ä¢ im q) = Real.cos  ‚Ä¶
      ¬∑ simp [hv]
        -- üéâ no goals
      rw [normSq_add, normSq_smul, star_smul, coe_mul_eq_smul, smul_re, smul_re, star_re, im_re,
        smul_zero, smul_zero, mul_zero, add_zero, div_pow, normSq_coe,
        normSq_eq_norm_mul_self, ‚Üê sq, div_mul_cancel _ (pow_ne_zero _ hv)]
    _ = exp ‚Ñù q.re ^ 2 := by rw [Real.cos_sq_add_sin_sq, mul_one]
                             -- üéâ no goals

#align quaternion.norm_sq_exp Quaternion.normSq_exp

/-- Note that this implies that exponentials of pure imaginary quaternions are unit quaternions
since in that case the RHS is `1` via `exp_zero` and `norm_one`. -/
@[simp]
theorem norm_exp (q : ‚Ñç[‚Ñù]) : ‚Äñexp ‚Ñù q‚Äñ = ‚Äñexp ‚Ñù q.re‚Äñ := by
  rw [norm_eq_sqrt_real_inner (exp ‚Ñù q), inner_self, normSq_exp, Real.sqrt_sq_eq_abs,
    Real.norm_eq_abs]
#align quaternion.norm_exp Quaternion.norm_exp

end Quaternion
