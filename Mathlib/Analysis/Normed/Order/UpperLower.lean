/-
Copyright (c) 2022 Ya√´l Dillies. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies
-/
import Mathlib.Algebra.Order.Field.Pi
import Mathlib.Analysis.Normed.Group.Pointwise
import Mathlib.Analysis.Normed.Order.Basic
import Mathlib.Topology.Algebra.Order.UpperLower

#align_import analysis.normed.order.upper_lower from "leanprover-community/mathlib"@"992efbda6f85a5c9074375d3c7cb9764c64d8f72"

/-!
# Upper/lower/order-connected sets in normed groups

The topological closure and interior of an upper/lower/order-connected set is an
upper/lower/order-connected set (with the notable exception of the closure of an order-connected
set).

We also prove lemmas specific to `‚Ñù‚Åø`. Those are helpful to prove that order-connected sets in `‚Ñù‚Åø`
are measurable.
-/


open Function Metric Set

variable {Œ± Œπ : Type*}

section MetricSpace

variable [NormedOrderedGroup Œ±] {s : Set Œ±}

@[to_additive IsUpperSet.thickening]
protected theorem IsUpperSet.thickening' (hs : IsUpperSet s) (Œµ : ‚Ñù) :
    IsUpperSet (thickening Œµ s) := by
  rw [‚Üê ball_mul_one]
  -- ‚ä¢ IsUpperSet (ball 1 Œµ * s)
  exact hs.mul_left
  -- üéâ no goals
#align is_upper_set.thickening' IsUpperSet.thickening'
#align is_upper_set.thickening IsUpperSet.thickening

@[to_additive IsLowerSet.thickening]
protected theorem IsLowerSet.thickening' (hs : IsLowerSet s) (Œµ : ‚Ñù) :
    IsLowerSet (thickening Œµ s) := by
  rw [‚Üê ball_mul_one]
  -- ‚ä¢ IsLowerSet (ball 1 Œµ * s)
  exact hs.mul_left
  -- üéâ no goals
#align is_lower_set.thickening' IsLowerSet.thickening'
#align is_lower_set.thickening IsLowerSet.thickening

@[to_additive IsUpperSet.cthickening]
protected theorem IsUpperSet.cthickening' (hs : IsUpperSet s) (Œµ : ‚Ñù) :
    IsUpperSet (cthickening Œµ s) := by
  rw [cthickening_eq_iInter_thickening'']
  -- ‚ä¢ IsUpperSet (‚ãÇ (Œµ_1 : ‚Ñù) (_ : max 0 Œµ < Œµ_1), thickening Œµ_1 s)
  exact isUpperSet_iInter‚ÇÇ fun Œ¥ _ => hs.thickening' _
  -- üéâ no goals
#align is_upper_set.cthickening' IsUpperSet.cthickening'
#align is_upper_set.cthickening IsUpperSet.cthickening

@[to_additive IsLowerSet.cthickening]
protected theorem IsLowerSet.cthickening' (hs : IsLowerSet s) (Œµ : ‚Ñù) :
    IsLowerSet (cthickening Œµ s) := by
  rw [cthickening_eq_iInter_thickening'']
  -- ‚ä¢ IsLowerSet (‚ãÇ (Œµ_1 : ‚Ñù) (_ : max 0 Œµ < Œµ_1), thickening Œµ_1 s)
  exact isLowerSet_iInter‚ÇÇ fun Œ¥ _ => hs.thickening' _
  -- üéâ no goals
#align is_lower_set.cthickening' IsLowerSet.cthickening'
#align is_lower_set.cthickening IsLowerSet.cthickening

end MetricSpace

/-! ### `‚Ñù‚Åø` -/


section Finite

variable [Finite Œπ] {s : Set (Œπ ‚Üí ‚Ñù)} {x y : Œπ ‚Üí ‚Ñù} {Œ¥ : ‚Ñù}

theorem IsUpperSet.mem_interior_of_forall_lt (hs : IsUpperSet s) (hx : x ‚àà closure s)
    (h : ‚àÄ i, x i < y i) : y ‚àà interior s := by
  cases nonempty_fintype Œπ
  -- ‚ä¢ y ‚àà interior s
  obtain ‚ü®Œµ, hŒµ, hxy‚ü© := Pi.exists_forall_pos_add_lt h
  -- ‚ä¢ y ‚àà interior s
  obtain ‚ü®z, hz, hxz‚ü© := Metric.mem_closure_iff.1 hx _ hŒµ
  -- ‚ä¢ y ‚àà interior s
  rw [dist_pi_lt_iff hŒµ] at hxz
  -- ‚ä¢ y ‚àà interior s
  have hyz : ‚àÄ i, z i < y i := by
    refine' fun i => (hxy _).trans_le' (sub_le_iff_le_add'.1 <| (le_abs_self _).trans _)
    rw [‚Üê Real.norm_eq_abs, ‚Üê dist_eq_norm']
    exact (hxz _).le
  obtain ‚ü®Œ¥, hŒ¥, hyz‚ü© := Pi.exists_forall_pos_add_lt hyz
  -- ‚ä¢ y ‚àà interior s
  refine' mem_interior.2 ‚ü®ball y Œ¥, _, isOpen_ball, mem_ball_self hŒ¥‚ü©
  -- ‚ä¢ ball y Œ¥ ‚äÜ s
  rintro w hw
  -- ‚ä¢ w ‚àà s
  refine' hs (fun i => _) hz
  -- ‚ä¢ z i ‚â§ w i
  simp_rw [ball_pi _ hŒ¥, Real.ball_eq_Ioo] at hw
  -- ‚ä¢ z i ‚â§ w i
  exact ((lt_sub_iff_add_lt.2 <| hyz _).trans (hw _ <| mem_univ _).1).le
  -- üéâ no goals
#align is_upper_set.mem_interior_of_forall_lt IsUpperSet.mem_interior_of_forall_lt

theorem IsLowerSet.mem_interior_of_forall_lt (hs : IsLowerSet s) (hx : x ‚àà closure s)
    (h : ‚àÄ i, y i < x i) : y ‚àà interior s := by
  cases nonempty_fintype Œπ
  -- ‚ä¢ y ‚àà interior s
  obtain ‚ü®Œµ, hŒµ, hxy‚ü© := Pi.exists_forall_pos_add_lt h
  -- ‚ä¢ y ‚àà interior s
  obtain ‚ü®z, hz, hxz‚ü© := Metric.mem_closure_iff.1 hx _ hŒµ
  -- ‚ä¢ y ‚àà interior s
  rw [dist_pi_lt_iff hŒµ] at hxz
  -- ‚ä¢ y ‚àà interior s
  have hyz : ‚àÄ i, y i < z i := by
    refine' fun i =>
      (lt_sub_iff_add_lt.2 <| hxy _).trans_le (sub_le_comm.1 <| (le_abs_self _).trans _)
    rw [‚Üê Real.norm_eq_abs, ‚Üê dist_eq_norm]
    exact (hxz _).le
  obtain ‚ü®Œ¥, hŒ¥, hyz‚ü© := Pi.exists_forall_pos_add_lt hyz
  -- ‚ä¢ y ‚àà interior s
  refine' mem_interior.2 ‚ü®ball y Œ¥, _, isOpen_ball, mem_ball_self hŒ¥‚ü©
  -- ‚ä¢ ball y Œ¥ ‚äÜ s
  rintro w hw
  -- ‚ä¢ w ‚àà s
  refine' hs (fun i => _) hz
  -- ‚ä¢ w i ‚â§ z i
  simp_rw [ball_pi _ hŒ¥, Real.ball_eq_Ioo] at hw
  -- ‚ä¢ w i ‚â§ z i
  exact ((hw _ <| mem_univ _).2.trans <| hyz _).le
  -- üéâ no goals
#align is_lower_set.mem_interior_of_forall_lt IsLowerSet.mem_interior_of_forall_lt

end Finite

section Fintype

variable [Fintype Œπ] {s : Set (Œπ ‚Üí ‚Ñù)} {x y : Œπ ‚Üí ‚Ñù} {Œ¥ : ‚Ñù}

theorem IsUpperSet.exists_subset_ball (hs : IsUpperSet s) (hx : x ‚àà closure s) (hŒ¥ : 0 < Œ¥) :
    ‚àÉ y, closedBall y (Œ¥ / 4) ‚äÜ closedBall x Œ¥ ‚àß closedBall y (Œ¥ / 4) ‚äÜ interior s := by
  refine' ‚ü®x + const _ (3 / 4 * Œ¥), closedBall_subset_closedBall' _, _‚ü©
  -- ‚ä¢ Œ¥ / 4 + dist (x + const Œπ (3 / 4 * Œ¥)) x ‚â§ Œ¥
  ¬∑ rw [dist_self_add_left]
    -- ‚ä¢ Œ¥ / 4 + ‚Äñconst Œπ (3 / 4 * Œ¥)‚Äñ ‚â§ Œ¥
    refine' (add_le_add_left (pi_norm_const_le <| 3 / 4 * Œ¥) _).trans_eq _
    -- ‚ä¢ Œ¥ / 4 + ‚Äñ3 / 4 * Œ¥‚Äñ = Œ¥
    simp [Real.norm_of_nonneg, hŒ¥.le, zero_le_three]
    -- ‚ä¢ Œ¥ / 4 + |3| / |4| * |Œ¥| = Œ¥
    simp [abs_of_pos, abs_of_pos hŒ¥]
    -- ‚ä¢ Œ¥ / 4 + 3 / 4 * Œ¥ = Œ¥
    ring
    -- üéâ no goals
  obtain ‚ü®y, hy, hxy‚ü© := Metric.mem_closure_iff.1 hx _ (div_pos hŒ¥ zero_lt_four)
  -- ‚ä¢ closedBall (x + const Œπ (3 / 4 * Œ¥)) (Œ¥ / 4) ‚äÜ interior s
  refine' fun z hz => hs.mem_interior_of_forall_lt (subset_closure hy) fun i => _
  -- ‚ä¢ y i < z i
  rw [mem_closedBall, dist_eq_norm'] at hz
  -- ‚ä¢ y i < z i
  rw [dist_eq_norm] at hxy
  -- ‚ä¢ y i < z i
  replace hxy := (norm_le_pi_norm _ i).trans hxy.le
  -- ‚ä¢ y i < z i
  replace hz := (norm_le_pi_norm _ i).trans hz
  -- ‚ä¢ y i < z i
  dsimp at hxy hz
  -- ‚ä¢ y i < z i
  rw [abs_sub_le_iff] at hxy hz
  -- ‚ä¢ y i < z i
  linarith
  -- üéâ no goals
#align is_upper_set.exists_subset_ball IsUpperSet.exists_subset_ball

theorem IsLowerSet.exists_subset_ball (hs : IsLowerSet s) (hx : x ‚àà closure s) (hŒ¥ : 0 < Œ¥) :
    ‚àÉ y, closedBall y (Œ¥ / 4) ‚äÜ closedBall x Œ¥ ‚àß closedBall y (Œ¥ / 4) ‚äÜ interior s := by
  refine' ‚ü®x - const _ (3 / 4 * Œ¥), closedBall_subset_closedBall' _, _‚ü©
  -- ‚ä¢ Œ¥ / 4 + dist (x - const Œπ (3 / 4 * Œ¥)) x ‚â§ Œ¥
  ¬∑ rw [dist_self_sub_left]
    -- ‚ä¢ Œ¥ / 4 + ‚Äñconst Œπ (3 / 4 * Œ¥)‚Äñ ‚â§ Œ¥
    refine' (add_le_add_left (pi_norm_const_le <| 3 / 4 * Œ¥) _).trans_eq _
    -- ‚ä¢ Œ¥ / 4 + ‚Äñ3 / 4 * Œ¥‚Äñ = Œ¥
    simp [abs_of_pos, abs_of_pos hŒ¥]
    -- ‚ä¢ Œ¥ / 4 + 3 / 4 * Œ¥ = Œ¥
    ring
    -- üéâ no goals
  obtain ‚ü®y, hy, hxy‚ü© := Metric.mem_closure_iff.1 hx _ (div_pos hŒ¥ zero_lt_four)
  -- ‚ä¢ closedBall (x - const Œπ (3 / 4 * Œ¥)) (Œ¥ / 4) ‚äÜ interior s
  refine' fun z hz => hs.mem_interior_of_forall_lt (subset_closure hy) fun i => _
  -- ‚ä¢ z i < y i
  rw [mem_closedBall, dist_eq_norm'] at hz
  -- ‚ä¢ z i < y i
  rw [dist_eq_norm] at hxy
  -- ‚ä¢ z i < y i
  replace hxy := (norm_le_pi_norm _ i).trans hxy.le
  -- ‚ä¢ z i < y i
  replace hz := (norm_le_pi_norm _ i).trans hz
  -- ‚ä¢ z i < y i
  dsimp at hxy hz
  -- ‚ä¢ z i < y i
  rw [abs_sub_le_iff] at hxy hz
  -- ‚ä¢ z i < y i
  linarith
  -- üéâ no goals
#align is_lower_set.exists_subset_ball IsLowerSet.exists_subset_ball

end Fintype
