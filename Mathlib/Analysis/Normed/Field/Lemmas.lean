/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl
-/
import Mathlib.Algebra.Algebra.NonUnitalSubalgebra
import Mathlib.Algebra.Algebra.Subalgebra.Basic
import Mathlib.Analysis.Normed.Field.Basic
import Mathlib.Analysis.Normed.Group.Lemmas

#align_import analysis.normed.field.basic from "leanprover-community/mathlib"@"f06058e64b7e8397234455038f3f8aec83aaba5a"

/-!
# Normed fields

In this file we define (semi)normed rings and fields. We also prove some theorems about these
definitions.
-/

variable {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œπ : Type*}

open Filter Metric Bornology
open scoped Topology NNReal ENNReal uniformity Pointwise

instance PUnit.normedCommRing : NormedCommRing PUnit :=
  { PUnit.normedAddCommGroup, PUnit.commRing with
    norm_mul := fun _ _ => by simp }

section NonUnitalSeminormedRing

variable [NonUnitalSeminormedRing Œ±]

theorem Filter.Tendsto.zero_mul_isBoundedUnder_le {f g : Œπ ‚Üí Œ±} {l : Filter Œπ}
    (hf : Tendsto f l (ùìù 0)) (hg : IsBoundedUnder (¬∑ ‚â§ ¬∑) l ((‚Äñ¬∑‚Äñ) ‚àò g)) :
    Tendsto (fun x => f x * g x) l (ùìù 0) :=
  hf.op_zero_isBoundedUnder_le hg (¬∑ * ¬∑) norm_mul_le
#align filter.tendsto.zero_mul_is_bounded_under_le Filter.Tendsto.zero_mul_isBoundedUnder_le

theorem Filter.isBoundedUnder_le_mul_tendsto_zero {f g : Œπ ‚Üí Œ±} {l : Filter Œπ}
    (hf : IsBoundedUnder (¬∑ ‚â§ ¬∑) l (norm ‚àò f)) (hg : Tendsto g l (ùìù 0)) :
    Tendsto (fun x => f x * g x) l (ùìù 0) :=
  hg.op_zero_isBoundedUnder_le hf (flip (¬∑ * ¬∑)) fun x y =>
    (norm_mul_le y x).trans_eq (mul_comm _ _)
#align filter.is_bounded_under_le.mul_tendsto_zero Filter.isBoundedUnder_le_mul_tendsto_zero


/-- A non-unital subalgebra of a non-unital seminormed ring is also a non-unital seminormed ring,
with the restriction of the norm.  -/
instance NonUnitalSubalgebra.nonUnitalSeminormedRing {ùïú : Type*} [CommRing ùïú] {E : Type*}
    [NonUnitalSeminormedRing E] [Module ùïú E] (s : NonUnitalSubalgebra ùïú E) :
    NonUnitalSeminormedRing s :=
  { s.toSubmodule.seminormedAddCommGroup, s.toNonUnitalRing with
    norm_mul := fun a b => norm_mul_le a.1 b.1 }

/-- A non-unital subalgebra of a non-unital normed ring is also a non-unital normed ring, with the
restriction of the norm.  -/
instance NonUnitalSubalgebra.nonUnitalNormedRing {ùïú : Type*} [CommRing ùïú] {E : Type*}
    [NonUnitalNormedRing E] [Module ùïú E] (s : NonUnitalSubalgebra ùïú E) : NonUnitalNormedRing s :=
  { s.nonUnitalSeminormedRing with
    eq_of_dist_eq_zero := eq_of_dist_eq_zero }

instance ULift.nonUnitalSeminormedRing : NonUnitalSeminormedRing (ULift Œ±) :=
  { ULift.seminormedAddCommGroup, ULift.nonUnitalRing with
    norm_mul := fun x y => (norm_mul_le x.down y.down : _) }

end NonUnitalSeminormedRing

section SeminormedRing

variable [SeminormedRing Œ±]

/-- A subalgebra of a seminormed ring is also a seminormed ring, with the restriction of the
norm. -/
instance Subalgebra.seminormedRing {ùïú : Type*} [CommRing ùïú] {E : Type*} [SeminormedRing E]
    [Algebra ùïú E] (s : Subalgebra ùïú E) : SeminormedRing s :=
  { s.toSubmodule.seminormedAddCommGroup, s.toRing with
    norm_mul := fun a b => norm_mul_le a.1 b.1 }
#align subalgebra.semi_normed_ring Subalgebra.seminormedRing

/-- A subalgebra of a normed ring is also a normed ring, with the restriction of the norm. -/
instance Subalgebra.normedRing {ùïú : Type*} [CommRing ùïú] {E : Type*} [NormedRing E]
    [Algebra ùïú E] (s : Subalgebra ùïú E) : NormedRing s :=
  { s.seminormedRing with
    eq_of_dist_eq_zero := eq_of_dist_eq_zero }
#align subalgebra.normed_ring Subalgebra.normedRing

instance ULift.seminormedRing : SeminormedRing (ULift Œ±) :=
  { ULift.nonUnitalSeminormedRing, ULift.ring with }

end SeminormedRing

section NonUnitalNormedRing

variable [NonUnitalNormedRing Œ±]

instance ULift.nonUnitalNormedRing : NonUnitalNormedRing (ULift Œ±) :=
  { ULift.nonUnitalSeminormedRing, ULift.normedAddCommGroup with }

end NonUnitalNormedRing

section NormedRing

variable [NormedRing Œ±]

instance ULift.normedRing : NormedRing (ULift Œ±) :=
  { ULift.seminormedRing, ULift.normedAddCommGroup with }

end NormedRing

section NonUnitalSeminormedCommRing

variable [NonUnitalSeminormedCommRing Œ±]

instance ULift.nonUnitalSeminormedCommRing : NonUnitalSeminormedCommRing (ULift Œ±) :=
  { ULift.nonUnitalSeminormedRing, ULift.nonUnitalCommRing with }

end NonUnitalSeminormedCommRing

section NonUnitalNormedCommRing

variable [NonUnitalNormedCommRing Œ±]

/-- A non-unital subalgebra of a non-unital seminormed commutative ring is also a non-unital
seminormed commutative ring, with the restriction of the norm.  -/
instance NonUnitalSubalgebra.nonUnitalSeminormedCommRing {ùïú : Type*} [CommRing ùïú] {E : Type*}
    [NonUnitalSeminormedCommRing E] [Module ùïú E] (s : NonUnitalSubalgebra ùïú E) :
    NonUnitalSeminormedCommRing s :=
  { s.nonUnitalSeminormedRing, s.toNonUnitalCommRing with }

/-- A non-unital subalgebra of a non-unital normed commutative ring is also a non-unital normed
commutative ring, with the restriction of the norm.  -/
instance NonUnitalSubalgebra.nonUnitalNormedCommRing {ùïú : Type*} [CommRing ùïú] {E : Type*}
    [NonUnitalNormedCommRing E] [Module ùïú E] (s : NonUnitalSubalgebra ùïú E) :
    NonUnitalNormedCommRing s :=
  { s.nonUnitalSeminormedCommRing, s.nonUnitalNormedRing with }

instance ULift.nonUnitalNormedCommRing : NonUnitalNormedCommRing (ULift Œ±) :=
  { ULift.nonUnitalSeminormedCommRing, ULift.normedAddCommGroup with }

end NonUnitalNormedCommRing

section SeminormedCommRing

variable [SeminormedCommRing Œ±]

instance ULift.seminormedCommRing : SeminormedCommRing (ULift Œ±) :=
  { ULift.nonUnitalSeminormedRing, ULift.commRing with }

end SeminormedCommRing

section NormedCommRing

/-- A subalgebra of a seminormed commutative ring is also a seminormed commutative ring, with the
restriction of the norm.  -/
instance Subalgebra.seminormedCommRing {ùïú : Type*} [CommRing ùïú] {E : Type*} [SeminormedCommRing E]
    [Algebra ùïú E] (s : Subalgebra ùïú E) : SeminormedCommRing s :=
  { s.seminormedRing, s.toCommRing with }

/-- A subalgebra of a normed commutative ring is also a normed commutative ring, with the
restriction of the norm.  -/
instance Subalgebra.normedCommRing {ùïú : Type*} [CommRing ùïú] {E : Type*} [NormedCommRing E]
    [Algebra ùïú E] (s : Subalgebra ùïú E) : NormedCommRing s :=
  { s.seminormedCommRing, s.normedRing with }

variable [NormedCommRing Œ±]

instance ULift.normedCommRing : NormedCommRing (ULift Œ±) :=
  { ULift.normedRing (Œ± := Œ±), ULift.seminormedCommRing with }

end NormedCommRing

-- see Note [lower instance priority]
instance (priority := 100) semi_normed_ring_top_monoid [NonUnitalSeminormedRing Œ±] :
    ContinuousMul Œ± :=
  ‚ü®continuous_iff_continuousAt.2 fun x =>
      tendsto_iff_norm_sub_tendsto_zero.2 <| by
        have : ‚àÄ e : Œ± √ó Œ±,
            ‚Äñe.1 * e.2 - x.1 * x.2‚Äñ ‚â§ ‚Äñe.1‚Äñ * ‚Äñe.2 - x.2‚Äñ + ‚Äñe.1 - x.1‚Äñ * ‚Äñx.2‚Äñ := by
          intro e
          calc
            ‚Äñe.1 * e.2 - x.1 * x.2‚Äñ ‚â§ ‚Äñe.1 * (e.2 - x.2) + (e.1 - x.1) * x.2‚Äñ := by
              rw [_root_.mul_sub, _root_.sub_mul, sub_add_sub_cancel]
            -- Porting note: `ENNReal.{mul_sub, sub_mul}` should be protected
            _ ‚â§ ‚Äñe.1‚Äñ * ‚Äñe.2 - x.2‚Äñ + ‚Äñe.1 - x.1‚Äñ * ‚Äñx.2‚Äñ :=
              norm_add_le_of_le (norm_mul_le _ _) (norm_mul_le _ _)
        refine squeeze_zero (fun e => norm_nonneg _) this ?_
        convert
          ((continuous_fst.tendsto x).norm.mul
                ((continuous_snd.tendsto x).sub tendsto_const_nhds).norm).add
            (((continuous_fst.tendsto x).sub tendsto_const_nhds).norm.mul _)
        -- Porting note: `show` used to select a goal to work on
        rotate_right
        ¬∑ show Tendsto _ _ _
          exact tendsto_const_nhds
        ¬∑ simp‚ü©
#align semi_normed_ring_top_monoid semi_normed_ring_top_monoid

-- see Note [lower instance priority]
/-- A seminormed ring is a topological ring. -/
instance (priority := 100) semi_normed_top_ring [NonUnitalSeminormedRing Œ±] :
    TopologicalRing Œ± where
#align semi_normed_top_ring semi_normed_top_ring

section NormedDivisionRing

variable [NormedDivisionRing Œ±] {a : Œ±}

-- see Note [lower instance priority]
instance (priority := 100) NormedDivisionRing.to_hasContinuousInv‚ÇÄ : HasContinuousInv‚ÇÄ Œ± := by
  refine ‚ü®fun r r0 => tendsto_iff_norm_sub_tendsto_zero.2 ?_‚ü©
  have r0' : 0 < ‚Äñr‚Äñ := norm_pos_iff.2 r0
  rcases exists_between r0' with ‚ü®Œµ, Œµ0, Œµr‚ü©
  have : ‚àÄ·∂† e in ùìù r, ‚Äñe‚Åª¬π - r‚Åª¬π‚Äñ ‚â§ ‚Äñr - e‚Äñ / ‚Äñr‚Äñ / Œµ := by
    filter_upwards [(isOpen_lt continuous_const continuous_norm).eventually_mem Œµr] with e he
    have e0 : e ‚â† 0 := norm_pos_iff.1 (Œµ0.trans he)
    calc
      ‚Äñe‚Åª¬π - r‚Åª¬π‚Äñ = ‚Äñr‚Äñ‚Åª¬π * ‚Äñr - e‚Äñ * ‚Äñe‚Äñ‚Åª¬π := by
        rw [‚Üê norm_inv, ‚Üê norm_inv, ‚Üê norm_mul, ‚Üê norm_mul, _root_.mul_sub, _root_.sub_mul,
          mul_assoc _ e, inv_mul_cancel r0, mul_inv_cancel e0, one_mul, mul_one]
      -- Porting note: `ENNReal.{mul_sub, sub_mul}` should be `protected`
      _ = ‚Äñr - e‚Äñ / ‚Äñr‚Äñ / ‚Äñe‚Äñ := by field_simp [mul_comm]
      _ ‚â§ ‚Äñr - e‚Äñ / ‚Äñr‚Äñ / Œµ := by gcongr
  refine squeeze_zero' (eventually_of_forall fun _ => norm_nonneg _) this ?_
  refine (((continuous_const.sub continuous_id).norm.div_const _).div_const _).tendsto' _ _ ?_
  simp
#align normed_division_ring.to_has_continuous_inv‚ÇÄ NormedDivisionRing.to_hasContinuousInv‚ÇÄ

-- see Note [lower instance priority]
/-- A normed division ring is a topological division ring. -/
instance (priority := 100) NormedDivisionRing.to_topologicalDivisionRing :
    TopologicalDivisionRing Œ± where
#align normed_division_ring.to_topological_division_ring NormedDivisionRing.to_topologicalDivisionRing


end NormedDivisionRing

namespace NNReal

open NNReal

lemma lipschitzWith_sub : LipschitzWith 2 (fun (p : ‚Ñù‚â•0 √ó ‚Ñù‚â•0) ‚Ü¶ p.1 - p.2) := by
  rw [‚Üê isometry_subtype_coe.lipschitzWith_iff]
  have : Isometry (Prod.map ((‚Üë) : ‚Ñù‚â•0 ‚Üí ‚Ñù) ((‚Üë) : ‚Ñù‚â•0 ‚Üí ‚Ñù)) :=
    isometry_subtype_coe.prod_map isometry_subtype_coe
  convert (((LipschitzWith.prod_fst.comp this.lipschitz).sub
    (LipschitzWith.prod_snd.comp this.lipschitz)).max_const 0)
  norm_num

end NNReal

instance Int.instNormedCommRing : NormedCommRing ‚Ñ§ where
  __ := instCommRing
  __ := instNormedAddCommGroup
  norm_mul m n := by simp only [norm, Int.cast_mul, abs_mul, le_rfl]

instance Int.instNormOneClass : NormOneClass ‚Ñ§ :=
  ‚ü®by simp [‚Üê Int.norm_cast_real]‚ü©

instance Rat.instNormedField : NormedField ‚Ñö where
  __ := instField
  __ := instNormedAddCommGroup
  norm_mul' a b := by simp only [norm, Rat.cast_mul, abs_mul]

instance Rat.instDenselyNormedField : DenselyNormedField ‚Ñö where
  lt_norm_lt r‚ÇÅ r‚ÇÇ h‚ÇÄ hr :=
    let ‚ü®q, h‚ü© := exists_rat_btwn hr
    ‚ü®q, by rwa [‚Üê Rat.norm_cast_real, Real.norm_eq_abs, abs_of_pos (h‚ÇÄ.trans_lt h.1)]‚ü©


-- Guard against import creep.
assert_not_exists RestrictScalars
