/-
Copyright (c) 2020 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathlib.Analysis.Normed.Operator.Banach
import Mathlib.Topology.Algebra.Module.FiniteDimension

/-!
# Complemented subspaces of normed vector spaces

A submodule `p` of a topological module `E` over `R` is called *complemented* if there exists
a continuous linear projection `f : E ‚Üí‚Çó[R] p`, `‚àÄ x : p, f x = x`. We prove that for
a closed subspace of a normed space this condition is equivalent to existence of a closed
subspace `q` such that `p ‚äì q = ‚ä•`, `p ‚äî q = ‚ä§`. We also prove that a subspace of finite codimension
is always a complemented subspace.

## Tags

complemented subspace, normed vector space
-/


variable {ùïú E F G : Type*} [NontriviallyNormedField ùïú] [NormedAddCommGroup E] [NormedSpace ùïú E]
  [NormedAddCommGroup F] [NormedSpace ùïú F] [NormedAddCommGroup G] [NormedSpace ùïú G]

noncomputable section

open LinearMap (ker range)

namespace ContinuousLinearMap

section

variable [CompleteSpace ùïú]

theorem ker_closedComplemented_of_finiteDimensional_range (f : E ‚ÜíL[ùïú] F)
    [FiniteDimensional ùïú (range f)] : (ker f).ClosedComplemented := by
  set f' : E ‚ÜíL[ùïú] range f := f.codRestrict _ (LinearMap.mem_range_self (f : E ‚Üí‚Çó[ùïú] F))
  rcases f'.exists_right_inverse_of_surjective (f : E ‚Üí‚Çó[ùïú] F).range_rangeRestrict with ‚ü®g, hg‚ü©
  simpa only [f', ker_codRestrict]
    using f'.closedComplemented_ker_of_rightInverse g (ContinuousLinearMap.ext_iff.1 hg)

end

variable [CompleteSpace E] [CompleteSpace (F √ó G)]

/-- If `f : E ‚ÜíL[R] F` and `g : E ‚ÜíL[R] G` are two surjective linear maps and
their kernels are complement of each other, then `x ‚Ü¶ (f x, g x)` defines
a linear equivalence `E ‚âÉL[R] F √ó G`. -/
nonrec def equivProdOfSurjectiveOfIsCompl (f : E ‚ÜíL[ùïú] F) (g : E ‚ÜíL[ùïú] G) (hf : range f = ‚ä§)
    (hg : range g = ‚ä§) (hfg : IsCompl (ker f) (ker g)) : E ‚âÉL[ùïú] F √ó G :=
  (f.equivProdOfSurjectiveOfIsCompl (g : E ‚Üí‚Çó[ùïú] G) hf hg hfg).toContinuousLinearEquivOfContinuous
    (f.continuous.prod_mk g.continuous)

@[simp]
theorem coe_equivProdOfSurjectiveOfIsCompl {f : E ‚ÜíL[ùïú] F} {g : E ‚ÜíL[ùïú] G} (hf : range f = ‚ä§)
    (hg : range g = ‚ä§) (hfg : IsCompl (ker f) (ker g)) :
    (equivProdOfSurjectiveOfIsCompl f g hf hg hfg : E ‚Üí‚Çó[ùïú] F √ó G) = f.prod g := rfl

@[simp]
theorem equivProdOfSurjectiveOfIsCompl_toLinearEquiv {f : E ‚ÜíL[ùïú] F} {g : E ‚ÜíL[ùïú] G}
    (hf : range f = ‚ä§) (hg : range g = ‚ä§) (hfg : IsCompl (ker f) (ker g)) :
    (equivProdOfSurjectiveOfIsCompl f g hf hg hfg).toLinearEquiv =
      LinearMap.equivProdOfSurjectiveOfIsCompl f g hf hg hfg := rfl

@[simp]
theorem equivProdOfSurjectiveOfIsCompl_apply {f : E ‚ÜíL[ùïú] F} {g : E ‚ÜíL[ùïú] G} (hf : range f = ‚ä§)
    (hg : range g = ‚ä§) (hfg : IsCompl (ker f) (ker g)) (x : E) :
    equivProdOfSurjectiveOfIsCompl f g hf hg hfg x = (f x, g x) := rfl

end ContinuousLinearMap

namespace Submodule

variable [CompleteSpace E] (p q : Subspace ùïú E)

/-- If `q` is a closed complement of a closed subspace `p`, then `p √ó q` is continuously
isomorphic to `E`. -/
def prodEquivOfClosedCompl (h : IsCompl p q) (hp : IsClosed (p : Set E))
    (hq : IsClosed (q : Set E)) : (p √ó q) ‚âÉL[ùïú] E := by
  haveI := hp.completeSpace_coe; haveI := hq.completeSpace_coe
  refine (p.prodEquivOfIsCompl q h).toContinuousLinearEquivOfContinuous ?_
  exact (p.subtypeL.coprod q.subtypeL).continuous

/-- Projection to a closed submodule along a closed complement. -/
def linearProjOfClosedCompl (h : IsCompl p q) (hp : IsClosed (p : Set E))
    (hq : IsClosed (q : Set E)) : E ‚ÜíL[ùïú] p :=
  ContinuousLinearMap.fst ùïú p q ‚àòL ‚Üë(prodEquivOfClosedCompl p q h hp hq).symm

def idempotentOfClosedCompl (h : IsCompl p q) (hp : IsClosed (p : Set E))
    (hq : IsClosed (q : Set E)) : E ‚ÜíL[ùïú] E :=
  ‚Üë(prodEquivOfClosedCompl p q h hp hq) ‚àòL (ContinuousLinearMap.inl ùïú p q ‚àòL
    (linearProjOfClosedCompl p q h hp hq))




/-
lemma is_idempotent_ofClosedCompl (h : IsCompl p q) (hp : IsClosed (p : Set E))
    (hq : IsClosed (q : Set E)) : IsIdempotentElem (idempotentOfClosedCompl p q h hp hq) := by
  rw [IsIdempotentElem]
  rw [idempotentOfClosedCompl]
-/

variable {p q}

@[simp]
theorem coe_prodEquivOfClosedCompl (h : IsCompl p q) (hp : IsClosed (p : Set E))
    (hq : IsClosed (q : Set E)) :
    ‚áë(p.prodEquivOfClosedCompl q h hp hq) = p.prodEquivOfIsCompl q h := rfl

@[simp]
theorem coe_prodEquivOfClosedCompl_symm (h : IsCompl p q) (hp : IsClosed (p : Set E))
    (hq : IsClosed (q : Set E)) :
    ‚áë(p.prodEquivOfClosedCompl q h hp hq).symm = (p.prodEquivOfIsCompl q h).symm := rfl

@[simp]
theorem coe_continuous_linearProjOfClosedCompl (h : IsCompl p q) (hp : IsClosed (p : Set E))
    (hq : IsClosed (q : Set E)) :
    (p.linearProjOfClosedCompl q h hp hq : E ‚Üí‚Çó[ùïú] p) = p.linearProjOfIsCompl q h := rfl

@[simp]
theorem coe_continuous_linearProjOfClosedCompl' (h : IsCompl p q) (hp : IsClosed (p : Set E))
    (hq : IsClosed (q : Set E)) :
    ‚áë(p.linearProjOfClosedCompl q h hp hq) = p.linearProjOfIsCompl q h := rfl

theorem ClosedComplemented.of_isCompl_isClosed (h : IsCompl p q) (hp : IsClosed (p : Set E))
    (hq : IsClosed (q : Set E)) : p.ClosedComplemented :=
  ‚ü®p.linearProjOfClosedCompl q h hp hq, Submodule.linearProjOfIsCompl_apply_left h‚ü©

alias IsCompl.closedComplemented_of_isClosed := ClosedComplemented.of_isCompl_isClosed

theorem closedComplemented_iff_isClosed_exists_isClosed_isCompl :
    p.ClosedComplemented ‚Üî
      IsClosed (p : Set E) ‚àß ‚àÉ q : Submodule ùïú E, IsClosed (q : Set E) ‚àß IsCompl p q :=
  ‚ü®fun h => ‚ü®h.isClosed, h.exists_isClosed_isCompl‚ü©,
    fun ‚ü®hp, ‚ü®_, hq, hpq‚ü©‚ü© => .of_isCompl_isClosed hpq hp hq‚ü©

theorem ClosedComplemented.of_quotient_finiteDimensional [CompleteSpace ùïú]
    [FiniteDimensional ùïú (E ‚ß∏ p)] (hp : IsClosed (p : Set E)) : p.ClosedComplemented := by
  obtain ‚ü®q, hq‚ü© : ‚àÉ q, IsCompl p q := p.exists_isCompl
  haveI : FiniteDimensional ùïú q := (p.quotientEquivOfIsCompl q hq).finiteDimensional
  exact .of_isCompl_isClosed hq hp q.closed_of_finiteDimensional

lemma ker_idempotentOfClosedCompl (h : IsCompl p q) (hp : IsClosed (p : Set E))
    (hq : IsClosed (q : Set E)) : LinearMap.ker (idempotentOfClosedCompl p q h hp hq) = q := by
  rw [idempotentOfClosedCompl]
  ext x
  simp only [LinearMap.mem_ker, ContinuousLinearMap.coe_comp', ContinuousLinearEquiv.coe_coe,
    coe_prodEquivOfClosedCompl, coe_continuous_linearProjOfClosedCompl', Function.comp_apply,
    ContinuousLinearMap.inl_apply, coe_prodEquivOfIsCompl', ZeroMemClass.coe_zero, add_zero,
    ZeroMemClass.coe_eq_zero, linearProjOfIsCompl_apply_eq_zero_iff]

#check LinearMap.coprod_zero_right

variables (h : IsCompl p q) (hp : IsClosed (p : Set E))
    (hq : IsClosed (q : Set E))

--#check (prodEquivOfIsCompl p q h).symm x

lemma test (x : p) : (prodEquivOfIsCompl p q h).symm x = ((x : p),(0 : q)) :=
  prodEquivOfIsCompl_symm_apply_left p q h x

lemma test2 (x : p) :
  ‚Üë((LinearMap.fst ùïú ‚Ü•p ‚Ü•q ‚àò‚Çó ‚Üë(prodEquivOfIsCompl p q h).symm) (x : E)) = x := by
  rw [LinearMap.comp_apply]
  rw [LinearEquiv.coe_coe, prodEquivOfIsCompl_symm_apply_left, LinearMap.fst_apply]

/-
#check Submodule.mem_carrier

lemma test3 (x : E) (hx : x ‚àà p) :
  ‚Üë((LinearMap.fst ùïú ‚Ü•p ‚Ü•q ‚àò‚Çó ‚Üë(prodEquivOfIsCompl p q h).symm) x) = x := by
  rw [LinearMap.comp_apply]
  rw [LinearEquiv.coe_coe]
  rw [(prodEquivOfIsCompl_symm_apply_left h (‚ü®x,hx‚ü© : p))]
  --, prodEquivOfIsCompl_symm_apply_left, LinearMap.fst_apply]
-/

lemma range_idempotentOfClosedCompl (h : IsCompl p q) (hp : IsClosed (p : Set E))
    (hq : IsClosed (q : Set E)) : LinearMap.range (idempotentOfClosedCompl p q h hp hq) = p := by
  rw [idempotentOfClosedCompl]
  ext x
  constructor
  ¬∑ intro h
    simp at h
    obtain ‚ü®y, hy‚ü© := h
    rw [‚Üê hy]
    exact coe_mem ((linearProjOfIsCompl p q h) y)
  ¬∑ intro hx
    simp
    use x
    rw [linearProjOfIsCompl]
    rw [(test2 h (‚ü®x,hx‚ü©))]

end Submodule
