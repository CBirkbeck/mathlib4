/-
Copyright (c) 2019 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathlib.Analysis.Calculus.FDeriv.Mul
import Mathlib.Analysis.Calculus.FDeriv.Comp

/-!
# Derivative of `(f x) ^ n`, `n : ‚Ñï`

In this file we prove that `(x ^ n)' = n * x ^ (n - 1)`, where `n` is a natural number.

For a more detailed overview of one-dimensional derivatives in mathlib, see the module docstring of
`Analysis/Calculus/Deriv/Basic`.

## Keywords

derivative, power
-/

universe u

variable {ùïú ùî∏ E : Type*}

section NormedRing
variable [NontriviallyNormedField ùïú] [NormedRing ùî∏] [NormedAddCommGroup E]
variable [NormedAlgebra ùïú ùî∏] [NormedSpace ùïú E] {f : E ‚Üí ùî∏} {f' : E ‚ÜíL[ùïú] ùî∏} {x : E} {s : Set E}

open scoped RightActions

private theorem aux (f : E ‚Üí ùî∏) (f' : E ‚ÜíL[ùïú] ùî∏) (x : E) (n : ‚Ñï) :
    f x ‚Ä¢> ‚àë i ‚àà Finset.range (n + 1), f x ^ ((n + 1).pred - i) ‚Ä¢> f' <‚Ä¢ f x ^ i
      + f' <‚Ä¢ (f x ^ (n + 1)) =
    ‚àë i ‚àà Finset.range (n + 1 + 1), f x ^ ((n + 1 + 1).pred - i) ‚Ä¢> f' <‚Ä¢ f x ^ i := by
  rw [Finset.sum_range_succ _ (n + 1), Finset.smul_sum]
  simp only [Nat.pred_eq_sub_one, add_tsub_cancel_right, tsub_self, pow_zero, one_smul]
  simp_rw [smul_comm (_ : ùî∏) (_ : ùî∏·µê·µí·µñ), smul_smul, ‚Üê pow_succ']
  congr! 5 with x hx
  simp [Nat.lt_succ_iff] at hx
  rw [tsub_add_eq_add_tsub hx]

theorem HasStrictFDerivAt.pow' (h : HasStrictFDerivAt f f' x) (n : ‚Ñï) :
    HasStrictFDerivAt (fun x ‚Ü¶ f x ^ n)
      (‚àë i ‚àà Finset.range n, f x ^ (n.pred - i) ‚Ä¢> f' <‚Ä¢ f x ^ i) x :=
  match n with
  | 0 => by simpa using hasStrictFDerivAt_const 1 x
  | 1 => by simpa using h
  | n + 1 + 1 => by
    have := h.mul' (h.pow' (n + 1))
    simp_rw [pow_succ' _ (n + 1)]
    refine this.congr_fderiv <| aux _ _ _ _

theorem HasFDerivWithinAt.pow' (h : HasFDerivWithinAt f f' s x) (n : ‚Ñï) :
    HasFDerivWithinAt (fun x ‚Ü¶ f x ^ n)
      (‚àë i ‚àà Finset.range n, f x ^ (n.pred - i) ‚Ä¢> f' <‚Ä¢ f x ^ i) s x :=
  match n with
  | 0 => by simpa using hasFDerivWithinAt_const 1 x s
  | 1 => by simpa using h
  | n + 1 + 1 => by
    have := h.mul' (h.pow' (n + 1))
    simp_rw [pow_succ' _ (n + 1)]
    exact this.congr_fderiv <| aux _ _ _ _

@[fun_prop]
theorem DifferentiableWithinAt.pow (hf : DifferentiableWithinAt ùïú f s x) (n : ‚Ñï) :
    DifferentiableWithinAt ùïú (fun x => f x ^ n) s x :=
  let ‚ü®_, hf'‚ü© := hf; ‚ü®_, hf'.pow' n‚ü©

@[simp, fun_prop]
theorem DifferentiableAt.pow (hf : DifferentiableAt ùïú f x) (n : ‚Ñï) :
    DifferentiableAt ùïú (fun x => f x ^ n) x :=
  differentiableWithinAt_univ.mp <| hf.differentiableWithinAt.pow n

@[fun_prop]
theorem DifferentiableOn.pow (ha : DifferentiableOn ùïú f s) (n : ‚Ñï) :
    DifferentiableOn ùïú (fun x => f x ^ n) s := fun x h => (ha x h).pow n

@[simp, fun_prop]
theorem Differentiable.pow (ha : Differentiable ùïú f) (n : ‚Ñï) : Differentiable ùïú fun x => f x ^ n :=
  fun x => (ha x).pow n

theorem differentiableAt_pow (n : ‚Ñï) {x : ùî∏} : DifferentiableAt ùïú (fun x : ùî∏ => x ^ n) x :=
  differentiableAt_id.pow _

theorem differentiableWithinAt_pow (n : ‚Ñï) {x : ùî∏} : DifferentiableWithinAt ùïú (fun x : ùî∏ => x ^ n) s x :=
  (differentiableAt_pow n).differentiableWithinAt

theorem differentiable_pow (n : ‚Ñï) : Differentiable ùïú fun x : ùî∏ => x ^ n :=
  fun _ => differentiableAt_pow n

theorem differentiableOn_pow (n : ‚Ñï) {s : Set ùî∏} : DifferentiableOn ùïú (fun x : ùî∏ => x ^ n) s :=
  (differentiable_pow n).differentiableOn

end NormedRing

variable {c : ùïú ‚Üí ùïú} {c' : ùïú}
variable (n : ‚Ñï)

theorem hasStrictDerivAt_pow :
    ‚àÄ (n : ‚Ñï) (x : ùïú), HasStrictDerivAt (fun x : ùïú ‚Ü¶ x ^ n) ((n : ùïú) * x ^ (n - 1)) x
  | 0, x => by simp [hasStrictDerivAt_const]
  | 1, x => by simpa using hasStrictDerivAt_id x
  | n + 1 + 1, x => by
    simpa [pow_succ, add_mul, mul_assoc] using
      (hasStrictDerivAt_pow (n + 1) x).mul (hasStrictDerivAt_id x)

theorem hasDerivAt_pow (n : ‚Ñï) (x : ùïú) :
    HasDerivAt (fun x : ùïú => x ^ n) ((n : ùïú) * x ^ (n - 1)) x :=
  (hasStrictDerivAt_pow n x).hasDerivAt

theorem hasDerivWithinAt_pow (n : ‚Ñï) (x : ùïú) (s : Set ùïú) :
    HasDerivWithinAt (fun x : ùïú => x ^ n) ((n : ùïú) * x ^ (n - 1)) s x :=
  (hasDerivAt_pow n x).hasDerivWithinAt


theorem deriv_pow : deriv (fun x : ùïú => x ^ n) x = (n : ùïú) * x ^ (n - 1) :=
  (hasDerivAt_pow n x).deriv

@[simp]
theorem deriv_pow' : (deriv fun x : ùïú => x ^ n) = fun x => (n : ùïú) * x ^ (n - 1) :=
  funext fun _ => deriv_pow n

theorem derivWithin_pow (hxs : UniqueDiffWithinAt ùïú s x) :
    derivWithin (fun x : ùïú => x ^ n) s x = (n : ùïú) * x ^ (n - 1) :=
  (hasDerivWithinAt_pow n x s).derivWithin hxs

theorem HasDerivWithinAt.pow (hc : HasDerivWithinAt c c' s x) :
    HasDerivWithinAt (fun y => c y ^ n) ((n : ùïú) * c x ^ (n - 1) * c') s x :=
  (hasDerivAt_pow n (c x)).comp_hasDerivWithinAt x hc

theorem HasDerivAt.pow (hc : HasDerivAt c c' x) :
    HasDerivAt (fun y => c y ^ n) ((n : ùïú) * c x ^ (n - 1) * c') x := by
  rw [‚Üê hasDerivWithinAt_univ] at *
  exact hc.pow n

theorem derivWithin_pow' (hc : DifferentiableWithinAt ùïú c s x) :
    derivWithin (fun x => c x ^ n) s x = (n : ùïú) * c x ^ (n - 1) * derivWithin c s x := by
  rcases uniqueDiffWithinAt_or_nhdsWithin_eq_bot s x with hxs | hxs
  ¬∑ exact (hc.hasDerivWithinAt.pow n).derivWithin hxs
  ¬∑ simp [derivWithin_zero_of_isolated hxs]

@[simp]
theorem deriv_pow'' (hc : DifferentiableAt ùïú c x) :
    deriv (fun x => c x ^ n) x = (n : ùïú) * c x ^ (n - 1) * deriv c x :=
  (hc.hasDerivAt.pow n).deriv
