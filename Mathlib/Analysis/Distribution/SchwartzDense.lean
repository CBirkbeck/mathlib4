/-
Copyright (c) 2025 Jack Valmadre. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jack Valmadre
-/
import Mathlib.Analysis.Distribution.SchwartzSpace
import Mathlib.MeasureTheory.Function.CompactDense

/-!
# Density results for the Schwartz space

## Main definitions

* `MeasureTheory.Lp.LpSchwartzMap`: The subtype of `Lp F p Œº` comprising functions that have a
Schwartz function representative.

## Main statements

* `SchwartzMap.toLp_denseRange`: The map from `ùì¢(E, F)` to `Lp F p Œº` is dense.
* `MeasureTheory.Lp.LpSchwartzMap.dense`: The set of functions in `L^p` with a Schwartz
representative is dense.

## Implementation details

The density of the Schwartz functions in `L^p` is proved using the density of infinitely
differentiable, compactly supported functions in `L^p`, and the fact that these are a subset of the
Schwartz functions.
-/

open MeasureTheory
open scoped SchwartzMap ENNReal ContDiff

variable {ùïú D E F : Type*}
  [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  [NormedAddCommGroup F] [NormedSpace ‚Ñù F]

section DenseSchwartz

/-- Make a Schwartz function from an infinitely differentiable, compactly supported function. -/
def SchwartzMap.of_smooth_of_hasCompactSupport (f : E ‚Üí F) (hf_smooth : ContDiff ‚Ñù ‚àû f)
    (hf_supp : HasCompactSupport f) : ùì¢(E, F) where
  toFun x := f x
  smooth' := hf_smooth
  decay' := by
    have (m : ‚Ñï √ó ‚Ñï) : ‚àÉ C, ‚àÄ x, ‚Äñx‚Äñ ^ m.1 * ‚ÄñiteratedFDeriv ‚Ñù m.2 f x‚Äñ ‚â§ C := by
      suffices ‚àÉ C, ‚àÄ x, ‚Äñ‚Äñx‚Äñ ^ m.1 * ‚ÄñiteratedFDeriv ‚Ñù m.2 f x‚Äñ‚Äñ ‚â§ C by simpa using this
      refine HasCompactSupport.exists_bound_of_continuous ?_ ?_
      ¬∑ exact (hf_supp.iteratedFDeriv m.2).norm.mul_left
      ¬∑ refine .mul (continuous_norm.pow m.1) (.norm ?_)
        exact hf_smooth.continuous_iteratedFDeriv <| by simp [‚Üê WithTop.coe_natCast]
    choose C hC using this
    intro k n
    use (Finset.Iic (k, n)).sup' Finset.nonempty_Iic C
    exact fun x ‚Ü¶ Finset.le_sup'_of_le _ (by simp) (hC (k, n) x)

variable [MeasurableSpace E] [BorelSpace E] [FiniteDimensional ‚Ñù E] [HasContDiffBump E]
  [CompleteSpace F] {p : ‚Ñù‚â•0‚àû} [hp : Fact (1 ‚â§ p)]

variable (F) in
/-- Schwartz functions are dense in `L^p`. -/
theorem SchwartzMap.toLp_denseRange (hp_top : p ‚â† ‚ä§)
    (Œº : Measure E := by volume_tac) [hŒº : Œº.HasTemperateGrowth]
    [IsFiniteMeasureOnCompacts Œº] [Œº.IsOpenPosMeasure] [Œº.IsNegInvariant] [Œº.IsAddLeftInvariant] :
    DenseRange (fun f : ùì¢(E, F) ‚Ü¶ f.toLp p Œº) := by
  refine Dense.mono ?_ (ContDiff.toLp_denseRange hp_top Œº)
  exact Set.range_comp_subset_range
    (fun f : { f // ContDiff ‚Ñù ‚àû f ‚àß HasCompactSupport f } ‚Ü¶
      of_smooth_of_hasCompactSupport f.1 f.2.1 f.2.2)
    (fun f ‚Ü¶ f.toLp p Œº)

end DenseSchwartz

section LpSchwartzMap

variable [NormedField ùïú] [MeasurableSpace E] [BorelSpace E]
  [NormedSpace ùïú F] [SMulCommClass ‚Ñù ùïú F] [SecondCountableTopologyEither E F]

-- TODO: Maybe this should go under `SchwartzMap.LpSchwartzMap` instead?
namespace MeasureTheory

-- TODO: Should we just define this with `volume`??
variable (F) in
/-- The Schwartz functions (or rather, the equivalence class of functions with a Schwartz
representative) as an additive subgroup of `L^p`, equipped with the `L^p` norm.

This will be used to show that the Fourier transform is uniform continuous under the `L^2` norm. -/
noncomputable def Lp.LpSchwartzMap (p : ‚Ñù‚â•0‚àû) (Œº : Measure E := by volume_tac) :
    AddSubgroup (Lp F p Œº) :=
  AddSubgroup.addSubgroupOf
    (AddMonoidHom.range <| (ContinuousMap.toAEEqFunAddHom Œº).comp <|
      (BoundedContinuousFunction.toContinuousMapAddHom E F).comp <|
      SchwartzMap.toBoundedContinuousFunctionAddHom E F)
    (Lp F p Œº)

theorem Lp.LpSchwartzMap.mem_iff {p : ‚Ñù‚â•0‚àû} {Œº : Measure E} {f : Lp F p Œº} :
    f ‚àà LpSchwartzMap F p Œº ‚Üî
      ‚àÉ g : ùì¢(E, F), g.toBoundedContinuousFunction.toContinuousMap.toAEEqFun Œº = f :=
  AddSubgroup.mem_addSubgroupOf

theorem Lp.LpSchwartzMap.mem_iff_ae {p : ‚Ñù‚â•0‚àû} {Œº : Measure E} {f : Lp F p Œº} :
    f ‚àà LpSchwartzMap F p Œº ‚Üî ‚àÉ g : ùì¢(E, F), f =·µê[Œº] g := by
  rw [mem_iff]
  refine exists_congr fun g ‚Ü¶ ?_
  -- TODO: Easier way to show this?
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ rw [‚Üê h]
    filter_upwards [g.toBoundedContinuousFunction.toContinuousMap.coeFn_toAEEqFun Œº] with x h‚ÇÅ
    simp [h‚ÇÅ]
  ¬∑ ext
    filter_upwards [g.toBoundedContinuousFunction.toContinuousMap.coeFn_toAEEqFun Œº, h] with x h‚ÇÅ h‚ÇÇ
    simp [h‚ÇÅ, h‚ÇÇ]

-- TODO: Does this change anything?
instance Lp.LpSchwartzMap.instCoe {p : ‚Ñù‚â•0‚àû} {Œº : Measure E} :
    Coe (LpSchwartzMap F p Œº) (Lp F p Œº) where
  coe f := f

noncomputable instance Lp.LpSchwartzMap.instCoeFun {p : ‚Ñù‚â•0‚àû} {Œº : Measure E} :
    CoeFun (LpSchwartzMap F p Œº) (fun _ ‚Ü¶ E ‚Üí F) where
  coe f := f

variable (ùïú F) in
/-- `LpSchwartzMap` as a `Submodule`; used to obtain `Module`, `NormedSpace`. -/
noncomputable def Lp.LpSchwartzMapSubmodule (p : ‚Ñù‚â•0‚àû) (Œº : Measure E) : Submodule ùïú (Lp F p Œº) :=
  { LpSchwartzMap F p Œº with
    smul_mem' c f := by
      simp only [AddSubgroup.mem_carrier, @LpSchwartzMap.mem_iff_ae _]
      refine Exists.imp' (c ‚Ä¢ ¬∑) fun g hg ‚Ü¶ ?_
      filter_upwards [hg, coeFn_smul c f] with x h‚ÇÅ h‚ÇÇ
      simp [h‚ÇÅ, h‚ÇÇ] }

/-- `LpSchwartzMap F p Œº` is a `Module`. -/
noncomputable instance Lp.LpSchwartzMap.instModule {p : ‚Ñù‚â•0‚àû} {Œº : Measure E} :
    Module ùïú (LpSchwartzMap F p Œº) :=
  (LpSchwartzMapSubmodule ùïú F p Œº).module

/-- `LpSchwartzMap F p Œº` is a `NormedSpace`. -/
noncomputable instance Lp.LpSchwartzMap.instNormedSpace {p : ‚Ñù‚â•0‚àû} [Fact (1 ‚â§ p)] {Œº : Measure E} :
    NormedSpace ùïú (LpSchwartzMap F p Œº) :=
  (LpSchwartzMapSubmodule ùïú F p Œº).normedSpace

@[simp]
theorem Lp.LpSchwartzMap.coe_smul {p : ‚Ñù‚â•0‚àû} {Œº : Measure E} (c : ùïú) (f : LpSchwartzMap F p Œº) :
    ‚Üë(c ‚Ä¢ f) = c ‚Ä¢ (f : Lp F p Œº) :=
  (LpSchwartzMapSubmodule ùïú F p Œº).coe_smul c f

theorem _root_.SchwartzMap.toLp_mem_LpSchwartzMap
    (p : ‚Ñù‚â•0‚àû) (Œº : Measure E := by volume_tac) [Œº.HasTemperateGrowth] (f : ùì¢(E, F)) :
    f.toLp p Œº ‚àà Lp.LpSchwartzMap F p Œº := ‚ü®f, rfl‚ü©

/-- Obtain the Schwartz representative using `Exists.choose`. -/
noncomputable def Lp.LpSchwartzMap.choose {p : ‚Ñù‚â•0‚àû} {Œº : Measure E}
    (f : LpSchwartzMap F p Œº) : ùì¢(E, F) := (mem_iff.mp f.2).choose

/-- Prove `p ‚áëf` with `f : LpSchwartzMap F q Œº` by showing that
(1) ae-equality `f =·µê[Œº] f'` is sufficient to prove `p f' ‚Üí p f` and
(2) `p ‚áëg` holds for all Schwartz functions `g : ùì¢(E, F)`. -/
theorem Lp.LpSchwartzMap.induction_on {p : ‚Ñù‚â•0‚àû} {Œº : Measure E}
    (f : LpSchwartzMap F p Œº) (P : (E ‚Üí F) ‚Üí Prop)
    (h_congr : ‚àÄ ‚¶Éf' : E ‚Üí F‚¶Ñ, f =·µê[Œº] f' ‚Üí P f' ‚Üí P f) (h : ‚àÄ g : ùì¢(E, F), P g) : P f := by
  obtain ‚ü®f, hf‚ü© := f
  obtain ‚ü®g, hg‚ü© := mem_iff_ae.mp hf
  exact h_congr hg (h g)

theorem Lp.LpSchwartzMap.induction_on‚ÇÇ {p : ‚Ñù‚â•0‚àû} {Œº : Measure E}
    (f g : LpSchwartzMap F p Œº) (P : (E ‚Üí F) ‚Üí (E ‚Üí F) ‚Üí Prop)
    (h_congr : ‚àÄ ‚¶Éf' g' : E ‚Üí F‚¶Ñ, f =·µê[Œº] f' ‚Üí g =·µê[Œº] g' ‚Üí P f' g' ‚Üí P f g)
    (h : ‚àÄ f‚ÇÄ g‚ÇÄ : ùì¢(E, F), P f‚ÇÄ g‚ÇÄ) : P f g := by
  obtain ‚ü®f, hf‚ü© := f
  obtain ‚ü®g, hg‚ü© := g
  obtain ‚ü®f‚ÇÄ, hf‚ÇÄ‚ü© := mem_iff_ae.mp hf
  obtain ‚ü®g‚ÇÄ, hg‚ÇÄ‚ü© := mem_iff_ae.mp hg
  exact h_congr hf‚ÇÄ hg‚ÇÄ (h f‚ÇÄ g‚ÇÄ)

variable (ùïú F) in
/-- The map from the subtype `LpSchwartzMap` to `Lp` as a continuous linear map. -/
def Lp.LpSchwartzMap.subtypeL (p : ‚Ñù‚â•0‚àû) [Fact (1 ‚â§ p)] (Œº : Measure E) :
    LpSchwartzMap F p Œº ‚ÜíL[ùïú] Lp F p Œº where
  toFun f := f.val
  map_add' _ _ := rfl
  map_smul' _ _ := rfl
  cont := continuous_subtype_val

@[simp]
theorem Lp.LpSchwartzMap.coeFn_subtypeL (p : ‚Ñù‚â•0‚àû) [Fact (1 ‚â§ p)] (Œº : Measure E) :
    ‚áë(subtypeL ùïú F p Œº) = Subtype.val := rfl

end MeasureTheory

end LpSchwartzMap

section Dense

variable [MeasurableSpace E] [BorelSpace E] [FiniteDimensional ‚Ñù E] [HasContDiffBump E]
  [CompleteSpace F] {p : ‚Ñù‚â•0‚àû} [hp : Fact (1 ‚â§ p)]

/-- For any function `f` that satisfies `Mem‚Ñíp` with `p ‚â† ‚ä§`, there exists a Schwartz function
`g` which is arbitrarily close to `f` in the `L^p` distance. -/
theorem MeasureTheory.Mem‚Ñíp.exists_LpSchwartzMap_eLpNorm_sub_le (hp_top : p ‚â† ‚ä§) {Œº : Measure E}
    [IsFiniteMeasureOnCompacts Œº] [Œº.IsOpenPosMeasure] [Œº.IsNegInvariant] [Œº.IsAddLeftInvariant]
    {f : E ‚Üí F} (hf : Mem‚Ñíp f p Œº) {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : Œµ ‚â† 0) :
    ‚àÉ g : ùì¢(E, F), eLpNorm (f - (g : E ‚Üí F)) p Œº ‚â§ Œµ := by
  obtain ‚ü®g, hg_smooth, hg_supp, hg_dist‚ü© :=
    exists_contDiff_hasCompactSupport_eLpNorm_sub_le hp_top hf hŒµ
  exact ‚ü®SchwartzMap.of_smooth_of_hasCompactSupport g hg_smooth hg_supp, hg_dist‚ü©

variable (F) in
/-- The set of `L^p` functions with a Schwartz representative is dense in `L^p`. -/
theorem MeasureTheory.Lp.LpSchwartzMap.dense (hp_top : p ‚â† ‚ä§)
    (Œº : Measure E := by volume_tac) [hŒº : Œº.HasTemperateGrowth]
    [IsFiniteMeasureOnCompacts Œº] [Œº.IsOpenPosMeasure] [Œº.IsNegInvariant] [Œº.IsAddLeftInvariant] :
    Dense (LpSchwartzMap F p Œº : Set (Lp F p Œº)) := by
  intro f
  refine (mem_closure_iff_nhds_basis EMetric.nhds_basis_closed_eball).2 fun Œµ hŒµ ‚Ü¶ ?_
  obtain ‚ü®g, hg‚ü© := (Lp.mem‚Ñíp f).exists_LpSchwartzMap_eLpNorm_sub_le hp_top hŒµ.ne'
  use g.toLp p Œº, g.toLp_mem_LpSchwartzMap p Œº
  rw [EMetric.mem_closedBall, edist_comm, edist_def]
  refine le_of_eq_of_le (eLpNorm_congr_ae ?_) hg
  filter_upwards [g.coeFn_toLp p Œº] with x h‚ÇÅ
  simp [h‚ÇÅ]

end Dense
