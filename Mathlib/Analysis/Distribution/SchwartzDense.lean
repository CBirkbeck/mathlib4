/-
Copyright (c) 2025 Jack Valmadre. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jack Valmadre
-/
import Mathlib.Analysis.Distribution.SchwartzSpace
import Mathlib.MeasureTheory.Function.CompactDense
import Mathlib.MeasureTheory.Function.LpIntersection

/-!
# Density results for the Schwartz space

## Main definitions

* `MeasureTheory.Lp.LpSchwartzMap`: The subtype of `Lp F p Œº` comprising functions that have a
Schwartz function representative.

## Main statements

* `SchwartzMap.toLp_denseRange`: The map from `ùì¢(E, F)` to `Lp F p Œº` is dense.
* `MeasureTheory.Lp.LpSchwartzMap.dense`: The set of functions in `L^p` with a Schwartz
representative is dense.

## Implementation details

The density of the Schwartz functions in `L^p` is proved using the density of infinitely
differentiable, compactly supported functions in `L^p`, and the fact that these are a subset of the
Schwartz functions.
-/

open MeasureTheory Filter
open scoped SchwartzMap ENNReal ContDiff

variable {ùïú D E F : Type*}
  [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  [NormedAddCommGroup F] [NormedSpace ‚Ñù F]

section DenseSchwartz

/-- Make a Schwartz function from an infinitely differentiable, compactly supported function. -/
def SchwartzMap.of_smooth_of_hasCompactSupport (f : E ‚Üí F) (hf_smooth : ContDiff ‚Ñù ‚àû f)
    (hf_supp : HasCompactSupport f) : ùì¢(E, F) where
  toFun x := f x
  smooth' := hf_smooth
  decay' := by
    have (m : ‚Ñï √ó ‚Ñï) : ‚àÉ C, ‚àÄ x, ‚Äñx‚Äñ ^ m.1 * ‚ÄñiteratedFDeriv ‚Ñù m.2 f x‚Äñ ‚â§ C := by
      suffices ‚àÉ C, ‚àÄ x, ‚Äñ‚Äñx‚Äñ ^ m.1 * ‚ÄñiteratedFDeriv ‚Ñù m.2 f x‚Äñ‚Äñ ‚â§ C by simpa using this
      refine HasCompactSupport.exists_bound_of_continuous ?_ ?_
      ¬∑ exact (hf_supp.iteratedFDeriv m.2).norm.mul_left
      ¬∑ refine .mul (continuous_norm.pow m.1) (.norm ?_)
        exact hf_smooth.continuous_iteratedFDeriv <| by simp [‚Üê WithTop.coe_natCast]
    choose C hC using this
    intro k n
    use (Finset.Iic (k, n)).sup' Finset.nonempty_Iic C
    exact fun x ‚Ü¶ Finset.le_sup'_of_le _ (by simp) (hC (k, n) x)

variable [MeasurableSpace E] [BorelSpace E] [FiniteDimensional ‚Ñù E] [HasContDiffBump E]
  [CompleteSpace F] {p : ‚Ñù‚â•0‚àû} [hp : Fact (1 ‚â§ p)]

variable (F) in
/-- Schwartz functions are dense in `L^p`. -/
theorem SchwartzMap.toLp_denseRange (hp_top : p ‚â† ‚ä§)
    (Œº : Measure E := by volume_tac) [Œº.HasTemperateGrowth]
    [IsFiniteMeasureOnCompacts Œº] [Œº.IsOpenPosMeasure] [Œº.IsNegInvariant] [Œº.IsAddLeftInvariant] :
    DenseRange (fun f : ùì¢(E, F) ‚Ü¶ toLp f p Œº) := by
  refine Dense.mono ?_ (ContDiff.toLp_denseRange hp_top Œº)
  exact Set.range_comp_subset_range
    (fun f : { f // ContDiff ‚Ñù ‚àû f ‚àß HasCompactSupport f } ‚Ü¶
      of_smooth_of_hasCompactSupport f.1 f.2.1 f.2.2)
    (fun f ‚Ü¶ f.toLp p Œº)

end DenseSchwartz

section Dense

variable [MeasurableSpace E] [BorelSpace E] [FiniteDimensional ‚Ñù E] [HasContDiffBump E]
  [CompleteSpace F] {p : ‚Ñù‚â•0‚àû} [hp : Fact (1 ‚â§ p)]

/-- For any function `f` that satisfies `Mem‚Ñíp` with `p ‚â† ‚ä§`, there exists a Schwartz function
`g` which is arbitrarily close to `f` in the `L^p` distance. -/
theorem MeasureTheory.Mem‚Ñíp.exists_schwartzMap_eLpNorm_sub_le (hp_top : p ‚â† ‚ä§) {Œº : Measure E}
    [IsFiniteMeasureOnCompacts Œº] [Œº.IsOpenPosMeasure] [Œº.IsNegInvariant] [Œº.IsAddLeftInvariant]
    {f : E ‚Üí F} (hf : Mem‚Ñíp f p Œº) {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : Œµ ‚â† 0) :
    ‚àÉ g : ùì¢(E, F), eLpNorm (f - (g : E ‚Üí F)) p Œº ‚â§ Œµ := by
  obtain ‚ü®g, hg_smooth, hg_supp, hg_dist‚ü© :=
    exists_contDiff_hasCompactSupport_eLpNorm_sub_le hp_top hf hŒµ
  exact ‚ü®SchwartzMap.of_smooth_of_hasCompactSupport g hg_smooth hg_supp, hg_dist‚ü©

variable (F) in
/-- The set of `L^p` functions with a Schwartz representative is dense in `L^p`. -/
theorem SchwartzMap.denseRange_toLp (hp_top : p ‚â† ‚ä§)
-- theorem MeasureTheory.Lp.LpSchwartzMap.dense (hp_top : p ‚â† ‚ä§)
    (Œº : Measure E := by volume_tac) [Œº.HasTemperateGrowth]
    [IsFiniteMeasureOnCompacts Œº] [Œº.IsOpenPosMeasure] [Œº.IsNegInvariant] [Œº.IsAddLeftInvariant] :
    DenseRange (fun f : ùì¢(E, F) ‚Ü¶ toLp f p Œº) := by
  intro f
  refine (mem_closure_iff_nhds_basis EMetric.nhds_basis_closed_eball).2 fun Œµ hŒµ ‚Ü¶ ?_
  obtain ‚ü®g, hg‚ü© := (Lp.mem‚Ñíp f).exists_schwartzMap_eLpNorm_sub_le hp_top hŒµ.ne'
  refine ‚ü®g.toLp p Œº, Set.mem_range_self g, ?_‚ü©
  rw [EMetric.mem_closedBall, edist_comm, Lp.edist_def]
  refine le_of_eq_of_le (eLpNorm_congr_ae ?_) hg
  filter_upwards [g.coeFn_toLp p Œº] with x h‚ÇÅ
  simp [h‚ÇÅ]

end Dense


namespace SchwartzMap

variable {ùïú D E F : Type*}
  [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [MeasurableSpace E]
  [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
  [NormedField ùïú] [NormedSpace ùïú F] [SMulCommClass ‚Ñù ùïú F]

/-! ## Schwartz function to `L^p ‚à© L^q` -/

section LpInf

variable [OpensMeasurableSpace E] [SecondCountableTopologyEither E F]

/-- Map from Schwartz map to `L^p ‚à© L^q` as a linear map. Serves to define a `Submodule`. -/
def toLpInf (p‚ÇÅ p‚ÇÇ : ‚Ñù‚â•0‚àû) (Œº : Measure E) [Œº.HasTemperateGrowth] :
    ùì¢(E, F) ‚Üí+ ‚Üë(Lp F p‚ÇÅ Œº ‚äì Lp F p‚ÇÇ Œº) where
  -- toFun f := ‚ü®AEEqFun.mk f _, ‚ü®(f.toLp p‚ÇÅ Œº).2, (f.toLp p‚ÇÇ Œº).2‚ü©‚ü©
  toFun f := ‚ü®AEEqFun.mk f _, Lp.mk_mem_inf_of_eLpNorm_lt_top f f.continuous.aestronglyMeasurable
    (f.eLpNorm_lt_top p‚ÇÅ Œº) (f.eLpNorm_lt_top p‚ÇÇ Œº)‚ü©
  map_zero' := rfl
  map_add' _ _ := rfl

-- TODO: Provide CLM?
variable (ùïú F) in
/-- Map from Schwartz map to `L^p ‚à© L^q` as a linear map. Serves to define a `Submodule`. -/
def toLpInfLM (p‚ÇÅ p‚ÇÇ : ‚Ñù‚â•0‚àû) (Œº : Measure E) [Œº.HasTemperateGrowth] :
    ùì¢(E, F) ‚Üí‚Çó[ùïú] ‚Üë(Lp F p‚ÇÅ Œº ‚äì Lp F p‚ÇÇ Œº) :=
  { toLpInf p‚ÇÅ p‚ÇÇ Œº with map_smul' _ _ := rfl }

theorem mem_range_toLpInfLM_iff
    {p‚ÇÅ p‚ÇÇ : ‚Ñù‚â•0‚àû} {Œº : Measure E} [hŒº : Œº.HasTemperateGrowth] {f : ‚Üë(Lp F p‚ÇÅ Œº ‚äì Lp F p‚ÇÇ Œº)} :
    f ‚àà LinearMap.range (toLpInfLM ùïú F p‚ÇÅ p‚ÇÇ Œº) ‚Üî ‚àÉ g : ùì¢(E, F), g =·µê[Œº] f := by
  refine exists_congr fun g ‚Ü¶ ?_
  rw [Subtype.ext_iff_val, AEEqFun.ext_iff]
  exact (coeFn_toAEEqFun ùïú Œº g).congr_left

end LpInf

section Dense

variable [BorelSpace E] [FiniteDimensional ‚Ñù E] [HasContDiffBump E] [CompleteSpace F]

variable (F) in
/-- Schwartz functions are dense in `L^p`. -/
theorem toLpInf_denseRange {p‚ÇÅ p‚ÇÇ : ‚Ñù‚â•0‚àû} [Fact (1 ‚â§ p‚ÇÅ)] [Fact (1 ‚â§ p‚ÇÇ)]
    (hp‚ÇÅ_top : p‚ÇÅ ‚â† ‚ä§) (hp‚ÇÇ_top : p‚ÇÇ ‚â† ‚ä§) (Œº : Measure E := by volume_tac) [Œº.HasTemperateGrowth]
    [IsFiniteMeasureOnCompacts Œº] [Œº.IsOpenPosMeasure] [Œº.IsNegInvariant] [Œº.IsAddLeftInvariant] :
    DenseRange (toLpInf p‚ÇÅ p‚ÇÇ Œº : ùì¢(E, F) ‚Üí _) := by
  refine Metric.denseRange_iff.mpr ?_
  intro f r hr
  obtain ‚ü®g‚ÇÅ, hg‚ÇÅ‚ü© := (toLp_denseRange F hp‚ÇÅ_top Œº).exists_dist_lt (AddSubgroup.inf_fst f) hr
  obtain ‚ü®g‚ÇÇ, hg‚ÇÇ‚ü© := (toLp_denseRange F hp‚ÇÇ_top Œº).exists_dist_lt (AddSubgroup.inf_snd f) hr
  simp only [Lp.dist_inf_def]
  simp only [sup_lt_iff]
  simp only [Lp.dist_def, AddSubgroup.inf_fst_val, AddSubgroup.inf_snd_val]
  -- No control over `p‚ÇÅ`-distance of `g‚ÇÇ` or `p‚ÇÇ`-distance of `g‚ÇÅ`!
  -- Need to consider mutiple `p` at earlier point.
  sorry

end Dense

end SchwartzMap
