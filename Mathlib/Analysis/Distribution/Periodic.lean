/-
Copyright (c) 2024 Jack Valmadre. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jack Valmadre
-/
import Mathlib.Analysis.Distribution.SchwartzSpace

/-!
# Temperate growth
-/

open scoped ContDiff Real

variable {ùïú Œ± Œ≤ E F : Type*} [NormedAddCommGroup E] [NormedAddCommGroup F]

namespace Function

section PeriodicUtil

variable [NontriviallyNormedField ùïú] [NormedSpace ùïú E] [NormedSpace ùïú F]

variable (ùïú) in
/-- If a function is is periodic, then its derivative is periodic. -/
theorem Periodic.fderiv {f : E ‚Üí F} {c : E} (hf : Periodic f c) : Periodic (fderiv ùïú f) c := by
  intro x
  rw [‚Üê fderiv_comp_add_right, hf.funext]

variable (ùïú) in
/-- If a function is is periodic, then all of its derivatives are periodic. -/
theorem Periodic.iteratedFDeriv (n : ‚Ñï) {f : E ‚Üí F} {c : E} (hf : Periodic f c) :
    Periodic (iteratedFDeriv ùïú n f) c := by
  intro x
  rw [‚Üê iteratedFDeriv_comp_add_right, hf.funext]

variable [LinearOrderedAddCommGroup Œ±] [Archimedean Œ±] [TopologicalSpace Œ±] [CompactIccSpace Œ±]
  [LinearOrder Œ≤] [TopologicalSpace Œ≤] [ClosedIciTopology Œ≤]

theorem Periodic.bddAbove_range_of_continuous [Nonempty Œ≤] {f : Œ± ‚Üí Œ≤} {c : Œ±}
    (hf : Periodic f c) (hc : c ‚â† 0) (hf_cont : Continuous f) :
    BddAbove (Set.range f) := by
  rw [‚Üê hf.image_uIcc hc 0]
  exact IsCompact.bddAbove_image isCompact_uIcc hf_cont.continuousOn

/-- Continuous periodic functions on an infinite, ordered set are bounded. -/
theorem Periodic.exists_bound_of_continuous {f : Œ± ‚Üí F} {c : Œ±}
    (hf : Periodic f c) (hc : c ‚â† 0) (hf_cont : Continuous f) : ‚àÉ C, ‚àÄ x, ‚Äñf x‚Äñ ‚â§ C := by
  have h := (hf.comp fun y ‚Ü¶ ‚Äñy‚Äñ).bddAbove_range_of_continuous hc hf_cont.norm
  rcases h.exists_ge 0 with ‚ü®C, _, hC‚ü©
  exact ‚ü®C, fun x ‚Ü¶ by simpa using hC ‚Äñf x‚Äñ‚ü©

end PeriodicUtil

section HasTemperateGrowth

variable [NormedSpace ‚Ñù F]

-- TODO: Could generalize beyond `‚Ñù`? Not necessary at this stage.
theorem Periodic.hasTemperateGrowth {f : ‚Ñù ‚Üí F} {c : ‚Ñù} (hf : Periodic f c) (hc : c ‚â† 0)
    (hf_smooth : ContDiff ‚Ñù ‚àû f) : f.HasTemperateGrowth := by
  refine ‚ü®hf_smooth, fun n ‚Ü¶ ‚ü®0, ?_‚ü©‚ü©
  simpa using (hf.iteratedFDeriv ‚Ñù n).exists_bound_of_continuous hc
    (hf_smooth.continuous_iteratedFDeriv (by norm_cast; simp))

end HasTemperateGrowth

end Function

theorem Complex.exp_ofReal_mul_I_periodic : Function.Periodic (fun x : ‚Ñù ‚Ü¶ exp (x * I)) (2 * œÄ) :=
  fun x ‚Ü¶ by simp [add_mul, exp_add]

theorem Real.cos_hasTemperateGrowth : cos.HasTemperateGrowth :=
  cos_periodic.hasTemperateGrowth two_pi_pos.ne' contDiff_cos

theorem Real.sin_hasTemperateGrowth : sin.HasTemperateGrowth :=
  sin_periodic.hasTemperateGrowth two_pi_pos.ne' contDiff_sin

theorem Complex.exp_ofReal_mul_I_hasTemperateGrowth :
    (fun x : ‚Ñù ‚Ü¶ exp (x * I)).HasTemperateGrowth :=
  exp_ofReal_mul_I_periodic.hasTemperateGrowth Real.two_pi_pos.ne'
    (ofRealCLM.contDiff.mul contDiff_const).cexp
