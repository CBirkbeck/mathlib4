/-
Copyright (c) 2021 Yury G. Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury G. Kudryashov, Winston Yin
-/
import Mathlib.Analysis.SpecialFunctions.Integrals
import Mathlib.Topology.MetricSpace.Contracting

#align_import analysis.ODE.picard_lindelof from "leanprover-community/mathlib"@"f2ce6086713c78a7f880485f7917ea547a215982"

/-!
# Picard-Lindel√∂f (Cauchy-Lipschitz) Theorem

In this file we prove that an ordinary differential equation $\dot x=v(t, x)$ such that $v$ is
Lipschitz continuous in $x$ and continuous in $t$ has a local solution, see
`IsPicardLindelof.exists_forall_hasDerivWithinAt_Icc_eq`.

As a corollary, we prove that a time-independent locally continuously differentiable ODE has a
local solution.

## Implementation notes

In order to split the proof into small lemmas, we introduce a structure `PicardLindelof` that holds
all assumptions of the main theorem. This structure and lemmas in the `PicardLindelof` namespace
should be treated as private implementation details. This is not to be confused with the `Prop`-
valued structure `IsPicardLindelof`, which holds the long hypotheses of the Picard-Lindel√∂f
theorem for actual use as part of the public API.

We only prove existence of a solution in this file. For uniqueness see `ODE_solution_unique` and
related theorems in `Mathlib/Analysis/ODE/Gronwall.lean`.

## Tags

differential equation
-/

local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y) -- Porting note: See issue lean4#2220

open Filter Function Set Metric TopologicalSpace intervalIntegral MeasureTheory
open MeasureTheory.MeasureSpace (volume)
open scoped Filter Topology NNReal ENNReal Nat Interval

noncomputable section

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]

/-- `Prop` structure holding the hypotheses of the Picard-Lindel√∂f theorem.

The similarly named `PicardLindelof` structure is part of the internal API for convenience, so as
not to constantly invoke choice, but is not intended for public use. -/
structure IsPicardLindelof {E : Type*} [NormedAddCommGroup E] (v : ‚Ñù ‚Üí E ‚Üí E) (tMin t‚ÇÄ tMax : ‚Ñù)
    (x‚ÇÄ : E) (L : ‚Ñù‚â•0) (R C : ‚Ñù) : Prop where
  ht‚ÇÄ : t‚ÇÄ ‚àà Icc tMin tMax
  hR : 0 ‚â§ R
  lipschitz : ‚àÄ t ‚àà Icc tMin tMax, LipschitzOnWith L (v t) (closedBall x‚ÇÄ R)
  cont : ‚àÄ x ‚àà closedBall x‚ÇÄ R, ContinuousOn (fun t : ‚Ñù => v t x) (Icc tMin tMax)
  norm_le : ‚àÄ t ‚àà Icc tMin tMax, ‚àÄ x ‚àà closedBall x‚ÇÄ R, ‚Äñv t x‚Äñ ‚â§ C
  C_mul_le_R : (C : ‚Ñù) * max (tMax - t‚ÇÄ) (t‚ÇÄ - tMin) ‚â§ R
#align is_picard_lindelof IsPicardLindelof

/-- This structure holds arguments of the Picard-Lipschitz (Cauchy-Lipschitz) theorem. It is part of
the internal API for convenience, so as not to constantly invoke choice. Unless you want to use one
of the auxiliary lemmas, use `IsPicardLindelof.exists_forall_hasDerivWithinAt_Icc_eq` instead
of using this structure.

The similarly named `IsPicardLindelof` is a bundled `Prop` holding the long hypotheses of the
Picard-Lindel√∂f theorem as named arguments. It is used as part of the public API.
-/
structure PicardLindelof (E : Type*) [NormedAddCommGroup E] [NormedSpace ‚Ñù E] where
  toFun : ‚Ñù ‚Üí E ‚Üí E
  (tMin tMax : ‚Ñù)
  t‚ÇÄ : Icc tMin tMax
  x‚ÇÄ : E
  (C R L : ‚Ñù‚â•0)
  isPicardLindelof : IsPicardLindelof toFun tMin t‚ÇÄ tMax x‚ÇÄ L R C
#align picard_lindelof PicardLindelof

namespace PicardLindelof

variable (v : PicardLindelof E)

instance : CoeFun (PicardLindelof E) fun _ => ‚Ñù ‚Üí E ‚Üí E :=
  ‚ü®toFun‚ü©

instance : Inhabited (PicardLindelof E) :=
  ‚ü®‚ü®0, 0, 0, ‚ü®0, le_rfl, le_rfl‚ü©, 0, 0, 0, 0,
      { ht‚ÇÄ := by rw [Subtype.coe_mk, Icc_self]; exact mem_singleton _
                  -- ‚ä¢ 0 ‚àà {0}
                                                 -- üéâ no goals
        hR := le_rfl
        lipschitz := fun t _ => (LipschitzWith.const 0).lipschitzOnWith _
        cont := fun _ _ => by simpa only [Pi.zero_apply] using continuousOn_const
                              -- üéâ no goals
        norm_le := fun t _ x _ => norm_zero.le
        C_mul_le_R := (zero_mul _).le }‚ü©‚ü©

theorem tMin_le_tMax : v.tMin ‚â§ v.tMax :=
  v.t‚ÇÄ.2.1.trans v.t‚ÇÄ.2.2
#align picard_lindelof.t_min_le_t_max PicardLindelof.tMin_le_tMax

protected theorem nonempty_Icc : (Icc v.tMin v.tMax).Nonempty :=
  nonempty_Icc.2 v.tMin_le_tMax
#align picard_lindelof.nonempty_Icc PicardLindelof.nonempty_Icc

protected theorem lipschitzOnWith {t} (ht : t ‚àà Icc v.tMin v.tMax) :
    LipschitzOnWith v.L (v t) (closedBall v.x‚ÇÄ v.R) :=
  v.isPicardLindelof.lipschitz t ht
#align picard_lindelof.lipschitz_on_with PicardLindelof.lipschitzOnWith

protected theorem continuousOn :
    ContinuousOn (uncurry v) (Icc v.tMin v.tMax √óÀ¢ closedBall v.x‚ÇÄ v.R) :=
  have : ContinuousOn (uncurry (flip v)) (closedBall v.x‚ÇÄ v.R √óÀ¢ Icc v.tMin v.tMax) :=
    continuousOn_prod_of_continuousOn_lipschitzOnWith _ v.L v.isPicardLindelof.cont
      v.isPicardLindelof.lipschitz
  this.comp continuous_swap.continuousOn (preimage_swap_prod _ _).symm.subset
#align picard_lindelof.continuous_on PicardLindelof.continuousOn

theorem norm_le {t : ‚Ñù} (ht : t ‚àà Icc v.tMin v.tMax) {x : E} (hx : x ‚àà closedBall v.x‚ÇÄ v.R) :
    ‚Äñv t x‚Äñ ‚â§ v.C :=
  v.isPicardLindelof.norm_le _ ht _ hx
#align picard_lindelof.norm_le PicardLindelof.norm_le

/-- The maximum of distances from `t‚ÇÄ` to the endpoints of `[tMin, tMax]`. -/
def tDist : ‚Ñù :=
  max (v.tMax - v.t‚ÇÄ) (v.t‚ÇÄ - v.tMin)
#align picard_lindelof.t_dist PicardLindelof.tDist

theorem tDist_nonneg : 0 ‚â§ v.tDist :=
  le_max_iff.2 <| Or.inl <| sub_nonneg.2 v.t‚ÇÄ.2.2
#align picard_lindelof.t_dist_nonneg PicardLindelof.tDist_nonneg

theorem dist_t‚ÇÄ_le (t : Icc v.tMin v.tMax) : dist t v.t‚ÇÄ ‚â§ v.tDist := by
  rw [Subtype.dist_eq, Real.dist_eq]
  -- ‚ä¢ |‚Üët - ‚Üëv.t‚ÇÄ| ‚â§ tDist v
  cases' le_total t v.t‚ÇÄ with ht ht
  -- ‚ä¢ |‚Üët - ‚Üëv.t‚ÇÄ| ‚â§ tDist v
  ¬∑ rw [abs_of_nonpos (sub_nonpos.2 <| Subtype.coe_le_coe.2 ht), neg_sub]
    -- ‚ä¢ ‚Üëv.t‚ÇÄ - ‚Üët ‚â§ tDist v
    exact (sub_le_sub_left t.2.1 _).trans (le_max_right _ _)
    -- üéâ no goals
  ¬∑ rw [abs_of_nonneg (sub_nonneg.2 <| Subtype.coe_le_coe.2 ht)]
    -- ‚ä¢ ‚Üët - ‚Üëv.t‚ÇÄ ‚â§ tDist v
    exact (sub_le_sub_right t.2.2 _).trans (le_max_left _ _)
    -- üéâ no goals
#align picard_lindelof.dist_t‚ÇÄ_le PicardLindelof.dist_t‚ÇÄ_le

/-- Projection $‚Ñù ‚Üí [t_{\min}, t_{\max}]$ sending $(-‚àû, t_{\min}]$ to $t_{\min}$ and $[t_{\max}, ‚àû)$
to $t_{\max}$. -/
def proj : ‚Ñù ‚Üí Icc v.tMin v.tMax :=
  projIcc v.tMin v.tMax v.tMin_le_tMax
#align picard_lindelof.proj PicardLindelof.proj

theorem proj_coe (t : Icc v.tMin v.tMax) : v.proj t = t :=
  projIcc_val _ _
#align picard_lindelof.proj_coe PicardLindelof.proj_coe

theorem proj_of_mem {t : ‚Ñù} (ht : t ‚àà Icc v.tMin v.tMax) : ‚Üë(v.proj t) = t := by
  simp only [proj, projIcc_of_mem v.tMin_le_tMax ht]
  -- üéâ no goals
#align picard_lindelof.proj_of_mem PicardLindelof.proj_of_mem

@[continuity]
theorem continuous_proj : Continuous v.proj :=
  continuous_projIcc
#align picard_lindelof.continuous_proj PicardLindelof.continuous_proj

/-- The space of curves $Œ≥ \colon [t_{\min}, t_{\max}] \to E$ such that $Œ≥(t‚ÇÄ) = x‚ÇÄ$ and $Œ≥$ is
Lipschitz continuous with constant $C$. The map sending $Œ≥$ to
$\mathbf PŒ≥(t)=x‚ÇÄ + ‚à´_{t‚ÇÄ}^{t} v(œÑ, Œ≥(œÑ))\,dœÑ$ is a contracting map on this space, and its fixed
point is a solution of the ODE $\dot x=v(t, x)$. -/
structure FunSpace where
  toFun : Icc v.tMin v.tMax ‚Üí E
  map_t‚ÇÄ' : toFun v.t‚ÇÄ = v.x‚ÇÄ
  lipschitz' : LipschitzWith v.C toFun
#align picard_lindelof.fun_space PicardLindelof.FunSpace

namespace FunSpace

variable {v} (f : FunSpace v)

instance : CoeFun (FunSpace v) fun _ => Icc v.tMin v.tMax ‚Üí E :=
  ‚ü®toFun‚ü©

instance : Inhabited v.FunSpace :=
  ‚ü®‚ü®fun _ => v.x‚ÇÄ, rfl, (LipschitzWith.const _).weaken (zero_le _)‚ü©‚ü©

protected theorem lipschitz : LipschitzWith v.C f :=
  f.lipschitz'
#align picard_lindelof.fun_space.lipschitz PicardLindelof.FunSpace.lipschitz

protected theorem continuous : Continuous f :=
  f.lipschitz.continuous
#align picard_lindelof.fun_space.continuous PicardLindelof.FunSpace.continuous

/-- Each curve in `PicardLindelof.FunSpace` is continuous. -/
def toContinuousMap : v.FunSpace ‚Ü™ C(Icc v.tMin v.tMax, E) :=
  ‚ü®fun f => ‚ü®f, f.continuous‚ü©, fun f g h => by cases f; cases g; simpa using h‚ü©
                                               -- ‚ä¢ { toFun := toFun‚úù, map_t‚ÇÄ' := map_t‚ÇÄ'‚úù, lipschitz' := lipschitz'‚úù } = g
                                                        -- ‚ä¢ { toFun := toFun‚úù¬π, map_t‚ÇÄ' := map_t‚ÇÄ'‚úù¬π, lipschitz' := lipschitz'‚úù¬π } = { t ‚Ä¶
                                                                 -- üéâ no goals
#align picard_lindelof.fun_space.to_continuous_map PicardLindelof.FunSpace.toContinuousMap

instance : MetricSpace v.FunSpace :=
  MetricSpace.induced toContinuousMap toContinuousMap.injective inferInstance

theorem uniformInducing_toContinuousMap : UniformInducing (@toContinuousMap _ _ _ v) :=
  ‚ü®rfl‚ü©
#align picard_lindelof.fun_space.uniform_inducing_to_continuous_map PicardLindelof.FunSpace.uniformInducing_toContinuousMap

theorem range_toContinuousMap :
    range toContinuousMap =
      {f : C(Icc v.tMin v.tMax, E) | f v.t‚ÇÄ = v.x‚ÇÄ ‚àß LipschitzWith v.C f} := by
  ext f; constructor
  -- ‚ä¢ f ‚àà range ‚ÜëtoContinuousMap ‚Üî f ‚àà {f | ‚Üëf v.t‚ÇÄ = v.x‚ÇÄ ‚àß LipschitzWith v.C ‚Üëf}
         -- ‚ä¢ f ‚àà range ‚ÜëtoContinuousMap ‚Üí f ‚àà {f | ‚Üëf v.t‚ÇÄ = v.x‚ÇÄ ‚àß LipschitzWith v.C ‚Üëf}
  ¬∑ rintro ‚ü®‚ü®f, hf‚ÇÄ, hf_lip‚ü©, rfl‚ü©; exact ‚ü®hf‚ÇÄ, hf_lip‚ü©
    -- ‚ä¢ ‚ÜëtoContinuousMap { toFun := f, map_t‚ÇÄ' := hf‚ÇÄ, lipschitz' := hf_lip } ‚àà {f | ‚Ä¶
                                    -- üéâ no goals
  ¬∑ rcases f with ‚ü®f, hf‚ü©; rintro ‚ü®hf‚ÇÄ, hf_lip‚ü©; exact ‚ü®‚ü®f, hf‚ÇÄ, hf_lip‚ü©, rfl‚ü©
    -- ‚ä¢ ContinuousMap.mk f ‚àà {f | ‚Üëf v.t‚ÇÄ = v.x‚ÇÄ ‚àß LipschitzWith v.C ‚Üëf} ‚Üí Continuou ‚Ä¶
                           -- ‚ä¢ ContinuousMap.mk f ‚àà range ‚ÜëtoContinuousMap
                                                 -- üéâ no goals
#align picard_lindelof.fun_space.range_to_continuous_map PicardLindelof.FunSpace.range_toContinuousMap

theorem map_t‚ÇÄ : f v.t‚ÇÄ = v.x‚ÇÄ :=
  f.map_t‚ÇÄ'
#align picard_lindelof.fun_space.map_t‚ÇÄ PicardLindelof.FunSpace.map_t‚ÇÄ

protected theorem mem_closedBall (t : Icc v.tMin v.tMax) : f t ‚àà closedBall v.x‚ÇÄ v.R :=
  calc
    dist (f t) v.x‚ÇÄ = dist (f t) (f.toFun v.t‚ÇÄ) := by rw [f.map_t‚ÇÄ']
                                                      -- üéâ no goals
    _ ‚â§ v.C * dist t v.t‚ÇÄ := (f.lipschitz.dist_le_mul _ _)
    _ ‚â§ v.C * v.tDist := (mul_le_mul_of_nonneg_left (v.dist_t‚ÇÄ_le _) v.C.2)
    _ ‚â§ v.R := v.isPicardLindelof.C_mul_le_R
#align picard_lindelof.fun_space.mem_closed_ball PicardLindelof.FunSpace.mem_closedBall

/-- Given a curve $Œ≥ \colon [t_{\min}, t_{\max}] ‚Üí E$, `PicardLindelof.vComp` is the function
$F(t)=v(œÄ t, Œ≥(œÄ t))$, where `œÄ` is the projection $‚Ñù ‚Üí [t_{\min}, t_{\max}]$. The integral of this
function is the image of `Œ≥` under the contracting map we are going to define below. -/
def vComp (t : ‚Ñù) : E :=
  v (v.proj t) (f (v.proj t))
#align picard_lindelof.fun_space.v_comp PicardLindelof.FunSpace.vComp

theorem vComp_apply_coe (t : Icc v.tMin v.tMax) : f.vComp t = v t (f t) := by
  simp only [vComp, proj_coe]
  -- üéâ no goals
#align picard_lindelof.fun_space.v_comp_apply_coe PicardLindelof.FunSpace.vComp_apply_coe

theorem continuous_vComp : Continuous f.vComp := by
  have := (continuous_subtype_val.prod_mk f.continuous).comp v.continuous_proj
  -- ‚ä¢ Continuous (vComp f)
  refine' ContinuousOn.comp_continuous v.continuousOn this fun x => _
  -- ‚ä¢ ((fun x => (‚Üëx, toFun f x)) ‚àò proj v) x ‚àà Icc v.tMin v.tMax √óÀ¢ closedBall v. ‚Ä¶
  exact ‚ü®(v.proj x).2, f.mem_closedBall _‚ü©
  -- üéâ no goals
#align picard_lindelof.fun_space.continuous_v_comp PicardLindelof.FunSpace.continuous_vComp

theorem norm_vComp_le (t : ‚Ñù) : ‚Äñf.vComp t‚Äñ ‚â§ v.C :=
  v.norm_le (v.proj t).2 <| f.mem_closedBall _
#align picard_lindelof.fun_space.norm_v_comp_le PicardLindelof.FunSpace.norm_vComp_le

theorem dist_apply_le_dist (f‚ÇÅ f‚ÇÇ : FunSpace v) (t : Icc v.tMin v.tMax) :
    dist (f‚ÇÅ t) (f‚ÇÇ t) ‚â§ dist f‚ÇÅ f‚ÇÇ :=
  @ContinuousMap.dist_apply_le_dist _ _ _ _ _ (toContinuousMap f‚ÇÅ) (toContinuousMap f‚ÇÇ) _
#align picard_lindelof.fun_space.dist_apply_le_dist PicardLindelof.FunSpace.dist_apply_le_dist

theorem dist_le_of_forall {f‚ÇÅ f‚ÇÇ : FunSpace v} {d : ‚Ñù} (h : ‚àÄ t, dist (f‚ÇÅ t) (f‚ÇÇ t) ‚â§ d) :
    dist f‚ÇÅ f‚ÇÇ ‚â§ d :=
  (@ContinuousMap.dist_le_iff_of_nonempty _ _ _ _ _ (toContinuousMap f‚ÇÅ) (toContinuousMap f‚ÇÇ) _
    v.nonempty_Icc.to_subtype).2 h
#align picard_lindelof.fun_space.dist_le_of_forall PicardLindelof.FunSpace.dist_le_of_forall

instance [CompleteSpace E] : CompleteSpace v.FunSpace := by
  refine' (completeSpace_iff_isComplete_range uniformInducing_toContinuousMap).2
      (IsClosed.isComplete _)
  rw [range_toContinuousMap, setOf_and]
  -- ‚ä¢ IsClosed ({a | ‚Üëa v.t‚ÇÄ = v.x‚ÇÄ} ‚à© {a | LipschitzWith v.C ‚Üëa})
  refine' (isClosed_eq (ContinuousMap.continuous_eval_const _) continuous_const).inter _
  -- ‚ä¢ IsClosed {a | LipschitzWith v.C ‚Üëa}
  have : IsClosed {f : Icc v.tMin v.tMax ‚Üí E | LipschitzWith v.C f} :=
    isClosed_setOf_lipschitzWith v.C
  exact this.preimage ContinuousMap.continuous_coe
  -- üéâ no goals

theorem intervalIntegrable_vComp (t‚ÇÅ t‚ÇÇ : ‚Ñù) : IntervalIntegrable f.vComp volume t‚ÇÅ t‚ÇÇ :=
  f.continuous_vComp.intervalIntegrable _ _
#align picard_lindelof.fun_space.interval_integrable_v_comp PicardLindelof.FunSpace.intervalIntegrable_vComp

variable [CompleteSpace E]

/-- The Picard-Lindel√∂f operator. This is a contracting map on `PicardLindelof.FunSpace v` such
that the fixed point of this map is the solution of the corresponding ODE.

More precisely, some iteration of this map is a contracting map. -/
def next (f : FunSpace v) : FunSpace v where
  toFun t := v.x‚ÇÄ + ‚à´ œÑ : ‚Ñù in v.t‚ÇÄ..t, f.vComp œÑ
  map_t‚ÇÄ' := by simp only [integral_same, add_zero]
                -- üéâ no goals
  lipschitz' := LipschitzWith.of_dist_le_mul fun t‚ÇÅ t‚ÇÇ => by
    rw [dist_add_left, dist_eq_norm,
      integral_interval_sub_left (f.intervalIntegrable_vComp _ _) (f.intervalIntegrable_vComp _ _)]
    exact norm_integral_le_of_norm_le_const fun t _ => f.norm_vComp_le _
    -- üéâ no goals
#align picard_lindelof.fun_space.next PicardLindelof.FunSpace.next

theorem next_apply (t : Icc v.tMin v.tMax) : f.next t = v.x‚ÇÄ + ‚à´ œÑ : ‚Ñù in v.t‚ÇÄ..t, f.vComp œÑ :=
  rfl
#align picard_lindelof.fun_space.next_apply PicardLindelof.FunSpace.next_apply

theorem hasDerivWithinAt_next (t : Icc v.tMin v.tMax) :
    HasDerivWithinAt (f.next ‚àò v.proj) (v t (f t)) (Icc v.tMin v.tMax) t := by
  haveI : Fact ((t : ‚Ñù) ‚àà Icc v.tMin v.tMax) := ‚ü®t.2‚ü©
  -- ‚ä¢ HasDerivWithinAt ((next f).toFun ‚àò proj v) (PicardLindelof.toFun v (‚Üët) (toF ‚Ä¶
  simp only [(¬∑ ‚àò ¬∑), next_apply]
  -- ‚ä¢ HasDerivWithinAt (fun x => v.x‚ÇÄ + ‚à´ (œÑ : ‚Ñù) in ‚Üëv.t‚ÇÄ..‚Üë(proj v x), vComp f œÑ ‚Ä¶
  refine' HasDerivWithinAt.const_add _ _
  -- ‚ä¢ HasDerivWithinAt (fun x => ‚à´ (œÑ : ‚Ñù) in ‚Üëv.t‚ÇÄ..‚Üë(proj v x), vComp f œÑ) (Pica ‚Ä¶
  have : HasDerivWithinAt (‚à´ œÑ in v.t‚ÇÄ..¬∑, f.vComp œÑ) (f.vComp t) (Icc v.tMin v.tMax) t :=
    integral_hasDerivWithinAt_right (f.intervalIntegrable_vComp _ _)
      (f.continuous_vComp.stronglyMeasurableAtFilter _ _)
      f.continuous_vComp.continuousWithinAt
  rw [vComp_apply_coe] at this
  -- ‚ä¢ HasDerivWithinAt (fun x => ‚à´ (œÑ : ‚Ñù) in ‚Üëv.t‚ÇÄ..‚Üë(proj v x), vComp f œÑ) (Pica ‚Ä¶
  refine' this.congr_of_eventuallyEq_of_mem _ t.coe_prop
  -- ‚ä¢ (fun x => ‚à´ (œÑ : ‚Ñù) in ‚Üëv.t‚ÇÄ..‚Üë(proj v x), vComp f œÑ) =·∂†[ùìù[Icc v.tMin v.tMax ‚Ä¶
  filter_upwards [self_mem_nhdsWithin] with _ ht'
  -- ‚ä¢ ‚à´ (œÑ : ‚Ñù) in ‚Üëv.t‚ÇÄ..‚Üë(proj v a‚úù), vComp f œÑ = ‚à´ (œÑ : ‚Ñù) in ‚Üëv.t‚ÇÄ..a‚úù, vComp  ‚Ä¶
  rw [v.proj_of_mem ht']
  -- üéâ no goals
#align picard_lindelof.fun_space.has_deriv_within_at_next PicardLindelof.FunSpace.hasDerivWithinAt_next

theorem dist_next_apply_le_of_le {f‚ÇÅ f‚ÇÇ : FunSpace v} {n : ‚Ñï} {d : ‚Ñù}
    (h : ‚àÄ t, dist (f‚ÇÅ t) (f‚ÇÇ t) ‚â§ (v.L * |t.1 - v.t‚ÇÄ|) ^ n / n ! * d) (t : Icc v.tMin v.tMax) :
    dist (next f‚ÇÅ t) (next f‚ÇÇ t) ‚â§ (v.L * |t.1 - v.t‚ÇÄ|) ^ (n + 1) / (n + 1)! * d := by
  simp only [dist_eq_norm, next_apply, add_sub_add_left_eq_sub, ‚Üê
    intervalIntegral.integral_sub (intervalIntegrable_vComp _ _ _)
      (intervalIntegrable_vComp _ _ _),
    norm_integral_eq_norm_integral_Ioc] at *
  calc
    ‚Äñ‚à´ œÑ in Œô (v.t‚ÇÄ : ‚Ñù) t, f‚ÇÅ.vComp œÑ - f‚ÇÇ.vComp œÑ‚Äñ ‚â§
        ‚à´ œÑ in Œô (v.t‚ÇÄ : ‚Ñù) t, v.L * ((v.L * |œÑ - v.t‚ÇÄ|) ^ n / n ! * d) := by
      refine' norm_integral_le_of_norm_le (Continuous.integrableOn_uIoc _) _
      ¬∑ -- porting note: was `continuity`
        refine .mul continuous_const <| .mul (.div_const ?_ _) continuous_const
        refine .pow (.mul continuous_const <| .abs <| ?_) _
        exact .sub continuous_id continuous_const
      ¬∑ refine' (ae_restrict_mem measurableSet_Ioc).mono fun œÑ hœÑ => _
        refine' (v.lipschitzOnWith (v.proj œÑ).2).norm_sub_le_of_le (f‚ÇÅ.mem_closedBall _)
            (f‚ÇÇ.mem_closedBall _) ((h _).trans_eq _)
        rw [v.proj_of_mem]
        exact uIcc_subset_Icc v.t‚ÇÄ.2 t.2 <| Ioc_subset_Icc_self hœÑ
    _ = (v.L * |t.1 - v.t‚ÇÄ|) ^ (n + 1) / (n + 1)! * d := by
      simp_rw [mul_pow, div_eq_mul_inv, mul_assoc, MeasureTheory.integral_mul_left,
        MeasureTheory.integral_mul_right, integral_pow_abs_sub_uIoc, div_eq_mul_inv,
        pow_succ (v.L : ‚Ñù), Nat.factorial_succ, Nat.cast_mul, Nat.cast_succ, mul_inv, mul_assoc]
#align picard_lindelof.fun_space.dist_next_apply_le_of_le PicardLindelof.FunSpace.dist_next_apply_le_of_le

theorem dist_iterate_next_apply_le (f‚ÇÅ f‚ÇÇ : FunSpace v) (n : ‚Ñï) (t : Icc v.tMin v.tMax) :
    dist (next^[n] f‚ÇÅ t) (next^[n] f‚ÇÇ t) ‚â§ (v.L * |t.1 - v.t‚ÇÄ|) ^ n / n ! * dist f‚ÇÅ f‚ÇÇ := by
  induction' n with n ihn generalizing t
  -- ‚ä¢ dist (toFun (next^[Nat.zero] f‚ÇÅ) t) (toFun (next^[Nat.zero] f‚ÇÇ) t) ‚â§ (‚Üëv.L * ‚Ä¶
  ¬∑ rw [Nat.zero_eq, pow_zero, Nat.factorial_zero, Nat.cast_one, div_one, one_mul]
    -- ‚ä¢ dist (toFun (next^[0] f‚ÇÅ) t) (toFun (next^[0] f‚ÇÇ) t) ‚â§ dist f‚ÇÅ f‚ÇÇ
    exact dist_apply_le_dist f‚ÇÅ f‚ÇÇ t
    -- üéâ no goals
  ¬∑ rw [iterate_succ_apply', iterate_succ_apply']
    -- ‚ä¢ dist (toFun (next (next^[n] f‚ÇÅ)) t) (toFun (next (next^[n] f‚ÇÇ)) t) ‚â§ (‚Üëv.L * ‚Ä¶
    exact dist_next_apply_le_of_le ihn _
    -- üéâ no goals
#align picard_lindelof.fun_space.dist_iterate_next_apply_le PicardLindelof.FunSpace.dist_iterate_next_apply_le

theorem dist_iterate_next_le (f‚ÇÅ f‚ÇÇ : FunSpace v) (n : ‚Ñï) :
    dist (next^[n] f‚ÇÅ) (next^[n] f‚ÇÇ) ‚â§ (v.L * v.tDist) ^ n / n ! * dist f‚ÇÅ f‚ÇÇ := by
  refine' dist_le_of_forall fun t => (dist_iterate_next_apply_le _ _ _ _).trans _
  -- ‚ä¢ (‚Üëv.L * |‚Üët - ‚Üëv.t‚ÇÄ|) ^ n / ‚Üën ! * dist f‚ÇÅ f‚ÇÇ ‚â§ (‚Üëv.L * tDist v) ^ n / ‚Üën !  ‚Ä¶
  have : |(t - v.t‚ÇÄ : ‚Ñù)| ‚â§ v.tDist := v.dist_t‚ÇÄ_le t
  -- ‚ä¢ (‚Üëv.L * |‚Üët - ‚Üëv.t‚ÇÄ|) ^ n / ‚Üën ! * dist f‚ÇÅ f‚ÇÇ ‚â§ (‚Üëv.L * tDist v) ^ n / ‚Üën !  ‚Ä¶
  gcongr
  -- üéâ no goals
#align picard_lindelof.fun_space.dist_iterate_next_le PicardLindelof.FunSpace.dist_iterate_next_le

end FunSpace

variable [CompleteSpace E]

section

theorem exists_contracting_iterate :
    ‚àÉ (N : ‚Ñï) (K : _), ContractingWith K (FunSpace.next : v.FunSpace ‚Üí v.FunSpace)^[N] := by
  rcases ((Real.tendsto_pow_div_factorial_atTop (v.L * v.tDist)).eventually
    (gt_mem_nhds zero_lt_one)).exists with ‚ü®N, hN‚ü©
  have : (0 : ‚Ñù) ‚â§ (v.L * v.tDist) ^ N / N ! :=
    div_nonneg (pow_nonneg (mul_nonneg v.L.2 v.tDist_nonneg) _) (Nat.cast_nonneg _)
  exact ‚ü®N, ‚ü®_, this‚ü©, hN, LipschitzWith.of_dist_le_mul fun f g =>
    FunSpace.dist_iterate_next_le f g N‚ü©
#align picard_lindelof.exists_contracting_iterate PicardLindelof.exists_contracting_iterate

theorem exists_fixed : ‚àÉ f : v.FunSpace, f.next = f :=
  let ‚ü®_N, _K, hK‚ü© := exists_contracting_iterate v
  ‚ü®_, hK.isFixedPt_fixedPoint_iterate‚ü©
#align picard_lindelof.exists_fixed PicardLindelof.exists_fixed

end

/-- Picard-Lindel√∂f (Cauchy-Lipschitz) theorem. Use
`IsPicardLindelof.exists_forall_hasDerivWithinAt_Icc_eq` instead for the public API. -/
theorem exists_solution :
    ‚àÉ f : ‚Ñù ‚Üí E, f v.t‚ÇÄ = v.x‚ÇÄ ‚àß ‚àÄ t ‚àà Icc v.tMin v.tMax,
      HasDerivWithinAt f (v t (f t)) (Icc v.tMin v.tMax) t := by
  rcases v.exists_fixed with ‚ü®f, hf‚ü©
  -- ‚ä¢ ‚àÉ f, f ‚Üëv.t‚ÇÄ = v.x‚ÇÄ ‚àß ‚àÄ (t : ‚Ñù), t ‚àà Icc v.tMin v.tMax ‚Üí HasDerivWithinAt f  ‚Ä¶
  refine' ‚ü®f ‚àò v.proj, _, fun t ht => _‚ü©
  -- ‚ä¢ (f.toFun ‚àò proj v) ‚Üëv.t‚ÇÄ = v.x‚ÇÄ
  ¬∑ simp only [(¬∑ ‚àò ¬∑), proj_coe, f.map_t‚ÇÄ]
    -- üéâ no goals
  ¬∑ simp only [(¬∑ ‚àò ¬∑), v.proj_of_mem ht]
    -- ‚ä¢ HasDerivWithinAt (fun x => FunSpace.toFun f (proj v x)) (toFun v t (FunSpace ‚Ä¶
    lift t to Icc v.tMin v.tMax using ht
    -- ‚ä¢ HasDerivWithinAt (fun x => FunSpace.toFun f (proj v x)) (toFun v (‚Üët) (FunSp ‚Ä¶
    simpa only [hf, v.proj_coe] using f.hasDerivWithinAt_next t
    -- üéâ no goals
#align picard_lindelof.exists_solution PicardLindelof.exists_solution

end PicardLindelof

theorem IsPicardLindelof.norm_le‚ÇÄ {E : Type*} [NormedAddCommGroup E] {v : ‚Ñù ‚Üí E ‚Üí E}
    {tMin t‚ÇÄ tMax : ‚Ñù} {x‚ÇÄ : E} {C R : ‚Ñù} {L : ‚Ñù‚â•0}
    (hpl : IsPicardLindelof v tMin t‚ÇÄ tMax x‚ÇÄ L R C) : ‚Äñv t‚ÇÄ x‚ÇÄ‚Äñ ‚â§ C :=
  hpl.norm_le t‚ÇÄ hpl.ht‚ÇÄ x‚ÇÄ <| mem_closedBall_self hpl.hR
#align is_picard_lindelof.norm_le‚ÇÄ IsPicardLindelof.norm_le‚ÇÄ

/-- Picard-Lindel√∂f (Cauchy-Lipschitz) theorem. -/
theorem IsPicardLindelof.exists_forall_hasDerivWithinAt_Icc_eq [CompleteSpace E] {v : ‚Ñù ‚Üí E ‚Üí E}
    {tMin t‚ÇÄ tMax : ‚Ñù} (x‚ÇÄ : E) {C R : ‚Ñù} {L : ‚Ñù‚â•0}
    (hpl : IsPicardLindelof v tMin t‚ÇÄ tMax x‚ÇÄ L R C) :
    ‚àÉ f : ‚Ñù ‚Üí E, f t‚ÇÄ = x‚ÇÄ ‚àß
      ‚àÄ t ‚àà Icc tMin tMax, HasDerivWithinAt f (v t (f t)) (Icc tMin tMax) t := by
  lift C to ‚Ñù‚â•0 using (norm_nonneg _).trans hpl.norm_le‚ÇÄ
  -- ‚ä¢ ‚àÉ f, f t‚ÇÄ = x‚ÇÄ ‚àß ‚àÄ (t : ‚Ñù), t ‚àà Icc tMin tMax ‚Üí HasDerivWithinAt f (v t (f t ‚Ä¶
  lift t‚ÇÄ to Icc tMin tMax using hpl.ht‚ÇÄ
  -- ‚ä¢ ‚àÉ f, f ‚Üët‚ÇÄ = x‚ÇÄ ‚àß ‚àÄ (t : ‚Ñù), t ‚àà Icc tMin tMax ‚Üí HasDerivWithinAt f (v t (f  ‚Ä¶
  exact PicardLindelof.exists_solution
    ‚ü®v, tMin, tMax, t‚ÇÄ, x‚ÇÄ, C, ‚ü®R, hpl.hR‚ü©, L, { hpl with ht‚ÇÄ := t‚ÇÄ.property }‚ü©
#align exists_forall_deriv_within_Icc_eq_of_is_picard_lindelof IsPicardLindelof.exists_forall_hasDerivWithinAt_Icc_eq

variable [ProperSpace E] {v : E ‚Üí E} (t‚ÇÄ : ‚Ñù) (x‚ÇÄ : E)

/-- A time-independent, locally continuously differentiable ODE satisfies the hypotheses of the
  Picard-Lindel√∂f theorem. -/
theorem exists_isPicardLindelof_const_of_contDiffOn_nhds {s : Set E} (hv : ContDiffOn ‚Ñù 1 v s)
    (hs : s ‚àà ùìù x‚ÇÄ) :
    ‚àÉ Œµ > (0 : ‚Ñù), ‚àÉ L R C, IsPicardLindelof (fun _ => v) (t‚ÇÄ - Œµ) t‚ÇÄ (t‚ÇÄ + Œµ) x‚ÇÄ L R C := by
  -- extract Lipschitz constant
  obtain ‚ü®L, s', hs', hlip‚ü© :=
    ContDiffAt.exists_lipschitzOnWith ((hv.contDiffWithinAt (mem_of_mem_nhds hs)).contDiffAt hs)
  -- radius of closed ball in which v is bounded
  obtain ‚ü®r, hr : 0 < r, hball‚ü© := Metric.mem_nhds_iff.mp (inter_sets (ùìù x‚ÇÄ) hs hs')
  -- ‚ä¢ ‚àÉ Œµ, Œµ > 0 ‚àß ‚àÉ L R C, IsPicardLindelof (fun x => v) (t‚ÇÄ - Œµ) t‚ÇÄ (t‚ÇÄ + Œµ) x‚ÇÄ  ‚Ä¶
  have hr' := (half_pos hr).le
  -- ‚ä¢ ‚àÉ Œµ, Œµ > 0 ‚àß ‚àÉ L R C, IsPicardLindelof (fun x => v) (t‚ÇÄ - Œµ) t‚ÇÄ (t‚ÇÄ + Œµ) x‚ÇÄ  ‚Ä¶
  -- uses [ProperSpace E] for `isCompact_closedBall`
  obtain ‚ü®C, hC‚ü© := (isCompact_closedBall x‚ÇÄ (r / 2)).bddAbove_image <| hv.continuousOn.norm.mono
    (subset_inter_iff.mp ((closedBall_subset_ball (half_lt_self hr)).trans hball)).left
  have hC' : 0 ‚â§ C := by
    apply (norm_nonneg (v x‚ÇÄ)).trans
    apply hC
    exact ‚ü®x‚ÇÄ, ‚ü®mem_closedBall_self hr', rfl‚ü©‚ü©
  set Œµ := if C = 0 then 1 else r / 2 / C with hŒµ
  -- ‚ä¢ ‚àÉ Œµ, Œµ > 0 ‚àß ‚àÉ L R C, IsPicardLindelof (fun x => v) (t‚ÇÄ - Œµ) t‚ÇÄ (t‚ÇÄ + Œµ) x‚ÇÄ  ‚Ä¶
  have hŒµ0 : 0 < Œµ := by
    rw [hŒµ]
    split_ifs with h
    ¬∑ exact zero_lt_one
    ¬∑ exact div_pos (half_pos hr) (lt_of_le_of_ne hC' (Ne.symm h))
  refine' ‚ü®Œµ, hŒµ0, L, r / 2, C, _‚ü©
  -- ‚ä¢ IsPicardLindelof (fun x => v) (t‚ÇÄ - Œµ) t‚ÇÄ (t‚ÇÄ + Œµ) x‚ÇÄ L (r / 2) C
  exact
    { ht‚ÇÄ := by rw [‚Üê Real.closedBall_eq_Icc]; exact mem_closedBall_self hŒµ0.le
      hR := (half_pos hr).le
      lipschitz := fun t _ => hlip.mono
        (subset_inter_iff.mp (Subset.trans (closedBall_subset_ball (half_lt_self hr)) hball)).2
      cont := fun x _ => continuousOn_const
      norm_le := fun t _ x hx => hC ‚ü®x, hx, rfl‚ü©
      C_mul_le_R := by
        rw [add_sub_cancel', sub_sub_cancel, max_self, mul_ite, mul_one]
        split_ifs with h
        ¬∑ rwa [‚Üê h] at hr'
        ¬∑ exact (mul_div_cancel' (r / 2) h).le }
#align exists_is_picard_lindelof_const_of_cont_diff_on_nhds exists_isPicardLindelof_const_of_contDiffOn_nhds

/-- A time-independent, locally continuously differentiable ODE admits a solution in some open
interval. -/
theorem exists_forall_deriv_at_Ioo_eq_of_contDiffOn_nhds {s : Set E} (hv : ContDiffOn ‚Ñù 1 v s)
    (hs : s ‚àà ùìù x‚ÇÄ) :
    ‚àÉ Œµ > (0 : ‚Ñù),
      ‚àÉ f : ‚Ñù ‚Üí E, f t‚ÇÄ = x‚ÇÄ ‚àß ‚àÄ t ‚àà Ioo (t‚ÇÄ - Œµ) (t‚ÇÄ + Œµ), f t ‚àà s ‚àß HasDerivAt f (v (f t)) t := by
  obtain ‚ü®Œµ, hŒµ, L, R, C, hpl‚ü© := exists_isPicardLindelof_const_of_contDiffOn_nhds t‚ÇÄ x‚ÇÄ hv hs
  -- ‚ä¢ ‚àÉ Œµ, Œµ > 0 ‚àß ‚àÉ f, f t‚ÇÄ = x‚ÇÄ ‚àß ‚àÄ (t : ‚Ñù), t ‚àà Ioo (t‚ÇÄ - Œµ) (t‚ÇÄ + Œµ) ‚Üí f t ‚àà s ‚Ä¶
  obtain ‚ü®f, hf1, hf2‚ü© := hpl.exists_forall_hasDerivWithinAt_Icc_eq x‚ÇÄ
  -- ‚ä¢ ‚àÉ Œµ, Œµ > 0 ‚àß ‚àÉ f, f t‚ÇÄ = x‚ÇÄ ‚àß ‚àÄ (t : ‚Ñù), t ‚àà Ioo (t‚ÇÄ - Œµ) (t‚ÇÄ + Œµ) ‚Üí f t ‚àà s ‚Ä¶
  have hf2' : ‚àÄ t ‚àà Ioo (t‚ÇÄ - Œµ) (t‚ÇÄ + Œµ), HasDerivAt f (v (f t)) t := fun t ht =>
    (hf2 t (Ioo_subset_Icc_self ht)).hasDerivAt (Icc_mem_nhds ht.1 ht.2)
  have h : f ‚Åª¬π' s ‚àà ùìù t‚ÇÄ := by
    have := hf2' t‚ÇÄ (mem_Ioo.mpr ‚ü®sub_lt_self _ hŒµ, lt_add_of_pos_right _ hŒµ‚ü©)
    apply ContinuousAt.preimage_mem_nhds this.continuousAt
    rw [hf1]
    exact hs
  rw [Metric.mem_nhds_iff] at h
  -- ‚ä¢ ‚àÉ Œµ, Œµ > 0 ‚àß ‚àÉ f, f t‚ÇÄ = x‚ÇÄ ‚àß ‚àÄ (t : ‚Ñù), t ‚àà Ioo (t‚ÇÄ - Œµ) (t‚ÇÄ + Œµ) ‚Üí f t ‚àà s ‚Ä¶
  obtain ‚ü®r, hr1, hr2‚ü© := h
  -- ‚ä¢ ‚àÉ Œµ, Œµ > 0 ‚àß ‚àÉ f, f t‚ÇÄ = x‚ÇÄ ‚àß ‚àÄ (t : ‚Ñù), t ‚àà Ioo (t‚ÇÄ - Œµ) (t‚ÇÄ + Œµ) ‚Üí f t ‚àà s ‚Ä¶
  refine ‚ü®min r Œµ, lt_min hr1 hŒµ, f, hf1, fun t ht => ‚ü®?_,
    hf2' t (mem_of_mem_of_subset ht (Ioo_subset_Ioo (sub_le_sub_left (min_le_right _ _) _)
      (add_le_add_left (min_le_right _ _) _)))‚ü©‚ü©
  rw [‚Üê Set.mem_preimage]
  -- ‚ä¢ t ‚àà f ‚Åª¬π' s
  apply Set.mem_of_mem_of_subset _ hr2
  -- ‚ä¢ t ‚àà ball t‚ÇÄ r
  apply Set.mem_of_mem_of_subset ht
  -- ‚ä¢ Ioo (t‚ÇÄ - min r Œµ) (t‚ÇÄ + min r Œµ) ‚äÜ ball t‚ÇÄ r
  rw [‚Üê Real.ball_eq_Ioo]
  -- ‚ä¢ ball t‚ÇÄ (min r Œµ) ‚äÜ ball t‚ÇÄ r
  exact Metric.ball_subset_ball (min_le_left _ _)
  -- üéâ no goals
#align exists_forall_deriv_at_Ioo_eq_of_cont_diff_on_nhds exists_forall_deriv_at_Ioo_eq_of_contDiffOn_nhds

/-- A time-independent, continuously differentiable ODE admits a solution in some open interval. -/
theorem exists_forall_hasDerivAt_Ioo_eq_of_contDiff (hv : ContDiff ‚Ñù 1 v) :
    ‚àÉ Œµ > (0 : ‚Ñù), ‚àÉ f : ‚Ñù ‚Üí E, f t‚ÇÄ = x‚ÇÄ ‚àß ‚àÄ t ‚àà Ioo (t‚ÇÄ - Œµ) (t‚ÇÄ + Œµ), HasDerivAt f (v (f t)) t :=
  let ‚ü®Œµ, hŒµ, f, hf1, hf2‚ü© :=
    exists_forall_deriv_at_Ioo_eq_of_contDiffOn_nhds t‚ÇÄ x‚ÇÄ hv.contDiffOn
      (IsOpen.mem_nhds isOpen_univ (mem_univ _))
  ‚ü®Œµ, hŒµ, f, hf1, fun t ht => (hf2 t ht).2‚ü©
#align exists_forall_deriv_at_Ioo_eq_of_cont_diff exists_forall_hasDerivAt_Ioo_eq_of_contDiff
