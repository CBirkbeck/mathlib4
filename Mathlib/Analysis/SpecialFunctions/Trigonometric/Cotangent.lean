/-
Copyright (c) 2024 Chris Birkbeck. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Birkbeck
-/
import Mathlib.Analysis.Complex.UpperHalfPlane.Exp
import Mathlib.Analysis.Complex.IntegerCompl
import Mathlib.Analysis.Complex.LocallyUniformLimit
import Mathlib.Analysis.PSeries
import Mathlib.Analysis.SpecialFunctions.Trigonometric.EulerSineProd
import Mathlib.Topology.Algebra.InfiniteSum.InfiniteProdOneAdd

/-!
# Cotangent

This file contains lemmas about the cotangent function, including useful series expansions.

The main result is the Mittag-Leffler expansion of the cotangent function, which says that
`œÄ * cot (œÄ * z) = 1 / z + ‚àë' n : ‚Ñï+, (1 / (z - n) + 1 / (z + n))`.
-/

open Real Complex BigOperators Filter

open scoped UpperHalfPlane Topology

lemma Complex.cot_eq_exp_ratio (z : ‚ÑÇ) :
    cot z = (Complex.exp (2 * I * z) + 1) / (I * (1 - Complex.exp (2 * I * z))) := by
  rw [Complex.cot, Complex.sin, Complex.cos]
  field_simp
  have h1 : exp (z * I) + exp (-(z * I)) = exp (-(z * I)) * (exp (2 * I * z) + 1) := by
    rw [mul_add, ‚Üê Complex.exp_add]
    simp only [mul_one, add_left_inj]
    ring_nf
  have h2 : (exp (-(z * I)) - exp (z * I)) * I = exp (-(z * I)) * (I * (1 - exp (2 * I * z))) := by
    ring_nf
    rw [mul_assoc, ‚Üê Complex.exp_add]
    ring_nf
  rw [h1, h2, mul_div_mul_left _ _ (Complex.exp_ne_zero _)]

/- The version one probably wants to use more. -/
lemma Complex.cot_pi_eq_exp_ratio (z : ‚ÑÇ) :
    cot (œÄ * z) = (Complex.exp (2 * œÄ * I * z) + 1) / (I * (1 - Complex.exp (2 * œÄ * I * z))) := by
  rw [cot_eq_exp_ratio (œÄ * z)]
  ring_nf

/- This is the version one probably wants, which is why the pi's are there. -/
theorem pi_mul_cot_pi_q_exp (z : ‚Ñç) :
    œÄ * cot (œÄ * z) = œÄ * I - 2 * œÄ * I * ‚àë' n : ‚Ñï, Complex.exp (2 * œÄ * I * z) ^ n := by
  have h1 : œÄ * ((exp (2 * œÄ * I * z) + 1) / (I * (1 - exp (2 * œÄ * I * z)))) =
      -œÄ * I * ((exp (2 * œÄ * I * z) + 1) * (1 / (1 - exp (2 * œÄ * I * z)))) := by
    simp only [div_mul_eq_div_mul_one_div, div_I, one_div, neg_mul, mul_neg, neg_inj]
    ring
  rw [cot_pi_eq_exp_ratio, h1, one_div, (tsum_geometric_of_norm_lt_one
    (UpperHalfPlane.abs_exp_two_pi_I_lt_one z)).symm, add_comm, geom_series_mul_one_add
      (Complex.exp (2 * œÄ * I * (z : ‚ÑÇ))) (UpperHalfPlane.abs_exp_two_pi_I_lt_one _)]
  ring

section MittagLeffler

lemma int_comp_not_zero2 (x : ‚ÑÇ_‚Ñ§) (n : ‚Ñï) : 1 + -x.1 ^ 2 / (n + 1) ^ 2 ‚â† 0 := by
  intro h
  rw [add_eq_zero_iff_eq_neg, neg_div', eq_div_iff] at h
  simp only [one_mul, neg_neg, sq_eq_sq_iff_eq_or_eq_neg] at h
  rcases h with h1| h2
  ¬∑ have := not_exists.mp x.2 (n + 1)
    aesop
  ¬∑ have := not_exists.mp x.2 (-(n + 1))
    rw [‚Üê neg_eq_iff_eq_neg ] at h2
    rw [‚Üê h2] at this
    simp only [neg_add_rev, Int.reduceNeg, Int.cast_add, Int.cast_neg, Int.cast_one,
      Int.cast_natCast, not_true_eq_false] at *
  ¬∑ simp only [ne_eq, OfNat.ofNat_ne_zero, not_false_eq_true, pow_eq_zero_iff]
    exact Nat.cast_add_one_ne_zero n

theorem tendsto_euler_sin_prod' (x : ‚ÑÇ) (h0 : x ‚â† 0) :
    Tendsto (fun n : ‚Ñï => ‚àè i : ‚Ñï in Finset.range n, (1 + -x ^ 2 / (‚Üëi + 1) ^ 2)) atTop
      (ùìù (sin (œÄ * x) / (œÄ * x))) := by
  rw [show (sin (œÄ * x) / (œÄ * x)) = sin (‚ÜëœÄ * x) * (1 / (‚ÜëœÄ * x)) by ring]
  apply (Filter.Tendsto.mul_const (b := 1 / (œÄ * x)) (tendsto_euler_sin_prod x)).congr
  intro n
  have : (1 / (œÄ * x)) * (œÄ * x) = 1 := by
    apply div_mul_cancel‚ÇÄ
    have := Real.pi_ne_zero
    aesop
  rw [mul_comm, ‚Üê mul_assoc, this, one_mul]
  congr
  ext y
  ring

lemma euler_sin_tprod (x : ‚ÑÇ_‚Ñ§) :
    ‚àè' i : ‚Ñï, (1 + -x.1 ^ 2 / (i + 1) ^ 2) = Complex.sin (œÄ * x.1) / (œÄ * x.1) := by
  rw [‚Üê Multipliable.hasProd_iff, Multipliable.hasProd_iff_tendsto_nat]
  apply tendsto_euler_sin_prod' x.1 (‚ÑÇ_‚Ñ§_not_zero x)
  repeat {
  apply Complex.summable_multipliable_one_add
  ¬∑ rw [‚Üê summable_norm_iff]
    simpa using summable_pow_div_add x.1 2 2 1
  ¬∑ apply int_comp_not_zero2 x}

theorem aux_diff_lem (n : ‚Ñï) :
    DifferentiableOn ‚ÑÇ (fun z : ‚ÑÇ => ‚àè j in Finset.range n, (1 + -z ^ 2 / (j + 1) ^ 2))
      {z : ‚ÑÇ | ¬¨ ‚àÉ (n : ‚Ñ§), z = n} := by
  apply DifferentiableOn.finset_prod
  refine fun i _ =>
    DifferentiableOn.add (differentiableOn_const 1)
      (DifferentiableOn.div_const
        (DifferentiableOn.neg
          (DifferentiableOn.pow (Differentiable.differentiableOn differentiable_id) 2))
            (((i : ‚ÑÇ) + 1) ^ 2))

lemma aux_u_lem (Z : Set ‚ÑÇ_‚Ñ§) (hZ : IsCompact Z) : ‚àÉ u : ‚Ñï ‚Üí ‚Ñù, Summable u ‚àß
    ‚àÄ (j : ‚Ñï) z, z ‚àà Z ‚Üí (‚Äñ-z.1 ^ 2 / (j + 1) ^ 2‚Äñ) ‚â§ u j := by
  have hf : ContinuousOn (fun x : ‚ÑÇ_‚Ñ§ => Complex.abs (-x.1 ^ 2)) Z := by
    apply ContinuousOn.comp
    let g := fun x : ‚ÑÇ_‚Ñ§ => -x.1 ^ 2
    apply Continuous.continuousOn Complex.continuous_abs (s := ((g '' Z)))
    apply (ContinuousOn.neg (ContinuousOn.pow (Continuous.continuousOn continuous_subtype_val) 2))
    exact Set.mapsTo_image (fun x ‚Ü¶ -x.1 ^ 2) Z
  have := IsCompact.bddAbove_image hZ hf
  simp only [map_neg_eq_map, map_pow, bddAbove_def, Set.mem_image, Subtype.exists, not_exists,
    exists_and_right, forall_exists_index, and_imp] at this
  obtain ‚ü®s, hs‚ü© := this
  use (fun n : ‚Ñï => Complex.abs (s / (n + 1) ^ 2))
  constructor
  ¬∑ simpa using summable_pow_div_add (s : ‚ÑÇ) 1 2 1 (by omega)
  ¬∑ intro n x hx
    simp only [norm_div, norm_neg, norm_pow, Complex.norm_eq_abs, map_div‚ÇÄ, abs_ofReal, map_pow]
    gcongr
    apply le_trans (hs _ _ (by aesop) (rfl)) (le_abs_self s)


theorem tendstoUniformlyOn_compact_euler_sin_prod (Z : Set ‚ÑÇ_‚Ñ§) (hZ : IsCompact Z) :
    TendstoUniformlyOn
      (fun n : ‚Ñï => fun z : ‚ÑÇ_‚Ñ§ => ‚àè j in Finset.range n, (1 + -z.1 ^ 2 / (j + 1) ^ 2))
        (fun x => (Complex.sin (‚ÜëœÄ * x) / (‚ÜëœÄ * x))) atTop Z := by
  simp_rw [‚Üê euler_sin_tprod]
  obtain ‚ü®u, hu, hu2‚ü© := aux_u_lem Z hZ
  apply prod_tendstoUniformlyOn_tprod' Z hZ u hu hu2
  ¬∑ refine fun x n => by apply int_comp_not_zero2 x
  ¬∑ intro n
    apply ContinuousOn.div_const
    apply (ContinuousOn.neg (ContinuousOn.pow (Continuous.continuousOn continuous_subtype_val) 2))

open Finset

theorem sin_pi_z_ne_zero (z : ‚ÑÇ_‚Ñ§) : Complex.sin (œÄ * z) ‚â† 0 := by
  apply Complex.sin_ne_zero_iff.2
  intro k
  rw [mul_comm]
  by_contra h
  simp only [mul_eq_mul_right_iff, ofReal_eq_zero] at h
  cases' h with h h
  ¬∑ have := z.2
    aesop
  ¬∑ exact Real.pi_ne_zero h

theorem tendsto_logDeriv_euler_sin_div (x : ‚ÑÇ_‚Ñ§) :
    Tendsto (fun n : ‚Ñï =>
      logDeriv (fun z => ‚àè j in Finset.range n, (1 + -(z : ‚ÑÇ) ^ 2 / (j + 1) ^ 2)) x)
        atTop (ùìù <| logDeriv (fun t => (Complex.sin (œÄ * t) / (œÄ * t))) x) := by
  apply logDeriv_tendsto
      (fun n : ‚Ñï => fun z => ‚àè j in Finset.range n, (1 + -z ^ 2 / (j + 1) ^ 2))
        _ ‚ÑÇ_‚Ñ§_IsOpen x
  ¬∑ rw [tendstoLocallyUniformlyOn_iff_forall_isCompact ‚ÑÇ_‚Ñ§_IsOpen]
    ¬∑ intro K hK hK2
      have hZ := IsCompact.image (isCompact_iff_isCompact_univ.mp hK2) (continuous_inclusion hK)
      have := tendstoUniformlyOn_compact_euler_sin_prod ((Set.inclusion hK)'' ‚ä§) hZ
      rw [Metric.tendstoUniformlyOn_iff] at *
      simp only [Set.coe_setOf, Set.mem_setOf_eq, Set.image_univ, Set.range_inclusion, gt_iff_lt,
        Set.top_eq_univ, Subtype.forall, not_exists, eventually_atTop, ge_iff_le] at *
      intro Œµ hŒµ
      obtain ‚ü®N, hN‚ü© := this Œµ hŒµ
      refine ‚ü®N, fun n hn y hy => hN n hn ‚ü®y, (by simpa using hK hy)‚ü© (by aesop)‚ü©
  ¬∑ simp only [not_exists, eventually_atTop, ge_iff_le]
    refine ‚ü®1, fun b _ => by simpa using (aux_diff_lem b)‚ü©
  ¬∑ simp only [Set.mem_setOf_eq, ne_eq, div_eq_zero_iff, mul_eq_zero, ofReal_eq_zero, not_or]
    refine ‚ü®sin_pi_z_ne_zero x , Real.pi_ne_zero , ‚ÑÇ_‚Ñ§_not_zero x‚ü©

theorem logDeriv_sin_div (z : ‚ÑÇ_‚Ñ§) :
    logDeriv (fun t => (Complex.sin (œÄ * t) / (œÄ * t))) z = œÄ * cot (œÄ * z) - 1 / z := by
  have : (fun t => (Complex.sin (œÄ * t)/ (œÄ * t))) = fun z =>
    (Complex.sin ‚àò fun t => œÄ * t) z / (œÄ * z) := by
    ext1
    simp only [Pi.div_apply, Function.comp_apply]
  rw [this, logDeriv_div _ (by apply sin_pi_z_ne_zero) ?_
    (DifferentiableAt.comp _ (Complex.differentiableAt_sin) (by fun_prop)) (by fun_prop),
    logDeriv_comp (Complex.differentiableAt_sin) (by fun_prop), Complex.logDeriv_sin,
    deriv_const_mul _ (by fun_prop), deriv_id'', logDeriv_const_mul, logDeriv_id']
  field_simp [mul_comm]
  ¬∑ simpa only [ne_eq, ofReal_eq_zero] using Real.pi_ne_zero
  ¬∑ simp only [Set.mem_setOf_eq, ne_eq, mul_eq_zero, ofReal_eq_zero, not_or]
    refine ‚ü®Real.pi_ne_zero, ‚ÑÇ_‚Ñ§_not_zero _‚ü©

theorem aux_logDeriv_factor_eq (x : ‚ÑÇ_‚Ñ§) (i : ‚Ñï) :
    logDeriv (fun (z : ‚ÑÇ) ‚Ü¶ 1 + -z ^ 2 / (i + 1) ^ 2) x.1 =
        1 / (x.1 - (i + 1)) + 1 / (x.1 + (i + 1)) := by
  simp only [Set.mem_setOf_eq, logDeriv_apply, differentiableAt_const, deriv_const_add',
    deriv_div_const, deriv.neg', differentiableAt_id', deriv_pow'', Nat.cast_ofNat,
    Nat.add_one_sub_one, pow_one, deriv_id'', mul_one, one_div]
  simp_rw [div_eq_mul_inv]
  set i1 := ((x : ‚ÑÇ) + (i+1))‚Åª¬π
  set i2 := ((x : ‚ÑÇ) - (i+1))‚Åª¬π
  set i3 := ((i + 1 : ‚ÑÇ)^2)‚Åª¬π
  set i4 := (1 + -x^2 * i3)‚Åª¬π
  have h1 : ((x : ‚ÑÇ) + (i + 1)) * i1 = 1 := by
    refine Complex.mul_inv_cancel ?h
    simpa using ‚ÑÇ_‚Ñ§_add_ne_zero x (i + 1)
  have h2 : ((x : ‚ÑÇ) - (i + 1)) * i2 = 1 := by
    apply Complex.mul_inv_cancel
    rw [sub_eq_add_neg]
    simpa using ‚ÑÇ_‚Ñ§_add_ne_zero x (-(i + 1))
  have h3 : ((i + 1 : ‚ÑÇ)^2) * i3 = 1 := by
    apply Complex.mul_inv_cancel
    norm_cast
    exact Nat.add_one_ne_zero ((((i + 1).pow 1).mul i).add (((i + 1).pow 0).mul i))
  have h4 : (1 + -x^2 * i3) * i4 = 1 := by
    apply Complex.mul_inv_cancel (int_comp_not_zero2 x i)
  linear_combination
    (2 * i4 * i2 * i1 * ‚Üëi + 2 * i4 * i2 * i1 + 2 * i4 * i1) * h3 +
          (2 * i2 * i1 * ‚Üëi + 2 * i2 * i1 + 2 * i1) * h4 +
        (2 * i3 * i4 * ‚Üëi + 2 * i3 * i4 - 1 * i1) * h2 +
      (2 * ‚Üëx * i3 * i4 * i2 * ‚Üëi - 2 * i3 * i4 * i2 * ‚Üëi ^ 2 + 2 * ‚Üëx * i3 * i4 * i2 -
                    4 * i3 * i4 * i2 * ‚Üëi +
                  2 * ‚Üëx * i3 * i4 -
                2 * i3 * i4 * i2 -
              2 * i3 * i4 * ‚Üëi -
            2 * i3 * i4 +
          i2) *
        h1

lemma logDeriv_of_prod (x : ‚ÑÇ_‚Ñ§) (n : ‚Ñï) :
    logDeriv (fun (z : ‚ÑÇ) => ‚àè j in Finset.range n, (1 + -z ^ 2 / (j + 1) ^ 2)) x =
     ‚àë j in Finset.range n, (1 / ((x : ‚ÑÇ) - (j + 1)) + 1 / (x + (j + 1))) := by
    rw [logDeriv_prod]
    congr
    ext i
    apply aux_logDeriv_factor_eq x i
    ¬∑ exact fun i _ ‚Ü¶ int_comp_not_zero2 x i
    ¬∑ intro i _
      simp only [Set.mem_setOf_eq, differentiableAt_const, differentiableAt_const_add_iff,
        differentiableAt_neg_iff, differentiableAt_id', DifferentiableAt.pow,
        DifferentiableAt.div_const]

theorem tendsto_logDeriv_euler_cot_sub (x : ‚ÑÇ_‚Ñ§) :
    Tendsto (fun n : ‚Ñï => ‚àë j in Finset.range n, (1 / ((x : ‚ÑÇ) - (j + 1)) + 1 / (x + (j + 1))))
      atTop (ùìù <| œÄ * cot (œÄ * x)- 1 / x) := by
  simp_rw [‚Üê logDeriv_sin_div x, ‚Üê logDeriv_of_prod x]
  simpa using tendsto_logDeriv_euler_sin_div x


lemma half_le (a : ‚Ñù) (ha : a < 1/2) : 1 / 2 ‚â§ |a - 1| := by
  rw [‚Üê neg_lt_neg_iff] at ha
  have hb := (Real.add_lt_add_iff_left 1).mpr ha
  rw [abs_sub_comm]
  have : (1 : ‚Ñù) + -(1/2) = 1/2 := by
    ring
  rw [this, Mathlib.Tactic.RingNF.add_neg] at hb
  have : |1 - a| = 1 - a := by
    rw [abs_eq_self]
    linarith
  rw [this]
  apply hb.le


theorem lhs_summable (z : ‚ÑÇ_‚Ñ§) :
    Summable fun n : ‚Ñï => 1 / ((z : ‚ÑÇ) - (n + 1)) + 1 / (z + (n + 1)) := by
  have h : (fun (n : ‚Ñï) => 1 / ((z : ‚ÑÇ) - (n + 1)) + 1 / (z + (n + 1))) =
    fun (n : ‚Ñï) => 2 * z.1 * (1 / (z ^ 2 - (n + 1) ^ 2)):= by
      ext1 n
      rw [one_div_add_one_div]
      ring
      ¬∑ simpa [sub_eq_add_neg] using ‚ÑÇ_‚Ñ§_add_ne_zero z (-(n + 1) : ‚Ñ§)
      ¬∑ simpa using (‚ÑÇ_‚Ñ§_add_ne_zero z ((n : ‚Ñ§) + 1))
  rw [h]
  apply Summable.mul_left
  apply summable_norm_iff.mp
  have := (tendsto_const_div_pow (‚Äñz.1^2‚Äñ) 2 (by omega))
  simp only [Metric.tendsto_atTop, gt_iff_lt, ge_iff_le, dist_zero_right, norm_div, norm_pow,
    Real.norm_eq_abs, _root_.sq_abs, RCLike.norm_natCast] at this
  obtain ‚ü®B, hB‚ü© := this (1/2) (one_half_pos)
  have hB2 : ‚àÄ (n : ‚Ñï), B ‚â§ n ‚Üí 1/2 ‚â§ |‚Äñz.1‚Äñ^2 / n^2 -1| := fun n hn => half_le _ (hB n hn)
  apply Summable.comp_nat_add (k := B)
  have hs : Summable fun n : ‚Ñï => (1 / (2 : ‚Ñù) * (n + B + 1) ^ 2)‚Åª¬π := by
    simp_rw [mul_inv, inv_eq_one_div, add_assoc]
    apply Summable.mul_left
    have := summable_nat_add_iff (f := fun x => 1 / ((x^2) : ‚Ñù)) (B + 1)
    simpa using this
  apply Summable.of_nonneg_of_le (by simp) _ hs
  simp only [ one_div, norm_inv]
  intro b
  have HT := abs_norm_sub_norm_le ((z.1 / (b + B + 1))^2) 1
  have H2 : 2‚Åª¬π ‚â§ ‚Äñ(z.1/(b + B + 1))^2 - 1‚Äñ := by
    apply le_trans _ HT
    simp only [Complex.norm_eq_abs, one_div, mul_inv_rev, inv_inv, div_pow, norm_div, norm_pow,
      norm_one] at *
    convert (hB2 (b + B + 1) (by omega))
    norm_cast
    exact abs_natCast (b + B + 1)
  have : z.1^2 - (((b + B) : ‚Ñï) + 1)^2 = ((z.1 / ((b + B) + 1))^2 - 1) * ((b + B) + 1)^2 := by
      have H3 : ((b : ‚ÑÇ) + (B : ‚ÑÇ) + 1)^2 ‚â† 0 := by
        norm_cast
        norm_num
      field_simp [H3]
  rw [inv_le_inv, this, norm_mul]
  ¬∑ gcongr
    ¬∑ norm_cast
  ¬∑ rw [this, norm_mul]
    apply mul_pos (by linarith)
    simp only [norm_pow, Complex.norm_eq_abs]
    apply pow_pos
    rw [AbsoluteValue.pos_iff Complex.abs]
    norm_cast
  ¬∑ simp only [inv_pos, Nat.ofNat_pos, mul_pos_iff_of_pos_left]
    apply pow_pos
    norm_cast
    exact Nat.zero_lt_succ (b + B)

theorem cot_series_rep' (z : ‚ÑÇ_‚Ñ§) : œÄ * Complex.cot (œÄ * z) - 1 / z =
    ‚àë' n : ‚Ñï, (1 / ((z : ‚ÑÇ) - (n + 1)) + 1 / (z + (n + 1))) := by
  rw [HasSum.tsum_eq]
  apply (Summable.hasSum_iff_tendsto_nat (lhs_summable z)).mpr
    (tendsto_logDeriv_euler_cot_sub z)

theorem cot_series_rep (z : ‚ÑÇ_‚Ñ§) :
    œÄ * Complex.cot (œÄ * z) = 1 / z + ‚àë' n : ‚Ñï+, (1 / ((z : ‚ÑÇ) - n) + 1 / (z + n)) := by
  have := tsum_pnat_eq_tsum_add_one fun n => 1 / ((z : ‚ÑÇ) - n) + 1 / (z + n)
  have h1 := cot_series_rep' z
  simp only [one_div, Nat.cast_add, Nat.cast_one] at *
  rw [this, ‚Üê h1]
  ring

end MittagLeffler
