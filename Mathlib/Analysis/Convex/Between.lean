/-
Copyright (c) 2022 Joseph Myers. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Myers
-/
import Mathlib.Algebra.CharP.Invertible
import Mathlib.Data.Set.Intervals.Group
import Mathlib.Analysis.Convex.Segment
import Mathlib.LinearAlgebra.AffineSpace.FiniteDimensional
import Mathlib.Tactic.FieldSimp

#align_import analysis.convex.between from "leanprover-community/mathlib"@"571e13cacbed7bf042fd3058ce27157101433842"

/-!
# Betweenness in affine spaces

This file defines notions of a point in an affine space being between two given points.

## Main definitions

* `affineSegment R x y`: The segment of points weakly between `x` and `y`.
* `Wbtw R x y z`: The point `y` is weakly between `x` and `z`.
* `Sbtw R x y z`: The point `y` is strictly between `x` and `z`.

-/


variable (R : Type*) {V V' P P' : Type*}

open AffineEquiv AffineMap

open BigOperators

section OrderedRing

variable [OrderedRing R] [AddCommGroup V] [Module R V] [AddTorsor V P]

variable [AddCommGroup V'] [Module R V'] [AddTorsor V' P']

/-- The segment of points weakly between `x` and `y`. When convexity is refactored to support
abstract affine combination spaces, this will no longer need to be a separate definition from
`segment`. However, lemmas involving `+·µ•` or `-·µ•` will still be relevant after such a
refactoring, as distinct from versions involving `+` or `-` in a module. -/
def affineSegment (x y : P) :=
  lineMap x y '' Set.Icc (0 : R) 1
#align affine_segment affineSegment

theorem affineSegment_eq_segment (x y : V) : affineSegment R x y = segment R x y := by
  rw [segment_eq_image_lineMap, affineSegment]
  -- üéâ no goals
#align affine_segment_eq_segment affineSegment_eq_segment

theorem affineSegment_comm (x y : P) : affineSegment R x y = affineSegment R y x := by
  refine' Set.ext fun z => _
  -- ‚ä¢ z ‚àà affineSegment R x y ‚Üî z ‚àà affineSegment R y x
  constructor <;>
  -- ‚ä¢ z ‚àà affineSegment R x y ‚Üí z ‚àà affineSegment R y x
    ¬∑ rintro ‚ü®t, ht, hxy‚ü©
      -- ‚ä¢ z ‚àà affineSegment R y x
      -- ‚ä¢ z ‚àà affineSegment R x y
      -- ‚ä¢ 1 - t ‚àà Set.Icc 0 1
      refine' ‚ü®1 - t, _, _‚ü©
        -- üéâ no goals
      -- ‚ä¢ 1 - t ‚àà Set.Icc 0 1
        -- üéâ no goals
      ¬∑ rwa [Set.sub_mem_Icc_iff_right, sub_self, sub_zero]
        -- üéâ no goals
      ¬∑ rwa [lineMap_apply_one_sub]
        -- üéâ no goals
#align affine_segment_comm affineSegment_comm

theorem left_mem_affineSegment (x y : P) : x ‚àà affineSegment R x y :=
  ‚ü®0, Set.left_mem_Icc.2 zero_le_one, lineMap_apply_zero _ _‚ü©
#align left_mem_affine_segment left_mem_affineSegment

theorem right_mem_affineSegment (x y : P) : y ‚àà affineSegment R x y :=
  ‚ü®1, Set.right_mem_Icc.2 zero_le_one, lineMap_apply_one _ _‚ü©
#align right_mem_affine_segment right_mem_affineSegment

@[simp]
theorem affineSegment_same (x : P) : affineSegment R x x = {x} := by
  -- porting note: added as this doesn't do anything in `simp_rw` any more
  rw [affineSegment]
  -- ‚ä¢ ‚Üë(lineMap x x) '' Set.Icc 0 1 = {x}
  -- Note: when adding "simp made no progress" in lean4#2336,
  -- had to change `lineMap_same` to `lineMap_same _`. Not sure why?
  -- porting note: added `_ _` and `Function.const`
  simp_rw [lineMap_same _, AffineMap.coe_const _ _, Function.const,
    (Set.nonempty_Icc.mpr zero_le_one).image_const]
#align affine_segment_same affineSegment_same

variable {R}

@[simp]
theorem affineSegment_image (f : P ‚Üí·µÉ[R] P') (x y : P) :
    f '' affineSegment R x y = affineSegment R (f x) (f y) := by
  rw [affineSegment, affineSegment, Set.image_image, ‚Üê comp_lineMap]
  -- ‚ä¢ (fun x_1 => ‚Üëf (‚Üë(lineMap x y) x_1)) '' Set.Icc 0 1 = ‚Üë(comp f (lineMap x y) ‚Ä¶
  rfl
  -- üéâ no goals
#align affine_segment_image affineSegment_image

variable (R)

@[simp]
theorem affineSegment_const_vadd_image (x y : P) (v : V) :
    (v +·µ• ¬∑) '' affineSegment R x y = affineSegment R (v +·µ• x) (v +·µ• y) :=
  affineSegment_image (AffineEquiv.constVAdd R P v : P ‚Üí·µÉ[R] P) x y
#align affine_segment_const_vadd_image affineSegment_const_vadd_image

@[simp]
theorem affineSegment_vadd_const_image (x y : V) (p : P) :
    (¬∑ +·µ• p) '' affineSegment R x y = affineSegment R (x +·µ• p) (y +·µ• p) :=
  affineSegment_image (AffineEquiv.vaddConst R p : V ‚Üí·µÉ[R] P) x y
#align affine_segment_vadd_const_image affineSegment_vadd_const_image

@[simp]
theorem affineSegment_const_vsub_image (x y p : P) :
    (p -·µ• ¬∑) '' affineSegment R x y = affineSegment R (p -·µ• x) (p -·µ• y) :=
  affineSegment_image (AffineEquiv.constVSub R p : P ‚Üí·µÉ[R] V) x y
#align affine_segment_const_vsub_image affineSegment_const_vsub_image

@[simp]
theorem affineSegment_vsub_const_image (x y p : P) :
    (¬∑ -·µ• p) '' affineSegment R x y = affineSegment R (x -·µ• p) (y -·µ• p) :=
  affineSegment_image ((AffineEquiv.vaddConst R p).symm : P ‚Üí·µÉ[R] V) x y
#align affine_segment_vsub_const_image affineSegment_vsub_const_image

variable {R}

@[simp]
theorem mem_const_vadd_affineSegment {x y z : P} (v : V) :
    v +·µ• z ‚àà affineSegment R (v +·µ• x) (v +·µ• y) ‚Üî z ‚àà affineSegment R x y := by
  rw [‚Üê affineSegment_const_vadd_image, (AddAction.injective v).mem_set_image]
  -- üéâ no goals
#align mem_const_vadd_affine_segment mem_const_vadd_affineSegment

@[simp]
theorem mem_vadd_const_affineSegment {x y z : V} (p : P) :
    z +·µ• p ‚àà affineSegment R (x +·µ• p) (y +·µ• p) ‚Üî z ‚àà affineSegment R x y := by
  rw [‚Üê affineSegment_vadd_const_image, (vadd_right_injective p).mem_set_image]
  -- üéâ no goals
#align mem_vadd_const_affine_segment mem_vadd_const_affineSegment

@[simp]
theorem mem_const_vsub_affineSegment {x y z : P} (p : P) :
    p -·µ• z ‚àà affineSegment R (p -·µ• x) (p -·µ• y) ‚Üî z ‚àà affineSegment R x y := by
  rw [‚Üê affineSegment_const_vsub_image, (vsub_right_injective p).mem_set_image]
  -- üéâ no goals
#align mem_const_vsub_affine_segment mem_const_vsub_affineSegment

@[simp]
theorem mem_vsub_const_affineSegment {x y z : P} (p : P) :
    z -·µ• p ‚àà affineSegment R (x -·µ• p) (y -·µ• p) ‚Üî z ‚àà affineSegment R x y := by
  rw [‚Üê affineSegment_vsub_const_image, (vsub_left_injective p).mem_set_image]
  -- üéâ no goals
#align mem_vsub_const_affine_segment mem_vsub_const_affineSegment

variable (R)

/-- The point `y` is weakly between `x` and `z`. -/
def Wbtw (x y z : P) : Prop :=
  y ‚àà affineSegment R x z
#align wbtw Wbtw

/-- The point `y` is strictly between `x` and `z`. -/
def Sbtw (x y z : P) : Prop :=
  Wbtw R x y z ‚àß y ‚â† x ‚àß y ‚â† z
#align sbtw Sbtw

variable {R}

theorem Wbtw.map {x y z : P} (h : Wbtw R x y z) (f : P ‚Üí·µÉ[R] P') : Wbtw R (f x) (f y) (f z) := by
  rw [Wbtw, ‚Üê affineSegment_image]
  -- ‚ä¢ ‚Üëf y ‚àà ‚Üëf '' affineSegment R x z
  exact Set.mem_image_of_mem _ h
  -- üéâ no goals
#align wbtw.map Wbtw.map

theorem Function.Injective.wbtw_map_iff {x y z : P} {f : P ‚Üí·µÉ[R] P'} (hf : Function.Injective f) :
    Wbtw R (f x) (f y) (f z) ‚Üî Wbtw R x y z := by
  refine' ‚ü®fun h => _, fun h => h.map _‚ü©
  -- ‚ä¢ Wbtw R x y z
  rwa [Wbtw, ‚Üê affineSegment_image, hf.mem_set_image] at h
  -- üéâ no goals
#align function.injective.wbtw_map_iff Function.Injective.wbtw_map_iff

theorem Function.Injective.sbtw_map_iff {x y z : P} {f : P ‚Üí·µÉ[R] P'} (hf : Function.Injective f) :
    Sbtw R (f x) (f y) (f z) ‚Üî Sbtw R x y z := by
  simp_rw [Sbtw, hf.wbtw_map_iff, hf.ne_iff]
  -- üéâ no goals
#align function.injective.sbtw_map_iff Function.Injective.sbtw_map_iff

@[simp]
theorem AffineEquiv.wbtw_map_iff {x y z : P} (f : P ‚âÉ·µÉ[R] P') :
    Wbtw R (f x) (f y) (f z) ‚Üî Wbtw R x y z := by
  refine' Function.Injective.wbtw_map_iff (_ : Function.Injective f.toAffineMap)
  -- ‚ä¢ Function.Injective ‚Üë‚Üëf
  exact f.injective
  -- üéâ no goals
#align affine_equiv.wbtw_map_iff AffineEquiv.wbtw_map_iff

@[simp]
theorem AffineEquiv.sbtw_map_iff {x y z : P} (f : P ‚âÉ·µÉ[R] P') :
    Sbtw R (f x) (f y) (f z) ‚Üî Sbtw R x y z := by
  refine' Function.Injective.sbtw_map_iff (_ : Function.Injective f.toAffineMap)
  -- ‚ä¢ Function.Injective ‚Üë‚Üëf
  exact f.injective
  -- üéâ no goals
#align affine_equiv.sbtw_map_iff AffineEquiv.sbtw_map_iff

@[simp]
theorem wbtw_const_vadd_iff {x y z : P} (v : V) :
    Wbtw R (v +·µ• x) (v +·µ• y) (v +·µ• z) ‚Üî Wbtw R x y z :=
  mem_const_vadd_affineSegment _
#align wbtw_const_vadd_iff wbtw_const_vadd_iff

@[simp]
theorem wbtw_vadd_const_iff {x y z : V} (p : P) :
    Wbtw R (x +·µ• p) (y +·µ• p) (z +·µ• p) ‚Üî Wbtw R x y z :=
  mem_vadd_const_affineSegment _
#align wbtw_vadd_const_iff wbtw_vadd_const_iff

@[simp]
theorem wbtw_const_vsub_iff {x y z : P} (p : P) :
    Wbtw R (p -·µ• x) (p -·µ• y) (p -·µ• z) ‚Üî Wbtw R x y z :=
  mem_const_vsub_affineSegment _
#align wbtw_const_vsub_iff wbtw_const_vsub_iff

@[simp]
theorem wbtw_vsub_const_iff {x y z : P} (p : P) :
    Wbtw R (x -·µ• p) (y -·µ• p) (z -·µ• p) ‚Üî Wbtw R x y z :=
  mem_vsub_const_affineSegment _
#align wbtw_vsub_const_iff wbtw_vsub_const_iff

@[simp]
theorem sbtw_const_vadd_iff {x y z : P} (v : V) :
    Sbtw R (v +·µ• x) (v +·µ• y) (v +·µ• z) ‚Üî Sbtw R x y z := by
  rw [Sbtw, Sbtw, wbtw_const_vadd_iff, (AddAction.injective v).ne_iff,
    (AddAction.injective v).ne_iff]
#align sbtw_const_vadd_iff sbtw_const_vadd_iff

@[simp]
theorem sbtw_vadd_const_iff {x y z : V} (p : P) :
    Sbtw R (x +·µ• p) (y +·µ• p) (z +·µ• p) ‚Üî Sbtw R x y z := by
  rw [Sbtw, Sbtw, wbtw_vadd_const_iff, (vadd_right_injective p).ne_iff,
    (vadd_right_injective p).ne_iff]
#align sbtw_vadd_const_iff sbtw_vadd_const_iff

@[simp]
theorem sbtw_const_vsub_iff {x y z : P} (p : P) :
    Sbtw R (p -·µ• x) (p -·µ• y) (p -·µ• z) ‚Üî Sbtw R x y z := by
  rw [Sbtw, Sbtw, wbtw_const_vsub_iff, (vsub_right_injective p).ne_iff,
    (vsub_right_injective p).ne_iff]
#align sbtw_const_vsub_iff sbtw_const_vsub_iff

@[simp]
theorem sbtw_vsub_const_iff {x y z : P} (p : P) :
    Sbtw R (x -·µ• p) (y -·µ• p) (z -·µ• p) ‚Üî Sbtw R x y z := by
  rw [Sbtw, Sbtw, wbtw_vsub_const_iff, (vsub_left_injective p).ne_iff,
    (vsub_left_injective p).ne_iff]
#align sbtw_vsub_const_iff sbtw_vsub_const_iff

theorem Sbtw.wbtw {x y z : P} (h : Sbtw R x y z) : Wbtw R x y z :=
  h.1
#align sbtw.wbtw Sbtw.wbtw

theorem Sbtw.ne_left {x y z : P} (h : Sbtw R x y z) : y ‚â† x :=
  h.2.1
#align sbtw.ne_left Sbtw.ne_left

theorem Sbtw.left_ne {x y z : P} (h : Sbtw R x y z) : x ‚â† y :=
  h.2.1.symm
#align sbtw.left_ne Sbtw.left_ne

theorem Sbtw.ne_right {x y z : P} (h : Sbtw R x y z) : y ‚â† z :=
  h.2.2
#align sbtw.ne_right Sbtw.ne_right

theorem Sbtw.right_ne {x y z : P} (h : Sbtw R x y z) : z ‚â† y :=
  h.2.2.symm
#align sbtw.right_ne Sbtw.right_ne

theorem Sbtw.mem_image_Ioo {x y z : P} (h : Sbtw R x y z) :
    y ‚àà lineMap x z '' Set.Ioo (0 : R) 1 := by
  rcases h with ‚ü®‚ü®t, ht, rfl‚ü©, hyx, hyz‚ü©
  -- ‚ä¢ ‚Üë(lineMap x z) t ‚àà ‚Üë(lineMap x z) '' Set.Ioo 0 1
  rcases Set.eq_endpoints_or_mem_Ioo_of_mem_Icc ht with (rfl | rfl | ho)
  ¬∑ exfalso
    -- ‚ä¢ False
    exact hyx (lineMap_apply_zero _ _)
    -- üéâ no goals
  ¬∑ exfalso
    -- ‚ä¢ False
    exact hyz (lineMap_apply_one _ _)
    -- üéâ no goals
  ¬∑ exact ‚ü®t, ho, rfl‚ü©
    -- üéâ no goals
#align sbtw.mem_image_Ioo Sbtw.mem_image_Ioo

theorem Wbtw.mem_affineSpan {x y z : P} (h : Wbtw R x y z) : y ‚àà line[R, x, z] := by
  rcases h with ‚ü®r, ‚ü®-, rfl‚ü©‚ü©
  -- ‚ä¢ ‚Üë(lineMap x z) r ‚àà affineSpan R {x, z}
  exact lineMap_mem_affineSpan_pair _ _ _
  -- üéâ no goals
#align wbtw.mem_affine_span Wbtw.mem_affineSpan

theorem wbtw_comm {x y z : P} : Wbtw R x y z ‚Üî Wbtw R z y x := by
  rw [Wbtw, Wbtw, affineSegment_comm]
  -- üéâ no goals
#align wbtw_comm wbtw_comm

alias ‚ü®Wbtw.symm, _‚ü© := wbtw_comm
#align wbtw.symm Wbtw.symm

theorem sbtw_comm {x y z : P} : Sbtw R x y z ‚Üî Sbtw R z y x := by
  rw [Sbtw, Sbtw, wbtw_comm, ‚Üê and_assoc, ‚Üê and_assoc, and_right_comm]
  -- üéâ no goals
#align sbtw_comm sbtw_comm

alias ‚ü®Sbtw.symm, _‚ü© := sbtw_comm
#align sbtw.symm Sbtw.symm

variable (R)

@[simp]
theorem wbtw_self_left (x y : P) : Wbtw R x x y :=
  left_mem_affineSegment _ _ _
#align wbtw_self_left wbtw_self_left

@[simp]
theorem wbtw_self_right (x y : P) : Wbtw R x y y :=
  right_mem_affineSegment _ _ _
#align wbtw_self_right wbtw_self_right

@[simp]
theorem wbtw_self_iff {x y : P} : Wbtw R x y x ‚Üî y = x := by
  refine' ‚ü®fun h => _, fun h => _‚ü©
  -- ‚ä¢ y = x
  ¬∑ -- Porting note: Originally `simpa [Wbtw, affineSegment] using h`
    have ‚ü®_, _, h‚ÇÇ‚ü© := h
    -- ‚ä¢ y = x
    rw [h‚ÇÇ.symm, lineMap_same_apply]
    -- üéâ no goals
  ¬∑ rw [h]
    -- ‚ä¢ Wbtw R x x x
    exact wbtw_self_left R x x
    -- üéâ no goals
#align wbtw_self_iff wbtw_self_iff

@[simp]
theorem not_sbtw_self_left (x y : P) : ¬¨Sbtw R x x y :=
  fun h => h.ne_left rfl
#align not_sbtw_self_left not_sbtw_self_left

@[simp]
theorem not_sbtw_self_right (x y : P) : ¬¨Sbtw R x y y :=
  fun h => h.ne_right rfl
#align not_sbtw_self_right not_sbtw_self_right

variable {R}

theorem Wbtw.left_ne_right_of_ne_left {x y z : P} (h : Wbtw R x y z) (hne : y ‚â† x) : x ‚â† z := by
  rintro rfl
  -- ‚ä¢ False
  rw [wbtw_self_iff] at h
  -- ‚ä¢ False
  exact hne h
  -- üéâ no goals
#align wbtw.left_ne_right_of_ne_left Wbtw.left_ne_right_of_ne_left

theorem Wbtw.left_ne_right_of_ne_right {x y z : P} (h : Wbtw R x y z) (hne : y ‚â† z) : x ‚â† z := by
  rintro rfl
  -- ‚ä¢ False
  rw [wbtw_self_iff] at h
  -- ‚ä¢ False
  exact hne h
  -- üéâ no goals
#align wbtw.left_ne_right_of_ne_right Wbtw.left_ne_right_of_ne_right

theorem Sbtw.left_ne_right {x y z : P} (h : Sbtw R x y z) : x ‚â† z :=
  h.wbtw.left_ne_right_of_ne_left h.2.1
#align sbtw.left_ne_right Sbtw.left_ne_right

theorem sbtw_iff_mem_image_Ioo_and_ne [NoZeroSMulDivisors R V] {x y z : P} :
    Sbtw R x y z ‚Üî y ‚àà lineMap x z '' Set.Ioo (0 : R) 1 ‚àß x ‚â† z := by
  refine' ‚ü®fun h => ‚ü®h.mem_image_Ioo, h.left_ne_right‚ü©, fun h => _‚ü©
  -- ‚ä¢ Sbtw R x y z
  rcases h with ‚ü®‚ü®t, ht, rfl‚ü©, hxz‚ü©
  -- ‚ä¢ Sbtw R x (‚Üë(lineMap x z) t) z
  refine' ‚ü®‚ü®t, Set.mem_Icc_of_Ioo ht, rfl‚ü©, _‚ü©
  -- ‚ä¢ ‚Üë(lineMap x z) t ‚â† x ‚àß ‚Üë(lineMap x z) t ‚â† z
  rw [lineMap_apply, ‚Üê @vsub_ne_zero V, ‚Üê @vsub_ne_zero V _ _ _ _ z, vadd_vsub_assoc, vsub_self,
    vadd_vsub_assoc, ‚Üê neg_vsub_eq_vsub_rev z x, ‚Üê @neg_one_smul R, ‚Üê add_smul, ‚Üê sub_eq_add_neg]
  simp [smul_ne_zero, sub_eq_zero, ht.1.ne.symm, ht.2.ne, hxz.symm]
  -- üéâ no goals
#align sbtw_iff_mem_image_Ioo_and_ne sbtw_iff_mem_image_Ioo_and_ne

variable (R)

@[simp]
theorem not_sbtw_self (x y : P) : ¬¨Sbtw R x y x :=
  fun h => h.left_ne_right rfl
#align not_sbtw_self not_sbtw_self

theorem wbtw_swap_left_iff [NoZeroSMulDivisors R V] {x y : P} (z : P) :
    Wbtw R x y z ‚àß Wbtw R y x z ‚Üî x = y := by
  constructor
  -- ‚ä¢ Wbtw R x y z ‚àß Wbtw R y x z ‚Üí x = y
  ¬∑ rintro ‚ü®hxyz, hyxz‚ü©
    -- ‚ä¢ x = y
    rcases hxyz with ‚ü®ty, hty, rfl‚ü©
    -- ‚ä¢ x = ‚Üë(lineMap x z) ty
    rcases hyxz with ‚ü®tx, htx, hx‚ü©
    -- ‚ä¢ x = ‚Üë(lineMap x z) ty
    rw [lineMap_apply, lineMap_apply, ‚Üê add_vadd] at hx
    -- ‚ä¢ x = ‚Üë(lineMap x z) ty
    rw [‚Üê @vsub_eq_zero_iff_eq V, vadd_vsub, vsub_vadd_eq_vsub_sub, smul_sub, smul_smul, ‚Üê sub_smul,
      ‚Üê add_smul, smul_eq_zero] at hx
    rcases hx with (h | h)
    -- ‚ä¢ x = ‚Üë(lineMap x z) ty
    ¬∑ nth_rw 1 [‚Üê mul_one tx] at h
      -- ‚ä¢ x = ‚Üë(lineMap x z) ty
      rw [‚Üê mul_sub, add_eq_zero_iff_neg_eq] at h
      -- ‚ä¢ x = ‚Üë(lineMap x z) ty
      have h' : ty = 0 := by
        refine' le_antisymm _ hty.1
        rw [‚Üê h, Left.neg_nonpos_iff]
        exact mul_nonneg htx.1 (sub_nonneg.2 hty.2)
      simp [h']
      -- üéâ no goals
    ¬∑ rw [vsub_eq_zero_iff_eq] at h
      -- ‚ä¢ x = ‚Üë(lineMap x z) ty
      rw [h, lineMap_same_apply]
      -- üéâ no goals
  ¬∑ rintro rfl
    -- ‚ä¢ Wbtw R x x z ‚àß Wbtw R x x z
    exact ‚ü®wbtw_self_left _ _ _, wbtw_self_left _ _ _‚ü©
    -- üéâ no goals
#align wbtw_swap_left_iff wbtw_swap_left_iff

theorem wbtw_swap_right_iff [NoZeroSMulDivisors R V] (x : P) {y z : P} :
    Wbtw R x y z ‚àß Wbtw R x z y ‚Üî y = z := by
  rw [wbtw_comm, wbtw_comm (z := y), eq_comm]
  -- ‚ä¢ Wbtw R z y x ‚àß Wbtw R y z x ‚Üî z = y
  exact wbtw_swap_left_iff R x
  -- üéâ no goals
#align wbtw_swap_right_iff wbtw_swap_right_iff

theorem wbtw_rotate_iff [NoZeroSMulDivisors R V] (x : P) {y z : P} :
    Wbtw R x y z ‚àß Wbtw R z x y ‚Üî x = y := by rw [wbtw_comm, wbtw_swap_right_iff, eq_comm]
                                              -- üéâ no goals
#align wbtw_rotate_iff wbtw_rotate_iff

variable {R}

theorem Wbtw.swap_left_iff [NoZeroSMulDivisors R V] {x y z : P} (h : Wbtw R x y z) :
    Wbtw R y x z ‚Üî x = y := by rw [‚Üê wbtw_swap_left_iff R z, and_iff_right h]
                               -- üéâ no goals
#align wbtw.swap_left_iff Wbtw.swap_left_iff

theorem Wbtw.swap_right_iff [NoZeroSMulDivisors R V] {x y z : P} (h : Wbtw R x y z) :
    Wbtw R x z y ‚Üî y = z := by rw [‚Üê wbtw_swap_right_iff R x, and_iff_right h]
                               -- üéâ no goals
#align wbtw.swap_right_iff Wbtw.swap_right_iff

theorem Wbtw.rotate_iff [NoZeroSMulDivisors R V] {x y z : P} (h : Wbtw R x y z) :
    Wbtw R z x y ‚Üî x = y := by rw [‚Üê wbtw_rotate_iff R x, and_iff_right h]
                               -- üéâ no goals
#align wbtw.rotate_iff Wbtw.rotate_iff

theorem Sbtw.not_swap_left [NoZeroSMulDivisors R V] {x y z : P} (h : Sbtw R x y z) :
    ¬¨Wbtw R y x z := fun hs => h.left_ne (h.wbtw.swap_left_iff.1 hs)
#align sbtw.not_swap_left Sbtw.not_swap_left

theorem Sbtw.not_swap_right [NoZeroSMulDivisors R V] {x y z : P} (h : Sbtw R x y z) :
    ¬¨Wbtw R x z y := fun hs => h.ne_right (h.wbtw.swap_right_iff.1 hs)
#align sbtw.not_swap_right Sbtw.not_swap_right

theorem Sbtw.not_rotate [NoZeroSMulDivisors R V] {x y z : P} (h : Sbtw R x y z) : ¬¨Wbtw R z x y :=
  fun hs => h.left_ne (h.wbtw.rotate_iff.1 hs)
#align sbtw.not_rotate Sbtw.not_rotate

@[simp]
theorem wbtw_lineMap_iff [NoZeroSMulDivisors R V] {x y : P} {r : R} :
    Wbtw R x (lineMap x y r) y ‚Üî x = y ‚à® r ‚àà Set.Icc (0 : R) 1 := by
  by_cases hxy : x = y
  -- ‚ä¢ Wbtw R x (‚Üë(lineMap x y) r) y ‚Üî x = y ‚à® r ‚àà Set.Icc 0 1
  ¬∑ rw [hxy, lineMap_same_apply]
    -- ‚ä¢ Wbtw R y y y ‚Üî y = y ‚à® r ‚àà Set.Icc 0 1
    simp
    -- üéâ no goals
  rw [or_iff_right hxy, Wbtw, affineSegment, (lineMap_injective R hxy).mem_set_image]
  -- üéâ no goals
#align wbtw_line_map_iff wbtw_lineMap_iff

@[simp]
theorem sbtw_lineMap_iff [NoZeroSMulDivisors R V] {x y : P} {r : R} :
    Sbtw R x (lineMap x y r) y ‚Üî x ‚â† y ‚àß r ‚àà Set.Ioo (0 : R) 1 := by
  rw [sbtw_iff_mem_image_Ioo_and_ne, and_comm, and_congr_right]
  -- ‚ä¢ x ‚â† y ‚Üí (‚Üë(lineMap x y) r ‚àà ‚Üë(lineMap x y) '' Set.Ioo 0 1 ‚Üî r ‚àà Set.Ioo 0 1)
  intro hxy
  -- ‚ä¢ ‚Üë(lineMap x y) r ‚àà ‚Üë(lineMap x y) '' Set.Ioo 0 1 ‚Üî r ‚àà Set.Ioo 0 1
  rw [(lineMap_injective R hxy).mem_set_image]
  -- üéâ no goals
#align sbtw_line_map_iff sbtw_lineMap_iff

@[simp]
theorem wbtw_mul_sub_add_iff [NoZeroDivisors R] {x y r : R} :
    Wbtw R x (r * (y - x) + x) y ‚Üî x = y ‚à® r ‚àà Set.Icc (0 : R) 1 :=
  wbtw_lineMap_iff
#align wbtw_mul_sub_add_iff wbtw_mul_sub_add_iff

@[simp]
theorem sbtw_mul_sub_add_iff [NoZeroDivisors R] {x y r : R} :
    Sbtw R x (r * (y - x) + x) y ‚Üî x ‚â† y ‚àß r ‚àà Set.Ioo (0 : R) 1 :=
  sbtw_lineMap_iff
#align sbtw_mul_sub_add_iff sbtw_mul_sub_add_iff

@[simp]
theorem wbtw_zero_one_iff {x : R} : Wbtw R 0 x 1 ‚Üî x ‚àà Set.Icc (0 : R) 1 := by
  rw [Wbtw, affineSegment, Set.mem_image]
  -- ‚ä¢ (‚àÉ x_1, x_1 ‚àà Set.Icc 0 1 ‚àß ‚Üë(lineMap 0 1) x_1 = x) ‚Üî x ‚àà Set.Icc 0 1
  simp_rw [lineMap_apply_ring]
  -- ‚ä¢ (‚àÉ x_1, x_1 ‚àà Set.Icc 0 1 ‚àß (1 - x_1) * 0 + x_1 * 1 = x) ‚Üî x ‚àà Set.Icc 0 1
  simp
  -- üéâ no goals
#align wbtw_zero_one_iff wbtw_zero_one_iff

@[simp]
theorem wbtw_one_zero_iff {x : R} : Wbtw R 1 x 0 ‚Üî x ‚àà Set.Icc (0 : R) 1 := by
  rw [wbtw_comm, wbtw_zero_one_iff]
  -- üéâ no goals
#align wbtw_one_zero_iff wbtw_one_zero_iff

@[simp]
theorem sbtw_zero_one_iff {x : R} : Sbtw R 0 x 1 ‚Üî x ‚àà Set.Ioo (0 : R) 1 := by
  rw [Sbtw, wbtw_zero_one_iff, Set.mem_Icc, Set.mem_Ioo]
  -- ‚ä¢ (0 ‚â§ x ‚àß x ‚â§ 1) ‚àß x ‚â† 0 ‚àß x ‚â† 1 ‚Üî 0 < x ‚àß x < 1
  exact
    ‚ü®fun h => ‚ü®h.1.1.lt_of_ne (Ne.symm h.2.1), h.1.2.lt_of_ne h.2.2‚ü©, fun h =>
      ‚ü®‚ü®h.1.le, h.2.le‚ü©, h.1.ne', h.2.ne‚ü©‚ü©
#align sbtw_zero_one_iff sbtw_zero_one_iff

@[simp]
theorem sbtw_one_zero_iff {x : R} : Sbtw R 1 x 0 ‚Üî x ‚àà Set.Ioo (0 : R) 1 := by
  rw [sbtw_comm, sbtw_zero_one_iff]
  -- üéâ no goals
#align sbtw_one_zero_iff sbtw_one_zero_iff

theorem Wbtw.trans_left {w x y z : P} (h‚ÇÅ : Wbtw R w y z) (h‚ÇÇ : Wbtw R w x y) : Wbtw R w x z := by
  rcases h‚ÇÅ with ‚ü®t‚ÇÅ, ht‚ÇÅ, rfl‚ü©
  -- ‚ä¢ Wbtw R w x z
  rcases h‚ÇÇ with ‚ü®t‚ÇÇ, ht‚ÇÇ, rfl‚ü©
  -- ‚ä¢ Wbtw R w (‚Üë(lineMap w (‚Üë(lineMap w z) t‚ÇÅ)) t‚ÇÇ) z
  refine' ‚ü®t‚ÇÇ * t‚ÇÅ, ‚ü®mul_nonneg ht‚ÇÇ.1 ht‚ÇÅ.1, mul_le_one ht‚ÇÇ.2 ht‚ÇÅ.1 ht‚ÇÅ.2‚ü©, _‚ü©
  -- ‚ä¢ ‚Üë(lineMap w z) (t‚ÇÇ * t‚ÇÅ) = ‚Üë(lineMap w (‚Üë(lineMap w z) t‚ÇÅ)) t‚ÇÇ
  rw [lineMap_apply, lineMap_apply, lineMap_vsub_left, smul_smul]
  -- üéâ no goals
#align wbtw.trans_left Wbtw.trans_left

theorem Wbtw.trans_right {w x y z : P} (h‚ÇÅ : Wbtw R w x z) (h‚ÇÇ : Wbtw R x y z) : Wbtw R w y z := by
  rw [wbtw_comm] at *
  -- ‚ä¢ Wbtw R z y w
  exact h‚ÇÅ.trans_left h‚ÇÇ
  -- üéâ no goals
#align wbtw.trans_right Wbtw.trans_right

theorem Wbtw.trans_sbtw_left [NoZeroSMulDivisors R V] {w x y z : P} (h‚ÇÅ : Wbtw R w y z)
    (h‚ÇÇ : Sbtw R w x y) : Sbtw R w x z := by
  refine' ‚ü®h‚ÇÅ.trans_left h‚ÇÇ.wbtw, h‚ÇÇ.ne_left, _‚ü©
  -- ‚ä¢ x ‚â† z
  rintro rfl
  -- ‚ä¢ False
  exact h‚ÇÇ.right_ne ((wbtw_swap_right_iff R w).1 ‚ü®h‚ÇÅ, h‚ÇÇ.wbtw‚ü©)
  -- üéâ no goals
#align wbtw.trans_sbtw_left Wbtw.trans_sbtw_left

theorem Wbtw.trans_sbtw_right [NoZeroSMulDivisors R V] {w x y z : P} (h‚ÇÅ : Wbtw R w x z)
    (h‚ÇÇ : Sbtw R x y z) : Sbtw R w y z := by
  rw [wbtw_comm] at *
  -- ‚ä¢ Sbtw R w y z
  rw [sbtw_comm] at *
  -- ‚ä¢ Sbtw R z y w
  exact h‚ÇÅ.trans_sbtw_left h‚ÇÇ
  -- üéâ no goals
#align wbtw.trans_sbtw_right Wbtw.trans_sbtw_right

theorem Sbtw.trans_left [NoZeroSMulDivisors R V] {w x y z : P} (h‚ÇÅ : Sbtw R w y z)
    (h‚ÇÇ : Sbtw R w x y) : Sbtw R w x z :=
  h‚ÇÅ.wbtw.trans_sbtw_left h‚ÇÇ
#align sbtw.trans_left Sbtw.trans_left

theorem Sbtw.trans_right [NoZeroSMulDivisors R V] {w x y z : P} (h‚ÇÅ : Sbtw R w x z)
    (h‚ÇÇ : Sbtw R x y z) : Sbtw R w y z :=
  h‚ÇÅ.wbtw.trans_sbtw_right h‚ÇÇ
#align sbtw.trans_right Sbtw.trans_right

theorem Wbtw.trans_left_ne [NoZeroSMulDivisors R V] {w x y z : P} (h‚ÇÅ : Wbtw R w y z)
    (h‚ÇÇ : Wbtw R w x y) (h : y ‚â† z) : x ‚â† z := by
  rintro rfl
  -- ‚ä¢ False
  exact h (h‚ÇÅ.swap_right_iff.1 h‚ÇÇ)
  -- üéâ no goals
#align wbtw.trans_left_ne Wbtw.trans_left_ne

theorem Wbtw.trans_right_ne [NoZeroSMulDivisors R V] {w x y z : P} (h‚ÇÅ : Wbtw R w x z)
    (h‚ÇÇ : Wbtw R x y z) (h : w ‚â† x) : w ‚â† y := by
  rintro rfl
  -- ‚ä¢ False
  exact h (h‚ÇÅ.swap_left_iff.1 h‚ÇÇ)
  -- üéâ no goals
#align wbtw.trans_right_ne Wbtw.trans_right_ne

theorem Sbtw.trans_wbtw_left_ne [NoZeroSMulDivisors R V] {w x y z : P} (h‚ÇÅ : Sbtw R w y z)
    (h‚ÇÇ : Wbtw R w x y) : x ‚â† z :=
  h‚ÇÅ.wbtw.trans_left_ne h‚ÇÇ h‚ÇÅ.ne_right
#align sbtw.trans_wbtw_left_ne Sbtw.trans_wbtw_left_ne

theorem Sbtw.trans_wbtw_right_ne [NoZeroSMulDivisors R V] {w x y z : P} (h‚ÇÅ : Sbtw R w x z)
    (h‚ÇÇ : Wbtw R x y z) : w ‚â† y :=
  h‚ÇÅ.wbtw.trans_right_ne h‚ÇÇ h‚ÇÅ.left_ne
#align sbtw.trans_wbtw_right_ne Sbtw.trans_wbtw_right_ne

theorem Sbtw.affineCombination_of_mem_affineSpan_pair [NoZeroDivisors R] [NoZeroSMulDivisors R V]
    {Œπ : Type*} {p : Œπ ‚Üí P} (ha : AffineIndependent R p) {w w‚ÇÅ w‚ÇÇ : Œπ ‚Üí R} {s : Finset Œπ}
    (hw : ‚àë i in s, w i = 1) (hw‚ÇÅ : ‚àë i in s, w‚ÇÅ i = 1) (hw‚ÇÇ : ‚àë i in s, w‚ÇÇ i = 1)
    (h : s.affineCombination R p w ‚àà
      line[R, s.affineCombination R p w‚ÇÅ, s.affineCombination R p w‚ÇÇ])
    {i : Œπ} (his : i ‚àà s) (hs : Sbtw R (w‚ÇÅ i) (w i) (w‚ÇÇ i)) :
    Sbtw R (s.affineCombination R p w‚ÇÅ) (s.affineCombination R p w)
      (s.affineCombination R p w‚ÇÇ) := by
  rw [affineCombination_mem_affineSpan_pair ha hw hw‚ÇÅ hw‚ÇÇ] at h
  -- ‚ä¢ Sbtw R (‚Üë(Finset.affineCombination R s p) w‚ÇÅ) (‚Üë(Finset.affineCombination R  ‚Ä¶
  rcases h with ‚ü®r, hr‚ü©
  -- ‚ä¢ Sbtw R (‚Üë(Finset.affineCombination R s p) w‚ÇÅ) (‚Üë(Finset.affineCombination R  ‚Ä¶
  rw [hr i his, sbtw_mul_sub_add_iff] at hs
  -- ‚ä¢ Sbtw R (‚Üë(Finset.affineCombination R s p) w‚ÇÅ) (‚Üë(Finset.affineCombination R  ‚Ä¶
  change ‚àÄ i ‚àà s, w i = (r ‚Ä¢ (w‚ÇÇ - w‚ÇÅ) + w‚ÇÅ) i at hr
  -- ‚ä¢ Sbtw R (‚Üë(Finset.affineCombination R s p) w‚ÇÅ) (‚Üë(Finset.affineCombination R  ‚Ä¶
  rw [s.affineCombination_congr hr fun _ _ => rfl]
  -- ‚ä¢ Sbtw R (‚Üë(Finset.affineCombination R s p) w‚ÇÅ) (‚Üë(Finset.affineCombination R  ‚Ä¶
  dsimp only
  -- ‚ä¢ Sbtw R (‚Üë(Finset.affineCombination R s p) w‚ÇÅ) (‚Üë(Finset.affineCombination R  ‚Ä¶
  rw [‚Üê s.weightedVSub_vadd_affineCombination, s.weightedVSub_const_smul,
    ‚Üê s.affineCombination_vsub, ‚Üê lineMap_apply, sbtw_lineMap_iff, and_iff_left hs.2,
    ‚Üê @vsub_ne_zero V, s.affineCombination_vsub]
  intro hz
  -- ‚ä¢ False
  have hw‚ÇÅw‚ÇÇ : (‚àë i in s, (w‚ÇÅ - w‚ÇÇ) i) = 0 := by
    simp_rw [Pi.sub_apply, Finset.sum_sub_distrib, hw‚ÇÅ, hw‚ÇÇ, sub_self]
  refine' hs.1 _
  -- ‚ä¢ w‚ÇÅ i = w‚ÇÇ i
  have ha' := ha s (w‚ÇÅ - w‚ÇÇ) hw‚ÇÅw‚ÇÇ hz i his
  -- ‚ä¢ w‚ÇÅ i = w‚ÇÇ i
  rwa [Pi.sub_apply, sub_eq_zero] at ha'
  -- üéâ no goals
#align sbtw.affine_combination_of_mem_affine_span_pair Sbtw.affineCombination_of_mem_affineSpan_pair

end OrderedRing

section StrictOrderedCommRing

variable [StrictOrderedCommRing R] [AddCommGroup V] [Module R V] [AddTorsor V P]

variable {R}

theorem Wbtw.sameRay_vsub {x y z : P} (h : Wbtw R x y z) : SameRay R (y -·µ• x) (z -·µ• y) := by
  rcases h with ‚ü®t, ‚ü®ht0, ht1‚ü©, rfl‚ü©
  -- ‚ä¢ SameRay R (‚Üë(lineMap x z) t -·µ• x) (z -·µ• ‚Üë(lineMap x z) t)
  simp_rw [lineMap_apply]
  -- ‚ä¢ SameRay R (t ‚Ä¢ (z -·µ• x) +·µ• x -·µ• x) (z -·µ• (t ‚Ä¢ (z -·µ• x) +·µ• x))
  rcases ht0.lt_or_eq with (ht0' | rfl); swap; ¬∑ simp
  -- ‚ä¢ SameRay R (t ‚Ä¢ (z -·µ• x) +·µ• x -·µ• x) (z -·µ• (t ‚Ä¢ (z -·µ• x) +·µ• x))
                                         -- ‚ä¢ SameRay R (0 ‚Ä¢ (z -·µ• x) +·µ• x -·µ• x) (z -·µ• (0 ‚Ä¢ (z -·µ• x) +·µ• x))
                                                 -- üéâ no goals
  rcases ht1.lt_or_eq with (ht1' | rfl); swap; ¬∑ simp
  -- ‚ä¢ SameRay R (t ‚Ä¢ (z -·µ• x) +·µ• x -·µ• x) (z -·µ• (t ‚Ä¢ (z -·µ• x) +·µ• x))
                                         -- ‚ä¢ SameRay R (1 ‚Ä¢ (z -·µ• x) +·µ• x -·µ• x) (z -·µ• (1 ‚Ä¢ (z -·µ• x) +·µ• x))
                                                 -- üéâ no goals
  refine' Or.inr (Or.inr ‚ü®1 - t, t, sub_pos.2 ht1', ht0', _‚ü©)
  -- ‚ä¢ (1 - t) ‚Ä¢ (t ‚Ä¢ (z -·µ• x) +·µ• x -·µ• x) = t ‚Ä¢ (z -·µ• (t ‚Ä¢ (z -·µ• x) +·µ• x))
  simp [vsub_vadd_eq_vsub_sub, smul_sub, smul_smul, ‚Üê sub_smul]
  -- ‚ä¢ ((1 - t) * t) ‚Ä¢ (z -·µ• x) = (t - t * t) ‚Ä¢ (z -·µ• x)
  ring_nf
  -- üéâ no goals
#align wbtw.same_ray_vsub Wbtw.sameRay_vsub

theorem Wbtw.sameRay_vsub_left {x y z : P} (h : Wbtw R x y z) : SameRay R (y -·µ• x) (z -·µ• x) := by
  rcases h with ‚ü®t, ‚ü®ht0, _‚ü©, rfl‚ü©
  -- ‚ä¢ SameRay R (‚Üë(lineMap x z) t -·µ• x) (z -·µ• x)
  simpa [lineMap_apply] using SameRay.sameRay_nonneg_smul_left (z -·µ• x) ht0
  -- üéâ no goals
#align wbtw.same_ray_vsub_left Wbtw.sameRay_vsub_left

theorem Wbtw.sameRay_vsub_right {x y z : P} (h : Wbtw R x y z) : SameRay R (z -·µ• x) (z -·µ• y) := by
  rcases h with ‚ü®t, ‚ü®_, ht1‚ü©, rfl‚ü©
  -- ‚ä¢ SameRay R (z -·µ• x) (z -·µ• ‚Üë(lineMap x z) t)
  simpa [lineMap_apply, vsub_vadd_eq_vsub_sub, sub_smul] using
    SameRay.sameRay_nonneg_smul_right (z -·µ• x) (sub_nonneg.2 ht1)
#align wbtw.same_ray_vsub_right Wbtw.sameRay_vsub_right

end StrictOrderedCommRing

section LinearOrderedRing

variable [LinearOrderedRing R] [AddCommGroup V] [Module R V] [AddTorsor V P]

variable {R}

/-- Suppose lines from two vertices of a triangle to interior points of the opposite side meet at
`p`. Then `p` lies in the interior of the first (and by symmetry the other) segment from a
vertex to the point on the opposite side. -/
theorem sbtw_of_sbtw_of_sbtw_of_mem_affineSpan_pair [NoZeroSMulDivisors R V]
    {t : Affine.Triangle R P} {i‚ÇÅ i‚ÇÇ i‚ÇÉ : Fin 3} (h‚ÇÅ‚ÇÇ : i‚ÇÅ ‚â† i‚ÇÇ) {p‚ÇÅ p‚ÇÇ p : P}
    (h‚ÇÅ : Sbtw R (t.points i‚ÇÇ) p‚ÇÅ (t.points i‚ÇÉ)) (h‚ÇÇ : Sbtw R (t.points i‚ÇÅ) p‚ÇÇ (t.points i‚ÇÉ))
    (h‚ÇÅ' : p ‚àà line[R, t.points i‚ÇÅ, p‚ÇÅ]) (h‚ÇÇ' : p ‚àà line[R, t.points i‚ÇÇ, p‚ÇÇ]) :
    Sbtw R (t.points i‚ÇÅ) p p‚ÇÅ := by
  -- Should not be needed; see comments on local instances in `Data.Sign`.
  letI : DecidableRel ((¬∑ < ¬∑) : R ‚Üí R ‚Üí Prop) := LinearOrderedRing.decidableLT
  -- ‚ä¢ Sbtw R (Affine.Simplex.points t i‚ÇÅ) p p‚ÇÅ
  have h‚ÇÅ‚ÇÉ : i‚ÇÅ ‚â† i‚ÇÉ := by
    rintro rfl
    simp at h‚ÇÇ
  have h‚ÇÇ‚ÇÉ : i‚ÇÇ ‚â† i‚ÇÉ := by
    rintro rfl
    simp at h‚ÇÅ
  have h3 : ‚àÄ i : Fin 3, i = i‚ÇÅ ‚à® i = i‚ÇÇ ‚à® i = i‚ÇÉ := by
    clear h‚ÇÅ h‚ÇÇ h‚ÇÅ' h‚ÇÇ'
    -- Porting note: Originally `decide!`
    intro i
    fin_cases i <;> fin_cases i‚ÇÅ <;> fin_cases i‚ÇÇ <;> fin_cases i‚ÇÉ <;> simp at h‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÉ h‚ÇÇ‚ÇÉ ‚ä¢
  have hu : (Finset.univ : Finset (Fin 3)) = {i‚ÇÅ, i‚ÇÇ, i‚ÇÉ} := by
    clear h‚ÇÅ h‚ÇÇ h‚ÇÅ' h‚ÇÇ'
    -- Porting note: Originally `decide!`
    fin_cases i‚ÇÅ <;> fin_cases i‚ÇÇ <;> fin_cases i‚ÇÉ <;> simp at h‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÉ h‚ÇÇ‚ÇÉ ‚ä¢
  have hp : p ‚àà affineSpan R (Set.range t.points) := by
    have hle : line[R, t.points i‚ÇÅ, p‚ÇÅ] ‚â§ affineSpan R (Set.range t.points) := by
      refine' affineSpan_pair_le_of_mem_of_mem (mem_affineSpan R (Set.mem_range_self _)) _
      have hle : line[R, t.points i‚ÇÇ, t.points i‚ÇÉ] ‚â§ affineSpan R (Set.range t.points) := by
        refine' affineSpan_mono R _
        simp [Set.insert_subset_iff]
      rw [AffineSubspace.le_def'] at hle
      exact hle _ h‚ÇÅ.wbtw.mem_affineSpan
    rw [AffineSubspace.le_def'] at hle
    exact hle _ h‚ÇÅ'
  have h‚ÇÅi := h‚ÇÅ.mem_image_Ioo
  -- ‚ä¢ Sbtw R (Affine.Simplex.points t i‚ÇÅ) p p‚ÇÅ
  have h‚ÇÇi := h‚ÇÇ.mem_image_Ioo
  -- ‚ä¢ Sbtw R (Affine.Simplex.points t i‚ÇÅ) p p‚ÇÅ
  rw [Set.mem_image] at h‚ÇÅi h‚ÇÇi
  -- ‚ä¢ Sbtw R (Affine.Simplex.points t i‚ÇÅ) p p‚ÇÅ
  rcases h‚ÇÅi with ‚ü®r‚ÇÅ, ‚ü®hr‚ÇÅ0, hr‚ÇÅ1‚ü©, rfl‚ü©
  -- ‚ä¢ Sbtw R (Affine.Simplex.points t i‚ÇÅ) p (‚Üë(lineMap (Affine.Simplex.points t i‚ÇÇ ‚Ä¶
  rcases h‚ÇÇi with ‚ü®r‚ÇÇ, ‚ü®hr‚ÇÇ0, hr‚ÇÇ1‚ü©, rfl‚ü©
  -- ‚ä¢ Sbtw R (Affine.Simplex.points t i‚ÇÅ) p (‚Üë(lineMap (Affine.Simplex.points t i‚ÇÇ ‚Ä¶
  rcases eq_affineCombination_of_mem_affineSpan_of_fintype hp with ‚ü®w, hw, rfl‚ü©
  -- ‚ä¢ Sbtw R (Affine.Simplex.points t i‚ÇÅ) (‚Üë(Finset.affineCombination R Finset.uni ‚Ä¶
  have h‚ÇÅs :=
    sign_eq_of_affineCombination_mem_affineSpan_single_lineMap t.Independent hw (Finset.mem_univ _)
      (Finset.mem_univ _) (Finset.mem_univ _) h‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÉ h‚ÇÇ‚ÇÉ hr‚ÇÅ0 hr‚ÇÅ1 h‚ÇÅ'
  have h‚ÇÇs :=
    sign_eq_of_affineCombination_mem_affineSpan_single_lineMap t.Independent hw (Finset.mem_univ _)
      (Finset.mem_univ _) (Finset.mem_univ _) h‚ÇÅ‚ÇÇ.symm h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÉ hr‚ÇÇ0 hr‚ÇÇ1 h‚ÇÇ'
  rw [‚Üê Finset.univ.affineCombination_affineCombinationSingleWeights R t.points
      (Finset.mem_univ i‚ÇÅ),
    ‚Üê Finset.univ.affineCombination_affineCombinationLineMapWeights t.points (Finset.mem_univ _)
      (Finset.mem_univ _)] at h‚ÇÅ' ‚ä¢
  refine'
    Sbtw.affineCombination_of_mem_affineSpan_pair t.Independent hw
      (Finset.univ.sum_affineCombinationSingleWeights R (Finset.mem_univ _))
      (Finset.univ.sum_affineCombinationLineMapWeights (Finset.mem_univ _) (Finset.mem_univ _) _)
      h‚ÇÅ' (Finset.mem_univ i‚ÇÅ) _
  rw [Finset.affineCombinationSingleWeights_apply_self,
    Finset.affineCombinationLineMapWeights_apply_of_ne h‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÉ, sbtw_one_zero_iff]
  have hs : ‚àÄ i : Fin 3, SignType.sign (w i) = SignType.sign (w i‚ÇÉ) := by
    intro i
    rcases h3 i with (rfl | rfl | rfl)
    ¬∑ exact h‚ÇÇs
    ¬∑ exact h‚ÇÅs
    ¬∑ rfl
  have hss : SignType.sign (‚àë i, w i) = 1 := by simp [hw]
  -- ‚ä¢ w i‚ÇÅ ‚àà Set.Ioo 0 1
  have hs' := sign_sum Finset.univ_nonempty (SignType.sign (w i‚ÇÉ)) fun i _ => hs i
  -- ‚ä¢ w i‚ÇÅ ‚àà Set.Ioo 0 1
  rw [hs'] at hss
  -- ‚ä¢ w i‚ÇÅ ‚àà Set.Ioo 0 1
  simp_rw [hss, sign_eq_one_iff] at hs
  -- ‚ä¢ w i‚ÇÅ ‚àà Set.Ioo 0 1
  refine' ‚ü®hs i‚ÇÅ, _‚ü©
  -- ‚ä¢ w i‚ÇÅ < 1
  rw [hu] at hw
  -- ‚ä¢ w i‚ÇÅ < 1
  rw [Finset.sum_insert, Finset.sum_insert, Finset.sum_singleton] at hw
  ¬∑ by_contra hle
    -- ‚ä¢ False
    rw [not_lt] at hle
    -- ‚ä¢ False
    exact (hle.trans_lt (lt_add_of_pos_right _ (Left.add_pos (hs i‚ÇÇ) (hs i‚ÇÉ)))).ne' hw
    -- üéâ no goals
  ¬∑ simpa using h‚ÇÇ‚ÇÉ
    -- üéâ no goals
  ¬∑ simpa [not_or] using ‚ü®h‚ÇÅ‚ÇÇ, h‚ÇÅ‚ÇÉ‚ü©
    -- üéâ no goals
#align sbtw_of_sbtw_of_sbtw_of_mem_affine_span_pair sbtw_of_sbtw_of_sbtw_of_mem_affineSpan_pair

end LinearOrderedRing

section LinearOrderedField

variable [LinearOrderedField R] [AddCommGroup V] [Module R V] [AddTorsor V P]

variable {R}

theorem wbtw_iff_left_eq_or_right_mem_image_Ici {x y z : P} :
    Wbtw R x y z ‚Üî x = y ‚à® z ‚àà lineMap x y '' Set.Ici (1 : R) := by
  refine' ‚ü®fun h => _, fun h => _‚ü©
  -- ‚ä¢ x = y ‚à® z ‚àà ‚Üë(lineMap x y) '' Set.Ici 1
  ¬∑ rcases h with ‚ü®r, ‚ü®hr0, hr1‚ü©, rfl‚ü©
    -- ‚ä¢ x = ‚Üë(lineMap x z) r ‚à® z ‚àà ‚Üë(lineMap x (‚Üë(lineMap x z) r)) '' Set.Ici 1
    rcases hr0.lt_or_eq with (hr0' | rfl)
    -- ‚ä¢ x = ‚Üë(lineMap x z) r ‚à® z ‚àà ‚Üë(lineMap x (‚Üë(lineMap x z) r)) '' Set.Ici 1
    ¬∑ rw [Set.mem_image]
      -- ‚ä¢ x = ‚Üë(lineMap x z) r ‚à® ‚àÉ x_1, x_1 ‚àà Set.Ici 1 ‚àß ‚Üë(lineMap x (‚Üë(lineMap x z)  ‚Ä¶
      refine' Or.inr ‚ü®r‚Åª¬π, one_le_inv hr0' hr1, _‚ü©
      -- ‚ä¢ ‚Üë(lineMap x (‚Üë(lineMap x z) r)) r‚Åª¬π = z
      simp only [lineMap_apply, smul_smul, vadd_vsub]
      -- ‚ä¢ (r‚Åª¬π * r) ‚Ä¢ (z -·µ• x) +·µ• x = z
      rw [inv_mul_cancel hr0'.ne', one_smul, vsub_vadd]
      -- üéâ no goals
    ¬∑ simp
      -- üéâ no goals
  ¬∑ rcases h with (rfl | ‚ü®r, ‚ü®hr, rfl‚ü©‚ü©)
    -- ‚ä¢ Wbtw R x x z
    ¬∑ exact wbtw_self_left _ _ _
      -- üéâ no goals
    ¬∑ rw [Set.mem_Ici] at hr
      -- ‚ä¢ Wbtw R x y (‚Üë(lineMap x y) r)
      refine' ‚ü®r‚Åª¬π, ‚ü®inv_nonneg.2 (zero_le_one.trans hr), inv_le_one hr‚ü©, _‚ü©
      -- ‚ä¢ ‚Üë(lineMap x (‚Üë(lineMap x y) r)) r‚Åª¬π = y
      simp only [lineMap_apply, smul_smul, vadd_vsub]
      -- ‚ä¢ (r‚Åª¬π * r) ‚Ä¢ (y -·µ• x) +·µ• x = y
      rw [inv_mul_cancel (one_pos.trans_le hr).ne', one_smul, vsub_vadd]
      -- üéâ no goals
#align wbtw_iff_left_eq_or_right_mem_image_Ici wbtw_iff_left_eq_or_right_mem_image_Ici

theorem Wbtw.right_mem_image_Ici_of_left_ne {x y z : P} (h : Wbtw R x y z) (hne : x ‚â† y) :
    z ‚àà lineMap x y '' Set.Ici (1 : R) :=
  (wbtw_iff_left_eq_or_right_mem_image_Ici.1 h).resolve_left hne
#align wbtw.right_mem_image_Ici_of_left_ne Wbtw.right_mem_image_Ici_of_left_ne

theorem Wbtw.right_mem_affineSpan_of_left_ne {x y z : P} (h : Wbtw R x y z) (hne : x ‚â† y) :
    z ‚àà line[R, x, y] := by
  rcases h.right_mem_image_Ici_of_left_ne hne with ‚ü®r, ‚ü®-, rfl‚ü©‚ü©
  -- ‚ä¢ ‚Üë(lineMap x y) r ‚àà affineSpan R {x, y}
  exact lineMap_mem_affineSpan_pair _ _ _
  -- üéâ no goals
#align wbtw.right_mem_affine_span_of_left_ne Wbtw.right_mem_affineSpan_of_left_ne

theorem sbtw_iff_left_ne_and_right_mem_image_Ioi {x y z : P} :
    Sbtw R x y z ‚Üî x ‚â† y ‚àß z ‚àà lineMap x y '' Set.Ioi (1 : R) := by
  refine' ‚ü®fun h => ‚ü®h.left_ne, _‚ü©, fun h => _‚ü©
  -- ‚ä¢ z ‚àà ‚Üë(lineMap x y) '' Set.Ioi 1
  ¬∑ obtain ‚ü®r, ‚ü®hr, rfl‚ü©‚ü© := h.wbtw.right_mem_image_Ici_of_left_ne h.left_ne
    -- ‚ä¢ ‚Üë(lineMap x y) r ‚àà ‚Üë(lineMap x y) '' Set.Ioi 1
    rw [Set.mem_Ici] at hr
    -- ‚ä¢ ‚Üë(lineMap x y) r ‚àà ‚Üë(lineMap x y) '' Set.Ioi 1
    rcases hr.lt_or_eq with (hrlt | rfl)
    -- ‚ä¢ ‚Üë(lineMap x y) r ‚àà ‚Üë(lineMap x y) '' Set.Ioi 1
    ¬∑ exact Set.mem_image_of_mem _ hrlt
      -- üéâ no goals
    ¬∑ exfalso
      -- ‚ä¢ False
      simp at h
      -- üéâ no goals
  ¬∑ rcases h with ‚ü®hne, r, hr, rfl‚ü©
    -- ‚ä¢ Sbtw R x y (‚Üë(lineMap x y) r)
    rw [Set.mem_Ioi] at hr
    -- ‚ä¢ Sbtw R x y (‚Üë(lineMap x y) r)
    refine'
      ‚ü®wbtw_iff_left_eq_or_right_mem_image_Ici.2
          (Or.inr (Set.mem_image_of_mem _ (Set.mem_of_mem_of_subset hr Set.Ioi_subset_Ici_self))),
        hne.symm, _‚ü©
    rw [lineMap_apply, ‚Üê @vsub_ne_zero V, vsub_vadd_eq_vsub_sub]
    -- ‚ä¢ y -·µ• x - r ‚Ä¢ (y -·µ• x) ‚â† 0
    nth_rw 1 [‚Üê one_smul R (y -·µ• x)]
    -- ‚ä¢ 1 ‚Ä¢ (y -·µ• x) - r ‚Ä¢ (y -·µ• x) ‚â† 0
    rw [‚Üê sub_smul, smul_ne_zero_iff, vsub_ne_zero, sub_ne_zero]
    -- ‚ä¢ 1 ‚â† r ‚àß y ‚â† x
    exact ‚ü®hr.ne, hne.symm‚ü©
    -- üéâ no goals
set_option linter.uppercaseLean3 false in
#align sbtw_iff_left_ne_and_right_mem_image_IoI sbtw_iff_left_ne_and_right_mem_image_Ioi

theorem Sbtw.right_mem_image_Ioi {x y z : P} (h : Sbtw R x y z) :
    z ‚àà lineMap x y '' Set.Ioi (1 : R) :=
  (sbtw_iff_left_ne_and_right_mem_image_Ioi.1 h).2
#align sbtw.right_mem_image_Ioi Sbtw.right_mem_image_Ioi

theorem Sbtw.right_mem_affineSpan {x y z : P} (h : Sbtw R x y z) : z ‚àà line[R, x, y] :=
  h.wbtw.right_mem_affineSpan_of_left_ne h.left_ne
#align sbtw.right_mem_affine_span Sbtw.right_mem_affineSpan

theorem wbtw_iff_right_eq_or_left_mem_image_Ici {x y z : P} :
    Wbtw R x y z ‚Üî z = y ‚à® x ‚àà lineMap z y '' Set.Ici (1 : R) := by
  rw [wbtw_comm, wbtw_iff_left_eq_or_right_mem_image_Ici]
  -- üéâ no goals
#align wbtw_iff_right_eq_or_left_mem_image_Ici wbtw_iff_right_eq_or_left_mem_image_Ici

theorem Wbtw.left_mem_image_Ici_of_right_ne {x y z : P} (h : Wbtw R x y z) (hne : z ‚â† y) :
    x ‚àà lineMap z y '' Set.Ici (1 : R) :=
  h.symm.right_mem_image_Ici_of_left_ne hne
#align wbtw.left_mem_image_Ici_of_right_ne Wbtw.left_mem_image_Ici_of_right_ne

theorem Wbtw.left_mem_affineSpan_of_right_ne {x y z : P} (h : Wbtw R x y z) (hne : z ‚â† y) :
    x ‚àà line[R, z, y] :=
  h.symm.right_mem_affineSpan_of_left_ne hne
#align wbtw.left_mem_affine_span_of_right_ne Wbtw.left_mem_affineSpan_of_right_ne

theorem sbtw_iff_right_ne_and_left_mem_image_Ioi {x y z : P} :
    Sbtw R x y z ‚Üî z ‚â† y ‚àß x ‚àà lineMap z y '' Set.Ioi (1 : R) := by
  rw [sbtw_comm, sbtw_iff_left_ne_and_right_mem_image_Ioi]
  -- üéâ no goals
set_option linter.uppercaseLean3 false in
#align sbtw_iff_right_ne_and_left_mem_image_IoI sbtw_iff_right_ne_and_left_mem_image_Ioi

theorem Sbtw.left_mem_image_Ioi {x y z : P} (h : Sbtw R x y z) :
    x ‚àà lineMap z y '' Set.Ioi (1 : R) :=
  h.symm.right_mem_image_Ioi
#align sbtw.left_mem_image_Ioi Sbtw.left_mem_image_Ioi

theorem Sbtw.left_mem_affineSpan {x y z : P} (h : Sbtw R x y z) : x ‚àà line[R, z, y] :=
  h.symm.right_mem_affineSpan
#align sbtw.left_mem_affine_span Sbtw.left_mem_affineSpan

theorem wbtw_smul_vadd_smul_vadd_of_nonneg_of_le (x : P) (v : V) {r‚ÇÅ r‚ÇÇ : R} (hr‚ÇÅ : 0 ‚â§ r‚ÇÅ)
    (hr‚ÇÇ : r‚ÇÅ ‚â§ r‚ÇÇ) : Wbtw R x (r‚ÇÅ ‚Ä¢ v +·µ• x) (r‚ÇÇ ‚Ä¢ v +·µ• x) := by
  refine' ‚ü®r‚ÇÅ / r‚ÇÇ, ‚ü®div_nonneg hr‚ÇÅ (hr‚ÇÅ.trans hr‚ÇÇ), div_le_one_of_le hr‚ÇÇ (hr‚ÇÅ.trans hr‚ÇÇ)‚ü©, _‚ü©
  -- ‚ä¢ ‚Üë(lineMap x (r‚ÇÇ ‚Ä¢ v +·µ• x)) (r‚ÇÅ / r‚ÇÇ) = r‚ÇÅ ‚Ä¢ v +·µ• x
  by_cases h : r‚ÇÅ = 0; ¬∑ simp [h]
  -- ‚ä¢ ‚Üë(lineMap x (r‚ÇÇ ‚Ä¢ v +·µ• x)) (r‚ÇÅ / r‚ÇÇ) = r‚ÇÅ ‚Ä¢ v +·µ• x
                         -- üéâ no goals
  simp [lineMap_apply, smul_smul, ((hr‚ÇÅ.lt_of_ne' h).trans_le hr‚ÇÇ).ne.symm]
  -- üéâ no goals
#align wbtw_smul_vadd_smul_vadd_of_nonneg_of_le wbtw_smul_vadd_smul_vadd_of_nonneg_of_le

theorem wbtw_or_wbtw_smul_vadd_of_nonneg (x : P) (v : V) {r‚ÇÅ r‚ÇÇ : R} (hr‚ÇÅ : 0 ‚â§ r‚ÇÅ) (hr‚ÇÇ : 0 ‚â§ r‚ÇÇ) :
    Wbtw R x (r‚ÇÅ ‚Ä¢ v +·µ• x) (r‚ÇÇ ‚Ä¢ v +·µ• x) ‚à® Wbtw R x (r‚ÇÇ ‚Ä¢ v +·µ• x) (r‚ÇÅ ‚Ä¢ v +·µ• x) := by
  rcases le_total r‚ÇÅ r‚ÇÇ with (h | h)
  -- ‚ä¢ Wbtw R x (r‚ÇÅ ‚Ä¢ v +·µ• x) (r‚ÇÇ ‚Ä¢ v +·µ• x) ‚à® Wbtw R x (r‚ÇÇ ‚Ä¢ v +·µ• x) (r‚ÇÅ ‚Ä¢ v +·µ• x)
  ¬∑ exact Or.inl (wbtw_smul_vadd_smul_vadd_of_nonneg_of_le x v hr‚ÇÅ h)
    -- üéâ no goals
  ¬∑ exact Or.inr (wbtw_smul_vadd_smul_vadd_of_nonneg_of_le x v hr‚ÇÇ h)
    -- üéâ no goals
#align wbtw_or_wbtw_smul_vadd_of_nonneg wbtw_or_wbtw_smul_vadd_of_nonneg

theorem wbtw_smul_vadd_smul_vadd_of_nonpos_of_le (x : P) (v : V) {r‚ÇÅ r‚ÇÇ : R} (hr‚ÇÅ : r‚ÇÅ ‚â§ 0)
    (hr‚ÇÇ : r‚ÇÇ ‚â§ r‚ÇÅ) : Wbtw R x (r‚ÇÅ ‚Ä¢ v +·µ• x) (r‚ÇÇ ‚Ä¢ v +·µ• x) := by
  convert wbtw_smul_vadd_smul_vadd_of_nonneg_of_le x (-v) (Left.nonneg_neg_iff.2 hr‚ÇÅ)
      (neg_le_neg_iff.2 hr‚ÇÇ) using 1 <;>
    rw [neg_smul_neg]
    -- üéâ no goals
    -- üéâ no goals
#align wbtw_smul_vadd_smul_vadd_of_nonpos_of_le wbtw_smul_vadd_smul_vadd_of_nonpos_of_le

theorem wbtw_or_wbtw_smul_vadd_of_nonpos (x : P) (v : V) {r‚ÇÅ r‚ÇÇ : R} (hr‚ÇÅ : r‚ÇÅ ‚â§ 0) (hr‚ÇÇ : r‚ÇÇ ‚â§ 0) :
    Wbtw R x (r‚ÇÅ ‚Ä¢ v +·µ• x) (r‚ÇÇ ‚Ä¢ v +·µ• x) ‚à® Wbtw R x (r‚ÇÇ ‚Ä¢ v +·µ• x) (r‚ÇÅ ‚Ä¢ v +·µ• x) := by
  rcases le_total r‚ÇÅ r‚ÇÇ with (h | h)
  -- ‚ä¢ Wbtw R x (r‚ÇÅ ‚Ä¢ v +·µ• x) (r‚ÇÇ ‚Ä¢ v +·µ• x) ‚à® Wbtw R x (r‚ÇÇ ‚Ä¢ v +·µ• x) (r‚ÇÅ ‚Ä¢ v +·µ• x)
  ¬∑ exact Or.inr (wbtw_smul_vadd_smul_vadd_of_nonpos_of_le x v hr‚ÇÇ h)
    -- üéâ no goals
  ¬∑ exact Or.inl (wbtw_smul_vadd_smul_vadd_of_nonpos_of_le x v hr‚ÇÅ h)
    -- üéâ no goals
#align wbtw_or_wbtw_smul_vadd_of_nonpos wbtw_or_wbtw_smul_vadd_of_nonpos

theorem wbtw_smul_vadd_smul_vadd_of_nonpos_of_nonneg (x : P) (v : V) {r‚ÇÅ r‚ÇÇ : R} (hr‚ÇÅ : r‚ÇÅ ‚â§ 0)
    (hr‚ÇÇ : 0 ‚â§ r‚ÇÇ) : Wbtw R (r‚ÇÅ ‚Ä¢ v +·µ• x) x (r‚ÇÇ ‚Ä¢ v +·µ• x) := by
  convert wbtw_smul_vadd_smul_vadd_of_nonneg_of_le (r‚ÇÅ ‚Ä¢ v +·µ• x) v (Left.nonneg_neg_iff.2 hr‚ÇÅ)
      (neg_le_sub_iff_le_add.2 ((le_add_iff_nonneg_left r‚ÇÅ).2 hr‚ÇÇ)) using 1 <;>
    simp [sub_smul, ‚Üê add_vadd]
    -- üéâ no goals
    -- üéâ no goals
#align wbtw_smul_vadd_smul_vadd_of_nonpos_of_nonneg wbtw_smul_vadd_smul_vadd_of_nonpos_of_nonneg

theorem wbtw_smul_vadd_smul_vadd_of_nonneg_of_nonpos (x : P) (v : V) {r‚ÇÅ r‚ÇÇ : R} (hr‚ÇÅ : 0 ‚â§ r‚ÇÅ)
    (hr‚ÇÇ : r‚ÇÇ ‚â§ 0) : Wbtw R (r‚ÇÅ ‚Ä¢ v +·µ• x) x (r‚ÇÇ ‚Ä¢ v +·µ• x) := by
  rw [wbtw_comm]
  -- ‚ä¢ Wbtw R (r‚ÇÇ ‚Ä¢ v +·µ• x) x (r‚ÇÅ ‚Ä¢ v +·µ• x)
  exact wbtw_smul_vadd_smul_vadd_of_nonpos_of_nonneg x v hr‚ÇÇ hr‚ÇÅ
  -- üéâ no goals
#align wbtw_smul_vadd_smul_vadd_of_nonneg_of_nonpos wbtw_smul_vadd_smul_vadd_of_nonneg_of_nonpos

theorem Wbtw.trans_left_right {w x y z : P} (h‚ÇÅ : Wbtw R w y z) (h‚ÇÇ : Wbtw R w x y) :
    Wbtw R x y z := by
  rcases h‚ÇÅ with ‚ü®t‚ÇÅ, ht‚ÇÅ, rfl‚ü©
  -- ‚ä¢ Wbtw R x (‚Üë(lineMap w z) t‚ÇÅ) z
  rcases h‚ÇÇ with ‚ü®t‚ÇÇ, ht‚ÇÇ, rfl‚ü©
  -- ‚ä¢ Wbtw R (‚Üë(lineMap w (‚Üë(lineMap w z) t‚ÇÅ)) t‚ÇÇ) (‚Üë(lineMap w z) t‚ÇÅ) z
  refine'
    ‚ü®(t‚ÇÅ - t‚ÇÇ * t‚ÇÅ) / (1 - t‚ÇÇ * t‚ÇÅ),
      ‚ü®div_nonneg (sub_nonneg.2 (mul_le_of_le_one_left ht‚ÇÅ.1 ht‚ÇÇ.2))
          (sub_nonneg.2 (mul_le_one ht‚ÇÇ.2 ht‚ÇÅ.1 ht‚ÇÅ.2)),
        div_le_one_of_le (sub_le_sub_right ht‚ÇÅ.2 _) (sub_nonneg.2 (mul_le_one ht‚ÇÇ.2 ht‚ÇÅ.1 ht‚ÇÅ.2))‚ü©,
      _‚ü©
  simp only [lineMap_apply, smul_smul, ‚Üê add_vadd, vsub_vadd_eq_vsub_sub, smul_sub, ‚Üê sub_smul,
    ‚Üê add_smul, vadd_vsub, vadd_right_cancel_iff, div_mul_eq_mul_div, div_sub_div_same]
  nth_rw 1 [‚Üê mul_one (t‚ÇÅ - t‚ÇÇ * t‚ÇÅ)]
  -- ‚ä¢ (((t‚ÇÅ - t‚ÇÇ * t‚ÇÅ) * 1 - (t‚ÇÅ - t‚ÇÇ * t‚ÇÅ) * (t‚ÇÇ * t‚ÇÅ)) / (1 - t‚ÇÇ * t‚ÇÅ) + t‚ÇÇ * t‚ÇÅ ‚Ä¶
  rw [‚Üê mul_sub, mul_div_assoc]
  -- ‚ä¢ ((t‚ÇÅ - t‚ÇÇ * t‚ÇÅ) * ((1 - t‚ÇÇ * t‚ÇÅ) / (1 - t‚ÇÇ * t‚ÇÅ)) + t‚ÇÇ * t‚ÇÅ) ‚Ä¢ (z -·µ• w) = t‚ÇÅ ‚Ä¶
  by_cases h : 1 - t‚ÇÇ * t‚ÇÅ = 0
  -- ‚ä¢ ((t‚ÇÅ - t‚ÇÇ * t‚ÇÅ) * ((1 - t‚ÇÇ * t‚ÇÅ) / (1 - t‚ÇÇ * t‚ÇÅ)) + t‚ÇÇ * t‚ÇÅ) ‚Ä¢ (z -·µ• w) = t‚ÇÅ ‚Ä¶
  ¬∑ rw [sub_eq_zero, eq_comm] at h
    -- ‚ä¢ ((t‚ÇÅ - t‚ÇÇ * t‚ÇÅ) * ((1 - t‚ÇÇ * t‚ÇÅ) / (1 - t‚ÇÇ * t‚ÇÅ)) + t‚ÇÇ * t‚ÇÅ) ‚Ä¢ (z -·µ• w) = t‚ÇÅ ‚Ä¶
    rw [h]
    -- ‚ä¢ ((t‚ÇÅ - 1) * ((1 - 1) / (1 - 1)) + 1) ‚Ä¢ (z -·µ• w) = t‚ÇÅ ‚Ä¢ (z -·µ• w)
    suffices t‚ÇÅ = 1 by simp [this]
    -- ‚ä¢ t‚ÇÅ = 1
    exact
      eq_of_le_of_not_lt ht‚ÇÅ.2 fun ht‚ÇÅlt =>
        (mul_lt_one_of_nonneg_of_lt_one_right ht‚ÇÇ.2 ht‚ÇÅ.1 ht‚ÇÅlt).ne h
  ¬∑ rw [div_self h]
    -- ‚ä¢ ((t‚ÇÅ - t‚ÇÇ * t‚ÇÅ) * 1 + t‚ÇÇ * t‚ÇÅ) ‚Ä¢ (z -·µ• w) = t‚ÇÅ ‚Ä¢ (z -·µ• w)
    ring_nf
    -- üéâ no goals
#align wbtw.trans_left_right Wbtw.trans_left_right

theorem Wbtw.trans_right_left {w x y z : P} (h‚ÇÅ : Wbtw R w x z) (h‚ÇÇ : Wbtw R x y z) :
    Wbtw R w x y := by
  rw [wbtw_comm] at *
  -- ‚ä¢ Wbtw R y x w
  exact h‚ÇÅ.trans_left_right h‚ÇÇ
  -- üéâ no goals
#align wbtw.trans_right_left Wbtw.trans_right_left

theorem Sbtw.trans_left_right {w x y z : P} (h‚ÇÅ : Sbtw R w y z) (h‚ÇÇ : Sbtw R w x y) :
    Sbtw R x y z :=
  ‚ü®h‚ÇÅ.wbtw.trans_left_right h‚ÇÇ.wbtw, h‚ÇÇ.right_ne, h‚ÇÅ.ne_right‚ü©
#align sbtw.trans_left_right Sbtw.trans_left_right

theorem Sbtw.trans_right_left {w x y z : P} (h‚ÇÅ : Sbtw R w x z) (h‚ÇÇ : Sbtw R x y z) :
    Sbtw R w x y :=
  ‚ü®h‚ÇÅ.wbtw.trans_right_left h‚ÇÇ.wbtw, h‚ÇÅ.ne_left, h‚ÇÇ.left_ne‚ü©
#align sbtw.trans_right_left Sbtw.trans_right_left

theorem Wbtw.collinear {x y z : P} (h : Wbtw R x y z) : Collinear R ({x, y, z} : Set P) := by
  rw [collinear_iff_exists_forall_eq_smul_vadd]
  -- ‚ä¢ ‚àÉ p‚ÇÄ v, ‚àÄ (p : P), p ‚àà {x, y, z} ‚Üí ‚àÉ r, p = r ‚Ä¢ v +·µ• p‚ÇÄ
  refine' ‚ü®x, z -·µ• x, _‚ü©
  -- ‚ä¢ ‚àÄ (p : P), p ‚àà {x, y, z} ‚Üí ‚àÉ r, p = r ‚Ä¢ (z -·µ• x) +·µ• x
  intro p hp
  -- ‚ä¢ ‚àÉ r, p = r ‚Ä¢ (z -·µ• x) +·µ• x
  simp_rw [Set.mem_insert_iff, Set.mem_singleton_iff] at hp
  -- ‚ä¢ ‚àÉ r, p = r ‚Ä¢ (z -·µ• x) +·µ• x
  rcases hp with (rfl | rfl | rfl)
  ¬∑ refine' ‚ü®0, _‚ü©
    -- ‚ä¢ p = 0 ‚Ä¢ (z -·µ• p) +·µ• p
    simp
    -- üéâ no goals
  ¬∑ rcases h with ‚ü®t, -, rfl‚ü©
    -- ‚ä¢ ‚àÉ r, ‚Üë(lineMap x z) t = r ‚Ä¢ (z -·µ• x) +·µ• x
    exact ‚ü®t, rfl‚ü©
    -- üéâ no goals
  ¬∑ refine' ‚ü®1, _‚ü©
    -- ‚ä¢ p = 1 ‚Ä¢ (p -·µ• x) +·µ• x
    simp
    -- üéâ no goals
#align wbtw.collinear Wbtw.collinear

theorem Collinear.wbtw_or_wbtw_or_wbtw {x y z : P} (h : Collinear R ({x, y, z} : Set P)) :
    Wbtw R x y z ‚à® Wbtw R y z x ‚à® Wbtw R z x y := by
  rw [collinear_iff_of_mem (Set.mem_insert _ _)] at h
  -- ‚ä¢ Wbtw R x y z ‚à® Wbtw R y z x ‚à® Wbtw R z x y
  rcases h with ‚ü®v, h‚ü©
  -- ‚ä¢ Wbtw R x y z ‚à® Wbtw R y z x ‚à® Wbtw R z x y
  simp_rw [Set.mem_insert_iff, Set.mem_singleton_iff] at h
  -- ‚ä¢ Wbtw R x y z ‚à® Wbtw R y z x ‚à® Wbtw R z x y
  have hy := h y (Or.inr (Or.inl rfl))
  -- ‚ä¢ Wbtw R x y z ‚à® Wbtw R y z x ‚à® Wbtw R z x y
  have hz := h z (Or.inr (Or.inr rfl))
  -- ‚ä¢ Wbtw R x y z ‚à® Wbtw R y z x ‚à® Wbtw R z x y
  rcases hy with ‚ü®ty, rfl‚ü©
  -- ‚ä¢ Wbtw R x (ty ‚Ä¢ v +·µ• x) z ‚à® Wbtw R (ty ‚Ä¢ v +·µ• x) z x ‚à® Wbtw R z x (ty ‚Ä¢ v +·µ• x)
  rcases hz with ‚ü®tz, rfl‚ü©
  -- ‚ä¢ Wbtw R x (ty ‚Ä¢ v +·µ• x) (tz ‚Ä¢ v +·µ• x) ‚à® Wbtw R (ty ‚Ä¢ v +·µ• x) (tz ‚Ä¢ v +·µ• x) x  ‚Ä¶
  rcases lt_trichotomy ty 0 with (hy0 | rfl | hy0)
  ¬∑ rcases lt_trichotomy tz 0 with (hz0 | rfl | hz0)
    ¬∑ rw [wbtw_comm (z := x)]
      -- ‚ä¢ Wbtw R x (ty ‚Ä¢ v +·µ• x) (tz ‚Ä¢ v +·µ• x) ‚à® Wbtw R x (tz ‚Ä¢ v +·µ• x) (ty ‚Ä¢ v +·µ• x)  ‚Ä¶
      rw [‚Üê or_assoc]
      -- ‚ä¢ (Wbtw R x (ty ‚Ä¢ v +·µ• x) (tz ‚Ä¢ v +·µ• x) ‚à® Wbtw R x (tz ‚Ä¢ v +·µ• x) (ty ‚Ä¢ v +·µ• x) ‚Ä¶
      exact Or.inl (wbtw_or_wbtw_smul_vadd_of_nonpos _ _ hy0.le hz0.le)
      -- üéâ no goals
    ¬∑ simp
      -- üéâ no goals
    ¬∑ exact Or.inr (Or.inr (wbtw_smul_vadd_smul_vadd_of_nonneg_of_nonpos _ _ hz0.le hy0.le))
      -- üéâ no goals
  ¬∑ simp
    -- üéâ no goals
  ¬∑ rcases lt_trichotomy tz 0 with (hz0 | rfl | hz0)
    ¬∑ refine' Or.inr (Or.inr (wbtw_smul_vadd_smul_vadd_of_nonpos_of_nonneg _ _ hz0.le hy0.le))
      -- üéâ no goals
    ¬∑ simp
      -- üéâ no goals
    ¬∑ rw [wbtw_comm (z := x)]
      -- ‚ä¢ Wbtw R x (ty ‚Ä¢ v +·µ• x) (tz ‚Ä¢ v +·µ• x) ‚à® Wbtw R x (tz ‚Ä¢ v +·µ• x) (ty ‚Ä¢ v +·µ• x)  ‚Ä¶
      rw [‚Üê or_assoc]
      -- ‚ä¢ (Wbtw R x (ty ‚Ä¢ v +·µ• x) (tz ‚Ä¢ v +·µ• x) ‚à® Wbtw R x (tz ‚Ä¢ v +·µ• x) (ty ‚Ä¢ v +·µ• x) ‚Ä¶
      exact Or.inl (wbtw_or_wbtw_smul_vadd_of_nonneg _ _ hy0.le hz0.le)
      -- üéâ no goals
#align collinear.wbtw_or_wbtw_or_wbtw Collinear.wbtw_or_wbtw_or_wbtw

theorem wbtw_iff_sameRay_vsub {x y z : P} : Wbtw R x y z ‚Üî SameRay R (y -·µ• x) (z -·µ• y) := by
  refine' ‚ü®Wbtw.sameRay_vsub, fun h => _‚ü©
  -- ‚ä¢ Wbtw R x y z
  rcases h with (h | h | ‚ü®r‚ÇÅ, r‚ÇÇ, hr‚ÇÅ, hr‚ÇÇ, h‚ü©)
  ¬∑ rw [vsub_eq_zero_iff_eq] at h
    -- ‚ä¢ Wbtw R x y z
    simp [h]
    -- üéâ no goals
  ¬∑ rw [vsub_eq_zero_iff_eq] at h
    -- ‚ä¢ Wbtw R x y z
    simp [h]
    -- üéâ no goals
  ¬∑ refine'
      ‚ü®r‚ÇÇ / (r‚ÇÅ + r‚ÇÇ),
        ‚ü®div_nonneg hr‚ÇÇ.le (add_nonneg hr‚ÇÅ.le hr‚ÇÇ.le),
          div_le_one_of_le (le_add_of_nonneg_left hr‚ÇÅ.le) (add_nonneg hr‚ÇÅ.le hr‚ÇÇ.le)‚ü©,
        _‚ü©
    have h' : z = r‚ÇÇ‚Åª¬π ‚Ä¢ r‚ÇÅ ‚Ä¢ (y -·µ• x) +·µ• y := by simp [h, hr‚ÇÇ.ne']
    -- ‚ä¢ ‚Üë(lineMap x z) (r‚ÇÇ / (r‚ÇÅ + r‚ÇÇ)) = y
    rw [eq_comm]
    -- ‚ä¢ y = ‚Üë(lineMap x z) (r‚ÇÇ / (r‚ÇÅ + r‚ÇÇ))
    simp only [lineMap_apply, h', vadd_vsub_assoc, smul_smul, ‚Üê add_smul, eq_vadd_iff_vsub_eq,
      smul_add]
    convert (one_smul R (y -·µ• x)).symm
    -- ‚ä¢ r‚ÇÇ / (r‚ÇÅ + r‚ÇÇ) * (r‚ÇÇ‚Åª¬π * r‚ÇÅ) + r‚ÇÇ / (r‚ÇÅ + r‚ÇÇ) = 1
    field_simp [(add_pos hr‚ÇÅ hr‚ÇÇ).ne', hr‚ÇÇ.ne']
    -- ‚ä¢ r‚ÇÇ * r‚ÇÅ * (r‚ÇÅ + r‚ÇÇ) + r‚ÇÇ * ((r‚ÇÅ + r‚ÇÇ) * r‚ÇÇ) = (r‚ÇÅ + r‚ÇÇ) * r‚ÇÇ * (r‚ÇÅ + r‚ÇÇ)
    ring
    -- üéâ no goals
#align wbtw_iff_same_ray_vsub wbtw_iff_sameRay_vsub

variable (R)

theorem wbtw_pointReflection (x y : P) : Wbtw R y x (pointReflection R x y) := by
  refine' ‚ü®2‚Åª¬π, ‚ü®by norm_num, by norm_num‚ü©, _‚ü©
  -- ‚ä¢ ‚Üë(lineMap y (‚Üë(pointReflection R x) y)) 2‚Åª¬π = x
  rw [lineMap_apply, pointReflection_apply, vadd_vsub_assoc, ‚Üê two_smul R (x -·µ• y)]
  -- ‚ä¢ 2‚Åª¬π ‚Ä¢ 2 ‚Ä¢ (x -·µ• y) +·µ• y = x
  simp
  -- üéâ no goals
#align wbtw_point_reflection wbtw_pointReflection

theorem sbtw_pointReflection_of_ne {x y : P} (h : x ‚â† y) : Sbtw R y x (pointReflection R x y) := by
  refine' ‚ü®wbtw_pointReflection _ _ _, h, _‚ü©
  -- ‚ä¢ x ‚â† ‚Üë(pointReflection R x) y
  nth_rw 1 [‚Üê pointReflection_self R x]
  -- ‚ä¢ ‚Üë(pointReflection R x) x ‚â† ‚Üë(pointReflection R x) y
  exact (pointReflection_involutive R x).injective.ne h
  -- üéâ no goals
#align sbtw_point_reflection_of_ne sbtw_pointReflection_of_ne

theorem wbtw_midpoint (x y : P) : Wbtw R x (midpoint R x y) y := by
  convert wbtw_pointReflection R (midpoint R x y) x
  -- ‚ä¢ y = ‚Üë(pointReflection R (midpoint R x y)) x
  rw [pointReflection_midpoint_left]
  -- üéâ no goals
#align wbtw_midpoint wbtw_midpoint

theorem sbtw_midpoint_of_ne {x y : P} (h : x ‚â† y) : Sbtw R x (midpoint R x y) y := by
  have h : midpoint R x y ‚â† x := by simp [h]
  -- ‚ä¢ Sbtw R x (midpoint R x y) y
  convert sbtw_pointReflection_of_ne R h
  -- ‚ä¢ y = ‚Üë(pointReflection R (midpoint R x y)) x
  rw [pointReflection_midpoint_left]
  -- üéâ no goals
#align sbtw_midpoint_of_ne sbtw_midpoint_of_ne

end LinearOrderedField
