/-
Copyright (c) 2020 Yury Kudriashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudriashov, Ya├Фl Dillies
-/
import Mathlib.Analysis.Convex.Basic
import Mathlib.Order.Closure

#align_import analysis.convex.hull from "leanprover-community/mathlib"@"92bd7b1ffeb306a89f450bee126ddd8a284c259d"

/-!
# Convex hull

This file defines the convex hull of a set `s` in a module. `convexHull ­ЮЋю s` is the smallest convex
set containing `s`. In order theory speak, this is a closure operator.

## Implementation notes

`convexHull` is defined as a closure operator. This gives access to the `ClosureOperator` API
while the impact on writing code is minimal as `convexHull ­ЮЋю s` is automatically elaborated as
`(convexHull ­ЮЋю) s`.
-/


open Set

open Pointwise

variable {­ЮЋю E F : Type*}

section convexHull

section OrderedSemiring

variable [OrderedSemiring ­ЮЋю]

section AddCommMonoid

variable (­ЮЋю)
variable [AddCommMonoid E] [AddCommMonoid F] [Module ­ЮЋю E] [Module ­ЮЋю F]

/-- The convex hull of a set `s` is the minimal convex set that includes `s`. -/
def convexHull : ClosureOperator (Set E) :=
  ClosureOperator.mkРѓЃ (fun s => РІѓ (t : Set E) (_ : s Ріє t) (_ : Convex ­ЮЋю t), t) (Convex ­ЮЋю)
    (fun _ =>
      Set.subset_iInter fun _ => Set.subset_iInter fun hst => Set.subset_iInter fun _ => hst)
    (fun _ => convex_iInter fun _ => convex_iInter fun _ => convex_iInter id) fun _ t hst ht =>
    Set.iInter_subset_of_subset t <| Set.iInter_subset_of_subset hst <| Set.iInter_subset _ ht

variable (s : Set E)

theorem subset_convexHull : s Ріє convexHull ­ЮЋю s :=
  (convexHull ­ЮЋю).le_closure s

theorem convex_convexHull : Convex ­ЮЋю (convexHull ­ЮЋю s) :=
  ClosureOperator.closure_mem_mkРѓЃ s

theorem convexHull_eq_iInter : convexHull ­ЮЋю s =
    РІѓ (t : Set E) (_ : s Ріє t) (_ : Convex ­ЮЋю t), t :=
  rfl

variable {­ЮЋю s} {t : Set E} {x y : E}

theorem mem_convexHull_iff : x Рѕѕ convexHull ­ЮЋю s Рєћ Рѕђ t, s Ріє t Рєњ Convex ­ЮЋю t Рєњ x Рѕѕ t := by
  simp_rw [convexHull_eq_iInter, mem_iInter]

theorem convexHull_min (hst : s Ріє t) (ht : Convex ­ЮЋю t) : convexHull ­ЮЋю s Ріє t :=
  ClosureOperator.closure_le_mkРѓЃ_iff (show s РЅц t from hst) ht

theorem Convex.convexHull_subset_iff (ht : Convex ­ЮЋю t) : convexHull ­ЮЋю s Ріє t Рєћ s Ріє t :=
  РЪе(subset_convexHull _ _).trans, fun h => convexHull_min h htРЪЕ

@[mono]
theorem convexHull_mono (hst : s Ріє t) : convexHull ­ЮЋю s Ріє convexHull ­ЮЋю t :=
  (convexHull ­ЮЋю).monotone hst

theorem Convex.convexHull_eq : Convex ­ЮЋю s Рєњ convexHull ­ЮЋю s = s := ClosureOperator.mem_mkРѓЃ_closed.2

@[simp]
theorem convexHull_univ : convexHull ­ЮЋю (univ : Set E) = univ :=
  ClosureOperator.closure_top (convexHull ­ЮЋю)

@[simp]
theorem convexHull_empty : convexHull ­ЮЋю (РѕЁ : Set E) = РѕЁ :=
  convex_empty.convexHull_eq

@[simp]
theorem convexHull_empty_iff : convexHull ­ЮЋю s = РѕЁ Рєћ s = РѕЁ := by
  constructor
  ┬и intro h
    rw [Рєљ Set.subset_empty_iff, Рєљ h]
    exact subset_convexHull ­ЮЋю _
  ┬и rintro rfl
    exact convexHull_empty

@[simp]
theorem convexHull_nonempty_iff : (convexHull ­ЮЋю s).Nonempty Рєћ s.Nonempty := by
  rw [nonempty_iff_ne_empty, nonempty_iff_ne_empty, Ne.def, Ne.def]
  exact not_congr convexHull_empty_iff

protected alias РЪе_, Set.Nonempty.convexHullРЪЕ := convexHull_nonempty_iff

theorem segment_subset_convexHull (hx : x Рѕѕ s) (hy : y Рѕѕ s) : segment ­ЮЋю x y Ріє convexHull ­ЮЋю s :=
  (convex_convexHull _ _).segment_subset (subset_convexHull _ _ hx) (subset_convexHull _ _ hy)

@[simp]
theorem convexHull_singleton (x : E) : convexHull ­ЮЋю ({x} : Set E) = {x} :=
  (convex_singleton x).convexHull_eq

@[simp]
theorem convexHull_zero : convexHull ­ЮЋю (0 : Set E) = 0 :=
  convexHull_singleton 0

@[simp]
theorem convexHull_pair (x y : E) : convexHull ­ЮЋю {x, y} = segment ­ЮЋю x y := by
  refine (convexHull_min ?_ <| convex_segment _ _).antisymm
    (segment_subset_convexHull (mem_insert _ _) <| subset_insert _ _ <| mem_singleton _)
  rw [insert_subset_iff, singleton_subset_iff]
  exact РЪеleft_mem_segment _ _ _, right_mem_segment _ _ _РЪЕ

theorem convexHull_convexHull_union_left (s t : Set E) :
    convexHull ­ЮЋю (convexHull ­ЮЋю s Рѕф t) = convexHull ­ЮЋю (s Рѕф t) :=
  ClosureOperator.closure_sup_closure_left _ _ _

theorem convexHull_convexHull_union_right (s t : Set E) :
    convexHull ­ЮЋю (s Рѕф convexHull ­ЮЋю t) = convexHull ­ЮЋю (s Рѕф t) :=
  ClosureOperator.closure_sup_closure_right _ _ _

theorem Convex.convex_remove_iff_not_mem_convexHull_remove {s : Set E} (hs : Convex ­ЮЋю s) (x : E) :
    Convex ­ЮЋю (s \ {x}) Рєћ x РѕЅ convexHull ­ЮЋю (s \ {x}) := by
  constructor
  ┬и rintro hsx hx
    rw [hsx.convexHull_eq] at hx
    exact hx.2 (mem_singleton _)
  rintro hx
  suffices h : s \ {x} = convexHull ­ЮЋю (s \ {x})
  ┬и rw [h]
    exact convex_convexHull ­ЮЋю _
  exact
    Subset.antisymm (subset_convexHull ­ЮЋю _) fun y hy =>
      РЪеconvexHull_min (diff_subset _ _) hs hy, by
        rintro (rfl : y = x)
        exact hx hyРЪЕ

theorem IsLinearMap.convexHull_image {f : E Рєњ F} (hf : IsLinearMap ­ЮЋю f) (s : Set E) :
    convexHull ­ЮЋю (f '' s) = f '' convexHull ­ЮЋю s :=
  Set.Subset.antisymm
    (convexHull_min (image_subset _ (subset_convexHull ­ЮЋю s)) <|
      (convex_convexHull ­ЮЋю s).is_linear_image hf)
    (image_subset_iff.2 <|
      convexHull_min (image_subset_iff.1 <| subset_convexHull ­ЮЋю _)
        ((convex_convexHull ­ЮЋю _).is_linear_preimage hf))

theorem LinearMap.convexHull_image (f : E РєњРѓЌ[­ЮЋю] F) (s : Set E) :
    convexHull ­ЮЋю (f '' s) = f '' convexHull ­ЮЋю s :=
  f.isLinear.convexHull_image s

end AddCommMonoid

end OrderedSemiring

section OrderedCommSemiring

variable [OrderedCommSemiring ­ЮЋю] [AddCommMonoid E] [Module ­ЮЋю E]

theorem convexHull_smul (a : ­ЮЋю) (s : Set E) : convexHull ­ЮЋю (a Рђб s) = a Рђб convexHull ­ЮЋю s :=
  (LinearMap.lsmul _ _ a).convexHull_image _

end OrderedCommSemiring

section OrderedRing

variable [OrderedRing ­ЮЋю]

section AddCommGroup

variable [AddCommGroup E] [AddCommGroup F] [Module ­ЮЋю E] [Module ­ЮЋю F] (s : Set E)

theorem AffineMap.image_convexHull (f : E РєњрхЃ[­ЮЋю] F) :
    f '' convexHull ­ЮЋю s = convexHull ­ЮЋю (f '' s) := by
  apply Set.Subset.antisymm
  ┬и rw [Set.image_subset_iff]
    refine' convexHull_min _ ((convex_convexHull ­ЮЋю (f '' s)).affine_preimage f)
    rw [Рєљ Set.image_subset_iff]
    exact subset_convexHull ­ЮЋю (f '' s)
  ┬и exact convexHull_min (Set.image_subset _ (subset_convexHull ­ЮЋю s))
      ((convex_convexHull ­ЮЋю s).affine_image f)

theorem convexHull_subset_affineSpan : convexHull ­ЮЋю s Ріє (affineSpan ­ЮЋю s : Set E) :=
  convexHull_min (subset_affineSpan ­ЮЋю s) (affineSpan ­ЮЋю s).convex

@[simp]
theorem affineSpan_convexHull : affineSpan ­ЮЋю (convexHull ­ЮЋю s) = affineSpan ­ЮЋю s := by
  refine' le_antisymm _ (affineSpan_mono ­ЮЋю (subset_convexHull ­ЮЋю s))
  rw [affineSpan_le]
  exact convexHull_subset_affineSpan s

theorem convexHull_neg (s : Set E) : convexHull ­ЮЋю (-s) = -convexHull ­ЮЋю s := by
  simp_rw [Рєљ image_neg]
  exact (AffineMap.image_convexHull _ <| -1).symm

end AddCommGroup

end OrderedRing

end convexHull
