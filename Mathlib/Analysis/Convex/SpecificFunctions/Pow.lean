/-
Copyright (c) 2023 Fr√©d√©ric Dupuis. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Fr√©d√©ric Dupuis
-/

import Mathlib.Analysis.Convex.SpecificFunctions.Basic
import Mathlib.Analysis.SpecialFunctions.Pow.NNReal

/-!
# Convexity properties of `rpow`

We prove basic convexity properties of the `rpow` function. The proofs are elementary and do not
require calculus, and as such this file has only moderate dependencies.

## Main declarations

* `NNReal.strictConcaveOn_rpow`, `Real.strictConcaveOn_rpow`: strict concavity of
  `fun x ‚Ü¶ x ^ p` for p ‚àà (0,1)
* `NNReal.concaveOn_rpow`, `Real.concaveOn_rpow`: concavity of `fun x ‚Ü¶ x ^ p` for p ‚àà [0,1]

Note that convexity for `p > 1` can be found in `Analysis.Convex.SpecificFunctions.Basic`, which
requires slightly less imports.

## TODO

* Prove convexity for negative powers.
-/

local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y) -- Porting note: See issue lean4#2220

open Set

namespace NNReal

lemma strictConcaveOn_rpow {p : ‚Ñù} (hp‚ÇÄ : 0 < p) (hp‚ÇÅ : p < 1) :
    StrictConcaveOn ‚Ñù‚â•0 univ fun x : ‚Ñù‚â•0 ‚Ü¶ x ^ p := by
  have hp‚ÇÄ' : 0 < 1 / p := by positivity
  -- ‚ä¢ StrictConcaveOn ‚Ñù‚â•0 univ fun x => x ^ p
  have hp‚ÇÅ' : 1 < 1 / p := by rw [one_lt_div hp‚ÇÄ]; exact hp‚ÇÅ
  -- ‚ä¢ StrictConcaveOn ‚Ñù‚â•0 univ fun x => x ^ p
  let f := NNReal.orderIsoRpow (1 / p) hp‚ÇÄ'
  -- ‚ä¢ StrictConcaveOn ‚Ñù‚â•0 univ fun x => x ^ p
  have h‚ÇÅ : StrictConvexOn ‚Ñù‚â•0 univ f := by
    refine ‚ü®convex_univ, fun x _ y _ hxy a b ha hb hab => ?_‚ü©
    exact (strictConvexOn_rpow hp‚ÇÅ').2 (by positivity : 0 ‚â§ x) (by positivity : 0 ‚â§ y)
      (by simp [hxy]) ha hb (by simp; norm_cast)
  have h‚ÇÇ : ‚àÄ x, f.symm x = x ^ p := by simp [NNReal.orderIsoRpow_symm_eq]
  -- ‚ä¢ StrictConcaveOn ‚Ñù‚â•0 univ fun x => x ^ p
  refine ‚ü®convex_univ, fun x _ y _ hxy a b ha hb hab => ?_‚ü©
  -- ‚ä¢ a ‚Ä¢ (fun x => x ^ p) x + b ‚Ä¢ (fun x => x ^ p) y < (fun x => x ^ p) (a ‚Ä¢ x +  ‚Ä¶
  simp only [‚Üêh‚ÇÇ]
  -- ‚ä¢ a ‚Ä¢ ‚Üë(OrderIso.symm (orderIsoRpow (1 / p) hp‚ÇÄ')) x + b ‚Ä¢ ‚Üë(OrderIso.symm (or ‚Ä¶
  exact (f.strictConcaveOn_symm h‚ÇÅ).2 (Set.mem_univ x) (Set.mem_univ y) hxy ha hb hab
  -- üéâ no goals

lemma concaveOn_rpow {p : ‚Ñù} (hp‚ÇÄ : 0 ‚â§ p) (hp‚ÇÅ : p ‚â§ 1) :
    ConcaveOn ‚Ñù‚â•0 univ fun x : ‚Ñù‚â•0 ‚Ü¶ x ^ p := by
  by_cases hp : p = 0
  -- ‚ä¢ ConcaveOn ‚Ñù‚â•0 univ fun x => x ^ p
  case pos => exact ‚ü®convex_univ, fun _ _ _ _ _ _ _ _ hab => by simp [hp, hab]‚ü©
  -- ‚ä¢ ConcaveOn ‚Ñù‚â•0 univ fun x => x ^ p
  -- üéâ no goals
  case neg =>
    push_neg at hp
    by_cases hp' : p = 1
    case pos => exact ‚ü®convex_univ, by simp [hp']‚ü©
    case neg =>
      push_neg at hp'
      exact (strictConcaveOn_rpow (by positivity) (lt_of_le_of_ne hp‚ÇÅ hp')).concaveOn

lemma strictConcaveOn_sqrt : StrictConcaveOn ‚Ñù‚â•0 univ NNReal.sqrt := by
  have : NNReal.sqrt = fun (x:‚Ñù‚â•0) ‚Ü¶ x ^ (1 / (2:‚Ñù)) := by
    ext x; exact_mod_cast NNReal.sqrt_eq_rpow x
  rw [this]
  -- ‚ä¢ StrictConcaveOn ‚Ñù‚â•0 univ fun x => x ^ (1 / 2)
  exact strictConcaveOn_rpow (by positivity) (by linarith)
  -- üéâ no goals

end NNReal

namespace Real

open NNReal

lemma strictConcaveOn_rpow {p : ‚Ñù} (hp‚ÇÄ : 0 < p) (hp‚ÇÅ : p < 1) :
    StrictConcaveOn ‚Ñù (Set.Ici 0) fun x : ‚Ñù ‚Ü¶ x ^ p := by
  refine ‚ü®convex_Ici _, fun x hx y hy hxy a b ha hb hab => ?_‚ü©
  -- ‚ä¢ a ‚Ä¢ (fun x => x ^ p) x + b ‚Ä¢ (fun x => x ^ p) y < (fun x => x ^ p) (a ‚Ä¢ x +  ‚Ä¶
  let x' : ‚Ñù‚â•0 := ‚ü®x, hx‚ü©
  -- ‚ä¢ a ‚Ä¢ (fun x => x ^ p) x + b ‚Ä¢ (fun x => x ^ p) y < (fun x => x ^ p) (a ‚Ä¢ x +  ‚Ä¶
  let y' : ‚Ñù‚â•0 := ‚ü®y, hy‚ü©
  -- ‚ä¢ a ‚Ä¢ (fun x => x ^ p) x + b ‚Ä¢ (fun x => x ^ p) y < (fun x => x ^ p) (a ‚Ä¢ x +  ‚Ä¶
  let a' : ‚Ñù‚â•0 := ‚ü®a, by positivity‚ü©
  -- ‚ä¢ a ‚Ä¢ (fun x => x ^ p) x + b ‚Ä¢ (fun x => x ^ p) y < (fun x => x ^ p) (a ‚Ä¢ x +  ‚Ä¶
  let b' : ‚Ñù‚â•0 := ‚ü®b, by positivity‚ü©
  -- ‚ä¢ a ‚Ä¢ (fun x => x ^ p) x + b ‚Ä¢ (fun x => x ^ p) y < (fun x => x ^ p) (a ‚Ä¢ x +  ‚Ä¶
  have hx' : (fun z => z ^ p) x = (fun z => z ^ p) x' := rfl
  -- ‚ä¢ a ‚Ä¢ (fun x => x ^ p) x + b ‚Ä¢ (fun x => x ^ p) y < (fun x => x ^ p) (a ‚Ä¢ x +  ‚Ä¶
  have hy' : (fun z => z ^ p) y = (fun z => z ^ p) y' := rfl
  -- ‚ä¢ a ‚Ä¢ (fun x => x ^ p) x + b ‚Ä¢ (fun x => x ^ p) y < (fun x => x ^ p) (a ‚Ä¢ x +  ‚Ä¶
  have hxy' : x' ‚â† y' := Subtype.ne_of_val_ne hxy
  -- ‚ä¢ a ‚Ä¢ (fun x => x ^ p) x + b ‚Ä¢ (fun x => x ^ p) y < (fun x => x ^ p) (a ‚Ä¢ x +  ‚Ä¶
  have hab' : a' + b' = 1 := by ext; simp [hab]
  -- ‚ä¢ a ‚Ä¢ (fun x => x ^ p) x + b ‚Ä¢ (fun x => x ^ p) y < (fun x => x ^ p) (a ‚Ä¢ x +  ‚Ä¶
  rw [hx', hy']
  -- ‚ä¢ a ‚Ä¢ ‚Üë((fun z => z ^ p) x') + b ‚Ä¢ ‚Üë((fun z => z ^ p) y') < (fun x => x ^ p) ( ‚Ä¶
  exact (NNReal.strictConcaveOn_rpow hp‚ÇÄ hp‚ÇÅ).2 (Set.mem_univ x') (Set.mem_univ y')
    hxy' (by exact_mod_cast ha) (by exact_mod_cast hb) hab'

lemma concaveOn_rpow {p : ‚Ñù} (hp‚ÇÄ : 0 ‚â§ p) (hp‚ÇÅ : p ‚â§ 1) :
    ConcaveOn ‚Ñù (Set.Ici 0) fun x : ‚Ñù ‚Ü¶ x ^ p := by
  by_cases hp : p = 0
  -- ‚ä¢ ConcaveOn ‚Ñù (Ici 0) fun x => x ^ p
  case pos => exact ‚ü®convex_Ici 0, fun _ _ _ _ _ _ _ _ hab => by simp [hp, hab]‚ü©
  -- ‚ä¢ ConcaveOn ‚Ñù (Ici 0) fun x => x ^ p
  -- üéâ no goals
  case neg =>
    push_neg at hp
    by_cases hp' : p = 1
    case pos => exact ‚ü®convex_Ici 0, by simp [hp']‚ü©
    case neg =>
      push_neg at hp'
      exact (strictConcaveOn_rpow (by positivity) (lt_of_le_of_ne hp‚ÇÅ hp')).concaveOn

lemma strictConcaveOn_sqrt : StrictConcaveOn ‚Ñù (Set.Ici 0) Real.sqrt := by
  have : Real.sqrt = fun (x:‚Ñù) ‚Ü¶ x ^ (1 / (2:‚Ñù)) := by
    ext x; exact Real.sqrt_eq_rpow x
  rw [this]
  -- ‚ä¢ StrictConcaveOn ‚Ñù (Ici 0) fun x => x ^ (1 / 2)
  exact strictConcaveOn_rpow (by positivity) (by linarith)
  -- üéâ no goals

end Real
