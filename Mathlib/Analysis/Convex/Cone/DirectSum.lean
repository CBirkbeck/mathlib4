import Mathlib.Analysis.Convex.Cone.Basic
import Mathlib.Algebra.Order.Nonneg.Ring

variable [OrderedSemiring ùïú] [AddCommMonoid E] [Module ùïú E]

variable {S : ConvexCone ùïú E} [hS : Fact S.Pointed]

@[simp]

theorem mem_zero : (0 ‚àà S) := hS.elim

instance : Zero S := ‚ü®‚ü®0, hS.elim‚ü©‚ü©

instance : SMul ‚Ñï S := ‚ü®fun n => match n with
    | 0 => fun x => ‚ü®0, by simpa [ConvexCone.Pointed] using hS.elim‚ü©
    | n + 1 => fun x => by {
        apply Subtype.mk
        exact S.smul_mem (show 0 < (n + 1 : ùïú) from sorry) x.2 } ‚ü©

@[simp]
theorem coe_nsmul (x : S) (n : ‚Ñï) : (n ‚Ä¢ x : E) = n ‚Ä¢ (x : E) :=
  match n with
  | 0 => by simp [zero_smul] ; rfl
  | n + 1 => by sorry



instance Pointed.toAddCommMonoid : AddCommMonoid S := by
  apply  Function.Injective.addCommMonoid (Subtype.val : S ‚Üí E) Subtype.coe_injective
    (by rfl)
    (by aesop)
    (coe_nsmul)

instance : Module { x : ùïú // 0 ‚â§ x } S := by
  apply Function.Injective.module


    /-
    unsolved goals

    case npow
    ùïú:¬†Type ?u.7833
    E:¬†Type ?u.7836
    inst‚úù¬≤:¬†OrderedSemiring ùïú
    inst‚úù¬π:¬†AddCommMonoid E
    inst‚úù:¬†Module ùïú E
    S :¬†ConvexCone ùïú E
    hS:¬†Fact (ConvexCone.Pointed S)
    ‚ä¢ ‚àÄ (x : { x // x ‚àà S }) (n : ‚Ñï), ‚Üë(n ‚Ä¢ x) = n ‚Ä¢ ‚Üëx
    -/
    -- . extract_goals

    -- sorry
    -- (by aesop)
    -- (by aesop)
    -- (by rintro ‚ü®x, hx‚ü© n
    --     sorry
    -- )


-- import Mathlib.Analysis.Convex.Cone.Basic
-- import Mathlib.Algebra.Order.Nonneg.Ring

-- variable [OrderedSemiring ùïú] [AddCommMonoid E] [Module ùïú E]

-- variable {S : ConvexCone ùïú E} (hS : S.Pointed)

-- instance Pointed.toAddCommMonoid : AddCommMonoid S := by
--   letI hzero : Zero S := ‚ü®‚ü®0, hS‚ü©‚ü©
--   letI hsmul : SMul ‚Ñï S := ‚ü®fun n => match n with
--     -- induction' n with n hn
--     | 0 => fun x => ‚ü®0, by simpa [ConvexCone.Pointed] using hS‚ü©
--     | n + 1 => fun x => by {
--         apply Subtype.mk
--         exact S.smul_mem (show 0 < (n + 1 : ùïú) from sorry) x.2 } ‚ü©
--   apply Function.Injective.addCommMonoid (Subtype.val : S ‚Üí E) Subtype.coe_injective
--   . rfl
--   . simp [AddMemClass.coe_add]
--   . exact fun x n => match n with
--     | 0 => by simp only [zero_smul] ; rfl
--     | n + 1 => sorry


-- -- failed to synthesize instance
-- -- AddCommMonoid { x // x ‚àà S }
-- instance : Module { x : ùïú // 0 ‚â§ x } S := sorry


-- import Mathlib.Algebra.DirectSum.Module
  -- haveI : Module { x : ùïú // 0 ‚â§ x } E := by
  -- apply Function.Injective.module


--   smul := by aesop
--   one_smul := fun ‚ü®a, ha‚ü© => sorry
--   mul_smul := by aesop
--   smul_zero :=
--   smul_add := _
--   add_smul := _
--   zero_smul := _

-- instance : AddCommMonoid S where
--   add := fun ‚ü®x, hx‚ü© ‚ü®y, hy‚ü© => ‚ü®x + y, S.add_mem' hx hy‚ü©
--   add_assoc := by simp [add_assoc]
--   zero := ‚ü®0, by simpa [ConvexCone.Pointed] using hS ‚ü©
--   zero_add := fun ‚ü®a, ha‚ü© => by

--   add_zero := fun ‚ü®a, ha‚ü© => sorry
--   nsmul := fun n => by
--     induction' n with n hn
--     . exact (fun _ => ‚ü®0, by simpa [ConvexCone.Pointed] using hS ‚ü©)
--     . exact (fun x => x + hn x)
--   nsmul_zero := by aesop
--   nsmul_succ := by aesop
--   add_comm := by simp [add_comm]





-- section DirectSum
-- variable {Œπ : Type _} [dec_Œπ : DecidableEq Œπ]

-- open DirectSum

-- variable {E : Œπ ‚Üí Type u} [‚àÄ i, AddCommMonoid (E i)] [‚àÄ i, Module ùïú (E i)]

-- variable {S : ‚àÄ i, ConvexCone ùïú (E i)}


-- def ConvexCone.DirectSum (h : ‚àÄ i, Pointed (S i)) : ConvexCone ùïú (‚®Å i, E i) where
--   carrier := by
--     let f i : S i ‚Üí E i := fun x => x.1
--     haveI (i : Œπ) : Zero (S i) := by infer_instance --‚ü®‚ü®0, h i‚ü©‚ü©
--     -- have hf i : f i 0 = 0 := by
--     --   simp only
--     --   sorry
--     refine' Set.range <| DFinsupp.mapRange f _

--   smul_mem' := by
--     haveI (i : Œπ) : Zero (S i) := ‚ü®‚ü®0, h i‚ü©‚ü©
--     rintro c hc a ‚ü®x, hx‚ü©
--     simp at *
--     dsimp [DFinsupp.mapRange] at *
--     -- have := DirectSum.mk E x.support'
--     sorry
--     -- use c ‚Ä¢ x
--   add_mem' := sorry

-- end DirectSum
