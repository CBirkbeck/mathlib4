/-
Copyright (c) 2023 Apurva Nakade All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Apurva Nakade
-/
import Mathlib.Analysis.Convex.Cone.Proper
import Mathlib.Data.Real.EReal
import Mathlib.Topology.Instances.EReal

/-!

# Cone Programs

## References

- [B. Gartner and J. Matousek, Cone Programming][gartnerMatousek]

-/

open Filter Set Topology ContinuousLinearMap

structure ConeProgram
  (V : Type _) [NormedAddCommGroup V] [InnerProductSpace ‚Ñù V] [CompleteSpace V]
  (W : Type _) [NormedAddCommGroup W] [InnerProductSpace ‚Ñù W] [CompleteSpace W]
  where
  K : ProperCone ‚Ñù V
  L : ProperCone ‚Ñù W
  obj : V
  lhs : V ‚ÜíL[‚Ñù] W
  rhs : W

namespace ConeProgram

variable {V : Type _} [NormedAddCommGroup V] [InnerProductSpace ‚Ñù V] [CompleteSpace V]
variable {W : Type _} [NormedAddCommGroup W] [InnerProductSpace ‚Ñù W] [CompleteSpace W]
variable (P : ConeProgram V W)

def Objective (v : V) := Real.toEReal ‚ü™v, P.obj‚ü´_‚Ñù

def IsSolution (v : V) := v ‚àà P.K ‚àß P.rhs - P.lhs v ‚àà P.L

-- TODO: Show that the set `Solutions := { v | P.IsSolution v }` is itself a `ConvexCone`.

def IsFeasible := Nonempty { v | P.IsSolution v }

def IsOptimalSolution (v : V) :=
  P.IsSolution v ‚àß IsGreatest (P.Objective ''  { v | P.IsSolution v }) (P.Objective v)

lemma solution_of_optimalSolution (h : P.IsOptimalSolution v) :
  P.IsSolution v := h.1

def Values := P.Objective '' { v | P.IsSolution v }

lemma nonempty_values_iff_feasible : (P.Values).Nonempty ‚Üî P.IsFeasible := by
    rw [Values, nonempty_image_iff]
    exact Iff.symm nonempty_coe_sort

noncomputable def Value := sSup <| P.Values

lemma value_optimal (h : P.IsOptimalSolution v) : P.Value = P.Objective v := by
  apply IsLUB.csSup_eq <| IsGreatest.isLUB h.2
  rw [nonempty_image_iff]
  exact ‚ü®v, h.1‚ü©

----------------------------------------------------------------------------------------------------

def IsSubSolution (seqV : ‚Ñï ‚Üí V) :=
  ‚àÉ seqW : ‚Ñï ‚Üí W,
  (‚àÄ n, seqV n ‚àà P.K)
  ‚àß (‚àÄ n, seqW n ‚àà P.L)
  ‚àß (Tendsto (fun n => P.lhs (seqV n) + (seqW n)) atTop (ùìù P.rhs))

noncomputable def SubObjective (seqV : ‚Ñï ‚Üí V) := limsup (fun n => P.Objective (seqV n)) atTop

lemma subSolution_of_solution (hx : P.IsSolution x) : P.IsSubSolution <| fun _ => x :=
  let ‚ü®hx1, _‚ü© := hx
  ‚ü®fun _ => P.rhs - P.lhs x, fun _ => hx1, by simpa‚ü©

@[simp] lemma subSolution_of_solution_value : P.SubObjective (fun _ => x) = P.Objective x :=
  limsup_const _

def IsSubFeasible := Nonempty { x : ‚Ñï ‚Üí V | P.IsSubSolution x }

lemma subFeasible_of_feasible (h : P.IsFeasible) : P.IsSubFeasible :=
  let ‚ü®v, hv‚ü© := h
  ‚ü®fun _ => v, P.subSolution_of_solution hv‚ü©

def SubValues := P.SubObjective '' { seqV | P.IsSubSolution seqV }

lemma nonempty_subValues_iff_subFeasible : (P.SubValues).Nonempty ‚Üî P.IsSubFeasible := by
    rw [SubValues, nonempty_image_iff]
    exact Iff.symm nonempty_coe_sort

noncomputable def SubValue := sSup <| P.SubValues

----------------------------------------------------------------------------------------------------

@[simp] lemma values_subset_subValues : P.Values ‚äÜ P.SubValues := fun r ‚ü®v, hv, hvr‚ü© =>
  ‚ü®fun _ => v, P.subSolution_of_solution hv, by rwa [P.subSolution_of_solution_value]‚ü©

lemma value_le_subValue (fs : P.IsFeasible) (bdd : BddAbove P.SubValues) :
  P.Value ‚â§ P.SubValue :=
  csSup_le_csSup bdd (P.nonempty_values_iff_feasible.2 fs) P.values_subset_subValues

----------------------------------------------------------------------------------------------------

noncomputable def Dual : ConeProgram W V where
  K := (P.L).dual
  L := (P.K).dual
  obj := -P.rhs
  lhs := -adjoint P.lhs
  rhs := -P.obj

theorem dual_dual : (P.Dual).Dual = P := by dsimp [Dual]; simp

theorem weak_duality_aux (seqV : ‚Ñï ‚Üí V) (hv : P.IsSubSolution seqV) (hw : (P.Dual).IsSolution w) :
  P.SubObjective seqV ‚â§ - (P.Dual).Objective w := by
    rcases hv with ‚ü®seqW, hseqV, hseqW, htends‚ü©
    rcases hw with ‚ü®hw1, hw2‚ü©
    dsimp [Dual] at hw2
    have h : ‚àÄ n, 0 ‚â§ ‚ü™P.lhs (seqV n) + seqW n, w‚ü´_‚Ñù - ‚ü™seqV n, P.obj‚ü´_‚Ñù := fun n => by
      calc 0
        ‚â§ ‚ü™seqV n, adjoint P.lhs w - P.obj‚ü´_‚Ñù + ‚ü™seqW n, w‚ü´_‚Ñù := by {
            refine' add_nonneg _ (hw1 (seqW n) (hseqW n))
            specialize hw2 (seqV n) (hseqV n)
            rwa [sub_neg_eq_add, neg_add_eq_sub] at hw2 }
      _ = ‚ü™seqV n, adjoint P.lhs w‚ü´_‚Ñù - ‚ü™seqV n, P.obj‚ü´_‚Ñù + ‚ü™seqW n, w‚ü´_‚Ñù := by
        rw [‚Üê inner_sub_right]
      _ = ‚ü™seqV n, adjoint P.lhs w‚ü´_‚Ñù + ‚ü™seqW n, w‚ü´_‚Ñù - ‚ü™seqV n, P.obj‚ü´_‚Ñù := by
        rw [add_sub_right_comm]
      _ = ‚ü™P.lhs (seqV n), w‚ü´_‚Ñù + ‚ü™seqW n, w‚ü´_‚Ñù - ‚ü™seqV n, P.obj‚ü´_‚Ñù := by
        rw [ContinuousLinearMap.adjoint_inner_right]
      _ = ‚ü™P.lhs (seqV n) + seqW n, w‚ü´_‚Ñù - ‚ü™seqV n, P.obj‚ü´_‚Ñù := by rw [inner_add_left]
    simp_rw [sub_nonneg, ‚Üê EReal.coe_le_coe_iff] at h
    have htends' : Tendsto (fun n => ‚ü™P.lhs (seqV n) + seqW n, w‚ü´_‚Ñù) atTop (ùìù ‚ü™P.rhs, w‚ü´_‚Ñù) :=
      htends.inner tendsto_const_nhds
    rw [‚Üê EReal.tendsto_coe] at htends'
    have : P.SubObjective seqV ‚â§ ‚ü™P.rhs, w‚ü´_‚Ñù := by
      calc P.SubObjective seqV
          = limsup (fun n => P.Objective (seqV n)) atTop := by rfl
        _ = limsup (fun n => Real.toEReal ‚ü™seqV n, P.obj‚ü´_‚Ñù) atTop := by rfl
        _ ‚â§ limsup (fun n => Real.toEReal ‚ü™P.lhs (seqV n) + seqW n, w‚ü´_‚Ñù) atTop := by
            norm_cast
            refine' limsup_le_limsup (eventually_of_forall h) isCobounded_le_of_bot isBounded_le_of_top
        _ = ‚ü™P.rhs, w‚ü´_‚Ñù := htends'.limsup_eq
    rw [Objective, Dual, inner_neg_right, real_inner_comm _ _]
    simpa

theorem weak_duality (hP : P.IsSubFeasible) (hD : (P.Dual).IsFeasible) :
  P.SubValue ‚â§ -(P.Dual).Value := by
    apply csSup_le <| P.nonempty_subValues_iff_subFeasible.2 hP
    rintro x ‚ü®v, hv1, hv2‚ü©
    apply EReal.le_neg_of_le_neg
    apply csSup_le <| (P.Dual).nonempty_values_iff_feasible.2 hD
    rintro y ‚ü®w, hw1, hw2‚ü©
    simp at *
    rw [‚Üê hv2, ‚Üê hw2]
    apply EReal.le_neg_of_le_neg
    apply P.weak_duality_aux v hv1 hw1

theorem weak_duality_aux' (hv : P.IsSolution v) (hw : (P.Dual).IsSolution w) :
  P.Objective v ‚â§ - (P.Dual).Objective w := by
    rw [‚Üê subSolution_of_solution_value]
    apply weak_duality_aux
    apply P.subSolution_of_solution hv
    exact hw

theorem weak_duality' (hP : P.IsFeasible) (hD : (P.Dual).IsFeasible) :
  P.Value ‚â§ -(P.Dual).Value := by
    apply csSup_le <| P.nonempty_values_iff_feasible.2 hP
    rintro v ‚ü®_, hv2, hv3‚ü©
    apply EReal.le_neg_of_le_neg
    apply csSup_le <| (P.Dual).nonempty_values_iff_feasible.2 hD
    rintro w ‚ü®_, hw2, hw3‚ü©
    rw [‚Üê hv3, ‚Üê hw3]
    apply EReal.le_neg_of_le_neg
    exact P.weak_duality_aux' hv2 hw2

----------------------------------------------------------------------------------------------------

def SlaterCondition := ‚àÉ v : P.K, P.rhs - P.lhs v ‚àà interior P.L

end ConeProgram
