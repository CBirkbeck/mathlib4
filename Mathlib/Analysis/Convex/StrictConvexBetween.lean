/-
Copyright (c) 2022 Joseph Myers. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Myers
-/
import Mathlib.Analysis.Convex.Between
import Mathlib.Analysis.Convex.StrictConvexSpace

#align_import analysis.convex.strict_convex_between from "leanprover-community/mathlib"@"e1730698f86560a342271c0471e4cb72d021aabf"

/-!
# Betweenness in affine spaces for strictly convex spaces

This file proves results about betweenness for points in an affine space for a strictly convex
space.

-/


variable {V P : Type*} [NormedAddCommGroup V] [NormedSpace ‚Ñù V] [PseudoMetricSpace P]

variable [NormedAddTorsor V P] [StrictConvexSpace ‚Ñù V]

theorem Sbtw.dist_lt_max_dist (p : P) {p‚ÇÅ p‚ÇÇ p‚ÇÉ : P} (h : Sbtw ‚Ñù p‚ÇÅ p‚ÇÇ p‚ÇÉ) :
    dist p‚ÇÇ p < max (dist p‚ÇÅ p) (dist p‚ÇÉ p) := by
  have hp‚ÇÅp‚ÇÉ : p‚ÇÅ -·µ• p ‚â† p‚ÇÉ -·µ• p := by simpa using h.left_ne_right
  -- ‚ä¢ dist p‚ÇÇ p < max (dist p‚ÇÅ p) (dist p‚ÇÉ p)
  rw [Sbtw, ‚Üê wbtw_vsub_const_iff p, Wbtw, affineSegment_eq_segment, ‚Üê insert_endpoints_openSegment,
    Set.mem_insert_iff, Set.mem_insert_iff] at h
  rcases h with ‚ü®h | h | h, hp‚ÇÇp‚ÇÅ, hp‚ÇÇp‚ÇÉ‚ü©
  ¬∑ rw [vsub_left_cancel_iff] at h
    -- ‚ä¢ dist p‚ÇÇ p < max (dist p‚ÇÅ p) (dist p‚ÇÉ p)
    exact False.elim (hp‚ÇÇp‚ÇÅ h)
    -- üéâ no goals
  ¬∑ rw [vsub_left_cancel_iff] at h
    -- ‚ä¢ dist p‚ÇÇ p < max (dist p‚ÇÅ p) (dist p‚ÇÉ p)
    exact False.elim (hp‚ÇÇp‚ÇÉ h)
    -- üéâ no goals
  ¬∑ rw [openSegment_eq_image, Set.mem_image] at h
    -- ‚ä¢ dist p‚ÇÇ p < max (dist p‚ÇÅ p) (dist p‚ÇÉ p)
    rcases h with ‚ü®r, ‚ü®hr0, hr1‚ü©, hr‚ü©
    -- ‚ä¢ dist p‚ÇÇ p < max (dist p‚ÇÅ p) (dist p‚ÇÉ p)
    simp_rw [@dist_eq_norm_vsub V, ‚Üê hr]
    -- ‚ä¢ ‚Äñ(1 - r) ‚Ä¢ (p‚ÇÅ -·µ• p) + r ‚Ä¢ (p‚ÇÉ -·µ• p)‚Äñ < max ‚Äñp‚ÇÅ -·µ• p‚Äñ ‚Äñp‚ÇÉ -·µ• p‚Äñ
    exact
      norm_combo_lt_of_ne (le_max_left _ _) (le_max_right _ _) hp‚ÇÅp‚ÇÉ (sub_pos.2 hr1) hr0 (by abel)
#align sbtw.dist_lt_max_dist Sbtw.dist_lt_max_dist

theorem Wbtw.dist_le_max_dist (p : P) {p‚ÇÅ p‚ÇÇ p‚ÇÉ : P} (h : Wbtw ‚Ñù p‚ÇÅ p‚ÇÇ p‚ÇÉ) :
    dist p‚ÇÇ p ‚â§ max (dist p‚ÇÅ p) (dist p‚ÇÉ p) := by
  by_cases hp‚ÇÅ : p‚ÇÇ = p‚ÇÅ; ¬∑ simp [hp‚ÇÅ]
  -- ‚ä¢ dist p‚ÇÇ p ‚â§ max (dist p‚ÇÅ p) (dist p‚ÇÉ p)
                            -- üéâ no goals
  by_cases hp‚ÇÉ : p‚ÇÇ = p‚ÇÉ; ¬∑ simp [hp‚ÇÉ]
  -- ‚ä¢ dist p‚ÇÇ p ‚â§ max (dist p‚ÇÅ p) (dist p‚ÇÉ p)
                            -- üéâ no goals
  have hs : Sbtw ‚Ñù p‚ÇÅ p‚ÇÇ p‚ÇÉ := ‚ü®h, hp‚ÇÅ, hp‚ÇÉ‚ü©
  -- ‚ä¢ dist p‚ÇÇ p ‚â§ max (dist p‚ÇÅ p) (dist p‚ÇÉ p)
  exact (hs.dist_lt_max_dist _).le
  -- üéâ no goals
#align wbtw.dist_le_max_dist Wbtw.dist_le_max_dist

/-- Given three collinear points, two (not equal) with distance `r` from `p` and one with
distance at most `r` from `p`, the third point is weakly between the other two points. -/
theorem Collinear.wbtw_of_dist_eq_of_dist_le {p p‚ÇÅ p‚ÇÇ p‚ÇÉ : P} {r : ‚Ñù}
    (h : Collinear ‚Ñù ({p‚ÇÅ, p‚ÇÇ, p‚ÇÉ} : Set P)) (hp‚ÇÅ : dist p‚ÇÅ p = r) (hp‚ÇÇ : dist p‚ÇÇ p ‚â§ r)
    (hp‚ÇÉ : dist p‚ÇÉ p = r) (hp‚ÇÅp‚ÇÉ : p‚ÇÅ ‚â† p‚ÇÉ) : Wbtw ‚Ñù p‚ÇÅ p‚ÇÇ p‚ÇÉ := by
  rcases h.wbtw_or_wbtw_or_wbtw with (hw | hw | hw)
  ¬∑ exact hw
    -- üéâ no goals
  ¬∑ by_cases hp‚ÇÉp‚ÇÇ : p‚ÇÉ = p‚ÇÇ
    -- ‚ä¢ Wbtw ‚Ñù p‚ÇÅ p‚ÇÇ p‚ÇÉ
    ¬∑ simp [hp‚ÇÉp‚ÇÇ]
      -- üéâ no goals
    have hs : Sbtw ‚Ñù p‚ÇÇ p‚ÇÉ p‚ÇÅ := ‚ü®hw, hp‚ÇÉp‚ÇÇ, hp‚ÇÅp‚ÇÉ.symm‚ü©
    -- ‚ä¢ Wbtw ‚Ñù p‚ÇÅ p‚ÇÇ p‚ÇÉ
    have hs' := hs.dist_lt_max_dist p
    -- ‚ä¢ Wbtw ‚Ñù p‚ÇÅ p‚ÇÇ p‚ÇÉ
    rw [hp‚ÇÅ, hp‚ÇÉ, lt_max_iff, lt_self_iff_false, or_false_iff] at hs'
    -- ‚ä¢ Wbtw ‚Ñù p‚ÇÅ p‚ÇÇ p‚ÇÉ
    exact False.elim (hp‚ÇÇ.not_lt hs')
    -- üéâ no goals
  ¬∑ by_cases hp‚ÇÅp‚ÇÇ : p‚ÇÅ = p‚ÇÇ
    -- ‚ä¢ Wbtw ‚Ñù p‚ÇÅ p‚ÇÇ p‚ÇÉ
    ¬∑ simp [hp‚ÇÅp‚ÇÇ]
      -- üéâ no goals
    have hs : Sbtw ‚Ñù p‚ÇÉ p‚ÇÅ p‚ÇÇ := ‚ü®hw, hp‚ÇÅp‚ÇÉ, hp‚ÇÅp‚ÇÇ‚ü©
    -- ‚ä¢ Wbtw ‚Ñù p‚ÇÅ p‚ÇÇ p‚ÇÉ
    have hs' := hs.dist_lt_max_dist p
    -- ‚ä¢ Wbtw ‚Ñù p‚ÇÅ p‚ÇÇ p‚ÇÉ
    rw [hp‚ÇÅ, hp‚ÇÉ, lt_max_iff, lt_self_iff_false, false_or_iff] at hs'
    -- ‚ä¢ Wbtw ‚Ñù p‚ÇÅ p‚ÇÇ p‚ÇÉ
    exact False.elim (hp‚ÇÇ.not_lt hs')
    -- üéâ no goals
#align collinear.wbtw_of_dist_eq_of_dist_le Collinear.wbtw_of_dist_eq_of_dist_le

/-- Given three collinear points, two (not equal) with distance `r` from `p` and one with
distance less than `r` from `p`, the third point is strictly between the other two points. -/
theorem Collinear.sbtw_of_dist_eq_of_dist_lt {p p‚ÇÅ p‚ÇÇ p‚ÇÉ : P} {r : ‚Ñù}
    (h : Collinear ‚Ñù ({p‚ÇÅ, p‚ÇÇ, p‚ÇÉ} : Set P)) (hp‚ÇÅ : dist p‚ÇÅ p = r) (hp‚ÇÇ : dist p‚ÇÇ p < r)
    (hp‚ÇÉ : dist p‚ÇÉ p = r) (hp‚ÇÅp‚ÇÉ : p‚ÇÅ ‚â† p‚ÇÉ) : Sbtw ‚Ñù p‚ÇÅ p‚ÇÇ p‚ÇÉ := by
  refine' ‚ü®h.wbtw_of_dist_eq_of_dist_le hp‚ÇÅ hp‚ÇÇ.le hp‚ÇÉ hp‚ÇÅp‚ÇÉ, _, _‚ü©
  -- ‚ä¢ p‚ÇÇ ‚â† p‚ÇÅ
  ¬∑ rintro rfl
    -- ‚ä¢ False
    exact hp‚ÇÇ.ne hp‚ÇÅ
    -- üéâ no goals
  ¬∑ rintro rfl
    -- ‚ä¢ False
    exact hp‚ÇÇ.ne hp‚ÇÉ
    -- üéâ no goals
#align collinear.sbtw_of_dist_eq_of_dist_lt Collinear.sbtw_of_dist_eq_of_dist_lt
