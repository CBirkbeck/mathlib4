/-
Copyright (c) 2025 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.Probability.Moments.ComplexMGF
import Mathlib.Analysis.SpecialFunctions.Complex.Analytic

/-!
# The moment generating function is analytic

The moment generating function `mgf X Œº` of a random variable `X` with respect to a measure `Œº`
is analytic on the interior of `integrableExpSet X Œº`, the interval on which it is defined.

## Main results

* `analyticOn_mgf`: the moment generating function is analytic on the interior of the interval
  on which it is defined.
* `iteratedDeriv_mgf`: the n-th derivative of the mgf at `t` is `Œº[X ^ n * exp (t * X)]`.

* `analyticOn_cgf`: the cumulant generating function is analytic on the interior of the interval
  `integrableExpSet X Œº`.

-/


open MeasureTheory Filter Finset Real

open scoped MeasureTheory ProbabilityTheory ENNReal NNReal Topology Nat

namespace ProbabilityTheory

variable {Œ© Œπ : Type*} {m : MeasurableSpace Œ©} {X : Œ© ‚Üí ‚Ñù} {Œº : Measure Œ©} {t u v : ‚Ñù}

/-- For `t : ‚Ñù` with `t ‚àà interior (integrableExpSet X Œº)`, the derivative of the function
`x ‚Ü¶ Œº[X ^ n * exp (x * X)]` at `t` is `Œº[X ^ (n + 1) * exp (t * X)]`. -/
lemma hasDerivAt_integral_pow_mul_exp_real (ht : t ‚àà interior (integrableExpSet X Œº)) (n : ‚Ñï) :
    HasDerivAt (fun t ‚Ü¶ Œº[fun œâ ‚Ü¶ X œâ ^ n * exp (t * X œâ)])
      Œº[fun œâ ‚Ü¶ X œâ ^ (n + 1) * exp (t * X œâ)] t := by
  have h_re_of_mem n t (ht' : t ‚àà interior (integrableExpSet X Œº)) :
      (‚à´ œâ, X œâ ^ n * Complex.exp (t * X œâ) ‚àÇŒº).re = ‚à´ œâ, X œâ ^ n * exp (t * X œâ) ‚àÇŒº := by
    rw [‚Üê RCLike.re_eq_complex_re, ‚Üê integral_re]
    ¬∑ norm_cast
    ¬∑ refine integrable_pow_mul_cexp_of_re_mem_interior_integrableExpSet ?_ n
      simpa using ht'
  have h_re n : ‚àÄ·∂† t' : ‚Ñù in ùìù t, (‚à´ œâ, X œâ ^ n * Complex.exp (t' * X œâ) ‚àÇŒº).re
      = ‚à´ œâ, X œâ ^ n * exp (t' * X œâ) ‚àÇŒº := by
    filter_upwards [isOpen_interior.eventually_mem ht] with t ht' using h_re_of_mem n t ht'
  rw [‚Üê EventuallyEq.hasDerivAt_iff (h_re _), ‚Üê h_re_of_mem _ t ht]
  exact (hasDerivAt_integral_pow_mul_exp (by simp [ht]) n).real_of_complex

section DerivMGF

/-- For `t ‚àà interior (integrableExpSet X Œº)`, the derivative of `mgf X Œº` at `t` is
`Œº[X * exp (t * X)]`. -/
lemma hasDerivAt_mgf (h : t ‚àà interior (integrableExpSet X Œº)) :
    HasDerivAt (mgf X Œº) (Œº[fun œâ ‚Ü¶ X œâ * exp (t * X œâ)]) t := by
  convert hasDerivAt_integral_pow_mul_exp_real h 0
  ¬∑ simp [mgf]
  ¬∑ simp

lemma hasDerivAt_iteratedDeriv_mgf (ht : t ‚àà interior (integrableExpSet X Œº)) (n : ‚Ñï) :
    HasDerivAt (iteratedDeriv n (mgf X Œº)) Œº[fun œâ ‚Ü¶ X œâ ^ (n + 1) * exp (t * X œâ)] t := by
  induction n generalizing t with
  | zero => simp [hasDerivAt_mgf ht]
  | succ n hn =>
    rw [iteratedDeriv_succ]
    have : deriv (iteratedDeriv n (mgf X Œº))
        =·∂†[ùìù t] fun t ‚Ü¶ Œº[fun œâ ‚Ü¶ X œâ ^ (n + 1) * exp (t * X œâ)] := by
      have h_mem : ‚àÄ·∂† y in ùìù t, y ‚àà interior (integrableExpSet X Œº) :=
        isOpen_interior.eventually_mem ht
      filter_upwards [h_mem] with y hy using HasDerivAt.deriv (hn hy)
    rw [EventuallyEq.hasDerivAt_iff this]
    exact hasDerivAt_integral_pow_mul_exp_real ht (n + 1)

/-- For `t ‚àà interior (integrableExpSet X Œº)`, the n-th derivative of `mgf X Œº` at `t` is
`Œº[X ^ n * exp (t * X)]`. -/
lemma iteratedDeriv_mgf (ht : t ‚àà interior (integrableExpSet X Œº)) (n : ‚Ñï) :
    iteratedDeriv n (mgf X Œº) t = Œº[fun œâ ‚Ü¶ X œâ ^ n * exp (t * X œâ)] := by
  induction n generalizing t with
  | zero => simp [mgf]
  | succ n hn =>
    rw [iteratedDeriv_succ]
    exact (hasDerivAt_iteratedDeriv_mgf ht n).deriv

/-- The derivatives of the moment generating function at zero are the moments. -/
lemma iteratedDeriv_mgf_zero (h : 0 ‚àà interior (integrableExpSet X Œº)) (n : ‚Ñï) :
    iteratedDeriv n (mgf X Œº) 0 = Œº[X ^ n] := by
  simp [iteratedDeriv_mgf h n]

/-- For `t ‚àà interior (integrableExpSet X Œº)`, the derivative of `mgf X Œº` at `t` is
`Œº[X * exp (t * X)]`. -/
lemma deriv_mgf (h : t ‚àà interior (integrableExpSet X Œº)) :
    deriv (mgf X Œº) t = Œº[fun œâ ‚Ü¶ X œâ * exp (t * X œâ)] :=
  (hasDerivAt_mgf h).deriv

lemma deriv_mgf_zero (h : 0 ‚àà interior (integrableExpSet X Œº)) : deriv (mgf X Œº) 0 = Œº[X] := by
  simp [deriv_mgf h]

end DerivMGF

section AnalyticMGF

/-- The moment generating function is analytic at every `t ‚àà interior (integrableExpSet X Œº)`. -/
lemma analyticAt_mgf (ht : t ‚àà interior (integrableExpSet X Œº)) :
    AnalyticAt ‚Ñù (mgf X Œº) t := by
  rw [‚Üê re_complexMGF_ofReal']
  exact (analyticAt_complexMGF (by simp [ht])).re_ofReal

lemma analyticOnNhd_mgf : AnalyticOnNhd ‚Ñù (mgf X Œº) (interior (integrableExpSet X Œº)) :=
  fun _ hx ‚Ü¶ analyticAt_mgf hx

/-- The moment generating function is analytic on the interior of the interval on which it is
defined. -/
lemma analyticOn_mgf : AnalyticOn ‚Ñù (mgf X Œº) (interior (integrableExpSet X Œº)) :=
  analyticOnNhd_mgf.analyticOn

lemma hasFPowerSeriesAt_mgf (hv : v ‚àà interior (integrableExpSet X Œº)) :
    HasFPowerSeriesAt (mgf X Œº)
      (FormalMultilinearSeries.ofScalars ‚Ñù
        (fun n ‚Ü¶ (Œº[fun œâ ‚Ü¶ X œâ ^ n * exp (v * X œâ)] : ‚Ñù) / n !)) v := by
  convert (analyticAt_mgf hv).hasFPowerSeriesAt
  rw [iteratedDeriv_mgf hv]

lemma differentiableAt_mgf (ht : t ‚àà interior (integrableExpSet X Œº)) :
    DifferentiableAt ‚Ñù (mgf X Œº) t := (analyticAt_mgf ht).differentiableAt

lemma analyticOnNhd_iteratedDeriv_mgf (n : ‚Ñï) :
    AnalyticOnNhd ‚Ñù (iteratedDeriv n (mgf X Œº)) (interior (integrableExpSet X Œº)) := by
  rw [iteratedDeriv_eq_iterate]
  exact analyticOnNhd_mgf.iterated_deriv n

lemma analyticOn_iteratedDeriv_mgf (n : ‚Ñï) :
    AnalyticOn ‚Ñù (iteratedDeriv n (mgf X Œº)) (interior (integrableExpSet X Œº)) :=
  (analyticOnNhd_iteratedDeriv_mgf n).analyticOn

lemma analyticAt_iteratedDeriv_mgf (hv : v ‚àà interior (integrableExpSet X Œº)) (n : ‚Ñï) :
    AnalyticAt ‚Ñù (iteratedDeriv n (mgf X Œº)) v :=
  analyticOnNhd_iteratedDeriv_mgf n v hv

lemma differentiableAt_iteratedDeriv_mgf (hv : v ‚àà interior (integrableExpSet X Œº)) (n : ‚Ñï) :
    DifferentiableAt ‚Ñù (iteratedDeriv n (mgf X Œº)) v :=
  (analyticAt_iteratedDeriv_mgf hv n).differentiableAt

end AnalyticMGF

section AnalyticCGF

lemma analyticAt_cgf (h : v ‚àà interior (integrableExpSet X Œº)) : AnalyticAt ‚Ñù (cgf X Œº) v := by
  by_cases hŒº : Œº = 0
  ¬∑ simp only [hŒº, cgf_zero_measure]
    exact analyticAt_const
  ¬∑ exact (analyticAt_mgf h).log <| mgf_pos' hŒº (interior_subset (s := integrableExpSet X Œº) h)

lemma analyticOnNhd_cgf : AnalyticOnNhd ‚Ñù (cgf X Œº) (interior (integrableExpSet X Œº)) :=
  fun _ hx ‚Ü¶ analyticAt_cgf hx

/-- The cumulant generating function is analytic on the interior of the interval
  `integrableExpSet X Œº`. -/
lemma analyticOn_cgf : AnalyticOn ‚Ñù (cgf X Œº) (interior (integrableExpSet X Œº)) :=
  analyticOnNhd_cgf.analyticOn

end AnalyticCGF

section DerivCGF

lemma deriv_cgf (h : v ‚àà interior (integrableExpSet X Œº)) :
    deriv (cgf X Œº) v = Œº[fun œâ ‚Ü¶ X œâ * exp (v * X œâ)] / mgf X Œº v := by
  by_cases hŒº : Œº = 0
  ¬∑ simp only [hŒº, cgf_zero_measure, integral_zero_measure, mgf_zero_measure, div_zero,
      Pi.zero_apply]
    exact deriv_const v 0
  have hv : Integrable (fun œâ ‚Ü¶ exp (v * X œâ)) Œº := interior_subset (s := integrableExpSet X Œº) h
  calc deriv (fun x ‚Ü¶ log (mgf X Œº x)) v
  _ = deriv (mgf X Œº) v / mgf X Œº v := by
    rw [deriv.log (differentiableAt_mgf h) ((mgf_pos' hŒº hv).ne')]
  _ = Œº[fun œâ ‚Ü¶ X œâ * exp (v * X œâ)] / mgf X Œº v := by rw [deriv_mgf h]

lemma deriv_cgf_zero (h : 0 ‚àà interior (integrableExpSet X Œº)) :
    deriv (cgf X Œº) 0 = Œº[X] / (Œº Set.univ).toReal := by simp [deriv_cgf h]

lemma iteratedDeriv_two_cgf (h : v ‚àà interior (integrableExpSet X Œº)) :
    iteratedDeriv 2 (cgf X Œº) v
      = Œº[fun œâ ‚Ü¶ (X œâ)^2 * exp (v * X œâ)] / mgf X Œº v - deriv (cgf X Œº) v ^ 2 := by
  rw [iteratedDeriv_succ, iteratedDeriv_one]
  by_cases hŒº : Œº = 0
  ¬∑ have : deriv (0 : ‚Ñù ‚Üí ‚Ñù) = 0 := by ext; exact deriv_const _ 0
    simp [hŒº, this]
  have h_mem : ‚àÄ·∂† y in ùìù v, y ‚àà interior (integrableExpSet X Œº) :=
    isOpen_interior.eventually_mem h
  have h_d_cgf : deriv (cgf X Œº) =·∂†[ùìù v] fun u ‚Ü¶ Œº[fun œâ ‚Ü¶ X œâ * exp (u * X œâ)] / mgf X Œº u := by
    filter_upwards [h_mem] with u hu using deriv_cgf hu
  have h_d_mgf : deriv (mgf X Œº) =·∂†[ùìù v] fun u ‚Ü¶ Œº[fun œâ ‚Ü¶ X œâ * exp (u * X œâ)] := by
    filter_upwards [h_mem] with u hu using deriv_mgf hu
  rw [h_d_cgf.deriv_eq]
  calc deriv (fun u ‚Ü¶ (‚à´ œâ, X œâ * exp (u * X œâ) ‚àÇŒº) / mgf X Œº u) v
  _ = (deriv (fun u ‚Ü¶ ‚à´ œâ, X œâ * exp (u * X œâ) ‚àÇŒº) v * mgf X Œº v -
      (‚à´ œâ, X œâ * exp (v * X œâ) ‚àÇŒº) * deriv (mgf X Œº) v) / mgf X Œº v ^ 2 := by
    rw [deriv_div]
    ¬∑ rw [h_d_mgf.symm.differentiableAt_iff, ‚Üê iteratedDeriv_one]
      exact differentiableAt_iteratedDeriv_mgf h 1
    ¬∑ exact differentiableAt_mgf h
    ¬∑ exact (mgf_pos' hŒº (interior_subset (s := integrableExpSet X Œº) h)).ne'
  _ = (deriv (fun u ‚Ü¶ ‚à´ œâ, X œâ * exp (u * X œâ) ‚àÇŒº) v * mgf X Œº v -
      (‚à´ œâ, X œâ * exp (v * X œâ) ‚àÇŒº) * ‚à´ œâ, X œâ * exp (v * X œâ) ‚àÇŒº) / mgf X Œº v ^ 2 := by
    rw [deriv_mgf h]
  _ = deriv (fun u ‚Ü¶ ‚à´ œâ, X œâ * exp (u * X œâ) ‚àÇŒº) v / mgf X Œº v - deriv (cgf X Œº) v ^ 2 := by
    rw [sub_div]
    congr 1
    ¬∑ rw [pow_two, div_mul_eq_div_div, mul_div_assoc, div_self, mul_one]
      exact (mgf_pos' hŒº (interior_subset (s := integrableExpSet X Œº) h)).ne'
    ¬∑ rw [deriv_cgf h]
      ring
  _ = (‚à´ œâ, (X œâ) ^ 2 * exp (v * X œâ) ‚àÇŒº) / mgf X Œº v - deriv (cgf X Œº) v ^ 2 := by
    congr
    convert (hasDerivAt_integral_pow_mul_exp_real h 1).deriv using 1
    simp

lemma iteratedDeriv_two_cgf_eq_integral (h : v ‚àà interior (integrableExpSet X Œº)) :
    iteratedDeriv 2 (cgf X Œº) v
      = Œº[fun œâ ‚Ü¶ (X œâ - deriv (cgf X Œº) v)^2 * exp (v * X œâ)] / mgf X Œº v := by
  by_cases hŒº : Œº = 0
  ¬∑ have : deriv (0 : ‚Ñù ‚Üí ‚Ñù) = 0 := by ext; exact deriv_const _ 0
    simp [hŒº, this, iteratedDeriv_succ]
  rw [iteratedDeriv_two_cgf h]
  calc (‚à´ œâ, (X œâ) ^ 2 * exp (v * X œâ) ‚àÇŒº) / mgf X Œº v - deriv (cgf X Œº) v ^ 2
  _ = (‚à´ œâ, (X œâ) ^ 2 * exp (v * X œâ) ‚àÇŒº - 2 * (‚à´ œâ, X œâ * exp (v * X œâ) ‚àÇŒº) * deriv (cgf X Œº) v
      + deriv (cgf X Œº) v ^ 2 * mgf X Œº v) / mgf X Œº v := by
    rw [add_div, sub_div, sub_add]
    congr 1
    rw [mul_div_cancel_right‚ÇÄ, deriv_cgf h]
    ¬∑ ring
    ¬∑ exact (mgf_pos' hŒº (interior_subset (s := integrableExpSet X Œº) h)).ne'
  _ = (‚à´ œâ, ((X œâ) ^ 2 - 2 * X œâ * deriv (cgf X Œº) v + deriv (cgf X Œº) v ^ 2) * exp (v * X œâ) ‚àÇŒº)
      / mgf X Œº v := by
    congr 1
    simp_rw [add_mul, sub_mul]
    have h_int : Integrable (fun œâ ‚Ü¶ 2 * X œâ * deriv (cgf X Œº) v * exp (v * X œâ)) Œº := by
      simp_rw [mul_assoc, mul_comm (deriv (cgf X Œº) v)]
      refine Integrable.const_mul ?_ _
      simp_rw [‚Üê mul_assoc]
      refine Integrable.mul_const ?_ _
      convert integrable_pow_mul_exp_of_mem_interior_integrableExpSet h 1
      simp
    rw [integral_add]
    rotate_left
    ¬∑ exact (integrable_pow_mul_exp_of_mem_interior_integrableExpSet h 2).sub h_int
    ¬∑ exact (interior_subset (s := integrableExpSet X Œº) h).const_mul _
    rw [integral_sub (integrable_pow_mul_exp_of_mem_interior_integrableExpSet h 2) h_int]
    congr
    ¬∑ rw [‚Üê integral_mul_left, ‚Üê integral_mul_right]
      congr with œâ
      ring
    ¬∑ rw [integral_mul_left, mgf]
  _ = (‚à´ œâ, (X œâ - deriv (cgf X Œº) v) ^ 2 * exp (v * X œâ) ‚àÇŒº) / mgf X Œº v := by
    congr with œâ
    ring

end DerivCGF

section GeneratingFunctionDerivatives

variable {X : Œ© ‚Üí ‚Ñù}

lemma integrable_expt_bound [IsFiniteMeasure Œº] {t a b : ‚Ñù} (hX : AEMeasurable X Œº)
    (h : ‚àÄ·µê œâ ‚àÇŒº, X œâ ‚àà Set.Icc a b) :
    Integrable (fun œâ ‚Ü¶ exp (t * (X œâ))) Œº := by
  cases lt_trichotomy t 0 with
  | inr ht => cases ht with
    | inr ht => exact integrable_exp_mul_of_le t b ht.le hX (h.mono fun œâ h ‚Ü¶ h.2)
    | inl ht => rw [ht]; simp only [zero_mul, exp_zero, integrable_const]
  | inl ht =>
    rw [(by ext œâ; rw [(by ring : - t * (- X œâ) = t * X œâ)] :
      (fun œâ ‚Ü¶ rexp (t * X œâ)) = (fun œâ ‚Ü¶ rexp (- t * (- X œâ))))]
    apply integrable_exp_mul_of_le (-t) _ _ hX.neg
    ¬∑ filter_upwards [h] with œâ h using neg_le_neg h.1
    ¬∑ linarith

lemma tilt_var_bound [IsProbabilityMeasure Œº] (a b t : ‚Ñù) (h : ‚àÄ·µê œâ ‚àÇŒº, X œâ ‚àà Set.Icc a b)
    (hX : AEMeasurable X Œº) :
    variance X (Œº.tilted (fun œâ ‚Ü¶ t * X œâ)) ‚â§ ((b - a) / 2) ^ 2 := by
  have _ : IsProbabilityMeasure (Œº.tilted fun œâ ‚Ü¶ t * X œâ) :=
    isProbabilityMeasure_tilted (integrable_expt_bound hX h)
  exact variance_le_sq_of_bounded
    ((tilted_absolutelyContinuous Œº fun œâ ‚Ü¶ t * X œâ) h)
    (hX.mono_ac (tilted_absolutelyContinuous Œº fun œâ ‚Ü¶ t * X œâ))

lemma integrableExpSet_eq_univ_of_mem_Icc [IsFiniteMeasure Œº] [NeZero Œº] (a b : ‚Ñù)
    (hX : AEMeasurable X Œº) (h : ‚àÄ·µê œâ ‚àÇŒº, X œâ ‚àà Set.Icc a b) :
    integrableExpSet X Œº = Set.univ := by
  ext t
  simp only [Set.mem_univ, iff_true]
  exact integrable_expt_bound hX h

theorem integral_tilted' [IsFiniteMeasure Œº] (t : ‚Ñù) (f : ‚Ñù ‚Üí ‚Ñù) :
    (Œº.tilted (fun œâ ‚Ü¶ t * X œâ))[fun œâ ‚Ü¶ f (X œâ)] =
    (Œº[fun œâ ‚Ü¶ rexp (t * X œâ) * f (X œâ)]) / mgf X Œº t := by
  rw [MeasureTheory.integral_tilted, ‚Üê integral_div]
  simp only [smul_eq_mul, mgf]
  congr with œâ
  ring

/-! ### Derivatives of cumulant-/

/-- First derivative of cumulant `cgf X Œº f`.
It can be described by exponential tilting.-/
theorem cgf_deriv_one [IsFiniteMeasure Œº] [NeZero Œº] (a b : ‚Ñù)
    {X : Œ© ‚Üí ‚Ñù} (hX : AEMeasurable X Œº) (h : ‚àÄ·µê œâ ‚àÇŒº, X œâ ‚àà Set.Icc a b) (t : ‚Ñù) :
    HasDerivAt (cgf X Œº) ((Œº.tilted (fun œâ ‚Ü¶ t * X œâ))[X]) t := by
  have r0 : ((Œº.tilted (fun œâ ‚Ü¶ t * X œâ))[fun œâ ‚Ü¶ id (X œâ)]) =
      Œº[fun œâ ‚Ü¶ rexp (t * X œâ) * id (X œâ)] / Œº[fun œâ ‚Ü¶ rexp (t * X œâ)] :=
    integral_tilted' t id
  simp only [id_eq] at r0
  rw [r0]
  apply HasDerivAt.log ?_ (mgf_pos' (NeZero.ne Œº) (integrable_expt_bound hX h)).ne'
  convert hasDerivAt_mgf _ using 1
  ¬∑ simp_rw [mul_comm]
  ¬∑ simp [integrableExpSet_eq_univ_of_mem_Icc _ _ hX h]

/-- Second derivative of cumulant `cgf X Œº f`-/
theorem cgf_deriv_two [IsFiniteMeasure Œº] [NeZero Œº] (a b : ‚Ñù)
    {X : Œ© ‚Üí ‚Ñù} (hX : AEMeasurable X Œº) (h : ‚àÄ·µê œâ ‚àÇŒº, X œâ ‚àà Set.Icc a b) :
    let g' := fun t ‚Ü¶ (Œº.tilted (fun œâ ‚Ü¶ t * X œâ))[X];
    let g'' := fun t ‚Ü¶ (Œº.tilted (fun œâ ‚Ü¶ t * X œâ))[X ^ 2] - (Œº.tilted (fun œâ ‚Ü¶ t * X œâ))[X] ^ 2;
    ‚àÄ x : ‚Ñù, HasDerivAt g' (g'' x) x := by
  intro g' g'' t
  have r0 : (fun t ‚Ü¶ ((Œº.tilted (fun œâ ‚Ü¶ t * X œâ))[fun œâ ‚Ü¶ id (X œâ)])) =
    fun t ‚Ü¶ Œº[fun œâ ‚Ü¶ rexp (t * X œâ) * id (X œâ)] / Œº[fun œâ ‚Ü¶ rexp (t * X œâ)] := by
    ext t
    exact integral_tilted' t id
  have r01 : (Œº.tilted (fun œâ ‚Ü¶ t * X œâ))[fun œâ ‚Ü¶ id (X œâ)]  =
    Œº[fun œâ ‚Ü¶ rexp (t * X œâ) * id (X œâ)] / Œº[fun œâ ‚Ü¶ rexp (t * X œâ)] :=
    integral_tilted' t id
  have r0' : (Œº.tilted (fun œâ ‚Ü¶ t * X œâ))[fun œâ ‚Ü¶ (fun s ‚Ü¶ s ^ 2) (X œâ)] =
    Œº[fun œâ ‚Ü¶ rexp (t * X œâ) * (fun s ‚Ü¶ s ^ 2) (X œâ)] / Œº[fun œâ ‚Ü¶ rexp (t * X œâ)] :=
    integral_tilted' t (fun x ‚Ü¶ x ^ 2)
  simp only [id_eq] at r0 r0' r01
  dsimp [g', g'']
  rw [r0, r0', r01]
  field_simp
  have p : ((Œº[fun œâ ‚Ü¶ rexp (t * X œâ) * X œâ ^ 2]) / Œº[fun œâ ‚Ü¶ rexp (t * X œâ)]) =
  ((Œº[fun œâ ‚Ü¶ rexp (t * X œâ) * X œâ ^ 2]) * (Œº[fun œâ ‚Ü¶ rexp (t * X œâ)])) /
  ((Œº[fun œâ ‚Ü¶ rexp (t * X œâ)]) * (Œº[fun œâ ‚Ü¶ rexp (t * X œâ)])) := by
    apply Eq.symm (mul_div_mul_right (‚à´ œâ, rexp (t * X œâ) * X œâ ^ 2 ‚àÇŒº)
    (Œº[fun œâ ‚Ü¶ rexp (t * X œâ)]) _)
    exact (mgf_pos' (NeZero.ne Œº) (integrable_expt_bound hX h)).ne'
  rw [p, Eq.symm (pow_two (‚à´ œâ, rexp (t * X œâ) ‚àÇŒº))]
  have p'' : (((Œº[fun œâ ‚Ü¶ rexp (t * X œâ) * X œâ ^ 2]) *
    (Œº[fun œâ ‚Ü¶ rexp (t * X œâ)])) / (Œº[fun œâ ‚Ü¶ rexp (t * X œâ)]) ^ 2 -
  (Œº[fun œâ ‚Ü¶ rexp (t * X œâ) * X œâ]) ^ 2 / (Œº[fun œâ ‚Ü¶ rexp (t * X œâ)]) ^ 2) =
  ((Œº[fun œâ ‚Ü¶ exp (t * (X œâ)) * (X œâ) ^ 2] *
    mgf X Œº t) -
    (Œº[fun œâ ‚Ü¶ exp (t * (X œâ)) * X œâ] * Œº[fun œâ ‚Ü¶ exp (t * (X œâ)) * X œâ])) /
    (mgf X Œº t ^ 2) := by
    rw [Eq.symm (pow_two (‚à´ œâ, (fun œâ ‚Ü¶ rexp (t * X œâ) * X œâ) œâ ‚àÇŒº))]
    exact
      div_sub_div_same ((Œº[fun œâ ‚Ü¶ rexp (t * X œâ) * X œâ ^ 2]) * Œº[fun œâ ‚Ü¶ rexp (t * X œâ)])
        ((Œº[fun œâ ‚Ü¶ rexp (t * X œâ) * X œâ]) ^ 2) ((Œº[fun œâ ‚Ü¶ rexp (t * X œâ)]) ^ 2)
  rw [p'']
  apply HasDerivAt.div
  ¬∑ set c := max ‚Äña‚Äñ ‚Äñb‚Äñ
    convert hasDerivAt_integral_pow_mul_exp_real (X := X) (Œº := Œº) ?_ 1 using 1
    ¬∑ simp only [pow_one, g'', g']
      simp_rw [mul_comm]
    ¬∑ simp only [Nat.reduceAdd, g'', g']
      simp_rw [mul_comm]
    ¬∑ simp [integrableExpSet_eq_univ_of_mem_Icc _ _ hX h]
  ¬∑ convert hasDerivAt_integral_pow_mul_exp_real (X := X) (Œº := Œº) ?_ 0 using 1
    ¬∑ simp
    ¬∑ simp only [zero_add, pow_one, g'', g']
      simp_rw [mul_comm]
    ¬∑ simp [integrableExpSet_eq_univ_of_mem_Icc _ _ hX h]
  ¬∑ exact (mgf_pos' (NeZero.ne Œº) (integrable_expt_bound hX h)).ne'

theorem cgf_zero_deriv [IsProbabilityMeasure Œº] {X : Œ© ‚Üí ‚Ñù} (h0 : Œº[X] = 0) :
    let f' := fun t ‚Ü¶ ‚à´ (x : Œ©), X x ‚àÇMeasure.tilted Œº fun œâ ‚Ü¶ t * X œâ;
  f' 0 = 0 := by
  simp only [zero_mul, tilted_const', measure_univ, inv_one, one_smul]
  exact h0

end GeneratingFunctionDerivatives

end ProbabilityTheory
