/-
Copyright (c) 2024 Shogo Saito. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Shogo Saito. Adapted for mathlib by Hunter Monroe
-/
import Mathlib.ProofTheory.LogicSymbol
import Mathlib.Data.Finset.Image

/-!
# Basic definitions and properties of semantics-related notions

This file defines the semantics of formulas based on Tarski's truth definitions. It also provides
a characterization of compactness.

## Main Definitions
* `Semantics`: The realization of a formula.
* `Compact`: The semantic compactness of logic.

This file defines similar concepts to `ModelTheory.Semantics`, but for Tait-style formulas.

## References

* <https://plato.stanford.edu/entries/tarski-truth/>

-/

namespace ProofTheory

variable {F : Type*} [LogicalConnective F]

/-- Class `Semantics` defines how a structure realizes a formula -/
class Semantics (F : Type*) [LogicalConnective F] (Œ± : outParam (Type*)) where
  realize : Œ± ‚Üí F ‚ÜíÀ°·∂ú Prop

/-- Class `Vocabulary` defines the vocabulary of formulas, built from logical connectives -/
class Vocabulary (F : Type*) [LogicalConnective F] (V : outParam (Type*)) where
  /-- `voc` is a map from logical connectives -/
  voc    : F ‚Üí Set V
  verum  : voc ‚ä§ = ‚àÖ
  falsum : voc ‚ä• = ‚àÖ
  neg    : (f : F) ‚Üí voc (~f) = voc f
  and    : (f g : F) ‚Üí voc (f ‚ãè g) = voc f ‚à™ voc g
  or     : (f g : F) ‚Üí voc (f ‚ãé g) = voc f ‚à™ voc g
  imp    : (f g : F) ‚Üí voc (f ‚≠¢ g) = voc f ‚à™ voc g

namespace Semantics
variable {Œ± : Type*} [ùì¢ : Semantics F Œ±]

/-- `realizeTheory` specifices that a structure realizes a theory if it realizes each formula -/
def realizeTheory (a : Œ±) (T : Set F) : Prop := ‚àÄ ‚¶Éf‚¶Ñ, f ‚àà T ‚Üí realize a f

/-- Postfix notation for `realize` -/
postfix:max " ‚äß " => realize

/-- Infix notation for `realizeTheory` -/
infix:60 " ‚äß* " => realizeTheory

/-- `consequence` holds if xxx -/
def consequence (T : Set F) (f : F) : Prop := ‚àÄ ‚¶Éa : Œ±‚¶Ñ, a ‚äß* T ‚Üí a ‚äß f

-- note that ‚ä® (\vDash) is *NOT* ‚äß (\models)
/-- Infix notation for `consquence` -/
infix:55 " ‚ä® " => consequence

/-- Validity for a formula -/
def Valid (f : F) : Prop := ‚àÄ ‚¶Éa : Œ±‚¶Ñ, a ‚äß f

/-- Validity for a theory -/
def ValidTheory (T : Set F) : Prop := ‚àÄ ‚¶Éa : Œ±‚¶Ñ, a ‚äß* T

/-- Satisfiability for a formula -/
def Satisfiable (f : F) : Prop := ‚àÉ a : Œ±, a ‚äß f

/-- Satisfiability for a theory -/
def SatisfiableTheory (T : Set F) : Prop := ‚àÉ a : Œ±, a ‚äß* T

lemma valid_neg_iff (f : F) : Valid (~f) ‚Üî ¬¨Satisfiable f := by simp[Valid, Satisfiable]

lemma not_satisfiable_finset [DecidableEq F] (t : Finset F) :
    ¬¨SatisfiableTheory (t : Set F) ‚Üî Valid (t.image (~¬∑)).disj :=
  by simp[SatisfiableTheory, realizeTheory, Valid, Finset.map_disj]

lemma realizeTheory_of_subset {T U : Set F} {a : Œ±} (h : a ‚äß* U) (ss : T ‚äÜ U) : a ‚äß* T :=
  fun _ hf => h (ss hf)

@[simp] lemma realizeTheoryEmpty {a : Œ±} : a ‚äß* (‚àÖ : Set F) := fun p => by simp

@[simp] lemma realizeTheory_insert {T : Set F} {f : F} {a : Œ±} :
    a ‚äß* insert f T ‚Üî a ‚äß f ‚àß a ‚äß* T := by
  simp[realizeTheory]

@[simp] lemma realizeTheory_union {T U : Set F} {a : Œ±} :
    a ‚äß* T ‚à™ U ‚Üî a ‚äß* T ‚àß a ‚äß* U := by
  simp[realizeTheory]
  exact
  ‚ü®fun h => ‚ü®fun f hf => h (Or.inl hf), fun f hf => h (Or.inr hf)‚ü©,
   by rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© f (h | h); exact h‚ÇÅ h; exact h‚ÇÇ h‚ü©

@[simp] lemma realizeTheory_image {Œπ} {f : Œπ ‚Üí F} {A : Set Œπ} {a : Œ±} :
    a ‚äß* f '' A ‚Üî ‚àÄ i ‚àà A, a ‚äß (f i) := by simp[realizeTheory]

@[simp] lemma realizeTheory_range {Œπ} {f : Œπ ‚Üí F} {a : Œ±} :
    a ‚äß* Set.range f ‚Üî ‚àÄ i, a ‚äß (f i) := by simp[realizeTheory]

@[simp] lemma realizeTheory_setOf {P : F ‚Üí Prop} {a : Œ±}:
    a ‚äß* setOf P ‚Üî ‚àÄ f, P f ‚Üí a ‚äß f := by rfl

lemma SatisfiableTheory.of_subset {T U : Set F} (h : SatisfiableTheory U) (ss : T ‚äÜ U) :
    SatisfiableTheory T :=
  by rcases h with ‚ü®a, h‚ü©; exact ‚ü®a, realizeTheory_of_subset h ss‚ü©

lemma consequence_iff_not_satisfiable {f : F} {T : Set F} :
    T ‚ä® f ‚Üî ¬¨SatisfiableTheory (insert (~f) T) :=
  ‚ü®by rintro hT ‚ü®a, ha‚ü©
      have : a ‚äß f := hT (realizeTheory_of_subset ha (Set.subset_insert (~f) T))
      have : ¬¨a ‚äß f := by simpa using ha (Set.mem_insert (~f) T)
      contradiction,
   by intro h a ha; by_contra hn
      have : SatisfiableTheory (insert (~f) T) := ‚ü®a, by simp[*]‚ü©
      contradiction‚ü©

lemma weakening {T U : Set F} {f} (h : T ‚ä® f) (ss : T ‚äÜ U) : U ‚ä® f :=
  fun _ hs => h (realizeTheory_of_subset hs ss)

lemma of_mem {T : Set F} {f} (h : f ‚àà T) : T ‚ä® f := fun _ hs => hs h

lemma consequence_iff {T : Set F} {f : F} : T ‚ä® f ‚Üî ¬¨SatisfiableTheory (insert (~f) T) := by
  simp[consequence, SatisfiableTheory]; constructor
  ¬∑ intro h a hf hT; have : a ‚äß f := h hT; contradiction
  ¬∑ intro h a; contrapose; exact h a

/-- A `theory` is a set of formulas realizing a structure -/
def theory (a : Œ±) : Set F := {p | a ‚äß p}

/-- A `Subtheory` is a subset of realized formulas  -/
def Subtheory (T U : Set F) : Prop := ‚àÄ {f}, T ‚ä® f ‚Üí U ‚ä® f

/-- Definition for the equivalence of theories -/
def Equivalent (T U : Set F) : Prop := {f : F} ‚Üí T ‚ä® f ‚Üî U ‚ä® f

namespace Subtheory

variable (T U T‚ÇÅ T‚ÇÇ T‚ÇÉ : Set F)

@[refl] lemma refl : Subtheory T T := id

@[trans] protected lemma trans (h‚ÇÅ : Subtheory T‚ÇÅ T‚ÇÇ) (h‚ÇÇ : Subtheory T‚ÇÇ T‚ÇÉ) : Subtheory T‚ÇÅ T‚ÇÉ :=
  fun {f} b => h‚ÇÇ (h‚ÇÅ b : T‚ÇÇ ‚ä® f)

lemma ofSubset (h : T ‚äÜ U) : Subtheory T U := fun b => weakening b h

end Subtheory

lemma realizeTheory_of_subtheory {a : Œ±} {T U : Set F} (h : a ‚äß* U) (ss : Subtheory T U) :
    a ‚äß* T := fun _ hf => (ss (of_mem hf)) h

namespace Equivalent

variable (T U T‚ÇÅ T‚ÇÇ T‚ÇÉ : Set F)

@[refl] protected lemma refl : Equivalent T T := ‚ü®id, id‚ü©

@[symm] protected lemma symm (h : Equivalent T U) : Equivalent U T := Iff.symm h

@[trans] protected lemma trans (h‚ÇÅ : Equivalent T‚ÇÅ T‚ÇÇ) (h‚ÇÇ : Equivalent T‚ÇÇ T‚ÇÉ) : Equivalent T‚ÇÅ T‚ÇÉ :=
  Iff.trans h‚ÇÅ h‚ÇÇ

end Equivalent

class Mod (a : Œ±) (T : Set F) : Prop where
  realizeTheory : a ‚äß* T

namespace Mod

variable (a : Œ±) {T : Set F} [Mod a T]

lemma models {f : F} (hf : f ‚àà T) : a ‚äß f := realizeTheory hf

lemma iff : Mod a T ‚Üî a ‚äß* T := ‚ü®by rintro ‚ü®h‚ü©; exact h, fun h ‚Ü¶ ‚ü®h‚ü©‚ü©

lemma of_ss {T‚ÇÅ T‚ÇÇ : Set F} [Mod a T‚ÇÅ] (ss : T‚ÇÇ ‚äÜ T‚ÇÅ) : Mod a T‚ÇÇ :=
  ‚ü®realizeTheory_of_subset realizeTheory ss‚ü©

lemma of_subtheory {T‚ÇÅ T‚ÇÇ : Set F} [Mod a T‚ÇÅ] (h : Subtheory T‚ÇÇ T‚ÇÅ) : Mod a T‚ÇÇ :=
  ‚ü®realizeTheory_of_subtheory realizeTheory h‚ü©

end Mod

lemma consequence_iff' {T : Set F} {œÉ : F} :
    T ‚ä® œÉ ‚Üî (‚àÄ (a : Œ±) [Mod a T], a ‚äß œÉ) :=
  ‚ü®fun h _ hM => h hM.realizeTheory, fun H a hs => @H a ‚ü®hs‚ü©‚ü©

end Semantics

/-- Definition of a cumulative sequence of theories -/
def Cumulative (T : ‚Ñï ‚Üí Set F) : Prop := ‚àÄ s, T s ‚äÜ T (s + 1)

namespace Cumulative
/-
lemma subset_of_le {T : ‚Ñï ‚Üí Set F} (H : Cumulative T)
    {s‚ÇÅ s‚ÇÇ : ‚Ñï} (h : s‚ÇÅ ‚â§ s‚ÇÇ) : T s‚ÇÅ ‚äÜ T s‚ÇÇ := by
  suffices : ‚àÄ s d, T s ‚äÜ T (s + d)
  ¬∑ simpa[Nat.add_sub_of_le h] using this s‚ÇÅ (s‚ÇÇ - s‚ÇÅ)
  intro s d
  induction' d with d ih
  ¬∑ simp; rfl
  ¬∑ simpa[Nat.add_succ] using subset_trans ih (H (s + d))

lemma finset_mem {T : ‚Ñï ‚Üí Set F}
    (H : Cumulative T) {u : Finset F} (hu : ‚Üëu ‚äÜ ‚ãÉ s, T s) : ‚àÉ s, ‚Üëu ‚äÜ T s := by
  haveI := Classical.decEq
  induction u using Finset.induction
  case empty => exact ‚ü®0, by simp‚ü©
  case insert f u _ ih =>
    simp at hu
    have : ‚àÉ s, ‚Üëu ‚äÜ T s := ih (subset_trans (Set.subset_insert _ _) hu)
    rcases this with ‚ü®s, hs‚ü©
    have : ‚àÉ s', f ‚àà T s' := by simpa using (Set.insert_subset_iff.mp hu).1
    rcases this with ‚ü®s', hs'‚ü©
    exact ‚ü®max s s', by
      simp; exact Set.insert_subset
        (subset_of_le H (Nat.le_max_right s s') hs')
        (subset_trans hs (subset_of_le H $ Nat.le_max_left s s'))‚ü©
-/
end Cumulative

variable (F)
variable {Œ± : Type*} [Semantics F Œ±]

/-- A theory is satisfiable iff it is finitely satisfiable -/
class Compact : Prop where
  compact {T : Set F} :
    Semantics.SatisfiableTheory T ‚Üî (‚àÄ u : Finset F, ‚Üëu ‚äÜ T ‚Üí Semantics.SatisfiableTheory
    (u : Set F))

variable {F}

namespace Compact

variable [Compact F]
variable {a : Œ±}

lemma conseq_compact [DecidableEq F] {f : F} {T : Set F}:
    T ‚ä® f ‚Üî ‚àÉ u : Finset F, ‚Üëu ‚äÜ T ‚àß u ‚ä® f := by
  simp[Semantics.consequence_iff, compact (T := insert (~f) T)]
  constructor
  ¬∑ intro ‚ü®u, ss, hu‚ü©
    exact ‚ü®Finset.erase u (~f), by simp[ss],
      by simp; intro h; exact hu (Semantics.SatisfiableTheory.of_subset h (by simp))‚ü©
  ¬∑ intro ‚ü®u, ss, hu‚ü©
    exact ‚ü®insert (~f) u,
      by simpa using Set.insert_subset_insert ss, by simpa using hu‚ü©
/-
lemma compact_cumulative {T : ‚Ñï ‚Üí Set F} (hT : Cumulative T) :
    Semantics.SatisfiableTheory (‚ãÉ s, T s) ‚Üî ‚àÄ s, Semantics.SatisfiableTheory (T s) :=
  ‚ü®by intro H s
      exact H.of_subset (Set.subset_iUnion T s),
   by intro H
      apply compact.mpr
      intro u hu
      rcases hT.finset_mem hu with ‚ü®s, hs‚ü©
      exact (H s).of_subset hs ‚ü©
-/
end Compact

end ProofTheory
