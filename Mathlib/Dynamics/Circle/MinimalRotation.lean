import Mathlib.Topology.Instances.AddCircle
import Mathlib.Topology.Instances.Irrational
import Mathlib.Topology.Algebra.Order.Archimedean

/-!
-/

open Set Filter
open scoped Pointwise Topology

theorem AddSubgroup.dense_xor'_cyclic (s : AddSubgroup ‚Ñù) :
    Xor' (Dense (s : Set ‚Ñù)) (‚àÉ a, s = .zmultiples a) := by
  refine s.dense_or_cyclic.imp (fun hd ‚Ü¶ ‚ü®hd, ?_‚ü©) ?_
  ¬∑ rintro ‚ü®a, rfl‚ü©
    exact not_denseRange_zsmul a hd
  ¬∑ rintro ‚ü®a, rfl‚ü©
    rw [‚Üê zmultiples_eq_closure]
    exact ‚ü®‚ü®a, rfl‚ü©, not_denseRange_zsmul a‚ü©

namespace AddCircle

theorem dense_xor_cyclic_addSubgroup {p : ‚Ñù} (hp : p ‚â† 0) {s : AddSubgroup (AddCircle p)} :
    Xor' (Dense (s : Set (AddCircle p))) (‚àÉ a, 0 < addOrderOf a ‚àß s = .zmultiples a) := by
  have : Dense (s : Set (AddCircle p)) ‚Üî Dense (s.comap (QuotientAddGroup.mk' _) : Set ‚Ñù) :=
    (QuotientAddGroup.dense_preimage_mk _).symm
  if hd : Dense (s : Set (AddCircle p)) then
    simp only [hd, xor_true, not_exists, not_and, (QuotientAddGroup.mk'_surjective _).forall]
    rintro a ha rfl
    replace hd : Dense (AddSubgroup.closure {a, p} : Set ‚Ñù) := by
      rwa [this, ‚Üê AddMonoidHom.map_zmultiples, AddSubgroup.comap_map_eq,
        QuotientAddGroup.ker_mk', AddSubgroup.zmultiples_eq_closure,
        AddSubgroup.zmultiples_eq_closure, ‚Üê AddSubgroup.closure_union, ‚Üê Set.insert_eq] at hd
    obtain ‚ü®m, n, hn‚ÇÄ, h‚ü© : ‚àÉ m n : ‚Ñ§, n ‚â† 0 ‚àß m * (p / n) = a := by
      simp_rw [addOrderOf_pos_iff, isOfFinAddOrder_iff_zsmul_eq_zero, QuotientAddGroup.coe_mk',
        ‚Üê coe_zsmul, coe_eq_zero_iff, zsmul_eq_mul] at ha
      rcases ha with ‚ü®n, hn‚ÇÄ, m, hm‚ü©
      refine ‚ü®m, n, hn‚ÇÄ, ?_‚ü©
      rwa [‚Üê mul_div_assoc, div_eq_iff (by positivity), mul_comm a]
    have : AddSubgroup.closure {a, p} ‚â§ .zmultiples (p / n) := by
      rw [AddSubgroup.closure_le]
  else
    simp only [hd, xor_false, id]
    obtain ‚ü®a, ha‚ü© : ‚àÉ a, s.comap (QuotientAddGroup.mk' _) = .zmultiples a := by
      simp only [AddSubgroup.zmultiples_eq_closure]
      refine (s.comap _).dense_or_cyclic.resolve_left ?_
      rwa [this] at hd
    
  -- rw [‚Üê QuotientAddGroup.dense_preimage_mk, ‚Üê QuotientAddGroup.coe_mk', ‚Üê AddSubgroup.coe_comap,
  --   xor_iff_iff_not.1 (s.comap _).dense_xor'_cyclic, xor_not_left,
  --   QuotientAddGroup.mk_surjective.exists]
  -- simp_rw [addOrderOf_pos_iff, isOfFinAddOrder_iff_zsmul_eq_zero]
  -- constructor
  -- ¬∑ rintro ‚ü®a, ha‚ü©
  --   refine ‚ü®a, ?_, ?_‚ü©
  --   ¬∑ obtain ‚ü®m, rfl : m ‚Ä¢ a = p‚ü© : p ‚àà AddSubgroup.zmultiples a := by
  --       simp [‚Üê ha, AddCircle.coe_period, zero_mem]
  --     refine ‚ü®m, by simp_all, ?_‚ü©
  --     rw [‚Üê coe_zsmul, coe_period]
  --   ¬∑ rw [‚Üê QuotientAddGroup.coe_mk', ‚Üê AddMonoidHom.map_zmultiples, ‚Üê ha,
  --       AddSubgroup.map_comap_eq_self_of_surjective]
  --     exact QuotientAddGroup.mk_surjective
  -- ¬∑ rintro ‚ü®a, ha, rfl‚ü©
  --   suffices ‚àÉ b, AddSubgroup.closure
  --   obtain ‚ü®r, rfl‚ü© : ‚àÉ r : ‚Ñö, r * p = a := by
  --     simp_rw [‚Üê coe_zsmul, coe_eq_zero_iff] at ha
  --     rcases ha with ‚ü®n, hn‚ÇÄ, m, hm‚ü©
  --     rw [zsmul_eq_mul, zsmul_eq_mul, mul_comm _ a, ‚Üê div_eq_iff (by positivity),
  --       mul_div_right_comm] at hm
  --     use m / n
  --     simp [hm]
    

theorem dense_addSubmonoid_of_accPt_zero {p : ‚Ñù} {S : Type*} [SetLike S (AddCircle p)]
    [AddSubmonoidClass S (AddCircle p)] {s : S} (hp : p ‚â† 0)
    (h : AccPt (0 : AddCircle p) (ùìü s)) : Dense (s : Set (AddCircle p)) := by
  rw [‚Üê QuotientAddGroup.dense_preimage_mk, dense_iff_exists_between]
  intro a b hlt
  obtain ‚ü®x, hx‚ÇÄ, hxs, hx‚ü© : ‚àÉ x ‚â† (0 : ‚Ñù), ‚Üëx ‚àà s ‚àß |x| < b - a := by
    set t : Set (AddCircle p) := QuotientAddGroup.mk '' Ioo (a - b) (b - a)
    have ht : t ‚àà ùìù 0 :=
      (QuotientAddGroup.isOpenMap_coe _ _ isOpen_Ioo).mem_nhds ‚ü®0, by simp [hlt], rfl‚ü©
    rcases (accPt_iff_nhds ..).1 h t ht with ‚ü®_, ‚ü®‚ü®x, hx, rfl‚ü©, hxs‚ü©, hx‚ÇÄ‚ü©
    refine ‚ü®x, ne_of_apply_ne QuotientAddGroup.mk hx‚ÇÄ, hxs, ?_‚ü©
    rwa [abs_lt, neg_sub]
  obtain ‚ü®c, hc, n, hna, hnb‚ü© :
      ‚àÉ c ‚àà AddSubgroup.zmultiples p, ‚àÉ n : ‚Ñï, n ‚Ä¢ x ‚àà Ioo (a + c) (b + c) := by
    clear! s
    wlog hltx : 0 < x generalizing a b x
    ¬∑ obtain ‚ü®c, hc, n, hn‚ü© :=
        this (-b) (-a) (by gcongr) (-x) (neg_ne_zero.2 hx‚ÇÄ) (by rw [abs_neg]; linarith)
          (neg_pos.2 <| hx‚ÇÄ.lt_or_lt.resolve_right hltx)
      refine ‚ü®-c, neg_mem hc, n, ?_‚ü©
      simpa [add_comm, and_comm] using hn
    obtain ‚ü®c, hc, hc‚ÇÄ‚ü© : ‚àÉ c ‚àà AddSubgroup.zmultiples p, 0 ‚â§ a + c := by
      rcases Archimedean.arch (-a) (abs_pos.2 hp) with ‚ü®n, hn‚ü©
      refine ‚ü®n ‚Ä¢ |p|, nsmul_mem (abs_mem_iff.2 <| AddSubgroup.mem_zmultiples _) _, ?_‚ü©
      linarith
    use c, hc
    obtain ‚ü®n, hna, hn‚ü© : ‚àÉ n : ‚Ñ§, n ‚Ä¢ x ‚àà Ioc (a + c) (a + c + x) := by
      simpa only [zero_add] using (existsUnique_add_zsmul_mem_Ioc hltx 0 (a + c)).exists
    have hn‚ÇÄ : 0 ‚â§ n := by
      contrapose! hna
      exact (smul_nonpos_of_nonpos_of_nonneg hna.le hltx.le).trans hc‚ÇÄ
    lift n to ‚Ñï using hn‚ÇÄ
    refine ‚ü®n, mod_cast hna, mod_cast (hn.trans_lt ?_)‚ü©
    rw [abs_of_pos hltx] at hx
    linarith
  refine ‚ü®n ‚Ä¢ x - c, ?_, by linarith, by linarith‚ü©
  simp only [mem_preimage, QuotientAddGroup.mk_sub, QuotientAddGroup.mk_nsmul,
    (QuotientAddGroup.eq_zero_iff _).2 hc, sub_zero]
  exact nsmul_mem hxs _

theorem dense_zmultiples_tfae (a p : ‚Ñù) :
    List.TFAE [
      Dense (AddSubmonoid.multiples (a : AddCircle p) : Set (AddCircle p)),
      Dense (AddSubgroup.zmultiples (a : AddCircle p) : Set (AddCircle p)),
      Dense (AddSubgroup.closure {a, p} : Set ‚Ñù),
      Irrational (a / p)
    ] := by
  tfae_have 1 ‚Üí 2
  ¬∑ refine fun h ‚Ü¶ h.mono <| range_subset_iff.2 fun k ‚Ü¶ ?_
    exact ‚ü®k, mod_cast rfl‚ü©
  tfae_have 2 ‚Üî 3
  ¬∑ rw [‚Üê QuotientAddGroup.coe_mk', ‚Üê AddMonoidHom.map_zmultiples, AddSubgroup.coe_map,
      QuotientAddGroup.coe_mk', QuotientAddGroup.dense_image_mk,
      insert_eq, AddSubgroup.closure_union, AddSubgroup.zmultiples_eq_closure,
      AddSubgroup.zmultiples_eq_closure, AddSubgroup.add_normal]
  tfae_have 3 ‚Üí 4
  ¬∑ rintro h ‚ü®q, hq‚ü©
    obtain ‚ü®r, har, hpr‚ü© : ‚àÉ r, a ‚àà AddSubgroup.zmultiples r ‚àß p ‚àà AddSubgroup.zmultiples r := by
      rcases eq_or_ne p 0 with rfl | hp
      ¬∑ use a
        simp [zero_mem]
      ¬∑ refine ‚ü®p / q.den, ‚ü®q.num, ?_‚ü©, q.den, ?_‚ü©
        ¬∑ rw [‚Üê Rat.num_div_den q, Rat.cast_div] at hq
          field_simp [mul_comm] at *
          exact hq
        ¬∑ field_simp
    have : AddSubgroup.closure {a, p} ‚â§ AddSubgroup.zmultiples r := by
      simp [pair_subset_iff, AddSubgroup.mem_zmultiples_iff, har, hpr]
    exact not_denseRange_zsmul r (h.mono this)
  -- tfae_have 4 ‚Üí 1
  -- ¬∑ intro h
  --   have hp‚ÇÄ : p ‚â† 0 := by rintro rfl; simp at h
  --   apply dense_addSubmonoid_of_accPt_zero hp‚ÇÄ
  --   rw [AddSubmonoid.coe_multiples]
    
    

end AddCircle
