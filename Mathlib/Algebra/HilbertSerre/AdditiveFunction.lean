import Mathlib.Algebra.Homology.ShortComplex.ShortExact
import Mathlib.Algebra.Homology.ExactSequence
import Mathlib.Tactic.Linarith

open CategoryTheory CategoryTheory.Limits

universe u v

variable (ùíû : Type u) [Category.{v} ùíû]
variable [Abelian ùíû]

open ZeroObject

/--
A function `Œª : ùíû ‚Üí ‚Ñ§` is additive precisely when `Œª B = Œª A + Œª C` for every short exact sequence
`s := 0 --> A --> B --> C --> 0`.
-/
@[ext] structure AdditiveFunction :=
/--
A function `Œª : ùíû ‚Üí ‚Ñ§` is additive precisely when `Œª B = Œª A + Œª C` for every short exact sequence
`s := 0 --> A --> B --> C --> 0`.
-/
toFun : ùíû ‚Üí ‚Ñ§
/--
A function `Œª : ùíû ‚Üí ‚Ñ§` is additive precisely when `Œª B = Œª A + Œª C` for every short exact sequence
`s := 0 --> A --> B --> C --> 0`.
-/
additive (s : ShortComplex ùíû) (e : s.ShortExact) : toFun s.X‚ÇÅ + toFun s.X‚ÇÉ = toFun s.X‚ÇÇ

@[inherit_doc]
notation C "‚üπ+ ‚Ñ§" => AdditiveFunction C


@[inherit_doc]
notation C "==>+ ‚Ñ§" => AdditiveFunction C

namespace AdditiveFunction

variable {ùíû}
variable (Œº : ùíû ‚üπ+ ‚Ñ§)

instance : DFunLike (AdditiveFunction ùíû) ùíû (fun _ ‚Ü¶ ‚Ñ§) where
  coe Œº := Œº.toFun
  coe_injective' _ _ h := AdditiveFunction.ext _ _ h

lemma map_zero : Œº 0 = 0 := by
  let s : ShortComplex ùíû :=
  { X‚ÇÅ := 0
    X‚ÇÇ := 0
    X‚ÇÉ := 0
    f := 0
    g := 0
    zero := by aesop_cat }
  have hs : s.Exact
  ¬∑ rw [‚Üê exact_iff_shortComplex_exact (S := s)]
    change Exact 0 0
    exact exact_zero_mono 0
  replace hs : s.ShortExact
  ¬∑ fconstructor; exact hs
  have : Œº 0 + Œº 0 = Œº 0 := Œº.additive s hs
  aesop

lemma eq_of_iso {x y : ùíû} (e : x ‚âÖ y) : Œº x = Œº y := by
  let s : ShortComplex ùíû :=
  { X‚ÇÅ := x
    X‚ÇÇ := y
    X‚ÇÉ := 0
    f := e.hom
    g := 0
    zero := by aesop_cat }
  have hs : s.Exact
  ¬∑ rw [‚Üê exact_iff_shortComplex_exact (S := s)]
    change Exact e.hom 0
    exact exact_epi_zero e.hom
  replace hs : s.ShortExact
  ¬∑ fconstructor; exact hs
  have : Œº x + Œº 0 = Œº y := Œº.additive s hs
  rwa [map_zero, add_zero] at this

section

variable {A B : ùíû} (f : A ‚ü∂ B)

private noncomputable abbrev sc1 : ShortComplex ùíû where
  X‚ÇÅ := kernel f
  X‚ÇÇ := A
  X‚ÇÉ := image f
  f := kernel.Œπ _
  g := factorThruImage f
  zero := zero_of_comp_mono (image.Œπ f) <| by
    rw [Category.assoc, image.fac, kernel.condition]

private lemma sc1_exact : sc1 f |>.Exact := by
  rw [‚Üê exact_iff_shortComplex_exact]
  dsimp
  have e1 : Exact (kernel.Œπ f) f := by exact exact_kernel_Œπ
  have e2 : Exact (kernel.Œπ f) (factorThruImage f ‚â´ image.Œπ f)
  ¬∑ aesop_cat
  rwa [exact_comp_mono_iff] at e2

private lemma sc1_shortExact : sc1 f |>.ShortExact := by
  fconstructor; apply sc1_exact

private noncomputable abbrev sc2 : ShortComplex ùíû where
  X‚ÇÅ := image f
  X‚ÇÇ := B
  X‚ÇÉ := cokernel f
  f := image.Œπ _
  g := cokernel.œÄ _
  zero := by aesop_cat

private lemma sc2_exact : sc2 f |>.Exact := by
  rw [‚Üê exact_iff_shortComplex_exact]
  dsimp
  have e1 : Exact f (cokernel.œÄ f):= Abelian.exact_cokernel f
  have e2 : Exact (factorThruImage f ‚â´ image.Œπ f) (cokernel.œÄ f)
  ¬∑ aesop_cat
  exact Abelian.exact_epi_comp_iff _ _ _ |>.mp e2

private lemma sc2_shortExact : sc2 f |>.ShortExact := by
  fconstructor
  apply sc2_exact

lemma eq_apply_kernel_add_apply_image : Œº (kernel f) + Œº (image f) = Œº A :=
  Œº.additive _ <| sc1_shortExact f

lemma eq_apply_image_add_apply_cokernel : Œº (image f) + Œº (cokernel f) = Œº B :=
  Œº.additive _ <| sc2_shortExact f

lemma apply_kernel_sub_apply_cokernel_eq_apply_src_sub_apply_tgt :
    Œº (kernel f) - Œº (cokernel f) = Œº A - Œº B := by
  have eq1 := congr_arg‚ÇÇ (¬∑ - ¬∑) (Œº.eq_apply_kernel_add_apply_image f)
    (Œº.eq_apply_image_add_apply_cokernel f)
  simp only at eq1
  linarith

end

section ShortComplex

variable (s : ShortComplex ùíû) (hs : s.Exact)

private noncomputable def imageIsoKernel : image s.f ‚âÖ kernel s.g :=
  calc image s.f
    _ ‚âÖ imageSubobject s.f := imageSubobjectIso _ |>.symm
    _ ‚âÖ kernelSubobject s.g :=
      letI := imageToKernel_isIso_of_image_eq_kernel s.f s.g <|
        (Abelian.exact_iff_image_eq_kernel s.f s.g).mp <| exact_iff_shortComplex_exact _ |>.mpr hs
      asIso (imageToKernel s.f s.g _)
    _ ‚âÖ kernel s.g := kernelSubobjectIso _

lemma apply_shortComplex_of_exact : Œº (kernel s.f) - Œº (image s.g) = Œº s.X‚ÇÅ - Œº s.X‚ÇÇ := by
  have eq1 : Œº (kernel s.f) + Œº (image s.f) - (Œº (kernel s.g) + Œº (image s.g)) = Œº s.X‚ÇÅ - Œº s.X‚ÇÇ :=
    congr_arg‚ÇÇ (¬∑ - ¬∑)
      (Œº.eq_apply_kernel_add_apply_image s.f)
      (Œº.eq_apply_kernel_add_apply_image s.g)
  rw [Œº.eq_of_iso (imageIsoKernel s hs)] at eq1
  rwa [add_comm (Œº (kernel s.g)), add_sub_add_right_eq_sub] at eq1

lemma apply_shortComplex_of_exact' : Œº (kernel s.g) - Œº (cokernel s.g) = Œº s.X‚ÇÇ - Œº s.X‚ÇÉ :=
  Œº.apply_kernel_sub_apply_cokernel_eq_apply_src_sub_apply_tgt s.g

end ShortComplex

section ComposableArrows

section arbitrary_length

variable {N : ‚Ñï} (S : ComposableArrows ùíû N) (hS : S.Exact)

local notation "ker_" m => kernel (S.map' m (m + 1))
local notation "im_" m => image (S.map' m (m + 1))

private lemma im_eq_ker_succ (n : ‚Ñï) (hn : n + 2 ‚â§ N) : (im_ n) ‚âÖ ker_ (n + 1) :=
  calc (im_ n)
    _ ‚âÖ imageSubobject (S.map' n (n + 1)) := imageSubobjectIso _ |>.symm
    _ ‚âÖ kernelSubobject (S.map' (n + 1) (n + 2)) := by
      letI := imageToKernel_isIso_of_image_eq_kernel (S.map' n (n + 1)) (S.map' (n + 1) (n + 2)) <|
        (Abelian.exact_iff_image_eq_kernel (S.map' n (n + 1)) (S.map' (n + 1) (n + 2))).mp <|
        (exact_iff_shortComplex_exact (S.sc hS.toIsComplex n)).mpr <| hS.exact _
      exact asIso (imageToKernel _ _ _)
    _ ‚âÖ ker_ (n + 1) := kernelSubobjectIso _

lemma apply_image_eq_apply_ker_succ (n : ‚Ñï) (hn : n + 2 ‚â§ N) : Œº (im_ n) = Œº (ker_ (n + 1)) :=
  Œº.eq_of_iso (im_eq_ker_succ S hS n hn)

lemma apply_sub_apply_succ (n : ‚Ñï) (hn : n + 3 ‚â§ N) :
    Œº (S.obj' n) - Œº (S.obj' (n + 1)) =
    Œº (ker_ n) - Œº (ker_ (n + 2)) := by
  have eq0 : Œº (S.obj' n) - Œº (S.obj' (n + 1)) = Œº (ker_ n) - Œº (im_ (n + 1)) :=
    Œº.apply_shortComplex_of_exact (S.sc hS.toIsComplex n) (hS.exact _) |>.symm
  rw [apply_image_eq_apply_ker_succ (hS := hS)] at eq0
  exact eq0

end arbitrary_length

section length6

variable (S : ComposableArrows ùíû 5) (hS : S.Exact)

local notation "Œº_" n => Œº (S.obj' n)

lemma alternating_apply_aux_of_length6 :
    (Œº_ 0) - (Œº_ 1) + (Œº_ 2) - (Œº_ 3) + (Œº_ 4) - (Œº_ 5) =
    (Œº (kernel (S.map' 0 1)) - Œº (kernel (S.map' 4 5))) + (Œº_ 4) - (Œº_ 5) := by
  rw [show (Œº_ 0) - (Œº_ 1) + (Œº_ 2) - (Œº_ 3) + (Œº_ 4) - (Œº_ 5) =
    ((Œº_ 0) - (Œº_ 1)) + ((Œº_ 2) - (Œº_ 3)) + ((Œº_ 4) - (Œº_ 5)) by abel]
  rw [apply_sub_apply_succ (hS := hS) (n := 0), apply_sub_apply_succ (hS := hS) (n := 2)]
  all_goals try omega

lemma alternating_sum_apply_of_length6 :
    (Œº_ 0) - (Œº_ 1) + (Œº_ 2) - (Œº_ 3) + (Œº_ 4) - (Œº_ 5) =
    Œº (kernel (S.map' 0 1)) - Œº (cokernel (S.map' 4 5)) := by
  rw [Œº.alternating_apply_aux_of_length6 (hS := hS)]
  have := S.sc hS.toIsComplex 3
  have eq0 : _ = Œº (S.obj' 4) - Œº (S.obj' 5) :=
    Œº.apply_shortComplex_of_exact' (S.sc hS.toIsComplex 3)
  rw [add_sub_assoc, ‚Üê eq0]
  simp only [Int.ofNat_eq_coe, Int.Nat.cast_ofNat_Int, id_eq, Nat.cast_ofNat, Fin.zero_eta,
    Fin.mk_one, ComposableArrows.map', sub_add_sub_cancel]

lemma alternating_sum_apply_eq_zero_of_zero_zero_of_length6
    (left_zero : IsZero S.left) (right_zero : IsZero S.right) :
    (Œº_ 0) - (Œº_ 1) + (Œº_ 2) - (Œº_ 3) + (Œº_ 4) - (Œº_ 5) = 0 := by
  rw [alternating_sum_apply_of_length6 (hS := hS)]
  rw [show Œº (kernel (S.map' 0 1)) = 0 from ?_, show Œº (cokernel (S.map' 4 5)) = 0 from ?_,
    sub_zero]
  ¬∑ rw [Œº.eq_of_iso, Œº.map_zero]
    rw [show ComposableArrows.map' S 4 5 = 0 from IsZero.eq_zero_of_tgt right_zero _]
    exact cokernelZeroIsoTarget ‚â™‚â´ right_zero.isoZero
  ¬∑ rw [Œº.eq_of_iso, Œº.map_zero]
    rw [show ComposableArrows.map' S 0 1 = 0 from IsZero.eq_zero_of_src left_zero _]
    exact kernelZeroIsoSource ‚â™‚â´ left_zero.isoZero

end length6

end ComposableArrows

end AdditiveFunction
