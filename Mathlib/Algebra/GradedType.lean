import Mathlib.Algebra.Homology.DerivedCategory.Basic

open CategoryTheory Category Limits

universe u

abbrev GradedType (M : Type _) := M ‚Üí Type u

variable {M}

class HasGradedHSMul [Add M] (X Y : GradedType M) (Z : outParam (GradedType M)) where
  Œ≥hsmul' (a b c : M) (h : a + b = c) (Œ± : X a) (Œ≤ : Y b) : Z c

def HasGradedHSMul.Œ≥hsmul [Add M] {X Y : GradedType M} {Z : outParam (GradedType M)}
    [HasGradedHSMul X Y Z] {a b : M} (Œ± : X a) (Œ≤ : Y b) {c : M} (h : a + b = c) : Z c :=
  @HasGradedHSMul.Œ≥hsmul' M _ X Y Z _ a b c h Œ± Œ≤

notation a " ‚Ä¢[" b "] " c:80 => HasGradedHSMul.Œ≥hsmul a c b

variable [AddMonoid M] (X Y Z : GradedType M) (XY YZ XYZ : outParam (GradedType M))
  [HasGradedHSMul X Y XY] [HasGradedHSMul Y Z YZ]
  [HasGradedHSMul X YZ XYZ] [HasGradedHSMul XY Z XYZ]

class IsAssocGradedHSMul where
  Œ≥hsmul_assoc : ‚àÄ ‚¶Éa b c : M‚¶Ñ (Œ± : X a) (Œ≤ : Y b) (Œ≥ : Z c) (ab bc abc : M)
    (hab : a + b = ab) (hbc : b + c = bc) (habc : ab + c = abc),
      (Œ± ‚Ä¢[hab] Œ≤) ‚Ä¢[habc] Œ≥ =
        Œ± ‚Ä¢[show a + bc = abc by rw [‚Üê hbc, ‚Üê add_assoc, hab, habc]] (Œ≤ ‚Ä¢[hbc] Œ≥)

@[simp]
lemma Œ≥hsmul_assoc_of_third_degree_eq_zero
    [IsAssocGradedHSMul X Y Z XY YZ XYZ]
    {a b : M} (Œ± : X a) (Œ≤ : Y b) (Œ≥ : Z 0) (ab : M) (hab : a + b = ab) :
  (Œ± ‚Ä¢[hab] Œ≤) ‚Ä¢[add_zero _] Œ≥ = Œ± ‚Ä¢[hab] Œ≤ ‚Ä¢[add_zero _] Œ≥ := by
  apply IsAssocGradedHSMul.Œ≥hsmul_assoc

variable {X Y Z}

namespace CochainComplex

open HomComplex

variable {C : Type _} [Category C] [Preadditive C] (K L M N : CochainComplex C ‚Ñ§)

instance : HasGradedHSMul (Cochain K L) (Cochain L M) (Cochain K M) where
  Œ≥hsmul' _ _ _ h Œ± Œ≤ := Œ±.comp Œ≤ h

instance : One (Cochain K K 0) := ‚ü®Cochain.ofHom (ùüô K)‚ü©

instance : IsAssocGradedHSMul (Cochain K L) (Cochain L M) (Cochain M N) (Cochain K M)
    (Cochain L N) (Cochain K N) where
  Œ≥hsmul_assoc a b c Œ± Œ≤ Œ≥ ab bc abc hab hbc habc :=
    Cochain.comp_assoc _ _ _ hab hbc (by linarith)

example {n : ‚Ñ§} (Œ± : Cochain K L n) :
    (1 : Cochain K K 0) ‚Ä¢[zero_add n] Œ± = Œ± := Cochain.id_comp Œ±

example {a b c : ‚Ñ§} (Œ± : Cochain K L a) (Œ≤ : Cochain L M b) (Œ≥ : Cochain M N c) :
    (Œ± ‚Ä¢[rfl] Œ≤) ‚Ä¢[rfl] Œ≥ = Œ± ‚Ä¢[(add_assoc a b c).symm] (Œ≤ ‚Ä¢[rfl] Œ≥) :=
  by apply IsAssocGradedHSMul.Œ≥hsmul_assoc

example {a b : ‚Ñ§} (Œ± : Cochain K L a) (Œ≤ : Cochain L M b) (Œ≥ : Cochain M N 0) :
    (Œ± ‚Ä¢[rfl] Œ≤) ‚Ä¢[add_zero _] Œ≥ = Œ± ‚Ä¢[rfl] (Œ≤ ‚Ä¢[add_zero _] Œ≥) := by simp


end CochainComplex
