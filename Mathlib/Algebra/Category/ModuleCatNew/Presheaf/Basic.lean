import Mathlib.Algebra.Category.ModuleCatNew.ChangeOfRings
import Mathlib.Algebra.Category.Ring.Basic

universe v u v‚ÇÅ u‚ÇÅ

open CategoryTheory

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] (R : C·µí·µñ ‚•§ RingCat.{u})

structure PresheafOfModulesNew where
  obj (X : C·µí·µñ) : ModuleCatNew.{v} (R.obj X)
  map {X Y : C·µí·µñ} (f : X ‚ü∂ Y) : obj X ‚ü∂ (ModuleCatNew.restrictScalars (R.map f)).obj (obj Y)
  map_id (X : C·µí·µñ) :
    map (ùüô X) = (ModuleCatNew.restrictScalarsId (R.map_id X)).inv.app _ := by aesop_cat
  map_comp {X Y Z : C·µí·µñ} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
      map (f ‚â´ g) =
      map f ‚â´ (ModuleCatNew.restrictScalars _).map (map g) ‚â´
        (ModuleCatNew.restrictScalarsComp (R.map_comp f g)).inv.app _ := by aesop_cat

namespace PresheafOfModulesNew

variable {R}
variable (M M‚ÇÅ M‚ÇÇ M‚ÇÉ : PresheafOfModulesNew.{v} R)

@[ext]
structure Hom where
  app (X : C·µí·µñ) : M‚ÇÅ.obj X ‚ü∂ M‚ÇÇ.obj X
  naturality {X Y : C·µí·µñ} (f : X ‚ü∂ Y) :
      M‚ÇÅ.map f ‚â´ (ModuleCatNew.restrictScalars (R.map f)).map (app Y) =
        app X ‚â´ M‚ÇÇ.map f := by aesop_cat

attribute [reassoc (attr := simp)] Hom.naturality

@[simps]
def Hom.id : Hom M M where
  app _ := ùüô _

variable {M‚ÇÅ M‚ÇÇ M‚ÇÉ}

@[simps]
def Hom.comp (f : Hom M‚ÇÅ M‚ÇÇ) (g : Hom M‚ÇÇ M‚ÇÉ) : Hom M‚ÇÅ M‚ÇÉ where
  app _ := f.app _ ‚â´ g.app _

instance : Category (PresheafOfModulesNew.{v} R) where
  Hom := Hom
  id := Hom.id
  comp := Hom.comp

@[ext]
lemma hom_ext {f g : M‚ÇÅ ‚ü∂ M‚ÇÇ} (h : ‚àÄ (X : C·µí·µñ), f.app X = g.app X) :
    f = g := Hom.ext _ _ (by ext1; apply h)

end PresheafOfModulesNew
