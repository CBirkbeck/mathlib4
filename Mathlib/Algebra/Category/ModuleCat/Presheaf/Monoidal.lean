/-
Copyright (c) 2024 Dagur Asgeirsson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Dagur Asgeirsson, Jack McKoen, Jo√´l Riou
-/
import Mathlib.Algebra.Category.ModuleCat.Presheaf
import Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic

/-!
# The monoidal category structure on presheaves of modules

-/

noncomputable section

open CategoryTheory MonoidalCategory Category

universe v u v‚ÇÅ u‚ÇÅ

-- when cleaned up, this part should be moved to `ModuleCat.Monoidal.Basic`
namespace ModuleCat

variable {R : Type u} [CommRing R] {F G H K : ModuleCat.{u} R}

section

variable (f : F ‚Üí G ‚Üí H) (h‚ÇÅ : ‚àÄ m‚ÇÅ m‚ÇÇ n, f (m‚ÇÅ + m‚ÇÇ) n = f m‚ÇÅ n + f m‚ÇÇ n)
  (h‚ÇÇ : ‚àÄ (a : R) m n, f (a ‚Ä¢ m) n = a ‚Ä¢ f m n)
  (h‚ÇÉ : ‚àÄ m n‚ÇÅ n‚ÇÇ, f m (n‚ÇÅ + n‚ÇÇ) = f m n‚ÇÅ + f m n‚ÇÇ)
  (h‚ÇÑ : ‚àÄ (a : R) m n, f m (a ‚Ä¢ n) = a ‚Ä¢ f m n)

def tensorLift : F ‚äó G ‚ü∂ H := TensorProduct.lift (LinearMap.mk‚ÇÇ R f h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ)

@[simp]
lemma tensorLift_apply (m : F) (n : G) :
    tensorLift f h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ (m ‚äó‚Çú n) = f m n := rfl

end

lemma tensor_ext {f g : F ‚äó G ‚ü∂ H} (h : ‚àÄ m n, f (m ‚äó‚Çú n) = g (m ‚äó‚Çú n)) :
    f = g :=
  TensorProduct.ext (by ext; apply h)

@[simp]
lemma tensorHom_tmul (f : F ‚ü∂ G) (g : H ‚ü∂ K) (a : F) (b : H) :
    (f ‚äó g) (a ‚äó‚Çú b) = f a ‚äó‚Çú g b := rfl

lemma tensor_ext‚ÇÉ' {f g : (F ‚äó G) ‚äó H ‚ü∂ K} (h : ‚àÄ m n p, f (m ‚äó‚Çú n ‚äó‚Çú p) = g (m ‚äó‚Çú n ‚äó‚Çú p)) :
    f = g :=
  TensorProduct.ext_threefold h

end ModuleCat

variable {C : Type*} [Category C] {R : C·µí·µñ ‚•§ CommRingCat.{u}}

instance (X : C·µí·µñ) : CommRing ((R ‚ãô forget‚ÇÇ _ RingCat).obj X) :=
  inferInstanceAs (CommRing (R.obj X))

namespace PresheafOfModules

namespace Monoidal

variable (F G H K : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _))

def tensorObj' :
    BundledCorePresheafOfModules (R ‚ãô forget‚ÇÇ _ _) where
  obj X := F.obj' X ‚äó G.obj' X
  map {X Y} f := ModuleCat.tensorLift (fun x y ‚Ü¶ (F.map f x) ‚äó‚Çú (G.map f y))
    (by intros; dsimp; rw [map_add, TensorProduct.add_tmul])
    (by intros; dsimp; erw [F.map_smul]; rfl)
    (by intros; dsimp; rw [map_add, TensorProduct.tmul_add])
    (by intros; dsimp; simp; rfl)
  map_id X := ModuleCat.tensor_ext (by intros; dsimp; simp; rfl)
  map_comp f g := ModuleCat.tensor_ext (by intros; dsimp; simp; rfl)

def tensorObj : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _) :=
  (tensorObj' F G).toPresheafOfModules

variable {F G H K}

@[simp]
lemma tensorObj_map_tmul {X Y : C·µí·µñ}
    (x : F.obj' X) (y : G.obj' X) (f : X ‚ü∂ Y) :
    (tensorObj F G).map f (x ‚äó‚Çú[R.obj X] y) = (F.map f x) ‚äó‚Çú[R.obj Y] (G.map f y) := rfl

lemma tensorHom_aux (f : F ‚ü∂ H) (g : G ‚ü∂ K) {X Y : C·µí·µñ} (œÜ : X ‚ü∂ Y) :
    restrictionApp œÜ (tensorObj F G) ‚â´
      (ModuleCat.restrictScalars ((R ‚ãô forget‚ÇÇ _ RingCat).map œÜ)).map
        (Hom.app' f Y ‚äó Hom.app' g Y) =
      (Hom.app' f X ‚äó Hom.app' g X) ‚â´ restrictionApp œÜ (tensorObj H K) := by
  apply ModuleCat.tensor_ext
  intro a b
  change (Hom.app' f Y ‚äó Hom.app' g Y) (F.map œÜ a ‚äó‚Çú[R.obj Y] G.map œÜ b) =
    (H.map œÜ (Hom.app f X a)) ‚äó‚Çú[R.obj Y] (K.map œÜ (Hom.app g X b))
  erw [ModuleCat.tensorHom_tmul]
  congr 1
  all_goals apply naturality_apply

def tensorHom (f : F ‚ü∂ H) (g : G ‚ü∂ K) :
    tensorObj F G ‚ü∂ tensorObj H K :=
  Hom.mk'' (fun X ‚Ü¶ Hom.app' f X ‚äó Hom.app' g X)
    (by intros; apply tensorHom_aux)

variable (F)

def whiskerLeft (g : G ‚ü∂ H) : tensorObj F G ‚ü∂ tensorObj F H :=
  Hom.mk'' (fun X ‚Ü¶ F.obj' X ‚óÅ Hom.app' g X)
    (fun _ _ œÜ ‚Ü¶ tensorHom_aux (ùüô F) g œÜ)

variable {F}

def whiskerRight (f : F ‚ü∂ G) (H : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)) :
    tensorObj F H ‚ü∂ tensorObj G H :=
  Hom.mk'' (fun X ‚Ü¶ Hom.app' f X ‚ñ∑ H.obj' X )
    (fun _ _ œÜ ‚Ü¶ tensorHom_aux f (ùüô H) œÜ)

variable (F G H)

set_option maxHeartbeats 400000 in
def associator :
    tensorObj (tensorObj F G) H ‚âÖ tensorObj F (tensorObj G H) :=
  isoMk'' (fun X ‚Ü¶ Œ±_ (F.obj' X) (G.obj' X) (H.obj' X)) (by
    intros X Y f
    dsimp only [Functor.comp_obj, Functor.comp_map, evaluation_obj, ModuleCat.of_coe]
    apply ModuleCat.tensor_ext‚ÇÉ'
    intro a b c
    erw [comp_apply])

def leftUnitor : tensorObj (unit _) F ‚âÖ F :=
  isoMk'' (fun X ‚Ü¶ Œª_ (F.obj' X)) sorry

def rightUnitor : tensorObj F (unit _) ‚âÖ F :=
  isoMk'' (fun X ‚Ü¶ œÅ_ (F.obj' X)) sorry

instance monoidalCategoryStructPresheafOfModules :
    MonoidalCategoryStruct (PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)) where
  tensorObj F G := tensorObj F G
  whiskerLeft F _ _ g := whiskerLeft F g
  whiskerRight f H := whiskerRight f H
  tensorHom f g := tensorHom f g
  tensorUnit := unit _
  associator F G H := associator F G H
  leftUnitor F := leftUnitor F
  rightUnitor F := rightUnitor F

variable {F G H}

@[simp]
lemma evaluation_map_tensorHom (f : F ‚ü∂ H) (g : G ‚ü∂ K) (X : C·µí·µñ) :
    Hom.app' (f ‚äó g) X = Hom.app' f X ‚äó Hom.app' g X := rfl

variable (F)

@[simp]
lemma evaluation_map_whiskerLeft (g : G ‚ü∂ H) (X : C·µí·µñ) :
    Hom.app' (F ‚óÅ g) X = F.obj' X ‚óÅ Hom.app' g X := rfl

variable {F}

@[simp]
lemma evaluation_map_whiskerRight
    (f : F ‚ü∂ G) (H : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)) (X : C·µí·µñ) :
    Hom.app' (f ‚ñ∑ H) X = Hom.app' f X ‚ñ∑ H.obj' X := rfl

attribute [local ext] evaluation_jointly_faithful

-- what is the scope of the next two, global, or only this file?
attribute [-ext] Hom.ext
attribute [-simp] evaluation_map

@[simp]
lemma evaluation_map_associator_hom (X : C·µí·µñ) :
    Hom.app' (Œ±_ F G H).hom X =
      by exact (Œ±_ (F.obj' X) (G.obj' X) (H.obj' X)).hom := by
  rfl

lemma associator_naturality {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : PresheafOfModules.{u} (R ‚ãô forget‚ÇÇ _ _)}
    (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ):
    ((f‚ÇÅ ‚äó f‚ÇÇ) ‚äó f‚ÇÉ) ‚â´ (Œ±_ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ).hom =
      (Œ±_ X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom ‚â´ (f‚ÇÅ ‚äó f‚ÇÇ ‚äó f‚ÇÉ) := by
  ext1 X
  simp only [Functor.map_comp, evaluation_map_tensorHom,
    evaluation_map_associator_hom]
  exact MonoidalCategory.associator_naturality
    (Hom.app' f‚ÇÅ X) (Hom.app' f‚ÇÇ X) (Hom.app' f‚ÇÉ X)

variable (F G H K)

lemma pentagon :
    (Œ±_ F G H).hom ‚ñ∑ K ‚â´ (Œ±_ F (G ‚äó H) K).hom ‚â´ F ‚óÅ (Œ±_ G H K).hom =
      (Œ±_ (F ‚äó G) H K).hom ‚â´ (Œ±_ F G (H ‚äó K)).hom := by
  ext1 X
  simp only [Functor.comp_obj, Functor.map_comp, evaluation_map_whiskerRight,
    evaluation_map_associator_hom, evaluation_map_whiskerLeft]
  apply MonoidalCategory.pentagon (F.obj' X) (G.obj' X) (H.obj' X) (K.obj' X)

lemma triangle : (Œ±_ F (ùüô_ _) G).hom ‚â´ F ‚óÅ (Œª_ G).hom = (œÅ_ F).hom ‚ñ∑ G := by
  ext1 X
  simp only [Functor.map_comp, evaluation_map_associator_hom,
    evaluation_map_whiskerLeft, evaluation_map_whiskerRight]
  exact MonoidalCategory.triangle (F.obj' X) (G.obj' X)

set_option maxHeartbeats 400000 in
instance : MonoidalCategory (PresheafOfModules.{u} (R ‚ãô forget‚ÇÇ _ _)) where
  tensorHom_def _ _ := by ext1; simp [tensorHom_def]
  tensor_id _ _ := by ext1; simp; rfl
  tensor_comp f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ := by ext1; simp
  whiskerLeft_id _ _ := by ext1; simp; rfl
  id_whiskerRight _ _ := by ext1; simp; rfl
  associator_naturality := associator_naturality
  leftUnitor_naturality := sorry
  rightUnitor_naturality := sorry
  pentagon F G H K := pentagon F G H K
  triangle F G := triangle F G

end Monoidal

end PresheafOfModules
