import Mathlib.Algebra.Category.ModuleCat.Presheaf
import Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic

noncomputable section

open CategoryTheory MonoidalCategory

universe u v‚ÇÅ u‚ÇÅ

variable {C : Type*} [Category C] {R : C·µí·µñ ‚•§ CommRingCat.{u}}

namespace PresheafOfModules

abbrev obj' (F : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)) (X : C·µí·µñ) := (evaluation _ X).obj F

namespace Monoidal

#synth MonoidalCategory (ModuleCat ‚Ñ§)


def tensorObj' (F G : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)) :
    BundledCorePresheafOfModules (R ‚ãô forget‚ÇÇ _ _) where
  obj X := F.obj' X ‚äó G.obj' X
  map {X Y} f := by
    apply TensorProduct.lift (R := R.obj X)
    fapply LinearMap.mk‚ÇÇ
    ¬∑ refine fun x y ‚Ü¶ ?_
      let _ : CommSemiring ((R ‚ãô forget‚ÇÇ CommRingCat RingCat).obj Y) :=
        inferInstanceAs (CommSemiring (R.obj Y))
      exact (F.map f x) ‚äó‚Çú (G.map f y)
    all_goals sorry
  map_id := sorry
  map_comp := sorry

def tensorObj (F G : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)) : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _) :=
  (tensorObj' F G).toPresheafOfModules

@[simp]
lemma tensorObj_map_tmul {F G : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)} {X Y : C·µí·µñ}
    (x : F.obj' X) (y : G.obj' X) (f : X ‚ü∂ Y) :
    letI : CommSemiring ((R ‚ãô forget‚ÇÇ CommRingCat RingCat).obj X) :=
        inferInstanceAs (CommSemiring (R.obj X))
    letI : CommSemiring ((R ‚ãô forget‚ÇÇ CommRingCat RingCat).obj Y) :=
        inferInstanceAs (CommSemiring (R.obj Y))
    (tensorObj F G).map f (x ‚äó‚Çú y) = (F.map f x) ‚äó‚Çú (G.map f y) := rfl

def tensorHom {F G H K : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)} (f : F ‚ü∂ H) (g : G ‚ü∂ K) :
    tensorObj F G ‚ü∂ tensorObj H K := by
  refine Hom.mk''
    (fun X ‚Ü¶ ((evaluation (R ‚ãô forget‚ÇÇ _ _) X).map f) ‚äó ((evaluation (R ‚ãô forget‚ÇÇ _ _) X).map g))
    ?_
  intro X Y h
  apply TensorProduct.ext (R := R.obj X)
  ext a b
  dsimp
  simp only [ModuleCat.restrictScalars, ModuleCat.RestrictScalars.map']
  sorry
  -- change ((Hom.app f Y ‚äó Hom.app g Y) (restrictionApp _ _)) = _
  -- erw [comp_apply]
  -- erw [restrictionApp_apply, restrictionApp_apply]


def whiskerLeft (F : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _))
    {G H : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)} (g : G ‚ü∂ H) : tensorObj F G ‚ü∂ tensorObj F H := by
  fapply Hom.mk''
  ¬∑ intro X
    let F' := (evaluation (R ‚ãô forget‚ÇÇ _ _) X).obj F
    exact F' ‚óÅ ((evaluation (R ‚ãô forget‚ÇÇ _ _) X).map g)
  ¬∑ sorry

def whiskerRight {F G : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)}
    (f : F ‚ü∂ G) (H : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _))  : tensorObj F H ‚ü∂ tensorObj G H := by
  fapply Hom.mk''
  ¬∑ intro X
    exact ((evaluation (R ‚ãô forget‚ÇÇ _ _) X).map f) ‚ñ∑ (evaluation (R ‚ãô forget‚ÇÇ _ _) X).obj H
  ¬∑ sorry

def associator (F G H : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)) :
    tensorObj (tensorObj F G) H ‚âÖ tensorObj F (tensorObj G H) := by
  fapply isoMk''
  ¬∑ intro X
    exact Œ±_ (F.obj' X) (G.obj' X) (H.obj' X)
  ¬∑ sorry

def leftUnitor (F : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)) : tensorObj (unit _) F ‚âÖ F := by
  fapply isoMk''
  ¬∑ intro X
    exact Œª_ (F.obj' X)
  ¬∑ sorry

def rightUnitor (F : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)) : tensorObj F (unit _) ‚âÖ F := by
  fapply isoMk''
  ¬∑ intro X
    exact œÅ_ (F.obj' X)
  ¬∑ sorry

instance monoidalCategoryStructPresheafOfModules :
    MonoidalCategoryStruct (PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)) where
  tensorObj F G := tensorObj F G
  whiskerLeft F _ _ g := whiskerLeft F g
  whiskerRight f H := whiskerRight f H
  tensorHom f g := tensorHom f g
  tensorUnit := unit _
  associator F G H := associator F G H
  leftUnitor F := leftUnitor F
  rightUnitor F := rightUnitor F

@[simp]
lemma evaluation_map_tensorHom {F G H K : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)}
    (f : F ‚ü∂ H) (g : G ‚ü∂ K) (X : C·µí·µñ) : ((evaluation _ X).map (f ‚äó g)) =
      ((evaluation _ X).map f) ‚äó ((evaluation _ X).map g) := rfl

@[simp]
lemma evaluation_map_whiskerLeft (F : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _))
    {G H : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)} (g : G ‚ü∂ H)
    (X : C·µí·µñ) : ((evaluation _ X).map (F ‚óÅ g)) =
      ((evaluation _ X).obj F) ‚óÅ ((evaluation _ X).map g) := rfl

@[simp]
lemma evaluation_map_whiskerRight {F G : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)}
    (f : F ‚ü∂ G) (H : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _))
    (X : C·µí·µñ) : ((evaluation _ X).map (f ‚ñ∑ H)) =
      ((evaluation _ X).map f) ‚ñ∑ ((evaluation _ X).obj H) := rfl

lemma evaluation_jointly_faithful {F G : PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)} (f g : F ‚ü∂ G)
    (h : ‚àÄ (X : C·µí·µñ), (evaluation _ X).map f = (evaluation _ X).map g) : f = g := by
  ext1 X
  exact h _

attribute [local ext] evaluation_jointly_faithful
attribute [-ext] Hom.ext
attribute [-simp] evaluation_map

@[simp]
lemma evaluation_map_associator_hom {F G H : PresheafOfModules.{u} (R ‚ãô forget‚ÇÇ _ _)} (X : C·µí·µñ) :
    (evaluation (R ‚ãô forget‚ÇÇ _ _) X).map (Œ±_ F G H).hom =
      (Œ±_ (F.obj' X) (G.obj' X) (H.obj' X)).hom ‚â´ (by exact (ùüô _)) := by
  rfl

lemma pentagon (F G H K : PresheafOfModules (R ‚ãô forget‚ÇÇ CommRingCat RingCat)) :
    (Œ±_ F G H).hom ‚ñ∑ K ‚â´ (Œ±_ F (G ‚äó H) K).hom ‚â´ F ‚óÅ (Œ±_ G H K).hom =
      (Œ±_ (F ‚äó G) H K).hom ‚â´ (Œ±_ F G (H ‚äó K)).hom := by
  ext1 X
  simp only [Functor.comp_obj, Functor.map_comp, evaluation_map_whiskerRight,
    evaluation_map_associator_hom, Category.comp_id, evaluation_map_whiskerLeft]
  apply MonoidalCategory.pentagon (F.obj' X) (G.obj' X) (H.obj' X) (K.obj' X)

set_option maxHeartbeats 400000 in
instance : MonoidalCategory (PresheafOfModules (R ‚ãô forget‚ÇÇ _ _)) where
  tensorHom_def _ _ := by ext1; simp [tensorHom_def]
  tensor_id _ _ := by
    ext1
    simp only [Functor.comp_obj, evaluation_obj, evaluation_map_tensorHom,
      CategoryTheory.Functor.map_id, tensorHom_id, id_whiskerRight]
    rfl
  tensor_comp f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ := by ext1; simp
  whiskerLeft_id _ _ := by ext1; simp; rfl
  id_whiskerRight _ _ := by ext1; simp; rfl
  associator_naturality := sorry
  leftUnitor_naturality := sorry
  rightUnitor_naturality := sorry
  pentagon F G H K := pentagon F G H K
  triangle := sorry
