/-
Copyright (c) 2024 Joรซl Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joรซl Riou
-/
import Mathlib.Algebra.Category.ModuleCat.Presheaf.Generator
import Mathlib.Algebra.Category.ModuleCat.Presheaf.Pushforward
import Mathlib.CategoryTheory.Adjunction.PartialAdjoint

/-!
# Pullback of presheaves of modules

Let `F : C โฅค D` be a functor, `R : Dแตแต โฅค RingCat` and `S : Cแตแต โฅค RingCat` be presheaves
of rings, and `ฯ : S โถ F.op โ R` be a morphism of presheaves of rings,
we introduce the pullback functor `pullback : PresheafOfModules S โฅค PresheafOfModules R`
as the left adjoint of `pushforward : PresheafOfModules R โฅค PresheafOfModules S`.
The existence of this left adjoint functor is obtained under suitable universe assumptions (TODO).

-/

universe v vโ vโ vโ uโ uโ uโ u

open CategoryTheory Limits Opposite

namespace PresheafOfModules

section

variable {C : Type uโ} [Category.{vโ} C] {D : Type uโ} [Category.{vโ} D]
variable {F : C โฅค D} {R : Dแตแต โฅค RingCat.{u}} {S : Cแตแต โฅค RingCat.{u}} (ฯ : S โถ F.op โ R)

variable [(pushforward.{v} ฯ).IsRightAdjoint]

/-- The pullback functor `PresheafOfModules S โฅค PresheafOfModules R` induced by
a morphism of presheaves of rings `S โถ F.op โ R`, defined as the left adjoint
functor to the pushforward, when it exists. -/
noncomputable def pullback : PresheafOfModules.{v} S โฅค PresheafOfModules.{v} R :=
  (pushforward.{v} ฯ).leftAdjoint

/-- Given a morphism of presheaves of rings `S โถ F.op โ R`, this is the adjunction
between associated pullback and pushforward functors on the categories
of presheaves of modules. -/
noncomputable def pullbackPushforwardAdjunction : pullback.{v} ฯ โฃ pushforward.{v} ฯ :=
  Adjunction.ofIsRightAdjoint (pushforward ฯ)

/-- Given a morphism of presheaves of rings `ฯ : S โถ F.op โ R`, this is property
that the (partial) left adjoint functor of `pushforward ฯ` is defined
on a certain object `M : PresheafOfModules S`. -/
abbrev PullbackObjIsDefined : PresheafOfModules.{v} S โ Prop :=
  (pushforward ฯ).LeftAdjointObjIsDefined

end

section

variable {C D : Type u} [SmallCategory C] [SmallCategory D]
  {F : C โฅค D} {R : Dแตแต โฅค RingCat.{u}} {S : Cแตแต โฅค RingCat.{u}} (ฯ : S โถ F.op โ R)

/-- Given a morphism of presheaves of rings `ฯ : S โถ F.op โ R`, where `F : C โฅค D`,
`S : Cแตแต โฅค RingCat`, `R : Dแตแต โฅค RingCat` and `X : C`, the (partial) left adjoint
functor of `pushforward ฯ` is defined on the object `(free S).obj (yoneda.obj X)`:
this object shall be mapped to `(free R).obj (yoneda.obj (F.obj X))`. -/
noncomputable def pushforwardCompCoyonedaFreeYonedaCorepresentableBy (X : C) :
    (pushforward ฯ โ coyoneda.obj (op ((free S).obj (yoneda.obj X)))).CorepresentableBy
      ((free R).obj (yoneda.obj (F.obj X))) where
  homEquiv {M} := (freeYonedaEquiv).trans
    (freeYonedaEquiv (M := (pushforward ฯ).obj M)).symm
  homEquiv_comp {M N} g f := freeYonedaEquiv.injective (by
    dsimp
    erw [Equiv.apply_symm_apply, freeYonedaEquiv_comp]
    conv_rhs => erw [freeYonedaEquiv_comp]
    erw [Equiv.apply_symm_apply]
    rfl)

lemma pullbackObjIsDefined_free_yoneda (X : C) :
    PullbackObjIsDefined ฯ ((free S).obj (yoneda.obj X)) :=
  (pushforwardCompCoyonedaFreeYonedaCorepresentableBy ฯ X).isCorepresentable

lemma pullbackObjIsDefined_eq_top :
    PullbackObjIsDefined.{u} ฯ = โค := by
  ext M
  simp only [Pi.top_apply, Prop.top_eq_true, iff_true]
  apply Functor.leftAdjointObjIsDefined_of_isColimit
    M.isColimitFreeYonedaCoproductsCokernelCofork
  rintro (_ | _)
  all_goals
    apply Functor.leftAdjointObjIsDefined_colimit _
      (fun _ โฆ pullbackObjIsDefined_free_yoneda _ _)

instance : (pushforward.{u} ฯ).IsRightAdjoint :=
  Functor.isRightAdjoint_of_leftAdjointObjIsDefined_eq_top
    (pullbackObjIsDefined_eq_top ฯ)

end

section

variable {C : Type uโ} [Category.{vโ} C] {D : Type uโ} [Category.{vโ} D]
  {E : Type uโ} [Category.{vโ} E]

variable {F : C โฅค D} {R : Dแตแต โฅค RingCat.{u}} {S : Cแตแต โฅค RingCat.{u}} (ฯ : S โถ F.op โ R)
  {G : D โฅค E} {T : Eแตแต โฅค RingCat.{u}} (ฯ : R โถ G.op โ T)

instance : (pushforward.{v} (F := ๐ญ C) (๐ S)).IsRightAdjoint :=
  Functor.isRightAdjoint_of_iso (pushforwardId.{v} S).symm

noncomputable def pullbackId : pullback.{v} (F := ๐ญ C) (๐ S) โ ๐ญ _ :=
  ((conjugateIsoEquiv (pullbackPushforwardAdjunction.{v} (F := ๐ญ C) (๐ S))
    Adjunction.id).symm (pushforwardId S)).symm

section

variable [(pushforward.{v} ฯ).IsRightAdjoint] [(pushforward.{v} ฯ).IsRightAdjoint]

instance : (pushforward.{v} (F := F โ G) (ฯ โซ whiskerLeft F.op ฯ)).IsRightAdjoint :=
  Functor.isRightAdjoint_of_iso (pushforwardComp.{v} ฯ ฯ).symm

noncomputable def pullbackComp :
    pullback.{v} (F := F โ G) (ฯ โซ whiskerLeft F.op ฯ) โ
      pullback.{v} ฯ โ pullback.{v} ฯ :=
  (conjugateIsoEquiv
    ((pullbackPushforwardAdjunction ฯ).comp (pullbackPushforwardAdjunction ฯ))
    (pullbackPushforwardAdjunction (F := F โ G) (ฯ โซ whiskerLeft F.op ฯ))).symm
      (pushforwardComp ฯ ฯ).symm

end

-- TODO: show lemmas `pullback_assoc`, `pullback_id_comp`, `pullback_comp_id` similar
-- to those obtained for the pushforward

end

end PresheafOfModules
