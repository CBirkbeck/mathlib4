/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Category.ModuleCat.Presheaf
import Mathlib.Algebra.Category.ModuleCat.Pseudofunctor
import Mathlib.CategoryTheory.Bicategory.NaturalTransformation.Oplax

/-!
# The endofunctor of presheaves of modules induced by an oplax natural transformation

In this file, we show that any oplax natural transformation from
`ModuleCat.restrictScalarsPseudofunctor` to itself induces
a functor `PresheafOfModules.{v} R ‚•§ PresheafOfModules.{v} R`
for any presheaf of rings.

TODO: the commutative case seems more useful

-/

universe v v‚ÇÅ u‚ÇÅ u

namespace CategoryTheory

open Bicategory

namespace OplaxFunctor

variable {B C : Type*} [Bicategory B] [Bicategory C]
  (F : OplaxFunctor B C)

section

/-- More flexible variant of `mapId`. -/
def mapId' {b : B} (f : b ‚ü∂ b) (hf : f = ùüô b) :
    F.map f ‚ü∂ ùüô _ :=
  F.map‚ÇÇ (eqToHom (by rw [hf])) ‚â´ F.mapId _

lemma mapId'_eq_mapId (b : B) :
    F.mapId' (ùüô b) rfl = F.mapId b := by
  simp [mapId']

/-- More flexible variant of `mapComp`. -/
def mapComp' {b‚ÇÄ b‚ÇÅ b‚ÇÇ : B} (f : b‚ÇÄ ‚ü∂ b‚ÇÅ) (g : b‚ÇÅ ‚ü∂ b‚ÇÇ) (fg : b‚ÇÄ ‚ü∂ b‚ÇÇ) (h : fg = f ‚â´ g) :
    F.map fg ‚ü∂ F.map f ‚â´ F.map g :=
  F.map‚ÇÇ (eqToHom (by rw [h])) ‚â´ F.mapComp f g

lemma mapComp'_eq_mapComp {b‚ÇÄ b‚ÇÅ b‚ÇÇ : B} (f : b‚ÇÄ ‚ü∂ b‚ÇÅ) (g : b‚ÇÅ ‚ü∂ b‚ÇÇ) :
    F.mapComp' f g _ rfl = F.mapComp f g := by
  simp [mapComp']

end

end OplaxFunctor

namespace OplaxNatTrans

variable {B C : Type*} [Bicategory B] [Bicategory C]
  {F G : OplaxFunctor B C} (œÑ : OplaxNatTrans F G)

lemma naturality_id' {b : B} (f : b ‚ü∂ b) (hf : f = ùüô b) :
    œÑ.naturality f ‚â´ œÑ.app _ ‚óÅ G.mapId' f hf =
      F.mapId' f hf ‚ñ∑ œÑ.app b ‚â´ (Œª_ _).hom ‚â´ (œÅ_ _).inv := by
  subst hf
  simp only [OplaxFunctor.mapId'_eq_mapId, naturality_id]

end OplaxNatTrans

end CategoryTheory

open CategoryTheory Category Limits Opposite

lemma ModuleCat.restrictScalarsPseudofunctor_mapId' {R : RingCat.{u}} (f : R ‚ü∂ R) (hf : f = ùüô _) :
  ModuleCat.restrictScalarsPseudofunctor.toOplax.mapId'
    ‚ü®f.op‚ü© (by subst hf; rfl) = (ModuleCat.restrictScalarsId' f hf).hom := by
  subst hf
  apply OplaxFunctor.mapId'_eq_mapId

namespace PresheafOfModules

variable (œÑ : OplaxNatTrans ModuleCat.restrictScalarsPseudofunctor.{v, u}.toOplax
  ModuleCat.restrictScalarsPseudofunctor.{v, u}.toOplax)
  {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {R : C·µí·µñ ‚•§ RingCat.{u}}

@[simps]
noncomputable def functorOfOplaxNatTransObj (M : PresheafOfModules.{v} R) :
    PresheafOfModules.{v} R where
  obj := fun X ‚Ü¶ (œÑ.app (LocallyDiscrete.mk (op (R.obj X)))).obj (M.obj X)
  map := fun {X Y} f ‚Ü¶ (œÑ.app _).map (M.map f) ‚â´
    (œÑ.naturality (Quiver.Hom.toLoc (R.map f).op)).app (M.obj Y)
  map_id := fun X ‚Ü¶ by
    dsimp only
    rw [map_id, ‚Üê cancel_mono ((ModuleCat.restrictScalarsId' _ (R.map_id X)).hom.app _),
      assoc, Iso.inv_hom_id_app]
    have := NatTrans.congr_app
      (œÑ.naturality_id' (b := ‚ü®‚ü®R.obj X‚ü©‚ü©) ‚ü®‚ü®R.map (ùüô X)‚ü©‚ü© (by rw [R.map_id]; rfl)) (M.obj X)
    dsimp at this
    erw [ModuleCat.restrictScalarsPseudofunctor_mapId'] at this
    erw [this]
    erw [Iso.hom_inv_id_app]
    dsimp
    rw [comp_id, ‚Üê Functor.map_comp, Iso.inv_hom_id, CategoryTheory.Functor.map_id]
  map_comp := sorry

variable (R)

/-- Any oplax natural transformation from `ModuleCat.restrictScalarsPseudofunctor`
to itself induces a functor `PresheafOfModules R ‚•§ PresheafOfModules R`. -/
@[simps! obj_obj]
noncomputable def functorOfOplaxNatTrans :
  PresheafOfModules.{v} R ‚•§ PresheafOfModules.{v} R where
  obj := functorOfOplaxNatTransObj œÑ
  map {M N} œÜ :=
    { app := fun X ‚Ü¶ (œÑ.app _).map (œÜ.app X)
      naturality := fun {X Y} f ‚Ü¶ by
        dsimp [functorOfOplaxNatTransObj]
        rw [assoc, ‚Üê Functor.map_comp_assoc, ‚Üê œÜ.naturality,
          Functor.map_comp_assoc]
        erw [‚Üê NatTrans.naturality]
        rfl }

end PresheafOfModules
