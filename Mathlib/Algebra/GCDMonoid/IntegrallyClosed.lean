/-
Copyright (c) 2022 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.Algebra.GCDMonoid.Basic
import Mathlib.RingTheory.IntegrallyClosed
import Mathlib.RingTheory.Polynomial.Eisenstein.Basic

#align_import algebra.gcd_monoid.integrally_closed from "leanprover-community/mathlib"@"2032a878972d5672e7c27c957e7a6e297b044973"

/-!

# GCD domains are integrally closed

-/


open scoped BigOperators Polynomial

variable {R A : Type*} [CommRing R] [IsDomain R] [GCDMonoid R] [CommRing A] [Algebra R A]

theorem IsLocalization.surj_of_gcd_domain (M : Submonoid R) [IsLocalization M A] (z : A) :
    ‚àÉ a b : R, IsUnit (gcd a b) ‚àß z * algebraMap R A b = algebraMap R A a := by
  obtain ‚ü®x, ‚ü®y, hy‚ü©, rfl‚ü© := IsLocalization.mk'_surjective M z
  -- ‚ä¢ ‚àÉ a b, IsUnit (gcd a b) ‚àß mk' A x { val := y, property := hy } * ‚Üë(algebraMa ‚Ä¶
  obtain ‚ü®x', y', hx', hy', hu‚ü© := extract_gcd x y
  -- ‚ä¢ ‚àÉ a b, IsUnit (gcd a b) ‚àß mk' A x { val := y, property := hy } * ‚Üë(algebraMa ‚Ä¶
  use x', y', hu
  -- ‚ä¢ mk' A x { val := y, property := hy } * ‚Üë(algebraMap R A) y' = ‚Üë(algebraMap R ‚Ä¶
  rw [mul_comm, IsLocalization.mul_mk'_eq_mk'_of_mul]
  -- ‚ä¢ mk' A (y' * x) { val := y, property := hy } = ‚Üë(algebraMap R A) x'
  convert IsLocalization.mk'_mul_cancel_left (M := M) (S := A) _ _ using 2
  -- ‚ä¢ y' * x = ‚Üë{ val := y, property := hy } * x'
  rw [Subtype.coe_mk, hy', ‚Üê mul_comm y', mul_assoc]; conv_lhs => rw [hx']
  -- ‚ä¢ y' * x = y' * (gcd x y * x')
                                                      -- üéâ no goals
#align is_localization.surj_of_gcd_domain IsLocalization.surj_of_gcd_domain

instance (priority := 100) GCDMonoid.toIsIntegrallyClosed : IsIntegrallyClosed R :=
  ‚ü®fun {X} ‚ü®p, hp‚ÇÅ, hp‚ÇÇ‚ü© => by
    obtain ‚ü®x, y, hg, he‚ü© := IsLocalization.surj_of_gcd_domain (nonZeroDivisors R) X
    -- ‚ä¢ ‚àÉ y, ‚Üë(algebraMap R (FractionRing R)) y = X
    have :=
      Polynomial.dvd_pow_natDegree_of_eval‚ÇÇ_eq_zero (IsFractionRing.injective R <| FractionRing R)
        hp‚ÇÅ y x _ hp‚ÇÇ (by rw [mul_comm, he])
    have : IsUnit y := by
      rw [isUnit_iff_dvd_one, ‚Üê one_pow]
      exact
        (dvd_gcd this <| dvd_refl y).trans
          (gcd_pow_left_dvd_pow_gcd.trans <| pow_dvd_pow_of_dvd (isUnit_iff_dvd_one.1 hg) _)
    use x * (this.unit‚Åª¬π : _)
    -- ‚ä¢ ‚Üë(algebraMap R (FractionRing R)) (x * ‚Üë(IsUnit.unit this)‚Åª¬π) = X
    erw [map_mul, ‚Üê Units.coe_map_inv, eq_comm, Units.eq_mul_inv_iff_mul_eq]
    -- ‚ä¢ X * ‚Üë(‚Üë(Units.map ‚Üë(algebraMap R (FractionRing R))) (IsUnit.unit this)) = ‚Üë( ‚Ä¶
    exact he‚ü©
    -- üéâ no goals
#align gcd_monoid.to_is_integrally_closed GCDMonoid.toIsIntegrallyClosed
