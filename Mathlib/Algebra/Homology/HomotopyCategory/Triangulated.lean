import Mathlib.Algebra.Homology.HomotopyCategory.Pretriangulated
import Mathlib.CategoryTheory.Triangulated.Triangulated

open CategoryTheory Category Limits Pretriangulated

variable {C : Type _} [Category C] [Preadditive C] [HasZeroObject C] [HasBinaryBiproducts C]
  {X‚ÇÅ X‚ÇÇ X‚ÇÉ : CochainComplex C ‚Ñ§} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : X‚ÇÇ ‚ü∂ X‚ÇÉ)

namespace CochainComplex

namespace MappingCone

open HomComplex

@[simps! mor‚ÇÅ mor‚ÇÇ mor‚ÇÉ]
noncomputable def mappingConeCompTriangle : Triangle (CochainComplex C ‚Ñ§) :=
  Triangle.mk (map' f (f ‚â´ g) (ùüô X‚ÇÅ) g (by rw [id_comp]))
    (map' (f ‚â´ g) g f (ùüô X‚ÇÉ) (by rw [comp_id]))
    (triangleŒ¥ g ‚â´ (inr f)‚ü¶1‚üß')

namespace MappingConeCompHomotopyEquiv

@[simp]
noncomputable def hom : mappingCone g ‚ü∂ mappingCone (mappingConeCompTriangle f g).mor‚ÇÅ :=
  lift _ (descCocycle g (Cochain.ofHom (inr f)) 0 (zero_add 1) (by simp))
    (descCochain _ 0 (Cochain.ofHom (inr (f ‚â´ g))) (neg_add_self 1)) sorry

lemma inv : mappingCone (mappingConeCompTriangle f g).mor‚ÇÅ ‚ü∂ mappingCone g := sorry

end MappingConeCompHomotopyEquiv

noncomputable def mappingConeCompHomotopyEquiv : HomotopyEquiv (mappingCone g)
    (mappingCone (mappingConeCompTriangle f g).mor‚ÇÅ) where
  hom := MappingConeCompHomotopyEquiv.hom f g
  inv := MappingConeCompHomotopyEquiv.inv f g
  homotopyHomInvId := sorry
  homotopyInvHomId := sorry

lemma mappingConeCompHomotopyEquiv_comm‚ÇÅ :
  inr (mappingConeCompTriangle f g).mor‚ÇÅ ‚â´
    (mappingConeCompHomotopyEquiv f g).inv = (mappingConeCompTriangle f g).mor‚ÇÇ := sorry

lemma mappingConeCompHomotopyEquiv_comm‚ÇÇ :
  (mappingConeCompHomotopyEquiv f g).hom ‚â´
    triangleŒ¥ (mappingConeCompTriangle f g).mor‚ÇÅ =
  (mappingConeCompTriangle f g).mor‚ÇÉ := sorry

end MappingCone

end CochainComplex

namespace HomotopyCategory

lemma mappingConeCompTriangle_distinguished :
  (quotient _ _).mapTriangle.obj (CochainComplex.MappingCone.mappingConeCompTriangle f g) ‚àà
    distTriang (HomotopyCategory C (ComplexShape.up ‚Ñ§)) := sorry

--attribute [local simp] CochainComplex.MappingCone.map'

instance : IsTriangulated (HomotopyCategory C (ComplexShape.up ‚Ñ§)) :=
  IsTriangulated.mk' (by
    rintro ‚ü®X‚ÇÅ : CochainComplex C ‚Ñ§‚ü© ‚ü®X‚ÇÇ : CochainComplex C ‚Ñ§‚ü© ‚ü®X‚ÇÉ : CochainComplex C ‚Ñ§‚ü© u‚ÇÅ‚ÇÇ' u‚ÇÇ‚ÇÉ'
    obtain ‚ü®u‚ÇÅ‚ÇÇ, rfl‚ü© := (HomotopyCategory.quotient C (ComplexShape.up ‚Ñ§)).map_surjective u‚ÇÅ‚ÇÇ'
    obtain ‚ü®u‚ÇÇ‚ÇÉ, rfl‚ü© := (HomotopyCategory.quotient C (ComplexShape.up ‚Ñ§)).map_surjective u‚ÇÇ‚ÇÉ'
    have pif := mappingCone_triangle_distinguished u‚ÇÅ‚ÇÇ
    refine' ‚ü®_, _, _, _, _, _, _, _,
      Iso.refl _, Iso.refl _, Iso.refl _, by dsimp ; simp, by dsimp ; simp,
        _, _, mappingCone_triangle_distinguished u‚ÇÅ‚ÇÇ,
        _, _, mappingCone_triangle_distinguished u‚ÇÇ‚ÇÉ,
        _, _, mappingCone_triangle_distinguished (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ), ‚ü®_‚ü©‚ü©
    let Œ± := CochainComplex.MappingCone.triangleMap' u‚ÇÅ‚ÇÇ (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ) (ùüô X‚ÇÅ) u‚ÇÇ‚ÇÉ (by rw [id_comp])
    let Œ≤ := CochainComplex.MappingCone.triangleMap' (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ) u‚ÇÇ‚ÇÉ u‚ÇÅ‚ÇÇ (ùüô X‚ÇÉ) (by rw [comp_id])
    apply Triangulated.Octahedron.mk ((HomotopyCategory.quotient _ _).map Œ±.hom‚ÇÉ)
      ((HomotopyCategory.quotient _ _).map Œ≤.hom‚ÇÉ)
      ((quotient C (ComplexShape.up ‚Ñ§)).mapTriangle.map Œ±).comm‚ÇÇ
      (((quotient C (ComplexShape.up ‚Ñ§)).mapTriangle.map Œ±).comm‚ÇÉ.symm.trans
        (Eq.trans (by congr ; dsimp ; simp) (comp_id _)))
      (((HomotopyCategory.quotient _ _).mapTriangle.map Œ≤).comm‚ÇÇ.trans (id_comp _))
      (((HomotopyCategory.quotient _ _).mapTriangle.map Œ≤).comm‚ÇÉ)
    refine' isomorphic_distinguished _ (mappingConeCompTriangle_distinguished u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ) _ _
    refine' Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _) _ _ _
    . dsimp
      simp
    . dsimp
      simp
    . dsimp
      erw [CategoryTheory.Functor.map_id, comp_id, id_comp, Functor.map_comp, assoc, assoc,
        ‚Üê NatTrans.naturality]
      rfl)

end HomotopyCategory
