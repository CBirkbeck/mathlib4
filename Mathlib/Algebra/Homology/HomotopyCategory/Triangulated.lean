import Mathlib.Algebra.Homology.HomotopyCategory.Pretriangulated
import Mathlib.CategoryTheory.Triangulated.Triangulated
import Mathlib.CategoryTheory.ArrowTwo

open CategoryTheory Category Limits Pretriangulated

variable {C : Type _} [Category C] [Preadditive C] [HasZeroObject C] [HasBinaryBiproducts C]
  {X‚ÇÅ X‚ÇÇ X‚ÇÉ : CochainComplex C ‚Ñ§} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (g : X‚ÇÇ ‚ü∂ X‚ÇÉ)

namespace CochainComplex

namespace MappingCone

open HomComplex

@[simps! mor‚ÇÅ mor‚ÇÇ mor‚ÇÉ obj‚ÇÅ obj‚ÇÇ obj‚ÇÉ]
noncomputable def mappingConeCompTriangle : Triangle (CochainComplex C ‚Ñ§) :=
  Triangle.mk (map' f (f ‚â´ g) (ùüô X‚ÇÅ) g (by rw [id_comp]))
    (map' (f ‚â´ g) g f (ùüô X‚ÇÉ) (by rw [comp_id]))
    (triangleŒ¥ g ‚â´ (inr f)‚ü¶1‚üß')

lemma mappingConeCompTriangle_mor‚ÇÉ_naturality {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : CochainComplex C ‚Ñ§} (f' : Y‚ÇÅ ‚ü∂ Y‚ÇÇ)
    (g' : Y‚ÇÇ ‚ü∂ Y‚ÇÉ) (œÜ : Arrow‚ÇÇ.mk f g ‚ü∂ Arrow‚ÇÇ.mk f' g') :
    map' g g' œÜ.œÑ‚ÇÅ œÜ.œÑ‚ÇÇ œÜ.commg.symm ‚â´ (mappingConeCompTriangle f' g').mor‚ÇÉ =
      (mappingConeCompTriangle f g).mor‚ÇÉ ‚â´ (map' f f' œÜ.œÑ‚ÇÄ œÜ.œÑ‚ÇÅ œÜ.commf.symm)‚ü¶(1 : ‚Ñ§)‚üß' := by
  ext n
  simp [from_ext_iff _ _ _ (n+1) rfl, map']

namespace MappingConeCompHomotopyEquiv

@[simp]
noncomputable def hom : mappingCone g ‚ü∂ mappingCone (mappingConeCompTriangle f g).mor‚ÇÅ :=
  lift _ (descCocycle g (Cochain.ofHom (inr f)) 0 (zero_add 1) (by simp))
    (descCochain _ 0 (Cochain.ofHom (inr (f ‚â´ g))) (neg_add_self 1)) (by
    ext ‚ü®p, _, rfl‚ü©
    dsimp [mappingConeCompTriangle, map']
    simp [from_ext_iff _ _ _ _ rfl,
      inl_v_d_assoc _ (p+1) p (p+2) (by linarith) (by linarith)])

@[simp]
noncomputable def inv : mappingCone (mappingConeCompTriangle f g).mor‚ÇÅ ‚ü∂ mappingCone g :=
  desc _ ((snd f).comp (inl g) (zero_add (-1)))
    (desc _ ((Cochain.ofHom f).comp (inl g) (zero_add (-1))) (inr g) (by simp)) (by
      ext p
      dsimp [map']
      rw [from_ext_iff _ _ _ (p+1) rfl, to_ext_iff _ _ _ (p+1) rfl]
      simp [Œ¥_zero_cochain_comp, Œµ_neg,
        Cochain.comp_v _ _ (add_neg_self 1) p (p+1) p (by linarith) (by linarith)])


lemma hom_inv_id : hom f g ‚â´ inv f g = ùüô _ := by
  ext n
  dsimp [map']
  simp [lift_desc_f _ _ _ _ _ _ _ n (n+1) rfl,
    from_ext_iff _ _ _ (n+1) rfl]

open CochainComplex.HomComplex

set_option maxHeartbeats 400000 in
noncomputable def homotopyInvHomId : Homotopy (inv f g ‚â´ hom f g) (ùüô _) :=
  (Cochain.equivHomotopy _ _).symm (by
    refine' ‚ü®-((snd _).comp ((fst (f ‚â´ g)).1.comp ((inl f).comp (inl _) (by linarith))
      (show 1 + (-2) = -1 by linarith)) (zero_add (-1))), _‚ü©
    simp only [Œ¥_neg, Œ¥_zero_cochain_comp, Œµ_neg, Œµ_1, one_smul, neg_smul,
      Œ¥_comp _ _ (show 1+(-2) = -1 by linarith) 2 (-1) 0 (by linarith) (by linarith) (by linarith),
      Œ¥_comp _ _ (show (-1)+(-1) = -2 by linarith) 0 0 (-1) (by linarith)
        (by linarith) (by linarith),
      Œµ_even 2 ‚ü®1, by linarith‚ü©, Œ¥_inl, Œ¥_snd, Cocycle.Œ¥_eq_zero, Cochain.zero_comp,
      add_zero, Cochain.neg_comp, neg_neg]
    ext n
    rw [from_ext_iff _ _ _ (n+1) rfl, from_ext_iff _ _ _ (n+1) rfl,
      from_ext_iff _ _ _ (n+2) (show n+1+1 = n+2 by linarith)]
    simp only [to_ext_iff _ _ _ (n+1) rfl,
      map', Cochain.comp_v _ _ (add_neg_self 1) n (n + 1) n (by linarith) (by linarith),
      Cochain.comp_v _ _ (show 1 + -2 = -1 by linarith) (n + 1) (n + 2) n
        (by linarith) (by linarith),
      Cochain.comp_v _ _ (show (-1) + -1 = -2 by linarith) (n + 2) (n + 1) n
        (by linarith) (by linarith), Cochain.ofHom_v, mappingConeCompTriangle_obj‚ÇÅ,
      mappingConeCompTriangle_obj‚ÇÇ, mappingConeCompTriangle_mor‚ÇÅ, inv, hom,
      Cochain.ofHom_comp, ofHom_desc, ofHom_lift, descCocycle_coe, Cocycle.coe_zero,
      Cochain.zero_cochain_comp_v, inl_v_descCochain_v_assoc, assoc, inl_v_snd_v_assoc,
      zero_comp, Cochain.id_comp, Cochain.comp_assoc_of_first_is_zero_cochain,
      Cochain.comp_add, Cochain.comp_neg, Cochain.comp_assoc_of_second_is_zero_cochain,
      neg_add_rev, neg_neg, Cochain.add_v, Cochain.neg_v, Cochain.comp_zero_cochain_v,
      HomologicalComplex.id_f, Preadditive.comp_add, Preadditive.comp_neg, inl_v_fst_v_assoc,
      neg_zero, add_zero, comp_id, add_left_neg, and_self, inr_f_snd_v_assoc,
      liftCochain_v_fst_v, inl_v_descCochain_v, inr_f_descCochain_v_assoc,
      inr_f_fst_v_assoc, comp_zero, zero_add, inl_v_fst_v, liftCochain_v_snd_v, Cochain.zero_v,
      inl_v_snd_v, neg_add_cancel_right, inr_f_descCochain_v, inr_f_fst_v, inr_f_snd_v])

end MappingConeCompHomotopyEquiv

@[simps]
noncomputable def mappingConeCompHomotopyEquiv : HomotopyEquiv (mappingCone g)
    (mappingCone (mappingConeCompTriangle f g).mor‚ÇÅ) where
  hom := MappingConeCompHomotopyEquiv.hom f g
  inv := MappingConeCompHomotopyEquiv.inv f g
  homotopyHomInvId := Homotopy.ofEq (MappingConeCompHomotopyEquiv.hom_inv_id f g)
  homotopyInvHomId := MappingConeCompHomotopyEquiv.homotopyInvHomId f g

lemma mappingConeCompHomotopyEquiv_comm‚ÇÅ :
    inr (mappingConeCompTriangle f g).mor‚ÇÅ ‚â´
      (mappingConeCompHomotopyEquiv f g).inv = (mappingConeCompTriangle f g).mor‚ÇÇ := by
  dsimp [map', MappingConeCompHomotopyEquiv.inv]
  simp

lemma mappingConeCompHomotopyEquiv_comm‚ÇÇ :
    (mappingConeCompHomotopyEquiv f g).hom ‚â´ triangleŒ¥ (mappingConeCompTriangle f g).mor‚ÇÅ =
      (mappingConeCompTriangle f g).mor‚ÇÉ := by
  ext n
  dsimp [map']
  simp [lift_f _ _ _ _ _ (n+1) rfl, from_ext_iff _ _ _ (n+1) rfl]

end MappingCone

end CochainComplex

namespace HomotopyCategory

set_option maxHeartbeats 400000 in
lemma mappingConeCompTriangle_distinguished :
  (quotient _ _).mapTriangle.obj (CochainComplex.MappingCone.mappingConeCompTriangle f g) ‚àà
    distTriang (HomotopyCategory C (ComplexShape.up ‚Ñ§)) := by
  refine' ‚ü®_, _, (CochainComplex.MappingCone.mappingConeCompTriangle f g).mor‚ÇÅ, ‚ü®_‚ü©‚ü©
  refine' Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (isoOfHomotopyEquiv
    (CochainComplex.MappingCone.mappingConeCompHomotopyEquiv f g)) _ _ _
  . dsimp
    simp
  . rw [‚Üê cancel_mono (isoOfHomotopyEquiv
      (CochainComplex.MappingCone.mappingConeCompHomotopyEquiv f g)).inv,
      assoc, Iso.hom_inv_id, comp_id, Iso.refl_hom, id_comp,
      isoOfHomotopyEquiv_inv]
    simp only [Functor.mapTriangle_obj, Triangle.mk_mor‚ÇÇ]
    rw [‚Üê CochainComplex.MappingCone.mappingConeCompHomotopyEquiv_comm‚ÇÅ]
    simp
  . simp only [Functor.mapTriangle_obj, Triangle.mk_mor‚ÇÉ,
      ‚Üê CochainComplex.MappingCone.mappingConeCompHomotopyEquiv_comm‚ÇÇ f g]
    simp

noncomputable instance : IsTriangulated (HomotopyCategory C (ComplexShape.up ‚Ñ§)) :=
  IsTriangulated.mk' (by
    rintro ‚ü®X‚ÇÅ : CochainComplex C ‚Ñ§‚ü© ‚ü®X‚ÇÇ : CochainComplex C ‚Ñ§‚ü© ‚ü®X‚ÇÉ : CochainComplex C ‚Ñ§‚ü© u‚ÇÅ‚ÇÇ' u‚ÇÇ‚ÇÉ'
    obtain ‚ü®u‚ÇÅ‚ÇÇ, rfl‚ü© := (HomotopyCategory.quotient C (ComplexShape.up ‚Ñ§)).map_surjective u‚ÇÅ‚ÇÇ'
    obtain ‚ü®u‚ÇÇ‚ÇÉ, rfl‚ü© := (HomotopyCategory.quotient C (ComplexShape.up ‚Ñ§)).map_surjective u‚ÇÇ‚ÇÉ'
    refine' ‚ü®_, _, _, _, _, _, _, _,
      Iso.refl _, Iso.refl _, Iso.refl _, by dsimp ; simp, by dsimp ; simp,
        _, _, mappingCone_triangle_distinguished u‚ÇÅ‚ÇÇ,
        _, _, mappingCone_triangle_distinguished u‚ÇÇ‚ÇÉ,
        _, _, mappingCone_triangle_distinguished (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ), ‚ü®_‚ü©‚ü©
    let Œ± := CochainComplex.MappingCone.triangleMap' u‚ÇÅ‚ÇÇ (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ) (ùüô X‚ÇÅ) u‚ÇÇ‚ÇÉ (by rw [id_comp])
    let Œ≤ := CochainComplex.MappingCone.triangleMap' (u‚ÇÅ‚ÇÇ ‚â´ u‚ÇÇ‚ÇÉ) u‚ÇÇ‚ÇÉ u‚ÇÅ‚ÇÇ (ùüô X‚ÇÉ) (by rw [comp_id])
    apply Triangulated.Octahedron.mk ((HomotopyCategory.quotient _ _).map Œ±.hom‚ÇÉ)
      ((HomotopyCategory.quotient _ _).map Œ≤.hom‚ÇÉ)
      ((quotient C (ComplexShape.up ‚Ñ§)).mapTriangle.map Œ±).comm‚ÇÇ
      (((quotient C (ComplexShape.up ‚Ñ§)).mapTriangle.map Œ±).comm‚ÇÉ.symm.trans
        (Eq.trans (by congr ; dsimp ; simp) (comp_id _)))
      (((HomotopyCategory.quotient _ _).mapTriangle.map Œ≤).comm‚ÇÇ.trans (id_comp _))
      (((HomotopyCategory.quotient _ _).mapTriangle.map Œ≤).comm‚ÇÉ)
    refine' isomorphic_distinguished _ (mappingConeCompTriangle_distinguished u‚ÇÅ‚ÇÇ u‚ÇÇ‚ÇÉ) _ _
    refine' Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) (Iso.refl _) _ _ _
    . dsimp
      simp
    . dsimp
      simp
    . dsimp
      erw [CategoryTheory.Functor.map_id, comp_id, id_comp, Functor.map_comp, assoc, assoc,
        ‚Üê NatTrans.naturality]
      rfl)

end HomotopyCategory
