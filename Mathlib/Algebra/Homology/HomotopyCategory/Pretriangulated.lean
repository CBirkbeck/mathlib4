import Mathlib.Algebra.Homology.HomotopyCategory.MappingCone
import Mathlib.CategoryTheory.Triangulated.Functor
import Mathlib.CategoryTheory.Triangulated.Pretriangulated

import Mathlib.Tactic.LibrarySearch

open CategoryTheory Category Limits CochainComplex.HomComplex Pretriangulated ZeroObject

variable {C : Type _} [Category C] [Preadditive C] [HasZeroObject C] [HasBinaryBiproducts C]
variable {K L : CochainComplex C ‚Ñ§} (œÜ : K ‚ü∂ L)

namespace CochainComplex

namespace MappingCone

noncomputable def triangleŒ¥ : mappingCone œÜ ‚ü∂ K‚ü¶(1 : ‚Ñ§)‚üß :=
  Cocycle.homOf ((-fst œÜ).rightShift 1 0 (zero_add 1))

@[simp]
noncomputable def triangle : Triangle (CochainComplex C ‚Ñ§) :=
  Triangle.mk œÜ (inr œÜ) (triangleŒ¥ œÜ)

variable (K)

noncomputable def homotopyToZeroOfId : Homotopy (ùüô (mappingCone (ùüô K))) 0 :=
  descHomotopy (ùüô K) _ _ 0 (inl _) (by simp) (by simp)

variable {K}

section map

variable {K‚ÇÅ L‚ÇÅ K‚ÇÇ L‚ÇÇ : CochainComplex C ‚Ñ§} {œÜ‚ÇÅ : K‚ÇÅ ‚ü∂ L‚ÇÅ} {œÜ‚ÇÇ : K‚ÇÇ ‚ü∂ L‚ÇÇ}
  {a : K‚ÇÅ ‚ü∂ K‚ÇÇ} {b : L‚ÇÅ ‚ü∂ L‚ÇÇ} (H : Homotopy (œÜ‚ÇÅ ‚â´ b) (a ‚â´ œÜ‚ÇÇ))

noncomputable def map : mappingCone œÜ‚ÇÅ ‚ü∂ mappingCone œÜ‚ÇÇ :=
  desc œÜ‚ÇÅ ((Cochain.ofHom a).comp (inl œÜ‚ÇÇ) (zero_add _) +
      ((Cochain.equivHomotopy _ _) H : Cochain K‚ÇÅ L‚ÇÇ (-1)).comp
    (Cochain.ofHom (inr œÜ‚ÇÇ)) (add_zero _)) (b ‚â´ inr œÜ‚ÇÇ) (by simp)

def comm‚ÇÇ : Homotopy (inr œÜ‚ÇÅ ‚â´ map H) (b ‚â´ inr œÜ‚ÇÇ) := by
  sorry

lemma comm‚ÇÉ : triangleŒ¥ œÜ‚ÇÅ ‚â´ a‚ü¶1‚üß' = map H ‚â´ triangleŒ¥ œÜ‚ÇÇ := by
  ext p
  rw [from_ext_iff _ _ _ _ rfl]
  dsimp [triangleŒ¥, map]
  simp only [Cochain.rightShift_v _ 1 0 _ p p _ (p+1) rfl,
    shiftFunctor_obj_X, Cochain.neg_v, shiftFunctorObjXIso,
    HomologicalComplex.XIsoOfEq_rfl, Iso.refl_inv, comp_id, Preadditive.neg_comp,
    Preadditive.comp_neg, inl_v_fst_v_assoc, inl_v_desc_f_assoc,
    Cochain.add_v, Cochain.zero_cochain_comp_v, Cochain.ofHom_v, Cochain.comp_zero_cochain_v,
    Preadditive.add_comp, assoc, inl_v_fst_v, inr_f_fst_v, comp_zero, add_zero,
    inr_f_fst_v_assoc, zero_comp, neg_zero, inr_f_desc_f_assoc,
    HomologicalComplex.comp_f, and_self]

@[simps]
noncomputable def triangleMap :
    (HomotopyCategory.quotient _ _).mapTriangle.obj (CochainComplex.MappingCone.triangle œÜ‚ÇÅ) ‚ü∂
    (HomotopyCategory.quotient _ _).mapTriangle.obj (CochainComplex.MappingCone.triangle œÜ‚ÇÇ) where
  hom‚ÇÅ := (HomotopyCategory.quotient _ _).map a
  hom‚ÇÇ := (HomotopyCategory.quotient _ _).map b
  hom‚ÇÉ := (HomotopyCategory.quotient _ _).map (map H)
  comm‚ÇÅ := by
    dsimp
    simp only [‚Üê Functor.map_comp]
    exact HomotopyCategory.eq_of_homotopy _ _ H
  comm‚ÇÇ := by
    dsimp
    simp only [‚Üê Functor.map_comp]
    exact HomotopyCategory.eq_of_homotopy _ _ (comm‚ÇÇ H)
  comm‚ÇÉ := by
    dsimp
    rw [‚Üê Functor.map_comp_assoc, ‚Üê comm‚ÇÉ H, Functor.map_comp, Category.assoc,
      Category.assoc]
    erw [‚Üê NatTrans.naturality]
    rfl

end map

end MappingCone

end CochainComplex

namespace HomotopyCategory

variable (C)

def distinguishedTriangles : Set (Triangle (HomotopyCategory C (ComplexShape.up ‚Ñ§))) :=
  fun T => ‚àÉ (X Y : CochainComplex C ‚Ñ§) (f : X ‚ü∂ Y),
    Nonempty (T ‚âÖ (HomotopyCategory.quotient C (ComplexShape.up ‚Ñ§)).mapTriangle.obj
      (CochainComplex.MappingCone.triangle f))

variable {C}

lemma isomorphic_distinguished (T‚ÇÅ : Triangle (HomotopyCategory C (ComplexShape.up ‚Ñ§)))
    (hT‚ÇÅ : T‚ÇÅ ‚àà distinguishedTriangles C) (T‚ÇÇ : Triangle (HomotopyCategory C (ComplexShape.up ‚Ñ§)))
    (e : T‚ÇÇ ‚âÖ T‚ÇÅ) : T‚ÇÇ ‚àà distinguishedTriangles C := by
  obtain ‚ü®X, Y, f, ‚ü®e'‚ü©‚ü© := hT‚ÇÅ
  exact ‚ü®X, Y, f, ‚ü®e ‚â™‚â´ e'‚ü©‚ü©

lemma contractible_distinguished (X : HomotopyCategory C (ComplexShape.up ‚Ñ§)) :
    contractibleTriangle X ‚àà distinguishedTriangles C := by
  obtain ‚ü®X‚ü© := X
  refine' ‚ü®_, _, ùüô X, ‚ü®_‚ü©‚ü©
  have h := (isZero_quotient_obj_iff _).2 ‚ü®CochainComplex.MappingCone.homotopyToZeroOfId X‚ü©
  exact Triangle.isoMk _ _ (Iso.refl _) (Iso.refl _) h.isoZero.symm
    (by simp) (h.eq_of_tgt _ _) (by dsimp ; ext)

lemma distinguished_cocone_triangle (X Y : HomotopyCategory C (ComplexShape.up ‚Ñ§)) (f : X ‚ü∂ Y) :
    ‚àÉ (Z : HomotopyCategory C (ComplexShape.up ‚Ñ§)) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ X‚ü¶1‚üß),
      Triangle.mk f g h ‚àà distinguishedTriangles C := by
  obtain ‚ü®X‚ü© := X
  obtain ‚ü®Y‚ü© := Y
  obtain ‚ü®f, rfl‚ü© := quotient_map_surjective f
  exact ‚ü®_, _, _, ‚ü®_, _, f, ‚ü®Iso.refl _‚ü©‚ü©‚ü©

lemma complete_distinguished_triangle_morphism
    (T‚ÇÅ T‚ÇÇ : Triangle (HomotopyCategory C (ComplexShape.up ‚Ñ§)))
    (hT‚ÇÅ : T‚ÇÅ ‚àà distinguishedTriangles C) (hT‚ÇÇ : T‚ÇÇ ‚àà distinguishedTriangles C)
    (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ) (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ) (fac : T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ) :
    ‚àÉ (c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ), T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ ‚àß
      T‚ÇÅ.mor‚ÇÉ ‚â´ a‚ü¶(1 : ‚Ñ§)‚üß' = c ‚â´ T‚ÇÇ.mor‚ÇÉ := by
  obtain ‚ü®K‚ÇÅ, L‚ÇÅ, œÜ‚ÇÅ, ‚ü®e‚ÇÅ‚ü©‚ü© := hT‚ÇÅ
  obtain ‚ü®K‚ÇÇ, L‚ÇÇ, œÜ‚ÇÇ, ‚ü®e‚ÇÇ‚ü©‚ü© := hT‚ÇÇ
  obtain ‚ü®a', ha'‚ü© : ‚àÉ (a' : (quotient _ _).obj K‚ÇÅ ‚ü∂ (quotient _ _).obj K‚ÇÇ),
    a' = e‚ÇÅ.inv.hom‚ÇÅ ‚â´ a ‚â´ e‚ÇÇ.hom.hom‚ÇÅ := ‚ü®_, rfl‚ü©
  obtain ‚ü®b', hb'‚ü© : ‚àÉ (b' : (quotient _ _).obj L‚ÇÅ ‚ü∂ (quotient _ _).obj L‚ÇÇ),
    b' = e‚ÇÅ.inv.hom‚ÇÇ ‚â´ b ‚â´ e‚ÇÇ.hom.hom‚ÇÇ := ‚ü®_, rfl‚ü©
  obtain ‚ü®a'', rfl‚ü© := quotient_map_surjective a'
  obtain ‚ü®b'', rfl‚ü© := quotient_map_surjective b'
  have H : Homotopy (œÜ‚ÇÅ ‚â´ b'') (a'' ‚â´ œÜ‚ÇÇ) := homotopyOfEq _ _ (by
    have comm‚ÇÅ‚ÇÅ := e‚ÇÅ.inv.comm‚ÇÅ
    have comm‚ÇÅ‚ÇÇ := e‚ÇÇ.hom.comm‚ÇÅ
    dsimp at comm‚ÇÅ‚ÇÅ comm‚ÇÅ‚ÇÇ
    simp only [Functor.map_comp, ha', hb', reassoc_of% comm‚ÇÅ‚ÇÅ,
      reassoc_of% fac, comm‚ÇÅ‚ÇÇ, assoc])
  let Œ≥ := e‚ÇÅ.hom ‚â´ CochainComplex.MappingCone.triangleMap H ‚â´ e‚ÇÇ.inv
  have comm‚ÇÇ := Œ≥.comm‚ÇÇ
  have comm‚ÇÉ := Œ≥.comm‚ÇÉ
  dsimp at comm‚ÇÇ comm‚ÇÉ
  simp only [ha', hb', assoc, Iso.hom_inv_id_triangle_hom‚ÇÅ_assoc,
    Iso.hom_inv_id_triangle_hom‚ÇÅ, Iso.hom_inv_id_triangle_hom‚ÇÇ_assoc, comp_id] at comm‚ÇÇ comm‚ÇÉ
  exact ‚ü®Œ≥.hom‚ÇÉ, comm‚ÇÇ, by dsimp ; simpa only [assoc] using comm‚ÇÉ‚ü©

instance : Pretriangulated (HomotopyCategory C (ComplexShape.up ‚Ñ§)) where
  distinguishedTriangles := distinguishedTriangles C
  isomorphic_distinguished := isomorphic_distinguished
  contractible_distinguished := contractible_distinguished
  distinguished_cocone_triangle := distinguished_cocone_triangle
  rotate_distinguished_triangle := sorry
  complete_distinguished_triangle_morphism := complete_distinguished_triangle_morphism

end HomotopyCategory
