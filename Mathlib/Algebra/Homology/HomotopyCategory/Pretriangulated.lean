/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.HomotopyCategory.MappingCone
import Mathlib.Algebra.Homology.HomotopyCategory.HomComplexShift
import Mathlib.CategoryTheory.Triangulated.Pretriangulated

/-! The pretriangulated structure on the homotopy category of complexes

In this file, we define the pretriangulated structure on the homotopy
category `HomotopyCategory C (ComplexShape.up ‚Ñ§)` of an additive category `C`.
The distinguished triangles are the triangles that are isomorphic to the
image in the homotopy category of the standard triangle
`K ‚ü∂ L ‚ü∂ mappingCone œÜ ‚ü∂ K‚ü¶(1 : ‚Ñ§)‚üß` for some morphism of
cochain complexes `œÜ : K ‚ü∂ L`.

This result first appeared in the Liquid Tensor Experiment. In the LTE, the
formalization followed the Stacks Project: in particular, the distinguished
triangles were defined using termwise-split short exact sequences of cochain
complexes. Here, we follow the original definitions in [Verdiers's thesis, I.3][verdier1996]
(with the better sign conventions from the introduction of
[Brian Conrad's book *Grothendieck duality and base change*][conrad2000]).

## References
* [Jean-Louis Verdier, *Des cat√©gories d√©riv√©es des cat√©gories ab√©liennes*][verdier1996]
* [Brian Conrad, Grothendieck duality and base change][conrad2000]
* https://stacks.math.columbia.edu/tag/014P

-/

open CategoryTheory Limits CochainComplex.HomComplex Pretriangulated

variable {C : Type*} [Category C] [Preadditive C] [HasZeroObject C] [HasBinaryBiproducts C]
  {K L : CochainComplex C ‚Ñ§} (œÜ : K ‚ü∂ L)

namespace CochainComplex

namespace mappingCone

/-- The standard triangle `K ‚ü∂ L ‚ü∂ mappingCone œÜ ‚ü∂ K‚ü¶(1 : ‚Ñ§)‚üß` in `CochainComplex C ‚Ñ§`
attached to a morphism `œÜ : K ‚ü∂ L`. It involves `œÜ`, `inr œÜ : L ‚ü∂ mappingCone œÜ` and
the morphism induced by the `1`-cocycle `-mappingCone.fst œÜ`. -/
@[simps! obj‚ÇÅ obj‚ÇÇ obj‚ÇÉ mor‚ÇÅ mor‚ÇÇ]
noncomputable def triangle : Triangle (CochainComplex C ‚Ñ§) :=
  Triangle.mk œÜ (inr œÜ) (Cocycle.homOf ((-fst œÜ).rightShift 1 0 (zero_add 1)))

@[reassoc (attr := simp)]
lemma inl_v_triangle_mor‚ÇÉ_f (p q : ‚Ñ§) (hpq : p + (-1) = q) :
    (inl œÜ).v p q hpq ‚â´ (triangle œÜ).mor‚ÇÉ.f q =
      -(K.shiftFunctorObjXIso 1 q p (by rw [‚Üê hpq, neg_add_cancel_right])).inv := by
  simp [triangle, Cochain.rightShift_v _ 1 0 (zero_add 1) q q (add_zero q) p (by linarith)]

@[reassoc (attr := simp)]
lemma inr_f_triangle_mor‚ÇÉ_f (p : ‚Ñ§) : (inr œÜ).f p ‚â´ (triangle œÜ).mor‚ÇÉ.f p = 0 := by
  simp [triangle, Cochain.rightShift_v _ 1 0 _ p p (add_zero p) (p+1) rfl]

@[reassoc (attr := simp)]
lemma inr_triangleŒ¥ : inr œÜ ‚â´ (triangle œÜ).mor‚ÇÉ = 0 := by aesop_cat

-- needs Functor.mapTriangle
--abbrev triangleh : Triangle (HomotopyCategory C (ComplexShape.up ‚Ñ§)) :=
--  (HomotopyCategory.quotient _ _).mapTriangle.obj (CochainComplex.MappingCone.triangle œÜ)

variable (K)

/-- The mapping cone of the identity is contractible. -/
noncomputable def homotopyToZeroOfId : Homotopy (ùüô (mappingCone (ùüô K))) 0 :=
  descHomotopy (ùüô K) _ _ 0 (inl _) (by simp) (by simp)

variable {K}

section mapOfHomotopy

variable {K‚ÇÅ L‚ÇÅ K‚ÇÇ L‚ÇÇ K‚ÇÉ L‚ÇÉ : CochainComplex C ‚Ñ§} {œÜ‚ÇÅ : K‚ÇÅ ‚ü∂ L‚ÇÅ} {œÜ‚ÇÇ : K‚ÇÇ ‚ü∂ L‚ÇÇ} (œÜ‚ÇÉ : K‚ÇÉ ‚ü∂ L‚ÇÉ)
  {a : K‚ÇÅ ‚ü∂ K‚ÇÇ} {b : L‚ÇÅ ‚ü∂ L‚ÇÇ} (H : Homotopy (œÜ‚ÇÅ ‚â´ b) (a ‚â´ œÜ‚ÇÇ))
  (a' : K‚ÇÇ ‚ü∂ K‚ÇÉ) (b' : L‚ÇÇ ‚ü∂ L‚ÇÉ)

/-- The morphism `mappingCone œÜ‚ÇÅ ‚ü∂ mappingCone œÜ‚ÇÇ` that is induced by a square that
is commutative up to homotopy. -/
noncomputable def mapOfHomotopy :
    mappingCone œÜ‚ÇÅ ‚ü∂ mappingCone œÜ‚ÇÇ :=
  desc œÜ‚ÇÅ ((Cochain.ofHom a).comp (inl œÜ‚ÇÇ) (zero_add _) +
    ((Cochain.equivHomotopy _ _) H).1.comp (Cochain.ofHom (inr œÜ‚ÇÇ)) (add_zero _))
    (b ‚â´ inr œÜ‚ÇÇ) (by simp)

@[reassoc]
lemma triangleMapOfHomotopy_comm‚ÇÇ :
    inr œÜ‚ÇÅ ‚â´ mapOfHomotopy H = b ‚â´ inr œÜ‚ÇÇ := by
  simp [mapOfHomotopy]

@[reassoc]
lemma triangleMapOfHomotopy_comm‚ÇÉ :
    mapOfHomotopy H ‚â´ (triangle œÜ‚ÇÇ).mor‚ÇÉ = (triangle œÜ‚ÇÅ).mor‚ÇÉ ‚â´ a‚ü¶1‚üß' := by
  ext p
  simp [ext_from_iff _ _ _ rfl, triangle, mapOfHomotopy,
    Cochain.rightShift_v _ 1 0 _ p p _ (p + 1) rfl]

/-@[simps]
noncomputable def trianglehMapOfHomotopy :
    triangleh œÜ‚ÇÅ ‚ü∂ triangleh œÜ‚ÇÇ where
  hom‚ÇÅ := (HomotopyCategory.quotient _ _).map a
  hom‚ÇÇ := (HomotopyCategory.quotient _ _).map b
  hom‚ÇÉ := (HomotopyCategory.quotient _ _).map (map H)
  comm‚ÇÅ := sorry
  comm‚ÇÇ := sorry
  comm‚ÇÉ := sorry -/

end mapOfHomotopy

end mappingCone

end CochainComplex
