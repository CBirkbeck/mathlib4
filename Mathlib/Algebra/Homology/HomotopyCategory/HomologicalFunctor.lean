import Mathlib.Algebra.Homology.HomotopyCategory.Pretriangulated
import Mathlib.CategoryTheory.Triangulated.HomologicalFunctor
import Mathlib.Algebra.Homology.Refinements

open CategoryTheory Category Limits Pretriangulated

variable {C : Type _} [Category C] [Abelian C]

namespace CochainComplex

open HomologicalComplex

namespace mappingCone

attribute [simp] comp_liftCycles_assoc

-- exactness of H^n K ‚ü∂ H^n L ‚ü∂ H^n c√¥ne
lemma homology_triangle_exact {K L : CochainComplex C ‚Ñ§}
    (œÜ : K ‚ü∂ L) (n : ‚Ñ§) :
    (ShortComplex.mk ((homologyFunctor _ _ n).map œÜ)
      ((homologyFunctor _ _ n).map (inr œÜ)) (by
          dsimp
          rw [‚Üê homologyMap_comp, (inrCompHomotopy œÜ).homologyMap_eq,
            homologyMap_zero])).Exact := by
  rw [ShortComplex.exact_iff_exact_up_to_refinements]
  dsimp
  intro A x hx
  obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, hœÄ‚ÇÅ, z, hz, hz'‚ü© :=
    L.eq_liftCycles_homologyœÄ_up_to_refinements x (n+1) (by simp)
  have hz'' := hz' =‚â´ homologyMap (inr œÜ) n
  simp [hx] at hz''
  replace hz'' := hz''.symm
  rw [liftCycles_comp_homologyœÄ_eq_zero_iff_up_to_refinements
    _ _ _ _ _ (n-1) (by simp)] at hz''
  obtain ‚ü®A‚ÇÇ, œÄ‚ÇÇ, hœÄ‚ÇÇ, y, hy‚ü© := hz''
  obtain ‚ü®y‚ÇÅ, y‚ÇÇ, hy‚ÇÅ‚ÇÇ‚ü© := to_break _ y n (by rw [sub_add_cancel])
  cases hy‚ÇÅ‚ÇÇ
  simp [ext_to_iff _ _ (n+1) rfl] at hy
  refine' ‚ü®A‚ÇÇ, œÄ‚ÇÇ ‚â´ œÄ‚ÇÅ, epi_comp _ _,
    K.liftCycles' y‚ÇÅ (n+1) (by simp) hy.1 ‚â´ K.homologyœÄ n, _‚ü©
  simp [hz', hy.2]
  rw [liftCycles_comp_homologyœÄ_eq_iff_up_to_refinements _ _ _ _ _ _ _ (n-1) (by simp)]
  exact ‚ü®_, ùüô _, inferInstance, y‚ÇÇ, by simp‚ü©

end mappingCone

end CochainComplex

namespace HomotopyCategory

instance (n : ‚Ñ§) : (homologyFunctor C (ComplexShape.up ‚Ñ§) n).IsHomological :=
  Functor.IsHomological.mk' _ (by
    rintro T ‚ü®K, L, œÜ, ‚ü®e‚ü©‚ü©
    refine' ‚ü®_, e, _‚ü©
    refine' (ShortComplex.exact_iff_of_iso _).1
      (CochainComplex.mappingCone.homology_triangle_exact œÜ n)
    refine' ShortComplex.isoMk
      ((homologyFunctorFactors C (ComplexShape.up ‚Ñ§) n).app _).symm
      ((homologyFunctorFactors C (ComplexShape.up ‚Ñ§) n).app _).symm
      ((homologyFunctorFactors C (ComplexShape.up ‚Ñ§) n).app _).symm _ _
    all_goals
      dsimp
      erw [‚Üê NatTrans.naturality]
      rfl)

end HomotopyCategory
