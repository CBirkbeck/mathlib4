import Mathlib.Algebra.Homology.HomotopyCategory.ShiftHomologyFunctorIso
import Mathlib.Algebra.Homology.HomotopyCategory.Pretriangulated
import Mathlib.CategoryTheory.Triangulated.HomologicalFunctor
import Mathlib.Algebra.Homology.Refinements

open CategoryTheory Category Limits Pretriangulated

variable {C : Type _} [Category C] [Abelian C]

namespace CochainComplex

open HomologicalComplex

namespace MappingCone

attribute [simp] comp_liftCycles_assoc

lemma homology_triangle_exact {K L : CochainComplex C ‚Ñ§} (œÜ : K ‚ü∂ L) (n : ‚Ñ§) :
  (ShortComplex.mk ((newHomologyFunctor _ _ n).map œÜ)
    ((newHomologyFunctor _ _ n).map (inr œÜ))
      (by dsimp ; rw [‚Üê homologyMap_comp, (homotopySelfCompInr œÜ).homologyMap_eq,
        homologyMap_zero])).Exact := by
  rw [ShortComplex.exact_iff_exact_up_to_refinements]
  dsimp
  intro A x‚ÇÇ hx‚ÇÇ
  obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, hœÄ‚ÇÅ, z‚ÇÇ, hz‚ÇÇ, hz‚ÇÇ'‚ü© :=
    L.eq_liftCycles_homologyœÄ_up_to_refinements x‚ÇÇ (n+1) (by simp)
  have hz‚ÇÇ'' := hz‚ÇÇ' =‚â´ homologyMap (inr œÜ) n
  simp [hx‚ÇÇ] at hz‚ÇÇ''
  replace hz‚ÇÇ'' := hz‚ÇÇ''.symm
  rw [liftCycles_comp_homologyœÄ_eq_zero_iff_up_to_refinements
    _ _ _ _ _ (n-1) (by simp)] at hz‚ÇÇ''
  obtain ‚ü®A‚ÇÇ, œÄ‚ÇÇ, hœÄ‚ÇÇ, x‚ÇÉ, hx‚ÇÉ‚ü© := hz‚ÇÇ''
  obtain ‚ü®y‚ÇÅ, y‚ÇÇ, hy‚ü© := to_break _ x‚ÇÉ n (by rw [sub_add_cancel])
  simp [hy, to_ext_iff _ _ _ (n+1) rfl] at hx‚ÇÉ
  refine' ‚ü®A‚ÇÇ, œÄ‚ÇÇ ‚â´ œÄ‚ÇÅ, epi_comp _ _,
    K.liftCycles' y‚ÇÅ (n+1) (by simp) hx‚ÇÉ.1 ‚â´ K.homologyœÄ n, _‚ü©
  simp [hz‚ÇÇ', hx‚ÇÉ.2]
  rw [liftCycles_comp_homologyœÄ_eq_iff_up_to_refinements _ _ _ _ _ _ _ (n-1) (by simp)]
  refine' ‚ü®_, ùüô _, inferInstance, y‚ÇÇ, by simp‚ü©

end MappingCone

end CochainComplex

namespace HomotopyCategory

instance (n : ‚Ñ§) : (newHomologyFunctor C (ComplexShape.up ‚Ñ§) n).IsHomological :=
  Functor.IsHomological.mk' _ (by
    rintro T ‚ü®K, L, œÜ, ‚ü®e‚ü©‚ü©
    refine' ‚ü®_, e, _‚ü©
    refine' (ShortComplex.exact_iff_of_iso _).1
      (CochainComplex.MappingCone.homology_triangle_exact œÜ n)
    refine' ShortComplex.mkIso
      ((newHomologyFunctorFactors C (ComplexShape.up ‚Ñ§) n).app _).symm
      ((newHomologyFunctorFactors C (ComplexShape.up ‚Ñ§) n).app _).symm
      ((newHomologyFunctorFactors C (ComplexShape.up ‚Ñ§) n).app _).symm _ _
    all_goals
      dsimp
      erw [‚Üê NatTrans.naturality]
      rfl)

end HomotopyCategory
