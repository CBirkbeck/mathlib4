/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.BifunctorHomotopy
import Mathlib.Algebra.Homology.Monoidal
import Mathlib.CategoryTheory.Monoidal.Pentagon
import Mathlib.CategoryTheory.QuotientThree

/-!
# The homotopy category is monoidal

-/

open CategoryTheory Category Limits MonoidalCategory HomologicalComplex

namespace HomotopyCategory

variable (C : Type*) [Category C] [Preadditive C] [MonoidalCategory C] [HasZeroObject C]
  [(curriedTensor C).Additive]
  [‚àÄ (X‚ÇÅ : C), ((curriedTensor C).obj X‚ÇÅ).Additive]
  {I : Type*} [AddMonoid I] (c : ComplexShape I) [c.TensorSigns]
  [‚àÄ (X‚ÇÅ X‚ÇÇ : GradedObject I C), X‚ÇÅ.HasTensor X‚ÇÇ]
  [‚àÄ (X‚ÇÅ : C), PreservesColimit (Functor.empty C) ((curriedTensor C).obj X‚ÇÅ)]
  [‚àÄ (X‚ÇÇ : C), PreservesColimit (Functor.empty C) ((curriedTensor C).flip.obj X‚ÇÇ)]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : GradedObject I C), GradedObject.HasTensor‚ÇÑObjExt X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C), GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ X‚ÇÉ]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C), GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ] [DecidableEq I]

noncomputable example : MonoidalCategory (HomologicalComplex C c) := inferInstance

namespace MonoidalCategory

variable [‚àÄ (K‚ÇÅ K‚ÇÇ : HomologicalComplex C c), HasMapBifunctor K‚ÇÅ K‚ÇÇ (curriedTensor C) c]

noncomputable abbrev unit : HomotopyCategory C c :=
  (quotient _ _).obj (ùüô_ _)

noncomputable def bifunctor :
    HomotopyCategory C c ‚•§ HomotopyCategory C c ‚•§ HomotopyCategory C c :=
  (curriedTensor C).bifunctorMapHomotopyCategory c c c

noncomputable def bifunctorIso :
    (((whiskeringLeft‚ÇÇ _).obj (quotient C c)).obj (quotient C c)).obj (bifunctor C c ) ‚âÖ
      MonoidalCategory.curriedTensor (HomologicalComplex C c) ‚ãô
        (whiskeringRight _ _ _).obj (quotient C c) := Iso.refl _

@[simp]
lemma bifunctorIso_hom_app_app (K‚ÇÅ K‚ÇÇ : HomologicalComplex C c) :
  ((bifunctorIso C c).hom.app K‚ÇÅ).app K‚ÇÇ = ùüô _ := rfl

@[simp]
lemma bifunctorIso_inv_app_app (K‚ÇÅ K‚ÇÇ : HomologicalComplex C c) :
  ((bifunctorIso C c).inv.app K‚ÇÅ).app K‚ÇÇ = ùüô _ := rfl

noncomputable def bifunctorComp‚ÇÅ‚ÇÇIso :
    ((((whiskeringLeft‚ÇÉ (HomotopyCategory C c)).obj (quotient C c)).obj
      (quotient C c)).obj (quotient C c)).obj
        (bifunctorComp‚ÇÅ‚ÇÇ (bifunctor C c) (bifunctor C c)) ‚âÖ
    (Functor.postcompose‚ÇÉ.obj (quotient C c)).obj
      (bifunctorComp‚ÇÅ‚ÇÇ (curriedTensor (HomologicalComplex C c))
        (curriedTensor (HomologicalComplex C c))) :=
  Quotient.bifunctorComp‚ÇÅ‚ÇÇIso (bifunctorIso C c) (bifunctorIso C c)

noncomputable def bifunctorComp‚ÇÇ‚ÇÉIso :
    ((((whiskeringLeft‚ÇÉ (HomotopyCategory C c)).obj (quotient C c)).obj
      (quotient C c)).obj (quotient C c)).obj
      (bifunctorComp‚ÇÇ‚ÇÉ (bifunctor C c) (bifunctor C c)) ‚âÖ
    (Functor.postcompose‚ÇÉ.obj (quotient C c)).obj
      (bifunctorComp‚ÇÇ‚ÇÉ (curriedTensor (HomologicalComplex C c))
        (curriedTensor (HomologicalComplex C c))) :=
  Quotient.bifunctorComp‚ÇÇ‚ÇÉIso (bifunctorIso C c) (bifunctorIso C c)

@[simp]
lemma bifunctorComp‚ÇÅ‚ÇÇIso_hom_app_app_app (K‚ÇÅ K‚ÇÇ K‚ÇÉ : HomologicalComplex C c) :
    (((bifunctorComp‚ÇÅ‚ÇÇIso C c).hom.app K‚ÇÅ).app K‚ÇÇ).app K‚ÇÉ = ùüô _ := by
  dsimp only [bifunctorComp‚ÇÅ‚ÇÇIso]
  simp
  erw [comp_id, (bifunctor C c).map_id]
  rfl

@[simp]
lemma bifunctorComp‚ÇÅ‚ÇÇIso_inv_app_app_app (K‚ÇÅ K‚ÇÇ K‚ÇÉ : HomologicalComplex C c) :
    (((bifunctorComp‚ÇÅ‚ÇÇIso C c).inv.app K‚ÇÅ).app K‚ÇÇ).app K‚ÇÉ = ùüô _ := by
  dsimp only [bifunctorComp‚ÇÅ‚ÇÇIso]
  simp
  erw [id_comp, (bifunctor C c).map_id]
  rfl

@[simp]
lemma bifunctorComp‚ÇÇ‚ÇÉIso_hom_app_app_app (K‚ÇÅ K‚ÇÇ K‚ÇÉ : HomologicalComplex C c) :
    (((bifunctorComp‚ÇÇ‚ÇÉIso C c).hom.app K‚ÇÅ).app K‚ÇÇ).app K‚ÇÉ = ùüô _ := by
  dsimp only [bifunctorComp‚ÇÇ‚ÇÉIso]
  simp
  erw [comp_id, ((bifunctor C c).obj _).map_id]
  rfl

@[simp]
lemma bifunctorComp‚ÇÇ‚ÇÉIso_inv_app_app_app (K‚ÇÅ K‚ÇÇ K‚ÇÉ : HomologicalComplex C c) :
    (((bifunctorComp‚ÇÇ‚ÇÉIso C c).inv.app K‚ÇÅ).app K‚ÇÇ).app K‚ÇÉ = ùüô _ := by
  dsimp only [bifunctorComp‚ÇÇ‚ÇÉIso]
  simp
  erw [id_comp, ((bifunctor C c).obj _).map_id]
  rfl

noncomputable def associator :
    bifunctorComp‚ÇÅ‚ÇÇ (bifunctor C c) (bifunctor C c) ‚âÖ
      bifunctorComp‚ÇÇ‚ÇÉ (bifunctor C c) (bifunctor C c) :=
  Quotient.natIsoLift‚ÇÉ _ _ _
    (bifunctorComp‚ÇÅ‚ÇÇIso C c ‚â™‚â´ (Functor.postcompose‚ÇÉ.obj (quotient C c)).mapIso
      (curriedAssociatorNatIso (HomologicalComplex C c)) ‚â™‚â´
        (bifunctorComp‚ÇÇ‚ÇÉIso C c).symm)

@[simp]
lemma associator_hom_app_app_app (K‚ÇÅ K‚ÇÇ K‚ÇÉ : HomologicalComplex C c) :
    (((associator C c).hom.app ((quotient C c).obj K‚ÇÅ)).app ((quotient C c).obj K‚ÇÇ)).app
      ((quotient C c).obj K‚ÇÉ) =
        (quotient C c).map
          ((((curriedAssociatorNatIso (HomologicalComplex C c)).hom.app K‚ÇÅ).app K‚ÇÇ).app K‚ÇÉ) := by
  dsimp [associator]
  erw [Quotient.natTransLift‚ÇÉ_app_app_app]
  dsimp
  rw [bifunctorComp‚ÇÅ‚ÇÇIso_hom_app_app_app, bifunctorComp‚ÇÇ‚ÇÉIso_inv_app_app_app]
  dsimp
  rw [comp_id]
  apply Category.id_comp

noncomputable def leftUnitor :
    (bifunctor C c).obj (unit C c) ‚âÖ ùü≠ (HomotopyCategory C c) :=
  Quotient.natIsoLift _
    ((bifunctorIso C c).app (ùüô_ _) ‚â™‚â´
    isoWhiskerRight (leftUnitorNatIso (HomologicalComplex C c)) (quotient C c))

@[simp]
lemma leftUnitor_hom_app (K : HomologicalComplex C c) :
    (leftUnitor C c).hom.app ((quotient C c).obj K) = (quotient C c).map (Œª_ K).hom := by
  apply id_comp

noncomputable def rightUnitor :
    (bifunctor C c).flip.obj (unit C c) ‚âÖ ùü≠ (HomotopyCategory C c) :=
  Quotient.natIsoLift _
    (((flipFunctor _ _ _).mapIso (bifunctorIso C c)).app (ùüô_ _) ‚â™‚â´
      isoWhiskerRight (rightUnitorNatIso (HomologicalComplex C c)) (quotient C c))

@[simp]
lemma rightUnitor_hom_app (K : HomologicalComplex C c) :
    (rightUnitor C c).hom.app ((quotient C c).obj K) = (quotient C c).map (œÅ_ K).hom := by
  apply id_comp

lemma triangle :
    NatTrans.Triangle (associator C c).hom (unit C c) (leftUnitor C c) (rightUnitor C c) where
  triangle := by
    ext K L
    obtain ‚ü®K, rfl‚ü© := K.quotient_obj_surjective
    obtain ‚ü®L, rfl‚ü© := L.quotient_obj_surjective
    dsimp
    rw [leftUnitor_hom_app, rightUnitor_hom_app, associator_hom_app_app_app]
    exact (quotient C c).congr_map (CategoryTheory.MonoidalCategory.triangle K L)

/-noncomputable instance : MonoidalCategory (HomotopyCategory C c) :=
  .ofBifunctor (unit C c) (bifunctor C c) (associator C c)
  (leftUnitor C c) (rightUnitor C c) sorry (triangle C c)-/

end MonoidalCategory

end HomotopyCategory
