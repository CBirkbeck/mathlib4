import Mathlib.Algebra.Homology.ShortComplex.Preadditive
import Mathlib.Algebra.Homology.HomotopyCategory

open CategoryTheory Category Limits


namespace HomologicalComplex

section

variable (C : Type _) [Category C] [HasZeroMorphisms C] {Œπ : Type _} (c : ComplexShape Œπ)

@[simps]
def shortComplexFunctor' (i j k : Œπ) : HomologicalComplex C c ‚•§ ShortComplex C where
  obj K := ShortComplex.mk (K.d i j) (K.d j k) (K.d_comp_d i j k)
  map f :=
    { œÑ‚ÇÅ := f.f i
      œÑ‚ÇÇ := f.f j
      œÑ‚ÇÉ := f.f k }

@[simps!]
noncomputable def shortComplexFunctor (i : Œπ) :=
  shortComplexFunctor' C c (c.prev i) i (c.next i)

variable {C c}
variable (K L M : HomologicalComplex C c) (œÜ : K ‚ü∂ L) (œà : L ‚ü∂ M)

abbrev sc' (i j k : Œπ) := (shortComplexFunctor' C c i j k).obj K
noncomputable abbrev sc (i : Œπ) := (shortComplexFunctor C c i).obj K

abbrev HasHomology (i : Œπ) := (K.sc i).HasHomology

variable (i : Œπ) [K.HasHomology i] [L.HasHomology i] [M.HasHomology i]

noncomputable def newHomology := (K.sc i).homology
noncomputable def newCycles := (K.sc i).cycles
noncomputable def homologyœÄ : K.newCycles i ‚ü∂ K.newHomology i := (K.sc i).homologyœÄ
noncomputable def iCycles : K.newCycles i ‚ü∂ K.X i := (K.sc i).iCycles

variable {i}

noncomputable def liftCycles {A : C} (k : A ‚ü∂ K.X i) (j : Œπ) (hj : c.next i = j)
    (hk : k ‚â´ K.d i j = 0) : A ‚ü∂ K.newCycles i :=
  (K.sc i).liftCycles k (by subst hj ; exact hk)

@[reducible]
noncomputable def liftCycles' {A : C} (k : A ‚ü∂ K.X i) (j : Œπ) (hj : c.Rel i j)
    (hk : k ‚â´ K.d i j = 0) : A ‚ü∂ K.newCycles i :=
  K.liftCycles k j (c.next_eq' hj) hk

@[reassoc (attr := simp)]
lemma liftCycles_i {A : C} (k : A ‚ü∂ K.X i) (j : Œπ) (hj : c.next i = j)
    (hk : k ‚â´ K.d i j = 0) : K.liftCycles k j hj hk ‚â´ K.iCycles i = k := by
  dsimp [liftCycles, iCycles]
  simp

noncomputable def toCycles (i j : Œπ) [K.HasHomology j] :
  K.X i ‚ü∂ K.newCycles j :=
  K.liftCycles (K.d i j) (c.next j) rfl (K.d_comp_d _ _ _)

variable (i)

@[reassoc (attr := simp)]
lemma iCycles_d (j : Œπ) : K.iCycles i ‚â´ K.d i j = 0 := by
  by_cases hij : c.Rel i j
  . obtain rfl := c.next_eq' hij
    exact (K.sc i).iCycles_g
  . rw [K.shape _ _ hij, comp_zero]

@[reassoc (attr := simp)]
lemma toCycles_i (i j : Œπ) [K.HasHomology j] :
    K.toCycles i j ‚â´ K.iCycles j = K.d i j :=
  liftCycles_i _ _ _ _ _

instance [K.HasHomology i] : Mono (K.iCycles i) := by
  dsimp only [iCycles]
  infer_instance

instance [K.HasHomology i] : Epi (K.homologyœÄ i) := by
  dsimp only [homologyœÄ]
  infer_instance

variable {i}

@[reassoc]
lemma liftCycles_homologyœÄ_eq_zero_of_boundary {A : C} (k : A ‚ü∂ K.X i) (j : Œπ)
    (hj : c.next i = j) {i' : Œπ} (x : A ‚ü∂ K.X i') (hx : k = x ‚â´ K.d i' i) :
    K.liftCycles k j hj (by rw [hx, assoc, K.d_comp_d, comp_zero]) ‚â´ K.homologyœÄ i = 0 := by
  by_cases c.Rel i' i
  . obtain rfl := c.prev_eq' h
    exact (K.sc i).liftCycles_homologyœÄ_eq_zero_of_boundary _ x hx
  . have : liftCycles K k j hj (by rw [hx, assoc, K.d_comp_d, comp_zero]) = 0 := by
      rw [K.shape _ _ h, comp_zero] at hx
      rw [‚Üê cancel_mono (K.iCycles i), zero_comp, liftCycles_i, hx]
    rw [this, zero_comp]

@[reassoc (attr := simp)]
lemma toCycles_comp_homology_œÄ (i j : Œπ) [K.HasHomology j]:
    K.toCycles i j ‚â´ K.homologyœÄ j = 0 :=
  K.liftCycles_homologyœÄ_eq_zero_of_boundary (K.d i j) (c.next j) rfl (ùüô _) (by simp)

variable {K L M} (i)

noncomputable def homologyMap : K.newHomology i ‚ü∂ L.newHomology i :=
  ShortComplex.homologyMap ((shortComplexFunctor C c i).map œÜ)

variable (K)

@[simp]
lemma homologyMap_id : homologyMap (ùüô K) i = ùüô _ :=
  ShortComplex.homologyMap_id _

variable {K}

@[reassoc]
lemma homologyMap_comp : homologyMap (œÜ ‚â´ œà) i = homologyMap œÜ i ‚â´ homologyMap œà i := by
  dsimp [homologyMap]
  rw [Functor.map_comp, ShortComplex.homologyMap_comp]

variable (K L)

@[simp]
lemma homologyMap_zero : homologyMap (0 : K ‚ü∂ L) i = 0 :=
  ShortComplex.homologyMap_zero _ _

variable {K L}

attribute [simp] homologyMap_comp

variable (C c)

@[simps]
noncomputable def newHomologyFunctor [CategoryWithHomology C] : HomologicalComplex C c ‚•§ C where
  obj K := K.newHomology i
  map f := homologyMap f i

/- TODO : adapt more of the homology of ShortComplex API to this situation, including the
dual versions cyclesCo, etc... -/

end

end HomologicalComplex

section

open HomologicalComplex CategoryTheory

variable {C : Type _} [Category C] [Preadditive C] {Œπ : Type _} {c : ComplexShape Œπ}
  [DecidableRel c.Rel] {K L : HomologicalComplex C c} {f g : K ‚ü∂ L}

noncomputable def Homotopy.toShortComplex (ho : Homotopy f g) (i : Œπ) :
    ShortComplex.Homotopy ((shortComplexFunctor C c i).map f)
      ((shortComplexFunctor C c i).map g) where
  h‚ÇÄ :=
    if c.Rel (c.prev i) i
    then ho.hom _ (c.prev (c.prev i)) ‚â´ L.d _ _
    else f.f _ - g.f _ - K.d _ i ‚â´ ho.hom i _
  h‚ÇÅ := ho.hom _ _
  h‚ÇÇ := ho.hom _ _
  h‚ÇÉ :=
    if c.Rel i (c.next i)
    then K.d _ _ ‚â´ ho.hom (c.next (c.next i)) _
    else f.f _ - g.f _ - ho.hom _ i ‚â´ L.d _ _
  h‚ÇÄ_f := by
    split_ifs with h
    . dsimp
      simp only [assoc, d_comp_d, comp_zero]
    . dsimp
      rw [L.shape _ _ h, comp_zero]
  g_h‚ÇÉ := by
    split_ifs with h
    . dsimp
      simp
    . dsimp
      rw [K.shape _ _ h, zero_comp]
  comm‚ÇÅ := by
    dsimp
    split_ifs with h
    . rw [ho.comm (c.prev i)]
      dsimp [dFrom, dTo, fromNext, toPrev]
      rw [congr_arg (fun j => d K (c.prev i) j ‚â´ ho.hom j (c.prev i)) (c.next_eq' h)]
    . abel
  comm‚ÇÇ := ho.comm i
  comm‚ÇÉ := by
    dsimp
    split_ifs with h
    . rw [ho.comm (c.next i)]
      dsimp [dFrom, dTo, fromNext, toPrev]
      rw [congr_arg (fun j => ho.hom (c.next i) j ‚â´ L.d j (c.next i)) (c.prev_eq' h)]
    . abel

lemma Homotopy.homologyMap_eq (ho : Homotopy f g) (i : Œπ) [K.HasHomology i] [L.HasHomology i] :
    homologyMap f i = homologyMap g i :=
  ShortComplex.Homotopy.congr_homologyMap (ho.toShortComplex i)

noncomputable def HomotopyEquiv.toHomologyIso (h : HomotopyEquiv K L) (i : Œπ)
  [K.HasHomology i] [L.HasHomology i] : K.newHomology i ‚âÖ L.newHomology i where
  hom := homologyMap h.hom i
  inv := homologyMap h.inv i
  hom_inv_id := by rw [‚Üê homologyMap_comp, h.homotopyHomInvId.homologyMap_eq, homologyMap_id]
  inv_hom_id := by rw [‚Üê homologyMap_comp, h.homotopyInvHomId.homologyMap_eq, homologyMap_id]

namespace HomologicalComplex

variable (œÜ œà : K ‚ü∂ L) (i : Œπ) [K.HasHomology i] [L.HasHomology i]

@[simp]
lemma homologyMap_neg : homologyMap (-œÜ) i = -homologyMap œÜ i := by
  dsimp [homologyMap]
  rw [‚Üê ShortComplex.homologyMap_neg]
  rfl

@[simp]
lemma homologyMap_add : homologyMap (œÜ + œà) i = homologyMap œÜ i + homologyMap œà i := by
  dsimp [homologyMap]
  rw [‚Üê ShortComplex.homologyMap_add]
  rfl

instance [CategoryWithHomology C] : (newHomologyFunctor C c i).Additive where

end HomologicalComplex

namespace HomotopyCategory

variable (C) (c)
variable [CategoryWithHomology C]

noncomputable def newHomologyFunctor (i : Œπ) : HomotopyCategory C c ‚•§ C :=
  CategoryTheory.Quotient.lift _ (HomologicalComplex.newHomologyFunctor C c i) (by
    rintro K L f g ‚ü®h‚ü©
    exact h.homologyMap_eq i)

noncomputable def newHomologyFunctorFactors (i : Œπ) :
    quotient C c ‚ãô newHomologyFunctor C c i ‚âÖ
      HomologicalComplex.newHomologyFunctor C c i :=
  Quotient.lift.isLift _ _ _

-- this is to prevent any abuse of defeq
attribute [irreducible] newHomologyFunctor newHomologyFunctorFactors

instance : (newHomologyFunctor C c i).Additive := by
  have := Functor.additive_of_iso (newHomologyFunctorFactors C c i).symm
  exact Functor.additive_of_full_essSurj_comp (quotient C c) _

end HomotopyCategory

end
