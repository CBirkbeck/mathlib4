import Mathlib.Algebra.Homology.Monoidal
import Mathlib.Algebra.Homology.HomologicalBicomplex
import Mathlib.CategoryTheory.Monoidal.Braided

open CategoryTheory Category Limits MonoidalCategory Preadditive MonoidalPreadditive

namespace CategoryTheory

namespace MonoidalCategory

variable (C : Type*) [Category C] [MonoidalCategory C] [BraidedCategory C]

@[simps!]
def curriedBraidingNatIso :
    (curryObj (MonoidalCategory.tensor C)) ‚âÖ
      (curryObj (MonoidalCategory.tensor C)).flip :=
  NatIso.ofComponents (fun K => NatIso.ofComponents (fun L => Œ≤_ K L) (by aesop_cat)) (by aesop_cat)

end MonoidalCategory

end CategoryTheory

namespace CategoryTheory.Functor

variable {C‚ÇÅ C‚ÇÇ C‚ÇÉ : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ]
  [Preadditive C‚ÇÅ] [Preadditive C‚ÇÇ] [Preadditive C‚ÇÉ]
  (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ)

instance [‚àÄ (X‚ÇÅ : C‚ÇÅ), (F.obj X‚ÇÅ).Additive] : F.flip.Additive where
instance [F.Additive] (X‚ÇÇ : C‚ÇÇ) : ((F.flip).obj X‚ÇÇ).Additive where

end CategoryTheory.Functor

namespace HomologicalComplex

variable {C : Type*} [Category C] [Preadditive C] [MonoidalCategory C] [MonoidalPreadditive C]
  {I : Type*} [AddCommMonoid I] {c : ComplexShape I} [DecidableEq I]

variable [(curryObj (MonoidalCategory.tensor C)).Additive]
  (K L : HomologicalComplex C c)

def tensorBicomplex :
      HomologicalComplex‚ÇÇ C c c :=
    (((Functor.mapHomologicalComplex‚ÇÇ (curryObj (MonoidalCategory.tensor C)) c c).obj K).obj L)

section

variable [ComplexShape.TensorSigns c]

instance [h : HasTensor K L] :
    GradedObject.HasMap (tensorBicomplex K L).toGradedObject (ComplexShape.œÄ c c c) := h

noncomputable def tensorBiComplexTotalIso [HasTensor K L] [HasTensor L K] :
    Monoidal.tensorObj K L ‚âÖ (tensorBicomplex K L).total c := Iso.refl _

variable [BraidedCategory C]

@[simps!]
def tensorBicomplexFlipIso : tensorBicomplex K L ‚âÖ (tensorBicomplex L K).flip :=
  ((Functor.mapHomologicalComplex‚ÇÇFlipIso (curryObj (MonoidalCategory.tensor C)) c c).app K).app L ‚â™‚â´
    (HomologicalComplex‚ÇÇ.flipFunctor C c c).mapIso (((NatIso.mapHomologicalComplex‚ÇÇ (curriedBraidingNatIso C).symm c c).app L).app K)

@[simps!]
def tensorBicomplexFlipNatIso :
    (Functor.mapHomologicalComplex‚ÇÇ (curryObj (MonoidalCategory.tensor C)) c c) ‚âÖ
      (Functor.mapHomologicalComplex‚ÇÇ (curryObj (MonoidalCategory.tensor C)) c c).flip ‚ãô
        (whiskeringRight _ _ _).obj (HomologicalComplex‚ÇÇ.flipFunctor C c c) :=
  NatIso.ofComponents (fun K => NatIso.ofComponents (fun L => tensorBicomplexFlipIso K L) (by
    intro L L' œÜ
    dsimp [tensorBicomplexFlipIso]
    simp only [NatTrans.naturality_assoc, Functor.comp_map, Functor.flip_obj_map, assoc,
      ‚Üê Functor.map_comp, ‚Üê NatTrans.comp_app, NatTrans.naturality])) (by
    intro K K' œÜ
    ext L : 2
    dsimp [tensorBicomplexFlipIso]
    rw [assoc, ‚Üê NatTrans.comp_app_assoc, NatTrans.naturality]
    dsimp
    rw [assoc, ‚Üê Functor.map_comp, ‚Üê Functor.map_comp, NatTrans.naturality])

end

variable (c)

class _root_.ComplexShape.Braiding  extends c.TensorSigns,
    TotalComplexShapeSymmetry c c c where
  œÉ_add‚ÇÅ (i‚ÇÅ i‚ÇÅ' i‚ÇÇ : I) : ComplexShape.œÉ c c c (i‚ÇÅ + i‚ÇÅ') i‚ÇÇ = ComplexShape.œÉ c c c i‚ÇÅ i‚ÇÇ * ComplexShape.œÉ c c c i‚ÇÅ' i‚ÇÇ
  œÉ_add‚ÇÇ (i‚ÇÅ i‚ÇÇ i‚ÇÇ' : I) : ComplexShape.œÉ c c c i‚ÇÅ (i‚ÇÇ + i‚ÇÇ') = ComplexShape.œÉ c c c i‚ÇÅ i‚ÇÇ * ComplexShape.œÉ c c c i‚ÇÅ i‚ÇÇ'

lemma _root_.ComplexShape.œÉ_add‚ÇÅ (i‚ÇÅ i‚ÇÅ' i‚ÇÇ : I) [c.Braiding] :
  ComplexShape.œÉ c c c (i‚ÇÅ + i‚ÇÅ') i‚ÇÇ = ComplexShape.œÉ c c c i‚ÇÅ i‚ÇÇ * ComplexShape.œÉ c c c i‚ÇÅ' i‚ÇÇ := by
  apply ComplexShape.Braiding.œÉ_add‚ÇÅ

lemma _root_.ComplexShape.œÉ_add‚ÇÇ (i‚ÇÅ i‚ÇÇ i‚ÇÇ' : I) [c.Braiding] :
  ComplexShape.œÉ c c c i‚ÇÅ (i‚ÇÇ + i‚ÇÇ') = ComplexShape.œÉ c c c i‚ÇÅ i‚ÇÇ * ComplexShape.œÉ c c c i‚ÇÅ i‚ÇÇ' := by
  apply ComplexShape.Braiding.œÉ_add‚ÇÇ

@[simps]
instance : TotalComplexShapeSymmetry (ComplexShape.up ‚Ñ§) (ComplexShape.up ‚Ñ§) (ComplexShape.up ‚Ñ§) where
  symm := fun p q => add_comm q p
  œÉ := fun p q => (p * q).negOnePow
  œÉ_mul_self := by aesop
  compatibility‚ÇÅ := by
    rintro p _ rfl q
    dsimp
    rw [one_mul, ‚Üê Int.negOnePow_add, add_mul, one_mul]
  compatibility‚ÇÇ := by
    rintro p q _ rfl
    dsimp
    rw [mul_one, add_comm q 1, mul_add, mul_one, Int.negOnePow_add, ‚Üê mul_assoc, Int.negOnePow_mul_self, one_mul]

instance : (ComplexShape.up ‚Ñ§).Braiding where
  œÉ_add‚ÇÅ p p' q := by
    dsimp
    rw [‚Üê Int.negOnePow_add, add_mul]
  œÉ_add‚ÇÇ p q q' := by
    dsimp
    rw [‚Üê Int.negOnePow_add, mul_add]

variable [c.Braiding] [BraidedCategory C]

variable {c}
variable [HasTensor K L] [HasTensor L K]

instance : (tensorBicomplex K L).flip.toGradedObject.HasMap (ComplexShape.œÄ c c c) := by
  refine' @GradedObject.hasMap_of_iso (I √ó I) I C _ _ _ _ _ (inferInstance : HasTensor L K)
  exact GradedObject.isoMk _ _ (fun ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© => Œ≤_ (K.X i‚ÇÇ) (L.X i‚ÇÅ))

namespace Monoidal

open BraidedCategory


noncomputable def braiding : Monoidal.tensorObj K L ‚âÖ Monoidal.tensorObj L K :=
  HomologicalComplex‚ÇÇ.totalSymmIso c (tensorBicomplex K L) ‚â™‚â´
    HomologicalComplex‚ÇÇ.totalMapIso (tensorBicomplexFlipIso L K).symm c

@[reassoc (attr := simp)]
lemma ŒπTensorObj_braiding_hom (i‚ÇÅ i‚ÇÇ i‚ÇÉ : I) (h : i‚ÇÅ + i‚ÇÇ = i‚ÇÉ) :
  ŒπTensorObj K L i‚ÇÅ i‚ÇÇ i‚ÇÉ h ‚â´ (braiding K L).hom.f i‚ÇÉ =
    ComplexShape.œÉ c c c i‚ÇÅ i‚ÇÇ ‚Ä¢ (Œ≤_ (K.X i‚ÇÅ) (L.X i‚ÇÇ)).hom ‚â´ ŒπTensorObj L K i‚ÇÇ i‚ÇÅ i‚ÇÉ (by rw [add_comm, h]) := by
  -- with this definition of braiding, we may get `(Œ≤_ (L.X i‚ÇÇ) (K.X i‚ÇÅ)).inv` instead
  -- of `(Œ≤_ (K.X i‚ÇÅ) (L.X i‚ÇÇ)).hom` in which case the definition should be fixed...
  sorry

variable (X Y Z : HomologicalComplex C c)
  [HasTensor X Y] [HasTensor Y Z] [HasTensor Z X]
  [HasTensor Y X] [HasTensor Z Y] [HasTensor X Z]
  [HasTensor (tensorObj X Y) Z] [HasTensor X (tensorObj Y Z)]
  [HasTensor (tensorObj Y Z) X] [HasTensor Y (tensorObj Z X)]
  [HasTensor (tensorObj Y X) Z] [HasTensor Y (tensorObj X Z)]
  [HasTensor (tensorObj Z X) Y] [HasTensor Z (tensorObj X Y)]
  [HasTensor (tensorObj X Z) Y] [HasTensor X (tensorObj Z Y)]
  [GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor X.X Y.X Z.X]
  [GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ X.X Y.X Z.X]
  [GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor Y.X Z.X X.X]
  [GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ Y.X Z.X X.X]
  [GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor Y.X X.X Z.X]
  [GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ Y.X X.X Z.X]
  [GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor Z.X X.X Y.X]
  [GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ Z.X X.X Y.X]
  [GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor X.X Z.X Y.X]
  [GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ X.X Z.X Y.X]

lemma hexagon_forward :
  (associator X Y Z).hom ‚â´ (braiding X (tensorObj Y Z)).hom ‚â´ (associator Y Z X).hom =
    tensorHom (braiding X Y).hom (ùüô Z) ‚â´ (associator Y X Z).hom ‚â´
      tensorHom (ùüô Y) (braiding X Z).hom := by
  ext n x y z h
  dsimp
  rw [ŒπTensorObj‚ÇÉ'_associator_hom_assoc, ŒπTensorObj‚ÇÉ_eq _ _ _ _ _ _ _ _ _ rfl, assoc,
    ŒπTensorObj_braiding_hom_assoc, zsmul_comp, comp_zsmul, comp_zsmul, assoc, braiding_naturality_assoc,
    ‚Üê ŒπTensorObj‚ÇÉ'_eq_assoc _ _ _ _ _ _ _ (by rw [‚Üê h]; abel), ŒπTensorObj‚ÇÉ'_associator_hom,
    hexagon_forward_assoc]
  rw [ŒπTensorObj‚ÇÉ'_eq _ _ _ _ _ _ _ _ _ rfl, assoc, Œπ_tensorHom_assoc, id_f,
    ‚Üê comp_tensor_id_assoc, ŒπTensorObj_braiding_hom, zsmul_tensor, zsmul_comp,
    comp_tensor_id, assoc,
    ‚Üê ŒπTensorObj‚ÇÉ'_eq_assoc _ _ _ _ _ _ _ (by rw [‚Üê h]; abel),
    ŒπTensorObj‚ÇÉ'_associator_hom_assoc, ŒπTensorObj‚ÇÉ_eq Y X Z _ _ _ _ _ _ rfl, assoc,
    Œπ_tensorHom, id_f, ‚Üê id_tensor_comp_assoc, ŒπTensorObj_braiding_hom, tensor_zsmul,
    zsmul_comp, comp_zsmul, comp_zsmul, id_tensor_comp, assoc,
    ‚Üê ŒπTensorObj‚ÇÉ_eq _ _ _ _ _ _ _ _ _ (add_comm z x), smul_smul, c.œÉ_add‚ÇÇ]

lemma hexagon_reverse :
    (associator X Y Z).inv ‚â´ (braiding (tensorObj X Y) Z).hom ‚â´ (associator Z X Y).inv =
      tensorHom (ùüô X) (braiding Y Z).hom ‚â´ (associator X Z Y).inv ‚â´
        tensorHom (braiding X Z).hom (ùüô Y) := by
  ext n x y z h
  dsimp
  rw [ŒπTensorObj‚ÇÉ_associator_inv_assoc, ŒπTensorObj‚ÇÉ'_eq _ _ _ _ _ _ _ _ _ rfl, assoc,
    ŒπTensorObj_braiding_hom_assoc, zsmul_comp, comp_zsmul, comp_zsmul, assoc, braiding_naturality_assoc,
    ‚Üê ŒπTensorObj‚ÇÉ_eq_assoc _ _ _ _ _ _ _ (by rw [‚Üê h]; abel), ŒπTensorObj‚ÇÉ_associator_inv,
    hexagon_reverse_assoc]
  rw [ŒπTensorObj‚ÇÉ_eq _ _ _ _ _ _ _ _ _ rfl, assoc, Œπ_tensorHom_assoc, id_f,
    ‚Üê id_tensor_comp_assoc, ŒπTensorObj_braiding_hom, tensor_zsmul, zsmul_comp,
    id_tensor_comp, assoc,
    ‚Üê ŒπTensorObj‚ÇÉ_eq_assoc _ _ _ _ _ _ _ (by rw [‚Üê h]; abel),
    ŒπTensorObj‚ÇÉ_associator_inv_assoc, ŒπTensorObj‚ÇÉ'_eq X Z Y _ _ _ _ _ _ rfl, assoc,
    Œπ_tensorHom, id_f, ‚Üê comp_tensor_id_assoc, ŒπTensorObj_braiding_hom, zsmul_tensor,
    zsmul_comp, comp_zsmul, comp_zsmul, comp_tensor_id, assoc,
    ‚Üê ŒπTensorObj‚ÇÉ'_eq _ _ _ _ _ _ _ (by rw [‚Üê h]; abel) _ (add_comm z x), smul_smul, c.œÉ_add‚ÇÅ,
    mul_comm]

end Monoidal

end HomologicalComplex
