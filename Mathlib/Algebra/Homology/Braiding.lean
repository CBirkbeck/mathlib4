import Mathlib.Algebra.Homology.Monoidal
import Mathlib.Algebra.Homology.HomologicalBicomplex
import Mathlib.CategoryTheory.Monoidal.Braided

open CategoryTheory Category Limits MonoidalCategory

namespace CategoryTheory

namespace MonoidalCategory

variable (C : Type*) [Category C] [MonoidalCategory C] [BraidedCategory C]

@[simps!]
def curriedBraidingNatIso :
    (curryObj (MonoidalCategory.tensor C)) ‚âÖ
      (curryObj (MonoidalCategory.tensor C)).flip :=
  NatIso.ofComponents (fun K => NatIso.ofComponents (fun L => Œ≤_ K L) (by aesop_cat)) (by aesop_cat)

end MonoidalCategory

end CategoryTheory

namespace CategoryTheory.Functor

variable {C‚ÇÅ C‚ÇÇ C‚ÇÉ : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ]
  [Preadditive C‚ÇÅ] [Preadditive C‚ÇÇ] [Preadditive C‚ÇÉ]
  (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ)

instance [‚àÄ (X‚ÇÅ : C‚ÇÅ), (F.obj X‚ÇÅ).Additive] : F.flip.Additive where
instance [F.Additive] (X‚ÇÇ : C‚ÇÇ) : ((F.flip).obj X‚ÇÇ).Additive where

end CategoryTheory.Functor

namespace HomologicalComplex

variable {C : Type*} [Category C] [Preadditive C] [MonoidalCategory C] [MonoidalPreadditive C]
  {I : Type*} [AddCommMonoid I] {c : ComplexShape I} [DecidableEq I]
  (s : c.TensorSigns)

variable [(curryObj (MonoidalCategory.tensor C)).Additive]
  (K L : HomologicalComplex C c)

def tensorBicomplex :
      HomologicalComplex‚ÇÇ C c c :=
    (((Functor.mapHomologicalComplex‚ÇÇ (curryObj (MonoidalCategory.tensor C)) c c).obj K).obj L)

instance [h : HasTensor K L] :
    GradedObject.HasMap (tensorBicomplex K L).toGradedObject s.totalComplexShape.œÄ := h

noncomputable def tensorBiComplexTotalIso [HasTensor K L] [HasTensor L K] :
    Monoidal.tensorObj s K L ‚âÖ (tensorBicomplex K L).total s.totalComplexShape := Iso.refl _

variable [BraidedCategory C]

@[simps!]
def tensorBicomplexFlipIso : tensorBicomplex K L ‚âÖ (tensorBicomplex L K).flip :=
  ((Functor.mapHomologicalComplex‚ÇÇFlipIso (curryObj (MonoidalCategory.tensor C)) c c).app K).app L ‚â™‚â´
    (HomologicalComplex‚ÇÇ.flipFunctor C c c).mapIso (((NatIso.mapHomologicalComplex‚ÇÇ (curriedBraidingNatIso C).symm c c).app L).app K)

@[simps!]
def tensorBicomplexFlipNatIso :
    (Functor.mapHomologicalComplex‚ÇÇ (curryObj (MonoidalCategory.tensor C)) c c) ‚âÖ
      (Functor.mapHomologicalComplex‚ÇÇ (curryObj (MonoidalCategory.tensor C)) c c).flip ‚ãô
        (whiskeringRight _ _ _).obj (HomologicalComplex‚ÇÇ.flipFunctor C c c) :=
  NatIso.ofComponents (fun K => NatIso.ofComponents (fun L => tensorBicomplexFlipIso K L) (by
    intro L L' œÜ
    dsimp [tensorBicomplexFlipIso]
    simp only [NatTrans.naturality_assoc, Functor.comp_map, Functor.flip_obj_map, assoc,
      ‚Üê Functor.map_comp, ‚Üê NatTrans.comp_app, NatTrans.naturality])) (by
    intro K K' œÜ
    ext L : 2
    dsimp [tensorBicomplexFlipIso]
    rw [assoc, ‚Üê NatTrans.comp_app_assoc, NatTrans.naturality]
    dsimp
    rw [assoc, ‚Üê Functor.map_comp, ‚Üê Functor.map_comp, NatTrans.naturality])

structure _root_.ComplexShape.TensorSigns.Braiding where
  œÉ : TotalComplexShapeSymmetry s.totalComplexShape s.totalComplexShape
  symm (i‚ÇÅ i‚ÇÇ : I) : œÉ.Œµ i‚ÇÅ i‚ÇÇ = œÉ.Œµ i‚ÇÇ i‚ÇÅ -- this should be necessary for the hexagon relation?

variable {s} (Œ≤ : s.Braiding) [h‚ÇÅ : HasTensor K L] [h‚ÇÇ : HasTensor L K]

instance : (tensorBicomplex K L).flip.toGradedObject.HasMap s.totalComplexShape.œÄ := by
  refine' @GradedObject.hasMap_of_iso (I √ó I) I C _ _ _ _ _ h‚ÇÇ
  exact GradedObject.isoMk _ _ (fun ‚ü®i‚ÇÅ, i‚ÇÇ‚ü© => Œ≤_ (K.X i‚ÇÇ) (L.X i‚ÇÅ))

namespace Monoidal

noncomputable def braiding : Monoidal.tensorObj s K L ‚âÖ Monoidal.tensorObj s L K :=
  HomologicalComplex‚ÇÇ.totalSymmIso Œ≤.œÉ (tensorBicomplex K L) ‚â™‚â´
    HomologicalComplex‚ÇÇ.totalMapIso (tensorBicomplexFlipIso L K).symm s.totalComplexShape

/-lemma ŒπTensorObj_braiding_hom (i‚ÇÅ i‚ÇÇ i‚ÇÉ : I) (h : i‚ÇÅ + i‚ÇÇ = i‚ÇÉ) :
  ŒπTensorObj s K L i‚ÇÅ i‚ÇÇ i‚ÇÉ h ‚â´ (braiding K L Œ≤).hom.f i‚ÇÉ =
    (Œ≤_ (K.X i‚ÇÅ) (L.X i‚ÇÇ)).hom ‚â´ ŒπTensorObj s L K i‚ÇÇ i‚ÇÅ i‚ÇÉ (by rw [add_comm, h]) :=
  -- with this definition of braiding, we may get `(Œ≤_ (L.X i‚ÇÇ) (K.X i‚ÇÅ)).inv` instead
  -- of `(Œ≤_ (K.X i‚ÇÅ) (L.X i‚ÇÇ)).hom` in which case the definition should be fixed...
  sorry-/

variable (X Y Z : HomologicalComplex C c)
  [HasTensor X Y] [HasTensor Y Z] [HasTensor Z X]
  [HasTensor Y X] [HasTensor Z Y] [HasTensor X Z]
  [HasTensor (tensorObj s X Y) Z] [HasTensor X (tensorObj s Y Z)]
  [HasTensor (tensorObj s Y Z) X] [HasTensor Y (tensorObj s Z X)]
  [HasTensor (tensorObj s Y X) Z] [HasTensor Y (tensorObj s X Z)]
  [HasTensor (tensorObj s Z X) Y] [HasTensor Z (tensorObj s X Y)]
  [HasTensor (tensorObj s X Z) Y] [HasTensor X (tensorObj s Z Y)]
  [GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor X.X Y.X Z.X]
  [GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ X.X Y.X Z.X]
  [GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor Y.X Z.X X.X]
  [GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ Y.X Z.X X.X]
  [GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor Y.X X.X Z.X]
  [GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ Y.X X.X Z.X]
  [GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor Z.X X.X Y.X]
  [GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ Z.X X.X Y.X]
  [GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor X.X Z.X Y.X]
  [GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ X.X Z.X Y.X]

/-lemma hexagon_forward :
  (associator s X Y Z).hom ‚â´ (braiding X (tensorObj s Y Z) Œ≤).hom ‚â´ (associator s Y Z X).hom =
    tensorHom s (braiding X Y Œ≤).hom (ùüô Z) ‚â´ (associator s Y X Z).hom ‚â´ tensorHom s (ùüô Y) (braiding X Z Œ≤).hom := by
  ext n x y z h
  dsimp
  sorry

lemma hexagon_reverse : (associator s X Y Z).inv ‚â´ (braiding (tensorObj s X Y) Z Œ≤).hom ‚â´ (associator s Z X Y).inv =
    tensorHom s (ùüô X) (braiding Y Z Œ≤).hom ‚â´ (associator s X Z Y).inv ‚â´ tensorHom s (braiding X Z Œ≤).hom (ùüô Y) := by
  sorry-/

end Monoidal

end HomologicalComplex
