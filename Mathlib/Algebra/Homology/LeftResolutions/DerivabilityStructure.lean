/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Localization.DerivabilityStructure.OfFunctorialResolutions
import Mathlib.Algebra.Homology.Localization

/-!
# Left derivability structures on homological complexes

-/

open CategoryTheory

variable {A Œ± C‚ÇÄ : Type*} [Category A] [Abelian A] {c : ComplexShape Œ±}
  [Category C‚ÇÄ] {W‚ÇÄ : MorphismProperty C‚ÇÄ}
  (Œ¶ : LocalizerMorphism W‚ÇÄ (HomologicalComplex.quasiIso A c))
  (hW‚ÇÄ : W‚ÇÄ = (HomologicalComplex.quasiIso A c).inverseImage Œ¶.functor)
  {œÅ : HomologicalComplex A c ‚•§ C‚ÇÄ} (œÄ : œÅ ‚ãô Œ¶.functor ‚ü∂ ùü≠ _) [‚àÄ K, QuasiIso (œÄ.app K)]

namespace HomologicalComplex

include hW‚ÇÄ œÄ

variable [Œ¶.functor.Full] [Œ¶.functor.Faithful]

lemma isLocalizedEquivalence_of_functorial_left_resolutions :
    Œ¶.IsLocalizedEquivalence :=
  Œ¶.isLocalizedEquivalence_of_functorial_left_resolutions œÄ
    (fun _ ‚Ü¶ by rw [mem_quasiIso_iff]; infer_instance) hW‚ÇÄ

lemma isConnected_leftResolution_of_functorial_left_resolutions (K : HomologicalComplex A c) :
    letI : W‚ÇÄ.IsMultiplicative := by rw [hW‚ÇÄ]; infer_instance
    IsConnected (Œ¶.LeftResolution K) :=
  Œ¶.isConnected_leftResolution_of_functorial_resolutions œÄ
    (fun _ ‚Ü¶ by rw [mem_quasiIso_iff]; infer_instance) hW‚ÇÄ _

lemma isLeftDerivabilityStructure_of_functorial_left_resolutions :
    Œ¶.IsLeftDerivabilityStructure :=
  Œ¶.isLeftDerivabilityStructure_of_functorial_resolutions œÄ
    (fun _ ‚Ü¶ by rw [mem_quasiIso_iff]; infer_instance) hW‚ÇÄ

end HomologicalComplex

namespace HomotopyCategory

variable {Œ¶} {H‚ÇÄ : Type*} [Category H‚ÇÄ] {W‚ÇÄ‚Çï : MorphismProperty H‚ÇÄ}
  {Œ¶‚Çï : LocalizerMorphism W‚ÇÄ‚Çï (quasiIso A c)}
  (hW‚ÇÄ‚Çï : W‚ÇÄ‚Çï = (quasiIso A c).inverseImage Œ¶‚Çï.functor)
  {Œ® : LocalizerMorphism W‚ÇÄ W‚ÇÄ‚Çï}
  (iso : Œ¶.functor ‚ãô quotient _ _ ‚âÖ Œ®.functor ‚ãô Œ¶‚Çï.functor)

/-include hW‚ÇÄ œÄ iso in
lemma isLocalizedEquivalence_of_functorial_left_resolutions
    [Œ¶.functor.Full] [Œ¶.functor.Faithful] [Œ®.IsLocalizedEquivalence] :
    Œ¶‚Çï.IsLocalizedEquivalence := by
  have := iso
  have := HomologicalComplex.isLocalizedEquivalence_of_functorial_left_resolutions Œ¶ hW‚ÇÄ œÄ
  sorry-/

include œÄ iso in
lemma hasLeftResolutions_of_functorial_left_resolutions :
    Œ¶‚Çï.HasLeftResolutions := by
  intro K
  obtain ‚ü®K, rfl‚ü© := K.quotient_obj_surjective
  exact ‚ü®{
    X‚ÇÅ := Œ®.functor.obj (œÅ.obj K)
    w := iso.inv.app _ ‚â´ (quotient _ _).map (œÄ.app K)
    hw := by
      have : (quasiIso A c) ((quotient A c).map (œÄ.app K)) := by
        rw [quotient_map_mem_quasiIso_iff, HomologicalComplex.mem_quasiIso_iff]
        infer_instance
      exact (MorphismProperty.arrow_mk_iso_iff _ (Arrow.isoMk (iso.app _) (Iso.refl _))).1 this
  }‚ü©

include œÄ iso in
lemma hasLeftResolutions_arrow_of_functorial_left_resolutions :
    Œ¶‚Çï.arrow.HasLeftResolutions := by
  rintro ‚ü®K, L, f‚ü©
  obtain ‚ü®K, rfl‚ü© := K.quotient_obj_surjective
  obtain ‚ü®L, rfl‚ü© := L.quotient_obj_surjective
  obtain ‚ü®f, rfl‚ü© := (quotient _ _).map_surjective f
  have h (M : HomologicalComplex A c) :
      (quasiIso A c) (iso.inv.app _ ‚â´ (quotient _ _).map (œÄ.app M)) := by
    have : (quasiIso A c) ((quotient A c).map (œÄ.app M)) := by
      rw [quotient_map_mem_quasiIso_iff, HomologicalComplex.mem_quasiIso_iff]
      infer_instance
    exact (MorphismProperty.arrow_mk_iso_iff _ (Arrow.isoMk (iso.app _) (Iso.refl _))).1 this
  exact ‚ü®{
    X‚ÇÅ := Arrow.mk (Œ®.functor.map (œÅ.map f))
    w := Arrow.homMk (iso.inv.app _ ‚â´ (quotient _ _).map (œÄ.app K))
      (iso.inv.app _ ‚â´ (quotient _ _).map (œÄ.app L)) (by
        have h‚ÇÅ := iso.inv.naturality (œÅ.map f)
        have h‚ÇÇ := œÄ.naturality f
        dsimp at h‚ÇÅ h‚ÇÇ ‚ä¢
        rw [Category.assoc, reassoc_of% h‚ÇÅ, ‚Üê Functor.map_comp, ‚Üê Functor.map_comp, h‚ÇÇ])
    hw := ‚ü®h _, h _‚ü©
  }‚ü©

variable [Œ®.functor.EssSurj] [Œ¶.functor.Full] [Œ¶.functor.Faithful]

include hW‚ÇÄ œÄ iso in
lemma isConnected_leftResolution_of_functorial_left_resolutions
    (K : HomotopyCategory A c) :
    letI : W‚ÇÄ‚Çï.IsMultiplicative := by rw [hW‚ÇÄ‚Çï]; infer_instance
    IsConnected (Œ¶‚Çï.LeftResolution K) := by
  have : W‚ÇÄ‚Çï.IsMultiplicative := by rw [hW‚ÇÄ‚Çï]; infer_instance
  have : W‚ÇÄ.IsMultiplicative := by rw [hW‚ÇÄ]; infer_instance
  have : W‚ÇÄ‚Çï.RespectsIso := by rw [hW‚ÇÄ‚Çï]; infer_instance
  have := hasLeftResolutions_of_functorial_left_resolutions œÄ iso
  obtain ‚ü®K, rfl‚ü© := K.quotient_obj_surjective
  let P : Œ¶.LeftResolution K ‚•§ Œ¶‚Çï.LeftResolution ((quotient _ _).obj K) :=
    { obj R :=
        { X‚ÇÅ := Œ®.functor.obj R.X‚ÇÅ
          w := iso.inv.app _ ‚â´ (quotient _ _).map R.w
          hw := by
            apply MorphismProperty.comp_mem _ _ _ (MorphismProperty.of_isIso _ _) _
            rw [quotient_map_mem_quasiIso_iff]
            exact R.hw }
      map œÜ :=
        { f := Œ®.functor.map œÜ.f
          hf := Œ®.map _ (œÜ.hf)
          comm := by
            have := iso.inv.naturality œÜ.f
            dsimp at this ‚ä¢
            rw [reassoc_of% this, ‚Üê Functor.map_comp, œÜ.comm] } }
  have : P.EssSurj :=
    { mem_essImage R := by
        obtain ‚ü®f, hf‚ü© := (quotient _ _).map_surjective
          (iso.hom.app _ ‚â´ Œ¶‚Çï.functor.map (Œ®.functor.objObjPreimageIso R.X‚ÇÅ).hom ‚â´ R.w)
        let R' : Œ¶.LeftResolution K :=
          { X‚ÇÅ := Œ®.functor.objPreimage R.X‚ÇÅ
            w := f
            hw := by
              rw [‚Üê quotient_map_mem_quasiIso_iff, hf, ‚Üê Category.assoc]
              exact MorphismProperty.comp_mem _ _ _ (MorphismProperty.of_isIso _ _) R.hw }
        exact ‚ü®R', ‚ü®LocalizerMorphism.LeftResolution.isoMk (Œ®.functor.objObjPreimageIso R.X‚ÇÅ)
          (by simp [P, R', hf]) ‚ü©‚ü© }
  have := HomologicalComplex.isConnected_leftResolution_of_functorial_left_resolutions Œ¶ hW‚ÇÄ œÄ K
  exact P.isConnected_of_isConnected_of_essSurj

variable [Œ®.IsLocalizedEquivalence]

/-include hW‚ÇÄ œÄ hW‚ÇÄ‚Çï iso in
lemma isLeftDerivabilityStructure_of_functorial_left_resolutions :
    Œ¶‚Çï.IsLeftDerivabilityStructure := by
  have : W‚ÇÄ‚Çï.IsMultiplicative := by rw [hW‚ÇÄ‚Çï]; infer_instance
  have := isLocalizedEquivalence_of_functorial_left_resolutions hW‚ÇÄ œÄ iso
  have := hasLeftResolutions_arrow_of_functorial_left_resolutions œÄ iso
  have := isConnected_leftResolution_of_functorial_left_resolutions hW‚ÇÄ œÄ hW‚ÇÄ‚Çï iso
  apply LocalizerMorphism.IsLeftDerivabilityStructure.mk'-/

end HomotopyCategory
