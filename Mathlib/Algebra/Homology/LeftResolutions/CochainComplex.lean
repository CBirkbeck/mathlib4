/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.LeftResolutions.CochainComplexMinus
import Mathlib.Algebra.Homology.Embedding.CochainComplexTrunc
import Mathlib.Algebra.Homology.PreservesQuasiIso
import Mathlib.CategoryTheory.MorphismProperty.Limits
import Mathlib.CategoryTheory.Abelian.GrothendieckAxioms.Colim

/-!
# Resolutions of unbounded complexes

-/

open CategoryTheory Limits

namespace CochainComplex

variable {A : Type*} [Category A] [Abelian A]
  [HasColimitsOfShape ‚Ñ§ A] [HasExactColimitsOfShape ‚Ñ§ A]
  (L : Minus A ‚•§ CochainComplex A ‚Ñ§)

noncomputable def leftResolution : CochainComplex A ‚Ñ§ ‚•§ CochainComplex A ‚Ñ§ :=
  filtrationLEMinusFunctor A ‚ãô (whiskeringRight _ _ _).obj L ‚ãô colim

variable {L} (Œ± : L ‚ü∂ Minus.Œπ _)

noncomputable def leftResolutionœÄ :
    leftResolution L ‚ü∂ ùü≠ _ :=
  whiskerLeft _ (whiskerRight ((whiskeringRight _ _ _).map Œ±) _) ‚â´
    (Functor.associator _ _ _).inv ‚â´
    whiskerRight (filtrationLEMinusFunctorCompWhiskeringRightObjŒπIso A).hom _ ‚â´
    (filtrationLEFunctorCompColimIso A).hom

instance quasiIso_leftResolutionœÄ_app [‚àÄ K, QuasiIso (Œ±.app K)] (K : CochainComplex A ‚Ñ§) :
    QuasiIso ((leftResolutionœÄ Œ±).app K) := by
  let œÜ := colimMap (((whiskeringRight _ _ _).map Œ±).app K.filtrationLEMinus)
  have : QuasiIso œÜ := ((HomologicalComplex.isStableUnderColimitsOfShape_quasiIso
      A (.up ‚Ñ§) ‚Ñ§).colimMap _ (fun n ‚Ü¶ by
    dsimp
    simp only [HomologicalComplex.mem_quasiIso_iff]
    infer_instance))
  dsimp only [leftResolutionœÄ]
  change QuasiIso (œÜ ‚â´ _)
  infer_instance

end CochainComplex
