import Mathlib.Algebra.Homology.Braiding

open CategoryTheory Category Limits MonoidalCategory Preadditive

namespace HomologicalComplex

variable {C : Type*} [Category C] [Preadditive C] [MonoidalCategory C] [MonoidalPreadditive C]
  {I : Type*} [AddCommMonoid I] {c : ComplexShape I} [DecidableEq I]
  {s : c.TensorSigns} (Œ≤ : s.Braiding)
  [(curryObj (MonoidalCategory.tensor C)).Additive]

variable [SymmetricCategory C]

namespace Monoidal

open SymmetricCategory

variable (K L : HomologicalComplex C c) [HasTensor K L] [HasTensor L K]
  (hŒ≤ : ‚àÄ (i‚ÇÅ i‚ÇÇ : I), Œ≤.œÉ.Œµ i‚ÇÅ i‚ÇÇ = Œ≤.œÉ.Œµ i‚ÇÇ i‚ÇÅ)

lemma symmetry :
    (braiding K L Œ≤ ).hom ‚â´ (braiding L K Œ≤ ).hom = ùüô _ := by
  ext n x y h
  rw [comp_f, ŒπTensorObj_braiding_hom_assoc, id_f, comp_id, zsmul_comp, assoc,
    ŒπTensorObj_braiding_hom, comp_zsmul, smul_smul, symmetry_assoc, hŒ≤,
    TotalComplexShapeSymmetry.Œµ_mul_self, one_smul]

end Monoidal

end HomologicalComplex
