/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.Bifunctor
import Mathlib.Algebra.Homology.HomotopyCategory.MappingCone

/-!
# Action of bifunctor on mapping cones
-/

open CategoryTheory Limits HomologicalComplex

namespace CochainComplex

variable
  {C‚ÇÅ C‚ÇÇ D : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category D]
  [Preadditive C‚ÇÅ] [HasZeroMorphisms C‚ÇÇ]
  {K‚ÇÅ L‚ÇÅ : CochainComplex C‚ÇÅ ‚Ñ§} (œÜ : K‚ÇÅ ‚ü∂ L‚ÇÅ) (K‚ÇÇ : CochainComplex C‚ÇÇ ‚Ñ§) [Preadditive D]
  (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ D) [F.Additive]
  [‚àÄ (X‚ÇÅ : C‚ÇÅ), (F.obj X‚ÇÅ).PreservesZeroMorphisms]
  [HasHomotopyCofiber œÜ]

open HomComplex mappingCone

namespace mapBifunctorMappingCone‚ÇÅIso

variable [HasMapBifunctor (mappingCone œÜ) K‚ÇÇ F (ComplexShape.up ‚Ñ§)]

section

variable [HasMapBifunctor K‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)]

noncomputable def p‚ÇÅ‚ÇÄ : Cochain (mapBifunctor (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§))
    (mapBifunctor K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§)) 1 :=
  Cochain.mk (fun n m hnm ‚Ü¶ mapBifunctorDesc (fun p q hpq ‚Ü¶
    (F.map ((fst œÜ).1.v p _ rfl)).app _ ‚â´
      ŒπMapBifunctor _ _ _ _ _ _ _ (by dsimp at hpq ‚ä¢; omega)))

@[reassoc]
lemma Œπ_p‚ÇÅ‚ÇÄ_v (p q n : ‚Ñ§) (hpq : p + q = n) (m : ‚Ñ§) (hnm : n + 1 = m)
    (p' : ‚Ñ§) (hp' : p + 1 = p') :
   ŒπMapBifunctor (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) p q n hpq ‚â´
      (p‚ÇÅ‚ÇÄ œÜ K‚ÇÇ F).v n m hnm = (F.map ((fst œÜ).1.v p p' hp')).app _ ‚â´
        ŒπMapBifunctor _ _ _ _ _ _ _ (by dsimp; omega) := by
  subst hp'
  simp [p‚ÇÅ‚ÇÄ]

@[simps!]
noncomputable def p‚ÇÅ : Cocycle (mapBifunctor (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§))
    (mapBifunctor K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§)) 1 :=
  Cocycle.mk (p‚ÇÅ‚ÇÄ œÜ K‚ÇÇ F) 2 (by omega) (by
    ext n _ rfl p q hpq
    dsimp at hpq
    have h‚ÇÅ : (ComplexShape.up ‚Ñ§).Rel (p + 1) (p + 2) := by dsimp; omega
    have h‚ÇÇ : (ComplexShape.up ‚Ñ§).Rel q (q + 1) := rfl
    have h‚ÇÉ : (ComplexShape.up ‚Ñ§).Rel p (p + 1) := rfl
    simp [Œ¥_v 1 2 rfl _ n (n + 2) rfl (n + 1) (n + 1) (by omega) rfl,
      Œπ_p‚ÇÅ‚ÇÄ_v_assoc _ _ _ p q n hpq (n + 1) rfl (p + 1) rfl,
      Œπ_p‚ÇÅ‚ÇÄ_v _ _ _ p (q + 1) (n + 1) (by omega) (n + 2) (by omega) (p + 1) rfl,
      Œπ_p‚ÇÅ‚ÇÄ_v _ _ _ (p + 1) q (n + 1) (by omega) (n + 2) (by omega) (p + 2) (by omega),
      mapBifunctor.d_eq, Int.negOnePow_even 2 ‚ü®1, rfl‚ü©,
      mapBifunctor.d‚ÇÅ_eq K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§) h‚ÇÅ q (n + 2) (by dsimp; omega),
      mapBifunctor.d‚ÇÇ_eq K‚ÇÅ K‚ÇÇ F (.up ‚Ñ§) (p + 1) h‚ÇÇ (n + 2) (by dsimp; omega),
      mapBifunctor.d‚ÇÅ_eq (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) h‚ÇÉ q (n + 1) (by dsimp; omega),
      mapBifunctor.d‚ÇÇ_eq (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) p h‚ÇÇ (n + 1) (by dsimp; omega),
      Int.negOnePow_succ, ‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc,
      ‚Üê NatTrans.comp_app_assoc, ‚Üê NatTrans.comp_app,
      d_fst_v œÜ p (p + 1) (p + 2) rfl (by omega)]
    abel)

end

section

variable [HasMapBifunctor L‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)]

noncomputable def p‚ÇÇ : Cochain (mapBifunctor (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§))
    (mapBifunctor L‚ÇÅ K‚ÇÇ F (.up ‚Ñ§)) 0 :=
  Cochain.ofHoms (fun _ ‚Ü¶ mapBifunctorDesc (fun _ _ hpq ‚Ü¶
    (F.map ((snd œÜ).v _ _ (add_zero _))).app _ ‚â´
      ŒπMapBifunctor _ _ _ _ _ _ _ hpq))

@[reassoc (attr := simp)]
lemma Œπ_p‚ÇÇ_v (p q n : ‚Ñ§) (hpq : p + q = n) :
    ŒπMapBifunctor (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) p q n hpq ‚â´ (p‚ÇÇ œÜ K‚ÇÇ F).v n n (add_zero n) =
      (F.map ((snd œÜ).v _ _ (add_zero _))).app _ ‚â´
        ŒπMapBifunctor _ _ _ _ _ _ _ hpq := by
  simp [p‚ÇÇ]

end

variable [HasMapBifunctor K‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)]
  [HasMapBifunctor L‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)]
  [HasHomotopyCofiber (mapBifunctorMap œÜ (ùüô K‚ÇÇ) F (.up ‚Ñ§))]

noncomputable def hom : mapBifunctor (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) ‚ü∂
      mappingCone (mapBifunctorMap œÜ (ùüô K‚ÇÇ) F (.up ‚Ñ§)) :=
  mappingCone.lift _ (p‚ÇÅ œÜ K‚ÇÇ F) (p‚ÇÇ œÜ K‚ÇÇ F) (by
    ext n _ rfl p q hpq
    dsimp at hpq
    have h‚ÇÅ : (ComplexShape.up ‚Ñ§).Rel q (q + 1) := rfl
    have h‚ÇÇ : (ComplexShape.up ‚Ñ§).Rel p (p + 1) := rfl
    simp [mapBifunctor.d_eq, Œπ_p‚ÇÅ‚ÇÄ_v_assoc _ _ _ p q n _ _ rfl _ rfl,
      mapBifunctor.d‚ÇÅ_eq (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) h‚ÇÇ q (n + 1) (by dsimp; omega),
      mapBifunctor.d‚ÇÇ_eq (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) p h‚ÇÅ (n + 1) (by dsimp; omega),
      mapBifunctor.d‚ÇÅ_eq L‚ÇÅ K‚ÇÇ F (.up ‚Ñ§) h‚ÇÇ q (n + 1) (by dsimp; omega),
      mapBifunctor.d‚ÇÇ_eq L‚ÇÅ K‚ÇÇ F (.up ‚Ñ§) p h‚ÇÅ (n + 1) (by dsimp; omega),
      ‚Üê Functor.map_comp, ‚Üê Functor.map_comp_assoc,
      ‚Üê NatTrans.comp_app_assoc, ‚Üê NatTrans.comp_app, d_snd_v])

end mapBifunctorMappingCone‚ÇÅIso

variable [HasMapBifunctor (mappingCone œÜ) K‚ÇÇ F (ComplexShape.up ‚Ñ§)]
  [HasMapBifunctor K‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)]
  [HasMapBifunctor L‚ÇÅ K‚ÇÇ F (ComplexShape.up ‚Ñ§)]
  [HasHomotopyCofiber (mapBifunctorMap œÜ (ùüô K‚ÇÇ) F (.up ‚Ñ§))]

/-open mapBifunctorMappingCone‚ÇÅIso in
noncomputable def mapBifunctorMappingCone‚ÇÅIso :
    mapBifunctor (mappingCone œÜ) K‚ÇÇ F (.up ‚Ñ§) ‚âÖ
      mappingCone (mapBifunctorMap œÜ (ùüô K‚ÇÇ) F (.up ‚Ñ§)) where
  hom := hom œÜ K‚ÇÇ F
  inv := sorry
  hom_inv_id := sorry
  inv_hom_id := sorry-/

end CochainComplex
