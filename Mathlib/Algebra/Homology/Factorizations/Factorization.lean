import Mathlib.Algebra.Homology.DerivedCategory.Basic
import Mathlib.CategoryTheory.Abelian.Injective

open CategoryTheory Limits Category Preadditive

variable {C : Type*} [Category C] [Abelian C]

namespace CategoryTheory

def epiWithInjectiveKernel : MorphismProperty C :=
  fun _ _ f => Epi f ‚àß (Injective (kernel f))

lemma epiWithInjectiveKernel_iff {X Y : C} (f : X ‚ü∂ Y) :
    epiWithInjectiveKernel f ‚Üî
    ‚àÉ (I : C) (_ : Injective I) (i : I ‚ü∂ X) (s : Y ‚ü∂ X) (q : X ‚ü∂ I)
      (_ : i ‚â´ f = 0) (_ : i ‚â´ q = ùüô I)
      (_ : s ‚â´ f = ùüô Y), ùüô X = q ‚â´ i + f ‚â´ s := by
  constructor
  ¬∑ rintro ‚ü®_, _‚ü©
    let S := ShortComplex.mk (kernel.Œπ f) f (by simp)
    have hS : S.Exact := S.exact_of_f_is_kernel (kernelIsKernel f)
    let œÉ : S.Splitting := ShortComplex.Splitting.ofExactOfRetraction S hS
        (Injective.factorThru (ùüô _) (kernel.Œπ f)) (by simp) inferInstance
    exact ‚ü®kernel f, inferInstance, kernel.Œπ f, œÉ.s, œÉ.r, by simp, œÉ.f_r, œÉ.s_g, œÉ.id.symm‚ü©
  ¬∑ rintro ‚ü®I, _, i, s, q, hif, hiq, hsf, H‚ü©
    have : IsSplitEpi f := ‚ü®s, hsf‚ü©
    refine' ‚ü®inferInstance, _‚ü©
    have e : I ‚âÖ kernel f :=
      { hom := kernel.lift _ i hif
        inv := kernel.Œπ f ‚â´ q
        hom_inv_id := by simp [hiq]
        inv_hom_id := by
          simp only [‚Üê cancel_mono (kernel.Œπ f), assoc,
            kernel.lift_Œπ, assoc, id_comp]
          conv_rhs => rw [‚Üê comp_id (kernel.Œπ f)]
          rw [H, comp_add]
          simp }
    exact Injective.of_iso e inferInstance

end CategoryTheory

namespace CochainComplex

variable {K L : CochainComplex C ‚Ñ§} (œÜ : K ‚ü∂ L)

def monoUpTo (n : ‚Ñ§) : Prop := ‚àÄ (i : ‚Ñ§) (_ : i ‚â§ n), Mono (œÜ.f i)

def fibration : Prop := ‚àÄ (i : ‚Ñ§), epiWithInjectiveKernel (œÜ.f i)

end CochainComplex
