import Mathlib.Algebra.Homology.Factorizations.CM5b
import Mathlib.CategoryTheory.Abelian.YonedaExt

open CategoryTheory Category Limits Preadditive

namespace CategoryTheory

variable {C : Type*} [Category C] {X Y : C} (f : X ‚ü∂ Y)

structure HomFactorization where
  I : C
  i : X ‚ü∂ I
  p : I ‚ü∂ Y
  fac : i ‚â´ p = f

variable {f}

@[simps]
def HomFactorization.mk' {I : C} {i : X ‚ü∂ I} {p : I ‚ü∂ Y} (fac : i ‚â´ p = f) : HomFactorization f where
  fac := fac

attribute [reassoc (attr := simp)] HomFactorization.fac

end CategoryTheory

variable {C : Type*} [Category C] [Abelian C] [EnoughInjectives C]
  {K L : CochainComplex C ‚Ñ§} (f : K ‚ü∂ L)

namespace CochainComplex

open HomologicalComplex

namespace CM5aCof

variable {f}

structure IsCofFibFactorization (F : HomFactorization f) : Prop where
  hi : Mono F.i := by infer_instance
  hp : degreewiseEpiWithInjectiveKernel F.p

variable (f)

def CofFibFactorization := FullSubcategory (IsCofFibFactorization (f := f))

--instance : Category (CofFibFactorization f) := by
--  dsimp only [CofFibFactorization]
--  infer_instance

namespace CofFibFactorization

variable {f}
variable (F : CofFibFactorization f)

instance : Mono (F.1.i) := F.2.hi

def IsIsoLE (n : ‚Ñ§) : Prop := ‚àÄ (i : ‚Ñ§) (_ : i ‚â§ n), IsIso (F.1.p.f i)

class QuasiIsoLE (n : ‚Ñ§) : Prop where
  quasiIsoAt (i : ‚Ñ§) (_ : i ‚â§ n) : QuasiIsoAt (F.1.i) i

lemma quasiIsoAt_of_quasiIsoLE (F : CofFibFactorization f)
    (n : ‚Ñ§) [F.QuasiIsoLE n] (i : ‚Ñ§) (hi : i ‚â§ n) : QuasiIsoAt (F.1.i) i :=
  QuasiIsoLE.quasiIsoAt i hi

@[simps]
def mk {I : CochainComplex C ‚Ñ§} {i : K ‚ü∂ I} {p : I ‚ü∂ L} (fac : i ‚â´ p = f)
  [hi : Mono i] (hp : degreewiseEpiWithInjectiveKernel p) :
    CofFibFactorization f where
  obj := HomFactorization.mk' fac
  property := ‚ü®hi, hp‚ü©

end CofFibFactorization

lemma step‚ÇÅ [Mono f] (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
    (hf : ‚àÄ (i : ‚Ñ§) (_ : i ‚â§ n‚ÇÄ), QuasiIsoAt f i) :
    ‚àÉ (F : CofFibFactorization f) (_ : F.IsIsoLE n‚ÇÄ) (_ : F.QuasiIsoLE n‚ÇÄ),
      Mono (homologyMap F.1.i n‚ÇÅ) := by
  let S := ((single C (ComplexShape.up ‚Ñ§) n‚ÇÅ).obj (Injective.under (K.opcycles n‚ÇÅ)))
  let M := biprod S L
  let i‚ÇÅ : K ‚ü∂ S := ((toSingleEquiv _ _ n‚ÇÄ n‚ÇÅ (by subst hn‚ÇÅ; simp)).symm
    ‚ü®K.pOpcycles n‚ÇÅ ‚â´ Injective.Œπ _,
      by rw [d_pOpcycles_assoc, zero_comp]‚ü©)
  let i : K ‚ü∂ M := biprod.lift i‚ÇÅ f
  let p : M ‚ü∂ L := biprod.snd
  let œÉ : L ‚ü∂ M := biprod.inr
  have œÉp : œÉ ‚â´ p = ùüô _ := by simp
  have hp : degreewiseEpiWithInjectiveKernel p := fun n => by
    rw [epiWithInjectiveKernel_iff]
    refine' ‚ü®S.X n, _, (biprod.inl : _ ‚ü∂ M).f n, (biprod.inr : _ ‚ü∂ M).f n,
        (biprod.fst : M ‚ü∂ _).f n, _, _, _ , _, _‚ü©
    ¬∑ dsimp
      by_cases n = n‚ÇÅ
      ¬∑ rw [if_pos h]
        infer_instance
      ¬∑ rw [if_neg h]
        infer_instance
    ¬∑ rw [‚Üê comp_f, biprod.inl_snd, zero_f]
    ¬∑ rw [‚Üê comp_f, biprod.inr_fst, zero_f]
    ¬∑ rw [‚Üê comp_f, biprod.inl_fst, id_f]
    ¬∑ rw [‚Üê comp_f, biprod.inr_snd, id_f]
    ¬∑ rw [‚Üê id_f, ‚Üê biprod.total, add_f_apply, comp_f, comp_f]
  have fac : i ‚â´ p = f := by simp
  have hp' : ‚àÄ (n : ‚Ñ§) (_ : n ‚â§ n‚ÇÄ), IsIso (p.f n) := fun n hn => by
    refine' ‚ü®(biprod.inr : _ ‚ü∂ M).f n, _, _‚ü©
    ¬∑ rw [‚Üê cancel_mono ((HomologicalComplex.eval C (ComplexShape.up ‚Ñ§) n).mapBiprod _ _).hom]
      ext
      ¬∑ apply IsZero.eq_of_tgt
        dsimp
        rw [if_neg (by linarith)]
        exact isZero_zero C
      ¬∑ dsimp
        simp only [Category.assoc, biprod.lift_snd, Category.id_comp]
        rw [‚Üê comp_f, biprod.inr_snd, id_f, comp_id]
    ¬∑ rw [‚Üê comp_f, biprod.inr_snd, id_f]
  have hp'' : ‚àÄ (n : ‚Ñ§) (_ : n ‚â§ n‚ÇÄ), QuasiIsoAt p n := fun n hn => by
    obtain (hn | rfl) := hn.lt_or_eq
    ¬∑ rw [quasiIsoAt_iff' _ (n-1) n (n+1) (by simp) (by simp)]
      let œÜ := (shortComplexFunctor' C (ComplexShape.up ‚Ñ§) (n - 1) n (n + 1)).map p
      have : IsIso œÜ.œÑ‚ÇÅ := hp' _ (by linarith)
      have : IsIso œÜ.œÑ‚ÇÇ := hp' _ (by linarith)
      have : IsIso œÜ.œÑ‚ÇÉ := hp' _ (by linarith)
      apply ShortComplex.quasiIso_of_epi_of_isIso_of_mono œÜ
    ¬∑ rw [quasiIsoAt_iff_isIso_homologyMap]
      refine' ‚ü®homologyMap œÉ n, _, _‚ü©
      ¬∑ have : cyclesMap (biprod.inl : _ ‚ü∂ M) n = 0 := by
          have : (biprod.inl : _ ‚ü∂ M).f n = 0 := by
            apply IsZero.eq_of_src
            dsimp
            rw [if_neg (by linarith)]
            exact Limits.isZero_zero C
          rw [‚Üê cancel_mono (M.iCycles n), zero_comp, cyclesMap_i, this, comp_zero]
        symm
        rw [‚Üê homologyMap_comp, ‚Üê homologyMap_id, ‚Üê sub_eq_zero, ‚Üê homologyMap_sub,
          ‚Üê biprod.total, add_sub_cancel, ‚Üê cancel_epi (M.homologyœÄ n),
          homologyœÄ_naturality, comp_zero, cyclesMap_comp, this, comp_zero, zero_comp]
      ¬∑ rw [‚Üê homologyMap_comp, œÉp, homologyMap_id]
  have hi : ‚àÄ (n : ‚Ñ§) (_ : n ‚â§ n‚ÇÄ), QuasiIsoAt i n := fun n hn => by
    have : QuasiIsoAt p n := hp'' n hn
    have : QuasiIsoAt (i ‚â´ p) n := by simpa only [fac] using hf n hn
    exact quasiIsoAt_of_comp_right i p n
  refine' ‚ü®CofFibFactorization.mk fac hp, hp', ‚ü®hi‚ü©, mono_of_cancel_zero _ _‚ü©
  intro A‚ÇÄ x‚ÇÄ (hx‚ÇÄ : x‚ÇÄ ‚â´ homologyMap i n‚ÇÅ = 0)
  obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, _, x‚ÇÅ, hx‚ÇÅ‚ü© := surjective_up_to_refinements_of_epi (K.homologyœÄ n‚ÇÅ) x‚ÇÄ
  rw [‚Üê cancel_epi œÄ‚ÇÅ, comp_zero, hx‚ÇÅ,
    K.comp_homologyœÄ_eq_zero_iff_up_to_refinements x‚ÇÅ n‚ÇÄ (by simp [hn‚ÇÅ])]
  replace hx‚ÇÄ := œÄ‚ÇÅ ‚â´= hx‚ÇÄ
  rw [reassoc_of% hx‚ÇÅ, comp_zero, homologyœÄ_naturality, ‚Üê assoc,
    M.comp_homologyœÄ_eq_zero_iff_up_to_refinements (x‚ÇÅ ‚â´ cyclesMap i n‚ÇÅ) n‚ÇÄ (by simp [hn‚ÇÅ])] at hx‚ÇÄ
  have : Mono (opcyclesMap i‚ÇÅ n‚ÇÅ) := by
    let Œ± : Injective.under (K.opcycles n‚ÇÅ) ‚ü∂ S.X n‚ÇÅ :=
      (singleObjXSelf C (ComplexShape.up ‚Ñ§) n‚ÇÅ (Injective.under (K.opcycles n‚ÇÅ))).inv
    have := S.isIso_pOpcycles _ n‚ÇÅ rfl rfl
    have : opcyclesMap i‚ÇÅ n‚ÇÅ = Injective.Œπ (K.opcycles n‚ÇÅ) ‚â´ Œ± ‚â´ S.pOpcycles n‚ÇÅ := by
      rw [‚Üê (cancel_epi (K.pOpcycles n‚ÇÅ)), p_opcyclesMap, ‚Üê assoc, ‚Üê assoc]
      simp [toSingleEquiv]
    rw [this]
    infer_instance
  have hx‚ÇÅ' : (x‚ÇÅ ‚â´ K.iCycles n‚ÇÅ) ‚â´ K.pOpcycles n‚ÇÅ = 0 := by
    obtain ‚ü®A‚ÇÇ, œÄ‚ÇÇ, _, x‚ÇÇ, hx‚ÇÇ‚ü© := hx‚ÇÄ
    replace hx‚ÇÇ := hx‚ÇÇ =‚â´ (M.iCycles n‚ÇÅ ‚â´ M.pOpcycles n‚ÇÅ ‚â´ opcyclesMap biprod.fst n‚ÇÅ)
    rw [assoc, assoc, assoc, cyclesMap_i_assoc, toCycles_i_assoc, d_pOpcycles_assoc,
      zero_comp, comp_zero, p_opcyclesMap, ‚Üê comp_f_assoc, biprod.lift_fst,
      ‚Üê p_opcyclesMap i‚ÇÅ n‚ÇÅ] at hx‚ÇÇ
    rw [assoc, ‚Üê cancel_mono (opcyclesMap i‚ÇÅ n‚ÇÅ), zero_comp, assoc, assoc,
      ‚Üê cancel_epi œÄ‚ÇÇ, comp_zero, hx‚ÇÇ]
  rw [K.comp_pOpcycles_eq_zero_iff_up_to_refinements (x‚ÇÅ ‚â´ K.iCycles n‚ÇÅ) n‚ÇÄ (by simp [hn‚ÇÅ])] at hx‚ÇÅ'
  obtain ‚ü®A‚ÇÉ, œÄ‚ÇÉ, _, x‚ÇÉ, hx‚ÇÉ‚ü© := hx‚ÇÅ'
  refine' ‚ü®A‚ÇÉ, œÄ‚ÇÉ, inferInstance, x‚ÇÉ, _‚ü©
  rw [‚Üê cancel_mono (K.iCycles n‚ÇÅ), assoc, hx‚ÇÉ, assoc, toCycles_i]

/-lemma step‚ÇÇ [Mono f] (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
    (hf : ‚àÄ (i : ‚Ñ§) (_ : i ‚â§ n‚ÇÄ), QuasiIsoAt f i)
    [Mono (homologyMap f n‚ÇÅ)] :
    ‚àÉ (F : CofFibFactorization f) (_ : F.IsIsoLE n‚ÇÅ), F.QuasiIsoLE n‚ÇÅ := by
  sorry

lemma step‚ÇÅ‚ÇÇ [Mono f] (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
    (hf : ‚àÄ (i : ‚Ñ§) (_ : i ‚â§ n‚ÇÄ), QuasiIsoAt f i) :
    ‚àÉ (F : CofFibFactorization f) (_ : F.IsIsoLE n‚ÇÄ), F.QuasiIsoLE n‚ÇÅ := by
  obtain ‚ü®F‚ÇÅ, hF‚ÇÅ, hF‚ÇÅ', _‚ü© := step‚ÇÅ f n‚ÇÄ n‚ÇÅ hn‚ÇÅ hf
  obtain ‚ü®F‚ÇÇ, hF‚ÇÇ, hF‚ÇÇ'‚ü© := step‚ÇÇ F‚ÇÅ.1.i n‚ÇÄ n‚ÇÅ hn‚ÇÅ (F‚ÇÅ.quasiIsoAt_of_quasiIsoLE n‚ÇÄ)
  have fac : F‚ÇÇ.1.i ‚â´ F‚ÇÇ.1.p ‚â´ F‚ÇÅ.1.p = f := by
    rw [reassoc_of% F‚ÇÇ.1.fac, F‚ÇÅ.1.fac]
  refine' ‚ü®CofFibFactorization.mk fac
    (MorphismProperty.comp_mem _ _ _ F‚ÇÇ.2.hp F‚ÇÅ.2.hp), _,
      ‚ü®F‚ÇÇ.quasiIsoAt_of_quasiIsoLE n‚ÇÅ‚ü©‚ü©
  ¬∑ intro i hi
    have := hF‚ÇÅ i hi
    have := hF‚ÇÇ i (by linarith)
    dsimp
    infer_instance-/

variable {f}

/-lemma step' (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÅ = n‚ÇÄ + 1)
    (F : CofFibFactorization f) [F.QuasiIsoLE n‚ÇÄ] :
    ‚àÉ (F' : CofFibFactorization f) (œÜ : F ‚ü∂ F'), 0 = 1 := by
  sorry-/

end CM5aCof

/-lemma CM5a_cof (n : ‚Ñ§) [K.IsStrictlyGE (n + 1)] [L.IsStrictlyGE n] :
    ‚àÉ (L' : CochainComplex C ‚Ñ§) (_hL' : L'.IsStrictlyGE n) (i : K ‚ü∂ L') (p : L' ‚ü∂ L)
      (_hi : Mono i) (_hi' : QuasiIso i) (_hp : degreewiseEpiWithInjectiveKernel p), i ‚â´ p = f :=
  sorry

lemma CM5a (n : ‚Ñ§) [K.IsStrictlyGE (n + 1)] [L.IsStrictlyGE n] :
    ‚àÉ (L' : CochainComplex C ‚Ñ§) (_hL' : L'.IsStrictlyGE n) (i : K ‚ü∂ L') (p : L' ‚ü∂ L)
      (_hi : Mono i) (_hi' : QuasiIso i) (_hp : degreewiseEpiWithInjectiveKernel p), i ‚â´ p = f := by
  obtain ‚ü®L', _, i‚ÇÅ, p‚ÇÅ, _, hp‚ÇÅ, _, rfl‚ü© := CM5b f n
  obtain ‚ü®L'', _, i‚ÇÇ, p‚ÇÇ, _, _, hp‚ÇÇ, rfl‚ü© := CM5a_cof i‚ÇÅ n
  refine' ‚ü®L'', inferInstance, i‚ÇÇ, p‚ÇÇ ‚â´ p‚ÇÅ, inferInstance, inferInstance,
    MorphismProperty.comp_mem _ _ _ hp‚ÇÇ hp‚ÇÅ, by simp‚ü©-/

end CochainComplex
