import Mathlib.Algebra.Homology.LeftResolution
import Mathlib.CategoryTheory.Localization.DerivabilityStructure.Constructor
import Mathlib.Algebra.Homology.DerivedCategory.Minus

open CategoryTheory Limits

namespace CochainComplex

variable {C A : Type*} [Category C] [Abelian C] [Category A] [Preadditive A]
  [HasZeroObject A] [HasBinaryBiproducts A]
  (Œπ : A ‚•§ C) [Œπ.Full] [Œπ.Faithful] [Œπ.PreservesZeroMorphisms] [Œπ.Additive]

structure LeftResolutions where
  F : C ‚•§ A
  œÄ : F ‚ãô Œπ ‚ü∂ ùü≠ C
  hŒµ (X : C) : Epi (œÄ.app X) := by infer_instance

namespace LeftResolutions

abbrev quasiIso : MorphismProperty (HomotopyCategory.Minus A) :=
  (HomotopyCategory.Minus.quasiIso C).inverseImage Œπ.mapHomotopyCategoryMinus

@[simps]
def localizerMorphism :
    LocalizerMorphism (quasiIso Œπ) (HomotopyCategory.Minus.quasiIso C) where
  functor := Œπ.mapHomotopyCategoryMinus
  map _ _ _ hf := hf

variable {Œπ}
variable (Œõ : LeftResolutions Œπ)

/-lemma localizerMorphism_isLocalizedEquivalence :
    (localizerMorphism Œπ).IsLocalizedEquivalence := by
  have := Œõ
  sorry

lemma isLocalization [HasDerivedCategory C] :
    (Œπ.mapHomotopyCategoryMinus ‚ãô DerivedCategory.Minus.Qh).IsLocalization (quasiIso Œπ) := by
  have := Œõ.localizerMorphism_isLocalizedEquivalence
  exact LocalizerMorphism.IsLocalizedEquivalence.isLocalization (localizerMorphism Œπ)
    (DerivedCategory.Minus.Qh )

lemma isLeftDerivabilityStructure :
    (localizerMorphism Œπ).op.IsRightDerivabilityStructure := by
  have : HasDerivedCategory C := HasDerivedCategory.standard _
  have : ((Functor.mapHomotopyCategoryMinus Œπ).op ‚ãô DerivedCategory.Minus.Qh.op).IsLocalization
      (quasiIso Œπ).op := (Functor.isLocalization_iff_op _ _).1 Œõ.isLocalization
  have : ‚àÄ (X‚ÇÇ : (HomotopyCategory.Minus C)·µí·µñ),
    IsConnected (LocalizerMorphism.RightResolution (LocalizerMorphism.op (localizerMorphism Œπ)) X‚ÇÇ) := sorry
  have : LocalizerMorphism.HasRightResolutions (LocalizerMorphism.arrow (LocalizerMorphism.op (localizerMorphism Œπ))) := sorry
  have : CatCommSq (LocalizerMorphism.op (localizerMorphism Œπ)).functor
    ((Functor.mapHomotopyCategoryMinus Œπ).op ‚ãô DerivedCategory.Minus.Qh.op) DerivedCategory.Minus.Qh.op
    (ùü≠ (DerivedCategory.Minus C)·µí·µñ) := ‚ü®Iso.refl _‚ü©
  exact LocalizerMorphism.IsRightDerivabilityStructure.mk' (localizerMorphism Œπ).op
    (Œπ.mapHomotopyCategoryMinus.op ‚ãô (DerivedCategory.Minus.Qh (C := C)).op)
    DerivedCategory.Minus.Qh.op (F := ùü≠ _)-/

end LeftResolutions

end CochainComplex
