import Mathlib.Algebra.Homology.LeftResolution
import Mathlib.CategoryTheory.Localization.DerivabilityStructure.Constructor
import Mathlib.Algebra.Homology.HomotopyCategory.Minus

open CategoryTheory Limits

namespace CochainComplex

variable {C A : Type*} [Category C] [Abelian C] [Category A] [Preadditive A]
  [HasZeroObject A] [HasBinaryBiproducts A]
  (Œπ : A ‚•§ C) [Œπ.Full] [Œπ.Faithful] [Œπ.PreservesZeroMorphisms] [Œπ.Additive]

structure LeftResolutions where
  F : C ‚•§ A
  œÄ : F ‚ãô Œπ ‚ü∂ ùü≠ C
  hŒµ (X : C) : Epi (œÄ.app X) := by infer_instance

namespace LeftResolutions

@[simps]
def localizerMorphism :
    LocalizerMorphism ((HomotopyCategory.Minus.quasiIso C).inverseImage
      Œπ.mapHomotopyCategoryMinus) (HomotopyCategory.Minus.quasiIso C) where
  functor := Œπ.mapHomotopyCategoryMinus
  map _ _ _ hf := hf

variable (Œõ : LeftResolutions Œπ)

/-lemma isLeftDerivabilityStructure :
    (localizerMorphism Œπ).op.IsRightDerivabilityStructure := by
  -- LocalizerMorphism.IsRightDerivabilityStructure.mk'
  sorry-/

end LeftResolutions

end CochainComplex
