/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import Mathlib.Algebra.Homology.Homotopy
import Mathlib.Algebra.Homology.Additive
import Mathlib.Data.Int.Parity
import Mathlib.Tactic.Linarith

--import algebra.homology.homotopy
--import algebra.homology.additive
--import algebra.category.Group.abelian
--import algebra.homology.short_exact.preadditive
--import for_mathlib.algebra.homology.homological_complex_X_iso_of_eq

open CategoryTheory Category Preadditive Limits

universe v u


namespace HomologicalComplex

variable {C Œπ : Type _} [Category C] [HasZeroMorphisms C]
  {c : ComplexShape Œπ}

def XIsoOfEq (K : HomologicalComplex C c) {p q : Œπ} (h : p = q) :
  K.X p ‚âÖ K.X q := eqToIso (by rw [h])

end HomologicalComplex

variable {C : Type u} [Category.{v} C] [Preadditive C]

namespace CochainComplex

variable {F G K L : CochainComplex C ‚Ñ§} (n m : ‚Ñ§)

namespace HomComplex

def Œµ (n : ‚Ñ§) : ‚Ñ§ := (-1 : Units ‚Ñ§) ^ n

lemma Œµ_add (n‚ÇÅ n‚ÇÇ : ‚Ñ§) : Œµ (n‚ÇÅ + n‚ÇÇ) = Œµ n‚ÇÅ * Œµ n‚ÇÇ := by
  simp only [Œµ, ‚Üê Units.val_mul, ‚Üê Units.ext_iff, zpow_add]

@[simp]
lemma Œµ_0 : Œµ 0 = 1 := rfl

@[simp]
lemma Œµ_1 : Œµ 1 = -1 := rfl

lemma Œµ_succ (n : ‚Ñ§) : Œµ (n + 1) = - Œµ n := by
  simp only [Œµ_add, Œµ_1, mul_neg, mul_one]

lemma Œµ_even (n : ‚Ñ§) (hn : Even n) : Œµ n = 1 := by
  obtain ‚ü®k, rfl‚ü© := hn
  simp only [Œµ, ‚Üê Units.ext_iff, zpow_add, ‚Üê mul_zpow, mul_neg, mul_one, neg_neg, one_zpow]

lemma Œµ_odd (n : ‚Ñ§) (hn : Odd n) : Œµ n = -1 := by
  obtain ‚ü®k, rfl‚ü© := hn
  rw [Œµ_add, Œµ_even (2 * k) ‚ü®k, two_mul k‚ü©, one_mul, Œµ_1]

lemma Œµ_eq_one_iff (n : ‚Ñ§) : Œµ n = 1 ‚Üî Even n := by
  constructor
  . intro h
    rw [Int.even_iff_not_odd]
    intro h'
    rw [Œµ_odd _ h'] at h
    simp only at h
  . exact Œµ_even n

lemma Œµ_eq_neg_one_iff (n : ‚Ñ§) : Œµ n = -1 ‚Üî Odd n := by
  constructor
  . intro h
    rw [Int.odd_iff_not_even]
    intro h'
    rw [Œµ_even _ h'] at h
    simp only at h
  . exact Œµ_odd n

lemma Œµ_neg (n : ‚Ñ§) : Œµ (-n) = Œµ n := by
  dsimp [Œµ]
  simp only [zpow_neg, ‚Üê inv_zpow, inv_neg, inv_one]

lemma Œµ_sub (n‚ÇÅ n‚ÇÇ : ‚Ñ§) : Œµ (n‚ÇÅ - n‚ÇÇ) = Œµ n‚ÇÅ * Œµ n‚ÇÇ := by
  simp only [sub_eq_add_neg, Œµ_add, Œµ_neg]

lemma Œµ_eq_iff (n‚ÇÅ n‚ÇÇ : ‚Ñ§) : Œµ n‚ÇÅ = Œµ n‚ÇÇ ‚Üî Even (n‚ÇÅ - n‚ÇÇ) := by
  by_cases h‚ÇÇ : Even n‚ÇÇ
  . rw [Œµ_even _ h‚ÇÇ, Int.even_sub, Œµ_eq_one_iff]
    tauto
  . rw [‚Üê Int.odd_iff_not_even] at h‚ÇÇ
    rw [Œµ_odd _ h‚ÇÇ, Int.even_sub, Œµ_eq_neg_one_iff,
      Int.even_iff_not_odd, Int.even_iff_not_odd]
    tauto

@[simp]
lemma mul_Œµ_self (n : ‚Ñ§) : Œµ n * Œµ n = 1 := by
  simpa only [‚Üê Œµ_add] using Œµ_even _ (even_add_self n)

@[simp]
lemma Œµ_mul_self (n : ‚Ñ§) : Œµ (n * n) = Œµ n := by
  by_cases hn : Even n
  . rw [Œµ_even _ hn, Œµ_even]
    rw [Int.even_mul]
    tauto
  . rw [‚Üê Int.odd_iff_not_even] at hn
    rw [Œµ_odd _ hn, Œµ_odd]
    rw [Int.odd_mul]
    tauto

structure Triplet (n : ‚Ñ§) := (p : ‚Ñ§) (q : ‚Ñ§) (hpq : p + n = q)

variable (F G)

def Cochain := ‚àÄ (T : Triplet n), F.X T.p ‚ü∂ G.X T.q

instance : AddCommGroup (Cochain F G n) := by
  dsimp only [Cochain]
  infer_instance

namespace Cochain

variable {F G n}

def mk (v : ‚àÄ (p q : ‚Ñ§) (_ : p + n = q), F.X p ‚ü∂ G.X q) : Cochain F G n :=
  fun ‚ü®p, q, hpq‚ü© => v p q hpq

def v (Œ≥ : Cochain F G n) (p q : ‚Ñ§) (hpq : p + n = q) :
  F.X p ‚ü∂ G.X q := Œ≥ ‚ü®p, q, hpq‚ü©

@[simp]
lemma mk_v (v : ‚àÄ (p q : ‚Ñ§) (_ : p + n = q), F.X p ‚ü∂ G.X q)
    (p q : ‚Ñ§) (hpq : p + n = q) : (Cochain.mk v).v p q hpq = v p q hpq := rfl

lemma congr_v {z‚ÇÅ z‚ÇÇ : Cochain F G n} (h : z‚ÇÅ = z‚ÇÇ) (p q : ‚Ñ§) (hpq : p + n = q) :
  z‚ÇÅ.v p q hpq = z‚ÇÇ.v p q hpq := by subst h ; rfl

@[ext]
lemma ext (z‚ÇÅ z‚ÇÇ : Cochain F G n)
    (h : ‚àÄ (T : Triplet n), z‚ÇÅ.v T.p T.q T.hpq = z‚ÇÇ.v T.p T.q T.hpq) : z‚ÇÅ = z‚ÇÇ := by
    funext
    apply h

@[ext 1100]
lemma ext‚ÇÄ (z‚ÇÅ z‚ÇÇ : Cochain F G 0)
    (h : ‚àÄ (p : ‚Ñ§), z‚ÇÅ.v p p (add_zero p) = z‚ÇÇ.v p p (add_zero p)) : z‚ÇÅ = z‚ÇÇ := by
    ext ‚ü®p, q, hpq‚ü©
    obtain rfl : q = p := by rw [‚Üê hpq, add_zero]
    exact h q

@[simp]
lemma zero_v {n : ‚Ñ§} (p q : ‚Ñ§) (hpq : p + n = q) : (0 : Cochain F G n).v p q hpq = 0 := rfl

@[simp]
lemma add_v {n : ‚Ñ§} (z‚ÇÅ z‚ÇÇ : Cochain F G n) (p q : ‚Ñ§) (hpq : p + n = q) :
    (z‚ÇÅ+z‚ÇÇ).v p q hpq = z‚ÇÅ.v p q hpq + z‚ÇÇ.v p q hpq := rfl

@[simp]
lemma sub_v {n : ‚Ñ§} (z‚ÇÅ z‚ÇÇ : Cochain F G n) (p q : ‚Ñ§) (hpq : p + n = q) :
    (z‚ÇÅ-z‚ÇÇ).v p q hpq = z‚ÇÅ.v p q hpq - z‚ÇÇ.v p q hpq := rfl

@[simp]
lemma neg_v {n : ‚Ñ§} (z : Cochain F G n) (p q : ‚Ñ§) (hpq : p + n = q) :
    (-z).v p q hpq = - (z.v p q hpq) := rfl

@[simp]
lemma zsmul_v {n k : ‚Ñ§} (z : Cochain F G n) (p q : ‚Ñ§) (hpq : p + n = q) :
    (k ‚Ä¢ z).v p q hpq = k ‚Ä¢ (z.v p q hpq) := rfl

def ofHoms (œà : ‚àÄ (p : ‚Ñ§), F.X p ‚ü∂ G.X p) : Cochain F G 0 :=
Cochain.mk (fun p q hpq => œà p ‚â´ eqToHom (by rw [‚Üê hpq, add_zero]))

@[simp]
lemma ofHoms_v (œà : ‚àÄ (p : ‚Ñ§), F.X p ‚ü∂ G.X p) (p : ‚Ñ§) :
    (ofHoms œà).v p p (add_zero p) = œà p := by
  simp only [ofHoms, mk_v, eqToHom_refl, comp_id]

@[simp]
lemma ofHoms_zero : ofHoms (fun p => (0 : F.X p ‚ü∂ G.X p)) = 0 := by aesop_cat

@[simp]
lemma ofHoms_v_comp_d (œà : ‚àÄ (p : ‚Ñ§), F.X p ‚ü∂ G.X p) (p q q' : ‚Ñ§) (hpq : p + 0 = q) :
    (ofHoms œà).v p q hpq ‚â´ G.d q q' = œà p ‚â´ G.d p q' := by
  rw [add_zero] at hpq
  subst hpq
  rw [ofHoms_v]

@[simp]
lemma d_comp_ofHoms_v (œà : ‚àÄ (p : ‚Ñ§), F.X p ‚ü∂ G.X p) (p' p q  : ‚Ñ§) (hpq : p + 0 = q) :
    F.d p' p ‚â´ (ofHoms œà).v p q hpq = F.d p' q ‚â´ œà q := by
  rw [add_zero] at hpq
  subst hpq
  rw [ofHoms_v]

def ofHom (œÜ : F ‚ü∂ G) : Cochain F G 0 := ofHoms (fun p => œÜ.f p)

@[simp]
lemma ofHom_zero : ofHom (0 : F ‚ü∂ G) = 0 := by
  simp only [ofHom, HomologicalComplex.zero_f_apply, ofHoms_zero]

@[simp]
lemma ofHom_v (œÜ : F ‚ü∂ G) (p : ‚Ñ§) : (ofHom œÜ).v p p (add_zero p) = œÜ.f p := by
  simp only [ofHom, ofHoms_v]

@[simp]
lemma ofHom_v_comp_d (œÜ : F ‚ü∂ G) (p q q' : ‚Ñ§) (hpq : p + 0 = q) :
    (ofHom œÜ).v p q hpq ‚â´ G.d q q' = œÜ.f p ‚â´ G.d p q' :=
by simp only [ofHom, ofHoms_v_comp_d]

@[simp]
lemma d_comp_ofHom_v (œÜ : F ‚ü∂ G) (p' p q  : ‚Ñ§) (hpq : p + 0 = q) :
    F.d p' p ‚â´ (ofHom œÜ).v p q hpq = F.d p' q ‚â´ œÜ.f q := by
  simp only [ofHom, d_comp_ofHoms_v]

@[simp]
def ofHomotopy {œÜ‚ÇÅ œÜ‚ÇÇ : F ‚ü∂ G} (ho : Homotopy œÜ‚ÇÅ œÜ‚ÇÇ) : Cochain F G (-1) :=
  Cochain.mk (fun p q _ => ho.hom p q)

@[reassoc (attr := simp)]
lemma v_comp_X_iso_of_eq_hom
    (Œ≥ : Cochain F G n) (p q q' : ‚Ñ§) (hpq : p + n = q) (hq' : q = q') :
    Œ≥.v p q hpq ‚â´ (HomologicalComplex.XIsoOfEq G hq').hom = Œ≥.v p q' (by rw [‚Üê hq', hpq]) := by
  subst hq'
  simp only [HomologicalComplex.XIsoOfEq, eqToIso_refl, Iso.refl_hom, comp_id]

protected def comp {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ : Cochain F G n‚ÇÅ) (z‚ÇÇ : Cochain G K n‚ÇÇ) (h : n‚ÇÅ + n‚ÇÇ = n‚ÇÅ‚ÇÇ) :
    Cochain F K n‚ÇÅ‚ÇÇ := Cochain.mk (fun p q hpq => z‚ÇÅ.v p (p+n‚ÇÅ) rfl ‚â´ z‚ÇÇ.v (p+n‚ÇÅ) q (by linarith))

--notation a " ‚â´[":81 b "] " c:80 => Cochain.comp a c b
notation a " ‚â´[" b "] " c:80 => Cochain.comp a c b

protected lemma comp_v {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ : Cochain F G n‚ÇÅ) (z‚ÇÇ : Cochain G K n‚ÇÇ) (h : n‚ÇÅ + n‚ÇÇ = n‚ÇÅ‚ÇÇ)
    (p‚ÇÅ p‚ÇÇ p‚ÇÉ : ‚Ñ§) (h‚ÇÅ : p‚ÇÅ + n‚ÇÅ = p‚ÇÇ) (h‚ÇÇ : p‚ÇÇ + n‚ÇÇ = p‚ÇÉ) :
    (z‚ÇÅ.comp z‚ÇÇ h).v p‚ÇÅ p‚ÇÉ (by rw [‚Üê h‚ÇÇ, ‚Üê h‚ÇÅ, ‚Üê h, add_assoc]) =
      z‚ÇÅ.v p‚ÇÅ p‚ÇÇ h‚ÇÅ ‚â´ z‚ÇÇ.v p‚ÇÇ p‚ÇÉ h‚ÇÇ := by
  subst h‚ÇÅ ; rfl

protected lemma zero_comp {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÇ : Cochain G K n‚ÇÇ)
    (h : n‚ÇÅ + n‚ÇÇ = n‚ÇÅ‚ÇÇ) : (0 : Cochain F G n‚ÇÅ).comp z‚ÇÇ h = 0 := by
  ext ‚ü®p, q, hpq‚ü©
  dsimp
  simp only [Cochain.comp_v _ _ h p _ q rfl (by linarith), zero_v, zero_comp]

@[simp]
protected lemma add_comp {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ z‚ÇÅ' : Cochain F G n‚ÇÅ) (z‚ÇÇ : Cochain G K n‚ÇÇ)
    (h : n‚ÇÅ + n‚ÇÇ = n‚ÇÅ‚ÇÇ) : (z‚ÇÅ+z‚ÇÅ').comp z‚ÇÇ h = z‚ÇÅ.comp z‚ÇÇ h + z‚ÇÅ'.comp z‚ÇÇ h := by
  ext ‚ü®p, q, hpq‚ü©
  dsimp
  simp only [Cochain.comp_v _ _ h p _ q rfl (by linarith), add_v, add_comp]

@[simp]
protected lemma sub_comp {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ z‚ÇÅ' : Cochain F G n‚ÇÅ) (z‚ÇÇ : Cochain G K n‚ÇÇ)
    (h : n‚ÇÅ + n‚ÇÇ = n‚ÇÅ‚ÇÇ) : (z‚ÇÅ-z‚ÇÅ').comp z‚ÇÇ h = z‚ÇÅ.comp z‚ÇÇ h - z‚ÇÅ'.comp z‚ÇÇ h := by
  ext ‚ü®p, q, hpq‚ü©
  dsimp
  simp only [Cochain.comp_v _ _ h p _ q rfl (by linarith), sub_v, sub_comp]

@[simp]
protected lemma neg_comp {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ : Cochain F G n‚ÇÅ) (z‚ÇÇ : Cochain G K n‚ÇÇ)
    (h : n‚ÇÅ + n‚ÇÇ = n‚ÇÅ‚ÇÇ) : (-z‚ÇÅ).comp z‚ÇÇ h = -z‚ÇÅ.comp z‚ÇÇ h := by
  ext ‚ü®p, q, hpq‚ü©
  dsimp
  simp only [Cochain.comp_v _ _ h p _ q rfl (by linarith), neg_v, neg_comp]

@[simp]
protected lemma zsmul_comp {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (k : ‚Ñ§) (z‚ÇÅ : Cochain F G n‚ÇÅ) (z‚ÇÇ : Cochain G K n‚ÇÇ)
    (h : n‚ÇÅ + n‚ÇÇ = n‚ÇÅ‚ÇÇ) : (k ‚Ä¢ z‚ÇÅ).comp z‚ÇÇ h = k ‚Ä¢ z‚ÇÅ.comp z‚ÇÇ h := by
  ext ‚ü®p, q, hpq‚ü©
  dsimp
  simp only [Cochain.comp_v _ _ h p _ q rfl (by linarith), zsmul_v, zsmul_comp]

@[simp]
lemma zero_cochain_comp_v {n : ‚Ñ§} (z‚ÇÅ : Cochain F G 0) (z‚ÇÇ : Cochain G K n)
    (p q : ‚Ñ§) (hpq : p + n = q) : (z‚ÇÅ.comp z‚ÇÇ (zero_add n)).v p q hpq =
      z‚ÇÅ.v p p (add_zero p) ‚â´ z‚ÇÇ.v p q hpq :=
  Cochain.comp_v z‚ÇÅ z‚ÇÇ (zero_add n) p p q (add_zero p) hpq

lemma zero_cochain_comp_v' {n : ‚Ñ§} (z‚ÇÅ : Cochain F G 0) (z‚ÇÇ : Cochain G K n)
    (p‚ÇÅ p‚ÇÇ p‚ÇÉ : ‚Ñ§) (h‚ÇÅ‚ÇÇ : p‚ÇÅ + 0 = p‚ÇÇ) (h‚ÇÇ‚ÇÉ : p‚ÇÇ + n =p‚ÇÉ) :
    (z‚ÇÅ.v p‚ÇÅ p‚ÇÇ h‚ÇÅ‚ÇÇ ‚â´ z‚ÇÇ.v p‚ÇÇ p‚ÇÉ h‚ÇÇ‚ÇÉ : F.X p‚ÇÅ ‚ü∂ K.X p‚ÇÉ) =
      z‚ÇÅ.v p‚ÇÅ p‚ÇÅ (add_zero p‚ÇÅ) ‚â´ z‚ÇÇ.v p‚ÇÅ p‚ÇÉ (show p‚ÇÅ + n = p‚ÇÉ by rw [‚Üê h‚ÇÇ‚ÇÉ, ‚Üê h‚ÇÅ‚ÇÇ, add_zero]) := by
  rw [add_zero] at h‚ÇÅ‚ÇÇ
  subst h‚ÇÅ‚ÇÇ
  rfl

@[simp]
protected lemma id_comp {n : ‚Ñ§} (z‚ÇÇ : Cochain F G n) :
    (Cochain.ofHom (ùüô F)).comp z‚ÇÇ (zero_add n) = z‚ÇÇ := by
  ext ‚ü®p, q, hpq‚ü©
  simp only [zero_cochain_comp_v, ofHom_v, HomologicalComplex.id_f, id_comp]

@[simp]
protected lemma comp_zero {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ : Cochain F G n‚ÇÅ)
    (h : n‚ÇÅ + n‚ÇÇ = n‚ÇÅ‚ÇÇ) : z‚ÇÅ.comp (0 : Cochain G K n‚ÇÇ) h = 0 := by
  ext ‚ü®p, q, hpq‚ü©
  dsimp
  simp only [Cochain.comp_v _ _ h p _ q rfl (by linarith), zero_v, comp_zero]

@[simp]
protected lemma comp_add {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ : Cochain F G n‚ÇÅ) (z‚ÇÇ z‚ÇÇ' : Cochain G K n‚ÇÇ)
    (h : n‚ÇÅ + n‚ÇÇ = n‚ÇÅ‚ÇÇ) : z‚ÇÅ.comp (z‚ÇÇ+z‚ÇÇ') h = z‚ÇÅ.comp z‚ÇÇ h + z‚ÇÅ.comp z‚ÇÇ' h := by
  ext ‚ü®p, q, hpq‚ü©
  dsimp
  simp only [Cochain.comp_v _ _ h p _ q rfl (by linarith), add_v, comp_add]

@[simp]
protected lemma comp_sub {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ : Cochain F G n‚ÇÅ) (z‚ÇÇ z‚ÇÇ' : Cochain G K n‚ÇÇ)
    (h : n‚ÇÅ + n‚ÇÇ = n‚ÇÅ‚ÇÇ) : z‚ÇÅ.comp (z‚ÇÇ-z‚ÇÇ') h = z‚ÇÅ.comp z‚ÇÇ h - z‚ÇÅ.comp  z‚ÇÇ' h := by
  ext ‚ü®p, q, hpq‚ü©
  dsimp
  simp only [Cochain.comp_v _ _ h p _ q rfl (by linarith), sub_v, comp_sub]

@[simp]
protected lemma comp_neg {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ : Cochain F G n‚ÇÅ) (z‚ÇÇ : Cochain G K n‚ÇÇ)
  (h : n‚ÇÅ + n‚ÇÇ = n‚ÇÅ‚ÇÇ) : z‚ÇÅ.comp (-z‚ÇÇ) h = -z‚ÇÅ.comp z‚ÇÇ h := by
  ext ‚ü®p, q, hpq‚ü©
  dsimp
  simp only [Cochain.comp_v _ _ h p _ q rfl (by linarith), neg_v, comp_neg]

@[simp]
protected lemma comp_zsmul {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (k : ‚Ñ§) (z‚ÇÅ : Cochain F G n‚ÇÅ) (z‚ÇÇ : Cochain G K n‚ÇÇ)
  (h : n‚ÇÅ + n‚ÇÇ = n‚ÇÅ‚ÇÇ ) : z‚ÇÅ.comp (k ‚Ä¢ z‚ÇÇ) h = k ‚Ä¢ z‚ÇÅ.comp z‚ÇÇ h := by
  ext ‚ü®p, q, hpq‚ü©
  dsimp
  simp only [Cochain.comp_v _ _ h p _ q rfl (by linarith), zsmul_v, comp_zsmul]

@[simp]
lemma comp_zero_cochain_v (z‚ÇÅ : Cochain F G n) (z‚ÇÇ : Cochain G K 0)
    (p q : ‚Ñ§) (hpq : p + n = q) :
    (z‚ÇÅ.comp z‚ÇÇ (add_zero n)).v p q hpq =
      z‚ÇÅ.v p q hpq ‚â´ z‚ÇÇ.v q q (add_zero q) :=
  Cochain.comp_v z‚ÇÅ z‚ÇÇ (add_zero n) p q q hpq (add_zero q)

lemma comp_zero_cochain_v' (z‚ÇÅ : Cochain F G n) (z‚ÇÇ : Cochain G K 0)
    (p‚ÇÅ p‚ÇÇ p‚ÇÉ : ‚Ñ§) (h‚ÇÅ‚ÇÇ : p‚ÇÅ + n = p‚ÇÇ) (h‚ÇÇ‚ÇÉ : p‚ÇÇ + 0 = p‚ÇÉ) :
    (z‚ÇÅ.v p‚ÇÅ p‚ÇÇ h‚ÇÅ‚ÇÇ ‚â´ z‚ÇÇ.v p‚ÇÇ p‚ÇÉ h‚ÇÇ‚ÇÉ : F.X p‚ÇÅ ‚ü∂ K.X p‚ÇÉ) =
  z‚ÇÅ.v p‚ÇÅ p‚ÇÉ (show p‚ÇÅ + n = p‚ÇÉ by rw [‚Üê h‚ÇÇ‚ÇÉ, h‚ÇÅ‚ÇÇ, add_zero]) ‚â´ z‚ÇÇ.v p‚ÇÉ p‚ÇÉ (add_zero p‚ÇÉ) := by
  rw [add_zero] at h‚ÇÇ‚ÇÉ
  subst h‚ÇÇ‚ÇÉ
  rfl

@[simp]
protected lemma comp_id {n : ‚Ñ§} (z‚ÇÅ : Cochain F G n) :
    z‚ÇÅ.comp (Cochain.ofHom (ùüô G)) (add_zero n) = z‚ÇÅ := by
  ext ‚ü®p, q, hpq‚ü©
  simp only [comp_zero_cochain_v, ofHom_v, HomologicalComplex.id_f, comp_id]

@[simp]
lemma ofHoms_comp (œÜ : ‚àÄ (p : ‚Ñ§), F.X p ‚ü∂ G.X p) (œà : ‚àÄ (p : ‚Ñ§), G.X p ‚ü∂ K.X p) :
    (ofHoms œÜ).comp (ofHoms œà) (zero_add 0) = ofHoms (fun p => œÜ p ‚â´ œà p) := by aesop_cat

@[simp]
lemma ofHom_comp (f : F ‚ü∂ G) (g : G ‚ü∂ K) :
    ofHom (f ‚â´ g) = (ofHom f).comp (ofHom g) (zero_add 0) := by
  simp only [ofHom, HomologicalComplex.comp_f, ofHoms_comp]

lemma comp_assoc {n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÅ‚ÇÇ n‚ÇÇ‚ÇÉ n‚ÇÅ‚ÇÇ‚ÇÉ : ‚Ñ§}
    (z‚ÇÅ : Cochain F G n‚ÇÅ) (z‚ÇÇ : Cochain G K n‚ÇÇ) (z‚ÇÉ : Cochain K L n‚ÇÉ)
    (h‚ÇÅ‚ÇÇ : n‚ÇÅ + n‚ÇÇ = n‚ÇÅ‚ÇÇ) (h‚ÇÇ‚ÇÉ : n‚ÇÇ + n‚ÇÉ = n‚ÇÇ‚ÇÉ) (h‚ÇÅ‚ÇÇ‚ÇÉ : n‚ÇÅ + n‚ÇÇ + n‚ÇÉ = n‚ÇÅ‚ÇÇ‚ÇÉ) :
    (z‚ÇÅ.comp z‚ÇÇ h‚ÇÅ‚ÇÇ).comp z‚ÇÉ (show n‚ÇÅ‚ÇÇ + n‚ÇÉ = n‚ÇÅ‚ÇÇ‚ÇÉ by rw [‚Üê h‚ÇÅ‚ÇÇ, h‚ÇÅ‚ÇÇ‚ÇÉ]) =
      z‚ÇÅ.comp (z‚ÇÇ.comp z‚ÇÉ h‚ÇÇ‚ÇÉ) (show n‚ÇÅ + n‚ÇÇ‚ÇÉ = n‚ÇÅ‚ÇÇ‚ÇÉ by rw [‚Üê h‚ÇÇ‚ÇÉ, ‚Üê h‚ÇÅ‚ÇÇ‚ÇÉ, add_assoc]) := by
  ext ‚ü®p, q, hpq‚ü©
  dsimp
  simp only [Cochain.comp_v _ _ (show n‚ÇÅ‚ÇÇ + n‚ÇÉ = n‚ÇÅ‚ÇÇ‚ÇÉ by rw [‚Üê h‚ÇÅ‚ÇÇ, h‚ÇÅ‚ÇÇ‚ÇÉ]) p (p + n‚ÇÅ‚ÇÇ) q rfl (by linarith),
    Cochain.comp_v _ _ h‚ÇÅ‚ÇÇ p (p+n‚ÇÅ) (p+n‚ÇÅ‚ÇÇ) rfl (by linarith),
    Cochain.comp_v _ _ (show n‚ÇÅ + n‚ÇÇ‚ÇÉ = n‚ÇÅ‚ÇÇ‚ÇÉ by linarith) p (p+n‚ÇÅ) q rfl (by linarith),
    Cochain.comp_v _ _ h‚ÇÇ‚ÇÉ (p+n‚ÇÅ) (p+n‚ÇÅ‚ÇÇ) q (by linarith) (by linarith), assoc]

@[simp]
lemma comp_assoc_of_first_is_zero_cochain {n‚ÇÇ n‚ÇÉ n‚ÇÇ‚ÇÉ : ‚Ñ§}
    (z‚ÇÅ : Cochain F G 0) (z‚ÇÇ : Cochain G K n‚ÇÇ) (z‚ÇÉ : Cochain K L n‚ÇÉ)
    (h‚ÇÇ‚ÇÉ : n‚ÇÇ + n‚ÇÉ = n‚ÇÇ‚ÇÉ) :
  (z‚ÇÅ.comp z‚ÇÇ (zero_add n‚ÇÇ)).comp z‚ÇÉ h‚ÇÇ‚ÇÉ =
    z‚ÇÅ.comp (z‚ÇÇ.comp z‚ÇÉ h‚ÇÇ‚ÇÉ) (zero_add n‚ÇÇ‚ÇÉ) :=
  comp_assoc z‚ÇÅ z‚ÇÇ z‚ÇÉ (zero_add n‚ÇÇ) h‚ÇÇ‚ÇÉ (by linarith)

@[simp]
lemma comp_assoc_of_second_is_zero_cochain {n‚ÇÅ n‚ÇÉ n‚ÇÅ‚ÇÉ : ‚Ñ§}
    (z‚ÇÅ : Cochain F G n‚ÇÅ) (z‚ÇÇ : Cochain G K 0) (z‚ÇÉ : Cochain K L n‚ÇÉ) (h‚ÇÅ‚ÇÉ : n‚ÇÅ + n‚ÇÉ = n‚ÇÅ‚ÇÉ) :
    (z‚ÇÅ.comp z‚ÇÇ (add_zero n‚ÇÅ)).comp z‚ÇÉ h‚ÇÅ‚ÇÉ =
      z‚ÇÅ.comp (z‚ÇÇ.comp z‚ÇÉ (zero_add n‚ÇÉ)) h‚ÇÅ‚ÇÉ :=
  comp_assoc z‚ÇÅ z‚ÇÇ z‚ÇÉ (add_zero n‚ÇÅ) (zero_add n‚ÇÉ) (by linarith)

@[simp]
lemma comp_assoc_of_third_is_zero_cochain {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§}
    (z‚ÇÅ : Cochain F G n‚ÇÅ) (z‚ÇÇ : Cochain G K n‚ÇÇ) (z‚ÇÉ : Cochain K L 0) (h‚ÇÅ‚ÇÇ : n‚ÇÅ + n‚ÇÇ = n‚ÇÅ‚ÇÇ) :
    (z‚ÇÅ.comp z‚ÇÇ h‚ÇÅ‚ÇÇ).comp z‚ÇÉ (add_zero n‚ÇÅ‚ÇÇ) =
      z‚ÇÅ.comp (z‚ÇÇ.comp z‚ÇÉ (add_zero n‚ÇÇ)) h‚ÇÅ‚ÇÇ :=
  comp_assoc z‚ÇÅ z‚ÇÇ z‚ÇÉ h‚ÇÅ‚ÇÇ (add_zero n‚ÇÇ) (by linarith)

variable (K)

def diff : Cochain K K 1 := Cochain.mk (fun p q _ => K.d p q)

@[simp]
lemma diff_v (p q : ‚Ñ§) (hpq : p + 1 = q) :
  (diff K).v p q hpq = K.d p q := rfl

end Cochain

/- Differentials -/

variable {F G}

def Œ¥ (z : Cochain F G n) : Cochain F G m :=
  Cochain.mk (fun p q hpq => z.v p (p + n) rfl ‚â´ G.d (p + n) q +
    Œµ (n + 1) ‚Ä¢ F.d p (p + m - n) ‚â´ z.v (p + m - n) q (by rw [hpq, sub_add_cancel]))

lemma Œ¥_v (hnm : n + 1 = m) (z : Cochain F G n) (p q : ‚Ñ§) (hpq : p + m = q) (q‚ÇÅ q‚ÇÇ : ‚Ñ§)
    (hq‚ÇÅ : q‚ÇÅ = q - 1) (hq‚ÇÇ : p + 1 = q‚ÇÇ) : (Œ¥ n m z).v p q hpq =
    z.v p q‚ÇÅ (by rw [hq‚ÇÅ, ‚Üê hpq, ‚Üê hnm, ‚Üê add_assoc, add_sub_cancel]) ‚â´ G.d q‚ÇÅ q
      + Œµ (n + 1) ‚Ä¢ F.d p q‚ÇÇ ‚â´ z.v q‚ÇÇ q (by rw [‚Üê hq‚ÇÇ, add_assoc, add_comm 1, hnm, hpq]) := by
  obtain rfl : q‚ÇÅ = p + n := by linarith
  obtain rfl : q‚ÇÇ = p + m - n := by linarith
  rfl

lemma Œ¥_shape (hnm : ¬¨ n + 1 = m) (z : Cochain F G n) : Œ¥ n m z = 0 := by
  ext ‚ü®p, q, hpq‚ü©
  dsimp [Œ¥, Cochain.v, Cochain.mk]
  rw [F.shape, G.shape, comp_zero, zero_add, zero_comp, smul_zero]
  . rfl
  all_goals
    change ¬¨ _=_
    rintro h
    apply hnm
    linarith

variable (F G)

def Œ¥_hom : Cochain F G n ‚Üí+ Cochain F G m where
  toFun := Œ¥ n m
  map_zero' := by
    ext ‚ü®p, q, hpq‚ü©
    simp [Œ¥]
  map_add' _ _ := by
    dsimp only
    by_cases n + 1 = m
    . ext ‚ü®p, q, hpq‚ü©
      dsimp
      simp only [Œ¥_v n m h _ p q hpq _ _ rfl rfl, Cochain.add_v, add_comp, comp_add, zsmul_add]
      abel
    . simp only [Œ¥_shape _ _ h, add_zero]

variable {F G}

@[simp] lemma Œ¥_add (z‚ÇÅ z‚ÇÇ : Cochain F G n) : Œ¥ n m (z‚ÇÅ + z‚ÇÇ) = Œ¥ n m z‚ÇÅ + Œ¥ n m z‚ÇÇ :=
  (Œ¥_hom F G n m).map_add z‚ÇÅ z‚ÇÇ

@[simp] lemma Œ¥_sub (z‚ÇÅ z‚ÇÇ : Cochain F G n) : Œ¥ n m (z‚ÇÅ - z‚ÇÇ) = Œ¥ n m z‚ÇÅ - Œ¥ n m z‚ÇÇ :=
  (Œ¥_hom F G n m).map_sub z‚ÇÅ z‚ÇÇ

@[simp] lemma Œ¥_zero : Œ¥ n m (0 : Cochain F G n) = 0 := (Œ¥_hom F G n m).map_zero

@[simp] lemma Œ¥_neg (z : Cochain F G n) : Œ¥ n m (-z) = - Œ¥ n m z :=
  (Œ¥_hom F G n m).map_neg z

@[simp] lemma Œ¥_zsmul (k : ‚Ñ§) (z : Cochain F G n) : Œ¥ n m (k ‚Ä¢ z) = k ‚Ä¢ Œ¥ n m z :=
  (Œ¥_hom F G n m).map_zsmul z k

lemma Œ¥Œ¥ (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (z : Cochain F G n‚ÇÄ) : Œ¥ n‚ÇÅ n‚ÇÇ (Œ¥ n‚ÇÄ n‚ÇÅ z) = 0 := by
  by_cases h‚ÇÅ‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ ; swap ; rw [Œ¥_shape _ _ h‚ÇÅ‚ÇÇ]
  by_cases h‚ÇÄ‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ ; swap ; rw [Œ¥_shape _ _ h‚ÇÄ‚ÇÅ, Œ¥_zero]
  ext ‚ü®p, q, hpq‚ü©
  dsimp
  simp only [Œ¥_v n‚ÇÅ n‚ÇÇ h‚ÇÅ‚ÇÇ _ p q hpq _ _ rfl rfl,
    Œ¥_v n‚ÇÄ n‚ÇÅ h‚ÇÄ‚ÇÅ z p (q-1) (by linarith) (q-2) _ (by linarith) rfl,
    Œ¥_v n‚ÇÄ n‚ÇÅ h‚ÇÄ‚ÇÅ z (p+1) q (by linarith) _ (p+2) rfl (by linarith),
    ‚Üê h‚ÇÄ‚ÇÅ, Œµ_succ, neg_smul, sub_add_cancel, add_comp, assoc,
    HomologicalComplex.d_comp_d, comp_zero, neg_comp, zero_add, neg_neg, comp_add,
    comp_neg, comp_zsmul, HomologicalComplex.d_comp_d_assoc, zero_comp, zsmul_zero,
    neg_zero, add_zero, zsmul_comp, add_left_neg]

#exit

lemma Œ¥_comp {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ : cochain F G n‚ÇÅ) (z‚ÇÇ : cochain G K n‚ÇÇ) (h : n‚ÇÅ‚ÇÇ = n‚ÇÅ + n‚ÇÇ)
  (m‚ÇÅ m‚ÇÇ m‚ÇÅ‚ÇÇ : ‚Ñ§) (h‚ÇÅ‚ÇÇ : n‚ÇÅ‚ÇÇ+1 = m‚ÇÅ‚ÇÇ) (h‚ÇÅ : n‚ÇÅ+1 = m‚ÇÅ) (h‚ÇÇ : n‚ÇÇ+1 = m‚ÇÇ) :
Œ¥ n‚ÇÅ‚ÇÇ m‚ÇÅ‚ÇÇ (cochain.comp z‚ÇÅ z‚ÇÇ h) = cochain.comp z‚ÇÅ (Œ¥ n‚ÇÇ m‚ÇÇ z‚ÇÇ) (by linarith) + Œµ n‚ÇÇ ‚Ä¢ cochain.comp (Œ¥ n‚ÇÅ m‚ÇÅ z‚ÇÅ) z‚ÇÇ (by linarith) :=
begin
  substs h‚ÇÅ‚ÇÇ h‚ÇÅ h‚ÇÇ,
  ext,
  have eq : Œµ (n‚ÇÅ‚ÇÇ + 1) = Œµ n‚ÇÇ * Œµ (n‚ÇÅ+1),
  { rw ‚Üê Œµ_add, congr' 1, linarith, },
  simp only [cochain.add_v, cochain.zsmul_v,
    cochain.comp_v z‚ÇÅ (Œ¥ n‚ÇÇ (n‚ÇÇ+1) z‚ÇÇ) (show n‚ÇÅ‚ÇÇ+1=n‚ÇÅ+(n‚ÇÇ+1), by linarith) p _ q rfl (by linarith),
    cochain.comp_v (Œ¥ n‚ÇÅ (n‚ÇÅ+1) z‚ÇÅ) z‚ÇÇ (show n‚ÇÅ‚ÇÇ+1=_, by linarith) p (p+n‚ÇÅ+1) q (by linarith) (by linarith),
    cochain.comp_v z‚ÇÅ z‚ÇÇ h p (p+n‚ÇÅ) (p+n‚ÇÅ‚ÇÇ) rfl (by linarith),
    cochain.comp_v z‚ÇÅ z‚ÇÇ h (p+1) (p+n‚ÇÅ+1) q (by linarith) (by linarith),
    Œ¥_v n‚ÇÅ‚ÇÇ _ rfl (cochain.comp z‚ÇÅ z‚ÇÇ h) p q hpq (p+n‚ÇÅ‚ÇÇ) _ (by linarith) rfl,
    Œ¥_v n‚ÇÅ (n‚ÇÅ+1) rfl z‚ÇÅ p (p+n‚ÇÅ+1) (by linarith) (p+n‚ÇÅ) (p+1) (by linarith) rfl,
    Œ¥_v n‚ÇÇ (n‚ÇÇ+1) rfl z‚ÇÇ (p+n‚ÇÅ) q (by linarith) (p+n‚ÇÅ‚ÇÇ) (p+n‚ÇÅ+1) (by linarith) rfl,
    assoc, comp_add, comp_zsmul, zsmul_add, add_comp, zsmul_comp, smul_smul, eq,
    Œµ_add n‚ÇÇ 1, Œµ_1, mul_neg, mul_one, neg_zsmul, comp_neg, ‚Üê add_assoc],
  suffices : ‚àÄ (a b c : F.X p ‚ü∂ K.X q), a+b=a+(-c)+c+b,
  { apply this, },
  intros a b c,
  abel,
end

@[simp]
lemma Œ¥_comp_of_first_is_zero_cochain {n‚ÇÇ : ‚Ñ§} (z‚ÇÅ : cochain F G 0) (z‚ÇÇ : cochain G K n‚ÇÇ)
  (m‚ÇÇ : ‚Ñ§) (h‚ÇÇ : n‚ÇÇ+1 = m‚ÇÇ) :
Œ¥ n‚ÇÇ m‚ÇÇ (cochain.comp z‚ÇÅ z‚ÇÇ (zero_add n‚ÇÇ).symm) =
  cochain.comp z‚ÇÅ (Œ¥ n‚ÇÇ m‚ÇÇ z‚ÇÇ) (by linarith) + Œµ n‚ÇÇ ‚Ä¢ cochain.comp (Œ¥ 0 1 z‚ÇÅ) z‚ÇÇ (by linarith) :=
Œ¥_comp z‚ÇÅ z‚ÇÇ (zero_add n‚ÇÇ).symm 1 m‚ÇÇ m‚ÇÇ h‚ÇÇ (zero_add 1) h‚ÇÇ

@[simp]
lemma Œ¥_comp_of_second_is_zero_cochain {n‚ÇÅ : ‚Ñ§} (z‚ÇÅ : cochain F G n‚ÇÅ) (z‚ÇÇ : cochain G K 0)
  (m‚ÇÅ : ‚Ñ§) (h‚ÇÅ : n‚ÇÅ+1 = m‚ÇÅ) : Œ¥ n‚ÇÅ m‚ÇÅ (cochain.comp z‚ÇÅ z‚ÇÇ (add_zero n‚ÇÅ).symm) =
  cochain.comp z‚ÇÅ (Œ¥ 0 1 z‚ÇÇ) h‚ÇÅ.symm + cochain.comp (Œ¥ n‚ÇÅ m‚ÇÅ z‚ÇÅ) z‚ÇÇ (add_zero m‚ÇÅ).symm :=
by simp only [Œ¥_comp z‚ÇÅ z‚ÇÇ (add_zero n‚ÇÅ).symm m‚ÇÅ 1 m‚ÇÅ h‚ÇÅ h‚ÇÅ (zero_add 1), Œµ_0, one_zsmul]

end hom_complex

variables (F G)

open hom_complex

def hom_complex : cochain_complex AddCommGroup ‚Ñ§ :=
{ X := Œª i, AddCommGroup.of (cochain F G i),
  d := Œª i j, AddCommGroup.of_hom (Œ¥_hom F G i j),
  shape' := Œª i j hij, by { ext1 z, exact Œ¥_shape i j hij z, },
  d_comp_d' := Œª i j k hij hjk, by { ext1 f, apply Œ¥Œ¥, } }

namespace hom_complex

def cocycle : add_subgroup (cochain F G n) :=
add_monoid_hom.ker ((hom_complex F G).d n (n+1))

namespace cocycle

variables {F G}

lemma mem_iff (hnm : n+1=m) (z : cochain F G n) :
  z ‚àà cocycle F G n ‚Üî Œ¥ n m z = 0 :=
by { subst hnm, refl, }

variable {n}

@[simps]
def mk (z : cochain F G n) (m : ‚Ñ§) (hnm : n+1 = m) (h : Œ¥ n m z = 0) : cocycle F G n :=
‚ü®z, by simpa only [mem_iff n m hnm z] using h‚ü©

@[simp]
lemma Œ¥_eq_zero {n : ‚Ñ§} (z : cocycle F G n) (m : ‚Ñ§) : Œ¥ n m (z : cochain F G n) = 0 :=
begin
  by_cases n+1=m,
  { rw ‚Üê mem_iff n m h,
    exact z.2, },
  { apply Œ¥_shape n m h, }
end

@[simps]
def of_hom (œÜ : F ‚ü∂ G) : cocycle F G 0 := mk (cochain.of_hom œÜ) 1 (zero_add 1)
begin
  ext,
  simp only [Œ¥_v 0 1 (zero_add 1) _ p q hpq p q (by linarith) hpq,
    cochain.of_hom_v, homological_complex.hom.comm, Œµ_1, neg_smul, one_zsmul,
    add_right_neg, cochain.zero_v, zero_add],
end

@[simp]
lemma Œ¥_cochain_of_hom (œÜ : F ‚ü∂ G) : Œ¥ 0 1 (cochain.of_hom œÜ) = 0 :=
by apply Œ¥_eq_zero (of_hom œÜ)

@[simps]
def hom_of (z : cocycle F G 0) : F ‚ü∂ G :=
{ f := Œª i, (z : cochain F G 0).v i i (add_zero i).symm,
  comm' := Œª i j hij, begin
    change i+1=j at hij,
    have hz‚ÇÅ := z.2,
    rw mem_iff 0 1 (zero_add 1) at hz‚ÇÅ,
    simpa only [Œ¥_v 0 1 (zero_add 1) z.1 i j hij.symm i j (by linarith) hij.symm,
      zero_add, Œµ_1, neg_smul, one_zsmul, cochain.zero_v, add_neg_eq_zero]
      using cochain.congr_v hz‚ÇÅ i j hij.symm,
  end, }

@[simp]
lemma hom_of_of_hom_eq_self (œÜ : F ‚ü∂ G) : hom_of (of_hom œÜ) = œÜ :=
by { ext i, simp only [of_hom, hom_of_f, mk_coe, cochain.of_hom_v], }

@[simp]
lemma of_hom_hom_of_eq_self (z : cocycle F G 0) : of_hom (hom_of z) = z :=
begin
  ext,
  simp only [of_hom, mk_coe, cochain.of_hom_v, hom_of_f],
end

@[simp]
lemma cochain_of_hom_hom_of_eq_coe (z : cocycle F G 0) :
  (cochain.of_hom (hom_of z) : cochain F G 0) = (z : cochain F G 0) :=
by simpa only [subtype.ext_iff] using of_hom_hom_of_eq_self z

variables (F G)

@[simps]
def equiv_hom : (F ‚ü∂ G) ‚âÉ+ cocycle F G 0 :=
{ to_fun := of_hom,
  inv_fun := hom_of,
  left_inv := hom_of_of_hom_eq_self,
  right_inv := of_hom_hom_of_eq_self,
  map_add' := Œª œÜ‚ÇÅ œÜ‚ÇÇ, begin
    ext,
    simp only [of_hom, cochain.of_hom, cochain.of_homs, cochain.mk, cochain.v,
      homological_complex.add_f_apply, mk_coe, eq_to_hom_refl, comp_id,
      add_subgroup.coe_add, pi.add_apply],
  end, }

def of_d : cocycle K K 1 :=
cocycle.mk (cochain.of_d K) 2 rfl begin
  ext p q hpq,
  simp only [Œ¥_v 1 2 rfl _ p q hpq _ _ rfl rfl, cochain.of_d_v,
    homological_complex.d_comp_d, smul_zero, add_zero, cochain.zero_v],
end

end cocycle

namespace cochain

variables {F G}

lemma of_hom_injective {f‚ÇÅ f‚ÇÇ : F ‚ü∂ G} (h : of_hom f‚ÇÅ = of_hom f‚ÇÇ) : f‚ÇÅ = f‚ÇÇ :=
begin
  rw [‚Üê cocycle.hom_of_of_hom_eq_self f‚ÇÅ, ‚Üê cocycle.hom_of_of_hom_eq_self f‚ÇÇ],
  congr' 1,
  ext1,
  simpa only [cocycle.of_hom_coe] using h,
end

end cochain

variables {F G}

@[simps]
def equiv_homotopy (œÜ‚ÇÅ œÜ‚ÇÇ : F ‚ü∂ G) :
  homotopy œÜ‚ÇÅ œÜ‚ÇÇ ‚âÉ
    { z : cochain F G (-1) // cochain.of_hom œÜ‚ÇÅ = Œ¥ (-1) 0 z + cochain.of_hom œÜ‚ÇÇ } :=
{ to_fun := Œª ho, begin
    refine ‚ü®cochain.of_homotopy ho, _‚ü©,
    ext,
    have comm := ho.comm p,
    rw [d_next_eq ho.hom rfl, prev_d_eq ho.hom (sub_add_cancel p 1)] at comm,
    rw [cochain.add_v, Œ¥_v (-1) 0 (neg_add_self 1) _ p p (add_zero p).symm _ _ rfl rfl],
    simp only [Œ¥_v (-1) 0 (neg_add_self 1) _ p p (add_zero p).symm _ _ rfl rfl,
      add_left_neg, Œµ_0, one_zsmul, cochain.mk, cochain.of_hom_v, cochain.v,
      cochain.of_homotopy, cochain.of_hom_v],
    dsimp only,
    suffices : ‚àÄ (a b c d : F.X p ‚ü∂ G.X p) (h : a = b+c+d), a=c+b+d,
    { exact this _ _ _ _ comm, },
    { intros a b c d h, rw h, abel, },
  end,
  inv_fun := Œª z,
    { hom := Œª i j, begin
        by_cases j+1=i,
        { exact (z : cochain F G (-1)).v i j (by linarith), },
        { exact 0, },
      end,
      zero' := Œª i j hij, begin
        change ¬¨ j+1 = i at hij,
        rw dif_neg hij,
      end,
      comm := Œª p, begin
        have h‚ÇÅ : p+1 = p+1 := rfl,
        have h‚ÇÇ : p-1+1 = p := by linarith,
        have h‚ÇÅ' : (complex_shape.up ‚Ñ§).rel p (p+1) := h‚ÇÅ,
        have h‚ÇÇ' : (complex_shape.up ‚Ñ§).rel (p-1) p := h‚ÇÇ,
        rw [d_next_eq _ h‚ÇÅ', prev_d_eq _ h‚ÇÇ', dif_pos h‚ÇÅ, dif_pos h‚ÇÇ],
        have hz := cochain.congr_v z.2 p p (add_zero p).symm,
        simp only [cochain.add_v, Œ¥_v (-1) 0 (neg_add_self 1) _ p p (add_zero p).symm _ _ rfl rfl,
          cochain.of_hom_v, add_left_neg, Œµ_0, one_zsmul] at hz,
        suffices : ‚àÄ (a b c d : F.X p ‚ü∂ G.X p) (h : a = b+c+d), a=c+b+d,
        { exact this _ _ _ _ hz, },
        { intros a b c d h, rw h, abel, },
      end, },
  left_inv := Œª ho, begin
    ext i j,
    dsimp,
    split_ifs,
    { refl, },
    { rw ho.zero i j h, },
  end,
  right_inv := Œª z, begin
    ext,
    dsimp [cochain.mk, cochain.v],
    simpa only [dif_pos (show q+1=p, by linarith)],
  end, }

lemma Œ¥_cochain_of_homotopy {œÜ‚ÇÅ œÜ‚ÇÇ : F ‚ü∂ G} (h : homotopy œÜ‚ÇÅ œÜ‚ÇÇ) :
  Œ¥ (-1) 0 (cochain.of_homotopy h) = cochain.of_hom œÜ‚ÇÅ - cochain.of_hom œÜ‚ÇÇ :=
by rw [((equiv_homotopy _ _) h).2, add_sub_cancel,
  subtype.val_eq_coe, equiv_homotopy_apply_coe]

namespace cochain

variable {n}

def lift_to_kernel' (z : cochain L G n) {i : F ‚ü∂ G} {f : G ‚ü∂ K} (hip : is_termwise_kernel i f)
  (hz : cochain.comp z (of_hom f) (add_zero n).symm = 0) (p q : ‚Ñ§) (hpq : q=p+n):=
kernel_fork.is_limit.lift' (hip.is_limit q) (z.v p q hpq)
(by simpa only [comp_zero_cochain, of_hom_v] using congr_v hz p q hpq)

def lift_to_kernel (z : cochain L G n) {i : F ‚ü∂ G} {f : G ‚ü∂ K} (hip : is_termwise_kernel i f)
  (hz : cochain.comp z (of_hom f) (add_zero n).symm = 0) : cochain L F n :=
cochain.mk (Œª p q hpq, (lift_to_kernel' z hip hz p q hpq).1)

@[simp]
lemma lift_to_kernel_comp (z : cochain L G n) {i : F ‚ü∂ G} {f : G ‚ü∂ K} (hip : is_termwise_kernel i f)
  (hz : cochain.comp z (of_hom f) (add_zero n).symm = 0) :
  cochain.comp (z.lift_to_kernel hip hz) (cochain.of_hom i) (add_zero n).symm = z :=
begin
  ext,
  simpa only [comp_v _ _ (add_zero n).symm p q q hpq (add_zero q).symm,
    of_hom_v] using (lift_to_kernel' z hip hz p q hpq).2,
end

end cochain

namespace cocycle

variable {n}

def lift_to_kernel (z : cocycle L G n) {i : F ‚ü∂ G} {f : G ‚ü∂ K} (hip : is_termwise_kernel i f)
  (hz : cochain.comp (z : cochain L G n) (cochain.of_hom f) (add_zero n).symm = 0) :
  cocycle L F n :=
cocycle.mk (cochain.lift_to_kernel (z : cochain L G n) hip hz) _ rfl
begin
  suffices : Œ¥ n (n + 1) (cochain.comp
    ((z : cochain L G n).lift_to_kernel hip hz) (cochain.of_hom i) (add_zero n).symm) = 0,
  { ext,
    haveI : mono (i.f q) := hip.termwise_mono q,
    simpa only [‚Üê cancel_mono (i.f q), cochain.zero_v, zero_comp,
      Œ¥_comp_of_second_is_zero_cochain, Œ¥_cochain_of_hom,
      cochain.comp_zero, zero_add, cochain.comp_zero_cochain,
      cochain.of_hom_v, cochain.zero_v] using cochain.congr_v this p q hpq, },
  simp only [cochain.lift_to_kernel_comp, Œ¥_eq_zero],
end

lemma lift_to_kernel_comp (z : cocycle L G n) {i : F ‚ü∂ G} {f : G ‚ü∂ K} (hip : is_termwise_kernel i f)
  (hz : cochain.comp (z : cochain L G n) (cochain.of_hom f) (add_zero n).symm = 0) :
  cochain.comp (lift_to_kernel z hip hz : cochain L F n) (cochain.of_hom i) (add_zero n).symm =
  (z : cochain L G n) := by apply cochain.lift_to_kernel_comp

end cocycle

section

variables {n} {D : Type*} [category D] [preadditive D] (z z' : cochain K L n) (f : K ‚ü∂ L)
  (Œ¶ : C ‚•§ D) [functor.additive Œ¶]

namespace cochain

def map : cochain ((functor.map_homological_complex Œ¶ _).obj K)
  ((functor.map_homological_complex Œ¶ _).obj L) n :=
cochain.mk (Œª p q hpq, Œ¶.map (z.v p q hpq))

@[simp]
lemma map_v (p q : ‚Ñ§) (hpq : q=p+n) :
  (z.map Œ¶).v p q hpq = Œ¶.map (z.v p q hpq) := rfl

@[simp]
lemma map_add : (z+z').map Œ¶ = z.map Œ¶ + z'.map Œ¶ := by tidy

@[simp]
lemma map_neg : (-z).map Œ¶ = -z.map Œ¶ := by tidy

@[simp]
lemma map_sub : (z-z').map Œ¶ = z.map Œ¶ - z'.map Œ¶ := by tidy

variables (K L n)

@[simp]
lemma map_zero : (0 : cochain K L n).map Œ¶ = 0 := by tidy

@[simp]
lemma map_comp {n‚ÇÅ n‚ÇÇ n‚ÇÅ‚ÇÇ : ‚Ñ§} (z‚ÇÅ : cochain F G n‚ÇÅ) (z‚ÇÇ : cochain G K n‚ÇÇ) (h : n‚ÇÅ‚ÇÇ = n‚ÇÅ + n‚ÇÇ)
  (Œ¶ : C ‚•§ D) [functor.additive Œ¶] :
  (z‚ÇÅ.comp z‚ÇÇ h).map Œ¶ = (z‚ÇÅ.map Œ¶).comp (z‚ÇÇ.map Œ¶) h :=
begin
  ext p q hpq,
  simp only [map_v, comp_v _ _ h p _ q rfl (by linarith), Œ¶.map_comp],
end

@[simp]
lemma map_of_hom : (cochain.of_hom f).map Œ¶ =
  cochain.of_hom ((Œ¶.map_homological_complex _).map f) := by tidy

end cochain

variables (n m)

@[simp]
lemma Œ¥_map : Œ¥ n m (z.map Œ¶) = (Œ¥ n m z).map Œ¶ :=
begin
  by_cases hnm : n+1=m,
  { ext p q hpq,
    simp only [Œ¥_v n m hnm _ p q hpq (q-1) (p+1) rfl rfl, cochain.map_v],
    simp only [functor.map_homological_complex_obj_d, Œµ_succ, neg_smul, functor.map_add,
      functor.map_comp, functor.map_neg, add_right_inj, neg_inj, Œ¶.map_zsmul], },
  { simp only [Œ¥_shape _ _ hnm, cochain.map_zero], },
end

end

namespace cocycle

variables {n} {D : Type*} [category D] [preadditive D] (z z' : cocycle K L n) (f : K ‚ü∂ L)
  (Œ¶ : C ‚•§ D) [functor.additive Œ¶]

@[simps]
def map : cocycle ((functor.map_homological_complex Œ¶ _).obj K)
  ((functor.map_homological_complex Œ¶ _).obj L) n :=
cocycle.mk ((z : cochain K L n).map Œ¶) (n+1) rfl (by simp)

@[simp]
lemma map_add : cocycle.map (z+z') Œ¶ = cocycle.map z Œ¶ + cocycle.map z' Œ¶ :=
by { ext1, simp, }

@[simp]
lemma map_neg : cocycle.map (-z) Œ¶ = -cocycle.map z Œ¶ :=
by { ext1, simp, }

@[simp]
lemma map_sub : cocycle.map (z-z') Œ¶ = cocycle.map z Œ¶ - cocycle.map z' Œ¶ :=
by { ext1, simp, }

@[simp]
lemma map_of_hom : cocycle.map (cocycle.of_hom f) Œ¶ =
  cocycle.of_hom ((Œ¶.map_homological_complex _).map f) := by tidy

variables (K L n)

@[simp]
lemma map_zero : cocycle.map (0 : cocycle K L n) Œ¶ = 0 :=
by { ext1, simp, }

end cocycle

end hom_complex

end cochain_complex
