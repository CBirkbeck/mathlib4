import Mathlib.Algebra.Homology.ShortComplex.QuasiIso
import Mathlib.Algebra.Homology.ShortComplex.Preadditive
--algebra.homology.short_complex.homology
--import algebra.homology.short_complex.abelian
--import algebra.homology.short_complex.preserves_homology
--import category_theory.preadditive.opposite

namespace CategoryTheory

open Category Limits ZeroObject Preadditive

variable {C : Type _} [Category C]

namespace ShortComplex

section

variable
  [HasZeroMorphisms C]
  (S : ShortComplex C) {S‚ÇÅ S‚ÇÇ : ShortComplex C}

structure Exact : Prop :=
  condition : ‚àÉ (h : S.HomologyData), IsZero h.left.H

variable {S}

lemma Exact.hasHomology (h : S.Exact) : S.HasHomology :=
  HasHomology.mk' h.condition.choose

variable (S)

lemma exact_iff_isZero_homology [S.HasHomology] :
    S.Exact ‚Üî IsZero S.homology := by
  constructor
  . rintro ‚ü®‚ü®h', z‚ü©‚ü©
    exact IsZero.of_iso z h'.left.homologyIso
  . intro h
    exact ‚ü®‚ü®_, h‚ü©‚ü©

variable {S}

lemma LeftHomologyData.exact_iff [S.HasHomology]
    (h : S.LeftHomologyData) :
    S.Exact ‚Üî IsZero h.H := by
  rw [S.exact_iff_isZero_homology]
  exact Iso.isZero_iff h.homologyIso

lemma RightHomologyData.exact_iff [S.HasHomology]
    (h : S.RightHomologyData) :
    S.Exact ‚Üî IsZero h.H := by
  rw [S.exact_iff_isZero_homology]
  exact Iso.isZero_iff h.homologyIso

variable (S)

lemma exact_iff_isZero_leftHomology [S.HasHomology] :
    S.Exact ‚Üî IsZero S.leftHomology :=
  LeftHomologyData.exact_iff _

lemma exact_iff_is_zero_right_homology [S.HasHomology] :
    S.Exact ‚Üî IsZero S.rightHomology :=
  RightHomologyData.exact_iff _

variable {S}

lemma HomologyData.exact_iff (h : S.HomologyData) :
    S.Exact ‚Üî IsZero h.left.H := by
  haveI := HasHomology.mk' h
  exact LeftHomologyData.exact_iff h.left

lemma HomologyData.exact_iff' (h : S.HomologyData) :
    S.Exact ‚Üî IsZero h.right.H := by
  haveI := HasHomology.mk' h
  exact RightHomologyData.exact_iff h.right

variable (S)

lemma exact_iff_homology_iso_zero [S.HasHomology] [HasZeroObject C] :
    S.Exact ‚Üî Nonempty (S.homology ‚âÖ 0) := by
  rw [exact_iff_isZero_homology]
  constructor
  . intro h
    exact ‚ü®h.isoZero‚ü©
  . rintro ‚ü®e‚ü©
    exact IsZero.of_iso (isZero_zero C) e

lemma exact_of_iso (e : S‚ÇÅ ‚âÖ S‚ÇÇ) (h : S‚ÇÅ.Exact) : S‚ÇÇ.Exact := by
  obtain ‚ü®‚ü®h, z‚ü©‚ü© := h
  exact ‚ü®‚ü®HomologyData.ofIso e h, z‚ü©‚ü©

lemma exact_iff_of_iso (e : S‚ÇÅ ‚âÖ S‚ÇÇ) : S‚ÇÅ.Exact ‚Üî S‚ÇÇ.Exact :=
  ‚ü®exact_of_iso e, exact_of_iso e.symm‚ü©

lemma exact_of_isZero_X‚ÇÇ (h : IsZero S.X‚ÇÇ) : S.Exact := by
  rw [(HomologyData.ofZeros S (IsZero.eq_of_tgt h _ _) (IsZero.eq_of_src h _ _)).exact_iff]
  exact h

lemma exact_iff_of_epi_of_isIso_of_mono (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] :
    S‚ÇÅ.Exact ‚Üî S‚ÇÇ.Exact := by
  constructor
  . rintro ‚ü®h‚ÇÅ, z‚ÇÅ‚ü©
    exact ‚ü®HomologyData.ofEpiOfIsIsoOfMono œÜ h‚ÇÅ, z‚ÇÅ‚ü©
  . rintro ‚ü®h‚ÇÇ, z‚ÇÇ‚ü©
    exact ‚ü®HomologyData.ofEpiOfIsIsoOfMono' œÜ h‚ÇÇ, z‚ÇÇ‚ü©

variable {S}

lemma HomologyData.exact_iff_i_p_zero (h : S.HomologyData) :
    S.Exact ‚Üî h.left.i ‚â´ h.right.p = 0 := by
  haveI := HasHomology.mk' h
  rw [h.left.exact_iff, ‚Üê h.comm]
  constructor
  . intro z
    rw [IsZero.eq_of_src z h.iso.hom 0, zero_comp, comp_zero]
  . intro eq
    simp only [IsZero.iff_id_eq_zero, ‚Üê cancel_mono h.iso.hom, id_comp, ‚Üê cancel_mono h.right.Œπ,
      ‚Üê cancel_epi h.left.œÄ, eq, zero_comp, comp_zero]

variable (S)

lemma exact_iff_i_p_zero [S.HasHomology] (h‚ÇÅ : S.LeftHomologyData)
    (h‚ÇÇ : S.RightHomologyData) :
    S.Exact ‚Üî h‚ÇÅ.i ‚â´ h‚ÇÇ.p = 0 :=
  (HomologyData.ofIsIsoLeftRightHomologyComparison' h‚ÇÅ h‚ÇÇ).exact_iff_i_p_zero

lemma exact_iff_iCycles_pCyclesCo_zero [S.HasHomology] :
    S.Exact ‚Üî S.iCycles ‚â´ S.pCyclesCo = 0 :=
  S.exact_iff_i_p_zero _ _

lemma exact_iff_kernel_Œπ_comp_cokernel_œÄ_zero [S.HasHomology]
    [HasKernel S.g] [HasCokernel S.f] :
    S.Exact ‚Üî kernel.Œπ S.g ‚â´ cokernel.œÄ S.f = 0 := by
  haveI : HasCokernel _ := HasLeftHomology.hasCokernel S
  haveI : HasKernel _ := HasRightHomology.hasKernel S
  exact S.exact_iff_i_p_zero (LeftHomologyData.ofKerOfCoker S)
    (RightHomologyData.ofKerOfCoker S)

variable {S}

lemma Exact.op (h : S.Exact) : S.op.Exact := by
  obtain ‚ü®h, z‚ü© := h
  exact ‚ü®‚ü®h.op, (IsZero.of_iso z h.iso.symm).op‚ü©‚ü©

lemma Exact.unop {S : ShortComplex C·µí·µñ} (h : S.Exact) : S.unop.Exact := by
  obtain ‚ü®h, z‚ü© := h
  exact ‚ü®‚ü®h.unop, (IsZero.of_iso z h.iso.symm).unop‚ü©‚ü©

variable (S)

lemma exact_iff_op : S.Exact ‚Üî S.op.Exact :=
  ‚ü®Exact.op, Exact.unop‚ü©

lemma exact_iff_unop (S : ShortComplex C·µí·µñ) : S.Exact ‚Üî S.unop.Exact :=
  S.unop.exact_iff_op.symm

end

section Preadditive

variable [Preadditive C] (S : ShortComplex C)

lemma exact_iff_mono [HasZeroObject C] (hf : S.f = 0) :
    S.Exact ‚Üî Mono S.g := by
  constructor
  . intro h
    have : S.HasHomology := HasHomology.mk' h.condition.choose
    simp only [exact_iff_isZero_homology] at h
    have := S.isIso_pCyclesCo_of_zero hf
    have := mono_of_isZero_kernel' _ S.homologyIsKernel h
    rw [‚Üê S.p_fromCyclesCo]
    apply mono_comp
  . intro
    rw [(HomologyData.ofIsLimitKernelFork S hf _
      (KernelFork.IsLimit.ofIsZeroOfMono (KernelFork.ofŒπ (0 : 0 ‚ü∂ S.X‚ÇÇ) zero_comp)
        inferInstance (isZero_zero C))).exact_iff]
    exact isZero_zero C

lemma exact_iff_epi [HasZeroObject C] (hg : S.g = 0) :
    S.Exact ‚Üî Epi S.f := by
  constructor
  . intro h
    haveI : S.HasHomology := HasHomology.mk' h.condition.choose
    simp only [exact_iff_isZero_homology] at h
    haveI := S.isIso_iCycles_of_zero hg
    haveI : Epi S.toCycles := epi_of_isZero_cokernel' _ S.homologyIsCokernel h
    rw [‚Üê S.toCycles_i]
    apply epi_comp
  . intro
    rw [(HomologyData.ofIsColimitCokernelCofork S hg _
      (CokernelCofork.IsColimit.ofIsZeroOfEpi (CokernelCofork.ofœÄ (0 : S.X‚ÇÇ ‚ü∂ 0) comp_zero)
        inferInstance (isZero_zero C))).exact_iff]
    exact isZero_zero C

variable {S}

lemma Exact.epi_f' (hS : S.Exact) (h : LeftHomologyData S) : Epi h.f' :=
  epi_of_isZero_cokernel' _ h.hœÄ (by
    haveI := hS.hasHomology
    dsimp
    simpa only [‚Üê h.exact_iff] using hS)

lemma Exact.mono_g' (hS : S.Exact) (h : RightHomologyData S) : Mono h.g' :=
  mono_of_isZero_kernel' _ h.hŒπ (by
    haveI := hS.hasHomology
    dsimp
    simpa only [‚Üê h.exact_iff] using hS)

lemma Exact.epi_toCycles (hS : S.Exact) [S.HasLeftHomology] : Epi S.toCycles :=
  hS.epi_f' _

lemma Exact.mono_fromCyclesCo (hS : S.Exact) [S.HasRightHomology] : Mono S.fromCyclesCo :=
  hS.mono_g' _

lemma LeftHomologyData.exact_iff_epi_f' [S.HasHomology] (h : LeftHomologyData S) :
    S.Exact ‚Üî Epi h.f' := by
  constructor
  . intro hS
    exact hS.epi_f' h
  . intro
    simp only [h.exact_iff, IsZero.iff_id_eq_zero, ‚Üê cancel_epi h.œÄ, ‚Üê cancel_epi h.f',
      comp_id, h.f'_œÄ, comp_zero]

lemma RightHomologyData.exact_iff_mono_g' [S.HasHomology] (h : RightHomologyData S) :
    S.Exact ‚Üî Mono h.g' := by
  constructor
  . intro hS
    exact hS.mono_g' h
  . intro
    simp only [h.exact_iff, IsZero.iff_id_eq_zero, ‚Üê cancel_mono h.Œπ, ‚Üê cancel_mono h.g',
      id_comp, h.Œπ_g', zero_comp]

variable (S)

lemma exact_iff_epi_toCycles [S.HasHomology] : S.Exact ‚Üî Epi S.toCycles :=
  S.leftHomologyData.exact_iff_epi_f'

lemma exact_iff_mono_fromCyclesCo [S.HasHomology] : S.Exact ‚Üî Mono S.fromCyclesCo :=
  S.rightHomologyData.exact_iff_mono_g'

lemma exact_iff_epi_kernel_lift [S.HasHomology] [HasKernel S.g] :
    S.Exact ‚Üî Epi (kernel.lift S.g S.f S.zero) := by
  rw [exact_iff_epi_toCycles]
  have eq‚ÇÅ : kernel.lift S.g S.f S.zero = S.toCycles ‚â´ S.cyclesIsoKernel.hom := by
    simp only [cyclesIsoKernel_hom, ‚Üê cancel_mono (kernel.Œπ S.g), kernel.lift_Œπ,
      assoc, toCycles_i]
  have eq‚ÇÇ : S.toCycles = kernel.lift S.g S.f S.zero ‚â´ S.cyclesIsoKernel.inv := by
    rw [eq‚ÇÅ, assoc, Iso.hom_inv_id, comp_id]
  constructor
  . intro
    rw [eq‚ÇÅ]
    apply epi_comp
  . intro
    rw [eq‚ÇÇ]
    apply epi_comp

lemma exact_iff_mono_cokernel_desc [S.HasHomology] [HasCokernel S.f] :
    S.Exact ‚Üî Mono (cokernel.desc S.f S.g S.zero) := by
  rw [exact_iff_mono_fromCyclesCo]
  have eq‚ÇÅ : cokernel.desc S.f S.g S.zero = S.cyclesCoIsoCokernel.inv ‚â´ S.fromCyclesCo := by
    simp only [‚Üê cancel_epi (cokernel.œÄ S.f), cokernel.œÄ_desc, cyclesCoIsoCokernel_inv,
      cokernel.œÄ_desc_assoc, p_fromCyclesCo]
  have eq‚ÇÇ : S.fromCyclesCo = S.cyclesCoIsoCokernel.hom ‚â´ cokernel.desc S.f S.g S.zero := by
    rw [eq‚ÇÅ, Iso.hom_inv_id_assoc]
  constructor
  . intro
    rw [eq‚ÇÅ]
    apply mono_comp
  . intro
    rw [eq‚ÇÇ]
    apply mono_comp

structure Splitting (S : ShortComplex C) where
  r : S.X‚ÇÇ ‚ü∂ S.X‚ÇÅ
  s : S.X‚ÇÉ ‚ü∂ S.X‚ÇÇ
  f_r : S.f ‚â´ r = ùüô _ := by aesop_cat
  s_g : s ‚â´ S.g = ùüô _ := by aesop_cat
  id : r ‚â´ S.f + S.g ‚â´ s = ùüô _ := by aesop_cat

namespace Splitting

attribute [reassoc (attr := simp)] f_r s_g

variable {S}

@[reassoc]
lemma r_f (s : S.Splitting) : s.r ‚â´ S.f = ùüô _ - S.g ‚â´ s.s := by rw [‚Üê s.id, add_sub_cancel]

@[reassoc]
lemma g_s (s : S.Splitting) : S.g ‚â´ s.s = ùüô _ - s.r ‚â´ S.f := by rw [‚Üê s.id, add_sub_cancel']

@[simps] def splitMono_f (s : S.Splitting) : SplitMono S.f := ‚ü®s.r, s.f_r‚ü©
lemma isSplitMono_f (s : S.Splitting) : IsSplitMono S.f := ‚ü®‚ü®s.splitMono_f‚ü©‚ü©
lemma mono_f (s : S.Splitting) : Mono S.f := by
  have := s.isSplitMono_f
  infer_instance

@[simps] def splitEpi_g (s : S.Splitting) : SplitEpi S.g := ‚ü®s.s, s.s_g‚ü©
lemma isSplitEpi_g (s : S.Splitting) : IsSplitEpi S.g := ‚ü®‚ü®s.splitEpi_g‚ü©‚ü©
lemma epi_g (s : S.Splitting) : Epi S.g := by
  have := s.isSplitEpi_g
  infer_instance

lemma ext_r (s s' : S.Splitting) (h : s.r = s'.r) : s = s' := by
  have := s.epi_g
  have eq : ùüô S.X‚ÇÇ = ùüô S.X‚ÇÇ := rfl
  nth_rw 1 [‚Üê s.id] at eq
  rw [‚Üê s'.id, h, add_right_inj, cancel_epi S.g] at eq
  cases s
  cases s'
  obtain rfl := eq
  obtain rfl := h
  rfl

lemma ext_s (s s' : S.Splitting) (h : s.s = s'.s) : s = s' := by
  have := s.mono_f
  have eq : ùüô S.X‚ÇÇ = ùüô S.X‚ÇÇ := rfl
  nth_rw 1 [‚Üê s.id] at eq
  rw [‚Üê s'.id, h, add_left_inj, cancel_mono S.f] at eq
  cases s
  cases s'
  obtain rfl := eq
  obtain rfl := h
  rfl

@[simp]
noncomputable def leftHomologyData [HasZeroObject C] (s : S.Splitting) :
    LeftHomologyData S := by
  have hi := KernelFork.IsLimit.ofŒπ S.f S.zero
    (fun x _ => x ‚â´ s.r)
    (fun x hx => by simp only [assoc, s.r_f, comp_sub, comp_id,
      sub_eq_self, reassoc_of% hx, zero_comp])
    (fun x _ b hb => by simp only [‚Üê hb, assoc, f_r, comp_id])
  let f' := hi.lift (KernelFork.ofŒπ S.f S.zero)
  have hf' : f' = ùüô _ := by
    apply Fork.IsLimit.hom_ext hi
    dsimp
    erw [Fork.IsLimit.lift_Œπ hi]
    simp only [Fork.Œπ_ofŒπ, id_comp]
  have wœÄ : f' ‚â´ (0 : S.X‚ÇÅ ‚ü∂ 0) = 0 := comp_zero
  have hœÄ : IsColimit (CokernelCofork.ofœÄ 0 wœÄ) := CokernelCofork.IsColimit.ofIsZeroOfEpi _
      (by rw [hf'] ; infer_instance) (isZero_zero _)
  exact
  { K := S.X‚ÇÅ
    H := 0
    i := S.f
    wi := S.zero
    hi := hi
    œÄ := 0
    wœÄ := wœÄ
    hœÄ := hœÄ }

@[simp]
noncomputable def rightHomologyData [HasZeroObject C] (s : S.Splitting) :
    RightHomologyData S := by
  have hp := CokernelCofork.IsColimit.ofœÄ S.g S.zero
    (fun x _ => s.s ‚â´ x)
    (fun x hx => by simp only [s.g_s_assoc, sub_comp, id_comp, sub_eq_self, assoc, hx, comp_zero])
    (fun x _ b hb => by simp only [‚Üê hb, s.s_g_assoc])
  let g' := hp.desc (CokernelCofork.ofœÄ S.g S.zero)
  have hg' : g' = ùüô _ := by
    apply Cofork.IsColimit.hom_ext hp
    dsimp
    erw [Cofork.IsColimit.œÄ_desc hp]
    simp only [Cofork.œÄ_ofœÄ, comp_id]
  have wŒπ : (0 : 0 ‚ü∂ S.X‚ÇÉ) ‚â´ g' = 0 := zero_comp
  have hŒπ : IsLimit (KernelFork.ofŒπ 0 wŒπ) := KernelFork.IsLimit.ofIsZeroOfMono _
      (by rw [hg'] ; dsimp ; infer_instance) (isZero_zero _)
  exact
  { Q := S.X‚ÇÉ
    H := 0
    p := S.g
    wp := S.zero
    hp := hp
    Œπ := 0
    wŒπ := wŒπ
    hŒπ := hŒπ }

@[simps]
noncomputable def homologyData [HasZeroObject C] (s : S.Splitting) : S.HomologyData where
  left := s.leftHomologyData
  right := s.rightHomologyData
  iso := Iso.refl 0

lemma exact [HasZeroObject C] (s : S.Splitting) : S.Exact :=
  ‚ü®s.homologyData, isZero_zero _‚ü©

end Splitting

end Preadditive

end ShortComplex

end CategoryTheory

#exit

variable {S}

lemma left_homology_data.exact_map_iff (h : S.left_homology_data) (F : C ‚•§ D)
  [F.preserves_zero_morphisms] [h.is_preserved_by F] [(S.map F).has_homology]:
  (S.map F).exact ‚Üî is_zero (F.obj h.H) :=
(h.map F).exact_iff

lemma right_homology_data.exact_map_iff (h : S.right_homology_data) (F : C ‚•§ D)
  [F.preserves_zero_morphisms] [h.is_preserved_by F] [(S.map F).has_homology]:
  (S.map F).exact ‚Üî is_zero (F.obj h.H) :=
(h.map F).exact_iff


lemma exact_map_of_preserves_homology (hS : S.exact)
  (F : C ‚•§ D) [F.preserves_zero_morphisms] [F.preserves_left_homology_of S]
  [F.preserves_right_homology_of S] : (S.map F).exact :=
begin
  haveI : S.has_homology := hS.has_homology,
  let h := S.some_homology_data,
  haveI := functor.preserves_left_homology_of.condition F S,
  haveI := functor.preserves_right_homology_of.condition F S,
  rw [h.exact_iff, is_zero.iff_id_eq_zero] at hS,
  simpa only [(h.map F).exact_iff, is_zero.iff_id_eq_zero,
    category_theory.functor.map_id, functor.map_zero] using F.congr_map hS,
end

variable (S)

lemma exact_map_iff_of_preserves_homology [S.has_homology]
  (F : C ‚•§ D) [F.preserves_zero_morphisms] [F.preserves_left_homology_of S]
  [F.preserves_right_homology_of S] [faithful F] :
  (S.map F).exact ‚Üî S.exact :=
begin
  let h := S.some_homology_data,
  have e : F.map (ùüô h.left.H) = 0 ‚Üî (ùüô h.left.H) = 0,
  { split,
    { intro eq,
      apply F.map_injective,
      rw [eq, F.map_zero], },
    { intro eq,
      rw [eq, F.map_zero], }, },
  haveI := functor.preserves_left_homology_of.condition F S,
  haveI := functor.preserves_right_homology_of.condition F S,
  simpa only [h.exact_iff, is_zero.iff_id_eq_zero, (h.map F).exact_iff,
    F.map_id] using e,
end


variable {S}

lemma exact.comp_eq_zero (h : S.exact) {X Y : C} {Œπ : X ‚ü∂ S.X‚ÇÇ} (hŒπ : Œπ ‚â´ S.g = 0)
  {œÄ : S.X‚ÇÇ ‚ü∂ Y} (hœÄ : S.f ‚â´ œÄ = 0) : Œπ ‚â´ œÄ = 0 :=
begin
  haveI : S.has_homology := h.has_homology,
  rw exact_iff_cycles_i_p_cycles_co_zero at h,
  rw [‚Üê S.lift_cycles_i Œπ hŒπ, ‚Üê S.p_desc_cycles_co œÄ hœÄ, assoc,
    reassoc_of h, zero_comp, comp_zero],
end

end

section preadditive

variables [preadditive C] {S‚ÇÅ S‚ÇÇ : short_complex C}

lemma homotopy_equiv.exact_iff (e : homotopy_equiv S‚ÇÅ S‚ÇÇ) [S‚ÇÅ.has_homology] [S‚ÇÇ.has_homology] :
  S‚ÇÅ.exact ‚Üî S‚ÇÇ.exact :=
begin
  simp only [exact_iff_is_zero_homology],
  exact ‚ü®Œª h, is_zero.of_iso h e.homology_iso.symm, Œª h, is_zero.of_iso h e.homology_iso‚ü©,
end

end preadditive

end short_complex

end category_theory
