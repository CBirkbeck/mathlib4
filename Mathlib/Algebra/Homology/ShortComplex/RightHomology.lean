import Mathlib.Algebra.Homology.ShortComplex.LeftHomology

open ZeroObject

namespace CategoryTheory

open Category Limits

namespace ShortComplex

variable {C D : Type _} [Category C] [Category D]
  [HasZeroMorphisms C]
  (S : ShortComplex C) {Sโ Sโ Sโ : ShortComplex C}

structure RightHomologyData :=
(Q H : C)
(p : S.Xโ โถ Q)
(ฮน : H โถ Q)
(wp : S.f โซ p = 0)
(hp : IsColimit (CokernelCofork.ofฯ p wp))
(wฮน : ฮน โซ hp.desc (CokernelCofork.ofฯ _ S.zero) = 0)
(hฮน : IsLimit (KernelFork.ofฮน ฮน wฮน))

initialize_simps_projections RightHomologyData (-hp, -hฮน)

namespace RightHomologyData

@[simps]
noncomputable def of_ker_of_coker [HasCokernel S.f] [HasKernel (cokernel.desc S.f S.g S.zero)] :
  S.RightHomologyData :=
{ Q := cokernel S.f,
  H := kernel (cokernel.desc S.f S.g S.zero),
  p := cokernel.ฯ _,
  ฮน := kernel.ฮน _,
  wp := cokernel.condition _,
  hp := cokernelIsCokernel _,
  wฮน := kernel.condition _,
  hฮน := kernelIsKernel _, }

attribute [reassoc (attr := simp)] wp wฮน

variable {S}
variable (h : S.RightHomologyData) {A : C}

instance : Epi h.p :=
  โจfun _ _ => Cofork.IsColimit.hom_ext h.hpโฉ

instance : Mono h.ฮน :=
  โจfun _ _ => Fork.IsLimit.hom_ext h.hฮนโฉ

def desc_Q (k : S.Xโ โถ A) (hk : S.f โซ k = 0) : h.Q โถ A :=
h.hp.desc (CokernelCofork.ofฯ k hk)

@[reassoc (attr := simp)]
lemma p_desc_Q (k : S.Xโ โถ A) (hk : S.f โซ k = 0) :
  h.p โซ h.desc_Q k hk = k :=
h.hp.fac _ WalkingParallelPair.one

@[simp]
def desc_H (k : S.Xโ โถ A) (hk : S.f โซ k = 0) : h.H โถ A :=
  h.ฮน โซ h.desc_Q k hk

/-- The morphism `h.Q โถ S.Xโ` induced by `S.g : S.Xโ โถ S.Xโ` and the fact that
`h.Q` is a cokernel of `S.f : S.Xโ โถ S.Xโ`. -/
def g' : h.Q โถ S.Xโ := h.desc_Q S.g S.zero

@[reassoc (attr := simp)]
lemma p_g' : h.p โซ h.g' = S.g :=
p_desc_Q _ _ _

@[reassoc (attr := simp)]
lemma ฮน_g' : h.ฮน โซ h.g' = 0 := h.wฮน

@[reassoc]
lemma ฮน_desc_Q_eq_zero_of_boundary (k : S.Xโ โถ A) (x : S.Xโ โถ A) (hx : k = S.g โซ x) :
  h.ฮน โซ h.desc_Q k (by rw [hx, S.zero_assoc, zero_comp]) = 0 := by
  rw [show 0 = h.ฮน โซ h.g' โซ x by simp]
  congr 1
  simp only [โ cancel_epi h.p, hx, p_desc_Q, p_g'_assoc]

/-- For `h : S.RightHomologyData`, this is a restatement of `h.hฮน `, saying that
`ฮน : h.H โถ h.Q` is a kernel of `h.g' : h.Q โถ S.Xโ`. -/
def hฮน' : IsLimit (KernelFork.ofฮน h.ฮน h.ฮน_g') := h.hฮน

def lift_H (k : A โถ h.Q) (hk : k โซ h.g' = 0) :
  A โถ h.H :=
h.hฮน.lift (KernelFork.ofฮน k hk)

@[reassoc (attr := simp)]
lemma lift_H_ฮน (k : A โถ h.Q) (hk : k โซ h.g' = 0) :
  h.lift_H k hk โซ h.ฮน = k :=
h.hฮน.fac (KernelFork.ofฮน k hk) WalkingParallelPair.zero

variable (S)

@[simps]
def of_isLimit_kernelFork (hf : S.f = 0) (c : KernelFork S.g) (hc : IsLimit c) :
  S.RightHomologyData where
  Q := S.Xโ
  H := c.pt
  p := ๐ _
  ฮน := c.ฮน
  wp := by rw [comp_id, hf]
  hp := CokernelCofork.IsColimit.of_id _ hf
  wฮน := KernelFork.condition _
  hฮน := IsLimit.ofIsoLimit hc (Fork.ext (Iso.refl _) (by aesop_cat))

@[simp] lemma of_isLimit_kernelFork_g' (hf : S.f = 0) (c : KernelFork S.g)
    (hc : IsLimit c) : (of_isLimit_kernelFork S hf c hc).g' = S.g := by
  rw [โ cancel_epi (of_isLimit_kernelFork S hf c hc).p, p_g',
    of_isLimit_kernelFork_p, id_comp]

@[simps!]
noncomputable def of_hasKernel [HasKernel S.g] (hf : S.f = 0) : S.RightHomologyData :=
of_isLimit_kernelFork S hf _ (kernelIsKernel _)

@[simps]
def of_isColimit_cokernelCofork (hg : S.g = 0) (c : CokernelCofork S.f) (hc : IsColimit c) :
  S.RightHomologyData where
  Q := c.pt
  H := c.pt
  p := c.ฯ
  ฮน := ๐ _
  wp := CokernelCofork.condition _
  hp := IsColimit.ofIsoColimit hc (Cofork.ext (Iso.refl _) (by aesop_cat))
  wฮน := Cofork.IsColimit.hom_ext hc (by simp [hg])
  hฮน := KernelFork.IsLimit.of_id _ (Cofork.IsColimit.hom_ext hc (by simp [hg]))

@[simp] lemma of_isColimit_cokernelCofork_g' (hg : S.g = 0) (c : CokernelCofork S.f)
  (hc : IsColimit c) : (of_isColimit_cokernelCofork S hg c hc).g' = 0 :=
by rw [โ cancel_epi (of_isColimit_cokernelCofork S hg c hc).p, p_g', hg, comp_zero]

@[simp]
noncomputable def of_hasCokernel [HasCokernel S.f] (hg : S.g = 0) : S.RightHomologyData :=
of_isColimit_cokernelCofork S hg _ (cokernelIsCokernel _)

@[simps]
def of_zeros (hf : S.f = 0) (hg : S.g = 0) : S.RightHomologyData where
  Q := S.Xโ
  H := S.Xโ
  p := ๐ _
  ฮน := ๐ _
  wp := by rw [comp_id, hf]
  hp := CokernelCofork.IsColimit.of_id _ hf
  wฮน := by
    change ๐ _ โซ S.g = 0
    simp only [hg, comp_zero]
  hฮน := KernelFork.IsLimit.of_id _ hg

@[simp]
lemma of_zeros_g' (hf : S.f = 0) (hg : S.g = 0) :
    (of_zeros S hf hg).g' = 0 := by
  rw [โ cancel_epi ((of_zeros S hf hg).p), comp_zero, p_g', hg]

@[simps]
noncomputable def cokernel_sequence' {X Y : C} (f : X โถ Y) (c : CokernelCofork f)
    (hc : IsColimit c) [HasZeroObject C] :
    RightHomologyData (ShortComplex.mk f c.ฯ c.condition) where
  Q := c.pt
  H := 0
  p := c.ฯ
  ฮน := 0
  wp := c.condition
  hp := IsColimit.ofIsoColimit hc (Cofork.ext (Iso.refl _) (by simp))
  wฮน := Subsingleton.elim _ _
  hฮน := by
    refine' KernelFork.IsLimit.of_isZero_of_mono _ _ _
    . dsimp
      convert (inferInstance : Mono (๐ c.pt))
      haveI := epi_of_isColimit_cofork hc
      rw [โ cancel_epi c.ฯ]
      simp only [parallelPair_obj_one, Functor.const_obj_obj, id_comp,
        Cofork.IsColimit.ฯ_desc, Cofork.ฯ_ofฯ, comp_id]
    . apply isZero_zero

@[simps!]
noncomputable def cokernel_sequence {X Y : C} (f : X โถ Y) [HasCokernel f] [HasZeroObject C] :
    RightHomologyData (ShortComplex.mk f (cokernel.ฯ f) (cokernel.condition f)) := by
  let h := cokernel_sequence' f _ (cokernelIsCokernel f)
  exact h

end RightHomologyData

class HasRightHomology : Prop :=
(condition : Nonempty S.RightHomologyData)

noncomputable def rightHomologyData [HasRightHomology S] :
  S.RightHomologyData := HasRightHomology.condition.some

variable {S}

namespace HasRightHomology

lemma mk' (h : S.RightHomologyData) : HasRightHomology S :=
โจNonempty.intro hโฉ

instance of_ker_of_coker
    [HasCokernel S.f] [HasKernel (cokernel.desc S.f S.g S.zero)] :
  S.HasRightHomology := HasRightHomology.mk' (RightHomologyData.of_ker_of_coker S)

instance of_hasKernel {Y Z : C} (g : Y โถ Z) (X : C) [HasKernel g] :
    (ShortComplex.mk (0 : X โถ Y) g zero_comp).HasRightHomology :=
  HasRightHomology.mk' (RightHomologyData.of_hasKernel _ rfl)

instance of_hasCokernel {X Y : C} (f : X โถ Y) (Z : C) [HasCokernel f] :
    (ShortComplex.mk f (0 : Y โถ Z) comp_zero).HasRightHomology :=
  HasRightHomology.mk' (RightHomologyData.of_hasCokernel _ rfl)

instance of_zeros (X Y Z : C) :
    (ShortComplex.mk (0 : X โถ Y) (0 : Y โถ Z) zero_comp).HasRightHomology :=
  HasRightHomology.mk' (RightHomologyData.of_zeros _ rfl rfl)

end HasRightHomology

namespace RightHomologyData

@[simps]
def op (h : S.RightHomologyData) : S.op.LeftHomologyData where
  K := Opposite.op h.Q
  H := Opposite.op h.H
  i := h.p.op
  ฯ := h.ฮน.op
  wi := Quiver.Hom.unop_inj h.wp
  hi := CokernelCofork.IsColimit.ofฯ_op _ _ h.hp
  wฯ := Quiver.Hom.unop_inj h.wฮน
  hฯ := KernelFork.IsLimit.ofฮน_op _ _ h.hฮน

@[simp] lemma op_f' (h : S.RightHomologyData) :
    h.op.f' = h.g'.op := rfl

@[simps]
def unop {S : ShortComplex Cแตแต} (h : S.RightHomologyData) : S.unop.LeftHomologyData where
  K := Opposite.unop h.Q
  H := Opposite.unop h.H
  i := h.p.unop
  ฯ := h.ฮน.unop
  wi := Quiver.Hom.op_inj h.wp
  hi := CokernelCofork.IsColimit.ofฯ_unop _ _ h.hp
  wฯ := Quiver.Hom.op_inj h.wฮน
  hฯ := KernelFork.IsLimit.ofฮน_unop _ _ h.hฮน

@[simp] lemma unop_f' {S : ShortComplex Cแตแต} (h : S.RightHomologyData) :
    h.unop.f' = h.g'.unop := rfl

end RightHomologyData

namespace LeftHomologyData

@[simps]
def op (h : S.LeftHomologyData) : S.op.RightHomologyData where
  Q := Opposite.op h.K
  H := Opposite.op h.H
  p := h.i.op
  ฮน := h.ฯ.op
  wp := Quiver.Hom.unop_inj h.wi
  hp := KernelFork.IsLimit.ofฮน_op _ _ h.hi
  wฮน := Quiver.Hom.unop_inj h.wฯ
  hฮน := CokernelCofork.IsColimit.ofฯ_op _ _ h.hฯ

@[simp] lemma op_g' (h : S.LeftHomologyData) :
    h.op.g' = h.f'.op := rfl

@[simps]
def unop {S : ShortComplex Cแตแต} (h : S.LeftHomologyData) : S.unop.RightHomologyData where
  Q := Opposite.unop h.K
  H := Opposite.unop h.H
  p := h.i.unop
  ฮน := h.ฯ.unop
  wp := Quiver.Hom.op_inj h.wi
  hp := KernelFork.IsLimit.ofฮน_unop _ _ h.hi
  wฮน := Quiver.Hom.op_inj h.wฯ
  hฮน := CokernelCofork.IsColimit.ofฯ_unop _ _ h.hฯ

@[simp] lemma unop_g' {S : ShortComplex Cแตแต} (h : S.LeftHomologyData) :
    h.unop.g' = h.f'.unop := rfl

end LeftHomologyData

instance [S.HasLeftHomology] : HasRightHomology S.op :=
  HasRightHomology.mk' S.leftHomologyData.op

instance [S.HasRightHomology] : HasLeftHomology S.op :=
  HasLeftHomology.mk' S.rightHomologyData.op

lemma hasLeftHomology_iff_op (S : ShortComplex C) :
    S.HasLeftHomology โ S.op.HasRightHomology :=
  โจfun _ => inferInstance, fun _ => HasLeftHomology.mk' S.op.rightHomologyData.unopโฉ

lemma hasRightHomology_iff_op (S : ShortComplex C) :
    S.HasRightHomology โ S.op.HasLeftHomology :=
  โจfun _ => inferInstance, fun _ => HasRightHomology.mk' S.op.leftHomologyData.unopโฉ

lemma hasLeftHomology_iff_unop (S : ShortComplex Cแตแต) :
    S.HasLeftHomology โ S.unop.HasRightHomology :=
  S.unop.hasRightHomology_iff_op.symm

lemma hasRightHomology_iff_unop (S : ShortComplex Cแตแต) :
    S.HasRightHomology โ S.unop.HasLeftHomology :=
  S.unop.hasLeftHomology_iff_op.symm

section

variable (ฯ : Sโ โถ Sโ) (hโ : Sโ.RightHomologyData) (hโ : Sโ.RightHomologyData)

structure RightHomologyMapData where
  ฯQ : hโ.Q โถ hโ.Q
  ฯH : hโ.H โถ hโ.H
  commp : hโ.p โซ ฯQ = ฯ.ฯโ โซ hโ.p := by aesop_cat
  commg' : ฯQ โซ hโ.g' = hโ.g' โซ ฯ.ฯโ := by aesop_cat
  commฮน : ฯH โซ hโ.ฮน = hโ.ฮน โซ ฯQ := by aesop_cat

namespace RightHomologyMapData

attribute [reassoc (attr := simp)] commp commg' commฮน

@[simps]
def zero (hโ : Sโ.RightHomologyData) (hโ : Sโ.RightHomologyData) :
  RightHomologyMapData 0 hโ hโ where
  ฯQ := 0
  ฯH := 0

@[simps]
def id (h : S.RightHomologyData) : RightHomologyMapData (๐ S) h h where
  ฯQ := ๐ _
  ฯH := ๐ _

@[simps]
def comp {ฯ : Sโ โถ Sโ} {ฯ' : Sโ โถ Sโ} {hโ : Sโ.RightHomologyData}
  {hโ : Sโ.RightHomologyData} {hโ : Sโ.RightHomologyData}
  (ฯ : RightHomologyMapData ฯ hโ hโ) (ฯ' : RightHomologyMapData ฯ' hโ hโ) :
  RightHomologyMapData (ฯ โซ ฯ') hโ hโ where
  ฯQ := ฯ.ฯQ โซ ฯ'.ฯQ
  ฯH := ฯ.ฯH โซ ฯ'.ฯH

instance : Subsingleton (RightHomologyMapData ฯ hโ hโ) :=
  โจfun ฯโ ฯโ => by
    have hQ : ฯโ.ฯQ = ฯโ.ฯQ := by rw [โ cancel_epi hโ.p, commp, commp]
    have hH : ฯโ.ฯH = ฯโ.ฯH := by rw [โ cancel_mono hโ.ฮน, commฮน, commฮน, hQ]
    cases ฯโ
    cases ฯโ
    congrโฉ

instance : Inhabited (RightHomologyMapData ฯ hโ hโ) := โจby
  let ฯQ : hโ.Q โถ hโ.Q := hโ.desc_Q (ฯ.ฯโ โซ hโ.p) (by rw [โ ฯ.commโโ_assoc, hโ.wp, comp_zero])
  have commg' : ฯQ โซ hโ.g' = hโ.g' โซ ฯ.ฯโ :=
    by rw [โ cancel_epi hโ.p, RightHomologyData.p_desc_Q_assoc, assoc,
      RightHomologyData.p_g', ฯ.commโโ, RightHomologyData.p_g'_assoc]
  let ฯH : hโ.H โถ hโ.H := hโ.lift_H (hโ.ฮน โซ ฯQ)
    (by rw [assoc, commg', RightHomologyData.ฮน_g'_assoc, zero_comp])
  exact โจฯQ, ฯH, by simp, commg', by simpโฉโฉ

instance : Unique (RightHomologyMapData ฯ hโ hโ) := Unique.mk' _

def _root_.CategoryTheory.ShortComplex.rightHomologyMapData :
  RightHomologyMapData ฯ hโ hโ := default

variable {ฯ hโ hโ}

lemma congr_ฯH {ฮณโ ฮณโ : RightHomologyMapData ฯ hโ hโ} (eq : ฮณโ = ฮณโ) : ฮณโ.ฯH = ฮณโ.ฯH := by rw [eq]
lemma congr_ฯQ {ฮณโ ฮณโ : RightHomologyMapData ฯ hโ hโ} (eq : ฮณโ = ฮณโ) : ฮณโ.ฯQ = ฮณโ.ฯQ := by rw [eq]

@[simps]
def of_zeros (ฯ : Sโ โถ Sโ) (hfโ : Sโ.f = 0) (hgโ : Sโ.g = 0) (hfโ : Sโ.f = 0) (hgโ : Sโ.g = 0) :
  RightHomologyMapData ฯ (RightHomologyData.of_zeros Sโ hfโ hgโ)
    (RightHomologyData.of_zeros Sโ hfโ hgโ) where
  ฯQ := ฯ.ฯโ
  ฯH := ฯ.ฯโ

@[simps]
def of_isLimit_kernelFork (ฯ : Sโ โถ Sโ)
    (hfโ : Sโ.f = 0) (cโ : KernelFork Sโ.g) (hcโ : IsLimit cโ)
    (hfโ : Sโ.f = 0) (cโ : KernelFork Sโ.g) (hcโ : IsLimit cโ) (f : cโ.pt โถ cโ.pt)
    (comm : cโ.ฮน โซ ฯ.ฯโ = f โซ cโ.ฮน) :
    RightHomologyMapData ฯ (RightHomologyData.of_isLimit_kernelFork Sโ hfโ cโ hcโ)
      (RightHomologyData.of_isLimit_kernelFork Sโ hfโ cโ hcโ) where
  ฯQ := ฯ.ฯโ
  ฯH := f
  commg' := by simp only [RightHomologyData.of_isLimit_kernelFork_Q,
    RightHomologyData.of_isLimit_kernelFork_g', ฯ.commโโ]
  commฮน := comm.symm

@[simps]
def of_isColimit_cokernelCofork (ฯ : Sโ โถ Sโ)
  (hgโ : Sโ.g = 0) (cโ : CokernelCofork Sโ.f) (hcโ : IsColimit cโ)
  (hgโ : Sโ.g = 0) (cโ : CokernelCofork Sโ.f) (hcโ : IsColimit cโ) (f : cโ.pt โถ cโ.pt)
  (comm : ฯ.ฯโ โซ cโ.ฯ = cโ.ฯ โซ f) :
  RightHomologyMapData ฯ (RightHomologyData.of_isColimit_cokernelCofork Sโ hgโ cโ hcโ)
    (RightHomologyData.of_isColimit_cokernelCofork Sโ hgโ cโ hcโ) where
  ฯQ := f
  ฯH := f
  commp := comm.symm

variable (S)

@[simps]
def compatibility_of_zeros_of_isLimit_kernelFork (hf : S.f = 0) (hg : S.g = 0)
    (c : KernelFork S.g) (hc : IsLimit c) :
    RightHomologyMapData (๐ S)
      (RightHomologyData.of_isLimit_kernelFork S hf c hc)
      (RightHomologyData.of_zeros S hf hg) where
  ฯQ := ๐ _
  ฯH := c.ฮน

@[simps]
def compatibility_of_zeros_of_isColimit_cokernelCofork (hf : S.f = 0) (hg : S.g = 0)
  (c : CokernelCofork S.f) (hc : IsColimit c) :
  RightHomologyMapData (๐ S)
    (RightHomologyData.of_zeros S hf hg)
    (RightHomologyData.of_isColimit_cokernelCofork S hg c hc) where
  ฯQ := c.ฯ
  ฯH := c.ฯ

end RightHomologyMapData

end

variable (S)

noncomputable def rightHomology [HasRightHomology S] : C := S.rightHomologyData.H
noncomputable def cyclesCo [HasRightHomology S] : C := S.rightHomologyData.Q
noncomputable def rightHomology_ฮน [HasRightHomology S] : S.rightHomology โถ S.cyclesCo :=
  S.rightHomologyData.ฮน
noncomputable def p_cyclesCo [HasRightHomology S] : S.Xโ โถ S.cyclesCo := S.rightHomologyData.p
noncomputable def fromCyclesCo [HasRightHomology S] : S.cyclesCo โถ S.Xโ := S.rightHomologyData.g'

@[reassoc (attr := simp)]
lemma f_p_cyclesCo [HasRightHomology S] : S.f โซ S.p_cyclesCo = 0 :=
  S.rightHomologyData.wp

@[reassoc (attr := simp)]
lemma p_fromCyclesCo [HasRightHomology S] : S.p_cyclesCo โซ S.fromCyclesCo = S.g :=
  S.rightHomologyData.p_g'

instance [HasRightHomology S] : Epi S.p_cyclesCo := by
  dsimp only [p_cyclesCo]
  infer_instance

instance [HasRightHomology S] : Mono S.rightHomology_ฮน := by
  dsimp only [rightHomology_ฮน]
  infer_instance

variable {S}

def rightHomology_map' (ฯ : Sโ โถ Sโ) (hโ : Sโ.RightHomologyData) (hโ : Sโ.RightHomologyData) :
  hโ.H โถ hโ.H := (rightHomologyMapData ฯ _ _).ฯH

def cyclesCo_map' (ฯ : Sโ โถ Sโ) (hโ : Sโ.RightHomologyData) (hโ : Sโ.RightHomologyData) :
  hโ.Q โถ hโ.Q := (rightHomologyMapData ฯ _ _).ฯQ

@[reassoc (attr := simp)]
lemma p_cyclesCo_map' (ฯ : Sโ โถ Sโ) (hโ : Sโ.RightHomologyData) (hโ : Sโ.RightHomologyData) :
    hโ.p โซ cyclesCo_map' ฯ hโ hโ = ฯ.ฯโ โซ hโ.p :=
  RightHomologyMapData.commp _

@[reassoc (attr := simp)]
lemma rightHomology_ฮน_naturality' (ฯ : Sโ โถ Sโ)
    (hโ : Sโ.RightHomologyData) (hโ : Sโ.RightHomologyData) :
    rightHomology_map' ฯ hโ hโ โซ hโ.ฮน = hโ.ฮน โซ cyclesCo_map' ฯ hโ hโ :=
  RightHomologyMapData.commฮน _

noncomputable def rightHomology_map [HasRightHomology Sโ] [HasRightHomology Sโ]
    (ฯ : Sโ โถ Sโ) : Sโ.rightHomology โถ Sโ.rightHomology :=
  rightHomology_map' ฯ _ _

noncomputable def cyclesCo_map [HasRightHomology Sโ] [HasRightHomology Sโ]
    (ฯ : Sโ โถ Sโ) : Sโ.cyclesCo โถ Sโ.cyclesCo :=
  cyclesCo_map' ฯ _ _

@[reassoc (attr := simp)]
lemma p_cyclesCo_map (ฯ : Sโ โถ Sโ) [Sโ.HasRightHomology] [Sโ.HasRightHomology] :
    Sโ.p_cyclesCo โซ cyclesCo_map ฯ = ฯ.ฯโ โซ Sโ.p_cyclesCo :=
  p_cyclesCo_map' _ _ _

@[reassoc (attr := simp)]
lemma fromCyclesCo_naturality (ฯ : Sโ โถ Sโ) [Sโ.HasRightHomology] [Sโ.HasRightHomology] :
    cyclesCo_map ฯ โซ Sโ.fromCyclesCo = Sโ.fromCyclesCo โซ ฯ.ฯโ := by
  simp only [โ cancel_epi Sโ.p_cyclesCo, p_cyclesCo_map_assoc, p_fromCyclesCo,
    p_fromCyclesCo_assoc, ฯ.commโโ]

@[reassoc (attr := simp)]
lemma rightHomology_ฮน_naturality [HasRightHomology Sโ] [HasRightHomology Sโ]
    (ฯ : Sโ โถ Sโ) :
    rightHomology_map ฯ โซ Sโ.rightHomology_ฮน = Sโ.rightHomology_ฮน โซ cyclesCo_map ฯ :=
  rightHomology_ฮน_naturality' _ _ _

namespace RightHomologyMapData

variable {ฯ : Sโ โถ Sโ} {hโ : Sโ.RightHomologyData} {hโ : Sโ.RightHomologyData}
  (ฮณ : RightHomologyMapData ฯ hโ hโ)

lemma rightHomology_map'_eq : rightHomology_map' ฯ hโ hโ = ฮณ.ฯH :=
  RightHomologyMapData.congr_ฯH (Subsingleton.elim _ _)

lemma cyclesCo_map'_eq : cyclesCo_map' ฯ hโ hโ = ฮณ.ฯQ :=
  RightHomologyMapData.congr_ฯQ (Subsingleton.elim _ _)

end RightHomologyMapData

@[simp]
lemma rightHomology_map'_id (h : S.RightHomologyData) :
    rightHomology_map' (๐ S) h h = ๐ _ :=
  (RightHomologyMapData.id h).rightHomology_map'_eq

@[simp]
lemma cyclesCo_map'_id (h : S.RightHomologyData) :
    cyclesCo_map' (๐ S) h h = ๐ _ :=
  (RightHomologyMapData.id h).cyclesCo_map'_eq

variable (S)

@[simp]
lemma rightHomology_map_id [HasRightHomology S] :
    rightHomology_map (๐ S) = ๐ _ :=
  rightHomology_map'_id _

@[simp]
lemma cyclesCo_map_id [HasRightHomology S] :
    cyclesCo_map (๐ S) = ๐ _ :=
  cyclesCo_map'_id _

@[simp]
lemma rightHomology_map'_zero (hโ : Sโ.RightHomologyData) (hโ : Sโ.RightHomologyData) :
    rightHomology_map' 0 hโ hโ = 0 :=
  (RightHomologyMapData.zero hโ hโ).rightHomology_map'_eq

@[simp]
lemma cyclesCo_map'_zero (hโ : Sโ.RightHomologyData) (hโ : Sโ.RightHomologyData) :
    cyclesCo_map' 0 hโ hโ = 0 :=
  (RightHomologyMapData.zero hโ hโ).cyclesCo_map'_eq

variable (Sโ Sโ)

@[simp]
lemma right_homology_map_zero [HasRightHomology Sโ] [HasRightHomology Sโ] :
    rightHomology_map (0 : Sโ โถ Sโ) = 0 :=
  rightHomology_map'_zero _ _

@[simp]
lemma cyclesCo_map_zero [HasRightHomology Sโ] [HasRightHomology Sโ] :
  cyclesCo_map (0 : Sโ โถ Sโ) = 0 :=
cyclesCo_map'_zero _ _

variable {Sโ Sโ}

lemma rightHomology_map'_comp (ฯโ : Sโ โถ Sโ) (ฯโ : Sโ โถ Sโ)
    (hโ : Sโ.RightHomologyData) (hโ : Sโ.RightHomologyData) (hโ : Sโ.RightHomologyData) :
    rightHomology_map' (ฯโ โซ ฯโ) hโ hโ = rightHomology_map' ฯโ hโ hโ โซ
      rightHomology_map' ฯโ hโ hโ := by
  let ฮณโ := rightHomologyMapData ฯโ hโ hโ
  let ฮณโ := rightHomologyMapData ฯโ hโ hโ
  rw [ฮณโ.rightHomology_map'_eq, ฮณโ.rightHomology_map'_eq, (ฮณโ.comp ฮณโ).rightHomology_map'_eq,
    RightHomologyMapData.comp_ฯH]

lemma cyclesCo_map'_comp (ฯโ : Sโ โถ Sโ) (ฯโ : Sโ โถ Sโ)
    (hโ : Sโ.RightHomologyData) (hโ : Sโ.RightHomologyData) (hโ : Sโ.RightHomologyData) :
    cyclesCo_map' (ฯโ โซ ฯโ) hโ hโ = cyclesCo_map' ฯโ hโ hโ โซ cyclesCo_map' ฯโ hโ hโ := by
  let ฮณโ := rightHomologyMapData ฯโ hโ hโ
  let ฮณโ := rightHomologyMapData ฯโ hโ hโ
  rw [ฮณโ.cyclesCo_map'_eq, ฮณโ.cyclesCo_map'_eq, (ฮณโ.comp ฮณโ).cyclesCo_map'_eq,
    RightHomologyMapData.comp_ฯQ]

@[simp]
lemma rightHomology_map_comp [HasRightHomology Sโ] [HasRightHomology Sโ] [HasRightHomology Sโ]
    (ฯโ : Sโ โถ Sโ) (ฯโ : Sโ โถ Sโ) :
    rightHomology_map (ฯโ โซ ฯโ) = rightHomology_map ฯโ โซ rightHomology_map ฯโ :=
rightHomology_map'_comp _ _ _ _ _

@[simp]
lemma cyclesCo_map_comp [HasRightHomology Sโ] [HasRightHomology Sโ] [HasRightHomology Sโ]
    (ฯโ : Sโ โถ Sโ) (ฯโ : Sโ โถ Sโ) :
    cyclesCo_map (ฯโ โซ ฯโ) = cyclesCo_map ฯโ โซ cyclesCo_map ฯโ :=
  cyclesCo_map'_comp _ _ _ _ _

@[simps]
def rightHomology_map_iso' (e : Sโ โ Sโ) (hโ : Sโ.RightHomologyData)
    (hโ : Sโ.RightHomologyData) : hโ.H โ hโ.H where
  hom := rightHomology_map' e.hom hโ hโ
  inv := rightHomology_map' e.inv hโ hโ
  hom_inv_id := by rw [โ rightHomology_map'_comp, e.hom_inv_id, rightHomology_map'_id]
  inv_hom_id := by rw [โ rightHomology_map'_comp, e.inv_hom_id, rightHomology_map'_id]

instance isIso_rightHomology_map'_of_isIso (ฯ : Sโ โถ Sโ) [IsIso ฯ]
    (hโ : Sโ.RightHomologyData) (hโ : Sโ.RightHomologyData) :
    IsIso (rightHomology_map' ฯ hโ hโ) :=
  (inferInstance : IsIso (rightHomology_map_iso' (asIso ฯ) hโ hโ).hom)

@[simps]
def cyclesCo_map_iso' (e : Sโ โ Sโ) (hโ : Sโ.RightHomologyData)
  (hโ : Sโ.RightHomologyData) : hโ.Q โ hโ.Q where
  hom := cyclesCo_map' e.hom hโ hโ
  inv := cyclesCo_map' e.inv hโ hโ
  hom_inv_id := by rw [โ cyclesCo_map'_comp, e.hom_inv_id, cyclesCo_map'_id]
  inv_hom_id := by rw [โ cyclesCo_map'_comp, e.inv_hom_id, cyclesCo_map'_id]

instance isIso_cyclesCo_map'_of_isIso (ฯ : Sโ โถ Sโ) [IsIso ฯ]
    (hโ : Sโ.RightHomologyData) (hโ : Sโ.RightHomologyData) :
    IsIso (cyclesCo_map' ฯ hโ hโ) :=
  (inferInstance : IsIso (cyclesCo_map_iso' (asIso ฯ) hโ hโ).hom)

@[simps]
noncomputable def rightHomology_map_iso (e : Sโ โ Sโ) [Sโ.HasRightHomology]
  [Sโ.HasRightHomology] : Sโ.rightHomology โ Sโ.rightHomology where
  hom := rightHomology_map e.hom
  inv := rightHomology_map e.inv
  hom_inv_id := by rw [โ rightHomology_map_comp, e.hom_inv_id, rightHomology_map_id]
  inv_hom_id := by rw [โ rightHomology_map_comp, e.inv_hom_id, rightHomology_map_id]

instance isIso_rightHomology_map_of_iso (ฯ : Sโ โถ Sโ) [IsIso ฯ] [Sโ.HasRightHomology]
    [Sโ.HasRightHomology] :
    IsIso (rightHomology_map ฯ) :=
  (inferInstance : IsIso (rightHomology_map_iso (asIso ฯ)).hom)

@[simps]
noncomputable def cyclesCo_map_iso (e : Sโ โ Sโ) [Sโ.HasRightHomology]
    [Sโ.HasRightHomology] : Sโ.cyclesCo โ Sโ.cyclesCo where
  hom := cyclesCo_map e.hom
  inv := cyclesCo_map e.inv
  hom_inv_id := by rw [โ cyclesCo_map_comp, e.hom_inv_id, cyclesCo_map_id]
  inv_hom_id := by rw [โ cyclesCo_map_comp, e.inv_hom_id, cyclesCo_map_id]

instance is_iso_cycles_map_of_iso (ฯ : Sโ โถ Sโ) [IsIso ฯ] [Sโ.HasRightHomology]
    [Sโ.HasRightHomology] : IsIso (cyclesCo_map ฯ) :=
  (inferInstance : IsIso (cyclesCo_map_iso (asIso ฯ)).hom)

variable {S}

noncomputable def RightHomologyData.rightHomology_iso (h : S.RightHomologyData) [S.HasRightHomology] :
  S.rightHomology โ h.H := rightHomology_map_iso' (Iso.refl _) _ _

noncomputable def RightHomologyData.cyclesCo_iso (h : S.RightHomologyData) [S.HasRightHomology] :
  S.cyclesCo โ h.Q := cyclesCo_map_iso' (Iso.refl _) _ _

@[reassoc (attr := simp)]
lemma RightHomologyData.p_comp_cyclesCo_iso_inv (h : S.RightHomologyData) [S.HasRightHomology] :
    h.p โซ h.cyclesCo_iso.inv = S.p_cyclesCo := by
  dsimp [p_cyclesCo, RightHomologyData.cyclesCo_iso]
  simp only [p_cyclesCo_map', id_ฯโ, id_comp]

@[reassoc (attr := simp)]
lemma RightHomologyData.p_cyclesCo_comp_cyclesCo_iso_hom (h : S.RightHomologyData)
    [S.HasRightHomology] : S.p_cyclesCo โซ h.cyclesCo_iso.hom = h.p := by
  simp only [โ h.p_comp_cyclesCo_iso_inv, assoc, Iso.inv_hom_id, comp_id]

namespace RightHomologyMapData

variable {ฯ : Sโ โถ Sโ} {hโ : Sโ.RightHomologyData} {hโ : Sโ.RightHomologyData}
  (ฮณ : RightHomologyMapData ฯ hโ hโ)

lemma rightHomology_map_eq [Sโ.HasRightHomology] [Sโ.HasRightHomology] :
    rightHomology_map ฯ = hโ.rightHomology_iso.hom โซ ฮณ.ฯH โซ hโ.rightHomology_iso.inv := by
  dsimp [RightHomologyData.rightHomology_iso, rightHomology_map_iso']
  rw [โ ฮณ.rightHomology_map'_eq, โ rightHomology_map'_comp,
    โ rightHomology_map'_comp, id_comp, comp_id]
  rfl

lemma cyclesCo_map_eq [Sโ.HasRightHomology] [Sโ.HasRightHomology] :
    cyclesCo_map ฯ = hโ.cyclesCo_iso.hom โซ ฮณ.ฯQ โซ hโ.cyclesCo_iso.inv := by
  dsimp [RightHomologyData.cyclesCo_iso, cycles_map_iso']
  rw [โ ฮณ.cyclesCo_map'_eq, โ cyclesCo_map'_comp, โ cyclesCo_map'_comp, id_comp, comp_id]
  rfl

lemma rightHomology_map_comm [Sโ.HasRightHomology] [Sโ.HasRightHomology] :
    rightHomology_map ฯ โซ hโ.rightHomology_iso.hom = hโ.rightHomology_iso.hom โซ ฮณ.ฯH := by
  simp only [ฮณ.rightHomology_map_eq, assoc, Iso.inv_hom_id, comp_id]

lemma cyclesCo_map_comm [Sโ.HasRightHomology] [Sโ.HasRightHomology] :
    cyclesCo_map ฯ โซ hโ.cyclesCo_iso.hom = hโ.cyclesCo_iso.hom โซ ฮณ.ฯQ := by
  simp only [ฮณ.cyclesCo_map_eq, assoc, Iso.inv_hom_id, comp_id]

end RightHomologyMapData

variable (C)

/-- We shall say that a category with right homology is a category for which
all short complexes have right homology. -/
abbrev _root_.CategoryTheory.CategoryWithRightHomology : Prop :=
  โ (S : ShortComplex C), S.HasRightHomology

@[simps]
noncomputable def rightHomologyFunctor [CategoryWithRightHomology C] :
    ShortComplex C โฅค C where
  obj S := S.rightHomology
  map := rightHomology_map

@[simps]
noncomputable def cyclesCoFunctor [CategoryWithRightHomology C] :
    ShortComplex C โฅค C where
  obj S := S.cyclesCo
  map := cyclesCo_map

@[simps]
noncomputable def rightHomology_ฮน_natTrans [CategoryWithRightHomology C] :
    rightHomologyFunctor C โถ cyclesCoFunctor C where
  app S := rightHomology_ฮน S
  naturality := fun _ _ ฯ => rightHomology_ฮน_naturality ฯ

@[simps]
noncomputable def p_cyclesCo_natTrans [CategoryWithRightHomology C] :
    ShortComplex.ฯโ โถ cyclesCoFunctor C where
  app S := S.p_cyclesCo

@[simps]
noncomputable def fromCyclesCo_natTrans [CategoryWithRightHomology C] :
    cyclesCoFunctor C โถ ฯโ where
  app S := S.fromCyclesCo
  naturality := fun _ _  ฯ => fromCyclesCo_naturality ฯ

variable {C}

@[simps]
def LeftHomologyMapData.op {Sโ Sโ : ShortComplex C} {ฯ : Sโ โถ Sโ}
    {hโ : Sโ.LeftHomologyData} {hโ : Sโ.LeftHomologyData}
    (ฯ : LeftHomologyMapData ฯ hโ hโ) : RightHomologyMapData (op_map ฯ) hโ.op hโ.op where
  ฯQ := ฯ.ฯK.op
  ฯH := ฯ.ฯH.op
  commp := Quiver.Hom.unop_inj (by simp)
  commg' := Quiver.Hom.unop_inj (by simp)
  commฮน := Quiver.Hom.unop_inj (by simp)

@[simps]
def LeftHomologyMapData.unop {Sโ Sโ : ShortComplex Cแตแต} {ฯ : Sโ โถ Sโ}
    {hโ : Sโ.LeftHomologyData} {hโ : Sโ.LeftHomologyData}
    (ฯ : LeftHomologyMapData ฯ hโ hโ) : RightHomologyMapData (unop_map ฯ) hโ.unop hโ.unop where
  ฯQ := ฯ.ฯK.unop
  ฯH := ฯ.ฯH.unop
  commp := Quiver.Hom.op_inj (by simp)
  commg' := Quiver.Hom.op_inj (by simp)
  commฮน := Quiver.Hom.op_inj (by simp)

@[simps]
def RightHomologyMapData.op {Sโ Sโ : ShortComplex C} {ฯ : Sโ โถ Sโ}
    {hโ : Sโ.RightHomologyData} {hโ : Sโ.RightHomologyData}
    (ฯ : RightHomologyMapData ฯ hโ hโ) : LeftHomologyMapData (op_map ฯ) hโ.op hโ.op where
  ฯK := ฯ.ฯQ.op
  ฯH := ฯ.ฯH.op
  commi := Quiver.Hom.unop_inj (by simp)
  commf' := Quiver.Hom.unop_inj (by simp)
  commฯ := Quiver.Hom.unop_inj (by simp)

@[simps]
def RightHomologyMapData.unop {Sโ Sโ : ShortComplex Cแตแต} {ฯ : Sโ โถ Sโ}
    {hโ : Sโ.RightHomologyData} {hโ : Sโ.RightHomologyData}
    (ฯ : RightHomologyMapData ฯ hโ hโ) : LeftHomologyMapData (unop_map ฯ) hโ.unop hโ.unop where
  ฯK := ฯ.ฯQ.unop
  ฯH := ฯ.ฯH.unop
  commi := Quiver.Hom.op_inj (by simp)
  commf' := Quiver.Hom.op_inj (by simp)
  commฯ := Quiver.Hom.op_inj (by simp)

variable (S)

noncomputable def rightHomology_op_iso [S.HasLeftHomology] :
    S.op.rightHomology โ Opposite.op S.leftHomology :=
  S.leftHomologyData.op.rightHomology_iso

noncomputable def leftHomology_op_iso [S.HasRightHomology] :
    S.op.leftHomology โ Opposite.op S.rightHomology :=
  S.rightHomologyData.op.leftHomology_iso

noncomputable def cyclesCo_op_iso [S.HasLeftHomology] :
    S.op.cyclesCo โ Opposite.op S.cycles :=
  S.leftHomologyData.op.cyclesCo_iso

noncomputable def cycles_op_iso [S.HasRightHomology] :
    S.op.cycles โ Opposite.op S.cyclesCo :=
  S.rightHomologyData.op.cycles_iso

@[simp]
lemma leftHomology_map'_op
    (ฯ : Sโ โถ Sโ) (hโ : Sโ.LeftHomologyData) (hโ : Sโ.LeftHomologyData) :
    (leftHomology_map' ฯ hโ hโ).op = rightHomology_map' (op_map ฯ) hโ.op hโ.op := by
  let ฮณ : LeftHomologyMapData ฯ hโ hโ := default
  simp only [ฮณ.leftHomology_map'_eq, (ฮณ.op).rightHomology_map'_eq,
    LeftHomologyMapData.op_ฯH]

@[simp]
lemma leftHomology_map_op (ฯ : Sโ โถ Sโ) [Sโ.HasLeftHomology] [Sโ.HasLeftHomology] :
    (leftHomology_map ฯ).op = (Sโ.rightHomology_op_iso).inv โซ rightHomology_map
      (op_map ฯ) โซ (Sโ.rightHomology_op_iso).hom := by
  dsimp [rightHomology_op_iso, RightHomologyData.rightHomology_iso, rightHomology_map,
    leftHomology_map]
  simp only [โ rightHomology_map'_comp, comp_id, id_comp, leftHomology_map'_op]

@[simp]
lemma rightHomology_map'_op
    (ฯ : Sโ โถ Sโ) (hโ : Sโ.RightHomologyData) (hโ : Sโ.RightHomologyData) :
    (rightHomology_map' ฯ hโ hโ).op = leftHomology_map' (op_map ฯ) hโ.op hโ.op := by
  let ฮณ : RightHomologyMapData ฯ hโ hโ := default
  simp only [ฮณ.rightHomology_map'_eq, (ฮณ.op).leftHomology_map'_eq,
    RightHomologyMapData.op_ฯH]

@[simp]
lemma rightHomology_map_op (ฯ : Sโ โถ Sโ) [Sโ.HasRightHomology] [Sโ.HasRightHomology] :
    (rightHomology_map ฯ).op = (Sโ.leftHomology_op_iso).inv โซ leftHomology_map
      (op_map ฯ) โซ (Sโ.leftHomology_op_iso).hom := by
  dsimp [leftHomology_op_iso, LeftHomologyData.leftHomology_iso, leftHomology_map,
    rightHomology_map]
  simp only [โ leftHomology_map'_comp, comp_id, id_comp, rightHomology_map'_op]

namespace RightHomologyData

section

variable (ฯ : Sโ โถ Sโ) (h : RightHomologyData Sโ) [Epi ฯ.ฯโ] [IsIso ฯ.ฯโ] [Mono ฯ.ฯโ]

noncomputable def of_epi_of_isIso_of_mono : RightHomologyData Sโ := by
  haveI : Epi (op_map ฯ).ฯโ := by dsimp ; infer_instance
  haveI : IsIso (op_map ฯ).ฯโ := by dsimp ; infer_instance
  haveI : Mono (op_map ฯ).ฯโ := by dsimp ; infer_instance
  exact (LeftHomologyData.of_epi_of_isIso_of_mono' (op_map ฯ) h.op).unop

@[simp] lemma of_epi_of_isIso_of_mono_Q : (of_epi_of_isIso_of_mono ฯ h).Q = h.Q := rfl

@[simp] lemma of_epi_of_isIso_of_mono_H : (of_epi_of_isIso_of_mono ฯ h).H = h.H := rfl

@[simp] lemma of_epi_of_isIso_of_mono_p : (of_epi_of_isIso_of_mono ฯ h).p = (inv ฯ.ฯโ) โซ h.p := by
  simp [of_epi_of_isIso_of_mono, op_map]

@[simp] lemma of_epi_of_isIso_of_mono_ฮน : (of_epi_of_isIso_of_mono ฯ h).ฮน = h.ฮน := rfl

@[simp] lemma of_epi_of_isIso_of_mono_g' : (of_epi_of_isIso_of_mono ฯ h).g' = h.g' โซ ฯ.ฯโ := by
  simp [of_epi_of_isIso_of_mono, op_map]

end

section

variable (ฯ : Sโ โถ Sโ) (h : RightHomologyData Sโ) [Epi ฯ.ฯโ] [IsIso ฯ.ฯโ] [Mono ฯ.ฯโ]

noncomputable def of_epi_of_isIso_of_mono' : RightHomologyData Sโ := by
  haveI : Epi (op_map ฯ).ฯโ := by dsimp ; infer_instance
  haveI : IsIso (op_map ฯ).ฯโ := by dsimp ; infer_instance
  haveI : Mono (op_map ฯ).ฯโ := by dsimp ; infer_instance
  exact (LeftHomologyData.of_epi_of_isIso_of_mono (op_map ฯ) h.op).unop

@[simp] lemma of_epi_of_isIso_of_mono'_Q : (of_epi_of_isIso_of_mono' ฯ h).Q = h.Q := rfl

@[simp] lemma of_epi_of_isIso_of_mono'_H : (of_epi_of_isIso_of_mono' ฯ h).H = h.H := rfl

@[simp] lemma of_epi_of_isIso_of_mono'_p : (of_epi_of_isIso_of_mono' ฯ h).p = ฯ.ฯโ โซ h.p := by
  simp [of_epi_of_isIso_of_mono', op_map]

@[simp] lemma of_epi_of_isIso_of_mono'_ฮน : (of_epi_of_isIso_of_mono' ฯ h).ฮน = h.ฮน := rfl

@[simp] lemma of_epi_of_isIso_of_mono'_g'_ฯโ : (of_epi_of_isIso_of_mono' ฯ h).g' โซ ฯ.ฯโ = h.g' := by
  rw [โ cancel_epi (of_epi_of_isIso_of_mono' ฯ h).p, p_g'_assoc, of_epi_of_isIso_of_mono'_p,
    assoc, p_g', ฯ.commโโ]

end

noncomputable def of_iso (e : Sโ โ Sโ) (hโ : RightHomologyData Sโ) : RightHomologyData Sโ :=
  hโ.of_epi_of_isIso_of_mono e.hom

end RightHomologyData

lemma HasRightHomology_of_epi_of_is_iso_of_mono (ฯ : Sโ โถ Sโ) [HasRightHomology Sโ]
    [Epi ฯ.ฯโ] [IsIso ฯ.ฯโ] [Mono ฯ.ฯโ] : HasRightHomology Sโ :=
  HasRightHomology.mk' (RightHomologyData.of_epi_of_isIso_of_mono ฯ Sโ.rightHomologyData)

lemma HasRightHomology_of_epi_of_is_iso_of_mono' (ฯ : Sโ โถ Sโ) [HasRightHomology Sโ]
    [Epi ฯ.ฯโ] [IsIso ฯ.ฯโ] [Mono ฯ.ฯโ] : HasRightHomology Sโ :=
HasRightHomology.mk' (RightHomologyData.of_epi_of_isIso_of_mono' ฯ Sโ.rightHomologyData)

lemma HasRightHomology_of_iso {Sโ Sโ : ShortComplex C}
    (e : Sโ โ Sโ) [HasRightHomology Sโ] : HasRightHomology Sโ :=
  HasRightHomology_of_epi_of_is_iso_of_mono e.hom

instance _root_.CategoryTheory.CategoryWithRightHomology.op
    [CategoryWithRightHomology C] : CategoryWithLeftHomology Cแตแต :=
  fun S => ShortComplex.HasLeftHomology_of_iso S.unop_op

instance _root_.CategoryTheory.CategoryWithLeftHomology.op
    [CategoryWithLeftHomology C] : CategoryWithRightHomology Cแตแต :=
  fun S => ShortComplex.HasRightHomology_of_iso S.unop_op

namespace RightHomologyMapData

@[simps]
def of_epi_of_isIso_of_mono (ฯ : Sโ โถ Sโ) (h : RightHomologyData Sโ)
    [Epi ฯ.ฯโ] [IsIso ฯ.ฯโ] [Mono ฯ.ฯโ] :
    RightHomologyMapData ฯ h (RightHomologyData.of_epi_of_isIso_of_mono ฯ h) where
  ฯQ := ๐ _
  ฯH := ๐ _

@[simps]
noncomputable def of_epi_of_isIso_of_mono' (ฯ : Sโ โถ Sโ) (h : RightHomologyData Sโ)
  [Epi ฯ.ฯโ] [IsIso ฯ.ฯโ] [Mono ฯ.ฯโ] :
    RightHomologyMapData ฯ (RightHomologyData.of_epi_of_isIso_of_mono' ฯ h) h :=
{ ฯQ := ๐ _,
  ฯH := ๐ _, }

end RightHomologyMapData

instance (ฯ : Sโ โถ Sโ) (hโ : Sโ.RightHomologyData) (hโ : Sโ.RightHomologyData)
    [Epi ฯ.ฯโ] [IsIso ฯ.ฯโ] [Mono ฯ.ฯโ] :
    IsIso (rightHomology_map' ฯ hโ hโ) := by
  let hโ' := RightHomologyData.of_epi_of_isIso_of_mono ฯ hโ
  haveI : IsIso (rightHomology_map' ฯ hโ hโ') := by
    rw [(RightHomologyMapData.of_epi_of_isIso_of_mono ฯ hโ).rightHomology_map'_eq]
    dsimp
    infer_instance
  have eq := rightHomology_map'_comp ฯ (๐ Sโ) hโ hโ' hโ
  rw [comp_id] at eq
  rw [eq]
  infer_instance

instance (ฯ : Sโ โถ Sโ) [Sโ.HasRightHomology] [Sโ.HasRightHomology]
    [Epi ฯ.ฯโ] [IsIso ฯ.ฯโ] [Mono ฯ.ฯโ] :
    IsIso (rightHomology_map ฯ) := by
  dsimp only [rightHomology_map]
  infer_instance

variable (C)

@[simps!]
noncomputable def rightHomologyFunctor_op_natIso [CategoryWithRightHomology C] :
  (rightHomologyFunctor C).op โ op_functor C โ leftHomologyFunctor Cแตแต :=
    NatIso.ofComponents (fun S => (leftHomology_op_iso S.unop).symm) (by simp)

@[simps!]
noncomputable def leftHomologyFunctor_op_natIso [CategoryWithLeftHomology C] :
  (leftHomologyFunctor C).op โ op_functor C โ rightHomologyFunctor Cแตแต :=
    NatIso.ofComponents (fun S => (rightHomology_op_iso S.unop).symm) (by simp)

section

variable {S}
variable (h : RightHomologyData S)
  {A : C} (k : S.Xโ โถ A) (hk : S.f โซ k = 0) [HasRightHomology S]

noncomputable def desc_cyclesCo : S.cyclesCo โถ A :=
  S.rightHomologyData.desc_Q k hk

@[reassoc (attr := simp)]
lemma p_desc_cyclesCo : S.p_cyclesCo โซ S.desc_cyclesCo k hk = k :=
  RightHomologyData.p_desc_Q _ k hk

@[reassoc]
lemma desc_cyclesCo_comp {A' : C} (ฮฑ : A โถ A') :
    S.desc_cyclesCo k hk โซ ฮฑ = S.desc_cyclesCo (k โซ ฮฑ) (by rw [reassoc_of% hk, zero_comp]) := by
  simp only [โ cancel_epi S.p_cyclesCo, p_desc_cyclesCo_assoc, p_desc_cyclesCo]

noncomputable def cyclesCo_is_cokernel :
    IsColimit (CokernelCofork.ofฯ S.p_cyclesCo S.f_p_cyclesCo) :=
  S.rightHomologyData.hp

lemma isIso_p_cyclesCo_of_zero (hf : S.f = 0) : IsIso (S.p_cyclesCo) :=
  CokernelCofork.IsColimit.isIso_ฯ_of_zero _ S.cyclesCo_is_cokernel hf

@[simps]
noncomputable def cyclesCo_iso_cokernel [HasCokernel S.f] : S.cyclesCo โ cokernel S.f where
  hom := S.desc_cyclesCo (cokernel.ฯ S.f) (by simp)
  inv := cokernel.desc S.f S.p_cyclesCo (by simp)
  hom_inv_id := by simp only [โ cancel_epi S.p_cyclesCo, p_desc_cyclesCo_assoc,
    cokernel.ฯ_desc, comp_id]
  inv_hom_id := by simp only [โ cancel_epi (cokernel.ฯ S.f), cokernel.ฯ_desc_assoc,
    p_desc_cyclesCo, comp_id]

@[simp]
noncomputable def desc_rightHomology : S.rightHomology โถ A :=
  S.rightHomology_ฮน โซ S.desc_cyclesCo k hk

lemma ฮน_desc_cyclesCo_ฯ_eq_zero_of_boundary (x : S.Xโ โถ A) (hx : k = S.g โซ x) :
    S.rightHomology_ฮน โซ S.desc_cyclesCo k (by rw [hx, S.zero_assoc, zero_comp]) = 0 :=
  RightHomologyData.ฮน_desc_Q_eq_zero_of_boundary _ k x hx

@[reassoc (attr := simp)]
lemma rightHomology_ฮน_comp_fromCyclesCo :
    S.rightHomology_ฮน โซ S.fromCyclesCo = 0 :=
  S.ฮน_desc_cyclesCo_ฯ_eq_zero_of_boundary S.g (๐ _) (by rw [comp_id])

noncomputable def rightHomology_is_kernel :
    IsLimit (KernelFork.ofฮน S.rightHomology_ฮน S.rightHomology_ฮน_comp_fromCyclesCo) :=
  S.rightHomologyData.hฮน

@[reassoc (attr := simp)]
lemma cyclesCo_map_comp_desc_cyclesCo (ฯ : Sโ โถ S) [Sโ.HasRightHomology] :
    cyclesCo_map ฯ โซ S.desc_cyclesCo k hk =
      Sโ.desc_cyclesCo (ฯ.ฯโ โซ k) (by rw [โ ฯ.commโโ_assoc, hk, comp_zero]) := by
  simp only [โ cancel_epi (Sโ.p_cyclesCo), p_cyclesCo_map_assoc, p_desc_cyclesCo]

@[reassoc (attr := simp)]
lemma RightHomologyData.rightHomology_iso_inv_comp_rightHomology_ฮน :
    h.rightHomology_iso.inv โซ S.rightHomology_ฮน = h.ฮน โซ h.cyclesCo_iso.inv := by
  dsimp only [rightHomology_ฮน, rightHomology_iso, cyclesCo_iso, rightHomology_map_iso']
  simp only [Iso.refl_inv, rightHomology_ฮน_naturality', cyclesCo_map_iso'_inv]

@[reassoc (attr := simp)]
lemma RightHomologyData.rightHomology_iso_hom_comp_ฮน :
    h.rightHomology_iso.hom โซ h.ฮน = S.rightHomology_ฮน โซ h.cyclesCo_iso.hom := by
  simp only [โ cancel_epi h.rightHomology_iso.inv, โ cancel_mono h.cyclesCo_iso.inv, assoc,
    Iso.inv_hom_id_assoc, Iso.hom_inv_id, comp_id, rightHomology_iso_inv_comp_rightHomology_ฮน]

@[reassoc (attr := simp)]
lemma RightHomologyData.cyclesCo_iso_inv_comp_desc_cyclesCo :
    h.cyclesCo_iso.inv โซ S.desc_cyclesCo k hk = h.desc_Q k hk := by
  simp only [โ cancel_epi h.p, p_comp_cyclesCo_iso_inv_assoc, p_desc_cyclesCo, p_desc_Q]

@[simp]
lemma RightHomologyData.cyclesCo_iso_hom_comp_desc_Q :
    h.cyclesCo_iso.hom โซ h.desc_Q k hk = S.desc_cyclesCo k hk := by
  rw [โ h.cyclesCo_iso_inv_comp_desc_cyclesCo, Iso.hom_inv_id_assoc]

lemma RightHomologyData.ext_iff' (fโ fโ : A โถ S.rightHomology) :
    fโ = fโ โ fโ โซ h.rightHomology_iso.hom โซ h.ฮน = fโ โซ h.rightHomology_iso.hom โซ h.ฮน := by
  rw [โ cancel_mono h.rightHomology_iso.hom, โ cancel_mono h.ฮน, assoc, assoc]

end

namespace HasRightHomology

lemma hasCokernel [S.HasRightHomology] : HasCokernel S.f :=
โจโจโจ_, S.rightHomologyData.hpโฉโฉโฉ

lemma hasKernel [S.HasRightHomology] [HasCokernel S.f] :
    HasKernel (cokernel.desc S.f S.g S.zero) := by
  let h := S.rightHomologyData
  haveI : HasLimit (parallelPair h.g' 0) := โจโจโจ_, h.hฮน'โฉโฉโฉ
  let e : parallelPair (cokernel.desc S.f S.g S.zero) 0 โ parallelPair h.g' 0 :=
    parallelPair.ext (IsColimit.coconePointUniqueUpToIso (colimit.isColimit _) h.hp)
      (Iso.refl _) (coequalizer.hom_ext (by simp)) (by aesop_cat)
  exact hasLimitOfIso e.symm

end HasRightHomology

noncomputable def rightHomology_iso_kernel_desc [S.HasRightHomology] [HasCokernel S.f]
    [HasKernel (cokernel.desc S.f S.g S.zero)] :
    S.rightHomology โ kernel (cokernel.desc S.f S.g S.zero) :=
  (RightHomologyData.of_ker_of_coker S).rightHomology_iso

namespace RightHomologyData

lemma isIso_p_of_zero_f (h : RightHomologyData S) (hf : S.f = 0) : IsIso h.p :=
  โจโจh.desc_Q (๐ S.Xโ) (by rw [hf, comp_id]), p_desc_Q _ _ _, by
    rw [โ cancel_epi h.p, p_desc_Q_assoc, id_comp, comp_id]โฉโฉ

end RightHomologyData

end ShortComplex

end CategoryTheory

attribute [-simp] CategoryTheory.ShortComplex.RightHomologyMapData.mk.injEq
