/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.ShortComplex.Exact
import Mathlib.Algebra.Homology.HomotopyCategory
import Mathlib.Algebra.Homology.Opposite
import Mathlib.Tactic.Linarith
/-!
# The short complexes attached to homological complexes

In this file, we define a functor
`shortComplexFunctor C c i : HomologicalComplex C c ‚•§ ShortComplex C`.
By definition, the image of a homological complex `K` by this functor
is the short complex `K.X (c.prev i) ‚ü∂ K.X i ‚ü∂ K.X (c.next i)`.

When the homology refactor is completed (TODO @joelriou), the homology
of a homological complex `K` in degree `i` shall be the homology
of the short complex `(shortComplexFunctor C c i).obj K`, which can be
abbreviated as `K.sc i`.

-/

open CategoryTheory Category Limits ZeroObject

namespace HomologicalComplex

variable (C : Type*) [Category C] [HasZeroMorphisms C] {Œπ : Type*} (c : ComplexShape Œπ)

/-- The functor `HomologicalComplex C c ‚•§ ShortComplex C` which sends a homological
complex `K` to the short complex `K.X i ‚ü∂ K.X j ‚ü∂ K.X k` for arbitrary indices `i`, `j` and `k`. -/
@[simps]
def shortComplexFunctor' (i j k : Œπ) : HomologicalComplex C c ‚•§ ShortComplex C where
  obj K := ShortComplex.mk (K.d i j) (K.d j k) (K.d_comp_d i j k)
  map f :=
    { œÑ‚ÇÅ := f.f i
      œÑ‚ÇÇ := f.f j
      œÑ‚ÇÉ := f.f k }

/-- The functor `HomologicalComplex C c ‚•§ ShortComplex C` which sends a homological
complex `K` to the short complex `K.X (c.prev i) ‚ü∂ K.X i ‚ü∂ K.X (c.next i)`. -/
@[simps!]
noncomputable def shortComplexFunctor (i : Œπ) :=
  shortComplexFunctor' C c (c.prev i) i (c.next i)

variable {C c}
variable (K L M : HomologicalComplex C c) (œÜ : K ‚ü∂ L) (œà : L ‚ü∂ M)

/-- The short complex `K.X i ‚ü∂ K.X j ‚ü∂ K.X k` for arbitrary indices `i`, `j` and `k`. -/
abbrev sc' (i j k : Œπ) := (shortComplexFunctor' C c i j k).obj K

/-- The short complex `K.X (c.prev i) ‚ü∂ K.X i ‚ü∂ K.X (c.next i)`. -/
noncomputable abbrev sc (i : Œπ) := (shortComplexFunctor C c i).obj K

abbrev HasHomology (i : Œπ) := (K.sc i).HasHomology

variable (i : Œπ) [K.HasHomology i] [L.HasHomology i] [M.HasHomology i]

noncomputable def homology := (K.sc i).homology
noncomputable def cycles := (K.sc i).cycles
noncomputable def homologyœÄ : K.cycles i ‚ü∂ K.homology i := (K.sc i).homologyœÄ
noncomputable def iCycles : K.cycles i ‚ü∂ K.X i := (K.sc i).iCycles

variable {i}

noncomputable def liftCycles {A : C} (k : A ‚ü∂ K.X i) (j : Œπ) (hj : c.next i = j)
    (hk : k ‚â´ K.d i j = 0) : A ‚ü∂ K.cycles i :=
  (K.sc i).liftCycles k (by subst hj ; exact hk)

@[reducible]
noncomputable def liftCycles' {A : C} (k : A ‚ü∂ K.X i) (j : Œπ) (hj : c.Rel i j)
    (hk : k ‚â´ K.d i j = 0) : A ‚ü∂ K.cycles i :=
  K.liftCycles k j (c.next_eq' hj) hk

@[reassoc (attr := simp)]
lemma liftCycles_i {A : C} (k : A ‚ü∂ K.X i) (j : Œπ) (hj : c.next i = j)
    (hk : k ‚â´ K.d i j = 0) : K.liftCycles k j hj hk ‚â´ K.iCycles i = k := by
  dsimp [liftCycles, iCycles]
  simp

noncomputable def toCycles (i j : Œπ) [K.HasHomology j] :
  K.X i ‚ü∂ K.cycles j :=
  K.liftCycles (K.d i j) (c.next j) rfl (K.d_comp_d _ _ _)

variable (i)

@[reassoc (attr := simp)]
lemma iCycles_d (j : Œπ) : K.iCycles i ‚â´ K.d i j = 0 := by
  by_cases hij : c.Rel i j
  . obtain rfl := c.next_eq' hij
    exact (K.sc i).iCycles_g
  . rw [K.shape _ _ hij, comp_zero]

noncomputable def cyclesIsKernel (i j : Œπ) (hij : c.Rel i j) [K.HasHomology i]:
    IsLimit (KernelFork.ofŒπ (K.iCycles i) (K.iCycles_d i j)) := by
  obtain rfl := c.next_eq' hij
  exact (K.sc i).cyclesIsKernel

@[reassoc (attr := simp)]
lemma toCycles_i (i j : Œπ) [K.HasHomology j] :
    K.toCycles i j ‚â´ K.iCycles j = K.d i j :=
  liftCycles_i _ _ _ _ _

instance [K.HasHomology i] : Mono (K.iCycles i) := by
  dsimp only [iCycles]
  infer_instance

instance [K.HasHomology i] : Epi (K.homologyœÄ i) := by
  dsimp only [homologyœÄ]
  infer_instance

variable {i}

@[reassoc]
lemma comp_liftCycles {A' A : C} (k : A ‚ü∂ K.X i) (j : Œπ) (hj : c.next i = j)
    (hk : k ‚â´ K.d i j = 0) (Œ± : A' ‚ü∂ A) :
    Œ± ‚â´ K.liftCycles k j hj hk = K.liftCycles (Œ± ‚â´ k) j hj (by rw [assoc, hk, comp_zero]) := by
  simp only [‚Üê cancel_mono (K.iCycles i), assoc, liftCycles_i]

@[reassoc]
lemma liftCycles_homologyœÄ_eq_zero_of_boundary {A : C} (k : A ‚ü∂ K.X i) (j : Œπ)
    (hj : c.next i = j) {i' : Œπ} (x : A ‚ü∂ K.X i') (hx : k = x ‚â´ K.d i' i) :
    K.liftCycles k j hj (by rw [hx, assoc, K.d_comp_d, comp_zero]) ‚â´ K.homologyœÄ i = 0 := by
  by_cases c.Rel i' i
  . obtain rfl := c.prev_eq' h
    exact (K.sc i).liftCycles_homologyœÄ_eq_zero_of_boundary _ x hx
  . have : liftCycles K k j hj (by rw [hx, assoc, K.d_comp_d, comp_zero]) = 0 := by
      rw [K.shape _ _ h, comp_zero] at hx
      rw [‚Üê cancel_mono (K.iCycles i), zero_comp, liftCycles_i, hx]
    rw [this, zero_comp]

@[reassoc (attr := simp)]
lemma toCycles_comp_homologyœÄ (i j : Œπ) [K.HasHomology j] :
    K.toCycles i j ‚â´ K.homologyœÄ j = 0 :=
  K.liftCycles_homologyœÄ_eq_zero_of_boundary (K.d i j) (c.next j) rfl (ùüô _) (by simp)

noncomputable def homologyIsCokernel (i j : Œπ) (hi : c.prev j = i) [K.HasHomology j] :
    IsColimit (CokernelCofork.ofœÄ (K.homologyœÄ j) (K.toCycles_comp_homologyœÄ i j)) := by
  subst hi
  exact IsColimit.ofIsoColimit ((K.sc j).homologyIsCokernel)
    (Cofork.ext (Iso.refl _) (by dsimp [homologyœÄ] ; simp))

variable (i)

noncomputable def opcycles := (K.sc i).opcycles
noncomputable def homologyŒπ : K.homology i ‚ü∂ K.opcycles i := (K.sc i).homologyŒπ
noncomputable def pOpcycles : K.X i ‚ü∂ K.opcycles i := (K.sc i).pOpcycles

variable {i}

noncomputable def descOpcycles {A : C} (k : K.X i ‚ü∂ A) (j : Œπ) (hj : c.prev i = j)
    (hk : K.d j i ‚â´ k = 0) : K.opcycles i ‚ü∂ A :=
  (K.sc i).descOpcycles k (by subst hj; exact hk)

@[reducible]
noncomputable def descOpcycles' {A : C} (k : K.X i ‚ü∂ A) (j : Œπ) (hj : c.Rel j i)
    (hk : K.d j i ‚â´ k = 0) : K.opcycles i ‚ü∂ A :=
  K.descOpcycles k j (c.prev_eq' hj) hk

@[reassoc (attr := simp)]
lemma p_descOpcycles {A : C} (k : K.X i ‚ü∂ A) (j : Œπ) (hj : c.prev i = j)
    (hk : K.d j i ‚â´ k = 0) : K.pOpcycles i ‚â´ K.descOpcycles k j hj hk = k := by
  dsimp [descOpcycles, pOpcycles]
  simp

noncomputable def fromOpcycles (i j : Œπ) [K.HasHomology i] :
  K.opcycles i ‚ü∂ K.X j  :=
  K.descOpcycles (K.d i j) (c.prev i) rfl (K.d_comp_d _ _ _)

variable (i)

@[reassoc (attr := simp)]
lemma d_pOpcycles (X : HomologicalComplex C c) (i j : Œπ) [X.HasHomology j] : X.d i j ‚â´ X.pOpcycles j = 0 := by
  by_cases hij : c.Rel i j
  . obtain rfl := c.prev_eq' hij
    exact (X.sc j).f_pOpcycles
  . rw [X.shape _ _ hij, zero_comp]

noncomputable def opcyclesIsCokernel (i j : Œπ) (hij : c.Rel i j) [K.HasHomology j]:
    IsColimit (CokernelCofork.ofœÄ (K.pOpcycles j) (K.d_pOpcycles i j)) := by
  obtain rfl := c.prev_eq' hij
  exact (K.sc j).opcyclesIsCokernel

@[reassoc (attr := simp)]
lemma p_fromOpcycles (i j : Œπ) [K.HasHomology i] :
    K.pOpcycles i ‚â´ K.fromOpcycles i j = K.d i j :=
  p_descOpcycles _ _ _ _ _

instance [K.HasHomology i] : Epi (K.pOpcycles i) := by
  dsimp only [pOpcycles]
  infer_instance

instance [K.HasHomology i] : Mono (K.homologyŒπ i) := by
  dsimp only [homologyŒπ]
  infer_instance

variable {K L M}

noncomputable def homologyMap : K.homology i ‚ü∂ L.homology i :=
  ShortComplex.homologyMap ((shortComplexFunctor C c i).map œÜ)

noncomputable def cyclesMap : K.cycles i ‚ü∂ L.cycles i :=
  ShortComplex.cyclesMap ((shortComplexFunctor C c i).map œÜ)

noncomputable def opcyclesMap : K.opcycles i ‚ü∂ L.opcycles i :=
  ShortComplex.opcyclesMap ((shortComplexFunctor C c i).map œÜ)

@[reassoc (attr := simp)]
lemma cyclesMap_i : cyclesMap œÜ i ‚â´ L.iCycles i = K.iCycles i ‚â´ œÜ.f i :=
  ShortComplex.cyclesMap_i _

@[reassoc (attr := simp)]
lemma p_opcyclesMap : K.pOpcycles i ‚â´ opcyclesMap œÜ i = œÜ.f i ‚â´ L.pOpcycles i :=
  ShortComplex.p_opcyclesMap _

variable (K)

@[simp]
lemma homologyMap_id : homologyMap (ùüô K) i = ùüô _ :=
  ShortComplex.homologyMap_id _

@[simp]
lemma cyclesMap_id : cyclesMap (ùüô K) i = ùüô _ :=
  ShortComplex.cyclesMap_id _

@[simp]
lemma opcyclesMap_id : opcyclesMap (ùüô K) i = ùüô _ :=
  ShortComplex.opcyclesMap_id _

variable {K}

@[reassoc]
lemma homologyMap_comp : homologyMap (œÜ ‚â´ œà) i = homologyMap œÜ i ‚â´ homologyMap œà i := by
  dsimp [homologyMap]
  rw [Functor.map_comp, ShortComplex.homologyMap_comp]

@[reassoc]
lemma cyclesMap_comp : cyclesMap (œÜ ‚â´ œà) i = cyclesMap œÜ i ‚â´ cyclesMap œà i := by
  dsimp [cyclesMap]
  rw [Functor.map_comp, ShortComplex.cyclesMap_comp]

@[reassoc]
lemma opcyclesMap_comp : opcyclesMap (œÜ ‚â´ œà) i = opcyclesMap œÜ i ‚â´ opcyclesMap œà i := by
  dsimp [opcyclesMap]
  rw [Functor.map_comp, ShortComplex.opcyclesMap_comp]

variable (K L)

@[simp]
lemma homologyMap_zero : homologyMap (0 : K ‚ü∂ L) i = 0 :=
  ShortComplex.homologyMap_zero _ _

@[simp]
lemma cyclesMap_zero : cyclesMap (0 : K ‚ü∂ L) i = 0 :=
  ShortComplex.cyclesMap_zero _ _

@[simp]
lemma opcyclesMap_zero : opcyclesMap (0 : K ‚ü∂ L) i = 0 :=
  ShortComplex.opcyclesMap_zero _ _

variable {K L}

@[reassoc (attr := simp)]
lemma homologyœÄ_naturality :
    K.homologyœÄ i ‚â´ homologyMap œÜ i = cyclesMap œÜ i ‚â´ L.homologyœÄ i :=
  ShortComplex.homologyœÄ_naturality _

@[reassoc (attr := simp)]
lemma liftCycles_comp_cyclesMap {A : C} (k : A ‚ü∂ K.X i) (j : Œπ) (hj : c.next i = j)
    (hk : k ‚â´ K.d i j = 0) (œÜ : K ‚ü∂ L) :
    K.liftCycles k j hj hk ‚â´ cyclesMap œÜ i = L.liftCycles (k ‚â´ œÜ.f i) j hj
      (by rw [assoc, œÜ.comm, reassoc_of% hk, zero_comp]) := by
  simp only [‚Üê cancel_mono (L.iCycles i), assoc, cyclesMap_i, liftCycles_i_assoc, liftCycles_i]

@[reassoc (attr := simp)]
lemma homologyŒπ_naturality :
    homologyMap œÜ i ‚â´ L.homologyŒπ i = K.homologyŒπ i ‚â´ opcyclesMap œÜ i :=
  ShortComplex.homologyŒπ_naturality _

@[reassoc (attr := simp)]
lemma opcyclesMap_comp_descOpcycles {A : C} (k : L.X i ‚ü∂ A) (j : Œπ) (hj : c.prev i = j)
    (hk : L.d j i ‚â´ k = 0) (œÜ : K ‚ü∂ L) :
    opcyclesMap œÜ i ‚â´ L.descOpcycles k j hj hk = K.descOpcycles (œÜ.f i ‚â´ k) j hj
      (by rw [‚Üê œÜ.comm_assoc, hk, comp_zero]) := by
  simp only [‚Üê cancel_epi (K.pOpcycles i), p_opcyclesMap_assoc, p_descOpcycles]

variable (C c)

section

attribute [local simp] homologyMap_comp cyclesMap_comp opcyclesMap_comp

@[simps]
noncomputable def homologyFunctor [CategoryWithHomology C] : HomologicalComplex C c ‚•§ C where
  obj K := K.homology i
  map f := homologyMap f i

@[simps]
noncomputable def gradedHomologyFunctor [CategoryWithHomology C] :
    HomologicalComplex C c ‚•§ GradedObject Œπ C where
  obj K i := K.homology i
  map f i := homologyMap f i

@[simps]
noncomputable def cyclesFunctor [CategoryWithHomology C] : HomologicalComplex C c ‚•§ C where
  obj K := K.cycles i
  map f := cyclesMap f i

@[simps]
noncomputable def opcyclesFunctor [CategoryWithHomology C] : HomologicalComplex C c ‚•§ C where
  obj K := K.opcycles i
  map f := opcyclesMap f i

end

@[simps!]
noncomputable def homologyFunctorIso [CategoryWithHomology C] :
    homologyFunctor C c i ‚âÖ shortComplexFunctor C c i ‚ãô ShortComplex.homologyFunctor C :=
  NatIso.ofComponents (fun T => Iso.refl _) (by aesop_cat)

/- TODO : adapt more of the homology of ShortComplex API to this situation, including the
dual versions opcycles, etc... -/


@[simps!]
noncomputable def natIsoSc' (i j k : Œπ) (hi : c.prev j = i) (hk : c.next j = k) :
    shortComplexFunctor C c j ‚âÖ shortComplexFunctor' C c i j k :=
  NatIso.ofComponents (fun K => ShortComplex.isoMk (K.XIsoOfEq hi) (Iso.refl _) (K.XIsoOfEq hk)
    (by aesop_cat) (by aesop_cat)) (by aesop_cat)

variable {C c} (K L)

/-- The canonical isomorphism `K.sc j ‚âÖ K.sc' i j k` when `c.prev j = i` and `c.next j = k`. -/
noncomputable abbrev isoSc' (i j k : Œπ) (hi : c.prev j = i) (hk : c.next j = k) :
    K.sc j ‚âÖ K.sc' i j k := (natIsoSc' C c i j k hi hk).app K

abbrev ExactAt (i : Œπ) := (K.sc i).Exact

lemma exactAt_iff (i : Œπ) :
    K.ExactAt i ‚Üî (K.sc i).Exact := by rfl

lemma exactAt_iff' (i j k : Œπ) (hi : c.prev j = i) (hk : c.next j = k):
    K.ExactAt j ‚Üî (K.sc' i j k).Exact :=
  ShortComplex.exact_iff_of_iso (K.isoSc' i j k hi hk)

lemma isZero_homology_iff (i : Œπ) [K.HasHomology i] :
    IsZero (K.homology i) ‚Üî K.ExactAt i := by
  dsimp only [homology]
  rw [‚Üê ShortComplex.exact_iff_isZero_homology]

lemma isIso_iCycles (i j : Œπ) (hj : c.next i = j) (h : K.d i j = 0) [K.HasHomology i] :
    IsIso (K.iCycles i) := by
  subst hj
  exact ShortComplex.isIso_iCycles _ h

lemma isIso_pOpcycles (i j : Œπ) (hi : c.prev j = i) (h : K.d i j = 0) [K.HasHomology j] :
    IsIso (K.pOpcycles j) := by
  subst hi
  exact ShortComplex.isIso_pOpcycles _ h

lemma isIso_liftCycles (i j : Œπ) (hj : c.next i = j) (h : K.d i j = 0) [K.HasHomology i] :
    IsIso (K.liftCycles (ùüô (K.X i)) j hj (by rw [h, comp_zero])) := by
  have := K.isIso_iCycles i j hj h
  exact IsIso.of_isIso_fac_right (K.liftCycles_i _ _ _ _)

lemma isIso_descOpcycles (i j : Œπ) (hi : c.prev j = i) (h : K.d i j = 0) [K.HasHomology j] :
    IsIso (K.descOpcycles (ùüô (K.X j)) i hi (by rw [h, zero_comp])) := by
  have := K.isIso_pOpcycles i j hi h
  exact IsIso.of_isIso_fac_left (K.p_descOpcycles _ _ _ _)

variable {K L}

noncomputable def homologyMapArrowIso (i j k : Œπ) (hi : c.prev j = i) (hk : c.next j = k)
    [K.HasHomology j] [L.HasHomology j]
    [((shortComplexFunctor' C _ i j k).obj K).HasHomology]
    [((shortComplexFunctor' C _ i j k).obj L).HasHomology] :
    Arrow.mk (homologyMap œÜ j) ‚âÖ
      Arrow.mk (ShortComplex.homologyMap ((shortComplexFunctor' C _ i j k ).map œÜ)) := by
  refine' Arrow.isoMk
    (ShortComplex.homologyMapIso ((natIsoSc' C c i j k hi hk).app K))
    (ShortComplex.homologyMapIso ((natIsoSc' C c i j k hi hk).app L)) _
  dsimp [homologyMap]
  simp only [‚Üê ShortComplex.homologyMap_comp]
  congr 1
  exact ((natIsoSc' C c i j k hi hk).hom.naturality œÜ).symm

lemma isIso_homologyMap_iff' (i j k : Œπ) (hi : c.prev j = i) (hk : c.next j = k)
    [K.HasHomology j] [L.HasHomology j]
    [((shortComplexFunctor' C _ i j k).obj K).HasHomology]
    [((shortComplexFunctor' C _ i j k).obj L).HasHomology] :
  IsIso (homologyMap œÜ j) ‚Üî
    IsIso (ShortComplex.homologyMap ((shortComplexFunctor' C _ i j k ).map œÜ)) := by
  exact MorphismProperty.RespectsIso.arrow_mk_iso_iff
    (MorphismProperty.RespectsIso.isomorphisms C) (homologyMapArrowIso œÜ i j k hi hk)

lemma mono_homologyMap_iff' (i j k : Œπ) (hi : c.prev j = i) (hk : c.next j = k)
    [K.HasHomology j] [L.HasHomology j]
    [((shortComplexFunctor' C _ i j k).obj K).HasHomology]
    [((shortComplexFunctor' C _ i j k).obj L).HasHomology] :
  Mono (homologyMap œÜ j) ‚Üî
    Mono (ShortComplex.homologyMap ((shortComplexFunctor' C _ i j k ).map œÜ)) := by
  exact MorphismProperty.RespectsIso.arrow_mk_iso_iff
    (MorphismProperty.RespectsIso.monomorphisms C) (homologyMapArrowIso œÜ i j k hi hk)

lemma epi_homologyMap_iff' (i j k : Œπ) (hi : c.prev j = i) (hk : c.next j = k)
    [K.HasHomology j] [L.HasHomology j]
    [((shortComplexFunctor' C _ i j k).obj K).HasHomology]
    [((shortComplexFunctor' C _ i j k).obj L).HasHomology] :
  Epi (homologyMap œÜ j) ‚Üî
    Epi (ShortComplex.homologyMap ((shortComplexFunctor' C _ i j k ).map œÜ)) := by
  exact MorphismProperty.RespectsIso.arrow_mk_iso_iff
    (MorphismProperty.RespectsIso.epimorphisms C) (homologyMapArrowIso œÜ i j k hi hk)

lemma isIso_homologyMap_of_isIso_cyclesMap_of_epi (i j : Œπ) (hi : c.prev j = i)
    [K.HasHomology j] [L.HasHomology j]
    (h‚ÇÅ : IsIso (cyclesMap œÜ j)) (h‚ÇÇ : Epi (œÜ.f i)) :
    IsIso (homologyMap œÜ j) := by
  subst hi
  exact ShortComplex.isIso_homologyMap_of_isIso_cyclesMap_of_epi _ h‚ÇÅ h‚ÇÇ

lemma isIso_homologyMap_of_isIso_opcyclesMap_of_mono (i j : Œπ) (hj : c.next i = j)
    [K.HasHomology i] [L.HasHomology i]
    (h‚ÇÅ : IsIso (opcyclesMap œÜ i)) (h‚ÇÇ : Mono (œÜ.f j)) :
    IsIso (homologyMap œÜ i) := by
  subst hj
  exact ShortComplex.isIso_homologyMap_of_isIso_opcyclesMap_of_mono _ h‚ÇÅ h‚ÇÇ

lemma isZero_homology_of_isZero (i : Œπ) (hi : IsZero (K.X i)) [K.HasHomology i]:
    IsZero (K.homology i) :=
  ShortComplex.isZero_homology_of_isZero_X‚ÇÇ _ (by exact hi)

end HomologicalComplex

section

open HomologicalComplex CategoryTheory

variable {C : Type _} [Category C] [Preadditive C] {Œπ : Type _} {c : ComplexShape Œπ}
  [DecidableRel c.Rel] {K L : HomologicalComplex C c} {f g : K ‚ü∂ L}

noncomputable def Homotopy.toShortComplex (ho : Homotopy f g) (i : Œπ) :
    ShortComplex.Homotopy ((shortComplexFunctor C c i).map f)
      ((shortComplexFunctor C c i).map g) where
  h‚ÇÄ :=
    if c.Rel (c.prev i) i
    then ho.hom _ (c.prev (c.prev i)) ‚â´ L.d _ _
    else f.f _ - g.f _ - K.d _ i ‚â´ ho.hom i _
  h‚ÇÅ := ho.hom _ _
  h‚ÇÇ := ho.hom _ _
  h‚ÇÉ :=
    if c.Rel i (c.next i)
    then K.d _ _ ‚â´ ho.hom (c.next (c.next i)) _
    else f.f _ - g.f _ - ho.hom _ i ‚â´ L.d _ _
  h‚ÇÄ_f := by
    split_ifs with h
    . dsimp
      simp only [assoc, d_comp_d, comp_zero]
    . dsimp
      rw [L.shape _ _ h, comp_zero]
  g_h‚ÇÉ := by
    split_ifs with h
    . dsimp
      simp
    . dsimp
      rw [K.shape _ _ h, zero_comp]
  comm‚ÇÅ := by
    dsimp
    split_ifs with h
    . rw [ho.comm (c.prev i)]
      dsimp [dFrom, dTo, fromNext, toPrev]
      rw [congr_arg (fun j => d K (c.prev i) j ‚â´ ho.hom j (c.prev i)) (c.next_eq' h)]
    . abel
  comm‚ÇÇ := ho.comm i
  comm‚ÇÉ := by
    dsimp
    split_ifs with h
    . rw [ho.comm (c.next i)]
      dsimp [dFrom, dTo, fromNext, toPrev]
      rw [congr_arg (fun j => ho.hom (c.next i) j ‚â´ L.d j (c.next i)) (c.prev_eq' h)]
    . abel

lemma Homotopy.homologyMap_eq (ho : Homotopy f g) (i : Œπ) [K.HasHomology i] [L.HasHomology i] :
    homologyMap f i = homologyMap g i :=
  ShortComplex.Homotopy.congr_homologyMap (ho.toShortComplex i)

noncomputable def HomotopyEquiv.toHomologyIso (h : HomotopyEquiv K L) (i : Œπ)
  [K.HasHomology i] [L.HasHomology i] : K.homology i ‚âÖ L.homology i where
  hom := homologyMap h.hom i
  inv := homologyMap h.inv i
  hom_inv_id := by rw [‚Üê homologyMap_comp, h.homotopyHomInvId.homologyMap_eq, homologyMap_id]
  inv_hom_id := by rw [‚Üê homologyMap_comp, h.homotopyInvHomId.homologyMap_eq, homologyMap_id]

namespace HomologicalComplex

variable (œÜ œà : K ‚ü∂ L) (i : Œπ) [K.HasHomology i] [L.HasHomology i]

@[simp]
lemma homologyMap_neg : homologyMap (-œÜ) i = -homologyMap œÜ i := by
  dsimp [homologyMap]
  rw [‚Üê ShortComplex.homologyMap_neg]
  rfl

@[simp]
lemma homologyMap_add : homologyMap (œÜ + œà) i = homologyMap œÜ i + homologyMap œà i := by
  dsimp [homologyMap]
  rw [‚Üê ShortComplex.homologyMap_add]
  rfl

instance [CategoryWithHomology C] : (homologyFunctor C c i).Additive where

variable (C c)

def qis [CategoryWithHomology C] : MorphismProperty (HomologicalComplex C c) :=
  fun _ _ f => ‚àÄ (i : Œπ), IsIso (homologyMap f i)

lemma homotopyEquivalences_subset_qis [CategoryWithHomology C] :
    homotopyEquivalences C c ‚äÜ qis C c := by
  rintro X Y _ ‚ü®e, rfl‚ü© i
  exact IsIso.of_iso (e.toHomologyIso i)

end HomologicalComplex

end

section

variable {C : Type _} [Category C] [HasZeroMorphisms C]

namespace HomologicalComplex

variable {Œπ : Type _} {c : ComplexShape Œπ}
  {K L : HomologicalComplex C c} {f g : K ‚ü∂ L}

section single

variable [HasZeroObject C] [DecidableEq Œπ] (c i)

instance (A : C) (j : Œπ): ((single C c i).obj A).HasHomology j :=
  ‚ü®‚ü®ShortComplex.HomologyData.ofZeros _ rfl rfl‚ü©‚ü©

instance (A : C) (j : Œπ) : ((single C c i).obj A).HasHomology j :=
  inferInstance

noncomputable def singleHomologyIso (A : C) : ((single C c i).obj A).homology i ‚âÖ A :=
  (ShortComplex.HomologyData.ofZeros (sc ((single C c i).obj A) i) rfl rfl).left.homologyIso ‚â™‚â´
    singleObjXSelf C c i A

@[reassoc (attr := simp)]
lemma singleHomologyIso_hom_naturality {A B : C} (f : A ‚ü∂ B) :
    homologyMap ((single C c i).map f) i ‚â´ (singleHomologyIso c i B).hom =
      (singleHomologyIso c i A).hom ‚â´ f := by
  dsimp only [singleHomologyIso, Iso.trans, homologyMap]
  simp [(ShortComplex.HomologyMapData.ofZeros
    ((shortComplexFunctor C c i).map ((single C c i).map f)) rfl rfl rfl rfl).left.homologyMap_eq]

variable (C)

@[simps!]
noncomputable def singleCompHomologyFunctorIso [CategoryWithHomology C] :
    single C c i ‚ãô homologyFunctor C c i ‚âÖ ùü≠ C :=
  NatIso.ofComponents (singleHomologyIso c i) (by aesop_cat)

lemma single_exactAt (A : C) (i j : Œπ) (hij : j ‚â† i) :
    ((single C c i).obj A).ExactAt j := by
  rw [exactAt_iff, (ShortComplex.LeftHomologyData.ofZeros
    (sc ((single C c i).obj A) j) rfl rfl).exact_iff]
  dsimp
  rw [if_neg hij]
  exact Limits.isZero_zero C

end single

end HomologicalComplex

namespace ChainComplex

section

variable [HasZeroObject C]

instance single‚ÇÄ_obj_hasHomology (X : C) (j : ‚Ñï) :
    ((single‚ÇÄ C).obj X).HasHomology j :=
  ShortComplex.hasHomology_of_zeros _ _ _

lemma single‚ÇÄ_exactAt (X : C) (j : ‚Ñï) :
    ((single‚ÇÄ C).obj X).ExactAt j.succ := by
  rw [HomologicalComplex.exactAt_iff, (ShortComplex.LeftHomologyData.ofZeros
    (((single‚ÇÄ C).obj X).sc j.succ) rfl rfl).exact_iff]
  dsimp
  exact Limits.isZero_zero C

@[simps!]
noncomputable def homologyDataSingle‚ÇÄObj (X : C) : (((single‚ÇÄ C).obj X).sc 0).HomologyData :=
  ShortComplex.HomologyData.ofZeros _ rfl rfl

noncomputable def single‚ÇÄHomology‚ÇÄIso (X : C) : ((single‚ÇÄ C).obj X).homology 0 ‚âÖ X :=
  (homologyDataSingle‚ÇÄObj X).left.homologyIso

lemma single‚ÇÄHomologyIso_eq' (X : C) :
    single‚ÇÄHomology‚ÇÄIso X = (homologyDataSingle‚ÇÄObj X).right.homologyIso := by
  ext
  simp [single‚ÇÄHomology‚ÇÄIso,
    (homologyDataSingle‚ÇÄObj X).right_homologyIso_eq_left_homologyIso_trans]

noncomputable def single‚ÇÄCycles‚ÇÄIso (X : C) : ((single‚ÇÄ C).obj X).cycles 0 ‚âÖ X :=
  (homologyDataSingle‚ÇÄObj X).left.cyclesIso

noncomputable def single‚ÇÄOpcycles‚ÇÄIso (X : C) : ((single‚ÇÄ C).obj X).opcycles 0 ‚âÖ X :=
  (homologyDataSingle‚ÇÄObj X).right.opcyclesIso

@[reassoc (attr := simp)]
lemma single‚ÇÄCycles‚ÇÄIso_inv_comp_iCycles (X : C) :
  (single‚ÇÄCycles‚ÇÄIso X).inv ‚â´ ((single‚ÇÄ C).obj X).iCycles 0 = ùüô _ :=
  (homologyDataSingle‚ÇÄObj X).left.cyclesIso_inv_comp_iCycles

@[reassoc (attr := simp)]
lemma single‚ÇÄ_homologyœÄ_comp_single‚ÇÄHomology‚ÇÄIso_hom (X : C) :
    ((single‚ÇÄ C).obj X).homologyœÄ 0 ‚â´ (single‚ÇÄHomology‚ÇÄIso X).hom =
      (single‚ÇÄCycles‚ÇÄIso X).hom :=
    ((homologyDataSingle‚ÇÄObj X).left.homologyœÄ_comp_homologyIso_hom).trans (comp_id _)

@[reassoc (attr := simp)]
lemma pOpcycles_comp_single‚ÇÄOpcyclesIso_hom (X : C) :
    ((ChainComplex.single‚ÇÄ C).obj X).pOpcycles 0 ‚â´ (single‚ÇÄOpcycles‚ÇÄIso X).hom = ùüô _ :=
  (homologyDataSingle‚ÇÄObj X).right.pOpcycles_comp_opcyclesIso_hom

@[reassoc (attr := simp)]
lemma single‚ÇÄHomology‚ÇÄIso_inv_comp_single‚ÇÄ_homologyŒπ (X : C) :
  (single‚ÇÄHomology‚ÇÄIso X).inv ‚â´ ((single‚ÇÄ C).obj X).homologyŒπ 0 =
    (single‚ÇÄOpcycles‚ÇÄIso X).inv := by
  rw [single‚ÇÄHomologyIso_eq']
  refine' ((homologyDataSingle‚ÇÄObj X).right.homologyIso_inv_comp_homologyŒπ).trans _
  simp
  rfl

@[reassoc (attr := simp)]
lemma single‚ÇÄCycles‚ÇÄIso_hom_naturality {A B : C} (f : A ‚ü∂ B) :
    HomologicalComplex.cyclesMap ((single‚ÇÄ C).map f) 0 ‚â´ (single‚ÇÄCycles‚ÇÄIso B).hom =
      (single‚ÇÄCycles‚ÇÄIso A).hom ‚â´ f := by
  simp only [‚Üê cancel_mono (single‚ÇÄCycles‚ÇÄIso B).inv, assoc, Iso.hom_inv_id,
    comp_id, ‚Üê cancel_mono (HomologicalComplex.iCycles _ _),
    HomologicalComplex.cyclesMap_i, single‚ÇÄ_map_f_0,
    single‚ÇÄCycles‚ÇÄIso_inv_comp_iCycles, comp_id,
    ‚Üê cancel_epi (single‚ÇÄCycles‚ÇÄIso A).inv, Iso.inv_hom_id_assoc,
    single‚ÇÄCycles‚ÇÄIso_inv_comp_iCycles_assoc]

@[reassoc (attr := simp)]
lemma single‚ÇÄHomology‚ÇÄIso_hom_naturality {A B : C} (f : A ‚ü∂ B) :
    HomologicalComplex.homologyMap ((single‚ÇÄ C).map f) 0 ‚â´ (single‚ÇÄHomology‚ÇÄIso B).hom =
      (single‚ÇÄHomology‚ÇÄIso A).hom ‚â´ f := by
  simp only [‚Üê cancel_epi (HomologicalComplex.homologyœÄ _ _),
    HomologicalComplex.homologyœÄ_naturality_assoc,
    single‚ÇÄ_homologyœÄ_comp_single‚ÇÄHomology‚ÇÄIso_hom, single‚ÇÄCycles‚ÇÄIso_hom_naturality,
    single‚ÇÄ_homologyœÄ_comp_single‚ÇÄHomology‚ÇÄIso_hom_assoc]

variable (C)

noncomputable def single‚ÇÄCompCyclesFunctor‚ÇÄIso [CategoryWithHomology C] :
    single‚ÇÄ C ‚ãô HomologicalComplex.cyclesFunctor _ _ 0 ‚âÖ ùü≠ C :=
  NatIso.ofComponents single‚ÇÄCycles‚ÇÄIso (by aesop_cat)

noncomputable def single‚ÇÄCompHomologyFunctor‚ÇÄIso [CategoryWithHomology C] :
    single‚ÇÄ C ‚ãô HomologicalComplex.homologyFunctor _ _ 0 ‚âÖ ùü≠ C :=
  NatIso.ofComponents single‚ÇÄHomology‚ÇÄIso (by aesop_cat)

end

@[simp]
lemma d_zero_eq_zero (K : ChainComplex C ‚Ñï) (i : ‚Ñï) : K.d 0 i = 0 :=
  K.shape _ _ (by dsimp; linarith)

instance isIso_homologyŒπ‚ÇÄ (K : ChainComplex C ‚Ñï) [K.HasHomology 0] :
    IsIso (K.homologyŒπ 0) :=
  ShortComplex.isIso_homologyŒπ _ (by aesop_cat)

@[simps! hom]
noncomputable def isoHomologyŒπ‚ÇÄ (K : ChainComplex C ‚Ñï) [K.HasHomology 0] :
    K.homology 0 ‚âÖ K.opcycles 0 :=
  asIso (K.homologyŒπ 0)

@[reassoc (attr := simp)]
lemma isoHomologyŒπ‚ÇÄ_hom_inv_id (K : ChainComplex C ‚Ñï) [K.HasHomology 0] :
    K.homologyŒπ 0 ‚â´ K.isoHomologyŒπ‚ÇÄ.inv = ùüô _ := K.isoHomologyŒπ‚ÇÄ.hom_inv_id

@[reassoc (attr := simp)]
lemma isoHomologyŒπ‚ÇÄ_inv_hom_id (K : ChainComplex C ‚Ñï) [K.HasHomology 0] :
    K.isoHomologyŒπ‚ÇÄ.inv ‚â´ K.homologyŒπ 0 = ùüô _ := K.isoHomologyŒπ‚ÇÄ.inv_hom_id

@[reassoc (attr := simp)]
lemma isoHomologyŒπ‚ÇÄ_inv_naturality {K L : ChainComplex C ‚Ñï} (œÜ : K ‚ü∂ L)
    [K.HasHomology 0] [L.HasHomology 0] :
    K.isoHomologyŒπ‚ÇÄ.inv ‚â´ HomologicalComplex.homologyMap œÜ 0 =
      HomologicalComplex.opcyclesMap œÜ 0 ‚â´ L.isoHomologyŒπ‚ÇÄ.inv := by
  simp only [assoc, ‚Üê cancel_mono (L.homologyŒπ 0), ‚Üê cancel_epi (K.homologyŒπ 0),
    HomologicalComplex.homologyŒπ_naturality, isoHomologyŒπ‚ÇÄ_inv_hom_id_assoc,
    isoHomologyŒπ‚ÇÄ_inv_hom_id, comp_id]

section Abelian

variable {A : Type _} [Category A] [Abelian A]

lemma isIso_descOpcycles_iff (K : ChainComplex A ‚Ñï) {X : A} (œÜ : K.X 0 ‚ü∂ X)
    [K.HasHomology 0] (hœÜ : K.d 1 0 ‚â´ œÜ = 0) :
    IsIso (K.descOpcycles œÜ 1 (by simp) hœÜ) ‚Üî
      Epi œÜ ‚àß (ShortComplex.mk _ _ hœÜ).Exact := by
  suffices ‚àÄ (i : ‚Ñï) (hx : (ComplexShape.down ‚Ñï).prev 0 = i)
    (hœÜ : K.d i 0 ‚â´ œÜ = 0), IsIso (K.descOpcycles œÜ i hx hœÜ) ‚Üî
      Epi œÜ ‚àß (ShortComplex.mk _ _ hœÜ).Exact from this 1 (by simp) hœÜ
  rintro _ rfl hœÜ
  let Œ± : K.sc 0 ‚ü∂ ShortComplex.mk (0 : X ‚ü∂ X) (0 : X ‚ü∂ X) (by simp) :=
      { œÑ‚ÇÅ := 0
        œÑ‚ÇÇ := œÜ
        œÑ‚ÇÉ := 0 }
  exact (ShortComplex.quasiIso_iff_isIso_descOpcycles Œ± (by simp) rfl rfl).symm.trans
    (ShortComplex.quasiIso_iff_of_zeros' Œ± (by simp) rfl rfl)

end Abelian


end ChainComplex

namespace CochainComplex

section

variable [HasZeroObject C]

instance single‚ÇÄ_obj_hasHomology (X : C) (j : ‚Ñï) :
    ((single‚ÇÄ C).obj X).HasHomology j :=
  ShortComplex.hasHomology_of_zeros _ _ _

lemma single‚ÇÄ_exactAt (X : C) (j : ‚Ñï) :
    ((single‚ÇÄ C).obj X).ExactAt j.succ := by
  rw [HomologicalComplex.exactAt_iff, (ShortComplex.LeftHomologyData.ofZeros
    (((single‚ÇÄ C).obj X).sc j.succ) rfl rfl).exact_iff]
  dsimp
  exact Limits.isZero_zero C

noncomputable def homologyDataSingle‚ÇÄObj (X : C) : (((single‚ÇÄ C).obj X).sc 0).HomologyData :=
  ShortComplex.HomologyData.ofZeros _ rfl rfl

noncomputable def single‚ÇÄHomology‚ÇÄIso (X : C) : ((single‚ÇÄ C).obj X).homology 0 ‚âÖ X :=
  (homologyDataSingle‚ÇÄObj X).left.homologyIso

noncomputable def single‚ÇÄCycles‚ÇÄIso (X : C) : ((single‚ÇÄ C).obj X).cycles 0 ‚âÖ X :=
  (homologyDataSingle‚ÇÄObj X).left.cyclesIso

@[reassoc (attr := simp)]
lemma single‚ÇÄCycles‚ÇÄIso_inv_comp_iCycles (X : C) :
  (single‚ÇÄCycles‚ÇÄIso X).inv ‚â´ ((single‚ÇÄ C).obj X).iCycles 0 = ùüô _ :=
  (homologyDataSingle‚ÇÄObj X).left.cyclesIso_inv_comp_iCycles

@[reassoc (attr := simp)]
lemma single‚ÇÄ_homologyœÄ_comp_single‚ÇÄHomology‚ÇÄIso_hom (X : C) :
    ((single‚ÇÄ C).obj X).homologyœÄ 0 ‚â´ (single‚ÇÄHomology‚ÇÄIso X).hom =
      (single‚ÇÄCycles‚ÇÄIso X).hom :=
    ((homologyDataSingle‚ÇÄObj X).left.homologyœÄ_comp_homologyIso_hom).trans (comp_id _)

@[reassoc (attr := simp)]
lemma single‚ÇÄCycles‚ÇÄIso_hom_naturality {A B : C} (f : A ‚ü∂ B) :
    HomologicalComplex.cyclesMap ((single‚ÇÄ C).map f) 0 ‚â´ (single‚ÇÄCycles‚ÇÄIso B).hom =
      (single‚ÇÄCycles‚ÇÄIso A).hom ‚â´ f := by
  simp only [‚Üê cancel_mono (single‚ÇÄCycles‚ÇÄIso B).inv, assoc, Iso.hom_inv_id,
    comp_id, ‚Üê cancel_mono (HomologicalComplex.iCycles _ _),
    HomologicalComplex.cyclesMap_i, single‚ÇÄ_map_f_0,
    single‚ÇÄCycles‚ÇÄIso_inv_comp_iCycles, comp_id,
    ‚Üê cancel_epi (single‚ÇÄCycles‚ÇÄIso A).inv, Iso.inv_hom_id_assoc,
    single‚ÇÄCycles‚ÇÄIso_inv_comp_iCycles_assoc]

@[reassoc (attr := simp)]
lemma single‚ÇÄHomology‚ÇÄIso_hom_naturality {A B : C} (f : A ‚ü∂ B) :
    HomologicalComplex.homologyMap ((single‚ÇÄ C).map f) 0 ‚â´ (single‚ÇÄHomology‚ÇÄIso B).hom =
      (single‚ÇÄHomology‚ÇÄIso A).hom ‚â´ f := by
  simp only [‚Üê cancel_epi (HomologicalComplex.homologyœÄ _ _),
    HomologicalComplex.homologyœÄ_naturality_assoc,
    single‚ÇÄ_homologyœÄ_comp_single‚ÇÄHomology‚ÇÄIso_hom, single‚ÇÄCycles‚ÇÄIso_hom_naturality,
    single‚ÇÄ_homologyœÄ_comp_single‚ÇÄHomology‚ÇÄIso_hom_assoc]

variable (C)

noncomputable def single‚ÇÄCompCyclesFunctor‚ÇÄIso [CategoryWithHomology C] :
    single‚ÇÄ C ‚ãô HomologicalComplex.cyclesFunctor _ _ 0 ‚âÖ ùü≠ C :=
  NatIso.ofComponents single‚ÇÄCycles‚ÇÄIso (by aesop_cat)

noncomputable def single‚ÇÄCompHomologyFunctor‚ÇÄIso [CategoryWithHomology C] :
    single‚ÇÄ C ‚ãô HomologicalComplex.homologyFunctor _ _ 0 ‚âÖ ùü≠ C :=
  NatIso.ofComponents single‚ÇÄHomology‚ÇÄIso (by aesop_cat)

end

@[simp]
lemma d_zero_eq_zero (K : CochainComplex C ‚Ñï) (i : ‚Ñï) : K.d i 0 = 0 :=
  K.shape _ _ (by dsimp; linarith)

instance isIso_homologyœÄ‚ÇÄ (K : CochainComplex C ‚Ñï) [K.HasHomology 0] :
    IsIso (K.homologyœÄ 0) :=
  ShortComplex.isIso_homologyœÄ _ (by aesop_cat)

@[simps! hom]
noncomputable def isoHomologyœÄ‚ÇÄ (K : CochainComplex C ‚Ñï) [K.HasHomology 0] :
    K.cycles 0 ‚âÖ K.homology 0 :=
  asIso (K.homologyœÄ 0)

@[reassoc (attr := simp)]
lemma isoHomologyœÄ‚ÇÄ_hom_inv_id (K : CochainComplex C ‚Ñï) [K.HasHomology 0] :
    K.homologyœÄ 0 ‚â´ K.isoHomologyœÄ‚ÇÄ.inv = ùüô _ := K.isoHomologyœÄ‚ÇÄ.hom_inv_id

@[reassoc (attr := simp)]
lemma isoHomologyœÄ‚ÇÄ_inv_hom_id (K : CochainComplex C ‚Ñï) [K.HasHomology 0] :
    K.isoHomologyœÄ‚ÇÄ.inv ‚â´ K.homologyœÄ 0 = ùüô _ := K.isoHomologyœÄ‚ÇÄ.inv_hom_id

@[reassoc (attr := simp)]
lemma isoHomologyœÄ‚ÇÄ_inv_naturality {K L : CochainComplex C ‚Ñï} (œÜ : K ‚ü∂ L)
    [K.HasHomology 0] [L.HasHomology 0] :
    HomologicalComplex.homologyMap œÜ 0 ‚â´ L.isoHomologyœÄ‚ÇÄ.inv =
      K.isoHomologyœÄ‚ÇÄ.inv ‚â´ HomologicalComplex.cyclesMap œÜ 0 := by
  simp only [‚Üê cancel_mono (L.homologyœÄ 0), ‚Üê cancel_epi (K.homologyœÄ 0),
    assoc, isoHomologyœÄ‚ÇÄ_inv_hom_id, comp_id, HomologicalComplex.homologyœÄ_naturality,
    isoHomologyœÄ‚ÇÄ_hom_inv_id_assoc]

section Abelian

variable {A : Type _} [Category A] [Abelian A]

lemma isIso_liftCycles_iff (K : CochainComplex A ‚Ñï) {X : A} (œÜ : X ‚ü∂ K.X 0)
    [K.HasHomology 0] (hœÜ : œÜ ‚â´ K.d 0 1 = 0) :
    IsIso (K.liftCycles œÜ 1 (by simp) hœÜ) ‚Üî
      Mono œÜ ‚àß (ShortComplex.mk _ _ hœÜ).Exact := by
  suffices ‚àÄ (i : ‚Ñï) (hx : (ComplexShape.up ‚Ñï).next 0 = i)
    (hœÜ : œÜ ‚â´ K.d 0 i = 0), IsIso (K.liftCycles œÜ i hx hœÜ) ‚Üî
      Mono œÜ ‚àß (ShortComplex.mk _ _ hœÜ).Exact from this 1 (by simp) hœÜ
  rintro _ rfl hœÜ
  let Œ± : ShortComplex.mk (0 : X ‚ü∂ X) (0 : X ‚ü∂ X) (by simp) ‚ü∂
    K.sc 0 :=
      { œÑ‚ÇÅ := 0
        œÑ‚ÇÇ := œÜ
        œÑ‚ÇÉ := 0 }
  exact (ShortComplex.quasiIso_iff_isIso_liftCycles Œ± rfl rfl (by simp)).symm.trans
    (ShortComplex.quasiIso_iff_of_zeros Œ± rfl rfl (by simp))

end Abelian

end CochainComplex

end

namespace HomologicalComplex

variable {C : Type _} [Category C] [Preadditive C] {Œπ : Type _} {c : ComplexShape Œπ}
  (K : HomologicalComplex C c)

def sc'OpIso (i j k : Œπ) : K.op.sc' i j k ‚âÖ (K.sc' k j i).op :=
  ShortComplex.isoMk (Iso.refl _) (Iso.refl _) (Iso.refl _)
    (by aesop_cat) (by aesop_cat)

noncomputable def scOpIso (i : Œπ) : K.op.sc i ‚âÖ (K.sc i).op := K.sc'OpIso  _ _ _

noncomputable def homologyOpIso (i : Œπ) [K.HasHomology i]
  [K.HasHomology i] [K.op.HasHomology i] :
  K.op.homology i ‚âÖ Opposite.op (K.homology i) :=
  (K.sc i).homologyOpIso

noncomputable def homologyUnopIso (K : HomologicalComplex C·µí·µñ c) (i : Œπ)
    [K.HasHomology i] [K.unop.HasHomology i] :
    Opposite.unop (K.homology i) ‚âÖ K.unop.homology i := by
  have : K.unop.op.HasHomology i := (inferInstance : K.HasHomology i)
  exact (K.unop.homologyOpIso i).unop.symm

end HomologicalComplex

namespace HomotopyCategory

variable (C : Type _) [Category C] [Preadditive C] {Œπ : Type _} (c : ComplexShape Œπ)
  [DecidableRel c.Rel] [CategoryWithHomology C]

noncomputable def homologyFunctor (i : Œπ) : HomotopyCategory C c ‚•§ C :=
  CategoryTheory.Quotient.lift _ (HomologicalComplex.homologyFunctor C c i) (by
    rintro K L f g ‚ü®h‚ü©
    exact h.homologyMap_eq i)

noncomputable def homologyFunctorFactors (i : Œπ) :
    quotient C c ‚ãô homologyFunctor C c i ‚âÖ
      HomologicalComplex.homologyFunctor C c i :=
  Quotient.lift.isLift _ _ _

-- this is to prevent any abuse of defeq
attribute [irreducible] homologyFunctor homologyFunctorFactors

instance : (homologyFunctor C c i).Additive := by
  have := Functor.additive_of_iso (homologyFunctorFactors C c i).symm
  exact Functor.additive_of_full_essSurj_comp (quotient C c) _

end HomotopyCategory
