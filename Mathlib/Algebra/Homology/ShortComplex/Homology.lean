import Mathlib.Algebra.Homology.ShortComplex.RightHomology

namespace CategoryTheory

open Category Limits

variable {C D : Type _} [Category C] [Category D]
  [HasZeroMorphisms C]
  (S : ShortComplex C) {S‚ÇÅ S‚ÇÇ S‚ÇÉ S‚ÇÑ : ShortComplex C}

namespace ShortComplex

structure HomologyData where
  left : S.LeftHomologyData
  right : S.RightHomologyData
  iso : left.H ‚âÖ right.H
  comm : left.œÄ ‚â´ iso.hom ‚â´ right.Œπ = left.i ‚â´ right.p := by aesop_cat

attribute [reassoc (attr := simp)] HomologyData.comm

variable (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.HomologyData) (h‚ÇÇ : S‚ÇÇ.HomologyData)

structure HomologyMapData :=
(left : LeftHomologyMapData œÜ h‚ÇÅ.left h‚ÇÇ.left)
(right : RightHomologyMapData œÜ h‚ÇÅ.right h‚ÇÇ.right)

namespace HomologyMapData

attribute [nolint simpNF] mk.injEq

variable {œÜ h‚ÇÅ h‚ÇÇ}

@[reassoc]
lemma comm (h : HomologyMapData œÜ h‚ÇÅ h‚ÇÇ) :
    h.left.œÜH ‚â´ h‚ÇÇ.iso.hom = h‚ÇÅ.iso.hom ‚â´ h.right.œÜH := by
  simp only [‚Üê cancel_epi h‚ÇÅ.left.œÄ, ‚Üê cancel_mono h‚ÇÇ.right.Œπ, assoc,
    LeftHomologyMapData.commœÄ_assoc, HomologyData.comm, LeftHomologyMapData.commi_assoc,
    RightHomologyMapData.commŒπ, HomologyData.comm_assoc, RightHomologyMapData.commp]

instance : Subsingleton (HomologyMapData œÜ h‚ÇÅ h‚ÇÇ) := ‚ü®by
  rintro ‚ü®left‚ÇÅ, right‚ÇÅ‚ü© ‚ü®left‚ÇÇ, right‚ÇÇ‚ü©
  simp only [mk.injEq, eq_iff_true_of_subsingleton, and_self]‚ü©

instance : Inhabited (HomologyMapData œÜ h‚ÇÅ h‚ÇÇ) :=
  ‚ü®‚ü®default, default‚ü©‚ü©

instance : Unique (HomologyMapData œÜ h‚ÇÅ h‚ÇÇ) := Unique.mk' _

variable (œÜ h‚ÇÅ h‚ÇÇ)

def some : HomologyMapData œÜ h‚ÇÅ h‚ÇÇ := default

variable {œÜ h‚ÇÅ h‚ÇÇ}

lemma congr_left_œÜH {Œ≥‚ÇÅ Œ≥‚ÇÇ : HomologyMapData œÜ h‚ÇÅ h‚ÇÇ} (eq : Œ≥‚ÇÅ = Œ≥‚ÇÇ) :
  Œ≥‚ÇÅ.left.œÜH = Œ≥‚ÇÇ.left.œÜH := by rw [eq]

end HomologyMapData

namespace HomologyData

@[simps]
def ofIsLimitKernelFork (hf : S.f = 0) (c : KernelFork S.g) (hc : IsLimit c) :
    S.HomologyData where
  left := LeftHomologyData.ofIsLimitKernelFork S hf c hc
  right := RightHomologyData.ofIsLimitKernelFork S hf c hc
  iso := Iso.refl _

@[simps]
noncomputable def ofHasKernel (hf : S.f = 0) [HasKernel S.g] :
    S.HomologyData where
  left := LeftHomologyData.ofHasKernel S hf
  right := RightHomologyData.ofHasKernel S hf
  iso := Iso.refl _

@[simps]
def ofIsColimitCokernelCofork (hg : S.g = 0) (c : CokernelCofork S.f) (hc : IsColimit c) :
    S.HomologyData where
  left := LeftHomologyData.ofIsColimitCokernelCofork S hg c hc
  right := RightHomologyData.ofIsColimitCokernelCofork S hg c hc
  iso := Iso.refl _

@[simps]
noncomputable def ofHasCokernel (hg : S.g = 0) [HasCokernel S.f] :
    S.HomologyData where
  left := LeftHomologyData.ofHasCokernel S hg
  right := RightHomologyData.ofHasCokernel S hg
  iso := Iso.refl _

@[simps]
noncomputable def ofZeros (hf : S.f = 0) (hg : S.g = 0) :
    S.HomologyData where
  left := LeftHomologyData.ofZeros S hf hg
  right := RightHomologyData.ofZeros S hf hg
  iso := Iso.refl _

@[simps]
noncomputable def ofEpiOfIsIsoOfMono (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : HomologyData S‚ÇÅ)
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] : HomologyData S‚ÇÇ where
  left := LeftHomologyData.ofEpiOfIsIsoOfMono œÜ h.left
  right := RightHomologyData.ofEpiOfIsIsoOfMono œÜ h.right
  iso := h.iso

@[simps]
noncomputable def ofEpiOfIsIsoOfMono' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : HomologyData S‚ÇÇ)
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] : HomologyData S‚ÇÅ where
  left := LeftHomologyData.ofEpiOfIsIsoOfMono' œÜ h.left
  right := RightHomologyData.ofEpiOfIsIsoOfMono' œÜ h.right
  iso := h.iso

@[simps!]
noncomputable def ofIso (e : S‚ÇÅ ‚âÖ S‚ÇÇ) (h : HomologyData S‚ÇÅ) :=
  h.ofEpiOfIsIsoOfMono e.hom

variable {S}

@[simps]
def op (h : S.HomologyData) : S.op.HomologyData where
  left := h.right.op
  right := h.left.op
  iso := h.iso.op
  comm := Quiver.Hom.unop_inj (by simp)

@[simps]
def unop {S : ShortComplex C·µí·µñ} (h : S.HomologyData) : S.unop.HomologyData where
  left := h.right.unop
  right := h.left.unop
  iso := h.iso.unop
  comm := Quiver.Hom.op_inj (by simp)

end HomologyData

class HasHomology : Prop where
  condition : Nonempty S.HomologyData

noncomputable def homologyData [HasHomology S] :
  S.HomologyData := HasHomology.condition.some

variable {S}

lemma HasHomology.mk' (h : S.HomologyData) : HasHomology S :=
  ‚ü®Nonempty.intro h‚ü©

instance [HasHomology S] : HasHomology S.op :=
  HasHomology.mk' S.homologyData.op

instance hasLeftHomology_of_hasHomology [S.HasHomology] : S.HasLeftHomology :=
  HasLeftHomology.mk' S.homologyData.left

instance hasRightHomology_of_hasHomology [S.HasHomology] : S.HasRightHomology :=
  HasRightHomology.mk' S.homologyData.right

instance hasHomology_of_hasCokernel {X Y : C} (f : X ‚ü∂ Y) (Z : C) [HasCokernel f] :
    (ShortComplex.mk f (0 : Y ‚ü∂ Z) comp_zero).HasHomology :=
  HasHomology.mk' (HomologyData.ofHasCokernel _ rfl)

instance hasHomology_of_hasKernel {Y Z : C} (g : Y ‚ü∂ Z) (X : C) [HasKernel g] :
    (ShortComplex.mk (0 : X ‚ü∂ Y) g zero_comp).HasHomology :=
  HasHomology.mk' (HomologyData.ofHasKernel _ rfl)

instance hasHomology_of_zeros (X Y Z : C) :
    (ShortComplex.mk (0 : X ‚ü∂ Y) (0 : Y ‚ü∂ Z) zero_comp).HasHomology :=
  HasHomology.mk' (HomologyData.ofZeros _ rfl rfl)

lemma hasHomology_of_epi_of_isIso_of_mono (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [HasHomology S‚ÇÅ]
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] : HasHomology S‚ÇÇ :=
  HasHomology.mk' (HomologyData.ofEpiOfIsIsoOfMono œÜ S‚ÇÅ.homologyData)

lemma hasHomology_of_epi_of_isIso_of_mono' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [HasHomology S‚ÇÇ]
    [Epi œÜ.œÑ‚ÇÅ] [IsIso œÜ.œÑ‚ÇÇ] [Mono œÜ.œÑ‚ÇÉ] : HasHomology S‚ÇÅ :=
  HasHomology.mk' (HomologyData.ofEpiOfIsIsoOfMono' œÜ S‚ÇÇ.homologyData)

lemma hasHomology_of_iso (e : S‚ÇÅ ‚âÖ S‚ÇÇ) [HasHomology S‚ÇÅ] : HasHomology S‚ÇÇ :=
  HasHomology.mk' (HomologyData.ofIso e S‚ÇÅ.homologyData)

namespace HomologyMapData

@[simps]
def id (h : S.HomologyData) : HomologyMapData (ùüô S) h h where
  left := LeftHomologyMapData.id h.left
  right := RightHomologyMapData.id h.right

@[simps]
def zero (h‚ÇÅ : S‚ÇÅ.HomologyData) (h‚ÇÇ : S‚ÇÇ.HomologyData) :
  HomologyMapData 0 h‚ÇÅ h‚ÇÇ where
  left := LeftHomologyMapData.zero h‚ÇÅ.left h‚ÇÇ.left
  right := RightHomologyMapData.zero h‚ÇÅ.right h‚ÇÇ.right

@[simps]
def comp {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {œÜ' : S‚ÇÇ ‚ü∂ S‚ÇÉ} {h‚ÇÅ : S‚ÇÅ.HomologyData}
    {h‚ÇÇ : S‚ÇÇ.HomologyData} {h‚ÇÉ : S‚ÇÉ.HomologyData}
    (œà : HomologyMapData œÜ h‚ÇÅ h‚ÇÇ) (œà' : HomologyMapData œÜ' h‚ÇÇ h‚ÇÉ) :
    HomologyMapData (œÜ ‚â´ œÜ') h‚ÇÅ h‚ÇÉ where
  left := œà.left.comp œà'.left
  right := œà.right.comp œà'.right

@[simps]
def op {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {h‚ÇÅ : S‚ÇÅ.HomologyData} {h‚ÇÇ : S‚ÇÇ.HomologyData}
    (œà : HomologyMapData œÜ h‚ÇÅ h‚ÇÇ) :
    HomologyMapData (opMap œÜ) h‚ÇÇ.op h‚ÇÅ.op where
  left := œà.right.op
  right := œà.left.op

@[simps]
def unop {S‚ÇÅ S‚ÇÇ : ShortComplex C·µí·µñ} {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ}
    {h‚ÇÅ : S‚ÇÅ.HomologyData} {h‚ÇÇ : S‚ÇÇ.HomologyData}
    (œà : HomologyMapData œÜ h‚ÇÅ h‚ÇÇ) :
    HomologyMapData (unopMap œÜ) h‚ÇÇ.unop h‚ÇÅ.unop where
  left := œà.right.unop
  right := œà.left.unop

@[simps]
def ofZeros (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (hf‚ÇÅ : S‚ÇÅ.f = 0) (hg‚ÇÅ : S‚ÇÅ.g = 0) (hf‚ÇÇ : S‚ÇÇ.f = 0) (hg‚ÇÇ : S‚ÇÇ.g = 0) :
    HomologyMapData œÜ (HomologyData.ofZeros S‚ÇÅ hf‚ÇÅ hg‚ÇÅ) (HomologyData.ofZeros S‚ÇÇ hf‚ÇÇ hg‚ÇÇ) where
  left := LeftHomologyMapData.ofZeros œÜ hf‚ÇÅ hg‚ÇÅ hf‚ÇÇ hg‚ÇÇ
  right := RightHomologyMapData.ofZeros œÜ hf‚ÇÅ hg‚ÇÅ hf‚ÇÇ hg‚ÇÇ

@[simps]
def ofIsColimitCokernelCofork (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ)
  (hg‚ÇÅ : S‚ÇÅ.g = 0) (c‚ÇÅ : CokernelCofork S‚ÇÅ.f) (hc‚ÇÅ : IsColimit c‚ÇÅ)
  (hg‚ÇÇ : S‚ÇÇ.g = 0) (c‚ÇÇ : CokernelCofork S‚ÇÇ.f) (hc‚ÇÇ : IsColimit c‚ÇÇ) (f : c‚ÇÅ.pt ‚ü∂ c‚ÇÇ.pt)
  (comm : œÜ.œÑ‚ÇÇ ‚â´ c‚ÇÇ.œÄ = c‚ÇÅ.œÄ ‚â´ f) :
  HomologyMapData œÜ (HomologyData.ofIsColimitCokernelCofork S‚ÇÅ hg‚ÇÅ c‚ÇÅ hc‚ÇÅ)
    (HomologyData.ofIsColimitCokernelCofork S‚ÇÇ hg‚ÇÇ c‚ÇÇ hc‚ÇÇ) where
  left := LeftHomologyMapData.ofIsColimitCokernelCofork œÜ hg‚ÇÅ c‚ÇÅ hc‚ÇÅ hg‚ÇÇ c‚ÇÇ hc‚ÇÇ f comm
  right := RightHomologyMapData.ofIsColimitCokernelCofork œÜ hg‚ÇÅ c‚ÇÅ hc‚ÇÅ hg‚ÇÇ c‚ÇÇ hc‚ÇÇ f comm

@[simps]
def ofIsLimitKernelFork (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ)
  (hf‚ÇÅ : S‚ÇÅ.f = 0) (c‚ÇÅ : KernelFork S‚ÇÅ.g) (hc‚ÇÅ : IsLimit c‚ÇÅ)
  (hf‚ÇÇ : S‚ÇÇ.f = 0) (c‚ÇÇ : KernelFork S‚ÇÇ.g) (hc‚ÇÇ : IsLimit c‚ÇÇ) (f : c‚ÇÅ.pt ‚ü∂ c‚ÇÇ.pt)
  (comm : c‚ÇÅ.Œπ ‚â´ œÜ.œÑ‚ÇÇ = f ‚â´ c‚ÇÇ.Œπ) :
  HomologyMapData œÜ (HomologyData.ofIsLimitKernelFork S‚ÇÅ hf‚ÇÅ c‚ÇÅ hc‚ÇÅ)
    (HomologyData.ofIsLimitKernelFork S‚ÇÇ hf‚ÇÇ c‚ÇÇ hc‚ÇÇ) where
  left := LeftHomologyMapData.ofIsLimitKernelFork œÜ hf‚ÇÅ c‚ÇÅ hc‚ÇÅ hf‚ÇÇ c‚ÇÇ hc‚ÇÇ f comm
  right := RightHomologyMapData.ofIsLimitKernelFork œÜ hf‚ÇÅ c‚ÇÅ hc‚ÇÅ hf‚ÇÇ c‚ÇÇ hc‚ÇÇ f comm

def compatibilityOfZerosOfIsColimitCokernelCofork (hf : S.f = 0) (hg : S.g = 0)
  (c : CokernelCofork S.f) (hc : IsColimit c) :
  HomologyMapData (ùüô S) (HomologyData.ofZeros S hf hg)
    (HomologyData.ofIsColimitCokernelCofork S hg c hc) where
  left := LeftHomologyMapData.compatibilityOfZerosOfIsColimitCokernelCofork S hf hg c hc
  right := RightHomologyMapData.compatibilityOfZerosOfIsColimitCokernelCofork S hf hg c hc

@[simps]
def compatibilityOfZerosOfIsLimitKernelFork (hf : S.f = 0) (hg : S.g = 0)
  (c : KernelFork S.g) (hc : IsLimit c) :
  HomologyMapData (ùüô S)
    (HomologyData.ofIsLimitKernelFork S hf c hc)
    (HomologyData.ofZeros S hf hg) where
  left := LeftHomologyMapData.compatibilityOfZerosOfIsLimitKernelFork S hf hg c hc
  right := RightHomologyMapData.compatibilityOfZerosOfIsLimitKernelFork S hf hg c hc

end HomologyMapData

variable (S)

noncomputable def homology [HasHomology S] : C := S.homologyData.left.H

noncomputable def leftHomologyIso [S.HasHomology] : S.leftHomology ‚âÖ S.homology :=
  leftHomologyMapIso' (Iso.refl _) _ _

noncomputable def rightHomologyIso [S.HasHomology] : S.rightHomology ‚âÖ S.homology :=
  rightHomologyMapIso' (Iso.refl _) _ _ ‚â™‚â´ S.homologyData.iso.symm

variable {S}

noncomputable def LeftHomologyData.homologyIso (h : S.LeftHomologyData) [S.HasHomology] :
    S.homology ‚âÖ h.H := S.leftHomologyIso.symm ‚â™‚â´ h.leftHomologyIso

noncomputable def RightHomologyData.homologyIso (h : S.RightHomologyData) [S.HasHomology] :
    S.homology ‚âÖ h.H := S.rightHomologyIso.symm ‚â™‚â´ h.rightHomologyIso

def homologyMap' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.HomologyData) (h‚ÇÇ : S‚ÇÇ.HomologyData) :
  h‚ÇÅ.left.H ‚ü∂ h‚ÇÇ.left.H := leftHomologyMap' œÜ _ _

noncomputable def homologyMap (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [HasHomology S‚ÇÅ] [HasHomology S‚ÇÇ] :
    S‚ÇÅ.homology ‚ü∂ S‚ÇÇ.homology :=
  homologyMap' œÜ _ _

namespace HomologyMapData

variable {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {h‚ÇÅ : S‚ÇÅ.HomologyData} {h‚ÇÇ : S‚ÇÇ.HomologyData}
  (Œ≥ : HomologyMapData œÜ h‚ÇÅ h‚ÇÇ)

lemma homologyMap'_eq : homologyMap' œÜ h‚ÇÅ h‚ÇÇ = Œ≥.left.œÜH :=
  LeftHomologyMapData.congr_œÜH (Subsingleton.elim _ _)

lemma cyclesMap'_eq : cyclesMap' œÜ h‚ÇÅ.left h‚ÇÇ.left = Œ≥.left.œÜK :=
  LeftHomologyMapData.congr_œÜK (Subsingleton.elim _ _)

lemma cyclesCoMap'_eq : cyclesCoMap' œÜ h‚ÇÅ.right h‚ÇÇ.right = Œ≥.right.œÜQ :=
  RightHomologyMapData.congr_œÜQ (Subsingleton.elim _ _)

end HomologyMapData

namespace LeftHomologyMapData

variable {h‚ÇÅ : S‚ÇÅ.LeftHomologyData} {h‚ÇÇ : S‚ÇÇ.LeftHomologyData}
  (Œ≥ : LeftHomologyMapData œÜ h‚ÇÅ h‚ÇÇ) [S‚ÇÅ.HasHomology] [S‚ÇÇ.HasHomology]

lemma homologyMap_eq :
    homologyMap œÜ = h‚ÇÅ.homologyIso.hom ‚â´ Œ≥.œÜH ‚â´ h‚ÇÇ.homologyIso.inv := by
  dsimp only [homologyMap, LeftHomologyData.homologyIso,
    Iso.trans, Iso.symm, leftHomologyIso, LeftHomologyData.leftHomologyIso,
    leftHomologyMapIso', homologyMap', Iso.refl]
  simp only [‚Üê Œ≥.leftHomologyMap'_eq, ‚Üê leftHomologyMap'_comp, id_comp, comp_id]

lemma homologyMap_comm :
    homologyMap œÜ ‚â´ h‚ÇÇ.homologyIso.hom = h‚ÇÅ.homologyIso.hom ‚â´ Œ≥.œÜH := by
  simp only [Œ≥.homologyMap_eq, assoc, Iso.inv_hom_id, comp_id]

end LeftHomologyMapData

namespace RightHomologyMapData

variable {h‚ÇÅ : S‚ÇÅ.RightHomologyData} {h‚ÇÇ : S‚ÇÇ.RightHomologyData}
  (Œ≥ : RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ) [S‚ÇÅ.HasHomology] [S‚ÇÇ.HasHomology]

lemma homologyMap_eq :
    homologyMap œÜ = h‚ÇÅ.homologyIso.hom ‚â´ Œ≥.œÜH ‚â´ h‚ÇÇ.homologyIso.inv := by
  dsimp only [homologyMap, homologyMap', RightHomologyData.homologyIso, Iso.symm, Iso.trans,
    Iso.refl, rightHomologyIso, rightHomologyMapIso', RightHomologyData.rightHomologyIso]
  have Œ≥' : HomologyMapData œÜ S‚ÇÅ.homologyData S‚ÇÇ.homologyData := default
  simp only [‚Üê Œ≥.rightHomologyMap'_eq, assoc, ‚Üê rightHomologyMap'_comp_assoc,
    id_comp, comp_id, Œ≥'.left.leftHomologyMap'_eq, Œ≥'.right.rightHomologyMap'_eq, ‚Üê Œ≥'.comm_assoc,
    Iso.hom_inv_id]

lemma homologyMap_comm :
    homologyMap œÜ ‚â´ h‚ÇÇ.homologyIso.hom = h‚ÇÅ.homologyIso.hom ‚â´ Œ≥.œÜH := by
  simp only [Œ≥.homologyMap_eq, assoc, Iso.inv_hom_id, comp_id]

end RightHomologyMapData

@[simp]
lemma homologyMap'_id (h : S.HomologyData) :
    homologyMap' (ùüô S) h h = ùüô _ :=
  (HomologyMapData.id h).homologyMap'_eq

variable (S)

@[simp]
lemma homologyMap_id [HasHomology S] :
    homologyMap (ùüô S) = ùüô _ :=
  homologyMap'_id _

@[simp]
lemma homologyMap'_zero (h‚ÇÅ : S‚ÇÅ.HomologyData) (h‚ÇÇ : S‚ÇÇ.HomologyData) :
    homologyMap' 0 h‚ÇÅ h‚ÇÇ = 0 :=
  (HomologyMapData.zero h‚ÇÅ h‚ÇÇ).homologyMap'_eq

variable (S‚ÇÅ S‚ÇÇ)

@[simp]
lemma homologyMap_zero [S‚ÇÅ.HasHomology] [S‚ÇÇ.HasHomology] :
    homologyMap (0 : S‚ÇÅ ‚ü∂ S‚ÇÇ) = 0 :=
  homologyMap'_zero _ _

variable {S‚ÇÅ S‚ÇÇ}

lemma homologyMap'_comp (œÜ‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ)
    (h‚ÇÅ : S‚ÇÅ.HomologyData) (h‚ÇÇ : S‚ÇÇ.HomologyData) (h‚ÇÉ : S‚ÇÉ.HomologyData) :
    homologyMap' (œÜ‚ÇÅ ‚â´ œÜ‚ÇÇ) h‚ÇÅ h‚ÇÉ = homologyMap' œÜ‚ÇÅ h‚ÇÅ h‚ÇÇ ‚â´
      homologyMap' œÜ‚ÇÇ h‚ÇÇ h‚ÇÉ :=
  leftHomologyMap'_comp _ _ _ _ _

@[simp]
lemma homologyMap_comp [HasHomology S‚ÇÅ] [HasHomology S‚ÇÇ] [HasHomology S‚ÇÉ]
    (œÜ‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ) :
    homologyMap (œÜ‚ÇÅ ‚â´ œÜ‚ÇÇ) = homologyMap œÜ‚ÇÅ ‚â´ homologyMap œÜ‚ÇÇ :=
homologyMap'_comp _ _ _ _ _

@[simps]
def homologyMapIso' (e : S‚ÇÅ ‚âÖ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.HomologyData)
    (h‚ÇÇ : S‚ÇÇ.HomologyData) : h‚ÇÅ.left.H ‚âÖ h‚ÇÇ.left.H where
  hom := homologyMap' e.hom h‚ÇÅ h‚ÇÇ
  inv := homologyMap' e.inv h‚ÇÇ h‚ÇÅ
  hom_inv_id := by rw [‚Üê homologyMap'_comp, e.hom_inv_id, homologyMap'_id]
  inv_hom_id := by rw [‚Üê homologyMap'_comp, e.inv_hom_id, homologyMap'_id]

instance isIso_homologyMap'_of_isIso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [IsIso œÜ]
    (h‚ÇÅ : S‚ÇÅ.HomologyData) (h‚ÇÇ : S‚ÇÇ.HomologyData) :
    IsIso (homologyMap' œÜ h‚ÇÅ h‚ÇÇ) :=
  (inferInstance : IsIso (homologyMapIso' (asIso œÜ) h‚ÇÅ h‚ÇÇ).hom)

@[simps]
noncomputable def homologyMapIso (e : S‚ÇÅ ‚âÖ S‚ÇÇ) [S‚ÇÅ.HasHomology]
  [S‚ÇÇ.HasHomology] : S‚ÇÅ.homology ‚âÖ S‚ÇÇ.homology where
  hom := homologyMap e.hom
  inv := homologyMap e.inv
  hom_inv_id := by rw [‚Üê homologyMap_comp, e.hom_inv_id, homologyMap_id]
  inv_hom_id := by rw [‚Üê homologyMap_comp, e.inv_hom_id, homologyMap_id]

instance isIso_homologyMap_of_iso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [IsIso œÜ] [S‚ÇÅ.HasHomology]
    [S‚ÇÇ.HasHomology] :
    IsIso (homologyMap œÜ) :=
  (inferInstance : IsIso (homologyMapIso (asIso œÜ)).hom)

variable {S}

def leftRightHomologyComparison' (h‚ÇÅ : S.LeftHomologyData) (h‚ÇÇ : S.RightHomologyData) :
    h‚ÇÅ.H ‚ü∂ h‚ÇÇ.H :=
  h‚ÇÇ.liftH (h‚ÇÅ.descH (h‚ÇÅ.i ‚â´ h‚ÇÇ.p) (by simp))
    (by rw [‚Üê cancel_epi h‚ÇÅ.œÄ, LeftHomologyData.œÄ_descH_assoc, assoc,
      RightHomologyData.p_g', LeftHomologyData.wi, comp_zero])

lemma leftRightHomologyComparison'_eq‚ÇÅ (h‚ÇÅ : S.LeftHomologyData) (h‚ÇÇ : S.RightHomologyData) :
    leftRightHomologyComparison' h‚ÇÅ h‚ÇÇ =
  h‚ÇÇ.liftH (h‚ÇÅ.descH (h‚ÇÅ.i ‚â´ h‚ÇÇ.p) (by simp))
    (by rw [‚Üê cancel_epi h‚ÇÅ.œÄ, LeftHomologyData.œÄ_descH_assoc, assoc,
      RightHomologyData.p_g', LeftHomologyData.wi, comp_zero]) := rfl

@[simp, reassoc]
lemma œÄ_leftRightHomologyComparison'_Œπ (h‚ÇÅ : S.LeftHomologyData) (h‚ÇÇ : S.RightHomologyData) :
    h‚ÇÅ.œÄ ‚â´ leftRightHomologyComparison' h‚ÇÅ h‚ÇÇ ‚â´ h‚ÇÇ.Œπ = h‚ÇÅ.i ‚â´ h‚ÇÇ.p :=
  by simp only [leftRightHomologyComparison'_eq‚ÇÅ,
    RightHomologyData.liftH_Œπ, LeftHomologyData.œÄ_descH]

lemma leftRightHomologyComparison'_eq‚ÇÇ (h‚ÇÅ : S.LeftHomologyData) (h‚ÇÇ : S.RightHomologyData) :
    leftRightHomologyComparison' h‚ÇÅ h‚ÇÇ =
  h‚ÇÅ.descH (h‚ÇÇ.liftH (h‚ÇÅ.i ‚â´ h‚ÇÇ.p) (by simp))
    (by rw [‚Üê cancel_mono h‚ÇÇ.Œπ, assoc, RightHomologyData.liftH_Œπ,
      LeftHomologyData.f'_i_assoc, RightHomologyData.wp, zero_comp]) := by
  simp only [‚Üê cancel_mono h‚ÇÇ.Œπ, ‚Üê cancel_epi h‚ÇÅ.œÄ, œÄ_leftRightHomologyComparison'_Œπ,
    LeftHomologyData.œÄ_descH_assoc, RightHomologyData.liftH_Œπ]

variable (S)

noncomputable def leftRightHomologyComparison [S.HasLeftHomology] [S.HasRightHomology] :
    S.leftHomology ‚ü∂ S.rightHomology :=
  leftRightHomologyComparison' _ _

@[simp, reassoc]
lemma œÄ_leftRightHomologyComparison_Œπ [S.HasLeftHomology] [S.HasRightHomology] :
    S.leftHomologyœÄ ‚â´ S.leftRightHomologyComparison ‚â´ S.rightHomologyŒπ =
      S.iCycles ‚â´ S.pCyclesCo :=
  œÄ_leftRightHomologyComparison'_Œπ _ _

@[reassoc]
lemma leftRightHomologyComparison'_naturality (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : S‚ÇÅ.LeftHomologyData)
  (h‚ÇÇ : S‚ÇÅ.RightHomologyData) (h‚ÇÅ' : S‚ÇÇ.LeftHomologyData) (h‚ÇÇ' : S‚ÇÇ.RightHomologyData) :
  leftHomologyMap' œÜ h‚ÇÅ h‚ÇÅ' ‚â´ leftRightHomologyComparison' h‚ÇÅ' h‚ÇÇ' =
    leftRightHomologyComparison' h‚ÇÅ h‚ÇÇ ‚â´ rightHomologyMap' œÜ h‚ÇÇ h‚ÇÇ' :=
by simp only [‚Üê cancel_epi h‚ÇÅ.œÄ, ‚Üê cancel_mono h‚ÇÇ'.Œπ, assoc,
    leftHomologyœÄ_naturality'_assoc, rightHomologyŒπ_naturality',
    œÄ_leftRightHomologyComparison'_Œπ,
    œÄ_leftRightHomologyComparison'_Œπ_assoc,
    cyclesMap'_i_assoc, p_cyclesCoMap']

variable {S}

lemma leftRightHomologyComparison'_compatibility (h‚ÇÅ h‚ÇÅ' : S.LeftHomologyData)
    (h‚ÇÇ h‚ÇÇ' : S.RightHomologyData) :
    leftRightHomologyComparison' h‚ÇÅ h‚ÇÇ = leftHomologyMap' (ùüô S) h‚ÇÅ h‚ÇÅ' ‚â´
      leftRightHomologyComparison' h‚ÇÅ' h‚ÇÇ' ‚â´ rightHomologyMap' (ùüô S) _ _ :=
by rw [leftRightHomologyComparison'_naturality_assoc (ùüô S) h‚ÇÅ h‚ÇÇ h‚ÇÅ' h‚ÇÇ',
    ‚Üê rightHomologyMap'_comp, comp_id, rightHomologyMap'_id, comp_id]

lemma leftRightHomologyComparison_eq [S.HasLeftHomology] [S.HasRightHomology]
    (h‚ÇÅ : S.LeftHomologyData) (h‚ÇÇ : S.RightHomologyData) :
    S.leftRightHomologyComparison = h‚ÇÅ.leftHomologyIso.hom ‚â´
      leftRightHomologyComparison' h‚ÇÅ h‚ÇÇ ‚â´ h‚ÇÇ.rightHomologyIso.inv :=
leftRightHomologyComparison'_compatibility _ _ _ _

@[simp]
lemma HomologyData.leftRightHomologyComparison'_eq (h : S.HomologyData) :
    leftRightHomologyComparison' h.left h.right = h.iso.hom := by
  simp only [‚Üêcancel_epi h.left.œÄ, ‚Üê cancel_mono h.right.Œπ,
    œÄ_leftRightHomologyComparison'_Œπ, HomologyData.comm]

instance isIso_leftRightHomologyComparison'_of_homologyData (h : S.HomologyData) :
  IsIso (leftRightHomologyComparison' h.left h.right) := by
    rw [h.leftRightHomologyComparison'_eq]
    infer_instance

instance isIso_leftRightHomologyComparison' [S.HasHomology]
    (h‚ÇÅ : S.LeftHomologyData) (h‚ÇÇ : S.RightHomologyData) :
    IsIso (leftRightHomologyComparison' h‚ÇÅ h‚ÇÇ) := by
  rw [leftRightHomologyComparison'_compatibility h‚ÇÅ S.homologyData.left h‚ÇÇ
    S.homologyData.right]
  infer_instance

instance isIso_leftRightHomologyComparison [S.HasHomology] :
    IsIso S.leftRightHomologyComparison := by
  dsimp only [leftRightHomologyComparison]
  infer_instance

namespace HomologyData

@[simps]
noncomputable def ofIsIsoLeftRightHomologyComparison'
    (h‚ÇÅ : S.LeftHomologyData) (h‚ÇÇ : S.RightHomologyData)
    [IsIso (leftRightHomologyComparison' h‚ÇÅ h‚ÇÇ)] :
    S.HomologyData where
  left := h‚ÇÅ
  right := h‚ÇÇ
  iso := asIso (leftRightHomologyComparison' h‚ÇÅ h‚ÇÇ)

end HomologyData

end ShortComplex

variable (C)

class CategoryWithHomology : Prop where
  hasHomology : ‚àÄ (S : ShortComplex C), S.HasHomology

attribute [instance] CategoryWithHomology.hasHomology

end CategoryTheory


#exit

namespace left_homology_data

lemma ext_iff {A : C} (h : S.left_homology_data) [S.has_homology] (f‚ÇÅ f‚ÇÇ : S.homology ‚ü∂ A) :
  f‚ÇÅ = f‚ÇÇ ‚Üî h.œÄ ‚â´ h.homology_iso.inv ‚â´ f‚ÇÅ = h.œÄ ‚â´ h.homology_iso.inv ‚â´ f‚ÇÇ :=
by rw [‚Üê cancel_epi h.homology_iso.inv, cancel_epi h.œÄ]

end left_homology_data





namespace right_homology_data

def homology_iso (h : S.right_homology_data) [S.has_homology] :
  S.homology ‚âÖ h.H :=
as_iso (left_right_homology_comparison' S.some_homology_data.left h)

lemma ext_iff {A : C} (h : S.right_homology_data) [S.has_homology] (f‚ÇÅ f‚ÇÇ : A ‚ü∂ S.homology) :
  f‚ÇÅ = f‚ÇÇ ‚Üî f‚ÇÅ ‚â´ h.homology_iso.hom ‚â´ h.Œπ = f‚ÇÇ ‚â´ h.homology_iso.hom ‚â´ h.Œπ :=
by simp only [‚Üê cancel_mono h.homology_iso.hom, ‚Üê cancel_mono h.Œπ, assoc]

end right_homology_data

namespace homology_data

@[simps]
def of_is_iso_left_right_homology_comparison'
  (h‚ÇÅ : S.left_homology_data) (h‚ÇÇ : S.right_homology_data)
  [is_iso (left_right_homology_comparison' h‚ÇÅ h‚ÇÇ)] :
  S.homology_data :=
{ left := h‚ÇÅ,
  right := h‚ÇÇ,
  iso := as_iso (left_right_homology_comparison' h‚ÇÅ h‚ÇÇ),
  comm := by simp only [as_iso_hom, comp_left_right_homology_comparison'_comp], }

lemma has_homology_of_is_iso_left_right_homology_comparison'
  (h‚ÇÅ : S.left_homology_data) (h‚ÇÇ : S.right_homology_data)
  [is_iso (left_right_homology_comparison' h‚ÇÅ h‚ÇÇ)] :
  S.has_homology :=
has_homology.mk' (of_is_iso_left_right_homology_comparison' h‚ÇÅ h‚ÇÇ)

lemma has_homology_of_is_iso_left_right_homology_comparison [S.has_left_homology]
  [S.has_right_homology] [h : is_iso S.left_right_homology_comparison] :
  S.has_homology :=
begin
  haveI : is_iso (left_right_homology_comparison' S.some_left_homology_data
    S.some_right_homology_data) := h,
  exact has_homology_of_is_iso_left_right_homology_comparison' S.some_left_homology_data
    S.some_right_homology_data,
end

end homology_data

@[simps]
def homology_map_data.of_epi_of_is_iso_of_mono (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : homology_data S‚ÇÅ)
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] :
    homology_map_data œÜ h (homology_data.of_epi_of_is_iso_of_mono œÜ h) :=
{ left := left_homology_map_data.of_epi_of_is_iso_of_mono œÜ h.left,
  right := right_homology_map_data.of_epi_of_is_iso_of_mono œÜ h.right, }

@[simps]
def homology_map_data.of_epi_of_is_iso_of_mono' (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h : homology_data S‚ÇÇ)
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] :
    homology_map_data œÜ (homology_data.of_epi_of_is_iso_of_mono' œÜ h) h :=
{ left := left_homology_map_data.of_epi_of_is_iso_of_mono' œÜ h.left,
  right := right_homology_map_data.of_epi_of_is_iso_of_mono' œÜ h.right, }

variable (S)

def left_homology_iso_homology [S.has_homology] :
  S.left_homology ‚âÖ S.homology :=
S.some_left_homology_data.homology_iso.symm

@[reassoc]
lemma left_homology_iso_homology_hom_naturality [S‚ÇÅ.has_homology] [S‚ÇÇ.has_homology]
  (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) :
  S‚ÇÅ.left_homology_iso_homology.hom ‚â´ homology_map œÜ =
    left_homology_map œÜ ‚â´ S‚ÇÇ.left_homology_iso_homology.hom :=
begin
  dsimp only [left_homology_iso_homology, left_homology_data.homology_iso,
    homology_map, homology_map', left_homology_map_iso', iso.symm, iso.refl,
    left_homology_map],
  rw [‚Üê left_homology_map'_comp, ‚Üê left_homology_map'_comp, id_comp, comp_id],
end

def homology_iso_right_homology [S.has_homology] :
  S.homology ‚âÖ S.right_homology :=
S.some_right_homology_data.homology_iso

variable {S}

lemma left_homology_map'_comp_iso_hom_comp_right_homology_map'
  (h : S.homology_data) (h‚ÇÅ : S.left_homology_data) (h‚ÇÇ : S.right_homology_data) :
  left_homology_map' (ùüô S) h‚ÇÅ h.left ‚â´ h.iso.hom ‚â´ right_homology_map' (ùüô S) h.right h‚ÇÇ =
    left_right_homology_comparison' h‚ÇÅ h‚ÇÇ :=
by simpa using (left_right_homology_comparison'_compatibility h‚ÇÅ h.left h‚ÇÇ h.right).symm

variable (S)

@[reassoc]
lemma left_right_homology_comparison_fac [S.has_homology] :
  S.left_right_homology_comparison =
    S.left_homology_iso_homology.hom ‚â´ S.homology_iso_right_homology.hom :=
begin
  have eq : S.some_homology_data.iso.hom ‚â´ right_homology_map' (ùüô S) _ _ =
    S.homology_iso_right_homology.hom := by simpa only [left_homology_map'_id, id_comp]
    using left_homology_map'_comp_iso_hom_comp_right_homology_map' S.some_homology_data
      S.some_homology_data.left S.some_right_homology_data,
  simpa only [eq.symm] using (left_homology_map'_comp_iso_hom_comp_right_homology_map' _ _ _).symm,
end

variable (C)
/-- We shall say that a category with homology is a category for which
all short complexes have homology. -/
class _root_.category_with_homology :=
(has_homology : ‚àÄ (S : short_complex C), S.has_homology)

@[priority 100]
instance category_with_homology.has_homology [category_with_homology C] (S : short_complex C) :
  S.has_homology := category_with_homology.has_homology S

/-- Assuming that all short complexes have homology, this is the homology functor. -/
@[simps]
def homology_functor [category_with_homology C] :
  short_complex C ‚•§ C :=
{ obj := Œª S, S.homology,
  map := Œª S‚ÇÅ S‚ÇÇ, homology_map, }

instance (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [S‚ÇÅ.has_homology] [S‚ÇÇ.has_homology]
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] :
  is_iso (homology_map œÜ) :=
by { dsimp only [homology_map, homology_map'], apply_instance, }

section

variables [has_homology S] {A : C} {C}

def homology_œÄ : S.cycles ‚ü∂ S.homology :=
S.left_homology_œÄ ‚â´ S.left_homology_iso_homology.hom

@[simp, reassoc]
lemma homology_œÄ_comp_left_homology_iso_homology_inv :
  S.homology_œÄ ‚â´ S.left_homology_iso_homology.inv = S.left_homology_œÄ :=
begin
  dsimp only [homology_œÄ],
  simp only [assoc, iso.hom_inv_id, comp_id],
end

@[simp, reassoc]
lemma to_cycles_comp_homology_œÄ :
  S.to_cycles ‚â´ S.homology_œÄ = 0 :=
begin
  dsimp only [homology_œÄ],
  simp only [to_cycles_comp_left_homology_œÄ_assoc, zero_comp],
end

def homology_is_cokernel :
  is_colimit (cokernel_cofork.of_œÄ S.homology_œÄ S.to_cycles_comp_homology_œÄ) :=
is_colimit.of_iso_colimit S.left_homology_is_cokernel
  (cofork.ext S.left_homology_iso_homology rfl)

instance : epi S.homology_œÄ :=
limits.epi_of_is_colimit_cofork (S.homology_is_cokernel)

def homology_desc (k : S.cycles ‚ü∂ A) (hk : S.to_cycles ‚â´ k = 0) :
  S.homology ‚ü∂ A :=
S.homology_is_cokernel.desc (cokernel_cofork.of_œÄ k hk)

@[simp, reassoc]
lemma homology_œÄ_desc (k : S.cycles ‚ü∂ A) (hk : S.to_cycles ‚â´ k = 0) :
  S.homology_œÄ ‚â´ S.homology_desc k hk = k :=
cofork.is_colimit.œÄ_desc S.homology_is_cokernel

@[simp, reassoc]
lemma homology_œÄ_naturality (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [S‚ÇÅ.has_homology] [S‚ÇÇ.has_homology] :
  S‚ÇÅ.homology_œÄ ‚â´ homology_map œÜ = cycles_map œÜ ‚â´ S‚ÇÇ.homology_œÄ :=
begin
  have eq := left_homology_iso_homology_hom_naturality œÜ,
  rw [‚Üê cancel_epi S‚ÇÅ.left_homology_iso_homology.inv, iso.inv_hom_id_assoc] at eq,
  simp only [‚Üê cancel_mono S‚ÇÇ.left_homology_iso_homology.inv,
    assoc, homology_œÄ_comp_left_homology_iso_homology_inv,
    ‚Üê left_homology_œÄ_naturality, eq, iso.hom_inv_id, comp_id,
    homology_œÄ_comp_left_homology_iso_homology_inv_assoc],
end

/- dualise the above -/

def homology_Œπ : S.homology ‚ü∂ S.cycles_co :=
S.homology_iso_right_homology.hom ‚â´ S.right_homology_Œπ

@[simp, reassoc]
lemma right_homology_iso_homology_inv_comp_homology_Œπ :
  S.homology_iso_right_homology.inv ‚â´ S.homology_Œπ = S.right_homology_Œπ :=
begin
  dsimp only [homology_Œπ],
  simp only [iso.inv_hom_id_assoc],
end

@[simp, reassoc]
lemma homology_Œπ_comp_from_cycles_co :
  S.homology_Œπ ‚â´ S.from_cycles_co = 0 :=
begin
  dsimp only [homology_Œπ],
  simp only [assoc, right_homology_Œπ_comp_from_cycles_co, comp_zero],
end

def homology_is_kernel :
  is_limit (kernel_fork.of_Œπ S.homology_Œπ S.homology_Œπ_comp_from_cycles_co) :=
is_limit.of_iso_limit S.right_homology_is_kernel
(fork.ext S.homology_iso_right_homology.symm (by simp))

def homology_lift (k : A ‚ü∂ S.cycles_co) (hk : k ‚â´ S.from_cycles_co = 0) :
  A ‚ü∂ S.homology :=
S.homology_is_kernel.lift (kernel_fork.of_Œπ k hk)

@[simp, reassoc]
lemma homology_lift_Œπ (k : A ‚ü∂ S.cycles_co) (hk : k ‚â´ S.from_cycles_co = 0) :
  S.homology_lift k hk ‚â´ S.homology_Œπ = k :=
fork.is_limit.lift_Œπ S.homology_is_kernel

@[simp, reassoc]
lemma homology_œÄ_Œπ :
  S.homology_œÄ ‚â´ S.homology_Œπ = S.cycles_i ‚â´ S.p_cycles_co :=
begin
  dsimp [homology_œÄ, homology_Œπ],
  rw assoc,
  nth_rewrite 1 ‚Üê assoc,
  simpa only [S.left_right_homology_comparison_fac]
    using S.comp_left_right_homology_comparison_comp,
end

lemma is_iso_homology_map'_of_epi_of_is_iso_of_mono (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ)
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] (h‚ÇÅ : S‚ÇÅ.homology_data) (h‚ÇÇ : S‚ÇÇ.homology_data) :
  is_iso (homology_map' œÜ h‚ÇÅ h‚ÇÇ) :=
begin
  have eq := homology_map'_comp œÜ (ùüô S‚ÇÇ) h‚ÇÅ (homology_data.of_epi_of_is_iso_of_mono œÜ h‚ÇÅ) h‚ÇÇ,
  simp only [comp_id, (homology_map_data.of_epi_of_is_iso_of_mono œÜ h‚ÇÅ).homology_map'_eq,
    homology_map_data.of_epi_of_is_iso_of_mono_left,
    left_homology_map_data.of_epi_of_is_iso_of_mono_œÜH, id_comp] at eq,
  rw eq,
  apply_instance,
end

end

variable {C}

def homology_iso_kernel_desc [S.has_homology] [has_cokernel S.f]
  [has_kernel (cokernel.desc S.f S.g S.zero)] :
  S.homology ‚âÖ kernel (cokernel.desc S.f S.g S.zero) :=
(right_homology_data.of_coker_of_ker S).homology_iso

def homology_iso_cokernel_lift [S.has_homology] [has_kernel S.g]
  [has_cokernel (kernel.lift S.g S.f S.zero)] :
  S.homology ‚âÖ cokernel (kernel.lift S.g S.f S.zero) :=
(left_homology_data.of_ker_of_coker S).homology_iso

variable {S}

@[simp, reassoc]
lemma left_homology_data.homology_œÄ_comp_homology_iso_hom
  (h : S.left_homology_data) [S.has_homology] :
  S.homology_œÄ ‚â´ h.homology_iso.hom = h.cycles_iso.hom ‚â´ h.œÄ :=
begin
  rw [‚Üê h.left_homology_œÄ_comp_left_homology_iso_hom,
    ‚Üê S.homology_œÄ_comp_left_homology_iso_homology_inv],
  dsimp [left_homology_iso_homology, left_homology_data.homology_iso,
    left_homology_data.left_homology_iso],
  rw [assoc, ‚Üê left_homology_map'_comp, id_comp],
end

@[simp, reassoc]
lemma right_homology_data.homology_iso_hom_comp_right_homology_iso_inv
  (h : S.right_homology_data) [S.has_homology] :
  h.homology_iso.hom ‚â´ h.right_homology_iso.inv = S.homology_iso_right_homology.hom :=
begin
  dsimp [right_homology_data.homology_iso, homology_iso_right_homology,
    right_homology_data.right_homology_iso],
  rw [‚Üê left_homology_map'_comp_iso_hom_comp_right_homology_map'
    S.some_homology_data S.some_homology_data.left h, left_homology_map'_id, id_comp,
    ‚Üê left_homology_map'_comp_iso_hom_comp_right_homology_map' S.some_homology_data
    S.some_homology_data.left S.some_right_homology_data, assoc,
    left_homology_map'_id, id_comp, ‚Üê right_homology_map'_comp, id_comp],
end

@[simp, reassoc]
lemma right_homology_data.homology_iso_inv_comp_homology_œÄ
  (h : S.right_homology_data) [S.has_homology] :
  h.homology_iso.inv ‚â´ S.homology_Œπ = h.Œπ ‚â´ h.cycles_co_iso.inv :=
begin
  simp only [‚Üê right_homology_data.right_homology_iso_inv_comp_right_homology_Œπ,
    ‚Üê S.right_homology_iso_homology_inv_comp_homology_Œπ,
    ‚Üê cancel_epi h.homology_iso.hom, iso.hom_inv_id_assoc,
    h.homology_iso_hom_comp_right_homology_iso_inv_assoc],
end

@[reassoc]
lemma left_homology_data.œÄ_comp_homology_iso_inv (h : S.left_homology_data) [S.has_homology] :
  h.œÄ ‚â´ h.homology_iso.inv = h.cycles_iso.inv ‚â´ S.homology_œÄ :=
by simp only [‚Üê cancel_epi h.cycles_iso.hom, ‚Üê cancel_mono h.homology_iso.hom, assoc,
  iso.inv_hom_id, comp_id, iso.hom_inv_id_assoc, h.homology_œÄ_comp_homology_iso_hom]

@[reassoc]
lemma right_homology_data.œÄ_comp_homology_iso_inv (h : S.right_homology_data) [S.has_homology] :
  h.homology_iso.hom ‚â´ h.Œπ = S.homology_Œπ ‚â´ h.cycles_co_iso.hom :=
by simp only [‚Üê cancel_mono h.cycles_co_iso.inv, ‚Üê cancel_epi h.homology_iso.inv, assoc,
  iso.inv_hom_id_assoc, iso.hom_inv_id, comp_id,
  right_homology_data.homology_iso_inv_comp_homology_œÄ]

@[simp, reassoc]
lemma comp_homology_map_comp [S‚ÇÅ.has_homology] [S‚ÇÇ.has_homology] (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ)
  (h‚ÇÅ : S‚ÇÅ.left_homology_data) (h‚ÇÇ : S‚ÇÇ.right_homology_data) :
  h‚ÇÅ.œÄ ‚â´ h‚ÇÅ.homology_iso.inv ‚â´ homology_map œÜ ‚â´ h‚ÇÇ.homology_iso.hom ‚â´ h‚ÇÇ.Œπ =
    h‚ÇÅ.i ‚â´ œÜ.œÑ‚ÇÇ ‚â´ h‚ÇÇ.p :=
begin
  simp only [‚Üê cancel_epi h‚ÇÅ.cycles_iso.hom, ‚Üê cancel_mono h‚ÇÇ.cycles_co_iso.inv,
    assoc, left_homology_data.cycles_iso_hom_comp_i_assoc,
    right_homology_data.p_comp_cycles_co_iso_inv,
    left_homology_data.œÄ_comp_homology_iso_inv_assoc, iso.hom_inv_id, comp_id,
    right_homology_data.œÄ_comp_homology_iso_inv_assoc, iso.hom_inv_id_assoc],
  dsimp only [homology_œÄ, homology_Œπ],
  simp only [assoc, left_homology_iso_homology_hom_naturality_assoc œÜ,
    left_homology_œÄ_naturality_assoc, ‚Üê S‚ÇÇ.left_right_homology_comparison_fac_assoc,
    comp_left_right_homology_comparison_comp, cycles_map_i_assoc],
end

lemma œÄ_comp_homology_map_comp_Œπ [S‚ÇÅ.has_homology] [S‚ÇÇ.has_homology] (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) :
  S‚ÇÅ.homology_œÄ ‚â´ homology_map œÜ ‚â´ S‚ÇÇ.homology_Œπ =
    S‚ÇÅ.cycles_i ‚â´ œÜ.œÑ‚ÇÇ ‚â´ S‚ÇÇ.p_cycles_co :=
begin
  dsimp [homology_œÄ, homology_Œπ],
  simpa only [assoc] using comp_homology_map_comp œÜ
    S‚ÇÅ.some_left_homology_data S‚ÇÇ.some_right_homology_data,
end

section quasi_iso

variables [has_homology S‚ÇÅ] [has_homology S‚ÇÇ] [has_homology S‚ÇÉ] [has_homology S‚ÇÑ]

@[protected]
def quasi_iso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) := is_iso (homology_map œÜ)

lemma quasi_iso_of_iso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [is_iso œÜ] : quasi_iso œÜ :=
is_iso.of_iso (homology_map_iso (as_iso œÜ))

lemma quasi_iso_comp {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {œÜ' : S‚ÇÇ ‚ü∂ S‚ÇÉ} (h : quasi_iso œÜ) (h' : quasi_iso œÜ') :
  quasi_iso (œÜ ‚â´ œÜ') :=
begin
  unfreezingI { dsimp [quasi_iso] at ‚ä¢ h h', },
  rw homology_map_comp,
  apply_instance,
end

lemma quasi_iso_of_comp_left {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {œÜ' : S‚ÇÇ ‚ü∂ S‚ÇÉ}
  (h : quasi_iso œÜ) (h' : quasi_iso (œÜ ‚â´ œÜ')) :
  quasi_iso œÜ' :=
begin
  unfreezingI { dsimp [quasi_iso] at ‚ä¢ h h', },
  rw homology_map_comp at h',
  haveI := h,
  exact is_iso.of_is_iso_comp_left (homology_map œÜ) (homology_map œÜ'),
end

lemma quasi_iso_of_comp_right {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {œÜ' : S‚ÇÇ ‚ü∂ S‚ÇÉ}
  (h : quasi_iso œÜ') (h' : quasi_iso (œÜ ‚â´ œÜ')) :
  quasi_iso œÜ :=
begin
  unfreezingI { dsimp [quasi_iso] at ‚ä¢ h h', },
  rw homology_map_comp at h',
  haveI := h',
  exact is_iso.of_is_iso_comp_right (homology_map œÜ) (homology_map œÜ'),
end

lemma iff_of_arrow_mk_iso (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ' : S‚ÇÉ ‚ü∂ S‚ÇÑ) (e : arrow.mk œÜ ‚âÖ arrow.mk œÜ') :
  quasi_iso œÜ ‚Üî quasi_iso œÜ' :=
begin
  haveI : has_homology (arrow.mk œÜ).left := (infer_instance : has_homology S‚ÇÅ),
  haveI : has_homology (arrow.mk œÜ).right := (infer_instance : has_homology S‚ÇÇ),
  haveI : has_homology (arrow.mk œÜ').left := (infer_instance : has_homology S‚ÇÉ),
  haveI : has_homology (arrow.mk œÜ').right := (infer_instance : has_homology S‚ÇÑ),
  have w := e.hom.w,
  dsimp at w,
  split,
  { intro hœÜ,
    replace hœÜ := quasi_iso_comp hœÜ (quasi_iso_of_iso e.hom.right),
    rw ‚Üê w at hœÜ,
    exact quasi_iso_of_comp_left (quasi_iso_of_iso e.hom.left) hœÜ, },
  { intro hœÜ',
    replace hœÜ' := quasi_iso_comp (quasi_iso_of_iso e.hom.left) hœÜ',
    rw w at hœÜ',
    exact quasi_iso_of_comp_right (quasi_iso_of_iso e.hom.right) hœÜ', },
end

end quasi_iso

lemma left_homology_map_data.quasi_iso_iff' {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {h‚ÇÅ h‚ÇÅ' : left_homology_data S‚ÇÅ}
  {h‚ÇÇ h‚ÇÇ' : left_homology_data S‚ÇÇ} (œà : left_homology_map_data œÜ h‚ÇÅ h‚ÇÇ) (œà' : left_homology_map_data œÜ h‚ÇÅ' h‚ÇÇ') :
  is_iso œà.œÜH ‚Üî is_iso œà'.œÜH :=
begin
  let e := left_homology_map_iso' (iso.refl S‚ÇÅ) h‚ÇÅ h‚ÇÅ',
  let e' := left_homology_map_iso' (iso.refl S‚ÇÇ) h‚ÇÇ h‚ÇÇ',
  have fac‚ÇÅ : œà'.œÜH = e.inv ‚â´ œà.œÜH ‚â´ e'.hom,
  { dsimp [e, e'],
    rw [‚Üê œà.left_homology_map'_eq, ‚Üê œà'.left_homology_map'_eq, ‚Üê left_homology_map'_comp,
      ‚Üê left_homology_map'_comp, id_comp, comp_id], },
  have fac‚ÇÇ : œà.œÜH = e.hom ‚â´ œà'.œÜH ‚â´ e'.inv,
  { simp only [fac‚ÇÅ, assoc, e.hom_inv_id_assoc, e'.hom_inv_id, comp_id], },
  split,
  { introI,
    rw fac‚ÇÅ,
    apply_instance, },
  { introI,
    rw fac‚ÇÇ,
    apply_instance, },
end

lemma left_homology_map_data.quasi_iso_iff {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {h‚ÇÅ : left_homology_data S‚ÇÅ}
  {h‚ÇÇ : left_homology_data S‚ÇÇ} (œà : left_homology_map_data œÜ h‚ÇÅ h‚ÇÇ)
  [S‚ÇÅ.has_homology] [S‚ÇÇ.has_homology] :
  quasi_iso œÜ ‚Üî is_iso œà.œÜH :=
left_homology_map_data.quasi_iso_iff' _ _

lemma homology_map_data.quasi_iso_iff' {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} (œà : homology_map_data œÜ h‚ÇÅ h‚ÇÇ) :
  is_iso œà.left.œÜH ‚Üî is_iso œà.right.œÜH :=
begin
  have fac‚ÇÅ : œà.right.œÜH = h‚ÇÅ.iso.inv ‚â´ œà.left.œÜH ‚â´ h‚ÇÇ.iso.hom,
  { simp only [œà.comm, iso.inv_hom_id_assoc], },
  have fac‚ÇÇ : œà.left.œÜH = h‚ÇÅ.iso.hom ‚â´ œà.right.œÜH ‚â´ h‚ÇÇ.iso.inv,
  { simp only [‚Üê reassoc_of œà.comm, iso.hom_inv_id, comp_id], },
  split,
  { introI,
    rw fac‚ÇÅ,
    apply_instance, },
  { introI,
    rw fac‚ÇÇ,
    apply_instance, },
end

lemma right_homology_map_data.quasi_iso_iff {œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ} {h‚ÇÅ : right_homology_data S‚ÇÅ}
  {h‚ÇÇ : right_homology_data S‚ÇÇ} (œà : right_homology_map_data œÜ h‚ÇÅ h‚ÇÇ)
  [S‚ÇÅ.has_homology] [S‚ÇÇ.has_homology] :
  quasi_iso œÜ ‚Üî is_iso œà.œÜH :=
begin
  let h‚ÇÅ' := S‚ÇÅ.some_homology_data,
  let h‚ÇÇ' := S‚ÇÇ.some_homology_data,
  let œà' : left_homology_map_data œÜ h‚ÇÅ'.left h‚ÇÇ'.left := default,
  let h‚ÇÅ'' := homology_data.of_is_iso_left_right_homology_comparison' h‚ÇÅ'.left h‚ÇÅ,
  let h‚ÇÇ'' := homology_data.of_is_iso_left_right_homology_comparison' h‚ÇÇ'.left h‚ÇÇ,
  let Œ¶ : homology_map_data œÜ h‚ÇÅ'' h‚ÇÇ'' := ‚ü®œà', œà‚ü©,
  change is_iso (Œ¶.left.œÜH) ‚Üî is_iso (Œ¶.right.œÜH),
  have fac‚ÇÅ : Œ¶.right.œÜH = h‚ÇÅ''.iso.inv ‚â´ Œ¶.left.œÜH ‚â´ h‚ÇÇ''.iso.hom,
  { rw [Œ¶.comm, iso.inv_hom_id_assoc], },
  have fac‚ÇÇ : Œ¶.left.œÜH = h‚ÇÅ''.iso.hom ‚â´ Œ¶.right.œÜH ‚â´ h‚ÇÇ''.iso.inv,
  { rw [‚Üê Œ¶.comm_assoc, iso.hom_inv_id, comp_id], },
  split,
  { introI,
    rw fac‚ÇÅ,
    apply_instance, },
  { introI,
    rw fac‚ÇÇ,
    apply_instance, },
end

variable (S)

def some_homology_data' [S.has_homology] : S.homology_data :=
homology_data.of_is_iso_left_right_homology_comparison'
    S.some_left_homology_data S.some_right_homology_data

instance {D : Type*} [category D] [has_zero_morphisms D] [category_with_homology D] :
  category_with_homology D·µí·µñ :=
‚ü®Œª S, has_homology.mk' (homology_data.of_iso S.unop_op S.unop.some_homology_data.op)‚ü©

lemma quasi_iso.of_epi_of_is_iso_of_mono (œÜ : S‚ÇÅ ‚ü∂ S‚ÇÇ) [has_homology S‚ÇÅ] [has_homology S‚ÇÇ]
  [epi œÜ.œÑ‚ÇÅ] [is_iso œÜ.œÑ‚ÇÇ] [mono œÜ.œÑ‚ÇÉ] : quasi_iso œÜ :=
begin
  rw (left_homology_map_data.of_epi_of_is_iso_of_mono œÜ
    S‚ÇÅ.some_left_homology_data).quasi_iso_iff,
  dsimp,
  apply_instance,
end

end short_complex

end category_theory
