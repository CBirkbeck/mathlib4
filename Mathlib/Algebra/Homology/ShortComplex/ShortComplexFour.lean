import Mathlib.Algebra.Homology.ShortComplex.Exact

namespace CategoryTheory

open Limits

variable (C : Type _) [Category C]

structure ShortComplex‚ÇÑ [HasZeroMorphisms C] where
  {X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : C}
  f : X‚ÇÅ ‚ü∂ X‚ÇÇ
  g : X‚ÇÇ ‚ü∂ X‚ÇÉ
  h : X‚ÇÉ ‚ü∂ X‚ÇÑ
  zero‚ÇÅ : f ‚â´ g = 0
  zero‚ÇÇ : g ‚â´ h = 0

namespace ShortComplex‚ÇÑ

attribute [reassoc (attr := simp)] zero‚ÇÅ zero‚ÇÇ

section

variable {C}
variable [HasZeroMorphisms C]

@[ext]
structure Hom (S‚ÇÅ S‚ÇÇ : ShortComplex‚ÇÑ C) where
  œÑ‚ÇÅ : S‚ÇÅ.X‚ÇÅ ‚ü∂ S‚ÇÇ.X‚ÇÅ
  œÑ‚ÇÇ : S‚ÇÅ.X‚ÇÇ ‚ü∂ S‚ÇÇ.X‚ÇÇ
  œÑ‚ÇÉ : S‚ÇÅ.X‚ÇÉ ‚ü∂ S‚ÇÇ.X‚ÇÉ
  œÑ‚ÇÑ : S‚ÇÅ.X‚ÇÑ ‚ü∂ S‚ÇÇ.X‚ÇÑ
  commf : œÑ‚ÇÅ ‚â´ S‚ÇÇ.f = S‚ÇÅ.f ‚â´ œÑ‚ÇÇ := by aesop_cat
  commg : œÑ‚ÇÇ ‚â´ S‚ÇÇ.g = S‚ÇÅ.g ‚â´ œÑ‚ÇÉ := by aesop_cat
  commh : œÑ‚ÇÉ ‚â´ S‚ÇÇ.h = S‚ÇÅ.h ‚â´ œÑ‚ÇÑ := by aesop_cat

attribute [reassoc] Hom.commf Hom.commg Hom.commh
attribute [local simp] Hom.commf Hom.commg Hom.commh
  Hom.commf_assoc Hom.commg_assoc Hom.commh_assoc

variable (S : ShortComplex‚ÇÑ C) {S‚ÇÅ S‚ÇÇ S‚ÇÉ : ShortComplex‚ÇÑ C}

/-- The identity morphism of a short complex. -/
@[simps]
def Hom.id : Hom S S where
  œÑ‚ÇÅ := ùüô _
  œÑ‚ÇÇ := ùüô _
  œÑ‚ÇÉ := ùüô _
  œÑ‚ÇÑ := ùüô _

/-- The composition of morphisms of short complexes. -/
@[simps]
def Hom.comp (œÜ‚ÇÅ‚ÇÇ : Hom S‚ÇÅ S‚ÇÇ) (œÜ‚ÇÇ‚ÇÉ : Hom S‚ÇÇ S‚ÇÉ) : Hom S‚ÇÅ S‚ÇÉ where
  œÑ‚ÇÅ := œÜ‚ÇÅ‚ÇÇ.œÑ‚ÇÅ ‚â´ œÜ‚ÇÇ‚ÇÉ.œÑ‚ÇÅ
  œÑ‚ÇÇ := œÜ‚ÇÅ‚ÇÇ.œÑ‚ÇÇ ‚â´ œÜ‚ÇÇ‚ÇÉ.œÑ‚ÇÇ
  œÑ‚ÇÉ := œÜ‚ÇÅ‚ÇÇ.œÑ‚ÇÉ ‚â´ œÜ‚ÇÇ‚ÇÉ.œÑ‚ÇÉ
  œÑ‚ÇÑ := œÜ‚ÇÅ‚ÇÇ.œÑ‚ÇÑ ‚â´ œÜ‚ÇÇ‚ÇÉ.œÑ‚ÇÑ

instance : Category (ShortComplex‚ÇÑ C) where
  Hom := Hom
  id := Hom.id
  comp := Hom.comp

@[ext]
lemma hom_ext (f g : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÅ : f.œÑ‚ÇÅ = g.œÑ‚ÇÅ) (h‚ÇÇ : f.œÑ‚ÇÇ = g.œÑ‚ÇÇ) (h‚ÇÉ : f.œÑ‚ÇÉ = g.œÑ‚ÇÉ)
    (h‚ÇÑ : f.œÑ‚ÇÑ = g.œÑ‚ÇÑ) : f = g :=
  Hom.ext _ _ h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ

/-- A constructor for morphisms in `ShortComplex‚ÇÑ C` when the commutativity conditions
are not obvious. -/
@[simps]
def homMk {S‚ÇÅ S‚ÇÇ : ShortComplex‚ÇÑ C} (œÑ‚ÇÅ : S‚ÇÅ.X‚ÇÅ ‚ü∂ S‚ÇÇ.X‚ÇÅ) (œÑ‚ÇÇ : S‚ÇÅ.X‚ÇÇ ‚ü∂ S‚ÇÇ.X‚ÇÇ)
    (œÑ‚ÇÉ : S‚ÇÅ.X‚ÇÉ ‚ü∂ S‚ÇÇ.X‚ÇÉ) (œÑ‚ÇÑ : S‚ÇÅ.X‚ÇÑ ‚ü∂ S‚ÇÇ.X‚ÇÑ) (commf : œÑ‚ÇÅ ‚â´ S‚ÇÇ.f = S‚ÇÅ.f ‚â´ œÑ‚ÇÇ)
    (commg : œÑ‚ÇÇ ‚â´ S‚ÇÇ.g = S‚ÇÅ.g ‚â´ œÑ‚ÇÉ) (commh : œÑ‚ÇÉ ‚â´ S‚ÇÇ.h = S‚ÇÅ.h ‚â´ œÑ‚ÇÑ) :
  S‚ÇÅ ‚ü∂ S‚ÇÇ := ‚ü®œÑ‚ÇÅ, œÑ‚ÇÇ, œÑ‚ÇÉ, œÑ‚ÇÑ, commf, commg, commh‚ü©

@[simp] lemma id_œÑ‚ÇÅ : Hom.œÑ‚ÇÅ (ùüô S) = ùüô _ := rfl
@[simp] lemma id_œÑ‚ÇÇ : Hom.œÑ‚ÇÇ (ùüô S) = ùüô _ := rfl
@[simp] lemma id_œÑ‚ÇÉ : Hom.œÑ‚ÇÉ (ùüô S) = ùüô _ := rfl
@[simp] lemma id_œÑ‚ÇÑ : Hom.œÑ‚ÇÑ (ùüô S) = ùüô _ := rfl
@[reassoc] lemma comp_œÑ‚ÇÅ (œÜ‚ÇÅ‚ÇÇ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ‚ÇÉ : S‚ÇÇ ‚ü∂ S‚ÇÉ) :
    (œÜ‚ÇÅ‚ÇÇ ‚â´ œÜ‚ÇÇ‚ÇÉ).œÑ‚ÇÅ = œÜ‚ÇÅ‚ÇÇ.œÑ‚ÇÅ ‚â´ œÜ‚ÇÇ‚ÇÉ.œÑ‚ÇÅ := rfl
@[reassoc] lemma comp_œÑ‚ÇÇ (œÜ‚ÇÅ‚ÇÇ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ‚ÇÉ : S‚ÇÇ ‚ü∂ S‚ÇÉ) :
    (œÜ‚ÇÅ‚ÇÇ ‚â´ œÜ‚ÇÇ‚ÇÉ).œÑ‚ÇÇ = œÜ‚ÇÅ‚ÇÇ.œÑ‚ÇÇ ‚â´ œÜ‚ÇÇ‚ÇÉ.œÑ‚ÇÇ := rfl
@[reassoc] lemma comp_œÑ‚ÇÉ (œÜ‚ÇÅ‚ÇÇ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ‚ÇÉ : S‚ÇÇ ‚ü∂ S‚ÇÉ) :
    (œÜ‚ÇÅ‚ÇÇ ‚â´ œÜ‚ÇÇ‚ÇÉ).œÑ‚ÇÉ = œÜ‚ÇÅ‚ÇÇ.œÑ‚ÇÉ ‚â´ œÜ‚ÇÇ‚ÇÉ.œÑ‚ÇÉ := rfl
@[reassoc] lemma comp_œÑ‚ÇÑ (œÜ‚ÇÅ‚ÇÇ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (œÜ‚ÇÇ‚ÇÉ : S‚ÇÇ ‚ü∂ S‚ÇÉ) :
    (œÜ‚ÇÅ‚ÇÇ ‚â´ œÜ‚ÇÇ‚ÇÉ).œÑ‚ÇÑ = œÜ‚ÇÅ‚ÇÇ.œÑ‚ÇÑ ‚â´ œÜ‚ÇÇ‚ÇÉ.œÑ‚ÇÑ := rfl

attribute [simp] comp_œÑ‚ÇÅ comp_œÑ‚ÇÇ comp_œÑ‚ÇÉ comp_œÑ‚ÇÑ

instance : Zero (S‚ÇÅ ‚ü∂ S‚ÇÇ) := ‚ü®{ œÑ‚ÇÅ := 0, œÑ‚ÇÇ := 0, œÑ‚ÇÉ := 0, œÑ‚ÇÑ := 0 }‚ü©

variable (S‚ÇÅ S‚ÇÇ)

@[simp] lemma zero_œÑ‚ÇÅ : Hom.œÑ‚ÇÅ (0 : S‚ÇÅ ‚ü∂ S‚ÇÇ) = 0 := rfl
@[simp] lemma zero_œÑ‚ÇÇ : Hom.œÑ‚ÇÇ (0 : S‚ÇÅ ‚ü∂ S‚ÇÇ) = 0 := rfl
@[simp] lemma zero_œÑ‚ÇÉ : Hom.œÑ‚ÇÉ (0 : S‚ÇÅ ‚ü∂ S‚ÇÇ) = 0 := rfl
@[simp] lemma zero_œÑ‚ÇÑ : Hom.œÑ‚ÇÑ (0 : S‚ÇÅ ‚ü∂ S‚ÇÇ) = 0 := rfl

variable {S‚ÇÅ S‚ÇÇ}

instance : HasZeroMorphisms (ShortComplex C) where

@[simps]
def shortComplex‚ÇÅ : ShortComplex C :=
  ShortComplex.mk _ _ S.zero‚ÇÅ

@[simps]
def shortComplex‚ÇÇ : ShortComplex C :=
  ShortComplex.mk _ _ S.zero‚ÇÇ

structure Exact : Prop where
  exact‚ÇÅ : S.shortComplex‚ÇÅ.Exact
  exact‚ÇÇ : S.shortComplex‚ÇÇ.Exact

section

variable (hS : S.Exact) (cc : CokernelCofork S.f) (kf : KernelFork S.h)
  (hcc : IsColimit cc) (hkf : IsLimit kf)

def cokerToKer' : cc.pt ‚ü∂ kf.pt :=
  IsColimit.desc hcc (CokernelCofork.ofœÄ _
    (show S.f ‚â´ IsLimit.lift hkf (KernelFork.ofŒπ _ S.zero‚ÇÇ) = 0 from
      Fork.IsLimit.hom_ext hkf (by simp)))

@[reassoc (attr := simp)]
lemma cokerToKer'_fac : cc.œÄ ‚â´ S.cokerToKer' cc kf hcc hkf ‚â´ kf.Œπ = S.g := by
  simp [cokerToKer']

noncomputable def cokerToKer [HasCokernel S.f] [HasKernel S.h] : cokernel S.f ‚ü∂ kernel S.h :=
  S.cokerToKer' (CokernelCofork.ofœÄ  _ (cokernel.condition S.f))
    (KernelFork.ofŒπ _ (kernel.condition S.h)) (cokernelIsCokernel S.f) (kernelIsKernel S.h)

@[reassoc (attr := simp)]
lemma cokerToKer_fac [HasCokernel S.f] [HasKernel S.h] :
    cokernel.œÄ S.f ‚â´ S.cokerToKer ‚â´ kernel.Œπ S.h = S.g :=
  S.cokerToKer'_fac _ _ (cokernelIsCokernel S.f) (kernelIsKernel S.h)

noncomputable def cyclesCoToCycles
    [S.shortComplex‚ÇÅ.HasRightHomology] [S.shortComplex‚ÇÇ.HasLeftHomology] :
    S.shortComplex‚ÇÅ.cyclesCo ‚ü∂ S.shortComplex‚ÇÇ.cycles :=
  S.cokerToKer' _ _ (S.shortComplex‚ÇÅ.cyclesCoIsCokernel) (S.shortComplex‚ÇÇ.cyclesIsKernel)

@[reassoc (attr := simp)]
lemma cyclesCoToCycles_fac
    [S.shortComplex‚ÇÅ.HasRightHomology] [S.shortComplex‚ÇÇ.HasLeftHomology] :
    S.shortComplex‚ÇÅ.pCyclesCo ‚â´ S.cyclesCoToCycles ‚â´ S.shortComplex‚ÇÇ.iCycles = S.g :=
  S.cokerToKer'_fac _ _ (S.shortComplex‚ÇÅ.cyclesCoIsCokernel) (S.shortComplex‚ÇÇ.cyclesIsKernel)

end

section

variable (S T : ShortComplex C) (e : S.X‚ÇÉ ‚âÖ T.X‚ÇÅ) (œÜ : S.X‚ÇÇ ‚ü∂ T.X‚ÇÇ) (hœÜ : œÜ = S.g ‚â´ e.hom ‚â´ T.f)

@[simps]
def connectShortComplex : ShortComplex‚ÇÑ C where
  X‚ÇÅ := S.X‚ÇÅ
  X‚ÇÇ := S.X‚ÇÇ
  X‚ÇÉ := T.X‚ÇÇ
  X‚ÇÑ := T.X‚ÇÉ
  f := S.f
  g := œÜ
  h := T.g
  zero‚ÇÅ := by simp [hœÜ]
  zero‚ÇÇ := by simp [hœÜ]

@[simps]
def connectShortComplexŒπ : S ‚ü∂ (connectShortComplex S T e œÜ hœÜ).shortComplex‚ÇÅ where
  œÑ‚ÇÅ := ùüô _
  œÑ‚ÇÇ := ùüô _
  œÑ‚ÇÉ := e.hom ‚â´ T.f

instance : IsIso (connectShortComplexŒπ S T e œÜ hœÜ).œÑ‚ÇÅ := by dsimp ; infer_instance
instance : IsIso (connectShortComplexŒπ S T e œÜ hœÜ).œÑ‚ÇÇ := by dsimp ; infer_instance
instance [Mono T.f] : Mono (connectShortComplexŒπ S T e œÜ hœÜ).œÑ‚ÇÉ := mono_comp _ _

@[simps]
def connectShortComplexœÄ : (connectShortComplex S T e œÜ hœÜ).shortComplex‚ÇÇ ‚ü∂ T where
  œÑ‚ÇÅ := S.g ‚â´ e.hom
  œÑ‚ÇÇ := ùüô _
  œÑ‚ÇÉ := ùüô _

instance [Epi S.g] : Epi (connectShortComplexœÄ S T e œÜ hœÜ).œÑ‚ÇÅ := epi_comp _ _
instance : IsIso (connectShortComplexœÄ S T e œÜ hœÜ).œÑ‚ÇÇ := by dsimp ; infer_instance
instance : IsIso (connectShortComplexœÄ S T e œÜ hœÜ).œÑ‚ÇÉ := by dsimp ; infer_instance

lemma connectShortComplex_exact (hS : S.Exact) (hT : T.Exact) [Epi S.g] [Mono T.f] :
    (connectShortComplex S T e œÜ hœÜ).Exact where
  exact‚ÇÅ := (ShortComplex.exact_iff_of_epi_of_isIso_of_mono
    (connectShortComplexŒπ S T e œÜ hœÜ)).1 hS
  exact‚ÇÇ := (ShortComplex.exact_iff_of_epi_of_isIso_of_mono
    (connectShortComplexœÄ S T e œÜ hœÜ)).2 hT

end

end

section Preadditive

variable {C}
variable [Preadditive C] (S : ShortComplex‚ÇÑ C)
  (hS : S.Exact) (cc : CokernelCofork S.f) (kf : KernelFork S.h)
  (hcc : IsColimit cc) (hkf : IsLimit kf)

lemma epi_cokerToKer' (hS : S.shortComplex‚ÇÇ.Exact) :
    Epi (S.cokerToKer' cc kf hcc hkf) := by
  have := hS.hasZeroObject
  have := hS.hasHomology
  have : Epi cc.œÄ := ‚ü®fun _ _ => Cofork.IsColimit.hom_ext hcc‚ü©
  let h := (hS.leftHomologyDataOfIsLimitKernelFork kf hkf)
  have := h.exact_iff_epi_f'.1 hS
  have fac : cc.œÄ ‚â´ S.cokerToKer' cc kf hcc hkf = h.f' := by
    rw [‚Üê cancel_mono h.i, h.f'_i, ShortComplex.Exact.leftHomologyDataOfIsLimitKernelFork_i,
      Category.assoc, cokerToKer'_fac, shortComplex‚ÇÇ_f]
  exact epi_of_epi_fac fac

lemma mono_cokerToKer' (hS : S.shortComplex‚ÇÅ.Exact) :
    Mono (S.cokerToKer' cc kf hcc hkf) := by
  have := hS.hasZeroObject
  have := hS.hasHomology
  have : Mono kf.Œπ := ‚ü®fun _ _ => Fork.IsLimit.hom_ext hkf‚ü©
  let h := (hS.rightHomologyDataOfIsColimitCokernelCofork cc hcc)
  have := h.exact_iff_mono_g'.1 hS
  have fac : S.cokerToKer' cc kf hcc hkf ‚â´ kf.Œπ = h.g' := by
    rw [‚Üê cancel_epi h.p, h.p_g', ShortComplex.Exact.rightHomologyDataOfIsColimitCokernelCofork_p,
      cokerToKer'_fac, shortComplex‚ÇÅ_g]
  exact mono_of_mono_fac fac

variable {S}
variable [Balanced C]

lemma Exact.isIso_cokerToKer' : IsIso (S.cokerToKer' cc kf hcc hkf) := by
  have := S.mono_cokerToKer' cc kf hcc hkf hS.exact‚ÇÅ
  have := S.epi_cokerToKer' cc kf hcc hkf hS.exact‚ÇÇ
  apply isIso_of_mono_of_epi

lemma Exact.isIso_cokerToKer [HasCokernel S.f] [HasKernel S.h] :
    IsIso S.cokerToKer :=
  hS.isIso_cokerToKer' _ _ _ _

lemma Exact.isIso_cyclesCoToCycles
    [S.shortComplex‚ÇÅ.HasRightHomology] [S.shortComplex‚ÇÇ.HasLeftHomology] :
    IsIso S.cyclesCoToCycles :=
  hS.isIso_cokerToKer' _ _ _ _

@[simps! hom]
noncomputable def Exact.cokerIsoKer' : cc.pt ‚âÖ kf.pt :=
  have := hS.isIso_cokerToKer' cc kf hcc hkf
  asIso (S.cokerToKer' cc kf hcc hkf)

@[simps! hom]
noncomputable def Exact.cokerIsoKer [HasCokernel S.f] [HasKernel S.h] :
    cokernel S.f ‚âÖ kernel S.h :=
  have := hS.isIso_cokerToKer
  asIso S.cokerToKer

@[simps! hom]
lemma Exact.cyclesCoIsoCycles
    [S.shortComplex‚ÇÅ.HasRightHomology] [S.shortComplex‚ÇÇ.HasLeftHomology] :
    S.shortComplex‚ÇÅ.cyclesCo ‚âÖ S.shortComplex‚ÇÇ.cycles :=
  have := hS.isIso_cyclesCoToCycles
  asIso S.cyclesCoToCycles

end Preadditive

end ShortComplex‚ÇÑ

end CategoryTheory
