import Mathlib.Algebra.Homology.ShortComplex.FunctorEquivalence
import Mathlib.CategoryTheory.Limits.Constructions.EpiMono
import Mathlib.CategoryTheory.Limits.Shapes.FiniteLimits
import Mathlib.CategoryTheory.Limits.Preserves.Finite

namespace CategoryTheory

open Category Limits

variable {J C : Type _} [Category J] [Category C] [HasZeroMorphisms C]
  {F : J ‚•§ ShortComplex C}

namespace ShortComplex

def isLimit_of_isLimitœÄ (c : Cone F)
  (h‚ÇÅ : IsLimit (œÄ‚ÇÅ.mapCone c)) (h‚ÇÇ : IsLimit (œÄ‚ÇÇ.mapCone c))
  (h‚ÇÉ : IsLimit (œÄ‚ÇÉ.mapCone c)) : IsLimit c where
  lift s := by
    have eq‚ÇÅ := h‚ÇÅ.fac (œÄ‚ÇÅ.mapCone s)
    have eq‚ÇÇ := h‚ÇÇ.fac (œÄ‚ÇÇ.mapCone s)
    have eq‚ÇÉ := h‚ÇÉ.fac (œÄ‚ÇÉ.mapCone s)
    have eq‚ÇÅ‚ÇÇ := fun j => (c.œÄ.app j).comm‚ÇÅ‚ÇÇ
    have eq‚ÇÅ‚ÇÇ' := fun j => (s.œÄ.app j).comm‚ÇÅ‚ÇÇ
    have eq‚ÇÇ‚ÇÉ := fun j => (c.œÄ.app j).comm‚ÇÇ‚ÇÉ
    have eq‚ÇÇ‚ÇÉ' := fun j => (s.œÄ.app j).comm‚ÇÇ‚ÇÉ
    dsimp at eq‚ÇÅ eq‚ÇÇ eq‚ÇÉ eq‚ÇÅ‚ÇÇ eq‚ÇÅ‚ÇÇ' eq‚ÇÇ‚ÇÉ eq‚ÇÇ‚ÇÉ'
    refine' Hom.mk (h‚ÇÅ.lift (œÄ‚ÇÅ.mapCone s)) (h‚ÇÇ.lift (œÄ‚ÇÇ.mapCone s))
      (h‚ÇÉ.lift (œÄ‚ÇÉ.mapCone s)) (h‚ÇÇ.hom_ext (fun j => by
        dsimp
        rw [assoc, assoc, ‚Üê eq‚ÇÅ‚ÇÇ, reassoc_of% eq‚ÇÅ, eq‚ÇÇ, eq‚ÇÅ‚ÇÇ'])) (h‚ÇÉ.hom_ext (fun j => by
        dsimp
        rw [assoc, assoc, ‚Üê eq‚ÇÇ‚ÇÉ, reassoc_of% eq‚ÇÇ, eq‚ÇÉ, eq‚ÇÇ‚ÇÉ']))
  fac s j := by ext <;> apply IsLimit.fac
  uniq s m hm := by
    ext
    . exact h‚ÇÅ.uniq (œÄ‚ÇÅ.mapCone s) _ (fun j => œÄ‚ÇÅ.congr_map (hm j))
    . exact h‚ÇÇ.uniq (œÄ‚ÇÇ.mapCone s) _ (fun j => œÄ‚ÇÇ.congr_map (hm j))
    . exact h‚ÇÉ.uniq (œÄ‚ÇÉ.mapCone s) _ (fun j => œÄ‚ÇÉ.congr_map (hm j))

section

variable (F) [HasLimit (F ‚ãô œÄ‚ÇÅ)] [HasLimit (F ‚ãô œÄ‚ÇÇ)] [HasLimit (F ‚ãô œÄ‚ÇÉ)]

noncomputable def limitCone : Cone F :=
  Cone.mk (ShortComplex.mk (limMap (ùüô F ‚ó´ œÄ‚ÇÅToœÄ‚ÇÇ)) (limMap (ùüô F ‚ó´ œÄ‚ÇÇToœÄ‚ÇÉ)) (by aesop_cat))
    { app := fun j => Hom.mk (limit.œÄ _ _) (limit.œÄ _ _) (limit.œÄ _ _)
        (by aesop_cat) (by aesop_cat)
      naturality := fun _ _ f => by
        ext
        all_goals
          dsimp
          erw [id_comp, limit.w] }

noncomputable def isLimitœÄ‚ÇÅMapConeLimitCone : IsLimit (œÄ‚ÇÅ.mapCone (limitCone F)) :=
  (IsLimit.ofIsoLimit (limit.isLimit _) (Cones.ext (Iso.refl _) (by aesop_cat)))
noncomputable def isLimitœÄ‚ÇÇMapConeLimitCone : IsLimit (œÄ‚ÇÇ.mapCone (limitCone F)) :=
  (IsLimit.ofIsoLimit (limit.isLimit _) (Cones.ext (Iso.refl _) (by aesop_cat)))
noncomputable def isLimitœÄ‚ÇÉMapConeLimitCone : IsLimit (œÄ‚ÇÉ.mapCone (limitCone F)) :=
  (IsLimit.ofIsoLimit (limit.isLimit _) (Cones.ext (Iso.refl _) (by aesop_cat)))

noncomputable def isLimitLimitCone : IsLimit (limitCone F) :=
  isLimit_of_isLimitœÄ _ (isLimitœÄ‚ÇÅMapConeLimitCone F)
    (isLimitœÄ‚ÇÇMapConeLimitCone F) (isLimitœÄ‚ÇÉMapConeLimitCone F)

instance hasLimit_of_hasLimitœÄ : HasLimit F := ‚ü®‚ü®‚ü®_, isLimitLimitCone _‚ü©‚ü©‚ü©

noncomputable instance : PreservesLimit F œÄ‚ÇÅ :=
  preservesLimitOfPreservesLimitCone (isLimitLimitCone F) (isLimitœÄ‚ÇÅMapConeLimitCone F)
noncomputable instance : PreservesLimit F œÄ‚ÇÇ :=
  preservesLimitOfPreservesLimitCone (isLimitLimitCone F) (isLimitœÄ‚ÇÇMapConeLimitCone F)
noncomputable instance : PreservesLimit F œÄ‚ÇÉ :=
  preservesLimitOfPreservesLimitCone (isLimitLimitCone F) (isLimitœÄ‚ÇÉMapConeLimitCone F)

end

instance hasLimitsOfShape [HasLimitsOfShape J C] :
  HasLimitsOfShape J (ShortComplex C) where

instance hasFiniteLimits [HasFiniteLimits C] :
  HasFiniteLimits (ShortComplex C) := ‚ü®fun _ _ _ => inferInstance‚ü©

noncomputable instance [HasLimitsOfShape J C] : PreservesLimitsOfShape J (œÄ‚ÇÅ : _ ‚•§ C) where
noncomputable instance [HasLimitsOfShape J C] : PreservesLimitsOfShape J (œÄ‚ÇÇ : _ ‚•§ C) where
noncomputable instance [HasLimitsOfShape J C] : PreservesLimitsOfShape J (œÄ‚ÇÉ : _ ‚•§ C) where

noncomputable instance [HasFiniteLimits C] : PreservesFiniteLimits (œÄ‚ÇÅ : _ ‚•§ C) :=
  ‚ü®fun _ _ _ => inferInstance‚ü©
noncomputable instance [HasFiniteLimits C] : PreservesFiniteLimits (œÄ‚ÇÇ : _ ‚•§ C) :=
  ‚ü®fun _ _ _ => inferInstance‚ü©
noncomputable instance [HasFiniteLimits C] : PreservesFiniteLimits (œÄ‚ÇÉ : _ ‚•§ C) :=
  ‚ü®fun _ _ _ => inferInstance‚ü©

instance preservesMonomorphisms_œÄ‚ÇÅ [HasLimitsOfShape WalkingCospan C] :
  Functor.PreservesMonomorphisms (œÄ‚ÇÅ : _ ‚•§ C) :=
  CategoryTheory.preservesMonomorphisms_of_preservesLimitsOfShape _
instance preservesMonomorphisms_œÄ‚ÇÇ [HasLimitsOfShape WalkingCospan C] :
  Functor.PreservesMonomorphisms (œÄ‚ÇÇ : _ ‚•§ C) :=
  CategoryTheory.preservesMonomorphisms_of_preservesLimitsOfShape _
instance preservesMonomorphisms_œÄ‚ÇÉ [HasLimitsOfShape WalkingCospan C] :
  Functor.PreservesMonomorphisms (œÄ‚ÇÉ : _ ‚•§ C) :=
  CategoryTheory.preservesMonomorphisms_of_preservesLimitsOfShape _

def isColimit_of_isColimitœÄ (c : Cocone F)
  (h‚ÇÅ : IsColimit (œÄ‚ÇÅ.mapCocone c)) (h‚ÇÇ : IsColimit (œÄ‚ÇÇ.mapCocone c))
  (h‚ÇÉ : IsColimit (œÄ‚ÇÉ.mapCocone c)) : IsColimit c where
  desc s := by
    have eq‚ÇÅ := h‚ÇÅ.fac (œÄ‚ÇÅ.mapCocone s)
    have eq‚ÇÇ := h‚ÇÇ.fac (œÄ‚ÇÇ.mapCocone s)
    have eq‚ÇÉ := h‚ÇÉ.fac (œÄ‚ÇÉ.mapCocone s)
    have eq‚ÇÅ‚ÇÇ := fun j => (c.Œπ.app j).comm‚ÇÅ‚ÇÇ
    have eq‚ÇÅ‚ÇÇ' := fun j => (s.Œπ.app j).comm‚ÇÅ‚ÇÇ
    have eq‚ÇÇ‚ÇÉ := fun j => (c.Œπ.app j).comm‚ÇÇ‚ÇÉ
    have eq‚ÇÇ‚ÇÉ' := fun j => (s.Œπ.app j).comm‚ÇÇ‚ÇÉ
    dsimp at eq‚ÇÅ eq‚ÇÇ eq‚ÇÉ eq‚ÇÅ‚ÇÇ eq‚ÇÅ‚ÇÇ' eq‚ÇÇ‚ÇÉ eq‚ÇÇ‚ÇÉ'
    refine' Hom.mk (h‚ÇÅ.desc (œÄ‚ÇÅ.mapCocone s)) (h‚ÇÇ.desc (œÄ‚ÇÇ.mapCocone s))
      (h‚ÇÉ.desc (œÄ‚ÇÉ.mapCocone s)) (h‚ÇÅ.hom_ext (fun j => by
        dsimp
        rw [reassoc_of% (eq‚ÇÅ j), eq‚ÇÅ‚ÇÇ', reassoc_of% eq‚ÇÅ‚ÇÇ, eq‚ÇÇ])) (h‚ÇÇ.hom_ext (fun j => by
        dsimp
        rw [reassoc_of% (eq‚ÇÇ j), eq‚ÇÇ‚ÇÉ', reassoc_of% eq‚ÇÇ‚ÇÉ, eq‚ÇÉ]))
  fac s j := by
    dsimp
    ext
    . apply IsColimit.fac h‚ÇÅ
    . apply IsColimit.fac h‚ÇÇ
    . apply IsColimit.fac h‚ÇÉ
  uniq s m hm := by
    ext
    . exact h‚ÇÅ.uniq (œÄ‚ÇÅ.mapCocone s) _ (fun j => œÄ‚ÇÅ.congr_map (hm j))
    . exact h‚ÇÇ.uniq (œÄ‚ÇÇ.mapCocone s) _ (fun j => œÄ‚ÇÇ.congr_map (hm j))
    . exact h‚ÇÉ.uniq (œÄ‚ÇÉ.mapCocone s) _ (fun j => œÄ‚ÇÉ.congr_map (hm j))
section

variable (F) [HasColimit (F ‚ãô œÄ‚ÇÅ)] [HasColimit (F ‚ãô œÄ‚ÇÇ)] [HasColimit (F ‚ãô œÄ‚ÇÉ)]

noncomputable def colimitCocone : Cocone F :=
  Cocone.mk (ShortComplex.mk (colimMap (ùüô F ‚ó´ œÄ‚ÇÅToœÄ‚ÇÇ)) (colimMap (ùüô F ‚ó´ œÄ‚ÇÇToœÄ‚ÇÉ)) (by aesop_cat))
    { app := fun j => Hom.mk (colimit.Œπ (F ‚ãô œÄ‚ÇÅ) _) (colimit.Œπ (F ‚ãô œÄ‚ÇÇ) _)
          (colimit.Œπ (F ‚ãô œÄ‚ÇÉ) _) (by aesop_cat) (by aesop_cat)
      naturality := fun _ _ f => by
        ext
        . dsimp
          erw [comp_id, colimit.w (F ‚ãô œÄ‚ÇÅ)]
        . dsimp
          erw [comp_id, colimit.w (F ‚ãô œÄ‚ÇÇ)]
        . dsimp
          erw [comp_id, colimit.w (F ‚ãô œÄ‚ÇÉ)] }

noncomputable def isColimitœÄ‚ÇÅMapCoconeColimitCocone : IsColimit (œÄ‚ÇÅ.mapCocone (colimitCocone F)) :=
  (IsColimit.ofIsoColimit (colimit.isColimit _) (Cocones.ext (Iso.refl _) (by aesop_cat)))
noncomputable def isColimitœÄ‚ÇÇMapCoconeColimitCocone : IsColimit (œÄ‚ÇÇ.mapCocone (colimitCocone F)) :=
  (IsColimit.ofIsoColimit (colimit.isColimit _) (Cocones.ext (Iso.refl _) (by aesop_cat)))
noncomputable def isColimitœÄ‚ÇÉMapCoconeColimitCocone : IsColimit (œÄ‚ÇÉ.mapCocone (colimitCocone F)) :=
  (IsColimit.ofIsoColimit (colimit.isColimit _) (Cocones.ext (Iso.refl _) (by aesop_cat)))

noncomputable def isColimitColimitCocone : IsColimit (colimitCocone F) :=
  isColimit_of_isColimitœÄ _ (isColimitœÄ‚ÇÅMapCoconeColimitCocone F)
    (isColimitœÄ‚ÇÇMapCoconeColimitCocone F) (isColimitœÄ‚ÇÉMapCoconeColimitCocone F)

instance hasColimit_of_hasColimitœÄ : HasColimit F := ‚ü®‚ü®‚ü®_, isColimitColimitCocone _‚ü©‚ü©‚ü©

noncomputable instance : PreservesColimit F œÄ‚ÇÅ :=
  preservesColimitOfPreservesColimitCocone (isColimitColimitCocone F)
    (isColimitœÄ‚ÇÅMapCoconeColimitCocone F)
noncomputable instance : PreservesColimit F œÄ‚ÇÇ :=
  preservesColimitOfPreservesColimitCocone (isColimitColimitCocone F)
    (isColimitœÄ‚ÇÇMapCoconeColimitCocone F)
noncomputable instance : PreservesColimit F œÄ‚ÇÉ :=
  preservesColimitOfPreservesColimitCocone (isColimitColimitCocone F)
    (isColimitœÄ‚ÇÉMapCoconeColimitCocone F)

end

instance hasColimitsOfShape [HasColimitsOfShape J C] :
  HasColimitsOfShape J (ShortComplex C) where

instance hasFiniteColimits [HasFiniteColimits C] :
  HasFiniteColimits (ShortComplex C) := ‚ü®fun _ _ _ => inferInstance‚ü©

noncomputable instance [HasColimitsOfShape J C] : PreservesColimitsOfShape J (œÄ‚ÇÅ : _ ‚•§ C) where
noncomputable instance [HasColimitsOfShape J C] : PreservesColimitsOfShape J (œÄ‚ÇÇ : _ ‚•§ C) where
noncomputable instance [HasColimitsOfShape J C] : PreservesColimitsOfShape J (œÄ‚ÇÉ : _ ‚•§ C) where

noncomputable instance [HasFiniteColimits C] : PreservesFiniteColimits (œÄ‚ÇÅ : _ ‚•§ C) :=
  ‚ü®fun _ _ _ => inferInstance‚ü©
noncomputable instance [HasFiniteColimits C] : PreservesFiniteColimits (œÄ‚ÇÇ : _ ‚•§ C) :=
  ‚ü®fun _ _ _ => inferInstance‚ü©
noncomputable instance [HasFiniteColimits C] : PreservesFiniteColimits (œÄ‚ÇÉ : _ ‚•§ C) :=
  ‚ü®fun _ _ _ => inferInstance‚ü©

instance preservesEpimorphismsœÄ‚ÇÅ [HasColimitsOfShape WalkingSpan C] :
  Functor.PreservesEpimorphisms (œÄ‚ÇÅ : _ ‚•§ C) :=
  CategoryTheory.preservesEpimorphisms_of_preservesColimitsOfShape _
instance preservesEpimorphismsœÄ‚ÇÇ [HasColimitsOfShape WalkingSpan C] :
  Functor.PreservesEpimorphisms (œÄ‚ÇÇ : _ ‚•§ C) :=
  CategoryTheory.preservesEpimorphisms_of_preservesColimitsOfShape _
instance preservesEpimorphismsœÄ‚ÇÉ [HasColimitsOfShape WalkingSpan C] :
  Functor.PreservesEpimorphisms (œÄ‚ÇÉ : _ ‚•§ C) :=
  CategoryTheory.preservesEpimorphisms_of_preservesColimitsOfShape _

end ShortComplex

end CategoryTheory
