import Mathlib.Algebra.Homology.ShortComplex.Images
import Mathlib.Algebra.Homology.ShortComplex.ShortComplexFour
import Mathlib.CategoryTheory.Abelian.FunctorCategory
import Mathlib.CategoryTheory.ArrowThree
import Mathlib.CategoryTheory.Subobject.Lattice

open CategoryTheory Category Limits

namespace CategoryTheory

section

variable {C : Type _} [Category C] [Abelian C]

noncomputable def Over.abelianImageFunctor (X : C) : Over X ‚•§ MonoOver X where
  obj f := MonoOver.mk' (Abelian.image.Œπ f.hom)
  map œÜ := MonoOver.homMk (Abelian.image.lift _ (Abelian.image.Œπ _)
    (by rw [‚Üê cancel_epi (Abelian.factorThruImage _),
        Abelian.image.fac_assoc, comp_zero, ‚Üê Over.w œÜ, assoc,
        cokernel.condition, comp_zero])) (by simp)
  map_id X := by
    apply CostructuredArrow.hom_ext
    dsimp
    rw [‚Üê cancel_mono (Abelian.image.Œπ _), Abelian.image.lift_Œπ]
    erw [id_comp]
  map_comp œÜ œà := by
    apply CostructuredArrow.hom_ext
    change _ = _ ‚â´ _ ‚â´ _
    dsimp [MonoOver.mk', MonoOver.homMk, Over.homMk,
      CostructuredArrow.homMk, CommaMorphism.mk]
    rw [‚Üê cancel_mono (Abelian.image.Œπ _)]
    simp only [equalizer_as_kernel, Abelian.image.lift_Œπ, comp_id,
      assoc, limit.lift_œÄ, Fork.ofŒπ_pt, Fork.ofŒπ_œÄ_app]

end

namespace Arrow

lemma isIso_iff {C : Type _} [Category C] {X Y : Arrow C} (f : X ‚ü∂ Y) :
    IsIso f ‚Üî IsIso f.left ‚àß IsIso f.right := by
  constructor
  . intro hf
    constructor
    . change IsIso ((Comma.fst _ _).map f)
      infer_instance
    . change IsIso ((Comma.snd _ _).map f)
      infer_instance
  . rintro ‚ü®hf‚ÇÅ, hf‚ÇÇ‚ü©
    refine' ‚ü®CommaMorphism.mk (inv f.left) (inv f.right) _, _, _‚ü©
    . dsimp
      simp only [‚Üê cancel_epi f.left, Arrow.w_assoc f,
        IsIso.hom_inv_id_assoc, IsIso.hom_inv_id, comp_id]
    . aesop_cat
    . aesop_cat

@[simps]
noncomputable def ŒπOfHasInitial (C : Type _) [Category C] [HasInitial C] : C ‚•§ Arrow C where
  obj i := Arrow.mk (initial.to i)
  map {i j} œÜ :=
    { left := ùüô _
      right := œÜ }

end Arrow

namespace Limits

variable {C Œπ Œπ' J : Type _} [Category C] [Category Œπ] [Category Œπ'] [Category J]
  (F : Œπ' ‚•§ Œπ)

-- this should be moved to `Limits.FunctorCategory`
noncomputable instance [HasFiniteLimits C] (i : Œπ) :
  PreservesFiniteLimits ((evaluation Œπ C).obj i) := ‚ü®fun _ => inferInstance‚ü©

noncomputable instance [HasFiniteColimits C] (i : Œπ) :
  PreservesFiniteColimits ((evaluation Œπ C).obj i) := ‚ü®fun _ => inferInstance‚ü©

instance [HasZeroMorphisms C] :
    ((whiskeringLeft Œπ' Œπ C).obj F).PreservesZeroMorphisms where

noncomputable instance [HasLimitsOfShape J C] :
    PreservesLimitsOfShape J ((whiskeringLeft Œπ' Œπ C).obj F) :=
    ‚ü®fun {_} => ‚ü®fun hc => evaluationJointlyReflectsLimits _
      (fun i => isLimitOfPreserves ((evaluation Œπ C).obj (F.obj i)) hc)‚ü©‚ü©

noncomputable instance [HasColimitsOfShape J C] :
    PreservesColimitsOfShape J ((whiskeringLeft Œπ' Œπ C).obj F) :=
    ‚ü®fun {_} => ‚ü®fun hc => evaluationJointlyReflectsColimits _
      (fun i => isColimitOfPreserves ((evaluation Œπ C).obj (F.obj i)) hc)‚ü©‚ü©

noncomputable instance [HasFiniteLimits C] :
    PreservesFiniteLimits ((whiskeringLeft Œπ' Œπ C).obj F) :=
  ‚ü®fun _ => by infer_instance‚ü©

noncomputable instance [HasFiniteColimits C] :
    PreservesFiniteColimits ((whiskeringLeft Œπ' Œπ C).obj F) :=
  ‚ü®fun _ => by infer_instance‚ü©

instance [HasFiniteColimits C] {X Y : Œπ ‚•§ C} (œÑ : X ‚ü∂ Y) [Epi œÑ] :
    Epi (whiskerLeft F œÑ) := ((whiskeringLeft Œπ' Œπ C).obj F).map_epi œÑ

instance [HasFiniteLimits C] {X Y : Œπ ‚•§ C} (œÑ : X ‚ü∂ Y) [Mono œÑ] :
  Mono (whiskerLeft F œÑ) := ((whiskeringLeft Œπ' Œπ C).obj F).map_mono œÑ

instance [HasFiniteColimits C] {X Y : Œπ ‚•§ C} (œÑ : X ‚ü∂ Y) [Epi œÑ] (i : Œπ) :
    Epi (œÑ.app i) :=
  ((evaluation Œπ C).obj i).map_epi œÑ

instance [HasFiniteLimits C] {X Y : Œπ ‚•§ C} (œÑ : X ‚ü∂ Y) [Mono œÑ] (i : Œπ) :
    Mono (œÑ.app i) :=
  ((evaluation Œπ C).obj i).map_mono œÑ

end Limits

end CategoryTheory


variable {C Œπ : Type _} [Category C] [Abelian C] [Category Œπ]

namespace CategoryTheory

namespace Abelian

lemma exact_iff_exact_evaluation (S : ShortComplex (Œπ ‚•§ C)) :
    S.Exact ‚Üî ‚àÄ (i : Œπ), (S.map ((evaluation Œπ C).obj i)).Exact := by
  simp only [ShortComplex.exact_iff_isZero_homology,
    fun i => Iso.isZero_iff (S.mapHomologyIso ((evaluation Œπ C).obj i)),
    evaluation_obj_obj, Functor.isZero_iff]

variable (C Œπ)

structure SpectralObject where
  H (n : ‚Ñ§) : Arrow Œπ ‚•§ C
  Œ¥ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) : Arrow‚ÇÇ.Œ¥‚ÇÄ ‚ãô H n‚ÇÄ ‚ü∂ Arrow‚ÇÇ.Œ¥‚ÇÇ ‚ãô H n‚ÇÅ
  zero‚ÇÅ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (D : Arrow‚ÇÇ Œπ) :
    (Œ¥ n‚ÇÄ n‚ÇÅ h).app D ‚â´ (H n‚ÇÅ).map (Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ.app D) = 0
  zero‚ÇÇ (n : ‚Ñ§) (D : Arrow‚ÇÇ Œπ) :
    (H n).map (Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ.app D) ‚â´ (H n).map (Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ.app D) = 0
  zero‚ÇÉ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (D : Arrow‚ÇÇ Œπ) :
    (H n‚ÇÄ).map (Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ.app D) ‚â´ (Œ¥ n‚ÇÄ n‚ÇÅ h).app D = 0
  exact‚ÇÅ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (D : Arrow‚ÇÇ Œπ) :
    (ShortComplex.mk _ _ (zero‚ÇÅ n‚ÇÄ n‚ÇÅ h D)).Exact
  exact‚ÇÇ (n : ‚Ñ§) (D : Arrow‚ÇÇ Œπ) :
    (ShortComplex.mk _ _ (zero‚ÇÇ n D)).Exact
  exact‚ÇÉ (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (D : Arrow‚ÇÇ Œπ) :
    (ShortComplex.mk _ _ (zero‚ÇÉ n‚ÇÄ n‚ÇÅ h D)).Exact

namespace SpectralObject

pp_extended_field_notation H
pp_extended_field_notation Œ¥

attribute [reassoc (attr := simp)] zero‚ÇÅ zero‚ÇÇ zero‚ÇÉ

variable {C Œπ}
variable (X : SpectralObject C Œπ)

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)

lemma Œ¥_app_eq_zero (D : Arrow‚ÇÇ Œπ) (h : IsIso D.f) :
    (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D = 0 := by
  have : IsIso (Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ.app D) := by
    rw [Arrow.isIso_iff]
    dsimp [Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ]
    constructor <;> infer_instance
  simpa only [Preadditive.IsIso.comp_left_eq_zero] using X.zero‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ D

lemma Œ¥_app_eq_zero' (D : Arrow‚ÇÇ Œπ) (h : IsIso D.g) :
    (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D = 0 := by
  have : IsIso (Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ.app D) := by
    rw [Arrow.isIso_iff]
    dsimp [Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ]
    constructor <;> infer_instance
  simpa only [Preadditive.IsIso.comp_right_eq_zero] using X.zero‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ D

lemma isZero_H_id (i : Œπ) : IsZero ((X.H n‚ÇÄ).obj (Arrow.mk (ùüô i))) := by
  rw [IsZero.iff_id_eq_zero, ‚Üê Functor.map_id, ‚Üê X.zero‚ÇÇ n‚ÇÄ (Arrow‚ÇÇ.mk (ùüô i) (ùüô i)),
    ‚Üê Functor.map_comp]
  congr 1
  dsimp [Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ, Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ]
  ext <;> simp

lemma isZero_H_of_isIso (D : Arrow Œπ) (hD : IsIso D.hom) :
    IsZero ((X.H n‚ÇÄ).obj D) := by
  refine' IsZero.of_iso (X.isZero_H_id n‚ÇÄ D.left) ((X.H n‚ÇÄ).mapIso _)
  exact Arrow.isoMk (Iso.refl _) (asIso D.hom).symm (by simp)

@[reassoc]
lemma zero‚ÇÉ' {i j k : Œπ} (f : i ‚ü∂ j) (g : j ‚ü∂ k) (fg : i ‚ü∂ k)
    (hfg : f ‚â´ g = fg) (œÜ : Arrow.mk fg ‚ü∂ Arrow.mk g) (hœÜ‚ÇÅ : œÜ.left = f) (hœÜ‚ÇÇ : œÜ.right = ùüô k) :
      (X.H n‚ÇÄ).map œÜ ‚â´ (X.Œ¥ n‚ÇÄ n‚ÇÅ h).app (Arrow‚ÇÇ.mk f g) = 0 := by
  subst hfg
  obtain rfl : œÜ = (Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ.app (Arrow‚ÇÇ.mk f g)) := by
    ext
    . exact hœÜ‚ÇÅ
    . exact hœÜ‚ÇÇ
  refine' X.zero‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ _

def shortComplex‚ÇÅ : ShortComplex (Arrow‚ÇÇ Œπ ‚•§ C):=
  ShortComplex.mk (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) (whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ (X.H n‚ÇÅ))
     (by
      ext D
      exact X.zero‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ D)

pp_extended_field_notation shortComplex‚ÇÅ

def shortComplex‚ÇÇ : ShortComplex (Arrow‚ÇÇ Œπ ‚•§ C):=
  ShortComplex.mk (whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ (X.H n‚ÇÄ))
    (whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.H n‚ÇÄ)) (by
      ext D
      exact X.zero‚ÇÇ n‚ÇÄ D)

pp_extended_field_notation shortComplex‚ÇÇ

def shortComplex‚ÇÉ : ShortComplex (Arrow‚ÇÇ Œπ ‚•§ C) :=
  ShortComplex.mk  (whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.H n‚ÇÄ)) (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ)
     (by
      ext D
      exact X.zero‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ D)

pp_extended_field_notation shortComplex‚ÇÉ

lemma shortComplex‚ÇÅ_exact : (X.shortComplex‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact := by
  rw [exact_iff_exact_evaluation]
  intro i
  apply X.exact‚ÇÅ

lemma shortComplex‚ÇÇ_exact : (X.shortComplex‚ÇÇ n‚ÇÄ).Exact := by
  rw [exact_iff_exact_evaluation]
  intro i
  apply X.exact‚ÇÇ

lemma shortComplex‚ÇÉ_exact : (X.shortComplex‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact := by
  rw [exact_iff_exact_evaluation]
  intro i
  apply X.exact‚ÇÉ

def shortComplex‚ÇÑ : ShortComplex‚ÇÑ (Arrow‚ÇÇ Œπ ‚•§ C) :=
  ShortComplex‚ÇÑ.mk
    (whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ (X.H n‚ÇÄ))
    (whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.H n‚ÇÄ))
    (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ)
    (X.shortComplex‚ÇÇ n‚ÇÄ).zero
    (X.shortComplex‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).zero

pp_extended_field_notation shortComplex‚ÇÑ

lemma shortComplex‚ÇÑ_exact : (X.shortComplex‚ÇÑ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact where
  exact‚ÇÅ := X.shortComplex‚ÇÇ_exact n‚ÇÄ
  exact‚ÇÇ := X.shortComplex‚ÇÉ_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ

def shortComplexE : ShortComplex (Arrow‚ÇÉ Œπ ‚•§ C) where
  X‚ÇÅ := Arrow‚ÇÉ.hMor ‚ãô X.H n‚ÇÄ
  X‚ÇÇ := Arrow‚ÇÉ.gMor ‚ãô X.H n‚ÇÅ
  X‚ÇÉ := Arrow‚ÇÉ.fMor ‚ãô X.H n‚ÇÇ
  f := whiskerLeft (Arrow‚ÇÉ.Œ¥‚ÇÄ) (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ)
  g := whiskerLeft (Arrow‚ÇÉ.Œ¥‚ÇÉ) (X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ)
  zero := by
    ext D
    have eq := (X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).naturality (Arrow‚ÇÉ.Œ¥‚ÇÉToŒ¥‚ÇÇ.app D)
    dsimp at eq ‚ä¢
    simp only [Arrow‚ÇÉ.Œ¥‚ÇÇ_map_Œ¥‚ÇÉToŒ¥‚ÇÇ_app, Arrow‚ÇÇ.Œ¥‚ÇÇ_obj, Arrow‚ÇÉ.Œ¥‚ÇÉ_obj_f,
      Functor.map_id, comp_id] at eq
    rw [‚Üê eq, Arrow‚ÇÉ.Œ¥‚ÇÄ_map_Œ¥‚ÇÉToŒ¥‚ÇÇ_app_eq_Œ¥‚ÇÇToŒ¥‚ÇÅ_app_Œ¥‚ÇÄ_obj,
      reassoc_of% (X.zero‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ (Arrow‚ÇÉ.Œ¥‚ÇÄ.obj D)), zero_comp]

-- the homology of this short complex gives the terms in all the pages of the spectral sequence
def shortComplexEObj (D : Arrow‚ÇÉ Œπ) : ShortComplex C :=
  ShortComplex.mk ((X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÇ.mk D.g D.h))
    ((X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).app (Arrow‚ÇÇ.mk D.f D.g))
    (congr_app (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).zero D)

pp_extended_field_notation shortComplexE

noncomputable def E : Arrow‚ÇÉ Œπ ‚•§ C := (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).homology

pp_extended_field_notation E

noncomputable def EObjIso (D : Arrow‚ÇÉ Œπ) :
    (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj D ‚âÖ (X.shortComplexEObj n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ D).homology :=
  ((X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).mapHomologyIso ((evaluation (Arrow‚ÇÉ Œπ) C).obj D)).symm

pp_extended_field_notation EObjIso

-- this is helpful in order to compute the initial page of the spectral sequence
noncomputable def EObjIsoH (D : Arrow‚ÇÉ Œπ) (h‚ÇÅ : IsIso D.f) (h‚ÇÇ : IsIso D.h) :
    (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj D ‚âÖ (X.H n‚ÇÅ).obj (Arrow.mk D.g) :=
  X.EObjIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ D ‚â™‚â´
    (ShortComplex.HomologyData.ofZeros (X.shortComplexEObj n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ D)
      (X.Œ¥_app_eq_zero' n‚ÇÄ n‚ÇÅ hn‚ÇÅ _ h‚ÇÇ) ((X.Œ¥_app_eq_zero n‚ÇÅ n‚ÇÇ hn‚ÇÇ _ h‚ÇÅ))).left.homologyIso

pp_extended_field_notation EObjIsoH

noncomputable def cycles : Arrow‚ÇÇ Œπ ‚•§ C := kernel (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ)
noncomputable def cyclesCo : Arrow‚ÇÇ Œπ ‚•§ C := cokernel (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ)

pp_extended_field_notation cycles
pp_extended_field_notation cyclesCo

noncomputable def iCycles : X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚ü∂ Arrow‚ÇÇ.Œ¥‚ÇÄ ‚ãô X.H n‚ÇÄ := kernel.Œπ _
noncomputable def pCyclesCo : Arrow‚ÇÇ.Œ¥‚ÇÇ ‚ãô X.H n‚ÇÅ ‚ü∂ X.cyclesCo n‚ÇÄ n‚ÇÅ hn‚ÇÅ := cokernel.œÄ _

@[reassoc (attr := simp)]
lemma iCycles_comp_Œ¥ : X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚â´ X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ = 0 :=
  kernel.condition _

@[reassoc (attr := simp)]
lemma iCycles_comp_Œ¥_app (D : Arrow‚ÇÇ Œπ) :
    (X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D ‚â´ (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D = 0 :=
  congr_app (X.iCycles_comp_Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) D

@[reassoc (attr := simp)]
lemma Œ¥_comp_pCyclesCo : X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚â´ X.pCyclesCo n‚ÇÄ n‚ÇÅ hn‚ÇÅ = 0 :=
  cokernel.condition _

@[reassoc (attr := simp)]
lemma Œ¥_comp_pCyclesCo_app (D : Arrow‚ÇÇ Œπ) :
    (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D ‚â´ (X.pCyclesCo n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D = 0 :=
  congr_app (X.Œ¥_comp_pCyclesCo n‚ÇÄ n‚ÇÅ hn‚ÇÅ) D

pp_extended_field_notation iCycles
pp_extended_field_notation pCyclesCo

instance : Mono (X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ) := by
  dsimp only [iCycles]
  infer_instance

instance : Epi (X.pCyclesCo n‚ÇÄ n‚ÇÅ hn‚ÇÅ) := by
  dsimp only [pCyclesCo]
  infer_instance

noncomputable def cokernelIsoCycles :
    cokernel (whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ (X.H n‚ÇÄ)) ‚âÖ X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ :=
  (X.shortComplex‚ÇÑ_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).cokerIsoKer

pp_extended_field_notation cokernelIsoCycles

noncomputable def HŒ¥‚ÇÅToCycles : Arrow‚ÇÇ.Œ¥‚ÇÅ ‚ãô X.H n‚ÇÄ ‚ü∂ X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ :=
  cokernel.œÄ _ ‚â´ (X.cokernelIsoCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).hom

pp_extended_field_notation HŒ¥‚ÇÅToCycles

instance : Epi (X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ) := by
  dsimp [HŒ¥‚ÇÅToCycles]
  apply epi_comp

@[reassoc (attr := simp)]
lemma HŒ¥‚ÇÅToCycles_iCycles :
    X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚â´ X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ = whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.H n‚ÇÄ) := by
  dsimp only [HŒ¥‚ÇÅToCycles]
  rw [assoc]
  exact (X.shortComplex‚ÇÑ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).cokerToKer_fac

@[reassoc (attr := simp)]
lemma HŒ¥‚ÇÇToŒ¥‚ÇÅ_HŒ¥‚ÇÅToCycles :
    whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ (X.H n‚ÇÄ) ‚â´ X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ = 0 := by
  rw [‚Üê cancel_mono (X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ), assoc, HŒ¥‚ÇÅToCycles_iCycles, zero_comp]
  exact (X.shortComplex‚ÇÇ n‚ÇÄ).zero

@[simps]
noncomputable def cokernelSequenceCycles : ShortComplex (Arrow‚ÇÇ Œπ ‚•§ C) :=
  ShortComplex.mk _ _ (X.HŒ¥‚ÇÇToŒ¥‚ÇÅ_HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ)

pp_extended_field_notation cokernelSequenceCycles

instance : Epi (X.cokernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).g := by
  dsimp only [cokernelSequenceCycles]
  infer_instance

lemma cokernelSequenceCycles_exact : (X.cokernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact := by
  apply ShortComplex.exact_of_g_is_cokernel
  exact IsColimit.ofIsoColimit (cokernelIsCokernel _)
    (Cofork.ext (X.cokernelIsoCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ) (by simp [HŒ¥‚ÇÅToCycles]))

@[simps!]
noncomputable def Œ¥‚ÇÄPullbackCokernelSequenceCycles :
    ShortComplex (Arrow‚ÇÉ Œπ ‚•§ C) :=
  (X.cokernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).map (((whiskeringLeft _ _ C).obj (Arrow‚ÇÉ.Œ¥‚ÇÄ)))

pp_extended_field_notation Œ¥‚ÇÄPullbackCokernelSequenceCycles

instance : Epi (X.Œ¥‚ÇÄPullbackCokernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).g := by
  dsimp [Œ¥‚ÇÄPullbackCokernelSequenceCycles]
  infer_instance

lemma Œ¥‚ÇÄPullbackCokernelSequenceCycles_exact :
    (X.Œ¥‚ÇÄPullbackCokernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact :=
  (X.cokernelSequenceCycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).map (((whiskeringLeft _ _ C).obj (Arrow‚ÇÉ.Œ¥‚ÇÄ)))

noncomputable def Œ® : Arrow‚ÇÉ.Œ¥‚ÇÄ ‚ãô X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚ü∂ Arrow‚ÇÉ.Œ¥‚ÇÉ ‚ãô X.cyclesCo n‚ÇÄ n‚ÇÅ hn‚ÇÅ :=
  (X.Œ¥‚ÇÄPullbackCokernelSequenceCycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).desc
    (whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÇ (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) ‚â´ whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÉ (X.pCyclesCo n‚ÇÄ n‚ÇÅ hn‚ÇÅ)) (by
      ext A
      dsimp
      erw [reassoc_of% ((X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).naturality (Arrow‚ÇÉ.Œ¥‚ÇÉToŒ¥‚ÇÇ.app A)), Functor.map_id]
      rw [id_comp, ‚Üê NatTrans.comp_app, Œ¥_comp_pCyclesCo, zero_app])

pp_extended_field_notation Œ®

lemma comp_Œ® : (X.Œ¥‚ÇÄPullbackCokernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).g ‚â´ X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ =
    (whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÇ (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) ‚â´ whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÉ (X.pCyclesCo n‚ÇÄ n‚ÇÅ hn‚ÇÅ)) :=
  (X.Œ¥‚ÇÄPullbackCokernelSequenceCycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).g_desc _ _

@[reassoc (attr := simp)]
lemma comp_œà_app (D : Arrow‚ÇÉ Œπ) :
  (X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÉ.Œ¥‚ÇÄ.obj D) ‚â´ (X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D =
    (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÉ.Œ¥‚ÇÇ.obj D) ‚â´ (X.pCyclesCo n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÉ.Œ¥‚ÇÉ.obj D) :=
  congr_app (X.comp_Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ) D

@[simps]
noncomputable def shortComplex‚ÇÑŒ® : ShortComplex‚ÇÑ (Arrow‚ÇÉ Œπ ‚•§ C) where
  X‚ÇÅ := Arrow‚ÇÉ.Œ¥‚ÇÅ ‚ãô X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ
  X‚ÇÇ := Arrow‚ÇÉ.Œ¥‚ÇÄ ‚ãô X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ
  X‚ÇÉ := Arrow‚ÇÉ.Œ¥‚ÇÉ ‚ãô X.cyclesCo n‚ÇÄ n‚ÇÅ hn‚ÇÅ
  X‚ÇÑ := Arrow‚ÇÉ.Œ¥‚ÇÇ ‚ãô X.cyclesCo n‚ÇÄ n‚ÇÅ hn‚ÇÅ
  f := whiskerRight Arrow‚ÇÉ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ)
  g := X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ
  h := whiskerRight Arrow‚ÇÉ.Œ¥‚ÇÉToŒ¥‚ÇÇ (X.cyclesCo n‚ÇÄ n‚ÇÅ hn‚ÇÅ)
  zero‚ÇÅ := by
    ext D
    simp only [Functor.comp_obj, NatTrans.comp_app, whiskerRight_app, zero_app,
      ‚Üê cancel_epi ((X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app _), comp_zero, ‚Üê NatTrans.naturality_assoc,
      comp_œà_app, Functor.comp_map]
    erw [X.zero‚ÇÉ'_assoc n‚ÇÄ n‚ÇÅ hn‚ÇÅ _ _ _ _ _ rfl (by rfl), zero_comp]
    dsimp
    rw [assoc]
  zero‚ÇÇ := by
    ext D
    rw [‚Üê cancel_epi ((X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÉ.Œ¥‚ÇÄ.obj D))]
    simp only [zero_app, comp_zero, NatTrans.comp_app, comp_œà_app_assoc, whiskerRight_app,
      ‚Üê NatTrans.naturality, Functor.comp_map, Arrow‚ÇÉ.Œ¥‚ÇÇ_map_Œ¥‚ÇÉToŒ¥‚ÇÇ_app, Functor.map_id,
      Functor.comp_obj, id_comp, Œ¥_comp_pCyclesCo_app]

pp_extended_field_notation shortComplex‚ÇÑŒ®

/-lemma shortComplex‚ÇÑŒ®_exact : (X.shortComplex‚ÇÑŒ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact where
  exact‚ÇÅ := by
    rw [exact_iff_exact_evaluation]
    rintro ‚ü®f‚ÇÅ, f‚ÇÇ, f‚ÇÉ‚ü©
    rw [ShortComplex.exact_iff_exact_up_to_refinements]
    dsimp
    intro A‚ÇÄ x‚ÇÄ hx‚ÇÄ
    dsimp [Arrow‚ÇÉ.Œ¥‚ÇÄ] at x‚ÇÄ hx‚ÇÄ
    obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, hœÄ‚ÇÅ, x‚ÇÅ, fac‚ü© := surjective_up_to_refinements_of_epi
      ((X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÇ.mk f‚ÇÇ f‚ÇÉ)) x‚ÇÄ
    sorry
  exact‚ÇÇ := sorry

noncomputable def Œ¶ : cokernel (whiskerRight Arrow‚ÇÉ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ)) ‚âÖ
    kernel (whiskerRight Arrow‚ÇÉ.Œ¥‚ÇÉToŒ¥‚ÇÇ (X.cyclesCo n‚ÇÄ n‚ÇÅ hn‚ÇÅ)) :=
  (X.shortComplex‚ÇÑŒ®_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).cokerIsoKer

pp_extended_field_notation Œ¶-/

section Convergence

variable [HasInitial Œπ] [HasTerminal Œπ]

noncomputable def EInfty : (Arrow Œπ ‚•§ C) := Arrow‚ÇÉ.ŒπArrow Œπ ‚ãô X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ

pp_extended_field_notation EInfty

noncomputable def abutment (n : ‚Ñ§) : C := (X.H n).obj (Arrow.mk (initial.to (‚ä§_ Œπ)))

pp_extended_field_notation abutment

noncomputable def overAbutment (n : ‚Ñ§) : Œπ ‚•§ Over (X.abutment n) where
  obj i := Over.mk ((X.H n).map ((Arrow.ŒπOfHasInitial Œπ).map (terminal.from i)))
  map {i j} œÜ := Over.homMk ((X.H n).map ((Arrow.ŒπOfHasInitial Œπ).map œÜ)) (by
    dsimp
    simp only [‚Üê Functor.map_comp]
    congr
    simp)
  map_id _ := by ext ; dsimp ; simp
  map_comp _ _ := by ext ; dsimp ; simp

pp_extended_field_notation overAbutment

noncomputable def filtration (n : ‚Ñ§) : Œπ ‚•§ Subobject (X.abutment n) :=
  X.overAbutment n ‚ãô Over.abelianImageFunctor _ ‚ãô toThinSkeleton _

pp_extended_field_notation filtration

class IsStationary (Œ≥‚ÇÅ Œ≥‚ÇÇ : ‚Ñ§ ‚Üí Œπ) where
  isZero‚ÇÅ' (n : ‚Ñ§) {i j : Œπ} (g : i ‚ü∂ j) (Œ± : j ‚ü∂ Œ≥‚ÇÅ n) : IsZero ((X.H n).obj (Arrow.mk g))
  isZero‚ÇÇ' (n : ‚Ñ§) {i j : Œπ} (g : i ‚ü∂ j) (Œ≤ : Œ≥‚ÇÇ n ‚ü∂ i) : IsZero ((X.H n).obj (Arrow.mk g))

variable (Œ≥‚ÇÅ Œ≥‚ÇÇ : ‚Ñ§ ‚Üí Œπ) [hX : X.IsStationary Œ≥‚ÇÅ Œ≥‚ÇÇ]

lemma isZero‚ÇÅ_H (n : ‚Ñ§) {i j : Œπ} (g : i ‚ü∂ j) (Œ± : j ‚ü∂ Œ≥‚ÇÅ n) :
    IsZero ((X.H n).obj (Arrow.mk g)) :=
  hX.isZero‚ÇÅ' n g Œ±

lemma mono_H_map‚ÇÅ (n : ‚Ñ§) {D‚ÇÅ D‚ÇÇ : Arrow Œπ} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) (hœÜ : IsIso œÜ.right)
    (Œ± : D‚ÇÇ.left ‚ü∂ Œ≥‚ÇÅ n) : Mono ((X.H n).map œÜ) := by
  let D‚ÇÅ' := Arrow.mk (œÜ.left ‚â´ D‚ÇÇ.hom)
  let œÜ' : D‚ÇÅ' ‚ü∂ D‚ÇÇ :=
    { left := œÜ.left
      right := ùüô _
      w := by simp }
  suffices Mono ((X.H n).map œÜ') by
    let œà : D‚ÇÅ ‚ü∂ D‚ÇÅ' :=
      { left := ùüô _
        right := œÜ.right
        w := by simp }
    have := (Arrow.isIso_iff œà).2 ‚ü®inferInstance, inferInstance‚ü©
    have hœÜ : œÜ = œà ‚â´ œÜ' := by ext <;> dsimp <;> simp
    rw [hœÜ, Functor.map_comp]
    apply mono_comp
  exact (ShortComplex.exact_iff_mono _
    (IsZero.eq_of_src (X.isZero‚ÇÅ_H Œ≥‚ÇÅ Œ≥‚ÇÇ _ _ Œ±) _ _)).1
      (X.exact‚ÇÇ n (Arrow‚ÇÇ.mk œÜ.left D‚ÇÇ.hom))

lemma epi_H_map‚ÇÅ (n : ‚Ñ§) {D‚ÇÅ D‚ÇÇ : Arrow Œπ} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) (hœÜ : IsIso œÜ.right)
    (n' : ‚Ñ§) (hn' : n + 1 = n') (Œ± : D‚ÇÇ.left ‚ü∂ Œ≥‚ÇÅ n') : Epi ((X.H n).map œÜ) := by
  let D‚ÇÅ' := Arrow.mk (œÜ.left ‚â´ D‚ÇÇ.hom)
  let œÜ' : D‚ÇÅ' ‚ü∂ D‚ÇÇ :=
    { left := œÜ.left
      right := ùüô _
      w := by simp }
  suffices Epi ((X.H n).map œÜ') by
    let œà : D‚ÇÅ ‚ü∂ D‚ÇÅ' :=
      { left := ùüô _
        right := œÜ.right
        w := by simp }
    have := (Arrow.isIso_iff œà).2 ‚ü®inferInstance, inferInstance‚ü©
    have hœÜ : œÜ = œà ‚â´ œÜ' := by ext <;> dsimp <;> simp
    rw [hœÜ, Functor.map_comp]
    apply epi_comp
  exact (ShortComplex.exact_iff_epi _
    (IsZero.eq_of_tgt (X.isZero‚ÇÅ_H Œ≥‚ÇÅ Œ≥‚ÇÇ _ _ Œ±) _ _)).1
      (X.exact‚ÇÉ n n' hn' (Arrow‚ÇÇ.mk œÜ.left D‚ÇÇ.hom))

lemma isIso_H_map‚ÇÅ (n : ‚Ñ§) {D‚ÇÅ D‚ÇÇ : Arrow Œπ} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) (hœÜ : IsIso œÜ.right)
    (Œ± : D‚ÇÇ.left ‚ü∂ Œ≥‚ÇÅ n) (n' : ‚Ñ§) (hn' : n + 1 = n') (Œ±' : D‚ÇÇ.left ‚ü∂ Œ≥‚ÇÅ n') :
    IsIso ((X.H n).map œÜ) := by
  have := X.mono_H_map‚ÇÅ Œ≥‚ÇÅ Œ≥‚ÇÇ n œÜ hœÜ Œ±
  have := X.epi_H_map‚ÇÅ Œ≥‚ÇÅ Œ≥‚ÇÇ n œÜ hœÜ n' hn' Œ±'
  apply isIso_of_mono_of_epi

lemma isZero_overAbutment_obj (n : ‚Ñ§) (i : Œπ) (Œ± : i ‚ü∂ Œ≥‚ÇÅ n) :
    IsZero ((X.overAbutment n ‚ãô Over.forget _).obj i) := by
  let œÜ : Arrow.mk (initial.to i) ‚ü∂ Arrow.mk (ùüô i) :=
    { left := initial.to i
      right := ùüô _
      w := by simp }
  have := X.mono_H_map‚ÇÅ Œ≥‚ÇÅ Œ≥‚ÇÇ n œÜ (by dsimp ; infer_instance) Œ±
  rw [IsZero.iff_id_eq_zero, ‚Üê cancel_mono ((X.H n).map œÜ)]
  exact IsZero.eq_of_tgt (X.isZero_H_of_isIso n _ (by dsimp ; infer_instance)) _ _

lemma filtration_obj_eq_bot (n : ‚Ñ§) (i : Œπ) (Œ± : i ‚ü∂ Œ≥‚ÇÅ n) :
    (X.filtration n).obj i = ‚ä• := by
  erw [Subobject.mk_eq_bot_iff_zero]
  rw [‚Üê cancel_epi (Abelian.factorThruImage _), comp_zero, kernel.lift_Œπ]
  exact IsZero.eq_of_src (X.isZero_overAbutment_obj Œ≥‚ÇÅ Œ≥‚ÇÇ n i Œ±) _ _

lemma isZero‚ÇÇ_H (n : ‚Ñ§) {i j : Œπ} (g : i ‚ü∂ j) (Œ≤ : Œ≥‚ÇÇ n ‚ü∂ i) :
    IsZero ((X.H n).obj (Arrow.mk g)) :=
  hX.isZero‚ÇÇ' n g Œ≤

lemma epi_H_map‚ÇÇ (n : ‚Ñ§) {D‚ÇÅ D‚ÇÇ : Arrow Œπ} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) (hœÜ : IsIso œÜ.left)
    (Œ≤ : Œ≥‚ÇÇ n ‚ü∂ D‚ÇÅ.right) : Epi ((X.H n).map œÜ) := by
  let D‚ÇÇ' := Arrow.mk (D‚ÇÅ.hom ‚â´ œÜ.right)
  let œÜ' : D‚ÇÅ ‚ü∂ D‚ÇÇ' :=
    { left := ùüô _
      right := œÜ.right
      w := by simp }
  suffices Epi ((X.H n).map œÜ') by
    let œà : D‚ÇÇ' ‚ü∂ D‚ÇÇ :=
      { left := œÜ.left
        right := ùüô _
        w := by simp }
    have := (Arrow.isIso_iff œà).2 ‚ü®inferInstance, inferInstance‚ü©
    have hœÜ : œÜ = œÜ' ‚â´ œà := by ext <;> dsimp <;> simp
    rw [hœÜ, Functor.map_comp]
    apply epi_comp
  exact (ShortComplex.exact_iff_epi _
    (IsZero.eq_of_tgt (X.isZero‚ÇÇ_H Œ≥‚ÇÅ Œ≥‚ÇÇ _ _ Œ≤) _ _)).1
      (X.exact‚ÇÇ n (Arrow‚ÇÇ.mk D‚ÇÅ.hom œÜ.right))

lemma mono_H_map‚ÇÇ (n : ‚Ñ§) {D‚ÇÅ D‚ÇÇ : Arrow Œπ} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) (hœÜ : IsIso œÜ.left)
    (n' : ‚Ñ§) (hn' : n' + 1 = n) (Œ≤ : Œ≥‚ÇÇ n' ‚ü∂ D‚ÇÅ.right) :
    Mono ((X.H n).map œÜ) := by
  let D‚ÇÇ' := Arrow.mk (D‚ÇÅ.hom ‚â´ œÜ.right)
  let œÜ' : D‚ÇÅ ‚ü∂ D‚ÇÇ' :=
    { left := ùüô _
      right := œÜ.right
      w := by simp }
  suffices Mono ((X.H n).map œÜ') by
    let œà : D‚ÇÇ' ‚ü∂ D‚ÇÇ :=
      { left := œÜ.left
        right := ùüô _
        w := by simp }
    have := (Arrow.isIso_iff œà).2 ‚ü®inferInstance, inferInstance‚ü©
    have hœÜ : œÜ = œÜ' ‚â´ œà := by ext <;> dsimp <;> simp
    rw [hœÜ, Functor.map_comp]
    apply mono_comp
  exact (ShortComplex.exact_iff_mono _
    (IsZero.eq_of_src (X.isZero‚ÇÇ_H Œ≥‚ÇÅ Œ≥‚ÇÇ _ _ Œ≤) _ _)).1
      (X.exact‚ÇÅ n' n hn' (Arrow‚ÇÇ.mk D‚ÇÅ.hom œÜ.right))

lemma isIso_H_map‚ÇÇ (n : ‚Ñ§) {D‚ÇÅ D‚ÇÇ : Arrow Œπ} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) (hœÜ : IsIso œÜ.left)
    (Œ≤ : Œ≥‚ÇÇ n ‚ü∂ D‚ÇÅ.right)
    (n' : ‚Ñ§) (hn' : n' + 1 = n) (Œ≤' : Œ≥‚ÇÇ n' ‚ü∂ D‚ÇÅ.right) :
    IsIso ((X.H n).map œÜ) := by
  have := X.epi_H_map‚ÇÇ Œ≥‚ÇÅ Œ≥‚ÇÇ n œÜ hœÜ Œ≤
  have := X.mono_H_map‚ÇÇ Œ≥‚ÇÅ Œ≥‚ÇÇ n œÜ hœÜ n' hn' Œ≤'
  apply isIso_of_mono_of_epi

lemma epi_overAbutment_obj_hom (n : ‚Ñ§) (i : Œπ) (Œ≤ : Œ≥‚ÇÇ n ‚ü∂ i) :
    Epi ((X.overAbutment n).obj i).hom :=
  X.epi_H_map‚ÇÇ Œ≥‚ÇÅ Œ≥‚ÇÇ n _ (by dsimp ; infer_instance) Œ≤

lemma isIso_overAbutment_obj_hom (n : ‚Ñ§) (i : Œπ) (Œ≤ : Œ≥‚ÇÇ n ‚ü∂ i)
    (n' : ‚Ñ§) (hn' : n' + 1 = n) (Œ≤' : Œ≥‚ÇÇ n' ‚ü∂ i) :
    IsIso ((X.overAbutment n).obj i).hom :=
  X.isIso_H_map‚ÇÇ Œ≥‚ÇÅ Œ≥‚ÇÇ n _ (by dsimp ; infer_instance) Œ≤ n' hn' Œ≤'

lemma filtration_obj_eq_top (n : ‚Ñ§) (i : Œπ) (Œ≤ : Œ≥‚ÇÇ n ‚ü∂ i) :
    (X.filtration n).obj i = ‚ä§ := by
  erw [‚Üê Subobject.isIso_iff_mk_eq_top]
  have := X.epi_overAbutment_obj_hom Œ≥‚ÇÅ Œ≥‚ÇÇ n i Œ≤
  have := epi_of_epi_fac (image.fac ((X.overAbutment n).obj i).hom)
  apply isIso_of_mono_of_epi

end Convergence

end SpectralObject

end Abelian

end CategoryTheory
