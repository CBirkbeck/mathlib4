import Mathlib.Algebra.Homology.SpectralSequence.Basic
import Mathlib.Algebra.Homology.SpectralSequence.SpectralObject
import Mathlib.Algebra.Homology.SpectralSequence.ZTilde

open CategoryTheory Category Limits

variable {C : Type _} [Category C] [Abelian C]

namespace CategoryTheory

namespace Abelian

namespace SpectralObject

open CohomologicalSpectralSequence

variable (X : SpectralObject C ‚Ñ§t)

@[simps]
def Bounds.quadrantUR (p q : ‚Ñ§) : Bounds ‚Ñ§t where
  Œ≥‚ÇÅ _ := ‚Ñ§t.mk q
  Œ≥‚ÇÇ n := ‚Ñ§t.mk (n - p + 1)

abbrev Bounds.firstQuadrant := Bounds.quadrantUR 0 0

namespace ToE‚ÇÇCohomologicalSpectralSequence

noncomputable def page (r : ‚Ñ§) (hr : 2 ‚â§ r) (pq : ‚Ñ§ √ó ‚Ñ§) : C :=
  (X.E (pq.1+pq.2-1) (pq.1+pq.2) (pq.1+pq.2+1) (by linarith) (by linarith)).obj
    (Œπ‚Ñ§t.mapArrow‚ÇÉ.obj (Arrow‚ÇÉ.mkOfLE (pq.2-r+2) pq.2 (pq.2+1) (pq.2+r-1)))

noncomputable def d (r : ‚Ñ§) (hr : 2 ‚â§ r) (pq pq' : ‚Ñ§ √ó ‚Ñ§) (hpq' : pq + (r, 1-r) = pq') :
    page X r hr pq ‚ü∂ page X r hr pq' := by
  have h‚ÇÅ : pq.1 + r = pq'.1 := congr_arg _root_.Prod.fst hpq'
  have h‚ÇÇ : pq.2 + (1-r) = pq'.2 := congr_arg _root_.Prod.snd hpq'
  refine' (X.d (pq.1 + pq.2 - 1) (pq.1 + pq.2) (pq.1 + pq.2 + 1) (pq.1 + pq.2 + 2) _ _ _).app
     (Œπ‚Ñ§t.mapArrow‚ÇÖ.obj
        (Arrow‚ÇÖ.mkOfLE (pq'.2-r+2) pq'.2 (pq.2-r+2) pq.2 (pq.2+1) (pq.2+r-1))) ‚â´
    (X.EIsoOfEq (pq.1+pq.2) (pq.1+pq.2+1) (pq.1+pq.2+2) _ _
      (pq'.1+pq'.2-1) (pq'.1+pq'.2) (pq'.1+pq'.2+1) _ _ (by linarith)).hom.app _ ‚â´
    (X.E _ _ _ _ _).map
      (Arrow‚ÇÉ.Hom.mk (ùüô _) (ùüô _) (eqToHom _) (eqToHom _) (Subsingleton.elim _ _)
      (Subsingleton.elim _ _) (Subsingleton.elim _ _))
  . linarith
  all_goals dsimp ; congr 1 ; linarith

end ToE‚ÇÇCohomologicalSpectralSequence

noncomputable def toE‚ÇÇCohomologicalSpectralSequence : E‚ÇÇCohomologicalSpectralSequence C where
  page' r hr pq := ToE‚ÇÇCohomologicalSpectralSequence.page X r hr pq
  d' r hr pq pq' hpq' := ToE‚ÇÇCohomologicalSpectralSequence.d X r hr pq pq' hpq'
  d_comp_d' r hr := fun ‚ü®p, q‚ü© ‚ü®p', q'‚ü© ‚ü®p'', q''‚ü© hpq' hpq'' => by
    dsimp
    sorry
  iso' := sorry

pp_extended_field_notation toE‚ÇÇCohomologicalSpectralSequence

noncomputable def toE‚ÇÇCohomologicalSpectralSequencePageIso (r : ‚Ñ§)
    [X.toE‚ÇÇCohomologicalSpectralSequence.HasPage r] (pq : ‚Ñ§ √ó ‚Ñ§)
    (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
    (hpq : pq.1 + pq.2 = n‚ÇÅ) (q‚ÇÄ q‚ÇÅ q‚ÇÇ : ‚Ñ§)
    (hq‚ÇÄ : q‚ÇÄ + r - 2 = pq.2) (hq‚ÇÅ : pq.2 + 1 = q‚ÇÅ) (hq‚ÇÇ : q‚ÇÅ + r - 2 = q‚ÇÇ) :
    X.toE‚ÇÇCohomologicalSpectralSequence.page r pq ‚âÖ
      (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj (Œπ‚Ñ§t.mapArrow‚ÇÉ.obj (by
        have := X.toE‚ÇÇCohomologicalSpectralSequence.le_of_hasPage r
        exact Arrow‚ÇÉ.mkOfLE q‚ÇÄ pq.2 q‚ÇÅ q‚ÇÇ)) :=
  eqToIso (by
    obtain ‚ü®p, q‚ü© := pq
    obtain rfl : n‚ÇÄ = p + q - 1 := by linarith
    obtain rfl : n‚ÇÅ = p + q := by linarith
    obtain rfl : n‚ÇÇ = p + q + 1 := by linarith
    obtain rfl : q‚ÇÄ = q-r+2 := by linarith
    obtain rfl : q‚ÇÅ = q+1 := by linarith
    obtain rfl : q‚ÇÇ = q+r-1 := by linarith
    rfl)

noncomputable def toE‚ÇÇCohomologicalSpectralSequenceE‚ÇÇpageIso
    (pq : ‚Ñ§ √ó ‚Ñ§) (n : ‚Ñ§) (hn : pq.1 + pq.2 = n) (q' : ‚Ñ§) (hq' : pq.2 + 1 = q') :
    X.toE‚ÇÇCohomologicalSpectralSequence.page 2 pq ‚âÖ
      (X.H n).obj (Œπ‚Ñ§t.mapArrow.obj (Arrow.mkOfLE pq.2 q')) :=
  X.toE‚ÇÇCohomologicalSpectralSequencePageIso 2 pq (n-1) n (n+1)
    (by linarith) _ hn pq.2 q' q' (by linarith) (by linarith) (by linarith) ‚â™‚â´
    X.EObjIsoH (n-1) n (n+1) _ rfl _ (by dsimp ; infer_instance) (by dsimp ; infer_instance)

lemma toE‚ÇÇCohomologicalSpectralSequence_isZero_page
    (r : ‚Ñ§) [X.toE‚ÇÇCohomologicalSpectralSequence.HasPage r] (p‚ÇÄ q‚ÇÄ : ‚Ñ§)
    [X.IsStationary (Bounds.quadrantUR p‚ÇÄ q‚ÇÄ)] (pq : ‚Ñ§ √ó ‚Ñ§) (hpq : pq.1 < p‚ÇÄ ‚à® pq.2 < q‚ÇÄ) :
    IsZero (X.toE‚ÇÇCohomologicalSpectralSequence.page r pq) := by
  obtain ‚ü®p, q‚ü© := pq
  apply X.isZero_E_of_isZero_H
  dsimp at hpq ‚ä¢
  cases hpq
  . apply X.isZero‚ÇÇ_H (Bounds.quadrantUR p‚ÇÄ q‚ÇÄ)
    apply homOfLE
    dsimp
    simp
    linarith
  . apply X.isZero‚ÇÅ_H (Bounds.quadrantUR p‚ÇÄ q‚ÇÄ)
    apply homOfLE
    dsimp
    simp
    linarith

instance [X.IsStationary Bounds.firstQuadrant] :
    X.toE‚ÇÇCohomologicalSpectralSequence.IsFirstQuadrant where
  isZero := by
    intro r hr pq hpq
    exact X.toE‚ÇÇCohomologicalSpectralSequence_isZero_page r 0 0 pq hpq

noncomputable def toE‚ÇÇCohomologicalSpectralSequencePageTwoIso
    (pq : ‚Ñ§ √ó ‚Ñ§) (n : ‚Ñ§) (h : pq.1 + pq.2 = n)
    (q' : ‚Ñ§) (hq' : pq.2 + 1 = q'):
    X.toE‚ÇÇCohomologicalSpectralSequence.page 2 pq ‚âÖ
      (X.H n).obj (Arrow.mk (homOfLE (show ‚Ñ§t.mk pq.2 ‚â§ ‚Ñ§t.mk q'
        by simp only [‚Ñ§t.mk_le_mk_iff] ; linarith))) := by
  refine' X.toE‚ÇÇCohomologicalSpectralSequencePageIso 2 pq (n-1) n (n+1)
    (by linarith) (by linarith) h pq.2 q' q' (by linarith) hq' (by linarith) ‚â™‚â´ _
  refine' X.EObjIsoH (n-1) n (n+1) _ rfl _ _ _
  all_goals dsimp ; infer_instance

noncomputable def toE‚ÇÇCohomologicalSpectralSequencePageInfinityIso (pq : ‚Ñ§ √ó ‚Ñ§) (n : ‚Ñ§)
    (h : pq.1 + pq.2 = n) (q' : ‚Ñ§) (hq' : pq.2 + 1 = q') [X.IsStationary Bounds.firstQuadrant] :
    X.toE‚ÇÇCohomologicalSpectralSequence.pageInfinity pq ‚âÖ
      (Œπ‚Ñ§t.mapArrow ‚ãô X.EInfty (n-1) n (n+1) (by linarith) rfl).obj (Arrow.mkOfLE pq.2 q') :=
  sorry

noncomputable def toE‚ÇÇCohomologicalSpectralSequenceStronglyConvergesToOfBoundsFirstQuadrant
    [X.IsStationary Bounds.firstQuadrant] :
  X.toE‚ÇÇCohomologicalSpectralSequence.StronglyConvergesTo
    (fun n => (X.H n).obj (Arrow.mkOfLE ‚ä• ‚ä§ bot_le)) where
  stronglyConvergesToInDegree n :=
    { hasInfinityPageAt := inferInstance
      filtration' := Œπ‚Ñ§t ‚ãô X.filtration' n
      exists_isZero_filtration' :=
        ‚ü®0, X.isZero_filtration_obj_eq_bot Bounds.firstQuadrant _ _ (ùüô _)‚ü©
      exists_isIso_filtration'_hom :=
        ‚ü®n + 1, X.isIso_filtrationŒπ Bounds.firstQuadrant _ _ (homOfLE (by simp))‚ü©
      œÄ' := fun i pq hpq => sorry
      epi_œÄ' := sorry
      comp_œÄ' := sorry
      exact' := sorry }


end SpectralObject

end Abelian

end CategoryTheory
