import Mathlib.Algebra.Homology.Embedding.StupidFiltration
import Mathlib.Algebra.Homology.Embedding.CochainComplex
import Mathlib.Algebra.Homology.TotalComplex
import Mathlib.Algebra.Homology.TotalComplexShift

open CategoryTheory Category Limits ComplexShape

instance {C Œπ : Type*} [Category C] [HasZeroMorphisms C]
    {c : ComplexShape Œπ} (i : Œπ) :
    (HomologicalComplex.eval C c i).PreservesZeroMorphisms where

namespace CategoryTheory

variable {C : Type*} [Category C]

namespace GradedObject

instance {I : Type*} (i : I) [HasZeroMorphisms C] :
    (GradedObject.eval i : GradedObject I C ‚•§ C).PreservesZeroMorphisms where

instance {I : Type*} (i : I) [Preadditive C] :
    (GradedObject.eval i : GradedObject I C ‚•§ C).Additive where

variable [Preadditive C]
variable {I : Type*} (S : ShortComplex (GradedObject I C))
  {J : Type*} (p : I ‚Üí J)
  [S.X‚ÇÅ.HasMap p] [S.X‚ÇÇ.HasMap p] [S.X‚ÇÉ.HasMap p]

@[simps]
noncomputable def mapShortComplex : ShortComplex (GradedObject J C) where
  f := mapMap S.f p
  g := mapMap S.g p
  zero := by rw [‚Üê mapMap_comp, S.zero, mapMap_zero]

@[simps]
def shortComplexSplittingEquiv :
    S.Splitting ‚âÉ (‚àÄ (i : I), (S.map (eval i)).Splitting) where
  toFun œÉ i := œÉ.map (eval i)
  invFun œÑ :=
    { r := fun i => (œÑ i).r
      s := fun i => (œÑ i).s
      s_g := by ext i; exact (œÑ i).s_g
      f_r := by ext i; exact (œÑ i).f_r
      id := by ext i; exact (œÑ i).id }
  left_inv _ := rfl
  right_inv _ := rfl

@[simps]
noncomputable def mapShortComplexSplitting (œÉ : S.Splitting) :
    (mapShortComplex S p).Splitting where
  r := mapMap œÉ.r p
  s := mapMap œÉ.s p
  s_g := by
    dsimp only [mapShortComplex]
    rw [‚Üê mapMap_comp, œÉ.s_g, mapMap_id]
  f_r := by
    dsimp only [mapShortComplex]
    rw [‚Üê mapMap_comp, œÉ.f_r, mapMap_id]
  id := by
    dsimp only [mapShortComplex]
    rw [‚Üê mapMap_comp, ‚Üê mapMap_comp, ‚Üê mapMap_add, œÉ.id, mapMap_id]

end GradedObject

namespace Limits

lemma IsZero.obj' {X : C} (hX : IsZero X) {D : Type*} [Category D]
    (F : C ‚•§ D) [HasZeroMorphisms C] [HasZeroMorphisms D]
    [F.PreservesZeroMorphisms] : IsZero (F.obj X) := by
  rw [IsZero.iff_id_eq_zero, ‚Üê F.map_id, hX.eq_of_src (ùüô _) 0, F.map_zero]

section

variable [IsIdempotentComplete C] {I : Type*}
  {X : I ‚Üí C} (Y : I ‚Üí C)
  (hX : ‚àÄ (i : I), DirectFactor (X i) (Y i))

lemma hasCoproduct_of_direct_factor [HasCoproduct Y] : HasCoproduct X := by
  let p : ‚àê Y ‚ü∂ ‚àê Y := Sigma.map (fun i => (hX i).r ‚â´ (hX i).s)
  obtain ‚ü®S, h, fac‚ü© := directFactor_of_isIdempotentComplete _ p (by aesop_cat)
  refine ‚ü®Cofan.mk S (fun i => (hX i).s ‚â´ Sigma.Œπ Y i ‚â´ h.r),
    mkCofanColimit _ (fun c => h.s ‚â´ Sigma.desc (fun i => (hX i).r ‚â´ c.inj i))
      (fun c i => by simp [p, reassoc_of% fac])
      (fun c m hm => ?_)‚ü©
  dsimp at m ‚ä¢
  rw [‚Üê cancel_epi h.r]
  ext i
  simp [‚Üê hm, reassoc_of% fac, p]
  simp only [‚Üê assoc]
  congr 1
  rw [‚Üê cancel_mono h.s]
  simp [fac, p]

end

section

variable [HasZeroMorphisms C] {I : Type*} (X : I ‚Üí C) {J : Type*} (Œπ : J ‚Üí I)
  [HasCoproduct (X ‚àò Œπ)] (hŒπ : Function.Injective Œπ)
  (hX : ‚àÄ (i : I), ¬¨ i ‚àà Set.range Œπ ‚Üí IsZero (X i))

open Classical in
@[simps! pt]
noncomputable def cofanOfIsZero : Cofan X := Cofan.mk (‚àê (X ‚àò Œπ)) (fun i =>
  if hi : i ‚àà Set.range Œπ
  then eqToHom (by
    congr
    exact hi.choose_spec.symm) ‚â´ Sigma.Œπ _ hi.choose
  else 0)

lemma cofanOfIsZero_inj (j : J) :
    (cofanOfIsZero X Œπ).inj (Œπ j) = Sigma.Œπ (X ‚àò Œπ) j := by
  dsimp [cofanOfIsZero]
  have hi : Œπ j ‚àà Set.range Œπ := ‚ü®j, rfl‚ü©
  rw [dif_pos hi]
  apply Sigma.eqToHom_comp_Œπ (X ‚àò Œπ)
  exact (hŒπ hi.choose_spec).symm

noncomputable def isColimitCofanOfIsZero : IsColimit (cofanOfIsZero X Œπ) :=
  mkCofanColimit _ (fun s => Sigma.desc (fun j => s.inj (Œπ j)))
    (fun s i => by
      by_cases hi : i ‚àà Set.range Œπ
      ¬∑ obtain ‚ü®j, rfl‚ü© := hi
        dsimp
        simp [cofanOfIsZero_inj _ _ hŒπ]
      ¬∑ apply (hX i hi).eq_of_src)
    (fun s m hm => by
      dsimp
      ext j
      simp only [colimit.Œπ_desc, Cofan.mk_Œπ_app, ‚Üê hm, cofanOfIsZero_inj _ _ hŒπ])

lemma hasCoproduct_of_isZero : HasCoproduct X :=
  ‚ü®_, isColimitCofanOfIsZero X Œπ hŒπ hX‚ü©

end

section

variable {I : Type*} (X : I ‚Üí C) (i : I)
    (hX : ‚àÄ j, j ‚â† i ‚Üí IsZero (X j))

open Classical in
@[simp]
noncomputable def cofanOfIsZeroButOne : Cofan X := Cofan.mk (X i)
  (fun j => if h : j = i then eqToHom (by rw [h]) else (hX _ h).to_ _)

@[simp]
lemma cofanOfIsZeroButOne_Œπ_self :
    (cofanOfIsZeroButOne X i hX).inj i = ùüô _ :=
  dif_pos rfl

def isColimitCofanOfIsZeroButOne :
    IsColimit (cofanOfIsZeroButOne X i hX) :=
  mkCofanColimit _ (fun s => s.inj i) (fun s j => by
    by_cases hj : j = i
    ¬∑ subst hj
      simp
    ¬∑ apply (hX _ hj).eq_of_src) (fun s m hm => by
      dsimp
      simpa using hm i)

lemma hasCoproduct_of_isZero_but_one : HasCoproduct X :=
  ‚ü®‚ü®_, isColimitCofanOfIsZeroButOne X i hX‚ü©‚ü©

end

end Limits

end CategoryTheory

namespace HomologicalComplex‚ÇÇ

variable {C : Type*} [Category C] [Preadditive C]
  {Œπ‚ÇÅ Œπ‚ÇÇ Œπ : Type*} {c‚ÇÅ : ComplexShape Œπ‚ÇÅ} {c‚ÇÇ : ComplexShape Œπ‚ÇÇ}

section

variable [IsIdempotentComplete C]
  {K : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ} (L : HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ)
  (c : ComplexShape Œπ) [TotalComplexShape c‚ÇÅ c‚ÇÇ c]
  (h : ‚àÄ i‚ÇÅ i‚ÇÇ, DirectFactor ((K.X i‚ÇÅ).X i‚ÇÇ) ((L.X i‚ÇÅ).X i‚ÇÇ))

lemma hasTotal_of_directFactor [L.HasTotal c] : K.HasTotal c :=
  fun i => hasCoproduct_of_direct_factor
    (GradedObject.mapObjFun L.toGradedObject (œÄ c‚ÇÅ c‚ÇÇ c) i) (fun _ => h _ _)

variable {Œπ‚ÇÅ' : Type*} {c‚ÇÅ' : ComplexShape Œπ‚ÇÅ'} (e : c‚ÇÅ'.Embedding c‚ÇÅ) [e.IsRelIff]
  [HasZeroObject C]

instance [K.HasTotal c] : HomologicalComplex‚ÇÇ.HasTotal (K.stupidTrunc e) c :=
  hasTotal_of_directFactor K c
    (fun i‚ÇÅ i‚ÇÇ => (K.stupidTruncDirectFactor e i‚ÇÅ).map (HomologicalComplex.eval _ _ i‚ÇÇ))

end

section

instance : (toGradedObjectFunctor C c‚ÇÅ c‚ÇÇ).Additive where

variable (S : ShortComplex (HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ))
  (c : ComplexShape Œπ) [DecidableEq Œπ] [TotalComplexShape c‚ÇÅ c‚ÇÇ c]
  [S.X‚ÇÅ.HasTotal c] [S.X‚ÇÇ.HasTotal c] [S.X‚ÇÉ.HasTotal c]

@[simps]
noncomputable def total.shortComplex : ShortComplex (HomologicalComplex C c) where
  f := total.map S.f c
  g := total.map S.g c
  zero := by rw [‚Üê total.map_comp, S.zero, total.map_zero]

noncomputable def total.shortComplexSplitting
    (œÉ : (S.map (toGradedObjectFunctor C c‚ÇÅ c‚ÇÇ)).Splitting) (i : Œπ) :
    ((total.shortComplex S c).map (HomologicalComplex.eval _ _ i)).Splitting := by
  have : (ShortComplex.map S (toGradedObjectFunctor C c‚ÇÅ c‚ÇÇ)).X‚ÇÅ.HasMap (œÄ c‚ÇÅ c‚ÇÇ c) := by
    dsimp
    infer_instance
  have : (ShortComplex.map S (toGradedObjectFunctor C c‚ÇÅ c‚ÇÇ)).X‚ÇÇ.HasMap (œÄ c‚ÇÅ c‚ÇÇ c) := by
    dsimp
    infer_instance
  have : (ShortComplex.map S (toGradedObjectFunctor C c‚ÇÅ c‚ÇÇ)).X‚ÇÉ.HasMap (œÄ c‚ÇÅ c‚ÇÇ c) := by
    dsimp
    infer_instance
  exact GradedObject.shortComplexSplittingEquiv _
    (GradedObject.mapShortComplexSplitting _ _ œÉ) i

end

end HomologicalComplex‚ÇÇ

namespace ComplexShape

open Embedding

lemma embeddingUpIntGE_monotone (a a' : ‚Ñ§) (h : a' ‚â§ a):
    (embeddingUpIntGE a).Subset (embeddingUpIntGE a') where
  subset := by
    obtain ‚ü®k, rfl‚ü© := Int.eq_add_ofNat_of_le h
    rintro _ ‚ü®l, rfl‚ü©
    exact ‚ü®k + l, by dsimp; omega‚ü©

end ComplexShape

namespace CochainComplex

section

variable (C : Type*) [Category C] [HasZeroMorphisms C] [HasZeroObject C]

noncomputable abbrev stupidFiltrationGEFunctor :
    ‚Ñ§·µí·µñ ‚•§ CochainComplex C ‚Ñ§ ‚•§ CochainComplex C ‚Ñ§ :=
  ComplexShape.Embedding.stupidTruncGEFiltration
    (fun n => ComplexShape.embeddingUpIntGE n.unop)
      (fun _ _ œÜ => ComplexShape.embeddingUpIntGE_monotone _ _ (leOfHom œÜ.unop)) C

variable {C}
variable (K L : CochainComplex C ‚Ñ§)

noncomputable abbrev stupidFiltrationGE : ‚Ñ§·µí·µñ ‚•§ CochainComplex C ‚Ñ§ :=
  stupidFiltrationGEFunctor C ‚ãô ((evaluation _ _).obj K)

noncomputable def stupidFiltrationGEObjToSingle (n : ‚Ñ§) :
    K.stupidFiltrationGE.obj ‚ü®n‚ü© ‚ü∂ (HomologicalComplex.single C (up ‚Ñ§) n).obj (K.X n) :=
  HomologicalComplex.mkHomToSingle
    (K.stupidTruncXIso (embeddingUpIntGE n) (add_zero n)).hom (by
      rintro k hk
      apply IsZero.eq_of_src
      apply K.isZero_stupidTrunc_X
      dsimp at hk ‚ä¢
      omega)

@[reassoc]
lemma stupidFiltrationGE_map_to_single (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ < n‚ÇÅ) :
    K.stupidFiltrationGE.map (homOfLE h.le).op ‚â´
      K.stupidFiltrationGEObjToSingle n‚ÇÄ = 0 := by
  apply HomologicalComplex.to_single_hom_ext
  apply IsZero.eq_of_src
  apply K.isZero_stupidTrunc_X
  intros
  dsimp
  omega

@[simps]
noncomputable def shortComplexStupidFiltrationGE (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    ShortComplex (CochainComplex C ‚Ñ§) :=
  ShortComplex.mk _ _ (K.stupidFiltrationGE_map_to_single n‚ÇÄ n‚ÇÅ (by omega))

lemma isIso_stupidFiltrationGE_map_f (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ ‚â§ n‚ÇÅ) (k : ‚Ñ§) (hk : n‚ÇÅ ‚â§ k ‚à® k < n‚ÇÄ) :
    IsIso ((K.stupidFiltrationGE.map (homOfLE h).op).f k) := by
  apply HomologicalComplex.isIso_mapStupidTruncGE_f
  obtain hk|hk := hk
  ¬∑ obtain ‚ü®j, hj‚ü© := Int.eq_add_ofNat_of_le hk
    exact Or.inl ‚ü®j, by dsimp; omega‚ü©
  ¬∑ exact Or.inr (fun i‚ÇÇ => by dsimp; omega)

end

section

variable (C : Type*) [Category C] [Preadditive C] [HasZeroObject C]
  (K L : CochainComplex C ‚Ñ§) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ)

noncomputable def shortComplexStupidFiltrationGESplitting (k : ‚Ñ§) :
    ((K.shortComplexStupidFiltrationGE n‚ÇÄ n‚ÇÅ h).map
      (HomologicalComplex.eval _ _ k)).Splitting :=
  if hk : k = n‚ÇÄ
  then
    { s := eqToHom (by dsimp; rw [hk]) ‚â´
          (HomologicalComplex.singleObjXSelf (up ‚Ñ§) n‚ÇÄ (K.X n‚ÇÄ)).hom ‚â´
          eqToHom (by rw [hk]) ‚â´ (K.stupidTruncXIso (embeddingUpIntGE n‚ÇÄ)
            (i := 0) (by dsimp; omega)).inv
      s_g := by
        subst hk
        simp [stupidFiltrationGEObjToSingle]
      r := 0
      f_r := by
        apply IsZero.eq_of_src
        apply K.isZero_stupidTrunc_X
        intro
        dsimp
        omega
      id := by
        subst hk
        simp [stupidFiltrationGEObjToSingle] }
  else
    have := K.isIso_stupidFiltrationGE_map_f n‚ÇÄ n‚ÇÅ (by omega) k (by omega)
    { r := inv ((K.stupidFiltrationGE.map (homOfLE (show n‚ÇÄ ‚â§ n‚ÇÅ by omega)).op).f k)
      s := 0
      s_g := by
        apply IsZero.eq_of_tgt
        exact HomologicalComplex.isZero_single_obj_X (up ‚Ñ§) _ _ _ hk }

end

end CochainComplex

namespace HomologicalComplex‚ÇÇ

section

variable (C : Type*) [Category C] [HasZeroMorphisms C] [HasZeroObject C]
  {Œπ‚ÇÅ Œπ‚ÇÇ : Type*} [DecidableEq Œπ‚ÇÅ] (c‚ÇÅ : ComplexShape Œπ‚ÇÅ) (c‚ÇÇ : ComplexShape Œπ‚ÇÇ)

noncomputable def singleColumn (i‚ÇÅ : Œπ‚ÇÅ) :
    HomologicalComplex C c‚ÇÇ ‚•§ HomologicalComplex‚ÇÇ C c‚ÇÅ c‚ÇÇ :=
  HomologicalComplex.single (HomologicalComplex C c‚ÇÇ) c‚ÇÅ i‚ÇÅ

variable {C c‚ÇÇ}

lemma isZero_singleColumn_X (K : HomologicalComplex C c‚ÇÇ)
    (i‚ÇÅ i‚ÇÅ' : Œπ‚ÇÅ) (h : i‚ÇÅ' ‚â† i‚ÇÅ) :
    IsZero (((singleColumn C c‚ÇÅ c‚ÇÇ i‚ÇÅ).obj K).X i‚ÇÅ') :=
  HomologicalComplex.isZero_single_obj_X _ _ _ _ h

lemma isZero_singleColumn_X_X (K : HomologicalComplex C c‚ÇÇ)
    (i‚ÇÅ i‚ÇÅ' : Œπ‚ÇÅ) (h : i‚ÇÅ' ‚â† i‚ÇÅ) (i‚ÇÇ : Œπ‚ÇÇ) :
    IsZero ((((singleColumn C c‚ÇÅ c‚ÇÇ i‚ÇÅ).obj K).X i‚ÇÅ').X i‚ÇÇ) :=
  (isZero_singleColumn_X c‚ÇÅ K i‚ÇÅ i‚ÇÅ' h).obj' (HomologicalComplex.eval C c‚ÇÇ i‚ÇÇ)

noncomputable def singleColumnXIso (K : HomologicalComplex C c‚ÇÇ) (i‚ÇÅ : Œπ‚ÇÅ) :
    ((singleColumn C c‚ÇÅ c‚ÇÇ i‚ÇÅ).obj K).X i‚ÇÅ ‚âÖ K := by
  apply HomologicalComplex.singleObjXSelf

noncomputable def singleColumnXXIso (K : HomologicalComplex C c‚ÇÇ) (i‚ÇÅ : Œπ‚ÇÅ) (i‚ÇÇ : Œπ‚ÇÇ) :
    (((singleColumn C c‚ÇÅ c‚ÇÇ i‚ÇÅ).obj K).X i‚ÇÅ).X i‚ÇÇ ‚âÖ K.X i‚ÇÇ :=
  (HomologicalComplex.eval C c‚ÇÇ i‚ÇÇ).mapIso (singleColumnXIso c‚ÇÅ K i‚ÇÅ)

@[reassoc]
lemma singleColumn_obj_X_d (K : HomologicalComplex C c‚ÇÇ) (i‚ÇÅ : Œπ‚ÇÅ) (i‚ÇÇ i‚ÇÇ' : Œπ‚ÇÇ) :
    (((singleColumn C c‚ÇÅ c‚ÇÇ i‚ÇÅ).obj K).X i‚ÇÅ).d i‚ÇÇ i‚ÇÇ' =
      (singleColumnXXIso c‚ÇÅ K i‚ÇÅ i‚ÇÇ).hom ‚â´ K.d i‚ÇÇ i‚ÇÇ' ‚â´
        (singleColumnXXIso c‚ÇÅ K i‚ÇÅ i‚ÇÇ').inv := by
  dsimp only [singleColumn, singleColumnXXIso]
  simp only [Functor.mapIso_hom, HomologicalComplex.eval_map,
    Functor.mapIso_inv, HomologicalComplex.Hom.comm_assoc]
  rw [‚Üê HomologicalComplex.comp_f, Iso.hom_inv_id, HomologicalComplex.id_f,
    comp_id]

end

section

variable (C : Type*) [Category C] [Preadditive C] [HasZeroObject C]
  {Œπ‚ÇÅ Œπ‚ÇÇ Œπ : Type*} [DecidableEq Œπ‚ÇÅ] [DecidableEq Œπ] (c‚ÇÅ : ComplexShape Œπ‚ÇÅ) (c‚ÇÇ : ComplexShape Œπ‚ÇÇ)
  (K : HomologicalComplex C c‚ÇÇ) (i‚ÇÅ : Œπ‚ÇÅ) (c : ComplexShape Œπ)
  [TotalComplexShape c‚ÇÅ c‚ÇÇ c]
  [((singleColumn C c‚ÇÅ c‚ÇÇ i‚ÇÅ).obj K).HasTotal  c]

@[simp]
lemma singleColumn_d‚ÇÅ (x : Œπ‚ÇÅ) (y : Œπ‚ÇÇ) (n : Œπ) :
    ((singleColumn C c‚ÇÅ c‚ÇÇ i‚ÇÅ).obj K).d‚ÇÅ c x y n = 0 := by
  by_cases hx : c‚ÇÅ.Rel x (c‚ÇÅ.next x)
  ¬∑ by_cases hx' : œÄ c‚ÇÅ c‚ÇÇ c (next c‚ÇÅ x, y) = n
    ¬∑ rw [d‚ÇÅ_eq _ _ hx _ _ hx']
      simp [singleColumn]
    ¬∑ rw [d‚ÇÅ_eq_zero' _ _ hx _ _ hx']
  ¬∑ rw [d‚ÇÅ_eq_zero _ _ _ _ _ hx]

@[simp]
lemma singleColumn_d‚ÇÇ (y y' : Œπ‚ÇÇ) (hy : c‚ÇÇ.Rel y y') (n : Œπ)
    (hn : œÄ c‚ÇÅ c‚ÇÇ c (i‚ÇÅ, y') = n) :
    ((singleColumn C c‚ÇÅ c‚ÇÇ i‚ÇÅ).obj K).d‚ÇÇ c i‚ÇÅ y n =
      Œµ‚ÇÇ c‚ÇÅ c‚ÇÇ c (i‚ÇÅ, y) ‚Ä¢ (singleColumnXXIso c‚ÇÅ K i‚ÇÅ y).hom ‚â´ K.d y y' ‚â´
        (singleColumnXXIso c‚ÇÅ K i‚ÇÅ y').inv ‚â´
        ((singleColumn C c‚ÇÅ c‚ÇÇ i‚ÇÅ).obj K).ŒπTotal c i‚ÇÅ y' n hn := by
  simp [d‚ÇÇ_eq _ _ _ hy _ hn, singleColumn_obj_X_d]

end

end HomologicalComplex‚ÇÇ

namespace HomologicalComplex‚ÇÇ

variable (C : Type*) [Category C] [Abelian C] {Œπ : Type*} (c : ComplexShape Œπ)

noncomputable abbrev rowFiltrationGEFunctor :
    ‚Ñ§·µí·µñ ‚•§ HomologicalComplex‚ÇÇ C (up ‚Ñ§) c ‚•§ HomologicalComplex‚ÇÇ C (up ‚Ñ§) c :=
  CochainComplex.stupidFiltrationGEFunctor _

instance (n : ‚Ñ§·µí·µñ) {Œπ' : Type*} {c' : ComplexShape Œπ'}
    (K : HomologicalComplex‚ÇÇ C (up ‚Ñ§) c) [TotalComplexShape (up ‚Ñ§) c c'] [K.HasTotal c']:
    (((rowFiltrationGEFunctor C _).obj n).obj K).HasTotal c' := by
  dsimp [rowFiltrationGEFunctor]
  infer_instance

variable {C c}

noncomputable abbrev rowFiltrationGE (K : HomologicalComplex‚ÇÇ C (up ‚Ñ§) c) :
    ‚Ñ§·µí·µñ ‚•§ HomologicalComplex‚ÇÇ C (up ‚Ñ§) c :=
  rowFiltrationGEFunctor C c ‚ãô ((evaluation _ _).obj K)

noncomputable abbrev rowFiltrationGEMap {K L : HomologicalComplex‚ÇÇ C (up ‚Ñ§) c} (œÜ : K ‚ü∂ L) :
    K.rowFiltrationGE ‚ü∂ L.rowFiltrationGE :=
  whiskerLeft _ ((evaluation _ _).map œÜ)

variable (K : HomologicalComplex‚ÇÇ C (up ‚Ñ§) (up ‚Ñ§))
variable [K.HasTotal (up ‚Ñ§)]

instance (n : ‚Ñ§·µí·µñ) : (K.rowFiltrationGE.obj n).HasTotal (up ‚Ñ§) := by
  dsimp [rowFiltrationGE]
  infer_instance

instance (L : CochainComplex C ‚Ñ§) (i‚ÇÇ : ‚Ñ§) :
    ((singleColumn C (up ‚Ñ§) (up ‚Ñ§) i‚ÇÇ).obj L).HasTotal (up ‚Ñ§) :=
  fun n => hasCoproduct_of_isZero_but_one _ ‚ü®‚ü®i‚ÇÇ, n - i‚ÇÇ‚ü©, by simp‚ü© (by
    rintro ‚ü®‚ü®x, y‚ü©, hxy‚ü© h
    apply isZero_singleColumn_X_X
    simp at hxy h
    omega)

@[simp]
noncomputable def cofanSingleColumnObjTotal (L : CochainComplex C ‚Ñ§) (x y n : ‚Ñ§) (h : x + y = n):
  GradedObject.CofanMapObjFun (((singleColumn C (up ‚Ñ§) (up ‚Ñ§) x).obj L).toGradedObject)
    (œÄ (up ‚Ñ§) (up ‚Ñ§) (up ‚Ñ§)) n :=
  cofanOfIsZeroButOne  _ ‚ü®‚ü®x, y‚ü©, h‚ü© (by
    rintro ‚ü®‚ü®x', y'‚ü©, hxy‚ü© h'
    apply isZero_singleColumn_X_X
    simp at hxy h'
    omega)

noncomputable def isColimitCofanSingleColumnObjTotal
    (L : CochainComplex C ‚Ñ§) (x y n : ‚Ñ§) (h : x + y = n) :
    IsColimit (cofanSingleColumnObjTotal L x y n h) := by
  apply isColimitCofanOfIsZeroButOne

noncomputable def singleColumnObjTotalXIso
    (L : CochainComplex C ‚Ñ§) (x y n : ‚Ñ§) (h : x + y = n) :
    (((singleColumn C (up ‚Ñ§) (up ‚Ñ§) x).obj L).total (up ‚Ñ§)).X n ‚âÖ L.X y :=
  ((cofanSingleColumnObjTotal L x y n h).iso
    (isColimitCofanSingleColumnObjTotal L x y n h)).symm ‚â™‚â´ (singleColumnXXIso (up ‚Ñ§) L x y)

lemma singleColumnObjTotalXIso_inv
    (L : CochainComplex C ‚Ñ§) (x y n : ‚Ñ§) (h : x + y = n) :
    (singleColumnObjTotalXIso L x y n h).inv =
      (singleColumnXXIso (up ‚Ñ§) L x y).inv ‚â´
        ((singleColumn C (up ‚Ñ§) (up ‚Ñ§) x).obj L).ŒπTotal (up ‚Ñ§) x y n h := by
  rfl

noncomputable def singleColumnObjTotal (L : CochainComplex C ‚Ñ§) (x x' : ‚Ñ§) (h : x + x' = 0) :
    ((singleColumn C (up ‚Ñ§) (up ‚Ñ§) x).obj L).total (up ‚Ñ§) ‚âÖ L‚ü¶x'‚üß :=
  Iso.symm (HomologicalComplex.Hom.isoOfComponents
    (fun n => (singleColumnObjTotalXIso L _ _ _ (by dsimp; omega)).symm) (by
      intro y y' h
      dsimp at h ‚ä¢
      simp [singleColumnObjTotalXIso_inv]
      rw [singleColumn_d‚ÇÇ _ _ _ _ _ _ _ (y' + x')
        (by dsimp; omega) _ (by dsimp; omega)]
      obtain rfl : x' = -x := by omega
      simp))

lemma hasTotal_of_isStrictlyLE (K : HomologicalComplex‚ÇÇ C (up ‚Ñ§) (up ‚Ñ§)) (x‚ÇÄ y‚ÇÄ : ‚Ñ§)
    [CochainComplex.IsStrictlyLE K x‚ÇÄ] [‚àÄ x, CochainComplex.IsStrictlyLE (K.X x) y‚ÇÄ] :
    K.HasTotal (up ‚Ñ§) := fun n => by
  obtain ‚ü®M, hM‚ü© : ‚àÉ (M : ‚Ñï), y‚ÇÄ < n - x‚ÇÄ + M := by
    by_cases h : y‚ÇÄ < n - x‚ÇÄ
    ¬∑ exact ‚ü®0, by omega‚ü©
    ¬∑ simp only [not_lt] at h
      obtain ‚ü®k, rfl‚ü© := Int.eq_add_ofNat_of_le h
      exact ‚ü®k + 1, by omega‚ü©
  apply hasCoproduct_of_isZero (J := Fin M) (Œπ := fun ‚ü®k, _‚ü© => ‚ü®‚ü®x‚ÇÄ - k, n - x‚ÇÄ + k‚ü©, by simp‚ü©)
  ¬∑ rintro ‚ü®k, hk‚ü© ‚ü®k', hk'‚ü©
    simp
  ¬∑ rintro ‚ü®‚ü®x, y‚ü©, hxy : x + y = n‚ü© h
    by_cases hx : x ‚â§ x‚ÇÄ
    ¬∑ apply CochainComplex.isZero_of_isStrictlyLE (K.X x) y‚ÇÄ
      by_contra!
      obtain ‚ü®k, hk‚ü© := Int.eq_add_ofNat_of_le hx
      exact h ‚ü®‚ü®k, by omega‚ü©, by simp only [Subtype.mk.injEq, Prod.mk.injEq]; omega‚ü©
    ¬∑ exact (CochainComplex.isZero_of_isStrictlyLE K x‚ÇÄ x (by simpa using hx)).obj'
        (HomologicalComplex.eval _ _ y)

lemma hasTotal_of_isStrictlyGE_of_isStrictlyLE (K : HomologicalComplex‚ÇÇ C (up ‚Ñ§) (up ‚Ñ§))
    (x‚ÇÄ x‚ÇÅ : ‚Ñ§)
    [CochainComplex.IsStrictlyGE K x‚ÇÄ] [CochainComplex.IsStrictlyLE K x‚ÇÅ] :
    K.HasTotal (up ‚Ñ§) := fun n => by
  obtain ‚ü®M, hM‚ü© : ‚àÉ (M : ‚Ñï), x‚ÇÄ + M > x‚ÇÅ := by
    by_cases h : x‚ÇÅ < x‚ÇÄ
    ¬∑ exact ‚ü®0, by omega‚ü©
    ¬∑ simp only [not_lt] at h
      obtain ‚ü®k, rfl‚ü© := Int.eq_add_ofNat_of_le h
      exact ‚ü®k + 1, by omega‚ü©
  apply hasCoproduct_of_isZero (J := Fin M) (Œπ := fun ‚ü®k, _‚ü© => ‚ü®‚ü®x‚ÇÄ + k, n - x‚ÇÄ - k‚ü©, by simp‚ü©)
  ¬∑ rintro ‚ü®k, hk‚ü© ‚ü®k', hk'‚ü©
    simp
  ¬∑ rintro ‚ü®‚ü®x, y‚ü©, hxy : x + y = n‚ü© h
    by_cases hx : x‚ÇÄ ‚â§ x
    ¬∑ obtain ‚ü®k, hk‚ü© := Int.eq_add_ofNat_of_le hx
      refine (CochainComplex.isZero_of_isStrictlyLE K x‚ÇÅ x ?_).obj'
          (HomologicalComplex.eval _ _ y)
      by_contra!
      exact h ‚ü®‚ü®k, by omega‚ü©, by simp only [Subtype.mk.injEq, Prod.mk.injEq]; omega‚ü©
    ¬∑ exact (CochainComplex.isZero_of_isStrictlyGE K x‚ÇÄ x (by simpa using hx)).obj'
        (HomologicalComplex.eval _ _ y)

/-lemma total.quasiIso_map_of_finitely_many_columns {K L : HomologicalComplex‚ÇÇ C (up ‚Ñ§) (up ‚Ñ§)}
    (œÜ : K ‚ü∂ L) [K.HasTotal (up ‚Ñ§)] [L.HasTotal (up ‚Ñ§)] (x‚ÇÄ x‚ÇÅ : ‚Ñ§)
    [CochainComplex.IsStrictlyGE K x‚ÇÄ] [CochainComplex.IsStrictlyLE K x‚ÇÅ]
    [CochainComplex.IsStrictlyGE L x‚ÇÄ] [CochainComplex.IsStrictlyLE L x‚ÇÅ]
    (hœÜ : ‚àÄ (i : ‚Ñ§), x‚ÇÄ ‚â§ i ‚Üí i ‚â§ x‚ÇÅ ‚Üí QuasiIso (œÜ.f i)) :
    QuasiIso (total.map œÜ (up ‚Ñ§)) := by
  suffices hœÜ' : ‚àÄ (k : ‚Ñï) (x : ‚Ñ§) (hx : x‚ÇÅ + 1 - k = x),
      QuasiIso (total.map ((rowFiltrationGEMap œÜ).app ‚ü®x‚ü©) (up ‚Ñ§)) by
    obtain ‚ü®k, x, hx, hx'‚ü© : ‚àÉ (k : ‚Ñï) (x : ‚Ñ§) (hx : x‚ÇÅ + 1 - k = x), x ‚â§ x‚ÇÄ := by
      by_cases h : x‚ÇÄ ‚â§ x‚ÇÅ
      ¬∑ obtain ‚ü®k, hk‚ü© := Int.eq_add_ofNat_of_le h
        exact ‚ü®k + 1, _, rfl, by omega‚ü©
      ¬∑ exact ‚ü®0, _, rfl, by omega‚ü©
    have := CochainComplex.isStrictlyGE_of_GE K _ _ hx'
    have := CochainComplex.isStrictlyGE_of_GE L _ _ hx'
    have : IsIso (HomologicalComplex.ŒπStupidTrunc K (embeddingUpIntGE x)) := sorry
    have : IsIso (HomologicalComplex.ŒπStupidTrunc L (embeddingUpIntGE x)) := sorry
    refine (quasiIso_iff_of_arrow_mk_iso _ _ ?_).1 (hœÜ' k x hx)
    refine' Arrow.isoMk
      (total.mapIso (asIso (HomologicalComplex.ŒπStupidTrunc K (embeddingUpIntGE x))) _)
      (total.mapIso (asIso (HomologicalComplex.ŒπStupidTrunc L (embeddingUpIntGE x))) _) ?_
    dsimp
    simp only [‚Üê map_comp, HomologicalComplex.ŒπStupicTrunc_naturality]
  intro k
  induction k with
  | zero =>
      intro x hx
      obtain rfl : x‚ÇÅ + 1 = x := by simpa using hx
      dsimp
      rw [quasiIso_iff]
      intro i
      rw [quasiIsoAt_iff_exactAt] -- better quasiIso_iff_acyclic
      ¬∑ apply ShortComplex.exact_of_isZero_X‚ÇÇ
        dsimp
        sorry
      ¬∑ apply ShortComplex.exact_of_isZero_X‚ÇÇ
        sorry
  | succ k => sorry -/

end HomologicalComplex‚ÇÇ
