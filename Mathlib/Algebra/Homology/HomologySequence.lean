import Mathlib.Algebra.Homology.ShortComplex.SnakeLemma
import Mathlib.Algebra.Homology.ShortComplex.ShortComplexFour
import Mathlib.Algebra.Homology.ShortComplex.HomologicalComplex
import Mathlib.Algebra.Homology.HomologicalComplexLimits

open CategoryTheory Category Limits

def CategoryTheory.Limits.KernelFork.IsLimit.ofŒπ'
    {C : Type*} [Category C] [HasZeroMorphisms C] {X Y K : C} {f : X ‚ü∂ Y} (i : K ‚ü∂ X) (w : i ‚â´ f = 0)
    (h : ‚àÄ {A : C} (k : A ‚ü∂ X) (_ : k ‚â´ f = 0), { l : A ‚ü∂ K // l ‚â´ i = k}) [hi : Mono i] :
    IsLimit (KernelFork.ofŒπ _ w) :=
  ofŒπ _ _ (fun {A} k hk => (h k hk).1) (fun {A} k hk => (h k hk).2) (fun {A} k hk m hm => by
    rw [‚Üê cancel_mono i, (h k hk).2, hm])

def CategoryTheory.Limits.CokernelCofork.IsColimit.ofœÄ'
    {C : Type*} [Category C] [HasZeroMorphisms C] {X Y Q : C} {f : X ‚ü∂ Y} (p : Y ‚ü∂ Q) (w : f ‚â´ p = 0)
    (h : ‚àÄ {A : C} (k : Y ‚ü∂ A) (_ : f ‚â´ k = 0), { l : Q ‚ü∂ A // p ‚â´ l = k}) [hp : Epi p] :
    IsColimit (CokernelCofork.ofœÄ _ w) :=
  ofœÄ _ _ (fun {A} k hk => (h k hk).1) (fun {A} k hk => (h k hk).2) (fun {A} k hk m hm => by
    rw [‚Üê cancel_epi p, (h k hk).2, hm])

variable {C Œπ : Type*} [Category C] [Abelian C] {c : ComplexShape Œπ}

variable {S S' : ShortComplex (HomologicalComplex C c)} (hS : S.ShortExact) (hS' : S'.ShortExact)
  (œÑ : S ‚ü∂ S') (K L : HomologicalComplex C c) (œÜ : K ‚ü∂ L)
  {i j : Œπ} (hij : c.Rel i j)

namespace HomologicalComplex

variable (i j)

noncomputable def opcyclesToCycles : K.opcycles i ‚ü∂ K.cycles j :=
  K.liftCycles (K.fromOpcycles i j) _ rfl (by simp)

@[reassoc (attr := simp)]
lemma opcyclesToCycles_iCycles : K.opcyclesToCycles i j ‚â´ K.iCycles j = K.fromOpcycles i j := by
  dsimp only [opcyclesToCycles]
  simp

@[reassoc (attr := simp)]
lemma pOpcycles_opcyclesToCycles_iCycles :
    K.pOpcycles i ‚â´ K.opcyclesToCycles i j ‚â´ K.iCycles j = K.d i j := by
  simp [opcyclesToCycles]

@[reassoc (attr := simp)]
lemma pOpcycles_opcyclesToCycles :
    K.pOpcycles i ‚â´ K.opcyclesToCycles i j = K.toCycles i j := by
  simp only [‚Üê cancel_mono (K.iCycles j), assoc, opcyclesToCycles_iCycles,
    p_fromOpcycles, toCycles_i]

@[reassoc (attr := simp)]
lemma homologyŒπ_opcyclesToCycles :
    K.homologyŒπ i ‚â´ K.opcyclesToCycles i j = 0 := by
  simp only [‚Üê cancel_mono (K.iCycles j), assoc, opcyclesToCycles_iCycles,
    homologyŒπ_comp_fromOpcycles, zero_comp]

@[reassoc (attr := simp)]
lemma opcyclesToCycles_homologyœÄ :
    K.opcyclesToCycles i j ‚â´ K.homologyœÄ j = 0 := by
  simp only [‚Üê cancel_epi (K.pOpcycles i),
    pOpcycles_opcyclesToCycles_assoc, toCycles_comp_homologyœÄ, comp_zero]

variable {K L}

@[reassoc (attr := simp)]
lemma opcyclesToCycles_naturality :
    opcyclesMap œÜ i ‚â´ opcyclesToCycles L i j = opcyclesToCycles K i j ‚â´ cyclesMap œÜ j := by
  simp only [‚Üê cancel_mono (L.iCycles j), ‚Üê cancel_epi (K.pOpcycles i),
    assoc, p_opcyclesMap_assoc, pOpcycles_opcyclesToCycles_iCycles, Hom.comm, cyclesMap_i,
    pOpcycles_opcyclesToCycles_iCycles_assoc]

variable (K)

@[simps]
noncomputable def shortComplex‚ÇÑ : ShortComplex‚ÇÑ C where
  f := K.homologyŒπ i
  g := K.opcyclesToCycles i j
  h := K.homologyœÄ j

instance : Mono (K.shortComplex‚ÇÑ i j).f := by
  dsimp
  infer_instance

instance : Epi (K.shortComplex‚ÇÑ i j).h := by
  dsimp
  infer_instance

instance [Mono œÜ] (i : Œπ) : Mono (œÜ.f i) := by
  change Mono ((HomologicalComplex.eval C c i).map œÜ)
  infer_instance

instance [Epi œÜ] (i : Œπ) : Epi (œÜ.f i) := by
  change Epi ((HomologicalComplex.eval C c i).map œÜ)
  infer_instance

lemma shortComplex‚ÇÑ_exact : (K.shortComplex‚ÇÑ i j).Exact where
  exact‚ÇÇ := by
    let S := ShortComplex.mk _ _ (K.homologyŒπ_comp_fromOpcycles i j)
    let œÜ : (K.shortComplex‚ÇÑ i j).shortComplex‚ÇÅ ‚ü∂ S :=
      { œÑ‚ÇÅ := ùüô _
        œÑ‚ÇÇ := ùüô _
        œÑ‚ÇÉ := K.iCycles j  }
    rw [ShortComplex.exact_iff_of_epi_of_isIso_of_mono œÜ]
    exact S.exact_of_f_is_kernel (K.homologyIsKernel i j (c.next_eq' hij))
  exact‚ÇÉ := by
    let S := ShortComplex.mk _ _ (K.toCycles_comp_homologyœÄ i j)
    let œÜ : S ‚ü∂ (K.shortComplex‚ÇÑ i j).shortComplex‚ÇÇ :=
      { œÑ‚ÇÅ := K.pOpcycles i
        œÑ‚ÇÇ := ùüô _
        œÑ‚ÇÉ := ùüô _  }
    rw [‚Üê ShortComplex.exact_iff_of_epi_of_isIso_of_mono œÜ]
    exact S.exact_of_g_is_cokernel (K.homologyIsCokernel i j (c.prev_eq' hij))

instance : Mono (K.shortComplex‚ÇÑ i j).shortComplex‚ÇÅ.f := by
  dsimp
  infer_instance

instance : Epi (K.shortComplex‚ÇÑ i j).shortComplex‚ÇÇ.g := by
  dsimp
  infer_instance

variable (C c)

@[simps]
noncomputable def natTransOpCyclesToCycles : opcyclesFunctor C c i ‚ü∂ cyclesFunctor C c j where
  app K := K.opcyclesToCycles i j

attribute [local simp] homologyMap_comp opcyclesMap_comp cyclesMap_comp

@[simps]
noncomputable def shortComplex‚ÇÑFunctor : HomologicalComplex C c ‚•§ ShortComplex‚ÇÑ C where
  obj K := K.shortComplex‚ÇÑ i j
  map {K‚ÇÅ K‚ÇÇ} œÜ :=
    { œÑ‚ÇÅ := homologyMap œÜ i
      œÑ‚ÇÇ := opcyclesMap œÜ i
      œÑ‚ÇÉ := cyclesMap œÜ j
      œÑ‚ÇÑ := homologyMap œÜ j }

namespace HomologySequence

instance : (opcyclesFunctor C c i).PreservesZeroMorphisms where
instance : (cyclesFunctor C c i).PreservesZeroMorphisms where

variable {C c i j}

instance [Mono (œÜ.f j)] : Mono (cyclesMap œÜ j) :=
  mono_of_mono_fac (cyclesMap_i œÜ j)

attribute [local instance] epi_comp

instance [Epi (œÜ.f i)] : Epi (opcyclesMap œÜ i) :=
  epi_of_epi_fac (p_opcyclesMap œÜ i)

variable (i j)

def opcyclesRightExact :
    (ShortComplex.mk (opcyclesMap S.f j) (opcyclesMap S.g j) (by rw [‚Üê opcyclesMap_comp, S.zero, opcyclesMap_zero])).Exact := by
  have := hS.epi_g
  have hj := (hS.map_of_exact (HomologicalComplex.eval C c j)).gIsCokernel
  apply ShortComplex.exact_of_g_is_cokernel
  refine' CokernelCofork.IsColimit.ofœÄ' _ _  (fun {A} k hk => by
    dsimp at k hk ‚ä¢
    have H := CokernelCofork.IsColimit.desc' hj (S.X‚ÇÇ.pOpcycles j ‚â´ k) (by
      dsimp
      rw [‚Üê p_opcyclesMap_assoc, hk, comp_zero])
    dsimp at H
    refine' ‚ü®S.X‚ÇÉ.descOpcycles H.1 _ rfl _, _‚ü©
    ¬∑ rw [‚Üê cancel_epi (S.g.f (c.prev j)), comp_zero, Hom.comm_assoc, H.2,
        d_pOpcycles_assoc, zero_comp]
    ¬∑ rw [‚Üê cancel_epi (S.X‚ÇÇ.pOpcycles j), opcyclesMap_comp_descOpcycles, p_descOpcycles, H.2])

def cyclesLeftExact :
    (ShortComplex.mk (cyclesMap S.f i) (cyclesMap S.g i) (by rw [‚Üê cyclesMap_comp, S.zero, cyclesMap_zero])).Exact := by
  have := hS.mono_f
  have hi := (hS.map_of_exact (HomologicalComplex.eval C c i)).fIsKernel
  apply ShortComplex.exact_of_f_is_kernel
  exact KernelFork.IsLimit.ofŒπ' _ _ (fun {A} k hk => by
    dsimp at k hk ‚ä¢
    have H := KernelFork.IsLimit.lift' hi (k ‚â´ S.X‚ÇÇ.iCycles i) (by
      dsimp
      rw [assoc, ‚Üê cyclesMap_i, reassoc_of% hk, zero_comp])
    dsimp at H
    refine' ‚ü®S.X‚ÇÅ.liftCycles H.1 _ rfl _, _‚ü©
    ¬∑ rw [‚Üê cancel_mono (S.f.f _), assoc, zero_comp, ‚Üê Hom.comm, reassoc_of% H.2,
        iCycles_d, comp_zero]
    ¬∑ rw [‚Üê cancel_mono (S.X‚ÇÇ.iCycles i), liftCycles_comp_cyclesMap, liftCycles_i, H.2])

@[simps]
noncomputable def snakeInput : ShortComplex.SnakeInput C where
  L‚ÇÄ := (homologyFunctor C c i).mapShortComplex.obj S
  L‚ÇÅ := (opcyclesFunctor C c i).mapShortComplex.obj S
  L‚ÇÇ := (cyclesFunctor C c j).mapShortComplex.obj S
  L‚ÇÉ := (homologyFunctor C c j).mapShortComplex.obj S
  v‚ÇÄ‚ÇÅ := S.mapNatTrans (natTransHomologyŒπ C c i)
  v‚ÇÅ‚ÇÇ := S.mapNatTrans (natTransOpCyclesToCycles C c i j)
  v‚ÇÇ‚ÇÉ := S.mapNatTrans (natTransHomologyœÄ C c j)
  w‚ÇÄ‚ÇÇ := by ext <;> dsimp <;> simp
  w‚ÇÅ‚ÇÉ := by ext <;> dsimp <;> simp
  h‚ÇÄ := by
    apply ShortComplex.isLimitOfIsLimitœÄ
    all_goals
      refine' (KernelFork.isLimitMapConeEquiv _ _).symm _
      exact (HomologicalComplex.shortComplex‚ÇÑ_exact _ i j hij).exact‚ÇÇ.fIsKernel
  h‚ÇÉ := by
    apply ShortComplex.isColimitOfIsColimitœÄ
    all_goals
      refine' (CokernelCofork.isColimitMapCoconeEquiv _ _).symm _
      exact (HomologicalComplex.shortComplex‚ÇÑ_exact _ i j hij).exact‚ÇÉ.gIsCokernel
  epi_L‚ÇÅ_g := by
    have := hS.epi_g
    dsimp
    infer_instance
  mono_L‚ÇÇ_f := by
    have := hS.mono_f
    dsimp
    infer_instance
  L‚ÇÅ_exact := opcyclesRightExact hS i
  L‚ÇÇ_exact := cyclesLeftExact hS j

@[simps]
noncomputable def snakeInputHom : snakeInput hS i j hij ‚ü∂ snakeInput hS' i j hij where
  f‚ÇÄ := (homologyFunctor C c i).mapShortComplex.map œÑ
  f‚ÇÅ := (opcyclesFunctor C c i).mapShortComplex.map œÑ
  f‚ÇÇ := (cyclesFunctor C c j).mapShortComplex.map œÑ
  f‚ÇÉ := (homologyFunctor C c j).mapShortComplex.map œÑ
  comm‚ÇÄ‚ÇÅ := by ext <;> dsimp <;> simp
  comm‚ÇÅ‚ÇÇ := by ext <;> dsimp <;> simp
  comm‚ÇÇ‚ÇÉ := by ext <;> dsimp <;> simp

end HomologySequence

end HomologicalComplex

namespace CategoryTheory

namespace ShortComplex

namespace ShortExact

open HomologicalComplex HomologySequence

variable (i j)

noncomputable def Œ¥ : S.X‚ÇÉ.homology i ‚ü∂ S.X‚ÇÅ.homology j := (snakeInput hS i j hij).Œ¥

@[reassoc (attr := simp)]
lemma Œ¥_comp : hS.Œ¥ i j hij ‚â´ HomologicalComplex.homologyMap S.f j = 0 := (snakeInput hS i j hij).Œ¥_L‚ÇÉ_f

@[reassoc (attr := simp)]
lemma comp_Œ¥ : HomologicalComplex.homologyMap S.g i ‚â´ hS.Œ¥ i j hij = 0 := (snakeInput hS i j hij).L‚ÇÄ_g_Œ¥

lemma exact‚ÇÅ : (ShortComplex.mk _ _ (Œ¥_comp hS i j hij)).Exact :=
  (snakeInput hS i j hij).exact_L‚ÇÇ'

lemma exact‚ÇÉ : (ShortComplex.mk _ _ (comp_Œ¥ hS i j hij)).Exact :=
  (snakeInput hS i j hij).exact_L‚ÇÅ'

lemma exact‚ÇÇ : (ShortComplex.mk (HomologicalComplex.homologyMap S.f i) (HomologicalComplex.homologyMap S.g i)
    (by rw [‚Üê HomologicalComplex.homologyMap_comp, S.zero, HomologicalComplex.homologyMap_zero])).Exact := by
  by_cases c.Rel i (c.next i)
  ¬∑ exact (snakeInput hS i _ h).ex‚ÇÄ
  ¬∑ have : ‚àÄ (K : HomologicalComplex C c), IsIso (K.homologyŒπ i) :=
      fun K => ShortComplex.isIso_homologyŒπ (K.sc i) (K.shape _ _ h)
    have e : S.map (HomologicalComplex.homologyFunctor C c i) ‚âÖ S.map (HomologicalComplex.opcyclesFunctor C c i) :=
      ShortComplex.isoMk (asIso (S.X‚ÇÅ.homologyŒπ i))
        (asIso (S.X‚ÇÇ.homologyŒπ i)) (asIso (S.X‚ÇÉ.homologyŒπ i)) (by aesop_cat) (by aesop_cat)
    exact ShortComplex.exact_of_iso e.symm (opcyclesRightExact hS i)

lemma Œ¥_naturality : HomologicalComplex.homologyMap œÑ.œÑ‚ÇÉ i ‚â´ hS'.Œ¥ i j hij =
    hS.Œ¥ i j hij ‚â´ HomologicalComplex.homologyMap œÑ.œÑ‚ÇÅ j :=
  SnakeInput.naturality_Œ¥ (snakeInputHom hS hS' œÑ i j hij)

@[reassoc]
lemma comp_Œ¥_eq {A : C} (x‚ÇÉ : A ‚ü∂ S.X‚ÇÉ.X i) (x‚ÇÇ : A ‚ü∂ S.X‚ÇÇ.X i) (y‚ÇÅ : A ‚ü∂ S.X‚ÇÅ.X j)
    (hx‚ÇÉ : x‚ÇÉ ‚â´ S.X‚ÇÉ.d i j = 0) (hx‚ÇÇ : x‚ÇÇ ‚â´ S.g.f i = x‚ÇÉ)
    (hy‚ÇÅ : y‚ÇÅ ‚â´ S.f.f j = x‚ÇÇ ‚â´ S.X‚ÇÇ.d i j) :
    S.X‚ÇÉ.liftCycles x‚ÇÉ j (c.next_eq' hij) hx‚ÇÉ ‚â´ S.X‚ÇÉ.homologyœÄ i ‚â´ hS.Œ¥ i j hij =
      S.X‚ÇÅ.liftCycles y‚ÇÅ _ rfl (by
        have := hS.mono_f
        rw [‚Üê cancel_mono (S.f.f _), assoc, ‚Üê Hom.comm, reassoc_of% hy‚ÇÅ, S.X‚ÇÇ.d_comp_d,
          comp_zero, zero_comp]) ‚â´ S.X‚ÇÅ.homologyœÄ j := by
  have eq := (snakeInput hS i j hij).comp_Œ¥_eq
    (S.X‚ÇÉ.liftCycles x‚ÇÉ j (c.next_eq' hij) hx‚ÇÉ ‚â´ S.X‚ÇÉ.homologyœÄ i)
    (x‚ÇÇ ‚â´ S.X‚ÇÇ.pOpcycles i) (S.X‚ÇÅ.liftCycles y‚ÇÅ _ rfl (by
      have := hS.mono_f
      rw [‚Üê cancel_mono (S.f.f _), assoc, ‚Üê Hom.comm, reassoc_of% hy‚ÇÅ, S.X‚ÇÇ.d_comp_d,
        comp_zero, zero_comp])) (by simp [reassoc_of% hx‚ÇÇ]) (by
        rw [‚Üê cancel_mono (S.X‚ÇÇ.iCycles j)]
        simp [hy‚ÇÅ])
  simpa only [assoc] using eq

end ShortExact

end ShortComplex

end CategoryTheory
