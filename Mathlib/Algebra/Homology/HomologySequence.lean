import Mathlib.Algebra.Homology.ExactSequence
import Mathlib.Algebra.Homology.ShortComplex.HomologicalComplex
import Mathlib.Algebra.Homology.ShortComplex.SnakeLemma
import Mathlib.Algebra.Homology.ShortComplex.ShortExact

open CategoryTheory Category Limits

namespace HomologicalComplex

section HasZeroMorphisms

-- this should be moved
variable {C Œπ : Type*} [Category C] [HasZeroMorphisms C] {c : ComplexShape Œπ}
  (K L : HomologicalComplex C c) (œÜ : K ‚ü∂ L) (i j : Œπ)
  [K.HasHomology i] [K.HasHomology j]
  [L.HasHomology i] [L.HasHomology j]

/-- The morphism `K.opcycles i ‚ü∂ K.cycles j` that is induced by `K.d i j`. -/
noncomputable def opcyclesToCycles [K.HasHomology i] [K.HasHomology j] :
    K.opcycles i ‚ü∂ K.cycles j :=
  K.liftCycles (K.fromOpcycles i j) _ rfl (by simp)

@[reassoc (attr := simp)]
lemma opcyclesToCycles_iCycles : K.opcyclesToCycles i j ‚â´ K.iCycles j = K.fromOpcycles i j := by
  dsimp only [opcyclesToCycles]
  simp

@[reassoc]
lemma pOpcycles_opcyclesToCycles_iCycles :
    K.pOpcycles i ‚â´ K.opcyclesToCycles i j ‚â´ K.iCycles j = K.d i j := by
  simp [opcyclesToCycles]

@[reassoc (attr := simp)]
lemma pOpcycles_opcyclesToCycles :
    K.pOpcycles i ‚â´ K.opcyclesToCycles i j = K.toCycles i j := by
  simp only [‚Üê cancel_mono (K.iCycles j), assoc, opcyclesToCycles_iCycles,
    p_fromOpcycles, toCycles_i]

@[reassoc (attr := simp)]
lemma homologyŒπ_opcyclesToCycles :
    K.homologyŒπ i ‚â´ K.opcyclesToCycles i j = 0 := by
  simp only [‚Üê cancel_mono (K.iCycles j), assoc, opcyclesToCycles_iCycles,
    homologyŒπ_comp_fromOpcycles, zero_comp]

@[reassoc (attr := simp)]
lemma opcyclesToCycles_homologyœÄ :
    K.opcyclesToCycles i j ‚â´ K.homologyœÄ j = 0 := by
  simp only [‚Üê cancel_epi (K.pOpcycles i),
    pOpcycles_opcyclesToCycles_assoc, toCycles_comp_homologyœÄ, comp_zero]

variable {K L}

@[reassoc (attr := simp)]
lemma opcyclesToCycles_naturality :
    opcyclesMap œÜ i ‚â´ opcyclesToCycles L i j = opcyclesToCycles K i j ‚â´ cyclesMap œÜ j := by
  simp only [‚Üê cancel_mono (L.iCycles j), ‚Üê cancel_epi (K.pOpcycles i),
    assoc, p_opcyclesMap_assoc, pOpcycles_opcyclesToCycles_iCycles, Hom.comm, cyclesMap_i,
    pOpcycles_opcyclesToCycles_iCycles_assoc]

instance [CategoryWithHomology C] : (homologyFunctor C c i).PreservesZeroMorphisms where
instance [CategoryWithHomology C] : (opcyclesFunctor C c i).PreservesZeroMorphisms where
instance [CategoryWithHomology C] : (cyclesFunctor C c i).PreservesZeroMorphisms where

end HasZeroMorphisms

section Preadditive

variable {C Œπ : Type*} [Category C] [Preadditive C] {c : ComplexShape Œπ}
  (K : HomologicalComplex C c) (i j : Œπ) (hij : c.Rel i j)

namespace HomologySequence

/-- The diagram `K.homology i ‚ü∂ K.opcycles i ‚ü∂ K.cycles j ‚ü∂ K.homology j`. -/
@[simp]
noncomputable def composableArrows‚ÇÉ [K.HasHomology i] [K.HasHomology j] :
    ComposableArrows C 3 :=
  ComposableArrows.mk‚ÇÉ (K.homologyŒπ i) (K.opcyclesToCycles i j) (K.homologyœÄ j)

/-- The diagram `K.homology i ‚ü∂ K.opcycles i ‚ü∂ K.cycles j ‚ü∂ K.homology j` is exact
when `c.Rel i j`. -/
lemma composableArrows‚ÇÉ_exact [CategoryWithHomology C] :
    (composableArrows‚ÇÉ K i j).Exact := by
  let S := ShortComplex.mk (K.homologyŒπ i) (K.opcyclesToCycles i j) (by simp)
  let S' := ShortComplex.mk (K.homologyŒπ i) (K.fromOpcycles i j) (by simp)
  let Œπ : S ‚ü∂ S' :=
    { œÑ‚ÇÅ := ùüô _
      œÑ‚ÇÇ := ùüô _
      œÑ‚ÇÉ := K.iCycles j }
  have hS : S.Exact := by
    rw [ShortComplex.exact_iff_of_epi_of_isIso_of_mono Œπ]
    exact S'.exact_of_f_is_kernel (K.homologyIsKernel i j (c.next_eq' hij))
  let T := ShortComplex.mk (K.opcyclesToCycles i j) (K.homologyœÄ j) (by simp)
  let T' := ShortComplex.mk  (K.toCycles i j) (K.homologyœÄ j) (by simp)
  let œÄ : T' ‚ü∂ T :=
    { œÑ‚ÇÅ := K.pOpcycles i
      œÑ‚ÇÇ := ùüô _
      œÑ‚ÇÉ := ùüô _ }
  have hT : T.Exact := by
    rw [‚Üê ShortComplex.exact_iff_of_epi_of_isIso_of_mono œÄ]
    exact T'.exact_of_g_is_cokernel (K.homologyIsCokernel i j (c.prev_eq' hij))
  apply ComposableArrows.exact_of_Œ¥‚ÇÄ
  ¬∑ exact hS.exact_toComposableArrows
  ¬∑ exact hT.exact_toComposableArrows

variable (C)

attribute [local simp] homologyMap_comp cyclesMap_comp opcyclesMap_comp

@[simps]
noncomputable def composableArrows‚ÇÉFunctor [CategoryWithHomology C] :
    HomologicalComplex C c ‚•§ ComposableArrows C 3 where
  obj K := composableArrows‚ÇÉ K i j
  map {K L} œÜ := ComposableArrows.homMk‚ÇÉ (homologyMap œÜ i) (opcyclesMap œÜ i) (cyclesMap œÜ j)
    (homologyMap œÜ j) (by aesop_cat) (by aesop_cat) (by aesop_cat)

end HomologySequence

end Preadditive

section Abelian

variable {C Œπ : Type*} [Category C] [Abelian C] {c : ComplexShape Œπ}
  {S : ShortComplex (HomologicalComplex C c)} (hS : S.ShortExact)
   (i j : Œπ) (hij : c.Rel i j)

namespace HomologySequence

/-def snakeInput : ShortComplex.SnakeInput C where
  L‚ÇÄ := (homologyFunctor C c i).mapShortComplex.obj S
  L‚ÇÅ := (opcyclesFunctor C c i).mapShortComplex.obj S
  L‚ÇÇ := (cyclesFunctor C c i).mapShortComplex.obj S
  L‚ÇÉ := (homologyFunctor C c j).mapShortComplex.obj S
  v‚ÇÄ‚ÇÅ := S.mapNatTrans (natTransHomologyŒπ C c i)
  v‚ÇÅ‚ÇÇ := sorry
  v‚ÇÇ‚ÇÉ := sorry
  h‚ÇÄ := sorry
  h‚ÇÉ := sorry
  L‚ÇÅ_exact := sorry
  L‚ÇÇ_exact := sorry
  epi_L‚ÇÅ_g := sorry
  mono_L‚ÇÇ_f := sorry
  w‚ÇÄ‚ÇÇ := sorry
  w‚ÇÅ‚ÇÉ := sorry-/

end HomologySequence

end Abelian

end HomologicalComplex
