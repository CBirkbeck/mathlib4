import Mathlib.CategoryTheory.Monoidal.Preadditive
import Mathlib.CategoryTheory.GradedObject.Monoidal
import Mathlib.Algebra.Homology.HomologicalComplex
import Mathlib.Algebra.Homology.HomologicalBicomplex
import Mathlib.Algebra.Homology.Single
import Mathlib.Algebra.GroupPower.NegOnePow

open CategoryTheory Category Limits MonoidalCategory Preadditive
  MonoidalPreadditive

instance (C D : Type*) [Category C] [Category D] [Preadditive C] [Preadditive D]
    (F : C ‚•§ D) [F.Additive] : PreservesFiniteCoproducts F := sorry

namespace CategoryTheory

namespace MonoidalPreadditive

variable {C : Type*} [Category C] [Preadditive C] [MonoidalCategory C] [MonoidalPreadditive C]

variable {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : C} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ)

lemma tensor_zsmul (n : ‚Ñ§) : tensorHom f‚ÇÅ (n ‚Ä¢ f‚ÇÇ) = n ‚Ä¢ tensorHom f‚ÇÅ f‚ÇÇ := sorry
lemma zsmul_tensor (n : ‚Ñ§) : tensorHom (n ‚Ä¢ f‚ÇÅ) f‚ÇÇ = n ‚Ä¢ tensorHom f‚ÇÅ f‚ÇÇ := sorry

end MonoidalPreadditive

end CategoryTheory

namespace ComplexShape

variable {I : Type*} [AddMonoid I] (c : ComplexShape I)

structure TensorSigns where
  Œµ : I ‚Üí ‚Ñ§
  rel_add (p q r : I) (hpq : c.Rel p q) : c.Rel (p + r) (q + r)
  add_rel (p q r : I) (hpq : c.Rel p q) : c.Rel (r + p) (r + q)
  Œµ_succ (p q : I) (hpq : c.Rel p q) : Œµ q = - Œµ p
  Œµ_add (p q : I) : Œµ (p + q) = Œµ p * Œµ q -- needed for the associator
  Œµ_zero : Œµ 0 = 1 -- should be necessary for one of the unitor

attribute [simp] TensorSigns.Œµ_zero

variable {c}

lemma TensorSigns.next_add (s : TensorSigns c) (p q : I) (hp : c.Rel p (c.next p)) :
    c.next (p + q) = c.next p + q :=
  c.next_eq' (s.rel_add _ _ q hp)

lemma TensorSigns.next_add' (s : TensorSigns c) (p q : I) (hq : c.Rel q (c.next q)) :
    c.next (p + q) = p + c.next q :=
  c.next_eq' (s.add_rel _ _ p hq)

@[simps]
def TensorSigns.totalComplexShape (s : TensorSigns c) : TotalComplexShape c c c where
  œÄ := fun ‚ü®p, q‚ü© => p + q
  Œµ‚ÇÅ := fun _ => 1
  Œµ‚ÇÇ := fun ‚ü®p, _‚ü© => s.Œµ p
  rel‚ÇÅ p p' h q := s.rel_add _ _ _ h
  rel‚ÇÇ p q q' h := s.add_rel _ _ _ h
  eq p p' _ _ h _ := by
    dsimp
    rw [one_mul, mul_one, s.Œµ_succ _ _ h, add_left_neg]

def tensorSignsDown‚Ñï  : TensorSigns (ComplexShape.down ‚Ñï) where
  Œµ p := (-1) ^ p
  rel_add p q r (hpq : q + 1 = p) := by
    simp only [down_Rel]
    linarith
  add_rel p q r (hpq : q + 1 = p) := by
    simp only [down_Rel]
    linarith
  Œµ_succ := by
    rintro _ q rfl
    dsimp
    rw [pow_add, pow_one, mul_neg, mul_one, neg_neg]
  Œµ_add p q := by
    dsimp
    rw [pow_add]
  Œµ_zero := by simp

def tensorSignsUp‚Ñ§   : TensorSigns (ComplexShape.up ‚Ñ§) where
  Œµ := Int.negOnePow
  rel_add p q r (hpq : p + 1 = q) := by
    simp only [up_Rel]
    linarith
  add_rel p q r (hpq : p + 1 = q) := by
    simp only [up_Rel]
    linarith
  Œµ_succ := by
    rintro p _ rfl
    rw [Int.negOnePow_succ]
  Œµ_add := Int.negOnePow_add
  Œµ_zero := Int.negOnePow_zero

end ComplexShape

namespace HomologicalComplex

variable {C : Type*} [Category C] [Preadditive C] [MonoidalCategory C] [MonoidalPreadditive C]
  {I : Type*} [AddCommMonoid I] {c : ComplexShape I} [DecidableEq I]

noncomputable def _root_.CategoryTheory.GradedObject.Monoidal.ŒπTensorObjOrZero (X‚ÇÅ X‚ÇÇ : GradedObject I C)
    [GradedObject.HasTensor X‚ÇÅ X‚ÇÇ]
    (i‚ÇÅ i‚ÇÇ j : I) : X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚ü∂ GradedObject.Monoidal.tensorObj X‚ÇÅ X‚ÇÇ j :=
  if h : i‚ÇÅ + i‚ÇÇ = j
    then
      GradedObject.Monoidal.ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j h
    else 0

noncomputable def _root_.CategoryTheory.GradedObject.Monoidal.ŒπTensorObjOrZero_eq (X‚ÇÅ X‚ÇÇ : GradedObject I C)
    [GradedObject.HasTensor X‚ÇÅ X‚ÇÇ]
    (i‚ÇÅ i‚ÇÇ j : I) (h : i‚ÇÅ + i‚ÇÇ = j) :
    GradedObject.Monoidal.ŒπTensorObjOrZero X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j =
      GradedObject.Monoidal.ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j h :=
  dif_pos h

noncomputable def _root_.CategoryTheory.GradedObject.Monoidal.ŒπTensorObjOrZero_eq_zero (X‚ÇÅ X‚ÇÇ : GradedObject I C)
    [GradedObject.HasTensor X‚ÇÅ X‚ÇÇ]
    (i‚ÇÅ i‚ÇÇ j : I) (h : i‚ÇÅ + i‚ÇÇ ‚â† j) :
    GradedObject.Monoidal.ŒπTensorObjOrZero X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j = 0 :=
  dif_neg h

abbrev HasTensor (K L : HomologicalComplex C c) :=
  GradedObject.HasTensor K.toGradedObject L.toGradedObject

namespace Monoidal

variable (s : c.TensorSigns) [(curryObj (MonoidalCategory.tensor C)).PreservesZeroMorphisms]
  [‚àÄ (X : C), ((curryObj (tensor C)).obj X).PreservesZeroMorphisms ]

attribute [local simp] add_comp comp_add zsmul_comp comp_zsmul

instance (K L : HomologicalComplex C c) [h : HasTensor K L] :
  (((Functor.mapHomologicalComplex‚ÇÇ (curryObj (tensor C)) c c).obj K).obj L).toGradedObject.HasMap
      s.totalComplexShape.œÄ := h

noncomputable def tensorObj (K L : HomologicalComplex C c) [HasTensor K L] :
    HomologicalComplex C c :=
  (((Functor.mapHomologicalComplex‚ÇÇ (curryObj (MonoidalCategory.tensor C)) c c).obj K).obj L).total s.totalComplexShape

noncomputable def tensorHom {K‚ÇÅ L‚ÇÅ K‚ÇÇ L‚ÇÇ : HomologicalComplex C c}
    (f‚ÇÅ : K‚ÇÅ ‚ü∂ L‚ÇÅ) (f‚ÇÇ : K‚ÇÇ ‚ü∂ L‚ÇÇ) [HasTensor K‚ÇÅ K‚ÇÇ] [HasTensor L‚ÇÅ L‚ÇÇ] :
    tensorObj s K‚ÇÅ K‚ÇÇ ‚ü∂ tensorObj s L‚ÇÅ L‚ÇÇ :=
  HomologicalComplex‚ÇÇ.totalMap
    (((Functor.mapHomologicalComplex‚ÇÇ (curryObj (MonoidalCategory.tensor C)) c c).map f‚ÇÅ).app K‚ÇÇ ‚â´
      ((Functor.mapHomologicalComplex‚ÇÇ (curryObj (MonoidalCategory.tensor C)) c c).obj L‚ÇÅ).map f‚ÇÇ) _

lemma tensorHom_f {K‚ÇÅ L‚ÇÅ K‚ÇÇ L‚ÇÇ : HomologicalComplex C c}
    (f‚ÇÅ : K‚ÇÅ ‚ü∂ L‚ÇÅ) (f‚ÇÇ : K‚ÇÇ ‚ü∂ L‚ÇÇ) [HasTensor K‚ÇÅ K‚ÇÇ] [HasTensor L‚ÇÅ L‚ÇÇ] :
  (tensorHom s f‚ÇÅ f‚ÇÇ).f = GradedObject.Monoidal.tensorHom f‚ÇÅ.f f‚ÇÇ.f := rfl

lemma tensor_id (K L : HomologicalComplex C c) [HasTensor K L] :
    tensorHom s (ùüô K) (ùüô L) = ùüô (tensorObj s K L) := by
  apply toGradedObjectFunctor_map_injective
  apply GradedObject.Monoidal.tensor_id

lemma tensor_comp {K‚ÇÅ K‚ÇÇ K‚ÇÉ L‚ÇÅ L‚ÇÇ L‚ÇÉ : HomologicalComplex C c}
    (f‚ÇÅ : K‚ÇÅ ‚ü∂ K‚ÇÇ) (f‚ÇÇ : K‚ÇÇ ‚ü∂ K‚ÇÉ)
    (g‚ÇÅ : L‚ÇÅ ‚ü∂ L‚ÇÇ) (g‚ÇÇ : L‚ÇÇ ‚ü∂ L‚ÇÉ) [HasTensor K‚ÇÅ L‚ÇÅ] [HasTensor K‚ÇÇ L‚ÇÇ] [HasTensor K‚ÇÉ L‚ÇÉ] :
    tensorHom s (f‚ÇÅ ‚â´ f‚ÇÇ) (g‚ÇÅ ‚â´ g‚ÇÇ) = tensorHom s f‚ÇÅ g‚ÇÅ ‚â´ tensorHom s f‚ÇÇ g‚ÇÇ := by
  apply toGradedObjectFunctor_map_injective
  apply GradedObject.Monoidal.tensor_comp


section

variable (K‚ÇÅ K‚ÇÇ : HomologicalComplex C c) [HasTensor K‚ÇÅ K‚ÇÇ]

noncomputable def ŒπTensorObj (i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ : I) (h : i‚ÇÅ + i‚ÇÇ = i‚ÇÅ‚ÇÇ) :
  K‚ÇÅ.X i‚ÇÅ ‚äó K‚ÇÇ.X i‚ÇÇ ‚ü∂ (tensorObj s K‚ÇÅ K‚ÇÇ).X i‚ÇÅ‚ÇÇ :=
    GradedObject.Monoidal.ŒπTensorObj K‚ÇÅ.toGradedObject K‚ÇÇ.toGradedObject i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h

noncomputable def ŒπTensorObjOrZero (i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ : I) :
  K‚ÇÅ.X i‚ÇÅ ‚äó K‚ÇÇ.X i‚ÇÇ ‚ü∂ (tensorObj s K‚ÇÅ K‚ÇÇ).X i‚ÇÅ‚ÇÇ :=
  if h : i‚ÇÅ + i‚ÇÇ = i‚ÇÅ‚ÇÇ
    then
      ŒπTensorObj s K‚ÇÅ K‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h
    else 0

lemma ŒπTensorObjOrZero_eq (i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ : I) (h : i‚ÇÅ + i‚ÇÇ = i‚ÇÅ‚ÇÇ) :
    ŒπTensorObjOrZero s K‚ÇÅ K‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ = ŒπTensorObj s K‚ÇÅ K‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h := dif_pos h

lemma ŒπTensorObjOrZero_eq_zero (i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ : I) (h : i‚ÇÅ + i‚ÇÇ ‚â† i‚ÇÅ‚ÇÇ) :
    ŒπTensorObjOrZero s K‚ÇÅ K‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ = 0 := dif_neg h

variable {K‚ÇÅ K‚ÇÇ}

noncomputable def descTensor {A : C} {j : I}
    (f : ‚àÄ (i‚ÇÅ i‚ÇÇ : I) (_ : i‚ÇÅ + i‚ÇÇ = j), K‚ÇÅ.X i‚ÇÅ ‚äó K‚ÇÇ.X i‚ÇÇ ‚ü∂ A) :
    (tensorObj s K‚ÇÅ K‚ÇÇ).X j ‚ü∂ A :=
  @GradedObject.Monoidal.descTensor I _ _ _ _ K‚ÇÅ.toGradedObject K‚ÇÇ.toGradedObject _ A j f

@[reassoc (attr := simp)]
lemma Œπ_descTensor {A : C} (j : I) (f : ‚àÄ (i‚ÇÅ i‚ÇÇ : I) (_ : i‚ÇÅ + i‚ÇÇ = j), K‚ÇÅ.X i‚ÇÅ ‚äó K‚ÇÇ.X i‚ÇÇ ‚ü∂ A)
    (i‚ÇÅ i‚ÇÇ : I) (hi : i‚ÇÅ + i‚ÇÇ = j) :
    ŒπTensorObj s K‚ÇÅ K‚ÇÇ i‚ÇÅ i‚ÇÇ j hi ‚â´ descTensor s f = f i‚ÇÅ i‚ÇÇ hi := by
  apply GradedObject.Monoidal.Œπ_descTensor

@[ext]
lemma tensorObj_ext {K‚ÇÅ K‚ÇÇ : HomologicalComplex C c} {A : C} {j : I}
    [HasTensor K‚ÇÅ K‚ÇÇ] (f g : (tensorObj s K‚ÇÅ K‚ÇÇ).X j ‚ü∂ A)
    (h : ‚àÄ (i‚ÇÅ i‚ÇÇ : I) (hi : i‚ÇÅ + i‚ÇÇ = j),
      ŒπTensorObj s K‚ÇÅ K‚ÇÇ i‚ÇÅ i‚ÇÇ j hi ‚â´ f = ŒπTensorObj s K‚ÇÅ K‚ÇÇ i‚ÇÅ i‚ÇÇ j hi ‚â´ g)  : f = g :=
  GradedObject.Monoidal.tensorObj_ext _ _ h

@[reassoc]
lemma ŒπTensorObj_d (n m : I) (i‚ÇÅ i‚ÇÇ : I) (h : i‚ÇÅ + i‚ÇÇ = n) :
  ŒπTensorObj s K‚ÇÅ K‚ÇÇ i‚ÇÅ i‚ÇÇ n h ‚â´ (tensorObj s K‚ÇÅ K‚ÇÇ).d n m =
    (K‚ÇÅ.d i‚ÇÅ (c.next i‚ÇÅ) ‚äó ùüô (K‚ÇÇ.X i‚ÇÇ)) ‚â´ ŒπTensorObjOrZero _ _ _ _ _ _ +
    s.Œµ i‚ÇÅ ‚Ä¢ (ùüô (K‚ÇÅ.X i‚ÇÅ) ‚äó K‚ÇÇ.d i‚ÇÇ (c.next i‚ÇÇ)) ‚â´ ŒπTensorObjOrZero _ _ _ _ _ _ := by
  dsimp [tensorObj, HomologicalComplex‚ÇÇ.total]
  erw [GradedObject.Œπ_descMapObj]
  rw [one_smul]
  rfl

@[reassoc]
lemma ŒπTensorObj_d' (n m : I) (i‚ÇÅ i‚ÇÇ : I) (h : i‚ÇÅ + i‚ÇÇ = n) (i‚ÇÅ' i‚ÇÇ' : I) (h‚ÇÅ : i‚ÇÅ' = c.next i‚ÇÅ) (h‚ÇÇ : i‚ÇÇ' = c.next i‚ÇÇ) :
  ŒπTensorObj s K‚ÇÅ K‚ÇÇ i‚ÇÅ i‚ÇÇ n h ‚â´ (tensorObj s K‚ÇÅ K‚ÇÇ).d n m =
    (K‚ÇÅ.d i‚ÇÅ i‚ÇÅ' ‚äó ùüô (K‚ÇÇ.X i‚ÇÇ)) ‚â´ ŒπTensorObjOrZero _ _ _ _ _ _ +
    s.Œµ i‚ÇÅ ‚Ä¢ (ùüô (K‚ÇÅ.X i‚ÇÅ) ‚äó K‚ÇÇ.d i‚ÇÇ i‚ÇÇ') ‚â´ ŒπTensorObjOrZero _ _ _ _ _ _ := by
  subst h‚ÇÅ h‚ÇÇ
  apply ŒπTensorObj_d

end

section

variable (K‚ÇÅ K‚ÇÇ K‚ÇÉ : HomologicalComplex C c) [HasTensor K‚ÇÇ K‚ÇÉ] [H : HasTensor K‚ÇÅ (tensorObj s K‚ÇÇ K‚ÇÉ)]

noncomputable def ŒπTensorObj‚ÇÉ (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) :
    K‚ÇÅ.X i‚ÇÅ ‚äó K‚ÇÇ.X i‚ÇÇ ‚äó K‚ÇÉ.X i‚ÇÉ ‚ü∂ (tensorObj s K‚ÇÅ (tensorObj s K‚ÇÇ K‚ÇÉ)).X j :=
  have : GradedObject.HasTensor K‚ÇÅ.toGradedObject (GradedObject.Monoidal.tensorObj K‚ÇÇ.toGradedObject K‚ÇÉ.toGradedObject) := H
  GradedObject.Monoidal.ŒπTensorObj‚ÇÉ K‚ÇÅ.toGradedObject K‚ÇÇ.toGradedObject K‚ÇÉ.toGradedObject i‚ÇÅ i‚ÇÇ i‚ÇÉ j h

@[reassoc]
lemma ŒπTensorObj‚ÇÉ_eq (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) (i‚ÇÇ‚ÇÉ : I) (h' : i‚ÇÇ + i‚ÇÉ = i‚ÇÇ‚ÇÉ) :
    ŒπTensorObj‚ÇÉ s K‚ÇÅ K‚ÇÇ K‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h =
      (ùüô _ ‚äó ŒπTensorObj s K‚ÇÇ K‚ÇÉ i‚ÇÇ i‚ÇÉ i‚ÇÇ‚ÇÉ h') ‚â´
        ŒπTensorObj s K‚ÇÅ (tensorObj s K‚ÇÇ K‚ÇÉ) i‚ÇÅ i‚ÇÇ‚ÇÉ j (by rw [‚Üê h', ‚Üê add_assoc, h]) :=
  have : GradedObject.HasTensor K‚ÇÅ.toGradedObject (GradedObject.Monoidal.tensorObj K‚ÇÇ.toGradedObject K‚ÇÉ.toGradedObject) := H
  GradedObject.Monoidal.ŒπTensorObj‚ÇÉ_eq _ _ _ _ _ _ _ h _ _

variable {K‚ÇÅ K‚ÇÇ K‚ÇÉ s}

@[ext]
lemma tensorObj‚ÇÉ_ext {j : I} {A : C} (f g : (tensorObj s K‚ÇÅ (tensorObj s K‚ÇÇ K‚ÇÉ)).X j ‚ü∂ A)
    [H‚ÇÇ‚ÇÉ : GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ K‚ÇÅ.X K‚ÇÇ.X K‚ÇÉ.X]
    (h : ‚àÄ (i‚ÇÅ i‚ÇÇ i‚ÇÉ : I) (hi : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j),
      ŒπTensorObj‚ÇÉ s K‚ÇÅ K‚ÇÇ K‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j hi ‚â´ f = ŒπTensorObj‚ÇÉ s K‚ÇÅ K‚ÇÇ K‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j hi ‚â´ g) : f = g := by
  have : GradedObject.HasTensor K‚ÇÅ.X (GradedObject.Monoidal.tensorObj K‚ÇÇ.X K‚ÇÉ.X) := H
  exact GradedObject.Monoidal.tensorObj‚ÇÉ_ext _ _ h

end

section

variable (K‚ÇÅ K‚ÇÇ K‚ÇÉ : HomologicalComplex C c) [HasTensor K‚ÇÅ K‚ÇÇ] [H : HasTensor (tensorObj s K‚ÇÅ K‚ÇÇ) K‚ÇÉ]

noncomputable def ŒπTensorObj‚ÇÉ' (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) :
    (K‚ÇÅ.X i‚ÇÅ ‚äó K‚ÇÇ.X i‚ÇÇ) ‚äó K‚ÇÉ.X i‚ÇÉ ‚ü∂ (tensorObj s (tensorObj s K‚ÇÅ K‚ÇÇ) K‚ÇÉ).X j :=
  have : GradedObject.HasTensor (GradedObject.Monoidal.tensorObj K‚ÇÅ.toGradedObject K‚ÇÇ.toGradedObject) K‚ÇÉ.toGradedObject := H
  GradedObject.Monoidal.ŒπTensorObj‚ÇÉ' K‚ÇÅ.toGradedObject K‚ÇÇ.toGradedObject K‚ÇÉ.toGradedObject i‚ÇÅ i‚ÇÇ i‚ÇÉ j h

@[reassoc]
lemma ŒπTensorObj‚ÇÉ'_eq (i‚ÇÅ i‚ÇÇ i‚ÇÉ j : I) (h : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j) (i‚ÇÅ‚ÇÇ : I) (h' : i‚ÇÅ + i‚ÇÇ = i‚ÇÅ‚ÇÇ) :
    ŒπTensorObj‚ÇÉ' s K‚ÇÅ K‚ÇÇ K‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j h =
      (ŒπTensorObj s K‚ÇÅ K‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÅ‚ÇÇ h' ‚äó ùüô _) ‚â´
        ŒπTensorObj s (tensorObj s K‚ÇÅ K‚ÇÇ) K‚ÇÉ i‚ÇÅ‚ÇÇ i‚ÇÉ j (by rw [‚Üêh', h]) :=
  have : GradedObject.HasTensor (GradedObject.Monoidal.tensorObj K‚ÇÅ.toGradedObject K‚ÇÇ.toGradedObject) K‚ÇÉ.toGradedObject := H
  GradedObject.Monoidal.ŒπTensorObj‚ÇÉ'_eq _ _ _ _ _ _ _ h _ _

variable {K‚ÇÅ K‚ÇÇ K‚ÇÉ s}

@[ext]
lemma tensorObj‚ÇÉ'_ext {j : I} {A : C} (f g : (tensorObj s (tensorObj s K‚ÇÅ K‚ÇÇ) K‚ÇÉ).X j ‚ü∂ A)
    [GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor K‚ÇÅ.X K‚ÇÇ.X K‚ÇÉ.X]
    (h : ‚àÄ (i‚ÇÅ i‚ÇÇ i‚ÇÉ : I) (hi : i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = j),
      ŒπTensorObj‚ÇÉ' s K‚ÇÅ K‚ÇÇ K‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j hi ‚â´ f = ŒπTensorObj‚ÇÉ' s K‚ÇÅ K‚ÇÇ K‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ j hi ‚â´ g) : f = g := by
  have : GradedObject.HasTensor (GradedObject.Monoidal.tensorObj K‚ÇÅ.X K‚ÇÇ.X) K‚ÇÉ.X := H
  exact GradedObject.Monoidal.tensorObj‚ÇÉ'_ext _ _ h

end


section

variable (K‚ÇÅ K‚ÇÇ K‚ÇÉ : HomologicalComplex C c)
  [HasTensor K‚ÇÅ K‚ÇÇ] [HasTensor (tensorObj s K‚ÇÅ K‚ÇÇ) K‚ÇÉ]
  [HasTensor K‚ÇÇ K‚ÇÉ] [HasTensor K‚ÇÅ (tensorObj s K‚ÇÇ K‚ÇÉ)]
  [GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor K‚ÇÅ.X K‚ÇÇ.X K‚ÇÉ.X]
  [GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ K‚ÇÅ.X K‚ÇÇ.X K‚ÇÉ.X]

noncomputable def associator :
    tensorObj s (tensorObj s K‚ÇÅ K‚ÇÇ) K‚ÇÉ ‚âÖ tensorObj s K‚ÇÅ (tensorObj s K‚ÇÇ K‚ÇÉ) :=
  have : GradedObject.HasTensor (GradedObject.Monoidal.tensorObj K‚ÇÅ.X K‚ÇÇ.X) K‚ÇÉ.X :=
    (inferInstance : HasTensor (tensorObj s K‚ÇÅ K‚ÇÇ) K‚ÇÉ)
  have : GradedObject.HasTensor K‚ÇÅ.X (GradedObject.Monoidal.tensorObj K‚ÇÇ.X K‚ÇÉ.X) :=
    (inferInstance : HasTensor K‚ÇÅ (tensorObj s K‚ÇÇ K‚ÇÉ))
  Hom.isoOfComponents (fun i => (GradedObject.eval i).mapIso
    (GradedObject.Monoidal.associator K‚ÇÅ.toGradedObject K‚ÇÇ.toGradedObject K‚ÇÉ.toGradedObject)) (by
      intro n m _
      apply GradedObject.Monoidal.tensorObj‚ÇÉ'_ext
      intro i‚ÇÅ i‚ÇÇ i‚ÇÉ h
      dsimp
      rw [GradedObject.Monoidal.ŒπTensorObj‚ÇÉ'_associator_hom_assoc]
      change _ ‚â´ ŒπTensorObj‚ÇÉ s K‚ÇÅ K‚ÇÇ K‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ n h ‚â´ _ =
        ŒπTensorObj‚ÇÉ' s K‚ÇÅ K‚ÇÇ K‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ n h ‚â´ _
      rw [ŒπTensorObj‚ÇÉ_eq s K‚ÇÅ K‚ÇÇ K‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ n h _ rfl, assoc,
        ŒπTensorObj‚ÇÉ'_eq s K‚ÇÅ K‚ÇÇ K‚ÇÉ i‚ÇÅ i‚ÇÇ i‚ÇÉ n h _ rfl, assoc,
        ŒπTensorObj_d, comp_add, comp_add, comp_zsmul, comp_zsmul,
        ‚Üê tensor_comp_assoc, id_comp, comp_id, ‚Üê tensor_comp_assoc, id_comp, ŒπTensorObj_d,
        tensor_add, add_comp, comp_add, smul_add, id_tensor_comp, assoc, tensor_zsmul,
        zsmul_comp, comp_zsmul, smul_smul,
        ŒπTensorObj_d_assoc, add_comp, assoc, comp_add]
      conv_rhs => rw [‚Üê tensor_comp_assoc, id_comp, ŒπTensorObj_d, add_tensor, add_comp,
        zsmul_comp, comp_zsmul, assoc, zsmul_tensor, zsmul_comp]
      rw [add_assoc]
      congr 1
      ¬∑ by_cases h‚ÇÅ : c.Rel i‚ÇÅ (c.next i‚ÇÅ)
        ¬∑ by_cases h‚ÇÇ : c.next (i‚ÇÅ + i‚ÇÇ) + i‚ÇÉ = m
          ¬∑ have h‚ÇÉ : c.Rel (i‚ÇÅ + i‚ÇÇ) (c.next (i‚ÇÅ + i‚ÇÇ)) := by
              rw [s.next_add _ _ h‚ÇÅ]
              exact s.rel_add _ _ _ h‚ÇÅ
            have h‚ÇÑ : c.next i‚ÇÅ + (i‚ÇÇ + i‚ÇÉ) = m := by
              rw [‚Üê s.next_add _ _ h‚ÇÅ, ‚Üê add_assoc, s.next_add _ _ h‚ÇÉ, h‚ÇÇ]
            have h‚ÇÖ : c.next i‚ÇÅ + i‚ÇÇ + i‚ÇÉ = m := by rw [‚Üê h‚ÇÑ, add_assoc]
            rw [ŒπTensorObjOrZero_eq _ _ _ _ _ _ h‚ÇÇ, ŒπTensorObjOrZero_eq _ _ _ _ _ _ h‚ÇÑ,
              ŒπTensorObjOrZero_eq _ _ _ _ _ _ (s.next_add _ _ h‚ÇÅ).symm, comp_tensor_id, assoc,
              ‚Üê ŒπTensorObj‚ÇÉ'_eq_assoc _ _ _ _ _ _ _ _ h‚ÇÖ]
            erw [GradedObject.Monoidal.ŒπTensorObj‚ÇÉ'_associator_hom]
            rw [‚Üê tensor_id_comp_id_tensor, assoc, ‚Üê ŒπTensorObj‚ÇÉ_eq  _ _ _ _ _ _ _ _ h‚ÇÖ,
              ‚Üê MonoidalCategory.tensor_id, ‚Üê associator_naturality_assoc]
            rfl
          ¬∑ rw [ŒπTensorObjOrZero_eq_zero _ _ _ _ _ _ h‚ÇÇ, zero_comp, comp_zero]
            rw [ŒπTensorObjOrZero_eq_zero, comp_zero, comp_zero]
            intro h‚ÇÉ
            apply h‚ÇÇ
            rw [c.next_eq' (s.rel_add _ _ i‚ÇÇ h‚ÇÅ), ‚Üê h‚ÇÉ, add_assoc]
        ¬∑ dsimp
          rw [K‚ÇÅ.shape _ _ h‚ÇÅ, zero_tensor, zero_tensor, zero_comp, comp_zero, zero_comp,
            zero_tensor, zero_comp]
      ¬∑ congr 2
        ¬∑ by_cases h‚ÇÅ : c.Rel i‚ÇÇ (c.next i‚ÇÇ)
          ¬∑ rw [ŒπTensorObjOrZero_eq _ _ _ _ _ _ (s.next_add i‚ÇÇ i‚ÇÉ h‚ÇÅ).symm]
            by_cases h‚ÇÇ : i‚ÇÅ + c.next (i‚ÇÇ + i‚ÇÉ) = m
            ¬∑ have h‚ÇÉ : i‚ÇÅ + c.next i‚ÇÇ + i‚ÇÉ = m := by rw [add_assoc, ‚Üê s.next_add _ _ h‚ÇÅ, h‚ÇÇ]
              have h‚ÇÑ : c.next (i‚ÇÅ + i‚ÇÇ) + i‚ÇÉ = m := by rw [‚Üê h‚ÇÉ, s.next_add' _ _ h‚ÇÅ]
              rw [ŒπTensorObjOrZero_eq _ _ _ _ _ _ h‚ÇÇ,
                ŒπTensorObjOrZero_eq _ _ _ _ _ _ (s.next_add' i‚ÇÅ i‚ÇÇ h‚ÇÅ).symm,
                ŒπTensorObjOrZero_eq _ _ _ _ _ _ h‚ÇÑ, comp_tensor_id, assoc]
              rw [‚Üê ŒπTensorObj‚ÇÉ'_eq_assoc _ _ _ _ _ _ _ _ h‚ÇÉ]
              erw [GradedObject.Monoidal.ŒπTensorObj‚ÇÉ'_associator_hom]
              rw [‚Üê associator_naturality_assoc, ‚Üê ŒπTensorObj‚ÇÉ_eq _ _ _ _ _ _ _ _ h‚ÇÉ]
              rfl
            ¬∑ rw [ŒπTensorObjOrZero_eq_zero _ _ _ _ _ _ h‚ÇÇ, comp_zero, comp_zero, comp_zero]
              have : c.next (i‚ÇÅ + i‚ÇÇ) + i‚ÇÉ ‚â† m := by
                rw [s.next_add' i‚ÇÅ i‚ÇÇ h‚ÇÅ, add_assoc, ‚Üê s.next_add i‚ÇÇ i‚ÇÉ h‚ÇÅ]
                exact h‚ÇÇ
              rw [ŒπTensorObjOrZero_eq_zero _ _ _ _ _ _ this, zero_comp, comp_zero]
          ¬∑ rw [K‚ÇÇ.shape _ _ h‚ÇÅ, tensor_zero, zero_tensor, tensor_zero, zero_comp, comp_zero,
              zero_comp, zero_tensor, zero_comp]
        ¬∑ rw [s.Œµ_add]
        ¬∑ by_cases h‚ÇÅ : c.Rel i‚ÇÉ (c.next i‚ÇÉ)
          ¬∑ rw [ŒπTensorObjOrZero_eq _ _ _ _ _ _ (s.next_add' i‚ÇÇ i‚ÇÉ h‚ÇÅ).symm]
            by_cases h‚ÇÇ : i‚ÇÅ + c.next (i‚ÇÇ + i‚ÇÉ) = m
            ¬∑ have h‚ÇÉ : i‚ÇÅ + i‚ÇÇ + c.next i‚ÇÉ = m := by rw [add_assoc, ‚Üê s.next_add' _ _ h‚ÇÅ, h‚ÇÇ]
              rw [ŒπTensorObjOrZero_eq _ _ _ _ _ _ h‚ÇÇ,
                ŒπTensorObjOrZero_eq _ _ _ _ _ _ h‚ÇÉ,
                tensor_id_comp_id_tensor_assoc]
              conv_rhs => rw [‚Üê id_tensor_comp_tensor_id, assoc,
                ‚Üê ŒπTensorObj‚ÇÉ'_eq_assoc _ _ _ _ _ _ _ _ h‚ÇÉ]
              erw [GradedObject.Monoidal.ŒπTensorObj‚ÇÉ'_associator_hom]
              rw [id_tensor_comp, assoc, ‚Üê ŒπTensorObj‚ÇÉ_eq _ _ _ _ _ _ _ _ h‚ÇÉ]
              rw [‚Üê associator_naturality_assoc, MonoidalCategory.tensor_id]
              rfl
            ¬∑ rw [ŒπTensorObjOrZero_eq_zero _ _ _ _ _ _ h‚ÇÇ, comp_zero, comp_zero,
                ŒπTensorObjOrZero_eq_zero, zero_comp, comp_zero, comp_zero]
              intro h‚ÇÉ
              apply h‚ÇÇ
              rw [s.next_add' _ _ h‚ÇÅ, ‚Üê h‚ÇÉ, add_assoc]
          ¬∑ rw [K‚ÇÉ.shape _ _ h‚ÇÅ, tensor_zero, tensor_zero,
              zero_comp, zero_comp, tensor_zero, zero_comp, comp_zero,
              comp_zero])

end

section

variable [HasZeroObject C]
variable [‚àÄ (X‚ÇÅ : C), PreservesColimit (Functor.empty C) ((curryObj (tensor C)).obj X‚ÇÅ)]
variable [‚àÄ (X‚ÇÇ : C), PreservesColimit (Functor.empty C) ((Functor.flip (curryObj (tensor C))).obj X‚ÇÇ)]

-- we could consider using the `single` functor instead, but the compatibilities
-- would be slightly more difficult to get
noncomputable def tensorUnit :
    HomologicalComplex C c :=
  HomologicalComplex.ofGradedObject GradedObject.Monoidal.tensorUnit c
    (fun _ _ => 0) (fun _ _ _ => rfl) (by aesop_cat)

@[simp]
lemma tensorUnit_d (n m : I) : (tensorUnit : HomologicalComplex C c).d n m = 0 := rfl

variable (K : HomologicalComplex C c)

instance : HasTensor tensorUnit K := by
  change GradedObject.HasTensor GradedObject.Monoidal.tensorUnit _
  infer_instance

noncomputable def leftUnitor : tensorObj s tensorUnit K ‚âÖ K :=
  Iso.symm
    (Hom.isoOfComponents
      (fun n => (GradedObject.eval n).mapIso
        (GradedObject.Monoidal.leftUnitor K.toGradedObject).symm) (fun n m hnm => by
      dsimp
      by_cases hnm : c.Rel n m
      . obtain rfl := c.next_eq' hnm
        rw [GradedObject.Monoidal.leftUnitor_inv_apply, assoc, assoc]
        change _ ‚â´ _ ‚â´ ŒπTensorObj s tensorUnit K 0 n n (zero_add n) ‚â´ _ = _
        rw [ŒπTensorObj_d, tensorUnit_d, zero_tensor, zero_comp, zero_add,
          s.Œµ_zero, comp_zsmul, one_smul, ŒπTensorObjOrZero_eq _ _ _ _ _ _ (zero_add _),
          GradedObject.Monoidal.leftUnitor_inv_apply,
          leftUnitor_inv_naturality_assoc,
          id_tensor_comp_tensor_id_assoc]
        erw [tensor_id_comp_id_tensor_assoc]
        rfl
      ¬∑ rw [HomologicalComplex.shape _ _ _ hnm, K.shape _ _ hnm, comp_zero, zero_comp]))

instance : HasTensor K tensorUnit := by
  change GradedObject.HasTensor _ GradedObject.Monoidal.tensorUnit
  infer_instance

noncomputable def rightUnitor : tensorObj s K tensorUnit ‚âÖ K :=
  Iso.symm
    (Hom.isoOfComponents
      (fun n => (GradedObject.eval n).mapIso
        (GradedObject.Monoidal.rightUnitor K.toGradedObject).symm) (fun n m hnm => by
      dsimp
      by_cases hnm : c.Rel n m
      . obtain rfl := c.next_eq' hnm
        rw [GradedObject.Monoidal.rightUnitor_inv_apply, assoc, assoc]
        change _ ‚â´ _ ‚â´ ŒπTensorObj s K tensorUnit n 0 n (add_zero n) ‚â´ _ = _
        rw [ŒπTensorObj_d, tensorUnit_d, tensor_zero, zero_comp, smul_zero, add_zero,
          ŒπTensorObjOrZero_eq _ _ _ _ _ _ (add_zero _),
          GradedObject.Monoidal.rightUnitor_inv_apply,
          rightUnitor_inv_naturality_assoc, tensor_id_comp_id_tensor_assoc]
        erw [id_tensor_comp_tensor_id_assoc]
        rfl
      ¬∑ rw [HomologicalComplex.shape _ _ _ hnm, K.shape _ _ hnm, comp_zero, zero_comp]))

end

end Monoidal

section

variable
  [‚àÄ (X‚ÇÅ X‚ÇÇ : GradedObject I C), GradedObject.HasTensor X‚ÇÅ X‚ÇÇ]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C), GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ X‚ÇÉ]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C), GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]
  [HasInitial C]
  [‚àÄ X‚ÇÅ, PreservesColimit (Functor.empty.{0} C)
    ((curryObj (MonoidalCategory.tensor C)).obj X‚ÇÅ)]
  [‚àÄ X‚ÇÇ, PreservesColimit (Functor.empty.{0} C)
    ((curryObj (MonoidalCategory.tensor C)).flip.obj X‚ÇÇ)]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : GradedObject I C), GradedObject.HasTensor‚ÇÑObjExt X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ]

instance (X : C) : ((curryObj (MonoidalCategory.tensor C)).obj X).Additive := by
  change (tensorLeft X).Additive
  infer_instance

instance (X : C) : ((curryObj (MonoidalCategory.tensor C)).flip.obj X).Additive := by
  change (tensorRight X).Additive
  infer_instance

noncomputable example : MonoidalCategory (GradedObject I C) := inferInstance

end

end HomologicalComplex
