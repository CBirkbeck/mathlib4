import Mathlib.CategoryTheory.Monoidal.Preadditive
import Mathlib.CategoryTheory.GradedObject.Monoidal
import Mathlib.Algebra.Homology.HomologicalComplex
import Mathlib.Algebra.Homology.HomologicalBicomplex
import Mathlib.Algebra.GroupPower.NegOnePow

open CategoryTheory Category Limits MonoidalCategory Preadditive
  MonoidalPreadditive

instance (C D : Type*) [Category C] [Category D] [Preadditive C] [Preadditive D]
    (F : C ‚•§ D) [F.Additive] : PreservesFiniteCoproducts F := sorry

namespace ComplexShape

variable {I : Type*} [AddCommMonoid I] (c : ComplexShape I)

structure TensorSigns where
  Œµ : I ‚Üí ‚Ñ§
  rel_add (p q r : I) (hpq : c.Rel p q) : c.Rel (p + r) (q + r)
  Œµ_succ (p q : I) (hpq : c.Rel p q) : Œµ q = - Œµ p

variable {c}

lemma TensorSigns.add_rel (s : TensorSigns c) (p q r : I) (hpq : c.Rel p q) :
    c.Rel (r + p) (r + q) := by
  rw [add_comm r, add_comm r]
  exact s.rel_add _ _ _ hpq

def tensorSignsDown‚Ñï  : TensorSigns (ComplexShape.down ‚Ñï) where
  Œµ p := (-1) ^ p
  rel_add p q r (hpq : q + 1 = p) := by
    simp only [down_Rel]
    linarith
  Œµ_succ := by
    rintro _ q rfl
    dsimp
    rw [pow_add, pow_one, mul_neg, mul_one, neg_neg]

def tensorSignsUp‚Ñ§   : TensorSigns (ComplexShape.up ‚Ñ§) where
  Œµ := Int.negOnePow
  rel_add p q r (hpq : p + 1 = q) := by
    simp only [up_Rel]
    linarith
  Œµ_succ := by
    rintro p _ rfl
    rw [Int.negOnePow_succ]

end ComplexShape

namespace HomologicalComplex

variable (C : Type*) [Category C] [Preadditive C] [MonoidalCategory C] [MonoidalPreadditive C]
  {I : Type*} [AddCommMonoid I] (c : ComplexShape I) [DecidableEq I]

variable {C}

@[simps]
def ofGradedObject (X : GradedObject I C) (c : ComplexShape I)
    (d : ‚àÄ (i j : I), X i ‚ü∂ X j) (shape : ‚àÄ (i j : I), ¬¨ c.Rel i j ‚Üí d i j = 0)
    (d_comp_d' : ‚àÄ (i j k : I), c.Rel i j ‚Üí c.Rel j k ‚Üí d i j ‚â´ d j k = 0) :
    HomologicalComplex C c where
  X := X
  d := d
  shape := shape
  d_comp_d' := d_comp_d'

variable {c}

abbrev toGradedObject (K : HomologicalComplex C c) : GradedObject I C := K.X

variable (C c)

@[simps]
def toGradedObjectFunctor : HomologicalComplex C c ‚•§ GradedObject I C where
  obj K := K.toGradedObject
  map f := f.f

instance : Faithful (toGradedObjectFunctor C c) where
  map_injective {K L} f g h := by
    ext n
    exact congr_fun h n

variable {C c}

noncomputable def _root_.CategoryTheory.GradedObject.Monoidal.ŒπTensorObjOrZero (X‚ÇÅ X‚ÇÇ : GradedObject I C)
    [GradedObject.HasTensor X‚ÇÅ X‚ÇÇ]
    (i‚ÇÅ i‚ÇÇ j : I) : X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚ü∂ GradedObject.Monoidal.tensorObj X‚ÇÅ X‚ÇÇ j :=
  if h : i‚ÇÅ + i‚ÇÇ = j
    then
      GradedObject.Monoidal.ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j h
    else 0

noncomputable def _root_.CategoryTheory.GradedObject.Monoidal.ŒπTensorObjOrZero_eq (X‚ÇÅ X‚ÇÇ : GradedObject I C)
    [GradedObject.HasTensor X‚ÇÅ X‚ÇÇ]
    (i‚ÇÅ i‚ÇÇ j : I) (h : i‚ÇÅ + i‚ÇÇ = j) :
    GradedObject.Monoidal.ŒπTensorObjOrZero X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j =
      GradedObject.Monoidal.ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j h :=
  dif_pos h

noncomputable def _root_.CategoryTheory.GradedObject.Monoidal.ŒπTensorObjOrZero_eq_zero (X‚ÇÅ X‚ÇÇ : GradedObject I C)
    [GradedObject.HasTensor X‚ÇÅ X‚ÇÇ]
    (i‚ÇÅ i‚ÇÇ j : I) (h : i‚ÇÅ + i‚ÇÇ ‚â† j) :
    GradedObject.Monoidal.ŒπTensorObjOrZero X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j = 0 :=
  dif_neg h

abbrev HasTensor (K L : HomologicalComplex C c) :=
  GradedObject.HasTensor K.toGradedObject L.toGradedObject

namespace Monoidal

variable {s}

variable (s : c.TensorSigns)

attribute [local simp] add_comp comp_add zsmul_comp comp_zsmul


-- this is ok, but these verifications should be part of a more general construction
-- HomologicalComplex C‚ÇÅ c ‚•§ HomologicalComplex C‚ÇÇ c' ‚•§ HomologicalComplex C‚ÇÉ c''
-- for a bifunctor C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ C‚ÇÉ`, some map `Œπ √ó Œπ' ‚Üí Œπ''`, + conditions, + bunch of signs
-- see Algebra.Homology.HomologicalBicomplex

noncomputable def tensorObj (K L : HomologicalComplex C c) [HasTensor K L] :
    HomologicalComplex C c :=
  ofGradedObject (GradedObject.Monoidal.tensorObj K.toGradedObject L.toGradedObject) c
    (fun n m => GradedObject.Monoidal.descTensor
      (fun p q hpq =>
        (K.d p (c.next p) ‚äó ùüô (L.X q)) ‚â´ GradedObject.Monoidal.ŒπTensorObjOrZero _ _ _ _ _ +
          (s.Œµ p : ‚Ñ§) ‚Ä¢ ((ùüô (K.X p)) ‚äó L.d q (c.next q)) ‚â´ GradedObject.Monoidal.ŒπTensorObjOrZero _ _ _ _ _))
    (fun n m hnm => by
      ext p q hpq
      dsimp
      simp only [GradedObject.Monoidal.Œπ_descTensor, comp_zero]
      conv_rhs => rw [‚Üê add_zero 0]
      congr 1
      ¬∑ by_cases c.Rel p (c.next p)
        ¬∑ rw [GradedObject.Monoidal.ŒπTensorObjOrZero_eq_zero, comp_zero]
          intro h'
          apply hnm
          rw [‚Üê h', ‚Üê hpq]
          exact s.rel_add p (c.next p) q h
        ¬∑ rw [K.shape _ _ h, zero_tensor, zero_comp]
      ¬∑ by_cases c.Rel q (c.next q)
        ¬∑ rw [GradedObject.Monoidal.ŒπTensorObjOrZero_eq_zero, comp_zero, smul_zero]
          intro h'
          apply hnm
          rw [‚Üê h', ‚Üê hpq, add_comm p, add_comm p]
          exact s.rel_add q (c.next q) p h
        . rw [L.shape _ _ h, tensor_zero, zero_comp, smul_zero])
    (fun i j k _ _ => by
      ext p q hpq
      dsimp
      simp only [GradedObject.Monoidal.Œπ_descTensor_assoc, Preadditive.add_comp, assoc, comp_zero]
      by_cases hj : c.next p + q = j
      ¬∑ rw [GradedObject.Monoidal.ŒπTensorObjOrZero_eq _ _ _ _ _ hj]
        by_cases hj' : p + c.next q = j
        ¬∑ simp only [GradedObject.Monoidal.ŒπTensorObjOrZero_eq _ _ _ _ _ hj',
            GradedObject.Monoidal.Œπ_descTensor, comp_add, comp_zsmul, tensor_id_comp_id_tensor_assoc,
            zsmul_comp, assoc,
            id_tensor_comp_tensor_id_assoc, ‚Üê tensor_comp_assoc, d_comp_d,
            tensor_zero, zero_tensor, zero_comp, smul_zero, zero_add, add_zero,
            comp_id, id_comp, ‚Üê add_smul]
          by_cases h : c.Rel p (c.next p)
          ¬∑ rw [s.Œµ_succ _ _ h, add_left_neg, zero_smul]
          ¬∑ rw [K.shape _ _ h, zero_tensor, zero_comp, smul_zero]
        ¬∑ rw [GradedObject.Monoidal.ŒπTensorObjOrZero_eq_zero _ _ _ _ _ hj',
            comp_zero, smul_zero, zero_comp, add_zero, GradedObject.Monoidal.Œπ_descTensor,
            comp_add, comp_zsmul, tensor_id_comp_id_tensor_assoc,
            ‚Üê tensor_comp_assoc, d_comp_d, zero_tensor, zero_comp, zero_add]
          by_cases hp : c.Rel p (c.next p)
          ¬∑ by_cases hq : c.Rel q (c.next q)
            ¬∑ exfalso
              apply hj'
              rw [‚Üê hj, ‚Üê c.next_eq' (s.rel_add _ _ q hp),
                ‚Üê c.next_eq' (s.add_rel _ _ p hq)]
            ¬∑ rw [L.shape _ _ hq, tensor_zero, zero_comp, smul_zero]
          . rw [K.shape _ _ hp, zero_tensor, zero_comp, smul_zero]
      ¬∑ simp only [GradedObject.Monoidal.ŒπTensorObjOrZero_eq_zero _ _ _ _ _ hj, zero_comp,
          comp_zero, zero_add, zsmul_comp, assoc]
        by_cases hj' : p + c.next q = j
        ¬∑ rw [GradedObject.Monoidal.ŒπTensorObjOrZero_eq _ _ _ _ _ hj',
            GradedObject.Monoidal.Œπ_descTensor, comp_add,
            id_tensor_comp_tensor_id_assoc, comp_zsmul,
            ‚Üê tensor_comp_assoc, d_comp_d, tensor_zero, zero_comp,
            smul_zero, add_zero]
          by_cases hp : c.Rel p (c.next p)
          ¬∑ by_cases hq : c.Rel q (c.next q)
            ¬∑ exfalso
              apply hj
              rw [‚Üê hj', ‚Üê c.next_eq' (s.rel_add _ _ q hp), ‚Üê c.next_eq' (s.add_rel _ _ p hq)]
            ¬∑ rw [L.shape _ _ hq, tensor_zero, zero_comp, smul_zero]
          ¬∑ rw [K.shape _ _ hp, zero_tensor, zero_comp, smul_zero]
        ¬∑ rw [GradedObject.Monoidal.ŒπTensorObjOrZero_eq_zero _ _ _ _ _ hj',
            zero_comp, comp_zero, smul_zero])

@[simps]
noncomputable def tensorHom {K‚ÇÅ L‚ÇÅ K‚ÇÇ L‚ÇÇ : HomologicalComplex C c}
    (f‚ÇÅ : K‚ÇÅ ‚ü∂ L‚ÇÅ) (f‚ÇÇ : K‚ÇÇ ‚ü∂ L‚ÇÇ) [HasTensor K‚ÇÅ K‚ÇÇ] [HasTensor L‚ÇÅ L‚ÇÇ] :
    tensorObj s K‚ÇÅ K‚ÇÇ ‚ü∂ tensorObj s L‚ÇÅ L‚ÇÇ where
  f := GradedObject.Monoidal.tensorHom f‚ÇÅ.f f‚ÇÇ.f
  comm' i j _ := by
    apply GradedObject.Monoidal.tensorObj_ext
    intro p q hpq
    dsimp [tensorObj]
    simp only [GradedObject.Monoidal.Œπ_tensorHom_assoc, GradedObject.Monoidal.Œπ_descTensor,
      comp_add, comp_zsmul, GradedObject.Monoidal.Œπ_descTensor_assoc, add_comp,
      assoc, zsmul_comp]
    congr 1
    ¬∑ by_cases hj : c.next p + q = j
      ¬∑ simp only [GradedObject.Monoidal.ŒπTensorObjOrZero_eq _ _ _ _ _ hj,
          GradedObject.Monoidal.Œπ_tensorHom,
          ‚Üê tensor_comp_assoc, id_comp, comp_id, Hom.comm]
      ¬∑ simp only [GradedObject.Monoidal.ŒπTensorObjOrZero_eq_zero _ _ _ _ _ hj,
          comp_zero, zero_comp]
    ¬∑ by_cases hj : p + c.next q = j
      ¬∑ simp only [GradedObject.Monoidal.ŒπTensorObjOrZero_eq _ _ _ _ _ hj,
          GradedObject.Monoidal.Œπ_tensorHom,
          ‚Üê tensor_comp_assoc, id_comp, comp_id, Hom.comm]
      ¬∑ simp only [GradedObject.Monoidal.ŒπTensorObjOrZero_eq_zero _ _ _ _ _ hj,
          zero_comp, comp_zero]

lemma tensor_id (K L : HomologicalComplex C c) [HasTensor K L] :
    tensorHom s (ùüô K) (ùüô L) = ùüô (tensorObj s K L) := by
  apply (toGradedObjectFunctor C c).map_injective
  apply GradedObject.Monoidal.tensor_id

lemma tensor_comp {K‚ÇÅ K‚ÇÇ K‚ÇÉ L‚ÇÅ L‚ÇÇ L‚ÇÉ : HomologicalComplex C c}
    (f‚ÇÅ : K‚ÇÅ ‚ü∂ K‚ÇÇ) (f‚ÇÇ : K‚ÇÇ ‚ü∂ K‚ÇÉ)
    (g‚ÇÅ : L‚ÇÅ ‚ü∂ L‚ÇÇ) (g‚ÇÇ : L‚ÇÇ ‚ü∂ L‚ÇÉ) [HasTensor K‚ÇÅ L‚ÇÅ] [HasTensor K‚ÇÇ L‚ÇÇ] [HasTensor K‚ÇÉ L‚ÇÉ] :
    tensorHom s (f‚ÇÅ ‚â´ f‚ÇÇ) (g‚ÇÅ ‚â´ g‚ÇÇ) = tensorHom s f‚ÇÅ g‚ÇÅ ‚â´ tensorHom s f‚ÇÇ g‚ÇÇ := by
  apply (toGradedObjectFunctor C c).map_injective
  apply GradedObject.Monoidal.tensor_comp

section

variable (K‚ÇÅ K‚ÇÇ K‚ÇÉ : HomologicalComplex C c)
  [HasTensor K‚ÇÅ K‚ÇÇ] [HasTensor (tensorObj s K‚ÇÅ K‚ÇÇ) K‚ÇÉ]
  [HasTensor K‚ÇÇ K‚ÇÉ] [HasTensor K‚ÇÅ (tensorObj s K‚ÇÇ K‚ÇÉ)]
  [GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor K‚ÇÅ.X K‚ÇÇ.X K‚ÇÉ.X]
  [GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ K‚ÇÅ.X K‚ÇÇ.X K‚ÇÉ.X]


/-def associator :
    tensorObj s (tensorObj s K‚ÇÅ K‚ÇÇ) K‚ÇÉ ‚âÖ tensorObj s K‚ÇÅ (tensorObj s K‚ÇÇ K‚ÇÉ) :=
  have : GradedObject.HasTensor (GradedObject.Monoidal.tensorObj K‚ÇÅ.X K‚ÇÇ.X) K‚ÇÉ.X :=
    (inferInstance : HasTensor (tensorObj s K‚ÇÅ K‚ÇÇ) K‚ÇÉ)
  have : GradedObject.HasTensor K‚ÇÅ.X (GradedObject.Monoidal.tensorObj K‚ÇÇ.X K‚ÇÉ.X) :=
    (inferInstance : HasTensor K‚ÇÅ (tensorObj s K‚ÇÇ K‚ÇÉ))
  Hom.isoOfComponents (fun i => (GradedObject.eval i).mapIso
    (GradedObject.Monoidal.associator K‚ÇÅ.toGradedObject K‚ÇÇ.toGradedObject K‚ÇÉ.toGradedObject)) (by
      intro i j hij
      dsimp
      sorry)-/

end

end Monoidal

section

variable
  [‚àÄ (X‚ÇÅ X‚ÇÇ : GradedObject I C), GradedObject.HasTensor X‚ÇÅ X‚ÇÇ]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C), GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ X‚ÇÉ]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C), GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]
  [HasInitial C]
  [‚àÄ X‚ÇÅ, PreservesColimit (Functor.empty.{0} C)
    ((curryObj (MonoidalCategory.tensor C)).obj X‚ÇÅ)]
  [‚àÄ X‚ÇÇ, PreservesColimit (Functor.empty.{0} C)
    ((curryObj (MonoidalCategory.tensor C)).flip.obj X‚ÇÇ)]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : GradedObject I C), GradedObject.HasTensor‚ÇÑObjExt X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ]

instance (X : C) : ((curryObj (MonoidalCategory.tensor C)).obj X).Additive := by
  change (tensorLeft X).Additive
  infer_instance

instance (X : C) : ((curryObj (MonoidalCategory.tensor C)).flip.obj X).Additive := by
  change (tensorRight X).Additive
  infer_instance

noncomputable example : MonoidalCategory (GradedObject I C) := inferInstance

end

end HomologicalComplex
