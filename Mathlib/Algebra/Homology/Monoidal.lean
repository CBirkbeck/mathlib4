import Mathlib.CategoryTheory.Monoidal.Preadditive
import Mathlib.CategoryTheory.GradedObject.Monoidal
import Mathlib.Algebra.Homology.HomologicalComplex
import Mathlib.Algebra.Homology.HomologicalBicomplex
import Mathlib.Algebra.GroupPower.NegOnePow

open CategoryTheory Category Limits MonoidalCategory Preadditive
  MonoidalPreadditive

instance (C D : Type*) [Category C] [Category D] [Preadditive C] [Preadditive D]
    (F : C ‚•§ D) [F.Additive] : PreservesFiniteCoproducts F := sorry

namespace ComplexShape

variable {I : Type*} [AddMonoid I] (c : ComplexShape I)

structure TensorSigns where
  Œµ : I ‚Üí ‚Ñ§
  rel_add (p q r : I) (hpq : c.Rel p q) : c.Rel (p + r) (q + r)
  add_rel (p q r : I) (hpq : c.Rel p q) : c.Rel (r + p) (r + q)
  Œµ_succ (p q : I) (hpq : c.Rel p q) : Œµ q = - Œµ p

variable {c}

def TensorSigns.totalComplexShape (s : TensorSigns c) : TotalComplexShape c c c where
  œÄ := fun ‚ü®p, q‚ü© => p + q
  Œµ‚ÇÅ := fun _ => 1
  Œµ‚ÇÇ := fun ‚ü®p, _‚ü© => s.Œµ p
  rel‚ÇÅ p p' h q := s.rel_add _ _ _ h
  rel‚ÇÇ p q q' h := s.add_rel _ _ _ h
  eq p p' _ _ h _ := by
    dsimp
    rw [one_mul, mul_one, s.Œµ_succ _ _ h, add_left_neg]

def tensorSignsDown‚Ñï  : TensorSigns (ComplexShape.down ‚Ñï) where
  Œµ p := (-1) ^ p
  rel_add p q r (hpq : q + 1 = p) := by
    simp only [down_Rel]
    linarith
  add_rel p q r (hpq : q + 1 = p) := by
    simp only [down_Rel]
    linarith
  Œµ_succ := by
    rintro _ q rfl
    dsimp
    rw [pow_add, pow_one, mul_neg, mul_one, neg_neg]

def tensorSignsUp‚Ñ§   : TensorSigns (ComplexShape.up ‚Ñ§) where
  Œµ := Int.negOnePow
  rel_add p q r (hpq : p + 1 = q) := by
    simp only [up_Rel]
    linarith
  add_rel p q r (hpq : p + 1 = q) := by
    simp only [up_Rel]
    linarith
  Œµ_succ := by
    rintro p _ rfl
    rw [Int.negOnePow_succ]

end ComplexShape

namespace HomologicalComplex

variable {C : Type*} [Category C] [Preadditive C] [MonoidalCategory C] [MonoidalPreadditive C]
  {I : Type*} [AddCommMonoid I] {c : ComplexShape I} [DecidableEq I]

noncomputable def _root_.CategoryTheory.GradedObject.Monoidal.ŒπTensorObjOrZero (X‚ÇÅ X‚ÇÇ : GradedObject I C)
    [GradedObject.HasTensor X‚ÇÅ X‚ÇÇ]
    (i‚ÇÅ i‚ÇÇ j : I) : X‚ÇÅ i‚ÇÅ ‚äó X‚ÇÇ i‚ÇÇ ‚ü∂ GradedObject.Monoidal.tensorObj X‚ÇÅ X‚ÇÇ j :=
  if h : i‚ÇÅ + i‚ÇÇ = j
    then
      GradedObject.Monoidal.ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j h
    else 0

noncomputable def _root_.CategoryTheory.GradedObject.Monoidal.ŒπTensorObjOrZero_eq (X‚ÇÅ X‚ÇÇ : GradedObject I C)
    [GradedObject.HasTensor X‚ÇÅ X‚ÇÇ]
    (i‚ÇÅ i‚ÇÇ j : I) (h : i‚ÇÅ + i‚ÇÇ = j) :
    GradedObject.Monoidal.ŒπTensorObjOrZero X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j =
      GradedObject.Monoidal.ŒπTensorObj X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j h :=
  dif_pos h

noncomputable def _root_.CategoryTheory.GradedObject.Monoidal.ŒπTensorObjOrZero_eq_zero (X‚ÇÅ X‚ÇÇ : GradedObject I C)
    [GradedObject.HasTensor X‚ÇÅ X‚ÇÇ]
    (i‚ÇÅ i‚ÇÇ j : I) (h : i‚ÇÅ + i‚ÇÇ ‚â† j) :
    GradedObject.Monoidal.ŒπTensorObjOrZero X‚ÇÅ X‚ÇÇ i‚ÇÅ i‚ÇÇ j = 0 :=
  dif_neg h

abbrev HasTensor (K L : HomologicalComplex C c) :=
  GradedObject.HasTensor K.toGradedObject L.toGradedObject

namespace Monoidal

variable {s}

variable (s : c.TensorSigns) [(curryObj (MonoidalCategory.tensor C)).PreservesZeroMorphisms]
  [‚àÄ (X : C), ((curryObj (tensor C)).obj X).PreservesZeroMorphisms ]

attribute [local simp] add_comp comp_add zsmul_comp comp_zsmul

instance (K L : HomologicalComplex C c) [h : HasTensor K L] :
  (((Functor.mapHomologicalComplex‚ÇÇ (curryObj (tensor C)) c c).obj K).obj L).toGradedObject.HasMap
      s.totalComplexShape.œÄ := h

noncomputable def tensorObj (K L : HomologicalComplex C c) [HasTensor K L] :
    HomologicalComplex C c :=
  (((Functor.mapHomologicalComplex‚ÇÇ (curryObj (MonoidalCategory.tensor C)) c c).obj K).obj L).total s.totalComplexShape

noncomputable def tensorHom {K‚ÇÅ L‚ÇÅ K‚ÇÇ L‚ÇÇ : HomologicalComplex C c}
    (f‚ÇÅ : K‚ÇÅ ‚ü∂ L‚ÇÅ) (f‚ÇÇ : K‚ÇÇ ‚ü∂ L‚ÇÇ) [HasTensor K‚ÇÅ K‚ÇÇ] [HasTensor L‚ÇÅ L‚ÇÇ] :
    tensorObj s K‚ÇÅ K‚ÇÇ ‚ü∂ tensorObj s L‚ÇÅ L‚ÇÇ :=
  HomologicalComplex‚ÇÇ.totalMap
    (((Functor.mapHomologicalComplex‚ÇÇ (curryObj (MonoidalCategory.tensor C)) c c).map f‚ÇÅ).app K‚ÇÇ ‚â´
      ((Functor.mapHomologicalComplex‚ÇÇ (curryObj (MonoidalCategory.tensor C)) c c).obj L‚ÇÅ).map f‚ÇÇ) _

lemma tensorHom_f {K‚ÇÅ L‚ÇÅ K‚ÇÇ L‚ÇÇ : HomologicalComplex C c}
    (f‚ÇÅ : K‚ÇÅ ‚ü∂ L‚ÇÅ) (f‚ÇÇ : K‚ÇÇ ‚ü∂ L‚ÇÇ) [HasTensor K‚ÇÅ K‚ÇÇ] [HasTensor L‚ÇÅ L‚ÇÇ] :
  (tensorHom s f‚ÇÅ f‚ÇÇ).f = GradedObject.Monoidal.tensorHom f‚ÇÅ.f f‚ÇÇ.f := rfl

lemma tensor_id (K L : HomologicalComplex C c) [HasTensor K L] :
    tensorHom s (ùüô K) (ùüô L) = ùüô (tensorObj s K L) := by
  apply toGradedObjectFunctor_map_injective
  apply GradedObject.Monoidal.tensor_id

lemma tensor_comp {K‚ÇÅ K‚ÇÇ K‚ÇÉ L‚ÇÅ L‚ÇÇ L‚ÇÉ : HomologicalComplex C c}
    (f‚ÇÅ : K‚ÇÅ ‚ü∂ K‚ÇÇ) (f‚ÇÇ : K‚ÇÇ ‚ü∂ K‚ÇÉ)
    (g‚ÇÅ : L‚ÇÅ ‚ü∂ L‚ÇÇ) (g‚ÇÇ : L‚ÇÇ ‚ü∂ L‚ÇÉ) [HasTensor K‚ÇÅ L‚ÇÅ] [HasTensor K‚ÇÇ L‚ÇÇ] [HasTensor K‚ÇÉ L‚ÇÉ] :
    tensorHom s (f‚ÇÅ ‚â´ f‚ÇÇ) (g‚ÇÅ ‚â´ g‚ÇÇ) = tensorHom s f‚ÇÅ g‚ÇÅ ‚â´ tensorHom s f‚ÇÇ g‚ÇÇ := by
  apply toGradedObjectFunctor_map_injective
  apply GradedObject.Monoidal.tensor_comp

section

variable (K‚ÇÅ K‚ÇÇ K‚ÇÉ : HomologicalComplex C c)
  [HasTensor K‚ÇÅ K‚ÇÇ] [HasTensor (tensorObj s K‚ÇÅ K‚ÇÇ) K‚ÇÉ]
  [HasTensor K‚ÇÇ K‚ÇÉ] [HasTensor K‚ÇÅ (tensorObj s K‚ÇÇ K‚ÇÉ)]
  [GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor K‚ÇÅ.X K‚ÇÇ.X K‚ÇÉ.X]
  [GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ K‚ÇÅ.X K‚ÇÇ.X K‚ÇÉ.X]

/-noncomputable def associator :
    tensorObj s (tensorObj s K‚ÇÅ K‚ÇÇ) K‚ÇÉ ‚âÖ tensorObj s K‚ÇÅ (tensorObj s K‚ÇÇ K‚ÇÉ) :=
  have : GradedObject.HasTensor (GradedObject.Monoidal.tensorObj K‚ÇÅ.X K‚ÇÇ.X) K‚ÇÉ.X :=
    (inferInstance : HasTensor (tensorObj s K‚ÇÅ K‚ÇÇ) K‚ÇÉ)
  have : GradedObject.HasTensor K‚ÇÅ.X (GradedObject.Monoidal.tensorObj K‚ÇÇ.X K‚ÇÉ.X) :=
    (inferInstance : HasTensor K‚ÇÅ (tensorObj s K‚ÇÇ K‚ÇÉ))
  Hom.isoOfComponents (fun i => (GradedObject.eval i).mapIso
    (GradedObject.Monoidal.associator K‚ÇÅ.toGradedObject K‚ÇÇ.toGradedObject K‚ÇÉ.toGradedObject)) (by
      intro i j hij
      dsimp
      sorry)-/

end

end Monoidal

section

variable
  [‚àÄ (X‚ÇÅ X‚ÇÇ : GradedObject I C), GradedObject.HasTensor X‚ÇÅ X‚ÇÇ]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C), GradedObject.HasGoodTensor‚ÇÅ‚ÇÇTensor X‚ÇÅ X‚ÇÇ X‚ÇÉ]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ : GradedObject I C), GradedObject.HasGoodTensorTensor‚ÇÇ‚ÇÉ X‚ÇÅ X‚ÇÇ X‚ÇÉ]
  [HasInitial C]
  [‚àÄ X‚ÇÅ, PreservesColimit (Functor.empty.{0} C)
    ((curryObj (MonoidalCategory.tensor C)).obj X‚ÇÅ)]
  [‚àÄ X‚ÇÇ, PreservesColimit (Functor.empty.{0} C)
    ((curryObj (MonoidalCategory.tensor C)).flip.obj X‚ÇÇ)]
  [‚àÄ (X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : GradedObject I C), GradedObject.HasTensor‚ÇÑObjExt X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ]

instance (X : C) : ((curryObj (MonoidalCategory.tensor C)).obj X).Additive := by
  change (tensorLeft X).Additive
  infer_instance

instance (X : C) : ((curryObj (MonoidalCategory.tensor C)).flip.obj X).Additive := by
  change (tensorRight X).Additive
  infer_instance

noncomputable example : MonoidalCategory (GradedObject I C) := inferInstance

end

end HomologicalComplex
