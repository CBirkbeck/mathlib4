import Mathlib.Algebra.Homology.HomologicalComplex
import Mathlib.Algebra.Homology.Single
import Mathlib.CategoryTheory.Limits.Shapes.Biproducts
import Mathlib.CategoryTheory.Monoidal.Category
import Mathlib.CategoryTheory.Monoidal.Preadditive
import Mathlib.Data.Finset.NatAntidiagonal

universe v u

noncomputable section

open CategoryTheory CategoryTheory.Category CategoryTheory.Limits
open scoped MonoidalCategory

variable {V : Type u} [Category.{v} V] [Preadditive V] [MonoidalCategory V]
  [HasFiniteBiproducts V]

def idOrZero {Œ≤ : Type _} [DecidableEq Œ≤] (X : Œ≤ ‚Üí V) (i j : Œ≤) : X i ‚ü∂ X j :=
if h : i = j then
  eqToHom (congrArg X h)
else
  0

lemma idOrZero_ne_zero [DecidableEq Œ≤] {X : Œ≤ ‚Üí V} (w : idOrZero X i j ‚â† 0) : i = j := sorry

namespace ChainComplex

namespace MonoidalCategory

theorem foo [AddCommGroup Œ≤] {a b : Œ≤} (ha : a + b ‚â† 0) : a ‚â† 0 ‚à® b ‚â† 0 := sorry

theorem bar {W X Y Z : V} {f : W ‚ü∂ X} {g : Y ‚ü∂ Z} (h : f ‚äó g ‚â† 0) : f ‚â† 0 ‚àß g ‚â† 0 := sorry

theorem qux {X : ChainComplex V ‚Ñï} {i j} (h : X.d i j ‚â† 0) : j + 1 = i := sorry

def tensorObj_X (X Y : ChainComplex V ‚Ñï) (i : ‚Ñï) : V :=
  biproduct (fun p : Finset.Nat.antidiagonal i => (X.X p.1.1) ‚äó (Y.X p.1.2))

def tensorObj_d (X Y : ChainComplex V ‚Ñï) (i j : ‚Ñï) : tensorObj_X X Y i ‚ü∂ tensorObj_X X Y j :=
  biproduct.matrix
    fun p q => X.d p.1.1 q.1.1 ‚äó idOrZero Y.X p.1.2 q.1.2 +
      ((-1 : ‚Ñ§)^p.1.1) ‚Ä¢ (idOrZero X.X p.1.1 q.1.1 ‚äó Y.d p.1.2 q.1.2)

def tensorObj (X Y : ChainComplex V ‚Ñï) : ChainComplex V ‚Ñï where
  X i := tensorObj_X X Y i
  d i j := tensorObj_d X Y i j
  shape i j w := by
    simp only [tensorObj_X, tensorObj_d]
    ext ‚ü®‚ü®k‚ÇÅ, k‚ÇÇ‚ü©, hk‚ü© ‚ü®‚ü®l‚ÇÅ, l‚ÇÇ‚ü©, hl‚ü©
    simp at hk
    subst hk
    simp at hl
    subst hl
    simp
    by_contra h
    replace h := foo h
    rcases h with h | h
    ¬∑ replace h := bar h
      simp at h
      have h‚ÇÅ := qux h.1
      have h‚ÇÇ := idOrZero_ne_zero h.2
      simp at h‚ÇÇ
      subst h‚ÇÅ
      subst h‚ÇÇ
      simp at w
      abel_nf at w
      assumption
    ¬∑ sorry
  d_comp_d' := sorry

def tensorHom {W X Y Z : ChainComplex V ‚Ñï} (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) :
  tensorObj W Y ‚ü∂ tensorObj X Z where
  f := fun i => biproduct.map (fun p => f.f p.1.1 ‚äó g.f p.1.2)
  comm' i j w := by
    simp [tensorObj, tensorObj_X, tensorObj_d]
    ext ‚ü®‚ü®k‚ÇÅ, k‚ÇÇ‚ü©, hk‚ü© ‚ü®‚ü®l‚ÇÅ, l‚ÇÇ‚ü©, hl‚ü©
    simp at hk
    subst hk
    simp at hl
    subst hl
    simp
    sorry

def associator (X Y Z : ChainComplex V ‚Ñï) :
    tensorObj (tensorObj X Y) Z ‚âÖ tensorObj X (tensorObj Y Z) :=
  HomologicalComplex.Hom.isoOfComponents
    (fun i => sorry)
    sorry

end MonoidalCategory

open MonoidalCategory

instance : MonoidalCategory (ChainComplex V ‚Ñï) where
  tensorObj := tensorObj
  tensorHom := tensorHom
  tensorUnit' := (ChainComplex.single‚ÇÄ V).obj (ùüô_ V)
  tensor_id := sorry
  tensor_comp := sorry
  associator := sorry
  leftUnitor := sorry
  rightUnitor := sorry
  associator_naturality := sorry
  leftUnitor_naturality := sorry
  rightUnitor_naturality := sorry
  triangle := sorry
  pentagon := sorry

end ChainComplex
