import Mathlib.Algebra.Homology.DerivedCategory.TStructure
import Mathlib.Algebra.Homology.DerivedCategory.Linear
import Mathlib.CategoryTheory.Shift.ShiftedHom

universe w v u

open CategoryTheory Category Preadditive DerivedCategory Limits Pretriangulated

variable {C : Type u} [Category.{v} C] [Abelian C]

--attribute [instance] MorphismProperty.HasLocalization.standard
variable [HasDerivedCategory.{w} C]

namespace CategoryTheory

namespace Abelian

variable (X Y Z : C) (n : ‚Ñï)

def LargeExt : Type w :=
  ShiftedHom ‚Ñ§ ((singleFunctor _ 0).obj X) ((singleFunctor _ 0).obj Y) n

namespace LargeExt

variable {X Y Z n}

@[pp_dot]
def hom (e : LargeExt X Y n) :
  ShiftedHom ‚Ñ§ ((singleFunctor _ 0).obj X) ((singleFunctor _ 0).obj Y) n := e

def mk (f : ShiftedHom ‚Ñ§ ((singleFunctor _ 0).obj X) ((singleFunctor _ 0).obj Y) n) :
    LargeExt X Y n := f

@[simp]
lemma mk_hom
    (f : ShiftedHom ‚Ñ§ ((singleFunctor _ 0).obj X) ((singleFunctor _ 0).obj Y) n) :
    (mk f).hom = f := rfl

lemma hom_injective (e‚ÇÅ e‚ÇÇ : LargeExt X Y n) (h : e‚ÇÅ.hom = e‚ÇÇ.hom) : e‚ÇÅ = e‚ÇÇ := h

lemma ext_iff (e‚ÇÅ e‚ÇÇ : LargeExt X Y n) : e‚ÇÅ = e‚ÇÇ ‚Üî e‚ÇÅ.hom = e‚ÇÇ.hom := by
  constructor
  ¬∑ rintro rfl
    rfl
  ¬∑ apply hom_injective

lemma mk_surjective (e : LargeExt X Y n) : ‚àÉ (f : _), e = mk f := ‚ü®e.hom, rfl‚ü©

noncomputable instance : AddCommGroup (LargeExt X Y n) := by
  dsimp only [LargeExt]
  infer_instance

@[simp]
lemma add_hom (x y : LargeExt X Y n) : (x + y).hom = x.hom + y.hom := rfl

@[simp]
lemma sub_hom (x y : LargeExt X Y n) : (x - y).hom = x.hom - y.hom := rfl

@[simp]
lemma neg_hom (x : LargeExt X Y n) : (-x).hom = -x.hom := rfl

@[simp]
lemma zero_hom (X Y : C) (n : ‚Ñï) : (0 : LargeExt X Y n).hom = 0 := rfl

@[simp]
lemma zsmul_hom (a : ‚Ñ§) (x : LargeExt X Y n) :
    (a ‚Ä¢ x).hom = a ‚Ä¢ x.hom := by
  let œÜ : LargeExt X Y n ‚Üí+
      ((singleFunctor _ 0).obj X ‚ü∂ ((singleFunctor _ 0).obj Y)‚ü¶(n : ‚Ñ§)‚üß) :=
    AddMonoidHom.mk' (fun e => e.hom) (by simp)
  apply œÜ.map_zsmul

noncomputable def ofHom (f : X ‚ü∂ Y) : LargeExt X Y 0 :=
  mk (ShiftedHom.mk‚ÇÄ ((singleFunctor _ 0).map f) ((0 : ‚Ñï) : ‚Ñ§) rfl)

variable (X Y)

noncomputable def ofHomAddEquiv : (X ‚ü∂ Y) ‚âÉ+ LargeExt X Y 0 where
  toFun f := ofHom f
  invFun g := (singleFunctor C 0).preimage (g.hom ‚â´
    (shiftFunctorZero' (DerivedCategory C) ((0 : ‚Ñï) : ‚Ñ§) (by rfl)).hom.app _)
  left_inv f := by
    apply (singleFunctor C 0).map_injective
    simp only [Functor.image_preimage, ofHom, ShiftedHom.mk‚ÇÄ, assoc, Iso.inv_hom_id_app,
      Functor.id_obj, comp_id, mk_hom]
  right_inv g := by
    apply hom_injective
    dsimp only [ofHom, ShiftedHom.mk‚ÇÄ]
    simp only [Functor.image_preimage, assoc, Iso.hom_inv_id_app,
      comp_id, mk_hom]
  map_add' x y := by
    apply hom_injective
    simp [ofHom]

noncomputable instance : One (LargeExt X X 0) := ‚ü®ofHom (ùüô _)‚ü©

@[simp]
lemma one_hom : (1 : LargeExt X X 0).hom = ShiftedHom.mk‚ÇÄ (ùüô _) ((0 : ‚Ñï) : ‚Ñ§) rfl := by
  rw [‚Üê (singleFunctor C 0).map_id]
  rfl

@[simp]
lemma ofHom_id : ofHom (ùüô X) = 1 := rfl

variable {X Y}

-- the signs are there for consistency with the composition
-- of Yoneda Ext, see Verdier, proposition III 3.2.5
noncomputable instance : HasGradedHMul (LargeExt Y Z) (LargeExt X Y) (LargeExt X Z) where
  Œ≥hmul' p q r h Œ± Œ≤ :=
    mk (((p * q : ‚Ñï) : ‚Ñ§).negOnePow ‚Ä¢ Œ≤.hom ‚Ä¢[show q + (p : ‚Ñ§) = r by
      rw [‚Üê h, Nat.cast_add, add_comm]] Œ±.hom)

@[simp]
lemma Œ≥hmul_hom {p q n : ‚Ñï} (Œ± : LargeExt Y Z p) (Œ≤ : LargeExt X Y q) (hpq : p + q = n) :
  (Œ± ‚Ä¢[hpq] Œ≤).hom =
    ((p * q : ‚Ñï) : ‚Ñ§).negOnePow ‚Ä¢ Œ≤.hom ‚Ä¢[by rw [‚Üê hpq, Nat.cast_add, add_comm]] Œ±.hom := rfl

lemma Œ≥hmul_eq {p q n : ‚Ñï} (Œ± : LargeExt Y Z p) (Œ≤ : LargeExt X Y q) (hpq : p + q = n) :
  (Œ± ‚Ä¢[hpq] Œ≤) = mk (((p * q : ‚Ñï) : ‚Ñ§).negOnePow ‚Ä¢ Œ≤.hom ‚Ä¢[show q + (p : ‚Ñ§) = n by
      rw [‚Üê hpq, Nat.cast_add, add_comm]] Œ±.hom) := rfl

noncomputable example {p q n : ‚Ñï} (Œ± : LargeExt Y Z p) (Œ≤ : LargeExt X Y q) (hpq : p + q = n) :
    LargeExt X Z n := Œ± ‚Ä¢[hpq] Œ≤

noncomputable example (f : LargeExt Y Z n) (g : X ‚ü∂ Y) : LargeExt X Z n :=
  f ‚Ä¢[add_zero n] (LargeExt.ofHom g)

lemma mk_zsmul (a : ‚Ñ§) (f : ShiftedHom ‚Ñ§ ((singleFunctor _ 0).obj X) ((singleFunctor _ 0).obj Y) n) :
    mk (a ‚Ä¢ f) = a ‚Ä¢ mk f := rfl

@[simp]
lemma Œ≥hmul_add {p q n : ‚Ñï} (Œ± : LargeExt Y Z p) (Œ≤‚ÇÅ Œ≤‚ÇÇ : LargeExt X Y q) (hpq : p + q = n) :
    Œ± ‚Ä¢[hpq] (Œ≤‚ÇÅ + Œ≤‚ÇÇ) = Œ± ‚Ä¢[hpq] Œ≤‚ÇÅ + Œ± ‚Ä¢[hpq] Œ≤‚ÇÇ := by
  apply hom_injective
  simp only [Œ≥hmul_hom, add_hom, ShiftedHom.add_Œ≥hmul, smul_add]

@[simp]
lemma add_Œ≥hmul {p q n : ‚Ñï} (Œ±‚ÇÅ Œ±‚ÇÇ : LargeExt Y Z p) (Œ≤ : LargeExt X Y q) (hpq : p + q = n) :
    (Œ±‚ÇÅ + Œ±‚ÇÇ) ‚Ä¢[hpq] Œ≤ = Œ±‚ÇÅ ‚Ä¢[hpq] Œ≤ + Œ±‚ÇÇ ‚Ä¢[hpq] Œ≤ := by
  apply hom_injective
  simp only [Œ≥hmul_hom, add_hom, ShiftedHom.Œ≥hmul_add, smul_add]

@[simp]
lemma one_Œ≥hmul {n : ‚Ñï} (Œ≤ : LargeExt X Y n) :
    (1 : LargeExt Y Y 0) ‚Ä¢[zero_add n] Œ≤ = Œ≤ := by
  apply hom_injective
  dsimp
  rw [one_hom]
  simp only [zero_mul, Int.negOnePow_zero, Int.ofNat_zero, one_smul]
  apply ShiftedHom.Œ≥hmul_one'

@[simp]
lemma Œ≥hmul_one {n : ‚Ñï} (Œ± : LargeExt X Y n) :
    Œ± ‚Ä¢[add_zero n] (1 : LargeExt X X 0)  = Œ± := by
  apply hom_injective
  dsimp
  rw [one_hom]
  simp only [mul_zero, Int.negOnePow_zero, Int.ofNat_zero, one_smul]
  apply ShiftedHom.one_Œ≥hmul'

instance {X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : C} : IsAssocGradedHMul (LargeExt X‚ÇÉ X‚ÇÑ)
    (LargeExt X‚ÇÇ X‚ÇÉ) (LargeExt X‚ÇÅ X‚ÇÇ) (LargeExt X‚ÇÇ X‚ÇÑ) (LargeExt X‚ÇÅ X‚ÇÉ)
    (LargeExt X‚ÇÅ X‚ÇÑ) where
  Œ≥hmul_assoc p‚ÇÅ p‚ÇÇ p‚ÇÉ Œ± Œ≤ Œ≥ p‚ÇÅ‚ÇÇ p‚ÇÇ‚ÇÉ p‚ÇÅ‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ h‚ÇÅ‚ÇÇ‚ÇÉ := by
    apply hom_injective
    rw [Œ≥hmul_hom, Œ≥hmul_hom, Œ≥hmul_hom, Œ≥hmul_hom]
    simp only [ShiftedHom.zsmul_Œ≥hmul, ShiftedHom.Œ≥hmul_zsmul, smul_smul,
      ‚Üê Int.negOnePow_add]
    congr 1
    ¬∑ congr 1
      simp only [‚Üê h‚ÇÅ‚ÇÇ, ‚Üê h‚ÇÇ‚ÇÉ, Nat.cast_add, add_mul, mul_add]
      abel
    ¬∑ symm
      apply IsAssocGradedHMul.Œ≥hmul_assoc

@[simp]
lemma ofHom_comp (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    ofHom (f ‚â´ g) = ofHom g ‚Ä¢[add_zero 0] ofHom f := by
  apply hom_injective
  dsimp [ofHom]
  simp only [Functor.map_comp, mul_zero, Int.negOnePow_zero, ShiftedHom.mk‚ÇÄ_comp, one_smul]

end LargeExt

@[simps]
noncomputable def LargeExtFunctor.obj (n : ‚Ñï) (X : C) : C ‚•§ Ab where
  obj := fun Y => AddCommGroupCat.of (LargeExt X Y n)
  map := fun f => AddCommGroupCat.ofHom (AddMonoidHom.mk'
    (fun Œ≤ => (LargeExt.ofHom f) ‚Ä¢[zero_add _] Œ≤)
    (fun Œ≤‚ÇÅ Œ≤‚ÇÇ => by dsimp ; simp))

@[simps]
noncomputable def LargeExtFunctor (n : ‚Ñï) : C·µí·µñ ‚•§ C ‚•§ Ab where
  obj X := LargeExtFunctor.obj n X.unop
  map {X‚ÇÅ X‚ÇÇ} g :=
    { app := fun Y => AddCommGroupCat.ofHom (AddMonoidHom.mk'
        (fun Œ± => (show LargeExt X‚ÇÅ.unop Y n from Œ±) ‚Ä¢[add_zero n] (LargeExt.ofHom g.unop))
        (fun _ _ => LargeExt.add_Œ≥hmul _ _ _ _)) }

section Linear

namespace LargeExt

section

variable {R : Type*} [Ring R] {M : Type*} [AddCommGroup M] [Module R M]

lemma Module.zsmul_smul (a : ‚Ñ§) (b : R) (m : M) :
    a ‚Ä¢ (b ‚Ä¢ m) = (a ‚Ä¢ b) ‚Ä¢ m := by
  let œÜ‚ÇÅ : ‚Ñ§ ‚Üí+ M :=
    { toFun := fun a => a ‚Ä¢ (b ‚Ä¢ m)
      map_zero' := by simp
      map_add' := fun a‚ÇÅ a‚ÇÇ => by simp only [add_zsmul] }
  let œÜ‚ÇÇ : ‚Ñ§ ‚Üí+ M :=
    { toFun := fun a => (a ‚Ä¢ b) ‚Ä¢ m
      map_zero' := by simp
      map_add' := fun a‚ÇÅ a‚ÇÇ => by simp only [add_smul] }
  change œÜ‚ÇÅ a = œÜ‚ÇÇ a
  congr
  ext
  simp

lemma Module.smul_zsmul (a : R) (b : ‚Ñ§) (m : M) :
    a ‚Ä¢ (b ‚Ä¢ m) = (b ‚Ä¢ a) ‚Ä¢ m := by
  let œÜ‚ÇÅ : ‚Ñ§ ‚Üí+ M :=
    { toFun := fun b => a ‚Ä¢ (b ‚Ä¢ m)
      map_zero' := by simp
      map_add' := fun b‚ÇÅ b‚ÇÇ => by simp only [add_smul, smul_add] }
  let œÜ‚ÇÇ : ‚Ñ§ ‚Üí+ M :=
    { toFun := fun b => (b ‚Ä¢ a) ‚Ä¢ m
      map_zero' := by simp
      map_add' := fun b‚ÇÅ b‚ÇÇ => by simp only [add_smul] }
  change œÜ‚ÇÅ b = œÜ‚ÇÇ b
  congr
  ext
  simp

end

variable {R : Type*} [Ring R] [Linear R C]

noncomputable instance : Module R (LargeExt X Y n) := by
  dsimp only [LargeExt]
  infer_instance

@[simp]
lemma smul_hom (a : R) (x : LargeExt X Y n) :
    (a ‚Ä¢ x).hom = a ‚Ä¢ x.hom := rfl

lemma smul_Œ≥hmul (a : R) {p q n : ‚Ñï} (Œ± : LargeExt Y Z p) (Œ≤ : LargeExt X Y q) (hpq : p + q = n) :
    (a ‚Ä¢ Œ±) ‚Ä¢[hpq] Œ≤ = a ‚Ä¢ (Œ± ‚Ä¢[hpq] Œ≤) := by
  apply hom_injective
  simp only [Œ≥hmul_hom, smul_hom, ShiftedHom.Œ≥hmul_smul,
    Module.smul_zsmul, Module.zsmul_smul]

lemma Œ≥hmul_smul {p q n : ‚Ñï} (Œ± : LargeExt Y Z p) (a : R) (Œ≤ : LargeExt X Y q) (hpq : p + q = n) :
    Œ± ‚Ä¢[hpq] (a ‚Ä¢ Œ≤) = a ‚Ä¢ (Œ± ‚Ä¢[hpq] Œ≤) := by
  apply hom_injective
  simp only [Œ≥hmul_hom, smul_hom, ShiftedHom.smul_Œ≥hmul,
    Module.smul_zsmul, Module.zsmul_smul]

end LargeExt

end Linear

end Abelian

open Abelian

namespace ShortComplex

variable {S : ShortComplex C} (hS : S.ShortExact)

namespace ShortExact

noncomputable def singleŒ¥ : (singleFunctor C 0).obj S.X‚ÇÉ ‚ü∂
    ((singleFunctor C 0).obj S.X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß :=
  (((SingleFunctors.evaluation _ _ 0).mapIso (singleFunctorsPostCompQIso C)).hom.app S.X‚ÇÉ) ‚â´
    triangleOfSESŒ¥ (hS.map_of_exact (HomologicalComplex.single C (ComplexShape.up ‚Ñ§) 0)) ‚â´
    (((SingleFunctors.evaluation _ _ 0).mapIso (singleFunctorsPostCompQIso C)).inv.app S.X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß'

@[simps!]
noncomputable def singleTriangle : Triangle (DerivedCategory C) :=
  Triangle.mk ((singleFunctor C 0).map S.f)
    ((singleFunctor C 0).map S.g) hS.singleŒ¥

lemma singleTriangle_distinguished :
    hS.singleTriangle ‚àà distTriang (DerivedCategory C) :=
  isomorphic_distinguished _ (triangleOfSES_distinguished (hS.map_of_exact
    (HomologicalComplex.single C (ComplexShape.up ‚Ñ§) 0))) _ (by
    let e := (SingleFunctors.evaluation _ _ 0).mapIso (singleFunctorsPostCompQIso C)
    refine' Triangle.isoMk _ _ (e.app S.X‚ÇÅ) (e.app S.X‚ÇÇ) (e.app S.X‚ÇÉ) _ _ _
    ¬∑ aesop_cat
    ¬∑ aesop_cat
    ¬∑ dsimp [singleŒ¥]
      simp only [assoc, ‚Üê Functor.map_comp, SingleFunctors.inv_hom_id_hom_app,
        SingleFunctors.postComp_functor, Functor.comp_obj]
      erw [Functor.map_id, comp_id]
      rfl)

lemma eq_singleŒ¥_iff_distinguished
    (Œ± : (singleFunctor C 0).obj S.X‚ÇÉ ‚ü∂
      ((singleFunctor C 0).obj S.X‚ÇÅ)‚ü¶(1 : ‚Ñ§)‚üß) :
      Œ± = hS.singleŒ¥ ‚Üî
        Triangle.mk ((singleFunctor C 0).map S.f)
          ((singleFunctor C 0).map S.g) Œ± ‚àà distTriang (DerivedCategory C) := by
  constructor
  ¬∑ rintro rfl
    apply singleTriangle_distinguished
  ¬∑ intro h
    obtain ‚ü®œÜ, hœÜ‚ÇÅ, hœÜ‚ÇÇ‚ü© := complete_distinguished_triangle_morphism _ _ h hS.singleTriangle_distinguished
      (ùüô _) (ùüô _) (by simp)
    obtain ‚ü®œÜ, rfl‚ü© := (singleFunctor C 0).map_surjective œÜ
    obtain rfl : œÜ = ùüô _ := by
      have := hS.epi_g
      rw [‚Üê cancel_epi S.g]
      apply (singleFunctor C 0).map_injective
      simpa using hœÜ‚ÇÅ
    simpa using hœÜ‚ÇÇ

noncomputable def largeExtClass : LargeExt S.X‚ÇÉ S.X‚ÇÅ 1 :=
  LargeExt.mk hS.singleŒ¥

lemma extClass_Œ≥hmul : hS.largeExtClass ‚Ä¢[add_zero 1] (LargeExt.ofHom S.g) = 0 := by
  apply LargeExt.hom_injective
  dsimp [largeExtClass]
  simp only [mul_zero, Int.negOnePow_zero, one_smul]
  erw [ShiftedHom.mk‚ÇÄ_Œ≥hmul]
  exact comp_distTriang_mor_zero‚ÇÇ‚ÇÉ _ (hS.singleTriangle_distinguished)

lemma Œ≥hmul_extClass : (LargeExt.ofHom S.f) ‚Ä¢[zero_add 1] hS.largeExtClass = 0 := by
  apply LargeExt.hom_injective
  dsimp [largeExtClass]
  have eq := comp_distTriang_mor_zero‚ÇÉ‚ÇÅ _ (hS.singleTriangle_distinguished)
  rw [ShiftedHom.Œ≥hmul_eq]
  dsimp [LargeExt.ofHom, ShiftedHom.mk‚ÇÄ] at eq ‚ä¢
  simp only [mul_one, Functor.map_comp, assoc, reassoc_of% eq, zero_comp, Nat.cast_zero,
    Int.negOnePow_zero, one_smul]

/- needs refactor as the signs have been changed...
lemma covariant_LargeExt_exact‚ÇÅ {A : C} {n‚ÇÅ : ‚Ñï}
    (x‚ÇÅ : LargeExt A S.X‚ÇÅ n‚ÇÅ) (hx‚ÇÅ : (LargeExt.ofHom S.f) ‚Ä¢[zero_add n‚ÇÅ] x‚ÇÅ = 0)
    (n‚ÇÄ : ‚Ñï) (h : 1 + n‚ÇÄ = n‚ÇÅ) :
    ‚àÉ (x‚ÇÉ : LargeExt A S.X‚ÇÉ n‚ÇÄ), x‚ÇÅ = hS.extClass ‚Ä¢[h] x‚ÇÉ := by
  have h' : 1 + (n‚ÇÄ : ‚Ñ§) = n‚ÇÅ := by rw [‚Üê h, Nat.cast_add, Nat.cast_one]
  have h'' : (n‚ÇÄ : ‚Ñ§) + 1 = n‚ÇÅ := by rw [‚Üê h', add_comm 1]
  obtain ‚ü®y‚ÇÉ, hy‚ÇÉ‚ü© := covariant_yoneda_exact‚ÇÅ _
    (shift_distinguished _ hS.singleTriangle_distinguished n‚ÇÄ)
    (x‚ÇÅ.hom ‚â´ (shiftFunctorAdd' (DerivedCategory C) _ _ _ h'').hom.app _) (by
      simp only [LargeExt.ext_iff, LargeExt.Œ≥hmul_hom, newExt.ofHom,
        ShiftedHom.mk‚ÇÄ_Œ≥hmul, newExt.zero_hom] at hx‚ÇÅ
      dsimp [Triangle.shiftFunctor]
      simp only [assoc, Functor.map_zsmul, comp_zsmul]
      erw [‚Üê NatTrans.naturality, reassoc_of% hx‚ÇÅ, zero_comp, zsmul_zero])
  refine' ‚ü®CochainComplex.Œµ n‚ÇÄ ‚Ä¢ newExt.mk y‚ÇÉ, _‚ü©
  apply newExt.hom_injective
  dsimp at hy‚ÇÉ
  simp only [newExt.Œ≥hmul_hom, extClass, ShiftedHom.Œ≥hmul_eq, newExt.zsmul_hom]
  rw [zsmul_comp, ‚Üê cancel_mono ((shiftFunctorAdd' (DerivedCategory C) _ _ _ h'').hom.app _), hy‚ÇÉ,
    comp_zsmul, zsmul_comp, assoc, assoc,
    shiftFunctorComm_eq _ _ _ _ h', Iso.trans_hom, Iso.symm_hom, NatTrans.comp_app]
  rfl

lemma covariant_newExt_exact‚ÇÇ {A : C} {n : ‚Ñï}
    (x‚ÇÇ : newExt A S.X‚ÇÇ n) (hx‚ÇÇ : (newExt.ofHom S.g) ‚Ä¢[zero_add n] x‚ÇÇ = 0) :
    ‚àÉ (x‚ÇÅ : newExt A S.X‚ÇÅ n), x‚ÇÇ = (newExt.ofHom S.f) ‚Ä¢[zero_add n] x‚ÇÅ := by
  obtain ‚ü®y‚ÇÅ, hy‚ÇÅ‚ü© := covariant_yoneda_exact‚ÇÇ _
    (shift_distinguished _ hS.singleTriangle_distinguished n) x‚ÇÇ.hom (by
      simp only [newExt.ext_iff, newExt.Œ≥hmul_hom, newExt.ofHom,
        ShiftedHom.mk‚ÇÄ_Œ≥hmul, newExt.zero_hom] at hx‚ÇÇ
      dsimp [Triangle.shiftFunctor]
      simp only [comp_zsmul, hx‚ÇÇ, zsmul_zero])
  refine' ‚ü®CochainComplex.Œµ n ‚Ä¢ newExt.mk y‚ÇÅ, _‚ü©
  apply newExt.hom_injective
  simp only [newExt.Œ≥hmul_hom, newExt.zsmul_hom,
    ShiftedHom.Œ≥hmul_zsmul, newExt.ofHom, ShiftedHom.mk‚ÇÄ_Œ≥hmul,
    hy‚ÇÅ, Triangle.shiftFunctor_obj, comp_zsmul, Triangle.mk_mor‚ÇÅ,
    singleTriangle_mor‚ÇÅ]

lemma covariant_newExt_exact‚ÇÉ {A : C} {n‚ÇÄ : ‚Ñï}
    (x‚ÇÉ : newExt A S.X‚ÇÉ n‚ÇÄ) (n‚ÇÅ : ‚Ñï) (h : 1 + n‚ÇÄ = n‚ÇÅ)
    (hx‚ÇÉ : hS.extClass ‚Ä¢[h] x‚ÇÉ = 0) :
    ‚àÉ (x‚ÇÇ : newExt A S.X‚ÇÇ n‚ÇÄ), x‚ÇÉ = (newExt.ofHom S.g) ‚Ä¢[zero_add n‚ÇÄ] x‚ÇÇ := by
  obtain ‚ü®y‚ÇÇ, hy‚ÇÇ‚ü© := covariant_yoneda_exact‚ÇÉ _
    (shift_distinguished _ hS.singleTriangle_distinguished n‚ÇÄ) x‚ÇÉ.hom (by
      simp only [newExt.ext_iff, newExt.Œ≥hmul_hom, extClass,
        ShiftedHom.Œ≥hmul_eq, newExt.zero_hom, ‚Üê assoc] at hx‚ÇÉ
      rw [IsIso.comp_right_eq_zero] at hx‚ÇÉ
      dsimp [Triangle.shiftFunctor]
      simp only [comp_zsmul, reassoc_of% hx‚ÇÉ, zero_comp, zsmul_zero])
  refine' ‚ü®CochainComplex.Œµ n‚ÇÄ ‚Ä¢ newExt.mk y‚ÇÇ, _‚ü©
  apply newExt.hom_injective
  simp only [newExt.Œ≥hmul_hom, newExt.zsmul_hom, newExt.ofHom, ShiftedHom.mk‚ÇÄ_Œ≥hmul,
    hy‚ÇÇ, Triangle.shiftFunctor_obj, Triangle.mk_mor‚ÇÇ, singleTriangle_mor‚ÇÇ,
    comp_zsmul]
  rw [zsmul_comp]

/- Note: the right multiplication with `hS.extClass` presumably corresponds to the connecting
homomorphism only up to a sign. -/

lemma contravariant_newExt_exact‚ÇÅ {B : C} {n‚ÇÄ : ‚Ñï}
    (x‚ÇÅ : newExt S.X‚ÇÅ B n‚ÇÄ) (n‚ÇÅ : ‚Ñï) (h : n‚ÇÄ + 1 = n‚ÇÅ)
    (hx‚ÇÅ : x‚ÇÅ ‚Ä¢[h] hS.extClass = 0) :
    ‚àÉ (x‚ÇÇ : newExt S.X‚ÇÇ B n‚ÇÄ), x‚ÇÅ = x‚ÇÇ ‚Ä¢[add_zero n‚ÇÄ] (newExt.ofHom S.f) := by
  obtain ‚ü®x‚ÇÇ, hx‚ÇÇ‚ü© := contravariant_yoneda_exact‚ÇÇ _
    (inv_rot_of_dist_triangle _ hS.singleTriangle_distinguished) x‚ÇÅ.hom (by
      apply (shiftFunctor (DerivedCategory C) (1 : ‚Ñ§)).map_injective
      simp only [newExt.ext_iff, newExt.zero_hom, newExt.Œ≥hmul_hom, extClass,
        ShiftedHom.Œ≥hmul_eq] at hx‚ÇÅ
      rw [‚Üê assoc, IsIso.comp_right_eq_zero] at hx‚ÇÅ
      dsimp at hx‚ÇÅ ‚ä¢
      simp only [Functor.map_comp, Functor.map_neg, Functor.map_zero, neg_comp, assoc,
        neg_eq_zero, shift_neg_shift', IsIso.comp_left_eq_zero,
        shift_shiftFunctorCompIsoId_add_neg_self_hom_app, Iso.inv_hom_id_app_assoc, hx‚ÇÅ])
  refine' ‚ü®newExt.mk x‚ÇÇ, _‚ü©
  apply newExt.hom_injective
  simp only [newExt.Œ≥hmul_hom, newExt.ofHom, ShiftedHom.Œ≥hmul_mk‚ÇÄ, hx‚ÇÇ,
    Triangle.invRotate_mor‚ÇÇ, singleTriangle_mor‚ÇÅ]

lemma contravariant_newExt_exact‚ÇÇ {B : C} {n : ‚Ñï}
    (x‚ÇÇ : newExt S.X‚ÇÇ B n) (hx‚ÇÇ : x‚ÇÇ ‚Ä¢[add_zero n] (newExt.ofHom S.f) = 0) :
    ‚àÉ (x‚ÇÉ : newExt S.X‚ÇÉ B n), x‚ÇÇ = x‚ÇÉ ‚Ä¢[add_zero n] (newExt.ofHom S.g) := by
  obtain ‚ü®y‚ÇÉ, hy‚ÇÉ‚ü© := contravariant_yoneda_exact‚ÇÇ _ hS.singleTriangle_distinguished x‚ÇÇ.hom (by
    simpa only [newExt.ext_iff, newExt.Œ≥hmul_hom, newExt.ofHom,
      ShiftedHom.Œ≥hmul_mk‚ÇÄ, newExt.zero_hom] using hx‚ÇÇ)
  refine' ‚ü®newExt.mk y‚ÇÉ, _‚ü©
  apply newExt.hom_injective
  dsimp at hy‚ÇÉ
  simp only [newExt.Œ≥hmul_hom, hy‚ÇÉ, newExt.ofHom, ShiftedHom.Œ≥hmul_mk‚ÇÄ]

lemma contravariant_newExt_exact‚ÇÉ {B : C} {n‚ÇÅ : ‚Ñï}
    (x‚ÇÉ : newExt S.X‚ÇÉ B n‚ÇÅ) (hx‚ÇÉ : x‚ÇÉ ‚Ä¢[add_zero n‚ÇÅ] (newExt.ofHom S.g) = 0)
    (n‚ÇÄ : ‚Ñï) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    ‚àÉ (x‚ÇÅ : newExt S.X‚ÇÅ B n‚ÇÄ), x‚ÇÉ = x‚ÇÅ ‚Ä¢[h] hS.extClass := by
  have h' : (n‚ÇÄ : ‚Ñ§) + 1 = n‚ÇÅ := by rw [‚Üê h, Nat.cast_add, Nat.cast_one]
  obtain ‚ü®y‚ÇÅ, hy‚ÇÅ‚ü© := contravariant_yoneda_exact‚ÇÉ _ hS.singleTriangle_distinguished x‚ÇÉ.hom (by
    simpa only [newExt.ext_iff, newExt.Œ≥hmul_hom, newExt.ofHom,
      ShiftedHom.Œ≥hmul_mk‚ÇÄ, newExt.zero_hom] using hx‚ÇÉ)
  obtain ‚ü®x‚ÇÅ, rfl‚ü© : ‚àÉ (x‚ÇÅ : (singleFunctor C 0).obj S.X‚ÇÅ ‚ü∂ ((singleFunctor C 0).obj B)‚ü¶(n‚ÇÄ : ‚Ñ§)‚üß),
      y‚ÇÅ = x‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß' ‚â´ (shiftFunctorAdd' (DerivedCategory C) _ _ _ h').inv.app _ :=
    ‚ü®(shiftFunctor (DerivedCategory C) (1 : ‚Ñ§)).preimage
      (y‚ÇÅ ‚â´ (shiftFunctorAdd' (DerivedCategory C) _ _ _ h').hom.app _), by simp‚ü©
  refine' ‚ü®newExt.mk x‚ÇÅ, _‚ü©
  apply newExt.hom_injective
  simp only [newExt.Œ≥hmul_hom, ShiftedHom.Œ≥hmul_eq, extClass]
  exact hy‚ÇÅ-/

end ShortExact

end ShortComplex

end CategoryTheory
