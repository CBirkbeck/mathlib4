/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.Algebra.Homology.DerivedCategory.SingleTriangle
import Mathlib.CategoryTheory.Shift.ShiftedHom
import Mathlib.CategoryTheory.Triangulated.Yoneda

/-!
# Ext groups in abelian categories

If `C` is an abelian category, we define types `LargeExt X Y n`
for objects `X` and `Y` in `C` and `n : ‚Ñï` as a single-field structure
containing a shifted morphism in the derived category of `C`.
Then, we need to introduce an auxiliary universe `w` and the
assumption `HasDerivedCategory.{w} C` so that `LargeExt X Y n : Type w`.
(When using the constructed localized category, we may use `w := max u v`.)

Any short exact short complex `S` gives a class in `LargeExt S.X‚ÇÉ S.X‚ÇÅ 1`
(`ShortComplex.ShortExact.largeExtClass`), and we construct the
associated long exact sequences for `LargeExt`.

## TODO

* construct the equivalence `LargeExt X Y 0 ‚âÉ (X ‚ü∂ Y)`
* define the contravariant long exact sequence of `LargeExt`
* shrink the types `LargeExt X Y n` in order to define `SmallExt X Y n : Type w'`
when we know that the `Ext`-groups are `w'`-small, and redefine
`Ext := SmallExt.{v}` (which will work when `C` has enough projectives
or enough injectives).

-/

universe w v u

namespace CategoryTheory

open Category Limits DerivedCategory

variable {C : Type u} [Category.{v} C] [Abelian C] [HasDerivedCategory.{w} C]

namespace Abelian

variable (X Y Z T : C) (n : ‚Ñï)

/-- The Ext-groups in an abelian category `C`, defined as a `Type w` when
`[HasDerivedCategory.{w} C]`. -/
@[ext]
structure LargeExt : Type w where
  /-- a shifted hom in the derived category -/
  hom : ShiftedHom ((singleFunctor C 0).obj X) ((singleFunctor C 0).obj Y) (n : ‚Ñ§)

namespace LargeExt

/-- The bijection between `LargeExt X Y n` and shifted homs in the derived category. -/
@[simps]
def equiv :
    LargeExt X Y n ‚âÉ
      ShiftedHom ((singleFunctor C 0).obj X) ((singleFunctor C 0).obj Y) (n : ‚Ñ§) where
  toFun := hom
  invFun := mk
  left_inv _ := rfl
  right_inv _ := rfl

noncomputable instance : AddCommGroup (LargeExt X Y n) := (equiv X Y n).addCommGroup

@[simp]
lemma add_hom (x y : LargeExt X Y n) : (x + y).hom = x.hom + y.hom := rfl

@[simp]
lemma sub_hom (x y : LargeExt X Y n) : (x - y).hom = x.hom - y.hom := rfl

@[simp]
lemma neg_hom (x : LargeExt X Y n) : (-x).hom = -x.hom := rfl

@[simp]
lemma zero_hom (X Y : C) (n : ‚Ñï) : (0 : LargeExt X Y n).hom = 0 := rfl

@[simp]
lemma zsmul_hom (a : ‚Ñ§) (x : LargeExt X Y n) :
    (a ‚Ä¢ x).hom = a ‚Ä¢ x.hom := rfl

/-- The additive bijection between `LargeExt X Y n` and shifted homs in the derived category. -/
@[simps!]
def addEquiv :
    LargeExt X Y n ‚âÉ+
      ShiftedHom ((singleFunctor C 0).obj X) ((singleFunctor C 0).obj Y) (n : ‚Ñ§) where
  toEquiv := equiv X Y n
  map_add' := by simp

variable {X Y Z T}

/-- The canonical map `(X ‚ü∂ Y) ‚Üí LargeExt X Y 0`: -/
@[simps]
noncomputable def ofHom (f : X ‚ü∂ Y) : LargeExt X Y 0 :=
  mk (ShiftedHom.mk‚ÇÄ ((0 : ‚Ñï) : ‚Ñ§) rfl ((singleFunctor C 0).map f))

/-- The composition on `Ext`-groups. -/
@[simps]
noncomputable def comp {a b c : ‚Ñï} (Œ± : LargeExt X Y a) (Œ≤ : LargeExt Y Z b) (h : a + b = c) :
    LargeExt X Z c where
  hom := Œ±.hom.comp Œ≤.hom (by omega)

lemma comp_assoc {a‚ÇÅ a‚ÇÇ a‚ÇÉ a‚ÇÅ‚ÇÇ a‚ÇÇ‚ÇÉ a : ‚Ñï}
    (Œ± : LargeExt X Y a‚ÇÅ) (Œ≤ : LargeExt Y Z a‚ÇÇ) (Œ≥ : LargeExt Z T a‚ÇÉ)
    (h‚ÇÅ‚ÇÇ : a‚ÇÅ + a‚ÇÇ = a‚ÇÅ‚ÇÇ) (h‚ÇÇ‚ÇÉ : a‚ÇÇ + a‚ÇÉ = a‚ÇÇ‚ÇÉ) (h : a‚ÇÅ + a‚ÇÇ + a‚ÇÉ = a) :
    (Œ±.comp Œ≤ h‚ÇÅ‚ÇÇ).comp Œ≥ (show _ = a by omega) =
      Œ±.comp (Œ≤.comp Œ≥ h‚ÇÇ‚ÇÉ) (by omega) := by
  ext
  dsimp
  apply ShiftedHom.comp_assoc
  omega

@[simp]
lemma comp_add {a b c : ‚Ñï} (Œ± : LargeExt X Y a) (Œ≤‚ÇÅ Œ≤‚ÇÇ : LargeExt Y Z b) (h : a + b = c) :
    Œ±.comp (Œ≤‚ÇÅ + Œ≤‚ÇÇ) h = Œ±.comp Œ≤‚ÇÅ h + Œ±.comp Œ≤‚ÇÇ h := by aesop

@[simp]
lemma add_comp {a b c : ‚Ñï} (Œ±‚ÇÅ Œ±‚ÇÇ : LargeExt X Y a) (Œ≤ : LargeExt Y Z b) (h : a + b = c) :
    (Œ±‚ÇÅ + Œ±‚ÇÇ).comp Œ≤ h = Œ±‚ÇÅ.comp Œ≤ h + Œ±‚ÇÇ.comp Œ≤ h := by aesop

@[simp]
lemma ofHom_id_comp {a : ‚Ñï} (Œ± : LargeExt X Y a) :
    (ofHom (ùüô X)).comp Œ± (zero_add a) = Œ± := by aesop

@[simp]
lemma comp_ofHom_id {a : ‚Ñï} (Œ± : LargeExt X Y a) :
    Œ±.comp (ofHom (ùüô Y)) (add_zero a) = Œ± := by aesop

lemma ofHom_comp (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    ofHom (f ‚â´ g) = (ofHom f).comp (ofHom g) (add_zero _) := by
  ext
  dsimp
  rw [Functor.map_comp]
  symm
  apply ShiftedHom.mk‚ÇÄ_comp_mk‚ÇÄ

/-- The postcomposition with `Œ≤ : LargeExt Y Z q` as an additive map. -/
@[simps! apply]
noncomputable def postcomp {Y Z : C} {q : ‚Ñï} (Œ≤ : LargeExt Y Z q)
    (X : C) (p : ‚Ñï) (n : ‚Ñï) (hpq : p + q = n) :
    LargeExt X Y p ‚Üí+ LargeExt X Z n :=
  AddMonoidHom.mk' (fun Œ± => Œ±.comp Œ≤ hpq) (by simp)

/-- The precomposition with `Œ± : LargeExt X Y p` as an additive map. -/
@[simps! apply]
noncomputable def precomp {X Y : C} {p : ‚Ñï} (Œ± : LargeExt X Y p)
    (Z : C) (q : ‚Ñï) (n : ‚Ñï) (hpq : p + q = n) :
    LargeExt Y Z q ‚Üí+ LargeExt X Z n :=
  AddMonoidHom.mk' (fun Œ≤ => Œ±.comp Œ≤ hpq) (by simp)

/-- Auxiliary definition for `LargeExtFunctor`. -/
noncomputable def LargeExtFunctor.obj (n : ‚Ñï) (X : C) : C ‚•§ Ab where
  obj := fun Y => AddCommGroupCat.of (LargeExt X Y n)
  map := fun g => postcomp (ofHom g) _ _ _ (add_zero n)
  map_id _ := by ext; simp
  map_comp _ _ := by
    ext
    simp only [ofHom_comp]
    symm
    apply comp_assoc
    all_goals omega

variable (C)

/-- The `Ext`-groups in degree `n : ‚Ñï`, as a bifunctor `C·µí·µñ ‚•§ C ‚•§ Ab.{w}`. -/
noncomputable def LargeExtFunctor (n : ‚Ñï) : C·µí·µñ ‚•§ C ‚•§ Ab.{w} where
  obj X := LargeExtFunctor.obj n X.unop
  map {X‚ÇÅ X‚ÇÇ} f :=
    { app := fun Y => AddCommGroupCat.ofHom (precomp (ofHom f.unop) _ _ _ (zero_add n))
      naturality := by
        intros
        ext
        symm
        dsimp [LargeExtFunctor.obj]
        apply comp_assoc
        all_goals omega }
  map_id _ := by ext; simp [LargeExtFunctor.obj]
  map_comp _ _ := by
    ext
    dsimp [LargeExtFunctor.obj]
    simp only [ofHom_comp]
    apply comp_assoc
    all_goals omega

end LargeExt

end Abelian

open Abelian Pretriangulated

namespace ShortComplex

variable {S : ShortComplex C} (hS : S.ShortExact)

namespace ShortExact

/-- The class in `LargeExt S.X‚ÇÉ S.X‚ÇÅ 1` that is attached to a short exact
short complex `S` in an abelian category. -/
@[simps]
noncomputable def largeExtClass : LargeExt S.X‚ÇÉ S.X‚ÇÅ 1 :=
  LargeExt.mk hS.singleŒ¥

@[simp]
lemma comp_largeExtClass : (LargeExt.ofHom S.g).comp hS.largeExtClass (zero_add 1) = 0 := by
  have eq := comp_distTriang_mor_zero‚ÇÇ‚ÇÉ _ hS.singleTriangle_distinguished
  dsimp at eq
  ext
  dsimp [ShiftedHom.comp, ShiftedHom.mk‚ÇÄ]
  rw [assoc, ‚Üê NatTrans.naturality_assoc]
  dsimp
  rw [reassoc_of% eq, zero_comp]

@[simp]
lemma largeExtClass_comp : hS.largeExtClass.comp (LargeExt.ofHom S.f) (add_zero 1) = 0 := by
  have eq := comp_distTriang_mor_zero‚ÇÉ‚ÇÅ _ hS.singleTriangle_distinguished
  dsimp at eq
  ext
  dsimp [ShiftedHom.comp, ShiftedHom.mk‚ÇÄ]
  simp only [Functor.map_comp, assoc, reassoc_of% eq, zero_comp]

end ShortExact

end ShortComplex

namespace Abelian

namespace LargeExt

open ComposableArrows

section CovariantExactSequence

variable (A : C) {S : ShortComplex C} (hS : S.ShortExact)

/-- Given a short exact short complex `S` in an abelian category `C` and `A : C`,
this is the covariant (exact) sequence of `LargeExt` with six terms which starts by:
`LargeExact A S.X‚ÇÅ n‚ÇÄ ‚ü∂ LargeExact A S.X‚ÇÇ n‚ÇÄ ‚ü∂ LargeExact A S.X‚ÇÉ n‚ÇÄ ‚Üí LargeExact A S.X‚ÇÅ n‚ÇÅ ‚ü∂ ` -/
@[simp]
noncomputable def covariantSequence (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    ComposableArrows AddCommGroupCat.{w} 5 :=
  ComposableArrows.mk‚ÇÖ
    (AddCommGroupCat.ofHom (postcomp (ofHom S.f) A n‚ÇÄ n‚ÇÄ (add_zero n‚ÇÄ)))
    (AddCommGroupCat.ofHom (postcomp (ofHom S.g) A n‚ÇÄ n‚ÇÄ (add_zero n‚ÇÄ)))
    (AddCommGroupCat.ofHom (postcomp hS.largeExtClass A n‚ÇÄ n‚ÇÅ h))
    (AddCommGroupCat.ofHom (postcomp (ofHom S.f) A n‚ÇÅ n‚ÇÅ (add_zero n‚ÇÅ)))
    (AddCommGroupCat.ofHom (postcomp (ofHom S.g) A n‚ÇÅ n‚ÇÅ (add_zero n‚ÇÅ)))

/-- The covariant (exact) sequence of `LargeExt` identifies to the homology sequence
of the homological functor `(preadditiveCoyoneda.obj (Opposite.op ((singleFunctor C 0).obj A)))`
applied to the distinguished triangle `hS.singleTriangle`. -/
noncomputable def covariantSequenceIso (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    covariantSequence A hS n‚ÇÄ n‚ÇÅ h ‚âÖ
      (preadditiveCoyoneda.obj
          (Opposite.op ((singleFunctor C 0).obj A))).homologySequenceComposableArrows‚ÇÖ
        hS.singleTriangle n‚ÇÄ n‚ÇÅ (by omega) :=
  isoMk‚ÇÖ
    (AddEquiv.toAddCommGroupCatIso (addEquiv A S.X‚ÇÅ n‚ÇÄ))
    (AddEquiv.toAddCommGroupCatIso (addEquiv A S.X‚ÇÇ n‚ÇÄ))
    (AddEquiv.toAddCommGroupCatIso (addEquiv A S.X‚ÇÉ n‚ÇÄ))
    (AddEquiv.toAddCommGroupCatIso (addEquiv A S.X‚ÇÅ n‚ÇÅ))
    (AddEquiv.toAddCommGroupCatIso (addEquiv A S.X‚ÇÇ n‚ÇÅ))
    (AddEquiv.toAddCommGroupCatIso (addEquiv A S.X‚ÇÉ n‚ÇÅ))
    (by ext; apply ShiftedHom.comp_mk‚ÇÄ) (by ext; apply ShiftedHom.comp_mk‚ÇÄ)
    (by ext; symm; apply Category.assoc)
    (by ext; apply ShiftedHom.comp_mk‚ÇÄ) (by ext; apply ShiftedHom.comp_mk‚ÇÄ)

lemma covariantSequence_exact (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    (covariantSequence A hS n‚ÇÄ n‚ÇÅ h).Exact := by
  rw [exact_iff_of_iso (covariantSequenceIso A hS n‚ÇÄ n‚ÇÅ h)]
  apply Functor.homologySequenceComposableArrows‚ÇÖ_exact _ _ (hS.singleTriangle_distinguished)

variable {A}

/-- Given a short exact short complex `S` in an abelian category `C` and `A : C`,
this is the exactness of
`LargeExact A S.X‚ÇÉ n‚ÇÄ ‚ü∂ LargeExact A S.X‚ÇÅ n‚ÇÅ ‚ü∂ LargeExact A S.X‚ÇÇ n‚ÇÅ`
when `n‚ÇÄ + 1 = n‚ÇÅ`. -/
lemma covariant_sequence_exact‚ÇÅ
    {n‚ÇÅ : ‚Ñï} (x‚ÇÅ : LargeExt A S.X‚ÇÅ n‚ÇÅ) (hx‚ÇÅ : x‚ÇÅ.comp (ofHom S.f) (add_zero n‚ÇÅ) = 0)
    (n‚ÇÄ : ‚Ñï) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    ‚àÉ (x‚ÇÉ : LargeExt A S.X‚ÇÉ n‚ÇÄ), x‚ÇÉ.comp hS.largeExtClass h = x‚ÇÅ :=
  (ShortComplex.ab_exact_iff _).1
    ((covariantSequence_exact A hS n‚ÇÄ n‚ÇÅ h).exact 2) x‚ÇÅ hx‚ÇÅ

/-- Given a short exact short complex `S` in an abelian category `C` and `A : C`,
this is the exactness of
`LargeExact A S.X‚ÇÅ n ‚ü∂ LargeExact A S.X‚ÇÇ n ‚ü∂ LargeExact A S.X‚ÇÉ n` -/
lemma covariant_sequence_exact‚ÇÇ
    {n : ‚Ñï} (x‚ÇÇ : LargeExt A S.X‚ÇÇ n) (hx‚ÇÇ : x‚ÇÇ.comp (ofHom S.g) (add_zero n) = 0) :
    ‚àÉ (x‚ÇÅ : LargeExt A S.X‚ÇÅ n), x‚ÇÅ.comp (ofHom S.f) (add_zero n) = x‚ÇÇ :=
  (ShortComplex.ab_exact_iff _).1
    ((covariantSequence_exact A hS n _ rfl).exact 0) x‚ÇÇ hx‚ÇÇ

/-- Given a short exact short complex `S` in an abelian category `C` and `A : C`,
this is the exactness of
`LargeExact A S.X‚ÇÇ n‚ÇÄ ‚ü∂ LargeExact A S.X‚ÇÉ n‚ÇÄ ‚Üí LargeExact A S.X‚ÇÅ n‚ÇÅ`
when `n‚ÇÄ + 1 = n‚ÇÅ`. -/
lemma covariant_sequence_exact‚ÇÉ
    {n‚ÇÄ : ‚Ñï} (x‚ÇÉ : LargeExt A S.X‚ÇÉ n‚ÇÄ) {n‚ÇÅ : ‚Ñï} (h : n‚ÇÄ + 1 = n‚ÇÅ)
    (hx‚ÇÉ : x‚ÇÉ.comp hS.largeExtClass h = 0) :
    ‚àÉ (x‚ÇÇ : LargeExt A S.X‚ÇÇ n‚ÇÄ), x‚ÇÇ.comp (ofHom S.g) (add_zero n‚ÇÄ) = x‚ÇÉ :=
  (ShortComplex.ab_exact_iff _).1
    ((covariantSequence_exact A hS n‚ÇÄ n‚ÇÅ h).exact 1) x‚ÇÉ hx‚ÇÉ

end CovariantExactSequence

section ContravariantExactSequence

variable (B : C) {S : ShortComplex C} (hS : S.ShortExact)

/-- Given a short exact short complex `S` in an abelian category `C` and `B : C`,
this is the contravariant (exact) sequence of `LargeExt` with six terms which starts by:
`LargeExact S.X‚ÇÉ B n‚ÇÄ ‚ü∂ LargeExact S.X‚ÇÇ B n‚ÇÄ ‚ü∂ LargeExact S.X‚ÇÅ B n‚ÇÄ ‚Üí LargeExact S.X‚ÇÉ B n‚ÇÅ ‚ü∂ ` -/
@[simp]
noncomputable def contravariantSequence (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    ComposableArrows AddCommGroupCat.{w} 5 :=
  ComposableArrows.mk‚ÇÖ
    (AddCommGroupCat.ofHom (precomp (ofHom S.g) B n‚ÇÄ n‚ÇÄ (zero_add n‚ÇÄ)))
    (AddCommGroupCat.ofHom (precomp (ofHom S.f) B n‚ÇÄ n‚ÇÄ (zero_add n‚ÇÄ)))
    (AddCommGroupCat.ofHom (precomp hS.largeExtClass B n‚ÇÄ n‚ÇÅ (by omega)))
    (AddCommGroupCat.ofHom (precomp (ofHom S.g) B n‚ÇÅ n‚ÇÅ (zero_add n‚ÇÅ)))
    (AddCommGroupCat.ofHom (precomp (ofHom S.f) B n‚ÇÅ n‚ÇÅ (zero_add n‚ÇÅ)))

open Pretriangulated.Opposite

/-- The contravariant (exact) sequence of `LargeExt` identifies to the homology sequence
of the homological functor `(preadditiveCoyoneda.obj (Opposite.op ((singleFunctor C 0).obj A)))`
applied to the distinguished triangle `hS.singleTriangle`. -/
noncomputable def contravariantSequenceIso (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    contravariantSequence B hS n‚ÇÄ n‚ÇÅ h ‚âÖ
      (preadditiveYoneda.obj ((singleFunctor C 0).obj B)).homologySequenceComposableArrows‚ÇÖ
        (((triangleOpEquivalence _).functor.obj
          (Opposite.op hS.singleTriangle))) n‚ÇÄ n‚ÇÅ (by omega) :=
  isoMk‚ÇÖ
    (AddEquiv.toAddCommGroupCatIso (addEquiv S.X‚ÇÉ B n‚ÇÄ))
    (AddEquiv.toAddCommGroupCatIso (addEquiv S.X‚ÇÇ B n‚ÇÄ))
    (AddEquiv.toAddCommGroupCatIso (addEquiv S.X‚ÇÅ B n‚ÇÄ))
    (AddEquiv.toAddCommGroupCatIso (addEquiv S.X‚ÇÉ B n‚ÇÅ))
    (AddEquiv.toAddCommGroupCatIso (addEquiv S.X‚ÇÇ B n‚ÇÅ))
    (AddEquiv.toAddCommGroupCatIso (addEquiv S.X‚ÇÅ B n‚ÇÅ))
    (by ext x; apply ShiftedHom.mk‚ÇÄ_comp) (by ext x; apply ShiftedHom.mk‚ÇÄ_comp)
    (by
      ext x
      have eq := oppositeShiftHomEquiv'_compatibility hS.singleŒ¥ x.hom n‚ÇÅ (by omega)
      nth_rw 2 [‚Üê assoc] at eq
      exact eq)
    (by ext x; apply ShiftedHom.mk‚ÇÄ_comp) (by ext x; apply ShiftedHom.mk‚ÇÄ_comp)

lemma contravariantSequence_exact (n‚ÇÄ n‚ÇÅ : ‚Ñï) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    (contravariantSequence B hS n‚ÇÄ n‚ÇÅ h).Exact := by
  rw [exact_iff_of_iso (contravariantSequenceIso B hS n‚ÇÄ n‚ÇÅ h)]
  apply Functor.homologySequenceComposableArrows‚ÇÖ_exact _ _
    (op_distinguished _ hS.singleTriangle_distinguished)

variable {B}

/-- Given a short exact short complex `S` in an abelian category `C` and `B : C`,
this is the exactness of
`LargeExact S.X‚ÇÇ B n‚ÇÄ ‚ü∂ LargeExact S.X‚ÇÅ B n‚ÇÄ ‚ü∂ LargeExact S.X‚ÇÉ B n‚ÇÅ`
when `1 + n‚ÇÄ = n‚ÇÅ`. -/
lemma contravariant_sequence_exact‚ÇÅ
    {n‚ÇÄ : ‚Ñï} (x‚ÇÅ : LargeExt S.X‚ÇÅ B n‚ÇÄ) (n‚ÇÅ : ‚Ñï) (h : 1 + n‚ÇÄ = n‚ÇÅ)
    (hx‚ÇÅ : hS.largeExtClass.comp x‚ÇÅ h = 0) :
    ‚àÉ (x‚ÇÇ : LargeExt S.X‚ÇÇ B n‚ÇÄ), (ofHom S.f).comp x‚ÇÇ (zero_add n‚ÇÄ) = x‚ÇÅ :=
  (ShortComplex.ab_exact_iff _).1
    ((contravariantSequence_exact B hS n‚ÇÄ n‚ÇÅ (by omega)).exact 1) x‚ÇÅ hx‚ÇÅ

/-- Given a short exact short complex `S` in an abelian category `C` and `B : C`,
this is the exactness of
`LargeExact S.X‚ÇÉ B n ‚ü∂ LargeExact S.X‚ÇÇ B n ‚ü∂ LargeExact S.X‚ÇÅ B n`. -/
lemma contravariant_sequence_exact‚ÇÇ
    {n : ‚Ñï} (x‚ÇÇ : LargeExt S.X‚ÇÇ B n) (hx‚ÇÇ : (ofHom S.f).comp x‚ÇÇ (zero_add n) = 0) :
    ‚àÉ (x‚ÇÉ : LargeExt S.X‚ÇÉ B n), (ofHom S.g).comp x‚ÇÉ (zero_add n) = x‚ÇÇ :=
  (ShortComplex.ab_exact_iff _).1
    ((contravariantSequence_exact B hS n _ rfl).exact 0) x‚ÇÇ hx‚ÇÇ

/-- Given a short exact short complex `S` in an abelian category `C` and `B : C`,
this is the exactness of
`LargeExact S.X‚ÇÅ B n‚ÇÄ ‚ü∂ LargeExact S.X‚ÇÉ B n‚ÇÅ ‚ü∂ LargeExact S.X‚ÇÇ B n‚ÇÅ`
when `1 + n‚ÇÄ = n‚ÇÅ`. -/
lemma contravariant_sequence_exact‚ÇÉ
    {n‚ÇÅ : ‚Ñï} (x‚ÇÉ : LargeExt S.X‚ÇÉ B n‚ÇÅ) (hx‚ÇÉ : (ofHom S.g).comp x‚ÇÉ (zero_add n‚ÇÅ) = 0)
    (n‚ÇÄ : ‚Ñï) (h : 1 + n‚ÇÄ = n‚ÇÅ) :
    ‚àÉ (x‚ÇÅ : LargeExt S.X‚ÇÅ B n‚ÇÄ), hS.largeExtClass.comp x‚ÇÅ h = x‚ÇÉ :=
  (ShortComplex.ab_exact_iff _).1
    ((contravariantSequence_exact B hS n‚ÇÄ n‚ÇÅ (by omega)).exact 2) x‚ÇÉ hx‚ÇÉ

end ContravariantExactSequence

end LargeExt

end Abelian

end CategoryTheory
