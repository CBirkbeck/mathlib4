import Mathlib.Algebra.Homology.DerivedCategory.Plus
import Mathlib.CategoryTheory.Preadditive.Injective
import Mathlib.CategoryTheory.Localization.DerivabilityStructure.Constructor
import Mathlib.CategoryTheory.Localization.DerivabilityStructure.Existence
import Mathlib.CategoryTheory.Limits.FullSubcategory

open CategoryTheory Limits ZeroObject Category

variable (C D : Type*) [Category C] [Category D] [Abelian C] [Abelian D]
  [HasDerivedCategory C] [HasDerivedCategory D]
  {H : Type*} [Category H]

namespace CategoryTheory

lemma NatTrans.isIso_app_iff_of_iso {C‚ÇÅ C‚ÇÇ : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] {F G : C‚ÇÅ ‚•§ C‚ÇÇ}
    (Œ± : F ‚ü∂ G) {X Y : C‚ÇÅ} (e : X ‚âÖ Y) : IsIso (Œ±.app X) ‚Üî IsIso (Œ±.app Y) :=
  MorphismProperty.RespectsIso.arrow_mk_iso_iff (MorphismProperty.RespectsIso.isomorphisms C‚ÇÇ)
    (Arrow.isoMk (F.mapIso e) (G.mapIso e) (by simp))

abbrev Injectives := FullSubcategory (fun (X : C) => Injective X)

namespace Injectives

def closedUnderLimitsOfShapeDiscrete (J : Type*) :
    ClosedUnderLimitsOfShape (Discrete J) (fun (X : C) => Injective X) := by
  intro F c hc H
  have : HasLimit F := ‚ü®_, hc‚ü©
  let X := fun j => F.obj ‚ü®j‚ü©
  let e := @Discrete.natIsoFunctor _ _ _ F
  have : HasProduct X := hasLimitOfIso e
  have : HasLimit (Discrete.functor (F.obj ‚àò Discrete.mk)) := by
    change HasProduct X
    infer_instance
  have : ‚àÄ j, Injective (X j) := fun j => H ‚ü®j‚ü©
  have e' : ‚àè X ‚âÖ c.pt := IsLimit.conePointUniqueUpToIso (limit.isLimit _) ((IsLimit.postcomposeHomEquiv e c).symm hc)
  exact Injective.of_iso e' inferInstance

instance : HasFiniteProducts (Injectives C) :=
  ‚ü®fun _ => hasLimitsOfShape_of_closed_under_limits (closedUnderLimitsOfShapeDiscrete _ _)‚ü©

instance : HasFiniteBiproducts (Injectives C) := HasFiniteBiproducts.of_hasFiniteProducts

instance : HasBinaryBiproducts (Injectives C) := hasBinaryBiproducts_of_finite_biproducts _

instance : HasZeroObject (Injectives C) where
  zero := by
    refine' ‚ü®‚ü®0, inferInstance‚ü©, _‚ü©
    rw [IsZero.iff_id_eq_zero]
    apply id_zero

abbrev Œπ : Injectives C ‚•§ C := fullSubcategoryInclusion _

instance (X : Injectives C) : Injective ((Œπ C).obj X) := X.2

instance (X : HomotopyCategory.Plus (Injectives C)) (n : ‚Ñ§) :
    Injective (((Œπ C).mapHomotopyCategoryPlus.obj X).obj.as.X n) := by
  change Injective ((Œπ C).obj (X.obj.as.X n))
  infer_instance

variable {C}

lemma mem_essImage_mapHomotopyCategoryPlus_Œπ_of_injective (K : HomotopyCategory.Plus C)
    [‚àÄ (n : ‚Ñ§), Injective (K.obj.as.X n)] :
    K ‚àà (Œπ C).mapHomotopyCategoryPlus.essImage := by
  obtain ‚ü®n, hn‚ü© := K.2
  let L : HomotopyCategory.Plus (Injectives C) :=
    { obj :=
       ‚ü®{ X := fun n => ‚ü®K.obj.as.X n, inferInstance‚ü©
          d := fun i j => K.obj.as.d i j
          shape := fun i j hij => K.obj.as.shape i j hij
          d_comp_d' := fun i j hij => K.obj.as.d_comp_d' i j hij }‚ü©
      property := ‚ü®n, ‚ü®fun i hi => by
        simpa only [IsZero.iff_id_eq_zero] using
          CochainComplex.isZero_of_isStrictlyGE K.obj.as n i hi ‚ü©‚ü© }
  exact ‚ü®L, ‚ü®Iso.refl _‚ü©‚ü©

variable (C)

@[simps]
def localizerMorphism : LocalizerMorphism
  (MorphismProperty.isomorphisms (HomotopyCategory.Plus (Injectives C)))
    (HomotopyCategory.Plus.qis C) where
  functor := (Œπ C).mapHomotopyCategoryPlus
  map K L f (hf : IsIso f) := by
    dsimp [MorphismProperty.inverseImage, HomotopyCategory.Plus.qis]
    rw [HomotopyCategory.mem_qis_iff]
    infer_instance

noncomputable instance : CatCommSq (localizerMorphism C).functor
    (ùü≠ (HomotopyCategory.Plus (Injectives C)))
    DerivedCategory.Plus.Qh ((Œπ C).mapHomotopyCategoryPlus ‚ãô DerivedCategory.Plus.Qh) :=
  ‚ü®Iso.refl _‚ü©

variable {C}

instance (X : Injectives C) : Injective ((Œπ C).obj X) := X.2
instance (X : Injectives C) : Injective X.1 := X.2

instance (K : CochainComplex (Injectives C) ‚Ñ§) (n : ‚Ñ§) :
    Injective ((((Œπ C).mapHomologicalComplex _).obj K).X n) := by
  dsimp
  infer_instance

instance (K : HomotopyCategory.Plus (Injectives C)) :
    CochainComplex.IsKInjective ((Functor.mapHomologicalComplex (Œπ C) _).obj K.obj.as) := by
  obtain ‚ü®n, hn‚ü© := K.2
  have : CochainComplex.IsStrictlyGE
      (((Œπ C).mapHomotopyCategoryPlus.obj K)).obj.as n := by
    change CochainComplex.IsStrictlyGE (((Œπ C).mapHomologicalComplex (ComplexShape.up ‚Ñ§)).obj K.obj.as) n
    infer_instance
  apply CochainComplex.isKInjective_of_injective _ n

instance (K : HomotopyCategory.Plus (Injectives C)) :
    CochainComplex.IsKInjective ((Functor.mapHomotopyCategoryPlus (Œπ C)).obj K).obj.as := by
  change CochainComplex.IsKInjective ((Functor.mapHomologicalComplex (Œπ C) _).obj K.obj.as)
  infer_instance

lemma Qh_map_bijective_Œπ_mapHomotopyCategoryPlus
    (K : HomotopyCategory.Plus C) (L : HomotopyCategory.Plus (Injectives C)) :
    Function.Bijective (DerivedCategory.Plus.Qh.map : (K ‚ü∂ ((Œπ C).mapHomotopyCategoryPlus).obj L) ‚Üí _):= by
  apply DerivedCategory.Plus.Qh_map_bijective_of_isKInjective
  infer_instance

variable (C)

noncomputable instance : Full (((Œπ C).mapHomotopyCategoryPlus ‚ãô DerivedCategory.Plus.Qh)) :=
  Functor.fullOfSurjective _ (fun K L f => by
    obtain ‚ü®g, rfl‚ü© := (Qh_map_bijective_Œπ_mapHomotopyCategoryPlus (((Œπ C).mapHomotopyCategoryPlus).obj K) L).2 f
    obtain ‚ü®h, rfl‚ü© := ((Œπ C).mapHomotopyCategoryPlus).map_surjective g
    exact ‚ü®h, rfl‚ü©)

noncomputable instance : Faithful (((Œπ C).mapHomotopyCategoryPlus ‚ãô DerivedCategory.Plus.Qh)) where
  map_injective {K L} f‚ÇÅ f‚ÇÇ hf := by
    apply ((Œπ C).mapHomotopyCategoryPlus).map_injective
    exact ((Qh_map_bijective_Œπ_mapHomotopyCategoryPlus
      (((Œπ C).mapHomotopyCategoryPlus).obj K) L).1 hf)

noncomputable instance : ReflectsIsomorphisms (((Œπ C).mapHomotopyCategoryPlus ‚ãô DerivedCategory.Plus.Qh)) :=
  reflectsIsomorphisms_of_full_and_faithful _

--instance [EnoughInjectives C] : (localizerMorphism C).HasRightResolutions := sorry
--instance : DerivedCategory.Plus.Qh.IsLocalization (HomotopyCategory.Plus.qis C) := sorry
variable [(localizerMorphism C).HasRightResolutions]
  [DerivedCategory.Plus.Qh.IsLocalization (HomotopyCategory.Plus.qis C)]

variable {C}

lemma localizerMorphism_lift_map_on_resolutions {X Y : HomotopyCategory.Plus C} (œÜ : X ‚ü∂ Y)
    (X' : (localizerMorphism C).RightResolution X) (Y' : (localizerMorphism C).RightResolution Y) :
    ‚àÉ (œà : X'.X‚ÇÅ ‚ü∂ Y'.X‚ÇÅ), X'.w ‚â´ (localizerMorphism C).functor.map œà = œÜ ‚â´ Y'.w := by
  let F := ((Œπ C).mapHomotopyCategoryPlus ‚ãô DerivedCategory.Plus.Qh)
  have := DerivedCategory.Plus.Qh_inverts C _ X'.hw
  obtain ‚ü®Œ≥, hŒ≥‚ü© := F.map_surjective (inv (DerivedCategory.Plus.Qh.map X'.w) ‚â´ DerivedCategory.Plus.Qh.map œÜ ‚â´ DerivedCategory.Plus.Qh.map Y'.w)
  refine' ‚ü®Œ≥, (DerivedCategory.Plus.Qh_map_bijective_of_isKInjective _ _ _).1 _‚ü©
  ¬∑ dsimp [localizerMorphism]
    infer_instance
  ¬∑ dsimp
    erw [Functor.map_comp, hŒ≥, Functor.map_comp, IsIso.hom_inv_id_assoc]

instance [EnoughInjectives C] : (localizerMorphism C).arrow.HasRightResolutions := fun f => by
  have X : (localizerMorphism C).RightResolution f.left := Classical.arbitrary _
  have Y : (localizerMorphism C).RightResolution f.right := Classical.arbitrary _
  obtain ‚ü®œÜ, hœÜ‚ü© := localizerMorphism_lift_map_on_resolutions f.hom X Y
  exact
   ‚ü®{ X‚ÇÅ := Arrow.mk œÜ
      w  :=
        { left := X.w
          right := Y.w
          w := hœÜ }
      hw := ‚ü®X.hw, Y.hw‚ü© }‚ü©

instance [EnoughInjectives C] (X : HomotopyCategory.Plus C) :
    IsConnected (LocalizerMorphism.RightResolution (localizerMorphism C) X) :=
  zigzag_isConnected (fun Y Z => by
    obtain ‚ü®œÜ, hœÜ‚ü© := localizerMorphism_lift_map_on_resolutions (ùüô X) Y Z
    rw [id_comp] at hœÜ
    have : IsIso ((((Œπ C).mapHomotopyCategoryPlus ‚ãô DerivedCategory.Plus.Qh)).map œÜ) := by
      replace hœÜ := DerivedCategory.Plus.Qh.congr_map hœÜ
      dsimp at hœÜ
      rw [Functor.map_comp] at hœÜ
      have := DerivedCategory.Plus.Qh_inverts C Y.w Y.hw
      have := DerivedCategory.Plus.Qh_inverts C Z.w Z.hw
      exact IsIso.of_isIso_fac_left hœÜ
    have hœÜ' : IsIso œÜ := isIso_of_reflects_iso œÜ
      ((Œπ C).mapHomotopyCategoryPlus ‚ãô DerivedCategory.Plus.Qh)
    exact Relation.ReflTransGen.single
      (Or.inl ‚ü®LocalizerMorphism.RightResolution.Hom.mk œÜ hœÜ' hœÜ‚ü©))

instance [EnoughInjectives C] : (localizerMorphism C).IsRightDerivabilityStructure :=
  LocalizerMorphism.IsRightDerivabilityStructure.mk' (localizerMorphism C) (ùü≠ _)
    DerivedCategory.Plus.Qh ((Œπ C).mapHomotopyCategoryPlus ‚ãô DerivedCategory.Plus.Qh)

section

variable [EnoughInjectives C] (F : HomotopyCategory.Plus C ‚•§ H)

instance : F.HasPointwiseRightDerivedFunctor (HomotopyCategory.Plus.qis C) :=
  (localizerMorphism C).hasPointwiseRightDerivedFunctor F
    (MorphismProperty.isomorphisms_isInvertedBy _)

variable (F' : DerivedCategory.Plus C ‚•§ H) (Œ± : F ‚ü∂ DerivedCategory.Plus.Qh ‚ãô F')
  [F'.IsRightDerivedFunctor Œ± (HomotopyCategory.Plus.qis C)]

instance (K : HomotopyCategory.Plus C) [(‚àÄ (n : ‚Ñ§), Injective (K.obj.as.X n))] : IsIso (Œ±.app K) := by
  have : ‚àÄ (Y : HomotopyCategory.Plus (Injectives C)),
      IsIso (Œ±.app ((Œπ C).mapHomotopyCategoryPlus.obj Y)) := fun Y =>
    (localizerMorphism C).isIso_app_of_isRightDerivedFunctor _
      (MorphismProperty.isomorphisms_isInvertedBy _) _ _ _ _
  obtain ‚ü®Y, ‚ü®e‚ü©‚ü© := mem_essImage_mapHomotopyCategoryPlus_Œπ_of_injective K
  rw [‚Üê NatTrans.isIso_app_iff_of_iso Œ± e]
  infer_instance

example (X : HomotopyCategory.Plus (Injectives C)) :
    IsIso ((F.totalRightDerivedUnit DerivedCategory.Plus.Qh
      (HomotopyCategory.Plus.qis C)).app ((Œπ C).mapHomotopyCategoryPlus.obj X)) := by
  infer_instance

end

end Injectives

namespace Functor

-- TODO: remove these assumptions...
variable [(Injectives.localizerMorphism C).HasRightResolutions]
  [DerivedCategory.Plus.Qh.IsLocalization (HomotopyCategory.Plus.qis C)]

variable {C D}
variable (F : C ‚•§ D) [F.Additive]
  [(F.mapHomotopyCategoryPlus ‚ãô DerivedCategory.Plus.Qh).HasRightDerivedFunctor (HomotopyCategory.Plus.qis C)]
-- this is a consequence of `[EnoughInjectives C]

noncomputable def rightDerivedFunctorPlus : DerivedCategory.Plus C ‚•§ DerivedCategory.Plus D :=
  (F.mapHomotopyCategoryPlus ‚ãô DerivedCategory.Plus.Qh).totalRightDerived DerivedCategory.Plus.Qh
    (HomotopyCategory.Plus.qis C)

noncomputable def rightDerivedFunctorPlusUnit : F.mapHomotopyCategoryPlus ‚ãô DerivedCategory.Plus.Qh ‚ü∂
    DerivedCategory.Plus.Qh ‚ãô F.rightDerivedFunctorPlus :=
  (F.mapHomotopyCategoryPlus ‚ãô DerivedCategory.Plus.Qh).totalRightDerivedUnit DerivedCategory.Plus.Qh
    (HomotopyCategory.Plus.qis C)

instance : F.rightDerivedFunctorPlus.IsRightDerivedFunctor F.rightDerivedFunctorPlusUnit
    (HomotopyCategory.Plus.qis C) := by
  dsimp only [rightDerivedFunctorPlus, rightDerivedFunctorPlusUnit]
  infer_instance

instance [EnoughInjectives C] (X : HomotopyCategory.Plus (Injectives C)) :
    IsIso (F.rightDerivedFunctorPlusUnit.app ((Injectives.Œπ C).mapHomotopyCategoryPlus.obj X)) := by
  dsimp only [rightDerivedFunctorPlus, rightDerivedFunctorPlusUnit]
  infer_instance

end Functor

end CategoryTheory
