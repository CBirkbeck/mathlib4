import Mathlib.Algebra.Homology.DerivedCategory.IsLE

open CategoryTheory Category Limits Preadditive ZeroObject

variable {C : Type _} [Category C] [Abelian C]

namespace CochainComplex

open HomologicalComplex

variable (K L M : CochainComplex C ‚Ñ§) (œÜ : K ‚ü∂ L) (œà : L ‚ü∂ M)

noncomputable def truncLEX (n i : ‚Ñ§) : C :=
  if n < i then 0
  else if i = n then K.newCycles i
    else K.X i

lemma isZero_truncLEX (n i : ‚Ñ§) (hi : n < i) : IsZero (K.truncLEX n i) := by
  dsimp [truncLEX]
  rw [if_pos hi]
  exact isZero_zero C

noncomputable def truncLEXIsoX (n i : ‚Ñ§) (hi : i < n) :
    K.truncLEX n i ‚âÖ K.X i := eqToIso (by
  dsimp [truncLEX]
  rw [if_neg, if_neg]
  all_goals linarith)

noncomputable def truncLEXIsoCycles (n i : ‚Ñ§) (hi : i = n) :
    K.truncLEX n i ‚âÖ K.newCycles i := eqToIso (by
  dsimp [truncLEX]
  rw [if_neg, if_pos hi]
  linarith)

variable {K L}

noncomputable def truncLEXmap (n i : ‚Ñ§) : K.truncLEX n i ‚ü∂ L.truncLEX n i := by
  by_cases hi : n < i
  . exact 0
  . by_cases hi' : i < n
    . exact (K.truncLEXIsoX n i hi').hom ‚â´ œÜ.f i ‚â´ (L.truncLEXIsoX n i hi').inv
    . have hi'' : i = n := le_antisymm (by simpa using hi) (by simpa using hi')
      exact (K.truncLEXIsoCycles n i hi'').hom ‚â´ cyclesMap œÜ i ‚â´
        (L.truncLEXIsoCycles n i hi'').inv

lemma truncLEXmap_eq_zero (n i : ‚Ñ§) (hi : n < i) :
    truncLEXmap œÜ n i = 0 := by
  dsimp [truncLEXmap]
  rw [dif_pos hi]

lemma truncLEXmap_eq_f (n i : ‚Ñ§) (hi : i < n) :
    truncLEXmap œÜ n i =
      (K.truncLEXIsoX n i hi).hom ‚â´ œÜ.f i ‚â´ (L.truncLEXIsoX n i hi).inv := by
  dsimp [truncLEXmap]
  rw [dif_neg (show ¬¨ n < i by linarith), dif_pos hi]

lemma truncLEXmap_eq_cyclesMap (n i : ‚Ñ§) (hi : i = n) :
    truncLEXmap œÜ n i =
      (K.truncLEXIsoCycles n i hi).hom ‚â´ cyclesMap œÜ i ‚â´ (L.truncLEXIsoCycles n i hi).inv := by
  dsimp [truncLEXmap]
  rw [dif_neg (show ¬¨ (n < i) by linarith), dif_neg (show ¬¨ (i < n) by linarith)]

variable (K)

noncomputable def truncLEŒπf (n i : ‚Ñ§) : K.truncLEX n i ‚ü∂ K.X i := by
  by_cases hi : n < i
  . exact 0
  . by_cases hn : i = n
    . exact (K.truncLEXIsoCycles n i hn).hom ‚â´ K.iCycles i
    . exact (K.truncLEXIsoX n i (by cases (not_lt.1 hi).lt_or_eq <;> tauto)).hom

instance (n i : ‚Ñ§) : Mono (K.truncLEŒπf n i) := by
  dsimp [truncLEŒπf]
  split_ifs with h‚ÇÅ h‚ÇÇ
  . rw [mono_iff_cancel_zero]
    intros
    apply (K.isZero_truncLEX n i h‚ÇÅ).eq_of_tgt
  . apply mono_comp
  . infer_instance

lemma truncLEŒπf_eq_zero (n i : ‚Ñ§) (hi : n < i) :
    K.truncLEŒπf n i = 0 := by
  dsimp [truncLEŒπf]
  rw [dif_pos hi]

lemma truncLEŒπf_eq_of_eq (n i : ‚Ñ§) (hi : i = n) :
    K.truncLEŒπf n i = (truncLEXIsoCycles K n i hi).hom ‚â´ K.iCycles i := by
  dsimp [truncLEŒπf]
  rw [dif_neg, dif_pos hi]
  all_goals linarith

lemma truncLEŒπf_eq_truncLEXIso_hom (n i : ‚Ñ§) (hi : i < n) :
    K.truncLEŒπf n i = (truncLEXIsoX K n i hi).hom := by
  dsimp [truncLEŒπf]
  rw [dif_neg, dif_neg]
  all_goals linarith

variable {K}

@[reassoc (attr := simp)]
lemma truncLEmap_Œπf (n i : ‚Ñ§) : truncLEXmap œÜ n i ‚â´ L.truncLEŒπf n i =
    K.truncLEŒπf n i ‚â´ œÜ.f i := by
  by_cases hi : n < i
  . simp only [truncLEŒπf_eq_zero _ _ _ hi, zero_comp, comp_zero]
  . obtain (hi'|hi') := (not_lt.1 hi).lt_or_eq
    . simp only [truncLEŒπf_eq_truncLEXIso_hom _ _ _ hi', K.truncLEXmap_eq_f _ _ _ hi', assoc,
        Iso.inv_hom_id, comp_id]
    . simp only [truncLEŒπf_eq_of_eq _ _ _ hi', truncLEXmap_eq_cyclesMap _ _ _ hi',
        truncLEXmap_eq_cyclesMap, assoc, Iso.inv_hom_id_assoc, cyclesMap_i]

variable (K)

noncomputable def truncLEd (n i j : ‚Ñ§) : K.truncLEX n i ‚ü∂ K.truncLEX n j := by
  by_cases hij : i + 1 = j
  . by_cases hj‚ÇÄ : n < j
    . exact 0
    . by_cases hj : j = n
      . exact K.liftCycles ((K.truncLEXIsoX n i (by linarith)).hom ‚â´ K.d i j) (j+1)
          (by simp) (by simp) ‚â´ (K.truncLEXIsoCycles n j hj).inv
      . refine' (K.truncLEXIsoX n i _).hom ‚â´ K.d i j ‚â´ (K.truncLEXIsoX n j _).inv
        . linarith
        . cases (not_lt.1 hj‚ÇÄ).lt_or_eq <;> tauto
  . exact 0

lemma truncLE_shape (n i j : ‚Ñ§) (hij : i + 1 ‚â† j) :
    K.truncLEd n i j = 0 := by
  dsimp [truncLEd]
  rw [dif_neg hij]

lemma truncLEd_eq_zero (n i j : ‚Ñ§) (hi : n ‚â§ i) :
    K.truncLEd n i j = 0 := by
  by_cases hij : i + 1 = j
  . dsimp only [truncLEd]
    rw [dif_pos hij, dif_pos]
    linarith
  . rw [truncLE_shape _ _ _ _ hij]

@[simp]
lemma truncLEd_eq_zero' (n j : ‚Ñ§) :
    K.truncLEd n n j = 0 :=
  K.truncLEd_eq_zero _ _ _ (by rfl)

lemma truncLEd_eq_d (n i j : ‚Ñ§) (hij : i + 1 = j) (hj : j < n) :
    K.truncLEd n i j =
      (K.truncLEXIsoX n i (by rw [‚Üê hij] at hj ; exact (lt_add_one i).trans hj)).hom ‚â´
        K.d i j ‚â´ (K.truncLEXIsoX n j hj).inv := by
  dsimp [truncLEd]
  rw [dif_pos hij, dif_neg, dif_neg]
  all_goals linarith

lemma trunceLEd_eq_liftCycles_comp (n i j : ‚Ñ§) (hij : i + 1 = j) (hj : j = n) :
    K.truncLEd n i j = K.liftCycles ((K.truncLEXIsoX n i (by linarith)).hom ‚â´ K.d i j) (j+1)
          (by simp) (by simp) ‚â´ (K.truncLEXIsoCycles n j hj).inv := by
  dsimp [truncLEd]
  rw [dif_pos hij, dif_neg (show ¬¨n < j by linarith), dif_pos hj]

lemma truncLEŒπ_d_eq_zero (n i j : ‚Ñ§) (hi : n ‚â§ i) :
    K.truncLEŒπf n i ‚â´ K.d i j = 0 := by
  obtain (hi|hi) := hi.lt_or_eq
  . rw [K.truncLEŒπf_eq_zero _ _ hi, zero_comp]
  . simp [K.truncLEŒπf_eq_of_eq _ _ hi.symm]

@[reassoc (attr := simp)]
lemma truncLEd_comm (n i j : ‚Ñ§) :
    K.truncLEd n i j ‚â´ K.truncLEŒπf n j =
      K.truncLEŒπf n i ‚â´ K.d i j := by
  by_cases hij : i + 1 = j
  . by_cases hi : n ‚â§ i
    . rw [K.truncLEd_eq_zero _ _ _ hi, zero_comp, K.truncLEŒπ_d_eq_zero _ _ _ hi]
    . simp only [not_le] at hi
      by_cases hj : j < n
      . simp only [K.truncLEŒπf_eq_truncLEXIso_hom _ _ hi, K.truncLEŒπf_eq_truncLEXIso_hom _ _ hj,
          K.truncLEd_eq_d _ _ _ hij hj, assoc, Iso.inv_hom_id, comp_id]
      . have hj' : j = n := by cases (not_lt.1 hj).lt_or_eq <;> linarith
        simp only [K.trunceLEd_eq_liftCycles_comp _ _ _ hij hj', K.truncLEŒπf_eq_of_eq _ _ hj',
          K.truncLEŒπf_eq_truncLEXIso_hom _ _ hi, assoc, Iso.inv_hom_id_assoc,
          HomologicalComplex.liftCycles_i]
  . rw [K.shape _ _ hij, K.truncLE_shape _ _ _ hij, zero_comp, comp_zero]

@[reassoc (attr := simp)]
lemma truncLEd_comp_d (n i j k : ‚Ñ§) :
    K.truncLEd n i j ‚â´ K.truncLEd n j k = 0 := by
  simp only [‚Üê cancel_mono (K.truncLEŒπf n k), zero_comp, assoc,
          truncLEd_comm, truncLEd_comm_assoc, K.d_comp_d, comp_zero]

@[simp]
lemma truncLEXmap_id (n i : ‚Ñ§) : truncLEXmap (ùüô K) n i = ùüô _ := by
  simp only [‚Üê cancel_mono (K.truncLEŒπf n i), truncLEmap_Œπf, id_f, comp_id, id_comp]

variable {K M}

@[reassoc]
lemma truncLEXmap_comp (n i : ‚Ñ§) :
  truncLEXmap (œÜ ‚â´ œà) n i = truncLEXmap œÜ n i ‚â´ truncLEXmap œà n i := by
  simp only [‚Üê cancel_mono (M.truncLEŒπf n i), truncLEmap_Œπf, comp_f,
    assoc, truncLEmap_Œπf_assoc]

attribute [simp] truncLEXmap_comp

@[reassoc (attr := simp)]
lemma truncLEmap_d (n i j : ‚Ñ§) : truncLEXmap œÜ n i ‚â´ L.truncLEd n i j =
  K.truncLEd n i j ‚â´ truncLEXmap œÜ n j := by
  simp only [‚Üê cancel_mono (L.truncLEŒπf n j), assoc, truncLEd_comm,
    truncLEmap_Œπf_assoc, Hom.comm, truncLEmap_Œπf, truncLEd_comm_assoc]

variable (K L)

@[simps]
noncomputable def truncLE (n : ‚Ñ§) : CochainComplex C ‚Ñ§ where
  X := K.truncLEX n
  d := K.truncLEd n
  shape := fun i j hij => K.truncLE_shape n i j hij

variable {K L}

@[simps]
noncomputable def truncLEmap (n : ‚Ñ§) : K.truncLE n ‚ü∂ L.truncLE n where
  f := truncLEXmap œÜ n

variable (K L)

@[simps]
noncomputable def truncLEŒπ (n : ‚Ñ§) : K.truncLE n ‚ü∂ K where
  f i := K.truncLEŒπf n i

variable {K L}

@[reassoc (attr := simp)]
lemma truncLEŒπ_naturality (n : ‚Ñ§) :
  truncLEmap œÜ n ‚â´ truncLEŒπ L n = truncLEŒπ K n ‚â´ œÜ := by aesop_cat

variable (K L)

lemma isZero_homology_truncLE (n i : ‚Ñ§) (hi : n < i) :
    IsZero ((K.truncLE n).newHomology i) := by
  rw [isZero_homology_iff]
  exact ShortComplex.exact_of_isZero_X‚ÇÇ _ (K.isZero_truncLEX _ _ hi)

lemma isIso_homologyMap_truncLEŒπ (n i : ‚Ñ§) (hi : i ‚â§ n) :
    IsIso (homologyMap (K.truncLEŒπ n) i) := by
  obtain (hi'|rfl) := hi.lt_or_eq
  . let Œ± := (shortComplexFunctor' C (ComplexShape.up ‚Ñ§) (i - 1) i (i + 1)).map (truncLEŒπ K n)
    rw [isIso_homologyMap_iff' _ (i-1) i (i+1) (by simp) (by simp)]
    change IsIso (ShortComplex.homologyMap Œ±)
    have : IsIso Œ±.œÑ‚ÇÅ := by
      dsimp
      rw [K.truncLEŒπf_eq_truncLEXIso_hom _ _ (by linarith)]
      infer_instance
    have : IsIso Œ±.œÑ‚ÇÇ := by
      dsimp
      rw [K.truncLEŒπf_eq_truncLEXIso_hom _ _ hi']
      infer_instance
    have : Mono Œ±.œÑ‚ÇÉ := by dsimp ; infer_instance
    apply ShortComplex.isIso_homologyMap_of_epi_of_isIso_of_mono
  . apply isIso_homologyMap_of_isIso_cyclesMap_of_epi _ (i-1) i (by simp)
    . refine' ‚ü®‚ü®(K.truncLE i).liftCycles (K.truncLEXIsoCycles i i rfl).inv (i+1) (by simp) _,
        _, _‚ü©‚ü©
      . dsimp
        rw [K.truncLEd_eq_zero _ _ _ (by rfl), comp_zero]
      . dsimp
        have := (K.truncLE i).isIso_liftCycles_of_zero i (i+1) (by simp) (by simp)
        simp only [‚Üê cancel_epi ((K.truncLE i).liftCycles (ùüô ((K.truncLE i).X i)) (i+1)
          (by simp) (by simp)), ‚Üê cancel_mono ((K.truncLE i).iCycles i),
          truncLE_X, liftCycles_comp_cyclesMap_assoc, truncLEŒπ_f, id_comp,
          assoc, liftCycles_i, comp_id]
        simp only [‚Üê cancel_mono ((K.truncLEXIsoCycles i i rfl).hom), assoc, Iso.inv_hom_id,
          comp_id, id_comp, ‚Üê cancel_mono (K.iCycles i), liftCycles_i, truncLEŒπf_eq_of_eq]
      . simp only [‚Üê cancel_mono (K.iCycles i), liftCycles_comp_cyclesMap,
          truncLE_X, truncLEŒπ_f, liftCycles_i, id_comp,
          K.truncLEŒπf_eq_of_eq i i rfl, Iso.inv_hom_id_assoc]
    . dsimp
      rw [K.truncLEŒπf_eq_truncLEXIso_hom _ _ (by linarith)]
      infer_instance

variable {K L}

lemma isIso_homologyMap_truncLEmap_iff (n i : ‚Ñ§) (hi : i ‚â§ n) :
    IsIso (homologyMap (truncLEmap œÜ n) i) ‚Üî IsIso (homologyMap œÜ i):= by
  have := K.isIso_homologyMap_truncLEŒπ _ _ hi
  have := L.isIso_homologyMap_truncLEŒπ _ _ hi
  apply isIso_iff_of_arrow_mk_iso
  refine' Arrow.isoMk (asIso (homologyMap (K.truncLEŒπ n) i))
    (asIso (homologyMap (L.truncLEŒπ n) i)) _
  dsimp
  simp only [‚Üê homologyMap_comp, truncLEŒπ_naturality]

lemma qis_truncLEmap_iff :
    qis _ _ (truncLEmap œÜ n) ‚Üî ‚àÄ (i : ‚Ñ§) (_ : i ‚â§ n), IsIso (homologyMap œÜ i) := by
  constructor
  . intro h i hi
    rw [‚Üê isIso_homologyMap_truncLEmap_iff œÜ n i hi]
    apply h
  . intro h i
    by_cases hi : i ‚â§ n
    . rw [isIso_homologyMap_truncLEmap_iff œÜ n i hi]
      exact h _ hi
    . simp only [not_le] at hi
      refine' ‚ü®‚ü®0, _, _‚ü©‚ü©
      . apply (K.isZero_homology_truncLE n i hi).eq_of_src
      . apply (L.isZero_homology_truncLE n i hi).eq_of_src

variable (K)

lemma qis_truncLEŒπ_iff :
    qis _ _ (K.truncLEŒπ n) ‚Üî ‚àÄ (i : ‚Ñ§) (_ : n < i), IsZero (K.newHomology i) := by
  constructor
  . intro h i hi
    have h' := h i
    exact IsZero.of_iso (K.isZero_homology_truncLE _ _ hi)
      (asIso (homologyMap (truncLEŒπ K n) i)).symm
  . intro h i
    by_cases hi : i ‚â§ n
    . exact K.isIso_homologyMap_truncLEŒπ n i hi
    . simp only [not_le] at hi
      refine' ‚ü®‚ü®0, _, _‚ü©‚ü©
      . apply (K.isZero_homology_truncLE n i hi).eq_of_src
      . apply (h i hi).eq_of_src

variable (C)

@[simps]
noncomputable def functorTruncLE (n : ‚Ñ§) : CochainComplex C ‚Ñ§ ‚•§ CochainComplex C ‚Ñ§ where
  obj K := K.truncLE n
  map œÜ := truncLEmap œÜ n

@[simps]
noncomputable def natTransTruncLEŒπ (n : ‚Ñ§) : functorTruncLE C n ‚ü∂ ùü≠ _ where
  app K := K.truncLEŒπ n

lemma qis_isInvertedBy_functorTruncLE_comp_Q (n : ‚Ñ§) :
    (qis C _).IsInvertedBy (functorTruncLE C n ‚ãô DerivedCategory.Q) := fun K L f hf => by
  dsimp
  rw [DerivedCategory.isIso_Q_map_iff', qis_truncLEmap_iff]
  intro i _
  exact hf i

instance : (K.truncLE n).IsStrictlyLE n := ‚ü®K.isZero_truncLEX n‚ü©

lemma isIso_truncLEŒπ_iff (n : ‚Ñ§) : IsIso (K.truncLEŒπ n) ‚Üî K.IsStrictlyLE n := by
  constructor
  . intro hK
    constructor
    intro i hi
    exact IsZero.of_iso (isZero_truncLEX _ _ _ hi)
      ((eval _ _ i).mapIso (asIso (K.truncLEŒπ n)).symm)
  . intro hK
    suffices ‚àÄ (i : ‚Ñ§), IsIso ((K.truncLEŒπ n).f i) by
      apply HomologicalComplex.Hom.isIso_of_components
    intro i
    dsimp
    by_cases hi : i < n
    . rw [truncLEŒπf_eq_truncLEXIso_hom _ _ _ hi]
      infer_instance
    . obtain (hi'|rfl) := (not_lt.1 hi).lt_or_eq
      . exact ‚ü®0, (K.isZero_truncLEX n i hi').eq_of_src _ _,
          (K.isZero_of_isStrictlyLE n i hi').eq_of_src _ _‚ü©
      . have := K.isIso_iCycles_of_zero n (n+1) (by simp)
          (((K.isZero_of_isStrictlyLE n (n+1) (by simp))).eq_of_tgt _ _)
        rw [K.truncLEŒπf_eq_of_eq n n rfl]
        infer_instance


instance (n : ‚Ñ§) [K.IsStrictlyLE n] : IsIso (K.truncLEŒπ n) := by
  rw [K.isIso_truncLEŒπ_iff]
  infer_instance

variable {C}

end CochainComplex

namespace DerivedCategory

variable (C)

noncomputable def functorTruncLE (n : ‚Ñ§) : DerivedCategory C ‚•§ DerivedCategory C :=
  Localization.lift _ (CochainComplex.qis_isInvertedBy_functorTruncLE_comp_Q C n) Q

noncomputable def functorTruncLEFactors (n : ‚Ñ§) :
    Q ‚ãô functorTruncLE C n ‚âÖ CochainComplex.functorTruncLE C n ‚ãô Q :=
  Localization.fac _ _ _

noncomputable instance : Localization.Lifting Q (HomologicalComplex.qis C _)
    (CochainComplex.functorTruncLE C n ‚ãô Q) (functorTruncLE C n) :=
  ‚ü®functorTruncLEFactors C n‚ü©

noncomputable def natTransTruncLEŒπ (n : ‚Ñ§) : functorTruncLE C n ‚ü∂ ùü≠ _  :=
  Localization.liftNatTrans Q (HomologicalComplex.qis C _)
    (CochainComplex.functorTruncLE C n ‚ãô Q) Q _ _
      (whiskerRight (CochainComplex.natTransTruncLEŒπ C n) Q)

noncomputable def QCompFunctorTruncLECompHomologyFunctorIso (n i : ‚Ñ§) :
    Q ‚ãô functorTruncLE C n ‚ãô homologyFunctor C i ‚âÖ
      CochainComplex.functorTruncLE C n ‚ãô
        HomologicalComplex.newHomologyFunctor _ _ i :=
  (Functor.associator _ _ _).symm ‚â™‚â´
    isoWhiskerRight (functorTruncLEFactors C n) _ ‚â™‚â´ Functor.associator _ _ _ ‚â™‚â´
    isoWhiskerLeft _ (homologyFunctorFactors _ i)

variable {C}

noncomputable abbrev truncLE (X : DerivedCategory C) (n : ‚Ñ§) := (functorTruncLE C n).obj X

lemma isZero_homology_truncLE (X : DerivedCategory C) (n i : ‚Ñ§) (hi : n < i) :
    IsZero ((homologyFunctor C i).obj (X.truncLE n)) := by
  obtain ‚ü®K, rfl‚ü© := Q_obj_surjective X
  exact IsZero.of_iso (K.isZero_homology_truncLE n i hi)
    ((QCompFunctorTruncLECompHomologyFunctorIso C n i).app K)

noncomputable abbrev truncLEŒπ (X : DerivedCategory C) (n : ‚Ñ§) :=
  (natTransTruncLEŒπ C n).app X

@[reassoc (attr := simp)]
lemma truncLEŒπ_naturality {X Y : DerivedCategory C} (f : X ‚ü∂ Y) (n : ‚Ñ§) :
    (functorTruncLE C n).map f ‚â´ Y.truncLEŒπ n = X.truncLEŒπ n ‚â´ f :=
  (natTransTruncLEŒπ C n).naturality f

lemma truncLEŒπ_app (K : CochainComplex C ‚Ñ§) (n : ‚Ñ§) :
    (Q.obj K).truncLEŒπ n =
      (functorTruncLEFactors C n).hom.app K ‚â´ Q.map (K.truncLEŒπ n) := by
  dsimp [truncLEŒπ, natTransTruncLEŒπ]
  rw [Localization.liftNatTrans_app]
  dsimp only [Localization.Lifting.iso, Localization.Lifting.iso']
  simp

lemma isIso_homologyMap_truncLEŒπ (X : DerivedCategory C) (n i : ‚Ñ§) (hi : i ‚â§ n) :
    IsIso ((homologyFunctor C i).map (X.truncLEŒπ n)) := by
  obtain ‚ü®K, rfl‚ü© := Q_obj_surjective X
  rw [truncLEŒπ_app, Functor.map_comp]
  have : IsIso ((homologyFunctor C i).map ((functorTruncLEFactors C n).hom.app K)) := inferInstance
  have : IsIso ((homologyFunctor C i).map (Q.map (K.truncLEŒπ n))) := by
    erw [NatIso.isIso_map_iff (homologyFunctorFactors C i) (K.truncLEŒπ n)]
    exact K.isIso_homologyMap_truncLEŒπ n i hi
  apply IsIso.comp_isIso

lemma isIso_truncLEŒπ_iff (X : DerivedCategory C) (n : ‚Ñ§) :
    IsIso (X.truncLEŒπ n) ‚Üî X.IsLE n := by
  constructor
  . intro hX
    constructor
    intro i hi
    exact IsZero.of_iso (isZero_homology_truncLE _ _ _ hi)
      ((homologyFunctor C i).mapIso (asIso (truncLEŒπ X n)).symm)
  . intro hX
    rw [isIso_iff]
    intro i
    by_cases hi : i ‚â§ n
    . exact X.isIso_homologyMap_truncLEŒπ _ _ hi
    . simp only [not_le] at hi
      refine' ‚ü®0, _, _‚ü©
      . apply (X.isZero_homology_truncLE n i hi).eq_of_src
      . apply (X.isZero_of_isLE n i hi).eq_of_src

lemma isZero_truncLE_iff (X : DerivedCategory C) (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    IsZero (X.truncLE n‚ÇÄ) ‚Üî X.IsGE n‚ÇÅ := by
  have h : ‚àÄ (i : ‚Ñ§) (_ : i < n‚ÇÅ), (homologyFunctor C i).obj (X.truncLE n‚ÇÄ) ‚âÖ
      (homologyFunctor C i).obj X:= fun i hi => by
    have := X.isIso_homologyMap_truncLEŒπ n‚ÇÄ i (by linarith)
    exact asIso ((homologyFunctor C i).map (X.truncLEŒπ n‚ÇÄ))
  constructor
  . intro hX
    constructor
    intro i hi
    refine' IsZero.of_iso _ (h i hi).symm
    rw [IsZero.iff_id_eq_zero] at hX ‚ä¢
    rw [‚Üê (homologyFunctor C i).map_id, hX, Functor.map_zero]
  . intro hX
    rw [isZero_iff]
    intro i
    by_cases hi : i < n‚ÇÅ
    . exact IsZero.of_iso (X.isZero_of_isGE n‚ÇÅ i hi) (h i hi)
    . exact X.isZero_homology_truncLE _ _ (by linarith)

instance (X : DerivedCategory C) (n : ‚Ñ§) [X.IsLE n] : IsIso (X.truncLEŒπ n) := by
  rw [isIso_truncLEŒπ_iff]
  infer_instance

instance (X : DerivedCategory C) (n : ‚Ñ§) : (X.truncLE n).IsLE n := by
  obtain ‚ü®K, rfl‚ü© := Q_obj_surjective X
  have e : _ ‚âÖ Q.obj (K.truncLE n) := (functorTruncLEFactors C n).app K
  apply isLE_of_iso e.symm n

lemma right_fac_of_isStrictlyLE (X Y : CochainComplex C ‚Ñ§) (f : Q.obj X ‚ü∂ Q.obj Y) (n : ‚Ñ§)
    [X.IsStrictlyLE n] :
    ‚àÉ (X' : CochainComplex C ‚Ñ§) (_ : X'.IsStrictlyLE n) (s : X' ‚ü∂ X) (hs : IsIso (Q.map s))
      (g : X' ‚ü∂ Y), f = inv (Q.map s) ‚â´ Q.map g := by
  obtain ‚ü®X', s, hs, g, rfl‚ü© := right_fac X Y f
  have : IsIso (Q.map (CochainComplex.truncLEmap s n)) := by
    rw [isIso_Q_map_iff', CochainComplex.qis_truncLEmap_iff]
    rw [isIso_Q_map_iff'] at hs
    intro i _
    exact hs i
  refine' ‚ü®X'.truncLE n, inferInstance, CochainComplex.truncLEmap s n ‚â´ X.truncLEŒπ n, _,
      CochainComplex.truncLEmap g n ‚â´ Y.truncLEŒπ n, _‚ü©
  . rw [Q.map_comp]
    infer_instance
  . have eq := Q.congr_map (CochainComplex.truncLEŒπ_naturality s n)
    have eq' := Q.congr_map (CochainComplex.truncLEŒπ_naturality g n)
    simp only [Functor.map_comp] at eq eq'
    simp only [Functor.map_comp, ‚Üê cancel_epi (Q.map (CochainComplex.truncLEmap s n) ‚â´
      Q.map (CochainComplex.truncLEŒπ X n)), IsIso.hom_inv_id_assoc, assoc, reassoc_of% eq, eq']

end DerivedCategory
