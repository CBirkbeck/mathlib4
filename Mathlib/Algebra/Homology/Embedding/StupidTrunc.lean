import Mathlib.Algebra.Homology.Embedding.Extend
import Mathlib.Algebra.Homology.Embedding.Restriction

open CategoryTheory Category Limits ZeroObject

variable {Œπ Œπ' : Type*} {c : ComplexShape Œπ} {c' : ComplexShape Œπ'}

namespace HomologicalComplex

variable {C : Type*} [Category C] [HasZeroMorphisms C] [HasZeroObject C]

section

variable (K L M : HomologicalComplex C c') (œÜ : K ‚ü∂ L) (œÜ' : L ‚ü∂ M)
  (e : c.Embedding c') [e.IsRelIff]

noncomputable def stupidTrunc : HomologicalComplex C c' := ((K.restriction e).extend e)

instance : IsStrictlySupported (K.stupidTrunc e) e := by
  dsimp [stupidTrunc]
  infer_instance

noncomputable def stupidTruncXIso {i : Œπ} {i' : Œπ'} (hi' : e.f i = i') :
    (K.stupidTrunc e).X i' ‚âÖ K.X i' :=
  (K.restriction e).extendXIso e hi' ‚â™‚â´ eqToIso (by subst hi'; rfl)

lemma isZero_stupidTrunc_X (i' : Œπ') (hi' : ‚àÄ i, e.f i ‚â† i') :
    IsZero ((K.stupidTrunc e).X i') :=
  isZero_extend_X _ _ _ hi'

variable {K L M}

noncomputable def stupidTruncMap : K.stupidTrunc e ‚ü∂ L.stupidTrunc e :=
  extendMap (restrictionMap œÜ e) e

variable (K)

@[simp]
lemma stupidTruncMap_id_f (i' : Œπ') : (stupidTruncMap (ùüô K) e).f i' = ùüô _ := by
  simp [stupidTruncMap, stupidTrunc]

@[simp]
lemma stupidTruncMap_id : stupidTruncMap (ùüô K) e = ùüô _ := by aesop_cat

variable {K}

@[simp]
lemma stupidTruncMap_comp_f (i' : Œπ') :
    (stupidTruncMap (œÜ ‚â´ œÜ') e).f i' = (stupidTruncMap œÜ e).f i' ‚â´
      (stupidTruncMap œÜ' e).f i' := by
  simp [stupidTruncMap, stupidTrunc]

@[simp, reassoc]
lemma stupidTruncMap_comp :
    stupidTruncMap (œÜ ‚â´ œÜ') e = stupidTruncMap œÜ e ‚â´ stupidTruncMap œÜ' e := by aesop_cat


end

section

variable (K L : HomologicalComplex C c') (œÜ : K ‚ü∂ L)
  (e : c.Embedding c') [e.IsTruncGE]

open Classical in
noncomputable def ŒπStupidTruncf (i' : Œπ') : (K.stupidTrunc e).X i' ‚ü∂ K.X i' :=
  if h : ‚àÉ (i : Œπ), e.f i = i'
  then (K.stupidTruncXIso e h.choose_spec).hom
  else 0

lemma ŒπStupidTruncf_eq (i : Œπ) :
    K.ŒπStupidTruncf e (e.f i) = ((K.restriction e).extendXIso e rfl).hom := by
  dsimp [ŒπStupidTruncf]
  rw [dif_pos ‚ü®i, rfl‚ü©]
  simp [extendXIso, extend.XIso, stupidTruncXIso]

noncomputable def ŒπStupidTrunc : K.stupidTrunc e ‚ü∂ K where
  f := K.ŒπStupidTruncf e
  comm' i' j' hij' := by
    by_cases hi' : ‚àÉ i, e.f i = i'
    ¬∑ obtain ‚ü®i, rfl‚ü© := hi'
      obtain ‚ü®j, rfl‚ü© := e.mem_next hij'
      simp [ŒπStupidTruncf_eq, stupidTrunc, (K.restriction e).extend_d_eq e rfl rfl]
    ¬∑ apply (K.isZero_stupidTrunc_X e i' (fun i hi => hi' ‚ü®i, hi‚ü©)).eq_of_src

lemma isIso_ŒπStupidTrunc_f {i' : Œπ'} {i : Œπ} (h : e.f i = i') :
    IsIso ((K.ŒπStupidTrunc e).f i') := by
  subst h
  dsimp [ŒπStupidTrunc]
  rw [ŒπStupidTruncf_eq]
  infer_instance

instance (i : Œπ) : IsIso ((K.ŒπStupidTrunc e).f (e.f i)) :=
  K.isIso_ŒπStupidTrunc_f e rfl

variable {K L}

@[reassoc (attr := simp)]
lemma ŒπStupicTrunc_naturality :
    stupidTruncMap œÜ e ‚â´ L.ŒπStupidTrunc e = K.ŒπStupidTrunc e ‚â´ œÜ := by
  ext i'
  by_cases hi' : ‚àÉ i, e.f i = i'
  ¬∑ obtain ‚ü®i, rfl‚ü© := hi'
    simp [ŒπStupidTrunc, ŒπStupidTruncf_eq, stupidTruncMap, extendMap_f _ e rfl]
  ¬∑ apply (K.isZero_stupidTrunc_X e i' (fun i hi => hi' ‚ü®i, hi‚ü©)).eq_of_src

end

section

variable (K L : HomologicalComplex C c') (œÜ : K ‚ü∂ L)
  (e : c.Embedding c') [e.IsTruncLE]

open Classical in
noncomputable def œÄStupidTruncf (i' : Œπ') : K.X i' ‚ü∂ (K.stupidTrunc e).X i' :=
  if h : ‚àÉ (i : Œπ), e.f i = i'
  then (K.stupidTruncXIso e h.choose_spec).inv
  else 0

lemma œÄStupidTruncf_eq (i : Œπ) :
    K.œÄStupidTruncf e (e.f i) = ((K.restriction e).extendXIso e rfl).inv := by
  dsimp [œÄStupidTruncf]
  rw [dif_pos ‚ü®i, rfl‚ü©]
  simp [extendXIso, extend.XIso, stupidTruncXIso]

noncomputable def œÄStupidTrunc : K ‚ü∂ K.stupidTrunc e where
  f := K.œÄStupidTruncf e
  comm' i' j' hij' := by
    by_cases hj' : ‚àÉ j, e.f j = j'
    ¬∑ obtain ‚ü®j, rfl‚ü© := hj'
      obtain ‚ü®i, rfl‚ü© := e.mem_prev hij'
      simp [œÄStupidTruncf_eq, stupidTrunc, (K.restriction e).extend_d_eq e rfl rfl]
    ¬∑ apply (K.isZero_stupidTrunc_X e j' (fun j hj => hj' ‚ü®j, hj‚ü©)).eq_of_tgt

lemma isIso_œÄStupidTrunc_f {i' : Œπ'} {i : Œπ} (h : e.f i = i') :
    IsIso ((K.œÄStupidTrunc e).f i') := by
  subst h
  dsimp [œÄStupidTrunc]
  rw [œÄStupidTruncf_eq]
  infer_instance

instance (i : Œπ) : IsIso ((K.œÄStupidTrunc e).f (e.f i)) :=
  K.isIso_œÄStupidTrunc_f e rfl

variable {K L}

@[reassoc (attr := simp)]
lemma œÄStupicTrunc_naturality :
    K.œÄStupidTrunc e ‚â´ stupidTruncMap œÜ e = œÜ ‚â´ L.œÄStupidTrunc e := by
  ext i'
  by_cases hi' : ‚àÉ i, e.f i = i'
  ¬∑ obtain ‚ü®i, rfl‚ü© := hi'
    simp [œÄStupidTrunc, œÄStupidTruncf_eq, stupidTruncMap, extendMap_f _ e rfl]
  ¬∑ apply (L.isZero_stupidTrunc_X e i' (fun i hi => hi' ‚ü®i, hi‚ü©)).eq_of_tgt

end

end HomologicalComplex

namespace ComplexShape.Embedding

variable (e : Embedding c c') (C : Type*) [Category C] [HasZeroMorphisms C] [HasZeroObject C]

@[simps]
noncomputable def stupidTruncFunctor [e.IsRelIff] :
    HomologicalComplex C c' ‚•§ HomologicalComplex C c' where
  obj K := K.stupidTrunc e
  map œÜ := HomologicalComplex.stupidTruncMap œÜ e

@[simps]
noncomputable def ŒπStupidTruncNatTrans [e.IsTruncGE] :
    e.stupidTruncFunctor C ‚ü∂ ùü≠ _ where
  app K := K.ŒπStupidTrunc e

@[simps]
noncomputable def œÄStupidTruncNatTrans [e.IsTruncLE] :
    ùü≠ _ ‚ü∂ e.stupidTruncFunctor C  where
  app K := K.œÄStupidTrunc e

end ComplexShape.Embedding
