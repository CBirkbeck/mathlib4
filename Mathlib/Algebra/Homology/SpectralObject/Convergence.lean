import Mathlib.Algebra.Homology.SpectralObject.PageInfinity
import Mathlib.Algebra.Homology.SpectralObject.Images

namespace CategoryTheory

open Category ComposableArrows Limits

lemma Option.by_cases {Œ± : Type*} (x : Option Œ±) :
    x = none ‚à® ‚àÉ (a : Œ±), x = some a := by
  cases x <;> tauto

namespace Abelian

variable {C Œπ Œ∫ : Type*} [Category C] [Abelian C] [Preorder Œπ] [OrderBot Œπ] [OrderTop Œπ]
  (X : SpectralObject C Œπ)
  {c : ‚Ñ§ ‚Üí ComplexShape Œ∫} {r‚ÇÄ : ‚Ñ§}
  [‚àÄ r, DecidableRel (c r).Rel]

namespace SpectralObject

noncomputable def abutment (n : ‚Ñ§) : C :=
    (X.H n).obj (mk‚ÇÅ (homOfLE' ‚ä• ‚ä§ bot_le))

noncomputable def abutmentFiltration (n : ‚Ñ§) (j : Œπ) : C :=
  X.image n (homOfLE' ‚ä• j bot_le) (homOfLE' j ‚ä§ le_top) _ rfl

noncomputable def abutmentFiltrationŒπ (n : ‚Ñ§) (j : Œπ) :
    X.abutmentFiltration n j ‚ü∂ X.abutment n :=
  X.imageŒπ _ _ _ _ _

noncomputable def œÄAbutmentFiltration (n : ‚Ñ§) (j : Œπ) :
    (X.H n).obj (mk‚ÇÅ (homOfLE' ‚ä• j bot_le)) ‚ü∂ X.abutmentFiltration n j :=
  X.imageœÄ _ _ _ _ _

instance (n : ‚Ñ§) (j : Œπ) : Epi (X.œÄAbutmentFiltration n j) := by
  dsimp [œÄAbutmentFiltration]
  infer_instance

noncomputable def abutmentœÄ (n : ‚Ñ§) (j : Œπ) :
    X.abutment n ‚ü∂ (X.H n).obj (mk‚ÇÅ (homOfLE' j ‚ä§ le_top)) :=
  (X.H n).map (homMk‚ÇÅ (homOfLE bot_le) (ùüô _) rfl)

noncomputable def abutmentFiltrationToPageInfinity (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
    (i j : Œπ) (hij : i ‚â§ j) :
    X.abutmentFiltration n‚ÇÅ j ‚ü∂ X.pageInfinity n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij :=
  X.imageToE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ (homOfLE' ‚ä• i bot_le) (homOfLE hij)
    (homOfLE' j ‚ä§ le_top) _ rfl _ rfl

instance (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ) (i j : Œπ) (hij : i ‚â§ j) :
    Epi (X.abutmentFiltrationToPageInfinity n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij) := by
  dsimp [abutmentFiltrationToPageInfinity]
  infer_instance

@[reassoc (attr := simp)]
lemma abutmentFiltrationŒπ_œÄ (n : ‚Ñ§) (j : Œπ) :
    X.abutmentFiltrationŒπ n j ‚â´ X.abutmentœÄ n j = 0 :=
  kernel.condition _

@[reassoc (attr := simp)]
lemma abutmentœÄ_map (n : ‚Ñ§) (j‚ÇÅ j‚ÇÇ : Œπ)
    (œÜ : (mk‚ÇÅ (homOfLE' j‚ÇÅ ‚ä§ le_top)) ‚ü∂ (mk‚ÇÅ (homOfLE' j‚ÇÇ ‚ä§ le_top))) :
    X.abutmentœÄ n j‚ÇÅ ‚â´ (X.H n).map œÜ = X.abutmentœÄ n j‚ÇÇ :=
  ((X.H n).map_comp _ _).symm

instance (n : ‚Ñ§) (j : Œπ) : Mono (X.abutmentFiltrationŒπ n j) := by
  dsimp [abutmentFiltrationŒπ]
  infer_instance

noncomputable def abutmentFiltrationMap (n : ‚Ñ§) (j‚ÇÅ j‚ÇÇ : Œπ) (h : j‚ÇÅ ‚â§ j‚ÇÇ) :
    X.abutmentFiltration n j‚ÇÅ ‚ü∂ X.abutmentFiltration n j‚ÇÇ :=
  X.imageMap _ _ _ _ _ _ _ _ _ (homMk‚ÇÇ (ùüô _) (homOfLE h) (ùüô _) rfl rfl)

@[reassoc (attr := simp)]
lemma abutmentFiltrationMap_Œπ (n : ‚Ñ§) (j‚ÇÅ j‚ÇÇ : Œπ) (h : j‚ÇÅ ‚â§ j‚ÇÇ) :
    X.abutmentFiltrationMap n j‚ÇÅ j‚ÇÇ h ‚â´ X.abutmentFiltrationŒπ n j‚ÇÇ =
      X.abutmentFiltrationŒπ n j‚ÇÅ := by
  simpa using X.imageMap_Œπ n (homOfLE' ‚ä• j‚ÇÅ bot_le) (homOfLE' j‚ÇÅ ‚ä§ le_top) _ rfl
    (homOfLE' ‚ä• j‚ÇÇ bot_le) (homOfLE' j‚ÇÇ ‚ä§ le_top) _ rfl
    (homMk‚ÇÇ (ùüô _) (homOfLE h) (ùüô _) rfl rfl) (ùüô _) (by aesop_cat)

@[simps]
noncomputable def abutmentFiltrationFunctor (n : ‚Ñ§) :
    Œπ ‚•§ MonoOver (X.abutment n) where
  obj j := MonoOver.mk' (X.abutmentFiltrationŒπ n j)
  map {j‚ÇÅ j‚ÇÇ} h := Over.homMk (X.abutmentFiltrationMap n j‚ÇÅ j‚ÇÇ (leOfHom h)) (by simp)

instance (n : ‚Ñ§) (j‚ÇÅ j‚ÇÇ : Œπ) (h : j‚ÇÅ ‚â§ j‚ÇÇ) :
    Mono (X.abutmentFiltrationMap n j‚ÇÅ j‚ÇÇ h) :=
  mono_of_mono_fac (X.abutmentFiltrationMap_Œπ n j‚ÇÅ j‚ÇÇ h)

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ) (i j : Œπ) (hij : i ‚â§ j)

@[reassoc (attr := simp)]
lemma abutmentFiltrationMap_abutmentFiltrationToPageInfinity :
    X.abutmentFiltrationMap n‚ÇÅ i j hij ‚â´
      X.abutmentFiltrationToPageInfinity n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij = 0 := by
  apply X.imageMap_threeŒ¥‚ÇÇToŒ¥‚ÇÅ_imageToE
  rfl

@[simps!]
noncomputable
def abutmentFiltrationShortComplex :
    ShortComplex C :=
  ShortComplex.mk _ _
    (X.abutmentFiltrationMap_abutmentFiltrationToPageInfinity n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij)

instance : Mono (X.abutmentFiltrationShortComplex n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij).f := by
  dsimp
  infer_instance

instance : Epi (X.abutmentFiltrationShortComplex n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij).g := by
  dsimp
  infer_instance

lemma abutmentFiltrationShortComplex_shortExact :
    (X.abutmentFiltrationShortComplex n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij).ShortExact := by
  apply X.shortComplexImage_shortExact
  rfl

end

variable (data : SpectralSequenceMkData Œπ c r‚ÇÄ)
  {œÉ : Type*} {Œ± : œÉ ‚Üí Type*} [‚àÄ n, LinearOrder (Œ± n)]
  (s : SpectralSequence.ConvergenceStripes Œ∫ Œ±)

namespace SpectralSequenceMkData

structure CompatibleWithConvergenceStripes where
  deg : œÉ ‚Üí ‚Ñ§
  deg_stripe (pq : Œ∫) : deg (s.stripe pq) = data.deg pq := by aesop
  i‚ÇÇ_monotone (n : œÉ) (i j : Œ± n) (hij : i ‚â§ j) :
    data.i‚ÇÇ (s.position n i) ‚â§ data.i‚ÇÇ (s.position n j)
  hi‚ÇÅ_bot (n : œÉ) (j : Œ± n) (hj : s.pred n j = ‚ä•) :
    data.i‚ÇÅ (s.position n j) = ‚ä•
  hi‚ÇÅ_some (n : œÉ) (j : Œ± n) (i : Œ± n) (hi : s.pred n j = WithBot.some i) :
    data.i‚ÇÅ (s.position n j) = data.i‚ÇÇ (s.position n i)

namespace CompatibleWithConvergenceStripes

variable {data s}
variable (hdata : data.CompatibleWithConvergenceStripes s)

@[simp]
lemma deg_position (n : œÉ) (i : Œ± n) :
    data.deg (s.position n i) = hdata.deg n := by
  simp only [‚Üê s.stripe_position n i, hdata.deg_stripe]

@[nolint unusedArguments]
def mapWithBot (_ : data.CompatibleWithConvergenceStripes s) (n : œÉ) : WithBot (Œ± n) ‚Üí Œπ
  | none => ‚ä•
  | some i => data.i‚ÇÇ (s.position n i)

@[simp]
lemma mapWithBot_none (n : œÉ):
    hdata.mapWithBot n none = ‚ä• := rfl

@[simp]
lemma mapWithBot_bot (n : œÉ):
    hdata.mapWithBot n ‚ä• = ‚ä• := rfl

@[simp]
lemma mapWithBot_some (n : œÉ) (i : Œ± n):
    hdata.mapWithBot n (some i) = data.i‚ÇÇ (s.position n i) := rfl

@[simp]
lemma mapWithBot_some' (n : œÉ) (i : Œ± n):
    hdata.mapWithBot n (WithBot.some i) = data.i‚ÇÇ (s.position n i) := rfl

lemma mapWithBot_monotone (n : œÉ) : Monotone (hdata.mapWithBot n) := by
  rintro i j hij
  obtain _ | i := i
  ¬∑ apply bot_le
  ¬∑ obtain _ | j := j
    ¬∑ change _ ‚â§ ‚ä• at hij
      simp at hij
    ¬∑ simp only [WithBot.some_le_some] at hij
      dsimp [mapWithBot]
      exact hdata.i‚ÇÇ_monotone n i j hij

abbrev mapWithBotFunctor (n : œÉ) : WithBot (Œ± n) ‚•§ Œπ :=
  Monotone.functor (hdata.mapWithBot_monotone n)

lemma mapWithBot_pred (n : œÉ) (j : Œ± n) :
    hdata.mapWithBot n (s.pred n j) = data.i‚ÇÅ (s.position n j) := by
  obtain h | ‚ü®i, h‚ü© := Option.by_cases (s.pred n j)
  ¬∑ rw [h, mapWithBot_none, hdata.hi‚ÇÅ_bot n j h]
  ¬∑ rw [h, mapWithBot_some, hdata.hi‚ÇÅ_some n j _ h]

end CompatibleWithConvergenceStripes

end SpectralSequenceMkData

@[simps]
def mkDataE‚ÇÇCohomologicalCompatibility :
    mkDataE‚ÇÇCohomological.CompatibleWithConvergenceStripes
      SpectralSequence.cohomologicalStripes where
  deg n := n
  i‚ÇÇ_monotone n i j hij := by simpa using hij
  hi‚ÇÅ_bot n j hj := by simp at hj
  hi‚ÇÅ_some n j i hi := by
    obtain rfl : i = j - 1 := by
      rw [‚Üê WithBot.coe_eq_coe]
      exact hi.symm
    simp

/-@[simps]
def mkDataE‚ÇÇCohomologicalNatCompatibility :
    mkDataE‚ÇÇCohomologicalNat.CompatibleWithConvergenceStripes
      CohomologicalSpectralSequenceNat.stripes where
  deg n := n
  i‚ÇÇ_monotone n i j hij := by simpa using hij
  hi‚ÇÅ_bot := by
    rintro n ‚ü®j, hj‚ü© h
    dsimp at h ‚ä¢
    sorry
  hi‚ÇÅ_some := by
    rintro n ‚ü®_|j, hj‚ü© ‚ü®i, hi‚ü© h
    ¬∑ sorry -- wrong => the condition `CompatibleWithConvergenceStripes` may have to be weakened?
    ¬∑ obtain rfl : j = i := by simpa using h
      rfl-/

variable {data s}
variable (hdata : data.CompatibleWithConvergenceStripes s)
  [X.HasSpectralSequence data]

class ConvergesInDegree (n : œÉ) : Prop where
  stationnaryAt (pq : Œ∫) (hpq : s.stripe pq = n) : X.StationaryAt data pq := by infer_instance
  isZero‚ÇÅ : ‚àÉ (i : Œ± n), ‚àÄ (j : Œ± n) (_ : s.pred n i = WithBot.some j),
    IsZero ((X.H (hdata.deg n)).obj (mk‚ÇÅ (homOfLE' ‚ä• (data.i‚ÇÇ (s.position n j)) bot_le)))
  isZero‚ÇÇ : ‚àÉ (i : Œ± n),
    IsZero ((X.H (hdata.deg n)).obj (mk‚ÇÅ (homOfLE' (data.i‚ÇÇ (s.position n i)) ‚ä§ le_top)))

variable (n : œÉ) [hX : X.ConvergesInDegree hdata n]

lemma hasPageInfinityAt_of_convergesInDegree (pq : Œ∫)
    (hpq : s.stripe pq = n) : X.StationaryAt data pq :=
  hX.stationnaryAt pq hpq

lemma isZero‚ÇÅ_of_convergesInDegree :
    ‚àÉ (i : Œ± n),
      IsZero ((X.H (hdata.deg n)).obj (mk‚ÇÅ (homOfLE' ‚ä• (hdata.mapWithBot n (s.pred n i)) bot_le))) := by
  obtain ‚ü®i, hi‚ü© := hX.isZero‚ÇÅ
  refine' ‚ü®i, _‚ü©
  obtain h | ‚ü®j, h‚ü© := Option.by_cases (s.pred n i)
  ¬∑ have : IsZero ((X.H (hdata.deg n)).obj (mk‚ÇÅ (homOfLE' ‚ä• ‚ä• bot_le))) := by
      apply X.isZero_H_obj_of_isIso
      change IsIso (ùüô _)
      infer_instance
    convert this
    rw [h]
    rfl
  ¬∑ convert hi j h
    rw [h]
    rfl

lemma isZero‚ÇÇ_of_convergesInDegree :
    ‚àÉ (i : Œ± n),
      IsZero ((X.H (hdata.deg n)).obj (mk‚ÇÅ (homOfLE' (data.i‚ÇÇ (s.position n i)) ‚ä§ le_top))) :=
  hX.isZero‚ÇÇ

namespace ConvergesAt

section

variable
  (n' : ‚Ñ§) (hn' : n' = hdata.deg n)
  (i : Œ± n) (i‚ÇÇ : Œπ) (hi‚ÇÇ : i‚ÇÇ = data.i‚ÇÇ (s.position n i)) (pq : Œ∫)
  (hpq : s.position n i = pq)

noncomputable def œÄ : X.abutmentFiltration n' i‚ÇÇ ‚ü∂ (X.spectralSequence data).pageInfinity pq :=
  X.abutmentFiltrationToPageInfinity (n' - 1) n' (n' + 1) (by simp) (by simp) (data.i‚ÇÅ (s.position n i)) i‚ÇÇ
    (by simpa only [hi‚ÇÇ] using data.le‚ÇÅ‚ÇÇ (s.position n i)) ‚â´ Iso.inv (by
        have := X.hasPageInfinityAt_of_convergesInDegree hdata n pq (by
          rw [‚Üê hpq, s.stripe_position])
        apply X.spectralSequencePageInfinityIso
        ¬∑ rw [hn', ‚Üê hpq, hdata.deg_position n i]
        ¬∑ rw [hpq]
        ¬∑ rw [‚Üê hpq, hi‚ÇÇ])

instance : Epi (œÄ X hdata n n' hn' i i‚ÇÇ hi‚ÇÇ pq hpq) := epi_comp _ _

end

section

variable (n' : ‚Ñ§) (hn' : n' = hdata.deg n)
  (i : WithBot (Œ± n)) (j : Œ± n) (i‚ÇÇ j‚ÇÇ : Œπ) (hi‚ÇÇ : i‚ÇÇ = hdata.mapWithBot n i) (hj‚ÇÇ : j‚ÇÇ = data.i‚ÇÇ (s.position n j)) (hij : s.pred n j = i)
  (pq : Œ∫) (hpq : s.position n j = pq)

noncomputable def composableArrows : ComposableArrows C 2 :=
  mk‚ÇÇ (X.abutmentFiltrationMap n' i‚ÇÇ j‚ÇÇ (by
    rw [hi‚ÇÇ, hj‚ÇÇ]
    obtain _|i := i
    ¬∑ apply bot_le
    ¬∑ apply hdata.i‚ÇÇ_monotone
      rw [‚Üê WithBot.coe_le_coe]
      simpa only [hij] using s.pred_le n j)) (œÄ X hdata n n' hn' j j‚ÇÇ hj‚ÇÇ pq hpq)

noncomputable def iso :
    (composableArrows X hdata n n' hn' i j i‚ÇÇ j‚ÇÇ hi‚ÇÇ hj‚ÇÇ hij pq hpq) ‚âÖ
      (X.abutmentFiltrationShortComplex (n' - 1) n' (n' + 1) (by simp) (by simp) i‚ÇÇ j‚ÇÇ (by
      rw [hi‚ÇÇ, hj‚ÇÇ]
      obtain _|i := i
      ¬∑ apply bot_le
      ¬∑ apply hdata.i‚ÇÇ_monotone
        rw [‚Üê WithBot.coe_le_coe]
        simpa only [hij] using s.pred_le n j)).toComposableArrows :=
  isoMk‚ÇÇ (Iso.refl _) (Iso.refl _) (by
    have := X.hasPageInfinityAt_of_convergesInDegree hdata n pq (by
      rw [‚Üê hpq, s.stripe_position])
    dsimp [composableArrows]
    apply X.spectralSequencePageInfinityIso
    ¬∑ rw [hn', ‚Üê hpq, hdata.deg_position n j]
    ¬∑ rw [hi‚ÇÇ, ‚Üê hij, ‚Üê hpq, hdata.mapWithBot_pred n j]
    ¬∑ rw [hj‚ÇÇ, ‚Üê hpq]) (by simp [composableArrows]) (by
        dsimp [composableArrows, œÄ]
        obtain rfl : i‚ÇÇ = data.i‚ÇÅ (s.position n j) := by
          rw [hi‚ÇÇ, ‚Üê hij, hdata.mapWithBot_pred n j]
        simp)

lemma composableArrows_exact :
    (composableArrows X hdata n n' hn' i j i‚ÇÇ j‚ÇÇ hi‚ÇÇ hj‚ÇÇ hij pq hpq).Exact :=
  ComposableArrows.exact_of_iso (iso X hdata n n' hn' i j i‚ÇÇ j‚ÇÇ hi‚ÇÇ hj‚ÇÇ hij pq hpq).symm
    ((X.abutmentFiltrationShortComplex_shortExact _ _ _ _ _ _ _ _).exact.exact_toComposableArrows)

end

end ConvergesAt

noncomputable def convergesAt :
    (X.spectralSequence data).StronglyConvergesToInDegree s n (X.abutment (hdata.deg n)) where
  hasPageInfinityAt pq hpq := by
    have := X.hasPageInfinityAt_of_convergesInDegree hdata n pq hpq
    infer_instance
  filtration' := hdata.mapWithBotFunctor n ‚ãô X.abutmentFiltrationFunctor (hdata.deg n)
  exists_isZero' := by
    obtain ‚ü®i, hi‚ü© := X.isZero‚ÇÅ_of_convergesInDegree hdata n
    exact ‚ü®i, X.isZero_image _ _ _ _ _ hi‚ü©
  exists_isIso' := by
    obtain ‚ü®i, hi‚ü© := X.isZero‚ÇÇ_of_convergesInDegree hdata n
    exact ‚ü®i, X.isIso_imageŒπ _ _ _ _ _ hi‚ü©
  œÄ' i pq hpq := ConvergesAt.œÄ X hdata n _ rfl i _ rfl pq hpq
  epi_œÄ' i pq hpq := by infer_instance
  comp_œÄ' i j hij pq hpq := (ConvergesAt.composableArrows_exact X hdata n _ rfl i j _ _ rfl rfl hij pq hpq).toIsComplex.zero 0
  exact_œÄ' i j hij pq hpq := (ConvergesAt.composableArrows_exact X hdata n _ rfl i j _ _ rfl rfl hij pq hpq).exact 0

end SpectralObject

end Abelian

end CategoryTheory
