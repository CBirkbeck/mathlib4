import Mathlib.Algebra.Homology.SpectralObject.PageInfinity
import Mathlib.Algebra.Homology.SpectralObject.Images

namespace CategoryTheory

open Category ComposableArrows Limits

namespace Abelian

variable {C Œπ Œ∫ : Type*} [Category C] [Abelian C] [Preorder Œπ] [OrderBot Œπ] [OrderTop Œπ]
  (X : SpectralObject C Œπ)
  {c : ‚Ñ§ ‚Üí ComplexShape Œ∫} {r‚ÇÄ : ‚Ñ§}
  [‚àÄ r, DecidableRel (c r).Rel]

namespace SpectralObject

noncomputable def abutment (n : ‚Ñ§) : C :=
    (X.H n).obj (mk‚ÇÅ (homOfLE' ‚ä• ‚ä§ bot_le))

noncomputable def abutmentFiltration (n : ‚Ñ§) (j : Œπ) : C :=
  X.image n (homOfLE' ‚ä• j bot_le) (homOfLE' j ‚ä§ le_top) _ rfl

noncomputable def abutmentFiltrationŒπ (n : ‚Ñ§) (j : Œπ) :
    X.abutmentFiltration n j ‚ü∂ X.abutment n :=
  X.imageŒπ _ _ _ _ _

noncomputable def œÄAbutmentFiltration (n : ‚Ñ§) (j : Œπ) :
    (X.H n).obj (mk‚ÇÅ (homOfLE' ‚ä• j bot_le)) ‚ü∂ X.abutmentFiltration n j :=
  X.imageœÄ _ _ _ _ _

instance (n : ‚Ñ§) (j : Œπ) : Epi (X.œÄAbutmentFiltration n j) := by
  dsimp [œÄAbutmentFiltration]
  infer_instance

noncomputable def abutmentœÄ (n : ‚Ñ§) (j : Œπ) :
    X.abutment n ‚ü∂ (X.H n).obj (mk‚ÇÅ (homOfLE' j ‚ä§ le_top)) :=
  (X.H n).map (homMk‚ÇÅ (homOfLE bot_le) (ùüô _) rfl)

noncomputable def abutmentFiltrationToPageInfinity (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
    (i j : Œπ) (hij : i ‚â§ j) :
    X.abutmentFiltration n‚ÇÅ j ‚ü∂ X.pageInfinity n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij :=
  X.imageToE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ (homOfLE' ‚ä• i bot_le) (homOfLE hij)
    (homOfLE' j ‚ä§ le_top) _ rfl _ rfl

instance (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ) (i j : Œπ) (hij : i ‚â§ j) :
    Epi (X.abutmentFiltrationToPageInfinity n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij) := by
  dsimp [abutmentFiltrationToPageInfinity]
  infer_instance

@[reassoc (attr := simp)]
lemma abutmentFiltrationŒπ_œÄ (n : ‚Ñ§) (j : Œπ) :
    X.abutmentFiltrationŒπ n j ‚â´ X.abutmentœÄ n j = 0 :=
  kernel.condition _

@[reassoc (attr := simp)]
lemma abutmentœÄ_map (n : ‚Ñ§) (j‚ÇÅ j‚ÇÇ : Œπ)
    (œÜ : (mk‚ÇÅ (homOfLE' j‚ÇÅ ‚ä§ le_top)) ‚ü∂ (mk‚ÇÅ (homOfLE' j‚ÇÇ ‚ä§ le_top))) :
    X.abutmentœÄ n j‚ÇÅ ‚â´ (X.H n).map œÜ = X.abutmentœÄ n j‚ÇÇ :=
  ((X.H n).map_comp _ _).symm

instance (n : ‚Ñ§) (j : Œπ) : Mono (X.abutmentFiltrationŒπ n j) := by
  dsimp [abutmentFiltrationŒπ]
  infer_instance

noncomputable def abutmentFiltrationMap (n : ‚Ñ§) (j‚ÇÅ j‚ÇÇ : Œπ) (h : j‚ÇÅ ‚â§ j‚ÇÇ) :
    X.abutmentFiltration n j‚ÇÅ ‚ü∂ X.abutmentFiltration n j‚ÇÇ :=
  X.imageMap _ _ _ _ _ _ _ _ _ (homMk‚ÇÇ (ùüô _) (homOfLE h) (ùüô _) rfl rfl)

@[reassoc (attr := simp)]
lemma abutmentFiltrationMap_Œπ (n : ‚Ñ§) (j‚ÇÅ j‚ÇÇ : Œπ) (h : j‚ÇÅ ‚â§ j‚ÇÇ) :
    X.abutmentFiltrationMap n j‚ÇÅ j‚ÇÇ h ‚â´ X.abutmentFiltrationŒπ n j‚ÇÇ =
      X.abutmentFiltrationŒπ n j‚ÇÅ := by
  simpa using X.imageMap_Œπ n (homOfLE' ‚ä• j‚ÇÅ bot_le) (homOfLE' j‚ÇÅ ‚ä§ le_top) _ rfl
    (homOfLE' ‚ä• j‚ÇÇ bot_le) (homOfLE' j‚ÇÇ ‚ä§ le_top) _ rfl
    (homMk‚ÇÇ (ùüô _) (homOfLE h) (ùüô _) rfl rfl) (ùüô _) (by aesop_cat)

@[simps]
noncomputable def abutmentFiltrationFunctor (n : ‚Ñ§) :
    Œπ ‚•§ MonoOver (X.abutment n) where
  obj j := MonoOver.mk' (X.abutmentFiltrationŒπ n j)
  map {j‚ÇÅ j‚ÇÇ} h := Over.homMk (X.abutmentFiltrationMap n j‚ÇÅ j‚ÇÇ (leOfHom h)) (by simp)

instance (n : ‚Ñ§) (j‚ÇÅ j‚ÇÇ : Œπ) (h : j‚ÇÅ ‚â§ j‚ÇÇ) :
    Mono (X.abutmentFiltrationMap n j‚ÇÅ j‚ÇÇ h) :=
  mono_of_mono_fac (X.abutmentFiltrationMap_Œπ n j‚ÇÅ j‚ÇÇ h)

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ) (i j : Œπ) (hij : i ‚â§ j)

@[reassoc (attr := simp)]
lemma abutmentFiltrationMap_abutmentFiltrationToPageInfinity :
    X.abutmentFiltrationMap n‚ÇÅ i j hij ‚â´
      X.abutmentFiltrationToPageInfinity n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij = 0 := by
  apply X.imageMap_threeŒ¥‚ÇÇToŒ¥‚ÇÅ_imageToE
  rfl

@[simps!]
noncomputable
def abutmentFiltrationShortComplex :
    ShortComplex C :=
  ShortComplex.mk _ _
    (X.abutmentFiltrationMap_abutmentFiltrationToPageInfinity n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij)

instance : Mono (X.abutmentFiltrationShortComplex n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij).f := by
  dsimp
  infer_instance

instance : Epi (X.abutmentFiltrationShortComplex n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij).g := by
  dsimp
  infer_instance

lemma abutmentFiltrationShortComplex_shortExact :
    (X.abutmentFiltrationShortComplex n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ i j hij).ShortExact := by
  apply X.shortComplexImage_shortExact
  rfl

end

variable (data : SpectralSequenceMkData Œπ c r‚ÇÄ)
  {œÉ : Type*} {Œ± : œÉ ‚Üí Type*} [‚àÄ n, LinearOrder (Œ± n)]
  (s : SpectralSequence.ConvergenceStripes Œ∫ Œ±)

namespace SpectralSequenceMkData

structure CompatibleWithConvergenceStripes where
  deg : œÉ ‚Üí ‚Ñ§
  deg_stripe (pq : Œ∫) : deg (s.stripe pq) = data.deg pq := by aesop
  i‚ÇÇ_monotone (n : œÉ) (i j : Œ± n) (hij : i ‚â§ j) :
    data.i‚ÇÇ (s.position n i) ‚â§ data.i‚ÇÇ (s.position n j)

namespace CompatibleWithConvergenceStripes

variable {data s}
variable (hdata : data.CompatibleWithConvergenceStripes s)

@[simp]
lemma deg_position (n : œÉ) (i : Œ± n) :
    data.deg (s.position n i) = hdata.deg n := by
  simp only [‚Üê s.stripe_position n i, hdata.deg_stripe]

@[nolint unusedArguments]
def mapWithBot (_ : data.CompatibleWithConvergenceStripes s) (n : œÉ) : WithBot (Œ± n) ‚Üí Œπ
  | none => ‚ä•
  | some i => data.i‚ÇÇ (s.position n i) -- or i‚ÇÅ ??

lemma mapWithBot_monotone (n : œÉ) : Monotone (hdata.mapWithBot n) := by
  rintro i j hij
  obtain _ | i := i
  ¬∑ apply bot_le
  ¬∑ obtain _ | j := j
    ¬∑ change _ ‚â§ ‚ä• at hij
      simp at hij
    ¬∑ simp only [WithBot.some_le_some] at hij
      dsimp [mapWithBot]
      exact hdata.i‚ÇÇ_monotone n i j hij

abbrev mapWithBotFunctor (n : œÉ) : WithBot (Œ± n) ‚•§ Œπ :=
  Monotone.functor (hdata.mapWithBot_monotone n)

end CompatibleWithConvergenceStripes

end SpectralSequenceMkData

@[simps]
def mkDataE‚ÇÇCohomologicalCompatibility :
    mkDataE‚ÇÇCohomological.CompatibleWithConvergenceStripes
      SpectralSequence.cohomologicalStripes where
  deg n := n
  i‚ÇÇ_monotone n i j hij := by simpa using hij

@[simps]
def mkDataE‚ÇÇCohomologicalNatCompatibility :
    mkDataE‚ÇÇCohomologicalNat.CompatibleWithConvergenceStripes
      CohomologicalSpectralSequenceNat.stripes where
  deg n := n
  i‚ÇÇ_monotone n i j hij := by simpa using hij

variable {data s}
variable (hdata : data.CompatibleWithConvergenceStripes s)
  [X.HasSpectralSequence data]

class ConvergesInDegree (n : œÉ) : Prop where
  stationnaryAt (pq : Œ∫) (hpq : s.stripe pq = n) : X.StationaryAt data pq := by infer_instance
  test : hdata = hdata

variable (n : œÉ) [hX : X.ConvergesInDegree hdata n]

lemma hasPageInfinityAt_of_convergesInDegree (pq : Œ∫)
    (hpq : s.stripe pq = n) : X.StationaryAt data pq :=
  hX.stationnaryAt pq hpq

namespace ConvergesAt

variable (data) (s)

noncomputable def œÄ (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
    (i : Œ± n) :
    X.abutmentFiltration n‚ÇÅ (data.i‚ÇÇ (s.position n i)) ‚ü∂
    X.pageInfinity n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ _ _ (data.le‚ÇÅ‚ÇÇ (s.position n i)) :=
  X.abutmentFiltrationToPageInfinity n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ _ _
    (data.le‚ÇÅ‚ÇÇ (s.position n i))

end ConvergesAt

/-noncomputable def convergesAt :
    (X.spectralSequence data).StronglyConvergesToInDegree s n (X.abutment (hdata.deg n)) where
  hasPageInfinityAt pq hpq := by
    have := X.hasPageInfinityAt_of_convergesInDegree hdata n pq hpq
    infer_instance
  filtration' := hdata.mapWithBotFunctor n ‚ãô X.abutmentFiltrationFunctor (hdata.deg n)
  exists_isZero' := sorry
  exists_isIso' := sorry
  œÄ' i pq hpq := X.abutmentFiltrationToPageInfinity (hdata.deg n - 1)
    (hdata.deg n) (hdata.deg n + 1) (by simp) (by simp) _ _
      (data.le‚ÇÅ‚ÇÇ (s.position n i)) ‚â´ Iso.inv (by
        have := X.hasPageInfinityAt_of_convergesInDegree hdata n pq (by
          rw [‚Üê hpq, s.stripe_position])
        apply X.spectralSequencePageInfinityIso
        all_goals simp only [‚Üê hpq, hdata.deg_position n i])
  epi_œÄ' i pq hpq := epi_comp _ _
  comp_œÄ' i j hij pq hpq := by
    dsimp [MonoOver.forget]
    have pf := data.le‚ÇÅ‚ÇÇ (s.position n j)
    have pif := X.abutmentFiltrationMap_abutmentFiltrationToPageInfinity
      (hdata.deg n - 1) (hdata.deg n) (hdata.deg n + 1) (by simp) (by simp) _ _ (data.le‚ÇÅ‚ÇÇ (s.position n j))
    dsimp [SpectralSequenceMkData.CompatibleWithConvergenceStripes.mapWithBot]
    sorry
  exact_œÄ' := sorry-/

end SpectralObject

end Abelian

end CategoryTheory
