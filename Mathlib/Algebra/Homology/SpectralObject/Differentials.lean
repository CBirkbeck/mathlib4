import Mathlib.Algebra.Homology.SpectralObject.Basic
import Mathlib.CategoryTheory.Abelian.Refinements

namespace CategoryTheory

variable {C Œπ : Type*} [Category C] [Category Œπ] [Abelian C]

open Category ComposableArrows Limits Preadditive

namespace Abelian

namespace SpectralObject

variable (X : SpectralObject C Œπ)

section

variable (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ)
  {i j k l : Œπ} (f‚ÇÅ : i ‚ü∂ j) (f‚ÇÇ : j ‚ü∂ k) (f‚ÇÉ : k ‚ü∂ l)
  (f‚ÇÅ‚ÇÇ : i ‚ü∂ k) (h‚ÇÅ‚ÇÇ : f‚ÇÅ ‚â´ f‚ÇÇ = f‚ÇÅ‚ÇÇ) (f‚ÇÇ‚ÇÉ : j ‚ü∂ l) (h‚ÇÇ‚ÇÉ : f‚ÇÇ ‚â´ f‚ÇÉ = f‚ÇÇ‚ÇÉ)

noncomputable def Œ® : X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ ‚ü∂ X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ :=
  X.descCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ _ rfl
    (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ (f‚ÇÇ ‚â´ f‚ÇÉ) ‚â´ X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ) (by
      rw [X.Œ¥_naturality_assoc n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÅ (f‚ÇÇ ‚â´ f‚ÇÉ) (ùüô _) (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÇ f‚ÇÉ _ rfl) rfl,
        Functor.map_id, id_comp, Œ¥_pOpcycles])

@[reassoc (attr := simp)]
lemma toCycles_Œ® :
    X.toCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ ‚â´ X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ =
      X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ‚ÇÉ ‚â´ X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ := by
  subst h‚ÇÇ‚ÇÉ
  simp only [Œ®, toCycles_descCycles]

@[reassoc (attr := simp)]
lemma Œ®_fromOpcycles :
    X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ X.fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ =
      X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ := by
  rw [‚Üê cancel_epi (X.toCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ _ rfl),
    toCycles_Œ®_assoc, p_fromOpcycles, toCycles_i_assoc]
  exact (X.Œ¥_naturality _ _ _ _ _ _ _ _ _ rfl).symm

lemma cyclesMap_Œ® :
    X.cyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ _ _ _ _ (threeŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ) ‚â´
      X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ = 0 := by
  rw [‚Üê cancel_epi (X.toCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ (f‚ÇÅ ‚â´ f‚ÇÇ ‚â´ f‚ÇÉ)
    (by rw [reassoc_of% h‚ÇÅ‚ÇÇ])), comp_zero,
    X.toCycles_cyclesMap_assoc n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ f‚ÇÇ f‚ÇÉ (f‚ÇÅ ‚â´ f‚ÇÇ ‚â´ f‚ÇÉ)
    (by rw [reassoc_of% h‚ÇÅ‚ÇÇ]) f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ (threeŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ)
    (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ‚ÇÉ (f‚ÇÅ ‚â´ f‚ÇÇ ‚â´ f‚ÇÉ) (by rw [h‚ÇÇ‚ÇÉ])) rfl rfl,
    toCycles_Œ®, zero‚ÇÉ_assoc, zero_comp]

lemma Œ®_opcyclesMap :
    X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´
      X.opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ _ _ _ _ (threeŒ¥‚ÇÉToŒ¥‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ) = 0 := by
  rw [‚Üê cancel_mono (X.fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ‚ÇÉ (f‚ÇÅ ‚â´ f‚ÇÇ ‚â´ f‚ÇÉ) (by rw [h‚ÇÇ‚ÇÉ])),
    zero_comp, assoc, X.opcyclesMap_fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÅ f‚ÇÇ‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ
    (f‚ÇÅ ‚â´ f‚ÇÇ ‚â´ f‚ÇÉ) (by rw [h‚ÇÇ‚ÇÉ]) (threeŒ¥‚ÇÉToŒ¥‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ)
    (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ (f‚ÇÅ ‚â´ f‚ÇÇ ‚â´ f‚ÇÉ) (by rw [reassoc_of% h‚ÇÅ‚ÇÇ])) rfl rfl,
    Œ®_fromOpcycles_assoc, zero‚ÇÅ, comp_zero]

noncomputable def sequenceŒ® : ComposableArrows C 3 :=
  mk‚ÇÉ (X.cyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ _ _ _ _ (threeŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ))
    (X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ)
    (X.opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ _ _ _ _ (threeŒ¥‚ÇÉToŒ¥‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ))

lemma cyclesMap_Œ®_exact :
    (ShortComplex.mk _ _ (X.cyclesMap_Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ)).Exact := by
  rw [ShortComplex.exact_iff_exact_up_to_refinements]
  intro A z hz
  dsimp at z hz
  refine' ‚ü®A, ùüô _, inferInstance,
    X.liftCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ (z ‚â´ X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ) _, _‚ü©
  ¬∑ dsimp
    rw [assoc, ‚Üê X.Œ®_fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ , reassoc_of% hz, zero_comp]
  ¬∑ dsimp
    rw [‚Üê cancel_mono (X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ), id_comp, assoc,
      X.cyclesMap_i n‚ÇÄ n‚ÇÅ hn‚ÇÅ _ _ _ _ (threeŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ) (ùüô _) (by aesop_cat),
     Functor.map_id, comp_id, liftCycles_i]

lemma Œ®_opcyclesMap_exact :
    (ShortComplex.mk _ _ (X.Œ®_opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ)).Exact := by
  rw [ShortComplex.exact_iff_exact_up_to_refinements]
  intro A z‚ÇÄ hz‚ÇÄ
  dsimp at z‚ÇÄ hz‚ÇÄ
  obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, _, z‚ÇÅ, hz‚ÇÅ‚ü© :=
    surjective_up_to_refinements_of_epi (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ) z‚ÇÄ
  obtain ‚ü®A‚ÇÇ, œÄ‚ÇÇ, _, z‚ÇÇ, hz‚ÇÇ‚ü© :=
      (X.cokernelSequenceOpcycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ‚ÇÉ).exact_up_to_refinements z‚ÇÅ (by
    dsimp
    have H := X.p_opcyclesMap n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÅ f‚ÇÇ‚ÇÉ
      (threeŒ¥‚ÇÉToŒ¥‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ) (ùüô _) (by aesop_cat)
    rw [Functor.map_id, id_comp] at H
    rw [‚Üê H, ‚Üê reassoc_of% hz‚ÇÅ, hz‚ÇÄ, comp_zero])
  dsimp at z‚ÇÇ hz‚ÇÇ
  refine' ‚ü®A‚ÇÇ, œÄ‚ÇÇ ‚â´ œÄ‚ÇÅ, epi_comp _ _, z‚ÇÇ ‚â´ X.toCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ, _‚ü©
  dsimp
  rw [‚Üê cancel_mono (X.fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ), assoc, assoc,
    assoc, assoc, toCycles_Œ®_assoc, p_fromOpcycles, ‚Üê reassoc_of% hz‚ÇÇ,
    reassoc_of% hz‚ÇÅ, p_fromOpcycles]

lemma sequenceŒ®_exact :
    (X.sequenceŒ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).Exact :=
  exact_of_Œ¥‚ÇÄ
    (X.cyclesMap_Œ®_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).exact_toComposableArrows
    (X.Œ®_opcyclesMap_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ h‚ÇÇ‚ÇÉ).exact_toComposableArrows

end

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
  {i j k l : Œπ} (f‚ÇÅ : i ‚ü∂ j) (f‚ÇÇ : j ‚ü∂ k) (f‚ÇÉ : k ‚ü∂ l)
  (f‚ÇÅ‚ÇÇ : i ‚ü∂ k) (h‚ÇÅ‚ÇÇ : f‚ÇÅ ‚â´ f‚ÇÇ = f‚ÇÅ‚ÇÇ) (f‚ÇÇ‚ÇÉ : j ‚ü∂ l) (h‚ÇÇ‚ÇÉ : f‚ÇÇ ‚â´ f‚ÇÉ = f‚ÇÇ‚ÇÉ)

noncomputable def Œ¥ToCycles : (X.H n‚ÇÄ).obj (mk‚ÇÅ f‚ÇÉ) ‚ü∂ X.cycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ :=
  X.liftCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ) (by simp)

@[reassoc (attr := simp)]
lemma Œ¥ToCycles_iCycles :
    X.Œ¥ToCycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ X.iCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ =
      X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ := by
  simp only [Œ¥ToCycles, liftCycles_i]

@[reassoc (attr := simp)]
lemma Œ¥_toCycles :
    X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ ‚â´ X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ =
      X.Œ¥ToCycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ  := by
  rw [‚Üê cancel_mono (X.iCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ), assoc,
    toCycles_i, Œ¥ToCycles_iCycles,
    ‚Üê X.Œ¥_naturality n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ f‚ÇÇ f‚ÇÉ (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ) (ùüô _) rfl,
    Functor.map_id, id_comp]

noncomputable def Œ¥FromOpcycles : X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ ‚ü∂ (X.H n‚ÇÇ).obj (mk‚ÇÅ f‚ÇÅ) :=
  X.descOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ (X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ) (by simp)

@[reassoc (attr := simp)]
lemma pOpcycles_Œ¥FromOpcycles :
    X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ X.Œ¥FromOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ =
      X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ := by
  simp only [Œ¥FromOpcycles, p_descOpcycles]

@[simps]
noncomputable def leftHomologyDataShortComplexE :
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).LeftHomologyData where
  K := X.cycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ
  H := cokernel (X.Œ¥ToCycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ)
  i := X.iCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ
  œÄ := cokernel.œÄ _
  wi := by simp
  hi := kernelIsKernel _
  wœÄ := cokernel.condition _
  hœÄ := cokernelIsCokernel _

@[simp]
lemma leftHomologyDataShortComplexE_f' :
    (X.leftHomologyDataShortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).f' =
      X.Œ¥ToCycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ := rfl

noncomputable def cyclesIso :
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).cycles ‚âÖ X.cycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ :=
  (X.leftHomologyDataShortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).cyclesIso

@[reassoc (attr := simp)]
lemma cyclesIso_inv_i :
    (X.cyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).inv ‚â´
      (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).iCycles = X.iCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ :=
  ShortComplex.LeftHomologyData.cyclesIso_inv_comp_iCycles _

@[reassoc (attr := simp)]
lemma cyclesIso_hom_i :
    (X.cyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).hom ‚â´ X.iCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ =
      (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).iCycles :=
  ShortComplex.LeftHomologyData.cyclesIso_hom_comp_i _

noncomputable def œÄE : X.cycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ ‚ü∂ X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ :=
    (X.cyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).inv ‚â´
      (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).homologyœÄ

instance : Epi (X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ) := by
  dsimp [œÄE]
  apply epi_comp

@[reassoc (attr := simp)]
lemma Œ¥ToCycles_cyclesIso_inv :
    X.Œ¥ToCycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ (X.cyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).inv =
      (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).toCycles := by
  -- this could be a general lemma for LeftHomologyData
  rw [‚Üê cancel_mono (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).iCycles, assoc,
    cyclesIso_inv_i, Œ¥ToCycles_iCycles, ShortComplex.toCycles_i, shortComplexE_f]

@[reassoc (attr := simp)]
lemma Œ¥ToCycles_œÄE :
    X.Œ¥ToCycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ = 0 := by
  simp only [œÄE, Œ¥ToCycles_cyclesIso_inv_assoc, ShortComplex.toCycles_comp_homologyœÄ]

@[simps]
noncomputable def cokernelSequenceE' : ShortComplex C :=
    ShortComplex.mk _ _ (X.Œ¥ToCycles_œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ)

@[simps!]
noncomputable def cokernelSequenceE'Iso :
    X.cokernelSequenceE' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚âÖ ShortComplex.mk _ _
        (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).toCycles_comp_homologyœÄ :=
  ShortComplex.isoMk (Iso.refl _) (X.cyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).symm
    (Iso.refl _) (by simp) (by simp [œÄE])

lemma cokernelSequenceE'_exact :
    (X.cokernelSequenceE' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).Exact :=
  ShortComplex.exact_of_iso (X.cokernelSequenceE'Iso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).symm
    (ShortComplex.exact_of_g_is_cokernel _ (ShortComplex.homologyIsCokernel _))

instance : Epi (X.cokernelSequenceE' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).g := by
  dsimp
  infer_instance

@[simps]
noncomputable def rightHomologyDataShortComplexE :
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).RightHomologyData where
  Q := X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ
  H := kernel (X.Œ¥FromOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ)
  p := X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ
  Œπ := kernel.Œπ _
  wp := by simp
  hp := cokernelIsCokernel _
  wŒπ := kernel.condition _
  hŒπ := kernelIsKernel _

@[simp]
lemma rightHomologyDataShortComplexE_g' :
    (X.rightHomologyDataShortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).g' =
      X.Œ¥FromOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ := rfl

noncomputable def opcyclesIso :
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).opcycles ‚âÖ X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ :=
  (X.rightHomologyDataShortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).opcyclesIso

@[reassoc (attr := simp)]
lemma p_opcyclesIso_hom :
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).pOpcycles ‚â´
      (X.opcyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).hom =
      X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ :=
  ShortComplex.RightHomologyData.pOpcycles_comp_opcyclesIso_hom _

@[reassoc (attr := simp)]
lemma p_opcyclesIso_inv :
    X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ (X.opcyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).inv =
      (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).pOpcycles :=
  (X.rightHomologyDataShortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).p_comp_opcyclesIso_inv

noncomputable def ŒπE : X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚ü∂ X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÇ f‚ÇÉ :=
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).homologyŒπ ‚â´
      (X.opcyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).hom

instance : Mono (X.ŒπE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ) := by
  dsimp [ŒπE]
  infer_instance

@[reassoc (attr := simp)]
lemma opcyclesIso_hom_Œ¥FromOpcycles :
    (X.opcyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).hom ‚â´ X.Œ¥FromOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ =
      (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).fromOpcycles := by
  -- this could be a general lemma for RightHomologyData
  rw [‚Üê cancel_epi (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).pOpcycles,
    p_opcyclesIso_hom_assoc, ShortComplex.p_fromOpcycles, shortComplexE_g,
    pOpcycles_Œ¥FromOpcycles]

@[reassoc (attr := simp)]
lemma ŒπE_Œ¥FromOpcycles :
    X.ŒπE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´ X.Œ¥FromOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ = 0 := by
  simp only [ŒπE, assoc, opcyclesIso_hom_Œ¥FromOpcycles, ShortComplex.homologyŒπ_comp_fromOpcycles]

@[simps]
noncomputable def kernelSequenceE' : ShortComplex C :=
    ShortComplex.mk _ _ (X.ŒπE_Œ¥FromOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ)

@[simps!]
noncomputable def kernelSequenceE'Iso :
    X.kernelSequenceE' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚âÖ ShortComplex.mk _ _
        (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).homologyŒπ_comp_fromOpcycles :=
  Iso.symm (ShortComplex.isoMk (Iso.refl _) (X.opcyclesIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ)
    (Iso.refl _) (by simp [ŒπE]) (by simp))

lemma kernelSequenceE'_exact :
    (X.kernelSequenceE' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).Exact :=
  ShortComplex.exact_of_iso (X.kernelSequenceE'Iso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).symm
    (ShortComplex.exact_of_f_is_kernel _ (ShortComplex.homologyIsKernel _))

instance : Mono (X.kernelSequenceE' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).f := by
  dsimp
  infer_instance

@[simps]
noncomputable def cokernelSequenceE : ShortComplex C where
  X‚ÇÅ := (X.H n‚ÇÅ).obj (mk‚ÇÅ f‚ÇÅ) ‚äû (X.H n‚ÇÄ).obj (mk‚ÇÅ f‚ÇÉ)
  X‚ÇÇ := (X.H n‚ÇÅ).obj (mk‚ÇÅ f‚ÇÅ‚ÇÇ)
  X‚ÇÉ := X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ
  f := biprod.desc ((X.H n‚ÇÅ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ)) (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ)
  g := X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ ‚â´ X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ
  zero := by ext <;> simp

instance : Epi (X.cokernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).g := by
  dsimp
  apply epi_comp

lemma cokernelSequenceE_exact :
    (X.cokernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).Exact := by
  rw [ShortComplex.exact_iff_exact_up_to_refinements]
  intro A x‚ÇÇ hx‚ÇÇ
  dsimp at x‚ÇÇ hx‚ÇÇ
  obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, _, y‚ÇÅ, hy‚ÇÅ‚ü© :=
    (X.cokernelSequenceE'_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).exact_up_to_refinements
      (x‚ÇÇ ‚â´ X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ) (by simpa using hx‚ÇÇ)
  dsimp at y‚ÇÅ hy‚ÇÅ
  let z := œÄ‚ÇÅ ‚â´ x‚ÇÇ - y‚ÇÅ ‚â´ X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ
  obtain ‚ü®A‚ÇÇ, œÄ‚ÇÇ, _, x‚ÇÅ, hx‚ÇÅ‚ü© := (X.exact‚ÇÇ n‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).exact_up_to_refinements z (by
      have : z ‚â´ X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ = 0 := by simp [hy‚ÇÅ]
      simpa only [zero_comp, assoc, toCycles_i] using this =‚â´ X.iCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ)
  dsimp at x‚ÇÅ hx‚ÇÅ
  exact ‚ü®A‚ÇÇ, œÄ‚ÇÇ ‚â´ œÄ‚ÇÅ, epi_comp _ _, biprod.lift x‚ÇÅ (œÄ‚ÇÇ ‚â´ y‚ÇÅ), by simp [‚Üê hx‚ÇÅ]‚ü©

section

variable {A : C} (x : (X.H n‚ÇÅ).obj (mk‚ÇÅ f‚ÇÅ‚ÇÇ) ‚ü∂ A)
  (h : (X.H n‚ÇÅ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ) ‚â´ x = 0)
  (h' : X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÉ ‚â´ x = 0)

noncomputable def descE  :
    X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚ü∂ A :=
  (X.cokernelSequenceE_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).desc x (by
    dsimp
    ext
    ¬∑ simp [h]
    ¬∑ simp [h'])

@[reassoc (attr := simp)]
lemma toCycles_œÄE_descE :
    X.toCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ ‚â´ X.œÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ ‚â´
      X.descE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ x h h' = x := by
  dsimp only [descE]
  rw [‚Üê assoc]
  apply (X.cokernelSequenceE_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÇ).g_desc

end

end

end SpectralObject

end Abelian

end CategoryTheory

/-
namespace SpectralObject

section

attribute [pp_dot] H Œ¥

attribute [reassoc (attr := simp)] zero‚ÇÅ zero‚ÇÇ zero‚ÇÉ

variable {C Œπ : Type _} [Category C] [Abelian C] [Category Œπ]
variable (X : SpectralObject C Œπ)

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ) (hn‚ÇÉ : n‚ÇÇ + 1 = n‚ÇÉ)
  (hn‚ÇÑ : n‚ÇÉ + 1 = n‚ÇÑ)

lemma Œ¥_app_eq_zero (D : Arrow‚ÇÇ Œπ) (h : IsIso D.f) :
    (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D = 0 := by
  have : IsIso (Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ.app D) := by
    rw [Arrow.isIso_iff]
    dsimp [Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ]
    constructor <;> infer_instance
  simpa only [Preadditive.IsIso.comp_left_eq_zero] using X.zero‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ D

lemma Œ¥_app_eq_zero' (D : Arrow‚ÇÇ Œπ) (h : IsIso D.g) :
    (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D = 0 := by
  have : IsIso (Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ.app D) := by
    rw [Arrow.isIso_iff]
    dsimp [Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ]
    constructor <;> infer_instance
  simpa only [Preadditive.IsIso.comp_right_eq_zero] using X.zero‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ D

lemma isZero_H_id (i : Œπ) : IsZero ((X.H n‚ÇÄ).obj (Arrow.mk (ùüô i))) := by
  rw [IsZero.iff_id_eq_zero, ‚Üê Functor.map_id, ‚Üê X.zero‚ÇÇ n‚ÇÄ (Arrow‚ÇÇ.mk (ùüô i) (ùüô i)),
    ‚Üê Functor.map_comp]
  congr 1
  dsimp [Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ, Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ]
  ext <;> simp

lemma isZero_H_of_isIso (D : Arrow Œπ) (hD : IsIso D.hom) :
    IsZero ((X.H n‚ÇÄ).obj D) := by
  refine' IsZero.of_iso (X.isZero_H_id n‚ÇÄ D.left) ((X.H n‚ÇÄ).mapIso _)
  exact Arrow.isoMk (Iso.refl _) (asIso D.hom).symm (by simp)

@[reassoc]
lemma zero‚ÇÉ' {i j k : Œπ} (f : i ‚ü∂ j) (g : j ‚ü∂ k) (fg : i ‚ü∂ k)
    (hfg : f ‚â´ g = fg) (œÜ : Arrow.mk fg ‚ü∂ Arrow.mk g) (hœÜ‚ÇÅ : œÜ.left = f) (hœÜ‚ÇÇ : œÜ.right = ùüô k) :
      (X.H n‚ÇÄ).map œÜ ‚â´ (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÇ.mk f g) = 0 := by
  subst hfg
  obtain rfl : œÜ = (Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ.app (Arrow‚ÇÇ.mk f g)) := by
    ext
    ¬∑ exact hœÜ‚ÇÅ
    ¬∑ exact hœÜ‚ÇÇ
  refine' X.zero‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ _

@[simps, pp_dot]
def shortComplex‚ÇÅ : ShortComplex (Arrow‚ÇÇ Œπ ‚•§ C):=
  ShortComplex.mk (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) (whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ (X.H n‚ÇÅ))
     (by
      ext D
      exact X.zero‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ D)

@[simps, pp_dot]
def shortComplex‚ÇÇ : ShortComplex (Arrow‚ÇÇ Œπ ‚•§ C):=
  ShortComplex.mk (whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ (X.H n‚ÇÄ))
    (whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.H n‚ÇÄ)) (by
      ext D
      exact X.zero‚ÇÇ n‚ÇÄ D)

@[simps, pp_dot]
def shortComplex‚ÇÉ : ShortComplex (Arrow‚ÇÇ Œπ ‚•§ C) :=
  ShortComplex.mk  (whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.H n‚ÇÄ)) (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ)
     (by
      ext D
      exact X.zero‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ D)

lemma shortComplex‚ÇÅ_exact : (X.shortComplex‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact := by
  rw [exact_iff_exact_evaluation]
  intro i
  apply X.exact‚ÇÅ

lemma shortComplex‚ÇÇ_exact : (X.shortComplex‚ÇÇ n‚ÇÄ).Exact := by
  rw [exact_iff_exact_evaluation]
  intro i
  apply X.exact‚ÇÇ

lemma shortComplex‚ÇÉ_exact : (X.shortComplex‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact := by
  rw [exact_iff_exact_evaluation]
  intro i
  apply X.exact‚ÇÉ

@[pp_dot]
def shortComplex‚ÇÑ : ShortComplex‚ÇÑ (Arrow‚ÇÇ Œπ ‚•§ C) :=
  ShortComplex‚ÇÑ.mk
    (whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ (X.H n‚ÇÄ))
    (whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.H n‚ÇÄ))
    (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ)
    (X.shortComplex‚ÇÇ n‚ÇÄ).zero
    (X.shortComplex‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).zero

@[pp_dot]
def shortComplex‚ÇÑ' : ShortComplex‚ÇÑ (Arrow‚ÇÇ Œπ ‚•§ C) :=
  ShortComplex‚ÇÑ.mk
    (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ)
    (whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ (X.H n‚ÇÅ))
    (whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.H n‚ÇÅ))
    (X.shortComplex‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).zero
    (X.shortComplex‚ÇÇ n‚ÇÅ).zero

lemma shortComplex‚ÇÑ_exact : (X.shortComplex‚ÇÑ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact where
  exact‚ÇÇ := X.shortComplex‚ÇÇ_exact n‚ÇÄ
  exact‚ÇÉ := X.shortComplex‚ÇÉ_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ

lemma shortComplex‚ÇÑ'_exact : (X.shortComplex‚ÇÑ' n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact where
  exact‚ÇÇ := X.shortComplex‚ÇÅ_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ
  exact‚ÇÉ := X.shortComplex‚ÇÇ_exact n‚ÇÅ

@[pp_dot]
def shortComplexE : ShortComplex (Arrow‚ÇÉ Œπ ‚•§ C) where
  X‚ÇÅ := Arrow‚ÇÉ.hMor ‚ãô X.H n‚ÇÄ
  X‚ÇÇ := Arrow‚ÇÉ.gMor ‚ãô X.H n‚ÇÅ
  X‚ÇÉ := Arrow‚ÇÉ.fMor ‚ãô X.H n‚ÇÇ
  f := whiskerLeft (Arrow‚ÇÉ.Œ¥‚ÇÄ) (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ)
  g := whiskerLeft (Arrow‚ÇÉ.Œ¥‚ÇÉ) (X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ)
  zero := by
    ext D
    have eq := (X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).naturality (Arrow‚ÇÉ.Œ¥‚ÇÉToŒ¥‚ÇÇ.app D)
    dsimp at eq ‚ä¢
    simp only [Arrow‚ÇÉ.Œ¥‚ÇÇ_map_Œ¥‚ÇÉToŒ¥‚ÇÇ_app, Arrow‚ÇÇ.Œ¥‚ÇÇ_obj, Arrow‚ÇÉ.Œ¥‚ÇÉ_obj_f,
      Functor.map_id, comp_id] at eq
    rw [‚Üê eq, Arrow‚ÇÉ.Œ¥‚ÇÄ_map_Œ¥‚ÇÉToŒ¥‚ÇÇ_app_eq_Œ¥‚ÇÇToŒ¥‚ÇÅ_app_Œ¥‚ÇÄ_obj,
      reassoc_of% (X.zero‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ (Arrow‚ÇÉ.Œ¥‚ÇÄ.obj D)), zero_comp]

@[reassoc (attr := simp)]
lemma shortComplexE_zero_app' {x‚ÇÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ : Œπ} (f‚ÇÅ : x‚ÇÄ ‚ü∂ x‚ÇÅ) (f‚ÇÇ : x‚ÇÅ ‚ü∂ x‚ÇÇ) (f‚ÇÉ : x‚ÇÇ ‚ü∂ x‚ÇÉ) :
    (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÇ.mk f‚ÇÇ f‚ÇÉ) ‚â´ (X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).app (Arrow‚ÇÇ.mk f‚ÇÅ f‚ÇÇ) = 0 :=
  congr_app (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).zero (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ)

def shortComplexEIsoOfEq (n‚ÇÄ' n‚ÇÅ' n‚ÇÇ' : ‚Ñ§) (hn‚ÇÅ' : n‚ÇÄ' + 1 = n‚ÇÅ') (hn‚ÇÇ' : n‚ÇÅ' + 1 = n‚ÇÇ')
    (h : n‚ÇÅ = n‚ÇÅ') :
    X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ‚âÖ X.shortComplexE n‚ÇÄ' n‚ÇÅ' n‚ÇÇ' hn‚ÇÅ' hn‚ÇÇ' := eqToIso (by
  obtain rfl : n‚ÇÅ = n‚ÇÅ' := h
  obtain rfl : n‚ÇÄ = n‚ÇÄ' := by linarith
  obtain rfl : n‚ÇÇ = n‚ÇÇ' := by linarith
  rfl)

lemma shortComplexEIsoOfEq_refl :
  X.shortComplexEIsoOfEq n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ rfl = Iso.refl _ := rfl

-- the homology of this short complex gives the terms in all the pages of the spectral sequence
def shortComplexEObj (D : Arrow‚ÇÉ Œπ) : ShortComplex C :=
  ShortComplex.mk ((X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÇ.mk D.g D.h))
    ((X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).app (Arrow‚ÇÇ.mk D.f D.g))
    (congr_app (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).zero D)

@[pp_dot]
noncomputable def E : Arrow‚ÇÉ Œπ ‚•§ C := (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).homology

noncomputable def EIsoOfEq (n‚ÇÄ' n‚ÇÅ' n‚ÇÇ' : ‚Ñ§) (hn‚ÇÅ' : n‚ÇÄ' + 1 = n‚ÇÅ') (hn‚ÇÇ' : n‚ÇÅ' + 1 = n‚ÇÇ')
    (h : n‚ÇÅ = n‚ÇÅ') :
    X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ‚âÖ X.E n‚ÇÄ' n‚ÇÅ' n‚ÇÇ' hn‚ÇÅ' hn‚ÇÇ' :=
  ShortComplex.homologyMapIso (X.shortComplexEIsoOfEq n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ n‚ÇÄ' n‚ÇÅ' n‚ÇÇ' hn‚ÇÅ' hn‚ÇÇ' h)

lemma EIsoOfEq_refl : (X.EIsoOfEq n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ rfl) = Iso.refl _ := by
  dsimp only [EIsoOfEq]
  rw [shortComplexEIsoOfEq_refl]
  ext1
  simp only [ShortComplex.homologyMapIso_hom, Iso.refl_hom, ShortComplex.homologyMap_id]
  rfl

@[pp_dot]
noncomputable def EObjIso (D : Arrow‚ÇÉ Œπ) :
    (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj D ‚âÖ (X.shortComplexEObj n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ D).homology :=
  ((X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).mapHomologyIso ((evaluation (Arrow‚ÇÉ Œπ) C).obj D)).symm

lemma isZero_E_of_isZero_H (D : Arrow‚ÇÉ Œπ) (h : IsZero ((X.H n‚ÇÅ).obj (Arrow.mk D.g))) :
    IsZero ((X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj D) := by
  refine' IsZero.of_iso _ (X.EObjIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ D)
  rw [‚Üê ShortComplex.exact_iff_isZero_homology]
  exact ShortComplex.exact_of_isZero_X‚ÇÇ _ h

-- this is helpful in order to compute the initial page of the spectral sequence
@[pp_dot]
noncomputable def EObjIsoH (D : Arrow‚ÇÉ Œπ) (h‚ÇÅ : IsIso D.f) (h‚ÇÇ : IsIso D.h) :
    (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj D ‚âÖ (X.H n‚ÇÅ).obj (Arrow.mk D.g) :=
  X.EObjIso n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ D ‚â™‚â´
    (ShortComplex.HomologyData.ofZeros (X.shortComplexEObj n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ D)
      (X.Œ¥_app_eq_zero' n‚ÇÄ n‚ÇÅ hn‚ÇÅ _ h‚ÇÇ) ((X.Œ¥_app_eq_zero n‚ÇÅ n‚ÇÇ hn‚ÇÇ _ h‚ÇÅ))).left.homologyIso

@[pp_dot]
noncomputable def cycles : Arrow‚ÇÇ Œπ ‚•§ C := kernel (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ)
@[pp_dot]
noncomputable def opcycles : Arrow‚ÇÇ Œπ ‚•§ C := cokernel (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ)

@[pp_dot]
noncomputable def iCycles : X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚ü∂ Arrow‚ÇÇ.Œ¥‚ÇÄ ‚ãô X.H n‚ÇÄ := kernel.Œπ _
@[pp_dot]
noncomputable def pOpcycles : Arrow‚ÇÇ.Œ¥‚ÇÇ ‚ãô X.H n‚ÇÅ ‚ü∂ X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ := cokernel.œÄ _

@[reassoc (attr := simp)]
lemma iCycles_comp_Œ¥ : X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚â´ X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ = 0 :=
  kernel.condition _

@[reassoc (attr := simp)]
lemma iCycles_comp_Œ¥_app (D : Arrow‚ÇÇ Œπ) :
    (X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D ‚â´ (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D = 0 :=
  congr_app (X.iCycles_comp_Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) D

@[reassoc (attr := simp)]
lemma Œ¥_comp_pOpcycles : X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚â´ X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ = 0 :=
  cokernel.condition _

@[reassoc (attr := simp)]
lemma Œ¥_comp_pOpcycles_app (D : Arrow‚ÇÇ Œπ) :
    (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D ‚â´ (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D = 0 :=
  congr_app (X.Œ¥_comp_pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ) D

@[simps, pp_dot]
noncomputable def kernelSequenceCycles : ShortComplex (Arrow‚ÇÇ Œπ ‚•§ C) :=
  ShortComplex.mk _ _ (X.iCycles_comp_Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ)

@[simps, pp_dot]
noncomputable def cokernelSequenceOpcycles : ShortComplex (Arrow‚ÇÇ Œπ ‚•§ C) :=
  ShortComplex.mk _ _ (X.Œ¥_comp_pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ)

lemma kernelSequenceCycles_exact :
    (X.kernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact :=
  ShortComplex.exact_of_f_is_kernel _ (kernelIsKernel _)

lemma kernelSequenceCycles_obj_exact (D : Arrow‚ÇÇ Œπ) :
    (ShortComplex.mk _ _ (X.iCycles_comp_Œ¥_app n‚ÇÄ n‚ÇÅ hn‚ÇÅ D)).Exact :=
  (X.kernelSequenceCycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).map ((evaluation _ _ ).obj D)

lemma cokernelSequenceOpcycles_exact :
    (X.cokernelSequenceOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact :=
  ShortComplex.exact_of_g_is_cokernel _ (cokernelIsCokernel _)

lemma cokernelSequenceOpcycles_obj_exact (D : Arrow‚ÇÇ Œπ) :
    (ShortComplex.mk _ _ (X.Œ¥_comp_pOpcycles_app n‚ÇÄ n‚ÇÅ hn‚ÇÅ D)).Exact :=
  (X.cokernelSequenceOpcycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).map ((evaluation _ _ ).obj D)

instance : Mono (X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ) := by
  dsimp only [iCycles]
  infer_instance

instance : Epi (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ) := by
  dsimp only [pOpcycles]
  infer_instance

instance : Mono (X.kernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).f := by
  dsimp only [kernelSequenceCycles]
  infer_instance

instance : Epi (X.cokernelSequenceOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).g := by
  dsimp only [cokernelSequenceOpcycles]
  infer_instance

@[pp_dot]
noncomputable def cokernelIsoCycles :
    cokernel (whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ (X.H n‚ÇÄ)) ‚âÖ X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ :=
  (X.shortComplex‚ÇÑ_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).cokerIsoKer

@[pp_dot]
noncomputable def opcyclesIsoKernel :
    X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚âÖ kernel (whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.H n‚ÇÅ)) :=
  (X.shortComplex‚ÇÑ'_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).cokerIsoKer

@[pp_dot]
noncomputable def HŒ¥‚ÇÅToCycles : Arrow‚ÇÇ.Œ¥‚ÇÅ ‚ãô X.H n‚ÇÄ ‚ü∂ X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ :=
  cokernel.œÄ _ ‚â´ (X.cokernelIsoCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).hom

@[pp_dot]
noncomputable def opcyclesToHŒ¥‚ÇÅ : X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚ü∂ Arrow‚ÇÇ.Œ¥‚ÇÅ ‚ãô X.H n‚ÇÅ :=
  (X.opcyclesIsoKernel n‚ÇÄ n‚ÇÅ hn‚ÇÅ).hom ‚â´ kernel.Œπ _

instance : Epi (X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ) := by
  dsimp [HŒ¥‚ÇÅToCycles]
  apply epi_comp

instance : Mono (X.opcyclesToHŒ¥‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) := by
  dsimp [opcyclesToHŒ¥‚ÇÅ]
  apply mono_comp

@[reassoc (attr := simp)]
lemma HŒ¥‚ÇÅToCycles_iCycles :
    X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚â´ X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ = whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.H n‚ÇÄ) := by
  dsimp only [HŒ¥‚ÇÅToCycles]
  rw [assoc]
  exact (X.shortComplex‚ÇÑ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).cokerToKer_fac

@[reassoc (attr := simp)]
lemma pOpcycles_opcyclesToHŒ¥‚ÇÅ :
    X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚â´ X.opcyclesToHŒ¥‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ = whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ (X.H n‚ÇÅ) := by
  dsimp only [opcyclesToHŒ¥‚ÇÅ]
  exact (X.shortComplex‚ÇÑ' n‚ÇÄ n‚ÇÅ hn‚ÇÅ).cokerToKer_fac

@[reassoc (attr := simp)]
lemma HŒ¥‚ÇÅToCycles_iCycles_app (D : Arrow‚ÇÇ Œπ) :
    (X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D ‚â´ (X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D =
      (X.H n‚ÇÄ).map (Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ.app D) :=
  congr_app (X.HŒ¥‚ÇÅToCycles_iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ) D

@[reassoc (attr := simp)]
lemma pOpcycles_opcyclesToHŒ¥‚ÇÅ_app (D : Arrow‚ÇÇ Œπ):
    (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D ‚â´ (X.opcyclesToHŒ¥‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D =
      (X.H n‚ÇÅ).map (Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ.app D) :=
  congr_app (X.pOpcycles_opcyclesToHŒ¥‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) D

@[reassoc (attr := simp)]
lemma HŒ¥‚ÇÇToŒ¥‚ÇÅ_HŒ¥‚ÇÅToCycles :
    whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ (X.H n‚ÇÄ) ‚â´ X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ = 0 := by
  rw [‚Üê cancel_mono (X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ), assoc, HŒ¥‚ÇÅToCycles_iCycles, zero_comp]
  exact (X.shortComplex‚ÇÇ n‚ÇÄ).zero

@[reassoc (attr := simp)]
lemma HŒ¥‚ÇÇToŒ¥‚ÇÅ_HŒ¥‚ÇÅToCycles_app (D : Arrow‚ÇÇ Œπ) :
    (X.H n‚ÇÄ).map (Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ.app D) ‚â´ (X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D = 0 :=
  congr_app (X.HŒ¥‚ÇÇToŒ¥‚ÇÅ_HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ) D

@[reassoc (attr := simp)]
lemma opcyclesToHŒ¥‚ÇÅ_HŒ¥‚ÇÅToŒ¥‚ÇÄ :
    X.opcyclesToHŒ¥‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚â´ whiskerRight Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.H n‚ÇÅ) = 0 := by
  rw [‚Üê cancel_epi (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ), pOpcycles_opcyclesToHŒ¥‚ÇÅ_assoc, comp_zero]
  exact (X.shortComplex‚ÇÇ n‚ÇÅ).zero

@[reassoc]
lemma opcyclesToHŒ¥‚ÇÅ_HŒ¥‚ÇÅToŒ¥‚ÇÄ_app (D : Arrow‚ÇÇ Œπ) :
    (X.opcyclesToHŒ¥‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D ‚â´ (X.H n‚ÇÅ).map (Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ.app D) = 0 :=
  congr_app (X.opcyclesToHŒ¥‚ÇÅ_HŒ¥‚ÇÅToŒ¥‚ÇÄ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) D

@[simps]
noncomputable def cokernelSequenceCycles : ShortComplex (Arrow‚ÇÇ Œπ ‚•§ C) :=
  ShortComplex.mk _ _ (X.HŒ¥‚ÇÇToŒ¥‚ÇÅ_HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ)

@[simps]
noncomputable def kernelSequenceOpcycles : ShortComplex (Arrow‚ÇÇ Œπ ‚•§ C) :=
  ShortComplex.mk _ _ (X.opcyclesToHŒ¥‚ÇÅ_HŒ¥‚ÇÅToŒ¥‚ÇÄ n‚ÇÄ n‚ÇÅ hn‚ÇÅ)

instance : Epi (X.cokernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).g := by
  dsimp only [cokernelSequenceCycles]
  infer_instance

instance : Mono (X.kernelSequenceOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).f := by
  dsimp only [kernelSequenceOpcycles]
  infer_instance

lemma cokernelSequenceCycles_exact : (X.cokernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact := by
  apply ShortComplex.exact_of_g_is_cokernel
  exact IsColimit.ofIsoColimit (cokernelIsCokernel _)
    (Cofork.ext (X.cokernelIsoCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ) (by simp [HŒ¥‚ÇÅToCycles]))

lemma kernelSequenceOpcycles_exact : (X.kernelSequenceOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact := by
  apply ShortComplex.exact_of_f_is_kernel
  exact IsLimit.ofIsoLimit (kernelIsKernel _)
    (Fork.ext ((X.opcyclesIsoKernel n‚ÇÄ n‚ÇÅ hn‚ÇÅ).symm) (by simp [opcyclesToHŒ¥‚ÇÅ]))

@[simps]
noncomputable def cokernelSequenceCyclesObj (D : Arrow‚ÇÇ Œπ) : ShortComplex C :=
  ShortComplex.mk _ _ (X.HŒ¥‚ÇÇToŒ¥‚ÇÅ_HŒ¥‚ÇÅToCycles_app n‚ÇÄ n‚ÇÅ hn‚ÇÅ D)

instance (D : Arrow‚ÇÇ Œπ) : Epi (X.cokernelSequenceCyclesObj n‚ÇÄ n‚ÇÅ hn‚ÇÅ D).g := by
  dsimp only [cokernelSequenceCyclesObj]
  infer_instance

lemma cokernelSequenceCyclesObj_exact (D : Arrow‚ÇÇ Œπ) :
    (X.cokernelSequenceCyclesObj n‚ÇÄ n‚ÇÅ hn‚ÇÅ D).Exact :=
  (X.cokernelSequenceCycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).map ((evaluation _ _).obj D)

@[simps]
noncomputable def kernelSequenceOpcyclesObj (D : Arrow‚ÇÇ Œπ) : ShortComplex C :=
  ShortComplex.mk _ _ (X.opcyclesToHŒ¥‚ÇÅ_HŒ¥‚ÇÅToŒ¥‚ÇÄ_app n‚ÇÄ n‚ÇÅ hn‚ÇÅ D)

instance (D : Arrow‚ÇÇ Œπ) : Mono (X.kernelSequenceOpcyclesObj n‚ÇÄ n‚ÇÅ hn‚ÇÅ D).f := by
  dsimp only [kernelSequenceOpcyclesObj]
  infer_instance

lemma kernelSequenceOpcyclesObj_exact (D : Arrow‚ÇÇ Œπ) :
    (X.kernelSequenceOpcyclesObj n‚ÇÄ n‚ÇÅ hn‚ÇÅ D).Exact :=
  (X.kernelSequenceOpcycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).map ((evaluation _ _).obj D)

@[simps!, pp_dot]
noncomputable def Œ¥‚ÇÄPullbackCokernelSequenceCycles :
    ShortComplex (Arrow‚ÇÉ Œπ ‚•§ C) :=
  (X.cokernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).map (((whiskeringLeft _ _ C).obj (Arrow‚ÇÉ.Œ¥‚ÇÄ)))

instance : Epi (X.Œ¥‚ÇÄPullbackCokernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).g := by
  dsimp [Œ¥‚ÇÄPullbackCokernelSequenceCycles]
  infer_instance

lemma Œ¥‚ÇÄPullbackCokernelSequenceCycles_exact :
    (X.Œ¥‚ÇÄPullbackCokernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact :=
  (X.cokernelSequenceCycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).map (((whiskeringLeft _ _ C).obj (Arrow‚ÇÉ.Œ¥‚ÇÄ)))

@[pp_dot]
noncomputable def Œ® : Arrow‚ÇÉ.Œ¥‚ÇÄ ‚ãô X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚ü∂ Arrow‚ÇÉ.Œ¥‚ÇÉ ‚ãô X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ :=
  (X.Œ¥‚ÇÄPullbackCokernelSequenceCycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).desc
    (whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÇ (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) ‚â´ whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÉ (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ)) (by
      ext A
      dsimp
      erw [reassoc_of% ((X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).naturality (Arrow‚ÇÉ.Œ¥‚ÇÉToŒ¥‚ÇÇ.app A)), Functor.map_id]
      rw [id_comp, ‚Üê NatTrans.comp_app, Œ¥_comp_pOpcycles, zero_app])

lemma comp_Œ® : (X.Œ¥‚ÇÄPullbackCokernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).g ‚â´ X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ =
    (whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÇ (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) ‚â´ whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÉ (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ)) :=
  (X.Œ¥‚ÇÄPullbackCokernelSequenceCycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).g_desc _ _

@[reassoc (attr := simp)]
lemma comp_œà_app (D : Arrow‚ÇÉ Œπ) :
  (X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÉ.Œ¥‚ÇÄ.obj D) ‚â´ (X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D =
    (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÉ.Œ¥‚ÇÇ.obj D) ‚â´ (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÉ.Œ¥‚ÇÉ.obj D) :=
  congr_app (X.comp_Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ) D

@[reassoc (attr := simp)]
lemma œà_comp_app (D : Arrow‚ÇÉ Œπ) :
    (X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D ‚â´ (X.opcyclesToHŒ¥‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÉ.Œ¥‚ÇÉ.obj D) =
      (X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÉ.Œ¥‚ÇÄ.obj D) ‚â´ (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÉ.Œ¥‚ÇÅ.obj D) := by
  rw [‚Üê cancel_epi ((X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÉ.Œ¥‚ÇÄ.obj D)), comp_œà_app_assoc,
    pOpcycles_opcyclesToHŒ¥‚ÇÅ_app, HŒ¥‚ÇÅToCycles_iCycles_app_assoc]
  exact ((X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).naturality (Arrow‚ÇÉ.Œ¥‚ÇÇToŒ¥‚ÇÅ.app D)).symm

@[simps, pp_dot]
noncomputable def shortComplex‚ÇÑŒ® : ShortComplex‚ÇÑ (Arrow‚ÇÉ Œπ ‚•§ C) where
  X‚ÇÅ := Arrow‚ÇÉ.Œ¥‚ÇÅ ‚ãô X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ
  X‚ÇÇ := Arrow‚ÇÉ.Œ¥‚ÇÄ ‚ãô X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ
  X‚ÇÉ := Arrow‚ÇÉ.Œ¥‚ÇÉ ‚ãô X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ
  X‚ÇÑ := Arrow‚ÇÉ.Œ¥‚ÇÇ ‚ãô X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ
  f := whiskerRight Arrow‚ÇÉ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ)
  g := X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ
  h := whiskerRight Arrow‚ÇÉ.Œ¥‚ÇÉToŒ¥‚ÇÇ (X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ)
  zero‚ÇÅ := by
    ext D
    simp only [Functor.comp_obj, NatTrans.comp_app, whiskerRight_app, zero_app,
      ‚Üê cancel_epi ((X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app _), comp_zero, ‚Üê NatTrans.naturality_assoc,
      comp_œà_app, Functor.comp_map]
    erw [X.zero‚ÇÉ'_assoc n‚ÇÄ n‚ÇÅ hn‚ÇÅ _ _ _ _ _ rfl (by rfl), zero_comp]
    dsimp
    rw [assoc]
  zero‚ÇÇ := by
    ext D
    rw [‚Üê cancel_epi ((X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÉ.Œ¥‚ÇÄ.obj D))]
    simp only [zero_app, comp_zero, NatTrans.comp_app, comp_œà_app_assoc, whiskerRight_app,
      ‚Üê NatTrans.naturality, Functor.comp_map, Arrow‚ÇÉ.Œ¥‚ÇÇ_map_Œ¥‚ÇÉToŒ¥‚ÇÇ_app, Functor.map_id,
      Functor.comp_obj, id_comp, Œ¥_comp_pOpcycles_app]

attribute [local instance] epi_comp

lemma shortComplex‚ÇÑŒ®_exact‚ÇÅ : (X.shortComplex‚ÇÑŒ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ).shortComplex‚ÇÅ.Exact := by
  rw [exact_iff_exact_evaluation]
  rintro ‚ü®f‚ÇÅ, f‚ÇÇ, f‚ÇÉ‚ü©
  rw [ShortComplex.exact_iff_exact_up_to_refinements]
  dsimp
  intro A‚ÇÄ x‚ÇÄ hx‚ÇÄ
  dsimp [Arrow‚ÇÉ.Œ¥‚ÇÄ] at x‚ÇÄ hx‚ÇÄ
  obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, hœÄ‚ÇÅ, x‚ÇÅ, hx‚ÇÅ‚ü© := surjective_up_to_refinements_of_epi
    ((X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÇ.mk f‚ÇÇ f‚ÇÉ)) x‚ÇÄ
  dsimp at x‚ÇÅ hx‚ÇÅ
  replace hx‚ÇÄ := œÄ‚ÇÅ ‚â´= hx‚ÇÄ
  rw [comp_zero, reassoc_of% hx‚ÇÅ] at hx‚ÇÄ
  obtain ‚ü®A‚ÇÇ, œÄ‚ÇÇ, hœÄ‚ÇÇ, x‚ÇÇ, hx‚ÇÇ‚ü© := (X.cokernelSequenceOpcycles_obj_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ
    (Arrow‚ÇÇ.mk f‚ÇÅ f‚ÇÇ)).exact_up_to_refinements
      (x‚ÇÅ ‚â´ (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÇ.mk f‚ÇÅ (f‚ÇÇ ‚â´ f‚ÇÉ))) (by
        dsimp
        erw [‚Üê hx‚ÇÄ, assoc, (X.comp_œà_app n‚ÇÄ n‚ÇÅ hn‚ÇÅ (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ))]
        rfl)
  dsimp at x‚ÇÇ hx‚ÇÇ
  let x‚ÇÅ' := œÄ‚ÇÇ ‚â´ x‚ÇÅ -
      (by exact x‚ÇÇ ‚â´ (X.H n‚ÇÄ).map (Arrow‚ÇÉ.Œ¥‚ÇÉŒ¥‚ÇÄToŒ¥‚ÇÄŒ¥‚ÇÅ.app (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ)))
  obtain ‚ü®A‚ÇÉ, œÄ‚ÇÉ, hœÄ‚ÇÉ, x‚ÇÉ, hx‚ÇÉ‚ü© :=
    (X.exact‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ (Arrow‚ÇÇ.mk f‚ÇÅ (f‚ÇÇ ‚â´ f‚ÇÉ))).exact_up_to_refinements x‚ÇÅ' (by
    dsimp
    simp only [Preadditive.sub_comp, assoc, hx‚ÇÇ, sub_eq_zero]
    congr 1
    refine' Eq.symm
      ((((X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).naturality ((Arrow‚ÇÉ.Œ¥‚ÇÉToŒ¥‚ÇÇ.app (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ))))).trans _)
    erw [Functor.map_id, comp_id]
    rfl)
  dsimp at x‚ÇÉ hx‚ÇÉ
  obtain ‚ü®e, he‚ü© : ‚àÉ (e : Arrow.mk ((f‚ÇÅ ‚â´ f‚ÇÇ) ‚â´ f‚ÇÉ) ‚âÖ Arrow.mk (f‚ÇÅ ‚â´ f‚ÇÇ ‚â´ f‚ÇÉ)),
    e = _ := ‚ü®Arrow.isoMk (Iso.refl _) (Iso.refl _) (by simp) , rfl‚ü©
  refine' ‚ü®A‚ÇÉ, œÄ‚ÇÉ ‚â´ œÄ‚ÇÇ ‚â´ œÄ‚ÇÅ, inferInstance,
    x‚ÇÉ ‚â´ (X.H n‚ÇÄ).map (by exact e.inv) ‚â´ (X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app _, _‚ü©
  have eq : e.inv ‚â´ Arrow‚ÇÇ.Œ¥‚ÇÅ.map (Arrow‚ÇÉ.Œ¥‚ÇÅToŒ¥‚ÇÄ.app (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ)) =
      Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ.app (Arrow‚ÇÇ.mk f‚ÇÅ (f‚ÇÇ ‚â´ f‚ÇÉ)) := by
    subst he
    ext <;> dsimp <;> simp
  simp only [assoc, hx‚ÇÅ, ‚Üê (X.HŒ¥‚ÇÅToCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).naturality, Functor.comp_map,
    ‚Üê Functor.map_comp_assoc, eq, ‚Üê reassoc_of% hx‚ÇÉ, sub_comp, comp_sub]
  symm
  erw [sub_eq_self]
  simp only [‚Üê cancel_mono ((X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app _), assoc, zero_comp,
    HŒ¥‚ÇÅToCycles_iCycles_app]
  erw [X.zero‚ÇÇ n‚ÇÄ (Arrow‚ÇÇ.mk f‚ÇÇ f‚ÇÉ), comp_zero, comp_zero]

lemma shortComplex‚ÇÑŒ®_exact‚ÇÇ : (X.shortComplex‚ÇÑŒ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ).shortComplex‚ÇÇ.Exact := by
  rw [exact_iff_exact_evaluation]
  rintro ‚ü®f‚ÇÅ, f‚ÇÇ, f‚ÇÉ‚ü©
  rw [ShortComplex.exact_iff_exact_up_to_refinements]
  intro A‚ÇÄ x‚ÇÄ hx‚ÇÄ
  dsimp [Arrow‚ÇÉ.Œ¥‚ÇÉ] at x‚ÇÄ hx‚ÇÄ
  obtain ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü© : ‚àÉ x‚ÇÅ, x‚ÇÅ = x‚ÇÄ ‚â´ (X.opcyclesToHŒ¥‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÇ.mk f‚ÇÅ f‚ÇÇ) := ‚ü®_, rfl‚ü©
  obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, hœÄ‚ÇÅ, x‚ÇÇ, hx‚ÇÇ‚ü© :=
    (X.exact‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ (Arrow‚ÇÇ.mk (f‚ÇÅ ‚â´ f‚ÇÇ) f‚ÇÉ)).exact_up_to_refinements x‚ÇÅ (by
      dsimp
      let e : Arrow.mk ((f‚ÇÅ ‚â´ f‚ÇÇ) ‚â´ f‚ÇÉ) ‚âÖ Arrow.mk (f‚ÇÅ ‚â´ f‚ÇÇ ‚â´ f‚ÇÉ) :=
        Arrow.isoMk (Iso.refl _) (Iso.refl _) (by simp)
      have eq := x‚ÇÄ ‚â´= (X.opcyclesToHŒ¥‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).naturality
        (Arrow‚ÇÉ.Œ¥‚ÇÉToŒ¥‚ÇÇ.app (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ)) =‚â´ (X.H n‚ÇÅ).map e.inv
      simp only [assoc, reassoc_of% hx‚ÇÄ, zero_comp, Functor.comp_map, ‚Üê Functor.map_comp] at eq
      simp only [hx‚ÇÅ, assoc, eq]
      congr
      ext <;> dsimp <;> simp)
  dsimp at x‚ÇÇ hx‚ÇÇ
  refine' ‚ü®A‚ÇÅ, œÄ‚ÇÅ, hœÄ‚ÇÅ,
    (X.kernelSequenceCycles_obj_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ (Arrow‚ÇÇ.mk f‚ÇÇ f‚ÇÉ)).lift x‚ÇÇ _, _‚ü©
  ¬∑ dsimp
    have eq := (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).naturality (Arrow‚ÇÉ.Œ¥‚ÇÅToŒ¥‚ÇÄ.app (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ))
    dsimp at eq
    erw [Functor.map_id, id_comp] at eq
    erw [eq, ‚Üê reassoc_of% hx‚ÇÇ, hx‚ÇÅ]
    rw [assoc]
    erw [X.opcyclesToHŒ¥‚ÇÅ_HŒ¥‚ÇÅToŒ¥‚ÇÄ_app n‚ÇÄ n‚ÇÅ hn‚ÇÅ (Arrow‚ÇÇ.mk f‚ÇÅ f‚ÇÇ), comp_zero, comp_zero]
  ¬∑ dsimp
    rw [‚Üê cancel_mono ((X.opcyclesToHŒ¥‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÇ.mk f‚ÇÅ f‚ÇÇ)), assoc]
    simp only [‚Üê hx‚ÇÅ, hx‚ÇÇ]
    erw [assoc, X.œà_comp_app n‚ÇÄ n‚ÇÅ hn‚ÇÅ (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ), ShortComplex.Exact.lift_f_assoc]
    rfl

lemma shortComplex‚ÇÑŒ®_exact : (X.shortComplex‚ÇÑŒ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact where
  exact‚ÇÇ := X.shortComplex‚ÇÑŒ®_exact‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ
  exact‚ÇÉ := X.shortComplex‚ÇÑŒ®_exact‚ÇÇ n‚ÇÄ n‚ÇÅ hn‚ÇÅ

noncomputable def srcŒ¶ := cokernel (whiskerRight Arrow‚ÇÉ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ))
noncomputable def tgtŒ¶ := kernel (whiskerRight Arrow‚ÇÉ.Œ¥‚ÇÉToŒ¥‚ÇÇ (X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ))

noncomputable def toSrcŒ¶ : Arrow‚ÇÉ.Œ¥‚ÇÄ ‚ãô X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚ü∂ X.srcŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ := cokernel.œÄ _
noncomputable def fromTgtŒ¶ : X.tgtŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚ü∂ Arrow‚ÇÉ.Œ¥‚ÇÉ ‚ãô X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ := kernel.Œπ _

instance : Epi (X.toSrcŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) := by
  dsimp [toSrcŒ¶]
  infer_instance

instance : Mono (X.fromTgtŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) := by
  dsimp [fromTgtŒ¶]
  infer_instance

@[reassoc (attr := simp)]
lemma comp_toSrcŒ¶ :
    whiskerRight Arrow‚ÇÉ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ) ‚â´ X.toSrcŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ = 0 :=
  cokernel.condition _

@[reassoc (attr := simp)]
lemma comp_toSrcŒ¶_app (D : Arrow‚ÇÉ Œπ) :
    (X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).map (Arrow‚ÇÉ.Œ¥‚ÇÅToŒ¥‚ÇÄ.app D) ‚â´ (X.toSrcŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D = 0 :=
  congr_app (X.comp_toSrcŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) D

@[reassoc (attr := simp)]
lemma fromTgtŒ¶_comp :
    X.fromTgtŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚â´ whiskerRight Arrow‚ÇÉ.Œ¥‚ÇÉToŒ¥‚ÇÇ (X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ)  = 0 :=
  kernel.condition _

@[reassoc (attr := simp)]
lemma fromTgtŒ¶_comp_app (D : Arrow‚ÇÉ Œπ) :
    (X.fromTgtŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D ‚â´ (X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).map (Arrow‚ÇÉ.Œ¥‚ÇÉToŒ¥‚ÇÇ.app D) = 0 :=
  congr_app (X.fromTgtŒ¶_comp n‚ÇÄ n‚ÇÅ hn‚ÇÅ) D

@[simps, pp_dot]
noncomputable def cokernelSequenceSrcŒ¶ : ShortComplex (Arrow‚ÇÉ Œπ ‚•§ C) :=
  ShortComplex.mk _ _ (X.comp_toSrcŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ)

@[simps, pp_dot]
noncomputable def kernelSequenceTgtŒ¶ : ShortComplex (Arrow‚ÇÉ Œπ ‚•§ C) :=
  ShortComplex.mk _ _ (X.fromTgtŒ¶_comp n‚ÇÄ n‚ÇÅ hn‚ÇÅ)

lemma cokernelSequenceSrcŒ¶_exact :
    (X.cokernelSequenceSrcŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact :=
  ShortComplex.exact_of_g_is_cokernel _ (cokernelIsCokernel _)

lemma kernelSequenceTgtŒ¶_exact :
    (X.kernelSequenceTgtŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact :=
  ShortComplex.exact_of_f_is_kernel _ (kernelIsKernel _)

instance : Mono (X.kernelSequenceTgtŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).f := by
  dsimp [kernelSequenceTgtŒ¶]
  infer_instance

instance : Epi (X.cokernelSequenceSrcŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).g := by
  dsimp [cokernelSequenceSrcŒ¶]
  infer_instance

@[pp_dot]
noncomputable def Œ¶ : X.srcŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚âÖ X.tgtŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ :=
  (X.shortComplex‚ÇÑŒ®_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).cokerIsoKer

@[reassoc (attr := simp)]
lemma toSrcŒ¶_Œ¶_hom_fromTgtŒ¶ :
    X.toSrcŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚â´ (X.Œ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).hom ‚â´ X.fromTgtŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ = X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ :=
  (X.shortComplex‚ÇÑŒ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ).cokerToKer_fac

@[reassoc (attr := simp)]
lemma toSrcŒ¶_Œ¶_hom_fromTgtŒ¶_app (D : Arrow‚ÇÉ Œπ) :
  (X.toSrcŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D ‚â´ (X.Œ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).hom.app D ‚â´ (X.fromTgtŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D =
    (X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app D :=
  congr_app (X.toSrcŒ¶_Œ¶_hom_fromTgtŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) D

@[simps!]
noncomputable def Œ¥‚ÇÉPullbackKernelSequenceCycles : ShortComplex (Arrow‚ÇÉ Œπ ‚•§ C) :=
  (X.kernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).map (((whiskeringLeft _ _ C).obj (Arrow‚ÇÉ.Œ¥‚ÇÉ)))

instance : Mono (X.Œ¥‚ÇÉPullbackKernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).f := by
  dsimp [Œ¥‚ÇÉPullbackKernelSequenceCycles]
  infer_instance

lemma Œ¥‚ÇÉPullbackKernelSequenceCycles_exact :
    (X.Œ¥‚ÇÉPullbackKernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact :=
  (X.kernelSequenceCycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).map (((whiskeringLeft _ _ C).obj (Arrow‚ÇÉ.Œ¥‚ÇÉ)))

noncomputable def Œ¥‚ÇÉPullbackCyclesIsoShortComplexECycles :
    Arrow‚ÇÉ.Œ¥‚ÇÉ ‚ãô X.cycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ ‚âÖ (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).cycles :=
  IsLimit.conePointUniqueUpToIso (X.Œ¥‚ÇÉPullbackKernelSequenceCycles_exact n‚ÇÅ n‚ÇÇ hn‚ÇÇ).fIsKernel
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).cyclesIsKernel

@[reassoc (attr := simp)]
lemma Œ¥‚ÇÉPullbackCyclesIsoShortComplexECycles_hom_comp_iCycles :
  (X.Œ¥‚ÇÉPullbackCyclesIsoShortComplexECycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).hom ‚â´
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).iCycles =
      whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÉ (X.iCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ) :=
  IsLimit.conePointUniqueUpToIso_hom_comp _ _ WalkingParallelPair.zero

noncomputable def cyclesœÄ : Arrow‚ÇÉ.Œ¥‚ÇÉ ‚ãô X.cycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ ‚ü∂ X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ :=
  (X.Œ¥‚ÇÉPullbackCyclesIsoShortComplexECycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).hom ‚â´
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).homologyœÄ

instance : Epi (X.cyclesœÄ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ) := by
  dsimp [cyclesœÄ]
  infer_instance

@[reassoc (attr := simp)]
lemma Œ¥_HŒ¥‚ÇÅToCycles :
  (whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÅ (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) ‚â´ whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÉ (X.HŒ¥‚ÇÅToCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ)) =
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).toCycles ‚â´
      (X.Œ¥‚ÇÉPullbackCyclesIsoShortComplexECycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).inv := by
  simp only [‚Üê cancel_mono (X.Œ¥‚ÇÉPullbackCyclesIsoShortComplexECycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).hom, assoc,
    Iso.inv_hom_id, comp_id, ‚Üê cancel_mono (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).iCycles,
    Œ¥‚ÇÉPullbackCyclesIsoShortComplexECycles_hom_comp_iCycles, ShortComplex.toCycles_i,
    ‚Üê whiskerLeft_comp, HŒ¥‚ÇÅToCycles_iCycles, HŒ¥‚ÇÅToCycles_iCycles]
  dsimp [shortComplexE]
  ext D
  refine' ((X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).naturality (Arrow‚ÇÉ.Œ¥‚ÇÅToŒ¥‚ÇÄ.app D)).symm.trans _
  erw [Functor.map_id, id_comp]
  rfl

@[simps]
noncomputable def cokernelSequenceE : ShortComplex (Arrow‚ÇÉ Œπ ‚•§ C) :=
  ShortComplex.mk
    (whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÅ (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) ‚â´ whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÉ (X.HŒ¥‚ÇÅToCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ))
    (X.cyclesœÄ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ) (by simp [cyclesœÄ])

instance : Epi (X.cokernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).g := by
  dsimp [cokernelSequenceE]
  infer_instance

lemma cokernelSequenceE_exact : (X.cokernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).Exact := by
  let S := ShortComplex.mk _ _ (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).toCycles_comp_homologyœÄ
  refine' ShortComplex.exact_of_iso (Iso.symm _) (S.exact_of_g_is_cokernel
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).homologyIsCokernel)
  refine' ShortComplex.isoMk (Iso.refl _)
    (X.Œ¥‚ÇÉPullbackCyclesIsoShortComplexECycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ) (Iso.refl _) _ _
  ¬∑ simp
  ¬∑ simp [cyclesœÄ]

@[simps!]
noncomputable def cokernelSequenceEObj (D : Arrow‚ÇÉ Œπ) : ShortComplex C :=
  (X.cokernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).map ((evaluation _ _).obj D)

instance (D : Arrow‚ÇÉ Œπ) : Epi (X.cokernelSequenceEObj n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ D).g := by
  dsimp [cokernelSequenceEObj]
  infer_instance

lemma cokernelSequenceEObj_exact (D : Arrow‚ÇÉ Œπ) :
  (X.cokernelSequenceEObj n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ D).Exact :=
  (X.cokernelSequenceE_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).map ((evaluation _ _).obj D)

@[simps!]
noncomputable def Œ¥‚ÇÄPullbackCokernelSequenceOpcycles : ShortComplex (Arrow‚ÇÉ Œπ ‚•§ C) :=
  (X.cokernelSequenceOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).map (((whiskeringLeft _ _ C).obj (Arrow‚ÇÉ.Œ¥‚ÇÄ)))

instance : Epi (X.Œ¥‚ÇÄPullbackCokernelSequenceOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).g := by
  dsimp [Œ¥‚ÇÄPullbackCokernelSequenceOpcycles]
  infer_instance

lemma Œ¥‚ÇÄPullbackCokernelSequenceOpcycles_exact :
    (X.Œ¥‚ÇÄPullbackCokernelSequenceOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact :=
  (X.cokernelSequenceOpcycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).map (((whiskeringLeft _ _ C).obj (Arrow‚ÇÉ.Œ¥‚ÇÄ)))

noncomputable def Œ¥‚ÇÄPullbackOpcyclesIsoShortComplexEOpcycles :
    Arrow‚ÇÉ.Œ¥‚ÇÄ ‚ãô X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚âÖ (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).opcycles :=
  IsColimit.coconePointUniqueUpToIso (X.Œ¥‚ÇÄPullbackCokernelSequenceOpcycles_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).gIsCokernel
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).opcyclesIsCokernel

@[reassoc (attr := simp)]
lemma comp_Œ¥‚ÇÄPullbackOpcyclesIsoShortComplexEOpcycles_inv :
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).pOpcycles ‚â´
      (X.Œ¥‚ÇÄPullbackOpcyclesIsoShortComplexEOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).inv =
        whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÄ (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ) :=
  IsColimit.comp_coconePointUniqueUpToIso_inv _
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).opcyclesIsCokernel WalkingParallelPair.one

noncomputable def opcyclesŒπ : X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ‚ü∂ Arrow‚ÇÉ.Œ¥‚ÇÄ ‚ãô X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ :=
  (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).homologyŒπ ‚â´
    (X.Œ¥‚ÇÄPullbackOpcyclesIsoShortComplexEOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).inv

instance : Mono (X.opcyclesŒπ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ) := by
  dsimp [opcyclesŒπ]
  infer_instance

@[reassoc (attr := simp)]
lemma opcyclesToHŒ¥‚ÇÅ_Œ¥ :
  (whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÄ (X.opcyclesToHŒ¥‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) ‚â´ whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÇ (X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ)) =
    (X.Œ¥‚ÇÄPullbackOpcyclesIsoShortComplexEOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).hom ‚â´
      (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).fromOpcycles := by
  rw [‚Üê cancel_epi (X.Œ¥‚ÇÄPullbackOpcyclesIsoShortComplexEOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).inv,
    Iso.inv_hom_id_assoc, ‚Üê cancel_epi (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).pOpcycles,
    comp_Œ¥‚ÇÄPullbackOpcyclesIsoShortComplexEOpcycles_inv_assoc, ShortComplex.p_fromOpcycles,
    ‚Üê reassoc_of% (whiskerLeft_comp _ _ _), X.pOpcycles_opcyclesToHŒ¥‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ]
  ext D
  dsimp [shortComplexE, Arrow‚ÇÉ.Œ¥‚ÇÄ]
  refine' ((X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).naturality (Arrow‚ÇÉ.Œ¥‚ÇÉToŒ¥‚ÇÇ.app D)).trans _
  erw [Functor.map_id, comp_id]

@[simps]
noncomputable def kernelSequenceE : ShortComplex (Arrow‚ÇÉ Œπ ‚•§ C) :=
  ShortComplex.mk (X.opcyclesŒπ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ)
    (whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÄ (X.opcyclesToHŒ¥‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) ‚â´ whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÇ (X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ))
    (by simp [opcyclesŒπ])

instance : Mono (X.kernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).f := by
  dsimp [kernelSequenceE]
  infer_instance

lemma kernelSequenceE_exact : (X.kernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).Exact := by
  let S := ShortComplex.mk _ _ (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).homologyŒπ_comp_fromOpcycles
  refine' ShortComplex.exact_of_iso (Iso.symm _) (S.exact_of_f_is_kernel
    (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).homologyIsKernel)
  refine' ShortComplex.isoMk (Iso.refl _)
    (X.Œ¥‚ÇÄPullbackOpcyclesIsoShortComplexEOpcycles n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ) (Iso.refl _) _ _
  ¬∑ simp [opcyclesŒπ]
  ¬∑ simp

@[simps!]
noncomputable def kernelSequenceEObj (D : Arrow‚ÇÉ Œπ) : ShortComplex C :=
  (X.kernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).map ((evaluation _ _).obj D)

instance (D : Arrow‚ÇÉ Œπ) : Mono (X.kernelSequenceEObj n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ D).f := by
  dsimp [kernelSequenceEObj]
  infer_instance

lemma kernelSequenceEObj_exact (D : Arrow‚ÇÉ Œπ) :
  (X.kernelSequenceEObj n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ D).Exact :=
  (X.kernelSequenceE_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).map ((evaluation _ _).obj D)

@[simps!]
noncomputable def Œ¥‚ÇÄPullbackCokernelSequenceE : ShortComplex (Arrow‚ÇÑ Œπ ‚•§ C) :=
  (X.cokernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).map (((whiskeringLeft _ _ C).obj (Arrow‚ÇÑ.Œ¥‚ÇÄ)))

instance : Epi (X.Œ¥‚ÇÄPullbackCokernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).g := by
  dsimp [Œ¥‚ÇÄPullbackCokernelSequenceE]
  infer_instance

lemma Œ¥‚ÇÄPullbackCokernelSequenceE_exact :
    (X.Œ¥‚ÇÄPullbackCokernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).Exact :=
  (X.cokernelSequenceE_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).map (((whiskeringLeft _ _ C).obj (Arrow‚ÇÑ.Œ¥‚ÇÄ)))

@[simps!]
noncomputable def Œ¥‚ÇÑPullbackKernelSequenceTgtŒ¶ : ShortComplex (Arrow‚ÇÑ Œπ ‚•§ C) :=
  (X.kernelSequenceTgtŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).map (((whiskeringLeft _ _ C).obj (Arrow‚ÇÑ.Œ¥‚ÇÑ)))

lemma Œ¥‚ÇÑPullbackKernelSequenceTgtŒ¶_exact :
    (X.Œ¥‚ÇÑPullbackKernelSequenceTgtŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact :=
  (X.kernelSequenceTgtŒ¶_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).map (((whiskeringLeft _ _ C).obj (Arrow‚ÇÑ.Œ¥‚ÇÑ)))

instance : Mono (X.Œ¥‚ÇÑPullbackKernelSequenceTgtŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).f := by
  dsimp [Œ¥‚ÇÑPullbackKernelSequenceTgtŒ¶]
  infer_instance

noncomputable def dToTgtŒ¶ :
    Arrow‚ÇÑ.Œ¥‚ÇÄ ‚ãô X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ‚ü∂ Arrow‚ÇÑ.Œ¥‚ÇÑ ‚ãô X.tgtŒ¶ n‚ÇÅ n‚ÇÇ hn‚ÇÇ := by
  refine' (X.Œ¥‚ÇÑPullbackKernelSequenceTgtŒ¶_exact n‚ÇÅ n‚ÇÇ hn‚ÇÇ).lift
    ((X.Œ¥‚ÇÄPullbackCokernelSequenceE_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).desc
      (whiskerLeft Arrow‚ÇÑ.Œ¥‚ÇÑ (X.Œ® n‚ÇÅ n‚ÇÇ hn‚ÇÇ)) _) _
  ¬∑ ext ‚ü®f‚ÇÅ, f‚ÇÇ, f‚ÇÉ, f‚ÇÑ‚ü©
    have eq := congr_app (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).zero (Arrow‚ÇÉ.mk f‚ÇÅ (f‚ÇÇ ‚â´ f‚ÇÉ) f‚ÇÑ)
    dsimp [shortComplexE] at eq
    dsimp [Arrow‚ÇÉ.Œ¥‚ÇÅ, Arrow‚ÇÉ.Œ¥‚ÇÉ, Arrow‚ÇÑ.Œ¥‚ÇÑ]
    erw [assoc, X.comp_œà_app n‚ÇÅ n‚ÇÇ hn‚ÇÇ (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ), reassoc_of% eq, zero_comp]
  ¬∑ rw [‚Üê cancel_epi (X.Œ¥‚ÇÄPullbackCokernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).g,
      ShortComplex.Exact.g_desc_assoc, comp_zero]
    ext D
    exact congr_app (X.shortComplex‚ÇÑŒ® n‚ÇÅ n‚ÇÇ hn‚ÇÇ).zero‚ÇÇ (Arrow‚ÇÑ.Œ¥‚ÇÑ.obj D)

@[reassoc (attr := simp)]
lemma dToTgtŒ¶_fac :
    whiskerLeft Arrow‚ÇÑ.Œ¥‚ÇÄ (X.cyclesœÄ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ) ‚â´
      X.dToTgtŒ¶ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ‚â´ whiskerLeft Arrow‚ÇÑ.Œ¥‚ÇÑ (X.fromTgtŒ¶ n‚ÇÅ n‚ÇÇ hn‚ÇÇ) =
        whiskerLeft Arrow‚ÇÑ.Œ¥‚ÇÑ (X.Œ® n‚ÇÅ n‚ÇÇ hn‚ÇÇ) := by
  dsimp only [dToTgtŒ¶]
  erw [(X.Œ¥‚ÇÑPullbackKernelSequenceTgtŒ¶_exact n‚ÇÅ n‚ÇÇ hn‚ÇÇ).lift_f,
    (X.Œ¥‚ÇÄPullbackCokernelSequenceE_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).g_desc]

@[reassoc (attr := simp)]
lemma dToTgtŒ¶_fac_app (D : Arrow‚ÇÑ Œπ):
  (X.cyclesœÄ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app (Arrow‚ÇÑ.Œ¥‚ÇÄ.obj D) ‚â´
    (X.dToTgtŒ¶ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app D ‚â´ (X.fromTgtŒ¶ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).app (Arrow‚ÇÑ.Œ¥‚ÇÑ.obj D) =
      (X.Œ® n‚ÇÅ n‚ÇÇ hn‚ÇÇ).app (Arrow‚ÇÑ.Œ¥‚ÇÑ.obj D) :=
  congr_app (X.dToTgtŒ¶_fac n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ) D

noncomputable def dToSrcŒ¶ :
    Arrow‚ÇÑ.Œ¥‚ÇÄ ‚ãô X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ‚ü∂ Arrow‚ÇÑ.Œ¥‚ÇÑ ‚ãô X.srcŒ¶ n‚ÇÅ n‚ÇÇ hn‚ÇÇ :=
  X.dToTgtŒ¶  n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ‚â´ whiskerLeft Arrow‚ÇÑ.Œ¥‚ÇÑ (X.Œ¶ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).inv

@[reassoc (attr := simp)]
lemma dToSrcŒ¶_Œ¶_app (D : Arrow‚ÇÑ Œπ) :
    (X.dToSrcŒ¶ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app D ‚â´ (X.Œ¶ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).hom.app (Arrow‚ÇÑ.Œ¥‚ÇÑ.obj D) =
      (X.dToTgtŒ¶ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app D := by
  simp [dToSrcŒ¶]

@[reassoc]
lemma cyclesœÄ_dToSrcŒ¶_app (D : Arrow‚ÇÑ Œπ) :
    (X.cyclesœÄ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app (Arrow‚ÇÑ.Œ¥‚ÇÄ.obj D) ‚â´ (X.dToSrcŒ¶ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app D =
      (X.toSrcŒ¶ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).app (Arrow‚ÇÑ.Œ¥‚ÇÑ.obj D) := by
  rw [‚Üê cancel_mono ((X.Œ¶ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).hom.app (Arrow‚ÇÑ.Œ¥‚ÇÑ.obj D)), assoc, dToSrcŒ¶_Œ¶_app,
    ‚Üê cancel_mono ((X.fromTgtŒ¶ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).app (Arrow‚ÇÑ.Œ¥‚ÇÑ.obj D)), assoc, assoc,
    toSrcŒ¶_Œ¶_hom_fromTgtŒ¶_app, dToTgtŒ¶_fac_app]

@[simps!]
noncomputable def Œ¥‚ÇÑPullbackKernelSequenceE : ShortComplex (Arrow‚ÇÑ Œπ ‚•§ C) :=
  (X.kernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).map (((whiskeringLeft _ _ C).obj (Arrow‚ÇÑ.Œ¥‚ÇÑ)))

instance : Mono (X.Œ¥‚ÇÑPullbackKernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).f := by
  dsimp [Œ¥‚ÇÑPullbackKernelSequenceE]
  infer_instance

lemma Œ¥‚ÇÑPullbackKernelSequenceE_exact :
    (X.Œ¥‚ÇÑPullbackKernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).Exact :=
  (X.kernelSequenceE_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).map (((whiskeringLeft _ _ C).obj (Arrow‚ÇÑ.Œ¥‚ÇÑ)))

@[simps!]
noncomputable def Œ¥‚ÇÄPullbackCokernelSequenceSrcŒ¶ : ShortComplex (Arrow‚ÇÑ Œπ ‚•§ C) :=
  (X.cokernelSequenceSrcŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).map (((whiskeringLeft _ _ C).obj (Arrow‚ÇÑ.Œ¥‚ÇÄ)))

lemma Œ¥‚ÇÄPullbackCokernelSequenceSrcŒ¶_exact :
    (X.Œ¥‚ÇÄPullbackCokernelSequenceSrcŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).Exact :=
  (X.cokernelSequenceSrcŒ¶_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).map (((whiskeringLeft _ _ C).obj (Arrow‚ÇÑ.Œ¥‚ÇÄ)))

instance : Epi (X.Œ¥‚ÇÄPullbackCokernelSequenceSrcŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).g := by
  dsimp [Œ¥‚ÇÄPullbackCokernelSequenceSrcŒ¶]
  infer_instance

noncomputable def dFromSrcŒ¶ :
    Arrow‚ÇÑ.Œ¥‚ÇÄ ‚ãô X.srcŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚ü∂ Arrow‚ÇÑ.Œ¥‚ÇÑ ‚ãô X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ := by
  refine' (X.Œ¥‚ÇÄPullbackCokernelSequenceSrcŒ¶_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).desc
    ((X.Œ¥‚ÇÑPullbackKernelSequenceE_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).lift
    (whiskerLeft Arrow‚ÇÑ.Œ¥‚ÇÄ (X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ)) _) _
  ¬∑ ext ‚ü®f‚ÇÅ, f‚ÇÇ, f‚ÇÉ, f‚ÇÑ‚ü©
    have eq := congr_app (X.shortComplexE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).zero (Arrow‚ÇÉ.mk f‚ÇÅ (f‚ÇÇ ‚â´ f‚ÇÉ) f‚ÇÑ)
    dsimp [shortComplexE] at eq
    dsimp [Arrow‚ÇÉ.Œ¥‚ÇÄ, Arrow‚ÇÉ.Œ¥‚ÇÇ, Arrow‚ÇÑ.Œ¥‚ÇÄ]
    erw [X.œà_comp_app_assoc n‚ÇÄ n‚ÇÅ hn‚ÇÅ (Arrow‚ÇÉ.mk f‚ÇÇ f‚ÇÉ f‚ÇÑ), eq, comp_zero]
  ¬∑ rw [‚Üê cancel_mono (X.Œ¥‚ÇÑPullbackKernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).f, zero_comp,
      assoc, ShortComplex.Exact.lift_f]
    ext D
    exact congr_app (X.shortComplex‚ÇÑŒ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ).zero‚ÇÅ (Arrow‚ÇÑ.Œ¥‚ÇÄ.obj D)

@[reassoc (attr := simp)]
lemma dFromSrcŒ¶_fac :
      whiskerLeft Arrow‚ÇÑ.Œ¥‚ÇÄ (X.toSrcŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ) ‚â´ X.dFromSrcŒ¶ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ‚â´
    whiskerLeft Arrow‚ÇÑ.Œ¥‚ÇÑ (X.opcyclesŒπ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ) =
      whiskerLeft Arrow‚ÇÑ.Œ¥‚ÇÄ (X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ) := by
  erw [(X.Œ¥‚ÇÄPullbackCokernelSequenceSrcŒ¶_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ).g_desc_assoc,
    (X.Œ¥‚ÇÑPullbackKernelSequenceE_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).lift_f]

@[reassoc (attr := simp)]
lemma dFromSrcŒ¶_fac_app (D : Arrow‚ÇÑ Œπ):
    (X.toSrcŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÑ.Œ¥‚ÇÄ.obj D) ‚â´
    (X.dFromSrcŒ¶ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app D ‚â´
    (X.opcyclesŒπ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app (Arrow‚ÇÑ.Œ¥‚ÇÑ.obj D) =
      (X.Œ® n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÑ.Œ¥‚ÇÄ.obj D) :=
  congr_app (X.dFromSrcŒ¶_fac n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ) D

noncomputable def dFromTgtŒ¶ :
    Arrow‚ÇÑ.Œ¥‚ÇÄ ‚ãô X.tgtŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ ‚ü∂ Arrow‚ÇÑ.Œ¥‚ÇÑ ‚ãô X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ :=
  whiskerLeft Arrow‚ÇÑ.Œ¥‚ÇÄ (X.Œ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).inv ‚â´ X.dFromSrcŒ¶ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ

@[reassoc (attr := simp)]
lemma Œ¶_dFromTgtŒ¶_app (D : Arrow‚ÇÑ Œπ) :
    (X.Œ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).hom.app (Arrow‚ÇÑ.Œ¥‚ÇÄ.obj D) ‚â´ (X.dFromTgtŒ¶ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app D =
      (X.dFromSrcŒ¶ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app D := by
  simp [dFromTgtŒ¶]

@[reassoc]
lemma dFromTgtŒ¶_opcyclesŒπ_app (D : Arrow‚ÇÑ Œπ) :
    (X.dFromTgtŒ¶ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app D ‚â´ (X.opcyclesŒπ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app (Arrow‚ÇÑ.Œ¥‚ÇÑ.obj D) =
      (X.fromTgtŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÑ.Œ¥‚ÇÄ.obj D) := by
  rw [‚Üê cancel_epi ((X.Œ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).hom.app (Arrow‚ÇÑ.Œ¥‚ÇÄ.obj D)), Œ¶_dFromTgtŒ¶_app_assoc,
    ‚Üê cancel_epi ((X.toSrcŒ¶ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÑ.Œ¥‚ÇÄ.obj D)),
    dFromSrcŒ¶_fac_app, toSrcŒ¶_Œ¶_hom_fromTgtŒ¶_app]

@[pp_dot]
noncomputable def d : Arrow‚ÇÖ.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÄ ‚ãô X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ‚ü∂
    Arrow‚ÇÖ.Œ¥‚ÇÖ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÑ ‚ãô X.E n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ :=
  whiskerLeft Arrow‚ÇÖ.Œ¥‚ÇÄ (X.dToSrcŒ¶ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ) ‚â´
    whiskerLeft (Arrow‚ÇÖ.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÑ) (X.Œ¶ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).hom ‚â´
    whiskerLeft Arrow‚ÇÖ.Œ¥‚ÇÖ (X.dFromTgtŒ¶ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ)

noncomputable def EŒπH : X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ‚ü∂ Arrow‚ÇÉ.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÇ.Œ¥‚ÇÅ ‚ãô X.H n‚ÇÅ :=
  X.opcyclesŒπ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ‚â´ whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÄ (X.opcyclesToHŒ¥‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ)

instance : Mono (X.EŒπH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ) := by
  dsimp only [EŒπH]
  infer_instance

noncomputable def HœÄE : Arrow‚ÇÉ.Œ¥‚ÇÉ ‚ãô Arrow‚ÇÇ.Œ¥‚ÇÅ ‚ãô X.H n‚ÇÅ ‚ü∂ X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ :=
  whiskerLeft Arrow‚ÇÉ.Œ¥‚ÇÉ (X.HŒ¥‚ÇÅToCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ) ‚â´ X.cyclesœÄ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ

instance : Epi (X.HœÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ) := by
  dsimp only [HœÄE]
  infer_instance

lemma HœÄE_EŒπH :
    X.HœÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ‚â´ X.EŒπH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ =
      whiskerRight Arrow‚ÇÉ.Œ¥‚ÇÉŒ¥‚ÇÅToŒ¥‚ÇÇŒ¥‚ÇÄ (X.H n‚ÇÅ) := by
  dsimp [HœÄE, EŒπH, cyclesœÄ, opcyclesŒπ]
  simp only [assoc, ShortComplex.homology_œÄ_Œπ_assoc,
    comp_Œ¥‚ÇÄPullbackOpcyclesIsoShortComplexEOpcycles_inv_assoc,
    Œ¥‚ÇÉPullbackCyclesIsoShortComplexECycles_hom_comp_iCycles_assoc]
  ext D
  dsimp
  simp only [pOpcycles_opcyclesToHŒ¥‚ÇÅ_app, HŒ¥‚ÇÅToCycles_iCycles_app_assoc, ‚Üê Functor.map_comp]
  congr 1
  ext <;> dsimp <;> simp

@[reassoc (attr := simp)]
lemma HœÄE_EŒπH_app (D : Arrow‚ÇÉ Œπ):
    (X.HœÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app D ‚â´ (X.EŒπH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app D =
      (X.H n‚ÇÅ).map (Arrow‚ÇÉ.Œ¥‚ÇÉŒ¥‚ÇÅToŒ¥‚ÇÇŒ¥‚ÇÄ.app D) :=
  congr_app (X.HœÄE_EŒπH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ) D

lemma œÄ_d_Œπ_app' {x‚ÇÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ x‚ÇÖ : Œπ} (f‚ÇÅ : x‚ÇÄ ‚ü∂ x‚ÇÅ) (f‚ÇÇ : x‚ÇÅ ‚ü∂ x‚ÇÇ) (f‚ÇÉ : x‚ÇÇ ‚ü∂ x‚ÇÉ)
    (f‚ÇÑ : x‚ÇÉ ‚ü∂ x‚ÇÑ) (f‚ÇÖ : x‚ÇÑ ‚ü∂ x‚ÇÖ) :
    (X.HœÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app (Arrow‚ÇÉ.mk f‚ÇÉ f‚ÇÑ f‚ÇÖ) ‚â´
      (X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).app (Arrow‚ÇÖ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ) ‚â´
        (X.EŒπH n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ).app (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ) =
    (X.H n‚ÇÅ).map (Arrow‚ÇÉ.Œ¥‚ÇÉŒ¥‚ÇÅToŒ¥‚ÇÇŒ¥‚ÇÄ.app (Arrow‚ÇÉ.mk f‚ÇÉ f‚ÇÑ f‚ÇÖ)) ‚â´
      (X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).app (Arrow‚ÇÇ.mk (f‚ÇÇ ‚â´ f‚ÇÉ) (f‚ÇÑ ‚â´ f‚ÇÖ)) := by
  dsimp [HœÄE, EŒπH, d]
  rw [assoc, assoc, assoc]
  erw [X.cyclesœÄ_dToSrcŒ¶_app_assoc n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ (Arrow‚ÇÑ.mk f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ),
    dFromTgtŒ¶_opcyclesŒπ_app_assoc, X.toSrcŒ¶_Œ¶_hom_fromTgtŒ¶_app_assoc,
    X.comp_œà_app_assoc n‚ÇÅ n‚ÇÇ hn‚ÇÇ (Arrow‚ÇÉ.mk f‚ÇÇ f‚ÇÉ f‚ÇÑ),
    pOpcycles_opcyclesToHŒ¥‚ÇÅ_app]
  dsimp [Arrow‚ÇÉ.Œ¥‚ÇÇ]
  let œÜ : Arrow‚ÇÇ.mk f‚ÇÇ (f‚ÇÉ ‚â´ f‚ÇÑ) ‚ü∂ Arrow‚ÇÇ.mk (f‚ÇÇ ‚â´ f‚ÇÉ) (f‚ÇÑ ‚â´ f‚ÇÖ) :=
    { œÑ‚ÇÄ := ùüô _
      œÑ‚ÇÅ := f‚ÇÉ
      œÑ‚ÇÇ := f‚ÇÖ
      commf := by dsimp ; simp
      commg := by dsimp ; simp }
  exact ((X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).naturality œÜ).symm

@[reassoc]
lemma d_Œπ_app' {x‚ÇÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ x‚ÇÖ : Œπ} (f‚ÇÅ : x‚ÇÄ ‚ü∂ x‚ÇÅ)
    (f‚ÇÇ : x‚ÇÅ ‚ü∂ x‚ÇÇ) (f‚ÇÉ : x‚ÇÇ ‚ü∂ x‚ÇÉ) (f‚ÇÑ : x‚ÇÉ ‚ü∂ x‚ÇÑ) (f‚ÇÖ : x‚ÇÑ ‚ü∂ x‚ÇÖ) :
    (X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).app (Arrow‚ÇÖ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ) ‚â´
      (X.EŒπH n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ).app (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ) =
    (X.EŒπH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app (Arrow‚ÇÉ.mk f‚ÇÉ f‚ÇÑ f‚ÇÖ) ‚â´
      (X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).app (Arrow‚ÇÇ.mk (f‚ÇÇ ‚â´ f‚ÇÉ) (f‚ÇÑ ‚â´ f‚ÇÖ)) := by
  rw [‚Üê cancel_epi ((X.HœÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app (Arrow‚ÇÉ.mk f‚ÇÉ f‚ÇÑ f‚ÇÖ)),
    œÄ_d_Œπ_app', HœÄE_EŒπH_app_assoc]

@[reassoc]
lemma d_Œπ_app (D : Arrow‚ÇÖ Œπ) :
    (X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).app D ‚â´
      (X.EŒπH n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ).app ((Arrow‚ÇÖ.Œ¥‚ÇÖ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÑ).obj D) =
    (X.EŒπH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app ((Arrow‚ÇÖ.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÄ).obj D) ‚â´
      (X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).app ((Arrow‚ÇÖ.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÅ ‚ãô Arrow‚ÇÉ.Œ¥‚ÇÇ).obj D) := by
  apply d_Œπ_app'

lemma d_Œπ :
    X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ ‚â´ whiskerLeft (Arrow‚ÇÖ.Œ¥‚ÇÖ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÑ) (X.EŒπH n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ) =
      whiskerLeft (Arrow‚ÇÖ.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÄ) (X.EŒπH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ) ‚â´
        whiskerLeft (Arrow‚ÇÖ.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÅ ‚ãô Arrow‚ÇÉ.Œ¥‚ÇÇ) (X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ) := by
  ext D
  apply d_Œπ_app

@[reassoc]
lemma œÄ_d_app' {x‚ÇÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ x‚ÇÖ : Œπ} (f‚ÇÅ : x‚ÇÄ ‚ü∂ x‚ÇÅ)
    (f‚ÇÇ : x‚ÇÅ ‚ü∂ x‚ÇÇ) (f‚ÇÉ : x‚ÇÇ ‚ü∂ x‚ÇÉ) (f‚ÇÑ : x‚ÇÉ ‚ü∂ x‚ÇÑ) (f‚ÇÖ : x‚ÇÑ ‚ü∂ x‚ÇÖ) :
    (X.HœÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app (Arrow‚ÇÉ.mk f‚ÇÉ f‚ÇÑ f‚ÇÖ) ‚â´
      (X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).app (Arrow‚ÇÖ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ) =
    ((X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).app (Arrow‚ÇÇ.mk (f‚ÇÅ ‚â´ f‚ÇÇ) (f‚ÇÉ ‚â´ f‚ÇÑ))) ‚â´
      (X.HœÄE n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ).app (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ) := by
  rw [‚Üê cancel_mono ((X.EŒπH n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ).app (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ)), assoc, assoc,
    œÄ_d_Œπ_app', HœÄE_EŒπH_app]
  let œÜ : Arrow‚ÇÇ.mk (f‚ÇÅ ‚â´ f‚ÇÇ) (f‚ÇÉ ‚â´ f‚ÇÑ) ‚ü∂ Arrow‚ÇÇ.mk (f‚ÇÇ ‚â´ f‚ÇÉ) (f‚ÇÑ ‚â´ f‚ÇÖ) :=
    { œÑ‚ÇÄ := f‚ÇÅ
      œÑ‚ÇÅ := f‚ÇÉ
      œÑ‚ÇÇ := f‚ÇÖ
      commf := by simp
      commg := by simp }
  exact (X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).naturality œÜ

@[reassoc]
lemma œÄ_d_app (D : Arrow‚ÇÖ Œπ) :
    (X.HœÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app ((Arrow‚ÇÖ.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÄ).obj D) ‚â´
      (X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).app D =
      (X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).app ((Arrow‚ÇÖ.Œ¥‚ÇÖ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÅ ‚ãô Arrow‚ÇÉ.Œ¥‚ÇÇ).obj D) ‚â´
      (X.HœÄE n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ).app ((Arrow‚ÇÖ.Œ¥‚ÇÖ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÑ).obj D) := by
  apply œÄ_d_app'

@[reassoc]
lemma œÄ_d  :
    whiskerLeft (Arrow‚ÇÖ.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÄ) (X.HœÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ) ‚â´
      X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ =
    (whiskerLeft (Arrow‚ÇÖ.Œ¥‚ÇÖ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÅ ‚ãô Arrow‚ÇÉ.Œ¥‚ÇÇ) (X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ)) ‚â´
      whiskerLeft (Arrow‚ÇÖ.Œ¥‚ÇÖ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÑ) (X.HœÄE n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ) := by
  ext D
  apply œÄ_d_app

@[reassoc]
lemma d_comp_d_app' {x‚ÇÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ x‚ÇÖ x‚ÇÜ x‚Çá : Œπ} (f‚ÇÅ : x‚ÇÄ ‚ü∂ x‚ÇÅ)
    (f‚ÇÇ : x‚ÇÅ ‚ü∂ x‚ÇÇ) (f‚ÇÉ : x‚ÇÇ ‚ü∂ x‚ÇÉ) (f‚ÇÑ : x‚ÇÉ ‚ü∂ x‚ÇÑ) (f‚ÇÖ : x‚ÇÑ ‚ü∂ x‚ÇÖ) (f‚ÇÜ : x‚ÇÖ ‚ü∂ x‚ÇÜ) (f‚Çá : x‚ÇÜ ‚ü∂ x‚Çá) :
    (X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).app (Arrow‚ÇÖ.mk f‚ÇÉ f‚ÇÑ f‚ÇÖ f‚ÇÜ f‚Çá) ‚â´
      (X.d n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ).app (Arrow‚ÇÖ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ) = 0 := by
  rw [‚Üê cancel_mono ((X.EŒπH n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÉ hn‚ÇÑ).app (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ)), assoc, zero_comp,
    d_Œπ_app', d_Œπ_app'_assoc, shortComplexE_zero_app', comp_zero]

@[reassoc]
lemma d_comp_d_app (D : Arrow‚Çá Œπ) :
    (X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).app ((Arrow‚Çá.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÜ.Œ¥‚ÇÄ).obj D) ‚â´
      (X.d n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ).app ((Arrow‚Çá.Œ¥‚Çá ‚ãô Arrow‚ÇÜ.Œ¥‚ÇÜ).obj D) = 0 := by
  apply X.d_comp_d_app'

@[reassoc]
lemma d_comp_d :
    whiskerLeft (Arrow‚Çá.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÜ.Œ¥‚ÇÄ) (X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ) ‚â´
      whiskerLeft (Arrow‚Çá.Œ¥‚Çá ‚ãô Arrow‚ÇÜ.Œ¥‚ÇÜ) (X.d n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ) = 0 := by
  ext D
  apply d_comp_d_app

section

variable {x‚ÇÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ : Œπ} (f‚ÇÅ : x‚ÇÄ ‚ü∂ x‚ÇÅ) (f‚ÇÇ : x‚ÇÅ ‚ü∂ x‚ÇÇ) (f‚ÇÉ : x‚ÇÇ ‚ü∂ x‚ÇÉ)

@[simps]
noncomputable def kernelSequenceE' : ShortComplex C where
  X‚ÇÅ := (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ)
  X‚ÇÇ := (X.H n‚ÇÅ).obj (Arrow.mk (f‚ÇÇ ‚â´ f‚ÇÉ))
  X‚ÇÉ := (X.H n‚ÇÅ).obj (Arrow.mk f‚ÇÉ) ‚äû (X.H n‚ÇÇ).obj (Arrow.mk f‚ÇÅ)
  f := (X.EŒπH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ)
  g := biprod.lift ((X.H n‚ÇÅ).map (Arrow‚ÇÇ.Œ¥‚ÇÅToŒ¥‚ÇÄ.app (Arrow‚ÇÇ.mk f‚ÇÇ f‚ÇÉ)))
      ((X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ).app (Arrow‚ÇÇ.mk f‚ÇÅ (f‚ÇÇ ‚â´ f‚ÇÉ)))
  zero := by
    ext
    ¬∑ dsimp [EŒπH]
      erw [assoc, assoc, biprod.lift_fst, zero_comp,
        X.opcyclesToHŒ¥‚ÇÅ_HŒ¥‚ÇÅToŒ¥‚ÇÄ_app n‚ÇÄ n‚ÇÅ hn‚ÇÅ, comp_zero]
    ¬∑ dsimp [EŒπH]
      rw [assoc, assoc, biprod.lift_snd, zero_comp]
      exact (X.kernelSequenceEObj n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ)).zero

instance : Mono (X.kernelSequenceE' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).f := by
  dsimp [kernelSequenceE']
  infer_instance

lemma kernelSequenceE'_exact :
    (X.kernelSequenceE' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).Exact := by
  rw [ShortComplex.exact_iff_exact_up_to_refinements]
  intro A‚ÇÄ y‚ÇÄ hy‚ÇÄ
  dsimp at y‚ÇÄ hy‚ÇÄ
  have hy‚ÇÄ‚ÇÅ := hy‚ÇÄ =‚â´ biprod.fst
  have hy‚ÇÄ‚ÇÇ := hy‚ÇÄ =‚â´ biprod.snd
  simp only [assoc, biprod.lift_fst, zero_comp, biprod.lift_snd] at hy‚ÇÄ‚ÇÅ hy‚ÇÄ‚ÇÇ
  obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, hœÄ‚ÇÅ, y‚ÇÅ, hy‚ÇÅ‚ü© := (X.kernelSequenceOpcyclesObj_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ
    (Arrow‚ÇÇ.mk f‚ÇÇ f‚ÇÉ)).exact_up_to_refinements y‚ÇÄ hy‚ÇÄ‚ÇÅ
  dsimp at y‚ÇÅ hy‚ÇÅ
  obtain ‚ü®A‚ÇÇ, œÄ‚ÇÇ, hœÄ‚ÇÇ, y‚ÇÇ, hy‚ÇÇ‚ü© := (X.kernelSequenceEObj_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ
    (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ)).exact_up_to_refinements y‚ÇÅ (by
    dsimp
    erw [‚Üê reassoc_of% hy‚ÇÅ, hy‚ÇÄ‚ÇÇ, comp_zero])
  dsimp at y‚ÇÇ hy‚ÇÇ
  refine' ‚ü®A‚ÇÇ, œÄ‚ÇÇ ‚â´ œÄ‚ÇÅ, epi_comp _ _, y‚ÇÇ, _‚ü©
  dsimp [EŒπH]
  rw [assoc, hy‚ÇÅ, reassoc_of% hy‚ÇÇ]
  rfl

@[simps]
noncomputable def cokernelSequenceE' : ShortComplex C where
  X‚ÇÅ := (X.H n‚ÇÅ).obj (Arrow.mk f‚ÇÅ) ‚äû (X.H n‚ÇÄ).obj (Arrow.mk f‚ÇÉ)
  X‚ÇÇ := (X.H n‚ÇÅ).obj (Arrow.mk (f‚ÇÅ ‚â´ f‚ÇÇ))
  X‚ÇÉ := (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ)
  f := biprod.desc ((X.H n‚ÇÅ).map (Arrow‚ÇÇ.Œ¥‚ÇÇToŒ¥‚ÇÅ.app (Arrow‚ÇÇ.mk f‚ÇÅ f‚ÇÇ)))
    ((X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÇ.mk (f‚ÇÅ ‚â´ f‚ÇÇ) f‚ÇÉ))
  g := (X.HœÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ)
  zero := by
    ext
    ¬∑ dsimp [HœÄE]
      erw [biprod.inl_desc_assoc, comp_zero,
        X.HŒ¥‚ÇÇToŒ¥‚ÇÅ_HŒ¥‚ÇÅToCycles_app_assoc n‚ÇÅ n‚ÇÇ hn‚ÇÇ, zero_comp]
    ¬∑ dsimp [HœÄE]
      erw [biprod.inr_desc_assoc, comp_zero, ‚Üê assoc]
      exact (X.cokernelSequenceEObj n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ)).zero

instance : Epi (X.cokernelSequenceE' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).g := by
  dsimp [cokernelSequenceE']
  infer_instance

lemma cokernelSequenceE'_exact :
    (X.cokernelSequenceE' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÅ f‚ÇÇ f‚ÇÉ).Exact := by
  rw [ShortComplex.exact_iff_exact_up_to_refinements]
  intro A‚ÇÄ y‚ÇÄ hy‚ÇÄ
  dsimp at y‚ÇÄ hy‚ÇÄ
  obtain ‚ü®y‚ÇÅ, hy‚ÇÅ‚ü© : ‚àÉ y‚ÇÅ, y‚ÇÅ = y‚ÇÄ ‚â´ (X.HŒ¥‚ÇÅToCycles n‚ÇÅ n‚ÇÇ hn‚ÇÇ).app (Arrow‚ÇÇ.mk f‚ÇÅ f‚ÇÇ) := ‚ü®_, rfl‚ü©
  obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, hœÄ‚ÇÅ, y‚ÇÇ, hy‚ÇÇ‚ü© :=
    (X.cokernelSequenceEObj_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ
      (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ)).exact_up_to_refinements y‚ÇÅ (by
        rw [hy‚ÇÅ, assoc]
        exact hy‚ÇÄ)
  dsimp at y‚ÇÇ hy‚ÇÇ
  obtain ‚ü®A‚ÇÇ, œÄ‚ÇÇ, hœÄ‚ÇÇ, y‚ÇÉ, hy‚ÇÉ‚ü© := (X.cokernelSequenceCyclesObj_exact n‚ÇÅ n‚ÇÇ hn‚ÇÇ (Arrow‚ÇÇ.mk f‚ÇÅ f‚ÇÇ)).exact_up_to_refinements
    (œÄ‚ÇÅ ‚â´ y‚ÇÄ - by exact y‚ÇÇ ‚â´ (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (Arrow‚ÇÇ.mk (f‚ÇÅ ‚â´ f‚ÇÇ) f‚ÇÉ)) (by
      dsimp
      erw [sub_comp, assoc, ‚Üê hy‚ÇÅ, hy‚ÇÇ, assoc, sub_eq_zero]
      rfl)
  dsimp at y‚ÇÉ hy‚ÇÉ
  refine' ‚ü®A‚ÇÇ, œÄ‚ÇÇ ‚â´ œÄ‚ÇÅ, epi_comp _ _, biprod.lift y‚ÇÉ (œÄ‚ÇÇ ‚â´ y‚ÇÇ), _‚ü©
  rw [comp_sub, sub_eq_iff_eq_add ] at hy‚ÇÉ
  dsimp
  rw [assoc, hy‚ÇÉ, biprod.lift_desc, assoc]

end

noncomputable def kernelSequenceD : ShortComplex (Arrow‚ÇÖ Œπ ‚•§ C) where
  X‚ÇÅ := Arrow‚ÇÖ.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÅ ‚ãô X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ
  X‚ÇÇ := Arrow‚ÇÖ.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÄ ‚ãô X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ
  X‚ÇÉ := Arrow‚ÇÖ.Œ¥‚ÇÖ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÑ ‚ãô X.E n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ
  f := whiskerLeft Arrow‚ÇÖ.Œ¥‚ÇÄ (whiskerRight Arrow‚ÇÑ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ))
  g := X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ
  zero := by
    ext ‚ü®f‚ÇÅ, f‚ÇÇ, f‚ÇÉ, f‚ÇÑ, f‚ÇÖ‚ü©
    dsimp [Arrow‚ÇÖ.Œ¥‚ÇÄ]
    rw [‚Üê cancel_mono ((X.EŒπH n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ).app (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ)), assoc, zero_comp,
      X.d_Œπ_app' n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ]
    erw [NatTrans.naturality_assoc, Functor.map_id, id_comp]
    dsimp [EŒπH, Arrow‚ÇÉ.Œ¥‚ÇÄ, Arrow‚ÇÉ.Œ¥‚ÇÅ]
    rw [assoc]
    exact (X.kernelSequenceEObj n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ (Arrow‚ÇÉ.mk (f‚ÇÇ ‚â´ f‚ÇÉ) f‚ÇÑ f‚ÇÖ)).zero

instance : Mono (X.kernelSequenceD n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).f := by
  refine @NatTrans.mono_of_mono_app _ _ _ _ _ _ _ (fun D => ?_)
  dsimp [kernelSequenceD, E]
  rw [ShortComplex.mono_homology_map_iff]
  apply ShortComplex.mono_homologyMap_of_mono_opcyclesMap'
  refine @IsIso.mono_of_iso _ _ _ _ _ ?_
  apply ShortComplex.isIso_opcyclesMap_of_isIso_of_epi'
  all_goals
    dsimp [shortComplexE]
    erw [Functor.map_id]
    infer_instance

lemma kernelSequenceD_exact : (X.kernelSequenceD n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).Exact := by
  rw [exact_iff_exact_evaluation]
  rintro ‚ü®f‚ÇÅ, f‚ÇÇ, f‚ÇÉ, f‚ÇÑ, f‚ÇÖ‚ü©
  rw [ShortComplex.exact_iff_exact_up_to_refinements]
  intro A‚ÇÄ y‚ÇÄ hy‚ÇÄ
  dsimp [Arrow‚ÇÑ.Œ¥‚ÇÄ, kernelSequenceD] at y‚ÇÄ hy‚ÇÄ
  have hy‚ÇÄ‚ÇÅ := y‚ÇÄ ‚â´= (X.kernelSequenceE' n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ).zero =‚â´ biprod.fst
  dsimp at hy‚ÇÄ‚ÇÅ
  rw [‚Üê cancel_mono ((X.EŒπH n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ).app (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ)), zero_comp, assoc,
    X.d_Œπ_app'] at hy‚ÇÄ
  simp only [assoc, biprod.lift_fst, zero_comp, comp_zero] at hy‚ÇÄ‚ÇÅ
  obtain ‚ü®y‚ÇÅ, hy‚ÇÅ‚ü© :=
    (X.kernelSequenceE'_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ (f‚ÇÇ ‚â´ f‚ÇÉ) f‚ÇÑ f‚ÇÖ).lift'
      (y‚ÇÄ ‚â´ (X.EŒπH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app _) (by
      dsimp
      ext
      ¬∑ simp only [assoc, biprod.lift_fst, zero_comp]
        exact hy‚ÇÄ‚ÇÅ
      ¬∑ simp only [assoc, biprod.lift_snd, zero_comp]
        exact hy‚ÇÄ)
  dsimp at y‚ÇÅ hy‚ÇÅ
  refine' ‚ü®A‚ÇÄ, ùüô _, inferInstance, y‚ÇÅ, _‚ü©
  rw [id_comp, ‚Üê cancel_mono ((X.EŒπH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app (Arrow‚ÇÉ.mk f‚ÇÉ f‚ÇÑ f‚ÇÖ)), ‚Üê hy‚ÇÅ, assoc]
  congr 1
  refine' (((X.EŒπH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).naturality
    (Arrow‚ÇÑ.Œ¥‚ÇÅToŒ¥‚ÇÄ.app (Arrow‚ÇÑ.mk f‚ÇÇ f‚ÇÉ f‚ÇÑ f‚ÇÖ))).trans _).symm
  erw [Functor.map_id, comp_id]
  rfl

noncomputable def cokernelSequenceD : ShortComplex (Arrow‚ÇÖ Œπ ‚•§ C) where
  X‚ÇÅ := Arrow‚ÇÖ.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÄ ‚ãô X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ
  X‚ÇÇ := Arrow‚ÇÖ.Œ¥‚ÇÖ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÑ ‚ãô X.E n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ
  X‚ÇÉ := Arrow‚ÇÖ.Œ¥‚ÇÖ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÉ ‚ãô X.E n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ
  f := X.d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ
  g := whiskerLeft Arrow‚ÇÖ.Œ¥‚ÇÖ (whiskerRight Arrow‚ÇÑ.Œ¥‚ÇÑToŒ¥‚ÇÉ (X.E n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ))
  zero := by
    ext ‚ü®f‚ÇÅ, f‚ÇÇ, f‚ÇÉ, f‚ÇÑ, f‚ÇÖ‚ü©
    dsimp [Arrow‚ÇÖ.Œ¥‚ÇÖ]
    rw [‚Üê cancel_epi ((X.HœÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app (Arrow‚ÇÉ.mk f‚ÇÉ f‚ÇÑ f‚ÇÖ)), comp_zero,
      X.œÄ_d_app'_assoc, ‚Üê NatTrans.naturality]
    erw [Functor.map_id, id_comp]
    dsimp [HœÄE, Arrow‚ÇÑ.Œ¥‚ÇÉ, Arrow‚ÇÉ.Œ¥‚ÇÉ]
    rw [‚Üê assoc]
    exact (X.cokernelSequenceEObj n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ (Arrow‚ÇÉ.mk f‚ÇÅ f‚ÇÇ (f‚ÇÉ ‚â´ f‚ÇÑ))).zero

instance : Epi (X.cokernelSequenceD n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).g := by
  refine @NatTrans.epi_of_epi_app _ _ _ _ _ _ _ (fun D => ?_)
  dsimp [cokernelSequenceD, E]
  rw [ShortComplex.epi_homology_map_iff]
  apply ShortComplex.epi_homologyMap_of_epi_cyclesMap'
  refine @IsIso.epi_of_iso _ _ _ _ _ ?_
  apply ShortComplex.isIso_cyclesMap_of_isIso_of_mono'
  all_goals
    dsimp [shortComplexE]
    erw [Functor.map_id]
    infer_instance

lemma cokernelSequenceD_exact : (X.cokernelSequenceD n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).Exact := by
  rw [exact_iff_exact_evaluation]
  rintro ‚ü®f‚ÇÅ, f‚ÇÇ, f‚ÇÉ, f‚ÇÑ, f‚ÇÖ‚ü©
  rw [ShortComplex.exact_iff_exact_up_to_refinements]
  intro A‚ÇÄ y‚ÇÄ hy‚ÇÄ
  dsimp [Arrow‚ÇÖ.Œ¥‚ÇÖ, Arrow‚ÇÑ.Œ¥‚ÇÑ, cokernelSequenceD] at y‚ÇÄ hy‚ÇÄ
  obtain ‚ü®A‚ÇÅ, œÄ‚ÇÅ, hœÄ‚ÇÅ, y‚ÇÅ, hy‚ÇÅ‚ü© := surjective_up_to_refinements_of_epi
    (X.cokernelSequenceE' n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ).g y‚ÇÄ
  obtain ‚ü®A‚ÇÇ, œÄ‚ÇÇ, hœÄ‚ÇÇ, y‚ÇÇ, hy‚ÇÇ‚ü© :=
    (X.cokernelSequenceE'_exact n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ f‚ÇÅ f‚ÇÇ (f‚ÇÉ ‚â´ f‚ÇÑ)).exact_up_to_refinements y‚ÇÅ (by
      dsimp at hy‚ÇÅ ‚ä¢
      have eq := (X.HœÄE n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ).naturality (Arrow‚ÇÑ.Œ¥‚ÇÑToŒ¥‚ÇÉ.app (Arrow‚ÇÑ.mk f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ))
      erw [Functor.map_id, id_comp] at eq
      erw [eq, ‚Üê reassoc_of% hy‚ÇÅ, hy‚ÇÄ, comp_zero])
  dsimp at y‚ÇÇ hy‚ÇÇ
  obtain ‚ü®y‚ÇÉ, y‚ÇÑ, rfl‚ü© : ‚àÉ y‚ÇÉ y‚ÇÑ, y‚ÇÇ = biprod.lift y‚ÇÉ y‚ÇÑ :=
    ‚ü®y‚ÇÇ ‚â´ biprod.fst, y‚ÇÇ ‚â´ biprod.snd, by
      ext <;> dsimp <;> simp‚ü©
  simp only [biprod.lift_desc] at hy‚ÇÇ
  refine' ‚ü®A‚ÇÇ, œÄ‚ÇÇ ‚â´ œÄ‚ÇÅ, epi_comp _ _, y‚ÇÑ ‚â´ (X.HœÄE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).app (Arrow‚ÇÉ.mk f‚ÇÉ f‚ÇÑ f‚ÇÖ), _‚ü©
  rw [assoc, hy‚ÇÅ, reassoc_of% hy‚ÇÇ, assoc]
  dsimp [cokernelSequenceD]
  simp only [X.œÄ_d_app' n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ, add_comp, assoc, add_left_eq_self]
  dsimp [HœÄE]
  erw [X.HŒ¥‚ÇÇToŒ¥‚ÇÅ_HŒ¥‚ÇÅToCycles_app_assoc, zero_comp, comp_zero]

noncomputable def Œ¥‚ÇáŒ¥‚ÇÜPullbackKernelSequenceD : ShortComplex (Arrow‚Çá Œπ ‚•§ C) :=
  (X.kernelSequenceD n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).map
    (((whiskeringLeft _ _ C).obj (Arrow‚Çá.Œ¥‚Çá ‚ãô Arrow‚ÇÜ.Œ¥‚ÇÜ)))

instance : Mono (X.Œ¥‚ÇáŒ¥‚ÇÜPullbackKernelSequenceD n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).f := by
  dsimp [Œ¥‚ÇáŒ¥‚ÇÜPullbackKernelSequenceD]
  infer_instance

lemma Œ¥‚ÇáŒ¥‚ÇÜPullbackKernelSequenceD_exact :
  (X.Œ¥‚ÇáŒ¥‚ÇÜPullbackKernelSequenceD n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).Exact :=
  (X.kernelSequenceD_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).map
    (((whiskeringLeft _ _ C).obj (Arrow‚Çá.Œ¥‚Çá ‚ãô Arrow‚ÇÜ.Œ¥‚ÇÜ)))

noncomputable def Œ¥‚ÇÄŒ¥‚ÇÄPullbackCokernelSequenceD : ShortComplex (Arrow‚Çá Œπ ‚•§ C) :=
  (X.cokernelSequenceD n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).map
    (((whiskeringLeft _ _ C).obj (Arrow‚Çá.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÜ.Œ¥‚ÇÄ)))

instance : Epi (X.Œ¥‚ÇÄŒ¥‚ÇÄPullbackCokernelSequenceD n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).g := by
  dsimp [Œ¥‚ÇÄŒ¥‚ÇÄPullbackCokernelSequenceD]
  infer_instance

lemma Œ¥‚ÇÄŒ¥‚ÇÄPullbackCokernelSequenceD_exact :
  (X.Œ¥‚ÇÄŒ¥‚ÇÄPullbackCokernelSequenceD n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).Exact :=
  (X.cokernelSequenceD_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).map
    (((whiskeringLeft _ _ C).obj (Arrow‚Çá.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÜ.Œ¥‚ÇÄ)))

noncomputable def shortComplexEEE : ShortComplex (Arrow‚Çá Œπ ‚•§ C) :=
  ShortComplex.mk _ _ (X.d_comp_d n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ)

noncomputable def shortComplexEEEObj (D : Arrow‚Çá Œπ) : ShortComplex C :=
  ShortComplex.mk _ _ (X.d_comp_d_app n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ D)

lemma E_fac :
  whiskerLeft (Arrow‚Çá.Œ¥‚Çá ‚ãô Arrow‚ÇÜ.Œ¥‚ÇÜ ‚ãô Arrow‚ÇÖ.Œ¥‚ÇÄ)
      (whiskerRight Arrow‚ÇÑ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ)) ‚â´
    whiskerLeft (Arrow‚Çá.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÜ.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÖ.Œ¥‚ÇÖ)
      (whiskerRight Arrow‚ÇÑ.Œ¥‚ÇÑToŒ¥‚ÇÉ (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ)) =
  whiskerLeft (Arrow‚Çá.Œ¥‚Çá ‚ãô Arrow‚ÇÜ.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÖ.Œ¥‚ÇÅ)
      (whiskerRight Arrow‚ÇÑ.Œ¥‚ÇÑToŒ¥‚ÇÉ (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ)) ‚â´
    whiskerLeft (Arrow‚Çá.Œ¥‚Çá ‚ãô Arrow‚ÇÜ.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÖ.Œ¥‚ÇÑ)
      (whiskerRight Arrow‚ÇÑ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ))
       := by
  ext D
  dsimp
  simp only [‚Üê Functor.map_comp]
  congr 1
  ext <;> dsimp <;> simp

instance : Epi (whiskerLeft (Arrow‚Çá.Œ¥‚Çá ‚ãô Arrow‚ÇÜ.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÖ.Œ¥‚ÇÅ)
      (whiskerRight Arrow‚ÇÑ.Œ¥‚ÇÑToŒ¥‚ÇÉ (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ))) := by
  refine @NatTrans.epi_of_epi_app _ _ _ _ _ _ _ (fun D => ?_)
  dsimp [E]
  rw [ShortComplex.epi_homology_map_iff]
  apply ShortComplex.epi_homologyMap_of_epi_cyclesMap'
  refine @IsIso.epi_of_iso _ _ _ _ _ ?_
  apply ShortComplex.isIso_cyclesMap_of_isIso_of_mono'
  all_goals
    dsimp [shortComplexE]
    erw [Functor.map_id]
    infer_instance

instance : Mono (whiskerLeft (Arrow‚Çá.Œ¥‚Çá ‚ãô Arrow‚ÇÜ.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÖ.Œ¥‚ÇÑ)
      (whiskerRight Arrow‚ÇÑ.Œ¥‚ÇÅToŒ¥‚ÇÄ (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ))) := by
  refine @NatTrans.mono_of_mono_app _ _ _ _ _ _ _ (fun D => ?_)
  dsimp [E]
  rw [ShortComplex.mono_homology_map_iff]
  apply ShortComplex.mono_homologyMap_of_mono_opcyclesMap'
  refine @IsIso.mono_of_iso _ _ _ _ _ ?_
  apply ShortComplex.isIso_opcyclesMap_of_isIso_of_epi'
  all_goals
    dsimp [shortComplexE]
    erw [Functor.map_id]
    infer_instance

noncomputable def homologyDataShortComplexEEE :
    (X.shortComplexEEE n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ).HomologyData :=
  ShortComplex.HomologyData.ofEpiMonoFactorisation _
    (X.Œ¥‚ÇáŒ¥‚ÇÜPullbackKernelSequenceD_exact n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ).fIsKernel
    (X.Œ¥‚ÇÄŒ¥‚ÇÄPullbackCokernelSequenceD_exact n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ).gIsCokernel
    (X.E_fac n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ)

noncomputable def homologyShortComplexEEEIso :
    (X.shortComplexEEE n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ).homology ‚âÖ
      Arrow‚Çá.Œ¥‚Çá ‚ãô Arrow‚ÇÜ.Œ¥‚ÇÄ ‚ãô Arrow‚ÇÖ.Œ¥‚ÇÅ ‚ãô Arrow‚ÇÑ.Œ¥‚ÇÉ ‚ãô X.E n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ :=
  (X.homologyDataShortComplexEEE n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ).left.homologyIso

noncomputable def homologyShortComplexEEEObjIso (D : Arrow‚Çá Œπ) :
    (X.shortComplexEEEObj n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ D).homology ‚âÖ
      (X.E n‚ÇÅ n‚ÇÇ n‚ÇÉ hn‚ÇÇ hn‚ÇÉ).obj (Arrow‚ÇÉ.mk (D.g ‚â´ D.h) D.i (D.j ‚â´ D.k)) :=
  ((X.homologyDataShortComplexEEE n‚ÇÄ n‚ÇÅ n‚ÇÇ n‚ÇÉ n‚ÇÑ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ hn‚ÇÑ).map
    ((evaluation _ _).obj D)).left.homologyIso

noncomputable def EObjIsoImage (D : Arrow‚ÇÉ Œπ) :
    (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj D ‚âÖ
      Abelian.image ((X.H n‚ÇÅ).map (Arrow‚ÇÉ.Œ¥‚ÇÉŒ¥‚ÇÅToŒ¥‚ÇÇŒ¥‚ÇÄ.app D)) :=
  Abelian.isoImageOfFac _ _ _ (X.HœÄE_EŒπH_app n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ D)

@[simps, pp_dot]
def imagesLemmaInput (D : Arrow‚ÇÉ Œπ) : Abelian.ImagesLemmaInput C where
  Y := (X.H n‚ÇÄ).obj (Arrow.mk (D.f ‚â´ D.g))
  S := (X.shortComplex‚ÇÇ n‚ÇÄ).map ((evaluation _ _).obj (Arrow‚ÇÉ.Œ¥‚ÇÇ.obj D))
  hS := (X.shortComplex‚ÇÇ_exact n‚ÇÄ).map _
  f‚ÇÅ := (X.H n‚ÇÄ).map (Arrow‚ÇÉ.Œ¥‚ÇÇŒ¥‚ÇÇToŒ¥‚ÇÉŒ¥‚ÇÅ.app D)
  f‚ÇÇ := (X.H n‚ÇÄ).map (Arrow‚ÇÉ.Œ¥‚ÇÉŒ¥‚ÇÅToŒ¥‚ÇÇŒ¥‚ÇÅ.app D)
  f‚ÇÉ := (X.H n‚ÇÄ).map (Arrow‚ÇÉ.Œ¥‚ÇÉŒ¥‚ÇÅToŒ¥‚ÇÇŒ¥‚ÇÄ.app D)
  fac‚ÇÅ := by
    dsimp
    simp only [‚Üê Functor.map_comp]
    congr 1
    ext
    ¬∑ dsimp
      simp
    ¬∑ rfl
  fac‚ÇÇ := by
    dsimp
    simp only [‚Üê Functor.map_comp]
    congr 1
    ext <;> dsimp <;> simp

lemma imagesLemmaInput_shortComplex_shortExact (D : Arrow‚ÇÉ Œπ) :
    (X.imagesLemmaInput n‚ÇÄ D).shortComplex.ShortExact :=
  (X.imagesLemmaInput n‚ÇÄ D).shortComplex_shortExact

@[simps]
noncomputable def imagesCokernelSequenceE (D : Arrow‚ÇÉ Œπ) : ShortComplex C where
  f := (X.imagesLemmaInput n‚ÇÅ D).shortComplex.f
  g := (X.imagesLemmaInput n‚ÇÅ D).shortComplex.g ‚â´ (X.EObjIsoImage n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ D).inv
  zero := by rw [ShortComplex.zero_assoc, zero_comp]

lemma imagesCokernelSequenceE_shortExact (D : Arrow‚ÇÉ Œπ) :
    (X.imagesCokernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ D).ShortExact := by
  refine' ShortComplex.shortExact_of_iso _ (X.imagesLemmaInput_shortComplex_shortExact n‚ÇÅ D)
  exact ShortComplex.isoMk (Iso.refl _) (Iso.refl _) (X.EObjIsoImage n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ D).symm
    (by dsimp ; simp) (by dsimp ; simp)

end

section Convergence

variable {C Œπ : Type _} [Category C] [Abelian C] [Preorder Œπ] [OrderBot Œπ] [OrderTop Œπ]
  (X : SpectralObject C Œπ) (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)

@[pp_dot]
noncomputable def EInfty : (Arrow Œπ ‚•§ C) := Arrow‚ÇÉ.ŒπArrow Œπ ‚ãô X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ

@[pp_dot]
noncomputable def abutment (n : ‚Ñ§) : C := (X.H n).obj (Arrow.mkOfLE ‚ä• ‚ä§ bot_le)

noncomputable def EInftyIsoAbutment :
    (X.EInfty n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj (Arrow.mkOfLE ‚ä• ‚ä§ bot_le) ‚âÖ X.abutment n‚ÇÅ :=
  X.EObjIsoH n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ((Arrow‚ÇÉ.ŒπArrow Œπ).obj (Arrow.mkOfLE ‚ä• ‚ä§ bot_le))
    (by change IsIso (ùüô _) ; infer_instance)
    (by change IsIso (ùüô _) ; infer_instance)

@[pp_dot]
noncomputable def overAbutment (n : ‚Ñ§) : Œπ ‚•§ Over (X.abutment n) where
  obj i := Over.mk ((X.H n).map ((Arrow.ŒπOfOrderBot Œπ).map (homOfLE le_top)))
  map {i j} œÜ := Over.homMk ((X.H n).map ((Arrow.ŒπOfOrderBot Œπ).map œÜ)) (by
    dsimp
    simp only [‚Üê Functor.map_comp]
    congr 1)
  map_id _ := by ext ; dsimp ; simp
  map_comp _ _ := by ext ; dsimp ; simp

@[pp_dot]
noncomputable def filtration' (n : ‚Ñ§) : Œπ ‚•§ MonoOver (X.abutment n) :=
  X.overAbutment n ‚ãô Over.abelianImageFunctor _

@[pp_dot]
noncomputable def filtration (n : ‚Ñ§) : Œπ ‚•§ C :=
  X.filtration' n ‚ãô MonoOver.forget _ ‚ãô Over.forget _

@[pp_dot]
noncomputable def filtrationŒπ (n : ‚Ñ§) (i : Œπ) : (X.filtration n).obj i ‚ü∂ X.abutment n :=
  ((X.filtration' n ‚ãô MonoOver.forget _).obj i).hom

instance (n : ‚Ñ§) (i : Œπ) : Mono (X.filtrationŒπ n i) := by
  dsimp [filtrationŒπ]
  infer_instance

noncomputable def filtrationœÄ (i j : Œπ) (œÜ : i ‚ü∂ j) :
    (X.filtration n‚ÇÅ).obj j ‚ü∂ (X.EInfty n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj (Arrow.mk œÜ) :=
  (X.imagesCokernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ((Arrow‚ÇÉ.ŒπArrow Œπ).obj (Arrow.mk œÜ))).g

noncomputable def filtrationShortComplex (i j : Œπ) (œÜ : i ‚ü∂ j) : ShortComplex C where
  X‚ÇÅ := (X.filtration n‚ÇÅ).obj i
  X‚ÇÇ := (X.filtration n‚ÇÅ).obj j
  X‚ÇÉ := (X.EInfty n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj (Arrow.mk œÜ)
  f := (X.filtration n‚ÇÅ).map œÜ
  g := X.filtrationœÄ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ _ _ œÜ
  zero := (X.imagesCokernelSequenceE n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ((Arrow‚ÇÉ.ŒπArrow Œπ).obj (Arrow.mk œÜ))).zero

lemma filtrationShortComplex_shortExact (i j : Œπ) (œÜ : i ‚ü∂ j) :
    (X.filtrationShortComplex n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ _ _ œÜ).ShortExact :=
  X.imagesCokernelSequenceE_shortExact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ ((Arrow‚ÇÉ.ŒπArrow Œπ).obj (Arrow.mk œÜ))

instance (i j : Œπ) (œÜ : i ‚ü∂ j) : Epi (X.filtrationœÄ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ _ _ œÜ) :=
  (X.filtrationShortComplex_shortExact n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ _ _ œÜ).epi_g

variable (Œπ)

structure Bounds where
  (Œ≥‚ÇÅ Œ≥‚ÇÇ : ‚Ñ§ ‚Üí Œπ)

variable {Œπ}

class IsStationary (B : Bounds Œπ) where
  isZero‚ÇÅ' (n : ‚Ñ§) {i j : Œπ} (g : i ‚ü∂ j) (Œ± : j ‚ü∂ B.Œ≥‚ÇÅ n) : IsZero ((X.H n).obj (Arrow.mk g))
  isZero‚ÇÇ' (n : ‚Ñ§) {i j : Œπ} (g : i ‚ü∂ j) (Œ≤ : B.Œ≥‚ÇÇ n ‚ü∂ i) : IsZero ((X.H n).obj (Arrow.mk g))

variable (B : Bounds Œπ) [hX : X.IsStationary B]

lemma isZero‚ÇÅ_H (n : ‚Ñ§) {i j : Œπ} (g : i ‚ü∂ j) (Œ± : j ‚ü∂ B.Œ≥‚ÇÅ n) :
    IsZero ((X.H n).obj (Arrow.mk g)) :=
  hX.isZero‚ÇÅ' n g Œ±

lemma mono_H_map‚ÇÅ (n : ‚Ñ§) {D‚ÇÅ D‚ÇÇ : Arrow Œπ} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) (hœÜ : IsIso œÜ.right)
    (Œ± : D‚ÇÇ.left ‚ü∂ B.Œ≥‚ÇÅ n) : Mono ((X.H n).map œÜ) := by
  let D‚ÇÅ' := Arrow.mk (œÜ.left ‚â´ D‚ÇÇ.hom)
  let œÜ' : D‚ÇÅ' ‚ü∂ D‚ÇÇ :=
    { left := œÜ.left
      right := ùüô _
      w := by simp }
  suffices Mono ((X.H n).map œÜ') by
    let œà : D‚ÇÅ ‚ü∂ D‚ÇÅ' :=
      { left := ùüô _
        right := œÜ.right
        w := by simp }
    have := (Arrow.isIso_iff œà).2 ‚ü®inferInstance, inferInstance‚ü©
    have hœÜ : œÜ = œà ‚â´ œÜ' := by ext <;> dsimp <;> simp
    rw [hœÜ, Functor.map_comp]
    apply mono_comp
  exact (ShortComplex.exact_iff_mono _
    (IsZero.eq_of_src (X.isZero‚ÇÅ_H B _ _ Œ±) _ _)).1
      (X.exact‚ÇÇ n (Arrow‚ÇÇ.mk œÜ.left D‚ÇÇ.hom))

lemma epi_H_map‚ÇÅ (n : ‚Ñ§) {D‚ÇÅ D‚ÇÇ : Arrow Œπ} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) (hœÜ : IsIso œÜ.right)
    (n' : ‚Ñ§) (hn' : n + 1 = n') (Œ± : D‚ÇÇ.left ‚ü∂ B.Œ≥‚ÇÅ n') : Epi ((X.H n).map œÜ) := by
  let D‚ÇÅ' := Arrow.mk (œÜ.left ‚â´ D‚ÇÇ.hom)
  let œÜ' : D‚ÇÅ' ‚ü∂ D‚ÇÇ :=
    { left := œÜ.left
      right := ùüô _
      w := by simp }
  suffices Epi ((X.H n).map œÜ') by
    let œà : D‚ÇÅ ‚ü∂ D‚ÇÅ' :=
      { left := ùüô _
        right := œÜ.right
        w := by simp }
    have := (Arrow.isIso_iff œà).2 ‚ü®inferInstance, inferInstance‚ü©
    have hœÜ : œÜ = œà ‚â´ œÜ' := by ext <;> dsimp <;> simp
    rw [hœÜ, Functor.map_comp]
    apply epi_comp
  exact (ShortComplex.exact_iff_epi _
    (IsZero.eq_of_tgt (X.isZero‚ÇÅ_H B _ _ Œ±) _ _)).1
      (X.exact‚ÇÉ n n' hn' (Arrow‚ÇÇ.mk œÜ.left D‚ÇÇ.hom))

lemma isIso_H_map‚ÇÅ (n : ‚Ñ§) {D‚ÇÅ D‚ÇÇ : Arrow Œπ} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) (hœÜ : IsIso œÜ.right)
    (Œ± : D‚ÇÇ.left ‚ü∂ B.Œ≥‚ÇÅ n) (n' : ‚Ñ§) (hn' : n + 1 = n') (Œ±' : D‚ÇÇ.left ‚ü∂ B.Œ≥‚ÇÅ n') :
    IsIso ((X.H n).map œÜ) := by
  have := X.mono_H_map‚ÇÅ B n œÜ hœÜ Œ±
  have := X.epi_H_map‚ÇÅ B n œÜ hœÜ n' hn' Œ±'
  apply isIso_of_mono_of_epi

lemma isZero_overAbutment_obj (n : ‚Ñ§) (i : Œπ) (Œ± : i ‚ü∂ B.Œ≥‚ÇÅ n) :
    IsZero ((X.overAbutment n ‚ãô Over.forget _).obj i) := by
  let œÜ : Arrow.mkOfLE ‚ä• i bot_le ‚ü∂ Arrow.mk (ùüô i) :=
    { left := homOfLE bot_le
      right := ùüô _
      w := by simp; rfl }
  have := X.mono_H_map‚ÇÅ B n œÜ (by dsimp ; infer_instance) Œ±
  rw [IsZero.iff_id_eq_zero, ‚Üê cancel_mono ((X.H n).map œÜ)]
  exact IsZero.eq_of_tgt (X.isZero_H_of_isIso n _ (by dsimp ; infer_instance)) _ _

lemma isZero_filtration_obj_eq_bot (n : ‚Ñ§) (i : Œπ) (Œ± : i ‚ü∂ B.Œ≥‚ÇÅ n) :
    IsZero ((X.filtration n).obj i) := by
  rw [IsZero.iff_id_eq_zero]
  rw [‚Üê cancel_epi (Abelian.factorThruImage _), comp_zero]
  exact IsZero.eq_of_src (X.isZero_overAbutment_obj B n i Œ±) _ _

lemma isZero‚ÇÇ_H (n : ‚Ñ§) {i j : Œπ} (g : i ‚ü∂ j) (Œ≤ : B.Œ≥‚ÇÇ n ‚ü∂ i) :
    IsZero ((X.H n).obj (Arrow.mk g)) :=
  hX.isZero‚ÇÇ' n g Œ≤

lemma epi_H_map‚ÇÇ (n : ‚Ñ§) {D‚ÇÅ D‚ÇÇ : Arrow Œπ} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) (hœÜ : IsIso œÜ.left)
    (Œ≤ : B.Œ≥‚ÇÇ n ‚ü∂ D‚ÇÅ.right) : Epi ((X.H n).map œÜ) := by
  let D‚ÇÇ' := Arrow.mk (D‚ÇÅ.hom ‚â´ œÜ.right)
  let œÜ' : D‚ÇÅ ‚ü∂ D‚ÇÇ' :=
    { left := ùüô _
      right := œÜ.right
      w := by simp }
  suffices Epi ((X.H n).map œÜ') by
    let œà : D‚ÇÇ' ‚ü∂ D‚ÇÇ :=
      { left := œÜ.left
        right := ùüô _
        w := by simp }
    have := (Arrow.isIso_iff œà).2 ‚ü®inferInstance, inferInstance‚ü©
    have hœÜ : œÜ = œÜ' ‚â´ œà := by ext <;> dsimp <;> simp
    rw [hœÜ, Functor.map_comp]
    apply epi_comp
  exact (ShortComplex.exact_iff_epi _
    (IsZero.eq_of_tgt (X.isZero‚ÇÇ_H B _ _ Œ≤) _ _)).1
      (X.exact‚ÇÇ n (Arrow‚ÇÇ.mk D‚ÇÅ.hom œÜ.right))

lemma mono_H_map‚ÇÇ (n : ‚Ñ§) {D‚ÇÅ D‚ÇÇ : Arrow Œπ} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) (hœÜ : IsIso œÜ.left)
    (n' : ‚Ñ§) (hn' : n' + 1 = n) (Œ≤ : B.Œ≥‚ÇÇ n' ‚ü∂ D‚ÇÅ.right) :
    Mono ((X.H n).map œÜ) := by
  let D‚ÇÇ' := Arrow.mk (D‚ÇÅ.hom ‚â´ œÜ.right)
  let œÜ' : D‚ÇÅ ‚ü∂ D‚ÇÇ' :=
    { left := ùüô _
      right := œÜ.right
      w := by simp }
  suffices Mono ((X.H n).map œÜ') by
    let œà : D‚ÇÇ' ‚ü∂ D‚ÇÇ :=
      { left := œÜ.left
        right := ùüô _
        w := by simp }
    have := (Arrow.isIso_iff œà).2 ‚ü®inferInstance, inferInstance‚ü©
    have hœÜ : œÜ = œÜ' ‚â´ œà := by ext <;> dsimp <;> simp
    rw [hœÜ, Functor.map_comp]
    apply mono_comp
  exact (ShortComplex.exact_iff_mono _
    (IsZero.eq_of_src (X.isZero‚ÇÇ_H B _ _ Œ≤) _ _)).1
      (X.exact‚ÇÅ n' n hn' (Arrow‚ÇÇ.mk D‚ÇÅ.hom œÜ.right))

lemma isIso_H_map‚ÇÇ (n : ‚Ñ§) {D‚ÇÅ D‚ÇÇ : Arrow Œπ} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) (hœÜ : IsIso œÜ.left)
    (Œ≤ : B.Œ≥‚ÇÇ n ‚ü∂ D‚ÇÅ.right)
    (n' : ‚Ñ§) (hn' : n' + 1 = n) (Œ≤' : B.Œ≥‚ÇÇ n' ‚ü∂ D‚ÇÅ.right) :
    IsIso ((X.H n).map œÜ) := by
  have := X.epi_H_map‚ÇÇ B n œÜ hœÜ Œ≤
  have := X.mono_H_map‚ÇÇ B n œÜ hœÜ n' hn' Œ≤'
  apply isIso_of_mono_of_epi

lemma isIso_E_map {D‚ÇÅ D‚ÇÇ : Arrow‚ÇÉ Œπ} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) (Œ± : D‚ÇÇ.X‚ÇÄ ‚ü∂ B.Œ≥‚ÇÅ n‚ÇÇ)
    (hœÜ‚ÇÅ : IsIso œÜ.œÑ‚ÇÅ) (hœÜ‚ÇÇ : IsIso œÜ.œÑ‚ÇÇ) (Œ≤ : B.Œ≥‚ÇÇ n‚ÇÄ ‚ü∂ D‚ÇÅ.X‚ÇÉ) :
    IsIso ((X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).map œÜ) := by
  dsimp [E]
  rw [ShortComplex.isIso_homology_map_iff]
  apply ShortComplex.isIso_homologyMap_of_epi_of_isIso_of_mono'
  ¬∑ exact X.epi_H_map‚ÇÇ B n‚ÇÄ _ hœÜ‚ÇÇ Œ≤
  ¬∑ dsimp [shortComplexE]
    have : IsIso (Arrow‚ÇÉ.gMor.map œÜ) := by
      refine @Arrow.isIso_of_isIso_left_of_isIso_right _ _ _ _ _ ?_ ?_
      all_goals dsimp ; infer_instance
    infer_instance
  ¬∑ exact X.mono_H_map‚ÇÅ B n‚ÇÇ _ hœÜ‚ÇÅ Œ±

@[simps! hom]
noncomputable def asIsoEMap {D‚ÇÅ D‚ÇÇ : Arrow‚ÇÉ Œπ} (œÜ : D‚ÇÅ ‚ü∂ D‚ÇÇ) (Œ± : D‚ÇÇ.X‚ÇÄ ‚ü∂ B.Œ≥‚ÇÅ n‚ÇÇ)
    (hœÜ‚ÇÅ : IsIso œÜ.œÑ‚ÇÅ) (hœÜ‚ÇÇ : IsIso œÜ.œÑ‚ÇÇ) (Œ≤ : B.Œ≥‚ÇÇ n‚ÇÄ ‚ü∂ D‚ÇÅ.X‚ÇÉ) :
    (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj D‚ÇÅ ‚âÖ (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj D‚ÇÇ := by
  have := X.isIso_E_map n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ B œÜ Œ± hœÜ‚ÇÅ hœÜ‚ÇÇ Œ≤
  exact asIso ((X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).map œÜ)

noncomputable def isoEInfty‚ÇÅ (D : Arrow‚ÇÉ Œπ) (Œ± : D.X‚ÇÄ ‚ü∂ B.Œ≥‚ÇÅ n‚ÇÇ) (Œ≤ : B.Œ≥‚ÇÇ n‚ÇÄ ‚ü∂ D.X‚ÇÉ) :
    (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj (Arrow‚ÇÉ.mk (homOfLE bot_le) D.g D.h) ‚âÖ
      (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj D :=
  X.asIsoEMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ B
    { œÑ‚ÇÄ := homOfLE bot_le
      œÑ‚ÇÅ := ùüô _
      œÑ‚ÇÇ := ùüô _
      œÑ‚ÇÉ := ùüô _
      commf := Subsingleton.elim _ _
      commg := Subsingleton.elim _ _
      commh := Subsingleton.elim _ _ } Œ± inferInstance inferInstance Œ≤

noncomputable def isoEInfty‚ÇÇ (D : Arrow‚ÇÇ Œπ) (Œ≤ : B.Œ≥‚ÇÇ n‚ÇÄ ‚ü∂ D.X‚ÇÇ) :
    (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj (Arrow‚ÇÉ.mk (homOfLE bot_le) D.f D.g) ‚âÖ
      (X.EInfty n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj (Arrow.mk D.f) :=
  X.asIsoEMap n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ B
    { œÑ‚ÇÄ := ùüô _
      œÑ‚ÇÅ := ùüô _
      œÑ‚ÇÇ := ùüô _
      œÑ‚ÇÉ := homOfLE le_top
      commf := Subsingleton.elim _ _
      commg := Subsingleton.elim _ _
      commh := Subsingleton.elim _ _ } (homOfLE bot_le) inferInstance inferInstance Œ≤

noncomputable def isoEInfty (D : Arrow‚ÇÉ Œπ) (Œ± : D.X‚ÇÄ ‚ü∂ B.Œ≥‚ÇÅ n‚ÇÇ) (Œ≤ : B.Œ≥‚ÇÇ n‚ÇÄ ‚ü∂ D.X‚ÇÉ) :
    (X.E n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj D ‚âÖ (X.EInfty n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ).obj (Arrow.mk D.g) :=
  (X.isoEInfty‚ÇÅ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ B D Œ± Œ≤).symm ‚â™‚â´
    X.isoEInfty‚ÇÇ n‚ÇÄ n‚ÇÅ n‚ÇÇ hn‚ÇÅ hn‚ÇÇ B (Arrow‚ÇÉ.Œ¥‚ÇÄ.obj D) Œ≤

lemma epi_overAbutment_obj_hom (n : ‚Ñ§) (i : Œπ) (Œ≤ : B.Œ≥‚ÇÇ n ‚ü∂ i) :
    Epi ((X.overAbutment n).obj i).hom :=
  X.epi_H_map‚ÇÇ B n _ (by dsimp ; infer_instance) Œ≤

lemma isIso_overAbutment_obj_hom (n : ‚Ñ§) (i : Œπ) (Œ≤ : B.Œ≥‚ÇÇ n ‚ü∂ i)
    (n' : ‚Ñ§) (hn' : n' + 1 = n) (Œ≤' : B.Œ≥‚ÇÇ n' ‚ü∂ i) :
    IsIso ((X.overAbutment n).obj i).hom :=
  X.isIso_H_map‚ÇÇ B n _ (by dsimp ; infer_instance) Œ≤ n' hn' Œ≤'

lemma isIso_filtrationŒπ (n : ‚Ñ§) (i : Œπ) (Œ≤ : B.Œ≥‚ÇÇ n ‚ü∂ i) :
    IsIso (X.filtrationŒπ n i) := by
  have := X.epi_overAbutment_obj_hom B n i Œ≤
  have : Epi (X.filtrationŒπ n i) := epi_of_epi_fac (image.fac ((X.overAbutment n).obj i).hom)
  apply isIso_of_mono_of_epi

end Convergence

end SpectralObject-/
