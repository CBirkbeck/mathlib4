import Mathlib.Algebra.Homology.SpectralObject.Misc
import Mathlib.Algebra.Homology.ExactSequenceFour

namespace CategoryTheory

open Category Limits

namespace Abelian

section

variable (C Œπ : Type*) [Category C] [Category Œπ] [Abelian C]

open ComposableArrows

structure SpectralObject where
  H (n : ‚Ñ§) : ComposableArrows Œπ 1 ‚•§ C
  Œ¥' (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) :
    functorArrows Œπ 1 2 2 ‚ãô H n‚ÇÄ ‚ü∂ functorArrows Œπ 0 1 2 ‚ãô H n‚ÇÅ
  exact‚ÇÅ' (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (D : ComposableArrows Œπ 2) :
    (mk‚ÇÇ ((Œ¥' n‚ÇÄ n‚ÇÅ h).app D) ((H n‚ÇÅ).map ((mapFunctorArrows Œπ 0 1 0 2 2).app D))).Exact
  exact‚ÇÇ' (n : ‚Ñ§) (D : ComposableArrows Œπ 2) :
    (mk‚ÇÇ ((H n).map ((mapFunctorArrows Œπ 0 1 0 2 2).app D))
      ((H n).map ((mapFunctorArrows Œπ 0 2 1 2 2).app D))).Exact
  exact‚ÇÉ' (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (h : n‚ÇÄ + 1 = n‚ÇÅ) (D : ComposableArrows Œπ 2) :
    (mk‚ÇÇ ((H n‚ÇÄ).map ((mapFunctorArrows Œπ 0 2 1 2 2).app D)) ((Œ¥' n‚ÇÄ n‚ÇÅ h).app D)).Exact

namespace SpectralObject

variable {C Œπ}
variable (X : SpectralObject C Œπ)

section

variable (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) {i j k : Œπ} (f : i ‚ü∂ j) (g : j ‚ü∂ k)

def Œ¥ : (X.H n‚ÇÄ).obj (mk‚ÇÅ g) ‚ü∂ (X.H n‚ÇÅ).obj (mk‚ÇÅ f) :=
  (X.Œ¥' n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (mk‚ÇÇ f g)

lemma Œ¥_naturality {i' j' k' : Œπ} (f' : i' ‚ü∂ j') (g' : j' ‚ü∂ k')
    (Œ± : mk‚ÇÅ f ‚ü∂ mk‚ÇÅ f') (Œ≤ : mk‚ÇÅ g ‚ü∂ mk‚ÇÅ g') (hŒ±Œ≤ : Œ±.app 1 = Œ≤.app 0):
    (X.H n‚ÇÄ).map Œ≤ ‚â´ X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f' g' = X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚â´ (X.H n‚ÇÅ).map Œ± := by
  let œÜ : mk‚ÇÇ f g ‚ü∂ mk‚ÇÇ f' g' := homMk‚ÇÇ (Œ±.app 0) (Œ±.app 1) (Œ≤.app 1) (naturality' Œ± 0 1)
    (by simpa only [hŒ±Œ≤] using naturality' Œ≤ 0 1)
  have h := (X.Œ¥' n‚ÇÄ n‚ÇÅ hn‚ÇÅ).naturality œÜ
  dsimp at h
  convert h
  ¬∑ ext
    ¬∑ exact hŒ±Œ≤.symm
    ¬∑ rfl
  ¬∑ ext <;> rfl

section

variable (fg : i ‚ü∂ k) (h : f ‚â´ g = fg)

@[simp]
noncomputable def iso‚ÇÅ :
    mk‚ÇÇ (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g) ((X.H n‚ÇÅ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h)) ‚âÖ
      mk‚ÇÇ ((X.Œ¥' n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (mk‚ÇÇ f g)) (((X.H n‚ÇÅ).map
        ((mapFunctorArrows Œπ 0 1 0 2 2).app (mk‚ÇÇ f g)))) :=
  isoMk‚ÇÇ (Iso.refl _) (Iso.refl _) ((X.H n‚ÇÅ).mapIso
    (isoMk‚ÇÅ (Iso.refl _) (Iso.refl _) (by simpa using h.symm)))
    (by aesop_cat) (by
      dsimp [twoŒ¥‚ÇÇToŒ¥‚ÇÅ]
      simp only [‚Üê Functor.map_comp, id_comp]
      congr 1
      ext <;> simp)

@[reassoc (attr := simp)]
lemma zero‚ÇÅ :
    X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚â´
      (X.H n‚ÇÅ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h) = 0 :=
  (exact_of_iso (X.iso‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).symm (X.exact‚ÇÅ' n‚ÇÄ n‚ÇÅ hn‚ÇÅ (mk‚ÇÇ f g))).zero 0

@[simps]
def sc‚ÇÅ : ShortComplex C :=
  ShortComplex.mk _ _ (X.zero‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h)

lemma exact‚ÇÅ : (X.sc‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).Exact :=
  (exact_of_iso (X.iso‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).symm (X.exact‚ÇÅ' n‚ÇÄ n‚ÇÅ hn‚ÇÅ (mk‚ÇÇ f g))).exact 0

@[simp]
noncomputable def iso‚ÇÇ :
    mk‚ÇÇ ((X.H n‚ÇÄ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h)) ((X.H n‚ÇÄ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h)) ‚âÖ
        (mk‚ÇÇ ((X.H n‚ÇÄ).map ((mapFunctorArrows Œπ 0 1 0 2 2).app (mk‚ÇÇ f g)))
      ((X.H n‚ÇÄ).map ((mapFunctorArrows Œπ 0 2 1 2 2).app (mk‚ÇÇ f g)))) :=
  isoMk‚ÇÇ (Iso.refl _) ((X.H n‚ÇÄ).mapIso
    (isoMk‚ÇÅ (Iso.refl _) (Iso.refl _) (by simpa using h.symm))) (Iso.refl _) (by
      dsimp
      simp only [‚Üê Functor.map_comp, id_comp]
      congr 1
      ext <;> simp; rfl) (by
      dsimp
      simp only [‚Üê Functor.map_comp, comp_id]
      congr 1
      ext <;> simp; rfl)

@[reassoc (attr := simp)]
lemma zero‚ÇÇ :
    (X.H n‚ÇÄ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h) ‚â´
      (X.H n‚ÇÄ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h) = 0 :=
  (exact_of_iso (X.iso‚ÇÇ n‚ÇÄ f g fg h).symm (X.exact‚ÇÇ' n‚ÇÄ (mk‚ÇÇ f g))).zero 0

@[simps]
def sc‚ÇÇ : ShortComplex C :=
  ShortComplex.mk _ _ (X.zero‚ÇÇ n‚ÇÄ f g fg h)

lemma exact‚ÇÇ : (X.sc‚ÇÇ n‚ÇÄ f g fg h).Exact :=
  (exact_of_iso (X.iso‚ÇÇ n‚ÇÄ f g fg h).symm (X.exact‚ÇÇ' n‚ÇÄ (mk‚ÇÇ f g))).exact 0

@[simp]
noncomputable def iso‚ÇÉ :
    mk‚ÇÇ ((X.H n‚ÇÄ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h))
        (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g) ‚âÖ
      mk‚ÇÇ ((X.H n‚ÇÄ).map ((mapFunctorArrows Œπ 0 2 1 2 2).app (mk‚ÇÇ f g)))
        ((X.Œ¥' n‚ÇÄ n‚ÇÅ hn‚ÇÅ).app (mk‚ÇÇ f g)) :=
  isoMk‚ÇÇ ((X.H n‚ÇÄ).mapIso (isoMk‚ÇÅ (Iso.refl _) (Iso.refl _) (by simpa using h.symm)))
    (Iso.refl _) (Iso.refl _) (by
      dsimp
      rw [comp_id, ‚Üê Functor.map_comp]
      congr 1
      aesop_cat) (by aesop_cat)

@[reassoc (attr := simp)]
lemma zero‚ÇÉ :
    (X.H n‚ÇÄ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h) ‚â´ X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g = 0 :=
  (exact_of_iso (X.iso‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).symm (X.exact‚ÇÉ' n‚ÇÄ n‚ÇÅ hn‚ÇÅ (mk‚ÇÇ f g))).zero 0

@[simps]
def sc‚ÇÉ : ShortComplex C :=
  ShortComplex.mk _ _ (X.zero‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h)

lemma exact‚ÇÉ : (X.sc‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).Exact :=
  (exact_of_iso (X.iso‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).symm (X.exact‚ÇÉ' n‚ÇÄ n‚ÇÅ hn‚ÇÅ (mk‚ÇÇ f g))).exact 0

@[simp]
noncomputable def composableArrows‚ÇÖ :
    ComposableArrows C 5 :=
  mk‚ÇÖ ((X.H n‚ÇÄ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h)) ((X.H n‚ÇÄ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h))
    (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g) ((X.H n‚ÇÅ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h))
    ((X.H n‚ÇÅ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h))

lemma composableArrows‚ÇÖ_exact :
    (X.composableArrows‚ÇÖ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).Exact := by
  subst h
  exact exact_of_Œ¥‚ÇÄ (X.exact‚ÇÇ n‚ÇÄ f g _ rfl).exact_toComposableArrows
     (exact_of_Œ¥‚ÇÄ (X.exact‚ÇÉ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g _ rfl).exact_toComposableArrows
        (exact_of_Œ¥‚ÇÄ (X.exact‚ÇÅ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g _ rfl).exact_toComposableArrows
          ((X.exact‚ÇÇ n‚ÇÅ f g _ rfl).exact_toComposableArrows)))

end

end

section

variable (n‚ÇÄ n‚ÇÅ n‚ÇÇ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ) (hn‚ÇÇ : n‚ÇÅ + 1 = n‚ÇÇ)
    {i j k l : Œπ} (f : i ‚ü∂ j) (g : j ‚ü∂ k) (h : k ‚ü∂ l)

@[reassoc (attr := simp)]
lemma Œ¥_Œ¥ : X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ g h ‚â´ X.Œ¥ n‚ÇÅ n‚ÇÇ hn‚ÇÇ f g = 0 := by
  have eq := X.Œ¥_naturality n‚ÇÅ n‚ÇÇ hn‚ÇÇ f g f (g ‚â´ h) (ùüô _) (twoŒ¥‚ÇÇToŒ¥‚ÇÅ g h _ rfl) rfl
  rw [Functor.map_id, comp_id] at eq
  rw [‚Üê eq, X.zero‚ÇÅ_assoc n‚ÇÄ n‚ÇÅ hn‚ÇÅ g h _ rfl, zero_comp]

end

section

variable (n‚ÇÄ n‚ÇÅ : ‚Ñ§) (hn‚ÇÅ : n‚ÇÄ + 1 = n‚ÇÅ)
  {i j k : Œπ} (f : i ‚ü∂ j) (g : j ‚ü∂ k)

noncomputable def cycles : C := kernel (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g)

noncomputable def opcycles : C := cokernel (X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g)

noncomputable def iCycles :
    X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚ü∂ (X.H n‚ÇÄ).obj (mk‚ÇÅ g) :=
  kernel.Œπ _

noncomputable def pOpcycles :
    (X.H n‚ÇÅ).obj (mk‚ÇÅ f) ‚ü∂ X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g :=
  cokernel.œÄ _

instance : Mono (X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g) := by
  dsimp [iCycles]
  infer_instance

instance : Epi (X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g) := by
  dsimp [pOpcycles]
  infer_instance

@[reassoc (attr := simp)]
lemma iCycles_Œ¥ : X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚â´ X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g = 0 := by
  simp [iCycles]

@[reassoc (attr := simp)]
lemma Œ¥_pOpcycles : X.Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚â´ X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g = 0 := by
  simp [pOpcycles]

@[simps, pp_dot]
noncomputable def kernelSequenceCycles :
    ShortComplex C :=
  ShortComplex.mk _ _ (X.iCycles_Œ¥ n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g)

@[simps, pp_dot]
noncomputable def cokernelSequenceOpcycles :
    ShortComplex C :=
  ShortComplex.mk _ _ (X.Œ¥_pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g)

instance : Mono (X.kernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g).f := by
  dsimp
  infer_instance

instance : Epi (X.cokernelSequenceOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g).g := by
  dsimp
  infer_instance

lemma kernelSequenceCycles_exact :
    (X.kernelSequenceCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g).Exact :=
  ShortComplex.exact_of_f_is_kernel _ (kernelIsKernel _)

lemma cokernelSequenceOpcycles_exact :
    (X.cokernelSequenceOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g).Exact :=
  ShortComplex.exact_of_g_is_cokernel _ (cokernelIsCokernel _)


variable (fg : i ‚ü∂ k) (h : f ‚â´ g = fg)

noncomputable def cokernelIsoCycles :
    cokernel ((X.H n‚ÇÄ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h)) ‚âÖ X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g :=
  (X.composableArrows‚ÇÖ_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).cokerIsoKer 0

@[reassoc (attr := simp)]
lemma cokernelIsoCycles_hom_fac :
    cokernel.œÄ _ ‚â´ (X.cokernelIsoCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).hom ‚â´
      X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g = (X.H n‚ÇÄ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h) :=
  (X.composableArrows‚ÇÖ_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).cokerIsoKer_hom_fac 0

noncomputable def opcyclesIsoKernel :
    X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚âÖ kernel ((X.H n‚ÇÅ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h)) :=
  (X.composableArrows‚ÇÖ_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).cokerIsoKer 2

@[reassoc (attr := simp)]
lemma opcyclesIsoKernel_hom_fac :
    X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚â´ (X.opcyclesIsoKernel n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).hom ‚â´
      kernel.Œπ _ = (X.H n‚ÇÅ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h) :=
  (X.composableArrows‚ÇÖ_exact n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h).cokerIsoKer_hom_fac 2

noncomputable def toCycles : (X.H n‚ÇÄ).obj (mk‚ÇÅ fg) ‚ü∂ X.cycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g :=
  kernel.lift _ ((X.H n‚ÇÄ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h)) (by simp)

@[reassoc (attr := simp)]
lemma toCycles_i :
    X.toCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h ‚â´ X.iCycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g =
      (X.H n‚ÇÄ).map (twoŒ¥‚ÇÅToŒ¥‚ÇÄ f g fg h) := by
  apply kernel.lift_Œπ

noncomputable def fromOpcycles :
    X.opcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚ü∂ (X.H n‚ÇÅ).obj (mk‚ÇÅ fg) :=
  cokernel.desc _ ((X.H n‚ÇÅ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h)) (by simp)

@[reassoc (attr := simp)]
lemma p_fromOpcycles :
    X.pOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g ‚â´ X.fromOpcycles n‚ÇÄ n‚ÇÅ hn‚ÇÅ f g fg h =
      (X.H n‚ÇÅ).map (twoŒ¥‚ÇÇToŒ¥‚ÇÅ f g fg h) := by
  apply cokernel.œÄ_desc

end

end SpectralObject

end

end Abelian

end CategoryTheory
