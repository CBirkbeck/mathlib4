/-
Copyright (c) 2016 Jeremy Avigad. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jeremy Avigad, Leonardo de Moura, Mario Carneiro
-/
import Mathlib.Algebra.Hom.Ring
import Mathlib.Algebra.Order.Monoid.WithTop
import Mathlib.Algebra.Order.Ring.Canonical
import Std.Data.Option.Lemmas

#align_import algebra.order.ring.with_top from "leanprover-community/mathlib"@"0111834459f5d7400215223ea95ae38a1265a907"

/-! # Structures involving `*` and `0` on `WithTop` and `WithBot`
The main results of this section are `WithTop.canonicallyOrderedCommSemiring` and
`WithBot.orderedCommSemiring`.
-/

variable {Œ± : Type*}

namespace WithTop

variable [DecidableEq Œ±]

instance : DecidableEq (WithTop Œ±) := instDecidableEqOption

section Mul

variable [Zero Œ±] [Mul Œ±]

instance instMulZeroClassWithTop : MulZeroClass (WithTop Œ±) where
  zero := 0
  mul m n := if m = 0 ‚à® n = 0 then 0 else Option.map‚ÇÇ (¬∑ * ¬∑) m n
  zero_mul _ := if_pos <| Or.inl rfl
  mul_zero _ := if_pos <| Or.inr rfl

theorem mul_def {a b : WithTop Œ±} :
    a * b = (if a = 0 ‚à® b = 0 then 0 else Option.map‚ÇÇ (¬∑ * ¬∑) a b : WithTop Œ±) :=
  rfl
#align with_top.mul_def WithTop.mul_def

-- Porting note: commented out @[simp] to placate the `simp can prove this` linter
-- @[simp]
theorem top_mul_top : (‚ä§ * ‚ä§ : WithTop Œ±) = ‚ä§ := by simp [mul_def]; rfl
                                                    -- ‚ä¢ Option.map‚ÇÇ (fun x x_1 => x * x_1) ‚ä§ ‚ä§ = ‚ä§
                                                                    -- üéâ no goals
#align with_top.top_mul_top WithTop.top_mul_top

theorem mul_top' (a : WithTop Œ±) : a * ‚ä§ = if a = 0 then 0 else ‚ä§ := by
  induction a using recTopCoe <;> simp [mul_def] <;> rfl
  -- ‚ä¢ ‚ä§ * ‚ä§ = if ‚ä§ = 0 then 0 else ‚ä§
                                  -- ‚ä¢ Option.map‚ÇÇ (fun x x_1 => x * x_1) ‚ä§ ‚ä§ = ‚ä§
                                  -- ‚ä¢ (if a‚úù = 0 then 0 else Option.map‚ÇÇ (fun x x_1 => x * x_1) ‚Üëa‚úù ‚ä§) = if a‚úù = 0 ‚Ä¶
                                                     -- üéâ no goals
                                                     -- üéâ no goals
#align with_top.mul_top' WithTop.mul_top'

@[simp] theorem mul_top {a : WithTop Œ±} (h : a ‚â† 0) : a * ‚ä§ = ‚ä§ := by rw [mul_top', if_neg h]
                                                                      -- üéâ no goals
#align with_top.mul_top WithTop.mul_top

theorem top_mul' (a : WithTop Œ±) : ‚ä§ * a = if a = 0 then 0 else ‚ä§ := by
  induction a using recTopCoe <;> simp [mul_def] <;> rfl
  -- ‚ä¢ ‚ä§ * ‚ä§ = if ‚ä§ = 0 then 0 else ‚ä§
                                  -- ‚ä¢ Option.map‚ÇÇ (fun x x_1 => x * x_1) ‚ä§ ‚ä§ = ‚ä§
                                  -- ‚ä¢ (if a‚úù = 0 then 0 else Option.map‚ÇÇ (fun x x_1 => x * x_1) ‚ä§ ‚Üëa‚úù) = if a‚úù = 0 ‚Ä¶
                                                     -- üéâ no goals
                                                     -- üéâ no goals
#align with_top.top_mul' WithTop.top_mul'

@[simp] theorem top_mul {a : WithTop Œ±} (h : a ‚â† 0) : ‚ä§ * a = ‚ä§ := by rw [top_mul', if_neg h]
                                                                      -- üéâ no goals
#align with_top.top_mul WithTop.top_mul

theorem mul_eq_top_iff {a b : WithTop Œ±} : a * b = ‚ä§ ‚Üî a ‚â† 0 ‚àß b = ‚ä§ ‚à® a = ‚ä§ ‚àß b ‚â† 0 := by
  rw [mul_def, ite_eq_iff, ‚Üê none_eq_top, Option.map‚ÇÇ_eq_none_iff]
  -- ‚ä¢ (a = 0 ‚à® b = 0) ‚àß 0 = none ‚à® ¬¨(a = 0 ‚à® b = 0) ‚àß (a = none ‚à® b = none) ‚Üî a ‚â†  ‚Ä¶
  have ha : a = 0 ‚Üí a ‚â† none := fun h => h.symm ‚ñ∏ zero_ne_top
  -- ‚ä¢ (a = 0 ‚à® b = 0) ‚àß 0 = none ‚à® ¬¨(a = 0 ‚à® b = 0) ‚àß (a = none ‚à® b = none) ‚Üî a ‚â†  ‚Ä¶
  have hb : b = 0 ‚Üí b ‚â† none := fun h => h.symm ‚ñ∏ zero_ne_top
  -- ‚ä¢ (a = 0 ‚à® b = 0) ‚àß 0 = none ‚à® ¬¨(a = 0 ‚à® b = 0) ‚àß (a = none ‚à® b = none) ‚Üî a ‚â†  ‚Ä¶
  tauto
  -- üéâ no goals
#align with_top.mul_eq_top_iff WithTop.mul_eq_top_iff

theorem mul_lt_top' [LT Œ±] {a b : WithTop Œ±} (ha : a < ‚ä§) (hb : b < ‚ä§) : a * b < ‚ä§ := by
  rw [WithTop.lt_top_iff_ne_top] at *
  -- ‚ä¢ a * b ‚â† ‚ä§
  simp only [Ne.def, mul_eq_top_iff, *, and_false, false_and, false_or]
  -- üéâ no goals
#align with_top.mul_lt_top' WithTop.mul_lt_top'

theorem mul_lt_top [LT Œ±] {a b : WithTop Œ±} (ha : a ‚â† ‚ä§) (hb : b ‚â† ‚ä§) : a * b < ‚ä§ :=
  mul_lt_top' (WithTop.lt_top_iff_ne_top.2 ha) (WithTop.lt_top_iff_ne_top.2 hb)
#align with_top.mul_lt_top WithTop.mul_lt_top

instance noZeroDivisors [NoZeroDivisors Œ±] : NoZeroDivisors (WithTop Œ±) := by
  refine ‚ü®fun h‚ÇÅ => Decidable.by_contradiction <| fun h‚ÇÇ => ?_‚ü©
  -- ‚ä¢ False
  rw [mul_def, if_neg h‚ÇÇ] at h‚ÇÅ
  -- ‚ä¢ False
  rcases Option.mem_map‚ÇÇ_iff.1 h‚ÇÅ with ‚ü®a, b, (rfl : _ = _), (rfl : _ = _), hab‚ü©
  -- ‚ä¢ False
  exact h‚ÇÇ ((eq_zero_or_eq_zero_of_mul_eq_zero hab).imp (congr_arg some) (congr_arg some))
  -- üéâ no goals

end Mul

section MulZeroClass

variable [MulZeroClass Œ±]

@[simp, norm_cast]
theorem coe_mul {a b : Œ±} : (‚Üë(a * b) : WithTop Œ±) = a * b := by
  by_cases ha : a = 0
  -- ‚ä¢ ‚Üë(a * b) = ‚Üëa * ‚Üëb
  ¬∑ simp [ha]
    -- üéâ no goals
  ¬∑ by_cases hb : b = 0
    -- ‚ä¢ ‚Üë(a * b) = ‚Üëa * ‚Üëb
    ¬∑ simp [hb]
      -- üéâ no goals
    ¬∑ simp [*, mul_def]
      -- ‚ä¢ ‚Üë(a * b) = Option.map‚ÇÇ (fun x x_1 => x * x_1) ‚Üëa ‚Üëb
      rfl
      -- üéâ no goals
#align with_top.coe_mul WithTop.coe_mul

theorem mul_coe {b : Œ±} (hb : b ‚â† 0) : ‚àÄ {a : WithTop Œ±},
    a * (b : WithTop Œ±) = a.bind fun a : Œ± => ‚Üë(a * b)
  | none =>
    show (if (‚ä§ : WithTop Œ±) = 0 ‚à® (b : WithTop Œ±) = 0 then 0 else ‚ä§ : WithTop Œ±) = ‚ä§ by simp [hb]
                                                                                         -- üéâ no goals
  | Option.some a => by
    rw [some_eq_coe, ‚Üê coe_mul]
    -- ‚ä¢ ‚Üë(a * b) = Option.bind ‚Üëa fun a => Option.some (a * b)
    rfl
    -- üéâ no goals
#align with_top.mul_coe WithTop.mul_coe

@[simp]
theorem untop'_zero_mul (a b : WithTop Œ±) : (a * b).untop' 0 = a.untop' 0 * b.untop' 0 := by
  by_cases ha : a = 0; ¬∑ rw [ha, zero_mul, ‚Üê coe_zero, untop'_coe, zero_mul]
  -- ‚ä¢ untop' 0 (a * b) = untop' 0 a * untop' 0 b
                         -- üéâ no goals
  by_cases hb : b = 0; ¬∑ rw [hb, mul_zero, ‚Üê coe_zero, untop'_coe, mul_zero]
  -- ‚ä¢ untop' 0 (a * b) = untop' 0 a * untop' 0 b
                         -- üéâ no goals
  induction a using WithTop.recTopCoe; ¬∑ rw [top_mul hb, untop'_top, zero_mul]
  -- ‚ä¢ untop' 0 (‚ä§ * b) = untop' 0 ‚ä§ * untop' 0 b
                                         -- üéâ no goals
  induction b using WithTop.recTopCoe; ¬∑ rw [mul_top ha, untop'_top, mul_zero]
  -- ‚ä¢ untop' 0 (‚Üëa‚úù * ‚ä§) = untop' 0 ‚Üëa‚úù * untop' 0 ‚ä§
                                         -- üéâ no goals
  rw [‚Üê coe_mul, untop'_coe, untop'_coe, untop'_coe]
  -- üéâ no goals
#align with_top.untop'_zero_mul WithTop.untop'_zero_mul

end MulZeroClass

/-- `Nontrivial Œ±` is needed here as otherwise we have `1 * ‚ä§ = ‚ä§` but also `0 * ‚ä§ = 0`. -/
instance instMulZeroOneClassWithTop [MulZeroOneClass Œ±] [Nontrivial Œ±] :
    MulZeroOneClass (WithTop Œ±) :=
  { WithTop.instMulZeroClassWithTop with
    mul := (¬∑ * ¬∑)
    one := 1, zero := 0
    one_mul := fun a =>
      match a with
      | ‚ä§ => mul_top (mt coe_eq_coe.1 one_ne_zero)
      | (a : Œ±) => by rw [‚Üê coe_one, ‚Üê coe_mul, one_mul],
                      -- üéâ no goals
    mul_one := fun a =>
      match a with
      | ‚ä§ => top_mul (mt coe_eq_coe.1 one_ne_zero)
      | (a : Œ±) => by rw [‚Üê coe_one, ‚Üê coe_mul, mul_one] }
                      -- üéâ no goals

/-- A version of `WithTop.map` for `MonoidWithZeroHom`s. -/
@[simps (config := { fullyApplied := false })]
protected def _root_.MonoidWithZeroHom.withTopMap {R S : Type*} [MulZeroOneClass R] [DecidableEq R]
    [Nontrivial R] [MulZeroOneClass S] [DecidableEq S] [Nontrivial S] (f : R ‚Üí*‚ÇÄ S)
    (hf : Function.Injective f) : WithTop R ‚Üí*‚ÇÄ WithTop S :=
  { f.toZeroHom.withTopMap, f.toMonoidHom.toOneHom.withTopMap with
    toFun := WithTop.map f
    map_mul' := fun x y => by
      have : ‚àÄ z, map f z = 0 ‚Üî z = 0 := fun z =>
        (Option.map_injective hf).eq_iff' f.toZeroHom.withTopMap.map_zero
      rcases Decidable.eq_or_ne x 0 with (rfl | hx)
      -- ‚ä¢ ZeroHom.toFun { toFun := map ‚Üëf, map_zero' := (_ : ZeroHom.toFun src‚úù¬π 0 = 0 ‚Ä¶
      ¬∑ simp
        -- üéâ no goals
      rcases Decidable.eq_or_ne y 0 with (rfl | hy)
      -- ‚ä¢ ZeroHom.toFun { toFun := map ‚Üëf, map_zero' := (_ : ZeroHom.toFun src‚úù¬π 0 = 0 ‚Ä¶
      ¬∑ simp
        -- üéâ no goals
      induction' x using WithTop.recTopCoe with x
      -- ‚ä¢ ZeroHom.toFun { toFun := map ‚Üëf, map_zero' := (_ : ZeroHom.toFun src‚úù¬π 0 = 0 ‚Ä¶
      ¬∑ simp [hy, this]
        -- üéâ no goals
      induction' y using WithTop.recTopCoe with y
      -- ‚ä¢ ZeroHom.toFun { toFun := map ‚Üëf, map_zero' := (_ : ZeroHom.toFun src‚úù¬π 0 = 0 ‚Ä¶
      ¬∑ have : (f x : WithTop S) ‚â† 0 := by simpa [hf.eq_iff' (map_zero f)] using hx
        -- ‚ä¢ ZeroHom.toFun { toFun := map ‚Üëf, map_zero' := (_ : ZeroHom.toFun src‚úù¬π 0 = 0 ‚Ä¶
        simp [mul_top hx, mul_top this]
        -- üéâ no goals
      ¬∑ -- porting note: todo: `simp [‚Üê coe_mul]` times out
        simp only [map_coe, ‚Üê coe_mul, map_mul] }
        -- üéâ no goals
#align monoid_with_zero_hom.with_top_map MonoidWithZeroHom.withTopMap

instance instSemigroupWithZeroWithTop [SemigroupWithZero Œ±] [NoZeroDivisors Œ±] :
    SemigroupWithZero (WithTop Œ±) :=
  { WithTop.instMulZeroClassWithTop with
    mul := (¬∑ * ¬∑)
    zero := 0
    mul_assoc := fun a b c => by
      rcases eq_or_ne a 0 with (rfl | ha); ¬∑ simp only [zero_mul]
      -- ‚ä¢ 0 * b * c = 0 * (b * c)
                                             -- üéâ no goals
      rcases eq_or_ne b 0 with (rfl | hb); ¬∑ simp only [zero_mul, mul_zero]
      -- ‚ä¢ a * 0 * c = a * (0 * c)
                                             -- üéâ no goals
      rcases eq_or_ne c 0 with (rfl | hc); ¬∑ simp only [mul_zero]
      -- ‚ä¢ a * b * 0 = a * (b * 0)
                                             -- üéâ no goals
    -- Porting note: below needed to be rewritten due to changed `simp` behaviour for `coe`
      induction' a using WithTop.recTopCoe with a; ¬∑ simp [hb, hc]
      -- ‚ä¢ ‚ä§ * b * c = ‚ä§ * (b * c)
                                                     -- üéâ no goals
      induction' b using WithTop.recTopCoe with b; ¬∑ simp [mul_top ha, top_mul hc]
      -- ‚ä¢ ‚Üëa * ‚ä§ * c = ‚Üëa * (‚ä§ * c)
                                                     -- üéâ no goals
      induction' c using WithTop.recTopCoe with c
      -- ‚ä¢ ‚Üëa * ‚Üëb * ‚ä§ = ‚Üëa * (‚Üëb * ‚ä§)
      ¬∑ rw [mul_top hb, mul_top ha]
        -- ‚ä¢ ‚Üëa * ‚Üëb * ‚ä§ = ‚ä§
        rw [‚Üê coe_zero, ne_eq, coe_eq_coe] at ha hb
        -- ‚ä¢ ‚Üëa * ‚Üëb * ‚ä§ = ‚ä§
        simp [ha, hb]
        -- üéâ no goals
      simp only [‚Üê coe_mul, mul_assoc] }
      -- üéâ no goals

instance monoidWithZero [MonoidWithZero Œ±] [NoZeroDivisors Œ±] [Nontrivial Œ±] :
    MonoidWithZero (WithTop Œ±) :=
  { WithTop.instMulZeroOneClassWithTop, WithTop.instSemigroupWithZeroWithTop with }

instance commMonoidWithZero [CommMonoidWithZero Œ±] [NoZeroDivisors Œ±] [Nontrivial Œ±] :
    CommMonoidWithZero (WithTop Œ±) :=
  { WithTop.monoidWithZero with
    mul := (¬∑ * ¬∑)
    zero := 0,
    mul_comm := fun _ _ => ite_congr (propext or_comm) (fun _ => rfl)
      (fun _ => Option.map‚ÇÇ_comm mul_comm) }

variable [CanonicallyOrderedCommSemiring Œ±]

private theorem distrib' (a b c : WithTop Œ±) : (a + b) * c = a * c + b * c := by
  induction' c using WithTop.recTopCoe with c
  -- ‚ä¢ (a + b) * ‚ä§ = a * ‚ä§ + b * ‚ä§
  ¬∑ by_cases ha : a = 0 <;> simp [ha]
    -- ‚ä¢ (a + b) * ‚ä§ = a * ‚ä§ + b * ‚ä§
                            -- üéâ no goals
                            -- üéâ no goals
  ¬∑ by_cases hc : c = 0
    -- ‚ä¢ (a + b) * ‚Üëc = a * ‚Üëc + b * ‚Üëc
    ¬∑ simp [hc]
      -- üéâ no goals
    simp [mul_coe hc]
    -- ‚ä¢ (Option.bind (a + b) fun a => Option.some (a * c)) = (Option.bind a fun a => ‚Ä¶
    cases a <;> cases b
    -- ‚ä¢ (Option.bind (none + b) fun a => Option.some (a * c)) = (Option.bind none fu ‚Ä¶
                -- ‚ä¢ (Option.bind (none + none) fun a => Option.some (a * c)) = (Option.bind none ‚Ä¶
                -- ‚ä¢ (Option.bind (Option.some val‚úù + none) fun a => Option.some (a * c)) = (Opti ‚Ä¶
    repeat' first | rfl |exact congr_arg some (add_mul _ _ _)
    -- üéâ no goals

/-- This instance requires `CanonicallyOrderedCommSemiring` as it is the smallest class
that derives from both `NonAssocNonUnitalSemiring` and `CanonicallyOrderedAddMonoid`, both
of which are required for distributivity. -/
instance commSemiring [Nontrivial Œ±] : CommSemiring (WithTop Œ±) :=
  { WithTop.addCommMonoidWithOne, WithTop.commMonoidWithZero with
    right_distrib := distrib'
    left_distrib := fun a b c => by
      rw [mul_comm, distrib', mul_comm b, mul_comm c] }
      -- üéâ no goals

instance [Nontrivial Œ±] : CanonicallyOrderedCommSemiring (WithTop Œ±) :=
  { WithTop.commSemiring, WithTop.canonicallyOrderedAddMonoid with
  eq_zero_or_eq_zero_of_mul_eq_zero := eq_zero_or_eq_zero_of_mul_eq_zero}

/-- A version of `WithTop.map` for `RingHom`s. -/
@[simps (config := { fullyApplied := false })]
protected def _root_.RingHom.withTopMap {R S : Type*} [CanonicallyOrderedCommSemiring R]
    [DecidableEq R] [Nontrivial R] [CanonicallyOrderedCommSemiring S] [DecidableEq S] [Nontrivial S]
    (f : R ‚Üí+* S) (hf : Function.Injective f) : WithTop R ‚Üí+* WithTop S :=
  {MonoidWithZeroHom.withTopMap f.toMonoidWithZeroHom hf, f.toAddMonoidHom.withTopMap with}
#align ring_hom.with_top_map RingHom.withTopMap

end WithTop

namespace WithBot

variable [DecidableEq Œ±]

instance : DecidableEq (WithBot Œ±) := instDecidableEqOption

section Mul

variable [Zero Œ±] [Mul Œ±]

instance : MulZeroClass (WithBot Œ±) :=
  WithTop.instMulZeroClassWithTop

theorem mul_def {a b : WithBot Œ±} :
    a * b = if a = 0 ‚à® b = 0 then (0 : WithBot Œ±) else Option.map‚ÇÇ (¬∑ * ¬∑) a b :=
  rfl
#align with_bot.mul_def WithBot.mul_def

@[simp]
theorem mul_bot {a : WithBot Œ±} (h : a ‚â† 0) : a * ‚ä• = ‚ä• :=
  WithTop.mul_top h
#align with_bot.mul_bot WithBot.mul_bot

@[simp]
theorem bot_mul {a : WithBot Œ±} (h : a ‚â† 0) : ‚ä• * a = ‚ä• :=
  WithTop.top_mul h
#align with_bot.bot_mul WithBot.bot_mul

@[simp]
theorem bot_mul_bot : (‚ä• * ‚ä• : WithBot Œ±) = ‚ä• :=
  WithTop.top_mul_top
#align with_bot.bot_mul_bot WithBot.bot_mul_bot

theorem mul_eq_bot_iff {a b : WithBot Œ±} : a * b = ‚ä• ‚Üî a ‚â† 0 ‚àß b = ‚ä• ‚à® a = ‚ä• ‚àß b ‚â† 0 :=
  WithTop.mul_eq_top_iff
#align with_bot.mul_eq_bot_iff WithBot.mul_eq_bot_iff

theorem bot_lt_mul' [LT Œ±] {a b : WithBot Œ±} (ha : ‚ä• < a) (hb : ‚ä• < b) : ‚ä• < a * b :=
  WithTop.mul_lt_top' (Œ± := Œ±·µí·µà) ha hb
#align with_bot.bot_lt_mul' WithBot.bot_lt_mul'

theorem bot_lt_mul [LT Œ±] {a b : WithBot Œ±} (ha : a ‚â† ‚ä•) (hb : b ‚â† ‚ä•) : ‚ä• < a * b :=
  WithTop.mul_lt_top (Œ± := Œ±·µí·µà) ha hb
#align with_bot.bot_lt_mul WithBot.bot_lt_mul

end Mul

section MulZeroClass

variable [MulZeroClass Œ±]

@[simp, norm_cast] -- porting note: added `simp`
theorem coe_mul {a b : Œ±} : (‚Üë(a * b) : WithBot Œ±) = a * b :=
  WithTop.coe_mul
#align with_bot.coe_mul WithBot.coe_mul

theorem mul_coe {b : Œ±} (hb : b ‚â† 0) {a : WithBot Œ±} :
    a * (b : WithBot Œ±) = a.bind fun a : Œ± => ‚Üë(a * b) :=
  WithTop.mul_coe hb
#align with_bot.mul_coe WithBot.mul_coe

end MulZeroClass

/-- `Nontrivial Œ±` is needed here as otherwise we have `1 * ‚ä• = ‚ä•` but also `= 0 * ‚ä• = 0`. -/
instance [MulZeroOneClass Œ±] [Nontrivial Œ±] : MulZeroOneClass (WithBot Œ±) :=
  WithTop.instMulZeroOneClassWithTop

instance [MulZeroClass Œ±] [NoZeroDivisors Œ±] : NoZeroDivisors (WithBot Œ±) :=
  WithTop.noZeroDivisors

instance [SemigroupWithZero Œ±] [NoZeroDivisors Œ±] : SemigroupWithZero (WithBot Œ±) :=
  WithTop.instSemigroupWithZeroWithTop

instance [MonoidWithZero Œ±] [NoZeroDivisors Œ±] [Nontrivial Œ±] : MonoidWithZero (WithBot Œ±) :=
  WithTop.monoidWithZero

instance commMonoidWithZero [CommMonoidWithZero Œ±] [NoZeroDivisors Œ±] [Nontrivial Œ±] :
    CommMonoidWithZero (WithBot Œ±) :=
  WithTop.commMonoidWithZero

instance commSemiring [CanonicallyOrderedCommSemiring Œ±] [Nontrivial Œ±] :
    CommSemiring (WithBot Œ±) :=
  WithTop.commSemiring

instance [MulZeroClass Œ±] [Preorder Œ±] [PosMulMono Œ±] : PosMulMono (WithBot Œ±) :=
  ‚ü®by
    intro ‚ü®x, x0‚ü© a b h
    -- ‚ä¢ (fun x y => ‚Üëx * y) { val := x, property := x0 } a ‚â§ (fun x y => ‚Üëx * y) { v ‚Ä¶
    simp only [Subtype.coe_mk]
    -- ‚ä¢ x * a ‚â§ x * b
    rcases eq_or_ne x 0 with rfl | x0'
    -- ‚ä¢ 0 * a ‚â§ 0 * b
    ¬∑ simp
      -- üéâ no goals
    lift x to Œ±
    -- ‚ä¢ x ‚â† ‚ä•
    ¬∑ rintro rfl
      -- ‚ä¢ False
      exact (WithBot.bot_lt_coe (0 : Œ±)).not_le x0
      -- üéâ no goals
    induction a using WithBot.recBotCoe
    -- ‚ä¢ ‚Üëx * ‚ä• ‚â§ ‚Üëx * b
    ¬∑ simp_rw [mul_bot x0', bot_le]
      -- üéâ no goals
    induction b using WithBot.recBotCoe
    -- ‚ä¢ ‚Üëx * ‚Üëa‚úù ‚â§ ‚Üëx * ‚ä•
    ¬∑ exact absurd h (bot_lt_coe _).not_le
      -- üéâ no goals
    simp only [‚Üê coe_mul, coe_le_coe] at *
    -- ‚ä¢ x * a‚úù¬π ‚â§ x * a‚úù
    norm_cast at x0
    -- ‚ä¢ x * a‚úù¬π ‚â§ x * a‚úù
    exact mul_le_mul_of_nonneg_left h x0 ‚ü©
    -- üéâ no goals

instance [MulZeroClass Œ±] [Preorder Œ±] [MulPosMono Œ±] : MulPosMono (WithBot Œ±) :=
  ‚ü®by
    intro ‚ü®x, x0‚ü© a b h
    -- ‚ä¢ (fun x y => y * ‚Üëx) { val := x, property := x0 } a ‚â§ (fun x y => y * ‚Üëx) { v ‚Ä¶
    simp only [Subtype.coe_mk]
    -- ‚ä¢ a * x ‚â§ b * x
    rcases eq_or_ne x 0 with rfl | x0'
    -- ‚ä¢ a * 0 ‚â§ b * 0
    ¬∑ simp
      -- üéâ no goals
    lift x to Œ±
    -- ‚ä¢ x ‚â† ‚ä•
    ¬∑ rintro rfl
      -- ‚ä¢ False
      exact (WithBot.bot_lt_coe (0 : Œ±)).not_le x0
      -- üéâ no goals
    induction a using WithBot.recBotCoe
    -- ‚ä¢ ‚ä• * ‚Üëx ‚â§ b * ‚Üëx
    ¬∑ simp_rw [bot_mul x0', bot_le]
      -- üéâ no goals
    induction b using WithBot.recBotCoe
    -- ‚ä¢ ‚Üëa‚úù * ‚Üëx ‚â§ ‚ä• * ‚Üëx
    ¬∑ exact absurd h (bot_lt_coe _).not_le
      -- üéâ no goals
    simp only [‚Üê coe_mul, coe_le_coe] at *
    -- ‚ä¢ a‚úù¬π * x ‚â§ a‚úù * x
    norm_cast at x0
    -- ‚ä¢ a‚úù¬π * x ‚â§ a‚úù * x
    exact mul_le_mul_of_nonneg_right h x0 ‚ü©
    -- üéâ no goals

instance [MulZeroClass Œ±] [Preorder Œ±] [PosMulStrictMono Œ±] : PosMulStrictMono (WithBot Œ±) :=
  ‚ü®by
    intro ‚ü®x, x0‚ü© a b h
    -- ‚ä¢ (fun x y => ‚Üëx * y) { val := x, property := x0 } a < (fun x y => ‚Üëx * y) { v ‚Ä¶
    simp only [Subtype.coe_mk]
    -- ‚ä¢ x * a < x * b
    lift x to Œ± using x0.ne_bot
    -- ‚ä¢ ‚Üëx * a < ‚Üëx * b
    induction b using WithBot.recBotCoe
    -- ‚ä¢ ‚Üëx * a < ‚Üëx * ‚ä•
    ¬∑ exact absurd h not_lt_bot
      -- üéâ no goals
    induction a using WithBot.recBotCoe
    -- ‚ä¢ ‚Üëx * ‚ä• < ‚Üëx * ‚Üëa‚úù
    ¬∑ simp_rw [mul_bot x0.ne.symm, ‚Üê coe_mul, bot_lt_coe]
      -- üéâ no goals
    simp only [‚Üê coe_mul, coe_lt_coe] at *
    -- ‚ä¢ x * a‚úù < x * a‚úù¬π
    norm_cast at x0
    -- ‚ä¢ x * a‚úù < x * a‚úù¬π
    exact mul_lt_mul_of_pos_left h x0 ‚ü©
    -- üéâ no goals

instance [MulZeroClass Œ±] [Preorder Œ±] [MulPosStrictMono Œ±] : MulPosStrictMono (WithBot Œ±) :=
  ‚ü®by
    intro ‚ü®x, x0‚ü© a b h
    -- ‚ä¢ (fun x y => y * ‚Üëx) { val := x, property := x0 } a < (fun x y => y * ‚Üëx) { v ‚Ä¶
    simp only [Subtype.coe_mk]
    -- ‚ä¢ a * x < b * x
    lift x to Œ± using x0.ne_bot
    -- ‚ä¢ a * ‚Üëx < b * ‚Üëx
    induction b using WithBot.recBotCoe
    -- ‚ä¢ a * ‚Üëx < ‚ä• * ‚Üëx
    ¬∑ exact absurd h not_lt_bot
      -- üéâ no goals
    induction a using WithBot.recBotCoe
    -- ‚ä¢ ‚ä• * ‚Üëx < ‚Üëa‚úù * ‚Üëx
    ¬∑ simp_rw [bot_mul x0.ne.symm, ‚Üê coe_mul, bot_lt_coe]
      -- üéâ no goals
    simp only [‚Üê coe_mul, coe_lt_coe] at *
    -- ‚ä¢ a‚úù * x < a‚úù¬π * x
    norm_cast at x0
    -- ‚ä¢ a‚úù * x < a‚úù¬π * x
    exact mul_lt_mul_of_pos_right h x0 ‚ü©
    -- üéâ no goals

instance [MulZeroClass Œ±] [Preorder Œ±] [PosMulReflectLT Œ±] : PosMulReflectLT (WithBot Œ±) :=
  ‚ü®by
    intro ‚ü®x, x0‚ü© a b h
    -- ‚ä¢ a < b
    simp only [Subtype.coe_mk] at h
    -- ‚ä¢ a < b
    rcases eq_or_ne x 0 with rfl | x0'
    -- ‚ä¢ a < b
    ¬∑ simp at h
      -- üéâ no goals
    lift x to Œ±
    -- ‚ä¢ x ‚â† ‚ä•
    ¬∑ rintro rfl
      -- ‚ä¢ False
      exact (WithBot.bot_lt_coe (0 : Œ±)).not_le x0
      -- üéâ no goals
    induction b using WithBot.recBotCoe
    -- ‚ä¢ a < ‚ä•
    ¬∑ rw [mul_bot x0'] at h
      -- ‚ä¢ a < ‚ä•
      exact absurd h bot_le.not_lt
      -- üéâ no goals
    induction a using WithBot.recBotCoe
    -- ‚ä¢ ‚ä• < ‚Üëa‚úù
    ¬∑ exact WithBot.bot_lt_coe _
      -- üéâ no goals
    simp only [‚Üê coe_mul, coe_lt_coe] at *
    -- ‚ä¢ a‚úù < a‚úù¬π
    norm_cast at x0
    -- ‚ä¢ a‚úù < a‚úù¬π
    exact lt_of_mul_lt_mul_left h x0 ‚ü©
    -- üéâ no goals

instance [MulZeroClass Œ±] [Preorder Œ±] [MulPosReflectLT Œ±] : MulPosReflectLT (WithBot Œ±) :=
  ‚ü®by
    intro ‚ü®x, x0‚ü© a b h
    -- ‚ä¢ a < b
    simp only [Subtype.coe_mk] at h
    -- ‚ä¢ a < b
    rcases eq_or_ne x 0 with rfl | x0'
    -- ‚ä¢ a < b
    ¬∑ simp at h
      -- üéâ no goals
    lift x to Œ±
    -- ‚ä¢ x ‚â† ‚ä•
    ¬∑ rintro rfl
      -- ‚ä¢ False
      exact (WithBot.bot_lt_coe (0 : Œ±)).not_le x0
      -- üéâ no goals
    induction b using WithBot.recBotCoe
    -- ‚ä¢ a < ‚ä•
    ¬∑ rw [bot_mul x0'] at h
      -- ‚ä¢ a < ‚ä•
      exact absurd h bot_le.not_lt
      -- üéâ no goals
    induction a using WithBot.recBotCoe
    -- ‚ä¢ ‚ä• < ‚Üëa‚úù
    ¬∑ exact WithBot.bot_lt_coe _
      -- üéâ no goals
    simp only [‚Üê coe_mul, coe_lt_coe] at *
    -- ‚ä¢ a‚úù < a‚úù¬π
    norm_cast at x0
    -- ‚ä¢ a‚úù < a‚úù¬π
    exact lt_of_mul_lt_mul_right h x0 ‚ü©
    -- üéâ no goals

instance [MulZeroClass Œ±] [Preorder Œ±] [PosMulMonoRev Œ±] : PosMulMonoRev (WithBot Œ±) :=
  ‚ü®by
    intro ‚ü®x, x0‚ü© a b h
    -- ‚ä¢ a ‚â§ b
    simp only [Subtype.coe_mk] at h
    -- ‚ä¢ a ‚â§ b
    lift x to Œ± using x0.ne_bot
    -- ‚ä¢ a ‚â§ b
    induction a using WithBot.recBotCoe
    -- ‚ä¢ ‚ä• ‚â§ b
    ¬∑ exact bot_le
      -- üéâ no goals
    induction b using WithBot.recBotCoe
    -- ‚ä¢ ‚Üëa‚úù ‚â§ ‚ä•
    ¬∑ rw [mul_bot x0.ne.symm, ‚Üê coe_mul] at h
      -- ‚ä¢ ‚Üëa‚úù ‚â§ ‚ä•
      exact absurd h (bot_lt_coe _).not_le
      -- üéâ no goals
    simp only [‚Üê coe_mul, coe_le_coe] at *
    -- ‚ä¢ a‚úù¬π ‚â§ a‚úù
    norm_cast at x0
    -- ‚ä¢ a‚úù¬π ‚â§ a‚úù
    exact le_of_mul_le_mul_left h x0 ‚ü©
    -- üéâ no goals

instance [MulZeroClass Œ±] [Preorder Œ±] [MulPosMonoRev Œ±] : MulPosMonoRev (WithBot Œ±) :=
  ‚ü®by
    intro ‚ü®x, x0‚ü© a b h
    -- ‚ä¢ a ‚â§ b
    simp only [Subtype.coe_mk] at h
    -- ‚ä¢ a ‚â§ b
    lift x to Œ± using x0.ne_bot
    -- ‚ä¢ a ‚â§ b
    induction a using WithBot.recBotCoe
    -- ‚ä¢ ‚ä• ‚â§ b
    ¬∑ exact bot_le
      -- üéâ no goals
    induction b using WithBot.recBotCoe
    -- ‚ä¢ ‚Üëa‚úù ‚â§ ‚ä•
    ¬∑ rw [bot_mul x0.ne.symm, ‚Üê coe_mul] at h
      -- ‚ä¢ ‚Üëa‚úù ‚â§ ‚ä•
      exact absurd h (bot_lt_coe _).not_le
      -- üéâ no goals
    simp only [‚Üê coe_mul, coe_le_coe] at *
    -- ‚ä¢ a‚úù¬π ‚â§ a‚úù
    norm_cast at x0
    -- ‚ä¢ a‚úù¬π ‚â§ a‚úù
    exact le_of_mul_le_mul_right h x0 ‚ü©
    -- üéâ no goals

instance orderedCommSemiring [CanonicallyOrderedCommSemiring Œ±] [Nontrivial Œ±] :
    OrderedCommSemiring (WithBot Œ±) :=
  { WithBot.zeroLEOneClass, WithBot.orderedAddCommMonoid, WithBot.commSemiring with
    mul_le_mul_of_nonneg_left  := fun _ _ _ => mul_le_mul_of_nonneg_left
    mul_le_mul_of_nonneg_right := fun _ _ _ => mul_le_mul_of_nonneg_right }

end WithBot
