import Mathlib

section cyclo

theorem IsIntegralClosure.subalgebra_eq_of_integralClosure {R A : Type*} [CommRing R] [CommRing A]
    [Algebra R A] {S : Subalgebra R A} (hS : IsIntegralClosure S R A) :
    S = integralClosure R A := by
  ext x
  rw [mem_integralClosure_iff, hS.isIntegral_iff]
  refine ‚ü®fun hx ‚Ü¶ ‚ü®‚ü®x, hx‚ü©, rfl‚ü©, ?_‚ü©
  rintro ‚ü®y, rfl‚ü©
  exact y.prop

open NumberField

example {p : ‚Ñï+} {k : ‚Ñï} {K : Type*} [Field K] {Œ∂ : K} [hp : Fact (Nat.Prime p)] [NumberField K]
    [hcycl : IsCyclotomicExtension {p ^ k} ‚Ñö K] (hŒ∂ : IsPrimitiveRoot Œ∂ ‚Üë(p ^ k)) :
    Algebra.adjoin ‚Ñ§ {(hŒ∂.toInteger : ùìû K)} = ‚ä§ := by
  have := IsCyclotomicExtension.Rat.isIntegralClosure_adjoin_singleton_of_prime_pow hŒ∂
  have k := IsIntegralClosure.subalgebra_eq_of_integralClosure this

  let f : ùìû K ‚Üí‚Çê[‚Ñ§] K := by exact Algebra.algHom ‚Ñ§ (ùìû K) K
  let g := Subalgebra.map f
  have : Function.Injective g := sorry
  rw [‚Üê this.eq_iff]
  simp [g, f]
  convert k
  unfold RingOfIntegers
  
  apply IsIntegralClosure.subalgebra_eq_of_integralClosure


#exit

  apply IsIntegralClosure.subalgebra_integralClosure_eq_top
  convert IsCyclotomicExtension.Rat.isIntegralClosure_adjoin_singleton_of_prime_pow hŒ∂


#exit
  refine Algebra.eq_top_iff.mpr fun x ‚Ü¶ ?_
  have : x = hŒ∂.adjoinEquivRingOfIntegers (hŒ∂.adjoinEquivRingOfIntegers.symm x) := by
    exact (AlgEquiv.symm_apply_eq hŒ∂.adjoinEquivRingOfIntegers).mp rfl
  rw [this]
  simp




#exit





  obtain ‚ü®y, hy‚ü© := hŒ∂.adjoinEquivRingOfIntegers.symm x
  have := hŒ∂.adjoinEquivRingOfIntegers_symm_apply x
  have : x = ‚ü®y, sorry‚ü© := sorry
  rw [this]


end cyclo

@[to_additive]
theorem Monoid.exponent_eq_sInf {G : Type*} [Monoid G] :
    Monoid.exponent G = sInf {d : ‚Ñï | 0 < d ‚àß ‚àÄ x : G, x ^ d = 1} := by
  by_cases h : Monoid.ExponentExists G
  ¬∑ rw [Monoid.exponent, dif_pos h]
    obtain ‚ü®d, hd‚ü© := h
    have h' : {d : ‚Ñï | 0 < d ‚àß ‚àÄ x : G, x ^ d = 1}.Nonempty := by
      refine ‚ü®d, hd‚ü©
    rw [Nat.sInf_def h']
    congr
  ¬∑ rw [Monoid.exponent_eq_zero_iff.mpr h]
    have : {d | 0 < d ‚àß ‚àÄ (x : G), x ^ d = 1} = ‚àÖ :=
      Set.eq_empty_of_forall_not_mem fun n hn ‚Ü¶ h ‚ü®n, hn‚ü©
    rw [this, Nat.sInf_empty]

@[simp]
theorem Algebra.norm_self_apply {R : Type*} [CommRing R] (x : R) :
    Algebra.norm R x = x := by
  simp [norm_apply]

theorem associated_abs {Œ± : Type*} [Ring Œ±] [LinearOrder Œ±] (x : Œ±) :
    Associated x |x| := by
  obtain h | h := abs_choice x
  ¬∑ rw [h]
  ¬∑ rw [h]
    refine ‚ü®-1, by simp‚ü©

section Int.Ideal

open Ideal

theorem Int.ideal_eq_span_absNorm_self (J : Ideal ‚Ñ§) :
    J = span {(absNorm J : ‚Ñ§)} := by
  have : Submodule.IsPrincipal J := by exact IsPrincipalIdealRing.principal J
  obtain ‚ü®g, rfl‚ü© := this
  rw [submodule_span_eq, span_singleton_eq_span_singleton, absNorm_span_singleton,
    Int.natCast_natAbs, Algebra.norm_self_apply]
  exact associated_abs _

theorem Int.cast_mem_ideal_iff {R : Type*} [Ring R] [Algebra ‚Ñ§ R] {I : Ideal R} {d : ‚Ñ§} :
    (d : R) ‚àà I ‚Üî (absNorm (under ‚Ñ§ I) : ‚Ñ§) ‚à£ d := by
  rw [‚Üê mem_span_singleton, ‚Üê Int.ideal_eq_span_absNorm_self, under_def, mem_comap, eq_intCast]

theorem Int.absNorm_under_mem {R : Type*} [Ring R] [Algebra ‚Ñ§ R] (I : Ideal R) :
    (absNorm (under ‚Ñ§ I) : R) ‚àà I := by
  rw [‚Üê Int.cast_natCast, Int.cast_mem_ideal_iff]

theorem Int.absNorm_under_eq_sInf {R : Type*} [Ring R] [Algebra ‚Ñ§ R] (I : Ideal R) :
    absNorm (under ‚Ñ§ I) = sInf {d : ‚Ñï | 0 < d ‚àß (d : R) ‚àà I} := by
  by_cases h : absNorm (under ‚Ñ§ I) = 0
  ¬∑ have : {d : ‚Ñï | 0 < d ‚àß ‚Üëd ‚àà I} = ‚àÖ := by
      refine Set.eq_empty_of_forall_not_mem ?_
      intro x ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©
      rw [‚Üê Int.cast_natCast, Int.cast_mem_ideal_iff, h, Int.natCast_dvd_natCast,
        Nat.zero_dvd] at hx‚ÇÇ
      rw [Nat.pos_iff_ne_zero] at hx‚ÇÅ
      exact hx‚ÇÅ hx‚ÇÇ
    rw [h, this, Nat.sInf_empty]
  ¬∑ have h‚ÇÅ : absNorm (under ‚Ñ§ I) ‚àà {d : ‚Ñï | 0 < d ‚àß ‚Üëd ‚àà I} :=
      ‚ü®Nat.pos_of_ne_zero h, Int.absNorm_under_mem I‚ü©
    refine le_antisymm ?_ (Nat.sInf_le h‚ÇÅ)
    by_contra! h‚ÇÄ
    have h‚ÇÇ := (Nat.sInf_mem (Set.nonempty_of_mem h‚ÇÅ)).2
    rw [‚Üê Int.cast_natCast, Int.cast_mem_ideal_iff, Int.natCast_dvd_natCast] at h‚ÇÇ
    exact lt_iff_not_le.mp h‚ÇÄ <| Nat.le_of_dvd (Nat.sInf_mem (Set.nonempty_of_mem h‚ÇÅ)).1 h‚ÇÇ

theorem Int.absNorm_under_dvd_absNorm {R : Type*} [CommRing R] [IsDedekindDomain R]
    [Module.Free ‚Ñ§ R] (I : Ideal R) :
    absNorm (under ‚Ñ§ I) ‚à£ absNorm I := by
  by_cases h : Finite (R ‚ß∏ I)
  ¬∑ have : Fintype (R ‚ß∏ I) := Fintype.ofFinite (R ‚ß∏ I)
    have h_main {d : ‚Ñï} : (d : R) ‚àà I ‚Üî ‚àÄ (x : R ‚ß∏ I), d ‚Ä¢ x = 0 := by
      simp_rw [nsmul_eq_mul, ‚Üê map_natCast (Ideal.Quotient.mk I), ‚Üê Quotient.eq_zero_iff_mem]
      exact ‚ü®fun h _ ‚Ü¶ by simp [h], fun h ‚Ü¶ by simpa using h 1‚ü©
    rw [Ideal.absNorm_apply I, Submodule.cardQuot_apply, Nat.card_eq_fintype_card]
    simp_rw [Int.absNorm_under_eq_sInf, h_main, ‚Üê AddMonoid.exponent_eq_sInf]
    exact AddGroup.exponent_dvd_card (G := R ‚ß∏ I)
  ¬∑ rw [show absNorm I = 0 by
      exact AddSubgroup.index_eq_zero_iff_infinite.mpr <| not_finite_iff_infinite.mp h]
    exact Nat.dvd_zero _

end Int.Ideal

theorem Ideal.span_pair_eq_span_singleton_of_dvd {R : Type*} [CommSemiring R] {a b : R}
    (h : a ‚à£ b) :
    Ideal.span {a, b} = Ideal.span {a} := by
  rwa [Ideal.span_insert, sup_eq_left, Ideal.span_singleton_le_span_singleton]

@[simp]
theorem Int.quotientSpanNatEquivZMod_comp_Quotient_mk_eq (n :‚Ñï) :
    (Int.quotientSpanNatEquivZMod n : _ ‚Üí+* _).comp (Ideal.Quotient.mk (Ideal.span {(n : ‚Ñ§)})) =
      Int.castRingHom (ZMod n) := rfl

@[simp]
theorem Int.quotientSpanNatEquivZMod_comp_castRingHom_eq (n : ‚Ñï) :
    RingHom.comp (Int.quotientSpanNatEquivZMod n).symm (Int.castRingHom (ZMod n)) =
      Ideal.Quotient.mk (Ideal.span {(n : ‚Ñ§)}) := by ext; simp

theorem IsCoatom.sup_eq_top_iff {Œ± : Type*} {a b : Œ±} [SemilatticeSup Œ±] [OrderTop Œ±]
    (ha : IsCoatom a) :
    a ‚äî b = ‚ä§ ‚Üî ¬¨ b ‚â§ a := by
  by_cases hb : b = ‚ä§
  ¬∑ simpa [hb] using ha.1
  ¬∑ exact ‚ü®fun h ‚Ü¶ left_lt_sup.mp (h ‚ñ∏ IsCoatom.lt_top ha), fun h ‚Ü¶ ha.2 _ (left_lt_sup.mpr h)‚ü©

theorem adjoin_eq_top_of_conductor_eq_top {R : Type*} {S : Type*} [CommRing R] [CommRing S]
    [Algebra R S] {x : S} (h : conductor R x = ‚ä§) :
    Algebra.adjoin R {x} = ‚ä§ :=
    Algebra.eq_top_iff.mpr fun y ‚Ü¶
      one_mul y ‚ñ∏ (mem_conductor_iff).mp ((Ideal.eq_top_iff_one (conductor R x)).mp h) y

theorem conductor_eq_top_iff_adjoin_eq_top {R : Type*} {S : Type*} [CommRing R] [CommRing S]
    [Algebra R S] {x : S} :
    conductor R x = ‚ä§ ‚Üî Algebra.adjoin R {x} = ‚ä§ :=
  ‚ü®fun h ‚Ü¶ adjoin_eq_top_of_conductor_eq_top h, fun h ‚Ü¶ conductor_eq_top_of_adjoin_eq_top h‚ü©

theorem Ideal.ramificationIdx_eq_multiplicity {R : Type*} [CommRing R] {S : Type*} [CommRing S]
    [IsDedekindDomain S] {f : R ‚Üí+* S} (hf : Function.Injective f) {p : Ideal R} (hp : p ‚â† ‚ä•)
    {P : Ideal S} (hP‚ÇÅ: P.IsPrime) (hP‚ÇÇ : P ‚â† ‚ä•)  :
    ramificationIdx f p P = multiplicity P (Ideal.map f p) := by
  classical
  have hp' : map f p ‚â† ‚ä• := (map_eq_bot_iff_of_injective hf).not.mpr hp
  rw [multiplicity_eq_of_emultiplicity_eq_some]
  rw [IsDedekindDomain.ramificationIdx_eq_normalizedFactors_count hp' hP‚ÇÅ hP‚ÇÇ, ‚Üê normalize_eq P,
    ‚Üê UniqueFactorizationMonoid.emultiplicity_eq_count_normalizedFactors _ hp', normalize_eq]
  exact irreducible_iff_prime.mpr <| prime_of_isPrime hP‚ÇÇ hP‚ÇÅ

open scoped Polynomial

theorem finrank_quotient_span_eq_natDegree {F : Type*} [Field F] {f : F[X]} (hf : f ‚â† 0) :
    Module.finrank F (F[X] ‚ß∏ Ideal.span {f}) = f.natDegree := by
  simpa using finrank_quotient_span_eq_natDegree_norm (Basis.singleton (Fin 1) F[X]) hf

theorem Algebra.finrank_eq_of_equiv_equiv {R S : Type*} [CommSemiring R] [Semiring S] [Algebra R S]
    {R' : Type*} [CommSemiring R'] {S' : Type*} [Semiring S'] [Algebra R' S'] (i : R ‚âÉ+* R')
    (j : S ‚âÉ+* S') (hc : (algebraMap R' S').comp i.toRingHom = j.toRingHom.comp (algebraMap R S)) :
    Module.finrank R S = Module.finrank R' S' := by
  simpa using (congr_arg Cardinal.toNat (lift_rank_eq_of_equiv_equiv i j hc))

theorem Int.ideal_span_isMaximal_of_prime (p : ‚Ñï) [hp : Fact (Nat.Prime p)] :
    (Ideal.span {(p : ‚Ñ§)}).IsMaximal :=
  Ideal.Quotient.maximal_of_isField _ <|
    (Int.quotientSpanNatEquivZMod p).toMulEquiv.isField _ (Field.toIsField _)



variable {Œ± : Type*}

open Polynomial in
theorem Polynomial.normalize_eq_self_iff_monic {K : Type*} [Field K] [DecidableEq K]
    {p : Polynomial K} (hp : p ‚â† 0) :
    normalize p = p ‚Üî p.Monic :=
  ‚ü®fun h ‚Ü¶ h ‚ñ∏ monic_normalize hp, fun h ‚Ü¶ Monic.normalize_eq_self h‚ü©

open Polynomial in
@[simp]
theorem Polynomial.map_normalize {K : Type*} [Field K] [DecidableEq K]
    {p : Polynomial K} {S : Type*} [Field S] [DecidableEq S] (f : K ‚Üí+* S) :
    map f (normalize p) = normalize (map (f : K ‚Üí+* S) p) := by
  by_cases hp : p = 0
  ¬∑ simp [hp]
  ¬∑ simp [normalize_apply, Polynomial.map_mul, normUnit, hp]

theorem MulEquiv_dvd_iff [Monoid Œ±] {Œ≤ : Type*} [Monoid Œ≤] {a : Œ±} {b : Œ≤} {e : Œ± ‚âÉ* Œ≤} :
    e a ‚à£ b ‚Üî a ‚à£ e.symm b := by
  simp_rw [dvd_def, MulEquiv.symm_apply_eq, map_mul]
  refine ‚ü®?_, ?_‚ü©
  ¬∑ rintro ‚ü®c, rfl‚ü©
    exact ‚ü®e.symm c, by rw [MulEquiv.apply_symm_apply]‚ü©
  ¬∑ rintro ‚ü®c, rfl‚ü©
    refine ‚ü®e c, rfl‚ü©

theorem RingEquiv_dvd_iff [Ring Œ±] {Œ≤ : Type*} [Ring Œ≤] {a : Œ±} {b : Œ≤} {e : Œ± ‚âÉ+* Œ≤} :
    e a ‚à£ b ‚Üî a ‚à£ e.symm b := by
  exact MulEquiv_dvd_iff (e := e.toMulEquiv)

variable [CancelCommMonoidWithZero Œ±] [NormalizationMonoid Œ±]

theorem irreducible_normalize_iff {a : Œ±} :
    Irreducible (normalize a) ‚Üî Irreducible a := by
  rw [normalize_apply, irreducible_mul_units]

theorem normalize_eq_iff_associated {x y : Œ±} :
    normalize x = normalize y ‚Üî Associated x y := by
  rw [normalize_eq_normalize_iff, dvd_dvd_iff_associated]

namespace UniqueFactorizationMonoid

variable [UniqueFactorizationMonoid Œ±]

omit [NormalizationMonoid Œ±] in
theorem zero_notMem_factors {a : Œ±} :
    0 ‚àâ factors a := by
  by_cases h : a = 0
  ¬∑ simp [h]
  ¬∑ by_contra h'
    simpa [Multiset.prod_eq_zero h', Associated.comm, h] using factors_prod h

theorem zero_notMem_normalizedFactors {a : Œ±} :
    0 ‚àâ normalizedFactors a := by
  exact zero_not_mem_normalizedFactors a

theorem dvd_of_normalized_factor {a : Œ±} :
    ‚àÄ x : Œ±, x ‚àà normalizedFactors a ‚Üí x ‚à£ a := fun x h ‚Ü¶ by
  obtain ‚ü®y, hy, rfl‚ü© := Multiset.mem_map.mp h
  exact normalize_dvd_iff.mpr <| dvd_of_mem_factors hy

theorem mem_normalizedFactors_iff' {a x : Œ±} (h : a ‚â† 0) :
    x ‚àà normalizedFactors a ‚Üî Irreducible x ‚àß normalize x = x ‚àß x ‚à£ a := by
  refine ‚ü®fun h ‚Ü¶ ‚ü®irreducible_of_normalized_factor x h, normalize_normalized_factor x h,
    dvd_of_normalized_factor x h‚ü©, fun ‚ü®h‚ÇÅ, h‚ÇÇ, h‚ÇÉ‚ü© ‚Ü¶ ?_‚ü©
  obtain ‚ü®y, hy‚ÇÅ, hy‚ÇÇ‚ü© := UniqueFactorizationMonoid.exists_mem_factors_of_dvd h h‚ÇÅ h‚ÇÉ
  exact Multiset.mem_map.mpr ‚ü®y, hy‚ÇÅ, by rwa [‚Üê h‚ÇÇ, normalize_eq_iff_associated, Associated.comm]‚ü©

def normalizedFactorsEquiv {Œ≤ : Type*} [CancelCommMonoidWithZero Œ≤]
    [NormalizationMonoid Œ≤] [UniqueFactorizationMonoid Œ≤] {e : Œ± ‚âÉ* Œ≤}
    (he : ‚àÄ x, normalize (e x) = e (normalize x)) (a : Œ±) :
    {x | x ‚àà normalizedFactors a} ‚âÉ {y | y ‚àà normalizedFactors (e a)} := by
  refine Equiv.subtypeEquiv e fun x ‚Ü¶ ?_
  by_cases ha : a = 0
  ¬∑ simp [ha]
  ¬∑ simp [mem_normalizedFactors_iff' ha, mem_normalizedFactors_iff'
      (EmbeddingLike.map_ne_zero_iff.mpr ha), MulEquiv_dvd_iff, MulEquiv.symm_apply_apply,
      MulEquiv.irreducible_iff, he]

theorem normalizedFactorsEquiv_apply {Œ≤ : Type*} [CancelCommMonoidWithZero Œ≤]
    [NormalizationMonoid Œ≤] [UniqueFactorizationMonoid Œ≤] (e : Œ± ‚âÉ* Œ≤)
    (he : ‚àÄ x, normalize (e x) = e (normalize x)) (a : Œ±) {x : Œ±} (hx : x ‚àà normalizedFactors a) :
    (normalizedFactorsEquiv he a) ‚ü®x, hx‚ü© = e x := rfl

end UniqueFactorizationMonoid

theorem Ideal.ne_bot_of_le_comap_algebra {A : Type*} [CommRing A] {p : Ideal A} {B : Type*} [Ring B]
    [Nontrivial B] (P : Ideal B) [Algebra A B] [NoZeroSMulDivisors A B] (hp : p ‚â† ‚ä•)
    (hP : p ‚â§ comap (algebraMap A B) P) :
    P ‚â† ‚ä• := by
  contrapose! hp
  simpa [hp] using hP

theorem Ideal.ne_bot_of_liesOver_of_ne_bot' {A : Type*} [CommRing A] {B : Type*} [Ring B]
    [Nontrivial B] [Algebra A B] [NoZeroSMulDivisors A B] {p : Ideal A} (hp : p ‚â† ‚ä•)
    (P : Ideal B) [hP : P.LiesOver p] : P ‚â† ‚ä• :=
  ne_bot_of_le_comap_algebra P hp <| le_of_eq ((Ideal.liesOver_iff _ _).mp hP)

open Ideal UniqueFactorizationMonoid in
theorem Ideal.primesOver_eq_normalizedFactors {A : Type*} [CommRing A] [IsDedekindDomain A]
    (p : Ideal A) [h : p.IsMaximal] (B : Type*) [CommRing B] [IsDedekindDomain B] [Algebra A B]
    [NoZeroSMulDivisors A B] (hp : p ‚â† ‚ä•) :
    p.primesOver B =  {P | P ‚àà normalizedFactors (Ideal.map (algebraMap A B) p)} := by
  ext P
  simp only [primesOver, liesOver_iff, under_def, Set.mem_setOf_eq, mem_normalizedFactors_iff'
    (map_ne_bot_of_ne_bot hp :  map (algebraMap A B) p ‚â† 0), irreducible_iff_prime,
    normalize_eq, dvd_iff_le, map_le_iff_le_comap, true_and]
  refine ‚ü®fun ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© ‚Ü¶ ‚ü®?_, le_of_eq h‚ÇÇ‚ü©, fun ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© ‚Ü¶ ‚ü®?_, ?_‚ü©‚ü©
  ¬∑ rwa [prime_iff_isPrime (ne_bot_of_le_comap_algebra P hp <| le_of_eq h‚ÇÇ)]
  ¬∑ rwa [‚Üê prime_iff_isPrime (ne_bot_of_le_comap_algebra P hp h‚ÇÇ)]
  ¬∑ rw [prime_iff_isPrime (ne_bot_of_le_comap_algebra P hp h‚ÇÇ)] at h‚ÇÅ
    refine ((IsCoatom.le_iff_eq (isMaximal_def.mp h) ?_).mp h‚ÇÇ).symm
    exact comap_ne_top (algebraMap A B) (IsPrime.ne_top h‚ÇÅ)
