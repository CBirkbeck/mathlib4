/-
Copyright (c) 2023 Martin Dvorak. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Martin Dvorak, Antoine Chambert-Loir
-/
import Mathlib.Analysis.Convex.Cone.Pointed
import Mathlib.Analysis.Convex.Topology
import Mathlib.Analysis.NormedSpace.HahnBanach.Separation
import Mathlib.Algebra.Order.Group.Defs
import Mathlib.RingTheory.Finiteness

/-!

# Linear programming

TODO

-/

section LP_general

/-- Typically `M` is `‚Ñù^m` and `N` is `‚Ñù^n` -/
structure LinearProgram (R : Type*) (M : Type*) (N : Type*)
    [OrderedSemiring R] [AddCommMonoid M] [Module R M] [AddCommMonoid N] [Module R N] where
  /-- Linear map -/
  linmap : M ‚Üí‚Çó[R] N
  /-- Right-hand side -/
  upper : N
  /-- Objective function -/
  objective : M ‚Üí‚Çó[R] R
  /-- Cone defines nonnegative elements -/
  cone : PointedCone R N

variable {R M N : Type*}
  [OrderedSemiring R] [AddCommMonoid M] [Module R M] [AddCommMonoid N] [Module R N]

/-- `LP.primal = { x : M | LP.linmap x ‚â§ LP.upper }` -/
def LinearProgram.primal (LP : LinearProgram R M N) :=
  { x : M | ‚àÉ c ‚àà LP.cone, LP.linmap x + c = LP.upper }

/-- `LP.dual = { g : N ‚Üí‚Çó[R] R | LP.objective = g ‚àò LP.linmap ‚àß 0 ‚â§ g }` -/
def LinearProgram.dual (LP : LinearProgram R M N) :=
  { g : N ‚Üí‚Çó[R] R | LP.objective = g ‚àò LP.linmap ‚àß ‚àÄ a ‚àà LP.cone, 0 ‚â§ g a }

-- From here on, we will probably need `[LinearOrderedField R] [AddCommGroup M] [AddCommGroup N]`

theorem LinearProgram.weakDuality (LP : LinearProgram R M N)
    {c : M} (hc : c ‚àà LP.primal) {d : N ‚Üí‚Çó[R] R} (hd : d ‚àà LP.dual) :
    LP.objective c ‚â§ d LP.upper :=
  sorry

/-- Theorem 1.4.1.a, TODO we probably need more assumptions (finite-dimensional `M` and `N` ?) -/
theorem LinearProgram.strongDuality (LP : LinearProgram R M N)
    (hC : LP.primal.Nonempty) (hD : LP.dual.Nonempty) :
    ‚àÉ c ‚àà LP.primal, ‚àÉ d ‚àà LP.dual, LP.objective c = d LP.upper :=
  sorry

/-- Theorem 1.4.1.b (TODO maybe add item (iii), which is easy,
    and item (iv), which holds when `N` is `‚Ñù^n` and `LP.cone` is the positive ortant) -/
theorem LinearProgram.min_max (LP : LinearProgram R M N)
    {c : M} (hc : c ‚àà LP.primal) {d : N ‚Üí‚Çó[R] R} (hd : d ‚àà LP.dual) (hs : LP.cone.FG) :
    -- TODO maybe `hs` is not needed
    (‚àÄ x ‚àà LP.primal, LP.objective x ‚â§ LP.objective c) ‚àß (‚àÄ g ‚àà LP.dual, d LP.upper ‚â§ g LP.upper) ‚Üî
      LP.objective c = d LP.upper :=
  sorry

/-- Theorem 1.4.1.c(1) -/
theorem LinearProgram.empty_dual (LP : LinearProgram R M N)
    (hC : LP.primal.Nonempty) (hD : LP.dual = ‚àÖ) :
    ‚àÄ r : R, ‚àÉ d ‚àà LP.dual, d LP.upper < r :=
  sorry

/-- Theorem 1.4.1.c(2) -/
theorem LinearProgram.empty_primal (LP : LinearProgram R M N)
    (hC : LP.primal = ‚àÖ) (hD : LP.dual.Nonempty) :
    ‚àÄ r : R, ‚àÉ c ‚àà LP.primal, r < LP.objective c :=
  sorry

end LP_general

/-
-- If we assume `R = ‚Ñù` and `Module.Finite M` and `Module.Finite N`, we can use something like...

open Set

open Pointwise

variable {ùïú E : Type*} [TopologicalSpace E] [AddCommGroup E] [TopologicalAddGroup E] [Module ‚Ñù E]
  [ContinuousSMul ‚Ñù E] {cone t : Set E} {x y : E} [LocallyConvexSpace ‚Ñù E]

lemma geometric_hahn_banach_point_closed' (ht‚ÇÅ : Convex ‚Ñù t) (disj : x ‚àâ t) :
    ‚àÉ (f : E ‚ÜíL[‚Ñù] ‚Ñù) (u : ‚Ñù), f x ‚â§ u ‚àß ‚àÄ b ‚àà t, u ‚â§ f b := by
  obtain ‚ü®f, hf‚ü© :=
    geometric_hahn_banach_open_point ht‚ÇÅ.interior isOpen_interior
      (fun h => disj (interior_subset h))
  use (-f)
  use -(f x)
  constructor
  ¬∑ rfl
  intro b hb
  rw [ContinuousLinearMap.neg_apply, neg_le_neg_iff]
  sorry
-/

section LP_standard

structure StandardLinearProgram (R V W : Type*)
    [OrderedCommSemiring R] [AddCommMonoid V] [Module R V] [AddCommMonoid W] [Module R W] where
  coneV : PointedCone R V
  linmap : V ‚Üí‚Çó[R] W
  coneW : PointedCone R W
  objective : Module.Dual R W
  target : W

variable {R V W : Type*}
    [OrderedCommSemiring R] [AddCommMonoid V] [Module R V] [AddCommMonoid W] [Module R W]

def StandardLinearProgram.space (LP : StandardLinearProgram R V W) : Set V :=
  { x ‚àà LP.coneV | ‚àÉ y ‚àà LP.coneW, LP.linmap x + y = LP.target }

end LP_standard
