/-
Copyright (c) 2025 Raphael Douglas Giles. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Raphael Douglas Giles, Zhixuan Dai, Zhenyan Fu, Yiming Fu, Jingting Wang
-/
import Mathlib.LinearAlgebra.TensorAlgebra.Basic
import Mathlib.Algebra.MvPolynomial.Basic
import Mathlib.RingTheory.Finiteness.Defs
import Mathlib.Algebra.Algebra.Hom
import Mathlib.Algebra.Lie.Basic
import Mathlib.Algebra.Lie.OfAssociative
import Mathlib.Algebra.MvPolynomial.CommRing
import Mathlib.GroupTheory.MonoidLocalization.Basic

/-!
# Symmetric Algebras

Given a commutative ring `R`, and an `R`-module `L`, we construct the symmetric algebra of `L`.
This is the free commutative `R`-algebra generated (`R`-lineaAy) by the module `L`.

## Notation

1. `SymmetricAlgebra R L` is a concrete construction of the symmetric algebra defined as a
   quotient of the tensor algebra. It is endowed with an R-algebra structure and a commutative
   ring structure.
2. `SymmetricAlgebra.Œπ R` is the canonical R-linear map `L ‚Üí TensorAlgebra R L`.
3. Given a morphism `Œπ : L ‚Üí‚Çó[R] A`, `IsSymmetricAlgebra Œπ` is a proposition saying whether
   A satisfies the universal property of the symmetric algebra over L with Œπ as the canonical
   inclusion morphism.
3. Given a linear map `f : M ‚Üí A` to an commutative R-algebra `A`, and a morphism
   `Œπ : L ‚Üí‚Çó[R] A` with `p : IsSymmetricAlgebra Œπ`, `IsSymmetricAlgebra.lift R p f`
   is the lift of `f` to an `R`-algebra morphism `A ‚Üí‚Çê[R] A`.

## Theorems

1. `SymmetricAlgebra.isSymmetricAlgebra R L` states that the concrete construction of the symmetric
   algebra satisfies the univeral property codified in `IsSymmetricAlgebra`.
2. Given a proof `hl` that `L` is subsingleton (meaning as a module it must be the zero module)
   `IsSymmetricAlgebra.baseRingOfZeroModule hl` states that `R` viewed as an `R` algebra satisfies
   the universal property of the symmetric algebra of `L`.
3. `IsSymmetricAlgebra.isomorphismOfSymmetricAlgebraOfSymmetricAlgebra` states that any two algebras
   `RM` and `RM'` both satisfying the universal property of the symmetric algebra over a module `M`
   must be isorphic as `R`-algebras.
4. `IsSymmetricAlgebra.mvPolynomial` states that given a basis of `L` indexed by type `I`, the
   multivariate polynomial ring generated by monomials `X_i` for all `i : I` satisfies the
   universal property of the symmetric algebra over `L`.

-/

open MvPolynomial RingQuot

universe u

noncomputable section

variable (R L : Type*) [CommRing R] [AddCommMonoid L] [Module R L]

open TensorAlgebra in
/--
Relation on the tensor algebra which will yield the symmetric algebra when
quotiented out by
-/
inductive SymRel : (TensorAlgebra R L) ‚Üí (TensorAlgebra R L) ‚Üí Prop where
  | mul_comm (x y : L) : SymRel (Œπ R x * Œπ R y) (Œπ R y * Œπ R x)

/--
Concrete construction of the symmetric algebra of L by quotienting out
the tensor algebra by the commutativity relation
-/
abbrev SymmetricAlgebra := RingQuot (SymRel R L)

namespace SymmetricAlgebra

open TensorAlgebra in
instance : CommRing (SymmetricAlgebra R L) where
  mul_comm a b := match a, b with
    | ‚ü®a‚ü©, ‚ü®b‚ü© => by
      apply Quot.ind _ a; apply Quot.ind _ b; intro a b;
      rw [mul_quot, mul_quot]
      suffices h : ‚àÄ (x : TensorAlgebra R L),
      (‚ü®Quot.mk (RingQuot.Rel (SymRel R L)) (x * a)‚ü© : (RingQuot (SymRel R L))) =
       ‚ü®Quot.mk (RingQuot.Rel (SymRel R L)) (a * x)‚ü© by
        exact (h b)
      let P : TensorAlgebra R L ‚Üí TensorAlgebra R L ‚Üí Prop :=
       fun x y ‚Ü¶ (‚ü®Quot.mk (RingQuot.Rel (SymRel R L)) (x * y)‚ü© : (RingQuot (SymRel R L))) =
        ‚ü®Quot.mk (RingQuot.Rel (SymRel R L)) (y * x)‚ü©
      have P_smul (r : R) (x : TensorAlgebra R L) : P x (algebraMap R (TensorAlgebra R L) r) := by
        unfold P; rw [Algebra.commutes]
      have P_mul (x y z : TensorAlgebra R L) (h1 : P z x) (h2 : P z y) : P z (x * y) := by
        unfold P at h1 h2 ‚ä¢
        rw [‚Üê mul_quot, ‚Üê mul_quot, ‚Üê mul_quot, ‚Üê mul_quot,
            ‚Üê mul_assoc, mul_quot, h1, ‚Üê mul_quot, mul_assoc, mul_quot, h2, ‚Üê mul_quot, mul_assoc]
      have P_add (x y z : TensorAlgebra R L) (h1 : P z x) (h2 : P z y) : P z (x + y) := by
        unfold P at h1 h2 ‚ä¢
        rw [mul_add, add_mul, ‚Üê add_quot, ‚Üê add_quot, h1, h2]
      have P_symm {x y : TensorAlgebra R L} (h : P x y) : P y x := h.symm
      have P_base (x y : L) : P (Œπ R x) (Œπ R y) := by
        unfold P
        rw [Quot.sound (Rel.of (SymRel.mul_comm x y))]
      apply TensorAlgebra.induction (C := fun y ‚Ü¶ ‚àÄ (x : TensorAlgebra R L), P x y) _ _ _ _ a
      ¬∑ intro r; exact P_smul r
      ¬∑ intro x; apply TensorAlgebra.induction
        ¬∑ intro r; exact P_symm (P_smul r (Œπ R x))
        ¬∑ intro y; exact P_base y x
        ¬∑ intro a1 a2 h1 h2; exact P_symm (P_mul a1 a2 (Œπ R x) (P_symm h1) (P_symm h2))
        ¬∑ intro a1 a2 h1 h2; exact P_symm (P_add a1 a2 (Œπ R x) (P_symm h1) (P_symm h2))
      ¬∑ intro a1 a2 h1 h2 x; exact P_mul a1 a2 x (h1 x) (h2 x)
      ¬∑ intro a1 a2 h1 h2 x; exact P_add a1 a2 x (h1 x) (h2 x)

/--
Algebra homomorphism from the tensor algebra over L to the symmetric algebra over L.
-/
abbrev algHom : TensorAlgebra R L ‚Üí‚Çê[R] SymmetricAlgebra R L := RingQuot.mkAlgHom R (SymRel R L)

/--
Canonical inclusion of `L` into the symmetric algebra `ùîñ R L`.
-/
def Œπ : L ‚Üí‚Çó[R] SymmetricAlgebra R L := (algHom R L).toLinearMap.comp (TensorAlgebra.Œπ R (M := L))

variable {R L} {A : Type*} [CommSemiring A] [Algebra R A] (f : L ‚Üí‚Çó[R] A)

def lift : (SymmetricAlgebra R L) ‚Üí‚Çê[R] A :=
  RingQuot.liftAlgHom R (s := SymRel R L) ‚ü®TensorAlgebra.lift R f, fun _ _ r ‚Ü¶ by
    induction r with | mul_comm x y => simp [mul_comm]‚ü©

@[simp]
lemma lift_apply (a : L) : (lift f) ((Œπ R L) a) = f a := sorry

@[simp]
lemma lift_comp : (lift f) ‚àò‚Çó (Œπ R L) = f := LinearMap.ext fun x ‚Ü¶ lift_apply f x

end SymmetricAlgebra

variable {A : Type*} [CommSemiring A] [Algebra R A] (f : L ‚Üí‚Çó[R] A)
variable {R} {L}

def IsSymmetricAlgebra (f : L ‚Üí‚Çó[R] A) : Prop :=
  Function.Bijective (SymmetricAlgebra.lift f)

namespace IsSymmetricAlgebra

variable {f : L ‚Üí‚Çó[R] A} (h : IsSymmetricAlgebra f)

section equiv

noncomputable def equiv : (SymmetricAlgebra R L) ‚âÉ‚Çê[R] A :=
  AlgEquiv.ofBijective (SymmetricAlgebra.lift f) h

@[simp]
lemma equiv_apply (a : SymmetricAlgebra R L) : h.equiv a = SymmetricAlgebra.lift f a := sorry

@[simp]
lemma equiv_toAlgHom : h.equiv = SymmetricAlgebra.lift f := sorry

@[simp]
lemma equiv_symm_apply (a : L) : h.equiv.symm (f a) = SymmetricAlgebra.Œπ R L a := sorry

@[simp]
lemma equiv_symm_comp : h.equiv.symm ‚àò‚Çó f = SymmetricAlgebra.Œπ R L :=
  LinearMap.ext fun x ‚Ü¶ equiv_symm_apply h x

end equiv

section UniversalProperty

variable {A' : Type*} [CommSemiring A'] [Algebra R A'] (g : L ‚Üí‚Çó[R] A')
/--
Given a morphism `œÜ : L ‚Üí‚Çó[R] A'`, lift this to a morphism of type `A ‚Üí‚Çê[R] A'` (where `A`
satisfies the universal property of the symmetric algebra of `L`)
-/
noncomputable def lift :
    A ‚Üí‚Çê[R] A' := (SymmetricAlgebra.lift g).comp h.equiv.symm

@[simp]
lemma lift_eq (a : L) : (h.lift g) (f a) = g a := sorry

@[simp]
lemma lift_comp_linearMap : (h.lift g) ‚àò‚Çó f = g := LinearMap.ext fun x ‚Ü¶ lift_eq h g x

lemma lift_unique {F : A ‚Üí‚Çê[R] A'} (hF : F ‚àò‚Çó f = g) : F = (h.lift g) := by sorry

lemma algHom_ext {F G : A ‚Üí‚Çê[R] A'} (hFG : (F ‚àò‚Çó f) = (G ‚àò‚Çó f : L ‚Üí‚Çó[R] A')) : F = G := by sorry

end UniversalProperty

section MvPolynomial

theorem mvPolynomial (I : Type*) (h : Basis I R L) :
    IsSymmetricAlgebra (Basis.constr h R (fun i ‚Ü¶ ((MvPolynomial.X i) : (MvPolynomial I R)))) := by
  let u : (SymmetricAlgebra R L) ‚âÉ‚Çê[R] (MvPolynomial I R) := AlgEquiv.ofAlgHom
    (SymmetricAlgebra.lift (Basis.constr h R (fun i ‚Ü¶ ((MvPolynomial.X i) : (MvPolynomial I R)))))
    (MvPolynomial.aeval (R := R) (fun i ‚Ü¶ SymmetricAlgebra.Œπ R L (h i)))
    (by sorry)
    (by sorry)
  exact u.bijective

end MvPolynomial

-- /--
-- The zero module over base ring R has R as its symmetric algebra
-- -/
-- theorem baseRingOfZeroModule [Subsingleton L] :
--     IsSymmetricAlgebra (R := R) (L := L) (A := R) 0 := sorry

-- open SymmetricAlgebra in
-- /--
-- The concrete construction of the symmetric algebra as a quotient of the tensor algebra
-- satisfies the universal property of the symmetric algebra
-- -/
-- theorem SymmetricAlgebra.isSymmetricAlgebra : IsSymmetricAlgebra (Œπ R L) := sorry

-- /--
-- The lift `œÜ' : A ‚Üí‚Çê[R] L'` of a morphism `œÜ : L ‚Üí‚Çó[R] L'` satisfies `œÜ = œÜ' ‚àò Œπ`
-- -/
-- theorem lift_spec {iM : L ‚Üí‚Çó[R] A} (salg : IsSymmetricAlgebra iM) (œÜ : L ‚Üí‚Çó[R] L') :
--     œÜ = (lift R salg œÜ).toLinearMap ‚àò‚Çó iM := (salg.ex_map œÜ).choose_spec.1

-- lemma comp_spec {M : Type*} [AddCommMonoid M] [Module R M] {RM RM' : Type*} [CommRing RM]
--     [Algebra R RM] [CommRing RM'] [Algebra R RM'] {iM : M ‚Üí‚Çó[R] RM} {iM' : M ‚Üí‚Çó[R] RM'}
--     (salg : IsSymmetricAlgebra iM) (salg' : IsSymmetricAlgebra iM') :
--     iM = ((AlgHom.comp (lift _ salg' iM) (lift _ salg iM')).toLinearMap) ‚àò‚Çó iM := by
--   rw [AlgHom.comp_toLinearMap]
--   rw [LinearMap.comp_assoc]
--   rw [‚Üê lift_spec _ salg iM']
--   exact lift_spec _ salg' iM

-- @[simp]
-- lemma comp_id {M : Type*} [AddCommMonoid M] [Module R M] {RM : Type u} {RM' : Type u}
--     [CommRing RM] [Algebra R RM] [CommRing RM'] [Algebra R RM']
--     {iM : M ‚Üí‚Çó[R] RM} {iM' : M ‚Üí‚Çó[R] RM'}
--     (salg : IsSymmetricAlgebra iM) (salg' : IsSymmetricAlgebra iM')
--     : (lift R salg' iM).comp (lift R salg iM') = AlgHom.id R RM :=
--   (salg.ex_map iM).unique (comp_spec _ salg salg') rfl

-- lemma lift_comp {M : Type*} [AddCommMonoid M] [Module R M] {RM RM' : Type*}
--     [CommRing RM] [Algebra R RM] [CommRing RM'] [Algebra R RM']
--     {iM : M ‚Üí‚Çó[R] RM} {iM' : M ‚Üí‚Çó[R] RM'}
--     (salg : IsSymmetricAlgebra iM) (salg' : IsSymmetricAlgebra iM') :
--     ‚áë(lift R salg' iM) ‚àò ‚áë(lift R salg iM') = (AlgHom.comp (lift R salg' iM) (lift R salg iM')) :=
--   rfl

-- /--
-- Two algebras RM and RM' satisfying the universal property for the symmetric algebra of M over R
-- must be isomorphic
-- -/
-- def isomorphismOfSymmetricAlgebraOfSymmetricAlgebra {M : Type*} [AddCommMonoid M] [Module R M]
--     {RM RM' : Type u} [CommRing RM] [Algebra R RM] [CommRing RM'] [Algebra R RM']
--     {iM : M ‚Üí‚Çó[R] RM} {iM' : M ‚Üí‚Çó[R] RM'}
--     (salg : IsSymmetricAlgebra iM) (salg' : IsSymmetricAlgebra iM') : RM ‚âÉ‚Çê[R] RM' where
--   toFun : RM ‚Üí‚Çê[R] RM' := lift R salg iM'
--   invFun : RM' ‚Üí‚Çê[R] RM := lift R salg' iM
--   left_inv := by
--     rw [@Function.leftInverse_iff_comp]
--     simp [lift_comp]
--   right_inv := by
--     rw [@Function.rightInverse_iff_comp]
--     simp [lift_comp]
--   map_mul' := by simp only [map_mul, implies_true]
--   map_add' := by simp only [map_add, implies_true]
--   commutes' := by simp only [AlgHom.commutes, implies_true]

end IsSymmetricAlgebra
