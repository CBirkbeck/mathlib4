/-
Copyright (c) 2020 Anne Baanen. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Anne Baanen
-/
import Mathlib.LinearAlgebra.Dimension
import Mathlib.LinearAlgebra.FreeModule.Basic
import Mathlib.LinearAlgebra.Matrix.ToLin
import Mathlib.RingTheory.PrincipalIdealDomain
import Mathlib.RingTheory.Finiteness

#align_import linear_algebra.free_module.pid from "leanprover-community/mathlib"@"d87199d51218d36a0a42c66c82d147b5a7ff87b3"

/-! # Free modules over PID

A free `R`-module `M` is a module with a basis over `R`,
equivalently it is an `R`-module linearly equivalent to `Œπ ‚Üí‚ÇÄ R` for some `Œπ`.

This file proves a submodule of a free `R`-module of finite rank is also
a free `R`-module of finite rank, if `R` is a principal ideal domain (PID),
i.e. we have instances `[IsDomain R] [IsPrincipalIdealRing R]`.
We express "free `R`-module of finite rank" as a module `M` which has a basis
`b : Œπ ‚Üí R`, where `Œπ` is a `Fintype`.
We call the cardinality of `Œπ` the rank of `M` in this file;
it would be equal to `finrank R M` if `R` is a field and `M` is a vector space.

## Main results

In this section, `M` is a free and finitely generated `R`-module, and
`N` is a submodule of `M`.

 - `Submodule.inductionOnRank`: if `P` holds for `‚ä• : Submodule R M` and if
  `P N` follows from `P N'` for all `N'` that are of lower rank, then `P` holds
   on all submodules

 - `submodule.exists_basis_of_pid`: if `R` is a PID, then `N : Submodule R M` is
   free and finitely generated. This is the first part of the structure theorem
   for modules.

- `Submodule.smithNormalForm`: if `R` is a PID, then `M` has a basis
  `bM` and `N` has a basis `bN` such that `bN i = a i ‚Ä¢ bM i`.
  Equivalently, a linear map `f : M ‚Üí‚Çó M` with `range f = N` can be written as
  a matrix in Smith normal form, a diagonal matrix with the coefficients `a i`
  along the diagonal.

## Tags

free module, finitely generated module, rank, structure theorem

-/


open BigOperators

universe u v

section Ring

variable {R : Type u} {M : Type v} [Ring R] [AddCommGroup M] [Module R M]

variable {Œπ : Type*} (b : Basis Œπ R M)

open Submodule.IsPrincipal Submodule

theorem eq_bot_of_generator_maximal_map_eq_zero (b : Basis Œπ R M) {N : Submodule R M}
    {œï : M ‚Üí‚Çó[R] R} (hœï : ‚àÄ œà : M ‚Üí‚Çó[R] R, ¬¨N.map œï < N.map œà) [(N.map œï).IsPrincipal]
    (hgen : generator (N.map œï) = (0 : R)) : N = ‚ä• := by
  rw [Submodule.eq_bot_iff]
  -- ‚ä¢ ‚àÄ (x : M), x ‚àà N ‚Üí x = 0
  intro x hx
  -- ‚ä¢ x = 0
  refine' b.ext_elem fun i ‚Ü¶ _
  -- ‚ä¢ ‚Üë(‚Üëb.repr x) i = ‚Üë(‚Üëb.repr 0) i
  rw [(eq_bot_iff_generator_eq_zero _).mpr hgen] at hœï
  -- ‚ä¢ ‚Üë(‚Üëb.repr x) i = ‚Üë(‚Üëb.repr 0) i
  rw [LinearEquiv.map_zero, Finsupp.zero_apply]
  -- ‚ä¢ ‚Üë(‚Üëb.repr x) i = 0
  exact
    (Submodule.eq_bot_iff _).mp (not_bot_lt_iff.1 <| hœï (Finsupp.lapply i ‚àò‚Çó ‚Üëb.repr)) _
      ‚ü®x, hx, rfl‚ü©
#align eq_bot_of_generator_maximal_map_eq_zero eq_bot_of_generator_maximal_map_eq_zero

theorem eq_bot_of_generator_maximal_submoduleImage_eq_zero {N O : Submodule R M} (b : Basis Œπ R O)
    (hNO : N ‚â§ O) {œï : O ‚Üí‚Çó[R] R} (hœï : ‚àÄ œà : O ‚Üí‚Çó[R] R, ¬¨œï.submoduleImage N < œà.submoduleImage N)
    [(œï.submoduleImage N).IsPrincipal] (hgen : generator (œï.submoduleImage N) = 0) : N = ‚ä• := by
  rw [Submodule.eq_bot_iff]
  -- ‚ä¢ ‚àÄ (x : M), x ‚àà N ‚Üí x = 0
  intro x hx
  -- ‚ä¢ x = 0
  refine (mk_eq_zero _ _).mp (show (‚ü®x, hNO hx‚ü© : O) = 0 from b.ext_elem fun i ‚Ü¶ ?_)
  -- ‚ä¢ ‚Üë(‚Üëb.repr { val := x, property := (_ : x ‚àà O) }) i = ‚Üë(‚Üëb.repr 0) i
  rw [(eq_bot_iff_generator_eq_zero _).mpr hgen] at hœï
  -- ‚ä¢ ‚Üë(‚Üëb.repr { val := x, property := (_ : x ‚àà O) }) i = ‚Üë(‚Üëb.repr 0) i
  rw [LinearEquiv.map_zero, Finsupp.zero_apply]
  -- ‚ä¢ ‚Üë(‚Üëb.repr { val := x, property := (_ : x ‚àà O) }) i = 0
  refine (Submodule.eq_bot_iff _).mp (not_bot_lt_iff.1 <| hœï (Finsupp.lapply i ‚àò‚Çó ‚Üëb.repr)) _ ?_
  -- ‚ä¢ ‚Üë(‚Üëb.repr { val := x, property := (_ : x ‚àà O) }) i ‚àà LinearMap.submoduleImag ‚Ä¶
  exact (LinearMap.mem_submoduleImage_of_le hNO).mpr ‚ü®x, hx, rfl‚ü©
  -- üéâ no goals
#align eq_bot_of_generator_maximal_submodule_image_eq_zero eq_bot_of_generator_maximal_submoduleImage_eq_zero

end Ring

section IsDomain

variable {Œπ : Type*} {R : Type*} [CommRing R] [IsDomain R]

variable {M : Type*} [AddCommGroup M] [Module R M] {b : Œπ ‚Üí M}

open Submodule.IsPrincipal Set Submodule

theorem dvd_generator_iff {I : Ideal R} [I.IsPrincipal] {x : R} (hx : x ‚àà I) :
    x ‚à£ generator I ‚Üî I = Ideal.span {x} := by
  conv_rhs => rw [‚Üê span_singleton_generator I]
  -- ‚ä¢ x ‚à£ generator I ‚Üî span R {generator I} = Ideal.span {x}
  rw [Ideal.submodule_span_eq, Ideal.span_singleton_eq_span_singleton, ‚Üê dvd_dvd_iff_associated,
    ‚Üê mem_iff_generator_dvd]
  exact ‚ü®fun h ‚Ü¶ ‚ü®hx, h‚ü©, fun h ‚Ü¶ h.2‚ü©
  -- üéâ no goals
#align dvd_generator_iff dvd_generator_iff

end IsDomain

section PrincipalIdealDomain

open Submodule.IsPrincipal Set Submodule

variable {Œπ : Type*} {R : Type*} [CommRing R] [IsDomain R] [IsPrincipalIdealRing R]

variable {M : Type*} [AddCommGroup M] [Module R M] {b : Œπ ‚Üí M}

open Submodule.IsPrincipal

theorem generator_maximal_submoduleImage_dvd {N O : Submodule R M} (hNO : N ‚â§ O) {œï : O ‚Üí‚Çó[R] R}
    (hœï : ‚àÄ œà : O ‚Üí‚Çó[R] R, ¬¨œï.submoduleImage N < œà.submoduleImage N)
    [(œï.submoduleImage N).IsPrincipal] (y : M) (yN : y ‚àà N)
    (œïy_eq : œï ‚ü®y, hNO yN‚ü© = generator (œï.submoduleImage N)) (œà : O ‚Üí‚Çó[R] R) :
    generator (œï.submoduleImage N) ‚à£ œà ‚ü®y, hNO yN‚ü© := by
  let a : R := generator (œï.submoduleImage N)
  -- ‚ä¢ generator (LinearMap.submoduleImage œï N) ‚à£ ‚Üëœà { val := y, property := (_ : y ‚Ä¶
  let d : R := IsPrincipal.generator (Submodule.span R {a, œà ‚ü®y, hNO yN‚ü©})
  -- ‚ä¢ generator (LinearMap.submoduleImage œï N) ‚à£ ‚Üëœà { val := y, property := (_ : y ‚Ä¶
  have d_dvd_left : d ‚à£ a := (mem_iff_generator_dvd _).mp (subset_span (mem_insert _ _))
  -- ‚ä¢ generator (LinearMap.submoduleImage œï N) ‚à£ ‚Üëœà { val := y, property := (_ : y ‚Ä¶
  have d_dvd_right : d ‚à£ œà ‚ü®y, hNO yN‚ü© :=
    (mem_iff_generator_dvd _).mp (subset_span (mem_insert_of_mem _ (mem_singleton _)))
  refine' dvd_trans _ d_dvd_right
  -- ‚ä¢ generator (LinearMap.submoduleImage œï N) ‚à£ d
  rw [dvd_generator_iff, Ideal.span, ‚Üê
    span_singleton_generator (Submodule.span R {a, œà ‚ü®y, hNO yN‚ü©})]
  obtain ‚ü®r‚ÇÅ, r‚ÇÇ, d_eq‚ü© : ‚àÉ r‚ÇÅ r‚ÇÇ : R, d = r‚ÇÅ * a + r‚ÇÇ * œà ‚ü®y, hNO yN‚ü© := by
    obtain ‚ü®r‚ÇÅ, r‚ÇÇ', hr‚ÇÇ', hr‚ÇÅ‚ü© :=
      mem_span_insert.mp (IsPrincipal.generator_mem (Submodule.span R {a, œà ‚ü®y, hNO yN‚ü©}))
    obtain ‚ü®r‚ÇÇ, rfl‚ü© := mem_span_singleton.mp hr‚ÇÇ'
    exact ‚ü®r‚ÇÅ, r‚ÇÇ, hr‚ÇÅ‚ü©
  let œà' : O ‚Üí‚Çó[R] R := r‚ÇÅ ‚Ä¢ œï + r‚ÇÇ ‚Ä¢ œà
  -- ‚ä¢ span R {generator (span R {a, ‚Üëœà { val := y, property := (_ : y ‚àà O) }})} =  ‚Ä¶
  have : span R {d} ‚â§ œà'.submoduleImage N := by
    rw [span_le, singleton_subset_iff, SetLike.mem_coe, LinearMap.mem_submoduleImage_of_le hNO]
    refine' ‚ü®y, yN, _‚ü©
    change r‚ÇÅ * œï ‚ü®y, hNO yN‚ü© + r‚ÇÇ * œà ‚ü®y, hNO yN‚ü© = d
    rw [d_eq, œïy_eq]
  refine'
    le_antisymm (this.trans (le_of_eq _)) (Ideal.span_singleton_le_span_singleton.mpr d_dvd_left)
  rw [span_singleton_generator]
  -- ‚ä¢ LinearMap.submoduleImage œà' N = LinearMap.submoduleImage œï N
  apply (le_trans _ this).eq_of_not_gt (hœï œà')
  -- ‚ä¢ LinearMap.submoduleImage œï N ‚â§ span R {d}
  rw [‚Üê span_singleton_generator (œï.submoduleImage N)]
  -- ‚ä¢ span R {generator (LinearMap.submoduleImage œï N)} ‚â§ span R {d}
  exact Ideal.span_singleton_le_span_singleton.mpr d_dvd_left
  -- ‚ä¢ generator (LinearMap.submoduleImage œï N) ‚àà span R {a, ‚Üëœà { val := y, propert ‚Ä¶
  ¬∑ exact subset_span (mem_insert _ _)
    -- üéâ no goals
#align generator_maximal_submodule_image_dvd generator_maximal_submoduleImage_dvd

/-- The induction hypothesis of `Submodule.basisOfPid` and `Submodule.smithNormalForm`.

Basically, it says: let `N ‚â§ M` be a pair of submodules, then we can find a pair of
submodules `N' ‚â§ M'` of strictly smaller rank, whose basis we can extend to get a basis
of `N` and `M`. Moreover, if the basis for `M'` is up to scalars a basis for `N'`,
then the basis we find for `M` is up to scalars a basis for `N`.

For `basis_of_pid` we only need the first half and can fix `M = ‚ä§`,
for `smith_normal_form` we need the full statement,
but must also feed in a basis for `M` using `basis_of_pid` to keep the induction going.
-/
theorem Submodule.basis_of_pid_aux [Finite Œπ] {O : Type*} [AddCommGroup O] [Module R O]
    (M N : Submodule R O) (b'M : Basis Œπ R M) (N_bot : N ‚â† ‚ä•) (N_le_M : N ‚â§ M) :
    ‚àÉ y ‚àà M,
      ‚àÉ (a : R) (_ : a ‚Ä¢ y ‚àà N),
        ‚àÉ M' ‚â§ M,
          ‚àÉ N' ‚â§ N,
            ‚àÉ (_N'_le_M' : N' ‚â§ M') (_y_ortho_M' :
              ‚àÄ (c : R) (z : O), z ‚àà M' ‚Üí c ‚Ä¢ y + z = 0 ‚Üí c = 0) (_ay_ortho_N' :
              ‚àÄ (c : R) (z : O), z ‚àà N' ‚Üí c ‚Ä¢ a ‚Ä¢ y + z = 0 ‚Üí c = 0),
              ‚àÄ (n') (bN' : Basis (Fin n') R N'),
                ‚àÉ bN : Basis (Fin (n' + 1)) R N,
                  ‚àÄ (m') (hn'm' : n' ‚â§ m') (bM' : Basis (Fin m') R M'),
                    ‚àÉ (hnm : n' + 1 ‚â§ m' + 1) (bM : Basis (Fin (m' + 1)) R M),
                      ‚àÄ (as : Fin n' ‚Üí R)
                        (_h : ‚àÄ i : Fin n', (bN' i : O) = as i ‚Ä¢ (bM' (Fin.castLE hn'm' i) : O)),
                        ‚àÉ as' : Fin (n' + 1) ‚Üí R,
                          ‚àÄ i : Fin (n' + 1), (bN i : O) = as' i ‚Ä¢ (bM (Fin.castLE hnm i) : O) := by
  -- Let `œï` be a maximal projection of `M` onto `R`, in the sense that there is
  -- no `œà` whose image of `N` is larger than `œï`'s image of `N`.
  have : ‚àÉ œï : M ‚Üí‚Çó[R] R, ‚àÄ œà : M ‚Üí‚Çó[R] R, ¬¨œï.submoduleImage N < œà.submoduleImage N := by
    obtain ‚ü®P, P_eq, P_max‚ü© :=
      set_has_maximal_iff_noetherian.mpr (inferInstance : IsNoetherian R R) _
        (show (Set.range fun œà : M ‚Üí‚Çó[R] R ‚Ü¶ œà.submoduleImage N).Nonempty from
          ‚ü®_, Set.mem_range.mpr ‚ü®0, rfl‚ü©‚ü©)
    obtain ‚ü®œï, rfl‚ü© := Set.mem_range.mp P_eq
    exact ‚ü®œï, fun œà hœà ‚Ü¶ P_max _ ‚ü®_, rfl‚ü© hœà‚ü©
  let œï := this.choose
  -- ‚ä¢ ‚àÉ y, y ‚àà M ‚àß ‚àÉ a x M', M' ‚â§ M ‚àß ‚àÉ N', N' ‚â§ N ‚àß ‚àÉ _N'_le_M' _y_ortho_M' _ay_o ‚Ä¶
  have œï_max := this.choose_spec
  -- ‚ä¢ ‚àÉ y, y ‚àà M ‚àß ‚àÉ a x M', M' ‚â§ M ‚àß ‚àÉ N', N' ‚â§ N ‚àß ‚àÉ _N'_le_M' _y_ortho_M' _ay_o ‚Ä¶
  -- Since `œï(N)` is an `R`-submodule of the PID `R`,
  -- it is principal and generated by some `a`.
  let a := generator (œï.submoduleImage N)
  -- ‚ä¢ ‚àÉ y, y ‚àà M ‚àß ‚àÉ a x M', M' ‚â§ M ‚àß ‚àÉ N', N' ‚â§ N ‚àß ‚àÉ _N'_le_M' _y_ortho_M' _ay_o ‚Ä¶
  have a_mem : a ‚àà œï.submoduleImage N := generator_mem _
  -- ‚ä¢ ‚àÉ y, y ‚àà M ‚àß ‚àÉ a x M', M' ‚â§ M ‚àß ‚àÉ N', N' ‚â§ N ‚àß ‚àÉ _N'_le_M' _y_ortho_M' _ay_o ‚Ä¶
  -- If `a` is zero, then the submodule is trivial. So let's assume `a ‚â† 0`, `N ‚â† ‚ä•`.
  by_cases a_zero : a = 0
  -- ‚ä¢ ‚àÉ y, y ‚àà M ‚àß ‚àÉ a x M', M' ‚â§ M ‚àß ‚àÉ N', N' ‚â§ N ‚àß ‚àÉ _N'_le_M' _y_ortho_M' _ay_o ‚Ä¶
  ¬∑ have := eq_bot_of_generator_maximal_submoduleImage_eq_zero b'M N_le_M œï_max a_zero
    -- ‚ä¢ ‚àÉ y, y ‚àà M ‚àß ‚àÉ a x M', M' ‚â§ M ‚àß ‚àÉ N', N' ‚â§ N ‚àß ‚àÉ _N'_le_M' _y_ortho_M' _ay_o ‚Ä¶
    contradiction
    -- üéâ no goals
  -- We claim that `œï‚Åª¬π a = y` can be taken as basis element of `N`.
  obtain ‚ü®y, yN, œïy_eq‚ü© := (LinearMap.mem_submoduleImage_of_le N_le_M).mp a_mem
  -- ‚ä¢ ‚àÉ y, y ‚àà M ‚àß ‚àÉ a x M', M' ‚â§ M ‚àß ‚àÉ N', N' ‚â§ N ‚àß ‚àÉ _N'_le_M' _y_ortho_M' _ay_o ‚Ä¶
  have _œïy_ne_zero : œï ‚ü®y, N_le_M yN‚ü© ‚â† 0 := fun h ‚Ü¶ a_zero (œïy_eq.symm.trans h)
  -- ‚ä¢ ‚àÉ y, y ‚àà M ‚àß ‚àÉ a x M', M' ‚â§ M ‚àß ‚àÉ N', N' ‚â§ N ‚àß ‚àÉ _N'_le_M' _y_ortho_M' _ay_o ‚Ä¶
  -- Write `y` as `a ‚Ä¢ y'` for some `y'`.
  have hdvd : ‚àÄ i, a ‚à£ b'M.coord i ‚ü®y, N_le_M yN‚ü© := fun i ‚Ü¶
    generator_maximal_submoduleImage_dvd N_le_M œï_max y yN œïy_eq (b'M.coord i)
  choose c hc using hdvd
  -- ‚ä¢ ‚àÉ y, y ‚àà M ‚àß ‚àÉ a x M', M' ‚â§ M ‚àß ‚àÉ N', N' ‚â§ N ‚àß ‚àÉ _N'_le_M' _y_ortho_M' _ay_o ‚Ä¶
  cases nonempty_fintype Œπ
  -- ‚ä¢ ‚àÉ y, y ‚àà M ‚àß ‚àÉ a x M', M' ‚â§ M ‚àß ‚àÉ N', N' ‚â§ N ‚àß ‚àÉ _N'_le_M' _y_ortho_M' _ay_o ‚Ä¶
  let y' : O := ‚àë i, c i ‚Ä¢ b'M i
  -- ‚ä¢ ‚àÉ y, y ‚àà M ‚àß ‚àÉ a x M', M' ‚â§ M ‚àß ‚àÉ N', N' ‚â§ N ‚àß ‚àÉ _N'_le_M' _y_ortho_M' _ay_o ‚Ä¶
  have y'M : y' ‚àà M := M.sum_mem fun i _ ‚Ü¶ M.smul_mem (c i) (b'M i).2
  -- ‚ä¢ ‚àÉ y, y ‚àà M ‚àß ‚àÉ a x M', M' ‚â§ M ‚àß ‚àÉ N', N' ‚â§ N ‚àß ‚àÉ _N'_le_M' _y_ortho_M' _ay_o ‚Ä¶
  have mk_y' : (‚ü®y', y'M‚ü© : M) = ‚àë i, c i ‚Ä¢ b'M i :=
    Subtype.ext
      (show y' = M.subtype _ by
        simp only [LinearMap.map_sum, LinearMap.map_smul]
        rfl)
  have a_smul_y' : a ‚Ä¢ y' = y := by
    refine Subtype.mk_eq_mk.mp (show (a ‚Ä¢ ‚ü®y', y'M‚ü© : M) = ‚ü®y, N_le_M yN‚ü© from ?_)
    rw [‚Üê b'M.sum_repr ‚ü®y, N_le_M yN‚ü©, mk_y', Finset.smul_sum]
    refine' Finset.sum_congr rfl fun i _ ‚Ü¶ _
    rw [‚Üê mul_smul, ‚Üê hc]
    rfl
  -- We found a `y` and an `a`!
  refine' ‚ü®y', y'M, a, a_smul_y'.symm ‚ñ∏ yN, _‚ü©
  -- ‚ä¢ ‚àÉ M', M' ‚â§ M ‚àß ‚àÉ N', N' ‚â§ N ‚àß ‚àÉ _N'_le_M' _y_ortho_M' _ay_ortho_N', ‚àÄ (n' :  ‚Ä¶
  have œïy'_eq : œï ‚ü®y', y'M‚ü© = 1 :=
    mul_left_cancel‚ÇÄ a_zero
      (calc
        a ‚Ä¢ œï ‚ü®y', y'M‚ü© = œï ‚ü®a ‚Ä¢ y', _‚ü© := (œï.map_smul a ‚ü®y', y'M‚ü©).symm
        _ = œï ‚ü®y, N_le_M yN‚ü© := by simp only [a_smul_y']
        _ = a := œïy_eq
        _ = a * 1 := (mul_one a).symm
        )
  have œïy'_ne_zero : œï ‚ü®y', y'M‚ü© ‚â† 0 := by simpa only [œïy'_eq] using one_ne_zero
  -- ‚ä¢ ‚àÉ M', M' ‚â§ M ‚àß ‚àÉ N', N' ‚â§ N ‚àß ‚àÉ _N'_le_M' _y_ortho_M' _ay_ortho_N', ‚àÄ (n' :  ‚Ä¶
  -- `M' := ker (œï : M ‚Üí R)` is smaller than `M` and `N' := ker (œï : N ‚Üí R)` is smaller than `N`.
  let M' : Submodule R O := œï.ker.map M.subtype
  -- ‚ä¢ ‚àÉ M', M' ‚â§ M ‚àß ‚àÉ N', N' ‚â§ N ‚àß ‚àÉ _N'_le_M' _y_ortho_M' _ay_ortho_N', ‚àÄ (n' :  ‚Ä¶
  let N' : Submodule R O := (œï.comp (ofLe N_le_M)).ker.map N.subtype
  -- ‚ä¢ ‚àÉ M', M' ‚â§ M ‚àß ‚àÉ N', N' ‚â§ N ‚àß ‚àÉ _N'_le_M' _y_ortho_M' _ay_ortho_N', ‚àÄ (n' :  ‚Ä¶
  have M'_le_M : M' ‚â§ M := M.map_subtype_le (LinearMap.ker œï)
  -- ‚ä¢ ‚àÉ M', M' ‚â§ M ‚àß ‚àÉ N', N' ‚â§ N ‚àß ‚àÉ _N'_le_M' _y_ortho_M' _ay_ortho_N', ‚àÄ (n' :  ‚Ä¶
  have N'_le_M' : N' ‚â§ M' := by
    intro x hx
    simp only [mem_map, LinearMap.mem_ker] at hx ‚ä¢
    obtain ‚ü®‚ü®x, xN‚ü©, hx, rfl‚ü© := hx
    exact ‚ü®‚ü®x, N_le_M xN‚ü©, hx, rfl‚ü©
  have N'_le_N : N' ‚â§ N := N.map_subtype_le (LinearMap.ker (œï.comp (ofLe N_le_M)))
  -- ‚ä¢ ‚àÉ M', M' ‚â§ M ‚àß ‚àÉ N', N' ‚â§ N ‚àß ‚àÉ _N'_le_M' _y_ortho_M' _ay_ortho_N', ‚àÄ (n' :  ‚Ä¶
  -- So fill in those results as well.
  refine' ‚ü®M', M'_le_M, N', N'_le_N, N'_le_M', _‚ü©
  -- ‚ä¢ ‚àÉ _y_ortho_M' _ay_ortho_N', ‚àÄ (n' : ‚Ñï) (bN' : Basis (Fin n') R { x // x ‚àà N' ‚Ä¶
  -- Note that `y'` is orthogonal to `M'`.
  have y'_ortho_M' : ‚àÄ (c : R), ‚àÄ z ‚àà M', c ‚Ä¢ y' + z = 0 ‚Üí c = 0 := by
    intro c x xM' hc
    obtain ‚ü®‚ü®x, xM‚ü©, hx', rfl‚ü© := Submodule.mem_map.mp xM'
    rw [LinearMap.mem_ker] at hx'
    have hc' : (c ‚Ä¢ ‚ü®y', y'M‚ü© + ‚ü®x, xM‚ü© : M) = 0 := by exact @Subtype.coe_injective O (¬∑ ‚àà M) _ _ hc
    simpa only [LinearMap.map_add, LinearMap.map_zero, LinearMap.map_smul, smul_eq_mul, add_zero,
      mul_eq_zero, œïy'_ne_zero, hx', or_false_iff] using congr_arg œï hc'
  -- And `a ‚Ä¢ y'` is orthogonal to `N'`.
  have ay'_ortho_N' : ‚àÄ (c : R), ‚àÄ z ‚àà N', c ‚Ä¢ a ‚Ä¢ y' + z = 0 ‚Üí c = 0 := by
    intro c z zN' hc
    refine' (mul_eq_zero.mp (y'_ortho_M' (a * c) z (N'_le_M' zN') _)).resolve_left a_zero
    rw [mul_comm, mul_smul, hc]
  -- So we can extend a basis for `N'` with `y`
  refine' ‚ü®y'_ortho_M', ay'_ortho_N', fun n' bN' ‚Ü¶ ‚ü®_, _‚ü©‚ü©
  -- ‚ä¢ Basis (Fin (n' + 1)) R { x // x ‚àà N }
  ¬∑ refine' Basis.mkFinConsOfLE y yN bN' N'_le_N _ _
    -- ‚ä¢ ‚àÄ (c : R) (x : O), x ‚àà N' ‚Üí c ‚Ä¢ y + x = 0 ‚Üí c = 0
    ¬∑ intro c z zN' hc
      -- ‚ä¢ c = 0
      refine' ay'_ortho_N' c z zN' _
      -- ‚ä¢ c ‚Ä¢ a ‚Ä¢ y' + z = 0
      rwa [‚Üê a_smul_y'] at hc
      -- üéâ no goals
    ¬∑ intro z zN
      -- ‚ä¢ ‚àÉ c, z + c ‚Ä¢ y ‚àà N'
      obtain ‚ü®b, hb‚ü© : _ ‚à£ œï ‚ü®z, N_le_M zN‚ü© := generator_submoduleImage_dvd_of_mem N_le_M œï zN
      -- ‚ä¢ ‚àÉ c, z + c ‚Ä¢ y ‚àà N'
      refine' ‚ü®-b, Submodule.mem_map.mpr ‚ü®‚ü®_, N.sub_mem zN (N.smul_mem b yN)‚ü©, _, _‚ü©‚ü©
      -- ‚ä¢ { val := z - b ‚Ä¢ y, property := (_ : z - b ‚Ä¢ y ‚àà N) } ‚àà LinearMap.ker (Linea ‚Ä¶
      ¬∑ refine' LinearMap.mem_ker.mpr (show œï (‚ü®z, N_le_M zN‚ü© - b ‚Ä¢ ‚ü®y, N_le_M yN‚ü©) = 0 from _)
        -- ‚ä¢ ‚Üëœï ({ val := z, property := (_ : z ‚àà M) } - b ‚Ä¢ { val := y, property := (_ : ‚Ä¶
        rw [LinearMap.map_sub, LinearMap.map_smul, hb, œïy_eq, smul_eq_mul, mul_comm, sub_self]
        -- üéâ no goals
      ¬∑ simp only [sub_eq_add_neg, neg_smul, coeSubtype]
        -- üéâ no goals
  -- And extend a basis for `M'` with `y'`
  intro m' hn'm' bM'
  -- ‚ä¢ ‚àÉ hnm bM, ‚àÄ (as : Fin n' ‚Üí R), (‚àÄ (i : Fin n'), ‚Üë(‚ÜëbN' i) = as i ‚Ä¢ ‚Üë(‚ÜëbM' (F ‚Ä¶
  refine' ‚ü®Nat.succ_le_succ hn'm', _, _‚ü©
  -- ‚ä¢ Basis (Fin (m' + 1)) R { x // x ‚àà M }
  ¬∑ refine' Basis.mkFinConsOfLE y' y'M bM' M'_le_M y'_ortho_M' _
    -- ‚ä¢ ‚àÄ (z : O), z ‚àà M ‚Üí ‚àÉ c, z + c ‚Ä¢ y' ‚àà M'
    intro z zM
    -- ‚ä¢ ‚àÉ c, z + c ‚Ä¢ y' ‚àà M'
    refine' ‚ü®-œï ‚ü®z, zM‚ü©, ‚ü®‚ü®z, zM‚ü© - œï ‚ü®z, zM‚ü© ‚Ä¢ ‚ü®y', y'M‚ü©, LinearMap.mem_ker.mpr _, _‚ü©‚ü©
    -- ‚ä¢ ‚Üëœï ({ val := z, property := zM } - ‚Üëœï { val := z, property := zM } ‚Ä¢ { val : ‚Ä¶
    ¬∑ rw [LinearMap.map_sub, LinearMap.map_smul, œïy'_eq, smul_eq_mul, mul_one, sub_self]
      -- üéâ no goals
    ¬∑ rw [LinearMap.map_sub, LinearMap.map_smul, sub_eq_add_neg, neg_smul]
      -- ‚ä¢ ‚Üë(Submodule.subtype M) { val := z, property := zM } + -(‚Üëœï { val := z, prope ‚Ä¶
      rfl
      -- üéâ no goals
  -- It remains to show the extended bases are compatible with each other.
  intro as h
  -- ‚ä¢ ‚àÉ as', ‚àÄ (i : Fin (n' + 1)), ‚Üë(‚Üë(Basis.mkFinConsOfLE y yN bN' N'_le_N (_ : ‚àÄ ‚Ä¶
  refine' ‚ü®Fin.cons a as, _‚ü©
  -- ‚ä¢ ‚àÄ (i : Fin (n' + 1)), ‚Üë(‚Üë(Basis.mkFinConsOfLE y yN bN' N'_le_N (_ : ‚àÄ (c : R ‚Ä¶
  intro i
  -- ‚ä¢ ‚Üë(‚Üë(Basis.mkFinConsOfLE y yN bN' N'_le_N (_ : ‚àÄ (c : R) (z : O), z ‚àà N' ‚Üí c  ‚Ä¶
  rw [Basis.coe_mkFinConsOfLE, Basis.coe_mkFinConsOfLE]
  -- ‚ä¢ ‚Üë(Fin.cons { val := y, property := yN } (‚Üë(ofLe N'_le_N) ‚àò ‚ÜëbN') i) = Fin.co ‚Ä¶
  refine' Fin.cases _ (fun i ‚Ü¶ _) i
  -- ‚ä¢ ‚Üë(Fin.cons { val := y, property := yN } (‚Üë(ofLe N'_le_N) ‚àò ‚ÜëbN') 0) = Fin.co ‚Ä¶
  ¬∑ simp only [Fin.cons_zero, Fin.castLE_zero]
    -- ‚ä¢ y = generator (LinearMap.submoduleImage (Exists.choose this) N) ‚Ä¢ ‚àë x : Œπ, ‚Üë ‚Ä¶
    exact a_smul_y'.symm
    -- üéâ no goals
  ¬∑ rw [Fin.castLE_succ]
    -- ‚ä¢ ‚Üë(Fin.cons { val := y, property := yN } (‚Üë(ofLe N'_le_N) ‚àò ‚ÜëbN') (Fin.succ i ‚Ä¶
    simp only [Fin.cons_succ, Function.comp_apply, coe_ofLe, map_coe, coeSubtype, h i]
    -- üéâ no goals
#align submodule.basis_of_pid_aux Submodule.basis_of_pid_aux

/-- A submodule of a free `R`-module of finite rank is also a free `R`-module of finite rank,
if `R` is a principal ideal domain.

This is a `lemma` to make the induction a bit easier. To actually access the basis,
see `Submodule.basisOfPid`.

See also the stronger version `Submodule.smithNormalForm`.
-/
theorem Submodule.nonempty_basis_of_pid {Œπ : Type*} [Finite Œπ] (b : Basis Œπ R M)
    (N : Submodule R M) : ‚àÉ n : ‚Ñï, Nonempty (Basis (Fin n) R N) := by
  haveI := Classical.decEq M
  -- ‚ä¢ ‚àÉ n, Nonempty (Basis (Fin n) R { x // x ‚àà N })
  cases nonempty_fintype Œπ
  -- ‚ä¢ ‚àÉ n, Nonempty (Basis (Fin n) R { x // x ‚àà N })
  induction' N using inductionOnRank with N ih
  ¬∑ exact b
    -- üéâ no goals
  let b' := (b.reindex (Fintype.equivFin Œπ)).map (LinearEquiv.ofTop _ rfl).symm
  -- ‚ä¢ ‚àÉ n, Nonempty (Basis (Fin n) R { x // x ‚àà N })
  by_cases N_bot : N = ‚ä•
  ¬∑ subst N_bot
    -- ‚ä¢ ‚àÉ n, Nonempty (Basis (Fin n) R { x // x ‚àà ‚ä• })
    exact ‚ü®0, ‚ü®Basis.empty _‚ü©‚ü©
    -- üéâ no goals
  obtain ‚ü®y, -, a, hay, M', -, N', N'_le_N, -, -, ay_ortho, h'‚ü© :=
    Submodule.basis_of_pid_aux ‚ä§ N b' N_bot le_top
  obtain ‚ü®n', ‚ü®bN'‚ü©‚ü© := ih N' N'_le_N _ hay ay_ortho
  -- ‚ä¢ ‚àÉ n, Nonempty (Basis (Fin n) R { x // x ‚àà N })
  obtain ‚ü®bN, _hbN‚ü© := h' n' bN'
  -- ‚ä¢ ‚àÉ n, Nonempty (Basis (Fin n) R { x // x ‚àà N })
  exact ‚ü®n' + 1, ‚ü®bN‚ü©‚ü©
  -- ‚ä¢ Fintype Œπ
  infer_instance
  -- üéâ no goals
#align submodule.nonempty_basis_of_pid Submodule.nonempty_basis_of_pid

/-- A submodule of a free `R`-module of finite rank is also a free `R`-module of finite rank,
if `R` is a principal ideal domain.

See also the stronger version `Submodule.smithNormalForm`.
-/
noncomputable def Submodule.basisOfPid {Œπ : Type*} [Finite Œπ] (b : Basis Œπ R M)
    (N : Submodule R M) : Œ£n : ‚Ñï, Basis (Fin n) R N :=
  ‚ü®_, (N.nonempty_basis_of_pid b).choose_spec.some‚ü©
#align submodule.basis_of_pid Submodule.basisOfPid

theorem Submodule.basisOfPid_bot {Œπ : Type*} [Finite Œπ] (b : Basis Œπ R M) :
    Submodule.basisOfPid b ‚ä• = ‚ü®0, Basis.empty _‚ü© := by
  obtain ‚ü®n, b'‚ü© := Submodule.basisOfPid b ‚ä•
  -- ‚ä¢ { fst := n, snd := b' } = { fst := 0, snd := Basis.empty { x // x ‚àà ‚ä• } }
  let e : Fin n ‚âÉ Fin 0 := b'.indexEquiv (Basis.empty _ : Basis (Fin 0) R (‚ä• : Submodule R M))
  -- ‚ä¢ { fst := n, snd := b' } = { fst := 0, snd := Basis.empty { x // x ‚àà ‚ä• } }
  obtain rfl : n = 0 := by simpa using Fintype.card_eq.mpr ‚ü®e‚ü©
  -- ‚ä¢ { fst := 0, snd := b' } = { fst := 0, snd := Basis.empty { x // x ‚àà ‚ä• } }
  exact Sigma.eq rfl (Basis.eq_of_apply_eq <| finZeroElim)
  -- üéâ no goals
#align submodule.basis_of_pid_bot Submodule.basisOfPid_bot

/-- A submodule inside a free `R`-submodule of finite rank is also a free `R`-module of finite rank,
if `R` is a principal ideal domain.

See also the stronger version `Submodule.smithNormalFormOfLE`.
-/
noncomputable def Submodule.basisOfPidOfLE {Œπ : Type*} [Finite Œπ] {N O : Submodule R M}
    (hNO : N ‚â§ O) (b : Basis Œπ R O) : Œ£n : ‚Ñï, Basis (Fin n) R N :=
  let ‚ü®n, bN'‚ü© := Submodule.basisOfPid b (N.comap O.subtype)
  ‚ü®n, bN'.map (Submodule.comapSubtypeEquivOfLe hNO)‚ü©
#align submodule.basis_of_pid_of_le Submodule.basisOfPidOfLE

/-- A submodule inside the span of a linear independent family is a free `R`-module of finite rank,
if `R` is a principal ideal domain. -/
noncomputable def Submodule.basisOfPidOfLESpan {Œπ : Type*} [Finite Œπ] {b : Œπ ‚Üí M}
    (hb : LinearIndependent R b) {N : Submodule R M} (le : N ‚â§ Submodule.span R (Set.range b)) :
    Œ£n : ‚Ñï, Basis (Fin n) R N :=
  Submodule.basisOfPidOfLE le (Basis.span hb)
#align submodule.basis_of_pid_of_le_span Submodule.basisOfPidOfLESpan

/-- A finite type torsion free module over a PID admits a basis. -/
noncomputable def Module.basisOfFiniteTypeTorsionFree [Fintype Œπ] {s : Œπ ‚Üí M}
    (hs : span R (range s) = ‚ä§) [NoZeroSMulDivisors R M] : Œ£n : ‚Ñï, Basis (Fin n) R M := by
  classical
    -- We define `N` as the submodule spanned by a maximal linear independent subfamily of `s`
    have := exists_maximal_independent R s
    let I : Set Œπ := this.choose
    obtain
      ‚ü®indepI : LinearIndependent R (s ‚àò (fun x => x) : I ‚Üí M), hI :
        ‚àÄ (i) (_ : i ‚àâ I), ‚àÉ a : R, a ‚â† 0 ‚àß a ‚Ä¢ s i ‚àà span R (s '' I)‚ü© :=
      this.choose_spec
    let N := span R (range <| (s ‚àò (fun x => x) : I ‚Üí M))
    -- same as `span R (s '' I)` but more convenient
    let _sI : I ‚Üí N := fun i ‚Ü¶ ‚ü®s i.1, subset_span (mem_range_self i)‚ü©
    -- `s` restricted to `I` is a basis of `N`
    let sI_basis : Basis I R N := Basis.span indepI
    -- Our first goal is to build `A ‚â† 0` such that `A ‚Ä¢ M ‚äÜ N`
    have exists_a : ‚àÄ i : Œπ, ‚àÉ a : R, a ‚â† 0 ‚àß a ‚Ä¢ s i ‚àà N := by
      intro i
      by_cases hi : i ‚àà I
      ¬∑ use 1, zero_ne_one.symm
        rw [one_smul]
        exact subset_span (mem_range_self (‚ü®i, hi‚ü© : I))
      ¬∑ simpa [image_eq_range s I] using hI i hi
    choose a ha ha' using exists_a
    let A := ‚àè i, a i
    have hA : A ‚â† 0 := by
      rw [Finset.prod_ne_zero_iff]
      simpa using ha
    -- `M ‚âÉ A ‚Ä¢ M` because `M` is torsion free and `A ‚â† 0`
    let œÜ : M ‚Üí‚Çó[R] M := LinearMap.lsmul R M A
    have : LinearMap.ker œÜ = ‚ä• := @LinearMap.ker_lsmul R M _ _ _ _ _ hA
    let œà := LinearEquiv.ofInjective œÜ (LinearMap.ker_eq_bot.mp this)
    have : LinearMap.range œÜ ‚â§ N := by
      -- as announced, `A ‚Ä¢ M ‚äÜ N`
      suffices ‚àÄ i, œÜ (s i) ‚àà N by
        rw [LinearMap.range_eq_map, ‚Üê hs, map_span_le]
        rintro _ ‚ü®i, rfl‚ü©
        apply this
      intro i
      calc
        (‚àè j, a j) ‚Ä¢ s i = (‚àè j in {i}·∂ú, a j) ‚Ä¢ a i ‚Ä¢ s i := by
          rw [Fintype.prod_eq_prod_compl_mul i, mul_smul]
        _ ‚àà N := N.smul_mem _ (ha' i)

    -- Since a submodule of a free `R`-module is free, we get that `A ‚Ä¢ M` is free
    obtain ‚ü®n, b : Basis (Fin n) R (LinearMap.range œÜ)‚ü© := Submodule.basisOfPidOfLE this sI_basis
    -- hence `M` is free.
    exact ‚ü®n, b.map œà.symm‚ü©
#align module.basis_of_finite_type_torsion_free Module.basisOfFiniteTypeTorsionFree

theorem Module.free_of_finite_type_torsion_free [_root_.Finite Œπ] {s : Œπ ‚Üí M}
    (hs : span R (range s) = ‚ä§) [NoZeroSMulDivisors R M] : Module.Free R M := by
  cases nonempty_fintype Œπ
  -- ‚ä¢ Free R M
  obtain ‚ü®n, b‚ü© : Œ£n, Basis (Fin n) R M := Module.basisOfFiniteTypeTorsionFree hs
  -- ‚ä¢ Free R M
  exact Module.Free.of_basis b
  -- üéâ no goals
#align module.free_of_finite_type_torsion_free Module.free_of_finite_type_torsion_free

/-- A finite type torsion free module over a PID admits a basis. -/
noncomputable def Module.basisOfFiniteTypeTorsionFree' [Module.Finite R M]
    [NoZeroSMulDivisors R M] : Œ£n : ‚Ñï, Basis (Fin n) R M :=
  Module.basisOfFiniteTypeTorsionFree Module.Finite.exists_fin.choose_spec.choose_spec
#align module.basis_of_finite_type_torsion_free' Module.basisOfFiniteTypeTorsionFree'

-- It would be nice to make this an instance but it is empirically problematic, possibly because
-- of the loop that it causes with `Module.Free.noZeroSMulDivisors`
theorem Module.free_of_finite_type_torsion_free' [Module.Finite R M] [NoZeroSMulDivisors R M] :
    Module.Free R M := by
  obtain ‚ü®n, b‚ü© : Œ£n, Basis (Fin n) R M := Module.basisOfFiniteTypeTorsionFree'
  -- ‚ä¢ Free R M
  exact Module.Free.of_basis b
  -- üéâ no goals
#align module.free_of_finite_type_torsion_free' Module.free_of_finite_type_torsion_free'

section SmithNormal

/-- A Smith normal form basis for a submodule `N` of a module `M` consists of
bases for `M` and `N` such that the inclusion map `N ‚Üí M` can be written as a
(rectangular) matrix with `a` along the diagonal: in Smith normal form. -/
-- Porting note: @[nolint has_nonempty_instance]
structure Basis.SmithNormalForm (N : Submodule R M) (Œπ : Type*) (n : ‚Ñï) where
  /-- The basis of M. -/
  bM : Basis Œπ R M
  /-- The basis of N. -/
  bN : Basis (Fin n) R N
  /-- The mapping between the vectors of the bases. -/
  f : Fin n ‚Ü™ Œπ
  /-- The (diagonal) entries of the matrix. -/
  a : Fin n ‚Üí R
  /-- The SNF relation between the vectors of the bases. -/
  snf : ‚àÄ i, (bN i : M) = a i ‚Ä¢ bM (f i)
#align basis.smith_normal_form Basis.SmithNormalForm

namespace Basis.SmithNormalForm

variable {n : ‚Ñï} {N : Submodule R M} (snf : Basis.SmithNormalForm N Œπ n) (m : N)

lemma repr_eq_zero_of_nmem_range {i : Œπ} (hi : i ‚àâ Set.range snf.f) :
    snf.bM.repr m i = 0 := by
  obtain ‚ü®m, hm‚ü© := m
  -- ‚ä¢ ‚Üë(‚Üësnf.bM.repr ‚Üë{ val := m, property := hm }) i = 0
  obtain ‚ü®c, rfl‚ü© := snf.bN.mem_submodule_iff.mp hm
  -- ‚ä¢ ‚Üë(‚Üësnf.bM.repr ‚Üë{ val := Finsupp.sum c fun i x => x ‚Ä¢ ‚Üë(‚Üësnf.bN i), property ‚Ä¶
  replace hi : ‚àÄ j, snf.f j ‚â† i := by simpa using hi
  -- ‚ä¢ ‚Üë(‚Üësnf.bM.repr ‚Üë{ val := Finsupp.sum c fun i x => x ‚Ä¢ ‚Üë(‚Üësnf.bN i), property ‚Ä¶
  simp [Finsupp.single_apply, hi, snf.snf]
  -- üéâ no goals

lemma le_ker_coord_of_nmem_range {i : Œπ} (hi : i ‚àâ Set.range snf.f) :
    N ‚â§ LinearMap.ker (snf.bM.coord i) :=
  fun m hm ‚Ü¶ snf.repr_eq_zero_of_nmem_range ‚ü®m, hm‚ü© hi

@[simp] lemma repr_apply_embedding_eq_repr_smul {i : Fin n} :
    snf.bM.repr m (snf.f i) = snf.bN.repr (snf.a i ‚Ä¢ m) i := by
  obtain ‚ü®m, hm‚ü© := m
  -- ‚ä¢ ‚Üë(‚Üësnf.bM.repr ‚Üë{ val := m, property := hm }) (‚Üësnf.f i) = ‚Üë(‚Üësnf.bN.repr (a ‚Ä¶
  obtain ‚ü®c, rfl‚ü© := snf.bN.mem_submodule_iff.mp hm
  -- ‚ä¢ ‚Üë(‚Üësnf.bM.repr ‚Üë{ val := Finsupp.sum c fun i x => x ‚Ä¢ ‚Üë(‚Üësnf.bN i), property ‚Ä¶
  replace hm : (‚ü®Finsupp.sum c fun i t ‚Ü¶ t ‚Ä¢ (‚Üë(snf.bN i) : M), hm‚ü© : N) =
      Finsupp.sum c fun i t ‚Ü¶ t ‚Ä¢ ‚ü®snf.bN i, (snf.bN i).2‚ü© := by ext; change _ = N.subtype _; simp
  classical
  simp_rw [hm, map_smul, LinearEquiv.map_finsupp_sum, map_smul, Subtype.coe_eta, repr_self,
    Finsupp.smul_single, smul_eq_mul, mul_one, Finsupp.sum_single, Finsupp.smul_apply, snf.snf,
    map_smul, repr_self, Finsupp.smul_single, smul_eq_mul, mul_one, Finsupp.sum_apply,
    Finsupp.single_apply, EmbeddingLike.apply_eq_iff_eq, Finsupp.sum_ite_eq',
    Finsupp.mem_support_iff, ite_not, mul_comm, ite_eq_right_iff]
  exact fun a ‚Ü¶ (mul_eq_zero_of_right _ a).symm

@[simp] lemma repr_comp_embedding_eq_smul :
    snf.bM.repr m ‚àò snf.f = snf.a ‚Ä¢ (snf.bN.repr m : Fin n ‚Üí R) := by
  ext i
  -- ‚ä¢ (‚Üë(‚Üësnf.bM.repr ‚Üëm) ‚àò ‚Üësnf.f) i = (snf.a ‚Ä¢ ‚Üë(‚Üësnf.bN.repr m)) i
  simp [Pi.smul_apply (snf.a i)]
  -- üéâ no goals

@[simp] lemma coord_apply_embedding_eq_smul_coord {i : Fin n} :
    snf.bM.coord (snf.f i) ‚àò‚Çó N.subtype = snf.a i ‚Ä¢ snf.bN.coord i := by
  ext m
  -- ‚ä¢ ‚Üë(LinearMap.comp (coord snf.bM (‚Üësnf.f i)) (Submodule.subtype N)) m = ‚Üë(a sn ‚Ä¶
  simp [Pi.smul_apply (snf.a i)]
  -- üéâ no goals

/-- Given a Smith-normal-form pair of bases for `N ‚äÜ M`, and a linear endomorphism `f` of `M`
that preserves `N`, the diagonal of the matrix of the restriction `f` to `N` does not depend on
which of the two bases for `N` is used. -/
@[simp]
lemma toMatrix_restrict_eq_toMatrix [Fintype Œπ] [DecidableEq Œπ]
    (f : M ‚Üí‚Çó[R] M) (hf : ‚àÄ x, f x ‚àà N) (hf' : ‚àÄ x ‚àà N, f x ‚àà N := fun x _ ‚Ü¶ hf x) {i : Fin n} :
    LinearMap.toMatrix snf.bN snf.bN (LinearMap.restrict f hf') i i =
    LinearMap.toMatrix snf.bM snf.bM f (snf.f i) (snf.f i) := by
  rw [LinearMap.toMatrix_apply, LinearMap.toMatrix_apply,
    snf.repr_apply_embedding_eq_repr_smul ‚ü®_, (hf _)‚ü©]
  congr
  -- ‚ä¢ ‚Üë(LinearMap.restrict f hf') (‚Üësnf.bN i) = a snf i ‚Ä¢ { val := ‚Üëf (‚Üësnf.bM (‚Üës ‚Ä¶
  ext
  -- ‚ä¢ ‚Üë(‚Üë(LinearMap.restrict f hf') (‚Üësnf.bN i)) = ‚Üë(a snf i ‚Ä¢ { val := ‚Üëf (‚Üësnf.b ‚Ä¶
  simp [snf.snf]
  -- üéâ no goals

end Basis.SmithNormalForm

/-- If `M` is finite free over a PID `R`, then any submodule `N` is free
and we can find a basis for `M` and `N` such that the inclusion map is a diagonal matrix
in Smith normal form.

See `Submodule.smithNormalFormOfLE` for a version of this theorem that returns
a `Basis.SmithNormalForm`.

This is a strengthening of `Submodule.basisOfPidOfLE`.
-/
theorem Submodule.exists_smith_normal_form_of_le [Finite Œπ] (b : Basis Œπ R M) (N O : Submodule R M)
    (N_le_O : N ‚â§ O) :
    ‚àÉ (n o : ‚Ñï) (hno : n ‚â§ o) (bO : Basis (Fin o) R O) (bN : Basis (Fin n) R N) (a : Fin n ‚Üí R),
      ‚àÄ i, (bN i : M) = a i ‚Ä¢ bO (Fin.castLE hno i) := by
  cases nonempty_fintype Œπ
  -- ‚ä¢ ‚àÉ n o hno bO bN a, ‚àÄ (i : Fin n), ‚Üë(‚ÜëbN i) = ‚Üë(a i ‚Ä¢ ‚ÜëbO (Fin.castLE hno i))
  revert N
  -- ‚ä¢ ‚àÄ (N : Submodule R M), N ‚â§ O ‚Üí ‚àÉ n o hno bO bN a, ‚àÄ (i : Fin n), ‚Üë(‚ÜëbN i) =  ‚Ä¶
  induction' O using inductionOnRank with M0 ih
  ¬∑ exact b
    -- üéâ no goals
  intro N N_le_M0
  -- ‚ä¢ ‚àÉ n o hno bO bN a, ‚àÄ (i : Fin n), ‚Üë(‚ÜëbN i) = ‚Üë(a i ‚Ä¢ ‚ÜëbO (Fin.castLE hno i))
  obtain ‚ü®m, b'M‚ü© := M0.basisOfPid b
  -- ‚ä¢ ‚àÉ n o hno bO bN a, ‚àÄ (i : Fin n), ‚Üë(‚ÜëbN i) = ‚Üë(a i ‚Ä¢ ‚ÜëbO (Fin.castLE hno i))
  by_cases N_bot : N = ‚ä•
  ¬∑ subst N_bot
    -- ‚ä¢ ‚àÉ n o hno bO bN a, ‚àÄ (i : Fin n), ‚Üë(‚ÜëbN i) = ‚Üë(a i ‚Ä¢ ‚ÜëbO (Fin.castLE hno i))
    exact ‚ü®0, m, Nat.zero_le _, b'M, Basis.empty _, finZeroElim, finZeroElim‚ü©
    -- üéâ no goals
  obtain ‚ü®y, hy, a, _, M', M'_le_M, N', _, N'_le_M', y_ortho, _, h‚ü© :=
    Submodule.basis_of_pid_aux M0 N b'M N_bot N_le_M0

  obtain ‚ü®n', m', hn'm', bM', bN', as', has'‚ü© := ih M' M'_le_M y hy y_ortho N' N'_le_M'
  -- ‚ä¢ ‚àÉ n o hno bO bN a, ‚àÄ (i : Fin n), ‚Üë(‚ÜëbN i) = ‚Üë(a i ‚Ä¢ ‚ÜëbO (Fin.castLE hno i))
  obtain ‚ü®bN, h'‚ü© := h n' bN'
  -- ‚ä¢ ‚àÉ n o hno bO bN a, ‚àÄ (i : Fin n), ‚Üë(‚ÜëbN i) = ‚Üë(a i ‚Ä¢ ‚ÜëbO (Fin.castLE hno i))
  obtain ‚ü®hmn, bM, h''‚ü© := h' m' hn'm' bM'
  -- ‚ä¢ ‚àÉ n o hno bO bN a, ‚àÄ (i : Fin n), ‚Üë(‚ÜëbN i) = ‚Üë(a i ‚Ä¢ ‚ÜëbO (Fin.castLE hno i))
  obtain ‚ü®as, has‚ü© := h'' as' has'
  -- ‚ä¢ ‚àÉ n o hno bO bN a, ‚àÄ (i : Fin n), ‚Üë(‚ÜëbN i) = ‚Üë(a i ‚Ä¢ ‚ÜëbO (Fin.castLE hno i))
  exact ‚ü®_, _, hmn, bM, bN, as, has‚ü©
  -- ‚ä¢ Fintype Œπ
-- Porting note: Lean generates a goal Fintype Œπ for some reason
  infer_instance
  -- üéâ no goals
#align submodule.exists_smith_normal_form_of_le Submodule.exists_smith_normal_form_of_le

/-- If `M` is finite free over a PID `R`, then any submodule `N` is free
and we can find a basis for `M` and `N` such that the inclusion map is a diagonal matrix
in Smith normal form.

See `Submodule.exists_smith_normal_form_of_le` for a version of this theorem that doesn't
need to map `N` into a submodule of `O`.

This is a strengthening of `Submodule.basisOfPidOfLe`.
-/
noncomputable def Submodule.smithNormalFormOfLE [Finite Œπ] (b : Basis Œπ R M) (N O : Submodule R M)
    (N_le_O : N ‚â§ O) : Œ£o n : ‚Ñï, Basis.SmithNormalForm (N.comap O.subtype) (Fin o) n := by
  choose n o hno bO bN a snf using N.exists_smith_normal_form_of_le b O N_le_O
  -- ‚ä¢ (o : ‚Ñï) √ó (n : ‚Ñï) √ó Basis.SmithNormalForm (comap (Submodule.subtype O) N) (F ‚Ä¶
  refine'
    ‚ü®o, n, bO, bN.map (comapSubtypeEquivOfLe N_le_O).symm, (Fin.castLEEmb hno).toEmbedding, a,
      fun i ‚Ü¶ _‚ü©
  ext
  -- ‚ä¢ ‚Üë‚Üë(‚Üë(Basis.map bN (LinearEquiv.symm (comapSubtypeEquivOfLe N_le_O))) i) = ‚Üë( ‚Ä¶
  simp only [snf, Basis.map_apply, Submodule.comapSubtypeEquivOfLe_symm_apply,
    Submodule.coe_smul_of_tower, RelEmbedding.coe_toEmbedding, Fin.castLEEmb_apply]
#align submodule.smith_normal_form_of_le Submodule.smithNormalFormOfLE

/-- If `M` is finite free over a PID `R`, then any submodule `N` is free
and we can find a basis for `M` and `N` such that the inclusion map is a diagonal matrix
in Smith normal form.

This is a strengthening of `Submodule.basisOfPid`.

See also `Ideal.smithNormalForm`, which moreover proves that the dimension of
an ideal is the same as the dimension of the whole ring.
-/
noncomputable def Submodule.smithNormalForm [Finite Œπ] (b : Basis Œπ R M) (N : Submodule R M) :
    Œ£n : ‚Ñï, Basis.SmithNormalForm N Œπ n :=
  let ‚ü®m, n, bM, bN, f, a, snf‚ü© := N.smithNormalFormOfLE b ‚ä§ le_top
  let bM' := bM.map (LinearEquiv.ofTop _ rfl)
  let e := bM'.indexEquiv b
  ‚ü®n, bM'.reindex e, bN.map (comapSubtypeEquivOfLe le_top), f.trans e.toEmbedding, a, fun i ‚Ü¶ by
    simp only [snf, Basis.map_apply, LinearEquiv.ofTop_apply, Submodule.coe_smul_of_tower,
      Submodule.comapSubtypeEquivOfLe_apply_coe, Basis.reindex_apply,
      Equiv.toEmbedding_apply, Function.Embedding.trans_apply, Equiv.symm_apply_apply]‚ü©
#align submodule.smith_normal_form Submodule.smithNormalForm

section Ideal

variable {S : Type*} [CommRing S] [IsDomain S] [Algebra R S]

/-- If `S` a finite-dimensional ring extension of a PID `R` which is free as an `R`-module,
then any nonzero `S`-ideal `I` is free as an `R`-submodule of `S`, and we can
find a basis for `S` and `I` such that the inclusion map is a square diagonal
matrix.

See `Ideal.exists_smith_normal_form` for a version of this theorem that doesn't
need to map `I` into a submodule of `R`.

This is a strengthening of `Submodule.basisOfPid`.
-/
noncomputable def Ideal.smithNormalForm [Fintype Œπ] (b : Basis Œπ R S) (I : Ideal S) (hI : I ‚â† ‚ä•) :
    Basis.SmithNormalForm (I.restrictScalars R) Œπ (Fintype.card Œπ) :=
  let ‚ü®n, bS, bI, f, a, snf‚ü© := (I.restrictScalars R).smithNormalForm b
  have eq := Ideal.rank_eq bS hI (bI.map ((restrictScalarsEquiv R S S I).restrictScalars R))
  let e : Fin n ‚âÉ Fin (Fintype.card Œπ) := Fintype.equivOfCardEq (by rw [eq, Fintype.card_fin])
                                                                    -- üéâ no goals
  ‚ü®bS, bI.reindex e, e.symm.toEmbedding.trans f, a ‚àò e.symm, fun i ‚Ü¶ by
    simp only [snf, Basis.coe_reindex, Function.Embedding.trans_apply, Equiv.toEmbedding_apply,
      (¬∑ ‚àò ¬∑)]‚ü©
#align ideal.smith_normal_form Ideal.smithNormalForm

variable [Finite Œπ]

/-- If `S` a finite-dimensional ring extension of a PID `R` which is free as an `R`-module,
then any nonzero `S`-ideal `I` is free as an `R`-submodule of `S`, and we can
find a basis for `S` and `I` such that the inclusion map is a square diagonal
matrix.

See also `Ideal.smithNormalForm` for a version of this theorem that returns
a `Basis.SmithNormalForm`.

The definitions `Ideal.ringBasis`, `Ideal.selfBasis`, `Ideal.smithCoeffs` are (noncomputable)
choices of values for this existential quantifier.
-/
theorem Ideal.exists_smith_normal_form (b : Basis Œπ R S) (I : Ideal S) (hI : I ‚â† ‚ä•) :
    ‚àÉ (b' : Basis Œπ R S) (a : Œπ ‚Üí R) (ab' : Basis Œπ R I), ‚àÄ i, (ab' i : S) = a i ‚Ä¢ b' i := by
  cases nonempty_fintype Œπ
  -- ‚ä¢ ‚àÉ b' a ab', ‚àÄ (i : Œπ), ‚Üë(‚Üëab' i) = a i ‚Ä¢ ‚Üëb' i
  let ‚ü®bS, bI, f, a, snf‚ü© := I.smithNormalForm b hI
  -- ‚ä¢ ‚àÉ b' a ab', ‚àÄ (i : Œπ), ‚Üë(‚Üëab' i) = a i ‚Ä¢ ‚Üëb' i
  let e : Fin (Fintype.card Œπ) ‚âÉ Œπ :=
    Equiv.ofBijective f
      ((Fintype.bijective_iff_injective_and_card f).mpr ‚ü®f.injective, Fintype.card_fin _‚ü©)
  have fe : ‚àÄ i, f (e.symm i) = i := e.apply_symm_apply
  -- ‚ä¢ ‚àÉ b' a ab', ‚àÄ (i : Œπ), ‚Üë(‚Üëab' i) = a i ‚Ä¢ ‚Üëb' i
  exact
    ‚ü®bS, a ‚àò e.symm, (bI.reindex e).map ((restrictScalarsEquiv R S _ _).restrictScalars R),
      fun i ‚Ü¶ by
        simp only [snf, fe, Basis.map_apply, LinearEquiv.restrictScalars_apply R,
          Submodule.restrictScalarsEquiv_apply, Basis.coe_reindex, (¬∑ ‚àò ¬∑)]‚ü©
#align ideal.exists_smith_normal_form Ideal.exists_smith_normal_form

/-- If `S` a finite-dimensional ring extension of a PID `R` which is free as an `R`-module,
then any nonzero `S`-ideal `I` is free as an `R`-submodule of `S`, and we can
find a basis for `S` and `I` such that the inclusion map is a square diagonal
matrix; this is the basis for `S`.
See `Ideal.selfBasis` for the basis on `I`,
see `Ideal.smithCoeffs` for the entries of the diagonal matrix
and `Ideal.selfBasis_def` for the proof that the inclusion map forms a square diagonal matrix.
-/
noncomputable def Ideal.ringBasis (b : Basis Œπ R S) (I : Ideal S) (hI : I ‚â† ‚ä•) : Basis Œπ R S :=
  (Ideal.exists_smith_normal_form b I hI).choose
#align ideal.ring_basis Ideal.ringBasis

/-- If `S` a finite-dimensional ring extension of a PID `R` which is free as an `R`-module,
then any nonzero `S`-ideal `I` is free as an `R`-submodule of `S`, and we can
find a basis for `S` and `I` such that the inclusion map is a square diagonal
matrix; this is the basis for `I`.
See `Ideal.ringBasis` for the basis on `S`,
see `Ideal.smithCoeffs` for the entries of the diagonal matrix
and `Ideal.selfBasis_def` for the proof that the inclusion map forms a square diagonal matrix.
-/
noncomputable def Ideal.selfBasis (b : Basis Œπ R S) (I : Ideal S) (hI : I ‚â† ‚ä•) : Basis Œπ R I :=
  (Ideal.exists_smith_normal_form b I hI).choose_spec.choose_spec.choose
#align ideal.self_basis Ideal.selfBasis

/-- If `S` a finite-dimensional ring extension of a PID `R` which is free as an `R`-module,
then any nonzero `S`-ideal `I` is free as an `R`-submodule of `S`, and we can
find a basis for `S` and `I` such that the inclusion map is a square diagonal
matrix; these are the entries of the diagonal matrix.
See `Ideal.ringBasis` for the basis on `S`,
see `Ideal.selfBasis` for the basis on `I`,
and `Ideal.selfBasis_def` for the proof that the inclusion map forms a square diagonal matrix.
-/
noncomputable def Ideal.smithCoeffs (b : Basis Œπ R S) (I : Ideal S) (hI : I ‚â† ‚ä•) : Œπ ‚Üí R :=
  (Ideal.exists_smith_normal_form b I hI).choose_spec.choose
#align ideal.smith_coeffs Ideal.smithCoeffs

/-- If `S` a finite-dimensional ring extension of a PID `R` which is free as an `R`-module,
then any nonzero `S`-ideal `I` is free as an `R`-submodule of `S`, and we can
find a basis for `S` and `I` such that the inclusion map is a square diagonal
matrix.
-/
@[simp]
theorem Ideal.selfBasis_def (b : Basis Œπ R S) (I : Ideal S) (hI : I ‚â† ‚ä•) :
    ‚àÄ i, (Ideal.selfBasis b I hI i : S) = Ideal.smithCoeffs b I hI i ‚Ä¢ Ideal.ringBasis b I hI i :=
  (Ideal.exists_smith_normal_form b I hI).choose_spec.choose_spec.choose_spec
#align ideal.self_basis_def Ideal.selfBasis_def

@[simp]
theorem Ideal.smithCoeffs_ne_zero (b : Basis Œπ R S) (I : Ideal S) (hI : I ‚â† ‚ä•) (i) :
    Ideal.smithCoeffs b I hI i ‚â† 0 := by
  intro hi
  -- ‚ä¢ False
  apply Basis.ne_zero (Ideal.selfBasis b I hI) i
  -- ‚ä¢ ‚Üë(selfBasis b I hI) i = 0
  refine' Subtype.coe_injective _
  -- ‚ä¢ (fun a => ‚Üëa) (‚Üë(selfBasis b I hI) i) = (fun a => ‚Üëa) 0
  simp [hi]
  -- üéâ no goals
#align ideal.smith_coeffs_ne_zero Ideal.smithCoeffs_ne_zero

-- porting note: can be inferred in Lean 4 so no longer necessary
#noalign has_quotient.quotient.module

end Ideal

end SmithNormal

end PrincipalIdealDomain

/-- A set of linearly independent vectors in a module `M` over a semiring `S` is also linearly
independent over a subring `R` of `K`. -/
theorem LinearIndependent.restrict_scalars_algebras {R S M Œπ : Type*} [CommSemiring R] [Semiring S]
    [AddCommMonoid M] [Algebra R S] [Module R M] [Module S M] [IsScalarTower R S M]
    (hinj : Function.Injective (algebraMap R S)) {v : Œπ ‚Üí M} (li : LinearIndependent S v) :
    LinearIndependent R v :=
  LinearIndependent.restrict_scalars (by rwa [Algebra.algebraMap_eq_smul_one'] at hinj) li
                                         -- üéâ no goals
#align linear_independent.restrict_scalars_algebras LinearIndependent.restrict_scalars_algebras
