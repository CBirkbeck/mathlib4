/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.AlternatingFaceMapComplex
import Mathlib.AlgebraicTopology.SimplicialSet
import Mathlib.AlgebraicTopology.CechNerve
import Mathlib.Algebra.Homology.Homotopy
import Mathlib.Tactic.FinCases

#align_import algebraic_topology.extra_degeneracy from "leanprover-community/mathlib"@"324a7502510e835cdbd3de1519b6c66b51fb2467"

/-!

# Augmented simplicial objects with an extra degeneracy

In simplicial homotopy theory, in order to prove that the connected components
of a simplicial set `X` are contractible, it suffices to construct an extra
degeneracy as it is defined in *Simplicial Homotopy Theory* by Goerss-Jardine p. 190.
It consists of a series of maps `œÄ‚ÇÄ X ‚Üí X _[0]` and `X _[n] ‚Üí X _[n+1]` which
behave formally like an extra degeneracy `œÉ (-1)`. It can be thought as a datum
associated to the augmented simplicial set `X ‚Üí œÄ‚ÇÄ X`.

In this file, we adapt this definition to the case of augmented
simplicial objects in any category.

## Main definitions

- the structure `ExtraDegeneracy X` for any `X : SimplicialObject.Augmented C`
- `ExtraDegeneracy.map`: extra degeneracies are preserved by the application of any
functor `C ‚•§ D`
- `SSet.Augmented.StandardSimplex.extraDegeneracy`: the standard `n`-simplex has
an extra degeneracy
- `Arrow.AugmentedCechNerve.extraDegeneracy`: the ƒåech nerve of a split
epimorphism has an extra degeneracy
- `ExtraDegeneracy.homotopyEquiv`: in the case the category `C` is preadditive,
if we have an extra degeneracy on `X : SimplicialObject.Augmented C`, then
the augmentation on the alternating face map complex of `X` is a homotopy
equivalence.

## References
* [Paul G. Goerss, John F. Jardine, *Simplical Homotopy Theory*][goerss-jardine-2009]

-/


open CategoryTheory Category SimplicialObject.Augmented Opposite Simplicial

namespace SimplicialObject

namespace Augmented

variable {C : Type*} [Category C]

-- porting note: in the formulation of the axioms `s_comp_Œ¥‚ÇÄ`, etc, `drop.obj X` has been
-- replaced by `X.left` in order to have lemmas with LHS/RHS in normal form
/-- The datum of an extra degeneracy is a technical condition on
augmented simplicial objects. The morphisms `s'` and `s n` of the
structure formally behave like extra degeneracies `œÉ (-1)`. -/
@[ext]
structure ExtraDegeneracy (X : SimplicialObject.Augmented C) where
  s' : point.obj X ‚ü∂ drop.obj X _[0]
  s : ‚àÄ n : ‚Ñï, drop.obj X _[n] ‚ü∂ drop.obj X _[n + 1]
  s'_comp_Œµ : s' ‚â´ X.hom.app (op [0]) = ùüô _
  s‚ÇÄ_comp_Œ¥‚ÇÅ : s 0 ‚â´ X.left.Œ¥ 1 = X.hom.app (op [0]) ‚â´ s'
  s_comp_Œ¥‚ÇÄ : ‚àÄ n : ‚Ñï, s n ‚â´ X.left.Œ¥ 0 = ùüô _
  s_comp_Œ¥ :
    ‚àÄ (n : ‚Ñï) (i : Fin (n + 2)), s (n + 1) ‚â´ X.left.Œ¥ i.succ = X.left.Œ¥ i ‚â´ s n
  s_comp_œÉ :
    ‚àÄ (n : ‚Ñï) (i : Fin (n + 1)), s n ‚â´ X.left.œÉ i.succ = X.left.œÉ i ‚â´ s (n + 1)
#align simplicial_object.augmented.extra_degeneracy SimplicialObject.Augmented.ExtraDegeneracy

namespace ExtraDegeneracy

attribute [reassoc] s‚ÇÄ_comp_Œ¥‚ÇÅ s_comp_Œ¥ s_comp_œÉ
attribute [reassoc (attr := simp)] s'_comp_Œµ s_comp_Œ¥‚ÇÄ

/-- If `ed` is an extra degeneracy for `X : SimplicialObject.Augmented C` and
`F : C ‚•§ D` is a functor, then `ed.map F` is an extra degeneracy for the
augmented simplical object in `D` obtained by applying `F` to `X`. -/
def map {D : Type*} [Category D] {X : SimplicialObject.Augmented C} (ed : ExtraDegeneracy X)
    (F : C ‚•§ D) : ExtraDegeneracy (((whiskering _ _).obj F).obj X) where
  s' := F.map ed.s'
  s n := F.map (ed.s n)
  s'_comp_Œµ := by
    dsimp
    -- ‚ä¢ F.map ed.s' ‚â´ F.map (NatTrans.app X.hom (op [0])) ‚â´ ùüô (F.obj X.right) = ùüô (F ‚Ä¶
    erw [comp_id, ‚Üê F.map_comp, ed.s'_comp_Œµ, F.map_id]
    -- üéâ no goals
  s‚ÇÄ_comp_Œ¥‚ÇÅ := by
    dsimp
    -- ‚ä¢ F.map (s ed 0) ‚â´ SimplicialObject.Œ¥ (((SimplicialObject.whiskering C D).obj  ‚Ä¶
    erw [comp_id, ‚Üê F.map_comp, ‚Üê F.map_comp, ed.s‚ÇÄ_comp_Œ¥‚ÇÅ]
    -- üéâ no goals
  s_comp_Œ¥‚ÇÄ n := by
    dsimp
    -- ‚ä¢ F.map (s ed n) ‚â´ SimplicialObject.Œ¥ (((SimplicialObject.whiskering C D).obj  ‚Ä¶
    erw [‚Üê F.map_comp, ed.s_comp_Œ¥‚ÇÄ, F.map_id]
    -- üéâ no goals
  s_comp_Œ¥ n i := by
    dsimp
    -- ‚ä¢ F.map (s ed (n + 1)) ‚â´ SimplicialObject.Œ¥ (((SimplicialObject.whiskering C D ‚Ä¶
    erw [‚Üê F.map_comp, ‚Üê F.map_comp, ed.s_comp_Œ¥]
    -- ‚ä¢ F.map (SimplicialObject.Œ¥ X.left i ‚â´ s ed n) = F.map (X.left.map (SimplexCat ‚Ä¶
    rfl
    -- üéâ no goals
  s_comp_œÉ n i := by
    dsimp
    -- ‚ä¢ F.map (s ed n) ‚â´ SimplicialObject.œÉ (((SimplicialObject.whiskering C D).obj  ‚Ä¶
    erw [‚Üê F.map_comp, ‚Üê F.map_comp, ed.s_comp_œÉ]
    -- ‚ä¢ F.map (SimplicialObject.œÉ X.left i ‚â´ s ed (n + 1)) = F.map (X.left.map (Simp ‚Ä¶
    rfl
    -- üéâ no goals
#align simplicial_object.augmented.extra_degeneracy.map SimplicialObject.Augmented.ExtraDegeneracy.map

/-- If `X` and `Y` are isomorphic augmented simplicial objects, then an extra
degeneracy for `X` gives also an extra degeneracy for `Y` -/
def ofIso {X Y : SimplicialObject.Augmented C} (e : X ‚âÖ Y) (ed : ExtraDegeneracy X) :
    ExtraDegeneracy Y where
  s' := (point.mapIso e).inv ‚â´ ed.s' ‚â´ (drop.mapIso e).hom.app (op [0])
  s n := (drop.mapIso e).inv.app (op [n]) ‚â´ ed.s n ‚â´ (drop.mapIso e).hom.app (op [n + 1])
  s'_comp_Œµ := by
    simpa only [Functor.mapIso, assoc, w‚ÇÄ, ed.s'_comp_Œµ_assoc] using (point.mapIso e).inv_hom_id
    -- üéâ no goals
  s‚ÇÄ_comp_Œ¥‚ÇÅ := by
    have h := w‚ÇÄ e.inv
    -- ‚ä¢ (fun n => NatTrans.app (drop.mapIso e).inv (op [n]) ‚â´ s ed n ‚â´ NatTrans.app  ‚Ä¶
    dsimp at h ‚ä¢
    -- ‚ä¢ (NatTrans.app e.inv.left (op [0]) ‚â´ s ed 0 ‚â´ NatTrans.app e.hom.left (op [0  ‚Ä¶
    simp only [assoc, ‚Üê SimplicialObject.Œ¥_naturality, ed.s‚ÇÄ_comp_Œ¥‚ÇÅ_assoc, reassoc_of% h]
    -- üéâ no goals
  s_comp_Œ¥‚ÇÄ n := by
    have h := ed.s_comp_Œ¥‚ÇÄ
    -- ‚ä¢ (fun n => NatTrans.app (drop.mapIso e).inv (op [n]) ‚â´ s ed n ‚â´ NatTrans.app  ‚Ä¶
    dsimp at h ‚ä¢
    -- ‚ä¢ (NatTrans.app e.inv.left (op [n]) ‚â´ s ed n ‚â´ NatTrans.app e.hom.left (op [n  ‚Ä¶
    simpa only [assoc, ‚Üê SimplicialObject.Œ¥_naturality, reassoc_of% h] using
      congr_app (drop.mapIso e).inv_hom_id (op [n])
  s_comp_Œ¥ n i := by
    have h := ed.s_comp_Œ¥ n i
    -- ‚ä¢ (fun n => NatTrans.app (drop.mapIso e).inv (op [n]) ‚â´ s ed n ‚â´ NatTrans.app  ‚Ä¶
    dsimp at h ‚ä¢
    -- ‚ä¢ (NatTrans.app e.inv.left (op [n + 1]) ‚â´ s ed (n + 1) ‚â´ NatTrans.app e.hom.le ‚Ä¶
    simp only [assoc, ‚Üê SimplicialObject.Œ¥_naturality, reassoc_of% h,
      ‚Üê SimplicialObject.Œ¥_naturality_assoc]
  s_comp_œÉ n i := by
    have h := ed.s_comp_œÉ n i
    -- ‚ä¢ (fun n => NatTrans.app (drop.mapIso e).inv (op [n]) ‚â´ s ed n ‚â´ NatTrans.app  ‚Ä¶
    dsimp at h ‚ä¢
    -- ‚ä¢ (NatTrans.app e.inv.left (op [n]) ‚â´ s ed n ‚â´ NatTrans.app e.hom.left (op [n  ‚Ä¶
    simp only [assoc, ‚Üê SimplicialObject.œÉ_naturality, reassoc_of% h,
      ‚Üê SimplicialObject.œÉ_naturality_assoc]
#align simplicial_object.augmented.extra_degeneracy.of_iso SimplicialObject.Augmented.ExtraDegeneracy.ofIso

end ExtraDegeneracy

end Augmented

end SimplicialObject

namespace SSet

namespace Augmented

namespace StandardSimplex

/-- When `[HasZero X]`, the shift of a map `f : Fin n ‚Üí X`
is a map `Fin (n+1) ‚Üí X` which sends `0` to `0` and `i.succ` to `f i`. -/
def shiftFun {n : ‚Ñï} {X : Type*} [Zero X] (f : Fin n ‚Üí X) (i : Fin (n + 1)) : X :=
  dite (i = 0) (fun _ => 0) fun h => f (i.pred h)
set_option linter.uppercaseLean3 false in
#align sSet.augmented.standard_simplex.shift_fun SSet.Augmented.StandardSimplex.shiftFun

@[simp]
theorem shiftFun_0 {n : ‚Ñï} {X : Type*} [Zero X] (f : Fin n ‚Üí X) : shiftFun f 0 = 0 :=
  rfl
set_option linter.uppercaseLean3 false in
#align sSet.augmented.standard_simplex.shift_fun_0 SSet.Augmented.StandardSimplex.shiftFun_0

@[simp]
theorem shiftFun_succ {n : ‚Ñï} {X : Type*} [Zero X] (f : Fin n ‚Üí X) (i : Fin n) :
    shiftFun f i.succ = f i := by
  dsimp [shiftFun]
  -- ‚ä¢ (if x : Fin.succ i = 0 then 0 else f (Fin.pred (Fin.succ i) x)) = f i
  split_ifs with h
  -- ‚ä¢ 0 = f i
  ¬∑ exfalso
    -- ‚ä¢ False
    simp only [Fin.ext_iff, Fin.val_succ, Fin.val_zero, add_eq_zero, and_false] at h
    -- üéâ no goals
  ¬∑ simp only [Fin.pred_succ]
    -- üéâ no goals
set_option linter.uppercaseLean3 false in
#align sSet.augmented.standard_simplex.shift_fun_succ SSet.Augmented.StandardSimplex.shiftFun_succ

/-- The shift of a morphism `f : [n] ‚Üí Œî` in `SimplexCategory` corresponds to
the monotone map which sends `0` to `0` and `i.succ` to `f.to_order_hom i`. -/
@[simp]
def shift {n : ‚Ñï} {Œî : SimplexCategory}
    (f : ([n] : SimplexCategory) ‚ü∂ Œî) : ([n + 1] : SimplexCategory) ‚ü∂ Œî :=
  SimplexCategory.Hom.mk
    { toFun := shiftFun f.toOrderHom
      monotone' := fun i‚ÇÅ i‚ÇÇ hi => by
        by_cases h‚ÇÅ : i‚ÇÅ = 0
        -- ‚ä¢ shiftFun (‚Üë(SimplexCategory.Hom.toOrderHom f)) i‚ÇÅ ‚â§ shiftFun (‚Üë(SimplexCateg ‚Ä¶
        ¬∑ subst h‚ÇÅ
          -- ‚ä¢ shiftFun (‚Üë(SimplexCategory.Hom.toOrderHom f)) 0 ‚â§ shiftFun (‚Üë(SimplexCatego ‚Ä¶
          simp only [shiftFun_0, Fin.zero_le]
          -- üéâ no goals
        ¬∑ have h‚ÇÇ : i‚ÇÇ ‚â† 0 := by
            intro h‚ÇÇ
            subst h‚ÇÇ
            exact h‚ÇÅ (le_antisymm hi (Fin.zero_le _))
          cases' Fin.eq_succ_of_ne_zero h‚ÇÅ with j‚ÇÅ hj‚ÇÅ
          -- ‚ä¢ shiftFun (‚Üë(SimplexCategory.Hom.toOrderHom f)) i‚ÇÅ ‚â§ shiftFun (‚Üë(SimplexCateg ‚Ä¶
          cases' Fin.eq_succ_of_ne_zero h‚ÇÇ with j‚ÇÇ hj‚ÇÇ
          -- ‚ä¢ shiftFun (‚Üë(SimplexCategory.Hom.toOrderHom f)) i‚ÇÅ ‚â§ shiftFun (‚Üë(SimplexCateg ‚Ä¶
          substs hj‚ÇÅ hj‚ÇÇ
          -- ‚ä¢ shiftFun (‚Üë(SimplexCategory.Hom.toOrderHom f)) (Fin.succ j‚ÇÅ) ‚â§ shiftFun (‚Üë(S ‚Ä¶
          simpa only [shiftFun_succ] using f.toOrderHom.monotone (Fin.succ_le_succ_iff.mp hi) }
          -- üéâ no goals
set_option linter.uppercaseLean3 false in
#align sSet.augmented.standard_simplex.shift SSet.Augmented.StandardSimplex.shift

/-- The obvious extra degeneracy on the standard simplex. -/
protected noncomputable def extraDegeneracy (Œî : SimplexCategory) :
    SimplicialObject.Augmented.ExtraDegeneracy (standardSimplex.obj Œî) where
  s' _ := SimplexCategory.Hom.mk (OrderHom.const _ 0)
  s n f := shift f
  s'_comp_Œµ := by
    dsimp
    -- ‚ä¢ (fun x => SimplexCategory.Hom.mk (‚Üë(OrderHom.const (Fin (0 + 1))) 0)) ‚â´ NatT ‚Ä¶
    apply Subsingleton.elim
    -- üéâ no goals
  s‚ÇÄ_comp_Œ¥‚ÇÅ := by
    ext1 x
    -- ‚ä¢ ((fun n f => shift f) 0 ‚â´ SimplicialObject.Œ¥ (standardSimplex.obj Œî).left 1) ‚Ä¶
    apply SimplexCategory.Hom.ext
    -- ‚ä¢ SimplexCategory.Hom.toOrderHom (((fun n f => shift f) 0 ‚â´ SimplicialObject.Œ¥ ‚Ä¶
    ext j
    -- ‚ä¢ ‚Üë(‚Üë(SimplexCategory.Hom.toOrderHom (((fun n f => shift f) 0 ‚â´ SimplicialObje ‚Ä¶
    fin_cases j
    -- ‚ä¢ ‚Üë(‚Üë(SimplexCategory.Hom.toOrderHom (((fun n f => shift f) 0 ‚â´ SimplicialObje ‚Ä¶
    rfl
    -- üéâ no goals
  s_comp_Œ¥‚ÇÄ n := by
    ext1 œÜ
    -- ‚ä¢ ((fun n f => shift f) n ‚â´ SimplicialObject.Œ¥ (standardSimplex.obj Œî).left 0) ‚Ä¶
    apply SimplexCategory.Hom.ext
    -- ‚ä¢ SimplexCategory.Hom.toOrderHom (((fun n f => shift f) n ‚â´ SimplicialObject.Œ¥ ‚Ä¶
    ext i : 2
    -- ‚ä¢ ‚Üë(SimplexCategory.Hom.toOrderHom (((fun n f => shift f) n ‚â´ SimplicialObject ‚Ä¶
    dsimp [SimplicialObject.Œ¥, SimplexCategory.Œ¥, SSet.standardSimplex]
    -- ‚ä¢ shiftFun (‚Üë(SimplexCategory.Hom.toOrderHom œÜ)) (Fin.succ i) = ‚Üë(SimplexCateg ‚Ä¶
    simp only [shiftFun_succ]
    -- üéâ no goals
  s_comp_Œ¥ n i := by
    ext1 œÜ
    -- ‚ä¢ ((fun n f => shift f) (n + 1) ‚â´ SimplicialObject.Œ¥ (standardSimplex.obj Œî).l ‚Ä¶
    apply SimplexCategory.Hom.ext
    -- ‚ä¢ SimplexCategory.Hom.toOrderHom (((fun n f => shift f) (n + 1) ‚â´ SimplicialOb ‚Ä¶
    ext j : 2
    -- ‚ä¢ ‚Üë(SimplexCategory.Hom.toOrderHom (((fun n f => shift f) (n + 1) ‚â´ Simplicial ‚Ä¶
    dsimp [SimplicialObject.Œ¥, SimplexCategory.Œ¥, SSet.standardSimplex]
    -- ‚ä¢ shiftFun (‚Üë(SimplexCategory.Hom.toOrderHom œÜ)) (Fin.succAbove (Fin.succ i) j ‚Ä¶
    by_cases j = 0
    -- ‚ä¢ shiftFun (‚Üë(SimplexCategory.Hom.toOrderHom œÜ)) (Fin.succAbove (Fin.succ i) j ‚Ä¶
    -- ‚ä¢ shiftFun (‚Üë(SimplexCategory.Hom.toOrderHom œÜ)) (Fin.succAbove (Fin.succ i) j ‚Ä¶
    ¬∑ subst h
      -- ‚ä¢ shiftFun (‚Üë(SimplexCategory.Hom.toOrderHom œÜ)) (Fin.succAbove (Fin.succ i) 0 ‚Ä¶
      simp only [Fin.succ_succAbove_zero, shiftFun_0]
      -- üéâ no goals
    ¬∑ obtain ‚ü®_, rfl‚ü© := Fin.eq_succ_of_ne_zero <| h
      -- ‚ä¢ shiftFun (‚Üë(SimplexCategory.Hom.toOrderHom œÜ)) (Fin.succAbove (Fin.succ i) ( ‚Ä¶
      simp only [Fin.succ_succAbove_succ, shiftFun_succ, Function.comp_apply,
        Fin.succAboveEmb_apply]
  s_comp_œÉ n i := by
    ext1 œÜ
    -- ‚ä¢ ((fun n f => shift f) n ‚â´ SimplicialObject.œÉ (standardSimplex.obj Œî).left (F ‚Ä¶
    apply SimplexCategory.Hom.ext
    -- ‚ä¢ SimplexCategory.Hom.toOrderHom (((fun n f => shift f) n ‚â´ SimplicialObject.œÉ ‚Ä¶
    ext j : 2
    -- ‚ä¢ ‚Üë(SimplexCategory.Hom.toOrderHom (((fun n f => shift f) n ‚â´ SimplicialObject ‚Ä¶
    dsimp [SimplicialObject.œÉ, SimplexCategory.œÉ, SSet.standardSimplex]
    -- ‚ä¢ shiftFun (‚Üë(SimplexCategory.Hom.toOrderHom œÜ)) (Fin.predAbove (Fin.succ i) j ‚Ä¶
    by_cases j = 0
    -- ‚ä¢ shiftFun (‚Üë(SimplexCategory.Hom.toOrderHom œÜ)) (Fin.predAbove (Fin.succ i) j ‚Ä¶
    -- ‚ä¢ shiftFun (‚Üë(SimplexCategory.Hom.toOrderHom œÜ)) (Fin.predAbove (Fin.succ i) j ‚Ä¶
    ¬∑ subst h
      -- ‚ä¢ shiftFun (‚Üë(SimplexCategory.Hom.toOrderHom œÜ)) (Fin.predAbove (Fin.succ i) 0 ‚Ä¶
      simp only [shiftFun_0]
      -- ‚ä¢ shiftFun (‚Üë(SimplexCategory.Hom.toOrderHom œÜ)) (Fin.predAbove (Fin.succ i) 0 ‚Ä¶
      exact shiftFun_0 œÜ.toOrderHom
      -- üéâ no goals
    ¬∑ obtain ‚ü®_, rfl‚ü© := Fin.eq_succ_of_ne_zero h
      -- ‚ä¢ shiftFun (‚Üë(SimplexCategory.Hom.toOrderHom œÜ)) (Fin.predAbove (Fin.succ i) ( ‚Ä¶
      simp only [Fin.succ_predAbove_succ, shiftFun_succ, Function.comp_apply]
      -- üéâ no goals
set_option linter.uppercaseLean3 false in
#align sSet.augmented.standard_simplex.extra_degeneracy SSet.Augmented.StandardSimplex.extraDegeneracy

instance nonempty_extraDegeneracy_standardSimplex (Œî : SimplexCategory) :
    Nonempty (SimplicialObject.Augmented.ExtraDegeneracy (standardSimplex.obj Œî)) :=
  ‚ü®StandardSimplex.extraDegeneracy Œî‚ü©
set_option linter.uppercaseLean3 false in
#align sSet.augmented.standard_simplex.nonempty_extra_degeneracy_standard_simplex SSet.Augmented.StandardSimplex.nonempty_extraDegeneracy_standardSimplex

end StandardSimplex

end Augmented

end SSet

namespace CategoryTheory

open Limits

namespace Arrow

namespace AugmentedCechNerve

variable {C : Type*} [Category C] (f : Arrow C)
  [‚àÄ n : ‚Ñï, HasWidePullback f.right (fun _ : Fin (n + 1) => f.left) fun _ => f.hom]
  (S : SplitEpi f.hom)

/-- The extra degeneracy map on the ƒåech nerve of a split epi. It is
given on the `0`-projection by the given section of the split epi,
and by shifting the indices on the other projections. -/
noncomputable def ExtraDegeneracy.s (n : ‚Ñï) :
    f.cechNerve.obj (op [n]) ‚ü∂ f.cechNerve.obj (op [n + 1]) :=
  WidePullback.lift (WidePullback.base _)
    (fun i =>
      dite (i = 0)
        (fun _ => WidePullback.base _ ‚â´ S.section_)
        (fun h => WidePullback.œÄ _ (i.pred h)))
    fun i => by
      dsimp
      -- ‚ä¢ (if x : i = 0 then (WidePullback.base fun x => f.hom) ‚â´ S.section_ else Wide ‚Ä¶
      split_ifs with h
      -- ‚ä¢ ((WidePullback.base fun x => f.hom) ‚â´ S.section_) ‚â´ f.hom = WidePullback.bas ‚Ä¶
      ¬∑ subst h
        -- ‚ä¢ ((WidePullback.base fun x => f.hom) ‚â´ S.section_) ‚â´ f.hom = WidePullback.bas ‚Ä¶
        simp only [assoc, SplitEpi.id, comp_id]
        -- üéâ no goals
      ¬∑ simp only [WidePullback.œÄ_arrow]
        -- üéâ no goals
#align category_theory.arrow.augmented_cech_nerve.extra_degeneracy.s CategoryTheory.Arrow.AugmentedCechNerve.ExtraDegeneracy.s

-- porting note: @[simp] removed as the linter complains the LHS is not in normal form
theorem ExtraDegeneracy.s_comp_œÄ_0 (n : ‚Ñï) :
    ExtraDegeneracy.s f S n ‚â´ WidePullback.œÄ _ 0 =
      @WidePullback.base _ _ _ f.right (fun _ : Fin (n + 1) => f.left) (fun _ => f.hom) _ ‚â´
        S.section_ := by
  dsimp [ExtraDegeneracy.s]
  -- ‚ä¢ WidePullback.lift (WidePullback.base fun x => f.hom) (fun i => if x : i = 0  ‚Ä¶
  simp only [WidePullback.lift_œÄ]
  -- ‚ä¢ (if h : True then (WidePullback.base fun x => f.hom) ‚â´ S.section_ else WideP ‚Ä¶
  rfl
  -- üéâ no goals

-- porting note: @[simp] removed as the linter complains the LHS is not in normal form
theorem ExtraDegeneracy.s_comp_œÄ_succ (n : ‚Ñï) (i : Fin (n + 1)) :
    ExtraDegeneracy.s f S n ‚â´ WidePullback.œÄ _ i.succ =
      @WidePullback.œÄ _ _ _ f.right (fun _ : Fin (n + 1) => f.left) (fun _ => f.hom) _ i := by
  dsimp [ExtraDegeneracy.s]
  -- ‚ä¢ WidePullback.lift (WidePullback.base fun x => f.hom) (fun i => if x : i = 0  ‚Ä¶
  simp only [WidePullback.lift_œÄ]
  -- ‚ä¢ (if x : Fin.succ i = 0 then (WidePullback.base fun x => f.hom) ‚â´ S.section_  ‚Ä¶
  split_ifs with h
  -- ‚ä¢ (WidePullback.base fun x => f.hom) ‚â´ S.section_ = WidePullback.œÄ (fun x => f ‚Ä¶
  ¬∑ simp only [Fin.ext_iff, Fin.val_succ, Fin.val_zero, add_eq_zero, and_false] at h
    -- üéâ no goals
  ¬∑ simp only [Fin.pred_succ]
    -- üéâ no goals
#align category_theory.arrow.augmented_cech_nerve.extra_degeneracy.s_comp_œÄ_succ CategoryTheory.Arrow.AugmentedCechNerve.ExtraDegeneracy.s_comp_œÄ_succ

-- porting note: @[simp] removed as the linter complains the LHS is not in normal form
theorem ExtraDegeneracy.s_comp_base (n : ‚Ñï) :
    ExtraDegeneracy.s f S n ‚â´ WidePullback.base _ = WidePullback.base _ := by
  apply WidePullback.lift_base
  -- üéâ no goals
#align category_theory.arrow.augmented_cech_nerve.extra_degeneracy.s_comp_base CategoryTheory.Arrow.AugmentedCechNerve.ExtraDegeneracy.s_comp_base

/-- The augmented ƒåech nerve associated to a split epimorphism has an extra degeneracy. -/
noncomputable def extraDegeneracy : SimplicialObject.Augmented.ExtraDegeneracy f.augmentedCechNerve
    where
  s' := S.section_ ‚â´ WidePullback.lift f.hom (fun _ => ùüô _) fun i => by rw [id_comp]
                                                                        -- üéâ no goals
  s n := ExtraDegeneracy.s f S n
  s'_comp_Œµ := by
    dsimp
    -- ‚ä¢ ((S.section_ ‚â´ WidePullback.lift f.hom (fun x => ùüô f.left) (_ : Fin (0 + 1)  ‚Ä¶
    simp only [augmentedCechNerve_hom_app, assoc, WidePullback.lift_base, SplitEpi.id]
    -- üéâ no goals
  s‚ÇÄ_comp_Œ¥‚ÇÅ := by
    dsimp [cechNerve, SimplicialObject.Œ¥, SimplexCategory.Œ¥]
    -- ‚ä¢ ExtraDegeneracy.s f S 0 ‚â´ WidePullback.lift (WidePullback.base fun x => f.ho ‚Ä¶
    ext j
    -- ‚ä¢ (ExtraDegeneracy.s f S 0 ‚â´ WidePullback.lift (WidePullback.base fun x => f.h ‚Ä¶
    ¬∑ fin_cases j
      -- ‚ä¢ (ExtraDegeneracy.s f S 0 ‚â´ WidePullback.lift (WidePullback.base fun x => f.h ‚Ä¶
      simpa only [assoc, WidePullback.lift_œÄ, comp_id] using ExtraDegeneracy.s_comp_œÄ_0 f S 0
      -- üéâ no goals
    ¬∑ simpa only [assoc, WidePullback.lift_base, SplitEpi.id, comp_id] using
        ExtraDegeneracy.s_comp_base f S 0
  s_comp_Œ¥‚ÇÄ n := by
    dsimp [cechNerve, SimplicialObject.Œ¥, SimplexCategory.Œ¥]
    -- ‚ä¢ ExtraDegeneracy.s f S n ‚â´ WidePullback.lift (WidePullback.base fun x => f.ho ‚Ä¶
    ext j
    -- ‚ä¢ (ExtraDegeneracy.s f S n ‚â´ WidePullback.lift (WidePullback.base fun x => f.h ‚Ä¶
    ¬∑ simpa only [assoc, WidePullback.lift_œÄ, id_comp] using ExtraDegeneracy.s_comp_œÄ_succ f S n j
      -- üéâ no goals
    ¬∑ simpa only [assoc, WidePullback.lift_base, id_comp] using ExtraDegeneracy.s_comp_base f S n
      -- üéâ no goals
  s_comp_Œ¥ n i := by
    dsimp [cechNerve, SimplicialObject.Œ¥, SimplexCategory.Œ¥]
    -- ‚ä¢ ExtraDegeneracy.s f S (n + 1) ‚â´ WidePullback.lift (WidePullback.base fun x = ‚Ä¶
    ext j
    -- ‚ä¢ (ExtraDegeneracy.s f S (n + 1) ‚â´ WidePullback.lift (WidePullback.base fun x  ‚Ä¶
    ¬∑ simp only [assoc, WidePullback.lift_œÄ]
      -- ‚ä¢ ExtraDegeneracy.s f S (n + 1) ‚â´ WidePullback.œÄ (fun x => f.hom) (Fin.succAbo ‚Ä¶
      by_cases j = 0
      -- ‚ä¢ ExtraDegeneracy.s f S (n + 1) ‚â´ WidePullback.œÄ (fun x => f.hom) (Fin.succAbo ‚Ä¶
      -- ‚ä¢ ExtraDegeneracy.s f S (n + 1) ‚â´ WidePullback.œÄ (fun x => f.hom) (Fin.succAbo ‚Ä¶
      ¬∑ subst h
        -- ‚ä¢ ExtraDegeneracy.s f S (n + 1) ‚â´ WidePullback.œÄ (fun x => f.hom) (Fin.succAbo ‚Ä¶
        erw [Fin.succ_succAbove_zero, ExtraDegeneracy.s_comp_œÄ_0, ExtraDegeneracy.s_comp_œÄ_0]
        -- ‚ä¢ (WidePullback.base fun x => f.hom) ‚â´ S.section_ = WidePullback.lift (WidePul ‚Ä¶
        dsimp
        -- ‚ä¢ (WidePullback.base fun x => f.hom) ‚â´ S.section_ = WidePullback.lift (WidePul ‚Ä¶
        simp only [WidePullback.lift_base_assoc]
        -- üéâ no goals
      ¬∑ cases' Fin.eq_succ_of_ne_zero h with k hk
        -- ‚ä¢ ExtraDegeneracy.s f S (n + 1) ‚â´ WidePullback.œÄ (fun x => f.hom) (Fin.succAbo ‚Ä¶
        subst hk
        -- ‚ä¢ ExtraDegeneracy.s f S (n + 1) ‚â´ WidePullback.œÄ (fun x => f.hom) (Fin.succAbo ‚Ä¶
        erw [Fin.succ_succAbove_succ, ExtraDegeneracy.s_comp_œÄ_succ,
          ExtraDegeneracy.s_comp_œÄ_succ]
        simp only [WidePullback.lift_œÄ]
        -- üéâ no goals
    ¬∑ simp only [assoc, WidePullback.lift_base]
      -- ‚ä¢ (ExtraDegeneracy.s f S (n + 1) ‚â´ WidePullback.base fun x => f.hom) = WidePul ‚Ä¶
      erw [ExtraDegeneracy.s_comp_base, ExtraDegeneracy.s_comp_base]
      -- ‚ä¢ (WidePullback.base fun x => f.hom) = WidePullback.lift (WidePullback.base fu ‚Ä¶
      dsimp
      -- ‚ä¢ (WidePullback.base fun x => f.hom) = WidePullback.lift (WidePullback.base fu ‚Ä¶
      simp only [WidePullback.lift_base]
      -- üéâ no goals
  s_comp_œÉ n i := by
    dsimp [cechNerve, SimplicialObject.œÉ, SimplexCategory.œÉ]
    -- ‚ä¢ ExtraDegeneracy.s f S n ‚â´ WidePullback.lift (WidePullback.base fun x => f.ho ‚Ä¶
    ext j
    -- ‚ä¢ (ExtraDegeneracy.s f S n ‚â´ WidePullback.lift (WidePullback.base fun x => f.h ‚Ä¶
    ¬∑ simp only [assoc, WidePullback.lift_œÄ]
      -- ‚ä¢ ExtraDegeneracy.s f S n ‚â´ WidePullback.œÄ (fun x => f.hom) (Fin.predAbove (Fi ‚Ä¶
      by_cases j = 0
      -- ‚ä¢ ExtraDegeneracy.s f S n ‚â´ WidePullback.œÄ (fun x => f.hom) (Fin.predAbove (Fi ‚Ä¶
      -- ‚ä¢ ExtraDegeneracy.s f S n ‚â´ WidePullback.œÄ (fun x => f.hom) (Fin.predAbove (Fi ‚Ä¶
      ¬∑ subst h
        -- ‚ä¢ ExtraDegeneracy.s f S n ‚â´ WidePullback.œÄ (fun x => f.hom) (Fin.predAbove (Fi ‚Ä¶
        erw [ExtraDegeneracy.s_comp_œÄ_0, ExtraDegeneracy.s_comp_œÄ_0]
        -- ‚ä¢ (WidePullback.base fun x => f.hom) ‚â´ S.section_ = WidePullback.lift (WidePul ‚Ä¶
        dsimp
        -- ‚ä¢ (WidePullback.base fun x => f.hom) ‚â´ S.section_ = WidePullback.lift (WidePul ‚Ä¶
        simp only [WidePullback.lift_base_assoc]
        -- üéâ no goals
      ¬∑ cases' Fin.eq_succ_of_ne_zero h with k hk
        -- ‚ä¢ ExtraDegeneracy.s f S n ‚â´ WidePullback.œÄ (fun x => f.hom) (Fin.predAbove (Fi ‚Ä¶
        subst hk
        -- ‚ä¢ ExtraDegeneracy.s f S n ‚â´ WidePullback.œÄ (fun x => f.hom) (Fin.predAbove (Fi ‚Ä¶
        erw [Fin.succ_predAbove_succ, ExtraDegeneracy.s_comp_œÄ_succ,
          ExtraDegeneracy.s_comp_œÄ_succ]
        simp only [WidePullback.lift_œÄ]
        -- üéâ no goals
    ¬∑ simp only [assoc, WidePullback.lift_base]
      -- ‚ä¢ (ExtraDegeneracy.s f S n ‚â´ WidePullback.base fun x => f.hom) = WidePullback. ‚Ä¶
      erw [ExtraDegeneracy.s_comp_base, ExtraDegeneracy.s_comp_base]
      -- ‚ä¢ (WidePullback.base fun x => f.hom) = WidePullback.lift (WidePullback.base fu ‚Ä¶
      dsimp
      -- ‚ä¢ (WidePullback.base fun x => f.hom) = WidePullback.lift (WidePullback.base fu ‚Ä¶
      simp only [WidePullback.lift_base]
      -- üéâ no goals
#align category_theory.arrow.augmented_cech_nerve.extra_degeneracy CategoryTheory.Arrow.AugmentedCechNerve.extraDegeneracy

end AugmentedCechNerve

end Arrow

end CategoryTheory

namespace SimplicialObject

namespace Augmented

namespace ExtraDegeneracy

open AlgebraicTopology CategoryTheory Limits

/-- If `C` is a preadditive category and `X` is an augmented simplicial object
in `C` that has an extra degeneracy, then the augmentation on the alternating
face map complex of `X` is a homotopy equivalence. -/
noncomputable def homotopyEquiv {C : Type*} [Category C] [Preadditive C] [HasZeroObject C]
    {X : SimplicialObject.Augmented C} (ed : ExtraDegeneracy X) :
    HomotopyEquiv (AlgebraicTopology.AlternatingFaceMapComplex.obj (drop.obj X))
      ((ChainComplex.single‚ÇÄ C).obj (point.obj X)) where
  hom := AlternatingFaceMapComplex.Œµ.app X
  inv := (ChainComplex.fromSingle‚ÇÄEquiv _ _).invFun ed.s'
  homotopyInvHomId := Homotopy.ofEq (ChainComplex.to_single‚ÇÄ_ext _ _ (ed.s'_comp_Œµ))
  homotopyHomInvId :=
    { hom := fun i j => by
        by_cases i + 1 = j
        -- ‚ä¢ HomologicalComplex.X (AlternatingFaceMapComplex.obj (drop.obj X)) i ‚ü∂ Homolo ‚Ä¶
        -- ‚ä¢ HomologicalComplex.X (AlternatingFaceMapComplex.obj (drop.obj X)) i ‚ü∂ Homolo ‚Ä¶
        ¬∑ exact (-ed.s i) ‚â´ eqToHom (by congr)
          -- üéâ no goals
        ¬∑ exact 0
          -- üéâ no goals
      zero := fun i j hij => by
        dsimp
        -- ‚ä¢ (if h : i + 1 = j then (-s ed i) ‚â´ eqToHom (_ : X.left.obj (op [i + 1]) = X. ‚Ä¶
        split_ifs with h
        -- ‚ä¢ (-s ed i) ‚â´ eqToHom (_ : X.left.obj (op [i + 1]) = X.left.obj (op [j])) = 0
        ¬∑ exfalso
          -- ‚ä¢ False
          exact hij h
          -- üéâ no goals
        ¬∑ simp only [eq_self_iff_true]
          -- üéâ no goals
      comm := fun i => by
        rcases i with _|i
        -- ‚ä¢ HomologicalComplex.Hom.f (NatTrans.app AlternatingFaceMapComplex.Œµ X ‚â´ Equiv ‚Ä¶
        ¬∑ rw [Homotopy.prevD_chainComplex, Homotopy.dNext_zero_chainComplex, zero_add]
          -- ‚ä¢ HomologicalComplex.Hom.f (NatTrans.app AlternatingFaceMapComplex.Œµ X ‚â´ Equiv ‚Ä¶
          dsimp [ChainComplex.fromSingle‚ÇÄEquiv, ChainComplex.toSingle‚ÇÄEquiv]
          -- ‚ä¢ HomologicalComplex.Hom.f (NatTrans.app AlternatingFaceMapComplex.Œµ X) 0 ‚â´ ed ‚Ä¶
          simp only [comp_id, ite_true, zero_add, ComplexShape.down_Rel, not_true,
            AlternatingFaceMapComplex.obj_d_eq, Preadditive.neg_comp]
          erw [Fin.sum_univ_two]
          -- ‚ä¢ HomologicalComplex.Hom.f (NatTrans.app AlternatingFaceMapComplex.Œµ X) 0 ‚â´ ed ‚Ä¶
          simp only [Fin.val_zero, pow_zero, one_smul, Fin.val_one, pow_one, neg_smul,
            Preadditive.comp_add, s_comp_Œ¥‚ÇÄ, drop_obj, Preadditive.comp_neg, neg_add_rev,
            neg_neg, neg_add_cancel_right, s‚ÇÄ_comp_Œ¥‚ÇÅ]
          rfl
          -- üéâ no goals
        ¬∑ rw [Homotopy.prevD_chainComplex, Homotopy.dNext_succ_chainComplex]
          -- ‚ä¢ HomologicalComplex.Hom.f (NatTrans.app AlternatingFaceMapComplex.Œµ X ‚â´ Equiv ‚Ä¶
          dsimp [ChainComplex.toSingle‚ÇÄEquiv, ChainComplex.fromSingle‚ÇÄEquiv]
          -- ‚ä¢ HomologicalComplex.Hom.f (NatTrans.app AlternatingFaceMapComplex.Œµ X) (Nat.s ‚Ä¶
          simp only [comp_zero, ComplexShape.down_Rel, not_true, Preadditive.neg_comp,
            AlternatingFaceMapComplex.obj_d_eq, comp_id, ite_true, Preadditive.comp_neg,
            @Fin.sum_univ_succ _ _ (i + 2), Fin.val_zero, pow_zero, one_smul, Fin.val_succ,
            Preadditive.comp_add, drop_obj, s_comp_Œ¥‚ÇÄ, Preadditive.sum_comp,
            Preadditive.zsmul_comp, Preadditive.comp_sum, Preadditive.comp_zsmul,
            zsmul_neg, ed.s_comp_Œ¥, pow_add, pow_one, mul_neg, mul_one, neg_zsmul, neg_neg,
            neg_add_cancel_comm_assoc, add_left_neg] }
#align simplicial_object.augmented.extra_degeneracy.homotopy_equiv SimplicialObject.Augmented.ExtraDegeneracy.homotopyEquiv

end ExtraDegeneracy

end Augmented

end SimplicialObject
