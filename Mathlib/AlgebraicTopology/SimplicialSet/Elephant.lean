/-
Copyright (c) 2025 Nick Ward. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Nick Ward
-/
import Mathlib.AlgebraicTopology.SimplicialSet.Basic
import Mathlib.Util.Superscript

import Mathlib.CategoryTheory.Category.ReflQuiv

open CategoryTheory Category Limits Functor Opposite Simplicial SimplexCategory

namespace SSet.Truncated

/-- Some quick attempts to prove that `[m]` is `n`-truncated (`m ‚â§ n`). -/
macro "trunc" : tactic =>
  `(tactic| first | decide | assumption | apply zero_le | apply le_rfl |
    simp only [SimplexCategory.len_mk]; omega)

/-- For `X : SSet.Truncated n` and `m ‚â§ n`, `X _[m]‚Çô` is the type of `m`-simplices in `X`. -/
scoped macro:1000 (priority := high)
  X:term " _[" m:term "]"n:subscript(term) : term =>
  `(($X : SSet.Truncated $(‚ü®n.raw[0]‚ü©)).obj (Opposite.op ‚ü®SimplexCategory.mk $m,
    by first | trunc | fail "Failed to prove SSet.Truncated property."‚ü©))

/-- For `X : SSet.Truncated n` and `p : m ‚â§ n`, `X _[m, p]‚Çô` is the type of `m`-simplices in `X`. -/
scoped macro:1000 (priority := high)
  X:term " _[" m:term "," p:term "]"n:subscript(term) : term =>
    `(($X : SSet.Truncated $(‚ü®n.raw[0]‚ü©)).obj
      (Opposite.op ‚ü®SimplexCategory.mk $m, $p‚ü©))

-- set_option quotPrecheck false
-- local macro:max (priority := high) "[" n:term "]‚ÇÇ" : term =>
--   `((‚ü®SimplexCategory.mk $n, by decide‚ü© : SimplexCategory.Truncated 2))


end SSet.Truncated

namespace SimplexCategory.Truncated
open CategoryTheory SimplexCategory

/-- The truncated form of the inclusion functor. -/
def incl {n m : ‚Ñï} (h : n ‚â§ m) : Truncated n ‚•§ Truncated m where
  obj a := ‚ü®a.1, a.2.trans h‚ü©
  map := id

lemma incl_comp_inclusion {n m : ‚Ñï} (h : n ‚â§ m) : incl h ‚ãô inclusion m = inclusion n := rfl

end SimplexCategory.Truncated

universe v u

namespace SimplicialObject.Truncated
open CategoryTheory SimplicialObject

variable (C : Type u) [Category.{v} C]

/-- The truncated form of the truncation functor. -/
def trunc {n m : ‚Ñï} (h : n ‚â§ m) : Truncated C m ‚•§ Truncated C n :=
  (whiskeringLeft _ _ _).obj (SimplexCategory.Truncated.incl h).op

lemma truncation_comp_trunc {n m : ‚Ñï} (h : n ‚â§ m) : truncation m ‚ãô trunc C h = truncation n := rfl

end SimplicialObject.Truncated

namespace SSet.Truncated
open CategoryTheory SimplexCategory Simplicial

/-- The truncated form of the truncation functor. -/
def trunc {n m : ‚Ñï} (h : n ‚â§ m) : Truncated m ‚•§ Truncated n :=
  SimplicialObject.Truncated.trunc (Type u) h

lemma truncation_comp_trunc {n m : ‚Ñï} (h : n ‚â§ m) : truncation m ‚ãô trunc h = truncation n := rfl

/-- A path of length `n` in a 1-truncated simplicial set is a directed path of `n` edges. -/
@[ext]
structure Path‚ÇÅ (X : Truncated.{u} 1) (n : ‚Ñï) where
  vertex (i : Fin (n + 1)) : X _[0]‚ÇÅ
  arrow (i : Fin n) : X _[1]‚ÇÅ
  arrow_src (i : Fin n) : X.map (Œ¥ 1).op (arrow i) = vertex i.castSucc
  arrow_tgt (i : Fin n) : X.map (Œ¥ 0).op (arrow i) = vertex i.succ

variable {n : ‚Ñï} (X : SSet.Truncated.{u} (n + 1))

/-- A path in any `n + 1`-truncated simplicial set `X` is defined by further 1-truncating `X`, then
taking the 1-truncated path. -/
abbrev Path : ‚Ñï ‚Üí Type u := trunc (by omega) |>.obj X |>.Path‚ÇÅ

/-- The spine of an `n + 1`-simplex in an `n + 1`-truncated simplicial set `X` is the path of edges
of length `n + 1` formed by traversing through its vertices in order. -/
@[simps]
def spine {m} (hmn : m ‚â§ n + 1) (Œî : X _[m]‚Çô‚Çä‚ÇÅ) : Path X m where
  vertex i := X.map (SimplexCategory.const [0] [m] i).op Œî
  arrow i := X.map (SimplexCategory.mkOfSucc i).op Œî
  arrow_src i := by
    erw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp (f := (Œ¥ 1).op.unop)]
    simp
  arrow_tgt i := by
    erw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp (f := (Œ¥ 0).op.unop)]
    simp

/-- An `n + 1`-truncated simplicial set satisfies the strict Segal condition if its
`n + 1`-simplices are uniquely determined by their spine. -/
class StrictSegal where
  spineToSimplex {m : ‚Ñï} (hmn : m ‚â§ n + 1) : Path X m ‚Üí X _[m]‚Çô‚Çä‚ÇÅ
  spine_spineToSimplex {m : ‚Ñï} (hmn : m ‚â§ n + 1) : X.spine hmn ‚àò spineToSimplex hmn = id
  spineToSimplex_spine {m : ‚Ñï} (hmn : m ‚â§ n + 1) : spineToSimplex hmn ‚àò X.spine hmn = id

end SSet.Truncated

namespace SSet
open Truncated CategoryTheory SimplexCategory Simplicial

variable (X : SSet.{u})

/-- A path in a simplicial set is defined by 1-truncating, then taking the
1-truncated path. -/
abbrev Path : ‚Ñï ‚Üí Type u := truncation 1 |>.obj X |>.Path‚ÇÅ

/-- The spine of an `n + 1` simplex in `X` is the path of edges of length
`n + 1` formed by traversing in order through the vertices of the `n + 1`
truncation. -/
abbrev spine {n : ‚Ñï} : X _[n + 1] ‚Üí X.Path (n + 1) :=
  truncation (n + 1) |>.obj X |>.spine (Nat.le_refl _)

/-- A simplicial set `X` satisfies the strict Segal condition if its simplices
are uniquely determined by their spine. -/
-- TODO: can we define this directly in terms of `Truncated.StrictSegal`?
class StrictSegal where
  spineToSimplex {n : ‚Ñï} : Path X (n + 1) ‚Üí X _[n + 1]
  spine_spineToSimplex {n : ‚Ñï} : X.spine (n := n) ‚àò spineToSimplex = id
  spineToSimplex_spine {n : ‚Ñï} : spineToSimplex ‚àò X.spine (n := n) = id

instance strictSegal_of_strictSegal
    [‚àÄ n : ‚Ñï, Truncated.StrictSegal ((truncation (n + 1)).obj X)] :
    StrictSegal X where
  spineToSimplex {n} :=
    Truncated.StrictSegal.spineToSimplex (X := (truncation (n + 1)).obj X) (Nat.le_refl _)
  spine_spineToSimplex {n} :=
    Truncated.StrictSegal.spine_spineToSimplex (Nat.le_refl _)
  spineToSimplex_spine {n} :=
    Truncated.StrictSegal.spineToSimplex_spine (Nat.le_refl _)

end SSet

namespace SSet.Truncated.StrictSegal

open SimplexCategory

variable {n} {X : SSet.Truncated.{u} (n + 1)} [StrictSegal X]

/-- The fields of `StrictSegal` define an equivalence between `X [m]‚Çô‚Çä‚ÇÅ` and `Path X m`.-/
def spineEquiv {m : ‚Ñï} (hmn : m ‚â§ n + 1) : X _[m]‚Çô‚Çä‚ÇÅ ‚âÉ Path X m where
  toFun := spine X hmn
  invFun := spineToSimplex hmn
  left_inv := by
    exact congrFun (spineToSimplex_spine (X := X) hmn)
  right_inv := by
    exact congrFun (spine_spineToSimplex (X := X) hmn)

theorem spineInjective {m : ‚Ñï} (hmn : m ‚â§ n + 1) : Function.Injective (spineEquiv (X := X) hmn) :=
  Equiv.injective _

@[simp]
theorem spineToSimplex_vertex {m : ‚Ñï} (hmn : m ‚â§ n + 1) (i : Fin (m + 1)) (f : Path X m) :
    X.map (const (SimplexCategory.mk 0) (SimplexCategory.mk m) i).op (spineToSimplex hmn f) =
      f.vertex i := by
  rw [‚Üê spine_vertex]
  congr
  exact (congrFun (spine_spineToSimplex (X := X) hmn) f)

  -- , spine_spineToSimplex]

@[simp]
theorem spineToSimplex_arrow {m : ‚Ñï} (hmn : m ‚â§ n + 1) (i : Fin m) (f : Path X m) :
    X.map (mkOfSucc i).op (spineToSimplex hmn f) = f.arrow i := by
  rw [‚Üê spine_arrow]
  congr
  exact congrFun (spine_spineToSimplex (X := X) hmn) f

/-- In the presence of the strict Segal condition, a path of length `n` can be "composed" by taking
the diagonal edge of the resulting `n`-simplex. -/
def spineToDiagonal {m : ‚Ñï} (hmn : m ‚â§ n + 1) (f : Path X m) : X _[1]‚Çô‚Çä‚ÇÅ :=
    X.map ((SimplexCategory.diag m).op) (spineToSimplex hmn f)

end SSet.Truncated.StrictSegal

namespace SSet.Truncated


/-- A 2-truncated simplicial set `S` has an underlying refl quiver with `S _[0]‚ÇÇ` as its underlying
type. -/
def OneTruncation‚ÇÇ (S : SSet.Truncated 2) := S _[0]‚ÇÇ

/-- Abbreviations for face maps in the 2-truncated simplex category. -/
abbrev Œ¥‚ÇÇ {n} (i : Fin (n + 2)) (hn := by decide) (hn' := by decide) :
    (‚ü®[n], hn‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[n + 1], hn'‚ü© := SimplexCategory.Œ¥ i

/-- Abbreviations for degeneracy maps in the 2-truncated simplex category. -/
abbrev œÉ‚ÇÇ {n} (i : Fin (n + 1)) (hn := by decide) (hn' := by decide) :
    (‚ü®[n+1], hn‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[n], hn'‚ü© := SimplexCategory.œÉ i

@[reassoc (attr := simp)]
lemma Œ¥‚ÇÇ_zero_comp_œÉ‚ÇÇ_zero : Œ¥‚ÇÇ (0 : Fin 2) ‚â´ œÉ‚ÇÇ 0 = ùüô _ := SimplexCategory.Œ¥_comp_œÉ_self

@[reassoc (attr := simp)]
lemma Œ¥‚ÇÇ_one_comp_œÉ‚ÇÇ_zero : Œ¥‚ÇÇ (1 : Fin 2) ‚â´ œÉ‚ÇÇ 0 = ùüô _ := SimplexCategory.Œ¥_comp_œÉ_succ

/-- The hom-types of the refl quiver underlying a simplicial set `S` are types of edges in `S _[1]‚ÇÇ`
together with source and target equalities. -/
@[ext]
structure OneTruncation‚ÇÇ.Hom {S : SSet.Truncated 2} (X Y : OneTruncation‚ÇÇ S) where
  /-- An arrow in `OneTruncation‚ÇÇ.Hom X Y` includes the data of a 1-simplex. -/
  edge : S _[1]‚ÇÇ
  /-- An arrow in `OneTruncation‚ÇÇ.Hom X Y` includes a source equality. -/
  src_eq : S.map (Œ¥‚ÇÇ 1).op edge = X
  /-- An arrow in `OneTruncation‚ÇÇ.Hom X Y` includes a target equality. -/
  tgt_eq : S.map (Œ¥‚ÇÇ 0).op edge = Y

/-- A 2-truncated simplicial set `S` has an underlying refl quiver `SSet.OneTruncation‚ÇÇ S`. -/
instance (S : SSet.Truncated 2) : ReflQuiver (OneTruncation‚ÇÇ S) where
  Hom X Y := OneTruncation‚ÇÇ.Hom X Y
  id X :=
    { edge := S.map (œÉ‚ÇÇ (n := 0) 0).op X
      src_eq := by
        simp only [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, Œ¥‚ÇÇ_one_comp_œÉ‚ÇÇ_zero,
          op_id, FunctorToTypes.map_id_apply]
      tgt_eq := by
        simp only [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, Œ¥‚ÇÇ_zero_comp_œÉ‚ÇÇ_zero,
          op_id, FunctorToTypes.map_id_apply] }

-- lemma OneTruncation‚ÇÇ.reflPrefunctor_map {S T : SSet.Truncated 2}
--     (F : OneTruncation‚ÇÇ S ‚•§rq OneTruncation‚ÇÇ T) {X Y : OneTruncation‚ÇÇ S} (f : Hom)

@[simp]
lemma OneTruncation‚ÇÇ.id_edge {S : SSet.Truncated 2} (X : OneTruncation‚ÇÇ S) :
    OneTruncation‚ÇÇ.Hom.edge (ùüôrq X) = S.map (œÉ‚ÇÇ 0).op X := rfl

/-- The functor that carries a 2-truncated simplicial set to its underlying refl quiver. -/
@[simps]
def oneTruncation‚ÇÇ : SSet.Truncated.{u} 2 ‚•§ ReflQuiv.{u, u} where
  obj S := ReflQuiv.of (OneTruncation‚ÇÇ S)
  map {S T} F := {
    obj := F.app (op ‚ü®SimplexCategory.mk 0, by decide‚ü©)
    map := fun f ‚Ü¶
      { edge := F.app _ f.edge
        src_eq := by rw [‚Üê FunctorToTypes.naturality, f.src_eq]
        tgt_eq := by rw [‚Üê FunctorToTypes.naturality, f.tgt_eq] }
    map_id := fun X ‚Ü¶ OneTruncation‚ÇÇ.Hom.ext (by
      dsimp
      rw [‚Üê FunctorToTypes.naturality]) }

@[ext]
lemma OneTruncation‚ÇÇ.hom_ext {S : SSet.Truncated 2} {x y : OneTruncation‚ÇÇ S} {f g : x ‚ü∂ y} :
    f.edge = g.edge ‚Üí f = g := OneTruncation‚ÇÇ.Hom.ext

/-- The map that picks up the initial vertex of a 2-simplex, as a morphism in the 2-truncated
simplex category. -/
def Œπ0‚ÇÇ : (‚ü®SimplexCategory.mk 0, by decide‚ü© : SimplexCategory.Truncated 2) ‚ü∂
    ‚ü®SimplexCategory.mk 2, by decide‚ü© := Œ¥‚ÇÇ (n := 0) 1 ‚â´ Œ¥‚ÇÇ (n := 1) 1

/-- The map that picks up the middle vertex of a 2-simplex, as a morphism in the 2-truncated
simplex category. -/
def Œπ1‚ÇÇ : (‚ü®SimplexCategory.mk 0, by decide‚ü© : SimplexCategory.Truncated 2) ‚ü∂
    ‚ü®SimplexCategory.mk 2, by decide‚ü© := Œ¥‚ÇÇ (n := 0) 0 ‚â´ Œ¥‚ÇÇ (n := 1) 2

/-- The map that picks up the final vertex of a 2-simplex, as a morphism in the 2-truncated
simplex category. -/
def Œπ2‚ÇÇ : (‚ü®SimplexCategory.mk 0, by decide‚ü© : SimplexCategory.Truncated 2) ‚ü∂
    ‚ü®SimplexCategory.mk 2, by decide‚ü© := Œ¥‚ÇÇ (n := 0) 0 ‚â´ Œ¥‚ÇÇ (n := 1) 1

/-- The initial vertex of a 2-simplex in a 2-truncated simplicial set. -/
def ev0‚ÇÇ {V : SSet.Truncated 2} (œÜ : V _[2]‚ÇÇ) : OneTruncation‚ÇÇ V := V.map Œπ0‚ÇÇ.op œÜ

/-- The middle vertex of a 2-simplex in a 2-truncated simplicial set. -/
def ev1‚ÇÇ {V : SSet.Truncated 2} (œÜ : V _[2]‚ÇÇ) : OneTruncation‚ÇÇ V := V.map Œπ1‚ÇÇ.op œÜ

/-- The final vertex of a 2-simplex in a 2-truncated simplicial set. -/
def ev2‚ÇÇ {V : SSet.Truncated 2} (œÜ : V _[2]‚ÇÇ) : OneTruncation‚ÇÇ V := V.map Œπ2‚ÇÇ.op œÜ

/-- The 0th face of a 2-simplex, as a morphism in the 2-truncated simplex category. -/
def Œ¥0‚ÇÇ : (‚ü®SimplexCategory.mk 1, by decide‚ü© : SimplexCategory.Truncated 2) ‚ü∂
    ‚ü®SimplexCategory.mk 2, by decide‚ü© := Œ¥‚ÇÇ (n := 1) 0

/-- The 1st face of a 2-simplex, as a morphism in the 2-truncated simplex category. -/
def Œ¥1‚ÇÇ : (‚ü®SimplexCategory.mk 1, by decide‚ü© : SimplexCategory.Truncated 2) ‚ü∂
    ‚ü®SimplexCategory.mk 2, by decide‚ü© := Œ¥‚ÇÇ (n := 1) 1

/-- The 2nd face of a 2-simplex, as a morphism in the 2-truncated simplex category. -/
def Œ¥2‚ÇÇ : (‚ü®SimplexCategory.mk 1, by decide‚ü© : SimplexCategory.Truncated 2) ‚ü∂
    ‚ü®SimplexCategory.mk 2, by decide‚ü© := Œ¥‚ÇÇ (n := 1) 2

private lemma map_map_of_eq.{w}  {C : Type u} [Category.{v} C] (V : C·µí·µñ ‚•§ Type w) {X Y Z : C}
    {Œ± : X ‚ü∂ Y} {Œ≤ : Y ‚ü∂ Z} {Œ≥ : X ‚ü∂ Z} {œÜ} :
    Œ± ‚â´ Œ≤ = Œ≥ ‚Üí V.map Œ±.op (V.map Œ≤.op œÜ) = V.map Œ≥.op œÜ := by
  rintro rfl
  change (V.map _ ‚â´ V.map _) _ = _
  rw [‚Üê map_comp]; rfl

/-- The arrow in the ReflQuiver `OneTruncation‚ÇÇ V` of a 2-truncated simplicial set arising from the
0th face of a 2-simplex. -/
def ev12‚ÇÇ {V : SSet.Truncated 2} (œÜ : V _[2]‚ÇÇ) : ev1‚ÇÇ œÜ ‚ü∂ ev2‚ÇÇ œÜ :=
  ‚ü®V.map Œ¥0‚ÇÇ.op œÜ,
    map_map_of_eq V (SimplexCategory.Œ¥_comp_Œ¥ (i := 0) (j := 1) (by decide)).symm,
    map_map_of_eq V rfl‚ü©

/-- The arrow in the ReflQuiver `OneTruncation‚ÇÇ V` of a 2-truncated simplicial set arising from the
1st face of a 2-simplex. -/
def ev02‚ÇÇ {V : SSet.Truncated 2} (œÜ : V _[2]‚ÇÇ) : ev0‚ÇÇ œÜ ‚ü∂ ev2‚ÇÇ œÜ :=
  ‚ü®V.map Œ¥1‚ÇÇ.op œÜ, map_map_of_eq V rfl, map_map_of_eq V rfl‚ü©

/-- The arrow in the ReflQuiver `OneTruncation‚ÇÇ V` of a 2-truncated simplicial set arising from the
2nd face of a 2-simplex. -/
def ev01‚ÇÇ {V : SSet.Truncated 2} (œÜ : V _[2]‚ÇÇ) : ev0‚ÇÇ œÜ ‚ü∂ ev1‚ÇÇ œÜ :=
  ‚ü®V.map Œ¥2‚ÇÇ.op œÜ, map_map_of_eq V (SimplexCategory.Œ¥_comp_Œ¥ (j := 1) le_rfl), map_map_of_eq V rfl‚ü©

/-- A refl prefunctor between the underlying refl quivers of a 2-truncated simplicial sets induces a
map on paths. -/
def reflPrefunctorPathMap {X Y : SSet.Truncated.{u} 2} (F : OneTruncation‚ÇÇ X ‚•§rq OneTruncation‚ÇÇ Y)
    {n : ‚Ñï} (œÉ : Path X n) : Path Y n where
      vertex i := F.obj (œÉ.vertex i)
      arrow i := (F.map ‚ü®œÉ.arrow i, œÉ.arrow_src i, œÉ.arrow_tgt i‚ü©).edge
      arrow_src i := (F.map ‚ü®œÉ.arrow i, œÉ.arrow_src i, œÉ.arrow_tgt i‚ü©).src_eq
      arrow_tgt i := (F.map ‚ü®œÉ.arrow i, œÉ.arrow_src i, œÉ.arrow_tgt i‚ü©).tgt_eq

/-- The components of a map of 2-truncated simplicial sets built from a map on underlying reflexive
quivers, under the assumption that the codomain is `StrictSegal`. -/
def toStrictSegal‚ÇÇ.mk.app {X Y : SSet.Truncated 2} [StrictSegal Y]
    (F : OneTruncation‚ÇÇ X ‚•§rq OneTruncation‚ÇÇ Y)
    (n : SimplexCategory.Truncated 2) : X.obj (op n) ‚ü∂ Y.obj (op n) := by
  obtain ‚ü®n, hn‚ü© := n
  induction' n using SimplexCategory.rec with n
  match n with
  | 0 => exact fun x => F.obj x
  | 1 => exact fun f => (F.map ‚ü®f, rfl, rfl‚ü©).edge
  | 2 => exact fun œÜ =>
          StrictSegal.spineToSimplex (X := Y) (Nat.le_refl _)
            (reflPrefunctorPathMap F (X.spine (Nat.le_refl _) œÜ))

@[simp] theorem toStrictSegal‚ÇÇ.mk.app_zero {X Y : SSet.Truncated 2} [StrictSegal Y]
    (F : OneTruncation‚ÇÇ X ‚•§rq OneTruncation‚ÇÇ Y) (x : X _[0]‚ÇÇ) :
    mk.app F ‚ü®SimplexCategory.mk 0, by decide‚ü© x = F.obj x := rfl

@[simp] theorem toStrictSegal‚ÇÇ.mk.app_one {X Y : SSet.Truncated 2} [StrictSegal Y]
    (F : OneTruncation‚ÇÇ X ‚•§rq OneTruncation‚ÇÇ Y) (f : X _[1]‚ÇÇ) :
    mk.app F ‚ü®SimplexCategory.mk 1, by decide‚ü© f = (F.map ‚ü®f, rfl, rfl‚ü©).edge := rfl

@[simp] theorem toStrictSegal‚ÇÇ.mk.app_two {X Y : SSet.Truncated 2} [StrictSegal Y]
    (F : OneTruncation‚ÇÇ X ‚•§rq OneTruncation‚ÇÇ Y) (œÜ : X _[2]‚ÇÇ) :
    mk.app F ‚ü®SimplexCategory.mk 2, by decide‚ü© œÜ =
      StrictSegal.spineToSimplex
        (Nat.le_refl _) (reflPrefunctorPathMap F (X.spine (Nat.le_refl _) œÜ)) := rfl

/-- A map of 2-truncated simplicial sets built from a map on underlying reflexive quivers, under
the assumption that the codomain is `StrictSegal`. -/
@[simps!]
def toStrictSegal‚ÇÇ.mk {X Y : SSet.Truncated 2} [StrictSegal Y]
    (F : OneTruncation‚ÇÇ X ‚•§rq OneTruncation‚ÇÇ Y)
    (hyp : (œÜ : X _[2]‚ÇÇ) ‚Üí (F.map (ev02‚ÇÇ œÜ)).edge =
      StrictSegal.spineToDiagonal
        (Nat.le_refl _) (reflPrefunctorPathMap F (X.spine (Nat.le_refl _) œÜ))) : X ‚ü∂ Y where
  app := fun n => toStrictSegal‚ÇÇ.mk.app F n.unop
  naturality := by
    rintro ‚ü®‚ü®m, hm‚ü©‚ü© ‚ü®‚ü®n, hn‚ü©‚ü© ‚ü®Œ± : (‚ü®n, hn‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®m, hm‚ü©‚ü©
    rw [show Opposite.op Œ± = Œ±.op by rfl]
    induction' m using SimplexCategory.rec with m
    induction' n using SimplexCategory.rec with n
    dsimp at Œ± ‚ä¢
    let OK {n m hn hm} (f : (‚ü®[n], hn‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[m], hm‚ü©) :=
      X.map f.op ‚â´ mk.app F ‚ü®[n], hn‚ü© = mk.app F ‚ü®[m], hm‚ü© ‚â´ Y.map f.op
    show OK Œ±
    have fac : ‚àÄ {n m hn hm} {Œ± : (‚ü®[n], hn‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[m], hm‚ü©} k hk
      {Œ≤ : (‚ü®[n], hn‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[k], hk‚ü©}
      {Œ≥ : (‚ü®[k], hk‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[m], hm‚ü©},
      Œ± = Œ≤ ‚â´ Œ≥ ‚Üí OK Œ≤ ‚Üí OK Œ≥ ‚Üí OK Œ± := by
        rintro _ _ _ _ _ k hk Œ≤ Œ≥ rfl h1 h2
        dsimp only [OK] at h1 h2 ‚ä¢
        rw [op_comp, map_comp, map_comp, assoc, h1, ‚Üê assoc, h2, assoc]
    have const10 (Œ± : (‚ü®[1], by decide‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[0], by decide‚ü©) :
        OK Œ± := by
      ext x
      cases SimplexCategory.eq_const_to_zero Œ±
      have lem : [1].const [0] 0 = œÉ‚ÇÇ (n := 0) 0 := by ext i; match i with | 0 | 1 => rfl
      rw [lem]
      simp only [types_comp_apply, mk.app_zero]
      rw [‚Üê OneTruncation‚ÇÇ.id_edge, ‚Üê OneTruncation‚ÇÇ.id_edge]
      have := congrArg (fun f => f.edge) (ReflPrefunctor.map_id F x)
      rw [‚Üê ReflPrefunctor.map_id]
      simp only [mk.app_one]
      congr 1
      ¬∑ simp only [OneTruncation‚ÇÇ.id_edge]
        refine congrArg F.obj ?_
        refine congr_fun (?_ : X.map _ ‚â´ X.map _ = ùüô _) x
        rw [‚Üê map_comp, ‚Üê op_comp, Œ¥‚ÇÇ_one_comp_œÉ‚ÇÇ_zero, op_id, CategoryTheory.Functor.map_id]
      ¬∑ simp only [OneTruncation‚ÇÇ.id_edge]
        refine congrArg F.obj ?_
        refine congr_fun (?_ : X.map _ ‚â´ X.map _ = ùüô _) x
        rw [‚Üê map_comp, ‚Üê op_comp, Œ¥‚ÇÇ_zero_comp_œÉ‚ÇÇ_zero, op_id, CategoryTheory.Functor.map_id]
      ¬∑ have : ‚àÄ f a b (h1 : X.map (Œ¥‚ÇÇ 1).op f = a) (h2 : X.map (Œ¥‚ÇÇ 0).op f = b), x = a ‚Üí x = b ‚Üí
          f = X.map (œÉ‚ÇÇ (n := 0) 0).op x ‚Üí
          HEq (F.map ‚ü®f, h1, h2‚ü©) (F.map (ReflQuiver.id (obj := OneTruncation‚ÇÇ X) x)) := by
            rintro _ _ _ h1 h2 rfl rfl rfl
            refine congr_arg_heq F.map ?_
            apply OneTruncation‚ÇÇ.hom_ext
            simp only [len_mk, id_eq, Nat.reduceAdd, Fin.isValue]
            rw [‚Üê OneTruncation‚ÇÇ.id_edge]
        apply this
        ¬∑ simp only [SimplexCategory.len_mk]
          refine congr_fun (?_ : X.map _ ‚â´ X.map _ = ùüô _).symm x
          rw [‚Üê map_comp, ‚Üê op_comp, Œ¥‚ÇÇ_one_comp_œÉ‚ÇÇ_zero, op_id, CategoryTheory.Functor.map_id]
        ¬∑ simp only [SimplexCategory.len_mk]
          refine congr_fun (?_ : X.map _ ‚â´ X.map _ = ùüô _).symm x
          rw [‚Üê map_comp, ‚Üê op_comp, Œ¥‚ÇÇ_zero_comp_œÉ‚ÇÇ_zero, op_id, CategoryTheory.Functor.map_id]
        ¬∑ simp
    have const01 (Œ± : (‚ü®[0], by decide‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[1], by decide‚ü©) :
        OK Œ± := by
      ext f
      obtain ‚ü®i : Fin 2, rfl‚ü© := exists_eq_const_of_zero Œ±
      match i with
      | 0 =>
        have lem : [0].const [1] 0 = Œ¥‚ÇÇ 1 := by ext i; match i with | 0 => rfl
        rw [lem]
        simp only [id_eq, types_comp_apply, mk.app_zero, mk.app_one]
        rw [OneTruncation‚ÇÇ.Hom.src_eq]
      | 1 =>
        have lem : [0].const [1] 1 = Œ¥‚ÇÇ 0 := by ext i; match i with | 0 => rfl
        rw [lem]
        simp only [id_eq, types_comp_apply, mk.app_zero, mk.app_one]
        rw [OneTruncation‚ÇÇ.Hom.tgt_eq]
    have const02 (Œ± : (‚ü®[0], by decide‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[2], by decide‚ü©) :
        OK Œ± := by
      ext œÜ
      obtain ‚ü®i : Fin 3, rfl‚ü© := exists_eq_const_of_zero Œ±
      match i with
      | 0 =>
        have lem : [0].const [2] 0 = Œπ0‚ÇÇ := by ext i; match i with | 0 => rfl
        rw [lem]
        dsimp only [id_eq, types_comp_apply, mk.app_zero]
        simp only [mk.app_two]
        sorry
      | 1 =>
        have lem :  [0].const [2] 1 = Œπ1‚ÇÇ := by ext i; match i with | 0 => rfl
        rw [lem]
        sorry
      | 2 =>
        have lem :  [0].const [2] 2 = Œπ2‚ÇÇ := by ext i; match i with | 0 => rfl
        rw [lem]
        sorry
    have nat1m {m hm} (Œ± : (‚ü®[1], by decide‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[m], hm‚ü©) :
        OK Œ± := by
      match m with
      | 0 => apply const10
      | 1 =>
        match Œ±, eq_of_one_to_one Œ± with
        | _, .inr rfl =>
          dsimp [OK]
          rw [(_ : X.map _ = id), (_ : Prefunctor.map _ _ = id)]; rfl
          all_goals sorry
        | _, .inl ‚ü®i, rfl‚ü© =>
          exact fac 0 (by decide) (const_fac_thru_zero ..) (const10 ..) (const01 ..)
      | 2 =>
        match Œ±, eq_of_one_to_two Œ± with
        | _, .inl rfl =>
          ext x
          sorry
        | _, .inr (.inl rfl) =>
          ext x
          sorry
        | _, .inr (.inr (.inl rfl)) =>
          ext x
          sorry
        | _, .inr (.inr (.inr ‚ü®i, rfl‚ü©)) =>
          exact fac 0 (by decide) (const_fac_thru_zero ..) (const10 ..) (const02 ..)
    have nat2m (Œ± : (‚ü®[2], by decide‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[m], hm‚ü©) :
        OK Œ± := by
      dsimp [OK]
      sorry
      -- apply (cancel_mono (nerve‚ÇÇ.seagull _)).1
      -- simp [nerve‚ÇÇ.seagull]
      -- congr 1 <;> rw [‚Üê map_comp, ‚Üê op_comp, ‚Üê nat1m, ‚Üê nat1m, op_comp, map_comp, assoc]
    match n with
      | 0 =>
        match m with
        | 0 =>
          ext x
          simp [SimplexCategory.rec]
          cases SimplexCategory.hom_zero_zero Œ±
          show F.obj (X.map (ùüô _).op x) = Y.map (ùüô _).op (F.obj x)
          simp [Functor.map_id]
        | 1 => apply const01
        | 2 => apply const02
      | 1 => apply nat1m
      | 2 => apply nat2m

end SSet.Truncated
