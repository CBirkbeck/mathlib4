/-
Copyright (c) 2024 Emily Riehl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Emily Riehl
-/
import Mathlib.AlgebraicTopology.SimplicialSet.HomotopyCat

/-!
# 2-truncated Strict Segal simplicial sets

This collects some API which will ultimately be deployed elsewhere
-/

universe v u

namespace SSet

namespace Truncated

open CategoryTheory Category Functor Simplicial SimplexCategory Opposite

local macro:1000 (priority := high) X:term " _[" n:term "]‚ÇÇ" : term =>
    `(($X : SSet.Truncated 2).obj (Opposite.op ‚ü®SimplexCategory.mk $n, by decide‚ü©))

set_option quotPrecheck false
local macro:max (priority := high) "[" n:term "]‚ÇÇ" : term =>
  `((‚ü®SimplexCategory.mk $n, by decide‚ü© : SimplexCategory.Truncated 2))

section

variable (X : SSet.Truncated.{u} 2)

/-- A path in a 2-truncated simplicial set `X` of length `n` is a directed path of `n` edges.-/
@[ext]
structure Path‚ÇÇ (n : ‚Ñï) where
  /-- A path includes the data of `n+1` 0-simplices in `X`.-/
  vertex (i : Fin (n + 1)) : X _[0]‚ÇÇ
  /-- A path includes the data of `n` 1-simplices in `X`.-/
  arrow (i : Fin n) : X _[1]‚ÇÇ
  /-- The sources of the 1-simplices in a path are identified with appropriate 0-simplices.-/
  arrow_src (i : Fin n) : X.map (Œ¥‚ÇÇ 1).op (arrow i) = vertex i.castSucc
  /-- The targets of the 1-simplices in a path are identified with appropriate 0-simplices.-/
  arrow_tgt (i : Fin n) : X.map (Œ¥‚ÇÇ 0).op (arrow i) = vertex i.succ

/-- The spine of an `2`-simplex in `X` is the path of edges of length `2` formed by
traversing through its vertices in order.-/
@[simps]
def spine‚ÇÇ
    (Œî : X _[2]‚ÇÇ) : X.Path‚ÇÇ 2 where
  vertex i := X.map (SimplexCategory.const [0] [2] i).op Œî
  arrow i := X.map (SimplexCategory.mkOfSucc i).op Œî
  arrow_src i := by
    unfold Œ¥‚ÇÇ
    dsimp [SimplicialObject.Œ¥]
    simp only [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp]
    have : ((mkOfSucc i).op ‚â´ (Œ¥ 1).op) = ([0].const [2] i.castSucc).op := by
      simp [‚Üê op_comp, SimplexCategory.Œ¥_one_mkOfSucc]
    exact congrFun (congrArg X.map this) Œî
  arrow_tgt i := by
    unfold Œ¥‚ÇÇ
    dsimp [SimplicialObject.Œ¥]
    simp only [‚Üê FunctorToTypes.map_comp_apply]
    have : (mkOfSucc i).op ‚â´ (Œ¥ 0).op = ([0].const [2] i.succ).op := by
      rw [‚Üê op_comp, SimplexCategory.Œ¥_zero_mkOfSucc]
    exact congrFun (congrArg X.map this) Œî

/-- A 2-truncated simplicial set `X` satisfies the strict Segal condition if its 2-simplices are
uniquely determined by their spine. -/
class StrictSegal‚ÇÇ where
  /-- The inverse to `X.spine‚ÇÇ`.-/
  spineToSimplex‚ÇÇ : Path‚ÇÇ X 2 ‚Üí X _[2]‚ÇÇ
  /-- `spineToSimplex` is a right inverse to `X.spine n`.-/
  spine‚ÇÇ_spineToSimplex‚ÇÇ (f : Path‚ÇÇ X 2) : X.spine‚ÇÇ (spineToSimplex‚ÇÇ f) = f
  /-- `spineToSimplex` is a left inverse to `X.spine n`.-/
  spineToSimplex‚ÇÇ_spine‚ÇÇ (Œî : X _[2]‚ÇÇ) : spineToSimplex‚ÇÇ (X.spine‚ÇÇ Œî) = Œî

namespace StrictSegal‚ÇÇ
variable {X : SSet.Truncated.{u} 2} [StrictSegal‚ÇÇ X]

/-- The fields of `StrictSegal` define an equivalence between `X _[n]` and `Path X n`.-/
def spineEquiv‚ÇÇ : X _[2]‚ÇÇ ‚âÉ Path‚ÇÇ X 2 where
  toFun := spine‚ÇÇ X
  invFun := spineToSimplex‚ÇÇ
  left_inv := spineToSimplex‚ÇÇ_spine‚ÇÇ
  right_inv := spine‚ÇÇ_spineToSimplex‚ÇÇ

theorem spineInjective‚ÇÇ : Function.Injective (spineEquiv‚ÇÇ (X := X)) := Equiv.injective _

@[simp]
theorem spineToSimplex‚ÇÇ_vertex (i : Fin 3) (f : Path‚ÇÇ X 2) :
    X.map (const [0] [2] i).op (spineToSimplex‚ÇÇ f) = f.vertex i := by
  rw [‚Üê spine‚ÇÇ_vertex, spine‚ÇÇ_spineToSimplex‚ÇÇ]

@[simp]
theorem spineToSimplex‚ÇÇ_arrow (i : Fin 2) (f : Path‚ÇÇ X 2) :
    X.map (mkOfSucc i).op (spineToSimplex‚ÇÇ f) = f.arrow i := by
  rw [‚Üê spine‚ÇÇ_arrow, spine‚ÇÇ_spineToSimplex‚ÇÇ]

/-- In the presence of the strict Segal condition, a path of length `n` can be "composed" by taking
the diagonal edge of the resulting `n`-simplex. -/
def spineToDiagonal‚ÇÇ (f : Path‚ÇÇ X 2) : X _[1]‚ÇÇ :=
    X.map ((SimplexCategory.diag 2).op) (spineToSimplex‚ÇÇ f)

end StrictSegal‚ÇÇ

end

/-- A refl prefunctor between the underlying refl quivers of a 2-truncated simplicial sets induces a
map on paths. -/
def reflPrefunctorPathMap {X Y : SSet.Truncated.{u} 2} (F : OneTruncation‚ÇÇ X ‚•§rq OneTruncation‚ÇÇ Y)
    {n : ‚Ñï} (œÉ : Path‚ÇÇ X n) : Path‚ÇÇ Y n where
      vertex i := F.obj (œÉ.vertex i)
      arrow i := (F.map ‚ü®œÉ.arrow i, œÉ.arrow_src i, œÉ.arrow_tgt i‚ü©).edge
      arrow_src i := (F.map ‚ü®œÉ.arrow i, œÉ.arrow_src i, œÉ.arrow_tgt i‚ü©).src_eq
      arrow_tgt i := (F.map ‚ü®œÉ.arrow i, œÉ.arrow_src i, œÉ.arrow_tgt i‚ü©).tgt_eq

/-- The components of a map of 2-truncated simplicial sets built from a map on underlying reflexive
quivers, under the assumption that the codomain is `StrictSegal`. -/
def toStrictSegal‚ÇÇ.mk.app {X Y : SSet.Truncated 2} [StrictSegal‚ÇÇ Y]
    (F : OneTruncation‚ÇÇ X ‚•§rq OneTruncation‚ÇÇ Y)
    (n : SimplexCategory.Truncated 2) : X.obj (op n) ‚ü∂ Y.obj (op n) := by
  obtain ‚ü®n, hn‚ü© := n
  induction' n using SimplexCategory.rec with n
  match n with
  | 0 => exact fun x => F.obj x
  | 1 => exact fun f => (F.map ‚ü®f, rfl, rfl‚ü©).edge
  | 2 => exact fun œÜ => StrictSegal‚ÇÇ.spineToSimplex‚ÇÇ (reflPrefunctorPathMap F (X.spine‚ÇÇ œÜ))

@[simp] theorem toStrictSegal‚ÇÇ.mk.app_zero {X Y : SSet.Truncated 2} [StrictSegal‚ÇÇ Y]
    (F : OneTruncation‚ÇÇ X ‚•§rq OneTruncation‚ÇÇ Y) (x : X _[0]‚ÇÇ) :
    mk.app F [0]‚ÇÇ x = F.obj x := rfl

@[simp] theorem toStrictSegal‚ÇÇ.mk.app_one {X Y : SSet.Truncated 2} [StrictSegal‚ÇÇ Y]
    (F : OneTruncation‚ÇÇ X ‚•§rq OneTruncation‚ÇÇ Y) (f : X _[1]‚ÇÇ) :
    mk.app F [1]‚ÇÇ f = (F.map ‚ü®f, rfl, rfl‚ü©).edge := rfl

@[simp] theorem toStrictSegal‚ÇÇ.mk.app_two {X Y : SSet.Truncated 2} [StrictSegal‚ÇÇ Y]
    (F : OneTruncation‚ÇÇ X ‚•§rq OneTruncation‚ÇÇ Y) (œÜ : X _[2]‚ÇÇ) :
    mk.app F [2]‚ÇÇ œÜ = StrictSegal‚ÇÇ.spineToSimplex‚ÇÇ (reflPrefunctorPathMap F (X.spine‚ÇÇ œÜ)) := rfl

@[simps!]
def toStrictSegal‚ÇÇ.mk {X Y : SSet.Truncated 2} [StrictSegal‚ÇÇ Y]
    (F : OneTruncation‚ÇÇ X ‚•§rq OneTruncation‚ÇÇ Y)
    (hyp : (œÜ : X _[2]‚ÇÇ) ‚Üí (F.map (ev02‚ÇÇ œÜ)).edge =
      StrictSegal‚ÇÇ.spineToDiagonal‚ÇÇ (reflPrefunctorPathMap F (spine‚ÇÇ X œÜ))) : X ‚ü∂ Y where
  app := fun n => toStrictSegal‚ÇÇ.mk.app F n.unop
  naturality := by
    rintro ‚ü®‚ü®m, hm‚ü©‚ü© ‚ü®‚ü®n, hn‚ü©‚ü© ‚ü®Œ± : (‚ü®n, hn‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®m, hm‚ü©‚ü©
    rw [show Opposite.op Œ± = Œ±.op by rfl]
    induction' m using SimplexCategory.rec with m
    induction' n using SimplexCategory.rec with n
    dsimp at Œ± ‚ä¢
    let OK {n m hn hm} (f : (‚ü®[n], hn‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[m], hm‚ü©) :=
      X.map f.op ‚â´ mk.app F ‚ü®[n], hn‚ü© = mk.app F ‚ü®[m], hm‚ü© ‚â´ Y.map f.op
    show OK Œ±
    have fac : ‚àÄ {n m hn hm} {Œ± : (‚ü®[n], hn‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[m], hm‚ü©} k hk
      {Œ≤ : (‚ü®[n], hn‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[k], hk‚ü©}
      {Œ≥ : (‚ü®[k], hk‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[m], hm‚ü©},
      Œ± = Œ≤ ‚â´ Œ≥ ‚Üí OK Œ≤ ‚Üí OK Œ≥ ‚Üí OK Œ± := by
        rintro _ _ _ _ _ k hk Œ≤ Œ≥ rfl h1 h2
        dsimp only [OK] at h1 h2 ‚ä¢
        rw [op_comp, map_comp, map_comp, assoc, h1, ‚Üê assoc, h2, assoc]
    have const10 (Œ± : [1]‚ÇÇ ‚ü∂ [0]‚ÇÇ) : OK Œ± := by
      ext x
      cases SimplexCategory.eq_const_to_zero Œ±
      dsimp
      sorry
    have const01 (Œ± : [0]‚ÇÇ ‚ü∂ [1]‚ÇÇ) : OK Œ± := by
      ext x
      sorry
    have const02 (Œ± : [0]‚ÇÇ ‚ü∂ [2]‚ÇÇ) : OK Œ± := by
      ext x
      sorry
    have nat1m {m hm} (Œ± : [1]‚ÇÇ ‚ü∂ ‚ü®[m], hm‚ü©) : OK Œ± := by
      match m with
      | 0 => apply const10
      | 1 =>
        match Œ±, eq_of_one_to_one Œ± with
        | _, .inr rfl =>
          dsimp [OK]
          rw [(_ : X.map _ = id), (_ : Prefunctor.map _ _ = id)]; rfl
          all_goals sorry
        | _, .inl ‚ü®i, rfl‚ü© =>
          exact fac 0 (by decide) (const_fac_thru_zero ..) (const10 ..) (const01 ..)
      | 2 =>
        match Œ±, eq_of_one_to_two Œ± with
        | _, .inl rfl =>
          ext x
          sorry
        | _, .inr (.inl rfl) =>
          ext x
          sorry
        | _, .inr (.inr (.inl rfl)) =>
          ext x
          sorry
        | _, .inr (.inr (.inr ‚ü®i, rfl‚ü©)) =>
          exact fac 0 (by decide) (const_fac_thru_zero ..) (const10 ..) (const02 ..)
    have nat2m (Œ± : [2]‚ÇÇ ‚ü∂ ‚ü®[m], hm‚ü©) : OK Œ± := by
      dsimp [OK]
      sorry
      -- apply (cancel_mono (nerve‚ÇÇ.seagull _)).1
      -- simp [nerve‚ÇÇ.seagull]
      -- congr 1 <;> rw [‚Üê map_comp, ‚Üê op_comp, ‚Üê nat1m, ‚Üê nat1m, op_comp, map_comp, assoc]
    match n with
      | 0 =>
        match m with
        | 0 =>
          ext x
          simp [SimplexCategory.rec]
          cases SimplexCategory.hom_zero_zero Œ±
          show F.obj (X.map (ùüô [0]‚ÇÇ).op x) = Y.map (ùüô [0]‚ÇÇ).op (F.obj x)
          simp [Functor.map_id]
        | 1 => apply const01
        | 2 => apply const02
      | 1 => apply nat1m
      | 2 => apply nat2m

end Truncated

end SSet
