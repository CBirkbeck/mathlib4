/-
Copyright (c) 2022 Praneeth Kolichala. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Praneeth Kolichala
-/
import Mathlib.CategoryTheory.Groupoid
import Mathlib.AlgebraicTopology.FundamentalGroupoid.Basic
import Mathlib.Topology.Category.TopCat.Limits.Products
import Mathlib.Topology.Homotopy.Product

#align_import algebraic_topology.fundamental_groupoid.product from "leanprover-community/mathlib"@"178a32653e369dce2da68dc6b2694e385d484ef1"

/-!
# Fundamental groupoid preserves products
In this file, we give the following definitions/theorems:

  - `FundamentalGroupoidFunctor.piIso` An isomorphism between Œ† i, (œÄ X·µ¢) and œÄ (Œ†i, X·µ¢), whose
    inverse is precisely the product of the maps œÄ (Œ† i, X·µ¢) ‚Üí œÄ (X·µ¢), each induced by
    the projection in `Top` Œ† i, X·µ¢ ‚Üí X·µ¢.

  - `FundamentalGroupoidFunctor.prodIso` An isomorphism between œÄX √ó œÄY and œÄ (X √ó Y), whose
    inverse is precisely the product of the maps œÄ (X √ó Y) ‚Üí œÄX and œÄ (X √ó Y) ‚Üí Y, each induced by
    the projections X √ó Y ‚Üí X and X √ó Y ‚Üí Y

  - `FundamentalGroupoidFunctor.preservesProduct` A proof that the fundamental groupoid functor
    preserves all products.
-/

-- Porting note: Plenty declarations in this file already used uppercase in mathlib 3 names
set_option linter.uppercaseLean3 false

noncomputable section

open scoped FundamentalGroupoid CategoryTheory

namespace FundamentalGroupoidFunctor

universe u

section Pi

variable {I : Type u} (X : I ‚Üí TopCat.{u})

/-- The projection map Œ† i, X i ‚Üí X i induces a map œÄ(Œ† i, X i) ‚ü∂ œÄ(X i).
-/
def proj (i : I) : œÄ‚Çì (TopCat.of (‚àÄ i, X i)) ‚•§ œÄ‚Çì (X i) :=
  œÄ‚Çò ‚ü®_, continuous_apply i‚ü©
#align fundamental_groupoid_functor.proj FundamentalGroupoidFunctor.proj

/-- The projection map is precisely path.homotopic.proj interpreted as a functor -/
@[simp]
theorem proj_map (i : I) (x‚ÇÄ x‚ÇÅ : œÄ‚Çì (TopCat.of (‚àÄ i, X i))) (p : x‚ÇÄ ‚ü∂ x‚ÇÅ) :
    (proj X i).map p = @Path.Homotopic.proj _ _ _ _ _ i p :=
  rfl
#align fundamental_groupoid_functor.proj_map FundamentalGroupoidFunctor.proj_map

-- Porting note: losing the instance with a concrete category again
instance : (i : I) ‚Üí TopologicalSpace (œÄ‚Çì (X i)).Œ± := fun i => TopCat.topologicalSpace_coe (X i)

/-- The map taking the pi product of a family of fundamental groupoids to the fundamental
groupoid of the pi product. This is actually an isomorphism (see `piIso`)
-/
@[simps]
def piToPiTop : (‚àÄ i, œÄ‚Çì (X i)) ‚•§ œÄ‚Çì (TopCat.of (‚àÄ i, X i)) where
  obj g := g
  map p := Path.Homotopic.pi p
  map_id x := by
    change (Path.Homotopic.pi fun i => ùüô (x i)) = _
    -- ‚ä¢ (Path.Homotopic.pi fun i => ùüô (x i)) = ùüô ({ obj := fun g => g, map := fun {X ‚Ä¶
    simp only [FundamentalGroupoid.id_eq_path_refl, Path.Homotopic.pi_lift]
    -- ‚ä¢ Quotient.mk (Path.Homotopic.setoid (fun i => x i) fun i => x i) (Path.pi fun ‚Ä¶
    rfl
    -- üéâ no goals
  map_comp f g := (Path.Homotopic.comp_pi_eq_pi_comp f g).symm
#align fundamental_groupoid_functor.pi_to_pi_Top FundamentalGroupoidFunctor.piToPiTop

/-- Shows `piToPiTop` is an isomorphism, whose inverse is precisely the pi product
of the induced projections. This shows that `fundamentalGroupoidFunctor` preserves products.
-/
@[simps]
def piIso : CategoryTheory.Grpd.of (‚àÄ i : I, œÄ‚Çì (X i)) ‚âÖ œÄ‚Çì (TopCat.of (‚àÄ i, X i)) where
  hom := piToPiTop X
  inv := CategoryTheory.Functor.pi' (proj X)
  hom_inv_id := by
    change piToPiTop X ‚ãô CategoryTheory.Functor.pi' (proj X) = ùü≠ _
    -- ‚ä¢ piToPiTop X ‚ãô CategoryTheory.Functor.pi' (proj X) = ùü≠ ((i : I) ‚Üí ‚Üë(œÄ.obj (X  ‚Ä¶
    apply CategoryTheory.Functor.ext ?_ ?_
    -- ‚ä¢ ‚àÄ (X_1 : (i : I) ‚Üí ‚Üë(œÄ.obj (X i))), (piToPiTop X ‚ãô CategoryTheory.Functor.pi ‚Ä¶
    ¬∑ intros; rfl
      -- ‚ä¢ (piToPiTop X ‚ãô CategoryTheory.Functor.pi' (proj X)).obj X‚úù = (ùü≠ ((i : I) ‚Üí ‚Üë ‚Ä¶
              -- üéâ no goals
    ¬∑ intros; ext; simp
      -- ‚ä¢ (piToPiTop X ‚ãô CategoryTheory.Functor.pi' (proj X)).map f‚úù = CategoryTheory. ‚Ä¶
              -- ‚ä¢ (piToPiTop X ‚ãô CategoryTheory.Functor.pi' (proj X)).map f‚úù i‚úù = (CategoryThe ‚Ä¶
                   -- üéâ no goals
  inv_hom_id := by
    change CategoryTheory.Functor.pi' (proj X) ‚ãô piToPiTop X = ùü≠ _
    -- ‚ä¢ CategoryTheory.Functor.pi' (proj X) ‚ãô piToPiTop X = ùü≠ ‚Üë(œÄ.obj (TopCat.of ((i ‚Ä¶
    apply CategoryTheory.Functor.ext
    -- ‚ä¢ autoParam (‚àÄ (X_1 Y : ‚Üë(œÄ.obj (TopCat.of ((i : I) ‚Üí ‚Üë(X i))))) (f : X_1 ‚ü∂ Y) ‚Ä¶
    ¬∑ intro _ _ f
      -- ‚ä¢ (CategoryTheory.Functor.pi' (proj X) ‚ãô piToPiTop X).map f = CategoryTheory.e ‚Ä¶
      suffices Path.Homotopic.pi ((CategoryTheory.Functor.pi' (proj X)).map f) = f by simpa
      -- ‚ä¢ Path.Homotopic.pi ((CategoryTheory.Functor.pi' (proj X)).map f) = f
      change Path.Homotopic.pi (fun i => (CategoryTheory.Functor.pi' (proj X)).map f i) = _
      -- ‚ä¢ (Path.Homotopic.pi fun i => (CategoryTheory.Functor.pi' (proj X)).map f i) = f
      simp
      -- üéâ no goals
    ¬∑ intros; rfl
      -- ‚ä¢ (CategoryTheory.Functor.pi' (proj X) ‚ãô piToPiTop X).obj X‚úù = (ùü≠ ‚Üë(œÄ.obj (Top ‚Ä¶
              -- üéâ no goals
#align fundamental_groupoid_functor.pi_iso FundamentalGroupoidFunctor.piIso

section Preserves

open CategoryTheory

/-- Equivalence between the categories of cones over the objects `œÄ X·µ¢` written in two ways -/
def coneDiscreteComp :
    Limits.Cone (Discrete.functor X ‚ãô œÄ) ‚âå Limits.Cone (Discrete.functor fun i => œÄ‚Çì (X i)) :=
  Limits.Cones.postcomposeEquivalence (Discrete.compNatIsoDiscrete X œÄ)
#align fundamental_groupoid_functor.cone_discrete_comp FundamentalGroupoidFunctor.coneDiscreteComp

theorem coneDiscreteComp_obj_mapCone :
    -- Porting note: check universe parameters here
    (coneDiscreteComp X).functor.obj (Functor.mapCone œÄ (TopCat.piFan.{u,u} X)) =
      Limits.Fan.mk (œÄ‚Çì (TopCat.of (‚àÄ i, X i))) (proj X) :=
  rfl
#align fundamental_groupoid_functor.cone_discrete_comp_obj_map_cone FundamentalGroupoidFunctor.coneDiscreteComp_obj_mapCone

/-- This is `piIso.inv` as a cone morphism (in fact, isomorphism) -/
def piTopToPiCone :
    Limits.Fan.mk (œÄ‚Çì (TopCat.of (‚àÄ i, X i))) (proj X) ‚ü∂ Grpd.piLimitFan fun i : I => œÄ‚Çì (X i)
    where Hom := CategoryTheory.Functor.pi' (proj X)
#align fundamental_groupoid_functor.pi_Top_to_pi_cone FundamentalGroupoidFunctor.piTopToPiCone

instance : IsIso (piTopToPiCone X) :=
  haveI : IsIso (piTopToPiCone X).Hom := (inferInstance : IsIso (piIso X).inv)
  Limits.Cones.cone_iso_of_hom_iso (piTopToPiCone X)

/-- The fundamental groupoid functor preserves products -/
def preservesProduct : Limits.PreservesLimit (Discrete.functor X) œÄ := by
  -- Porting note: check universe parameters here
  apply Limits.preservesLimitOfPreservesLimitCone (TopCat.piFanIsLimit.{u,u} X)
  -- ‚ä¢ Limits.IsLimit (œÄ.mapCone (TopCat.piFan X))
  apply (Limits.IsLimit.ofConeEquiv (coneDiscreteComp X)).toFun
  -- ‚ä¢ Limits.IsLimit ((coneDiscreteComp X).functor.obj (œÄ.mapCone (TopCat.piFan X)))
  simp only [coneDiscreteComp_obj_mapCone]
  -- ‚ä¢ Limits.IsLimit (Limits.Fan.mk (œÄ.obj (TopCat.of ((i : I) ‚Üí ‚Üë(X i)))) (proj X))
  apply Limits.IsLimit.ofIsoLimit _ (asIso (piTopToPiCone X)).symm
  -- ‚ä¢ Limits.IsLimit (Grpd.piLimitFan fun i => œÄ.obj (X i))
  exact Grpd.piLimitFanIsLimit _
  -- üéâ no goals
#align fundamental_groupoid_functor.preserves_product FundamentalGroupoidFunctor.preservesProduct

end Preserves

end Pi

section Prod

variable (A B : TopCat.{u})

/-- The induced map of the left projection map X √ó Y ‚Üí X -/
def projLeft : œÄ‚Çì (TopCat.of (A √ó B)) ‚•§ œÄ‚Çì A :=
  œÄ‚Çò ‚ü®_, continuous_fst‚ü©
#align fundamental_groupoid_functor.proj_left FundamentalGroupoidFunctor.projLeft

/-- The induced map of the right projection map X √ó Y ‚Üí Y -/
def projRight : œÄ‚Çì (TopCat.of (A √ó B)) ‚•§ œÄ‚Çì B :=
  œÄ‚Çò ‚ü®_, continuous_snd‚ü©
#align fundamental_groupoid_functor.proj_right FundamentalGroupoidFunctor.projRight

@[simp]
theorem projLeft_map (x‚ÇÄ x‚ÇÅ : œÄ‚Çì (TopCat.of (A √ó B))) (p : x‚ÇÄ ‚ü∂ x‚ÇÅ) :
    (projLeft A B).map p = Path.Homotopic.projLeft p :=
  rfl
#align fundamental_groupoid_functor.proj_left_map FundamentalGroupoidFunctor.projLeft_map

@[simp]
theorem projRight_map (x‚ÇÄ x‚ÇÅ : œÄ‚Çì (TopCat.of (A √ó B))) (p : x‚ÇÄ ‚ü∂ x‚ÇÅ) :
    (projRight A B).map p = Path.Homotopic.projRight p :=
  rfl
#align fundamental_groupoid_functor.proj_right_map FundamentalGroupoidFunctor.projRight_map

/--
The map taking the product of two fundamental groupoids to the fundamental groupoid of the product
of the two topological spaces. This is in fact an isomorphism (see `prodIso`).
-/
@[simps obj]
def prodToProdTop : œÄ‚Çì A √ó œÄ‚Çì B ‚•§ œÄ‚Çì (TopCat.of (A √ó B)) where
  obj g := g
  map {x y} p :=
    match x, y, p with
    | (x‚ÇÄ, x‚ÇÅ), (y‚ÇÄ, y‚ÇÅ), (p‚ÇÄ, p‚ÇÅ) => @Path.Homotopic.prod _ _ (_) (_) _ _ _ _ p‚ÇÄ p‚ÇÅ
  map_id := by
    rintro ‚ü®x‚ÇÄ, x‚ÇÅ‚ü©
    -- ‚ä¢ { obj := fun g => g,
    simp only [CategoryTheory.prod_id, FundamentalGroupoid.id_eq_path_refl]
    -- ‚ä¢ Path.Homotopic.prod (ùüô x‚ÇÄ) (ùüô x‚ÇÅ) = ùüô (x‚ÇÄ, x‚ÇÅ)
    rfl
    -- üéâ no goals
  map_comp {x y z} f g :=
    match x, y, z, f, g with
    | (x‚ÇÄ, x‚ÇÅ), (y‚ÇÄ, y‚ÇÅ), (z‚ÇÄ, z‚ÇÅ), (f‚ÇÄ, f‚ÇÅ), (g‚ÇÄ, g‚ÇÅ) =>
      (Path.Homotopic.comp_prod_eq_prod_comp f‚ÇÄ f‚ÇÅ g‚ÇÄ g‚ÇÅ).symm
#align fundamental_groupoid_functor.prod_to_prod_Top FundamentalGroupoidFunctor.prodToProdTop

theorem prodToProdTop_map {x‚ÇÄ x‚ÇÅ : œÄ‚Çì A} {y‚ÇÄ y‚ÇÅ : œÄ‚Çì B} (p‚ÇÄ : x‚ÇÄ ‚ü∂ x‚ÇÅ) (p‚ÇÅ : y‚ÇÄ ‚ü∂ y‚ÇÅ) :
    (prodToProdTop A B).map (X := (x‚ÇÄ, y‚ÇÄ)) (Y := (x‚ÇÅ, y‚ÇÅ)) (p‚ÇÄ, p‚ÇÅ) =
      Path.Homotopic.prod p‚ÇÄ p‚ÇÅ :=
  rfl
#align fundamental_groupoid_functor.prod_to_prod_Top_map FundamentalGroupoidFunctor.prodToProdTop_map

/-- Shows `prodToProdTop` is an isomorphism, whose inverse is precisely the product
of the induced left and right projections.
-/
@[simps]
def prodIso : CategoryTheory.Grpd.of (œÄ‚Çì A √ó œÄ‚Çì B) ‚âÖ œÄ‚Çì (TopCat.of (A √ó B)) where
  hom := prodToProdTop A B
  inv := (projLeft A B).prod' (projRight A B)
  hom_inv_id := by
    change prodToProdTop A B ‚ãô (projLeft A B).prod' (projRight A B) = ùü≠ _
    -- ‚ä¢ prodToProdTop A B ‚ãô CategoryTheory.Functor.prod' (projLeft A B) (projRight A ‚Ä¶
    apply CategoryTheory.Functor.hext; ¬∑ intros; ext <;> simp <;> rfl
    -- ‚ä¢ ‚àÄ (X : ‚Üë(œÄ.obj A) √ó ‚Üë(œÄ.obj B)), (prodToProdTop A B ‚ãô CategoryTheory.Functor ‚Ä¶
                                         -- ‚ä¢ (prodToProdTop A B ‚ãô CategoryTheory.Functor.prod' (projLeft A B) (projRight  ‚Ä¶
                                                 -- ‚ä¢ ((prodToProdTop A B ‚ãô CategoryTheory.Functor.prod' (projLeft A B) (projRight ‚Ä¶
                                                         -- ‚ä¢ (projLeft A B).obj X‚úù = X‚úù.fst
                                                         -- ‚ä¢ (projRight A B).obj X‚úù = X‚úù.snd
                                                                  -- üéâ no goals
                                                                  -- üéâ no goals
    rintro ‚ü®x‚ÇÄ, x‚ÇÅ‚ü© ‚ü®y‚ÇÄ, y‚ÇÅ‚ü© ‚ü®f‚ÇÄ, f‚ÇÅ‚ü©
    -- ‚ä¢ HEq ((prodToProdTop A B ‚ãô CategoryTheory.Functor.prod' (projLeft A B) (projR ‚Ä¶
    have : Path.Homotopic.projLeft ((prodToProdTop A B).map (f‚ÇÄ, f‚ÇÅ)) = f‚ÇÄ ‚àß
      Path.Homotopic.projRight ((prodToProdTop A B).map (f‚ÇÄ, f‚ÇÅ)) = f‚ÇÅ :=
        And.intro (Path.Homotopic.projLeft_prod f‚ÇÄ f‚ÇÅ) (Path.Homotopic.projRight_prod f‚ÇÄ f‚ÇÅ)
    simpa
    -- üéâ no goals
  inv_hom_id := by
    change (projLeft A B).prod' (projRight A B) ‚ãô prodToProdTop A B = ùü≠ _
    -- ‚ä¢ CategoryTheory.Functor.prod' (projLeft A B) (projRight A B) ‚ãô prodToProdTop  ‚Ä¶
    apply CategoryTheory.Functor.hext
    -- ‚ä¢ ‚àÄ (X : ‚Üë(œÄ.obj (TopCat.of (‚ÜëA √ó ‚ÜëB)))), (CategoryTheory.Functor.prod' (projL ‚Ä¶
    ¬∑ intros; apply Prod.ext <;> simp <;> rfl
      -- ‚ä¢ (CategoryTheory.Functor.prod' (projLeft A B) (projRight A B) ‚ãô prodToProdTop ‚Ä¶
              -- ‚ä¢ ((CategoryTheory.Functor.prod' (projLeft A B) (projRight A B) ‚ãô prodToProdTo ‚Ä¶
                                 -- ‚ä¢ (projLeft A B).obj X‚úù = X‚úù.fst
                                 -- ‚ä¢ (projRight A B).obj X‚úù = X‚úù.snd
                                          -- üéâ no goals
                                          -- üéâ no goals
    rintro ‚ü®x‚ÇÄ, x‚ÇÅ‚ü© ‚ü®y‚ÇÄ, y‚ÇÅ‚ü© f
    -- ‚ä¢ HEq ((CategoryTheory.Functor.prod' (projLeft A B) (projRight A B) ‚ãô prodToPr ‚Ä¶
    have := Path.Homotopic.prod_projLeft_projRight f
    -- ‚ä¢ HEq ((CategoryTheory.Functor.prod' (projLeft A B) (projRight A B) ‚ãô prodToPr ‚Ä¶
    -- Porting note: was simpa but TopSpace instances might be getting in the way
    simp only [CategoryTheory.Functor.comp_obj, CategoryTheory.Functor.prod'_obj, prodToProdTop_obj,
      CategoryTheory.Functor.comp_map, CategoryTheory.Functor.prod'_map, projLeft_map,
      projRight_map, CategoryTheory.Functor.id_obj, CategoryTheory.Functor.id_map, heq_eq_eq]
    apply this
    -- üéâ no goals

end Prod
