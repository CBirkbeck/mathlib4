/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.SimplicialCategory.Basic

/-!
# The category of simplicial objects is simplicial

-/
universe w v u

namespace CategoryTheory

open Simplicial Limits SimplicialCategory

variable {C : Type u} [Category.{v} C]

namespace SimplicialObject

variable (K L : SimplicialObject C)

@[ext]
structure SimplicialHomObj (A : SSet.{w}) where
  app (Œî : SimplexCategory·µí·µñ) (a : A.obj Œî) : K.obj Œî ‚ü∂ L.obj Œî
  naturality {Œî Œî' : SimplexCategory·µí·µñ} (œÜ : Œî ‚ü∂ Œî') (a : A.obj Œî) :
    K.map œÜ ‚â´ app Œî' (A.map œÜ a) = app Œî a ‚â´ L.map œÜ := by aesop_cat

namespace SimplicialHomObj

attribute [reassoc (attr := simp)] naturality

variable {K L} in
lemma congr_app {A : SSet.{w}} {x y : SimplicialHomObj K L A} (h : x = y) (Œî : SimplexCategory·µí·µñ)
    (a : A.obj Œî) : x.app Œî a = y.app Œî a := by subst h; rfl

@[simps]
def id (A : SSet.{w}) : SimplicialHomObj K K A where
  app _ _ := ùüô _

variable {K L}

@[simps]
def comp {M : SimplicialObject C} {A : SSet.{w}} (x : SimplicialHomObj K L A)
    (y : SimplicialHomObj L M A) : SimplicialHomObj K M A where
  app Œî a := x.app Œî a ‚â´ y.app Œî a

variable {A : SSet.{w}} (x : SimplicialHomObj K L A)

@[simps]
def map {A' : SSet.{w}} (f : A' ‚ü∂ A) :
    SimplicialHomObj K L A' where
  app Œî a := x.app Œî (f.app Œî a)
  naturality {Œî Œî'} œÜ a := by
    dsimp
    rw [‚Üê x.naturality œÜ (f.app Œî a), FunctorToTypes.naturality _ _ f œÜ a]

end SimplicialHomObj

@[simps!]
def simplicialHomFunctor : SSet.{w}·µí·µñ ‚•§ Type (max v w) where
  obj A := SimplicialHomObj K L A.unop
  map {A A'} f x := x.map f.unop

def simplicialHom : SSet.{v} := yoneda.op ‚ãô simplicialHomFunctor.{0} K L

variable {K L} in
@[ext]
lemma simplicialHom_ext {Œî : SimplexCategory·µí·µñ} {x y : (simplicialHom K L).obj Œî}
    (h : ‚àÄ (Œî' : SimplexCategory·µí·µñ) (f : Œî'.unop ‚ü∂ Œî.unop), x.app Œî' f = y.app Œî' f) : x = y :=
  SimplicialHomObj.ext _ _ (by ext; apply h)

instance (Œî : SimplexCategory) : Subsingleton (Œî ‚ü∂ [0]) where
  allEq f g := by
    ext : 3
    apply Subsingleton.elim (Œ± := Fin 1)

def simplicialHomEquiv‚ÇÄ : simplicialHom K L _[0] ‚âÉ (K ‚ü∂ L) where
  toFun x :=
    { app := fun Œî => x.app Œî (SimplexCategory.const' _ _ 0)
      naturality := fun Œî Œî' f => by rw [‚Üê x.naturality f]; rfl }
  invFun œÜ :=
    { app := fun Œî _ => œÜ.app Œî
      naturality := fun {Œî Œî'} f (s : Œî.unop ‚ü∂ [0]) => by
        obtain rfl := Subsingleton.elim s (SimplexCategory.const' _ _ 0)
        exact œÜ.naturality f }
  left_inv x := by
    dsimp [simplicialHom]
    ext Œî (s : _ ‚ü∂ _)
    obtain rfl := Subsingleton.elim s (SimplexCategory.const' _ _ 0)
    rfl
  right_inv œÜ := rfl

def simplicialHomEquiv (A : SSet.{v}) :
    (A ‚ü∂ simplicialHom K L) ‚âÉ SimplicialHomObj K L A where
  toFun œÜ :=
    { app := fun Œî a => (œÜ.app Œî a).app Œî (ùüô _)
      naturality := fun {Œî Œî'} f a => by
        erw [‚Üê (œÜ.app Œî a).naturality f (ùüô _),
          ‚Üê SimplicialHomObj.congr_app (congr_fun (œÜ.naturality f) a) Œî' (ùüô _)]
        rfl }
  invFun x :=
    { app := fun Œî a =>
        { app := fun Œî' f => x.app Œî' (A.map f.op a)
          naturality := fun {Œî' Œî''} œÜ f => by
            rw [‚Üê x.naturality œÜ (A.map f.op a), ‚Üê FunctorToTypes.map_comp_apply]
            rfl }
      naturality := fun Œî Œî' f => by
        dsimp
        ext a Œî'' (œÜ : Œî''.unop ‚ü∂ Œî'.unop)
        dsimp
        rw [‚Üê FunctorToTypes.map_comp_apply]
        rfl }
  left_inv œÜ := by
    ext Œî a Œî' f
    exact (SimplicialHomObj.congr_app (congr_fun (œÜ.naturality f.op) a) Œî' (ùüô _)).trans
      (congr_arg ((œÜ.app Œî a).app Œî') (by simp))
  right_inv x := by
    ext Œî a
    dsimp
    erw [FunctorToTypes.map_id_apply _ _]

@[simp]
lemma _root_.SSet.comp_app_apply {X Y Z : SSet.{v}} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
    {Œî : SimplexCategory·µí·µñ} (x : X.obj Œî) :
    (f ‚â´ g).app Œî x = g.app Œî (f.app Œî x) := rfl

@[simp]
lemma _root_.SSet.id_app_apply (X : SSet.{v}) {Œî : SimplexCategory·µí·µñ} (x : X.obj Œî) :
    NatTrans.app (ùüô X) Œî x = x := rfl

@[simp]
lemma unitHomEquiv_symm_simplicialHomEquiv‚ÇÄ_symm_app_app {K L : SimplicialObject C} (œÜ : K ‚ü∂ L)
    (Œî : SimplexCategory·µí·µñ) (Œî' : SimplexCategory·µí·µñ) (f : Œî'.unop ‚ü∂ Œî.unop) :
    (((simplicialHom K L).unitHomEquiv.symm ((simplicialHomEquiv‚ÇÄ K L).symm œÜ)).app Œî PUnit.unit).app Œî' f =
      œÜ.app Œî' := by
  rfl

noncomputable instance : EnrichedCategory SSet.{v} (SimplicialObject C) where
  Hom := simplicialHom
  id K := (SSet.unitHomEquiv _).symm ((simplicialHomEquiv‚ÇÄ K K).symm (ùüô _))
  comp K L M :=
    { app := fun Œî ‚ü®x, y‚ü© => x.comp y }

noncomputable instance : SimplicialCategory (SimplicialObject C) where
  homEquiv K L := by
    exact (simplicialHomEquiv‚ÇÄ K L).symm.trans (simplicialHom K L).unitHomEquiv.symm

noncomputable instance : SimplicialCategory SSet.{v} := by
  dsimp [SSet]
  infer_instance

end SimplicialObject

abbrev SSet.Homotopy {K L : SSet.{v}} (f g : K ‚ü∂ L) := SimplicialCategory.Homotopy f g

end CategoryTheory
