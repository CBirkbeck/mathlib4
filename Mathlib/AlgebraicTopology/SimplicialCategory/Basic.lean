import Mathlib.CategoryTheory.Enriched.Basic
import Mathlib.AlgebraicTopology.SimplicialSet
import Mathlib.CategoryTheory.Limits.Shapes.FunctorToTypes

universe v u

open CategoryTheory Simplicial MonoidalCategory

namespace SimplexCategory

def const' (Œî Œî' : SimplexCategory) (x : Fin (Œî'.len + 1)) : Œî ‚ü∂ Œî' :=
  SimplexCategory.Hom.mk ‚ü®fun _ => x, by tauto‚ü©

@[simp]
lemma const'_eq_id : const' [0] [0] 0 = ùüô _ := by aesop

end SimplexCategory

namespace SSet

noncomputable def monoidalCategory :
  MonoidalCategory SSet.{v} := monoidalOfChosenFiniteProducts
    (FunctorToTypes.functorEmptyLimitCone _)
    (fun K L => FunctorToTypes.binaryProductLimitCone K L)

attribute [local instance] SSet.monoidalCategory

def unitHomEquiv (K : SSet.{v}) : (ùüô_ _ ‚ü∂ K) ‚âÉ K _[0] where
  toFun œÜ := œÜ.app _ PUnit.unit
  invFun x :=
    { app := fun Œî _ => K.map (SimplexCategory.const' Œî.unop [0] 0).op x
      naturality := fun Œî Œî' f => by
        ext ‚ü®‚ü©
        dsimp
        rw [‚Üê FunctorToTypes.map_comp_apply]
        rfl }
  left_inv œÜ := by
    ext Œî ‚ü®‚ü©
    dsimp
    erw [‚Üê FunctorToTypes.naturality]
    rfl
  right_inv x := by
    dsimp
    rw [SimplexCategory.const'_eq_id]
    erw [FunctorToTypes.map_id_apply]

end SSet

namespace CategoryTheory

variable (C : Type u) [Category.{v} C]

section

attribute [local instance] SSet.monoidalCategory

/-- A (pre)simplicial category is a category `C` that is enriched in the category
of simplicial sets in such a way that the `0`-simplicies of this simplicial hom
identifies to morphisms in `C`. -/
class PresimplicialCategory where
  enrichedCategory : EnrichedCategory SSet.{v} C := by infer_instance
  homEquiv (K L : C) : (K ‚ü∂ L) ‚âÉ (ùüô_ SSet.{v} ‚ü∂ EnrichedCategory.Hom K L)
  homEquiv_id (K : C) : homEquiv K K (ùüô K) = eId SSet K := by aesop_cat
  homEquiv_comp {K L M : C} (f : K ‚ü∂ L) (g : L ‚ü∂ M) :
    homEquiv K M (f ‚â´ g) = (Œª_ _).inv ‚â´ (homEquiv K L f ‚äó homEquiv L M g) ‚â´
      eComp SSet K L M := by aesop_cat

end

namespace PresimplicialCategory

attribute [scoped instance] enrichedCategory SSet.monoidalCategory

variable [PresimplicialCategory C]

variable {C}
abbrev sHom (K L : C) : SSet.{v} := EnrichedCategory.Hom K L

noncomputable def sHomMap‚ÇÇ (K : C) {L L' : C} (g : L ‚ü∂ L') :
    sHom K L ‚ü∂ sHom K L' :=
  (œÅ_ _).inv ‚â´ _ ‚óÅ homEquiv L L' g ‚â´ eComp SSet K L L'

noncomputable def sHomMap‚ÇÅ {K K' : C} (f : K ‚ü∂ K') (L : C) :
    sHom K' L ‚ü∂ sHom K L :=
  (Œª_ _).inv ‚â´ homEquiv K K' f ‚ñ∑ _ ‚â´ eComp SSet K K' L

variable (C)

@[simps]
noncomputable def sHomFunctor : C·µí·µñ ‚•§ C ‚•§ SSet.{v} where
  obj K :=
    { obj := fun L => sHom K.unop L
      map := fun œÜ => sHomMap‚ÇÇ K.unop œÜ
      map_id := sorry
      map_comp := sorry }
  map œÜ :=
    { app := fun L => sHomMap‚ÇÅ œÜ.unop L
      naturality := sorry }
  map_id := sorry
  map_comp := sorry

-- TODO: develop API for the "adjoint functors"
-- especially, introduce a data value class containing the data
-- of a representative of `A ‚äó K` for `A : SSet.{v}` and `K`.

end PresimplicialCategory

end CategoryTheory
