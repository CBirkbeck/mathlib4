/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Enriched.Basic
import Mathlib.AlgebraicTopology.SimplicialSet
import Mathlib.CategoryTheory.Limits.Shapes.FunctorToTypes

/-!
# Simplicial categories

A simplicial category is a category `C` that is enriched over the
category of simplicial sets, in such a way that morphisms in
`C` identify to the `0`-simplices of the enriched hom.

TODO: add reference to the original source by Quillen, Homotopical algebra

-/

universe v u

open CategoryTheory Category Simplicial MonoidalCategory

namespace SimplexCategory

def const' (Œî Œî' : SimplexCategory) (x : Fin (Œî'.len + 1)) : Œî ‚ü∂ Œî' :=
  SimplexCategory.Hom.mk ‚ü®fun _ => x, by tauto‚ü©

@[simp]
lemma const'_eq_id : const' [0] [0] 0 = ùüô _ := by aesop

end SimplexCategory

namespace SSet

structure Path (X : SSet.{v}) (x y : X _[0]) where
  p : X _[1]
  p‚ÇÄ : X.Œ¥ 1 p = x
  p‚ÇÅ : X.Œ¥ 1 p = x

instance : ChosenFiniteProducts SSet.{v} where
  terminal := FunctorToTypes.functorEmptyLimitCone _
  product := FunctorToTypes.binaryProductLimitCone

def unitHomEquiv (K : SSet.{v}) : (ùüô_ _ ‚ü∂ K) ‚âÉ K _[0] where
  toFun œÜ := œÜ.app _ PUnit.unit
  invFun x :=
    { app := fun Œî _ => K.map (SimplexCategory.const' Œî.unop [0] 0).op x
      naturality := fun Œî Œî' f => by
        ext ‚ü®‚ü©
        dsimp
        rw [‚Üê FunctorToTypes.map_comp_apply]
        rfl }
  left_inv œÜ := by
    ext Œî ‚ü®‚ü©
    dsimp
    erw [‚Üê FunctorToTypes.naturality]
    rfl
  right_inv x := by
    dsimp
    rw [SimplexCategory.const'_eq_id]
    erw [FunctorToTypes.map_id_apply]

@[simp]
lemma leftUnitor_hom_apply (K : SSet.{v}) {Œî : SimplexCategory·µí·µñ} (x : (ùüô_ _ ‚äó K).obj Œî) :
  (Œª_ K).hom.app Œî x = x.2 := rfl

@[simp]
lemma leftUnitor_inv_apply (K : SSet.{v}) {Œî : SimplexCategory·µí·µñ} (x : K.obj Œî) :
  (Œª_ K).inv.app Œî x = ‚ü®PUnit.unit, x‚ü© := rfl

@[simp]
lemma rightUnitor_hom_apply (K : SSet.{v}) {Œî : SimplexCategory·µí·µñ} (x : (K ‚äó ùüô_ _).obj Œî) :
  (œÅ_ K).hom.app Œî x = x.1 := rfl

@[simp]
lemma rightUnitor_inv_apply (K : SSet.{v}) {Œî : SimplexCategory·µí·µñ} (x : K.obj Œî) :
  (œÅ_ K).inv.app Œî x = ‚ü®x, PUnit.unit‚ü© := rfl

@[simp]
lemma whiskerLeft_apply (K : SSet.{v}) {L L' : SSet.{v}} (g : L ‚ü∂ L')
    {Œî : SimplexCategory·µí·µñ} (x : (K ‚äó L).obj Œî) :
    (K ‚óÅ g).app Œî x = ‚ü®x.1, g.app Œî x.2‚ü© := rfl

@[simp]
lemma whiskerRight_apply {K K' : SSet.{v}} (f : K ‚ü∂ K') (L : SSet.{v})
    {Œî : SimplexCategory·µí·µñ} (x : (K ‚äó L).obj Œî) :
    (f ‚ñ∑ L).app Œî x = ‚ü®f.app Œî x.1, x.2‚ü© := rfl

@[simp]
lemma associator_hom_apply (K L M : SSet.{v}) {Œî : SimplexCategory·µí·µñ} (x : ((K ‚äó L) ‚äó M).obj Œî) :
  (Œ±_ K L M).hom.app Œî x = ‚ü®x.1.1, x.1.2, x.2‚ü© := rfl

@[simp]
lemma associator_inv_apply (K L M : SSet.{v}) {Œî : SimplexCategory·µí·µñ} (x : (K ‚äó L ‚äó M).obj Œî) :
  (Œ±_ K L M).inv.app Œî x = ‚ü®‚ü®x.1, x.2.1‚ü©, x.2.2‚ü© := rfl

end SSet

namespace CategoryTheory

variable (C : Type u) [Category.{v} C]

section

/-- A (pre)simplicial category is a category `C` that is enriched in the category
of simplicial sets in such a way that the `0`-simplicies of this simplicial hom
identifies to morphisms in `C`. -/
class SimplicialCategory where
  enrichedCategory : EnrichedCategory SSet.{v} C := by infer_instance
  homEquiv (K L : C) : (K ‚ü∂ L) ‚âÉ (ùüô_ SSet.{v} ‚ü∂ EnrichedCategory.Hom K L)
  homEquiv_id (K : C) : homEquiv K K (ùüô K) = eId SSet K := by aesop_cat
  homEquiv_comp {K L M : C} (f : K ‚ü∂ L) (g : L ‚ü∂ M) :
    homEquiv K M (f ‚â´ g) = (Œª_ _).inv ‚â´ (homEquiv K L f ‚äó homEquiv L M g) ‚â´
      eComp SSet K L M := by aesop_cat

end

namespace SimplicialCategory

attribute [instance] enrichedCategory

variable [SimplicialCategory C]

variable {C}

abbrev sHom (K L : C) : SSet.{v} := EnrichedCategory.Hom K L

def homEquiv' (K L : C) : (K ‚ü∂ L) ‚âÉ sHom K L _[0] :=
  (homEquiv K L).trans (sHom K L).unitHomEquiv

noncomputable def sHomMap‚ÇÅ {K K' : C} (f : K ‚ü∂ K') (L : C) :
    sHom K' L ‚ü∂ sHom K L :=
  (Œª_ _).inv ‚â´ homEquiv K K' f ‚ñ∑ _ ‚â´ eComp SSet K K' L

@[simp]
lemma sHomMap‚ÇÅ_id (K L : C) :
    sHomMap‚ÇÅ (ùüô K) L = ùüô _ := by
  simp [sHomMap‚ÇÅ, homEquiv_id]

@[simp, reassoc]
lemma sHomMap‚ÇÅ_comp {K K' K'' : C} (f : K ‚ü∂ K') (f' : K' ‚ü∂ K'') (L : C) :
    sHomMap‚ÇÅ (f ‚â´ f') L = sHomMap‚ÇÅ f' L ‚â´ sHomMap‚ÇÅ f L := by
  dsimp [sHomMap‚ÇÅ]
  simp only [assoc, homEquiv_comp, comp_whiskerRight, leftUnitor_inv_whiskerRight, ‚Üê e_assoc']
  rfl

noncomputable def sHomMap‚ÇÇ (K : C) {L L' : C} (g : L ‚ü∂ L') :
    sHom K L ‚ü∂ sHom K L' :=
  (œÅ_ _).inv ‚â´ _ ‚óÅ homEquiv L L' g ‚â´ eComp SSet K L L'

@[simp]
lemma sHomMap‚ÇÇ_id (K L : C) :
    sHomMap‚ÇÇ K (ùüô L) = ùüô _ := by
  simp [sHomMap‚ÇÇ, homEquiv_id]

@[simp, reassoc]
lemma sHomMap‚ÇÇ_comp (K : C) {L L' L'' : C} (g : L ‚ü∂ L') (g' : L' ‚ü∂ L'') :
    sHomMap‚ÇÇ K (g ‚â´ g') = sHomMap‚ÇÇ K g ‚â´ sHomMap‚ÇÇ K g' := by
  dsimp [sHomMap‚ÇÇ]
  simp only [homEquiv_comp, MonoidalCategory.whiskerLeft_comp, assoc, ‚Üê e_assoc]
  rfl

@[reassoc]
lemma sHomMap‚ÇÇ_sHomMap‚ÇÅ {K K' L L' : C} (f : K ‚ü∂ K') (g : L ‚ü∂ L') :
    sHomMap‚ÇÇ K' g ‚â´ sHomMap‚ÇÅ f L' = sHomMap‚ÇÅ f L ‚â´ sHomMap‚ÇÇ K g :=
  ((œÅ_ _).inv ‚â´ _ ‚óÅ homEquiv L L' g ‚â´ (Œª_ _).inv ‚â´ homEquiv K K' f ‚ñ∑ _) ‚â´=
    (e_assoc SSet.{v} K K' L L').symm

attribute [local simp] sHomMap‚ÇÇ_sHomMap‚ÇÅ

@[simps]
noncomputable def sHomFunctor : C·µí·µñ ‚•§ C ‚•§ SSet.{v} where
  obj K :=
    { obj := fun L => sHom K.unop L
      map := fun œÜ => sHomMap‚ÇÇ K.unop œÜ }
  map œÜ :=
    { app := fun L => sHomMap‚ÇÅ œÜ.unop L }

abbrev Homotopy {K L : C} (f g : K ‚ü∂ L) :=
  (sHom K L).Path (homEquiv' K L f) (homEquiv' K L g)

-- TODO: develop API for the "adjoint functors"
-- especially, introduce a *data valued* class containing the data
-- of a representative of `A ‚äó K` for `A : SSet.{v}` and `K : C`, so
-- it can be chosen to be definitionnaly the constructed product in case `K : SSet.{v}`

end SimplicialCategory

end CategoryTheory
