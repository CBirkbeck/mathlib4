/-
Copyright (c) 2024 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Tooby-Smith
-/
import Mathlib.AlgebraicTopology.SimplexCategory
import Mathlib.AlgebraicTopology.SimplexCategoryWithInitial
import Mathlib.AlgebraicTopology.SimplicialObject
import Mathlib.AlgebraicTopology.SimplicialSet
import Mathlib.CategoryTheory.WithTerminal
import Mathlib.CategoryTheory.Whiskering
import Mathlib.CategoryTheory.Products.Basic
import Mathlib.CategoryTheory.Products.Associator
import Mathlib.CategoryTheory.Monoidal.Category
import Mathlib.CategoryTheory.Monoidal.Types.Basic

/-! # The join of simplicial sets

We construct the join of augmented simplicial sets defined as contravariant functors from
`WithInitial SimplexCategory`.

We show that the join of two augmented standard simplicies is equivalent to a augmented standard
simplex.

## ToDo

1. Show that the join forms a monoidal structure on augmented simplicial sets.
2. Define the join of simplicial sets.
3. Show that the join of standard simplicies is equivalent to a standard simplex.
4. Show that the join defines a monoidal structure on simplicial sets.

-/

universe v u
open CategoryTheory CategoryTheory.Limits
open Simplicial
open WithInitial
open SimplexCategory.WithInitial

namespace SSet
namespace FromWithInitial


def pairFun : (SSet.FromWithInitial √ó SSet.FromWithInitial) ‚•§
    (joinClassifying.Elements ‚•§ Type u) where
  obj S := toWithInitialWithInitial.rightOp ‚ãô
    (prodOpEquiv (WithInitial SimplexCategory)).functor ‚ãô S.1.prod S.2 ‚ãô
    {obj := (MonoidalCategory.tensor (Type u)).obj, map := fun f s => (f.1 s.1, f.2 s.2)}
  map Œ∑ := whiskerRight
    (whiskerLeft
      (toWithInitialWithInitial.rightOp ‚ãô (prodOpEquiv (WithInitial SimplexCategory)).functor)
      (NatTrans.prod Œ∑.1 Œ∑.2))
    {obj := (MonoidalCategory.tensor (Type u)).obj, map := fun f s => (f.1 s.1, f.2 s.2)}

def tripleFun1' :  (SSet.FromWithInitial √ó SSet.FromWithInitial √ó SSet.FromWithInitial) ‚•§
    ( joinClassifying.Elements √ó (WithInitial SimplexCategory)·µí·µñ ‚•§ Type u √ó Type u ) where
  obj S := (pairFun.obj (S.1, S.2.1)).prod S.2.2
  map Œ∑ := (NatTrans.prod (pairFun.map (Œ∑.1, Œ∑.2.1)) Œ∑.2.2)

def tripleFun1_o : (SSet.FromWithInitial √ó SSet.FromWithInitial √ó SSet.FromWithInitial) ‚•§
    (assocClassifier1.Elements ‚•§ Type u) :=
  tripleFun1' ‚ãô ((whiskeringLeft _ _ _).obj assoc1ToWithInitialWithInitial)
  ‚ãô ((whiskeringRight _ _ _).obj
  {obj := (MonoidalCategory.tensor (Type u)).obj, map := fun f s => (f.1 s.1, f.2 s.2)})

def tripleFunSnd' :  (SSet.FromWithInitial √ó SSet.FromWithInitial √ó SSet.FromWithInitial) ‚•§
    ( (WithInitial SimplexCategory)·µí·µñ √ó joinClassifying.Elements  ‚•§ Type u √ó Type u ) where
  obj S := S.1.prod (pairFun.obj S.2)
  map Œ∑ := (NatTrans.prod Œ∑.1 (pairFun.map  Œ∑.2))

def tensorType : Type u √ó Type u ‚•§ Type u :=
    {obj := (MonoidalCategory.tensor (Type u)).obj, map := fun f s => (f.1 s.1, f.2 s.2)}

def tripleFunSndO : (SSet.FromWithInitial √ó SSet.FromWithInitial √ó SSet.FromWithInitial) ‚•§
    (assocClassifierSnd.Elements ‚•§ Type u) :=
  tripleFunSnd' ‚ãô ((whiskeringLeft _ _ _).obj assocSndToWithInitialWithInitial)
  ‚ãô ((whiskeringRight _ _ _).obj tensorType)

def tripleFunSndX' :  (SSet.FromWithInitial √ó SSet.FromWithInitial √ó SSet.FromWithInitial) ‚•§
    ((WithInitial SimplexCategory)·µí·µñ √ó (WithInitial SimplexCategory)·µí·µñ
    √ó (WithInitial SimplexCategory)·µí·µñ   ‚•§ Type u √ó Type u √ó Type u) where
  obj S := S.1.prod  (S.2.1.prod S.2.2)
  map Œ∑ := (NatTrans.prod Œ∑.1 (NatTrans.prod Œ∑.2.1 Œ∑.2.2))

def tripleFunSnd : (SSet.FromWithInitial √ó SSet.FromWithInitial √ó SSet.FromWithInitial) ‚•§
    (assocClassifierSnd.Elements ‚•§ Type u) :=
  tripleFunSndX'  ‚ãô ((whiskeringRight _ _ _).obj ((ùü≠ (Type u)).prod tensorType ‚ãô tensorType))
   ‚ãô ((whiskeringLeft _ _ _).obj assocSndTo3WithInitial)

def tripleFun1 : (SSet.FromWithInitial √ó SSet.FromWithInitial √ó SSet.FromWithInitial) ‚•§
    (assocClassifier1.Elements ‚•§ Type u) :=
  tripleFunSndX'  ‚ãô ((whiskeringRight _ _ _).obj
  ((prod.associativity _ _ _).inverse ‚ãô (tensorType.prod (ùü≠ (Type u)) ‚ãô tensorType)))
   ‚ãô ((whiskeringLeft _ _ _).obj assocFstTo3WithInitial)


inductive joinType' (S T : SSet.FromWithInitial) (X : (WithInitial SimplexCategory)·µí·µñ)  where
  | comp : (i : joinClassifying.obj X) ‚Üí (pairFun.obj (S, T)).obj (joinLiftObj i) ‚Üí joinType' S T X

lemma joinType'.ext {S T : SSet.FromWithInitial} (X : (WithInitial SimplexCategory)·µí·µñ)
    (s t : joinType' S T X) (h1 : s.1 = t.1)
    (h2 : ((pairFun.obj (S, T)).map (joinLiftObjEqIso h1).hom) s.2 = t.2 ) :
      s = t := by
  match s, t with
  | ‚ü®s1, s2‚ü©, ‚ü®t1, t2‚ü© =>
    congr
    simp at h1
    subst h1
    rw [joinLiftObjEqIso_refl] at h2
    simp at h2
    simp only [heq_eq_eq]
    exact h2


@[simp]
def joinTypeMap' (S T : SSet.FromWithInitial)
    {X Y : (WithInitial SimplexCategory)·µí·µñ } (f : X ‚ü∂ Y)
    (s : joinType' S T X) : joinType' S T Y :=
    ‚ü®(joinClassifying.map f) s.1, ((pairFun.obj (S, T)).map (coCartesianLift f s.1)) s.2‚ü©

@[simp]
def join'' (S T : SSet.FromWithInitial) : SSet.FromWithInitial :=
    joinClassifying.liftFunc (pairFun.obj (S, T))

@[simp]
def assoc1 (S1 S2 S3 : SSet.FromWithInitial) : SSet.FromWithInitial :=
    assocClassifier1.liftFunc (tripleFun1.obj (S1, (S2,S3)))

@[simp]
def assocSnd (S1 S2 S3 : SSet.FromWithInitial) : SSet.FromWithInitial :=
    assocClassifierSnd.liftFunc (tripleFunSnd.obj (S1, (S2,S3)))

def join''Func : SSet.FromWithInitial √ó SSet.FromWithInitial ‚•§ SSet.FromWithInitial :=
  pairFun ‚ãô joinClassifying.liftFuncFunc

def assoc1Func : SSet.FromWithInitial √ó SSet.FromWithInitial √ó SSet.FromWithInitial
    ‚•§ SSet.FromWithInitial :=
  tripleFun1 ‚ãô assocClassifier1.liftFuncFunc

def assocSndFunc : SSet.FromWithInitial √ó SSet.FromWithInitial √ó SSet.FromWithInitial
    ‚•§ SSet.FromWithInitial :=
  tripleFunSnd ‚ãô assocClassifierSnd.liftFuncFunc

def iso1 : assocSndFunc ‚âÖ tripleFunSnd ‚ãô  ‚ãô assocClassifierfst.liftFuncFunc

@[simps!]
def join''_assoc1 (S1 S2 S3 : SSet.FromWithInitial) (X : (WithInitial SimplexCategory)·µí·µñ) :
    (joinClassifying.liftFunc
     (pairFun.obj (joinClassifying.liftFunc (pairFun.obj (S1, S2)), S3))).obj X ‚âÉ
     (assocClassifier1.liftFunc (tripleFun1.obj (S1, (S2,S3)))).obj X where
  toFun := fun s => ‚ü®‚ü®s.1 , s.2.1.1‚ü©, ‚ü®s.2.1.2, s.2.2‚ü©‚ü©
  invFun := fun s => ‚ü®s.1.1, ‚ü®‚ü®s.1.2, s.2.1‚ü©, s.2.2 ‚ü©‚ü©
  left_inv s := by
    aesop
  right_inv s := by
    aesop

@[simps!]
def join''_assocSnd (S1 S2 S3 : SSet.FromWithInitial) (X : (WithInitial SimplexCategory)·µí·µñ) :
    (joinClassifying.liftFunc
     (pairFun.obj (S1, joinClassifying.liftFunc (pairFun.obj (S2, S3))))).obj X ‚âÉ
     (assocClassifierSnd.liftFunc (tripleFunSnd.obj (S1, (S2,S3)))).obj X where
  toFun := fun s => ‚ü®‚ü®s.1 , s.2.2.1‚ü©, ‚ü®s.2.1, s.2.2.2‚ü©‚ü©
  invFun := fun s => ‚ü®s.1.1, ‚ü®s.2.1, ‚ü®s.1.2, s.2.2‚ü© ‚ü©‚ü©
  left_inv s := by
    aesop
  right_inv s := by
    aesop


def join''_isoFst (S1 S2 S3 : SSet.FromWithInitial)  :
    (joinClassifying.liftFunc
     (pairFun.obj (joinClassifying.liftFunc (pairFun.obj (S1, S2)), S3))) ‚âÖ
     (assocClassifier1.liftFunc (tripleFun1.obj (S1, (S2,S3)))) :=
  NatIso.ofComponents (fun X => Equiv.toIso (join''_assoc1 S1 S2 S3 X)) (by
   intro X Y f
   simp_all only [Equiv.toIso_hom]
   rfl)

@[simps!]
def join''_isoSnd (S1 S2 S3 : SSet.FromWithInitial) :
    (joinClassifying.liftFunc
     (pairFun.obj (S1, joinClassifying.liftFunc (pairFun.obj (S2, S3))))) ‚âÖ
     (assocClassifierSnd.liftFunc (tripleFunSnd.obj (S1, (S2,S3)))) :=
  NatIso.ofComponents (fun X => Equiv.toIso (join''_assocSnd S1 S2 S3 X)) (by
   intro X Y f
   simp_all only [Equiv.toIso_hom]
   rfl)

def assoc1Iso : assoc1Func ‚âÖ (prod.associativity _ _ _).inverse ‚ãô
    (join''Func.prod (ùü≠ (SSet.FromWithInitial))) ‚ãô join''Func :=
  NatIso.ofComponents (fun S => (join''_isoFst S.1 S.2.1 S.2.2).symm) (by aesop_cat)

def assoc2Iso : assocSndFunc ‚âÖ
    ((ùü≠ (SSet.FromWithInitial)).prod join''Func ) ‚ãô join''Func :=
  NatIso.ofComponents (fun S => (join''_isoSnd S.1 S.2.1 S.2.2).symm) (by aesop_cat)

@[simp]
def join' (S T : SSet.FromWithInitial) : SSet.FromWithInitial where
  obj X := joinType' S T X
  map f := joinTypeMap' S T f
  map_id Z := by
    ext a
    apply joinType'.ext
    swap
    simp only [joinClassifying_obj, joinTypeMap', types_id_apply, joinClassifying.map_id]
    simp only [types_id_apply, joinTypeMap', joinClassifying_map, coCartesianLift_id,
      joinClassifying_obj, id_eq, eq_mpr_eq_cast]
    rw [‚Üê types_comp_apply ((pairFun.obj _).map _) ((pairFun.obj _).map _)]
    rw [‚Üê (pairFun.obj _).map_comp, ‚Üê Iso.trans_hom, joinLiftObjEqIso_symm]
    rw [Iso.refl_hom, (pairFun.obj _).map_id]
    rfl
  map_comp {X Y Z} f g := by
    ext a
    apply joinType'.ext
    swap
    simp only [joinClassifying_obj, joinTypeMap', types_comp_apply, joinClassifying.map_comp]
    simp only [types_comp_apply, joinTypeMap']
    repeat rw [‚Üê types_comp_apply ((pairFun.obj _).map _) ((pairFun.obj _).map _),
     ‚Üê (pairFun.obj _).map_comp]
    apply congrFun
    apply congrArg
    exact coCartesianLift_comp _ _ _

/-- The join of two morphisms in `SSet.FromWithInitial`. -/
def joinMap' {S T : SSet.FromWithInitial √ó SSet.FromWithInitial} (Œ∑ : S ‚ü∂ T):
   join' S.1 S.2 ‚ü∂ join' T.1 T.2 where
  app X := fun (s : joinType' S.1 S.2 X) =>
      joinType'.comp s.1 (((pairFun.map Œ∑).app ‚ü®X, s.1‚ü©) s.2)
  naturality {X Y} f := by
    ext a
    apply joinType'.ext
    swap
    congr
    simp only [join', joinClassifying_obj, types_comp_apply, joinTypeMap', joinClassifying_map]
    rw [‚Üê types_comp_apply ((pairFun.obj (S.1, S.2)).map _) ((pairFun.map Œ∑).app _) ]
    rw [(pairFun.map Œ∑).naturality]
    rw [joinLiftObjEqIso_refl]
    simp only [types_comp_apply, join', joinClassifying_obj, joinTypeMap', joinClassifying_map,
      Iso.refl_hom, FunctorToTypes.map_id_apply]
    rfl

/-- The functor from `SSet.FromWithInitial √ó SSet.FromWithInitial` to `SSet.FromWithInitial`
taking pairs of objects and morphisms to their join. -/
def joinFunc' : (SSet.FromWithInitial √ó SSet.FromWithInitial) ‚•§ SSet.FromWithInitial where
  obj S := join' S.1 S.2
  map Œ∑ := joinMap' Œ∑


/-- The functor `(WithInitial SimplexCategory √ó WithInitial SimplexCategory)·µí·µñ ‚•§ Type u`
induced by two objects `S` and `T` in `SSet.FromWithInitial` taking `(op X,op Z)`
to `S.obj (op X) √ó T.obj (op Z)`. -/
def pair (S T : SSet.FromWithInitial) :
    (WithInitial SimplexCategory √ó WithInitial SimplexCategory)·µí·µñ ‚•§ Type u :=
  (prodOpEquiv (WithInitial SimplexCategory)).functor ‚ãô S.prod T ‚ãô
  {obj := (MonoidalCategory.tensor (Type u)).obj, map := fun f s => (f.1 s.1, f.2 s.2)}

/-- Given two morphisms in `SSet.FromWithInitial` the corresponding natural transformation
between paired objects. -/
def pairMap {S1 S2 T1 T2 : SSet.FromWithInitial} (Œ∑1 : S1 ‚ü∂ T1) (Œ∑2 : S2 ‚ü∂ T2) :
    pair S1 S2 ‚ü∂ pair T1 T2 :=
  whiskerRight
    (whiskerLeft
      (prodOpEquiv (WithInitial SimplexCategory)).functor
      (NatTrans.prod Œ∑1 Œ∑2))
    {obj := (MonoidalCategory.tensor (Type u)).obj, map := fun f s => (f.1 s.1, f.2 s.2)}

/-- Given an `X` in `WithInitial SimplexCategory` and `S`, `T` in `SSet.FromWithInitial`, the
disjoint union of types `S.obj (op Z) √ó T.obj (op Y)` such that `Z` and `Y` split `X` -/
inductive joinType (S T : SSet.FromWithInitial)
    (X : WithInitial SimplexCategory)  where
  | comp : (i : Fin (Nat.succ (len X)))
    ‚Üí (pair S T).obj (Opposite.op (Split.obj X i))
    ‚Üí joinType S T X

lemma joinType_ext {S T : SSet.FromWithInitial}
    {X : WithInitial SimplexCategory}
    (s t : joinType S T X) (h1 : s.1 = t.1)
    (h : (pair S T).map ((Split.indexEqToIso h1).inv).op s.2 =t.2):
    s = t := by
  match s, t with
  | joinType.comp i s, joinType.comp j t =>
    simp at h1
    subst h1
    congr
    rw [Split.indexEqToIso_refl] at h
    simp only [Iso.refl_inv, op_id, FunctorToTypes.map_id_apply] at h
    exact h

@[simp]
lemma joinType_fst {S T : SSet.FromWithInitial} {X : WithInitial SimplexCategory}
    (i : Fin (Nat.succ (len X))) (s : (pair S T).obj (Opposite.op (Split.obj X i))) :
  (joinType.comp i s).1 = i := rfl

/-- Given a morphism `f : X ‚ü∂ Y` in `SSet.FromWithInitial`, a map from `joinType S T Y` to
`joinType S T X`. -/
def joinTypeMap (S T : SSet.FromWithInitial)
    {X Y : WithInitial SimplexCategory} (f : X ‚ü∂ Y)
    (s : joinType S T Y) : joinType S T X :=
  match s with
  | joinType.comp i s =>
    joinType.comp (Split.sourceValue f i) ((pair S T).map (Split.map f i).op s)

/-- The join of two objects in `SSet.FromWithInitial`. -/
def join (S T : SSet.FromWithInitial) : SSet.FromWithInitial where
  obj X := joinType S T (Opposite.unop X)
  map f := joinTypeMap S T f.unop
  map_id Z := by
    match Z with
    | ‚ü®Z‚ü© =>
    funext s
    simp
    refine joinType_ext _ _ (Split.sourceValue_of_id s.1) ?_
    simp [joinTypeMap]
    rw [‚Üê types_comp_apply ((pair S T).map _) ((pair S T).map _),
      ‚Üê (pair S T).map_comp, ‚Üê op_comp]
    rw [ Split.map_id s.1, op_id, FunctorToTypes.map_id_apply]
  map_comp {X Y Z} f g := by
    match X, Y, Z, f, g with
    | ‚ü®X‚ü©, ‚ü®Y‚ü©, ‚ü®Z‚ü©, ‚ü®f‚ü©, ‚ü®g‚ü© =>
    funext s
    symm
    refine joinType_ext ((joinTypeMap S T g ‚àò  joinTypeMap S T f) s) (joinTypeMap S T (g ‚â´ f) s)
     (Split.sourceValue_of_comp g f s.1) ?_
    simp [joinTypeMap]
    repeat rw [‚Üê types_comp_apply ((pair S T).map _) ((pair S T).map _),
    ‚Üê (pair S T).map_comp, ‚Üê op_comp]
    apply congrFun
    repeat apply congrArg
    rw [Category.assoc, Split.map_comp g f s.1]

/-- The join of two morphisms in `SSet.FromWithInitial`. -/
def joinMap {S1 T1 S2 T2: SSet.FromWithInitial} (Œ∑ : S1 ‚ü∂ S2)
    (Œµ : T1 ‚ü∂ T2) : join S1 T1 ‚ü∂ join S2 T2 where
  app X := fun (s : joinType S1 T1 (Opposite.unop X)) =>
      joinType.comp s.1
        ((pairMap Œ∑ Œµ).app (Opposite.op (Split.obj (Opposite.unop X) s.1)) s.2)
  naturality {X Y} f := by
    match X, Y, f with
    | ‚ü®X‚ü©, ‚ü®Y‚ü©, ‚ü®f‚ü© =>
    funext s
    apply joinType_ext _ _ (by rfl) ?_
    change (pair S2 T2).map _ (((pair S1 T1).map _ ‚â´ (pairMap Œ∑ Œµ).app _) _) =_
    erw [(pairMap Œ∑ Œµ).naturality, Split.indexEqToIso_refl, op_id, (pair S2 T2).map_id]
    rfl

/-- The functor from `SSet.FromWithInitial √ó SSet.FromWithInitial` to `SSet.FromWithInitial`
taking pairs of objects and morphisms to their join. -/
def joinFunc : (SSet.FromWithInitial √ó SSet.FromWithInitial) ‚•§ SSet.FromWithInitial where
  obj S := join S.1 S.2
  map Œ∑ := joinMap Œ∑.1 Œ∑.2

section Associator

def assocTypeMap1 {S T L : SSet.FromWithInitial} {X : WithInitial SimplexCategory}
    (s : (join (join S T) L).obj (Opposite.op X)) : (join S (join T L)).obj (Opposite.op X) :=
  joinType.comp
      (Split.inclSucc‚ÇÅ s.2.1.1)
      (S.map (Split.swap‚ÇÉ s.1 s.2.1.1).inv.op s.2.1.2.1,
      joinType.comp
        (Split.preimageInclSucc‚ÇÇ' s.1 s.2.1.1)
        (T.map ((Split.swap‚ÇÅ s.1 s.2.1.1).inv.op) s.2.1.2.2,
           L.map (Split.swap‚ÇÇ s.1 s.2.1.1).inv.op s.2.2))

def assocTypeMap2 {S T L : SSet.FromWithInitial} {X : WithInitial SimplexCategory}
    (s : (join S (join T L)).obj (Opposite.op X)) : (join (join S T) L).obj (Opposite.op X)  :=
  joinType.comp
      (Split.inclSucc‚ÇÇ s.2.2.1)
      (joinType.comp
        (Split.preimageInclSucc‚ÇÅ' s.1 s.2.2.1)
        (S.map (Split.swap‚ÇÉ' s.1 s.2.2.1).inv.op s.2.1,
          T.map (Split.swap‚ÇÅ' s.1 s.2.2.1).inv.op s.2.2.2.1),
      (L.map (Split.swap‚ÇÇ' s.1 s.2.2.1).inv.op s.2.2.2.2))

lemma left_inv_assocType (S T L : SSet.FromWithInitial) (X : WithInitial SimplexCategory) :
    Function.LeftInverse (@assocTypeMap2 S T L X) (@assocTypeMap1 S T L X)  := fun s => by
  refine joinType_ext _ _ (Split.preimageInclSucc‚ÇÇ'_inclSucc‚ÇÇ s.1 s.2.1.1) ?_
  simp [pair, assocTypeMap1, assocTypeMap2]
  apply Prod.ext
  simp [join, joinTypeMap]
  refine joinType_ext _ _ ?_ ?_
  simp
  rw [Split.indexEqToIso, Split.sourceValue_of_iso_inv, Fin.eq_iff_veq]
  rfl
  simp [pair]
  apply Prod.ext
  all_goals
    simp
    repeat rw [‚Üê types_comp_apply (Prefunctor.map _ _) (Prefunctor.map _ _), ‚Üê Functor.map_comp]
    repeat rw [‚Üê Category.assoc]
    rw [‚Üê op_comp, ‚Üê Iso.trans_inv]
    try rw [Split.swap‚ÇÅ_swap‚ÇÅ']
    try rw [Split.swap‚ÇÇ_swap‚ÇÇ']
    try rw [Split.swap‚ÇÉ_swap‚ÇÉ']
    try refine @Eq.trans _ _ (S.map (ùüô (_)).op s.2.1.2.1) _ ?_ (by rw [op_id, S.map_id]; rfl)
    try refine @Eq.trans _ _ (T.map (ùüô _).op s.2.1.2.2) _ ?_ (by rw [op_id, T.map_id]; rfl)
    try refine @Eq.trans _ _ (L.map (ùüô (_)).op s.2.2) _ ?_ (by rw [op_id, L.map_id]; rfl)
    apply congrFun
    repeat rw [‚Üê op_comp]
    repeat apply congrArg
    simp [Split.indexEqToIso]
    apply hom_eq_if_toOrderHom_eq
    apply OrderHom.ext
    funext a
    repeat rw [toOrderHom_comp]
  ¬∑ rw [Split.map_lenIso_inv_fst]
    simp [toOrderHomIso_apply_inv]
    rw [@toOrderHom_id (Split.obj (Split.obj X s.1).1 s.2.1.1).1]
    rfl
  ¬∑ rw [Split.map_lenIso_inv_snd]
    simp [toOrderHomIso_apply_inv]
  ¬∑ simp [toOrderHomIso_apply_inv]

def assocTypeEquiv (S T L : SSet.FromWithInitial) (X : WithInitial SimplexCategory) :
    (join (join S T) L).obj (Opposite.op X) ‚âÉ (join S (join T L)).obj (Opposite.op X)  where
  toFun := assocTypeMap1
  invFun := assocTypeMap2
  left_inv := left_inv_assocType S T L X
  right_inv := fun s => by
    refine joinType_ext _ _ (Split.preimageInclSucc‚ÇÅ'_inclSucc‚ÇÅ s.1 s.2.2.1) ?_
    simp [pair, assocTypeMap1, assocTypeMap2]
    apply Prod.ext
    swap
    simp [join, joinTypeMap]
    refine joinType_ext _ _ ?_ ?_
    simp
    rw [Split.indexEqToIso, Split.sourceValue_of_iso_inv, Fin.eq_iff_veq]
    simp [Split.preimageInclSucc‚ÇÇ', Split.preimageInclSucc‚ÇÇ, Split.len_obj‚ÇÅ, Split.inclSucc‚ÇÇ,
    Split.inclSucc‚ÇÅ, Split.preimageInclSucc‚ÇÅ', Split.preimageInclSucc‚ÇÅ]
    simp [pair]
    apply Prod.ext
    all_goals
      simp
      repeat rw [‚Üê types_comp_apply (Prefunctor.map _ _) (Prefunctor.map _ _), ‚Üê Functor.map_comp]
      repeat rw [‚Üê Category.assoc]
      rw [‚Üê op_comp, ‚Üê Iso.trans_inv]
      try rw [Split.swap‚ÇÅ'_swap‚ÇÅ]
      try rw [Split.swap‚ÇÇ'_swap‚ÇÇ]
      try rw [Split.swap‚ÇÉ'_swap‚ÇÉ]
      try refine @Eq.trans _ _ (S.map (ùüô (_)).op s.2.1) _ ?_ (by rw [op_id, S.map_id]; rfl)
      try refine @Eq.trans _ _ (T.map (ùüô _).op s.2.2.2.1) _ ?_ (by rw [op_id, T.map_id]; rfl)
      try refine @Eq.trans _ _ (L.map (ùüô (_)).op  s.2.2.2.2) _ ?_ (by rw [op_id, L.map_id]; rfl)
      apply congrFun
      repeat rw [‚Üê op_comp]
      repeat apply congrArg
      simp [Split.indexEqToIso]
      apply hom_eq_if_toOrderHom_eq
      apply OrderHom.ext
      funext a
      repeat rw [toOrderHom_comp]
    ¬∑ rw [Split.map_lenIso_inv_fst]
      simp [toOrderHomIso_apply_inv]
    ¬∑ rw [Split.map_lenIso_inv_snd]
      simp [toOrderHomIso_apply_inv]
    ¬∑ simp [toOrderHomIso_apply_inv]
      rw [@toOrderHom_id (Split.obj X s.1).1]
      rfl

lemma assocTypeNat (S T L : SSet.FromWithInitial) {X Y : WithInitial SimplexCategory} (f : X ‚ü∂ Y) :
    (assocTypeEquiv S T L X).toFun ‚àò (join (join S T) L).map f.op =
    (join S (join T L)).map f.op ‚àò (assocTypeEquiv S T L Y).toFun  := by
  funext s
  simp [assocTypeEquiv, assocTypeMap1]
  match s with
  | joinType.comp i (s1, s2) =>
  match s1 with
  | joinType.comp p s3 =>
  refine joinType_ext _ _ (Split.sourceValue_map‚ÇÅ f i p) ?_
  simp only [pair, prod_Hom, MonoidalCategory.tensor_obj, Opposite.unop_op, prodOpEquiv_functor_obj,
    Functor.prod_obj, joinType_fst, Functor.comp_obj, Functor.comp_map, prodOpEquiv_functor_map,
    Quiver.Hom.unop_op, Functor.prod_map]
  apply Prod.ext
  swap
  simp [join, joinTypeMap]
  refine joinType_ext _ _ ?_ ?_
  simp only [pair, prod_Hom, MonoidalCategory.tensor_obj, Functor.comp_map, prodOpEquiv_functor_obj,
    Opposite.unop_op, prodOpEquiv_functor_map, Quiver.Hom.unop_op, Functor.prod_obj,
    Functor.prod_map, joinTypeMap, joinType_fst, Split.indexEqToIso._eq_1,
    Split.sourceValue_of_iso_inv]
  -- simp
  sorry
  simp [pair]
  apply Prod.ext
  all_goals
    simp [join, joinTypeMap, pair]
    repeat rw [‚Üê types_comp_apply (Prefunctor.map _ _) (Prefunctor.map _ _), ‚Üê Functor.map_comp]
    apply congrFun
    repeat rw [‚Üê op_comp]
    repeat apply congrArg
    simp [Split.indexEqToIso]
    apply hom_eq_if_toOrderHom_eq
    apply OrderHom.ext
    funext a
    repeat rw [toOrderHom_comp]
  ¬∑ rw [Fin.eq_iff_veq]
    simp [toOrderHomIso_apply_inv]
    simp [Split.toOrderHom_snd_apply, Split.toOrderHom_fst_apply, Split.incl‚ÇÇ, Split.incl‚ÇÅ,
    toOrderHomIso_apply_inv, Split.inclSucc‚ÇÅ]
    apply congrFun
    repeat apply congrArg
    rw [Fin.eq_iff_veq]
    simp













end Associator

section standardSimplex
open SSet.FromWithInitial
/-- The join of standard simplicies in `WithInitial SimplexCategory`-/
def joinStandardSimplex (X : WithInitial SimplexCategory) (i : Fin (Nat.succ (len X))) :
    SSet.FromWithInitial :=
  ((standardSimplex.prod standardSimplex) ‚ãô joinFunc).obj (Split.obj X i)

/-- An equivalence between the type `(joinStandardSimplex X i).obj Œîop` and the type
`Split.hom Œîop.unop X i`. -/
def joinStandardSimplexTypeEquiv (X : WithInitial SimplexCategory) (i : Fin (Nat.succ (len X)))
    (Œîop : (WithInitial SimplexCategory)·µí·µñ) :
    (joinStandardSimplex X i).obj Œîop ‚âÉ Split.hom Œîop.unop X i where
  toFun s :=
    Split.hom.split s.1
      ((standardSimplex.objEquiv (Split.obj X i).1
         (Opposite.op (Split.obj Œîop.unop s.1).1)).toFun s.2.1,
       (standardSimplex.objEquiv (Split.obj X i).2
          (Opposite.op (Split.obj Œîop.unop s.1).2)).toFun s.2.2)
  invFun s :=
    joinType.comp s.1
      ((standardSimplex.objEquiv (Split.obj X i).1
         (Opposite.op (Split.obj Œîop.unop s.1).1)).invFun s.2.1,
       (standardSimplex.objEquiv (Split.obj X i).2
          (Opposite.op (Split.obj Œîop.unop s.1).2)).invFun s.2.2)
  left_inv := by
    aesop_cat
  right_inv := by
    aesop_cat

lemma joinStandardSimplexTypeEquiv_nat (X : WithInitial SimplexCategory)
    (i : Fin (Nat.succ (len X)))
    {Œîop1 Œîop2 : (WithInitial SimplexCategory)·µí·µñ} (f : Œîop1 ‚ü∂  Œîop2) :
    (Equiv.toIso (joinStandardSimplexTypeEquiv X i Œîop2).symm).hom ‚àò (Split.homMap X i f.unop)
    = (joinStandardSimplex X i).map f ‚àò
    (Equiv.toIso (joinStandardSimplexTypeEquiv X i Œîop1).symm).hom := by
  rfl

lemma standardSimplexType_nat (X : WithInitial SimplexCategory)
    {Œîop1 Œîop2 : (WithInitial SimplexCategory)·µí·µñ} (f : Œîop1 ‚ü∂  Œîop2) :
    ((Equiv.toIso (standardSimplex.objEquiv X Œîop2)).hom ‚àò (standardSimplex.obj X).map f) =
    (CategoryStruct.comp f.unop ) ‚àò (Equiv.toIso (standardSimplex.objEquiv X Œîop1)).hom := by
  rfl

/-- An equivalance between
` (standardSimplex.obj X).obj Œîop` and `(joinStandardSimplexEquiv X i).obj Œîop` -/
def joinStandardSimplexEquivStandard (X : WithInitial SimplexCategory) (i : Fin (Nat.succ (len X)))
    (Œîop : (WithInitial SimplexCategory)·µí·µñ) :
    (standardSimplex.obj X).obj Œîop ‚âÖ (joinStandardSimplex X i).obj Œîop  :=
  Equiv.toIso (standardSimplex.objEquiv X Œîop) ‚â™‚â´
  Equiv.toIso (Split.splitJoinUnitEquiv X Œîop.unop i).symm ‚â™‚â´
  Equiv.toIso (joinStandardSimplexTypeEquiv X i Œîop).symm

/-- An equivalence in  `WithInitial SimplexCategory` between the standard simplex
`standardSimplex.obj X` and for any `i` in `Fin (Nat.succ (len X))` the object
`joinStandardSimplex X i `. -/
def joinStandardSimplexEquiv (X : WithInitial SimplexCategory) (i : Fin (Nat.succ (len X))) :
    standardSimplex.obj X ‚âÖ joinStandardSimplex X i :=  by
  refine NatIso.ofComponents (joinStandardSimplexEquivStandard X i) ?_
  intro Z1 Z2 f
  change (
    (Equiv.toIso (joinStandardSimplexTypeEquiv X i Z2).symm).hom
    ‚àò (Equiv.toIso (Split.splitJoinUnitEquiv X Z2.unop i).symm ).hom
    ‚àò (Equiv.toIso (standardSimplex.objEquiv X Z2)).hom
    ‚àò (standardSimplex.toPrefunctor.obj X).map f
    )  =_
  rw [standardSimplexType_nat]
  rw [‚Üê Function.comp.assoc, ‚Üê Function.comp.assoc]
  nth_rewrite 2 [Function.comp.assoc]
  rw [Split.splitJoinUnitEquiv_naturality_equiv, ‚Üê Function.comp.assoc,
    joinStandardSimplexTypeEquiv_nat]
  rfl

end standardSimplex
end FromWithInitial
end SSet
