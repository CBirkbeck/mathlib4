/-
Copyright (c) 2024 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Tooby-Smith
-/
import Mathlib.AlgebraicTopology.SimplexCategory
import Mathlib.AlgebraicTopology.SimplicialObject
import Mathlib.AlgebraicTopology.SimplicialSet
import Mathlib.CategoryTheory.WithTerminal

universe v u
open CategoryTheory CategoryTheory.Limits
open Simplicial
open WithInitial
open SimplexCategory.WithInitial

def joinType  (S T : (WithInitial SimplexCategory)·µí·µñ ‚•§  Type u ) {n : ‚Ñï}
    (i : Fin (Nat.succ n)) : Type u :=
  S.obj (Opposite.op (mk i.val)) √ó T.obj (Opposite.op (mk i.rev.val))

lemma joinType.Iso {n : ‚Ñï} {i j: Fin (Nat.succ n)}
    (S T : (WithInitial SimplexCategory)·µí·µñ ‚•§  Type u ) (hij : i = j) :
    joinType S T i  = joinType S T j := by
  rw [hij]

inductive JoinStruct (S T : (WithInitial SimplexCategory)·µí·µñ ‚•§  Type u)
    (n : ‚Ñï)  where
  | comp : (i : Fin (Nat.succ n)) ‚Üí joinType S T i ‚Üí JoinStruct S T n

lemma JoinStruct.ext {S T : (WithInitial SimplexCategory)·µí·µñ ‚•§  Type u} {n : ‚Ñï}
    (s t : JoinStruct S T n) (h1 : s.1 = t.1)
    (h41 : S.map (homMk ((Fin.castIso ((fin_eq_to_val h1).symm)) : Fin t.1.val ‚Üío Fin s.1.val)).op s.2.1 =t.2.1)
    (h42 : T.map (homMk ((Fin.castIso ((fin_eq_to_rev h1).symm)) : Fin t.1.rev ‚Üío Fin s.1.rev.val)).op s.2.2 =t.2.2) :
    s = t := by
  match s, t with
  |  JoinStruct.comp i s, JoinStruct.comp j t =>
    simp at h1
    subst h1
    congr
    change S.map (homMk (OrderHom.id :  Fin i.val ‚Üío Fin i.val)).op s.1 = _ at h41
    change T.map (homMk (OrderHom.id :  Fin i.rev.val ‚Üío Fin i.rev.val)).op s.2 = _ at h42
    rw [homMk_id, op_id, S.map_id]  at h41
    rw [homMk_id, op_id, T.map_id]  at h42
    simp at h41 h42
    change (s.1, s.2) = (t.1, t.2)
    rw [h41, h42]


def joinMap (S T :  (WithInitial SimplexCategory)·µí·µñ ‚•§  Type u)
    {Z1 Z2 : WithInitial SimplexCategory} (f : Z1 ‚ü∂ Z2)
    (s : JoinStruct S T (len Z2)) : JoinStruct S T (len Z1) :=
  match s with
  | JoinStruct.comp i s =>
    JoinStruct.comp
      (nat (preimageInitialSegmentObj f i))
      (S.map (map‚ÇÅ f i).op s.1, T.map (revMap‚ÇÅ f i).op s.2)

def join (S T : (WithInitial SimplexCategory)·µí·µñ ‚•§  Type u) :
    (WithInitial SimplexCategory)·µí·µñ ‚•§  Type u where
  obj X := JoinStruct S T (len (Opposite.unop X))
  map f := joinMap S T f.unop
  map_id := by
    intro Z
    cases Z
    rename_i Z
    funext s
    refine JoinStruct.ext (joinMap S T (ùüô Z) s) s ?_ ?_ ?_
    ¬∑ exact nat_id s.1 (preimageInitialSegmentObj (ùüô Z) s.1) (by rfl)
    ¬∑ simp [joinMap]
      rw [‚Üê types_comp_apply (S.map _) (S.map _),‚Üê S.map_comp, ‚Üê op_comp]
      nth_rewrite 3 [show s.2.1 = S.map (ùüô  ((mk s.1))).op s.2.1 by
        rw [op_id, S.map_id, types_id_apply]]
      apply congrFun
      repeat apply congrArg
      exact map‚ÇÅ_id s.1
    ¬∑ simp [joinMap]
      rw [‚Üê types_comp_apply (T.map _) (T.map _),‚Üê T.map_comp, ‚Üê op_comp]
      nth_rewrite 3 [show s.2.2 = T.map (ùüô  ((mk s.1.rev))).op s.2.2 by
        rw [op_id, T.map_id, types_id_apply]]
      apply congrFun
      repeat apply congrArg
      exact revMap‚ÇÅ_id s.1
  map_comp := by
    intro X Y Z f g
    cases X
    cases Y
    cases Z
    cases f
    cases g
    rename_i X Y Z g f
    funext s
    symm
    refine JoinStruct.ext ((joinMap S T f ‚àò  joinMap S T g) s) (joinMap S T (f ‚â´ g) s) ?_ ?_ ?_
    ¬∑ exact nat_comp f g s.1
    ¬∑ simp [joinMap]
      repeat rw [‚Üê types_comp_apply (S.map _) (S.map _),‚Üê S.map_comp, ‚Üê op_comp]
      apply congrFun
      repeat apply congrArg
      symm
      simp [Category.assoc]
      exact map‚ÇÅ_comp f g s.1
    ¬∑ simp [joinMap]
      repeat rw [‚Üê types_comp_apply (T.map _) (T.map _),‚Üê T.map_comp, ‚Üê op_comp]
      apply congrFun
      repeat apply congrArg
      symm
      simp [Category.assoc]
      exact revMap‚ÇÅ_comp f g s.1

def join.map {S1 T1 S2 T2: (WithInitial SimplexCategory)·µí·µñ ‚•§  Type u} (Œ∑ : S1 ‚ü∂ S2)
    (Œµ : T1 ‚ü∂ T2) : join S1 T1 ‚ü∂ join S2 T2 where
  app X := fun (s : JoinStruct S1 T1 (len (Opposite.unop X))) =>
      JoinStruct.comp s.1 ((Œ∑.app (Opposite.op (mk s.1.val))) s.2.1,
         (Œµ.app (Opposite.op (mk s.1.rev.val))) s.2.2 )
  naturality := by
    intro X Y f
    cases X
    cases Y
    cases f
    rename_i X Y f
    funext s
    apply JoinStruct.ext _ _ ?_ ?_ ?_
    ¬∑ rfl
    ¬∑ change S2.map (homMk OrderHom.id).op ( Œ∑.app _  (S1.map ((map‚ÇÅ f s.1).op) s.2.1)) =
          (Œ∑.app (Opposite.op (mk ‚Üës.1)) ‚â´ S2.map ((map‚ÇÅ f s.1).op)) ( s.2.1)
      rw [homMk_id, op_id, S2.map_id]
      rw [‚Üê Œ∑.naturality]
      rfl
    ¬∑ change T2.map (homMk OrderHom.id).op ( Œµ.app _  (T1.map ((revMap‚ÇÅ f s.1).op) s.2.2)) =
          ( Œµ.app (Opposite.op (mk ‚Üës.1.rev)) ‚â´ T2.map ((revMap‚ÇÅ f s.1).op)) (s.2.2)
      rw [homMk_id, op_id, T2.map_id]
      rw [‚Üê Œµ.naturality]
      rfl

def join.func :
    (((WithInitial SimplexCategory)·µí·µñ ‚•§  Type u) √ó ((WithInitial SimplexCategory)·µí·µñ ‚•§  Type u))
    ‚•§  ((WithInitial SimplexCategory)·µí·µñ ‚•§  Type u) where
  obj S := join S.1 S.2
  map Œ∑ := join.map Œ∑.1 Œ∑.2

def join.fun_terminal :  ((WithTerminal (SimplexCategory)·µí·µñ ‚•§  Type u) √ó (WithTerminal (SimplexCategory)·µí·µñ ‚•§  Type u))
    ‚•§  ((WithInitial SimplexCategory)·µí·µñ ‚•§  Type u)  := sorry

def join.fun_augmented : SSet.Augmented √ó SSet.Augmented ‚•§ SSet.Augmented := by
