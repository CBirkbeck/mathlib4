/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johan Commelin, Scott Morrison, Adam Topaz
-/
import Mathlib.Tactic.Linarith
import Mathlib.CategoryTheory.Skeletal
import Mathlib.Data.Fintype.Sort
import Mathlib.Order.Category.NonemptyFinLinOrd
import Mathlib.CategoryTheory.Functor.ReflectsIso
import Mathlib.CategoryTheory.WithTerminal

#align_import algebraic_topology.simplex_category from "leanprover-community/mathlib"@"e8ac6315bcfcbaf2d19a046719c3b553206dac75"

/-! # The simplex category

We construct a skeletal model of the simplex category, with objects `‚Ñï` and the
morphism `n ‚ü∂ m` being the monotone maps from `Fin (n+1)` to `Fin (m+1)`.

We show that this category is equivalent to `NonemptyFinLinOrd`.

## Remarks

The definitions `SimplexCategory` and `SimplexCategory.Hom` are marked as irreducible.

We provide the following functions to work with these objects:
1. `SimplexCategory.mk` creates an object of `SimplexCategory` out of a natural number.
  Use the notation `[n]` in the `Simplicial` locale.
2. `SimplexCategory.len` gives the "length" of an object of `SimplexCategory`, as a natural.
3. `SimplexCategory.Hom.mk` makes a morphism out of a monotone map between `Fin`'s.
4. `SimplexCategory.Hom.toOrderHom` gives the underlying monotone map associated to a
  term of `SimplexCategory.Hom`.

-/


universe v

open CategoryTheory CategoryTheory.Limits

/-- The simplex category:
* objects are natural numbers `n : ‚Ñï`
* morphisms from `n` to `m` are monotone functions `Fin (n+1) ‚Üí Fin (m+1)`
-/
def SimplexCategory :=
  ‚Ñï
#align simplex_category SimplexCategory

namespace SimplexCategory

section


-- porting note: the definition of `SimplexCategory` is made irreducible below
/-- Interpret a natural number as an object of the simplex category. -/
def mk (n : ‚Ñï) : SimplexCategory :=
  n
#align simplex_category.mk SimplexCategory.mk

/-- the `n`-dimensional simplex can be denoted `[n]` -/
scoped[Simplicial] notation "[" n "]" => SimplexCategory.mk n

-- TODO: Make `len` irreducible.
/-- The length of an object of `SimplexCategory`. -/
def len (n : SimplexCategory) : ‚Ñï :=
  n
#align simplex_category.len SimplexCategory.len

@[ext]
theorem ext (a b : SimplexCategory) : a.len = b.len ‚Üí a = b :=
  id
#align simplex_category.ext SimplexCategory.ext

attribute [irreducible] SimplexCategory

open Simplicial

@[simp]
theorem len_mk (n : ‚Ñï) : [n].len = n :=
  rfl
#align simplex_category.len_mk SimplexCategory.len_mk

@[simp]
theorem mk_len (n : SimplexCategory) : ([n.len] : SimplexCategory) = n :=
  rfl
#align simplex_category.mk_len SimplexCategory.mk_len

/-- A recursor for `SimplexCategory`. Use it as `induction Œî using SimplexCategory.rec`. -/
protected def rec {F : SimplexCategory ‚Üí Sort*} (h : ‚àÄ n : ‚Ñï, F [n]) : ‚àÄ X, F X := fun n =>
  h n.len
#align simplex_category.rec SimplexCategory.rec

-- porting note: removed @[nolint has_nonempty_instance]
/-- Morphisms in the `SimplexCategory`. -/
protected def Hom (a b : SimplexCategory) :=
  Fin (a.len + 1) ‚Üío Fin (b.len + 1)
#align simplex_category.hom SimplexCategory.Hom

namespace Hom

/-- Make a morphism in `SimplexCategory` from a monotone map of `Fin`'s. -/
def mk {a b : SimplexCategory} (f : Fin (a.len + 1) ‚Üío Fin (b.len + 1)) : SimplexCategory.Hom a b :=
  f
#align simplex_category.hom.mk SimplexCategory.Hom.mk

/-- Recover the monotone map from a morphism in the simplex category. -/
def toOrderHom {a b : SimplexCategory} (f : SimplexCategory.Hom a b) :
    Fin (a.len + 1) ‚Üío Fin (b.len + 1) :=
  f
#align simplex_category.hom.to_order_hom SimplexCategory.Hom.toOrderHom

theorem ext' {a b : SimplexCategory} (f g : SimplexCategory.Hom a b) :
    f.toOrderHom = g.toOrderHom ‚Üí f = g :=
  id
#align simplex_category.hom.ext SimplexCategory.Hom.ext'

attribute [irreducible] SimplexCategory.Hom

@[simp]
theorem mk_toOrderHom {a b : SimplexCategory} (f : SimplexCategory.Hom a b) : mk f.toOrderHom = f :=
  rfl
#align simplex_category.hom.mk_to_order_hom SimplexCategory.Hom.mk_toOrderHom

@[simp]
theorem toOrderHom_mk {a b : SimplexCategory} (f : Fin (a.len + 1) ‚Üío Fin (b.len + 1)) :
    (mk f).toOrderHom = f :=
  rfl
#align simplex_category.hom.to_order_hom_mk SimplexCategory.Hom.toOrderHom_mk

theorem mk_toOrderHom_apply {a b : SimplexCategory} (f : Fin (a.len + 1) ‚Üío Fin (b.len + 1))
    (i : Fin (a.len + 1)) : (mk f).toOrderHom i = f i :=
  rfl
#align simplex_category.hom.mk_to_order_hom_apply SimplexCategory.Hom.mk_toOrderHom_apply

/-- Identity morphisms of `SimplexCategory`. -/
@[simp]
def id (a : SimplexCategory) : SimplexCategory.Hom a a :=
  mk OrderHom.id
#align simplex_category.hom.id SimplexCategory.Hom.id

/-- Composition of morphisms of `SimplexCategory`. -/
@[simp]
def comp {a b c : SimplexCategory} (f : SimplexCategory.Hom b c) (g : SimplexCategory.Hom a b) :
    SimplexCategory.Hom a c :=
  mk <| f.toOrderHom.comp g.toOrderHom
#align simplex_category.hom.comp SimplexCategory.Hom.comp

end Hom

@[simps]
instance smallCategory : SmallCategory.{0} SimplexCategory where
  Hom n m := SimplexCategory.Hom n m
  id m := SimplexCategory.Hom.id _
  comp f g := SimplexCategory.Hom.comp g f
#align simplex_category.small_category SimplexCategory.smallCategory

-- porting note: added because `Hom.ext'` is not triggered automatically
@[ext]
theorem Hom.ext {a b : SimplexCategory} (f g : a ‚ü∂ b) :
    f.toOrderHom = g.toOrderHom ‚Üí f = g :=
  Hom.ext' _ _

/-- The constant morphism from [0]. -/
def const (x : SimplexCategory) (i : Fin (x.len + 1)) : ([0] : SimplexCategory) ‚ü∂ x :=
  Hom.mk <| ‚ü®fun _ => i, by tauto‚ü©
#align simplex_category.const SimplexCategory.const

-- porting note: removed @[simp] as the linter complains
theorem const_comp (x y : SimplexCategory) (i : Fin (x.len + 1)) (f : x ‚ü∂ y) :
    const x i ‚â´ f = const y (f.toOrderHom i) :=
  rfl
#align simplex_category.const_comp SimplexCategory.const_comp

/-- Make a morphism `[n] ‚ü∂ [m]` from a monotone map between fin's.
This is useful for constructing morphisms between `[n]` directly
without identifying `n` with `[n].len`.
-/
@[simp]
def mkHom {n m : ‚Ñï} (f : Fin (n + 1) ‚Üío Fin (m + 1)) : ([n] : SimplexCategory) ‚ü∂ [m] :=
  SimplexCategory.Hom.mk f
#align simplex_category.mk_hom SimplexCategory.mkHom

theorem hom_zero_zero (f : ([0] : SimplexCategory) ‚ü∂ [0]) : f = ùüô _ := by
  ext : 3
  apply @Subsingleton.elim (Fin 1)
#align simplex_category.hom_zero_zero SimplexCategory.hom_zero_zero

end

open Simplicial

section Generators

/-!
## Generating maps for the simplex category

TODO: prove that the simplex category is equivalent to
one given by the following generators and relations.
-/


/-- The `i`-th face map from `[n]` to `[n+1]` -/
def Œ¥ {n} (i : Fin (n + 2)) : ([n] : SimplexCategory) ‚ü∂ [n + 1] :=
  mkHom (Fin.succAboveEmb i).toOrderHom
#align simplex_category.Œ¥ SimplexCategory.Œ¥

/-- The `i`-th degeneracy map from `[n+1]` to `[n]` -/
def œÉ {n} (i : Fin (n + 1)) : ([n + 1] : SimplexCategory) ‚ü∂ [n] :=
  mkHom
    { toFun := Fin.predAbove i
      monotone' := Fin.predAbove_right_monotone i }
#align simplex_category.œÉ SimplexCategory.œÉ

/-- The generic case of the first simplicial identity -/
theorem Œ¥_comp_Œ¥ {n} {i j : Fin (n + 2)} (H : i ‚â§ j) :
    Œ¥ i ‚â´ Œ¥ j.succ = Œ¥ j ‚â´ Œ¥ (Fin.castSucc i) := by
  ext k
  dsimp [Œ¥, Fin.succAbove]
  rcases i with ‚ü®i, _‚ü©
  rcases j with ‚ü®j, _‚ü©
  rcases k with ‚ü®k, _‚ü©
  split_ifs <;> ¬∑ simp at * <;> linarith
#align simplex_category.Œ¥_comp_Œ¥ SimplexCategory.Œ¥_comp_Œ¥

theorem Œ¥_comp_Œ¥' {n} {i : Fin (n + 2)} {j : Fin (n + 3)} (H : Fin.castSucc i < j) :
    Œ¥ i ‚â´ Œ¥ j =
      Œ¥ (j.pred fun (hj : j = 0) => by simp [hj, Fin.not_lt_zero] at H) ‚â´
        Œ¥ (Fin.castSucc i) := by
  rw [‚Üê Œ¥_comp_Œ¥]
  ¬∑ rw [Fin.succ_pred]
  ¬∑ simpa only [Fin.le_iff_val_le_val, ‚Üê Nat.lt_succ_iff, Nat.succ_eq_add_one, ‚Üê Fin.val_succ,
      j.succ_pred, Fin.lt_iff_val_lt_val] using H
#align simplex_category.Œ¥_comp_Œ¥' SimplexCategory.Œ¥_comp_Œ¥'

theorem Œ¥_comp_Œ¥'' {n} {i : Fin (n + 3)} {j : Fin (n + 2)} (H : i ‚â§ Fin.castSucc j) :
    Œ¥ (i.castLT (Nat.lt_of_le_of_lt (Fin.le_iff_val_le_val.mp H) j.is_lt)) ‚â´ Œ¥ j.succ =
      Œ¥ j ‚â´ Œ¥ i := by
  rw [Œ¥_comp_Œ¥]
  ¬∑ rfl
  ¬∑ exact H
#align simplex_category.Œ¥_comp_Œ¥'' SimplexCategory.Œ¥_comp_Œ¥''

/-- The special case of the first simplicial identity -/
@[reassoc]
theorem Œ¥_comp_Œ¥_self {n} {i : Fin (n + 2)} : Œ¥ i ‚â´ Œ¥ (Fin.castSucc i) = Œ¥ i ‚â´ Œ¥ i.succ :=
  (Œ¥_comp_Œ¥ (le_refl i)).symm
#align simplex_category.Œ¥_comp_Œ¥_self SimplexCategory.Œ¥_comp_Œ¥_self

@[reassoc]
theorem Œ¥_comp_Œ¥_self' {n} {i : Fin (n + 2)} {j : Fin (n + 3)} (H : j = Fin.castSucc i) :
    Œ¥ i ‚â´ Œ¥ j = Œ¥ i ‚â´ Œ¥ i.succ := by
  subst H
  rw [Œ¥_comp_Œ¥_self]
#align simplex_category.Œ¥_comp_Œ¥_self' SimplexCategory.Œ¥_comp_Œ¥_self'

/-- The second simplicial identity -/
@[reassoc]
theorem Œ¥_comp_œÉ_of_le {n} {i : Fin (n + 2)} {j : Fin (n + 1)} (H : i ‚â§ Fin.castSucc j) :
    Œ¥ (Fin.castSucc i) ‚â´ œÉ j.succ = œÉ j ‚â´ Œ¥ i := by
  ext k : 3
  dsimp [œÉ, Œ¥]
  rcases le_or_lt i k with (hik | hik)
  ¬∑ rw [Fin.succAbove_of_le_castSucc _ _ (Fin.castSucc_le_castSucc_iff.mpr hik),
    Fin.succ_predAbove_succ, Fin.succAbove_of_le_castSucc]
    rcases le_or_lt k (j.castSucc) with (hjk | hjk)
    ¬∑ rwa [Fin.predAbove_of_le_castSucc _ _ hjk, Fin.castSucc_castPred]
    ¬∑ rw [Fin.le_castSucc_iff, Fin.predAbove_of_castSucc_lt _ _ hjk, Fin.succ_pred]
      exact H.trans_lt hjk
  ¬∑ rw [Fin.succAbove_of_castSucc_lt _ _ (Fin.castSucc_lt_castSucc_iff.mpr hik)]
    have hjk := H.trans_lt' hik
    rw [Fin.predAbove_of_le_castSucc _ _ (Fin.castSucc_le_castSucc_iff.mpr
      (hjk.trans (Fin.castSucc_lt_succ _)).le),
      Fin.predAbove_of_le_castSucc _ _ hjk.le, Fin.castPred_castSucc, Fin.succAbove_of_castSucc_lt,
      Fin.castSucc_castPred]
    rwa [Fin.castSucc_castPred]
#align simplex_category.Œ¥_comp_œÉ_of_le SimplexCategory.Œ¥_comp_œÉ_of_le

/-- The first part of the third simplicial identity -/
@[reassoc]
theorem Œ¥_comp_œÉ_self {n} {i : Fin (n + 1)} :
    Œ¥ (Fin.castSucc i) ‚â´ œÉ i = ùüô ([n] : SimplexCategory) := by
  rcases i with ‚ü®i, hi‚ü©
  ext ‚ü®j, hj‚ü©
  simp? at hj says simp only [len_mk] at hj
  dsimp [œÉ, Œ¥, Fin.predAbove, Fin.succAbove]
  simp only [Fin.lt_iff_val_lt_val, Fin.dite_val, Fin.ite_val, Fin.coe_pred, ge_iff_le,
    Fin.coe_castLT, dite_eq_ite]
  split_ifs
  any_goals simp
  all_goals linarith
#align simplex_category.Œ¥_comp_œÉ_self SimplexCategory.Œ¥_comp_œÉ_self

@[reassoc]
theorem Œ¥_comp_œÉ_self' {n} {j : Fin (n + 2)} {i : Fin (n + 1)} (H : j = Fin.castSucc i) :
    Œ¥ j ‚â´ œÉ i = ùüô ([n] : SimplexCategory) := by
  subst H
  rw [Œ¥_comp_œÉ_self]
#align simplex_category.Œ¥_comp_œÉ_self' SimplexCategory.Œ¥_comp_œÉ_self'

/-- The second part of the third simplicial identity -/
@[reassoc]
theorem Œ¥_comp_œÉ_succ {n} {i : Fin (n + 1)} : Œ¥ i.succ ‚â´ œÉ i = ùüô ([n] : SimplexCategory) := by
  ext j
  rcases i with ‚ü®i, _‚ü©
  rcases j with ‚ü®j, _‚ü©
  dsimp [Œ¥, œÉ, Fin.succAbove, Fin.predAbove]
  split_ifs <;> simp <;> simp at * <;> linarith
#align simplex_category.Œ¥_comp_œÉ_succ SimplexCategory.Œ¥_comp_œÉ_succ

@[reassoc]
theorem Œ¥_comp_œÉ_succ' {n} (j : Fin (n + 2)) (i : Fin (n + 1)) (H : j = i.succ) :
    Œ¥ j ‚â´ œÉ i = ùüô ([n] : SimplexCategory) := by
  subst H
  rw [Œ¥_comp_œÉ_succ]
#align simplex_category.Œ¥_comp_œÉ_succ' SimplexCategory.Œ¥_comp_œÉ_succ'

/-- The fourth simplicial identity -/
@[reassoc]
theorem Œ¥_comp_œÉ_of_gt {n} {i : Fin (n + 2)} {j : Fin (n + 1)} (H : Fin.castSucc j < i) :
    Œ¥ i.succ ‚â´ œÉ (Fin.castSucc j) = œÉ j ‚â´ Œ¥ i := by
  ext k : 3
  dsimp [Œ¥, œÉ]
  rcases le_or_lt k i with (hik | hik)
  ¬∑ rw [Fin.succAbove_of_castSucc_lt _ _ (Fin.castSucc_lt_succ_iff.mpr hik)]
    rcases le_or_lt k (j.castSucc) with (hjk | hjk)
    ¬∑ rw [Fin.predAbove_of_le_castSucc _ _
      (Fin.castSucc_le_castSucc_iff.mpr hjk), Fin.castPred_castSucc,
      Fin.predAbove_of_le_castSucc _ _ hjk, Fin.succAbove_of_castSucc_lt, Fin.castSucc_castPred]
      rw [Fin.castSucc_castPred]
      exact hjk.trans_lt H
    ¬∑ rw [Fin.predAbove_of_castSucc_lt _ _ (Fin.castSucc_lt_castSucc_iff.mpr hjk),
      Fin.predAbove_of_castSucc_lt _ _ hjk, Fin.succAbove_of_castSucc_lt,
      Fin.castSucc_pred_eq_pred_castSucc]
      rwa [Fin.castSucc_lt_iff_succ_le, Fin.succ_pred]
  ¬∑ rw [Fin.succAbove_of_le_castSucc _ _ (Fin.succ_le_castSucc_iff.mpr hik)]
    have hjk := H.trans hik
    rw [Fin.predAbove_of_castSucc_lt _ _ hjk, Fin.predAbove_of_castSucc_lt _ _
      (Fin.castSucc_lt_succ_iff.mpr hjk.le),
    Fin.pred_succ, Fin.succAbove_of_le_castSucc, Fin.succ_pred]
    rwa [Fin.le_castSucc_pred_iff]
#align simplex_category.Œ¥_comp_œÉ_of_gt SimplexCategory.Œ¥_comp_œÉ_of_gt

@[reassoc]
theorem Œ¥_comp_œÉ_of_gt' {n} {i : Fin (n + 3)} {j : Fin (n + 2)} (H : j.succ < i) :
    Œ¥ i ‚â´ œÉ j = œÉ (j.castLT ((add_lt_add_iff_right 1).mp (lt_of_lt_of_le H i.is_le))) ‚â´
      Œ¥ (i.pred fun (hi : i = 0) => by simp only [Fin.not_lt_zero, hi] at H) := by
  rw [‚Üê Œ¥_comp_œÉ_of_gt]
  ¬∑ simp
  ¬∑ rw [Fin.castSucc_castLT, ‚Üê Fin.succ_lt_succ_iff, Fin.succ_pred]
    exact H
#align simplex_category.Œ¥_comp_œÉ_of_gt' SimplexCategory.Œ¥_comp_œÉ_of_gt'

/-- The fifth simplicial identity -/
@[reassoc]
theorem œÉ_comp_œÉ {n} {i j : Fin (n + 1)} (H : i ‚â§ j) :
    œÉ (Fin.castSucc i) ‚â´ œÉ j = œÉ j.succ ‚â´ œÉ i := by
  ext k : 3
  dsimp [œÉ]
  cases' k using Fin.lastCases with k
  ¬∑ simp only [len_mk, Fin.predAbove_right_last]
  ¬∑ cases' k using Fin.cases with k
    ¬∑ rw [Fin.castSucc_zero, Fin.predAbove_of_le_castSucc _ 0 (Fin.zero_le _),
      Fin.predAbove_of_le_castSucc _ _ (Fin.zero_le _), Fin.castPred_zero,
      Fin.predAbove_of_le_castSucc _ 0 (Fin.zero_le _),
      Fin.predAbove_of_le_castSucc _ _ (Fin.zero_le _)]
    ¬∑ rcases le_or_lt i k with (h | h)
      ¬∑ simp_rw [Fin.predAbove_of_castSucc_lt i.castSucc _ (Fin.castSucc_lt_castSucc_iff.mpr
        (Fin.castSucc_lt_succ_iff.mpr h)), ‚Üê Fin.succ_castSucc, Fin.pred_succ,
        Fin.succ_predAbove_succ]
        rw [Fin.predAbove_of_castSucc_lt i _ (Fin.castSucc_lt_succ_iff.mpr _), Fin.pred_succ]
        rcases le_or_lt k j with (hkj | hkj)
        ¬∑ rwa [Fin.predAbove_of_le_castSucc _ _ (Fin.castSucc_le_castSucc_iff.mpr hkj),
          Fin.castPred_castSucc]
        ¬∑ rw [Fin.predAbove_of_castSucc_lt _ _ (Fin.castSucc_lt_castSucc_iff.mpr hkj),
          Fin.le_pred_iff,
          Fin.succ_le_castSucc_iff]
          exact H.trans_lt hkj
      ¬∑ simp_rw [Fin.predAbove_of_le_castSucc i.castSucc _ (Fin.castSucc_le_castSucc_iff.mpr
        (Fin.succ_le_castSucc_iff.mpr h)), Fin.castPred_castSucc, ‚Üê Fin.succ_castSucc,
        Fin.succ_predAbove_succ]
        rw [Fin.predAbove_of_le_castSucc _ k.castSucc
        (Fin.castSucc_le_castSucc_iff.mpr (h.le.trans H)),
        Fin.castPred_castSucc, Fin.predAbove_of_le_castSucc _ k.succ
        (Fin.succ_le_castSucc_iff.mpr (H.trans_lt' h)), Fin.predAbove_of_le_castSucc _ k.succ
        (Fin.succ_le_castSucc_iff.mpr h)]
#align simplex_category.œÉ_comp_œÉ SimplexCategory.œÉ_comp_œÉ

/--
If `f : [m] ‚ü∂ [n+1]` is a morphism and `j` is not in the range of `f`,
then `factor_Œ¥ f j` is a morphism `[m] ‚ü∂ [n]` such that
`factor_Œ¥ f j ‚â´ Œ¥ j = f` (as witnessed by `factor_Œ¥_spec`).
-/
def factor_Œ¥ {m n : ‚Ñï} (f : ([m] : SimplexCategory) ‚ü∂ [n+1]) (j : Fin (n+2)) :
    ([m] : SimplexCategory) ‚ü∂ [n] :=
  f ‚â´ œÉ (Fin.predAbove 0 j)

open Fin in
lemma factor_Œ¥_spec {m n : ‚Ñï} (f : ([m] : SimplexCategory) ‚ü∂ [n+1]) (j : Fin (n+2))
    (hj : ‚àÄ (k : Fin (m+1)), f.toOrderHom k ‚â† j) :
    factor_Œ¥ f j ‚â´ Œ¥ j = f := by
  ext k : 3
  specialize hj k
  dsimp [factor_Œ¥, Œ¥, œÉ]
  cases' j using cases with j
  ¬∑ rw [predAbove_of_le_castSucc _ _ (zero_le _), castPred_zero, predAbove_of_castSucc_lt 0 _
    (castSucc_zero ‚ñ∏ pos_of_ne_zero hj),
    zero_succAbove, succ_pred]
  ¬∑ rw [predAbove_of_castSucc_lt 0 _ (castSucc_zero ‚ñ∏ succ_pos _), pred_succ]
    rcases hj.lt_or_lt with (hj | hj)
    ¬∑ rw [predAbove_of_le_castSucc j _]
      swap
      ¬∑ exact (le_castSucc_iff.mpr hj)
      ¬∑ rw [succAbove_of_castSucc_lt]
        swap
        ¬∑ rwa [castSucc_lt_succ_iff, castPred_le_iff, le_castSucc_iff]
        rw [castSucc_castPred]
    ¬∑ rw [predAbove_of_castSucc_lt]
      swap
      ¬∑ exact (castSucc_lt_succ _).trans hj
      rw [succAbove_of_le_castSucc]
      swap
      ¬∑ rwa [succ_le_castSucc_iff, lt_pred_iff]
      rw [succ_pred]

end Generators

section Skeleton

/-- The functor that exhibits `SimplexCategory` as skeleton
of `NonemptyFinLinOrd` -/
@[simps obj map]
def skeletalFunctor : SimplexCategory ‚•§ NonemptyFinLinOrd where
  obj a := NonemptyFinLinOrd.of (Fin (a.len + 1))
  map f := f.toOrderHom
#align simplex_category.skeletal_functor SimplexCategory.skeletalFunctor

theorem skeletalFunctor.coe_map {Œî‚ÇÅ Œî‚ÇÇ : SimplexCategory} (f : Œî‚ÇÅ ‚ü∂ Œî‚ÇÇ) :
    ‚Üë(skeletalFunctor.map f) = f.toOrderHom :=
  rfl
#align simplex_category.skeletal_functor.coe_map SimplexCategory.skeletalFunctor.coe_map

theorem skeletal : Skeletal SimplexCategory := fun X Y ‚ü®I‚ü© => by
  suffices Fintype.card (Fin (X.len + 1)) = Fintype.card (Fin (Y.len + 1)) by
    ext
    simpa
  apply Fintype.card_congr
  exact ((skeletalFunctor ‚ãô forget NonemptyFinLinOrd).mapIso I).toEquiv
#align simplex_category.skeletal SimplexCategory.skeletal

namespace SkeletalFunctor

instance : Full skeletalFunctor where
  preimage f := SimplexCategory.Hom.mk f

instance : Faithful skeletalFunctor where
  map_injective {_ _ f g} h := by
    ext1
    exact h

instance : EssSurj skeletalFunctor where
  mem_essImage X :=
    ‚ü®mk (Fintype.card X - 1 : ‚Ñï),
      ‚ü®by
        have aux : Fintype.card X = Fintype.card X - 1 + 1 :=
          (Nat.succ_pred_eq_of_pos <| Fintype.card_pos_iff.mpr ‚ü®‚ä•‚ü©).symm
        let f := monoEquivOfFin X aux
        have hf := (Finset.univ.orderEmbOfFin aux).strictMono
        refine'
          { hom := ‚ü®f, hf.monotone‚ü©
            inv := ‚ü®f.symm, _‚ü©
            hom_inv_id := by ext1; apply f.symm_apply_apply
            inv_hom_id := by ext1; apply f.apply_symm_apply }
        intro i j h
        show f.symm i ‚â§ f.symm j
        rw [‚Üê hf.le_iff_le]
        show f (f.symm i) ‚â§ f (f.symm j)
        simpa only [OrderIso.apply_symm_apply]‚ü©‚ü©

noncomputable instance isEquivalence : IsEquivalence skeletalFunctor :=
  Equivalence.ofFullyFaithfullyEssSurj skeletalFunctor
#align simplex_category.skeletal_functor.is_equivalence SimplexCategory.SkeletalFunctor.isEquivalence

end SkeletalFunctor

/-- The equivalence that exhibits `SimplexCategory` as skeleton
of `NonemptyFinLinOrd` -/
noncomputable def skeletalEquivalence : SimplexCategory ‚âå NonemptyFinLinOrd :=
  Functor.asEquivalence skeletalFunctor
#align simplex_category.skeletal_equivalence SimplexCategory.skeletalEquivalence

end Skeleton

/-- `SimplexCategory` is a skeleton of `NonemptyFinLinOrd`.
-/
noncomputable def isSkeletonOf :
    IsSkeletonOf NonemptyFinLinOrd SimplexCategory skeletalFunctor where
  skel := skeletal
  eqv := SkeletalFunctor.isEquivalence
#align simplex_category.is_skeleton_of SimplexCategory.isSkeletonOf

/-- The truncated simplex category. -/
def Truncated (n : ‚Ñï) :=
  FullSubcategory fun a : SimplexCategory => a.len ‚â§ n
#align simplex_category.truncated SimplexCategory.Truncated

instance (n : ‚Ñï) : SmallCategory.{0} (Truncated n) :=
  FullSubcategory.category _

namespace Truncated

instance {n} : Inhabited (Truncated n) :=
  ‚ü®‚ü®[0], by simp‚ü©‚ü©

/-- The fully faithful inclusion of the truncated simplex category into the usual
simplex category.
-/
def inclusion {n : ‚Ñï} : SimplexCategory.Truncated n ‚•§ SimplexCategory :=
  fullSubcategoryInclusion _
#align simplex_category.truncated.inclusion SimplexCategory.Truncated.inclusion

instance (n : ‚Ñï) : Full (inclusion : Truncated n ‚•§ _) := FullSubcategory.full _
instance (n : ‚Ñï) : Faithful (inclusion : Truncated n ‚•§ _) := FullSubcategory.faithful _

end Truncated

section Concrete

instance : ConcreteCategory.{0} SimplexCategory where
  forget :=
    { obj := fun i => Fin (i.len + 1)
      map := fun f => f.toOrderHom }
  forget_faithful := ‚ü®fun h => by ext : 2; exact h‚ü©

end Concrete

section EpiMono

/-- A morphism in `SimplexCategory` is a monomorphism precisely when it is an injective function
-/
theorem mono_iff_injective {n m : SimplexCategory} {f : n ‚ü∂ m} :
    Mono f ‚Üî Function.Injective f.toOrderHom := by
  rw [‚Üê Functor.mono_map_iff_mono skeletalEquivalence.functor]
  dsimp only [skeletalEquivalence, Functor.asEquivalence_functor]
  simp only [skeletalFunctor_obj, skeletalFunctor_map,
    NonemptyFinLinOrd.mono_iff_injective, NonemptyFinLinOrd.coe_of]
#align simplex_category.mono_iff_injective SimplexCategory.mono_iff_injective

/-- A morphism in `SimplexCategory` is an epimorphism if and only if it is a surjective function
-/
theorem epi_iff_surjective {n m : SimplexCategory} {f : n ‚ü∂ m} :
    Epi f ‚Üî Function.Surjective f.toOrderHom := by
  rw [‚Üê Functor.epi_map_iff_epi skeletalEquivalence.functor]
  dsimp only [skeletalEquivalence, Functor.asEquivalence_functor]
  simp only [skeletalFunctor_obj, skeletalFunctor_map,
    NonemptyFinLinOrd.epi_iff_surjective, NonemptyFinLinOrd.coe_of]
#align simplex_category.epi_iff_surjective SimplexCategory.epi_iff_surjective

/-- A monomorphism in `SimplexCategory` must increase lengths-/
theorem len_le_of_mono {x y : SimplexCategory} {f : x ‚ü∂ y} : Mono f ‚Üí x.len ‚â§ y.len := by
  intro hyp_f_mono
  have f_inj : Function.Injective f.toOrderHom.toFun := mono_iff_injective.1 hyp_f_mono
  simpa using Fintype.card_le_of_injective f.toOrderHom.toFun f_inj
#align simplex_category.len_le_of_mono SimplexCategory.len_le_of_mono

theorem le_of_mono {n m : ‚Ñï} {f : ([n] : SimplexCategory) ‚ü∂ [m]} : CategoryTheory.Mono f ‚Üí n ‚â§ m :=
  len_le_of_mono
#align simplex_category.le_of_mono SimplexCategory.le_of_mono

/-- An epimorphism in `SimplexCategory` must decrease lengths-/
theorem len_le_of_epi {x y : SimplexCategory} {f : x ‚ü∂ y} : Epi f ‚Üí y.len ‚â§ x.len := by
  intro hyp_f_epi
  have f_surj : Function.Surjective f.toOrderHom.toFun := epi_iff_surjective.1 hyp_f_epi
  simpa using Fintype.card_le_of_surjective f.toOrderHom.toFun f_surj
#align simplex_category.len_le_of_epi SimplexCategory.len_le_of_epi

theorem le_of_epi {n m : ‚Ñï} {f : ([n] : SimplexCategory) ‚ü∂ [m]} : Epi f ‚Üí m ‚â§ n :=
  len_le_of_epi
#align simplex_category.le_of_epi SimplexCategory.le_of_epi

instance {n : ‚Ñï} {i : Fin (n + 2)} : Mono (Œ¥ i) := by
  rw [mono_iff_injective]
  exact Fin.succAbove_right_injective

instance {n : ‚Ñï} {i : Fin (n + 1)} : Epi (œÉ i) := by
  rw [epi_iff_surjective]
  intro b
  simp only [œÉ, mkHom, Hom.toOrderHom_mk, OrderHom.coe_mk]
  by_cases h : b ‚â§ i
  ¬∑ use b
    -- This was not needed before leanprover/lean4#2644
    dsimp
    rw [Fin.predAbove_of_le_castSucc i b (by simpa only [Fin.coe_eq_castSucc] using h)]
    simp only [len_mk, Fin.coe_eq_castSucc, Fin.castPred_castSucc]
  ¬∑ use b.succ
    -- This was not needed before leanprover/lean4#2644
    dsimp
    rw [Fin.predAbove_of_castSucc_lt i b.succ _, Fin.pred_succ]
    rw [not_le] at h
    rw [Fin.lt_iff_val_lt_val] at h ‚ä¢
    simpa only [Fin.val_succ, Fin.coe_castSucc] using Nat.lt.step h

instance : ReflectsIsomorphisms (forget SimplexCategory) :=
  ‚ü®fun f hf =>
    IsIso.of_iso
      { hom := f
        inv := Hom.mk
            { toFun := inv ((forget SimplexCategory).map f)
              monotone' := fun y‚ÇÅ y‚ÇÇ h => by
                by_cases h' : y‚ÇÅ < y‚ÇÇ
                ¬∑ by_contra h''
                  apply not_le.mpr h'
                  convert f.toOrderHom.monotone (le_of_not_ge h'')
                  all_goals
                    exact (congr_hom (Iso.inv_hom_id
                      (asIso ((forget SimplexCategory).map f))) _).symm
                ¬∑ rw [eq_of_le_of_not_lt h h'] }
        hom_inv_id := by
          ext1
          ext1
          exact Iso.hom_inv_id (asIso ((forget _).map f))
        inv_hom_id := by
          ext1
          ext1
          exact Iso.inv_hom_id (asIso ((forget _).map f)) }‚ü©

theorem isIso_of_bijective {x y : SimplexCategory} {f : x ‚ü∂ y}
    (hf : Function.Bijective f.toOrderHom.toFun) : IsIso f :=
  haveI : IsIso ((forget SimplexCategory).map f) := (isIso_iff_bijective _).mpr hf
  isIso_of_reflects_iso f (forget SimplexCategory)
#align simplex_category.is_iso_of_bijective SimplexCategory.isIso_of_bijective

/-- An isomorphism in `SimplexCategory` induces an `OrderIso`. -/
@[simp]
def orderIsoOfIso {x y : SimplexCategory} (e : x ‚âÖ y) : Fin (x.len + 1) ‚âÉo Fin (y.len + 1) :=
  Equiv.toOrderIso
    { toFun := e.hom.toOrderHom
      invFun := e.inv.toOrderHom
      left_inv := fun i => by
        simpa only using congr_arg (fun œÜ => (Hom.toOrderHom œÜ) i) e.hom_inv_id
      right_inv := fun i => by
        simpa only using congr_arg (fun œÜ => (Hom.toOrderHom œÜ) i) e.inv_hom_id }
    e.hom.toOrderHom.monotone e.inv.toOrderHom.monotone
#align simplex_category.order_iso_of_iso SimplexCategory.orderIsoOfIso

theorem iso_eq_iso_refl {x : SimplexCategory} (e : x ‚âÖ x) : e = Iso.refl x := by
  have h : (Finset.univ : Finset (Fin (x.len + 1))).card = x.len + 1 := Finset.card_fin (x.len + 1)
  have eq‚ÇÅ := Finset.orderEmbOfFin_unique' h fun i => Finset.mem_univ ((orderIsoOfIso e) i)
  have eq‚ÇÇ :=
    Finset.orderEmbOfFin_unique' h fun i => Finset.mem_univ ((orderIsoOfIso (Iso.refl x)) i)
  -- Porting note: the proof was rewritten from this point in #3414 (reenableeta)
  -- It could be investigated again to see if the original can be restored.
  ext x
  replace eq‚ÇÅ := congr_arg (¬∑ x) eq‚ÇÅ
  replace eq‚ÇÇ := congr_arg (¬∑ x) eq‚ÇÇ.symm
  simp_all
#align simplex_category.iso_eq_iso_refl SimplexCategory.iso_eq_iso_refl

theorem eq_id_of_isIso {x : SimplexCategory} (f : x ‚ü∂ x) [IsIso f] : f = ùüô _ :=
  congr_arg (fun œÜ : _ ‚âÖ _ => œÜ.hom) (iso_eq_iso_refl (asIso f))
#align simplex_category.eq_id_of_is_iso SimplexCategory.eq_id_of_isIso

theorem eq_œÉ_comp_of_not_injective' {n : ‚Ñï} {Œî' : SimplexCategory} (Œ∏ : mk (n + 1) ‚ü∂ Œî')
    (i : Fin (n + 1)) (hi : Œ∏.toOrderHom (Fin.castSucc i) = Œ∏.toOrderHom i.succ) :
    ‚àÉ Œ∏' : mk n ‚ü∂ Œî', Œ∏ = œÉ i ‚â´ Œ∏' := by
  use Œ¥ i.succ ‚â´ Œ∏
  ext1; ext1; ext1 x
  simp only [Hom.toOrderHom_mk, Function.comp_apply, OrderHom.comp_coe, Hom.comp,
    smallCategory_comp, œÉ, mkHom, OrderHom.coe_mk]
  by_cases h' : x ‚â§ Fin.castSucc i
  ¬∑ -- This was not needed before leanprover/lean4#2644
    dsimp
    rw [Fin.predAbove_of_le_castSucc i x h']
    dsimp [Œ¥]
    erw [Fin.succAbove_of_castSucc_lt _ _ _]
    ¬∑ rw [Fin.castSucc_castPred]
    ¬∑ exact (Fin.castSucc_lt_succ_iff.mpr h')
  ¬∑ simp only [not_le] at h'
    let y := x.pred <| by rintro (rfl : x = 0); simp at h'
    have hy : x = y.succ := (Fin.succ_pred x _).symm
    rw [hy] at h' ‚ä¢
    -- This was not needed before leanprover/lean4#2644
    conv_rhs => dsimp
    rw [Fin.predAbove_of_castSucc_lt i y.succ h', Fin.pred_succ]
    by_cases h'' : y = i
    ¬∑ rw [h'']
      refine hi.symm.trans ?_
      congr 1
      dsimp [Œ¥]
      erw [Fin.succAbove_of_castSucc_lt i.succ]
      exact Fin.lt_succ
    ¬∑ dsimp [Œ¥]
      erw [Fin.succAbove_of_le_castSucc i.succ _]
      simp only [Fin.lt_iff_val_lt_val, Fin.le_iff_val_le_val, Fin.val_succ, Fin.coe_castSucc,
        Nat.lt_succ_iff, Fin.ext_iff] at h' h'' ‚ä¢
      cases' Nat.le.dest h' with c hc
      cases c
      ¬∑ exfalso
        simp only [Nat.zero_eq, add_zero, len_mk, Fin.coe_pred, ge_iff_le] at hc
        rw [hc] at h''
        exact h'' rfl
      ¬∑ rw [‚Üê hc]
        simp only [add_le_add_iff_left, Nat.succ_eq_add_one, le_add_iff_nonneg_left, zero_le]
#align simplex_category.eq_œÉ_comp_of_not_injective' SimplexCategory.eq_œÉ_comp_of_not_injective'

theorem eq_œÉ_comp_of_not_injective {n : ‚Ñï} {Œî' : SimplexCategory} (Œ∏ : mk (n + 1) ‚ü∂ Œî')
    (hŒ∏ : ¬¨Function.Injective Œ∏.toOrderHom) :
    ‚àÉ (i : Fin (n + 1)) (Œ∏' : mk n ‚ü∂ Œî'), Œ∏ = œÉ i ‚â´ Œ∏' := by
  simp only [Function.Injective, exists_prop, not_forall] at hŒ∏
  -- as Œ∏ is not injective, there exists `x<y` such that `Œ∏ x = Œ∏ y`
  -- and then, `Œ∏ x = Œ∏ (x+1)`
  have hŒ∏‚ÇÇ : ‚àÉ x y : Fin (n + 2), (Hom.toOrderHom Œ∏) x = (Hom.toOrderHom Œ∏) y ‚àß x < y := by
    rcases hŒ∏ with ‚ü®x, y, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©
    by_cases h : x < y
    ¬∑ exact ‚ü®x, y, ‚ü®h‚ÇÅ, h‚ü©‚ü©
    ¬∑ refine' ‚ü®y, x, ‚ü®h‚ÇÅ.symm, _‚ü©‚ü©
      rcases lt_or_eq_of_le (not_lt.mp h) with h' | h'
      ¬∑ exact h'
      ¬∑ exfalso
        exact h‚ÇÇ h'.symm
  rcases hŒ∏‚ÇÇ with ‚ü®x, y, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©
  use x.castPred ((Fin.le_last _).trans_lt' h‚ÇÇ).ne
  apply eq_œÉ_comp_of_not_injective'
  apply le_antisymm
  ¬∑ exact Œ∏.toOrderHom.monotone (le_of_lt (Fin.castSucc_lt_succ _))
  ¬∑ rw [Fin.castSucc_castPred, h‚ÇÅ]
    exact Œ∏.toOrderHom.monotone ((Fin.succ_castPred_le_iff _).mpr h‚ÇÇ)
#align simplex_category.eq_œÉ_comp_of_not_injective SimplexCategory.eq_œÉ_comp_of_not_injective

theorem eq_comp_Œ¥_of_not_surjective' {n : ‚Ñï} {Œî : SimplexCategory} (Œ∏ : Œî ‚ü∂ mk (n + 1))
    (i : Fin (n + 2)) (hi : ‚àÄ x, Œ∏.toOrderHom x ‚â† i) : ‚àÉ Œ∏' : Œî ‚ü∂ mk n, Œ∏ = Œ∏' ‚â´ Œ¥ i := by
  by_cases h : i < Fin.last (n + 1)
  ¬∑ use Œ∏ ‚â´ œÉ (Fin.castPred i h.ne)
    ext1
    ext1
    ext1 x
    simp only [Hom.toOrderHom_mk, Function.comp_apply, OrderHom.comp_coe, Hom.comp,
      smallCategory_comp]
    by_cases h' : Œ∏.toOrderHom x ‚â§ i
    ¬∑ simp only [œÉ, mkHom, Hom.toOrderHom_mk, OrderHom.coe_mk]
      -- This was not needed before leanprover/lean4#2644
      dsimp
      -- This used to be `rw`, but we need `erw` after leanprover/lean4#2644
      erw [Fin.predAbove_of_le_castSucc _ _ (by rwa [Fin.castSucc_castPred])]
      dsimp [Œ¥]
      erw [Fin.succAbove_of_castSucc_lt i]
      ¬∑ rw [Fin.castSucc_castPred]
      ¬∑ rw [(hi x).le_iff_lt] at h'
        exact h'
    ¬∑ simp only [not_le] at h'
      -- The next three tactics used to be a simp only call before leanprover/lean4#2644
      rw [œÉ, mkHom, Hom.toOrderHom_mk, OrderHom.coe_mk, OrderHom.coe_mk]
      erw [OrderHom.coe_mk]
      erw [Fin.predAbove_of_castSucc_lt _ _ (by rwa [Fin.castSucc_castPred])]
      dsimp [Œ¥]
      rw [Fin.succAbove_of_le_castSucc i _]
      -- This was not needed before leanprover/lean4#2644
      conv_rhs => dsimp
      erw [Fin.succ_pred]
      simpa only [Fin.le_iff_val_le_val, Fin.coe_castSucc, Fin.coe_pred] using
        Nat.le_sub_one_of_lt (Fin.lt_iff_val_lt_val.mp h')
  ¬∑ obtain rfl := le_antisymm (Fin.le_last i) (not_lt.mp h)
    use Œ∏ ‚â´ œÉ (Fin.last _)
    ext x : 3
    dsimp [Œ¥, œÉ]
    simp_rw [Fin.succAbove_last, Fin.predAbove_last_apply]
    erw [dif_neg (hi x)]
    rw [Fin.castSucc_castPred]
#align simplex_category.eq_comp_Œ¥_of_not_surjective' SimplexCategory.eq_comp_Œ¥_of_not_surjective'

theorem eq_comp_Œ¥_of_not_surjective {n : ‚Ñï} {Œî : SimplexCategory} (Œ∏ : Œî ‚ü∂ mk (n + 1))
    (hŒ∏ : ¬¨Function.Surjective Œ∏.toOrderHom) :
    ‚àÉ (i : Fin (n + 2)) (Œ∏' : Œî ‚ü∂ mk n), Œ∏ = Œ∏' ‚â´ Œ¥ i := by
  cases' not_forall.mp hŒ∏ with i hi
  use i
  exact eq_comp_Œ¥_of_not_surjective' Œ∏ i (not_exists.mp hi)
#align simplex_category.eq_comp_Œ¥_of_not_surjective SimplexCategory.eq_comp_Œ¥_of_not_surjective

theorem eq_id_of_mono {x : SimplexCategory} (i : x ‚ü∂ x) [Mono i] : i = ùüô _ := by
  suffices IsIso i by
    apply eq_id_of_isIso
  apply isIso_of_bijective
  dsimp
  rw [Fintype.bijective_iff_injective_and_card i.toOrderHom, ‚Üê mono_iff_injective,
    eq_self_iff_true, and_true_iff]
  infer_instance
#align simplex_category.eq_id_of_mono SimplexCategory.eq_id_of_mono

theorem eq_id_of_epi {x : SimplexCategory} (i : x ‚ü∂ x) [Epi i] : i = ùüô _ := by
  suffices IsIso i by
    haveI := this
    apply eq_id_of_isIso
  apply isIso_of_bijective
  dsimp
  rw [Fintype.bijective_iff_surjective_and_card i.toOrderHom, ‚Üê epi_iff_surjective,
    eq_self_iff_true, and_true_iff]
  infer_instance
#align simplex_category.eq_id_of_epi SimplexCategory.eq_id_of_epi

theorem eq_œÉ_of_epi {n : ‚Ñï} (Œ∏ : mk (n + 1) ‚ü∂ mk n) [Epi Œ∏] : ‚àÉ i : Fin (n + 1), Œ∏ = œÉ i := by
  rcases eq_œÉ_comp_of_not_injective Œ∏ (by
    by_contra h
    simpa using le_of_mono (mono_iff_injective.mpr h)) with ‚ü®i, Œ∏', h‚ü©
  use i
  haveI : Epi (œÉ i ‚â´ Œ∏') := by
    rw [‚Üê h]
    infer_instance
  haveI := CategoryTheory.epi_of_epi (œÉ i) Œ∏'
  rw [h, eq_id_of_epi Œ∏', Category.comp_id]
#align simplex_category.eq_œÉ_of_epi SimplexCategory.eq_œÉ_of_epi

theorem eq_Œ¥_of_mono {n : ‚Ñï} (Œ∏ : mk n ‚ü∂ mk (n + 1)) [Mono Œ∏] : ‚àÉ i : Fin (n + 2), Œ∏ = Œ¥ i := by
  rcases eq_comp_Œ¥_of_not_surjective Œ∏ (by
    by_contra h
    simpa using le_of_epi (epi_iff_surjective.mpr h)) with ‚ü®i, Œ∏', h‚ü©
  use i
  haveI : Mono (Œ∏' ‚â´ Œ¥ i) := by
    rw [‚Üê h]
    infer_instance
  haveI := CategoryTheory.mono_of_mono Œ∏' (Œ¥ i)
  rw [h, eq_id_of_mono Œ∏', Category.id_comp]
#align simplex_category.eq_Œ¥_of_mono SimplexCategory.eq_Œ¥_of_mono

theorem len_lt_of_mono {Œî' Œî : SimplexCategory} (i : Œî' ‚ü∂ Œî) [hi : Mono i] (hi' : Œî ‚â† Œî') :
    Œî'.len < Œî.len := by
  rcases lt_or_eq_of_le (len_le_of_mono hi) with (h | h)
  ¬∑ exact h
  ¬∑ exfalso
    exact hi' (by ext; exact h.symm)
#align simplex_category.len_lt_of_mono SimplexCategory.len_lt_of_mono

noncomputable instance : SplitEpiCategory SimplexCategory :=
  skeletalEquivalence.inverse.splitEpiCategoryImpOfIsEquivalence

instance : HasStrongEpiMonoFactorisations SimplexCategory :=
  Functor.hasStrongEpiMonoFactorisations_imp_of_isEquivalence
    SimplexCategory.skeletalEquivalence.inverse

instance : HasStrongEpiImages SimplexCategory :=
  Limits.hasStrongEpiImages_of_hasStrongEpiMonoFactorisations

instance (Œî Œî' : SimplexCategory) (Œ∏ : Œî ‚ü∂ Œî') : Epi (factorThruImage Œ∏) :=
  StrongEpi.epi

theorem image_eq {Œî Œî' Œî'' : SimplexCategory} {œÜ : Œî ‚ü∂ Œî''} {e : Œî ‚ü∂ Œî'} [Epi e] {i : Œî' ‚ü∂ Œî''}
    [Mono i] (fac : e ‚â´ i = œÜ) : image œÜ = Œî' := by
  haveI := strongEpi_of_epi e
  let e := image.isoStrongEpiMono e i fac
  ext
  exact
    le_antisymm (len_le_of_epi (inferInstance : Epi e.hom))
      (len_le_of_mono (inferInstance : Mono e.hom))
#align simplex_category.image_eq SimplexCategory.image_eq

theorem image_Œπ_eq {Œî Œî'' : SimplexCategory} {œÜ : Œî ‚ü∂ Œî''} {e : Œî ‚ü∂ image œÜ} [Epi e]
    {i : image œÜ ‚ü∂ Œî''} [Mono i] (fac : e ‚â´ i = œÜ) : image.Œπ œÜ = i := by
  haveI := strongEpi_of_epi e
  rw [‚Üê image.isoStrongEpiMono_hom_comp_Œπ e i fac,
    SimplexCategory.eq_id_of_isIso (image.isoStrongEpiMono e i fac).hom, Category.id_comp]
#align simplex_category.image_Œπ_eq SimplexCategory.image_Œπ_eq

theorem factorThruImage_eq {Œî Œî'' : SimplexCategory} {œÜ : Œî ‚ü∂ Œî''} {e : Œî ‚ü∂ image œÜ} [Epi e]
    {i : image œÜ ‚ü∂ Œî''} [Mono i] (fac : e ‚â´ i = œÜ) : factorThruImage œÜ = e := by
  rw [‚Üê cancel_mono i, fac, ‚Üê image_Œπ_eq fac, image.fac]
#align simplex_category.factor_thru_image_eq SimplexCategory.factorThruImage_eq

end EpiMono

namespace WithInitial
open WithInitial

def len (X : WithInitial SimplexCategory) : ‚Ñï :=
  match X with
  | star => 0
  | of x => Nat.succ x.len

def mk (i : ‚Ñï) : WithInitial SimplexCategory :=
  match i with
  | Nat.zero => star
  | Nat.succ x => of (SimplexCategory.mk x)

lemma len_mk (i : ‚Ñï) : len (mk i) = i := by
  match i with
  | Nat.zero => rfl
  | Nat.succ x => rfl

def toOrderHom {X Y : WithInitial SimplexCategory} (f : X ‚ü∂ Y) : Fin (len X) ‚Üío Fin (len Y) :=
  match X, Y, f with
  | of _, of _, f => f.toOrderHom
  | star, of x, _ => (OrderEmbedding.ofIsEmpty.toOrderHom :  (Fin 0) ‚Üío (Fin (len (of x))))
  | star, star, _ => OrderHom.id

lemma toOrderHom_id {Z : WithInitial SimplexCategory} : toOrderHom (ùüô Z) = OrderHom.id := by
  match Z with
  | of z => rfl
  | star => rfl

lemma toOrderHom_comp {X Y Z: WithInitial SimplexCategory} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z):
    toOrderHom (f ‚â´ g) = (toOrderHom g).comp (toOrderHom f) := by
  match X, Y, Z, f, g with
  | star, star, star, f, g => rfl
  | star, star, of z, f, g => rfl
  | star, of y, of z, f, g =>
    apply OrderHom.ext
    exact List.ofFn_inj.mp rfl
  | of x, of y, of z, f, g => rfl

def homMk {n m : ‚Ñï} (f : Fin n ‚Üío Fin m) : mk n ‚ü∂ mk m :=
  match n, m, f with
  | Nat.zero, Nat.zero, _ => ùüô star
  | Nat.zero, Nat.succ m', _ => starInitial.to (mk (Nat.succ m'))
  | Nat.succ _, Nat.succ _, f => SimplexCategory.Hom.mk f
  | Nat.succ _, Nat.zero, f =>  Fin.elim0 (f 0)

lemma homMk_id {n  : ‚Ñï}: homMk (OrderHom.id ) = ùüô (mk n) :=
  match n with
  | Nat.zero => rfl
  | Nat.succ _ => rfl

lemma homMk_comp {n m r : ‚Ñï} (f : Fin n ‚Üío Fin m) (g : Fin m ‚Üío Fin r) :
    (homMk f) ‚â´ (homMk g) = homMk (g.comp f) := by
  match n, m, r, f, g with
  | Nat.zero, Nat.zero, Nat.zero, f, g => rfl
  | Nat.zero, Nat.zero, Nat.succ _, f, g => rfl
  | Nat.zero, Nat.succ _, Nat.succ _, f, g => rfl
  | Nat.succ _, Nat.succ _, Nat.succ _, f, g => rfl
  | Nat.zero, Nat.succ _, Nat.zero, f, g => rfl
  | Nat.succ _, Nat.zero, Nat.zero, f, g => exact Fin.elim0 (f 0)
  | Nat.succ _, Nat.succ _, Nat.zero, f, g => exact Fin.elim0 (g 0)
  | Nat.succ _, Nat.zero, Nat.succ _, f, g => exact Fin.elim0 (f 0)

def rev : WithInitial SimplexCategory ‚•§ WithInitial SimplexCategory where
  obj := fun X => X
  map {X Y} f :=
     match X, Y, f with
     | of _, of _, f =>
       homMk {
        toFun := fun a => (f.toOrderHom a.rev).rev
        monotone' := by
          let hf := f.toOrderHom.monotone'
          aesop_cat
       }
     | star, of y, _ => starInitial.to (of y)
     | star, star, _ => ùüô star
  map_id := by
    intro Z
    match Z with
    | star => rfl
    | of z =>
      simp [homMk_id, homMk]
      change _= Hom.mk (OrderHom.id)
      apply congrArg
      apply OrderHom.ext
      funext a
      change  (a).rev.rev =a
      exact Fin.rev_rev a
  map_comp := by
    intro X Y Z f g
    match X, Y, Z, f, g with
    | star, star, star, f, g => rfl
    | star, star, of z, f, g => rfl
    | star, of y, of z, f, g => rfl
    | of x, of y, of z, f, g =>
      simp
      rw [homMk_comp]
      apply congrArg
      apply OrderHom.ext
      funext a
      simp
      rw [show Hom.toOrderHom (f ‚â´ g) = (Hom.toOrderHom g).comp (Hom.toOrderHom f) by rfl]
      rfl

lemma rev_castIso {n m : ‚Ñï} (h : n = m ) : homMk (Fin.castIso h : Fin n ‚Üío Fin m) =
    rev.map (homMk (Fin.castIso h : Fin n ‚Üío Fin m)) := by
  match n, m with
  | Nat.zero, Nat.zero => rfl
  | Nat.succ n, Nat.succ m =>
     simp [homMk]
     unfold rev mk homMk
     simp
     apply congrArg
     apply OrderHom.ext
     funext a
     change _ = Fin.rev (Fin.cast h (Fin.rev a))
     rw [Fin.eq_iff_veq]
     have h2 : n=m :=  Nat.succ_inj.mp h
     simp [‚Üê h2]
     rw [tsub_tsub_cancel_of_le a.is_le]

lemma rev_toOrderHom {X Y : WithInitial SimplexCategory} (f : X ‚ü∂ Y) (a : Fin (len X)):
    toOrderHom (rev.map f) a  = ((toOrderHom f) a.rev).rev := by
  match X, Y, f with
  | of _, of _, f => rfl
  | star, of y, _ => exact Fin.elim0 a
  | star, star, _ => exact Fin.elim0 a

@[simp]
def nat {n : ‚Ñï} (k : Option (Fin (n))) : Fin (Nat.succ (n)) :=
  match k with
  | some k => k.castSucc
  | none => Fin.last n

lemma nat_true {n : ‚Ñï} :
    nat (Fin.find (fun (_ : Fin n) => True)) = 0 := by
  match n with
  | Nat.zero => rfl
  | Nat.succ n =>
    have h : Fin.find (fun (_ : Fin (Nat.succ n)) => True) = some (0 : Fin (Nat.succ n)) := by
      rw [Fin.find_eq_some_iff]
      simp
    rw [h]
    rfl

lemma nat_rev {n : ‚Ñï} (p : Fin n ‚Üí Prop) [DecidablePred p]
  (hp : (i : Fin n) ‚Üí (j : Fin n) ‚Üí i ‚â§ j ‚Üí p i ‚Üí p j)
  : (nat (Fin.find p)).rev =
    (nat (Fin.find (fun (a : Fin n) => ¬¨ p a.rev ))) := by
  let k := Fin.find p
  have  hk : Fin.find p = k := rfl
  rw [hk]
  match k with
  | none =>
     rw [Fin.find_eq_none_iff] at hk
     simp [hk]
     change _ = nat (Fin.find (fun (_ : Fin n) => True))
     rw [nat_true]
  | some k =>
    rw [Fin.find_eq_some_iff] at hk
    match k with
    | ‚ü® Nat.zero, hx ‚ü© =>
      have h :  (Fin.find fun a => ¬¨p (Fin.rev a)) = none := by
        rw [Fin.find_eq_none_iff]
        intro i
        simp
        refine hp ‚ü® Nat.zero, hx ‚ü© (Fin.rev i) ?_ hk.left
        rw [Fin.le_def]
        exact Nat.zero_le ‚Üë(Fin.rev i)
      rw [h]
      simp [nat]
    | ‚ü®Nat.succ k, hx‚ü© =>
      change  (‚ü®Nat.succ k, hx‚ü© : Fin n).castSucc.rev =_
      let xn : Fin n :=  ‚ü®k, Nat.lt_of_succ_lt hx ‚ü©
      have h : (Fin.find fun a => ¬¨p (Fin.rev a)) = some xn.rev := by
        rw [Fin.find_eq_some_iff]
        simp
        apply And.intro
        by_contra hn
        exact Nat.not_succ_le_self k (hk.right xn hn)
        intro j hj
        rw [‚Üê Fin.rev_rev j, Fin.rev_le_rev]
        have hl := (hp ‚ü®Nat.succ k, hx‚ü© (Fin.rev j)).mt
        simp  at hl
        exact Fin.succ_le_succ_iff.mp (hl hk.left hj)
      rw [h]
      ext
      simp only [Fin.castSucc_mk, Fin.val_rev, Nat.succ_sub_succ_eq_sub, nat, Fin.coe_castSucc]



def preimageInitialSegmentObj {X Y : WithInitial SimplexCategory} (f : X ‚ü∂ Y)
    (i : Fin (Nat.succ (len Y))) : Option (Fin (len X)) :=
  Fin.find (fun a => i ‚â§ (toOrderHom f a).castSucc)

lemma fin_eq_to_val {n : ‚Ñï} {i j : Fin n}  (h : i = j) : i.val = j.val := by rw [h]

lemma fin_eq_to_rev {n : ‚Ñï} {i j : Fin n}  (h : i = j) : i.rev.val = j.rev.val := by rw [h]

lemma nat_id {Z : WithInitial SimplexCategory} (i : Fin (Nat.succ (len Z)))
    (k : Option (Fin (len Z))) (hk : k = (preimageInitialSegmentObj (ùüô Z) i)) :
    nat k = i := by
  symm at hk
  simp [preimageInitialSegmentObj,toOrderHom_id] at hk
  match k with
  | some x =>
    rw [Fin.find_eq_some_iff] at hk
    let hkr := hk.right ‚ü®i, Nat.lt_of_le_of_lt hk.left x.prop ‚ü©
    simp at hkr
    simp [Fin.eq_iff_veq]
    exact Nat.le_antisymm hkr hk.left
  | none =>
    rw [Fin.find_eq_none_iff] at hk
    simp only [nat, add_right_eq_self]
    match Z with
    | star =>
      ext
      simp_all only [Fin.coe_fin_one]
    | of z =>
      have h1 := hk (Fin.last (z.len))
      ext
      simp  [Fin.lt_def] at h1
      exact Nat.le_antisymm h1 (Fin.is_le i)

lemma nat_id_val {Z : WithInitial SimplexCategory} (i : Fin (Nat.succ (len Z)))
    (k : Option (Fin (len Z))) (hk : k = (preimageInitialSegmentObj (ùüô Z) i)) :
    (nat k).val = i.val := by
  rw [nat_id i k hk]



lemma preimageInitialSegmentObj_rev {X Y : WithInitial SimplexCategory} (f : X ‚ü∂ Y)
    (i : Fin (Nat.succ (len Y))) :
    preimageInitialSegmentObj (rev.map f) i.rev
    = Fin.find (fun a => ¬¨ i ‚â§ (toOrderHom f a.rev).castSucc) := by
  let p  (a : Fin (len X)) := Fin.rev i ‚â§ Fin.castSucc ((toOrderHom (rev.toPrefunctor.map f)) a)
  let q (a : Fin (len X)) := ¬¨ i ‚â§ (toOrderHom f a.rev).castSucc
  have h : p = q := by
    funext a
    simp [toOrderHom, rev, homMk]
    match X, Y, f with
    | of _, of _, f =>
      change i.rev ‚â§ Fin.castSucc (Fin.rev ((Hom.toOrderHom f) (Fin.rev a))) ‚Üî _
      rw [‚Üê Fin.rev_succ, Fin.rev_le_rev]
      rfl
    | star, of y, _ => exact Fin.elim0 a
    | star, star, _ => exact Fin.elim0 a
  change Fin.find p =Fin.find q
  simp only [h, ge_iff_le]

lemma preimageInitialSegmentObj_neg_negRev  {X Y : WithInitial SimplexCategory} (f : X ‚ü∂ Y)
    (i : Fin (Nat.succ (len Y))) : (nat (preimageInitialSegmentObj f i)).rev =
    (nat (preimageInitialSegmentObj (rev.map f) i.rev)) := by
  rw [preimageInitialSegmentObj_rev]
  let p : Fin (len X) ‚Üí Prop := (fun a => i ‚â§ (toOrderHom f a).castSucc)
  change (nat (Fin.find p)).rev= nat ((Fin.find (fun (a : Fin (len X)) => ¬¨ p a.rev )))
  refine nat_rev p ?_
  intro m n h hm
  exact hm.trans ((toOrderHom f).monotone' h)

lemma preimageInitialSegmentObj_neg_negRev_val  {X Y : WithInitial SimplexCategory} (f : X ‚ü∂ Y)
    (i : Fin (Nat.succ (len Y))) : (nat (preimageInitialSegmentObj f i)).rev.val =
    (nat (preimageInitialSegmentObj (rev.map f) i.rev)).val := by
  have h := preimageInitialSegmentObj_neg_negRev f i
  rw [Fin.eq_iff_veq] at h
  exact h
/-- This lemma is essentially pasting of pullbacks. -/
lemma preimageInitialSegmentObj_comp  {X Y Z: WithInitial SimplexCategory} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
    (i : Fin (Nat.succ (len Z)))  (k : Option (Fin (len Y))) (hk : k = (preimageInitialSegmentObj g i)) :
   preimageInitialSegmentObj f (nat k) = preimageInitialSegmentObj (f ‚â´ g) i := by
  symm at hk
  simp [preimageInitialSegmentObj,toOrderHom_id] at hk
  match k with
  | some x =>
    rw [Fin.find_eq_some_iff] at hk
    simp [preimageInitialSegmentObj, toOrderHom_comp]
    let k2 := (Fin.find fun a ‚Ü¶ x ‚â§ (toOrderHom f) a)
    have hk2 : (Fin.find fun a ‚Ü¶ x ‚â§ (toOrderHom f) a) =k2  := rfl
    rw [hk2]
    match k2 with
    | some x2 =>
      symm
      rw [Fin.find_eq_some_iff]
      rw [Fin.find_eq_some_iff] at hk2
      apply And.intro
      ¬∑ exact hk.left.trans ((toOrderHom g).monotone' hk2.left )
      ¬∑ intro j hj
        exact hk2.right j (hk.right ((toOrderHom f) j) hj)
    | none =>
      symm
      rw [Fin.find_eq_none_iff]
      rw [Fin.find_eq_none_iff] at hk2
      intro j
      simp
      by_contra hn
      simp at hn
      exact hk2 j (hk.right ((toOrderHom f) j) hn )
  | none =>
    rw [Fin.find_eq_none_iff] at hk
    have h1 : preimageInitialSegmentObj (f ‚â´ g) i = none := by
      simp [preimageInitialSegmentObj]
      rw [Fin.find_eq_none_iff, toOrderHom_comp]
      exact fun i ‚Ü¶ hk ((toOrderHom f) i)
    rw [h1]
    simp [preimageInitialSegmentObj]
    rw [Fin.find_eq_none_iff]
    intro i
    intro a
    have  := Fin.castSucc_lt_last ((toOrderHom f) i)
    simp_all  [lt_self_iff_false]

lemma nat_comp  {X Y Z: WithInitial SimplexCategory} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
    (i : Fin (Nat.succ (len Z)))  :
    nat (preimageInitialSegmentObj f (nat (preimageInitialSegmentObj g i)))
    = nat (preimageInitialSegmentObj (f ‚â´ g) i) := by
  apply congrArg

  exact preimageInitialSegmentObj_comp f g i (preimageInitialSegmentObj g i) (by rfl)


def map‚ÇÄ {X : WithInitial SimplexCategory} (k : Option (Fin (len X))) :
    Fin (nat k).val ‚Üío Fin (len X) := Fin.castLEEmb (Fin.is_le (nat k))

lemma LEcond‚ÇÇ {X Y : WithInitial SimplexCategory} {f : X ‚ü∂ Y} {i : Fin (Nat.succ (len Y))} (k : Option (Fin (len X)))
    (hk : k = (preimageInitialSegmentObj f i)) (a : Fin (nat k)) :
    (toOrderHom f).comp (map‚ÇÄ k) a < i.val :=
  match k with
  | some x =>
    Nat.not_le.mp (((Fin.find_eq_some_iff.mp hk.symm).right
      (((map‚ÇÄ (some x)) a))).mt (Fin.not_le.mpr a.prop))
  | none =>
    Nat.not_le.mp (Fin.find_eq_none_iff.mp hk.symm a)

def map‚ÇÅ {X Y : WithInitial SimplexCategory} (f : X ‚ü∂ Y) (i :  Fin (Nat.succ (len Y))) :
    mk (nat (preimageInitialSegmentObj f i)).val ‚ü∂ mk i.val :=
  homMk {
    toFun := fun a => ‚ü®(toOrderHom f).comp (map‚ÇÄ (preimageInitialSegmentObj f i)) a,
      LEcond‚ÇÇ (preimageInitialSegmentObj f i) (by rfl) a‚ü©
    monotone' := by
      intro a b h
      apply (toOrderHom f).monotone'
      apply (map‚ÇÄ (preimageInitialSegmentObj f i)).monotone'
      exact h
  }

def revMap‚ÇÅ {X Y : WithInitial SimplexCategory} (f : X ‚ü∂ Y) (i :  Fin (Nat.succ (len Y))) :
    mk (nat (preimageInitialSegmentObj f i)).rev.val ‚ü∂ mk i.rev.val :=
  rev.map ((homMk (Fin.castIso (preimageInitialSegmentObj_neg_negRev_val f i))) ‚â´
     (map‚ÇÅ (rev.map f) i.rev))

lemma map‚ÇÅ_comp {X Y Z: WithInitial SimplexCategory} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
    (i : Fin (Nat.succ (len Z)))  :
    map‚ÇÅ (f ‚â´ g) i
    = (homMk (Fin.castIso (fin_eq_to_val (nat_comp f g i)).symm)) ‚â´
        map‚ÇÅ f (nat (preimageInitialSegmentObj g i)) ‚â´ map‚ÇÅ g i
      := by
  match X, Y, Z, f, g with
  | star, star, star, f, g => rfl
  | star, star, of z, f, g => rfl
  | star, of y, of z, f, g => rfl
  | of x, of y, of z, f, g =>
     simp [map‚ÇÅ]
     rw [homMk_comp, homMk_comp]
     rfl

lemma revMap‚ÇÅ_comp {X Y Z: WithInitial SimplexCategory} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
    (i : Fin (Nat.succ (len Z)))  :
    revMap‚ÇÅ (f ‚â´ g) i
    = (homMk (Fin.castIso (fin_eq_to_rev (nat_comp f g i)).symm)) ‚â´
        revMap‚ÇÅ f (nat (preimageInitialSegmentObj g i)) ‚â´ revMap‚ÇÅ g i
      := by
  match X, Y, Z, f, g with
  | star, star, star, f, g => rfl
  | star, star, of z, f, g => rfl
  | star, of y, of z, f, g => rfl
  | of x, of y, of z, f, g =>
     rw [rev_castIso]
     simp [revMap‚ÇÅ]
     repeat rw [‚Üê rev.map_comp]
     apply congrArg
     simp [map‚ÇÅ]
     repeat rw [homMk_comp]
     rfl

lemma map‚ÇÅ_id {Z : WithInitial SimplexCategory} (i  : Fin (Nat.succ (len Z))) :
    (homMk (Fin.castIso (fin_eq_to_val (nat_id i (preimageInitialSegmentObj (ùüô Z) i) (by rfl))).symm)) ‚â´ (map‚ÇÅ (ùüô Z) i) =
    ùüô (mk i.val)  := by
  simp [map‚ÇÅ]
  rw [homMk_comp,‚Üê  homMk_id]
  match Z with
  | star => rfl
  | of z => rfl

lemma revMap‚ÇÅ_id {Z : WithInitial SimplexCategory} (i  : Fin (Nat.succ (len Z))) :
    (homMk (Fin.castIso (fin_eq_to_rev (nat_id i (preimageInitialSegmentObj (ùüô Z) i) (by rfl))).symm)) ‚â´ (revMap‚ÇÅ (ùüô Z) i) =
    ùüô (mk i.rev.val)  := by
  rw [rev_castIso]
  simp [revMap‚ÇÅ]
  repeat rw [‚Üê rev.map_comp]
  change _ = ùüô (rev.obj ((mk i.rev.val)))
  rw [‚Üê rev.map_id (mk i.rev.val)]
  apply congrArg
  simp [map‚ÇÅ]
  repeat rw [homMk_comp]
  rw [‚Üê homMk_id]
  match Z with
  | star => rfl
  | of x => rfl



lemma preimageInitialSegmentObj_eq_val { X Y: WithInitial SimplexCategory} ( f g : X ‚ü∂ Y) (h : f=g)
    (i: Fin (Nat.succ (len Y))):
    (nat (preimageInitialSegmentObj f i)).val = (nat (preimageInitialSegmentObj g i)).val := by
  rw [h]

lemma map‚ÇÅ_eq { X Y: WithInitial SimplexCategory} ( f g : X ‚ü∂ Y) (h : f=g) (i : ‚Ñï) :
    map‚ÇÅ f i = (homMk (Fin.castIso (preimageInitialSegmentObj_eq_val f g h i))) ‚â´ (map‚ÇÅ g i)  := by
  match X, Y, f, g with
  | star, star, f, _ => rfl
  | star, of y, f, _=> rfl
  | of x, of y, f, g =>
    simp only [nat, Fin.val_nat_cast, map‚ÇÅ, OrderHom.comp_coe, Function.comp_apply]
    rw [homMk_comp]
    simp only [nat, Fin.val_nat_cast, h, map‚ÇÄ, OrderHomClass.coe_coe]
    rfl

end WithInitial

/-- This functor `SimplexCategory ‚•§ Cat` sends `[n]` (for `n : ‚Ñï`)
to the category attached to the ordered set `{0, 1, ..., n}` -/
@[simps! obj map]
def toCat : SimplexCategory ‚•§ Cat.{0} :=
  SimplexCategory.skeletalFunctor ‚ãô forget‚ÇÇ NonemptyFinLinOrd LinOrd ‚ãô
      forget‚ÇÇ LinOrd Lat ‚ãô forget‚ÇÇ Lat PartOrd ‚ãô
      forget‚ÇÇ PartOrd Preord ‚ãô preordToCat
set_option linter.uppercaseLean3 false in
#align simplex_category.to_Cat SimplexCategory.toCat

end SimplexCategory
