/-
Copyright (c) 2024 Mario Carneiro and Emily Riehl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Mario Carneiro, Emily Riehl
-/

import Mathlib.AlgebraicTopology.Nerve
import Mathlib.CategoryTheory.Category.ReflQuiv
import Mathlib.Combinatorics.Quiver.ReflQuiver


/-!

# The homotopy category of a simplicial set

The homotopy category of a simplicial set is defined as a quotient of the free category on its
underlying reflexive quiver (equivalently its one truncation). The quotient imposes an additional
hom relation on this free category, asserting that `f ‚â´ g = h` whenever `f`, `g`, and `h` are
respectively the 2nd, 0th, and 1st faces of a 2-simplex.

In this file, we in fact define a pair of functors:

(1) `SSet.hoFunctor' : SSet.{u} ‚•§ Cat.{u, u}` implements the construction described above, while

(2) `SSet.hoFunctor : SSet.{u} ‚•§ Cat.{u, u} := SSet.truncation 2 ‚ãô SSet.hoFunctor‚ÇÇ` is defined by
first restricting from simplicial sets to 2-truncated simplicial sets (throwing away the data that
is not used for the construction of the homotopy category) and then composing with an analogously
defined `SSet.hoFunctor‚ÇÇ : SSet.Truncated.{u} 2 ‚•§ Cat.{u,u}` implemented relative to the syntax of
the 2-truncated simplex category.

It should be relatively straightforward to show that these constructions agree:

def hoFunctor.ofTwoTruncation.iso (V : SSet) :
    SSet.hoFunctor‚ÇÇObj ((truncation 2).obj V) ‚âÖ SSet.hoCat V := sorry

def hoFunctor.ofTwoTruncation.natIso :
     truncation 2 ‚ãô SSet.hoFunctor‚ÇÇ ‚âÖ SSet.hoFunctor' := sorry

but we leave this for future work.

The functor `SSet.hoFunctor` is shown to be left adjoint to the nerve by providing an analogous
decomposition of the nerve functor and then composing a pair of adjunctions, which factor through
the category of 2-truncated simplicial sets.
-/

namespace CategoryTheory
open Category Limits Functor Opposite Simplicial
universe v u

section

local notation3:1000 (priority := high) X " _[" n "]" =>
    (X : CategoryTheory.SimplicialObject _).obj (Opposite.op (SimplexCategory.mk n))

def SSet.OneTruncation (S : SSet) := S _[0]

def SSet.OneTruncation.src {S : SSet} (f : S _[1]) : OneTruncation S :=
  S.map (SimplexCategory.Œ¥ (n := 0) 1).op f

def SSet.OneTruncation.tgt {S : SSet} (f : S _[1]) : OneTruncation S :=
  S.map (SimplexCategory.Œ¥ (n := 0) 0).op f

def SSet.OneTruncation.Hom {S : SSet} (X Y : OneTruncation S) :=
  {p : S _[1] // src p = X ‚àß tgt p = Y}

instance (S : SSet) : ReflQuiver (SSet.OneTruncation S) where
  Hom X Y := SSet.OneTruncation.Hom X Y
  id X := by
    refine ‚ü®S.map (SimplexCategory.œÉ (n := 0) 0).op X, ?_, ?_‚ü© <;>
    ¬∑ change (S.map _ ‚â´ S.map _) X = X
      rw [‚Üê map_comp, (_ : _ ‚â´ _ = ùüô _)]; simp
      show ({..} : Opposite _) = _; congr; ext i
      let 0 := i
      rfl

def SSet.oneTruncation : SSet.{u} ‚•§ ReflQuiv.{u,u} where
  obj S := ReflQuiv.of (OneTruncation S)
  map {S T} F := {
    obj := F.app (op [0])
    map := fun f => by
      refine ‚ü®F.app (op [1]) f.1, ?_, ?_‚ü©
      ¬∑ change (F.app _ ‚â´ _) _ = _
        rw [‚Üê F.naturality]
        exact congrArg (F.app _) f.2.1
      ¬∑ change (F.app _ ‚â´ _) _ = _
        rw [‚Üê F.naturality]
        exact congrArg (F.app _) f.2.2
    map_id := fun X => by
      change ({..} : Subtype _) = {..}
      congr
      change _ = (F.app _ ‚â´ _) _
      rw [‚Üê F.naturality]
      rfl
  }
  map_id X := by rfl
  map_comp f g := by rfl

section
variable {C : Type u} [Category.{v} C]

theorem opstuff.{w} (V : C·µí·µñ ‚•§ Type w) {X Y Z : C} {Œ± : X ‚ü∂ Y} {Œ≤ : Y ‚ü∂ Z} {Œ≥ : X ‚ü∂ Z} {œÜ} :
    Œ± ‚â´ Œ≤ = Œ≥ ‚Üí V.map Œ±.op (V.map Œ≤.op œÜ) = V.map Œ≥.op œÜ := by
  rintro rfl
  change (V.map _ ‚â´ V.map _) _ = _
  rw [‚Üê map_comp]; rfl

def SSet.OneTruncation.ofNerve.map {X Y : OneTruncation (nerve C)}
    (f : X ‚ü∂ Y) : X.left ‚ü∂ Y.left :=
  eqToHom (congrArg (¬∑.left) f.2.1.symm) ‚â´ f.1.hom ‚â´ eqToHom (congrArg (¬∑.left) f.2.2)

def SSet.OneTruncation.ofNerve.hom : OneTruncation (nerve C) ‚•§rq C where
  obj := (¬∑.left)
  map := OneTruncation.ofNerve.map
  map_id := fun X : ComposableArrows _ 0 => by
    simp only [SimplexCategory.len_mk, map, nerve_obj, eqToHom_refl, comp_id, id_comp,
      ReflQuiver.id_eq_id]
    exact ComposableArrows.map'_self _ 0

def SSet.OneTruncation.ofNerve.inv : C ‚•§rq OneTruncation (nerve C) where
  obj := (.mk‚ÇÄ ¬∑)
  map := fun f => by
    refine ‚ü®.mk‚ÇÅ f, ?_‚ü©
    constructor <;> apply ComposableArrows.ext <;>
      simp [SimplexCategory.len] <;> (exact fun 0 ‚Ü¶ rfl)
  map_id := fun X : C => Subtype.ext <| by
    simp; apply ComposableArrows.ext <;> simp
    ¬∑ rintro _ rfl; simp; rfl
    ¬∑ intro; split <;> rfl

def SSet.OneTruncation.ofNerve (C : Type u) [Category.{u} C] :
    ReflQuiv.of (OneTruncation (nerve C)) ‚âÖ ReflQuiv.of C := by
  refine {
    hom := ofNerve.hom
    inv := ofNerve.inv (C := C)
    hom_inv_id := ?_
    inv_hom_id := ?_
  }
  ¬∑ have H1 {X X' Y : OneTruncation (nerve C)} (f : X ‚ü∂ Y) (h : X = X') :
        (Eq.rec f h : X' ‚ü∂ Y).1 = f.1 := by cases h; rfl
    have H2 {X Y Y' : OneTruncation (nerve C)} (f : X ‚ü∂ Y) (h : Y = Y') :
        (Eq.rec f h : X ‚ü∂ Y').1 = f.1 := by cases h; rfl
    fapply ReflPrefunctor.ext <;> simp
    ¬∑ exact fun _ ‚Ü¶ ComposableArrows.ext‚ÇÄ rfl
    ¬∑ intro X Y f
      obtain ‚ü®f, rfl, rfl‚ü© := f
      apply Subtype.ext
      simp [ReflQuiv.comp_eq_comp]
      refine ((H2 _ _).trans ((H1 _ _).trans (ComposableArrows.ext‚ÇÅ ?_ ?_ ?_))).symm
      ¬∑ rfl
      ¬∑ rfl
      ¬∑ simp [ofNerve.inv, ofNerve.hom, ofNerve.map]; rfl
  ¬∑ fapply ReflPrefunctor.ext <;> simp
    ¬∑ exact fun _ ‚Ü¶ rfl
    ¬∑ intro X Y f
      simp [ReflQuiv.comp_eq_comp, ReflQuiv.id_eq_id, ofNerve.inv, ofNerve.hom, ofNerve.map]

@[simps! hom_app_obj hom_app_map inv_app_obj_obj inv_app_obj_map inv_app_map]
def SSet.OneTruncation.ofNerve.natIso :
    nerveFunctor.{u,u} ‚ãô SSet.oneTruncation ‚âÖ ReflQuiv.forget := by
  refine NatIso.ofComponents (fun C => OneTruncation.ofNerve C) ?nat
  ¬∑ intro C D F
    fapply ReflPrefunctor.ext <;> simp
    ¬∑ exact fun _ ‚Ü¶ rfl
    ¬∑ intro X Y f
      obtain ‚ü®f, rfl, rfl‚ü© := f
      unfold SSet.oneTruncation nerveFunctor mapComposableArrows toReflPrefunctor
      simp [ReflQuiv.comp_eq_comp, ofNerve, ofNerve.hom, ofNerve.map]

local notation (priority := high) "[" n "]" => SimplexCategory.mk n

private def Œπ0 : [0] ‚ü∂ [2] := SimplexCategory.Œ¥ (n := 0) 1 ‚â´ SimplexCategory.Œ¥ (n := 1) 1
private def Œπ1 : [0] ‚ü∂ [2] := SimplexCategory.Œ¥ (n := 0) 0 ‚â´ SimplexCategory.Œ¥ (n := 1) 2
private def Œπ2 : [0] ‚ü∂ [2] := SimplexCategory.Œ¥ (n := 0) 0 ‚â´ SimplexCategory.Œ¥ (n := 1) 1

private def ev0 {V : SSet} (œÜ : V _[2]) : SSet.OneTruncation V := V.map Œπ0.op œÜ
private def ev1 {V : SSet} (œÜ : V _[2]) : SSet.OneTruncation V := V.map Œπ1.op œÜ
private def ev2 {V : SSet} (œÜ : V _[2]) : SSet.OneTruncation V := V.map Œπ2.op œÜ

private def Œ¥0 : [1] ‚ü∂ [2] := SimplexCategory.Œ¥ (n := 1) 0
private def Œ¥1 : [1] ‚ü∂ [2] := SimplexCategory.Œ¥ (n := 1) 1
private def Œ¥2 : [1] ‚ü∂ [2] := SimplexCategory.Œ¥ (n := 1) 2

private def ev02 {V : SSet} (œÜ : V _[2]) : ev0 œÜ ‚ü∂ ev2 œÜ :=
  ‚ü®V.map Œ¥1.op œÜ, opstuff V rfl, opstuff V rfl‚ü©
private def ev01 {V : SSet} (œÜ : V _[2]) : ev0 œÜ ‚ü∂ ev1 œÜ :=
  ‚ü®V.map Œ¥2.op œÜ, opstuff V (SimplexCategory.Œ¥_comp_Œ¥ (j := 1) le_rfl), opstuff V rfl‚ü©
private def ev12 {V : SSet} (œÜ : V _[2]) : ev1 œÜ ‚ü∂ ev2 œÜ :=
  ‚ü®V.map Œ¥0.op œÜ,
    opstuff V (SimplexCategory.Œ¥_comp_Œ¥ (i := 0) (j := 1) (by decide)).symm,
    opstuff V rfl‚ü©

inductive SSet.HoRel {V : SSet} :
    (X Y : Cat.freeRefl.obj (ReflQuiv.of (OneTruncation V))) ‚Üí (f g : X ‚ü∂ Y) ‚Üí Prop
  | mk (œÜ : V _[2]) :
    HoRel _ _
      (Quot.mk _ (.cons .nil (ev02 œÜ)))
      (Quot.mk _ (.cons (.cons .nil (ev01 œÜ)) (ev12 œÜ)))

theorem SSet.HoRel.ext_triangle {V} (X X' Y Y' Z Z' : OneTruncation V)
    (hX : X = X') (hY : Y = Y') (hZ : Z = Z')
    (f : X ‚ü∂ Z) (f' : X' ‚ü∂ Z') (hf : f.1 = f'.1)
    (g : X ‚ü∂ Y) (g' : X' ‚ü∂ Y') (hg : g.1 = g'.1)
    (h : Y ‚ü∂ Z) (h' : Y' ‚ü∂ Z') (hh : h.1 = h'.1) :
    HoRel _ _
      ((Quotient.functor _).map (.cons .nil f))
      ((Quotient.functor _).map (.cons (.cons .nil g) h)) ‚Üî
    HoRel _ _
      ((Quotient.functor _).map (.cons .nil f'))
      ((Quotient.functor _).map (.cons (.cons .nil g') h')) := by
  cases hX
  cases hY
  cases hZ
  congr! <;> apply Subtype.ext <;> assumption

def SSet.hoCat (V : SSet.{u}) : Type u :=
  Quotient (C := Cat.freeRefl.obj (ReflQuiv.of (OneTruncation V))) (HoRel (V := V))

instance (V : SSet.{u}) : Category.{u} (SSet.hoCat V) :=
  inferInstanceAs (Category (Quotient ..))

def SSet.hoFunctorMap {V W : SSet.{u}} (F : V ‚ü∂ W) : SSet.hoCat V ‚•§ SSet.hoCat W :=
  Quotient.lift _ (((SSet.oneTruncation ‚ãô Cat.freeRefl).map F) ‚ãô Quotient.functor _)
    (fun X Y f g hfg => by
      let .mk œÜ := hfg
      clear f g hfg
      simp [Quot.liftOn]
      apply Quotient.sound
      convert HoRel.mk (F.app (op [2]) œÜ) using 0
      apply HoRel.ext_triangle
      ¬∑ exact congrFun (F.naturality Œπ0.op) œÜ
      ¬∑ exact congrFun (F.naturality Œπ1.op) œÜ
      ¬∑ exact congrFun (F.naturality Œπ2.op) œÜ
      ¬∑ exact congrFun (F.naturality Œ¥1.op) œÜ
      ¬∑ exact congrFun (F.naturality Œ¥2.op) œÜ
      ¬∑ exact congrFun (F.naturality Œ¥0.op) œÜ)

def SSet.hoFunctor' : SSet.{u} ‚•§ Cat.{u,u} where
  obj V := Cat.of (SSet.hoCat V)
  map {S T} F := SSet.hoFunctorMap F
  map_id S := by
    apply Quotient.lift_unique'
    simp [hoFunctorMap, Quotient.lift_spec]
    exact Eq.trans (Functor.id_comp ..) (Functor.comp_id _).symm
  map_comp {S T U} F G := by
    apply Quotient.lift_unique'
    simp [hoFunctorMap]
    rw [Quotient.lift_spec, Cat.comp_eq_comp, Cat.comp_eq_comp, ‚Üê Functor.assoc, Functor.assoc,
      Quotient.lift_spec, Functor.assoc, Quotient.lift_spec]
end
end

section

local macro:1000 (priority := high) X:term " _[" n:term "]‚ÇÇ" : term =>
    `(($X : SSet.Truncated 2).obj (Opposite.op ‚ü®SimplexCategory.mk $n, by decide‚ü©))

-- FIXME why doesn't this work?
-- local notation3:1000 (priority := high) (prettyPrint := false) " _[" n "]‚ÇÇ" =>
--     (X : SSet.Truncated 2).obj (Opposite.op ‚ü®SimplexCategory.mk n, by decide‚ü©)

set_option quotPrecheck false
local macro:max (priority := high) "[" n:term "]‚ÇÇ" : term =>
  `((‚ü®SimplexCategory.mk $n, by decide‚ü© : SimplexCategory.Truncated 2))

def SSet.OneTruncation‚ÇÇ (S : SSet.Truncated 2) := S _[0]‚ÇÇ

abbrev SSet.Œ¥‚ÇÇ {n} (i : Fin (n + 2)) (hn := by decide) (hn' := by decide) :
    (‚ü®[n], hn‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[n + 1], hn'‚ü© := SimplexCategory.Œ¥ i

abbrev SSet.œÉ‚ÇÇ {n} (i : Fin (n + 1)) (hn := by decide) (hn' := by decide) :
    (‚ü®[n+1], hn‚ü© : SimplexCategory.Truncated 2) ‚ü∂ ‚ü®[n], hn'‚ü© := SimplexCategory.œÉ i

def SSet.OneTruncation‚ÇÇ.src {S : SSet.Truncated 2} (f : S _[1]‚ÇÇ) : OneTruncation‚ÇÇ S :=
  S.map (Œ¥‚ÇÇ (n := 0) 1).op f

def SSet.OneTruncation‚ÇÇ.tgt {S : SSet.Truncated 2} (f : S _[1]‚ÇÇ) : OneTruncation‚ÇÇ S :=
  S.map (Œ¥‚ÇÇ (n := 0) 0).op f

def SSet.OneTruncation‚ÇÇ.Hom {S : SSet.Truncated 2} (X Y : OneTruncation‚ÇÇ S) :=
  {p : S _[1]‚ÇÇ // src p = X ‚àß tgt p = Y}

instance (S : SSet.Truncated 2) : ReflQuiver (SSet.OneTruncation‚ÇÇ S) where
  Hom X Y := SSet.OneTruncation‚ÇÇ.Hom X Y
  id X := by
    refine ‚ü®S.map (SSet.œÉ‚ÇÇ (n := 0) 0).op X, ?_, ?_‚ü© <;>
    ¬∑ change (S.map _ ‚â´ S.map _) X = X
      rw [‚Üê map_comp]
      rw [(_ : _ ‚â´ _ = ùüô _)]; simp
      show ({..} : Opposite _) = _; congr; dsimp [SimplexCategory.Truncated]; ext ‚ü®i, _‚ü©
      let 0 := i
      rfl

def SSet.oneTruncation‚ÇÇ : SSet.Truncated.{u} 2 ‚•§ ReflQuiv.{u,u} where
  obj S := ReflQuiv.of (OneTruncation‚ÇÇ S)
  map {S T} F := {
    obj := F.app (op [0]‚ÇÇ)
    map := fun f => by
      refine ‚ü®F.app (op [1]‚ÇÇ) f.1, ?_, ?_‚ü©
      ¬∑ change (F.app _ ‚â´ _) _ = _
        rw [‚Üê F.naturality]
        exact congrArg (F.app _) f.2.1
      ¬∑ change (F.app _ ‚â´ _) _ = _
        rw [‚Üê F.naturality]
        exact congrArg (F.app _) f.2.2
    map_id := fun X => by
      change ({..} : Subtype _) = {..}
      congr
      change _ = (F.app _ ‚â´ _) _
      rw [‚Üê F.naturality]
      rfl
  }
  map_id X := by rfl
  map_comp f g := by rfl

section
variable {V : SSet}

open SSet

def SSet.OneTruncation‚ÇÇ.ofTwoTruncationIso (V : SSet) :
    ReflQuiv.of (OneTruncation‚ÇÇ ((SSet.truncation 2).obj V)) ‚âÖ ReflQuiv.of (OneTruncation V) :=
  .refl _

local notation (priority := high) "[" n "]" => SimplexCategory.mk n

private def Œπ0‚ÇÇ : [0]‚ÇÇ ‚ü∂ [2]‚ÇÇ := Œ¥‚ÇÇ (n := 0) 1 ‚â´ Œ¥‚ÇÇ (n := 1) 1
private def Œπ1‚ÇÇ : [0]‚ÇÇ ‚ü∂ [2]‚ÇÇ := Œ¥‚ÇÇ (n := 0) 0 ‚â´ Œ¥‚ÇÇ (n := 1) 2
private def Œπ2‚ÇÇ : [0]‚ÇÇ ‚ü∂ [2]‚ÇÇ := Œ¥‚ÇÇ (n := 0) 0 ‚â´ Œ¥‚ÇÇ (n := 1) 1

private def ev0‚ÇÇ {V : SSet.Truncated 2} (œÜ : V _[2]‚ÇÇ) : OneTruncation‚ÇÇ V := V.map Œπ0‚ÇÇ.op œÜ
private def ev1‚ÇÇ {V : SSet.Truncated 2} (œÜ : V _[2]‚ÇÇ) : OneTruncation‚ÇÇ V := V.map Œπ1‚ÇÇ.op œÜ
private def ev2‚ÇÇ {V : SSet.Truncated 2} (œÜ : V _[2]‚ÇÇ) : OneTruncation‚ÇÇ V := V.map Œπ2‚ÇÇ.op œÜ

private def Œ¥1‚ÇÇ : [1]‚ÇÇ ‚ü∂ [2]‚ÇÇ := Œ¥‚ÇÇ (n := 1) 1
private def Œ¥2‚ÇÇ : [1]‚ÇÇ ‚ü∂ [2]‚ÇÇ := Œ¥‚ÇÇ (n := 1) 2
private def Œ¥0‚ÇÇ : [1]‚ÇÇ ‚ü∂ [2]‚ÇÇ := Œ¥‚ÇÇ (n := 1) 0

private def ev02‚ÇÇ {V : SSet.Truncated 2} (œÜ : V _[2]‚ÇÇ) : ev0‚ÇÇ œÜ ‚ü∂ ev2‚ÇÇ œÜ :=
  ‚ü®V.map Œ¥1‚ÇÇ.op œÜ, opstuff V rfl, opstuff V rfl‚ü©
private def ev01‚ÇÇ {V : SSet.Truncated 2} (œÜ : V _[2]‚ÇÇ) : ev0‚ÇÇ œÜ ‚ü∂ ev1‚ÇÇ œÜ :=
  ‚ü®V.map Œ¥2‚ÇÇ.op œÜ, opstuff V (SimplexCategory.Œ¥_comp_Œ¥ (j := 1) le_rfl), opstuff V rfl‚ü©
private def ev12‚ÇÇ {V : SSet.Truncated 2} (œÜ : V _[2]‚ÇÇ) : ev1‚ÇÇ œÜ ‚ü∂ ev2‚ÇÇ œÜ :=
  ‚ü®V.map Œ¥0‚ÇÇ.op œÜ,
    opstuff V (SimplexCategory.Œ¥_comp_Œ¥ (i := 0) (j := 1) (by decide)).symm,
    opstuff V rfl‚ü©

inductive SSet.HoRel‚ÇÇ {V : SSet.Truncated 2} :
    (X Y : Cat.freeRefl.obj (ReflQuiv.of (OneTruncation‚ÇÇ V))) ‚Üí (f g : X ‚ü∂ Y) ‚Üí Prop
  | mk (œÜ : V _[2]‚ÇÇ) :
    HoRel‚ÇÇ _ _
      (Quot.mk _ (.cons .nil (ev02‚ÇÇ œÜ)))
      (Quot.mk _ (.cons (.cons .nil (ev01‚ÇÇ œÜ)) (ev12‚ÇÇ œÜ)))

theorem SSet.HoRel‚ÇÇ.ext_triangle {V} (X X' Y Y' Z Z' : OneTruncation‚ÇÇ V)
    (hX : X = X') (hY : Y = Y') (hZ : Z = Z')
    (f : X ‚ü∂ Z) (f' : X' ‚ü∂ Z') (hf : f.1 = f'.1)
    (g : X ‚ü∂ Y) (g' : X' ‚ü∂ Y') (hg : g.1 = g'.1)
    (h : Y ‚ü∂ Z) (h' : Y' ‚ü∂ Z') (hh : h.1 = h'.1) :
    HoRel‚ÇÇ _ _
      ((Quotient.functor _).map (.cons .nil f))
      ((Quotient.functor _).map (.cons (.cons .nil g) h)) ‚Üî
    HoRel‚ÇÇ _ _
      ((Quotient.functor _).map (.cons .nil f'))
      ((Quotient.functor _).map (.cons (.cons .nil g') h')) := by
  cases hX
  cases hY
  cases hZ
  congr! <;> apply Subtype.ext <;> assumption

def SSet.hoFunctor‚ÇÇObj (V : SSet.Truncated.{u} 2) : Type u :=
  Quotient (C := Cat.freeRefl.obj (ReflQuiv.of (OneTruncation‚ÇÇ V))) (HoRel‚ÇÇ (V := V))

instance (V : SSet.Truncated.{u} 2) : Category.{u} (SSet.hoFunctor‚ÇÇObj V) :=
  inferInstanceAs (Category (Quotient ..))

def SSet.hoFunctor‚ÇÇObj.quotientFunctor (V : SSet.Truncated.{u} 2) :
    Cat.freeRefl.obj (ReflQuiv.of (OneTruncation‚ÇÇ V)) ‚•§ SSet.hoFunctor‚ÇÇObj V :=
  Quotient.functor (C := Cat.freeRefl.obj (ReflQuiv.of (OneTruncation‚ÇÇ V))) (HoRel‚ÇÇ (V := V))

theorem SSet.hoFunctor‚ÇÇObj.lift_unique' (V : SSet.Truncated.{u} 2)
    {D} [Category D] (F‚ÇÅ F‚ÇÇ : SSet.hoFunctor‚ÇÇObj V ‚•§ D)
    (h : quotientFunctor V ‚ãô F‚ÇÅ = quotientFunctor V ‚ãô F‚ÇÇ) : F‚ÇÅ = F‚ÇÇ :=
  Quotient.lift_unique' (C := Cat.freeRefl.obj (ReflQuiv.of (OneTruncation‚ÇÇ V)))
    (HoRel‚ÇÇ (V := V)) _ _ h

def SSet.hoFunctor‚ÇÇMap {V W : SSet.Truncated.{u} 2} (F : V ‚ü∂ W) :
    SSet.hoFunctor‚ÇÇObj V ‚•§ SSet.hoFunctor‚ÇÇObj W :=
  Quotient.lift _
    ((by exact (SSet.oneTruncation‚ÇÇ ‚ãô Cat.freeRefl).map F) ‚ãô
      SSet.hoFunctor‚ÇÇObj.quotientFunctor _)
    (fun X Y f g hfg => by
      let .mk œÜ := hfg
      apply Quotient.sound
      convert HoRel‚ÇÇ.mk (F.app (op _) œÜ) using 0
      apply HoRel‚ÇÇ.ext_triangle
      ¬∑ exact congrFun (F.naturality Œπ0‚ÇÇ.op) œÜ
      ¬∑ exact congrFun (F.naturality Œπ1‚ÇÇ.op) œÜ
      ¬∑ exact congrFun (F.naturality Œπ2‚ÇÇ.op) œÜ
      ¬∑ exact congrFun (F.naturality Œ¥1‚ÇÇ.op) œÜ
      ¬∑ exact congrFun (F.naturality Œ¥2‚ÇÇ.op) œÜ
      ¬∑ exact congrFun (F.naturality Œ¥0‚ÇÇ.op) œÜ)

def SSet.hoFunctor‚ÇÇ : SSet.Truncated.{u} 2 ‚•§ Cat.{u,u} where
  obj V := Cat.of (SSet.hoFunctor‚ÇÇObj V)
  map {S T} F := SSet.hoFunctor‚ÇÇMap F
  map_id S := by
    apply Quotient.lift_unique'
    simp [hoFunctor‚ÇÇMap, Quotient.lift_spec]
    exact Eq.trans (Functor.id_comp ..) (Functor.comp_id _).symm
  map_comp {S T U} F G := by
    apply Quotient.lift_unique'
    simp [hoFunctor‚ÇÇMap, SSet.hoFunctor‚ÇÇObj.quotientFunctor]
    rw [Quotient.lift_spec, Cat.comp_eq_comp, Cat.comp_eq_comp, ‚Üê Functor.assoc, Functor.assoc,
      Quotient.lift_spec, Functor.assoc, Quotient.lift_spec]

theorem SSet.hoFunctor‚ÇÇ_naturality {X Y : SSet.Truncated.{u} 2} (f : X ‚ü∂ Y) :
    (SSet.oneTruncation‚ÇÇ ‚ãô Cat.freeRefl).map f ‚ãô
    hoFunctor‚ÇÇObj.quotientFunctor Y =
    SSet.hoFunctor‚ÇÇObj.quotientFunctor X ‚ãô hoFunctor‚ÇÇMap f := rfl

def SSet.hoFunctor : SSet.{u} ‚•§ Cat.{u, u} := SSet.truncation 2 ‚ãô SSet.hoFunctor‚ÇÇ

end
end

end CategoryTheory
