/-
Copyright (c) 2023 Oliver Nash. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Oliver Nash
-/
import Mathlib.GroupTheory.Submonoid.Basic

/-!
# Zero divisors

## Main definitions

 * `nonZeroDivisorsLeft`: the elements of a `MonoidWithZero` that are not left zero divisors.
 * `nonZeroDivisorsRight`: the elements of a `MonoidWithZero` that are not right zero divisors.

-/

section MonoidWithZero

variable (Mâ‚€ : Type _) [MonoidWithZero Mâ‚€]

/-- The collection of elements of a `MonoidWithZero` that are not left zero divisors form a
`Submonoid`. -/
def nonZeroDivisorsLeft : Submonoid Mâ‚€ where
  carrier := {x | âˆ€ y, y * x = 0 â†’ y = 0}
  one_mem' := by simp
                 -- ðŸŽ‰ no goals
  mul_mem' {x} {y} hx hy := fun z hz â†¦ hx _ <| hy _ (mul_assoc z x y â–¸ hz)

@[simp] lemma mem_nonZeroDivisorsLeft_iff {x : Mâ‚€} :
    x âˆˆ nonZeroDivisorsLeft Mâ‚€ â†” âˆ€ y, y * x = 0 â†’ y = 0 :=
  Iff.rfl

/-- The collection of elements of a `MonoidWithZero` that are not right zero divisors form a
`Submonoid`. -/
def nonZeroDivisorsRight : Submonoid Mâ‚€ where
  carrier := {x | âˆ€ y, x * y = 0 â†’ y = 0}
  one_mem' := by simp
                 -- ðŸŽ‰ no goals
  mul_mem' := fun {x} {y} hx hy z hz â†¦ hy _ (hx _ ((mul_assoc x y z).symm â–¸ hz))

@[simp] lemma mem_nonZeroDivisorsRight_iff {x : Mâ‚€} :
    x âˆˆ nonZeroDivisorsRight Mâ‚€ â†” âˆ€ y, x * y = 0 â†’ y = 0 :=
  Iff.rfl

lemma nonZeroDivisorsLeft_eq_right (Mâ‚€ : Type _) [CommMonoidWithZero Mâ‚€] :
    nonZeroDivisorsLeft Mâ‚€ = nonZeroDivisorsRight Mâ‚€ := by
  ext x; simp [mul_comm x]
  -- âŠ¢ x âˆˆ nonZeroDivisorsLeft Mâ‚€ â†” x âˆˆ nonZeroDivisorsRight Mâ‚€
         -- ðŸŽ‰ no goals

@[simp] lemma coe_nonZeroDivisorsLeft_eq [NoZeroDivisors Mâ‚€] [Nontrivial Mâ‚€] :
    nonZeroDivisorsLeft Mâ‚€ = {x : Mâ‚€ | x â‰  0} := by
  ext x
  -- âŠ¢ x âˆˆ â†‘(nonZeroDivisorsLeft Mâ‚€) â†” x âˆˆ {x | x â‰  0}
  simp only [SetLike.mem_coe, mem_nonZeroDivisorsLeft_iff, mul_eq_zero, forall_eq_or_imp, true_and,
    Set.mem_setOf_eq]
  refine' âŸ¨fun h â†¦ _, fun hx y hx' â†¦ by contradictionâŸ©
  -- âŠ¢ x â‰  0
  contrapose! h
  -- âŠ¢ âˆƒ a, x = 0 âˆ§ a â‰  0
  exact âŸ¨1, h, one_ne_zeroâŸ©
  -- ðŸŽ‰ no goals

@[simp] lemma coe_nonZeroDivisorsRight_eq [NoZeroDivisors Mâ‚€] [Nontrivial Mâ‚€] :
    nonZeroDivisorsRight Mâ‚€ = {x : Mâ‚€ | x â‰  0} := by
  ext x
  -- âŠ¢ x âˆˆ â†‘(nonZeroDivisorsRight Mâ‚€) â†” x âˆˆ {x | x â‰  0}
  simp only [SetLike.mem_coe, mem_nonZeroDivisorsRight_iff, mul_eq_zero, Set.mem_setOf_eq]
  -- âŠ¢ (âˆ€ (y : Mâ‚€), x = 0 âˆ¨ y = 0 â†’ y = 0) â†” x â‰  0
  refine' âŸ¨fun h â†¦ _, fun hx y hx' â†¦ by aesopâŸ©
  -- âŠ¢ x â‰  0
  contrapose! h
  -- âŠ¢ âˆƒ y, (x = 0 âˆ¨ y = 0) âˆ§ y â‰  0
  exact âŸ¨1, Or.inl h, one_ne_zeroâŸ©
  -- ðŸŽ‰ no goals

end MonoidWithZero
