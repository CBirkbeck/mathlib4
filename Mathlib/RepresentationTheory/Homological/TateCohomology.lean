import Mathlib.RepresentationTheory.Homological.GroupCohomology.Functoriality
import Mathlib.RepresentationTheory.Homological.GroupHomology.Functoriality

universe v u

open CategoryTheory ShortComplex Limits

section

variable {C D : Type*} [Category C] [Abelian C] [Category D] [Abelian D] (F G : C ‚•§ D)
  [F.Additive] [G.Additive] [F.PreservesZeroMorphisms] [G.PreservesZeroMorphisms]
  (X : ShortComplex C) (hX : ShortExact X) [PreservesFiniteColimits F] [PreservesFiniteLimits G]
  (T : F ‚ü∂ G)

@[simps]
noncomputable def CategoryTheory.ShortComplex.natTransSnakeInput : SnakeInput D where
  L‚ÇÄ := kernel (X.mapNatTrans T)
  L‚ÇÅ := F.mapShortComplex.obj X
  L‚ÇÇ := G.mapShortComplex.obj X
  L‚ÇÉ := cokernel (X.mapNatTrans T)
  v‚ÇÄ‚ÇÅ := kernel.Œπ (X.mapNatTrans T)
  v‚ÇÅ‚ÇÇ := X.mapNatTrans T
  v‚ÇÇ‚ÇÉ := cokernel.œÄ (X.mapNatTrans T)
  w‚ÇÄ‚ÇÇ := kernel.condition (X.mapNatTrans T)
  w‚ÇÅ‚ÇÉ := cokernel.condition (X.mapNatTrans T)
  h‚ÇÄ := kernelIsKernel (X.mapNatTrans T)
  h‚ÇÉ := cokernelIsCokernel (X.mapNatTrans T)
  L‚ÇÅ_exact := by
    have := (F.preservesFiniteColimits_tfae.out 3 0).1
    exact (this ‚ü®PreservesFiniteColimits.preservesFiniteColimits‚ü© X hX).1
  epi_L‚ÇÅ_g := by
    have := (F.preservesFiniteColimits_tfae.out 3 0).1
    apply (this ‚ü®PreservesFiniteColimits.preservesFiniteColimits‚ü© X hX).2
  L‚ÇÇ_exact := by
    have := (G.preservesFiniteLimits_tfae.out 3 0).1
    apply (this ‚ü®PreservesFiniteLimits.preservesFiniteLimits‚ü© X hX).1
  mono_L‚ÇÇ_f := by
    have := (G.preservesFiniteLimits_tfae.out 3 0).1
    apply (this ‚ü®PreservesFiniteLimits.preservesFiniteLimits‚ü© X hX).2

end

open Rep

noncomputable def TateCohomology {k G : Type u} [CommRing k] [Group G]
    [Fintype G] [DecidableEq G] (A : Rep k G) (i : ‚Ñ§) : ModuleCat k :=
  match i with
  | 0 => ModuleCat.of k (A.œÅ.invariants ‚ß∏ (LinearMap.range (liftRestrictNorm A)))
  | (n + 1 : ‚Ñï) => groupCohomology A (n + 1)
  | -1 => ModuleCat.of k (LinearMap.ker (liftRestrictNorm A))
  | -(n + 2 : ‚Ñï) => groupHomology A (n + 1)

namespace TateCohomology
open groupCohomology groupHomology

variable {k G : Type u} [CommRing k] [Group G] [Fintype G] [DecidableEq G] (A : Rep k G)
  {A B : Rep k G}

noncomputable def map (œÜ : A ‚ü∂ B) (n : ‚Ñ§) :
    TateCohomology A n ‚ü∂ TateCohomology B n :=
  match n with
  | 0 => ModuleCat.ofHom <| Submodule.mapQ _ _ ((invariantsFunctor k G).map œÜ).hom <| by
    rintro y ‚ü®x, rfl‚ü©
    induction' x using Quotient.inductionOn' with x
    use (Submodule.Quotient.mk (œÜ.hom x))
    ext
    simpa [liftRestrictNorm, Submodule.Quotient.mk''_eq_mk, norm]
      using congr(‚àë c : G, $((hom_comm_apply œÜ _ _).symm))
  | (n + 1 : ‚Ñï) => groupCohomology.map (MonoidHom.id G) œÜ (n + 1)
  | -1 => ModuleCat.ofHom <| LinearMap.restrict (coinvariantsMap œÜ) <| by
    rintro x (hx : _ = _)
    ext
    induction' x using Quotient.inductionOn' with x
    have := fun c => (hom_comm_apply œÜ c x).symm
    simp_all [liftRestrictNorm, Submodule.Quotient.mk''_eq_mk, Subtype.ext_iff,
      norm, ‚Üê map_sum, @map_zero A B]
  | -(n + 2 : ‚Ñï) => groupHomology.map (MonoidHom.id G) œÜ (n + 1)

@[simp]
theorem map_id (n : ‚Ñ§) : map (ùüô A) n = ùüô _ :=
  match n with
  | 0 => by ext; simp [map]
  | (n + 1 : ‚Ñï) => by ext; simp [map, groupCohomology.map, TateCohomology, groupCohomology]
  | -1 => by ext; simp only [map, coinvariantsMap_id]; rfl
  | Int.negSucc (n + 1) => by ext; simp [map, groupHomology.map, TateCohomology, groupHomology]

@[simp]
theorem map_comp {C : Rep k G} (f : A ‚ü∂ B) (g : B ‚ü∂ C) (n : ‚Ñ§) :
    map (f ‚â´ g) n = map f n ‚â´ map g n :=
  match n with
  | 0 => ModuleCat.hom_ext <| Submodule.linearMap_qext _ rfl
  | (n + 1 : ‚Ñï) => groupCohomology.map_id_comp _ _ _
  | -1 => ModuleCat.hom_ext <| LinearMap.ext fun _ => Subtype.ext <| by
    simp only [map, coinvariantsMap_comp]; rfl
  | Int.negSucc (n + 1) => groupHomology.map_id_comp _ _ _

variable (k G) in
@[simps]
noncomputable def _root_.tateCohomologyFunctor (n : ‚Ñ§) : Rep k G ‚•§ ModuleCat k where
  obj A := TateCohomology A n
  map f := map f n
  map_id _ := map_id n
  map_comp f g := map_comp f g n

instance (n : ‚Ñ§) : (tateCohomologyFunctor k G n).PreservesZeroMorphisms :=
  match n with
  | 0 => ‚ü®fun _ _ => ModuleCat.hom_ext <| Submodule.linearMap_qext _ rfl‚ü©
  | (n + 1 : ‚Ñï) => inferInstanceAs (groupCohomology.functor k G (n + 1)).PreservesZeroMorphisms
  | -1 => ‚ü®fun _ _ => ModuleCat.hom_ext <| LinearMap.ext fun ‚ü®x, hx‚ü© => by
    induction' x using Quotient.inductionOn' with x
    rfl‚ü©
  | -(n + 2 : ‚Ñï) => inferInstanceAs (groupHomology.functor k G (n + 1)).PreservesZeroMorphisms

variable {X : ShortComplex (Rep k G)} (hX : X.ShortExact)

noncomputable def snakeInput : SnakeInput (ModuleCat k) :=
  X.natTransSnakeInput _ _ hX (liftRestrictNormNatTrans k G)

variable (X) in
noncomputable def isoShortComplexNeg‚ÇÅ :
    (limitCone (parallelPair (X.mapNatTrans <| liftRestrictNormNatTrans k G) 0)).pt
      ‚âÖ X.map (tateCohomologyFunctor k G (-1)) :=
  ShortComplex.isoMk ((isLimitœÄ‚ÇÅMapConeLimitCone _).conePointsIsoOfNatIso
    (ModuleCat.kernelIsLimit _) (diagramIsoParallelPair <| parallelPair _ 0 ‚ãô œÄ‚ÇÅ))
    ((isLimitœÄ‚ÇÇMapConeLimitCone _).conePointsIsoOfNatIso
    (ModuleCat.kernelIsLimit _) (diagramIsoParallelPair <| parallelPair _ 0 ‚ãô œÄ‚ÇÇ))
    ((isLimitœÄ‚ÇÉMapConeLimitCone _).conePointsIsoOfNatIso
    (ModuleCat.kernelIsLimit _) (diagramIsoParallelPair <| parallelPair _ 0 ‚ãô œÄ‚ÇÉ))
    (by
      rw [‚Üê Iso.eq_inv_comp, ‚Üê Category.assoc, ‚Üê Iso.comp_inv_eq]
      apply IsLimit.hom_ext (isLimitœÄ‚ÇÇMapConeLimitCone
        (parallelPair (X.mapNatTrans <| liftRestrictNormNatTrans k G) 0))
      rintro (_ | _)
      ¬∑ simp only [IsLimit.conePointsIsoOfNatIso_inv, Category.assoc, IsLimit.map_œÄ]
        simp only [limitCone, œÄ‚ÇÇ_map, parallelPair_obj_zero, Functor.comp_obj,
          diagramIsoParallelPair_inv_app, eqToHom_refl, Functor.mapCone_œÄ_app,
          limMap_œÄ, Category.comp_id, ‚Üê Category.assoc]
        exact (isLimitœÄ‚ÇÅMapConeLimitCone _).map_œÄ (ModuleCat.kernelCone
          (œÄ‚ÇÅ.map (X.mapNatTrans <| liftRestrictNormNatTrans k G))) (diagramIsoParallelPair
          (parallelPair (X.mapNatTrans <| liftRestrictNormNatTrans k G) 0 ‚ãô œÄ‚ÇÅ)).inv
          WalkingParallelPair.zero ‚ñ∏ rfl
      ¬∑ simp)
    (by
      rw [‚Üê Iso.eq_inv_comp, ‚Üê Category.assoc, ‚Üê Iso.comp_inv_eq]
      apply IsLimit.hom_ext (isLimitœÄ‚ÇÉMapConeLimitCone
        (parallelPair (X.mapNatTrans <| liftRestrictNormNatTrans k G) 0))
      rintro (_ | _)
      ¬∑ simp only [IsLimit.conePointsIsoOfNatIso_inv, Category.assoc, IsLimit.map_œÄ]
        simp only [limitCone, œÄ‚ÇÉ_map, parallelPair_obj_zero, Functor.comp_obj,
          diagramIsoParallelPair_inv_app, eqToHom_refl, Functor.mapCone_œÄ_app,
          limMap_œÄ, Category.comp_id, ‚Üê Category.assoc]
        exact (isLimitœÄ‚ÇÇMapConeLimitCone _).map_œÄ (ModuleCat.kernelCone
          (œÄ‚ÇÇ.map (X.mapNatTrans <| liftRestrictNormNatTrans k G))) (diagramIsoParallelPair
          (parallelPair (X.mapNatTrans <| liftRestrictNormNatTrans k G) 0 ‚ãô œÄ‚ÇÇ)).inv
          WalkingParallelPair.zero ‚ñ∏ rfl
      ¬∑ simp)

noncomputable def snakeInputIso‚ÇÄ :
    (snakeInput hX).L‚ÇÄ ‚âÖ X.map (tateCohomologyFunctor k G (-1)) :=
  Limits.limit.isoLimitCone ‚ü®limitCone _, isLimitLimitCone _‚ü© ‚â™‚â´ isoShortComplexNeg‚ÇÅ X

variable (X) in
noncomputable def isoShortComplex‚ÇÄ :
    (colimitCocone (parallelPair (X.mapNatTrans <| liftRestrictNormNatTrans k G) 0)).pt
      ‚âÖ X.map (tateCohomologyFunctor k G 0) :=
  ShortComplex.isoMk ((isColimitœÄ‚ÇÅMapCoconeColimitCocone _).coconePointsIsoOfNatIso
    (ModuleCat.cokernelIsColimit _) (diagramIsoParallelPair <| parallelPair _ 0 ‚ãô œÄ‚ÇÅ))
    ((isColimitœÄ‚ÇÇMapCoconeColimitCocone _).coconePointsIsoOfNatIso
    (ModuleCat.cokernelIsColimit _) (diagramIsoParallelPair <| parallelPair _ 0 ‚ãô œÄ‚ÇÇ))
    ((isColimitœÄ‚ÇÉMapCoconeColimitCocone _).coconePointsIsoOfNatIso
    (ModuleCat.cokernelIsColimit _) (diagramIsoParallelPair <| parallelPair _ 0 ‚ãô œÄ‚ÇÉ))
    (by
      apply IsColimit.hom_ext (isColimitœÄ‚ÇÅMapCoconeColimitCocone
        (parallelPair (X.mapNatTrans <| liftRestrictNormNatTrans k G) 0))
      rintro (_ | _)
      ¬∑ simp
      ¬∑ simp only [IsColimit.coconePointsIsoOfNatIso_hom, ‚Üê Category.assoc, IsColimit.Œπ_map]
        simp only [colimitCocone, œÄ‚ÇÅ_map, parallelPair_obj_zero, Functor.comp_obj,
          diagramIsoParallelPair_hom_app, eqToHom_refl, Functor.mapCocone_Œπ_app, Œπ_colimMap,
          Category.id_comp, Category.assoc]
        exact (isColimitœÄ‚ÇÇMapCoconeColimitCocone _).Œπ_map (ModuleCat.cokernelCocone
          (œÄ‚ÇÇ.map (X.mapNatTrans <| liftRestrictNormNatTrans k G))) (diagramIsoParallelPair
          (parallelPair (X.mapNatTrans <| liftRestrictNormNatTrans k G) 0 ‚ãô œÄ‚ÇÇ)).hom
          WalkingParallelPair.one ‚ñ∏ rfl)
    (by
      apply IsColimit.hom_ext (isColimitœÄ‚ÇÇMapCoconeColimitCocone
        (parallelPair (X.mapNatTrans <| liftRestrictNormNatTrans k G) 0))
      rintro (_ | _)
      ¬∑ simp
      ¬∑ simp only [IsColimit.coconePointsIsoOfNatIso_hom, ‚Üê Category.assoc, IsColimit.Œπ_map]
        simp only [colimitCocone, œÄ‚ÇÇ_map, parallelPair_obj_zero, Functor.comp_obj,
          diagramIsoParallelPair_hom_app, eqToHom_refl, Functor.mapCocone_Œπ_app, Œπ_colimMap,
          Category.id_comp, Category.assoc]
        exact (isColimitœÄ‚ÇÉMapCoconeColimitCocone _).Œπ_map (ModuleCat.cokernelCocone
          (œÄ‚ÇÉ.map (X.mapNatTrans <| liftRestrictNormNatTrans k G))) (diagramIsoParallelPair
          (parallelPair (X.mapNatTrans <| liftRestrictNormNatTrans k G) 0 ‚ãô œÄ‚ÇÉ)).hom
          WalkingParallelPair.one ‚ñ∏ rfl)

noncomputable def snakeInputIso‚ÇÉ :
    (snakeInput hX).L‚ÇÉ ‚âÖ X.map (tateCohomologyFunctor k G 0) :=
  Limits.colimit.isoColimitCocone ‚ü®colimitCocone _, isColimitColimitCocone _‚ü©
    ‚â™‚â´ isoShortComplex‚ÇÄ X

@[reassoc (attr := simp)]
theorem map_œÄ‚ÇÅ_snakeInputIso‚ÇÄ_inv_comp_Œπ :
    œÄ‚ÇÅ.map ((snakeInputIso‚ÇÄ hX).inv ‚â´ kernel.Œπ _) = ModuleCat.ofHom (Submodule.subtype _) := by
  unfold snakeInputIso‚ÇÄ
  simp only [Int.reduceNeg, Functor.comp_obj, parallelPair_obj_zero, parallelPair_obj_one,
    Functor.comp_map, parallelPair_map_left, Iso.trans_inv, IsLimit.conePointsIsoOfNatIso_inv,
    Functor.mapIso_inv, Category.assoc, ‚Üê Functor.map_comp, limit.isoLimitCone_inv_œÄ,
    Fork.app_zero_eq_Œπ]
  exact IsLimit.map_œÄ _ _ _ _

@[reassoc (attr := simp)]
theorem map_œÄ‚ÇÇ_snakeInputIso‚ÇÄ_inv_comp_Œπ :
    œÄ‚ÇÇ.map ((snakeInputIso‚ÇÄ hX).inv ‚â´ kernel.Œπ _) = ModuleCat.ofHom (Submodule.subtype _) := by
  unfold snakeInputIso‚ÇÄ
  simp only [Int.reduceNeg, Functor.comp_obj, parallelPair_obj_zero, parallelPair_obj_one,
    Functor.comp_map, parallelPair_map_left, Iso.trans_inv, IsLimit.conePointsIsoOfNatIso_inv,
    Functor.mapIso_inv, Category.assoc, ‚Üê Functor.map_comp, limit.isoLimitCone_inv_œÄ,
    Fork.app_zero_eq_Œπ]
  exact IsLimit.map_œÄ _ _ _ _

@[reassoc (attr := simp)]
theorem map_œÄ‚ÇÉ_snakeInputIso‚ÇÄ_inv_comp_Œπ :
    œÄ‚ÇÉ.map ((snakeInputIso‚ÇÄ hX).inv ‚â´ kernel.Œπ _) = ModuleCat.ofHom (Submodule.subtype _) := by
  unfold snakeInputIso‚ÇÄ
  simp only [Int.reduceNeg, Functor.comp_obj, parallelPair_obj_zero, parallelPair_obj_one,
    Functor.comp_map, parallelPair_map_left, Iso.trans_inv, IsLimit.conePointsIsoOfNatIso_inv,
    Functor.mapIso_inv, Category.assoc, ‚Üê Functor.map_comp, limit.isoLimitCone_inv_œÄ,
    Fork.app_zero_eq_Œπ]
  exact IsLimit.map_œÄ _ _ _ _

@[reassoc (attr := simp)]
theorem map_œÄ‚ÇÅ_comp_snakeInputIso‚ÇÉ_hom :
    œÄ‚ÇÅ.map (cokernel.œÄ _ ‚â´ (snakeInputIso‚ÇÉ hX).hom) = ModuleCat.ofHom (Submodule.mkQ _) := by
  unfold snakeInputIso‚ÇÉ
  simp only [Iso.trans_hom, Functor.mapIso_hom, ‚Üê Category.assoc, ‚Üê Functor.map_comp,
    colimit.isoColimitCocone_Œπ_hom]
  exact IsColimit.Œπ_map _ _ _ _

@[reassoc (attr := simp)]
theorem map_œÄ‚ÇÇ_comp_snakeInputIso‚ÇÉ_hom :
    œÄ‚ÇÇ.map (cokernel.œÄ _ ‚â´ (snakeInputIso‚ÇÉ hX).hom) = ModuleCat.ofHom (Submodule.mkQ _) := by
  unfold snakeInputIso‚ÇÉ
  simp only [Iso.trans_hom, Functor.mapIso_hom, ‚Üê Category.assoc, ‚Üê Functor.map_comp,
    colimit.isoColimitCocone_Œπ_hom]
  exact IsColimit.Œπ_map _ _ _ _

@[reassoc (attr := simp)]
theorem map_œÄ‚ÇÉ_comp_snakeInputIso‚ÇÉ_hom :
    œÄ‚ÇÉ.map (cokernel.œÄ _ ‚â´ (snakeInputIso‚ÇÉ hX).hom) = ModuleCat.ofHom (Submodule.mkQ _) := by
  unfold snakeInputIso‚ÇÉ
  simp only [Iso.trans_hom, Functor.mapIso_hom, ‚Üê Category.assoc, ‚Üê Functor.map_comp,
    colimit.isoColimitCocone_Œπ_hom]
  exact IsColimit.Œπ_map _ _ _ _

noncomputable def Œ¥‚ÇÄ : TateCohomology X.X‚ÇÉ 0 ‚ü∂ groupCohomology X.X‚ÇÅ 1 :=
  ModuleCat.ofHom <| Submodule.liftQ _ ((groupCohomology.isoH0 X.X‚ÇÉ).inv
      ‚â´ (groupCohomology.cochainsMap_shortExact hX).Œ¥ 0 1 rfl).hom <|
      LinearMap.range_le_ker_iff.2 <| by
    apply_fun ModuleCat.ofHom using (fun _ _ h => ModuleCat.hom_ext_iff.1 h)
    simp only [ModuleCat.of_coe, map_X‚ÇÅ, cochainsFunctor_obj, ModuleCat.hom_comp,
      ModuleCat.ofHom_comp, ModuleCat.ofHom_hom, ‚Üê cancel_mono (groupCohomology.isoH1 X.X‚ÇÅ).hom]
    refine ModuleCat.hom_ext <| Submodule.linearMap_qext _ <| LinearMap.ext fun x => ?_
    rcases (Rep.epi_iff_surjective X.g).1 hX.3 x with ‚ü®(y : X.X‚ÇÇ), rfl‚ü©
    have : (groupCohomology.isoH1 X.X‚ÇÅ).hom _ = _ :=
      congr($((groupCohomology.H0ShortComplex‚ÇÉ hX).zero)
        ‚ü®X.X‚ÇÇ.norm.hom y, fun g => LinearMap.ext_iff.1 (X.X‚ÇÇ.œÅ_comp_norm_hom_hom g) y‚ü©)
    simp_all only [ModuleCat.hom_comp, LinearMap.coe_comp, Function.comp_apply,
      LinearMap.comp_zero]
    convert this
    ext
    simpa [liftRestrictNorm, groupCohomology.H0Map] using
      congr(‚àë c : G, $((hom_comm_apply X.g c y).symm))

theorem mkQ_comp_Œ¥‚ÇÄ : ModuleCat.ofHom (Submodule.mkQ _) ‚â´ Œ¥‚ÇÄ hX =
    (groupCohomology.isoH0 X.X‚ÇÉ).inv ‚â´ (groupCohomology.cochainsMap_shortExact hX).Œ¥ 0 1 rfl := by
  rfl

theorem mkQ_comp_Œ¥‚ÇÄ' : ModuleCat.ofHom (Submodule.mkQ _) ‚â´ Œ¥‚ÇÄ hX =
    (groupCohomology.Œ¥‚ÇÄ hX) ‚â´ (groupCohomology.isoH1 X.X‚ÇÅ).inv := by
  simp only [Œ¥‚ÇÄ, groupCohomology.Œ¥‚ÇÄ, map_X‚ÇÅ, cochainsFunctor_obj, Category.assoc, Iso.hom_inv_id,
    Category.comp_id]
  rfl

noncomputable def Œ¥Neg‚ÇÅ : TateCohomology X.X‚ÇÉ (-1) ‚ü∂ TateCohomology X.X‚ÇÅ 0 :=
  (œÄ‚ÇÉ.mapIso <| snakeInputIso‚ÇÄ hX).inv ‚â´ (TateCohomology.snakeInput hX).Œ¥
  ‚â´ (œÄ‚ÇÅ.mapIso <| snakeInputIso‚ÇÉ hX).hom

theorem Œ¥Neg‚ÇÅ_apply (z : X.X‚ÇÉ) (hz : (Submodule.mkQ _ z) ‚àà LinearMap.ker (liftRestrictNorm X.X‚ÇÉ))
    (y : X.X‚ÇÇ) (x : X.X‚ÇÅ.œÅ.invariants)
    (hyz : (¬∑ - z : X.X‚ÇÉ ‚Üí X.X‚ÇÉ) (X.g.hom y) ‚àà X.X‚ÇÉ.œÅ.augmentationSubmodule)
    (hx : X.f.hom x.1 = X.X‚ÇÇ.norm.hom y) :
    TateCohomology.Œ¥Neg‚ÇÅ hX ‚ü®Submodule.mkQ _ z, hz‚ü© = Submodule.mkQ _ x := by
  convert congr((œÄ‚ÇÅ.mapIso <| snakeInputIso‚ÇÉ hX).hom $((TateCohomology.snakeInput hX).Œ¥_apply
    ((œÄ‚ÇÉ.mapIso <| snakeInputIso‚ÇÄ hX).inv ‚ü®Submodule.mkQ _ z, hz‚ü©) (Submodule.mkQ _ y) x
    (((Submodule.Quotient.eq _).2 hyz).trans (congr($(map_œÄ‚ÇÉ_snakeInputIso‚ÇÄ_inv_comp_Œπ hX)
      ‚ü®Submodule.mkQ _ z, hz‚ü©)).symm) (Subtype.ext hx)))
  exact congr($((map_œÄ‚ÇÅ_comp_snakeInputIso‚ÇÉ_hom hX).symm) _)

theorem liftRestrictNorm_Œ¥‚ÇÄ_apply (x : groupHomology.H1 X.X‚ÇÉ) :
    liftRestrictNorm X.X‚ÇÅ (groupHomology.Œ¥‚ÇÄ hX x) = 0 := by
  letI : Mono X.f := hX.2
  apply_fun (invariantsFunctor k G).map X.f using (ModuleCat.mono_iff_injective _).1 <|
    (invariantsFunctor k G).map_mono X.f
  have := Subtype.ext_iff.1 (congr($((liftRestrictNormNatTrans k G).naturality X.f)
    (groupHomology.Œ¥‚ÇÄ hX x))).symm
  refine Subtype.ext ?_
  have h : coinvariantsMap X.f (groupHomology.Œ¥‚ÇÄ hX x) = 0 :=
    LinearMap.mem_ker.1 <| (H0ShortComplex‚ÇÅ_exact hX).moduleCat_range_eq_ker
      ‚ñ∏ LinearMap.mem_range_self _ _
  simp_all [-NatTrans.naturality]

noncomputable def Œ¥Neg‚ÇÇ : TateCohomology X.X‚ÇÉ (-2) ‚ü∂ TateCohomology X.X‚ÇÅ (-1) :=
  ModuleCat.ofHom <| LinearMap.codRestrict _ ((groupHomology.chainsMap_shortExact hX).Œ¥ 1 0 rfl
    ‚â´ (groupHomology.isoH0 X.X‚ÇÅ).hom).hom fun x => by
    suffices liftRestrictNorm X.X‚ÇÅ
      (((groupHomology.isoH1 X.X‚ÇÉ).hom ‚â´ groupHomology.Œ¥‚ÇÄ hX) x) = 0 by
      rw [groupHomology.Œ¥‚ÇÄ, Iso.hom_inv_id_assoc] at this
      exact this
    exact liftRestrictNorm_Œ¥‚ÇÄ_apply hX ((groupHomology.isoH1 X.X‚ÇÉ).hom x)

theorem Œ¥Neg‚ÇÇ_comp_subtype : Œ¥Neg‚ÇÇ hX ‚â´ ModuleCat.ofHom (Submodule.subtype _) =
    (groupHomology.chainsMap_shortExact hX).Œ¥ 1 0 rfl ‚â´ (groupHomology.isoH0 X.X‚ÇÅ).hom := by
  rfl

theorem Œ¥Neg‚ÇÇ_comp_subtype' : Œ¥Neg‚ÇÇ hX ‚â´ ModuleCat.ofHom (Submodule.subtype _) =
    (groupHomology.isoH1 X.X‚ÇÉ).hom ‚â´ groupHomology.Œ¥‚ÇÄ hX := by
  simp only [Œ¥Neg‚ÇÇ, groupHomology.Œ¥‚ÇÄ, Iso.hom_inv_id_assoc]
  rfl

noncomputable def Œ¥ (n : ‚Ñ§) : TateCohomology X.X‚ÇÉ n ‚ü∂ TateCohomology X.X‚ÇÅ (n + 1) :=
  match n with
  | 0 => Œ¥‚ÇÄ hX
  | (n + 1 : ‚Ñï) => (groupCohomology.cochainsMap_shortExact hX).Œ¥ (n + 1) (n + 2) rfl
  | -1 => Œ¥Neg‚ÇÅ hX
  | -2 => Œ¥Neg‚ÇÇ hX
  | -(_ + 3 : ‚Ñï) => (groupHomology.chainsMap_shortExact hX).Œ¥ _ _ rfl

variable (X) in
noncomputable def shortComplex‚ÇÇ (n : ‚Ñ§) : ShortComplex (ModuleCat k) :=
  X.map (tateCohomologyFunctor k G n)

theorem shortComplex‚ÇÇ_exact (hX : ShortExact X) (n : ‚Ñ§) : (shortComplex‚ÇÇ X n).Exact :=
  match n with
  | 0 => ShortComplex.exact_of_iso (snakeInputIso‚ÇÉ hX) (SnakeInput.L‚ÇÉ_exact _)
  | (n + 1 : ‚Ñï) => mapShortComplex‚ÇÇ_exact hX (n + 1)
  | -1 => ShortComplex.exact_of_iso (snakeInputIso‚ÇÄ hX) (SnakeInput.L‚ÇÄ_exact _)
  | -(n + 2 : ‚Ñï) => mapShortComplex‚ÇÇ_exact hX (n + 1)

noncomputable def shortComplexNeg‚ÇÇ‚ÇÉ (hX : ShortExact X) : ShortComplex (ModuleCat k) where
  X‚ÇÅ := TateCohomology X.X‚ÇÇ (-2)
  X‚ÇÇ := TateCohomology X.X‚ÇÉ (-2)
  X‚ÇÉ := TateCohomology X.X‚ÇÅ (-1)
  f := map X.g (-2)
  g := Œ¥Neg‚ÇÇ hX
  zero := by
    rw [‚Üê cancel_mono (ModuleCat.ofHom <| Submodule.subtype _)]
    have := congr($((groupHomology.H1ShortComplex‚ÇÉ hX).zero) ‚â´ (groupHomology.isoH0 X.X‚ÇÅ).inv)
    have h := (CommSq.vert_inv ‚ü®groupHomology.map_comp_isoH1_hom (MonoidHom.id G) X.g‚ü©).w
    simp_all only [groupHomology.Œ¥‚ÇÄ, Category.assoc, Iso.hom_inv_id, Category.comp_id, zero_comp,
      Œ¥Neg‚ÇÇ_comp_subtype, Iso.hom_inv_id_assoc]
    show groupHomology.map (MonoidHom.id G) X.g 1 ‚â´ _ = _
    simp_all only [‚Üê Category.assoc, Preadditive.IsIso.comp_right_eq_zero]
    simp_all

theorem shortComplexNeg‚ÇÇ‚ÇÉ_exact (hX : ShortExact X) : (shortComplexNeg‚ÇÇ‚ÇÉ hX).Exact := by
  rw [moduleCat_exact_iff_ker_sub_range]
  intro x (hx : _ = _)
  have : (groupHomology.chainsMap_shortExact hX).Œ¥ 1 0 rfl x = 0 := by
    apply_fun (groupHomology.isoH0 X.X‚ÇÅ).hom using (ModuleCat.mono_iff_injective _).1 inferInstance
    rw [map_zero]
    exact Subtype.ext_iff.1 hx
  exact ((moduleCat_exact_iff_ker_sub_range _).1
    (groupHomology.mapShortComplex‚ÇÉ_exact hX (i := 1) rfl))
    this

noncomputable def shortComplexNeg‚ÇÅ‚ÇÅ (hX : ShortExact X) : ShortComplex (ModuleCat k) where
  X‚ÇÅ := TateCohomology X.X‚ÇÉ (-2)
  X‚ÇÇ := TateCohomology X.X‚ÇÅ (-1)
  X‚ÇÉ := TateCohomology X.X‚ÇÇ (-1)
  f := Œ¥Neg‚ÇÇ hX
  g := map X.f (-1)
  zero := by
    refine ModuleCat.hom_ext <| LinearMap.ext fun x => Subtype.ext ?_
    have := congr(((groupHomology.isoH1 X.X‚ÇÉ).hom ‚â´ $((groupHomology.H0ShortComplex‚ÇÅ hX).zero)) x)
    simp_all only [groupHomology.Œ¥‚ÇÄ, Category.assoc, Iso.hom_inv_id_assoc, ModuleCat.hom_comp,
      Function.comp_apply, comp_zero, LinearMap.zero_apply]
    simpa [-zero, Œ¥Neg‚ÇÇ, map, -ZeroMemClass.coe_eq_zero] using this

theorem shortComplexNeg‚ÇÅ‚ÇÅ_exact (hX : ShortExact X) : (shortComplexNeg‚ÇÅ‚ÇÅ hX).Exact := by
  rw [moduleCat_exact_iff_ker_sub_range]
  intro x (hx : _ = _)
  have h := (moduleCat_exact_iff_ker_sub_range _).1 (groupHomology.H0ShortComplex‚ÇÅ_exact hX)
  rcases h (Subtype.ext_iff.1 hx) with ‚ü®y, (hy : _ = x.1)‚ü©
  refine ‚ü®(groupHomology.isoH1 X.X‚ÇÉ).inv y, Subtype.ext <| hy ‚ñ∏ ?_‚ü©
  exact congr($((Iso.inv_comp_eq _).2 (Œ¥Neg‚ÇÇ_comp_subtype' hX)) y)

noncomputable def shortComplexNeg‚ÇÅ‚ÇÉ (hX : ShortExact X) : ShortComplex (ModuleCat k) where
  X‚ÇÅ := TateCohomology X.X‚ÇÇ (-1)
  X‚ÇÇ := TateCohomology X.X‚ÇÉ (-1)
  X‚ÇÉ := TateCohomology X.X‚ÇÅ 0
  f := map X.g (-1)
  g := Œ¥Neg‚ÇÅ hX
  zero := by
    have : map X.g (-1) = (œÄ‚ÇÇ.mapIso (snakeInputIso‚ÇÄ hX)).inv
        ‚â´ (_ ‚â´ (œÄ‚ÇÉ.mapIso (snakeInputIso‚ÇÄ hX)).hom) :=
      (Iso.eq_inv_comp _).2 (snakeInputIso‚ÇÄ hX).hom.comm‚ÇÇ‚ÇÉ
    have h := congr($((snakeInput hX).L‚ÇÅ'.zero) ‚â´ œÄ‚ÇÅ.map (snakeInputIso‚ÇÉ hX).hom)
    simp_all [Œ¥Neg‚ÇÅ, -œÄ‚ÇÉ_map, -œÄ‚ÇÇ_map, -œÄ‚ÇÅ_map]

noncomputable def isoShortComplexNeg‚ÇÅ‚ÇÉ (hX : ShortExact X) :
    (snakeInput hX).L‚ÇÅ' ‚âÖ shortComplexNeg‚ÇÅ‚ÇÉ hX :=
  ShortComplex.isoMk (œÄ‚ÇÇ.mapIso (snakeInputIso‚ÇÄ hX))
    (œÄ‚ÇÉ.mapIso (snakeInputIso‚ÇÄ hX)) (œÄ‚ÇÅ.mapIso (snakeInputIso‚ÇÉ hX))
    (snakeInputIso‚ÇÄ hX).hom.comm‚ÇÇ‚ÇÉ (by simp [shortComplexNeg‚ÇÅ‚ÇÉ, Œ¥Neg‚ÇÅ, -œÄ‚ÇÉ_map])

theorem shortComplexNeg‚ÇÅ‚ÇÉ_exact (hX : ShortExact X) :
    (shortComplexNeg‚ÇÅ‚ÇÉ hX).Exact :=
  exact_of_iso (isoShortComplexNeg‚ÇÅ‚ÇÉ hX) (snakeInput hX).L‚ÇÅ'_exact

noncomputable def shortComplex‚ÇÄ‚ÇÅ (hX : ShortExact X) : ShortComplex (ModuleCat k) where
  X‚ÇÅ := TateCohomology X.X‚ÇÉ (-1)
  X‚ÇÇ := TateCohomology X.X‚ÇÅ 0
  X‚ÇÉ := TateCohomology X.X‚ÇÇ 0
  f := Œ¥Neg‚ÇÅ hX
  g := map X.f 0
  zero := by
    have : map X.f 0 = (œÄ‚ÇÅ.mapIso (snakeInputIso‚ÇÉ hX)).inv ‚â´
        (_ ‚â´ (œÄ‚ÇÇ.mapIso (snakeInputIso‚ÇÉ hX)).hom) :=
      (Iso.eq_inv_comp _).2 (snakeInputIso‚ÇÉ hX).hom.comm‚ÇÅ‚ÇÇ
    have h := congr($((snakeInput hX).L‚ÇÇ'.zero) ‚â´ œÄ‚ÇÇ.map (snakeInputIso‚ÇÉ hX).hom)
    simp_all [Œ¥Neg‚ÇÅ, -œÄ‚ÇÉ_map, -œÄ‚ÇÇ_map, -œÄ‚ÇÅ_map]

noncomputable def isoShortComplex‚ÇÄ‚ÇÅ (hX : ShortExact X) :
    (snakeInput hX).L‚ÇÇ' ‚âÖ shortComplex‚ÇÄ‚ÇÅ hX :=
  ShortComplex.isoMk (œÄ‚ÇÉ.mapIso (snakeInputIso‚ÇÄ hX))
    (œÄ‚ÇÅ.mapIso (snakeInputIso‚ÇÉ hX)) (œÄ‚ÇÇ.mapIso (snakeInputIso‚ÇÉ hX))
    (by simp [shortComplex‚ÇÄ‚ÇÅ, Œ¥Neg‚ÇÅ, -œÄ‚ÇÉ_map]) (snakeInputIso‚ÇÉ hX).hom.comm‚ÇÅ‚ÇÇ

theorem shortComplex‚ÇÄ‚ÇÅ_exact (hX : ShortExact X) :
    (shortComplex‚ÇÄ‚ÇÅ hX).Exact :=
  exact_of_iso (isoShortComplex‚ÇÄ‚ÇÅ hX) (snakeInput hX).L‚ÇÇ'_exact

noncomputable def shortComplex‚ÇÄ‚ÇÉ (hX : ShortExact X) : ShortComplex (ModuleCat k) where
  X‚ÇÅ := TateCohomology X.X‚ÇÇ 0
  X‚ÇÇ := TateCohomology X.X‚ÇÉ 0
  X‚ÇÉ := TateCohomology X.X‚ÇÅ 1
  f := map X.g 0
  g := Œ¥‚ÇÄ hX
  zero := by
    rw [‚Üê cancel_epi (ModuleCat.ofHom <| Submodule.mkQ _)]
    have := congr($((groupCohomology.H0ShortComplex‚ÇÉ hX).zero) ‚â´ (groupCohomology.isoH1 X.X‚ÇÅ).inv)
    simp_all only [groupCohomology.Œ¥‚ÇÄ, Category.assoc, Iso.hom_inv_id,
      Category.comp_id, zero_comp, map, Œ¥‚ÇÄ, comp_zero]
    convert this using 1

theorem shortComplex‚ÇÄ‚ÇÉ_exact (hX : ShortExact X) : (shortComplex‚ÇÄ‚ÇÉ hX).Exact := by
  rw [moduleCat_exact_iff_ker_sub_range]
  intro x (hx : _ = _)
  induction' x using Quotient.inductionOn' with x
  have h := (moduleCat_exact_iff_ker_sub_range _).1 (groupCohomology.H0ShortComplex‚ÇÉ_exact hX)
  obtain ‚ü®y, hy‚ü© := @h x <| by simpa [‚Üê (Iso.eq_comp_inv _).1 (mkQ_comp_Œ¥‚ÇÄ' hX)] using
      congr((groupCohomology.isoH1 X.X‚ÇÅ).hom $hx)
  exact ‚ü®Submodule.Quotient.mk y, congr(Submodule.Quotient.mk $hy)‚ü©

noncomputable def shortComplex‚ÇÅ‚ÇÅ (hX : ShortExact X) : ShortComplex (ModuleCat k) where
  X‚ÇÅ := TateCohomology X.X‚ÇÉ 0
  X‚ÇÇ := TateCohomology X.X‚ÇÅ 1
  X‚ÇÉ := TateCohomology X.X‚ÇÇ 1
  f := Œ¥‚ÇÄ hX
  g := map X.f 1
  zero := by
    have := (groupCohomology.map_comp_isoH1_hom (MonoidHom.id G) X.f)
    rw [‚Üê cancel_epi (ModuleCat.ofHom <| Submodule.mkQ _),
      ‚Üê cancel_mono (groupCohomology.isoH1 X.X‚ÇÇ).hom]
    simp_all only [Œ¥‚ÇÄ, map, Category.assoc, comp_zero]
    simpa only [zero_comp] using (groupCohomology.H1ShortComplex‚ÇÅ hX).zero

theorem shortComplex‚ÇÅ‚ÇÅ_exact (hX : ShortExact X) : (shortComplex‚ÇÅ‚ÇÅ hX).Exact := by
  rw [moduleCat_exact_iff_ker_sub_range]
  intro x (hx : _ = _)
  obtain ‚ü®y, hy‚ü© := (moduleCat_exact_iff_ker_sub_range _).1
     (groupCohomology.mapShortComplex‚ÇÅ_exact hX (i := 0) rfl) hx
  exact ‚ü®Submodule.mkQ _ ((groupCohomology.isoH0 _).hom y),
    hy ‚ñ∏ congr($((Iso.eq_inv_comp _).1 (mkQ_comp_Œ¥‚ÇÄ hX)) y)‚ü©

noncomputable def shortComplex‚ÇÅ (hX : ShortExact X) (n : ‚Ñ§) : ShortComplex (ModuleCat k) :=
  match n with
  | 0 => shortComplex‚ÇÄ‚ÇÅ hX
  | 1 => shortComplex‚ÇÅ‚ÇÅ hX
  | (n + 2 : ‚Ñï) => mapShortComplex‚ÇÅ hX (i := n + 1) (j := n + 2) rfl
  | -1 => shortComplexNeg‚ÇÅ‚ÇÅ hX
  | -(n + 2 : ‚Ñï) => mapShortComplex‚ÇÅ hX (i := n + 2) (j := n + 1) rfl

theorem shortComplex‚ÇÅ_exact (hX : ShortExact X) (n : ‚Ñ§) : (shortComplex‚ÇÅ hX n).Exact :=
  match n with
  | 0 => shortComplex‚ÇÄ‚ÇÅ_exact hX
  | 1 => shortComplex‚ÇÅ‚ÇÅ_exact hX
  | (_ + 2 : ‚Ñï) => groupCohomology.mapShortComplex‚ÇÅ_exact hX rfl
  | -1 => shortComplexNeg‚ÇÅ‚ÇÅ_exact hX
  | -(_ + 2 : ‚Ñï) => groupHomology.mapShortComplex‚ÇÅ_exact hX rfl

noncomputable def shortComplex‚ÇÉ (hX : ShortExact X) (n : ‚Ñ§) : ShortComplex (ModuleCat k) :=
  match n with
  | 0 => shortComplex‚ÇÄ‚ÇÉ hX
  | (n + 1 : ‚Ñï) => mapShortComplex‚ÇÉ hX (i := n) (j := n + 1) rfl
  | -1 => shortComplexNeg‚ÇÅ‚ÇÉ hX
  | -2 => shortComplexNeg‚ÇÇ‚ÇÉ hX
  | -(n + 3 : ‚Ñï) => mapShortComplex‚ÇÉ hX (i := n + 2) (j := n + 1) rfl

theorem shortComplex‚ÇÉ_exact (hX : ShortExact X) (n : ‚Ñ§) : (shortComplex‚ÇÉ hX n).Exact :=
  match n with
  | 0 => shortComplex‚ÇÄ‚ÇÉ_exact hX
  | (_ + 1 : ‚Ñï) => groupCohomology.mapShortComplex‚ÇÉ_exact hX rfl
  | -1 => shortComplexNeg‚ÇÅ‚ÇÉ_exact hX
  | -2 => shortComplexNeg‚ÇÇ‚ÇÉ_exact hX
  | -(_ + 3 : ‚Ñï) => groupHomology.mapShortComplex‚ÇÉ_exact hX rfl

end TateCohomology
