import Mathlib.Algebra.Homology.ShortComplex.ModuleCat
import Mathlib.Algebra.Homology.HomologySequence
import Mathlib.Algebra.Homology.HomologicalComplexAbelian
import Mathlib.RepresentationTheory.Rep

universe v u


open CategoryTheory ShortComplex Limits

namespace CategoryTheory.ShortComplex
section

variable {C : Type*} [Category C] [HasZeroMorphisms C]

@[ext high]
lemma RightHomologyData.Q_hom_ext {S : ShortComplex C} {Z : C} (X : RightHomologyData S)
    (f g : X.Q ‚ü∂ Z) (h : X.p ‚â´ f = X.p ‚â´ g) : f = g :=
  (cancel_epi X.p).1 h

@[ext high]
lemma LeftHomologyData.K_hom_ext {S : ShortComplex C} {Z : C} (X : LeftHomologyData S)
    (f g : Z ‚ü∂ X.K) (h : f ‚â´ X.i = g ‚â´ X.i) : f = g :=
  (cancel_mono X.i).1 h

@[ext high]
lemma RightHomologyData.H_hom_ext {S : ShortComplex C} {Z : C} (X : RightHomologyData S)
    (f g : Z ‚ü∂ X.H) (h : f ‚â´ X.Œπ = g ‚â´ X.Œπ) : f = g :=
  (cancel_mono X.Œπ).1 h

@[ext high]
lemma LeftHomologyData.H_hom_ext {S : ShortComplex C} {Z : C} (X : LeftHomologyData S)
    (f g : X.H ‚ü∂ Z) (h : X.œÄ ‚â´ f = X.œÄ ‚â´ g) : f = g :=
  (cancel_epi X.œÄ).1 h

@[simps!]
def leftHomologyMapData' {X Y : ShortComplex C} (œÜ : X ‚ü∂ Y)
    (h‚ÇÅ : LeftHomologyData X) (h‚ÇÇ : LeftHomologyData Y) :
    LeftHomologyMapData œÜ h‚ÇÅ h‚ÇÇ := by
  let œÜK : h‚ÇÅ.K ‚ü∂ h‚ÇÇ.K := h‚ÇÇ.liftK (h‚ÇÅ.i ‚â´ œÜ.œÑ‚ÇÇ)
    (by rw [Category.assoc, œÜ.comm‚ÇÇ‚ÇÉ, h‚ÇÅ.wi_assoc, zero_comp])
  have commf' : h‚ÇÅ.f' ‚â´ œÜK = œÜ.œÑ‚ÇÅ ‚â´ h‚ÇÇ.f' := by
    rw [‚Üê cancel_mono h‚ÇÇ.i, Category.assoc, Category.assoc, LeftHomologyData.liftK_i,
      LeftHomologyData.f'_i_assoc, LeftHomologyData.f'_i, œÜ.comm‚ÇÅ‚ÇÇ]
  let œÜH : h‚ÇÅ.H ‚ü∂ h‚ÇÇ.H := h‚ÇÅ.descH (œÜK ‚â´ h‚ÇÇ.œÄ)
    (by rw [reassoc_of% commf', h‚ÇÇ.f'_œÄ, comp_zero])
  exact ‚ü®œÜK, œÜH, by simp [œÜK], commf', by simp [œÜH]‚ü©

@[simps!]
def rightHomologyMapData' {X Y : ShortComplex C} (œÜ : X ‚ü∂ Y)
    (h‚ÇÅ : RightHomologyData X) (h‚ÇÇ : RightHomologyData Y) :
    RightHomologyMapData œÜ h‚ÇÅ h‚ÇÇ := by
  let œÜQ : h‚ÇÅ.Q ‚ü∂ h‚ÇÇ.Q := h‚ÇÅ.descQ (œÜ.œÑ‚ÇÇ ‚â´ h‚ÇÇ.p) (by rw [‚Üê œÜ.comm‚ÇÅ‚ÇÇ_assoc, h‚ÇÇ.wp, comp_zero])
  have commg' : œÜQ ‚â´ h‚ÇÇ.g' = h‚ÇÅ.g' ‚â´ œÜ.œÑ‚ÇÉ := by
    rw [‚Üê cancel_epi h‚ÇÅ.p, RightHomologyData.p_descQ_assoc, Category.assoc,
      RightHomologyData.p_g', œÜ.comm‚ÇÇ‚ÇÉ, RightHomologyData.p_g'_assoc]
  let œÜH : h‚ÇÅ.H ‚ü∂ h‚ÇÇ.H := h‚ÇÇ.liftH (h‚ÇÅ.Œπ ‚â´ œÜQ)
    (by rw [Category.assoc, commg', RightHomologyData.Œπ_g'_assoc, zero_comp])
  exact ‚ü®œÜQ, œÜH, by simp [œÜQ], commg', by simp [œÜH]‚ü©

@[simps]
def cyclesFunctor' (H : ‚àÄ (X : ShortComplex C), LeftHomologyData X) :
    ShortComplex C ‚•§ C where
  obj X := (H X).K
  map {X Y} f := (leftHomologyMapData' f (H X) (H Y)).œÜK

@[simps!]
noncomputable def isoCyclesFunctor [HasKernels C] [HasCokernels C]
    (H : ‚àÄ (X : ShortComplex C), LeftHomologyData X) :
    cyclesFunctor' H ‚âÖ cyclesFunctor C :=
  NatIso.ofComponents (fun X => cyclesMapIso' (Iso.refl _) (H X) _) fun {X Y} f => by
    simp [‚Üê cancel_mono Y.iCycles, iCycles, cyclesMap]

@[simps]
def opcyclesFunctor' (H : ‚àÄ (X : ShortComplex C), RightHomologyData X) :
    ShortComplex C ‚•§ C where
  obj X := (H X).Q
  map {X Y} f := (rightHomologyMapData' f (H X) (H Y)).œÜQ
  map_id X := by simp [‚Üê cancel_epi (H X).p]
  map_comp {X Y Z} _ _ := by simp [‚Üê cancel_epi (H X).p]

@[simps!]
noncomputable def isoOpcyclesFunctor [HasKernels C] [HasCokernels C]
    (H : ‚àÄ (X : ShortComplex C), RightHomologyData X) :
    opcyclesFunctor' H ‚âÖ opcyclesFunctor C :=
  NatIso.ofComponents (fun X => opcyclesMapIso' (Iso.refl _) (H X) _) fun {X Y} f => by
    simp [‚Üê cancel_mono Y.iCycles, iCycles, cyclesMap]


@[simps]
def leftHomologyFunctor' (H : ‚àÄ (X : ShortComplex C), LeftHomologyData X) :
    ShortComplex C ‚•§ C where
  obj X := (H X).H
  map {X Y} f := (leftHomologyMapData' f (H X) (H Y)).œÜH
  map_id X := by
    simp [‚Üê cancel_epi (H X).œÄ]
    convert Category.id_comp _
    simp [‚Üê cancel_mono (H X).i]
  map_comp {X Y Z} _ _ := by
    simp [‚Üê cancel_epi (H X).œÄ]
    simp only [‚Üê Category.assoc]
    congr 1
    simp [‚Üê cancel_mono (H Z).i]

@[simps]
def rightHomologyFunctor' (H : ‚àÄ (X : ShortComplex C), RightHomologyData X) :
    ShortComplex C ‚•§ C where
  obj X := (H X).H
  map {X Y} f := (rightHomologyMapData' f (H X) (H Y)).œÜH
  map_id X := by
    simp [‚Üê cancel_mono (H X).Œπ]
    convert Category.comp_id _
    simp [‚Üê cancel_epi (H X).p]
  map_comp {X Y Z} f g := by
    simp [‚Üê cancel_mono (H Z).Œπ]
    congr 1
    simp [‚Üê cancel_epi (H X).p]

@[simps]
def iNatTrans (H : ‚àÄ X : ShortComplex C, LeftHomologyData X) :
    cyclesFunctor' H ‚ü∂ œÄ‚ÇÇ where
  app X := (H X).i

@[simps]
def œÄNatTrans (H : ‚àÄ X : ShortComplex C, LeftHomologyData X) :
    cyclesFunctor' H ‚ü∂ leftHomologyFunctor' H where
  app X := (H X).œÄ

@[simps]
def pNatTrans (H : ‚àÄ X : ShortComplex C, RightHomologyData X) :
    œÄ‚ÇÇ ‚ü∂ opcyclesFunctor' H where
  app X := (H X).p

@[simps]
def ŒπNatTrans (H : ‚àÄ X : ShortComplex C, RightHomologyData X) :
    rightHomologyFunctor' H ‚ü∂ opcyclesFunctor' H where
  app X := (H X).Œπ

@[simps]
def f'NatTrans (H : ‚àÄ X : ShortComplex C, LeftHomologyData X) :
    œÄ‚ÇÅ ‚ü∂ cyclesFunctor' H where
  app X := (H X).f'
  naturality {X Y} f := by
    simp [‚Üê cancel_mono (H Y).i, f.comm‚ÇÅ‚ÇÇ]

@[simps]
def g'NatTrans (H : ‚àÄ X : ShortComplex C, RightHomologyData X) :
    opcyclesFunctor' H ‚ü∂ œÄ‚ÇÉ where
  app X := (H X).g'
  naturality {X Y} f := by
    simp [‚Üê cancel_epi (H X).p, f.comm‚ÇÇ‚ÇÉ]

end
end CategoryTheory.ShortComplex
section

variable {C D : Type*} [Category C] [Category D] [HasZeroMorphisms C] [HasZeroMorphisms D]
  {F‚ÇÅ F‚ÇÇ F‚ÇÉ : C ‚•§ D} [F‚ÇÅ.PreservesZeroMorphisms] [F‚ÇÇ.PreservesZeroMorphisms]
  [F‚ÇÉ.PreservesZeroMorphisms] (S : F‚ÇÅ ‚ü∂ F‚ÇÇ) (T : F‚ÇÇ ‚ü∂ F‚ÇÉ) (h : S ‚â´ T = 0)

@[reassoc (attr := simp)]
theorem _root_.CategoryTheory.ShortComplex.mapNatTrans_id {X : ShortComplex C} :
    X.mapNatTrans (ùüô F‚ÇÅ) = ùüô (X.map F‚ÇÅ) := by
  ext <;> simp [‚Üê NatTrans.comp_app]

@[reassoc (attr := simp)]
theorem _root_.CategoryTheory.ShortComplex.mapNatTrans_zero {X : ShortComplex C} :
    X.mapNatTrans (0 : F‚ÇÅ ‚ü∂ F‚ÇÇ) = 0 := by
  ext <;> simp [‚Üê NatTrans.comp_app]

@[reassoc (attr := simp)]
theorem _root_.CategoryTheory.ShortComplex.mapNatTrans_comp {X : ShortComplex C} :
    X.mapNatTrans (S ‚â´ T) = X.mapNatTrans S ‚â´ X.mapNatTrans T := by ext <;> simp

noncomputable def _root_.CategoryTheory.ShortComplex.isLimit_ofŒπ_mapNatTrans
    [HasLimitsOfShape WalkingParallelPair D] (H : IsLimit (KernelFork.ofŒπ S h))
    (X : ShortComplex C) :
    IsLimit (F := (parallelPair (X.mapNatTrans T) 0))
      (KernelFork.ofŒπ (X.mapNatTrans S) <| by ext <;> simp_all [‚Üê NatTrans.comp_app]) := by
  refine isLimitOfIsLimitœÄ _ ?_ ?_ ?_ <;>
  exact (KernelFork.isLimitMapConeEquiv _ _).symm <|
    (KernelFork.ofŒπ S h).isLimitMapConeEquiv _ ((evaluation_preservesLimit _ _).1 H).some

noncomputable def _root_.CategoryTheory.ShortComplex.isColimit_ofœÄ_mapNatTrans
    [HasColimitsOfShape WalkingParallelPair D] (H : IsColimit (CokernelCofork.ofœÄ T h))
    (X : ShortComplex C) :
    IsColimit (F := (parallelPair (X.mapNatTrans S) 0))
      (CokernelCofork.ofœÄ (X.mapNatTrans T) <| by ext <;> simp_all [‚Üê NatTrans.comp_app]) := by
  refine isColimitOfIsColimitœÄ _ ?_ ?_ ?_ <;>
  exact (CokernelCofork.isColimitMapCoconeEquiv _ _).symm <|
    (CokernelCofork.ofœÄ T h).isColimitMapCoconeEquiv _ ((evaluation_preservesColimit _ _).1 H).some

end

theorem _root_.CategoryTheory.ShortComplex.HomologyData.descQ_liftK
    {C : Type*} [Category C] [HasZeroMorphisms C] {S T : ShortComplex C}
    (SH : RightHomologyData S) (TH : LeftHomologyData T) (œÜ : S.X‚ÇÇ ‚ü∂ T.X‚ÇÇ)
    (hf : S.f ‚â´ œÜ = 0) (hg : œÜ ‚â´ T.g = 0) :
    SH.descQ (TH.liftK œÜ hg) (by ext; simpa) = TH.liftK (SH.descQ œÜ hf) (by ext; simpa) := by
  ext; simp

namespace CategoryTheory.Iso

variable {R : Type*} [Ring R] (X Y : ModuleCat R) (f : X ‚âÖ Y)

@[simp]
lemma toLinearEquiv_toLinearMap : f.toLinearEquiv = f.hom.hom := rfl

end CategoryTheory.Iso
namespace HomologicalComplex

variable {C : Type*} [Category C]

section

variable [Preadditive C] {Œπ : Type*} (c : ComplexShape Œπ) (n : Œπ) [CategoryWithHomology C]

instance : (cyclesFunctor C c n).Additive where
  map_add := by simp [‚Üê cancel_mono (iCycles _ _)]

instance : (opcyclesFunctor C c n).Additive where
  map_add := by simp [‚Üê cancel_epi (pOpcycles _ _)]

instance : (cyclesFunctor C c n).Additive where
  map_add := by simp [‚Üê cancel_mono (iCycles _ _)]

instance : (homologyFunctor C c n).Additive where
  map_add := by simp [‚Üê cancel_epi (homologyœÄ _ _)]

end
section

variable [Abelian C] {Œπ : Type*} (c : ComplexShape Œπ) (n : Œπ)

instance : PreservesFiniteLimits (cyclesFunctor C c n) := by
  ¬∑ have := ((HomologicalComplex.cyclesFunctor C c n).preservesFiniteLimits_tfae.out 0 3).1
    exact this fun X hX =>
      haveI := hX.2
      ‚ü®HomologicalComplex.cycles_left_exact _ hX.1 _, by simp; infer_instance‚ü©

instance : PreservesFiniteColimits (opcyclesFunctor C c n) := by
  ¬∑ have := ((HomologicalComplex.opcyclesFunctor C c n).preservesFiniteColimits_tfae.out 0 3).1
    exact this fun X hX =>
      haveI := hX.3
      ‚ü®HomologicalComplex.opcycles_right_exact _ hX.1 _, by simp; infer_instance‚ü©

end
end HomologicalComplex
namespace CategoryTheory.ShortComplex

variable {C : Type*} [Category C] [Abelian C]

@[ext]
theorem SnakeInput.hom_ext {S‚ÇÅ S‚ÇÇ : SnakeInput C} (f g : S‚ÇÅ ‚ü∂ S‚ÇÇ) (h‚ÇÄ : f.f‚ÇÄ = g.f‚ÇÄ)
    (h‚ÇÅ : f.f‚ÇÅ = g.f‚ÇÅ) (h‚ÇÇ : f.f‚ÇÇ = g.f‚ÇÇ) (h‚ÇÉ : f.f‚ÇÉ = g.f‚ÇÉ) : f = g := by
  cases f; cases g; simp_all

/-- Produce an isomorphism of snake inputs from an isomorphism between each row that make the
obvious diagram commute. -/
@[simps]
def SnakeInput.isoMk {S‚ÇÅ S‚ÇÇ : SnakeInput C} (f‚ÇÄ : S‚ÇÅ.L‚ÇÄ ‚âÖ S‚ÇÇ.L‚ÇÄ) (f‚ÇÅ : S‚ÇÅ.L‚ÇÅ ‚âÖ S‚ÇÇ.L‚ÇÅ)
    (f‚ÇÇ : S‚ÇÅ.L‚ÇÇ ‚âÖ S‚ÇÇ.L‚ÇÇ) (f‚ÇÉ : S‚ÇÅ.L‚ÇÉ ‚âÖ S‚ÇÇ.L‚ÇÉ) (comm‚ÇÄ‚ÇÅ : f‚ÇÄ.hom ‚â´ S‚ÇÇ.v‚ÇÄ‚ÇÅ = S‚ÇÅ.v‚ÇÄ‚ÇÅ ‚â´ f‚ÇÅ.hom)
    (comm‚ÇÅ‚ÇÇ : f‚ÇÅ.hom ‚â´ S‚ÇÇ.v‚ÇÅ‚ÇÇ = S‚ÇÅ.v‚ÇÅ‚ÇÇ ‚â´ f‚ÇÇ.hom) (comm‚ÇÇ‚ÇÉ : f‚ÇÇ.hom ‚â´ S‚ÇÇ.v‚ÇÇ‚ÇÉ = S‚ÇÅ.v‚ÇÇ‚ÇÉ ‚â´ f‚ÇÉ.hom) :
    S‚ÇÅ ‚âÖ S‚ÇÇ where
  hom := ‚ü®f‚ÇÄ.hom, f‚ÇÅ.hom, f‚ÇÇ.hom, f‚ÇÉ.hom, comm‚ÇÄ‚ÇÅ, comm‚ÇÅ‚ÇÇ, comm‚ÇÇ‚ÇÉ‚ü©
  inv := ‚ü®f‚ÇÄ.inv, f‚ÇÅ.inv, f‚ÇÇ.inv, f‚ÇÉ.inv, (CommSq.horiz_inv ‚ü®comm‚ÇÄ‚ÇÅ‚ü©).w,
    (CommSq.horiz_inv ‚ü®comm‚ÇÅ‚ÇÇ‚ü©).w, (CommSq.horiz_inv ‚ü®comm‚ÇÇ‚ÇÉ‚ü©).w‚ü©
  hom_inv_id := by ext <;> simp
  inv_hom_id := by ext <;> simp

end CategoryTheory.ShortComplex
section

variable {C D : Type*} [Category C] [Abelian C] [Category D] [Abelian D] (F G : C ‚•§ D)
  [F.Additive] [G.Additive] {X : ShortComplex C} (hX : ShortExact X)
  [PreservesFiniteColimits F] [PreservesFiniteLimits G]
  (T : F ‚ü∂ G) (R : Type u) [CommRing R]

/--
Given additive functors of abelian categories `F, G : C ‚•§ D` which are right and left exact
respectively, then applying a natural transformation `T : F ‚ü∂ G` to a short exact sequence `X` in
`C` gives us a commutative diagram
```
     F(X‚ÇÅ) ‚ü∂ F(X‚ÇÇ) ‚ü∂ F(X‚ÇÉ) ‚ü∂ 0
      |         |         |
0 ‚ü∂ G(X‚ÇÅ) ‚ü∂ G(X‚ÇÇ) ‚ü∂ G(X‚ÇÉ)
```
with exact rows. Along with a choice of kernel and cokernel of the vertical arrows, this defines a
`SnakeInput D`, and hence also a connecting homomorphism `Œ¥ : Ker(T(X‚ÇÉ)) ‚ü∂ Coker(T(X‚ÇÅ))`.
-/
@[simps]
noncomputable def CategoryTheory.ShortComplex.natTransSnakeInput {K C : ShortComplex D}
    (T : X.map F ‚ü∂ X.map G) {Œπ : K ‚ü∂ X.map F} (hŒπ : Œπ ‚â´ T = 0)
    (hK : IsLimit <| KernelFork.ofŒπ Œπ hŒπ) {œÄ : X.map G ‚ü∂ C} (hœÄ : T ‚â´ œÄ = 0)
    (hC : IsColimit <| CokernelCofork.ofœÄ œÄ hœÄ) :
    SnakeInput D where
  L‚ÇÄ := K
  L‚ÇÅ := X.map F
  L‚ÇÇ := X.map G
  L‚ÇÉ := C
  v‚ÇÄ‚ÇÅ := Œπ
  v‚ÇÅ‚ÇÇ := T
  v‚ÇÇ‚ÇÉ := œÄ
  w‚ÇÄ‚ÇÇ := hŒπ
  w‚ÇÅ‚ÇÉ := hœÄ
  h‚ÇÄ := hK
  h‚ÇÉ := hC
  L‚ÇÅ_exact := by have := (F.preservesFiniteColimits_tfae.out 3 0).1; exact (this ‚Äπ_‚Ä∫ X hX).1
  epi_L‚ÇÅ_g := by have := (F.preservesFiniteColimits_tfae.out 3 0).1; exact (this ‚Äπ_‚Ä∫ X hX).2
  L‚ÇÇ_exact := by have := (G.preservesFiniteLimits_tfae.out 3 0).1; exact (this ‚Äπ_‚Ä∫ X hX).1
  mono_L‚ÇÇ_f := by have := (G.preservesFiniteLimits_tfae.out 3 0).1; exact (this ‚Äπ_‚Ä∫ X hX).2


namespace CategoryTheory.ShortComplex

variable {R : Type u} [CommRing R] (S : ShortComplex (ModuleCat.{v} R))

@[simps! p_hom Œπ_hom]
def moduleCatRightHomologyData : RightHomologyData S where
  Q := ModuleCat.of R (S.X‚ÇÇ ‚ß∏ LinearMap.range S.f.hom)
  H := ModuleCat.of R <| LinearMap.ker <| (LinearMap.range S.f.hom).liftQ S.g.hom <|
    LinearMap.range_le_ker_iff.2 <| ModuleCat.hom_ext_iff.1 S.zero
  p := ModuleCat.ofHom <| Submodule.mkQ _
  Œπ := ModuleCat.ofHom <| Submodule.subtype _
  wp := by ext; exact (Submodule.Quotient.mk_eq_zero _).2 <| Set.mem_range_self _
  hp := ModuleCat.cokernelIsColimit _
  wŒπ := by ext; simp
  hŒπ := ModuleCat.kernelIsLimit <| ModuleCat.ofHom _

@[simp]
lemma moduleCatRightHomologyData_descQ {M : ModuleCat R} (œÜ : S.X‚ÇÇ ‚ü∂ M) (hf : S.f ‚â´ œÜ = 0) :
    (S.moduleCatRightHomologyData.descQ œÜ hf).hom =
      (LinearMap.range S.f.hom).liftQ œÜ.hom
      (LinearMap.range_le_ker_iff.2 <| ModuleCat.hom_ext_iff.1 hf) := rfl

@[simp]
lemma moduleCatRightHomologyData_liftH {M : ModuleCat R}
    (œÜ : M ‚ü∂ S.moduleCatRightHomologyData.Q) (h : œÜ ‚â´ S.moduleCatRightHomologyData.g' = 0) :
    (S.moduleCatRightHomologyData.liftH œÜ h).hom =
      œÜ.hom.codRestrict _ (fun m => by simpa using congr($h m)) := rfl

@[simp]
lemma moduleCatLeftHomologyData_descH {M : ModuleCat R} (œÜ : S.moduleCatLeftHomologyData.K ‚ü∂ M)
    (h : S.moduleCatLeftHomologyData.f' ‚â´ œÜ = 0) :
    (S.moduleCatLeftHomologyData.descH œÜ h).hom =
      (LinearMap.range <| ModuleCat.Hom.hom _).liftQ
      œÜ.hom (LinearMap.range_le_ker_iff.2 <| ModuleCat.hom_ext_iff.1 h) := rfl

@[simp]
lemma moduleCatLeftHomologyData_liftK {M : ModuleCat R} (œÜ : M ‚ü∂ S.X‚ÇÇ)
    (h : œÜ ‚â´ S.g = 0) :
    (S.moduleCatLeftHomologyData.liftK œÜ h).hom =
      œÜ.hom.codRestrict _ (fun m => by simpa using congr($h m)) := rfl

/-- Given a short complex `S` of modules, this is the isomorphism between
the abstract `S.opcycles` of the homology API and the more concrete description as
`S.X‚ÇÇ / LinearMap.range S.f.hom`. -/
noncomputable def moduleCatOpcyclesIso :
    S.opcycles ‚âÖ ModuleCat.of R (S.X‚ÇÇ ‚ß∏ LinearMap.range S.f.hom) :=
  S.moduleCatRightHomologyData.opcyclesIso

@[reassoc (attr := simp, elementwise)]
lemma pOpcycles_moduleCatOpcyclesIso_hom :
    S.pOpcycles ‚â´ S.moduleCatOpcyclesIso.hom = S.moduleCatRightHomologyData.p :=
  S.moduleCatRightHomologyData.pOpcycles_comp_opcyclesIso_hom

@[reassoc (attr := simp, elementwise)]
lemma p_moduleCatOpcyclesIso_inv :
    S.moduleCatRightHomologyData.p ‚â´ S.moduleCatOpcyclesIso.inv = S.pOpcycles :=
  S.moduleCatRightHomologyData.p_comp_opcyclesIso_inv

example {M N : ModuleCat R} (f : M ‚ü∂ N) (hf : Function.Bijective f.hom) :
    IsIso f := by exact (ConcreteCategory.isIso_iff_bijective f).mpr hf

def moduleCatHomologyDataHom :
    S.moduleCatLeftHomologyData.H ‚ü∂ S.moduleCatRightHomologyData.H :=
  S.moduleCatRightHomologyData.liftH (S.moduleCatLeftHomologyData.descH
    (S.moduleCatLeftHomologyData.i ‚â´ S.moduleCatRightHomologyData.p) <| by simp) <| by
      simp [‚Üê cancel_epi S.moduleCatLeftHomologyData.œÄ]

@[reassoc (attr := simp)]
lemma moduleCatHomologyDataHom_comp_Œπ :
    S.moduleCatHomologyDataHom ‚â´ S.moduleCatRightHomologyData.Œπ =
      S.moduleCatLeftHomologyData.descH
      (S.moduleCatLeftHomologyData.i ‚â´ S.moduleCatRightHomologyData.p) (by simp) := by
  simp [moduleCatHomologyDataHom]

instance : IsIso S.moduleCatHomologyDataHom :=
  (ConcreteCategory.isIso_iff_bijective _).2 <| by
    constructor
    ¬∑ refine (injective_iff_map_eq_zero _).2 fun x =>
        Submodule.Quotient.induction_on _ x fun x hx => (Submodule.Quotient.mk_eq_zero _).2 ?_
      let ‚ü®y, hy‚ü© := (Submodule.Quotient.mk_eq_zero _).1 <| Subtype.ext_iff.1 hx
      exact ‚ü®y, Subtype.ext hy‚ü©
    ¬∑ rintro ‚ü®x, hx‚ü©
      induction x using Submodule.Quotient.induction_on with | @H x =>
      exact ‚ü®Submodule.Quotient.mk ‚ü®x, hx‚ü©, rfl‚ü©

@[simps]
noncomputable def moduleCatHomologyData : HomologyData S where
  left := moduleCatLeftHomologyData S
  right := moduleCatRightHomologyData S
  iso := asIso S.moduleCatHomologyDataHom
  comm := by simp

end CategoryTheory.ShortComplex
end
