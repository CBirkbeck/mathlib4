/-
Copyright (c) 2023 Michael Rothgang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Michael Rothgang
-/

import Mathlib.Geometry.Manifold.Diffeomorph
import Mathlib.LinearAlgebra.Dimension

/-!
# Local diffeomorphisms between smooth manifolds

In this file, we define `C^n` local diffeomorphisms between manifolds.

A `C^n` map `f : M ‚Üí N` is a **local diffeomorphism at `x`** iff there are neighbourhoods `s`
and `t` of `x` and `f x`, respectively such that `f` restricts to a diffeomorphism from `s` and `t`.
`f` is called a **local diffeomorphism** iff it is a local diffeomorphism at every `x ‚àà M`.

## Main definitions
* `LocalDiffeomorphAt I J M N n f x`: `f` is a `C^n` local diffeomorphism at `x`
* `LocalDiffeomorph I J M N n f`: `f` is a `C^n` local diffeomorphism

## Main results
* Each of `Diffeomorph`, `LocalDiffeomorph`, and `LocalDiffeomorphAt` implies the next condition.
* `LocalDiffeomorph.image`: the image of a local diffeomorphism is open

* `Diffeomorph.mfderiv_toContinuousLinearEquiv`: each differential of a `C^n` diffeomorphism
(`n ‚â• 1`) is a linear equivalence.
* `LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv`: if `f` is a local diffeomorphism
at `x`, the differential `mfderiv I J n f x` is a continuous linear equivalence.
* `LocalDiffeomorph.differential_toContinuousLinearEquiv`: if `f` is a local diffeomorphism,
each differential `mfderiv I J n f x` is a continuous linear equivalence.

## TODO
* a local diffeomorphism is a diffeomorphism to its image
* a bijective local diffeomorphism is a diffeomorphism.
* if `f` is `C^n` at `x` and `mfderiv I J n f x` is a linear isomorphism,
`f` is a local diffeomorphism at `x`.
* if `f` is `C^n` and each differential is a linear isomorphism, `f` is a local diffeomorphism.

## Implementation notes

This notion of diffeomorphism is needed although there is already a notion of local structomorphism
because structomorphisms do not allow the model spaces `H` and `H'` of the two manifolds to be
different, i.e. for a structomorphism one has to impose `H = H'` which is often not the case in
practice.

## Tags
local diffeomorphism, manifold

-/

open Function Manifold Set SmoothManifoldWithCorners TopologicalSpace Topology

variable {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ùïú F]
  {H : Type*} [TopologicalSpace H]
  {G : Type*} [TopologicalSpace G]
  (I : ModelWithCorners ùïú E H) (J : ModelWithCorners ùïú F G)
  (M : Type*) [TopologicalSpace M] [ChartedSpace H M]
  (N : Type*) [TopologicalSpace N] [ChartedSpace G N] (n : ‚Ñï‚àû)

section LocalDiffeomorphAux
/-- A "diffeomorphism on" `s` is a function `f : M ‚Üí N` such that `f` restricts to a diffeomorphism
`s ‚Üí t` between open subsets of `M` and `N`, respectively.
This is an auxiliary definition and should not be used outside of this file. -/
structure LocalDiffeomorphAux extends LocalHomeomorph M N where
  contMDiffOn_toFun : ContMDiffOn I J n toFun source
  contMDiffOn_invFun : ContMDiffOn J I n invFun target

/-- Coercion of a `LocalDiffeomorphAux` to function.
Note that a `LocalDiffeomorphAux` is not `FunLike` (like `LocalHomeomorph`),
as `toFun` doesn't determine `invFun` outside of `target`. -/
instance : CoeFun (LocalDiffeomorphAux I J M N n) fun _ => M ‚Üí N :=
  ‚ü®fun Œ¶ => Œ¶.toFun'‚ü©

/-- A diffeomorphism is a local diffeomorphism. -/
def Diffeomorph.toLocalDiffeomorphAux (h : Diffeomorph I J M N n) : LocalDiffeomorphAux I J M N n :=
  {
    toLocalHomeomorph := h.toHomeomorph.toLocalHomeomorph
    contMDiffOn_toFun := fun x _ ‚Ü¶ h.contMDiff_toFun x
    contMDiffOn_invFun := fun _ _ ‚Ü¶ h.symm.contMDiffWithinAt
  }

-- Add the very basic API we need.
namespace LocalDiffeomorphAux
variable (Œ¶ : LocalDiffeomorphAux I J M N n) (hn : 1 ‚â§ n)

/-- The inverse of a local diffeomorphism. -/
protected def symm : LocalDiffeomorphAux J I N M n := by
  exact {
    toLocalHomeomorph := Œ¶.toLocalHomeomorph.symm
    contMDiffOn_toFun := Œ¶.contMDiffOn_invFun
    contMDiffOn_invFun := Œ¶.contMDiffOn_toFun
  }

protected theorem contMDiffOn : ContMDiffOn I J n Œ¶ Œ¶.source :=
  Œ¶.contMDiffOn_toFun

protected theorem contMDiffOn_symm : ContMDiffOn J I n Œ¶.invFun Œ¶.target :=
  Œ¶.contMDiffOn_invFun

protected theorem mdifferentiableOn : MDifferentiableOn I J Œ¶ Œ¶.source :=
  (Œ¶.contMDiffOn).mdifferentiableOn hn

protected theorem mdifferentiableOn_symm : MDifferentiableOn J I Œ¶.invFun Œ¶.target :=
  (Œ¶.symm).mdifferentiableOn hn

protected theorem mdifferentiableAt {x : M} (hx : x ‚àà Œ¶.source) : MDifferentiableAt I J Œ¶ x :=
  (Œ¶.mdifferentiableOn hn x hx).mdifferentiableAt (Œ¶.open_source.mem_nhds hx)

protected theorem mdifferentiableAt_symm {x : M} (hx : x ‚àà Œ¶.source) :
    MDifferentiableAt J I Œ¶.invFun (Œ¶ x) :=
  (Œ¶.symm).mdifferentiableAt hn (Œ¶.map_source hx)

/- We could add lots of additional API (following `Diffeomorph` and `LocalHomeomorph*), such as
* further continuity and differentiability lemmas
* refl and trans instances; lemmas between them.
As this declaration is meant for internal use only, we keep it simple. -/
end LocalDiffeomorphAux
end LocalDiffeomorphAux

variable {M N}

/-- `f : M ‚Üí N` is called a **`C^n` local diffeomorphism at *x*** iff there exist
  open sets `U ‚àã x` and `V ‚àã f x` and a diffeomorphism `Œ¶ : U ‚Üí V` such that `f = Œ¶` on `U`. -/
def IsLocalDiffeomorphAt (f : M ‚Üí N) (x : M) : Prop :=
  ‚àÉ Œ¶ : LocalDiffeomorphAux I J M N n, x ‚àà Œ¶.source ‚àß EqOn f Œ¶ Œ¶.source

/-- `f : M ‚Üí N` is a **`C^n` local diffeomorphism** iff it is a local diffeomorphism
at each `x ‚àà M`. -/
def IsLocalDiffeomorph (f : M ‚Üí N) : Prop :=
  ‚àÄ x : M, IsLocalDiffeomorphAt I J n f x

lemma isLocalDiffeomorph_iff {f : M ‚Üí N} :
    IsLocalDiffeomorph I J n f ‚Üî ‚àÄ x : M, IsLocalDiffeomorphAt I J n f x := by rfl

variable {n}

section Basic
variable {f : M ‚Üí N} {x : M}

/-- A `C^n` local diffeomorphism at `x` is `C^n` differentiable at `x`. -/
lemma contMDiffAt_of_isLocalDiffeomorphAt (hf : IsLocalDiffeomorphAt I J n f x) :
    ContMDiffAt I J n f x := by
  choose Œ¶ hx heq using hf
  -- In fact, even `ContMDiffOn I J n f Œ¶.source`.
  exact ((Œ¶.contMDiffOn_toFun).congr heq).contMDiffAt (Œ¶.open_source.mem_nhds hx)

/-- A local diffeomorphism at `x` is differentiable at `x`. -/
lemma mdifferentiableAt_of_isLocalDiffeomorphAt (hn : 1 ‚â§ n) (hf : IsLocalDiffeomorphAt I J n f x) :
    MDifferentiableAt I J f x :=
  (contMDiffAt_of_isLocalDiffeomorphAt I J hf).mdifferentiableAt hn

/-- A `C^n` local diffeomorphism is `C^n`. -/
lemma contMDiff_of_isLocalDiffeomorph (hf : IsLocalDiffeomorph I J n f) : ContMDiff I J n f :=
  fun x ‚Ü¶ contMDiffAt_of_isLocalDiffeomorphAt I J (hf x)

/-- A `C^n` local diffeomorphism is differentiable. -/
lemma mdifferentiable_of_isLocalDiffeomorph (hn : 1 ‚â§ n) (hf : IsLocalDiffeomorph I J n f) :
    MDifferentiable I J f :=
  fun x ‚Ü¶ mdifferentiableAt_of_isLocalDiffeomorphAt I J hn (hf x)

/-- A `C^n` diffeomorphism is a local diffeomorphism. -/
lemma Diffeomorph.isLocalDiffeomorph (Œ¶ : M ‚âÉ‚Çò^n‚üÆI, J‚üØ N) : IsLocalDiffeomorph I J n Œ¶ :=
  fun _ ‚Ü¶ ‚ü®Œ¶.toLocalDiffeomorphAux, by trivial, eqOn_refl Œ¶ _‚ü©

/-- The image of a local diffeomorphism is open. -/
def LocalDiffeomorph.image {f : M ‚Üí N} (hf : IsLocalDiffeomorph I J n f) : Opens N := by
  refine ‚ü®range f, ?_‚ü©
  apply isOpen_iff_forall_mem_open.mpr
  intro y hy

  -- Given `y = f x ‚àà range f`, we need to find `V ‚äÜ N` open containing `y`.
  rw [mem_range] at hy
  rcases hy with ‚ü®x, hxy‚ü©

  -- As f is a local diffeo at x, on some open set `U' ‚àã x` it agrees with a diffeo `Œ¶ : U' ‚Üí V'`.
  choose Œ¶ hyp using hf x
  rcases hyp with ‚ü®hxU, heq‚ü©
  -- Then `V:=Œ¶.target` has the desired properties.
  refine ‚ü®Œ¶.target, ?_, Œ¶.open_target, ?_‚ü©
  ¬∑ rw [‚Üê LocalHomeomorph.image_source_eq_target, ‚Üê heq.image_eq]
    exact image_subset_range f Œ¶.source
  ¬∑ rw [‚Üê hxy, heq hxU]
    exact Œ¶.toLocalHomeomorph.map_source hxU

lemma LocalDiffeomorph.image_coe {f : M ‚Üí N} (hf : IsLocalDiffeomorph I J n f) :
    (LocalDiffeomorph.image I J hf).1 = range f := rfl
end Basic

section helper -- FIXME: move to Algebra.Module.Basic
variable {R : Type*} [Ring R]
variable {E : Type*} [TopologicalSpace E] [AddCommMonoid E] [Module R E]
variable {F : Type*} [TopologicalSpace F] [AddCommMonoid F] [Module R F]

/-- `g ‚àò f = id` as `ContinuousLinearMap`s implies `g ‚àò f = id` as functions. -/
lemma LeftInverse.of_composition {f : E ‚ÜíL[R] F} {g : F ‚ÜíL[R] E}
    (hinv : g.comp f = ContinuousLinearMap.id R E) : LeftInverse g f := by
  have : g ‚àò f = id := calc g ‚àò f
      _ = ‚Üë(g.comp f) := by rw [ContinuousLinearMap.coe_comp']
      _ = ‚Üë( ContinuousLinearMap.id R E) := by rw [hinv]
      _ = id := by rw [ContinuousLinearMap.coe_id']
  exact congrFun this

/-- `f ‚àò g = id` as `ContinuousLinearMap`s implies `f ‚àò g = id` as functions. -/
lemma RightInverse.of_composition {f : E ‚ÜíL[R] F} {g : F ‚ÜíL[R] E}
    (hinv : f.comp g = ContinuousLinearMap.id R F) : RightInverse g f :=
  LeftInverse.of_composition hinv
end helper

section Differential
variable {I J} {f : M ‚Üí N} {x : M} (hn : 1 ‚â§ n)
variable [SmoothManifoldWithCorners I M] [SmoothManifoldWithCorners J N]

/-- If `f` is a `C^n` local diffeomorphism at `x`, for `n ‚â• 1`,
  the differential `df_x` is a linear equivalence. -/
noncomputable def LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv
    (hf : IsLocalDiffeomorphAt I J n f x) (hn : 1 ‚â§ n) :
    ContinuousLinearEquiv (RingHom.id ùïú) (TangentSpace I x) (TangentSpace J (f x)) := by
  choose Œ¶ hyp using hf
  rcases hyp with ‚ü®hxU, heq‚ü©
  let A := mfderiv I J f x
  have hA : A = mfderiv I J Œ¶ x := calc A
    _ = mfderivWithin I J f Œ¶.source x := (mfderivWithin_of_isOpen Œ¶.open_source hxU).symm
    _ = mfderivWithin I J Œ¶ Œ¶.source x :=
      mfderivWithin_congr (Œ¶.open_source.uniqueMDiffWithinAt hxU) heq (heq hxU)
    _ = mfderiv I J Œ¶ x := mfderivWithin_of_isOpen Œ¶.open_source hxU
  let B := mfderiv J I Œ¶.invFun (Œ¶ x)
  have inv1 : B.comp A = ContinuousLinearMap.id ùïú (TangentSpace I x) := calc B.comp A
    _ = B.comp (mfderiv I J Œ¶ x) := by rw [hA]
    _ = mfderiv I I (Œ¶.invFun ‚àò Œ¶) x :=
      (mfderiv_comp x (Œ¶.mdifferentiableAt_symm hn hxU) (Œ¶.mdifferentiableAt hn hxU)).symm
    _ = mfderivWithin I I (Œ¶.invFun ‚àò Œ¶) Œ¶.source x :=
      (mfderivWithin_of_isOpen Œ¶.open_source hxU).symm
    _ = mfderivWithin I I id Œ¶.source x := by
      have : EqOn (Œ¶.invFun ‚àò Œ¶) id Œ¶.source := fun _ hx ‚Ü¶ Œ¶.left_inv' hx
      apply mfderivWithin_congr (Œ¶.open_source.uniqueMDiffWithinAt hxU) this (this hxU)
    _ = mfderiv I I id x := mfderivWithin_of_isOpen Œ¶.open_source hxU
    _ = ContinuousLinearMap.id ùïú (TangentSpace I x) := mfderiv_id I
  have inv2 : A.comp B = ContinuousLinearMap.id ùïú (TangentSpace J (Œ¶ x)) := calc A.comp B
    _ = (mfderiv I J Œ¶ x).comp B := by rw [hA]
    _ = mfderiv J J (Œ¶ ‚àò Œ¶.invFun) (Œ¶ x) := by
        -- Use the chain rule: need to rewrite both the base point Œ¶ (Œ¶.invFun x)
        -- and the map Œ¶.invFun ‚àò Œ¶.
        have hŒ¶ : MDifferentiableAt I J Œ¶ x := Œ¶.mdifferentiableAt hn hxU
        rw [‚Üê (Œ¶.left_inv hxU)] at hŒ¶
        let r := mfderiv_comp (Œ¶ x) hŒ¶ (Œ¶.mdifferentiableAt_symm hn hxU)
        rw [(Œ¶.left_inv hxU)] at r
        exact r.symm
    _ = mfderivWithin J J (Œ¶ ‚àò Œ¶.invFun) Œ¶.target (Œ¶ x) :=
      (mfderivWithin_of_isOpen Œ¶.open_target (Œ¶.map_source hxU)).symm
    _ = mfderivWithin J J id Œ¶.target (Œ¶ x) := by
      have : EqOn (Œ¶ ‚àò Œ¶.invFun) id Œ¶.target := fun _ hx ‚Ü¶ Œ¶.right_inv' hx
      apply mfderivWithin_congr ?_ this (this (Œ¶.map_source hxU))
      exact (Œ¶.open_target.uniqueMDiffWithinAt (Œ¶.map_source hxU))
    _ = mfderiv J J id (Œ¶ x) := mfderivWithin_of_isOpen Œ¶.open_target (Œ¶.map_source hxU)
    _ = ContinuousLinearMap.id ùïú (TangentSpace J (Œ¶ x)) := mfderiv_id J
  exact {
    toFun := A
    invFun := B
    left_inv := LeftInverse.of_composition inv1
    right_inv := RightInverse.of_composition inv2
    continuous_toFun := A.cont
    continuous_invFun := B.cont
    map_add' := fun x_1 y ‚Ü¶ ContinuousLinearMap.map_add A x_1 y
    map_smul' := by intros; simp
  }

-- FIXME: for some reason, "rfl" fails.
lemma LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv_coe
    (hf : IsLocalDiffeomorphAt I J n f x) :
    LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv hf hn = mfderiv I J f x := by
  sorry

/-- Each differential of a `C^n` diffeomorphism (`n ‚â• 1`) is a linear equivalence. -/
noncomputable def Diffeomorph.mfderiv_toContinuousLinearEquiv (hn : 1 ‚â§ n) (Œ¶ : M ‚âÉ‚Çò^n‚üÆI, J‚üØ N)
    (x : M) : ContinuousLinearEquiv (RingHom.id ùïú) (TangentSpace I x) (TangentSpace J (Œ¶ x)) :=
  LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv (Œ¶.isLocalDiffeomorph x) hn

-- TODO: make `by rfl` work
lemma Diffeomorph.mfderiv_toContinuousLinearEquiv_coe (Œ¶ : M ‚âÉ‚Çò^n‚üÆI, J‚üØ N) :
    (Œ¶.mfderiv_toContinuousLinearEquiv hn x).toFun = mfderiv I J Œ¶ x := sorry

variable (x) in
/-- If `f` is a `C^n` local diffeomorphism (`n ‚â• 1`), each differential is a linear equivalence. -/
noncomputable def LocalDiffeomorph.mfderiv_toContinuousLinearEquiv (hf : IsLocalDiffeomorph I J n f) :
    ContinuousLinearEquiv (RingHom.id ùïú) (TangentSpace I x) (TangentSpace J (f x)) :=
  LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv (hf x) hn

variable (x) in
lemma LocalDiffeomorph.mfderiv_toContinuousLinearEquiv_coe (hf : IsLocalDiffeomorph I J n f):
    LocalDiffeomorph.mfderiv_toContinuousLinearEquiv x hn hf = mfderiv I J f x := by
  let r := LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv_coe hn (hf x)
  have : (LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv (hf x) hn) =
    (LocalDiffeomorph.mfderiv_toContinuousLinearEquiv x hn hf) :=
    sorry -- TODO: why doesn't `rfl` work?
  exact this ‚ñ∏ r

/-! # Differential under composition with a local diffeomorphism -/
variable
  {E' : Type*} [NormedAddCommGroup E'] [NormedSpace ùïú E'] {H' : Type*} [TopologicalSpace H']
  (M' : Type*) [TopologicalSpace M'] [ChartedSpace H' M']
  (I' : ModelWithCorners ùïú E' H') [SmoothManifoldWithCorners I' M'] [SmoothManifoldWithCorners I M]
  [SmoothManifoldWithCorners J N]

variable {œÜ : M ‚Üí M'} (hœÜ : IsLocalDiffeomorphAt I I' n œÜ x)
  {f : M' ‚Üí N} (hf : MDifferentiableAt I' J f (œÜ x))

-- TODO: the next six lemmas all start the same way; can I refactor this somehow?

/-- If `œÜ` is a local diffeomorphism at `x` and `f` is differentiable at `œÜ x`,
  `mfderiv (f‚àòœÜ) x` is surjective iff `mfderiv f (œÜ x)` is. -/
lemma mfderiv_surjective_iff_comp_isLocalDiffeomorph : Surjective (mfderiv I' J f (œÜ x))
    ‚Üî Surjective (mfderiv I J (f ‚àò œÜ) x) := by
  let dœÜ := mfderiv I I' œÜ x
  let dœÜiso := LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv hœÜ hn
  have aux : dœÜiso = dœÜ := LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv_coe hn hœÜ
  have hœÜ' : HasMFDerivAt I I' œÜ x dœÜ :=
    (mdifferentiableAt_of_isLocalDiffeomorphAt _ _ hn hœÜ).hasMFDerivAt
  rw [HasMFDerivAt.mfderiv ((hf.hasMFDerivAt).comp hœÜ' (x := x)), ‚Üê aux]
  rw [‚Üê dœÜiso.bijective.surjective.of_comp_iff]
  exact Iff.rfl

/-- If `œÜ` is a local diffeomorphism at `x` and `f` is differentiable at `œÜ x`,
  `mfderiv (f‚àòœÜ) x` is injective iff `mfderiv f (œÜ x)` is. -/
lemma mfderiv_injective_iff_comp_isLocalDiffeomorph :
    Injective (mfderiv I' J f (œÜ x)) ‚Üî Injective (mfderiv I J (f ‚àò œÜ) x) := by
  let dœÜ := mfderiv I I' œÜ x
  let dœÜiso := LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv hœÜ hn
  have aux : dœÜiso = dœÜ := LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv_coe hn hœÜ
  have hœÜ' : HasMFDerivAt I I' œÜ x dœÜ :=
    (mdifferentiableAt_of_isLocalDiffeomorphAt _ _ hn hœÜ).hasMFDerivAt
  rw [HasMFDerivAt.mfderiv ((hf.hasMFDerivAt).comp hœÜ' (x := x)), ‚Üê aux]
  rw [‚Üê Injective.of_comp_iff' _ dœÜiso.bijective]
  exact Iff.rfl

/-- If `f` is differentiable at `x` and `œÜ` is a local diffeomorphism at `f x`,
  `mfderiv (œÜ‚àòf) x` is bijective iff `mfderiv œÜ (f x)` is. -/
lemma mfderiv_bijective_iff_comp_isLocalDiffeomorph :
    Bijective (mfderiv I' J f (œÜ x)) ‚Üî Bijective (mfderiv I J (f ‚àò œÜ) x) := by
  rw [Bijective, Bijective, and_congr]
  apply mfderiv_injective_iff_comp_isLocalDiffeomorph hn hœÜ (hf := hf)
  apply mfderiv_surjective_iff_comp_isLocalDiffeomorph hn hœÜ (hf := hf)

open LinearMap (rank)

/-- If `M` is finite-dimensional, then rk d(f‚àòœÜ)_x = rk (df_œÜ(x)). -/
-- xxx: is finite-dimensionality required, or obvious by Lean convention?
lemma mfderiv_rank_eq_comp_isLocalDiffeomorph [FiniteDimensional ùïú E] :
    rank (mfderiv I' J f (œÜ x)).toLinearMap = rank (mfderiv I J (f ‚àò œÜ) x).toLinearMap := by

  let dœÜ := mfderiv I I' œÜ x
  let dœÜiso := LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv hœÜ hn
  have aux : dœÜiso = dœÜ := LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv_coe hn hœÜ
  have hœÜ' : HasMFDerivAt I I' œÜ x dœÜ :=
    (mdifferentiableAt_of_isLocalDiffeomorphAt _ _ hn hœÜ).hasMFDerivAt
  rw [HasMFDerivAt.mfderiv ((hf.hasMFDerivAt).comp hœÜ' (x := x)), ‚Üê aux]

  set df := mfderiv I' J f (œÜ x)
  apply le_antisymm ?_ (LinearMap.rank_comp_le_left dœÜiso.toLinearMap df.toLinearMap)
  sorry -- this is the hard inclusion: why is rank df ‚â§ rank (df ‚àò dœÜiso)
  -- probably doable, using LinearMap.le_rank_iff_exists_linearIndependent

variable {f : M ‚Üí M'} (hf : MDifferentiableAt I I' f x)
  {œÜ : M' ‚Üí N} (hœÜ : IsLocalDiffeomorphAt I' J n œÜ (f x))

/-- If `f` is differentiable at `x` and `œÜ` is a local diffeomorphism at `f x`,
  `mfderiv (œÜ‚àòf) x` is surjective iff `mfderiv œÜ (f x)` is. -/
lemma mfderiv_surjective_iff_comp_isLocalDiffeomorph' :
    Surjective (mfderiv I I' f x) ‚Üî Surjective (mfderiv I J (œÜ ‚àò f) x) := by
  let dœÜ := mfderiv I' J œÜ (f x)
  let dœÜiso := LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv hœÜ hn
  have aux : dœÜiso = dœÜ := LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv_coe hn hœÜ
  have hœÜ : HasMFDerivAt I' J œÜ (f x) dœÜ :=
    (mdifferentiableAt_of_isLocalDiffeomorphAt _ _ hn hœÜ).hasMFDerivAt
  rw [HasMFDerivAt.mfderiv (hœÜ.comp (hf.hasMFDerivAt) (x := x)), ‚Üê aux]
  rw [‚Üê Surjective.of_comp_iff' dœÜiso.bijective]
  exact Iff.rfl

/-- If `f` is differentiable at `x` and `œÜ` is a local diffeomorphism at `f x`,
  `mfderiv (œÜ‚àòf) x` is injective iff `mfderiv œÜ (f x)` is. -/
lemma mfderiv_injective_iff_comp_isLocalDiffeomorph' :
    Injective (mfderiv I I' f x) ‚Üî Injective (mfderiv I J (œÜ ‚àò f) x) := by
  let dœÜ := mfderiv I' J œÜ (f x)
  let dœÜiso := LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv hœÜ hn
  have aux : dœÜiso = dœÜ := LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv_coe hn hœÜ
  have hœÜ : HasMFDerivAt I' J œÜ (f x) dœÜ :=
    (mdifferentiableAt_of_isLocalDiffeomorphAt _ _ hn hœÜ).hasMFDerivAt
  rw [HasMFDerivAt.mfderiv (hœÜ.comp (hf.hasMFDerivAt) (x := x)), ‚Üê aux]
  rw [‚Üê Injective.of_comp_iff dœÜiso.bijective.injective]
  exact Iff.rfl

/-- If `f` is differentiable at `x` and `œÜ` is a local diffeomorphism at `f x`,
  `mfderiv (œÜ‚àòf) x` is bijective iff `mfderiv œÜ (f x)` is. -/
lemma mfderiv_bijective_iff_comp_isLocalDiffeomorph' :
    Bijective (mfderiv I I' f x) ‚Üî Bijective (mfderiv I J (œÜ ‚àò f) x) := by
  rw [Bijective, Bijective, and_congr]
  apply mfderiv_injective_iff_comp_isLocalDiffeomorph' hn hœÜ (hf := hf)
  apply mfderiv_surjective_iff_comp_isLocalDiffeomorph' hn hœÜ (hf := hf)

/-- If `M` is finite-dimensional, then rk d(œÜ ‚àò f)_x = rk (dœÜ_f(x)). -/
lemma mfderiv_rank_eq_comp_isLocalDiffeomorph' [FiniteDimensional ùïú E] : 0 = 1 := by
  -- TODO. this doesn't typecheck, both sides live in different universes
  -- need to name levels explicitly, then use Cardinal.lift on e.g. the LHS
  -- rank (mfderiv I' J œÜ (f x)).toLinearMap = rank (mfderiv I I' f x).toLinearMap := by
  let dœÜ := mfderiv I' J œÜ (f x)
  let dœÜiso := LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv hœÜ hn
  have aux : dœÜiso = dœÜ := LocalDiffeomorphAt.mfderiv_toContinuousLinearEquiv_coe hn hœÜ
  have hœÜ : HasMFDerivAt I' J œÜ (f x) dœÜ :=
    (mdifferentiableAt_of_isLocalDiffeomorphAt _ _ hn hœÜ).hasMFDerivAt
  -- rw [HasMFDerivAt.mfderiv (hœÜ.comp (hf.hasMFDerivAt) (x := x)), ‚Üê aux]
  -- set dœÜ := mfderiv I' J œÜ (f x)
  -- LinearEquiv.rank_map_eq should do the trick here
  sorry

end Differential


-- charts have isomorphic differentials: TODO move to different file!
section ChartsDifferentials
variable [I.Boundaryless] [SmoothManifoldWithCorners I M]

def extChartAt_sourceToOpen (x : M) : Opens M :=
  ‚ü®(extChartAt I x).source, isOpen_extChartAt_source I x‚ü©

def extChartAt_targetToOpen (x : M) : Opens E :=
  ‚ü®(extChartAt I x).target, isOpen_extChartAt_target I x‚ü©

/-- If `I` is boundaryless, an extended local homeomorphism is a local homeomorph. -/
def LocalHomeomorph.extend_toLocalHomeomorph {e : LocalHomeomorph M H} : LocalHomeomorph M E :=
  {
    toLocalEquiv := e.extend I
    open_source := isOpen_extend_source e I
    open_target := isOpen_extend_target e I
    continuous_toFun := continuousOn_extend e I
    continuous_invFun := continuousOn_extend_symm e I
  }

variable (n) {e : LocalHomeomorph M H} (he : e ‚àà maximalAtlas I M)

/-- If `M` has no boundary, every extended chart is a local diffeomorphism
between its source and target. -/
-- TODO: show this for every interior point x (once we know the interior is open)
def extend_toLocalDiffeomorphAux : LocalDiffeomorphAux I ùìò(ùïú, E) M E n :=
  {
    toLocalHomeomorph := e.extend_toLocalHomeomorph I
    contMDiffOn_toFun := by
      show ContMDiffOn I ùìò(ùïú, E) n (e.extend I) (e.extend I).source
      rw [e.extend_source]
      exact contMDiffOn_extend he
    contMDiffOn_invFun := by
      show ContMDiffOn ùìò(ùïú, E) I n (e.extend I).symm (e.extend I).target
      -- should be a lemma! xxx think: why not the standard form for extend_target?
      have : (e.extend I).target = I '' e.target := by rw [e.extend_target, I.image_eq]
      exact this ‚ñ∏ contMDiffOn_extend_symm he
  }

lemma LocalHomeomorph.extend_toLocalDiffeomorphAux_coe :
    (extend_toLocalDiffeomorphAux I n he).toFun = e.extend I := by
  rfl

lemma extend_toLocalDiffeomorphAux_source :
    (extend_toLocalDiffeomorphAux I n he).source = e.source := by
  rw [‚Üê e.extend_source I]
  rfl

-- this is currently unused -> is this useful to keep?
lemma extend_toLocalDiffeomorphAux_target :
    (extend_toLocalDiffeomorphAux I n he).target = (e.extend I).target := by
  rfl

/-- If `M` has no boundary, every inverse extended chart is a local diffeomorphism
between its source and target. -/
-- TODO: show this for every interior point x (once we know the interior is open)
def extend_symm_toLocalDiffeomorphAux : LocalDiffeomorphAux ùìò(ùïú, E) I E M n :=
  (extend_toLocalDiffeomorphAux I n he).symm

/- these lemmas are currently unused --- are they useful?
lemma LocalHomeomorph.extend_symm_toLocalDiffeomorphAux_coe :
    (extend_symm_toLocalDiffeomorphAux I n he).toFun = (e.extend I).symm := by
  rfl

lemma extend_symm_toLocalDiffeomorphAux_source :
    (extend_symm_toLocalDiffeomorphAux I n he).source = (e.extend I).target := by
  rfl

lemma extend_symm_toLocalDiffeomorphAux_target :
    (extend_symm_toLocalDiffeomorphAux I n he).target = e.source := by
    rw [‚Üê e.extend_source I]
    rfl
-/

variable {I}

/-- If `M` has no boundary, each extended chart is a local diffeomorphism at each point
in its source. -/
-- TODO: show this for every interior point x (once we know the interior is open)
lemma LocalHomeomorph.extend_isLocalDiffeomorphAt {x : M} (hx : x ‚àà e.source) :
    IsLocalDiffeomorphAt I ùìò(ùïú, E) n (e.extend I) x := by
  refine ‚ü®extend_toLocalDiffeomorphAux I n he,
    (extend_toLocalDiffeomorphAux_source I n he) ‚ñ∏ hx, ?_‚ü©
  rw [extend_toLocalDiffeomorphAux_source I n he, ‚Üê extend_toLocalDiffeomorphAux_coe]
  exact eqOn_refl _ _

/-- If `M` has no boundary, each inverse extended chart is a local diffeomorphism
at each point of its source. -/
-- TODO: show this for every interior point x (once we know the interior is open)
lemma LocalHomeomorph.extend_symm_isLocalDiffeomorphAt {y : E} (hy : y ‚àà (e.extend I).target) :
    IsLocalDiffeomorphAt ùìò(ùïú, E) I n (e.extend I).symm y :=
  ‚ü®(extend_toLocalDiffeomorphAux I n he).symm, hy, eqOn_refl _ _‚ü©

/-- If `M` has no boundary, `extChartAt I x` is a local diffeomorphism at `x`. -/
-- TODO: show this for every interior point x (once we know the interior is open)
lemma extChartAt_isLocalDiffeomorphAt (x : M) :
    IsLocalDiffeomorphAt I ùìò(ùïú, E) n (extChartAt I x) x := by
  rw [extChartAt]
  exact (chartAt H x).extend_isLocalDiffeomorphAt n (chart_mem_maximalAtlas I x)
    (mem_chart_source H x)

/-- If `M` has no boundary, `(extChartAt I x).symm` is a local diffeomorphism at `x`. -/
-- TODO: show this for every interior point x (once we know the interior is open)
lemma extChartAt_symm_isLocalDiffeomorphAt {x : M} {y : E} (hy : y ‚àà (extChartAt I x).target) :
    IsLocalDiffeomorphAt ùìò(ùïú, E) I n (extChartAt I x).symm y := by
  rw [extChartAt]
  exact (chartAt H x).extend_symm_isLocalDiffeomorphAt n (chart_mem_maximalAtlas I x) hy

variable {f : M ‚Üí N} {x : M} (hf : MDifferentiableAt I J f x)
  {e : LocalHomeomorph M H} (hx : x ‚àà e.source) {e' : LocalHomeomorph N G} (hx' : (f x) ‚àà e'.source)
  (he : e ‚àà maximalAtlas I M) (he' : e' ‚àà maximalAtlas J N)
  [SmoothManifoldWithCorners I M] [SmoothManifoldWithCorners J N] [J.Boundaryless]

variable {J n}

/-- If `f : M ‚Üí N` has surjective differential at `x` iff its local coordinate representation
  `œÜ ‚àò f ‚àò œà.symm`, for any two charts œÜ, œà around `x` and `f x`, does. -/
lemma mfderiv_surjective_iff_in_charts (hn : 1 ‚â§ n) : Surjective (mfderiv I J f x)
    ‚Üî Surjective (fderiv ùïú ((e'.extend J) ‚àò f ‚àò (e.extend I).symm) (e.extend I x)) := by
  rw [‚Üê mfderiv_eq_fderiv]
  have h : (e.extend I) x ‚àà (e.extend I).symm.source := by
    rw [LocalEquiv.symm_source]
    exact e.mapsTo_extend' I hx
  let x' := (e.extend I).symm ((e.extend I) x)
  have eqx' : x' = (e.extend I).symm ((e.extend I) x) := rfl
  have : x' = x := e.extend_left_inv I hx
  -- f ‚àò e.symm is differentiable at eExt x
  have hf' : MDifferentiableAt ùìò(ùïú, E) J (f ‚àò (e.extend I).symm) ((e.extend I) x) := by
    rw [‚Üê this] at hf
    have aux : MDifferentiableAt ùìò(ùïú, E) I (e.extend I).symm ((e.extend I) x) := by
      apply ContMDiffAt.mdifferentiableAt _ hn
      -- No boundary: this is true, but too strong for our last step: use a weaker version.
      -- apply ContMDiffOn.contMDiffAt _ ((e.isOpen_extend_target I).mem_nhds h0)
      have : IsOpen (I '' e.target) := sorry -- have this on a branch also
      apply ContMDiffOn.contMDiffAt _ (this.mem_nhds (mem_image_of_mem I (e.map_source hx)))
      exact contMDiffOn_extend_symm he
    exact hf.comp _ aux (M := E)

  let r1 := e.extend_symm_isLocalDiffeomorphAt n he h
  let s1 := mfderiv_surjective_iff_comp_isLocalDiffeomorph hn _ _ r1 (this.symm ‚ñ∏ hf)
  rw [e.extend_left_inv I hx] at s1
  rw [s1]

  let r2 := e'.extend_isLocalDiffeomorphAt n he' (this ‚ñ∏ hx')
  rw [mfderiv_surjective_iff_comp_isLocalDiffeomorph' hn (hœÜ := this.symm ‚ñ∏ r2) hf']
  rfl

/-- If `f : M ‚Üí N` has injective differential at `x` iff its local coordinate representation
  `œÜ ‚àò f ‚àò œà.symm`, for any two charts œÜ, œà around `x` and `f x`, does. -/
lemma mfderiv_injective_iff_in_charts (hn : 1 ‚â§ n) : Injective (mfderiv I J f x)
    ‚Üî Injective (fderiv ùïú ((e'.extend J) ‚àò f ‚àò (e.extend I).symm) (e.extend I x)) := by
  -- TODO: reduce this duplication somehow!
  rw [‚Üê mfderiv_eq_fderiv]
  have h : (e.extend I) x ‚àà (e.extend I).symm.source := by
    rw [LocalEquiv.symm_source]
    exact e.mapsTo_extend' I hx
  let x' := (e.extend I).symm ((e.extend I) x)
  have eqx' : x' = (e.extend I).symm ((e.extend I) x) := rfl
  have : x' = x := e.extend_left_inv I hx
  -- f ‚àò e.symm is differentiable at eExt x
  have hf' : MDifferentiableAt ùìò(ùïú, E) J (f ‚àò (e.extend I).symm) ((e.extend I) x) := by
    rw [‚Üê this] at hf
    have aux : MDifferentiableAt ùìò(ùïú, E) I (e.extend I).symm ((e.extend I) x) := by
      apply ContMDiffAt.mdifferentiableAt _ hn
      -- No boundary: this is true, but too strong for our last step: use a weaker version.
      -- apply ContMDiffOn.contMDiffAt _ ((e.isOpen_extend_target I).mem_nhds h0)
      have : IsOpen (I '' e.target) := sorry -- have this on a branch also
      apply ContMDiffOn.contMDiffAt _ (this.mem_nhds (mem_image_of_mem I (e.map_source hx)))
      exact contMDiffOn_extend_symm he
    exact hf.comp _ aux (M := E)
  let r1 := e.extend_symm_isLocalDiffeomorphAt n he h
  let s1 := mfderiv_injective_iff_comp_isLocalDiffeomorph hn _ _ r1 (this.symm ‚ñ∏ hf)
  rw [e.extend_left_inv I hx] at s1
  rw [s1]
  let r2 := e'.extend_isLocalDiffeomorphAt n he' (this ‚ñ∏ hx')
  rw [mfderiv_injective_iff_comp_isLocalDiffeomorph' hn (hœÜ := this.symm ‚ñ∏ r2) hf']
  rfl

/-- If `f : M ‚Üí N` has bijective differential at `x` iff its local coordinate representation
  `œÜ ‚àò f ‚àò œà.symm`, for any two charts œÜ, œà around `x` and `f x`, does. -/
-- this proof is just the chart application of the other statements... can I reuse this?
lemma mfderiv_bijective_iff_in_charts (hn : 1 ‚â§ n) : Bijective (mfderiv I J f x) ‚Üî
    Bijective (fderiv ùïú ((e'.extend J) ‚àò f ‚àò (e.extend I).symm) (e.extend I x)) := by
  rw [Bijective, Bijective, and_congr]
  apply mfderiv_injective_iff_in_charts hf hx hx' he he' hn
  apply mfderiv_surjective_iff_in_charts hf hx hx' he he' hn

-- corollary: if M is finite-dimensional, rank of differential df_x equals the rank of d(f_loc),
-- where f_loc is the local coordinate representation
-- xxx: introduce a definition for local coordinate rep?

-- Sample application of the lemmas above.
lemma cor (hn : 1 ‚â§ n) : Bijective (mfderiv I J f x) ‚Üî
    Bijective (fderiv ùïú ((extChartAt J (f x)) ‚àò f ‚àò (extChartAt I x).symm) (extChartAt I x x)) := by
  rw [extChartAt]
  apply mfderiv_bijective_iff_in_charts hf (mem_chart_source H x) (mem_chart_source G (f x))
    (chart_mem_maximalAtlas I x) (chart_mem_maximalAtlas J (f x)) hn

end ChartsDifferentials
