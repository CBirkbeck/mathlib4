/-
Copyright (c) 2023 Winston Yin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Winston Yin
-/
import Mathlib.Analysis.ODE.PicardLindelof
import Mathlib.Geometry.Manifold.InteriorBoundary
import Mathlib.Geometry.Manifold.MFDeriv

/-!
# Integral curves of vector fields on a manifold

For any continuously differentiable vector field on a manifold `M` and any chosen interior point
`x‚ÇÄ : M`, there exists an integral curve `Œ≥ : ‚Ñù ‚Üí M` such that `Œ≥ t‚ÇÄ = x‚ÇÄ` and the tangent vector of
`Œ≥` at `t` coincides with the vector field at `Œ≥ t` for all `t` within an open interval around `t‚ÇÄ`.

As a corollary, such an integral curve exists for any starting point `x‚ÇÄ` if `M` is a manifold
without boundary.

## Main definition

- **IsIntegralCurve Œ≥ v t‚ÇÄ x‚ÇÄ**: If `v : M ‚Üí TM` is a vector field on `M` and `x : M`,
`IsIntegralCurveAt Œ≥ v t‚ÇÄ x‚ÇÄ` means `Œ≥ : ‚Ñù ‚Üí M` is a differentiable integral curve of `v` with
`Œ≥ x‚ÇÄ = t‚ÇÄ`.

## Tags

integral curve, vector field, local existence
-/

open scoped Manifold
open Set

section

variable
  {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {H : Type*} [TopologicalSpace H] {I : ModelWithCorners ùïú E H}
  {M : Type*} [TopologicalSpace M] [ChartedSpace H M] [SmoothManifoldWithCorners I M]
  {E' : Type*} [NormedAddCommGroup E'] [NormedSpace ùïú E']
  {H' : Type*} [TopologicalSpace H'] {I' : ModelWithCorners ùïú E' H'}
  {M' : Type*} [TopologicalSpace M'] [ChartedSpace H' M'] [SmoothManifoldWithCorners I' M']

variable (I) in
def tangentCoordChange (x y : M) := (tangentBundleCore I M).coordChange (achart H x) (achart H y)

lemma tangentCoordChange_def {x y z : M} : tangentCoordChange I x y z =
    fderivWithin ùïú (extChartAt I y ‚àò (extChartAt I x).symm) (range I) (extChartAt I x z) := rfl

lemma tangentCoordChange_self {x z : M} {v : E} (h : z ‚àà (extChartAt I x).source) :
    tangentCoordChange I x x z v = v := by
  apply (tangentBundleCore I M).coordChange_self
  rw [tangentBundleCore_baseSet, coe_achart, ‚ÜêextChartAt_source I]
  exact h

-- continuousOn?

lemma tangentCoordChange_comp {w x y z : M} {v : E}
    (h : z ‚àà (extChartAt I w).source ‚à© (extChartAt I x).source ‚à© (extChartAt I y).source) :
    tangentCoordChange I x y z (tangentCoordChange I w x z v) = tangentCoordChange I w y z v := by
  apply (tangentBundleCore I M).coordChange_comp
  simp only [tangentBundleCore_baseSet, coe_achart, ‚ÜêextChartAt_source I]
  exact h

lemma hasFDerivWithinAt_tangentCoordChange {x y z : M}
    (h : extChartAt I x z ‚àà ((extChartAt I x).symm ‚â´ (extChartAt I y)).source) :
    HasFDerivWithinAt ((extChartAt I y) ‚àò (extChartAt I x).symm) (tangentCoordChange I x y z)
      (range I) (extChartAt I x z) :=
  ((contDiffWithinAt_ext_coord_change I y x h).differentiableWithinAt (by simp)).hasFDerivWithinAt

end

variable
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E]
  {H : Type*} [TopologicalSpace H] {I : ModelWithCorners ‚Ñù E H}
  {M : Type*} [TopologicalSpace M] [ChartedSpace H M] [SmoothManifoldWithCorners I M]
  {E' : Type*} [NormedAddCommGroup E'] [NormedSpace ‚Ñù E']
  {H' : Type*} [TopologicalSpace H'] {I' : ModelWithCorners ‚Ñù E' H'}
  {M' : Type*} [TopologicalSpace M'] [ChartedSpace H' M'] [SmoothManifoldWithCorners I' M']
  {v : (x : M) ‚Üí TangentSpace I x} {x‚ÇÄ : M}
  (hv : ContMDiffAt I I.tangent 1 (fun x => (‚ü®x, v x‚ü© : TangentBundle I M)) x‚ÇÄ) (t‚ÇÄ : ‚Ñù)

/-- If `v : M ‚Üí TM` is a vector field on `M` and `x : M`, `IsIntegralCurveAt Œ≥ v t‚ÇÄ x‚ÇÄ` means
  `Œ≥ : ‚Ñù ‚Üí M` is a differentiable integral curve of `v` with `Œ≥ x‚ÇÄ = t‚ÇÄ`. -/
def IsIntegralCurveAt (Œ≥ : ‚Ñù ‚Üí M) (v : (x : M) ‚Üí TangentSpace I x) (t‚ÇÄ : ‚Ñù) (x‚ÇÄ : M) :=
  Œ≥ t‚ÇÄ = x‚ÇÄ ‚àß ‚àÉ Œµ > (0 : ‚Ñù), ‚àÄ (t : ‚Ñù), t ‚àà Ioo (t‚ÇÄ - Œµ) (t‚ÇÄ + Œµ) ‚Üí
    HasMFDerivAt ùìò(‚Ñù, ‚Ñù) I Œ≥ t ((1 : ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù).smulRight (v (Œ≥ t)))

/-
TODO:
* split the theorem below into smaller lemmas, e.g. involving IsIntegralCurveAt?
* shift and stretch theorems
* constant curve at stationary point of v
-/
variable {t‚ÇÄ}

lemma IsIntegralCurveAt.comp_add {Œ≥ : ‚Ñù ‚Üí M} (hŒ≥ : IsIntegralCurveAt Œ≥ v t‚ÇÄ x‚ÇÄ) (dt : ‚Ñù) :
    IsIntegralCurveAt (Œ≥ ‚àò (fun t => t + dt)) v (t‚ÇÄ - dt) x‚ÇÄ := by
  obtain ‚ü®h1, Œµ, hŒµ, h2‚ü© := hŒ≥
  refine' ‚ü®by simp [h1], Œµ, hŒµ, _‚ü©
  intros t ht
  rw [sub_right_comm, sub_add_eq_add_sub, ‚Üêadd_mem_Ioo_iff_left] at ht
  have h2' := h2 (t + dt) ht
  rw [Function.comp_apply,
    ‚ÜêContinuousLinearMap.comp_id (ContinuousLinearMap.smulRight 1 (v (Œ≥ (t + dt))))]
  apply HasMFDerivAt.comp t h2'
  /- this makes me think we need lemmas for `HasMFDerivAt ùìò(E, E) ùìò(E, E)` of simple operations -/
  refine' ‚ü®(continuous_add_right _).continuousAt, _‚ü©
  simp only [writtenInExtChartAt, extChartAt, LocalHomeomorph.extend,
    LocalHomeomorph.refl_localEquiv, LocalEquiv.refl_source,
    LocalHomeomorph.singletonChartedSpace_chartAt_eq, modelWithCornersSelf_localEquiv,
    LocalEquiv.trans_refl, LocalEquiv.refl_coe, LocalEquiv.refl_symm, Function.comp.right_id,
    Function.comp.left_id, modelWithCornersSelf_coe, range_id, id_eq, hasFDerivWithinAt_univ]
  apply HasFDerivAt.add_const
  exact hasFDerivAt_id _

lemma isIntegralCurveAt_comp_add {Œ≥ : ‚Ñù ‚Üí M} {dt : ‚Ñù} : IsIntegralCurveAt Œ≥ v t‚ÇÄ x‚ÇÄ ‚Üî
    IsIntegralCurveAt (Œ≥ ‚àò (fun t => t + dt)) v (t‚ÇÄ - dt) x‚ÇÄ := by
  refine' ‚ü®fun hŒ≥ => IsIntegralCurveAt.comp_add hŒ≥ _, _‚ü©
  intro hŒ≥
  have := hŒ≥.comp_add (-dt)
  rw [sub_neg_eq_add, sub_add_cancel] at this
  convert this
  ext
  simp

lemma IsIntegralCurveAt.comp_mul_pos {Œ≥ : ‚Ñù ‚Üí M} (hŒ≥ : IsIntegralCurveAt Œ≥ v t‚ÇÄ x‚ÇÄ) {a : ‚Ñù}
    (ha : 0 < a) : IsIntegralCurveAt (Œ≥ ‚àò (fun t => t * a)) (a ‚Ä¢ v) (t‚ÇÄ / a) x‚ÇÄ := by
  obtain ‚ü®h1, Œµ, hŒµ, h2‚ü© := hŒ≥
  refine' ‚ü®by rw [Function.comp_apply, div_mul_cancel _ (ne_of_gt ha)]; exact h1, Œµ / a,
    div_pos hŒµ ha, _‚ü©
  intros t ht
  have ht : t * a ‚àà Ioo (t‚ÇÄ - Œµ) (t‚ÇÄ + Œµ) := by
    rw [mem_Ioo, ‚Üêdiv_lt_iff ha, ‚Üêlt_div_iff ha, sub_div, add_div]
    exact ht
  have h2' := h2 (t * a) ht
  rw [Function.comp_apply, Pi.smul_apply, ‚ÜêContinuousLinearMap.smulRight_comp]
  apply HasMFDerivAt.comp t h2'
  refine' ‚ü®(continuous_mul_right _).continuousAt, _‚ü©
  simp only [writtenInExtChartAt, extChartAt, LocalHomeomorph.extend,
    LocalHomeomorph.refl_localEquiv, LocalEquiv.refl_source,
    LocalHomeomorph.singletonChartedSpace_chartAt_eq, modelWithCornersSelf_localEquiv,
    LocalEquiv.trans_refl, LocalEquiv.refl_coe, LocalEquiv.refl_symm, Function.comp.right_id,
    Function.comp.left_id, modelWithCornersSelf_coe, range_id, id_eq, hasFDerivWithinAt_univ]
  apply HasFDerivAt.mul_const'
  exact hasFDerivAt_id _

lemma isIntegralCurvAt_comp_mul_pos {Œ≥ : ‚Ñù ‚Üí M} {a : ‚Ñù} (ha : 0 < a) :
    IsIntegralCurveAt Œ≥ v t‚ÇÄ x‚ÇÄ ‚Üî IsIntegralCurveAt (Œ≥ ‚àò (fun t => t * a)) (a ‚Ä¢ v) (t‚ÇÄ / a) x‚ÇÄ := by
  refine' ‚ü®fun hŒ≥ => IsIntegralCurveAt.comp_mul_pos hŒ≥ ha, _‚ü©
  intro hŒ≥
  have := hŒ≥.comp_mul_pos (inv_pos_of_pos ha)
  rw [smul_smul, inv_mul_eq_div, div_self (ne_of_gt ha), one_smul, ‚Üêdiv_mul_eq_div_div_swap,
    inv_mul_eq_div, div_self (ne_of_gt ha), div_one, Function.comp.assoc] at this
  convert this
  ext
  simp [inv_mul_eq_div, div_self (ne_of_gt ha)]

lemma IsIntegralCurveAt.comp_neg {Œ≥ : ‚Ñù ‚Üí M} (hŒ≥ : IsIntegralCurveAt Œ≥ v t‚ÇÄ x‚ÇÄ) :
    IsIntegralCurveAt (Œ≥ ‚àò Neg.neg) (-v) (-t‚ÇÄ) x‚ÇÄ := by
  obtain ‚ü®h1, Œµ, hŒµ, h2‚ü© := hŒ≥
  refine' ‚ü®by simp [h1], Œµ, hŒµ, _‚ü©
  intros t ht
  rw [‚Üêneg_add', neg_add_eq_sub, ‚Üêneg_sub, ‚Üêneg_mem_Ioo_iff] at ht
  have h2' := h2 (-t) ht
  rw [Function.comp_apply, Pi.neg_apply, ‚Üêneg_one_smul ‚Ñù (v (Œ≥ (-t))),
    ‚ÜêContinuousLinearMap.smulRight_comp]
  apply HasMFDerivAt.comp t h2'
  refine' ‚ü®continuousAt_neg, _‚ü©
  simp only [writtenInExtChartAt, extChartAt, LocalHomeomorph.extend,
    LocalHomeomorph.refl_localEquiv, LocalEquiv.refl_source,
    LocalHomeomorph.singletonChartedSpace_chartAt_eq, modelWithCornersSelf_localEquiv,
    LocalEquiv.trans_refl, LocalEquiv.refl_coe, LocalEquiv.refl_symm, Function.comp.right_id,
    Function.comp.left_id, modelWithCornersSelf_coe, range_id, id_eq, hasFDerivWithinAt_univ]
  apply HasDerivAt.hasFDerivAt
  exact hasDerivAt_neg _

lemma isIntegralCurveAt_comp_neg {Œ≥ : ‚Ñù ‚Üí M} :
    IsIntegralCurveAt Œ≥ v t‚ÇÄ x‚ÇÄ ‚Üî IsIntegralCurveAt (Œ≥ ‚àò Neg.neg) (-v) (-t‚ÇÄ) x‚ÇÄ := by
  refine' ‚ü®fun hŒ≥ => IsIntegralCurveAt.comp_neg hŒ≥, _‚ü©
  intro hŒ≥
  have := hŒ≥.comp_neg
  rw [Function.comp.assoc, neg_comp_neg, neg_neg, neg_neg] at this
  exact this

lemma IsIntegralCurveAt.comp_mul_ne_zero {Œ≥ : ‚Ñù ‚Üí M} (hŒ≥ : IsIntegralCurveAt Œ≥ v t‚ÇÄ x‚ÇÄ) {a : ‚Ñù}
    (ha : a ‚â† 0) : IsIntegralCurveAt (Œ≥ ‚àò (fun t => t * a)) (a ‚Ä¢ v) (t‚ÇÄ / a) x‚ÇÄ := by
  rw [ne_iff_lt_or_gt] at ha
  cases' ha with ha ha
  ¬∑ apply isIntegralCurveAt_comp_neg.mpr
    have : (fun t ‚Ü¶ t * a) ‚àò Neg.neg = fun t ‚Ü¶ t * -a := by ext; simp
    rw [Function.comp.assoc, this, ‚Üêneg_smul, ‚Üêdiv_neg]
    exact hŒ≥.comp_mul_pos (neg_pos_of_neg ha)
  ¬∑ exact hŒ≥.comp_mul_pos ha

lemma isIntegralCurveAt_comp_mul_ne_zero {Œ≥ : ‚Ñù ‚Üí M} {a : ‚Ñù} (ha : a ‚â† 0) :
    IsIntegralCurveAt Œ≥ v t‚ÇÄ x‚ÇÄ ‚Üî IsIntegralCurveAt (Œ≥ ‚àò (fun t => t * a)) (a ‚Ä¢ v) (t‚ÇÄ / a) x‚ÇÄ := by
  refine' ‚ü®fun hŒ≥ => IsIntegralCurveAt.comp_mul_ne_zero hŒ≥ ha, _‚ü©
  intro hŒ≥
  have := hŒ≥.comp_mul_ne_zero (inv_ne_zero ha)
  rw [smul_smul, inv_mul_eq_div, div_self ha, one_smul, ‚Üêdiv_mul_eq_div_div_swap,
    inv_mul_eq_div, div_self ha, div_one, Function.comp.assoc] at this
  convert this
  ext
  simp [inv_mul_eq_div, div_self ha]

/-- For any continuously differentiable vector field and any chosen non-boundary point `x‚ÇÄ` on the
  manifold, there exists an integral curve `Œ≥ : ‚Ñù ‚Üí M` such that `Œ≥ t‚ÇÄ = x‚ÇÄ` and the tangent vector
  of `Œ≥` at `t` coincides with the vector field at `Œ≥ t` for all `t` within an open interval around
  `t‚ÇÄ`.-/
theorem exists_integralCurve_of_contMDiff_tangent_section (hx : I.IsInteriorPoint x‚ÇÄ) :
    ‚àÉ (Œ≥ : ‚Ñù ‚Üí M), IsIntegralCurveAt Œ≥ v t‚ÇÄ x‚ÇÄ := by
  /- express the derivative of the section `v` in the local charts -/
  rw [contMDiffAt_iff] at hv
  obtain ‚ü®_, hv‚ü© := hv
  /- use Picard-Lindel√∂f theorem to extract a solution to the ODE in the chart defined by `v` -/
  obtain ‚ü®f, hf1, Œµ1, hŒµ1, hf2‚ü© :=
    exists_forall_hasDerivAt_Ioo_eq_of_contDiffAt t‚ÇÄ
      (ContDiffAt.snd (hv.contDiffAt (SmoothManifoldWithCorners.range_mem_nhds_isInteriorPoint hx)))
  rw [‚ÜêReal.ball_eq_Ioo] at hf2
  /- use continuity of `f` to extract `Œµ2` so that for `t ‚àà Real.ball t‚ÇÄ Œµ2`,
    `f t ‚àà interior (extChartAt I x‚ÇÄ).target` -/
  have hcont := (hf2 t‚ÇÄ (Real.ball_eq_Ioo .. ‚ñ∏ Metric.mem_ball_self hŒµ1)).continuousAt
  rw [continuousAt_def, hf1] at hcont
  have hnhds : f ‚Åª¬π' (interior (extChartAt I x‚ÇÄ).target) ‚àà nhds t‚ÇÄ :=
    hcont _ (IsOpen.mem_nhds isOpen_interior hx)
  rw [Metric.mem_nhds_iff] at hnhds
  obtain ‚ü®Œµ2, hŒµ2, hf3‚ü© := hnhds
  simp_rw [subset_def, mem_preimage] at hf3
  /- prove that `Œ≥ := (extChartAt I x‚ÇÄ).symm ‚àò f` is a desired integral curve -/
  refine' ‚ü®(extChartAt I x‚ÇÄ).symm ‚àò f, _, min Œµ1 Œµ2, lt_min hŒµ1 hŒµ2, _‚ü©
  ¬∑ apply Eq.symm
    rw [Function.comp_apply, hf1, LocalEquiv.left_inv _ (mem_extChartAt_source ..)]
  intros t ht
  /- collect useful terms in convenient forms -/
  rw [‚ÜêReal.ball_eq_Ioo] at ht
  have ht1 := mem_of_mem_of_subset ht (Metric.ball_subset_ball (min_le_left ..))
  have ht2 := mem_of_mem_of_subset ht (Metric.ball_subset_ball (min_le_right ..))
  have h : HasDerivAt f
    ((fderivWithin ‚Ñù ((extChartAt I x‚ÇÄ) ‚àò (extChartAt I ((extChartAt I x‚ÇÄ).symm (f t))).symm)
        (range I) (extChartAt I ((extChartAt I x‚ÇÄ).symm (f t)) ((extChartAt I x‚ÇÄ).symm (f t))))
      (v ((extChartAt I x‚ÇÄ).symm (f t))))
    t := hf2 t ht1
  rw [‚ÜêtangentCoordChange_def] at h
  have hf3' := mem_of_mem_of_subset (hf3 t ht2) interior_subset
  /- express the derivative of the integral curve in the local chart -/
  rw [HasMFDerivAt]
  use ContinuousAt.comp
    (continuousAt_extChartAt_symm'' _ _ hf3') ((hf2 t ht1).continuousAt)
  apply HasDerivWithinAt.hasFDerivWithinAt
  rw [modelWithCornersSelf_coe, range_id, hasDerivWithinAt_univ, ext_chart_model_space_apply,
    writtenInExtChartAt, Function.comp_apply, Function.comp.assoc, extChartAt_model_space_eq_id,
    LocalEquiv.refl_symm, LocalEquiv.refl_coe, Function.comp.right_id, ‚ÜêFunction.comp.assoc]
  /- `h` gives the derivative of `f` at `t` as `‚ÜëD (v (Œ≥ t))`, where `D` is the change of
    coordinates from the chart at `Œ≥ t` to the chart at `x‚ÇÄ`. we wish to use
    `HasFDerivAt.comp_hasDerivAt` to get the derivative of `Œ≥` at `t` as `v (Œ≥ t)`, which requires
    first expressing `v (Œ≥ t)` as `‚ÜëD_inv ‚ÜëD (v (Œ≥ t))`, where `D_inv` is the opposite change of
    coordinates as `D`. -/
  rw [‚ÜêtangentCoordChange_self (I := I) (M := M) (x := (extChartAt I x‚ÇÄ).symm (f t))
    (z := (extChartAt I x‚ÇÄ).symm (f t)) (v := v ((extChartAt I x‚ÇÄ).symm (f t)))]
  rw [‚ÜêtangentCoordChange_comp (x := x‚ÇÄ)]
  apply HasFDerivAt.comp_hasDerivAt _ _ h
  apply HasFDerivWithinAt.hasFDerivAt (s := range I)
  nth_rw 4 [‚Üê(extChartAt I x‚ÇÄ).right_inv hf3']
  apply hasFDerivWithinAt_tangentCoordChange
  ¬∑ rw [LocalEquiv.right_inv _ hf3', LocalEquiv.trans_source, LocalEquiv.symm_source]
    use hf3'
    rw [mem_preimage]
    exact mem_extChartAt_source ..
  ¬∑ rw [mem_nhds_iff]
    exact ‚ü®interior (extChartAt I x‚ÇÄ).target,
      subset_trans interior_subset (extChartAt_target_subset_range ..), isOpen_interior, hf3 _ ht2‚ü©
  ¬∑ rw [inter_right_comm, inter_self, mem_inter_iff]
    use mem_extChartAt_source ..
    rw [‚Üêmem_preimage]
    exact mem_of_mem_of_subset hf3' (extChartAt I x‚ÇÄ).target_subset_preimage_source
  ¬∑ exact mem_extChartAt_source ..

/-- For any continuously differentiable vector field defined on a manifold without boundary and any
  chosen starting point `x‚ÇÄ : M`, an integral curve `Œ≥ : ‚Ñù ‚Üí M` exists such that `Œ≥ t‚ÇÄ = x‚ÇÄ` and the
  tangent vector of `Œ≥` at `t` coincides with the vector field at `Œ≥ t` for all `t` within an open
  interval around `t‚ÇÄ`. -/
lemma exists_integralCurve_of_contMDiff_tangent_section_boundaryless [I.Boundaryless] :
    ‚àÉ (Œ≥ : ‚Ñù ‚Üí M), IsIntegralCurveAt Œ≥ v t‚ÇÄ x‚ÇÄ :=
  exists_integralCurve_of_contMDiff_tangent_section hv I.isInteriorPoint
