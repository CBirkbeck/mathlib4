/-
Copyright (c) 2025 Michael Rothgang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Michael Rothgang
-/
import Mathlib.Geometry.Manifold.ContMDiff.Defs
import Mathlib.Geometry.Manifold.MFDeriv.Defs
import Mathlib.Geometry.Manifold.MSplits

/-! # Smooth immersions and embeddings

In this file, we define `C^k` immersions and embeddings between `C^k` manifolds.
The correct definition in the infinite-dimensional setting differs from the standard
finite-dimensional definition: we cannot prove the implication yet.

TODO complete this doc-string, once more details are clear.

## TODO
- the product of two immersions

-/

open scoped Manifold Topology ContDiff

open Function Set

-- XXX: does NontriviallyNormedField also work? Splits seems to require more...
variable {ùïú : Type*} [RCLike ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {E' : Type*} [NormedAddCommGroup E'] [NormedSpace ùïú E']
  {F F' : Type*} [NormedAddCommGroup F] [NormedSpace ùïú F] [NormedAddCommGroup F'] [NormedSpace ùïú F']
  {H : Type*} [TopologicalSpace H] {H' : Type*} [TopologicalSpace H']
  {G : Type*} [TopologicalSpace G] {G' : Type*} [TopologicalSpace G']
  {I : ModelWithCorners ùïú E H} {I' : ModelWithCorners ùïú E' H'}
  {J : ModelWithCorners ùïú F G} {J' : ModelWithCorners ùïú F G'}

variable {M : Type*} [TopologicalSpace M] [ChartedSpace H M]
  {M' : Type*} [TopologicalSpace M'] [ChartedSpace H' M']
  {N : Type*} [TopologicalSpace N] [ChartedSpace G N]
  {N' : Type*} [TopologicalSpace N'] [ChartedSpace G' N']
  {n : WithTop ‚Ñï‚àû} [IsManifold I n M] [IsManifold I' n M'] [IsManifold J n N]

-- XXX: should the next three definitions be a class instead?
-- Are these slice charts canonical enough that we want the typeclass system to kick in?

variable (F I I' n) in
/-- `f : M ‚Üí N` is a `C^k` immersion at `x` if there are charts `œÜ` and `œà` of `M` and `N`
around `x` and `f x`, respectively such that in these charts, `f` looks like `u ‚Ü¶ (u, 0)`.

XXX: why in `maximalAtlas` and not merely atlas? to given ourselves extra freedom?
-/
def IsImmersionAt (f : M ‚Üí M') (x : M) : Prop :=
  ‚àÉ equiv : (E √ó F) ‚âÉL[ùïú] E',
  ‚àÉ domChart : PartialHomeomorph M H, ‚àÉ codChart : PartialHomeomorph M' H',
    x ‚àà domChart.source ‚àß f x ‚àà codChart.source ‚àß
    domChart ‚àà IsManifold.maximalAtlas I n M ‚àß
    codChart ‚àà IsManifold.maximalAtlas I' n M' ‚àß
    EqOn ((codChart.extend I') ‚àò f ‚àò (domChart.extend I).symm) (equiv ‚àò (¬∑, 0))
      (domChart.extend I).target

namespace IsImmersionAt

variable {f g : M ‚Üí M'} {x : M}

noncomputable def equiv (h : IsImmersionAt F I I' n f x) : (E √ó F) ‚âÉL[ùïú] E' :=
  Classical.choose h

noncomputable def domChart (h : IsImmersionAt F I I' n f x) : PartialHomeomorph M H :=
  Classical.choose (Classical.choose_spec h)

noncomputable def codChart (h : IsImmersionAt F I I' n f x) : PartialHomeomorph M' H' :=
  Classical.choose (Classical.choose_spec (Classical.choose_spec h))

noncomputable def mem_domChart_source (h : IsImmersionAt F I I' n f x) : x ‚àà h.domChart.source :=
  (Classical.choose_spec ((Classical.choose_spec (Classical.choose_spec h)))).1

noncomputable def mem_codChart_source (h : IsImmersionAt F I I' n f x) : f x ‚àà h.codChart.source :=
  (Classical.choose_spec ((Classical.choose_spec (Classical.choose_spec h)))).2.1

noncomputable def domChart_mem_maximalAtlas (h : IsImmersionAt F I I' n f x) :
    h.domChart ‚àà IsManifold.maximalAtlas I n M :=
  (Classical.choose_spec ((Classical.choose_spec (Classical.choose_spec h)))).2.2.1

noncomputable def codChart_mem_maximalAtlas (h : IsImmersionAt F I I' n f x) :
    h.codChart ‚àà IsManifold.maximalAtlas I' n M' :=
  (Classical.choose_spec ((Classical.choose_spec (Classical.choose_spec h)))).2.2.2.1

noncomputable def writtenInCharts (h : IsImmersionAt F I I' n f x) :
    EqOn ((h.codChart.extend I') ‚àò f ‚àò (h.domChart.extend I).symm) (h.equiv ‚àò (¬∑, 0))
      (h.domChart.extend I).target :=
  (Classical.choose_spec ((Classical.choose_spec (Classical.choose_spec h)))).2.2.2.2

/-- If `f` is an immersion at `x` and `g = f` on some neighbourhood of `x`,
then `g` is an immersion at `x`. -/
def congr_of_eventuallyEq {x : M} (h : IsImmersionAt F I I' n f x) (h' : f =·∂†[nhds x] g) :
    IsImmersionAt F I I' n g x := by
  choose s hxs hfg using h'.exists_mem
  -- TODO: need to shrink h.domChart until its source is contained in s
  use h.equiv, h.domChart, h.codChart
  refine ‚ü®mem_domChart_source h, ?_, h.domChart_mem_maximalAtlas, h.codChart_mem_maximalAtlas, ?_‚ü©
  ¬∑ exact hfg (mem_of_mem_nhds hxs) ‚ñ∏ mem_codChart_source h
  ¬∑ have missing : EqOn ((h.codChart.extend I') ‚àò g ‚àò (h.domChart.extend I).symm)
        ((h.codChart.extend I') ‚àò f ‚àò (h.domChart.extend I).symm) (h.domChart.extend I).target := by
      -- after shrinking, this will be true
      sorry
    exact EqOn.trans missing h.writtenInCharts

/-- If `f: M ‚Üí N` and `g: M' √ó N'` are immersions at `x` and `x'`, respectively,
then `f √ó g: M √ó N ‚Üí M' √ó N'` is an immersion at `(x, x')`. -/
theorem prodMap {f : M ‚Üí N} {g : M' ‚Üí N'} {x' : M'}
    (h : IsImmersionAt F I J n f x) (h' : IsImmersionAt F' I' J' n g x') :
    IsImmersionAt (F √ó F') (I.prod I') (J.prod J') n (Prod.map f g) (x, x') :=
  sorry

theorem continuousWithinAt (h : IsImmersionAt F I I' n f x) : ContinuousWithinAt f h.domChart.source x := by
  -- TODO: follows from the local description...
  sorry

/-- A `C^k` immersion at `x` is continuous at `x`. -/
theorem continuousAt (h : IsImmersionAt F I I' n f x) : ContinuousAt f x :=
  h.continuousWithinAt.continuousAt (h.domChart.open_source.mem_nhds (mem_domChart_source h))

/-- A `C^k` immersion at `x` is `C^k` at `x`. -/
-- continuity follows since we're in a chart, on an open set;
-- smoothness follows since domChart and codChart are compatible with the maximal atlas
theorem contMDiffAt (h : IsImmersionAt F I I' n f x) : ContMDiffAt I I' n f x := by
  suffices ContMDiffWithinAt I I' n f h.domChart.source x from
    this.contMDiffAt <| h.domChart.open_source.mem_nhds (mem_domChart_source h)
  rw [contMDiffWithinAt_iff_of_mem_maximalAtlas (e := h.domChart) (e' := h.codChart)]
  ¬∑ refine ‚ü®h.continuousWithinAt, ?_‚ü©
    have aux := h.writtenInCharts
    have : ContDiffWithinAt ùïú n ((h.codChart.extend I') ‚àò f ‚àò ‚Üë(h.domChart.extend I).symm)
        (h.domChart.extend I).target ((h.domChart.extend I) x) := by
      -- apply a congr lemma, and prove this for the inclusion
      sorry
    apply this.mono
    -- is this true? in any case, want the lemma below
    -- have aux2 : (h.domChart.extend I).symm ‚Åª¬π' h.domChart.source =
    --   (h.domChart.extend I).target := sorry
    simp only [mfld_simps, inter_comm]
    gcongr
    sorry -- is this true? need to think!
  ¬∑ exact h.domChart_mem_maximalAtlas
  ¬∑ exact codChart_mem_maximalAtlas h
  ¬∑ exact mem_domChart_source h
  ¬∑ exact mem_codChart_source h

-- These are required to argue that `Splits` composes.
variable [CompleteSpace E'] [CompleteSpace E] [CompleteSpace F]

variable [IsManifold I 1 M] [IsManifold I' 1 M']

/-- If `f` is a `C^k` immersion at `x`, then `mfderiv I I' f x` splits. -/
theorem msplitsAt {x : M} (h : IsImmersionAt F I I' n f x) : MSplitsAt I I' f x := by
  -- The local representative of f in the nice charts at x, as a continuous linear map.
  let rhs : E ‚ÜíL[ùïú] E' := h.equiv.toContinuousLinearMap.comp ((ContinuousLinearMap.id _ _).prod 0)
  have : rhs.Splits := by
    apply h.equiv.splits.comp
    refine ‚ü®?_, ?_, ?_‚ü©
    ¬∑ intro x y hxy
      simp at hxy; exact hxy
    ¬∑ have hrange : range ((ContinuousLinearMap.id ùïú E).prod (0 : E ‚ÜíL[ùïú] F)) =
          Set.prod (Set.univ) {0} := by
        sorry
      rw [hrange]
      exact isClosed_univ.prod isClosed_singleton
    ¬∑ have hrange : LinearMap.range ((ContinuousLinearMap.id ùïú E).prod (0 : E ‚ÜíL[ùïú] F)) =
          Submodule.prod ‚ä§ ‚ä• := by
        -- rw [LinearMap.range_prod_eq] applies, but only partially
        sorry
      simp_rw [hrange]
      -- want: ClosedComplemented.prod, then use this for top and bottom
      sorry
  -- Since rhs is linear, it is smooth - and it equals its own fderiv.
  have : MSplitsAt (ùìò(ùïú, E)) (ùìò(ùïú, E')) rhs (I (h.domChart x)) := by
    refine ‚ü®rhs.differentiable.mdifferentiable.mdifferentiableAt, ?_‚ü©
    rw [mfderiv_eq_fderiv, rhs.fderiv]
    exact this
  have : MSplitsAt (ùìò(ùïú, E)) (ùìò(ùïú, E'))
      ((h.codChart.extend I') ‚àò f ‚àò (h.domChart.extend I).symm) ((h.domChart.extend I x)) := by
    apply this.congr
    apply Set.EqOn.eventuallyEq_of_mem h.writtenInCharts
    simp only [PartialHomeomorph.extend, PartialEquiv.trans_target, ModelWithCorners.target_eq,
      ModelWithCorners.toPartialEquiv_coe_symm, Filter.inter_mem_iff]
    -- This is close to true... but perhaps the neighbourhood in my definition is wrong!
    constructor <;> sorry

  have : MSplitsAt I (ùìò(ùïú, E'))
      ((h.codChart.extend I') ‚àò f ‚àò (h.domChart.extend I).symm ‚àò (h.domChart.extend I)) x :=
    this.comp (MSplitsAt.extend h.domChart_mem_maximalAtlas (mem_chart_source _ x))
  have : MSplitsAt I (ùìò(ùïú, E')) ((h.codChart.extend I') ‚àò f) x := by
    apply this.congr
    -- on some nbhd, an extended chart and its inverse cancel
    sorry
  have : MSplitsAt I I' ((h.codChart.extend I').symm ‚àò (h.codChart.extend I') ‚àò f) x := by
    refine MSplitsAt.comp ?_ this
    exact MSplitsAt.extend_symm h.codChart_mem_maximalAtlas (mem_chart_source _ (f x))
  apply this.congr
  sorry -- extended chart and its inverse cancel

/-- `f` is an immersion at `x` iff `mfderiv I I' f x` splits. -/
theorem _root_.isImmersionAt_iff_msplitsAt {x : M} :
    IsImmersionAt F I I' n f x ‚Üî MSplitsAt I I' f x := by
  refine ‚ü®fun h ‚Ü¶ h.msplitsAt, fun h ‚Ü¶ ?_‚ü©
  -- This direction uses the inverse function theorem: this is the hard part!
  sorry

/-- If `f` is an immersion at `x` and `g` is an immersion at `g x`,
then `g ‚àò f` is an immersion at `x`. -/
def comp [CompleteSpace F'] {g : M' ‚Üí N}
    (hg : IsImmersionAt F' I' J n g (f x)) (hf : IsImmersionAt F I I' n f x) :
    IsImmersionAt (F √ó F') I J n (g ‚àò f) x := by
  --rw [isImmersionAt_iff_msplitsAt] at hf hg ‚ä¢
  sorry --exact hg.comp hf

/-- If `f` is a `C^k` immersion at `x`, then `mfderiv x` is injective. -/
theorem mfderiv_injective {x : M} (h : IsImmersionAt F I I' n f x) : Injective (mfderiv I I' f x) :=
  h.msplitsAt.mfderiv_injective
--   /- Outline of proof:
--   (1) `mfderiv` is injective iff `fderiv (writtenInExtChart) is injective`
--   I have proven this for Sard's theorem; this depends on some sorries not in mathlib yet
--   (2) the injectivity of `fderiv (writtenInExtChart)` is independent of the choice of chart
--   in the atlas (in fact, even the rank of the resulting map is),
--   as transition maps are linear equivalences.
--   (3) (¬∑, 0) has injective `fderiv` --- since it's linear, thus its own derivative. -/
--   sorry

/- If `M` is finite-dimensional, `f` is `C^n` at `x` and `mfderiv x` is injective,
then `f` is immersed at `x`.
Some sources call this condition `f is infinitesimally injective at x`. -/
def of_finiteDimensional_of_contMDiffAt_of_mfderiv_injective [FiniteDimensional ùïú E] {x : M}
    (hf : ContMDiffAt I I' n f x) (hf' : Injective (mfderiv I I' f x)) (hn : 1 ‚â§ n) :
    IsImmersionAt F I I' n f x := by
  rw [isImmersionAt_iff_msplitsAt]
  refine ‚ü®hf.mdifferentiableAt hn, ?_‚ü©
  convert ContinuousLinearMap.Splits.of_injective_of_finiteDimensional_dom hf'
  show FiniteDimensional ùïú E; assumption

end IsImmersionAt

variable (F I I' n) in
/-- `f : M ‚Üí N` is a `C^k` immersion if around each point `x ‚àà M`,
there are charts `œÜ` and `œà` of `M` and `N` around `x` and `f x`, respectively
such that in these charts, `f` looks like `u ‚Ü¶ (u, 0)`.

In other words, `f` is an immersion at each `x ‚àà M`.
-/
def IsImmersion (f : M ‚Üí M')  : Prop := ‚àÄ x, IsImmersionAt F I I' n f x

namespace IsImmersion

variable {f g : M ‚Üí M'}

/-- If `f` is an immersion, it is an immersion at each point. -/
def isImmersionAt (h : IsImmersion F I I' n f) (x : M) : IsImmersionAt F I I' n f x := h x

/-- If `f` is a `C^k` immersion, there is a single equivalence with the properties we want. -/
-- Actually, is this true? If I'm allowed to tweak the model at every point, yes;
-- otherwise maybe not? But I don't seem to care about this, in fact...
noncomputable def foo [Nonempty M] (h : IsImmersion F I I' n f) :
    ‚àÉ equiv : (E √ó F) ‚âÉL[ùïú] E',
    ‚àÉ domCharts : M ‚Üí PartialHomeomorph M H, ‚àÉ codCharts : M ‚Üí PartialHomeomorph M' H',
    ‚àÄ x, x ‚àà (domCharts x).source ‚àß ‚àÄ x, f x ‚àà (codCharts x).source ‚àß
    ‚àÄ x, (domCharts x) ‚àà IsManifold.maximalAtlas I n M ‚àß
    ‚àÄ x, (codCharts x) ‚àà IsManifold.maximalAtlas I' n M' ‚àß
    ‚àÄ x, EqOn (((codCharts x).extend I') ‚àò f ‚àò ((domCharts x).extend I).symm) (equiv ‚àò (¬∑, 0))
      ((domCharts x).extend I).target := by
  inhabit M
  use (h Inhabited.default).equiv
  -- What's the math proof?
  sorry

/-- If `f: M ‚Üí N` and `g: M' √ó N'` are immersions at `x` and `x'`, respectively,
then `f √ó g: M √ó N ‚Üí M' √ó N'` is an immersion at `(x, x')`. -/
theorem prodMap {f : M ‚Üí N} {g : M' ‚Üí N'}
    (h : IsImmersion F I J n f) (h' : IsImmersion F' I' J' n g) :
    IsImmersion (F √ó F') (I.prod I') (J.prod J') n (Prod.map f g) :=
  fun ‚ü®x, x'‚ü© ‚Ü¶ (h x).prodMap (h' x')

omit [IsManifold I n M] [IsManifold I' n M'] in
/-- If `f = g` and `f` is an immersion, so is `g`. -/
theorem congr (h : IsImmersion F I I' n f) (heq : f = g) : IsImmersion F I I' n g :=
  fun x ‚Ü¶ (h x).congr_of_eventuallyEq heq.eventuallyEq

/-- A `C^k` immersion is `C^k`. -/
theorem contMDiff (h : IsImmersion F I I' n f) : ContMDiff I I' n f := fun x ‚Ü¶ (h x).contMDiffAt

-- These are required to argue that `Splits` composes.
variable [CompleteSpace E] [CompleteSpace E'] [CompleteSpace F] [CompleteSpace F']
variable [IsManifold I 1 M] [IsManifold I' 1 M']

/-- If `f` is a `C^k` immersion, each differential `mfderiv x` is injective. -/
theorem mfderiv_injective (h : IsImmersion F I I' n f) (x : M) : Injective (mfderiv I I' f x) :=
  (h x).mfderiv_injective

/- If `M` is finite-dimensional, `f` is `C^k` and each `mfderiv x` is injective,
then `f` is a `C^k` immersion. -/
theorem of_mfderiv_injective [FiniteDimensional ùïú E] (hf : ContMDiff I I' n f)
    (hf' : ‚àÄ x, Injective (mfderiv I I' f x)) (hn : 1 ‚â§ n) : IsImmersion F I I' n f :=
  fun x ‚Ü¶ IsImmersionAt.of_finiteDimensional_of_contMDiffAt_of_mfderiv_injective (hf x) (hf' x) hn

/-- The composition of two immersions is an immersion. -/
def comp [CompleteSpace E] [CompleteSpace E'] [CompleteSpace F]
    {g : M' ‚Üí N} (hg : IsImmersion F' I' J n g) (hf : IsImmersion F I I' n f) :
    IsImmersion (F √ó F') I J n (g ‚àò f) :=
  fun x ‚Ü¶ (hg (f x)).comp (hf x)

end IsImmersion

open Topology

variable (F I I' n) in
/-- A `C^k` map `f : M ‚Üí M'` is a smooth `C^k` embedding if it is a topological embedding
and a `C^k` immersion. -/
def IsSmoothEmbedding (f : M ‚Üí M') : Prop := IsImmersion F I I' n f ‚àß IsEmbedding f

namespace IsSmoothEmbedding

variable {f : M ‚Üí M'}

theorem contMDiff (h : IsSmoothEmbedding F I I' n f) : ContMDiff I I' n f := h.1.contMDiff

omit [IsManifold I n M] [IsManifold I' n M'] in
theorem isImmersion (h : IsSmoothEmbedding F I I' n f) : IsImmersion F I I' n f := h.1

omit [IsManifold I n M] [IsManifold I' n M'] in
theorem isEmbedding (h : IsSmoothEmbedding F I I' n f) : IsEmbedding f := h.2

variable [IsManifold I 1 M] [IsManifold I' 1 M'] in
def of_mfderiv_injective_of_compactSpace_of_T2Space
    [FiniteDimensional ùïú E] [CompleteSpace E'] [CompleteSpace F] [CompactSpace M] [T2Space M']
    (hf : ContMDiff I I' n f) (hf' : ‚àÄ x, Injective (mfderiv I I' f x))
    (hf'' : Injective f) (hn : 1 ‚â§ n) : IsSmoothEmbedding F I I' n f := by
  have := FiniteDimensional.complete (ùïú := ùïú) E
  exact ‚ü®.of_mfderiv_injective hf hf' hn, (hf.continuous.isClosedEmbedding hf'').isEmbedding‚ü©

/-- The composition of two smooth embeddings is a smooth embedding. -/
def comp [CompleteSpace E] [CompleteSpace E'] [CompleteSpace F] [CompleteSpace F']
    {g : M' ‚Üí N} (hg : IsSmoothEmbedding F' I' J n g) (hf : IsSmoothEmbedding F I I' n f) :
    IsSmoothEmbedding (F √ó F') I J n (g ‚àò f) :=
  ‚ü®hg.1.comp hf.1, hg.2.comp hf.2‚ü©

end IsSmoothEmbedding
