/-
Copyright (c) 2025 Michael Rothgang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Michael Rothgang
-/
import Mathlib.Geometry.Manifold.ContMDiff.Defs
import Mathlib.Geometry.Manifold.MFDeriv.Defs

/-! # Smooth immersions and embeddings

In this file, we define `C^k` immersions and embeddings between `C^k` manifolds.
The correct definition in the infinite-dimensional setting differs from the standard
finite-dimensional definition: we cannot prove the implication yet.

TODO complete this doc-string, once more details are clear.

-/

open scoped Manifold Topology ContDiff

open Function Set

variable {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {E' : Type*} [NormedAddCommGroup E'] [NormedSpace ùïú E']
  {E'' : Type*} [NormedAddCommGroup E''] [NormedSpace ùïú E'']
  {F F' : Type*} [NormedAddCommGroup F] [NormedSpace ùïú F] [NormedAddCommGroup F'] [NormedSpace ùïú F']
  {H : Type*} [TopologicalSpace H] {H' : Type*} [TopologicalSpace H']
  {H'' : Type*} [TopologicalSpace H'']
  {I : ModelWithCorners ùïú E H} {I' : ModelWithCorners ùïú E' H'} {I'' : ModelWithCorners ùïú E'' H''}

variable {M : Type*} [TopologicalSpace M] [ChartedSpace H M]
  {M' : Type*} [TopologicalSpace M'] [ChartedSpace H' M']
  {M'' : Type*} [TopologicalSpace M''] [ChartedSpace H'' M''] {n : WithTop ‚Ñï‚àû}

-- XXX: should the next three definitions be a class instead?
-- Are these slice charts canonical enough that we want the typeclass system to kick in?

variable (F I I' n) in
/-- `f : M ‚Üí N` is a `C^k` immersion at `x` if there are charts `œÜ` and `œà` of `M` and `N`
around `x` and `f x`, respectively such that in these charts, `f` looks like `u ‚Ü¶ (u, 0)`.

XXX: why in `maximalAtlas` and not merely atlas? to given ourselves extra freedom?
-/
def IsImmersionAt (f : M ‚Üí M') (x : M) : Prop :=
  ‚àÉ equiv : (E √ó F) ‚âÉL[ùïú] E',
  ‚àÉ domChart : PartialHomeomorph M H, ‚àÉ codChart : PartialHomeomorph M' H',
    x ‚àà domChart.source ‚àß f x ‚àà codChart.source ‚àß
    domChart ‚àà IsManifold.maximalAtlas I n M ‚àß
    codChart ‚àà IsManifold.maximalAtlas I' n M' ‚àß
    EqOn ((codChart.extend I') ‚àò f ‚àò (domChart.extend I).symm) (equiv ‚àò (¬∑, 0))
      (domChart.extend I).target

namespace IsImmersionAt

variable {f g : M ‚Üí M'} {x : M}

noncomputable def equiv (h : IsImmersionAt F I I' n f x) : (E √ó F) ‚âÉL[ùïú] E' :=
  Classical.choose h

noncomputable def domChart (h : IsImmersionAt F I I' n f x) : PartialHomeomorph M H :=
  Classical.choose (Classical.choose_spec h)

noncomputable def codChart (h : IsImmersionAt F I I' n f x) : PartialHomeomorph M' H' :=
  Classical.choose (Classical.choose_spec (Classical.choose_spec h))

noncomputable def mem_domChart_source (h : IsImmersionAt F I I' n f x) : x ‚àà h.domChart.source :=
  (Classical.choose_spec ((Classical.choose_spec (Classical.choose_spec h)))).1

noncomputable def mem_codChart_source (h : IsImmersionAt F I I' n f x) : f x ‚àà h.codChart.source :=
  (Classical.choose_spec ((Classical.choose_spec (Classical.choose_spec h)))).2.1

noncomputable def domChart_mem_maximalAtlas (h : IsImmersionAt F I I' n f x) :
    h.domChart ‚àà IsManifold.maximalAtlas I n M :=
  (Classical.choose_spec ((Classical.choose_spec (Classical.choose_spec h)))).2.2.1

noncomputable def codChart_mem_maximalAtlas (h : IsImmersionAt F I I' n f x) :
    h.codChart ‚àà IsManifold.maximalAtlas I' n M' :=
  (Classical.choose_spec ((Classical.choose_spec (Classical.choose_spec h)))).2.2.2.1

noncomputable def writtenInCharts (h : IsImmersionAt F I I' n f x) :
    EqOn ((h.codChart.extend I') ‚àò f ‚àò (h.domChart.extend I).symm) (h.equiv ‚àò (¬∑, 0))
      (h.domChart.extend I).target :=
  (Classical.choose_spec ((Classical.choose_spec (Classical.choose_spec h)))).2.2.2.2

/-- If `f` is an immersion at `x` and `g = f` on some neighbourhood of `x`,
then `g` is an immersion at `x`. -/
def congr_of_eventuallyEq {x : M} (h : IsImmersionAt F I I' n f x) (h' : f =·∂†[nhds x] g) :
    IsImmersionAt F I I' n g x := by
  choose s hxs hfg using h'.exists_mem
  -- TODO: need to shrink h.domChart until its source is contained in s
  use h.equiv, h.domChart, h.codChart
  refine ‚ü®mem_domChart_source h, ?_, h.domChart_mem_maximalAtlas, h.codChart_mem_maximalAtlas, ?_‚ü©
  ¬∑ exact hfg (mem_of_mem_nhds hxs) ‚ñ∏ mem_codChart_source h
  ¬∑ have missing : EqOn ((h.codChart.extend I') ‚àò g ‚àò (h.domChart.extend I).symm)
        ((h.codChart.extend I') ‚àò f ‚àò (h.domChart.extend I).symm) (h.domChart.extend I).target := by
      -- after shrinking, this will be true
      sorry
    exact EqOn.trans missing h.writtenInCharts

/-- If `f` is an immersion at `x` and `g` is an immersion at `f x`,
then `g ‚àò f` is an immersion at `x`. -/
theorem comp {g : M' ‚Üí M''} (h : IsImmersionAt F I I' n f x)
    (h' : IsImmersionAt F' I' I'' n g (f x)) : IsImmersionAt (F √ó F') I I'' n (g ‚àò f) x := by
  -- TODO: think a bit... this is probably true, but may need to work. if we have two different
  -- slice charts, that is...
  sorry

/-- A `C^k` immersion at `x` is `C^k` at `x`. -/
-- continuity follows since we're in a chart, on an open set;
-- smoothness follows since domChart and codChart are compatible with the maximal atlas
theorem contMDiffAt (h : IsImmersionAt F I I' n f x) : ContMDiffAt I I' n f x := sorry

/-- If `f` is a `C^k` immersion at `x`, then `mfderiv x` is injective. -/
theorem mfderiv_injective {x : M} (h : IsImmersionAt F I I' n f x) : Injective (mfderiv I I' f x) :=
  /- Outline of proof:
  (1) `mfderiv` is injective iff `fderiv (writtenInExtChart) is injective`
  I have proven this for Sard's theorem; this depends on some sorries not in mathlib yet
  (2) the injectivity of `fderiv (writtenInExtChart)` is independent of the choice of chart
  in the atlas (in fact, even the rank of the resulting map is),
  as transition maps are linear equivalences.
  (3) (¬∑, 0) has injective `fderiv` --- since it's linear, thus its own derivative. -/
  sorry

/- If `M` is finite-dimensional, `f` is `C^n` at `x` and `mfderiv x` is injective,
then `f` is immersed at `x`.
Some sources call this condition `f is infinitesimally injective at x`. -/
def of_finiteDimensional_of_contMDiffAt_of_mfderiv_injective [FiniteDimensional ùïú E] {x : M}
    (hf : ContMDiffAt I I' n f x) (hf' : Injective (mfderiv I I' f x)) :
    IsImmersionAt F I I' n f x :=
  -- (1) if mfderiv I I' f x is injective, the same holds in a neighbourhood of x
  -- In particular, mfderiv I I' f x has (locally) constant rank: this suffices
  -- (2) If mfderiv I I' f x has constant rank for all x in a neighbourhood of x,
  -- then f is immersion at x.
  -- This step requires the inverse function theorem (and possibly shrinking the neighbourhood).
  sorry

end IsImmersionAt

variable (F I I' n) in
/-- `f : M ‚Üí N` is a `C^k` immersion if around each point `x ‚àà M`,
there are charts `œÜ` and `œà` of `M` and `N` around `x` and `f x`, respectively
such that in these charts, `f` looks like `u ‚Ü¶ (u, 0)`.

In other words, `f` is an immersion at each `x ‚àà M`.
-/
def IsImmersion (f : M ‚Üí M')  : Prop := ‚àÄ x, IsImmersionAt F I I' n f x

namespace IsImmersion

variable {f g : M ‚Üí M'}

/-- If `f` is an immersion, it is an immersion at each point. -/
def isImmersionAt (h : IsImmersion F I I' n f) (x : M) : IsImmersionAt F I I' n f x := h x

/-- If `f` is a `C^k` immersion, there is a single equivalence with the properties we want. -/
-- Actually, is this true? If I'm allowed to tweak the model at every point, yes;
-- otherwise maybe not? But I don't seem to care about this, in fact...
noncomputable def foo [Nonempty M] (h : IsImmersion F I I' n f) :
    ‚àÉ equiv : (E √ó F) ‚âÉL[ùïú] E',
    ‚àÉ domCharts : M ‚Üí PartialHomeomorph M H, ‚àÉ codCharts : M ‚Üí PartialHomeomorph M' H',
    ‚àÄ x, x ‚àà (domCharts x).source ‚àß ‚àÄ x, f x ‚àà (codCharts x).source ‚àß
    ‚àÄ x, (domCharts x) ‚àà IsManifold.maximalAtlas I n M ‚àß
    ‚àÄ x, (codCharts x) ‚àà IsManifold.maximalAtlas I' n M' ‚àß
    ‚àÄ x, EqOn (((codCharts x).extend I') ‚àò f ‚àò ((domCharts x).extend I).symm) (equiv ‚àò (¬∑, 0))
      ((domCharts x).extend I).target := by
  inhabit M
  use (h Inhabited.default).equiv
  -- What's the math proof?
  sorry

/-- If `f = g` and `f` is an immersion, so is `g`. -/
theorem congr (h : IsImmersion F I I' n f) (heq : f = g) : IsImmersion F I I' n g :=
  fun x ‚Ü¶ (h x).congr_of_eventuallyEq heq.eventuallyEq

/-- The composition of two immersions is an immerison. -/
theorem comp {g : M' ‚Üí M''} (h : IsImmersion F I I' n f) (h' : IsImmersion F' I' I'' n g) :
    IsImmersion (F √ó F') I I'' n (g ‚àò f) :=
  fun x ‚Ü¶ (h x).comp (h' (f x))

/-- A `C^k` immersion is `C^k`. -/
theorem contMDiff (h : IsImmersion F I I' n f) : ContMDiff I I' n f := fun x ‚Ü¶ (h x).contMDiffAt

/-- If `f` is a `C^k` immersion, each differential `mfderiv x` is injective. -/
theorem mfderiv_injective {x : M}
    (h : IsImmersionAt F I I' n f x) : Injective (mfderiv I I' f x) :=
  /- Outline of proof:
  (1) `mfderiv` is injective iff `fderiv (writtenInExtChart) is injective`
  I have proven this for Sard's theorem; this depends on some sorries not in mathlib yet
  (2) the injectivity of `fderiv (writtenInExtChart)` is independent of the choice of chart
  in the atlas (in fact, even the rank of the resulting map is),
  as transition maps are linear equivalences.
  (3) (¬∑, 0) has injective `fderiv` --- since it's linear, thus its own derivative. -/
  sorry

/- If `M` is finite-dimensional, `f` is `C^k` and each `mfderiv x` is injective,
then `f` is a `C^k` immersion. -/
theorem of_mfderiv_injective [FiniteDimensional ùïú E] (hf : ContMDiff I I' n f)
    (hf' : ‚àÄ x, Injective (mfderiv I I' f x)) : IsImmersion F I I' n f :=
  fun x ‚Ü¶ IsImmersionAt.of_finiteDimensional_of_contMDiffAt_of_mfderiv_injective (hf x) (hf' x)

end IsImmersion

open Topology

variable (F I I' n) in
/-- A `C^k` map `f : M ‚Üí M'` is a smooth `C^k` embedding if it is a topological embedding
and a `C^k` immersion. -/
def IsSmoothEmbedding (f : M ‚Üí M') : Prop := IsImmersion F I I' n f ‚àß IsEmbedding f

namespace IsSmoothEmbedding

variable {f : M ‚Üí M'}

theorem contMDiff (h : IsSmoothEmbedding F I I' n f) : ContMDiff I I' n f := h.1.contMDiff

theorem isImmersion (h : IsSmoothEmbedding F I I' n f) : IsImmersion F I I' n f := h.1

theorem isEmbedding (h : IsSmoothEmbedding F I I' n f) : IsEmbedding f := h.2

def of_mfderiv_injective_of_compactSpace_of_T2Space
    [FiniteDimensional ùïú E] [CompactSpace M] [T2Space M']
    (hf : ContMDiff I I' n f) (hf' : ‚àÄ x, Injective (mfderiv I I' f x)) (hf'' : Injective f) :
    IsSmoothEmbedding F I I' n f :=
  ‚ü®.of_mfderiv_injective hf hf', (hf.continuous.isClosedEmbedding hf'').isEmbedding‚ü©

end IsSmoothEmbedding
