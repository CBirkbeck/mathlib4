/-
Copyright (c) 2025 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathlib.Analysis.InnerProductSpace.Dual
import Mathlib.Geometry.Manifold.VectorBundle.SmoothSection
import Mathlib.Geometry.Manifold.VectorBundle.Hom

/-! # Riemannian and Hermitian vector bundles
-/

open Manifold Bundle ContinuousLinearMap

variable
  {EB : Type*} [NormedAddCommGroup EB] [NormedSpace ‚Ñù EB]
  {HB : Type*} [TopologicalSpace HB] {IB : ModelWithCorners ‚Ñù EB HB} {n : WithTop ‚Ñï‚àû}
  {B : Type*} [TopologicalSpace B] [ChartedSpace HB B]
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
  {E : B ‚Üí Type*} [TopologicalSpace (TotalSpace F E)] [‚àÄ x, NormedAddCommGroup (E x)]
  [‚àÄ x, InnerProductSpace ‚Ñù (E x)]
  [FiberBundle F E] [VectorBundle ‚Ñù F E]

local notation "‚ü™" x ", " y "‚ü´" => inner ‚Ñù x y

variable (IB n F E) in
/-- Consider a real vector bundle in which each fiber is endowed with a scalar product.
We that the bundle is Riemannian if the scalar product depends smoothly on the base point.
This assumption is spelled `IsRiemannianBundle IB n F E` where `IB` is the model space of the base,
`n` is the smoothness, `F` is the model fiber, and `E : B ‚Üí Type*` is the bundle. -/
class IsRiemannianBundle : Prop where
  exists_contMDiff : ‚àÉ g : C‚Çõ^n‚üÆIB; F ‚ÜíL[‚Ñù] F ‚ÜíL[‚Ñù] ‚Ñù, fun (x : B) ‚Ü¶ E x ‚ÜíL[‚Ñù] E x ‚ÜíL[‚Ñù] ‚Ñù‚üØ,
    ‚àÄ (x : B) (v w : E x), ‚ü™v, w‚ü´ = g x v w

section Trivial

variable {F‚ÇÅ : Type*} [NormedAddCommGroup F‚ÇÅ] [InnerProductSpace ‚Ñù F‚ÇÅ]

/-- A trivial vector bundle, in which the model fiber has a scalar product,
is a Riemannian bundle. -/
instance : IsRiemannianBundle IB n F‚ÇÅ (Bundle.Trivial B F‚ÇÅ) := by
  refine ‚ü®‚ü®fun x ‚Ü¶ innerSL ‚Ñù, fun x ‚Ü¶ ?_‚ü©, fun x v w ‚Ü¶ rfl‚ü©
  simp only [contMDiffAt_section]
  convert contMDiffAt_const (c := innerSL ‚Ñù)
  ext v w
  simp [hom_trivializationAt_apply, inCoordinates, Trivialization.linearMapAt_apply,
    Trivial.trivialization_symm_apply B F‚ÇÅ]

end Trivial

section ContMDiff

variable
  {EM : Type*} [NormedAddCommGroup EM] [NormedSpace ‚Ñù EM]
  {HM : Type*} [TopologicalSpace HM] {IM : ModelWithCorners ‚Ñù EM HM}
  {M : Type*} [TopologicalSpace M] [ChartedSpace HM M]

lemma ContMDiffWithinAt.inner [h : IsRiemannianBundle IB n F E]
    {f : M ‚Üí B} {v w : ‚àÄ x, E (f x)} {s : Set M} {x : M}
    (hf : ContMDiffWithinAt IM IB n f s x)
    (hv : ContMDiffWithinAt IM (IB.prod ùìò(‚Ñù, F)) n (fun b ‚Ü¶ TotalSpace.mk' F (f b) (v b)) s x)
    (hw : ContMDiffWithinAt IM (IB.prod ùìò(‚Ñù, F)) n (fun b ‚Ü¶ TotalSpace.mk' F (f b) (v b)) s x) :
    ContMDiffWithinAt IM ùìò(‚Ñù) n (fun b ‚Ü¶ ‚ü™v b, w b‚ü´) s x := by
  rcases h.exists_contMDiff with ‚ü®g, hg‚ü©
  simp only [hg]
  apply ContMDiffWithinAt.clm_apply_of_inCoordinates



end ContMDiff
