/-
Copyright (c) 2025 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathlib.Analysis.InnerProductSpace.Dual
import Mathlib.Geometry.Manifold.VectorBundle.SmoothSection
import Mathlib.Geometry.Manifold.VectorBundle.Hom

/-! # Riemannian vector bundles

Given a vector bundle over a manifold whose fibers are all endowed with a scalar product, we
say that this bundle is Riemannian if the scalar product depends smoothly on the base point.

We introduce a typeclass `[IsRiemannianBundle IB n F E]` registering this property. Under this
assumption, we show that the scalar product of two smooth maps into the same fibers of the bundle
is a smooth function.
-/

open Manifold Bundle ContinuousLinearMap ENat
open scoped ContDiff

variable
  {EB : Type*} [NormedAddCommGroup EB] [NormedSpace ‚Ñù EB]
  {HB : Type*} [TopologicalSpace HB] {IB : ModelWithCorners ‚Ñù EB HB} {n n' : WithTop ‚Ñï‚àû}
  {B : Type*} [TopologicalSpace B] [ChartedSpace HB B]
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
  {E : B ‚Üí Type*} [TopologicalSpace (TotalSpace F E)] [‚àÄ x, NormedAddCommGroup (E x)]
  [‚àÄ x, InnerProductSpace ‚Ñù (E x)]
  [FiberBundle F E] [VectorBundle ‚Ñù F E]

local notation "‚ü™" x ", " y "‚ü´" => inner ‚Ñù x y

variable (IB n F E) in
/-- Consider a real vector bundle in which each fiber is endowed with a scalar product.
We that the bundle is Riemannian if the scalar product depends smoothly on the base point.
This assumption is spelled `IsRiemannianBundle IB n F E` where `IB` is the model space of the base,
`n` is the smoothness, `F` is the model fiber, and `E : B ‚Üí Type*` is the bundle. -/
class IsRiemannianBundle : Prop where
  exists_contMDiff : ‚àÉ g : C‚Çõ^n‚üÆIB; F ‚ÜíL[‚Ñù] F ‚ÜíL[‚Ñù] ‚Ñù, fun (x : B) ‚Ü¶ E x ‚ÜíL[‚Ñù] E x ‚ÜíL[‚Ñù] ‚Ñù‚üØ,
    ‚àÄ (x : B) (v w : E x), ‚ü™v, w‚ü´ = g x v w

lemma IsRiemannianBundle.of_le [h : IsRiemannianBundle IB n F E] (h' : n' ‚â§ n) :
    IsRiemannianBundle IB n' F E := by
  rcases h.exists_contMDiff with ‚ü®‚ü®g, g_smooth‚ü©, hg‚ü©
  exact ‚ü®‚ü®g, g_smooth.of_le h'‚ü©, hg‚ü©

instance {a : WithTop ‚Ñï‚àû} [IsRiemannianBundle IB ‚àû F E] [h : LEInfty a] :
    IsRiemannianBundle IB a F E :=
  IsRiemannianBundle.of_le h.out

instance {a : WithTop ‚Ñï‚àû} [IsRiemannianBundle IB œâ F E] :
    IsRiemannianBundle IB a F E :=
  IsRiemannianBundle.of_le le_top

instance [IsRiemannianBundle IB 1 F E] : IsRiemannianBundle IB 0 F E :=
  IsRiemannianBundle.of_le zero_le_one

instance [IsRiemannianBundle IB 2 F E] : IsRiemannianBundle IB 1 F E :=
  IsRiemannianBundle.of_le one_le_two

instance [IsRiemannianBundle IB 3 F E] : IsRiemannianBundle IB 2 F E :=
  IsRiemannianBundle.of_le (n := 3) (by norm_cast)

section Trivial

variable {F‚ÇÅ : Type*} [NormedAddCommGroup F‚ÇÅ] [InnerProductSpace ‚Ñù F‚ÇÅ]

/-- A trivial vector bundle, in which the model fiber has a scalar product,
is a Riemannian bundle. -/
instance : IsRiemannianBundle IB n F‚ÇÅ (Bundle.Trivial B F‚ÇÅ) := by
  refine ‚ü®‚ü®fun x ‚Ü¶ innerSL ‚Ñù, fun x ‚Ü¶ ?_‚ü©, fun x v w ‚Ü¶ rfl‚ü©
  simp only [contMDiffAt_section]
  convert contMDiffAt_const (c := innerSL ‚Ñù)
  ext v w
  simp [hom_trivializationAt_apply, inCoordinates, Trivialization.linearMapAt_apply,
    Trivial.trivialization_symm_apply B F‚ÇÅ]

end Trivial

section ContMDiff

variable
  {EM : Type*} [NormedAddCommGroup EM] [NormedSpace ‚Ñù EM]
  {HM : Type*} [TopologicalSpace HM] {IM : ModelWithCorners ‚Ñù EM HM}
  {M : Type*} [TopologicalSpace M] [ChartedSpace HM M]
  [h : IsRiemannianBundle IB n F E]
  {b : M ‚Üí B} {v w : ‚àÄ x, E (b x)} {s : Set M} {x : M}

/-- Given two smooth maps into the same fibers of a Riemannian bundle,
their scalar product is smooth. -/
lemma ContMDiffWithinAt.inner
    (hv : ContMDiffWithinAt IM (IB.prod ùìò(‚Ñù, F)) n (fun m ‚Ü¶ (v m : TotalSpace F E)) s x)
    (hw : ContMDiffWithinAt IM (IB.prod ùìò(‚Ñù, F)) n (fun m ‚Ü¶ (w m : TotalSpace F E)) s x) :
    ContMDiffWithinAt IM ùìò(‚Ñù) n (fun m ‚Ü¶ ‚ü™v m, w m‚ü´) s x := by
  rcases h.exists_contMDiff with ‚ü®‚ü®g, g_smooth‚ü©, hg‚ü©
  have hf : ContMDiffWithinAt IM IB n b s x := by
    simp only [contMDiffWithinAt_totalSpace] at hv
    exact hv.1
  simp only [hg]
  have : ContMDiffWithinAt IM (IB.prod ùìò(‚Ñù)) n
      (fun m ‚Ü¶ TotalSpace.mk' ‚Ñù (E := Bundle.Trivial B ‚Ñù) (b m) (g (b m) (v m) (w m))) s x := by
    apply ContMDiffWithinAt.clm_bundle_apply‚ÇÇ (F‚ÇÅ := F) (F‚ÇÇ := F)
    ¬∑ exact ContMDiffAt.comp_contMDiffWithinAt x g_smooth.contMDiffAt hf
    ¬∑ exact hv
    ¬∑ exact hw
  simp only [contMDiffWithinAt_totalSpace] at this
  exact this.2

/-- Given two smooth maps into the same fibers of a Riemannian bundle,
their scalar product is smooth. -/
lemma ContMDiffAt.inner
    (hv : ContMDiffAt IM (IB.prod ùìò(‚Ñù, F)) n (fun m ‚Ü¶ (v m : TotalSpace F E)) x)
    (hw : ContMDiffAt IM (IB.prod ùìò(‚Ñù, F)) n (fun m ‚Ü¶ (w m : TotalSpace F E)) x) :
    ContMDiffAt IM ùìò(‚Ñù) n (fun b ‚Ü¶ ‚ü™v b, w b‚ü´) x :=
  ContMDiffWithinAt.inner hv hw

/-- Given two smooth maps into the same fibers of a Riemannian bundle,
their scalar product is smooth. -/
lemma ContMDiffOn.inner
    (hv : ContMDiffOn IM (IB.prod ùìò(‚Ñù, F)) n (fun m ‚Ü¶ (v m : TotalSpace F E)) s)
    (hw : ContMDiffOn IM (IB.prod ùìò(‚Ñù, F)) n (fun m ‚Ü¶ (w m : TotalSpace F E)) s) :
    ContMDiffOn IM ùìò(‚Ñù) n (fun b ‚Ü¶ ‚ü™v b, w b‚ü´) s :=
  fun x hx ‚Ü¶ (hv x hx).inner (hw x hx)

/-- Given two smooth maps into the same fibers of a Riemannian bundle,
their scalar product is smooth. -/
lemma ContMDiff.inner
    (hv : ContMDiff IM (IB.prod ùìò(‚Ñù, F)) n (fun m ‚Ü¶ (v m : TotalSpace F E)))
    (hw : ContMDiff IM (IB.prod ùìò(‚Ñù, F)) n (fun m ‚Ü¶ (w m : TotalSpace F E))) :
    ContMDiff IM ùìò(‚Ñù) n (fun b ‚Ü¶ ‚ü™v b, w b‚ü´) :=
  fun x ‚Ü¶ (hv x).inner (hw x)

end ContMDiff
