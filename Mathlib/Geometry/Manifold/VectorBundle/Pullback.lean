/-
Copyright (c) 2023 Floris van Doorn, Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Floris van Doorn, Heather Macbeth
-/
import Mathlib.Geometry.Manifold.ContMDiffMap
import Mathlib.Geometry.Manifold.VectorBundle.Basic

/-! # Pullbacks of `C^n` vector bundles

This file defines pullbacks of `C^n` vector bundles over a manifold.

## Main definitions

* `ContMDiffVectorBundle.pullback`: For a `C^n` vector bundle `E` over a manifold `B` and a `C^n`
  map `f : B' Рєњ B`, the pullback vector bundle `f *рхќ E` is a `C^n` vector bundle.

-/

open Bundle Set
open scoped Manifold

variable {­ЮЋю B B' : Type*} (F : Type*) (E : B Рєњ Type*) {n : WithTop РёЋРѕъ}
variable [NontriviallyNormedField ­ЮЋю] [Рѕђ x, AddCommMonoid (E x)] [Рѕђ x, Module ­ЮЋю (E x)]
  [NormedAddCommGroup F] [NormedSpace ­ЮЋю F] [TopologicalSpace (TotalSpace F E)]
  [Рѕђ x, TopologicalSpace (E x)] {EB : Type*} [NormedAddCommGroup EB] [NormedSpace ­ЮЋю EB]
  {HB : Type*} [TopologicalSpace HB] {IB : ModelWithCorners ­ЮЋю EB HB} [TopologicalSpace B]
  [ChartedSpace HB B] {EB' : Type*} [NormedAddCommGroup EB']
  [NormedSpace ­ЮЋю EB'] {HB' : Type*} [TopologicalSpace HB'] (IB' : ModelWithCorners ­ЮЋю EB' HB')
  [TopologicalSpace B'] [ChartedSpace HB' B'] [FiberBundle F E]
  [VectorBundle ­ЮЋю F E] [ContMDiffVectorBundle n F E IB] (f : ContMDiffMap IB' IB B' B n)

/-- For a `C^n` vector bundle `E` over a manifold `B` and a `C^n` map `f : B' Рєњ B`, the pullback
vector bundle `f *рхќ E` is a `C^n` vector bundle. -/
instance ContMDiffVectorBundle.pullback : ContMDiffVectorBundle n F (f *рхќ E) IB' where
  contMDiffOn_coordChangeL := by
    rintro _ _ РЪеe, he, rflРЪЕ РЪеe', he', rflРЪЕ
    refine ((contMDiffOn_coordChangeL e e').comp f.contMDiff.contMDiffOn fun b hb => hb).congr ?_
    rintro b (hb : f b Рѕѕ e.baseSet РѕЕ e'.baseSet); ext v
    show ((e.pullback f).coordChangeL ­ЮЋю (e'.pullback f) b) v = (e.coordChangeL ­ЮЋю e' (f b)) v
    rw [e.coordChangeL_apply e' hb, (e.pullback f).coordChangeL_apply' _]
    exacts [rfl, hb]

variable {IB'}

#check Pullback.lift

omit [ContMDiffVectorBundle n F E IB] in
/-- For a smooth vector bundle `E` over a manifold `B` and a smooth map `f : B' Рєњ B`, the natural
"lift" map from the total space of `f *рхќ E` to the total space of `E` is smooth. -/
theorem Bundle.Pullback.contMDiff_lift :
    ContMDiff (IB'.prod ­ЮЊў(­ЮЋю, F)) (IB.prod ­ЮЊў(­ЮЋю, F)) n
      (Pullback.lift f : TotalSpace F (f *рхќ E) Рєњ _) := by
  intro x
  rw [contMDiffAt_totalSpace]
  refine РЪеf.contMDiff.contMDiffAt.comp _ (contMDiffAt_proj (f *рхќ E)), ?_РЪЕ
  rw [contMDiffAt_of_totalSpace]
  simp [trivializationAt, FiberBundle.trivializationAt']
  have : ContMDiffAt (IB'.prod ­ЮЊў(­ЮЋю, F)) ­ЮЊў(­ЮЋю, F) n (Prod.snd)
      (((FiberBundle.trivializationAt' (f x.proj)).pullback f) x) := by
    apply contMDiffAt_snd
  apply ContMDiffAt.congr_of_eventuallyEq this
  filter_upwards [] with y
  simp
  simp only [Trivialization.pullback, PartialHomeomorph.mk_coe_symm, PartialEquiv.coe_symm_mk,
    Function.comp_apply, lift_mk]



  refine (contMDiffAt_snd (M := B')).comp _ <|
    (contMDiffOn_trivializationAt x).contMDiffAt ?_
  apply (trivializationAt F (f *рхќ E) x.proj).open_source.mem_nhds
  simp

#exit

variable {M EM HM : Type*} [NormedAddCommGroup EM] [NormedSpace ­ЮЋю EM] [TopologicalSpace HM]
  {IM : ModelWithCorners ­ЮЋю EM HM} [TopologicalSpace M] [ChartedSpace HM M]

omit [(x : B) Рєњ Module ­ЮЋю (E x)] in
/-- Given a smooth fibre bundle `E` over a manifold `B` and a smooth map `f : B' Рєњ B`, if `¤є` is
a map into the total space of the pullback `f *рхќ E`, then its smoothness can be checked by checking
the smoothness of (1) the map `TotalSpace.proj Рѕў ¤є` into `B'`, and (2) the map
`Pullback.lift f Рѕў ¤є` into the total space of `E`. -/
theorem Bundle.Pullback.contMDiff_of_contMDiff_proj_comp_of_contMDiff_lift_comp
    {¤є : M Рєњ TotalSpace F (f *рхќ E)} (h1 : ContMDiff IM IB' n (TotalSpace.proj Рѕў ¤є))
    (h2 : ContMDiff IM (IB.prod ­ЮЊў(­ЮЋю, F)) n (Pullback.lift f Рѕў ¤є)) :
    ContMDiff IM (IB'.prod ­ЮЊў(­ЮЋю, F)) n ¤є := by
  intro x
  have h1_cont : Continuous (TotalSpace.proj Рѕў ¤є) := h1.continuous
  have h2_cont : Continuous (Pullback.lift f Рѕў ¤є) := h2.continuous
  specialize h1 x
  specialize h2 x
  rw [contMDiffAt_iff_target] at h1 h2 Ріб
  constructor
  ┬и exact Pullback.continuous_of_continuous_proj_comp_of_continuous_lift_comp f h1_cont h2_cont
      |>.continuousAt
  apply ContMDiffAt.prod_mk_space h1.2
  have (x : EB ├Ќ F) : ContMDiffAt ­ЮЊў(­ЮЋю, EB ├Ќ F) ­ЮЊў(­ЮЋю, F) n Prod.snd x := by
    rw [contMDiffAt_iff_contDiffAt]
    exact contDiffAt_snd
  exact (this _).comp _ h2.2

/-- Given a smooth fibre bundle `E` over a manifold `B` and a smooth map `f : B' Рєњ B`, a map `¤є`
into the total space of the pullback `f *рхќ E` is smooth if and only if the following two maps are
smooth: (1) the map `TotalSpace.proj Рѕў ¤є` into `B'`, and (2) the map `Pullback.lift f Рѕў ¤є` into the
total space of `E`. -/
theorem Bundle.Pullback.contMDiff_iff_contMDiff_proj_comp_and_contMDiff_lift_comp
    (¤є : M Рєњ TotalSpace F (f *рхќ E)) :
    ContMDiff IM (IB'.prod ­ЮЊў(­ЮЋю, F)) n ¤є Рєћ (ContMDiff IM IB' n (TotalSpace.proj Рѕў ¤є)
      РѕД ContMDiff IM (IB.prod ­ЮЊў(­ЮЋю, F)) n (Pullback.lift f Рѕў ¤є)) := by
  refine РЪеfun h Рєд РЪе?_, ?_РЪЕ, fun РЪеhРѓЂ, hРѓѓРЪЕ Рєд ?_РЪЕ
  ┬и exact (Bundle.contMDiff_proj (f *рхќ E)).comp h
  ┬и exact (Bundle.Pullback.contMDiff_lift F E f).comp h
  ┬и exact Bundle.Pullback.contMDiff_of_contMDiff_proj_comp_of_contMDiff_lift_comp F E f hРѓЂ hРѓѓ
