/-
Copyright (c) 2025 Yonele Hu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yonele Hu
-/
import Mathlib

/-!
# Lemmas about `LTSeries` in the prime spectrum

## Main results

* `PrimeSpectrum.exist_lTSeries_mem_one_of_mem_last`: Let $R$ be a Noetherian ring,
  $\mathfrak{p}_0 < \dots < \mathfrak{p}_n$ be a chain of primes, $x \in \mathfrak{p}_n$.
  Then we can find a another chain of primes $\mathfrak{q}_0 < \dots < \mathfrak{q}_n$ such that
  $x \in \mathfrak{q}_1$, $\mathfrak{p}_0 = \mathfrak{q}_0$ and $\mathfrak{p}_n = \mathfrak{q}_n$.
-/

variable {R : Type*} [CommRing R] [IsNoetherianRing R]

local notation "ùî™" => IsLocalRing.maximalIdeal R

open Ideal

#check Ideal.mem_minimalPrimes_span_of_mem_minimalPrimes_span_insert
theorem Ideal.map_height_le_one_of_mem_minimalPrimes {I p : Ideal R} {x : R}
    (hp : p ‚àà (I ‚äî span {x}).minimalPrimes) : (p.map (Ideal.Quotient.mk I)).height ‚â§ 1 :=
  let f := Ideal.Quotient.mk I
  have : p.IsPrime := hp.1.1
  height_le_one_of_isPrincipal_of_mem_minimalPrimes ((span {x}).map f) (p.map f) ‚ü®
    ‚ü®map_isPrime_of_surjective Quotient.mk_surjective <|
      I.mk_ker.trans_le (le_sup_left.trans hp.1.2), map_mono (le_sup_right.trans hp.1.2)‚ü©,
    fun _ ‚ü®hr, hxr‚ü© hrp ‚Ü¶ map_le_iff_le_comap.mpr <| hp.2 ‚ü®hr.comap f, sup_le_iff.mpr
      ‚ü®I.mk_ker.symm.trans_le <| ker_le_comap (Ideal.Quotient.mk I), le_comap_of_map_le hxr‚ü©‚ü© <|
        (comap_mono hrp).trans <| Eq.le <|
          (p.comap_map_of_surjective _ Quotient.mk_surjective).trans <|
            sup_eq_left.mpr (I.mk_ker.trans_le (le_sup_left.trans hp.1.2))‚ü©

theorem PrimeSpectrum.exist_mem_one_of_mem_maximal_ideal [IsLocalRing R] {p‚ÇÅ p‚ÇÄ : (PrimeSpectrum R)}
    (h‚ÇÄ : p‚ÇÄ < p‚ÇÅ) (h‚ÇÅ : p‚ÇÅ < ‚ü®ùî™, inferInstance‚ü©) {x : R} (hx : x ‚àà ùî™) :
      ‚àÉ q : PrimeSpectrum R, x ‚àà q.1 ‚àß p‚ÇÄ < q ‚àß q.1 < ùî™ := by
  by_cases hn : x ‚àà p‚ÇÄ.1
  ¬∑ exact ‚ü®p‚ÇÅ, h‚ÇÄ.le hn, h‚ÇÄ, h‚ÇÅ‚ü©
  let e := p‚ÇÄ.1.primeSpectrumQuotientOrderIsoZeroLocus.symm
  obtain ‚ü®q, hq‚ü© := (p‚ÇÄ.1 + span {x}).nonempty_minimalPrimes <|
    sup_le (IsLocalRing.le_maximalIdeal_of_isPrime p‚ÇÄ.1) ((span_singleton_le_iff_mem ùî™).mpr hx)
      |>.trans_lt (IsMaximal.isPrime' ùî™).1.lt_top |>.ne
  let q : PrimeSpectrum R := ‚ü®q, hq.1.1‚ü©
  have : q.1.IsPrime := q.2
  have hxq : x ‚àà q.1 := le_sup_right.trans hq.1.2 (mem_span_singleton_self x)
  refine ‚ü®q, hxq, lt_of_le_not_le (le_sup_left.trans hq.1.2) fun h ‚Ü¶ hn (h hxq), ?_‚ü©
  refine lt_of_le_of_ne (IsLocalRing.le_maximalIdeal_of_isPrime q.1) fun hqm ‚Ü¶ ?_
  have h : (e ‚ü®q, le_sup_left.trans hq.1.2‚ü©).1.height ‚â§ 1 :=
    map_height_le_one_of_mem_minimalPrimes hq
  simp_rw [show q = ‚ü®ùî™, inferInstance‚ü© from PrimeSpectrum.ext hqm] at h
  have hph : (e ‚ü®p‚ÇÅ, h‚ÇÄ.le‚ü©).1.height ‚â§ 0 := by
    refine Order.lt_one_iff_nonpos.mp (height_le_iff.mp h _ inferInstance ?_)
    simp only [asIdeal_lt_asIdeal, OrderIso.lt_iff_lt, Subtype.mk_lt_mk, h‚ÇÅ]
  refine ENat.not_lt_zero (e ‚ü®p‚ÇÄ, le_refl p‚ÇÄ‚ü©).1.height (height_le_iff.mp hph _ inferInstance ?_)
  simp only [asIdeal_lt_asIdeal, OrderIso.lt_iff_lt, Subtype.mk_lt_mk, h‚ÇÄ]

theorem PrimeSpectrum.exist_mem_one_of_mem_two {p‚ÇÅ p‚ÇÄ p‚ÇÇ : (PrimeSpectrum R)}
    (h‚ÇÄ : p‚ÇÄ < p‚ÇÅ) (h‚ÇÅ : p‚ÇÅ < p‚ÇÇ) {x : R} (hx : x ‚àà p‚ÇÇ.1) :
      ‚àÉ q : (PrimeSpectrum R), x ‚àà q.1 ‚àß p‚ÇÄ < q ‚àß q < p‚ÇÇ := by
  let e := p‚ÇÇ.1.primeSpectrumLocalizationAtPrime (Localization.AtPrime p‚ÇÇ.1)
  have hm : ‚ü®IsLocalRing.maximalIdeal (Localization.AtPrime p‚ÇÇ.1), inferInstance‚ü© =
    e.symm ‚ü®p‚ÇÇ, le_refl p‚ÇÇ‚ü© := (PrimeSpectrum.ext Localization.AtPrime.map_eq_maximalIdeal).symm
  obtain ‚ü®q, hxq, h‚ÇÄ, h‚ÇÅ‚ü© :=
    @exist_mem_one_of_mem_maximal_ideal (Localization.AtPrime p‚ÇÇ.1) _ _ _
      (e.symm ‚ü®p‚ÇÅ, h‚ÇÅ.le‚ü©) (e.symm ‚ü®p‚ÇÄ, (h‚ÇÄ.trans h‚ÇÅ).le‚ü©) (e.symm.lt_iff_lt.mpr h‚ÇÄ)
        (by simp [hm, h‚ÇÅ]) (algebraMap R (Localization.AtPrime p‚ÇÇ.1) x) <| by
          rw [‚Üê Localization.AtPrime.map_eq_maximalIdeal]
          exact mem_map_of_mem (algebraMap R (Localization.AtPrime p‚ÇÇ.1)) hx
  rw [‚Üê e.symm_apply_apply q] at h‚ÇÄ h‚ÇÅ hxq
  have hq : (e q).1 < p‚ÇÇ := by
    have h : e.symm (e q) < e.symm ‚ü®p‚ÇÇ, le_refl p‚ÇÇ‚ü© :=
      h‚ÇÅ.trans_eq Localization.AtPrime.map_eq_maximalIdeal.symm
    rwa [OrderIso.lt_iff_lt, Subtype.mk_lt_mk] at h
  exact Exists.intro (e q).1
    ‚ü®(p‚ÇÇ.1.under_map_of_isLocalizationAtPrime hq.le).le hxq, e.symm.lt_iff_lt.mp h‚ÇÄ, hq‚ü©

/-- Let $R$ be a Noetherian ring, $\mathfrak{p}_0 < \dots < \mathfrak{p}_n$ be a
  chain of primes, $x \in \mathfrak{p}_n$. Then we can find a chain of primes
  $\mathfrak{q}_0 < \dots < \mathfrak{q}_n$ such that $x \in \mathfrak{q}_1$,
  $\mathfrak{p}_0 = \mathfrak{q}_0$ and $\mathfrak{p}_n = \mathfrak{q}_n$. -/
theorem PrimeSpectrum.exist_lTSeries_mem_one_of_mem_last (p : LTSeries (PrimeSpectrum R))
    {x : R} (hx : x ‚àà p.last.1) : ‚àÉ q : LTSeries (PrimeSpectrum R),
      x ‚àà (q 1).1 ‚àß p.length = q.length ‚àß p.head = q.head ‚àß p.last = q.last := by
  generalize hp : p.length = n
  induction' n with n hn generalizing p
  ¬∑ use RelSeries.singleton (¬∑ < ¬∑) p.last
    simp only [RelSeries.singleton_toFun, hx, RelSeries.singleton_length, RelSeries.head,
      RelSeries.last_singleton, and_true, true_and]
    rw [show 0 = Fin.last p.length from Fin.zero_eq_mk.mpr hp, RelSeries.last]
  by_cases h0 : n = 0
  ¬∑ use p
    have h1 : 1 = Fin.last p.length := by
      rw [Fin.last, hp, h0, zero_add]
      exact Fin.natCast_eq_mk (Nat.one_lt_succ_succ 0)
    simp only [h1, hp, Nat.add_left_cancel_iff, and_self, and_true]
    exact hx
  obtain ‚ü®q, hxq, hq2, hq‚ü© : ‚àÉ q : (PrimeSpectrum R), x ‚àà q.1 ‚àß
      p ‚ü®p.length - 2, p.length.sub_lt_succ 2‚ü© < q ‚àß q < p.last := by
    refine (p ‚ü®p.length - 1, p.length.sub_lt_succ 1‚ü©).exist_mem_one_of_mem_two ?_ ?_ hx
    ¬∑ refine p.strictMono (Fin.mk_lt_mk.mpr (Nat.pred_lt ?_))
      simp only [hp, Nat.sub_eq, add_tsub_cancel_right, ne_eq, h0, not_false_eq_true]
    ¬∑ refine p.strictMono (Fin.mk_lt_mk.mpr (Nat.pred_lt ?_))
      simp only [Nat.sub_eq, tsub_zero, ne_eq, hp, n.add_one_ne_zero, not_false_eq_true]
  obtain ‚ü®Q, hxQ, hQ, hh, hl‚ü© :=
    hn (p.eraseLast.eraseLast.snoc q hq2) (by simp only [RelSeries.last_snoc, hxq]) <| by
      simp only [RelSeries.snoc_length, RelSeries.eraseLast_length, hp]
      exact Nat.succ_pred_eq_of_ne_zero h0
  refine ‚ü®Q.snoc p.last ?_, ?_, ?_, ?_, ?_‚ü©
  ¬∑ simp only [‚Üê hl, RelSeries.last_snoc, hq]
  ¬∑ have h1 : 1 = (1 : Fin (Q.length + 1)).castSucc := by
      have h : 1 < Q.length + 1 := by
        rw [‚Üê hQ]
        exact Nat.sub_ne_zero_iff_lt.mp h0
      simp only [Fin.one_eq_mk_of_lt h, Fin.castSucc_mk, Fin.mk_one]
    simp only [h1, RelSeries.snoc_castSucc, hxQ]
  ¬∑ simp only [hQ, RelSeries.snoc_length, Nat.add_left_cancel_iff]
  ¬∑ simp only [RelSeries.head_snoc, ‚Üê hh, RelSeries.head_eraseLast]
  ¬∑ simp only [RelSeries.last_snoc]
