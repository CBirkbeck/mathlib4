import Mathlib.RingTheory.Coalgebra.Basic
import Mathlib.RingTheory.Coalgebra.Hom
import Mathlib.RingTheory.Coalgebra.Equiv
import Mathlib.Algebra.Category.ModuleCat.Basic

universe v u

variable (R : Type u) [CommRing R]

structure CoalgCat where
  /-- the underlying type of an object in `CoalgCat R` -/
  carrier : Type v
  [isAddCommGroup : AddCommGroup carrier]
  [isModule : Module R carrier]
  [isCoalgebra : Coalgebra R carrier]

attribute [instance] CoalgCat.isAddCommGroup CoalgCat.isModule CoalgCat.isCoalgebra

/-- An alias for `CoalgCat.{max u‚ÇÅ u‚ÇÇ}`, to deal around unification issues.
Since the universe the ring lives in can be inferred, we put that last. -/
@[nolint checkUnivs]
abbrev CoalgCatMax.{v‚ÇÅ, v‚ÇÇ, u‚ÇÅ} (R : Type u‚ÇÅ) [CommRing R] := CoalgCat.{max v‚ÇÅ v‚ÇÇ, u‚ÇÅ} R

namespace CoalgCat
open CategoryTheory

instance : CoeSort (CoalgCat.{v} R) (Type v) :=
  ‚ü®CoalgCat.carrier‚ü©

attribute [coe] CoalgCat.carrier

instance CoalgCategory : Category.{v, max (v+1) u} (CoalgCat.{v} R) where
  Hom M N := M ‚Üíc[R] N
  id _ := CoalgHom.id R _
  comp f g := g.comp f
  id_comp _ := CoalgHom.id_comp _
  comp_id _ := CoalgHom.comp_id _
  assoc f g h := CoalgHom.comp_assoc h g f

instance {M N : CoalgCat.{v} R} : FunLike (M ‚ü∂ N) M N :=
  inferInstanceAs (FunLike (M ‚Üíc[R] N) M N)

instance {M N : CoalgCat.{v} R} : CoalgHomClass (M ‚ü∂ N) R M N :=
  CoalgHom.coalgHomClass

instance coalgConcreteCategory : ConcreteCategory.{v} (CoalgCat.{v} R) where
  forget :=
    { obj := fun R => R
      map := fun f => f.toFun }
  forget_faithful := ‚ü®fun h => CoalgHom.ext (fun x => by
    dsimp at h
    rw [h])‚ü©

-- Porting note:
-- One might hope these two instances would not be needed,
-- as we already have `AddCommGroup M` and `Module R M`,
-- but sometimes we seem to need these when rewriting by lemmas about generic concrete categories.
instance {M : CoalgCat.{v} R} : AddCommGroup ((forget (CoalgCat R)).obj M) :=
  (inferInstance : AddCommGroup M)
instance {M : CoalgCat.{v} R} : Module R ((forget (CoalgCat R)).obj M) :=
  (inferInstance : Module R M)
instance {M : CoalgCat.{v} R} : Coalgebra R ((forget (CoalgCat R)).obj M) :=
  (inferInstance : Coalgebra R M)

@[ext]
lemma ext {M N : CoalgCat.{v} R} {f‚ÇÅ f‚ÇÇ : M ‚ü∂ N} (h : ‚àÄ (x : M), f‚ÇÅ x = f‚ÇÇ x) : f‚ÇÅ = f‚ÇÇ :=
  DFunLike.ext _ _ h

instance hasForgetToModule : HasForget‚ÇÇ (CoalgCat R) (ModuleCat R) where
  forget‚ÇÇ :=
    { obj := fun M => ModuleCat.of R M
      map := fun f => ModuleCat.ofHom f.toLinearMap }

instance {M : CoalgCat.{v} R} : AddCommGroup ((forget‚ÇÇ (CoalgCat R) (ModuleCat R)).obj M) :=
  (inferInstance : AddCommGroup M)
instance {M : CoalgCat.{v} R} : Module R ((forget‚ÇÇ (CoalgCat R) (ModuleCat R)).obj M) :=
  (inferInstance : Module R M)
instance {M : CoalgCat.{v} R} : Coalgebra R ((forget‚ÇÇ (CoalgCat R) (ModuleCat R)).obj M) :=
  (inferInstance : Coalgebra R M)

instance hasForgetToAddCommGroup : HasForget‚ÇÇ (CoalgCat R) AddCommGroupCat where
  forget‚ÇÇ :=
    { obj := fun M => AddCommGroupCat.of M
      map := fun f => AddCommGroupCat.ofHom f.toLinearMap }

/-- The object in the category of R-modules associated to an R-module -/
def of (X : Type v) [AddCommGroup X] [Module R X] [Coalgebra R X] : CoalgCat R :=
  ‚ü®X‚ü©

@[simp]
theorem forget‚ÇÇ_obj (X : CoalgCat R) :
    (forget‚ÇÇ (CoalgCat R) AddCommGroupCat).obj X = AddCommGroupCat.of X :=
  rfl

theorem forget‚ÇÇ_obj_CoalgCat_of (X : Type v) [AddCommGroup X] [Module R X] [Coalgebra R X] :
    (forget‚ÇÇ (CoalgCat R) (ModuleCat R)).obj (of R X) = ModuleCat.of R X :=
  rfl
/-
-- Porting note: the simpNF linter correctly doesn't like this.
-- I'm not sure what this is for, actually.
-- If it is really needed, better might be a simp lemma that says
-- `AddCommGroupCat.of (CoalgCat.of R X) = AddCommGroupCat.of X`.
-- @[simp 900]
theorem forget‚ÇÇ_obj_CoalgCat_of (X : Type v) [AddCommGroup X] [Module R X] :
    (forget‚ÇÇ (CoalgCat R) AddCommGroupCat).obj (of R X) = AddCommGroupCat.of X :=
  rfl
#align Module.forget‚ÇÇ_obj_Module_of CoalgCat.forget‚ÇÇ_obj_CoalgCat_of
-/
@[simp]
theorem forget‚ÇÇ_map (X Y : CoalgCat R) (f : X ‚ü∂ Y) :
    (forget‚ÇÇ (CoalgCat R) (ModuleCat R)).map f = CoalgHom.toLinearMap f :=
  rfl

-- Porting note: TODO: `ofHom` and `asHom` are duplicates!

/-- Typecheck a `CoalgHom` as a morphism in `Module R`. -/
def ofHom {R : Type u} [CommRing R] {X Y : Type v} [AddCommGroup X] [Module R X] [Coalgebra R X]
    [AddCommGroup Y] [Module R Y] [Coalgebra R Y] (f : X ‚Üíc[R] Y) : of R X ‚ü∂ of R Y :=
  f

@[simp 1100]
theorem ofHom_apply {R : Type u} [CommRing R] {X Y : Type v} [AddCommGroup X] [Module R X] [Coalgebra R X]
    [AddCommGroup Y] [Module R Y] [Coalgebra R Y] (f : X ‚Üíc[R] Y) (x : X) : ofHom f x = f x :=
  rfl

/-instance : Inhabited (CoalgCat R) :=
  ‚ü®of R PUnit‚ü©-/

instance ofUnique {X : Type v} [AddCommGroup X] [Module R X] [Coalgebra R X] [i : Unique X] : Unique (of R X) :=
  i

-- Porting note: the simpNF linter complains, but we really need this?!
-- @[simp, nolint simpNF]
theorem coe_of (X : Type v) [AddCommGroup X] [Module R X] [Coalgebra R X] : (of R X : Type v) = X :=
  rfl

-- bad? idfk
instance (X : CoalgCat R) : Coalgebra R (ModuleCat.of R X) :=
  (inferInstance : Coalgebra R X)

variable {R}

/-- Forgetting to the underlying type and then building the bundled object returns the original
module. -/
@[simps]
def ofSelfIso (M : CoalgCat R) : CoalgCat.of R M ‚âÖ M where
  hom := ùüô M
  inv := ùüô M

/-theorem isZero_of_subsingleton (M : CoalgCat R) [Subsingleton M] : IsZero M where
  unique_to X := ‚ü®‚ü®‚ü®(0 : M ‚Üíc[R] X)‚ü©, fun f => by
    ext x
    rw [Subsingleton.elim x (0 : M)]
    dsimp
    simp‚ü©‚ü©
  unique_from X := ‚ü®‚ü®‚ü®(0 : X ‚Üíc[R] M)‚ü©, fun f => by
    ext x
    apply Subsingleton.elim‚ü©‚ü©-/

/-instance : HasZeroObject (CoalgCat.{v} R) :=
  ‚ü®‚ü®of R PUnit, isZero_of_subsingleton _‚ü©‚ü©-/

variable {M N U : CoalgCat.{v} R}

@[simp]
theorem id_apply (m : M) : (ùüô M : M ‚Üí M) m = m :=
  rfl

@[simp]
theorem coe_comp (f : M ‚ü∂ N) (g : N ‚ü∂ U) : (f ‚â´ g : M ‚Üí U) = g ‚àò f :=
  rfl

theorem comp_def (f : M ‚ü∂ N) (g : N ‚ü∂ U) : f ‚â´ g = g.comp f :=
  rfl

-- porting note: added
@[simp] lemma forget_map (f : M ‚ü∂ N) : (forget (CoalgCat R)).map f = (f : M ‚Üí N) := rfl

end CoalgCat

variable {R}

variable {X‚ÇÅ X‚ÇÇ : Type v}

/-
/-- Reinterpreting a linear map in the category of `R`-modules. -/
def CoalgCat.asHom [AddCommGroup X‚ÇÅ] [Module R X‚ÇÅ] [AddCommGroup X‚ÇÇ] [Module R X‚ÇÇ] :
    (X‚ÇÅ ‚Üíc[R] X‚ÇÇ) ‚Üí (CoalgCat.of R X‚ÇÅ ‚ü∂ CoalgCat.of R X‚ÇÇ) :=
  id

/-- Reinterpreting a linear map in the category of `R`-modules -/
scoped[CoalgCat] notation "‚Üü" f:1024 => CoalgCat.asHom f

/-- Reinterpreting a linear map in the category of `R`-modules. -/
def CoalgCat.asHomRight [AddCommGroup X‚ÇÅ] [Module R X‚ÇÅ] {X‚ÇÇ : CoalgCat.{v} R} :
    (X‚ÇÅ ‚Üíc[R] X‚ÇÇ) ‚Üí (CoalgCat.of R X‚ÇÅ ‚ü∂ X‚ÇÇ) :=
  id
#align Module.as_hom_right CoalgCat.asHomRight

/-- Reinterpreting a linear map in the category of `R`-modules. -/
scoped[CoalgCat] notation "‚Üæ" f:1024 => CoalgCat.asHomRight f

/-- Reinterpreting a linear map in the category of `R`-modules. -/
def CoalgCat.asHomLeft {X‚ÇÅ : CoalgCat.{v} R} [AddCommGroup X‚ÇÇ] [Module R X‚ÇÇ] :
    (X‚ÇÅ ‚Üíc[R] X‚ÇÇ) ‚Üí (X‚ÇÅ ‚ü∂ CoalgCat.of R X‚ÇÇ) :=
  id
#align Module.as_hom_left CoalgCat.asHomLeft

/-- Reinterpreting a linear map in the category of `R`-modules. -/
scoped[CoalgCat] notation "‚Üø" f:1024 => CoalgCat.asHomLeft f
-/
section

/-- Build an isomorphism in the category `Module R` from a `CoalgEquiv` between `Module`s. -/
@[simps]
def CoalgEquiv.toCoalgIso {g‚ÇÅ : AddCommGroup X‚ÇÅ} {g‚ÇÇ : AddCommGroup X‚ÇÇ} {m‚ÇÅ : Module R X‚ÇÅ}
      {c‚ÇÅ : Coalgebra R X‚ÇÅ} {m‚ÇÇ : Module R X‚ÇÇ} {c‚ÇÇ : Coalgebra R X‚ÇÇ} (e : X‚ÇÅ ‚âÉc[R] X‚ÇÇ) :
      CoalgCat.of R X‚ÇÅ ‚âÖ CoalgCat.of R X‚ÇÇ where
  hom := (e : X‚ÇÅ ‚Üíc[R] X‚ÇÇ)
  inv := (e.symm : X‚ÇÇ ‚Üíc[R] X‚ÇÅ)
  hom_inv_id := by ext; apply e.left_inv
  inv_hom_id := by ext; apply e.right_inv

/-- Build an isomorphism in the category `Module R` from a `CoalgEquiv` between `Module`s. -/
abbrev CoalgEquiv.toCoalgIso' {M N : CoalgCat.{v} R} (i : M ‚âÉc[R] N) : M ‚âÖ N :=
  i.toCoalgIso

/-- Build an isomorphism in the category `Module R` from a `linear_equiv` between `module`s. -/
abbrev CoalgEquiv.toCoalgIso'Left {X‚ÇÅ : CoalgCat.{v} R} [AddCommGroup X‚ÇÇ] [Module R X‚ÇÇ] [Coalgebra R X‚ÇÇ]
    (e : X‚ÇÅ ‚âÉc[R] X‚ÇÇ) : X‚ÇÅ ‚âÖ CoalgCat.of R X‚ÇÇ :=
  e.toCoalgIso

/-- Build an isomorphism in the category `Module R` from a `linear_equiv` between `module`s. -/
abbrev CoalgEquiv.toCoalgIso'Right [AddCommGroup X‚ÇÅ] [Module R X‚ÇÅ] [Coalgebra R X‚ÇÅ] {X‚ÇÇ : CoalgCat.{v} R}
    (e : X‚ÇÅ ‚âÉc[R] X‚ÇÇ) : CoalgCat.of R X‚ÇÅ ‚âÖ X‚ÇÇ :=
  e.toCoalgIso

namespace CategoryTheory.Iso

/-- Build a `linear_equiv` from an isomorphism in the category `Module R`. -/
def toCoalgEquiv {X Y : CoalgCat R} (i : X ‚âÖ Y) : X ‚âÉc[R] Y :=
  { i.hom with
    invFun := i.inv
    left_inv := sorry
    right_inv := sorry }
end CategoryTheory.Iso

/-- linear equivalences between `module`s are the same as (isomorphic to) isomorphisms
in `Module` -/
@[simps]
def coalgEquivIsoCoalgIso {X Y : Type u} [AddCommGroup X] [AddCommGroup Y] [Module R X] [Coalgebra R X]
    [Module R Y] [Coalgebra R Y] : (X ‚âÉc[R] Y) ‚âÖ CoalgCat.of R X ‚âÖ CoalgCat.of R Y where
  hom e := e.toCoalgIso
  inv i := i.toCoalgEquiv

end
