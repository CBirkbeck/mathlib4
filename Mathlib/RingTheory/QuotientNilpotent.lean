/-
Copyright (c) 2021 Oliver Nash. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Oliver Nash
-/
import Mathlib.RingTheory.Nilpotent
import Mathlib.RingTheory.Ideal.QuotientOperations

#align_import ring_theory.quotient_nilpotent from "leanprover-community/mathlib"@"da420a8c6dd5bdfb85c4ced85c34388f633bc6ff"

/-!
# Nilpotent elements in quotient rings
-/

theorem Ideal.isRadical_iff_quotient_reduced {R : Type*} [CommRing R] (I : Ideal R) :
    I.IsRadical ‚Üî IsReduced (R ‚ß∏ I) := by
  conv_lhs => rw [‚Üê @Ideal.mk_ker R _ I]
  -- ‚ä¢ IsRadical (RingHom.ker (Quotient.mk I)) ‚Üî IsReduced (R ‚ß∏ I)
  exact RingHom.ker_isRadical_iff_reduced_of_surjective (@Ideal.Quotient.mk_surjective R _ I)
  -- üéâ no goals
#align ideal.is_radical_iff_quotient_reduced Ideal.isRadical_iff_quotient_reduced

variable {R S : Type*} [CommSemiring R] [CommRing S] [Algebra R S] (I : Ideal S)


/-- Let `P` be a property on ideals. If `P` holds for square-zero ideals, and if
  `P I ‚Üí P (J ‚ß∏ I) ‚Üí P J`, then `P` holds for all nilpotent ideals. -/
theorem Ideal.IsNilpotent.induction_on (hI : IsNilpotent I)
    {P : ‚àÄ ‚¶ÉS : Type _‚¶Ñ [CommRing S], ‚àÄ _I : Ideal S, Prop}
    (h‚ÇÅ : ‚àÄ ‚¶ÉS : Type _‚¶Ñ [CommRing S], ‚àÄ I : Ideal S, I ^ 2 = ‚ä• ‚Üí P I)
    (h‚ÇÇ : ‚àÄ ‚¶ÉS : Type _‚¶Ñ [CommRing S], ‚àÄ I J : Ideal S, I ‚â§ J ‚Üí P I ‚Üí
      P (J.map (Ideal.Quotient.mk I)) ‚Üí P J) :
    P I := by
  obtain ‚ü®n, hI : I ^ n = ‚ä•‚ü© := hI
  -- ‚ä¢ P I
  induction' n using Nat.strong_induction_on with n H generalizing S
  -- ‚ä¢ P I
  by_cases hI' : I = ‚ä•
  -- ‚ä¢ P I
  ¬∑ subst hI'
    -- ‚ä¢ P ‚ä•
    apply h‚ÇÅ
    -- ‚ä¢ ‚ä• ^ 2 = ‚ä•
    rw [‚Üê Ideal.zero_eq_bot, zero_pow]
    -- ‚ä¢ 0 < 2
    exact zero_lt_two
    -- üéâ no goals
  cases' n with n
  -- ‚ä¢ P I
  ¬∑ rw [pow_zero, Ideal.one_eq_top] at hI
    -- ‚ä¢ P I
    haveI := subsingleton_of_bot_eq_top hI.symm
    -- ‚ä¢ P I
    exact (hI' (Subsingleton.elim _ _)).elim
    -- üéâ no goals
  cases' n with n
  -- ‚ä¢ P I
  ¬∑ rw [pow_one] at hI
    -- ‚ä¢ P I
    exact (hI' hI).elim
    -- üéâ no goals
  apply h‚ÇÇ (I ^ 2) _ (Ideal.pow_le_self two_ne_zero)
  -- ‚ä¢ P (I ^ 2)
  ¬∑ apply H n.succ _ (I ^ 2)
    -- ‚ä¢ (I ^ 2) ^ Nat.succ n = ‚ä•
    ¬∑ rw [‚Üê pow_mul, eq_bot_iff, ‚Üê hI, Nat.succ_eq_add_one, Nat.succ_eq_add_one]
      -- ‚ä¢ I ^ (2 * (n + 1)) ‚â§ I ^ (n + 1 + 1)
      apply Ideal.pow_le_pow (by linarith)
      -- üéâ no goals
    ¬∑ exact n.succ.lt_succ_self
      -- üéâ no goals
  ¬∑ apply h‚ÇÅ
    -- ‚ä¢ map (Quotient.mk (I ^ 2)) I ^ 2 = ‚ä•
    rw [‚Üê Ideal.map_pow, Ideal.map_quotient_self]
    -- üéâ no goals
#align ideal.is_nilpotent.induction_on Ideal.IsNilpotent.induction_on

theorem IsNilpotent.isUnit_quotient_mk_iff {R : Type*} [CommRing R] {I : Ideal R}
    (hI : IsNilpotent I) {x : R} : IsUnit (Ideal.Quotient.mk I x) ‚Üî IsUnit x := by
  refine' ‚ü®_, fun h => h.map <| Ideal.Quotient.mk I‚ü©
  -- ‚ä¢ IsUnit (‚Üë(Ideal.Quotient.mk I) x) ‚Üí IsUnit x
  revert x
  -- ‚ä¢ ‚àÄ {x : R}, IsUnit (‚Üë(Ideal.Quotient.mk I) x) ‚Üí IsUnit x
  apply Ideal.IsNilpotent.induction_on (R := R) (S := R) I hI <;> clear hI I
  -- ‚ä¢ ‚àÄ ‚¶ÉS : Type u_3‚¶Ñ [inst : CommRing S] (I : Ideal S), I ^ 2 = ‚ä• ‚Üí ‚àÄ {x : S}, I ‚Ä¶
                                                                  -- ‚ä¢ ‚àÄ ‚¶ÉS : Type u_3‚¶Ñ [inst : CommRing S] (I : Ideal S), I ^ 2 = ‚ä• ‚Üí ‚àÄ {x : S}, I ‚Ä¶
                                                                  -- ‚ä¢ ‚àÄ ‚¶ÉS : Type u_3‚¶Ñ [inst : CommRing S] (I J : Ideal S), I ‚â§ J ‚Üí (‚àÄ {x : S}, Is ‚Ä¶
  swap
  -- ‚ä¢ ‚àÄ ‚¶ÉS : Type u_3‚¶Ñ [inst : CommRing S] (I J : Ideal S), I ‚â§ J ‚Üí (‚àÄ {x : S}, Is ‚Ä¶
  ¬∑ introv e h‚ÇÅ h‚ÇÇ h‚ÇÉ
    -- ‚ä¢ IsUnit x
    apply h‚ÇÅ
    -- ‚ä¢ IsUnit (‚Üë(Ideal.Quotient.mk I) x)
    apply h‚ÇÇ
    -- ‚ä¢ IsUnit (‚Üë(Ideal.Quotient.mk (Ideal.map (Ideal.Quotient.mk I) J)) (‚Üë(Ideal.Qu ‚Ä¶
    exact
      h‚ÇÉ.map
        ((DoubleQuot.quotQuotEquivQuotSup I J).trans
              (Ideal.quotEquivOfEq (sup_eq_right.mpr e))).symm.toRingHom
  ¬∑ introv e H
    -- ‚ä¢ IsUnit x
    skip
    -- ‚ä¢ IsUnit x
    obtain ‚ü®y, hy‚ü© := Ideal.Quotient.mk_surjective (‚ÜëH.unit‚Åª¬π : S ‚ß∏ I)
    -- ‚ä¢ IsUnit x
    have : Ideal.Quotient.mk I (x * y) = Ideal.Quotient.mk I 1 := by
      rw [map_one, _root_.map_mul, hy, IsUnit.mul_val_inv]
    rw [Ideal.Quotient.eq] at this
    -- ‚ä¢ IsUnit x
    have : (x * y - 1) ^ 2 = 0 := by
      rw [‚Üê Ideal.mem_bot, ‚Üê e]
      exact Ideal.pow_mem_pow this _
    have : x * (y * (2 - x * y)) = 1 := by
      rw [eq_comm, ‚Üê sub_eq_zero, ‚Üê this]
      ring
    exact isUnit_of_mul_eq_one _ _ this
    -- üéâ no goals
#align is_nilpotent.is_unit_quotient_mk_iff IsNilpotent.isUnit_quotient_mk_iff
