/-
Copyright (c) 2020 Markus Himmel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Markus Himmel
-/
import Mathlib.RingTheory.Ideal.Operations

#align_import ring_theory.ideal.prod from "leanprover-community/mathlib"@"052f6013363326d50cb99c6939814a4b8eb7b301"

/-!
# Ideals in product rings

For commutative rings `R` and `S` and ideals `I ‚â§ R`, `J ‚â§ S`, we define `Ideal.prod I J` as the
product `I √ó J`, viewed as an ideal of `R √ó S`. In `ideal_prod_eq` we show that every ideal of
`R √ó S` is of this form.  Furthermore, we show that every prime ideal of `R √ó S` is of the form
`p √ó S` or `R √ó p`, where `p` is a prime ideal.
-/


universe u v

variable {R : Type u} {S : Type v} [Ring R] [Ring S] (I I' : Ideal R) (J J' : Ideal S)

namespace Ideal

/-- `I √ó J` as an ideal of `R √ó S`. -/
def prod : Ideal (R √ó S) where
  carrier := { x | x.fst ‚àà I ‚àß x.snd ‚àà J }
  zero_mem' := by simp
                  -- üéâ no goals
  add_mem' := by
    -- ‚ä¢ (a‚ÇÅ, a‚ÇÇ) + (b‚ÇÅ, b‚ÇÇ) ‚àà {x | x.fst ‚àà I ‚àß x.snd ‚àà J}
    rintro ‚ü®a‚ÇÅ, a‚ÇÇ‚ü© ‚ü®b‚ÇÅ, b‚ÇÇ‚ü© ‚ü®ha‚ÇÅ, ha‚ÇÇ‚ü© ‚ü®hb‚ÇÅ, hb‚ÇÇ‚ü©
    -- üéâ no goals
    exact ‚ü®I.add_mem ha‚ÇÅ hb‚ÇÅ, J.add_mem ha‚ÇÇ hb‚ÇÇ‚ü©
  smul_mem' := by
    rintro ‚ü®a‚ÇÅ, a‚ÇÇ‚ü© ‚ü®b‚ÇÅ, b‚ÇÇ‚ü© ‚ü®hb‚ÇÅ, hb‚ÇÇ‚ü©
    -- ‚ä¢ (a‚ÇÅ, a‚ÇÇ) ‚Ä¢ (b‚ÇÅ, b‚ÇÇ) ‚àà { toAddSubsemigroup := { carrier := {x | x.fst ‚àà I ‚àß x ‚Ä¶
    exact ‚ü®I.mul_mem_left _ hb‚ÇÅ, J.mul_mem_left _ hb‚ÇÇ‚ü©
    -- üéâ no goals
#align ideal.prod Ideal.prod

@[simp]
theorem mem_prod {r : R} {s : S} : (‚ü®r, s‚ü© : R √ó S) ‚àà prod I J ‚Üî r ‚àà I ‚àß s ‚àà J :=
  Iff.rfl
#align ideal.mem_prod Ideal.mem_prod

@[simp]
theorem prod_top_top : prod (‚ä§ : Ideal R) (‚ä§ : Ideal S) = ‚ä§ :=
  Ideal.ext <| by simp
                  -- üéâ no goals
#align ideal.prod_top_top Ideal.prod_top_top

/-- Every ideal of the product ring is of the form `I √ó J`, where `I` and `J` can be explicitly
    given as the image under the projection maps. -/
theorem ideal_prod_eq (I : Ideal (R √ó S)) :
    I = Ideal.prod (map (RingHom.fst R S) I : Ideal R) (map (RingHom.snd R S) I) := by
  apply Ideal.ext
  -- ‚ä¢ ‚àÄ (x : R √ó S), x ‚àà I ‚Üî x ‚àà prod (map (RingHom.fst R S) I) (map (RingHom.snd  ‚Ä¶
  rintro ‚ü®r, s‚ü©
  -- ‚ä¢ (r, s) ‚àà I ‚Üî (r, s) ‚àà prod (map (RingHom.fst R S) I) (map (RingHom.snd R S) I)
  rw [mem_prod, mem_map_iff_of_surjective (RingHom.fst R S) Prod.fst_surjective,
    mem_map_iff_of_surjective (RingHom.snd R S) Prod.snd_surjective]
  refine' ‚ü®fun h => ‚ü®‚ü®_, ‚ü®h, rfl‚ü©‚ü©, ‚ü®_, ‚ü®h, rfl‚ü©‚ü©‚ü©, _‚ü©
  -- ‚ä¢ ((‚àÉ x, x ‚àà I ‚àß ‚Üë(RingHom.fst R S) x = r) ‚àß ‚àÉ x, x ‚àà I ‚àß ‚Üë(RingHom.snd R S) x ‚Ä¶
  rintro ‚ü®‚ü®‚ü®r, s'‚ü©, ‚ü®h‚ÇÅ, rfl‚ü©‚ü©, ‚ü®‚ü®r', s‚ü©, ‚ü®h‚ÇÇ, rfl‚ü©‚ü©‚ü©
  -- ‚ä¢ (‚Üë(RingHom.fst R S) (r, s'), ‚Üë(RingHom.snd R S) (r', s)) ‚àà I
  simpa using I.add_mem (I.mul_mem_left (1, 0) h‚ÇÅ) (I.mul_mem_left (0, 1) h‚ÇÇ)
  -- üéâ no goals
#align ideal.ideal_prod_eq Ideal.ideal_prod_eq

@[simp]
theorem map_fst_prod (I : Ideal R) (J : Ideal S) : map (RingHom.fst R S) (prod I J) = I := by
  ext x
  -- ‚ä¢ x ‚àà map (RingHom.fst R S) (prod I J) ‚Üî x ‚àà I
  rw [mem_map_iff_of_surjective (RingHom.fst R S) Prod.fst_surjective]
  -- ‚ä¢ (‚àÉ x_1, x_1 ‚àà prod I J ‚àß ‚Üë(RingHom.fst R S) x_1 = x) ‚Üî x ‚àà I
  exact
    ‚ü®by
      rintro ‚ü®x, ‚ü®h, rfl‚ü©‚ü©
      exact h.1, fun h => ‚ü®‚ü®x, 0‚ü©, ‚ü®‚ü®h, Ideal.zero_mem _‚ü©, rfl‚ü©‚ü©‚ü©
#align ideal.map_fst_prod Ideal.map_fst_prod

@[simp]
theorem map_snd_prod (I : Ideal R) (J : Ideal S) : map (RingHom.snd R S) (prod I J) = J := by
  ext x
  -- ‚ä¢ x ‚àà map (RingHom.snd R S) (prod I J) ‚Üî x ‚àà J
  rw [mem_map_iff_of_surjective (RingHom.snd R S) Prod.snd_surjective]
  -- ‚ä¢ (‚àÉ x_1, x_1 ‚àà prod I J ‚àß ‚Üë(RingHom.snd R S) x_1 = x) ‚Üî x ‚àà J
  exact
    ‚ü®by
      rintro ‚ü®x, ‚ü®h, rfl‚ü©‚ü©
      exact h.2, fun h => ‚ü®‚ü®0, x‚ü©, ‚ü®‚ü®Ideal.zero_mem _, h‚ü©, rfl‚ü©‚ü©‚ü©
#align ideal.map_snd_prod Ideal.map_snd_prod

@[simp]
theorem map_prodComm_prod :
    map ((RingEquiv.prodComm : R √ó S ‚âÉ+* S √ó R) : R √ó S ‚Üí+* S √ó R) (prod I J) = prod J I := by
  refine' Trans.trans (ideal_prod_eq _) _
  -- ‚ä¢ prod (map (RingHom.fst S R) (map (‚ÜëRingEquiv.prodComm) (prod I J))) (map (Ri ‚Ä¶
  simp [map_map]
  -- üéâ no goals
#align ideal.map_prod_comm_prod Ideal.map_prodComm_prod

/-- Ideals of `R √ó S` are in one-to-one correspondence with pairs of ideals of `R` and ideals of
    `S`. -/
def idealProdEquiv : Ideal (R √ó S) ‚âÉ Ideal R √ó Ideal S
    where
  toFun I := ‚ü®map (RingHom.fst R S) I, map (RingHom.snd R S) I‚ü©
  invFun I := prod I.1 I.2
  left_inv I := (ideal_prod_eq I).symm
  right_inv := fun ‚ü®I, J‚ü© => by simp
                                -- üéâ no goals
#align ideal.ideal_prod_equiv Ideal.idealProdEquiv

@[simp]
theorem idealProdEquiv_symm_apply (I : Ideal R) (J : Ideal S) :
    idealProdEquiv.symm ‚ü®I, J‚ü© = prod I J :=
  rfl
#align ideal.ideal_prod_equiv_symm_apply Ideal.idealProdEquiv_symm_apply

theorem prod.ext_iff {I I' : Ideal R} {J J' : Ideal S} :
    prod I J = prod I' J' ‚Üî I = I' ‚àß J = J' := by
  simp only [‚Üê idealProdEquiv_symm_apply, idealProdEquiv.symm.injective.eq_iff, Prod.mk.inj_iff]
  -- üéâ no goals
#align ideal.prod.ext_iff Ideal.prod.ext_iff

theorem isPrime_of_isPrime_prod_top {I : Ideal R} (h : (Ideal.prod I (‚ä§ : Ideal S)).IsPrime) :
    I.IsPrime := by
  constructor
  -- ‚ä¢ I ‚â† ‚ä§
  ¬∑ contrapose! h
    -- ‚ä¢ ¬¨IsPrime (prod I ‚ä§)
    rw [h, prod_top_top, isPrime_iff]
    -- ‚ä¢ ¬¨(‚ä§ ‚â† ‚ä§ ‚àß ‚àÄ {x y : R √ó S}, x * y ‚àà ‚ä§ ‚Üí x ‚àà ‚ä§ ‚à® y ‚àà ‚ä§)
    simp [isPrime_iff, h]
    -- üéâ no goals
  ¬∑ intro x y hxy
    -- ‚ä¢ x ‚àà I ‚à® y ‚àà I
    have : (‚ü®x, 1‚ü© : R √ó S) * ‚ü®y, 1‚ü© ‚àà prod I ‚ä§ := by
      rw [Prod.mk_mul_mk, mul_one, mem_prod]
      exact ‚ü®hxy, trivial‚ü©
    simpa using h.mem_or_mem this
    -- üéâ no goals
#align ideal.is_prime_of_is_prime_prod_top Ideal.isPrime_of_isPrime_prod_top

theorem isPrime_of_isPrime_prod_top' {I : Ideal S} (h : (Ideal.prod (‚ä§ : Ideal R) I).IsPrime) :
    I.IsPrime := by
  apply @isPrime_of_isPrime_prod_top _ R
  -- ‚ä¢ IsPrime (prod I ‚ä§)
  rw [‚Üê map_prodComm_prod]
  -- ‚ä¢ IsPrime (map (‚ÜëRingEquiv.prodComm) (prod ‚ä§ I))
  exact map_isPrime_of_equiv _
  -- üéâ no goals
#align ideal.is_prime_of_is_prime_prod_top' Ideal.isPrime_of_isPrime_prod_top'

theorem isPrime_ideal_prod_top {I : Ideal R} [h : I.IsPrime] : (prod I (‚ä§ : Ideal S)).IsPrime := by
  constructor
  -- ‚ä¢ prod I ‚ä§ ‚â† ‚ä§
  ¬∑ rcases h with ‚ü®h, -‚ü©
    -- ‚ä¢ prod I ‚ä§ ‚â† ‚ä§
    contrapose! h
    -- ‚ä¢ I = ‚ä§
    rw [‚Üê prod_top_top, prod.ext_iff] at h
    -- ‚ä¢ I = ‚ä§
    exact h.1
    -- üéâ no goals
  rintro ‚ü®r‚ÇÅ, s‚ÇÅ‚ü© ‚ü®r‚ÇÇ, s‚ÇÇ‚ü© ‚ü®h‚ÇÅ, _‚ü©
  -- ‚ä¢ (r‚ÇÅ, s‚ÇÅ) ‚àà prod I ‚ä§ ‚à® (r‚ÇÇ, s‚ÇÇ) ‚àà prod I ‚ä§
  cases' h.mem_or_mem h‚ÇÅ with h h
  -- ‚ä¢ (r‚ÇÅ, s‚ÇÅ) ‚àà prod I ‚ä§ ‚à® (r‚ÇÇ, s‚ÇÇ) ‚àà prod I ‚ä§
  ¬∑ exact Or.inl ‚ü®h, trivial‚ü©
    -- üéâ no goals
  ¬∑ exact Or.inr ‚ü®h, trivial‚ü©
    -- üéâ no goals
#align ideal.is_prime_ideal_prod_top Ideal.isPrime_ideal_prod_top

theorem isPrime_ideal_prod_top' {I : Ideal S} [h : I.IsPrime] : (prod (‚ä§ : Ideal R) I).IsPrime := by
  letI : IsPrime (prod I (‚ä§ : Ideal R)) := isPrime_ideal_prod_top
  -- ‚ä¢ IsPrime (prod ‚ä§ I)
  rw [‚Üê map_prodComm_prod]
  -- ‚ä¢ IsPrime (map (‚ÜëRingEquiv.prodComm) (prod I ‚ä§))
  apply map_isPrime_of_equiv _
  -- üéâ no goals
#align ideal.is_prime_ideal_prod_top' Ideal.isPrime_ideal_prod_top'

theorem ideal_prod_prime_aux {I : Ideal R} {J : Ideal S} :
    (Ideal.prod I J).IsPrime ‚Üí I = ‚ä§ ‚à® J = ‚ä§ := by
  contrapose!
  -- ‚ä¢ I ‚â† ‚ä§ ‚àß J ‚â† ‚ä§ ‚Üí ¬¨IsPrime (prod I J)
  simp only [ne_top_iff_one, isPrime_iff, not_and, not_forall, not_or]
  -- ‚ä¢ ¬¨1 ‚àà I ‚àß ¬¨1 ‚àà J ‚Üí ¬¨1 ‚àà prod I J ‚Üí ‚àÉ x x_1 h, ¬¨x ‚àà prod I J ‚àß ¬¨x_1 ‚àà prod I J
  exact fun ‚ü®hI, hJ‚ü© _ => ‚ü®‚ü®0, 1‚ü©, ‚ü®1, 0‚ü©, by simp, by simp [hJ], by simp [hI]‚ü©
  -- üéâ no goals
#align ideal.ideal_prod_prime_aux Ideal.ideal_prod_prime_aux

/-- Classification of prime ideals in product rings: the prime ideals of `R √ó S` are precisely the
    ideals of the form `p √ó S` or `R √ó p`, where `p` is a prime ideal of `R` or `S`. -/
theorem ideal_prod_prime (I : Ideal (R √ó S)) :
    I.IsPrime ‚Üî
      (‚àÉ p : Ideal R, p.IsPrime ‚àß I = Ideal.prod p ‚ä§) ‚à®
        ‚àÉ p : Ideal S, p.IsPrime ‚àß I = Ideal.prod ‚ä§ p := by
  constructor
  -- ‚ä¢ IsPrime I ‚Üí (‚àÉ p, IsPrime p ‚àß I = prod p ‚ä§) ‚à® ‚àÉ p, IsPrime p ‚àß I = prod ‚ä§ p
  ¬∑ rw [ideal_prod_eq I]
    -- ‚ä¢ IsPrime (prod (map (RingHom.fst R S) I) (map (RingHom.snd R S) I)) ‚Üí (‚àÉ p, I ‚Ä¶
    intro hI
    -- ‚ä¢ (‚àÉ p, IsPrime p ‚àß prod (map (RingHom.fst R S) I) (map (RingHom.snd R S) I) = ‚Ä¶
    rcases ideal_prod_prime_aux hI with (h | h)
    -- ‚ä¢ (‚àÉ p, IsPrime p ‚àß prod (map (RingHom.fst R S) I) (map (RingHom.snd R S) I) = ‚Ä¶
    ¬∑ right
      -- ‚ä¢ ‚àÉ p, IsPrime p ‚àß prod (map (RingHom.fst R S) I) (map (RingHom.snd R S) I) =  ‚Ä¶
      rw [h] at hI ‚ä¢
      -- ‚ä¢ ‚àÉ p, IsPrime p ‚àß prod ‚ä§ (map (RingHom.snd R S) I) = prod ‚ä§ p
      exact ‚ü®_, ‚ü®isPrime_of_isPrime_prod_top' hI, rfl‚ü©‚ü©
      -- üéâ no goals
    ¬∑ left
      -- ‚ä¢ ‚àÉ p, IsPrime p ‚àß prod (map (RingHom.fst R S) I) (map (RingHom.snd R S) I) =  ‚Ä¶
      rw [h] at hI ‚ä¢
      -- ‚ä¢ ‚àÉ p, IsPrime p ‚àß prod (map (RingHom.fst R S) I) ‚ä§ = prod p ‚ä§
      exact ‚ü®_, ‚ü®isPrime_of_isPrime_prod_top hI, rfl‚ü©‚ü©
      -- üéâ no goals
  ¬∑ rintro (‚ü®p, ‚ü®h, rfl‚ü©‚ü© | ‚ü®p, ‚ü®h, rfl‚ü©‚ü©)
    -- ‚ä¢ IsPrime (prod p ‚ä§)
    ¬∑ exact isPrime_ideal_prod_top
      -- üéâ no goals
    ¬∑ exact isPrime_ideal_prod_top'
      -- üéâ no goals
#align ideal.ideal_prod_prime Ideal.ideal_prod_prime

end Ideal
