/-
Copyright (c) 2018 Mario Carneiro, Kevin Buzzard. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Mario Carneiro, Kevin Buzzard
-/
import Mathlib.Algebra.Ring.Idempotents
import Mathlib.RingTheory.Finiteness

#align_import ring_theory.ideal.idempotent_fg from "leanprover-community/mathlib"@"25cf7631da8ddc2d5f957c388bf5e4b25a77d8dc"

/-!
## Lemmas on idempotent finitely generated ideals
-/


namespace Ideal

/-- A finitely generated idempotent ideal is generated by an idempotent element -/
theorem isIdempotentElem_iff_of_fg {R : Type*} [CommRing R] (I : Ideal R) (h : I.FG) :
    IsIdempotentElem I ‚Üî ‚àÉ e : R, IsIdempotentElem e ‚àß I = R ‚àô e := by
  constructor
  -- ‚ä¢ IsIdempotentElem I ‚Üí ‚àÉ e, IsIdempotentElem e ‚àß I = Submodule.span R {e}
  ¬∑ intro e
    -- ‚ä¢ ‚àÉ e, IsIdempotentElem e ‚àß I = Submodule.span R {e}
    obtain ‚ü®r, hr, hr'‚ü© :=
      Submodule.exists_mem_and_smul_eq_self_of_fg_of_le_smul I I h
        (by
          rw [smul_eq_mul]
          exact e.ge)
    simp_rw [smul_eq_mul] at hr'
    -- ‚ä¢ ‚àÉ e, IsIdempotentElem e ‚àß I = Submodule.span R {e}
    refine' ‚ü®r, hr' r hr, antisymm _ ((Submodule.span_singleton_le_iff_mem _ _).mpr hr)‚ü©
    -- ‚ä¢ I ‚â§ Submodule.span R {r}
    intro x hx
    -- ‚ä¢ x ‚àà Submodule.span R {r}
    rw [‚Üê hr' x hx]
    -- ‚ä¢ r * x ‚àà Submodule.span R {r}
    exact Ideal.mem_span_singleton'.mpr ‚ü®_, mul_comm _ _‚ü©
    -- üéâ no goals
  ¬∑ rintro ‚ü®e, he, rfl‚ü©
    -- ‚ä¢ IsIdempotentElem (Submodule.span R {e})
    simp [IsIdempotentElem, Ideal.span_singleton_mul_span_singleton, he.eq]
    -- üéâ no goals
#align ideal.is_idempotent_elem_iff_of_fg Ideal.isIdempotentElem_iff_of_fg

theorem isIdempotentElem_iff_eq_bot_or_top {R : Type*} [CommRing R] [IsDomain R] (I : Ideal R)
    (h : I.FG) : IsIdempotentElem I ‚Üî I = ‚ä• ‚à® I = ‚ä§ := by
  constructor
  -- ‚ä¢ IsIdempotentElem I ‚Üí I = ‚ä• ‚à® I = ‚ä§
  ¬∑ intro H
    -- ‚ä¢ I = ‚ä• ‚à® I = ‚ä§
    obtain ‚ü®e, he, rfl‚ü© := (I.isIdempotentElem_iff_of_fg h).mp H
    -- ‚ä¢ Submodule.span R {e} = ‚ä• ‚à® Submodule.span R {e} = ‚ä§
    simp only [Ideal.submodule_span_eq, Ideal.span_singleton_eq_bot]
    -- ‚ä¢ e = 0 ‚à® span {e} = ‚ä§
    apply Or.imp id _ (IsIdempotentElem.iff_eq_zero_or_one.mp he)
    -- ‚ä¢ e = 1 ‚Üí span {e} = ‚ä§
    rintro rfl
    -- ‚ä¢ span {1} = ‚ä§
    simp
    -- üéâ no goals
  ¬∑ rintro (rfl | rfl) <;> simp [IsIdempotentElem]
    -- ‚ä¢ IsIdempotentElem ‚ä•
                           -- üéâ no goals
                           -- üéâ no goals
#align ideal.is_idempotent_elem_iff_eq_bot_or_top Ideal.isIdempotentElem_iff_eq_bot_or_top

end Ideal
