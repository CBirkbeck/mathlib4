/-
Copyright (c) 2022 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import Mathlib.RingTheory.Localization.AtPrime
import Mathlib.Order.Minimal

#align_import ring_theory.ideal.minimal_prime from "leanprover-community/mathlib"@"70fd9563a21e7b963887c9360bd29b2393e6225a"

/-!

# Minimal primes

We provide various results concerning the minimal primes above an ideal

## Main results
- `Ideal.minimalPrimes`: `I.minimalPrimes` is the set of ideals that are minimal primes over `I`.
- `minimalPrimes`: `minimalPrimes R` is the set of minimal primes of `R`.
- `Ideal.exists_minimalPrimes_le`: Every prime ideal over `I` contains a minimal prime over `I`.
- `Ideal.radical_minimalPrimes`: The minimal primes over `I.radical` are precisely
  the minimal primes over `I`.
- `Ideal.sInf_minimalPrimes`: The intersection of minimal primes over `I` is `I.radical`.
- `Ideal.exists_minimalPrimes_comap_eq` If `p` is a minimal prime over `f ‚Åª¬π I`, then it is the
  preimage of some minimal prime over `I`.
- `Ideal.minimalPrimes_eq_comap`: The minimal primes over `I` are precisely the preimages of
  minimal primes of `R ‚ß∏ I`.


-/


section

variable {R S : Type*} [CommRing R] [CommRing S] (I J : Ideal R)

/-- `I.minimalPrimes` is the set of ideals that are minimal primes over `I`. -/
protected def Ideal.minimalPrimes : Set (Ideal R) :=
  minimals (¬∑ ‚â§ ¬∑) { p | p.IsPrime ‚àß I ‚â§ p }
#align ideal.minimal_primes Ideal.minimalPrimes

/-- `minimalPrimes R` is the set of minimal primes of `R`.
This is defined as `Ideal.minimalPrimes ‚ä•`. -/
def minimalPrimes (R : Type*) [CommRing R] : Set (Ideal R) :=
  Ideal.minimalPrimes ‚ä•
#align minimal_primes minimalPrimes

variable {I J}

theorem Ideal.exists_minimalPrimes_le [J.IsPrime] (e : I ‚â§ J) : ‚àÉ p ‚àà I.minimalPrimes, p ‚â§ J := by
  suffices
    ‚àÉ m ‚àà { p : (Ideal R)·µí·µà | Ideal.IsPrime p ‚àß I ‚â§ OrderDual.ofDual p },
      OrderDual.toDual J ‚â§ m ‚àß ‚àÄ z ‚àà { p : (Ideal R)·µí·µà | Ideal.IsPrime p ‚àß I ‚â§ p }, m ‚â§ z ‚Üí z = m by
    obtain ‚ü®p, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ‚ü© := this
    simp_rw [‚Üê @eq_comm _ p] at h‚ÇÉ
    exact ‚ü®p, ‚ü®h‚ÇÅ, fun a b c => le_of_eq (h‚ÇÉ a b c)‚ü©, h‚ÇÇ‚ü©
  apply zorn_nonempty_partialOrder‚ÇÄ
  -- ‚ä¢ ‚àÄ (c : Set (Ideal R)·µí·µà), c ‚äÜ {p | IsPrime p ‚àß I ‚â§ ‚ÜëOrderDual.ofDual p} ‚Üí IsC ‚Ä¶
  swap
  -- ‚ä¢ ‚ÜëOrderDual.toDual J ‚àà {p | IsPrime p ‚àß I ‚â§ ‚ÜëOrderDual.ofDual p}
  ¬∑ refine' ‚ü®show J.IsPrime by infer_instance, e‚ü©
    -- üéâ no goals
  rintro (c : Set (Ideal R)) hc hc' J' hJ'
  -- ‚ä¢ ‚àÉ ub, ub ‚àà {p | IsPrime p ‚àß I ‚â§ ‚ÜëOrderDual.ofDual p} ‚àß ‚àÄ (z : (Ideal R)·µí·µà),  ‚Ä¶
  refine'
    ‚ü®OrderDual.toDual (sInf c),
      ‚ü®Ideal.sInf_isPrime_of_isChain ‚ü®J', hJ'‚ü© hc'.symm fun x hx => (hc hx).1, _‚ü©, _‚ü©
  ¬∑ rw [OrderDual.ofDual_toDual, le_sInf_iff]
    -- ‚ä¢ ‚àÄ (b : Ideal R), b ‚àà c ‚Üí I ‚â§ b
    exact fun _ hx => (hc hx).2
    -- üéâ no goals
  ¬∑ rintro z hz
    -- ‚ä¢ z ‚â§ ‚ÜëOrderDual.toDual (sInf c)
    rw [OrderDual.le_toDual]
    -- ‚ä¢ sInf c ‚â§ ‚ÜëOrderDual.ofDual z
    exact sInf_le hz
    -- üéâ no goals
#align ideal.exists_minimal_primes_le Ideal.exists_minimalPrimes_le

@[simp]
theorem Ideal.radical_minimalPrimes : I.radical.minimalPrimes = I.minimalPrimes := by
  rw [Ideal.minimalPrimes, Ideal.minimalPrimes]
  -- ‚ä¢ minimals (fun x x_1 => x ‚â§ x_1) {p | IsPrime p ‚àß radical I ‚â§ p} = minimals ( ‚Ä¶
  congr
  -- ‚ä¢ minimals (fun x x_1 => x ‚â§ x_1) {p | IsPrime p ‚àß radical I ‚â§ p} = minimals ( ‚Ä¶
  ext p
  -- ‚ä¢ p ‚àà minimals (fun x x_1 => x ‚â§ x_1) {p | IsPrime p ‚àß radical I ‚â§ p} ‚Üî p ‚àà mi ‚Ä¶
  refine' ‚ü®_, _‚ü© <;> rintro ‚ü®‚ü®a, ha‚ü©, b‚ü©
  -- ‚ä¢ p ‚àà minimals (fun x x_1 => x ‚â§ x_1) {p | IsPrime p ‚àß radical I ‚â§ p} ‚Üí p ‚àà mi ‚Ä¶
                     -- ‚ä¢ p ‚àà minimals (fun x x_1 => x ‚â§ x_1) {p | IsPrime p ‚àß I ‚â§ p}
                     -- ‚ä¢ p ‚àà minimals (fun x x_1 => x ‚â§ x_1) {p | IsPrime p ‚àß radical I ‚â§ p}
  ¬∑ refine' ‚ü®‚ü®a, a.radical_le_iff.1 ha‚ü©, _‚ü©
    -- ‚ä¢ ‚àÄ ‚¶Éb : Ideal R‚¶Ñ, b ‚àà {p | IsPrime p ‚àß I ‚â§ p} ‚Üí (fun x x_1 => x ‚â§ x_1) b p ‚Üí  ‚Ä¶
    ¬∑ simp only [Set.mem_setOf_eq, and_imp] at *
      -- ‚ä¢ ‚àÄ ‚¶Éb : Ideal R‚¶Ñ, IsPrime b ‚Üí I ‚â§ b ‚Üí b ‚â§ p ‚Üí p ‚â§ b
      exact fun _ h2 h3 h4 => b h2 (h2.radical_le_iff.2 h3) h4
      -- üéâ no goals
  ¬∑ refine' ‚ü®‚ü®a, a.radical_le_iff.2 ha‚ü©, _‚ü©
    -- ‚ä¢ ‚àÄ ‚¶Éb : Ideal R‚¶Ñ, b ‚àà {p | IsPrime p ‚àß radical I ‚â§ p} ‚Üí (fun x x_1 => x ‚â§ x_1 ‚Ä¶
    ¬∑ simp only [Set.mem_setOf_eq, and_imp] at *
      -- ‚ä¢ ‚àÄ ‚¶Éb : Ideal R‚¶Ñ, IsPrime b ‚Üí radical I ‚â§ b ‚Üí b ‚â§ p ‚Üí p ‚â§ b
      exact fun _ h2 h3 h4 => b h2 (h2.radical_le_iff.1 h3) h4
      -- üéâ no goals
#align ideal.radical_minimal_primes Ideal.radical_minimalPrimes

@[simp]
theorem Ideal.sInf_minimalPrimes : sInf I.minimalPrimes = I.radical := by
  rw [I.radical_eq_sInf]
  -- ‚ä¢ sInf (Ideal.minimalPrimes I) = sInf {J | I ‚â§ J ‚àß IsPrime J}
  apply le_antisymm
  -- ‚ä¢ sInf (Ideal.minimalPrimes I) ‚â§ sInf {J | I ‚â§ J ‚àß IsPrime J}
  ¬∑ intro x hx
    -- ‚ä¢ x ‚àà sInf {J | I ‚â§ J ‚àß IsPrime J}
    rw [Ideal.mem_sInf] at hx ‚ä¢
    -- ‚ä¢ ‚àÄ ‚¶ÉI_1 : Ideal R‚¶Ñ, I_1 ‚àà {J | I ‚â§ J ‚àß IsPrime J} ‚Üí x ‚àà I_1
    rintro J ‚ü®e, hJ‚ü©
    -- ‚ä¢ x ‚àà J
    obtain ‚ü®p, hp, hp'‚ü© := Ideal.exists_minimalPrimes_le e
    -- ‚ä¢ x ‚àà J
    exact hp' (hx hp)
    -- üéâ no goals
  ¬∑ apply sInf_le_sInf _
    -- ‚ä¢ Ideal.minimalPrimes I ‚äÜ {J | I ‚â§ J ‚àß IsPrime J}
    intro I hI
    -- ‚ä¢ I ‚àà {J | I‚úù ‚â§ J ‚àß IsPrime J}
    exact hI.1.symm
    -- üéâ no goals
#align ideal.Inf_minimal_primes Ideal.sInf_minimalPrimes

theorem Ideal.exists_comap_eq_of_mem_minimalPrimes_of_injective {f : R ‚Üí+* S}
    (hf : Function.Injective f) (p) (H : p ‚àà minimalPrimes R) :
    ‚àÉ p' : Ideal S, p'.IsPrime ‚àß p'.comap f = p := by
  have := H.1.1
  -- ‚ä¢ ‚àÉ p', IsPrime p' ‚àß comap f p' = p
  have : Nontrivial (Localization (Submonoid.map f p.primeCompl)) := by
    refine' ‚ü®‚ü®1, 0, _‚ü©‚ü©
    convert (IsLocalization.map_injective_of_injective p.primeCompl (Localization.AtPrime p)
        (Localization <| p.primeCompl.map f) hf).ne one_ne_zero
    ¬∑ rw [map_one]
    ¬∑ rw [map_zero]
  obtain ‚ü®M, hM‚ü© := Ideal.exists_maximal (Localization (Submonoid.map f p.primeCompl))
  -- ‚ä¢ ‚àÉ p', IsPrime p' ‚àß comap f p' = p
  refine' ‚ü®M.comap (algebraMap S <| Localization (Submonoid.map f p.primeCompl)), inferInstance, _‚ü©
  -- ‚ä¢ comap f (comap (algebraMap S (Localization (Submonoid.map f (primeCompl p))) ‚Ä¶
  rw [Ideal.comap_comap, ‚Üê @IsLocalization.map_comp _ _ _ _ _ _ _ _ Localization.isLocalization
      _ _ _ _ p.primeCompl.le_comap_map _ Localization.isLocalization,
    ‚Üê Ideal.comap_comap]
  suffices _ ‚â§ p by exact this.antisymm (H.2 ‚ü®inferInstance, bot_le‚ü© this)
  -- ‚ä¢ comap (algebraMap R (Localization (primeCompl p))) (comap (IsLocalization.ma ‚Ä¶
  intro x hx
  -- ‚ä¢ x ‚àà p
  by_contra h
  -- ‚ä¢ False
  apply hM.ne_top
  -- ‚ä¢ M = ‚ä§
  apply M.eq_top_of_isUnit_mem hx
  -- ‚ä¢ IsUnit (‚Üë(IsLocalization.map (Localization (Submonoid.map f (primeCompl p))) ‚Ä¶
  apply IsUnit.map
  -- ‚ä¢ IsUnit (‚Üë(algebraMap R (Localization (primeCompl p))) x)
  apply IsLocalization.map_units _ (show p.primeCompl from ‚ü®x, h‚ü©)
  -- üéâ no goals
#align ideal.exists_comap_eq_of_mem_minimal_primes_of_injective Ideal.exists_comap_eq_of_mem_minimalPrimes_of_injective

theorem Ideal.exists_comap_eq_of_mem_minimalPrimes {I : Ideal S} (f : R ‚Üí+* S) (p)
    (H : p ‚àà (I.comap f).minimalPrimes) : ‚àÉ p' : Ideal S, p'.IsPrime ‚àß I ‚â§ p' ‚àß p'.comap f = p := by
  have := H.1.1
  -- ‚ä¢ ‚àÉ p', IsPrime p' ‚àß I ‚â§ p' ‚àß comap f p' = p
  let f' := (Ideal.Quotient.mk I).comp f
  -- ‚ä¢ ‚àÉ p', IsPrime p' ‚àß I ‚â§ p' ‚àß comap f p' = p
  have e : RingHom.ker f' = I.comap f := by
    ext1
    exact Submodule.Quotient.mk_eq_zero _
  have : RingHom.ker (Ideal.Quotient.mk <| RingHom.ker f') ‚â§ p := by
    rw [Ideal.mk_ker, e]
    exact H.1.2
  suffices _ by
    have ‚ü®p', hp‚ÇÅ, hp‚ÇÇ‚ü© := Ideal.exists_comap_eq_of_mem_minimalPrimes_of_injective
      (RingHom.kerLift_injective f') (p.map <| Ideal.Quotient.mk <| RingHom.ker f') this
    refine' ‚ü®p'.comap <| Ideal.Quotient.mk I, Ideal.IsPrime.comap _, _, _‚ü©
    ¬∑ exact Ideal.mk_ker.symm.trans_le (Ideal.comap_mono bot_le)
    ¬∑ convert congr_arg (Ideal.comap <| Ideal.Quotient.mk <| RingHom.ker f') hp‚ÇÇ
      rwa [Ideal.comap_map_of_surjective (Ideal.Quotient.mk <| RingHom.ker f')
        Ideal.Quotient.mk_surjective, eq_comm, sup_eq_left]
  refine' ‚ü®‚ü®_, bot_le‚ü©, _‚ü©
  -- ‚ä¢ IsPrime (map (Quotient.mk (RingHom.ker f')) p)
  ¬∑ apply Ideal.map_isPrime_of_surjective _ this
    -- ‚ä¢ Function.Surjective ‚Üë(Quotient.mk (RingHom.ker f'))
    exact Ideal.Quotient.mk_surjective
    -- üéâ no goals
  ¬∑ rintro q ‚ü®hq, -‚ü© hq'
    -- ‚ä¢ map (Quotient.mk (RingHom.ker f')) p ‚â§ q
    rw [‚Üê Ideal.map_comap_of_surjective
        (Ideal.Quotient.mk (RingHom.ker ((Ideal.Quotient.mk I).comp f)))
        Ideal.Quotient.mk_surjective q]
    apply Ideal.map_mono
    -- ‚ä¢ p ‚â§ comap (Quotient.mk (RingHom.ker (RingHom.comp (Quotient.mk I) f))) q
    apply H.2
    -- ‚ä¢ comap (Quotient.mk (RingHom.ker (RingHom.comp (Quotient.mk I) f))) q ‚àà {p |  ‚Ä¶
    ¬∑ refine' ‚ü®inferInstance, (Ideal.mk_ker.trans e).symm.trans_le (Ideal.comap_mono bot_le)‚ü©
      -- üéâ no goals
    ¬∑ refine' (Ideal.comap_mono hq').trans _
      -- ‚ä¢ comap (Quotient.mk (RingHom.ker (RingHom.comp (Quotient.mk I) f))) (map (Quo ‚Ä¶
      rw [Ideal.comap_map_of_surjective]
      -- ‚ä¢ p ‚äî comap (Quotient.mk (RingHom.ker (RingHom.comp (Quotient.mk I) f))) ‚ä• ‚â§ p
      exacts [sup_le rfl.le this, Ideal.Quotient.mk_surjective]
      -- üéâ no goals
#align ideal.exists_comap_eq_of_mem_minimal_primes Ideal.exists_comap_eq_of_mem_minimalPrimes

theorem Ideal.exists_minimalPrimes_comap_eq {I : Ideal S} (f : R ‚Üí+* S) (p)
    (H : p ‚àà (I.comap f).minimalPrimes) : ‚àÉ p' ‚àà I.minimalPrimes, Ideal.comap f p' = p := by
  obtain ‚ü®p', h‚ÇÅ, h‚ÇÇ, h‚ÇÉ‚ü© := Ideal.exists_comap_eq_of_mem_minimalPrimes f p H
  -- ‚ä¢ ‚àÉ p', p' ‚àà Ideal.minimalPrimes I ‚àß comap f p' = p
  obtain ‚ü®q, hq, hq'‚ü© := Ideal.exists_minimalPrimes_le h‚ÇÇ
  -- ‚ä¢ ‚àÉ p', p' ‚àà Ideal.minimalPrimes I ‚àß comap f p' = p
  refine' ‚ü®q, hq, Eq.symm _‚ü©
  -- ‚ä¢ p = comap f q
  have := hq.1.1
  -- ‚ä¢ p = comap f q
  have := (Ideal.comap_mono hq').trans_eq h‚ÇÉ
  -- ‚ä¢ p = comap f q
  exact (H.2 ‚ü®inferInstance, Ideal.comap_mono hq.1.2‚ü© this).antisymm this
  -- üéâ no goals
#align ideal.exists_minimal_primes_comap_eq Ideal.exists_minimalPrimes_comap_eq

theorem Ideal.mimimal_primes_comap_of_surjective {f : R ‚Üí+* S} (hf : Function.Surjective f)
    {I J : Ideal S} (h : J ‚àà I.minimalPrimes) : J.comap f ‚àà (I.comap f).minimalPrimes := by
  have := h.1.1
  -- ‚ä¢ comap f J ‚àà Ideal.minimalPrimes (comap f I)
  refine' ‚ü®‚ü®inferInstance, Ideal.comap_mono h.1.2‚ü©, _‚ü©
  -- ‚ä¢ ‚àÄ ‚¶Éb : Ideal R‚¶Ñ, b ‚àà {p | IsPrime p ‚àß comap f I ‚â§ p} ‚Üí (fun x x_1 => x ‚â§ x_1 ‚Ä¶
  rintro K ‚ü®hK, e‚ÇÅ‚ü© e‚ÇÇ
  -- ‚ä¢ comap f J ‚â§ K
  have : RingHom.ker f ‚â§ K := (Ideal.comap_mono bot_le).trans e‚ÇÅ
  -- ‚ä¢ comap f J ‚â§ K
  rw [‚Üê sup_eq_left.mpr this, RingHom.ker_eq_comap_bot, ‚Üê Ideal.comap_map_of_surjective f hf]
  -- ‚ä¢ comap f J ‚â§ comap f (map f K)
  apply Ideal.comap_mono _
  -- ‚ä¢ J ‚â§ map f K
  apply h.2 _ _
  -- ‚ä¢ map f K ‚àà {p | IsPrime p ‚àß I ‚â§ p}
  ¬∑ exact ‚ü®Ideal.map_isPrime_of_surjective hf this, Ideal.le_map_of_comap_le_of_surjective f hf e‚ÇÅ‚ü©
    -- üéâ no goals
  ¬∑ exact Ideal.map_le_of_le_comap e‚ÇÇ
    -- üéâ no goals
#align ideal.mimimal_primes_comap_of_surjective Ideal.mimimal_primes_comap_of_surjective

theorem Ideal.comap_minimalPrimes_eq_of_surjective {f : R ‚Üí+* S} (hf : Function.Surjective f)
    (I : Ideal S) : (I.comap f).minimalPrimes = Ideal.comap f '' I.minimalPrimes := by
  ext J
  -- ‚ä¢ J ‚àà Ideal.minimalPrimes (comap f I) ‚Üî J ‚àà comap f '' Ideal.minimalPrimes I
  constructor
  -- ‚ä¢ J ‚àà Ideal.minimalPrimes (comap f I) ‚Üí J ‚àà comap f '' Ideal.minimalPrimes I
  ¬∑ intro H
    -- ‚ä¢ J ‚àà comap f '' Ideal.minimalPrimes I
    obtain ‚ü®p, h, rfl‚ü© := Ideal.exists_minimalPrimes_comap_eq f J H
    -- ‚ä¢ comap f p ‚àà comap f '' Ideal.minimalPrimes I
    exact ‚ü®p, h, rfl‚ü©
    -- üéâ no goals
  ¬∑ rintro ‚ü®J, hJ, rfl‚ü©
    -- ‚ä¢ comap f J ‚àà Ideal.minimalPrimes (comap f I)
    exact Ideal.mimimal_primes_comap_of_surjective hf hJ
    -- üéâ no goals
#align ideal.comap_minimal_primes_eq_of_surjective Ideal.comap_minimalPrimes_eq_of_surjective

theorem Ideal.minimalPrimes_eq_comap :
    I.minimalPrimes = Ideal.comap (Ideal.Quotient.mk I) '' minimalPrimes (R ‚ß∏ I) := by
  rw [minimalPrimes, ‚Üê Ideal.comap_minimalPrimes_eq_of_surjective Ideal.Quotient.mk_surjective,
    ‚Üê RingHom.ker_eq_comap_bot, Ideal.mk_ker]
#align ideal.minimal_primes_eq_comap Ideal.minimalPrimes_eq_comap

theorem Ideal.minimalPrimes_eq_subsingleton (hI : I.IsPrimary) : I.minimalPrimes = {I.radical} := by
  ext J
  -- ‚ä¢ J ‚àà Ideal.minimalPrimes I ‚Üî J ‚àà {radical I}
  constructor
  -- ‚ä¢ J ‚àà Ideal.minimalPrimes I ‚Üí J ‚àà {radical I}
  ¬∑ exact fun H =>
      let e := H.1.1.radical_le_iff.mpr H.1.2
      (H.2 ‚ü®Ideal.isPrime_radical hI, Ideal.le_radical‚ü© e).antisymm e
  ¬∑ rintro (rfl : J = I.radical)
    -- ‚ä¢ radical I ‚àà Ideal.minimalPrimes I
    exact ‚ü®‚ü®Ideal.isPrime_radical hI, Ideal.le_radical‚ü©, fun _ H _ => H.1.radical_le_iff.mpr H.2‚ü©
    -- üéâ no goals
#align ideal.minimal_primes_eq_subsingleton Ideal.minimalPrimes_eq_subsingleton

theorem Ideal.minimalPrimes_eq_subsingleton_self [I.IsPrime] : I.minimalPrimes = {I} := by
  ext J
  -- ‚ä¢ J ‚àà Ideal.minimalPrimes I ‚Üî J ‚àà {I}
  constructor
  -- ‚ä¢ J ‚àà Ideal.minimalPrimes I ‚Üí J ‚àà {I}
  ¬∑ exact fun H => (H.2 ‚ü®inferInstance, rfl.le‚ü© H.1.2).antisymm H.1.2
    -- üéâ no goals
  ¬∑ rintro (rfl : J = I)
    -- ‚ä¢ J ‚àà Ideal.minimalPrimes J
    refine' ‚ü®‚ü®inferInstance, rfl.le‚ü©, fun _ h _ => h.2‚ü©
    -- üéâ no goals
#align ideal.minimal_primes_eq_subsingleton_self Ideal.minimalPrimes_eq_subsingleton_self

end
