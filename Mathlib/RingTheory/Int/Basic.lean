/-
Copyright (c) 2018 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Jens Wagemaker, Aaron Anderson
-/
import Mathlib.Algebra.EuclideanDomain.Basic
import Mathlib.Data.Nat.Factors
import Mathlib.RingTheory.Coprime.Basic
import Mathlib.RingTheory.PrincipalIdealDomain

#align_import ring_theory.int.basic from "leanprover-community/mathlib"@"e655e4ea5c6d02854696f97494997ba4c31be802"

/-!
# Divisibility over ‚Ñï and ‚Ñ§

This file collects results for the integers and natural numbers that use abstract algebra in
their proofs or cases of ‚Ñï and ‚Ñ§ being examples of structures in abstract algebra.

## Main statements

* `Nat.factors_eq`: the multiset of elements of `Nat.factors` is equal to the factors
   given by the `UniqueFactorizationMonoid` instance
* ‚Ñ§ is a `NormalizationMonoid`
* ‚Ñ§ is a `GCDMonoid`

## Tags

prime, irreducible, natural numbers, integers, normalization monoid, gcd monoid,
greatest common divisor, prime factorization, prime factors, unique factorization,
unique factors
-/


namespace Nat

instance : WfDvdMonoid ‚Ñï :=
  ‚ü®by
    refine'
      RelHomClass.wellFounded
        (‚ü®fun x : ‚Ñï => if x = 0 then (‚ä§ : ‚Ñï‚àû) else x, _‚ü© : DvdNotUnit ‚Üír (¬∑ < ¬∑))
        (WithTop.wellFounded_lt Nat.lt_wfRel.wf)
    intro a b h
    -- ‚ä¢ (fun x => if x = 0 then ‚ä§ else ‚Üëx) a < (fun x => if x = 0 then ‚ä§ else ‚Üëx) b
    cases' a with a
    -- ‚ä¢ (fun x => if x = 0 then ‚ä§ else ‚Üëx) zero < (fun x => if x = 0 then ‚ä§ else ‚Üëx) b
    ¬∑ exfalso
      -- ‚ä¢ False
      revert h
      -- ‚ä¢ DvdNotUnit zero b ‚Üí False
      simp [DvdNotUnit]
      -- üéâ no goals
    cases b
    -- ‚ä¢ (fun x => if x = 0 then ‚ä§ else ‚Üëx) (succ a) < (fun x => if x = 0 then ‚ä§ else ‚Ä¶
    ¬∑ simpa [succ_ne_zero] using WithTop.coe_lt_top (a + 1)
      -- üéâ no goals
    cases' dvd_and_not_dvd_iff.2 h with h1 h2
    -- ‚ä¢ (fun x => if x = 0 then ‚ä§ else ‚Üëx) (succ a) < (fun x => if x = 0 then ‚ä§ else ‚Ä¶
    simp only [succ_ne_zero, cast_lt, if_false]
    -- ‚ä¢ succ a < succ n‚úù
    refine lt_of_le_of_ne (Nat.le_of_dvd (Nat.succ_pos _) h1) fun con => h2 ?_
    -- ‚ä¢ succ n‚úù ‚à£ succ a
    rw [con]‚ü©
    -- üéâ no goals

instance : UniqueFactorizationMonoid ‚Ñï :=
  ‚ü®fun {_} => Nat.irreducible_iff_prime‚ü©

end Nat

/-- `‚Ñï` is a gcd_monoid. -/
instance : GCDMonoid ‚Ñï where
  gcd := Nat.gcd
  lcm := Nat.lcm
  gcd_dvd_left := Nat.gcd_dvd_left
  gcd_dvd_right := Nat.gcd_dvd_right
  dvd_gcd := Nat.dvd_gcd
  gcd_mul_lcm a b := by rw [Nat.gcd_mul_lcm]; rfl
                        -- ‚ä¢ Associated (a * b) (a * b)
                                              -- üéâ no goals
  lcm_zero_left := Nat.lcm_zero_left
  lcm_zero_right := Nat.lcm_zero_right

instance : NormalizedGCDMonoid ‚Ñï :=
  { (inferInstance : GCDMonoid ‚Ñï),
    (inferInstance : NormalizationMonoid ‚Ñï) with
    normalize_gcd := fun _ _ => normalize_eq _
    normalize_lcm := fun _ _ => normalize_eq _ }

theorem gcd_eq_nat_gcd (m n : ‚Ñï) : gcd m n = Nat.gcd m n :=
  rfl
#align gcd_eq_nat_gcd gcd_eq_nat_gcd

theorem lcm_eq_nat_lcm (m n : ‚Ñï) : lcm m n = Nat.lcm m n :=
  rfl
#align lcm_eq_nat_lcm lcm_eq_nat_lcm

namespace Int

section NormalizationMonoid

instance normalizationMonoid : NormalizationMonoid ‚Ñ§ where
  normUnit a := if 0 ‚â§ a then 1 else -1
  normUnit_zero := if_pos le_rfl
  normUnit_mul {a b} hna hnb := by
    cases' hna.lt_or_lt with ha ha <;> cases' hnb.lt_or_lt with hb hb <;>
    -- ‚ä¢ (fun a => if 0 ‚â§ a then 1 else -1) (a * b) = (fun a => if 0 ‚â§ a then 1 else  ‚Ä¶
                                       -- ‚ä¢ (fun a => if 0 ‚â§ a then 1 else -1) (a * b) = (fun a => if 0 ‚â§ a then 1 else  ‚Ä¶
                                       -- ‚ä¢ (fun a => if 0 ‚â§ a then 1 else -1) (a * b) = (fun a => if 0 ‚â§ a then 1 else  ‚Ä¶
      simp [mul_nonneg_iff, ha.le, ha.not_le, hb.le, hb.not_le]
      -- üéâ no goals
      -- üéâ no goals
      -- üéâ no goals
      -- üéâ no goals
  normUnit_coe_units u :=
    (units_eq_one_or u).elim (fun eq => eq.symm ‚ñ∏ if_pos zero_le_one) fun eq =>
      eq.symm ‚ñ∏ if_neg (not_le_of_gt <| show (-1 : ‚Ñ§) < 0 by decide)
                                                             -- üéâ no goals

-- Porting note: added
theorem normUnit_eq (z : ‚Ñ§) : normUnit z = if 0 ‚â§ z then 1 else -1 := rfl

theorem normalize_of_nonneg {z : ‚Ñ§} (h : 0 ‚â§ z) : normalize z = z := by
  rw [normalize_apply, normUnit_eq, if_pos h, Units.val_one, mul_one]
  -- üéâ no goals
#align int.normalize_of_nonneg Int.normalize_of_nonneg

theorem normalize_of_nonpos {z : ‚Ñ§} (h : z ‚â§ 0) : normalize z = -z := by
  obtain rfl | h := h.eq_or_lt
  -- ‚ä¢ ‚Üënormalize 0 = -0
  ¬∑ simp
    -- üéâ no goals
  ¬∑ rw [normalize_apply, normUnit_eq, if_neg (not_le_of_gt h), Units.val_neg, Units.val_one,
      mul_neg_one]
#align int.normalize_of_nonpos Int.normalize_of_nonpos

theorem normalize_coe_nat (n : ‚Ñï) : normalize (n : ‚Ñ§) = n :=
  normalize_of_nonneg (ofNat_le_ofNat_of_le <| Nat.zero_le n)
#align int.normalize_coe_nat Int.normalize_coe_nat

theorem abs_eq_normalize (z : ‚Ñ§) : |z| = normalize z := by
  cases le_total 0 z <;> simp [-normalize_apply, normalize_of_nonneg, normalize_of_nonpos, *]
  -- ‚ä¢ |z| = ‚Üënormalize z
                         -- üéâ no goals
                         -- üéâ no goals
#align int.abs_eq_normalize Int.abs_eq_normalize

theorem nonneg_of_normalize_eq_self {z : ‚Ñ§} (hz : normalize z = z) : 0 ‚â§ z :=
  abs_eq_self.1 <| by rw [abs_eq_normalize, hz]
                      -- üéâ no goals
#align int.nonneg_of_normalize_eq_self Int.nonneg_of_normalize_eq_self

theorem nonneg_iff_normalize_eq_self (z : ‚Ñ§) : normalize z = z ‚Üî 0 ‚â§ z :=
  ‚ü®nonneg_of_normalize_eq_self, normalize_of_nonneg‚ü©
#align int.nonneg_iff_normalize_eq_self Int.nonneg_iff_normalize_eq_self

theorem eq_of_associated_of_nonneg {a b : ‚Ñ§} (h : Associated a b) (ha : 0 ‚â§ a) (hb : 0 ‚â§ b) :
    a = b :=
  dvd_antisymm_of_normalize_eq (normalize_of_nonneg ha) (normalize_of_nonneg hb) h.dvd h.symm.dvd
#align int.eq_of_associated_of_nonneg Int.eq_of_associated_of_nonneg

end NormalizationMonoid

section GCDMonoid

instance : GCDMonoid ‚Ñ§ where
  gcd a b := Int.gcd a b
  lcm a b := Int.lcm a b
  gcd_dvd_left a b := Int.gcd_dvd_left _ _
  gcd_dvd_right a b := Int.gcd_dvd_right _ _
  dvd_gcd := dvd_gcd
  gcd_mul_lcm a b := by
    rw [‚Üê Int.ofNat_mul, gcd_mul_lcm, coe_natAbs, abs_eq_normalize]
    -- ‚ä¢ Associated (‚Üënormalize (a * b)) (a * b)
    exact normalize_associated (a * b)
    -- üéâ no goals
  lcm_zero_left a := coe_nat_eq_zero.2 <| Nat.lcm_zero_left _
  lcm_zero_right a := coe_nat_eq_zero.2 <| Nat.lcm_zero_right _

instance : NormalizedGCDMonoid ‚Ñ§ :=
  { Int.normalizationMonoid,
    (inferInstance : GCDMonoid ‚Ñ§) with
    normalize_gcd := fun _ _ => normalize_coe_nat _
    normalize_lcm := fun _ _ => normalize_coe_nat _ }

theorem coe_gcd (i j : ‚Ñ§) : ‚Üë(Int.gcd i j) = GCDMonoid.gcd i j :=
  rfl
#align int.coe_gcd Int.coe_gcd

theorem coe_lcm (i j : ‚Ñ§) : ‚Üë(Int.lcm i j) = GCDMonoid.lcm i j :=
  rfl
#align int.coe_lcm Int.coe_lcm

theorem natAbs_gcd (i j : ‚Ñ§) : natAbs (GCDMonoid.gcd i j) = Int.gcd i j :=
  rfl
#align int.nat_abs_gcd Int.natAbs_gcd

theorem natAbs_lcm (i j : ‚Ñ§) : natAbs (GCDMonoid.lcm i j) = Int.lcm i j :=
  rfl
#align int.nat_abs_lcm Int.natAbs_lcm

end GCDMonoid

theorem exists_unit_of_abs (a : ‚Ñ§) : ‚àÉ (u : ‚Ñ§) (_ : IsUnit u), (Int.natAbs a : ‚Ñ§) = u * a := by
  cases' natAbs_eq a with h h
  -- ‚ä¢ ‚àÉ u x, ‚Üë(natAbs a) = u * a
  ¬∑ use 1, isUnit_one
    -- ‚ä¢ ‚Üë(natAbs a) = 1 * a
    rw [‚Üê h, one_mul]
    -- üéâ no goals
  ¬∑ use -1, isUnit_one.neg
    -- ‚ä¢ ‚Üë(natAbs a) = -1 * a
    rw [‚Üê neg_eq_iff_eq_neg.mpr h]
    -- ‚ä¢ -a = -1 * a
    simp only [neg_mul, one_mul]
    -- üéâ no goals
#align int.exists_unit_of_abs Int.exists_unit_of_abs

theorem gcd_eq_natAbs {a b : ‚Ñ§} : Int.gcd a b = Nat.gcd a.natAbs b.natAbs :=
  rfl
#align int.gcd_eq_nat_abs Int.gcd_eq_natAbs

theorem gcd_eq_one_iff_coprime {a b : ‚Ñ§} : Int.gcd a b = 1 ‚Üî IsCoprime a b := by
  constructor
  -- ‚ä¢ gcd a b = 1 ‚Üí IsCoprime a b
  ¬∑ intro hg
    -- ‚ä¢ IsCoprime a b
    obtain ‚ü®ua, -, ha‚ü© := exists_unit_of_abs a
    -- ‚ä¢ IsCoprime a b
    obtain ‚ü®ub, -, hb‚ü© := exists_unit_of_abs b
    -- ‚ä¢ IsCoprime a b
    use Nat.gcdA (Int.natAbs a) (Int.natAbs b) * ua, Nat.gcdB (Int.natAbs a) (Int.natAbs b) * ub
    -- ‚ä¢ Nat.gcdA (natAbs a) (natAbs b) * ua * a + Nat.gcdB (natAbs a) (natAbs b) * u ‚Ä¶
    rw [mul_assoc, ‚Üê ha, mul_assoc, ‚Üê hb, mul_comm, mul_comm _ (Int.natAbs b : ‚Ñ§), ‚Üê
      Nat.gcd_eq_gcd_ab, ‚Üê gcd_eq_natAbs, hg, Int.ofNat_one]
  ¬∑ rintro ‚ü®r, s, h‚ü©
    -- ‚ä¢ gcd a b = 1
    by_contra hg
    -- ‚ä¢ False
    obtain ‚ü®p, ‚ü®hp, ha, hb‚ü©‚ü© := Nat.Prime.not_coprime_iff_dvd.mp hg
    -- ‚ä¢ False
    apply Nat.Prime.not_dvd_one hp
    -- ‚ä¢ p ‚à£ 1
    rw [‚Üê coe_nat_dvd, Int.ofNat_one, ‚Üê h]
    -- ‚ä¢ ‚Üëp ‚à£ r * a + s * b
    exact dvd_add ((coe_nat_dvd_left.mpr ha).mul_left _) ((coe_nat_dvd_left.mpr hb).mul_left _)
    -- üéâ no goals
#align int.gcd_eq_one_iff_coprime Int.gcd_eq_one_iff_coprime

theorem coprime_iff_nat_coprime {a b : ‚Ñ§} : IsCoprime a b ‚Üî Nat.coprime a.natAbs b.natAbs := by
  rw [‚Üê gcd_eq_one_iff_coprime, Nat.coprime_iff_gcd_eq_one, gcd_eq_natAbs]
  -- üéâ no goals
#align int.coprime_iff_nat_coprime Int.coprime_iff_nat_coprime

/-- If `gcd a (m * n) ‚â† 1`, then `gcd a m ‚â† 1` or `gcd a n ‚â† 1`. -/
theorem gcd_ne_one_iff_gcd_mul_right_ne_one {a : ‚Ñ§} {m n : ‚Ñï} :
    a.gcd (m * n) ‚â† 1 ‚Üî a.gcd m ‚â† 1 ‚à® a.gcd n ‚â† 1 := by
  simp only [gcd_eq_one_iff_coprime, ‚Üê not_and_or, not_iff_not, IsCoprime.mul_right_iff]
  -- üéâ no goals
#align int.gcd_ne_one_iff_gcd_mul_right_ne_one Int.gcd_ne_one_iff_gcd_mul_right_ne_one

set_option linter.deprecated false in -- trans_rel_left
/-- If `gcd a (m * n) = 1`, then `gcd a m = 1`. -/
theorem gcd_eq_one_of_gcd_mul_right_eq_one_left {a : ‚Ñ§} {m n : ‚Ñï} (h : a.gcd (m * n) = 1) :
    a.gcd m = 1 :=
  Nat.dvd_one.mp <| trans_rel_left _ (gcd_dvd_gcd_mul_right_right a m n) h
#align int.gcd_eq_one_of_gcd_mul_right_eq_one_left Int.gcd_eq_one_of_gcd_mul_right_eq_one_left

set_option linter.deprecated false in -- trans_rel_left
/-- If `gcd a (m * n) = 1`, then `gcd a n = 1`. -/
theorem gcd_eq_one_of_gcd_mul_right_eq_one_right {a : ‚Ñ§} {m n : ‚Ñï} (h : a.gcd (m * n) = 1) :
    a.gcd n = 1 :=
  Nat.dvd_one.mp <| trans_rel_left _ (gcd_dvd_gcd_mul_left_right a n m) h
#align int.gcd_eq_one_of_gcd_mul_right_eq_one_right Int.gcd_eq_one_of_gcd_mul_right_eq_one_right

theorem sq_of_gcd_eq_one {a b c : ‚Ñ§} (h : Int.gcd a b = 1) (heq : a * b = c ^ 2) :
    ‚àÉ a0 : ‚Ñ§, a = a0 ^ 2 ‚à® a = -a0 ^ 2 := by
  have h' : IsUnit (GCDMonoid.gcd a b) := by
    rw [‚Üê coe_gcd, h, Int.ofNat_one]
    exact isUnit_one
  obtain ‚ü®d, ‚ü®u, hu‚ü©‚ü© := exists_associated_pow_of_mul_eq_pow h' heq
  -- ‚ä¢ ‚àÉ a0, a = a0 ^ 2 ‚à® a = -a0 ^ 2
  use d
  -- ‚ä¢ a = d ^ 2 ‚à® a = -d ^ 2
  rw [‚Üê hu]
  -- ‚ä¢ d ^ 2 * ‚Üëu = d ^ 2 ‚à® d ^ 2 * ‚Üëu = -d ^ 2
  cases' Int.units_eq_one_or u with hu' hu' <;>
  -- ‚ä¢ d ^ 2 * ‚Üëu = d ^ 2 ‚à® d ^ 2 * ‚Üëu = -d ^ 2
    ¬∑ rw [hu']
      -- ‚ä¢ d ^ 2 * ‚Üë1 = d ^ 2 ‚à® d ^ 2 * ‚Üë1 = -d ^ 2
      -- ‚ä¢ d ^ 2 * ‚Üë(-1) = d ^ 2 ‚à® d ^ 2 * ‚Üë(-1) = -d ^ 2
      -- üéâ no goals
      simp
      -- üéâ no goals
#align int.sq_of_gcd_eq_one Int.sq_of_gcd_eq_one

theorem sq_of_coprime {a b c : ‚Ñ§} (h : IsCoprime a b) (heq : a * b = c ^ 2) :
    ‚àÉ a0 : ‚Ñ§, a = a0 ^ 2 ‚à® a = -a0 ^ 2 :=
  sq_of_gcd_eq_one (gcd_eq_one_iff_coprime.mpr h) heq
#align int.sq_of_coprime Int.sq_of_coprime

theorem natAbs_euclideanDomain_gcd (a b : ‚Ñ§) :
    Int.natAbs (EuclideanDomain.gcd a b) = Int.gcd a b := by
  apply Nat.dvd_antisymm <;> rw [‚Üê Int.coe_nat_dvd]
  -- ‚ä¢ natAbs (EuclideanDomain.gcd a b) ‚à£ gcd a b
                             -- ‚ä¢ ‚Üë(natAbs (EuclideanDomain.gcd a b)) ‚à£ ‚Üë(gcd a b)
                             -- ‚ä¢ ‚Üë(gcd a b) ‚à£ ‚Üë(natAbs (EuclideanDomain.gcd a b))
  ¬∑ rw [Int.natAbs_dvd]
    -- ‚ä¢ EuclideanDomain.gcd a b ‚à£ ‚Üë(gcd a b)
    exact Int.dvd_gcd (EuclideanDomain.gcd_dvd_left _ _) (EuclideanDomain.gcd_dvd_right _ _)
    -- üéâ no goals
  ¬∑ rw [Int.dvd_natAbs]
    -- ‚ä¢ ‚Üë(gcd a b) ‚à£ EuclideanDomain.gcd a b
    exact EuclideanDomain.dvd_gcd (Int.gcd_dvd_left _ _) (Int.gcd_dvd_right _ _)
    -- üéâ no goals
#align int.nat_abs_euclidean_domain_gcd Int.natAbs_euclideanDomain_gcd

end Int

/-- Maps an associate class of integers consisting of `-n, n` to `n : ‚Ñï` -/
def associatesIntEquivNat : Associates ‚Ñ§ ‚âÉ ‚Ñï := by
  refine' ‚ü®fun z => z.out.natAbs, fun n => Associates.mk n, _, _‚ü©
  -- ‚ä¢ Function.LeftInverse (fun n => Associates.mk ‚Üën) fun z => Int.natAbs (Associ ‚Ä¶
  ¬∑ refine' fun a =>
      Quotient.inductionOn a fun a =>
        Associates.mk_eq_mk_iff_associated.2 <| Associated.symm <| ‚ü®normUnit a, _‚ü©
    simp [Int.abs_eq_normalize]
    -- üéâ no goals
  ¬∑ intro n
    -- ‚ä¢ (fun z => Int.natAbs (Associates.out z)) ((fun n => Associates.mk ‚Üën) n) = n
    dsimp
    -- ‚ä¢ Int.natAbs (‚Üën * ‚Üë(normUnit ‚Üën)) = n
    rw [‚Üê normalize_apply, ‚Üê Int.abs_eq_normalize, Int.natAbs_abs, Int.natAbs_ofNat]
    -- üéâ no goals
#align associates_int_equiv_nat associatesIntEquivNat

theorem Int.Prime.dvd_mul {m n : ‚Ñ§} {p : ‚Ñï} (hp : Nat.Prime p) (h : (p : ‚Ñ§) ‚à£ m * n) :
    p ‚à£ m.natAbs ‚à® p ‚à£ n.natAbs := by
  rwa [‚Üê hp.dvd_mul, ‚Üê Int.natAbs_mul, ‚ÜêInt.coe_nat_dvd_left]
  -- üéâ no goals
#align int.prime.dvd_mul Int.Prime.dvd_mul

theorem Int.Prime.dvd_mul' {m n : ‚Ñ§} {p : ‚Ñï} (hp : Nat.Prime p) (h : (p : ‚Ñ§) ‚à£ m * n) :
    (p : ‚Ñ§) ‚à£ m ‚à® (p : ‚Ñ§) ‚à£ n := by
  rw [Int.coe_nat_dvd_left, Int.coe_nat_dvd_left]
  -- ‚ä¢ p ‚à£ natAbs m ‚à® p ‚à£ natAbs n
  exact Int.Prime.dvd_mul hp h
  -- üéâ no goals
#align int.prime.dvd_mul' Int.Prime.dvd_mul'

theorem Int.Prime.dvd_pow {n : ‚Ñ§} {k p : ‚Ñï} (hp : Nat.Prime p) (h : (p : ‚Ñ§) ‚à£ n ^ k) :
    p ‚à£ n.natAbs := by
  rw [Int.coe_nat_dvd_left, Int.natAbs_pow] at h
  -- ‚ä¢ p ‚à£ natAbs n
  exact hp.dvd_of_dvd_pow h
  -- üéâ no goals
#align int.prime.dvd_pow Int.Prime.dvd_pow

theorem Int.Prime.dvd_pow' {n : ‚Ñ§} {k p : ‚Ñï} (hp : Nat.Prime p) (h : (p : ‚Ñ§) ‚à£ n ^ k) :
    (p : ‚Ñ§) ‚à£ n := by
  rw [Int.coe_nat_dvd_left]
  -- ‚ä¢ p ‚à£ natAbs n
  exact Int.Prime.dvd_pow hp h
  -- üéâ no goals
#align int.prime.dvd_pow' Int.Prime.dvd_pow'

theorem prime_two_or_dvd_of_dvd_two_mul_pow_self_two {m : ‚Ñ§} {p : ‚Ñï} (hp : Nat.Prime p)
    (h : (p : ‚Ñ§) ‚à£ 2 * m ^ 2) : p = 2 ‚à® p ‚à£ Int.natAbs m := by
  cases' Int.Prime.dvd_mul hp h with hp2 hpp
  -- ‚ä¢ p = 2 ‚à® p ‚à£ Int.natAbs m
  ¬∑ apply Or.intro_left
    -- ‚ä¢ p = 2
    exact le_antisymm (Nat.le_of_dvd zero_lt_two hp2) (Nat.Prime.two_le hp)
    -- üéâ no goals
  ¬∑ apply Or.intro_right
    -- ‚ä¢ p ‚à£ Int.natAbs m
    rw [sq, Int.natAbs_mul] at hpp
    -- ‚ä¢ p ‚à£ Int.natAbs m
    exact (or_self_iff _).mp ((Nat.Prime.dvd_mul hp).mp hpp)
    -- üéâ no goals
#align prime_two_or_dvd_of_dvd_two_mul_pow_self_two prime_two_or_dvd_of_dvd_two_mul_pow_self_two

theorem Int.exists_prime_and_dvd {n : ‚Ñ§} (hn : n.natAbs ‚â† 1) : ‚àÉ p, Prime p ‚àß p ‚à£ n := by
  obtain ‚ü®p, pp, pd‚ü© := Nat.exists_prime_and_dvd hn
  -- ‚ä¢ ‚àÉ p, Prime p ‚àß p ‚à£ n
  exact ‚ü®p, Nat.prime_iff_prime_int.mp pp, Int.coe_nat_dvd_left.mpr pd‚ü©
  -- üéâ no goals
#align int.exists_prime_and_dvd Int.exists_prime_and_dvd

open UniqueFactorizationMonoid

theorem Nat.factors_eq {n : ‚Ñï} : normalizedFactors n = n.factors := by
  cases n
  -- ‚ä¢ normalizedFactors zero = ‚Üë(factors zero)
  case zero => simp
  -- ‚ä¢ normalizedFactors (succ n‚úù) = ‚Üë(factors (succ n‚úù))
  -- üéâ no goals
  case succ n =>
    rw [‚Üê Multiset.rel_eq, ‚Üê associated_eq_eq]
    apply UniqueFactorizationMonoid.factors_unique irreducible_of_normalized_factor _
    ¬∑ rw [Multiset.coe_prod, Nat.prod_factors n.succ_ne_zero]
      apply normalizedFactors_prod (Nat.succ_ne_zero _)
    ¬∑ intro x hx
      rw [Nat.irreducible_iff_prime, ‚Üê Nat.prime_iff]
      exact Nat.prime_of_mem_factors hx
#align nat.factors_eq Nat.factors_eq

theorem Nat.factors_multiset_prod_of_irreducible {s : Multiset ‚Ñï}
    (h : ‚àÄ x : ‚Ñï, x ‚àà s ‚Üí Irreducible x) : normalizedFactors s.prod = s := by
  rw [‚Üê Multiset.rel_eq, ‚Üê associated_eq_eq]
  -- ‚ä¢ Multiset.Rel (fun x x_1 => Associated x x_1) (normalizedFactors (Multiset.pr ‚Ä¶
  apply
    UniqueFactorizationMonoid.factors_unique irreducible_of_normalized_factor h
      (normalizedFactors_prod _)
  rw [Ne.def, Multiset.prod_eq_zero_iff]
  -- ‚ä¢ ¬¨0 ‚àà s
  intro con
  -- ‚ä¢ False
  exact not_irreducible_zero (h 0 con)
  -- üéâ no goals
#align nat.factors_multiset_prod_of_irreducible Nat.factors_multiset_prod_of_irreducible

namespace multiplicity

theorem finite_int_iff_natAbs_finite {a b : ‚Ñ§} : Finite a b ‚Üî Finite a.natAbs b.natAbs := by
  simp only [finite_def, ‚Üê Int.natAbs_dvd_natAbs, Int.natAbs_pow]
  -- üéâ no goals
#align multiplicity.finite_int_iff_nat_abs_finite multiplicity.finite_int_iff_natAbs_finite

theorem finite_int_iff {a b : ‚Ñ§} : Finite a b ‚Üî a.natAbs ‚â† 1 ‚àß b ‚â† 0 := by
  rw [finite_int_iff_natAbs_finite, finite_nat_iff, pos_iff_ne_zero, Int.natAbs_ne_zero]
  -- üéâ no goals
#align multiplicity.finite_int_iff multiplicity.finite_int_iff

instance decidableNat : DecidableRel fun a b : ‚Ñï => (multiplicity a b).Dom := fun _ _ =>
  decidable_of_iff _ finite_nat_iff.symm
#align multiplicity.decidable_nat multiplicity.decidableNat

instance decidableInt : DecidableRel fun a b : ‚Ñ§ => (multiplicity a b).Dom := fun _ _ =>
  decidable_of_iff _ finite_int_iff.symm
#align multiplicity.decidable_int multiplicity.decidableInt

end multiplicity

theorem induction_on_primes {P : ‚Ñï ‚Üí Prop} (h‚ÇÄ : P 0) (h‚ÇÅ : P 1)
    (h : ‚àÄ p a : ‚Ñï, p.Prime ‚Üí P a ‚Üí P (p * a)) (n : ‚Ñï) : P n := by
  apply UniqueFactorizationMonoid.induction_on_prime
  ¬∑ exact h‚ÇÄ
    -- üéâ no goals
  ¬∑ intro n h
    -- ‚ä¢ P n
    rw [Nat.isUnit_iff.1 h]
    -- ‚ä¢ P 1
    exact h‚ÇÅ
    -- üéâ no goals
  ¬∑ intro a p _ hp ha
    -- ‚ä¢ P (p * a)
    exact h p a hp.nat_prime ha
    -- üéâ no goals
#align induction_on_primes induction_on_primes

theorem Int.associated_natAbs (k : ‚Ñ§) : Associated k k.natAbs :=
  associated_of_dvd_dvd (Int.coe_nat_dvd_right.mpr dvd_rfl) (Int.natAbs_dvd.mpr dvd_rfl)
#align int.associated_nat_abs Int.associated_natAbs

theorem Int.prime_iff_natAbs_prime {k : ‚Ñ§} : Prime k ‚Üî Nat.Prime k.natAbs :=
  (Int.associated_natAbs k).prime_iff.trans Nat.prime_iff_prime_int.symm
#align int.prime_iff_nat_abs_prime Int.prime_iff_natAbs_prime

theorem Int.associated_iff_natAbs {a b : ‚Ñ§} : Associated a b ‚Üî a.natAbs = b.natAbs := by
  rw [‚Üê dvd_dvd_iff_associated, ‚Üê Int.natAbs_dvd_natAbs, ‚Üê Int.natAbs_dvd_natAbs,
    dvd_dvd_iff_associated]
  exact associated_iff_eq
  -- üéâ no goals
#align int.associated_iff_nat_abs Int.associated_iff_natAbs

theorem Int.associated_iff {a b : ‚Ñ§} : Associated a b ‚Üî a = b ‚à® a = -b := by
  rw [Int.associated_iff_natAbs]
  -- ‚ä¢ natAbs a = natAbs b ‚Üî a = b ‚à® a = -b
  exact Int.natAbs_eq_natAbs_iff
  -- üéâ no goals
#align int.associated_iff Int.associated_iff

namespace Int

theorem zmultiples_natAbs (a : ‚Ñ§) :
    AddSubgroup.zmultiples (a.natAbs : ‚Ñ§) = AddSubgroup.zmultiples a :=
  le_antisymm (AddSubgroup.zmultiples_le_of_mem (mem_zmultiples_iff.mpr (dvd_natAbs.mpr dvd_rfl)))
    (AddSubgroup.zmultiples_le_of_mem (mem_zmultiples_iff.mpr (natAbs_dvd.mpr dvd_rfl)))
#align int.zmultiples_nat_abs Int.zmultiples_natAbs

theorem span_natAbs (a : ‚Ñ§) : Ideal.span ({(a.natAbs : ‚Ñ§)} : Set ‚Ñ§) = Ideal.span {a} := by
  rw [Ideal.span_singleton_eq_span_singleton]
  -- ‚ä¢ Associated (‚Üë(natAbs a)) a
  exact (associated_natAbs _).symm
  -- üéâ no goals
#align int.span_nat_abs Int.span_natAbs

section bit
set_option linter.deprecated false

theorem eq_pow_of_mul_eq_pow_bit1_left {a b c : ‚Ñ§} (hab : IsCoprime a b) {k : ‚Ñï}
    (h : a * b = c ^ bit1 k) : ‚àÉ d, a = d ^ bit1 k := by
  obtain ‚ü®d, hd‚ü© := exists_associated_pow_of_mul_eq_pow' hab h
  -- ‚ä¢ ‚àÉ d, a = d ^ bit1 k
  replace hd := hd.symm
  -- ‚ä¢ ‚àÉ d, a = d ^ bit1 k
  rw [associated_iff_natAbs, natAbs_eq_natAbs_iff, ‚Üê neg_pow_bit1] at hd
  -- ‚ä¢ ‚àÉ d, a = d ^ bit1 k
  obtain rfl | rfl := hd <;> exact ‚ü®_, rfl‚ü©
  -- ‚ä¢ ‚àÉ d_1, d ^ bit1 k = d_1 ^ bit1 k
                             -- üéâ no goals
                             -- üéâ no goals
#align int.eq_pow_of_mul_eq_pow_bit1_left Int.eq_pow_of_mul_eq_pow_bit1_left

theorem eq_pow_of_mul_eq_pow_bit1_right {a b c : ‚Ñ§} (hab : IsCoprime a b) {k : ‚Ñï}
    (h : a * b = c ^ bit1 k) : ‚àÉ d, b = d ^ bit1 k :=
  eq_pow_of_mul_eq_pow_bit1_left hab.symm (by rwa [mul_comm] at h)
                                              -- üéâ no goals
#align int.eq_pow_of_mul_eq_pow_bit1_right Int.eq_pow_of_mul_eq_pow_bit1_right

theorem eq_pow_of_mul_eq_pow_bit1 {a b c : ‚Ñ§} (hab : IsCoprime a b) {k : ‚Ñï}
    (h : a * b = c ^ bit1 k) : (‚àÉ d, a = d ^ bit1 k) ‚àß ‚àÉ e, b = e ^ bit1 k :=
  ‚ü®eq_pow_of_mul_eq_pow_bit1_left hab h, eq_pow_of_mul_eq_pow_bit1_right hab h‚ü©
#align int.eq_pow_of_mul_eq_pow_bit1 Int.eq_pow_of_mul_eq_pow_bit1

end bit

end Int
