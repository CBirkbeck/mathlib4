/-
Copyright (c) 2022 Xavier Roblot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Xavier Roblot
-/
import Mathlib.Analysis.Complex.Basic
import Mathlib.FieldTheory.IntermediateField
import Mathlib.Topology.Algebra.UniformRing

#align_import topology.instances.complex from "leanprover-community/mathlib"@"f0c8bf9245297a541f468be517f1bde6195105e9"

/-!
# Some results about the topology of ‚ÑÇ
-/


section ComplexSubfield

open Complex Set

open ComplexConjugate

/-- The only closed subfields of `‚ÑÇ` are `‚Ñù` and `‚ÑÇ`. -/
theorem Complex.subfield_eq_of_closed {K : Subfield ‚ÑÇ} (hc : IsClosed (K : Set ‚ÑÇ)) :
    K = ofReal.fieldRange ‚à® K = ‚ä§ := by
  suffices range (ofReal' : ‚Ñù ‚Üí ‚ÑÇ) ‚äÜ K by
    rw [range_subset_iff, ‚Üê coe_algebraMap] at this
    have :=
      (Subalgebra.isSimpleOrder_of_finrank finrank_real_complex).eq_bot_or_eq_top
        (Subfield.toIntermediateField K this).toSubalgebra
    simp_rw [‚Üê SetLike.coe_set_eq] at this ‚ä¢
    convert this using 2
    simp only [RingHom.coe_fieldRange, Algebra.coe_bot, coe_algebraMap]
    rfl
  suffices range (ofReal' : ‚Ñù ‚Üí ‚ÑÇ) ‚äÜ closure (Set.range ((ofReal' : ‚Ñù ‚Üí ‚ÑÇ) ‚àò ((‚Üë) : ‚Ñö ‚Üí ‚Ñù))) by
    refine' subset_trans this _
    rw [‚Üê IsClosed.closure_eq hc]
    apply closure_mono
    rintro _ ‚ü®_, rfl‚ü©
    simp only [Function.comp_apply, ofReal_rat_cast, SetLike.mem_coe, SubfieldClass.coe_rat_mem]
  nth_rw 1 [range_comp]
  -- ‚ä¢ range ofReal' ‚äÜ closure (ofReal' '' range Rat.cast)
  refine' subset_trans _ (image_closure_subset_closure_image continuous_ofReal)
  -- ‚ä¢ range ofReal' ‚äÜ ofReal' '' closure (range Rat.cast)
  rw [DenseRange.closure_range Rat.denseEmbedding_coe_real.dense]
  -- ‚ä¢ range ofReal' ‚äÜ ofReal' '' univ
  simp only [image_univ]
  -- ‚ä¢ range ofReal' ‚äÜ range ofReal'
  rfl
  -- üéâ no goals
#align complex.subfield_eq_of_closed Complex.subfield_eq_of_closed

/-- Let `K` a subfield of `‚ÑÇ` and let `œà : K ‚Üí+* ‚ÑÇ` a ring homomorphism. Assume that `œà` is uniform
continuous, then `œà` is either the inclusion map or the composition of the inclusion map with the
complex conjugation. -/
theorem Complex.uniformContinuous_ringHom_eq_id_or_conj (K : Subfield ‚ÑÇ) {œà : K ‚Üí+* ‚ÑÇ}
    (hc : UniformContinuous œà) : œà.toFun = K.subtype ‚à® œà.toFun = conj ‚àò K.subtype := by
  letI : TopologicalDivisionRing ‚ÑÇ := TopologicalDivisionRing.mk
  -- ‚ä¢ œà.toFun = ‚Üë(Subfield.subtype K) ‚à® œà.toFun = ‚Üë(starRingEnd ‚ÑÇ) ‚àò ‚Üë(Subfield.su ‚Ä¶
  letI : TopologicalRing K.topologicalClosure :=
    Subring.instTopologicalRing K.topologicalClosure.toSubring
  set Œπ : K ‚Üí K.topologicalClosure := ‚áë(Subfield.inclusion K.le_topologicalClosure)
  -- ‚ä¢ œà.toFun = ‚Üë(Subfield.subtype K) ‚à® œà.toFun = ‚Üë(starRingEnd ‚ÑÇ) ‚àò ‚Üë(Subfield.su ‚Ä¶
  have ui : UniformInducing Œπ :=
    ‚ü®by
      erw [uniformity_subtype, uniformity_subtype, Filter.comap_comap]
      congr ‚ü©
  let di := ui.denseInducing (?_ : DenseRange Œπ)
  -- ‚ä¢ œà.toFun = ‚Üë(Subfield.subtype K) ‚à® œà.toFun = ‚Üë(starRingEnd ‚ÑÇ) ‚àò ‚Üë(Subfield.su ‚Ä¶
  ¬∑ -- extœà : closure(K) ‚Üí+* ‚ÑÇ is the extension of œà : K ‚Üí+* ‚ÑÇ
    let extœà := DenseInducing.extendRingHom ui di.dense hc
    -- ‚ä¢ œà.toFun = ‚Üë(Subfield.subtype K) ‚à® œà.toFun = ‚Üë(starRingEnd ‚ÑÇ) ‚àò ‚Üë(Subfield.su ‚Ä¶
    haveI hœà := (uniformContinuous_uniformly_extend ui di.dense hc).continuous
    -- ‚ä¢ œà.toFun = ‚Üë(Subfield.subtype K) ‚à® œà.toFun = ‚Üë(starRingEnd ‚ÑÇ) ‚àò ‚Üë(Subfield.su ‚Ä¶
    cases' Complex.subfield_eq_of_closed (Subfield.isClosed_topologicalClosure K) with h h
    -- ‚ä¢ œà.toFun = ‚Üë(Subfield.subtype K) ‚à® œà.toFun = ‚Üë(starRingEnd ‚ÑÇ) ‚àò ‚Üë(Subfield.su ‚Ä¶
    ¬∑ left
      -- ‚ä¢ œà.toFun = ‚Üë(Subfield.subtype K)
      let j := RingEquiv.subfieldCongr h
      -- ‚ä¢ œà.toFun = ‚Üë(Subfield.subtype K)
      -- œà‚ÇÅ is the continuous ring hom `‚Ñù ‚Üí+* ‚ÑÇ` constructed from `j : closure (K) ‚âÉ+* ‚Ñù`
      -- and `extœà : closure (K) ‚Üí+* ‚ÑÇ`
      let œà‚ÇÅ := RingHom.comp extœà (RingHom.comp j.symm.toRingHom ofReal.rangeRestrict)
      -- ‚ä¢ œà.toFun = ‚Üë(Subfield.subtype K)
      -- porting note: was `by continuity!` and was used inline
      have hœà‚ÇÅ : Continuous œà‚ÇÅ := by
        simpa only [RingHom.coe_comp] using hœà.comp ((continuous_algebraMap ‚Ñù ‚ÑÇ).subtype_mk _)
      ext1 x
      -- ‚ä¢ OneHom.toFun (‚Üë‚Üëœà) x = ‚Üë(Subfield.subtype K) x
      rsuffices ‚ü®r, hr‚ü© : ‚àÉ r : ‚Ñù, ofReal.rangeRestrict r = j (Œπ x)
      -- ‚ä¢ OneHom.toFun (‚Üë‚Üëœà) x = ‚Üë(Subfield.subtype K) x
      ¬∑ have :=
          RingHom.congr_fun (ringHom_eq_ofReal_of_continuous hœà‚ÇÅ) r
        rw [RingHom.comp_apply, RingHom.comp_apply, hr, RingEquiv.toRingHom_eq_coe] at this
        -- ‚ä¢ OneHom.toFun (‚Üë‚Üëœà) x = ‚Üë(Subfield.subtype K) x
        convert this using 1
        -- ‚ä¢ OneHom.toFun (‚Üë‚Üëœà) x = ‚Üëextœà (‚Üë‚Üë(RingEquiv.symm j) (‚Üëj (Œπ x)))
        ¬∑ exact (DenseInducing.extend_eq di hc.continuous _).symm
          -- üéâ no goals
        ¬∑ rw [‚Üê ofReal.coe_rangeRestrict, hr]
          -- ‚ä¢ ‚Üë(Subfield.subtype K) x = ‚Üë(‚Üëj (Œπ x))
          rfl
          -- üéâ no goals
      obtain ‚ü®r, hr‚ü© := SetLike.coe_mem (j (Œπ x))
      -- ‚ä¢ ‚àÉ r, ‚Üë(RingHom.rangeRestrict ofReal) r = ‚Üëj (Œπ x)
      exact ‚ü®r, Subtype.ext hr‚ü©
      -- üéâ no goals
    ¬∑ -- œà‚ÇÅ is the continuous ring hom `‚ÑÇ ‚Üí+* ‚ÑÇ` constructed from `closure (K) ‚âÉ+* ‚ÑÇ`
      -- and `extœà : closure (K) ‚Üí+* ‚ÑÇ`
      let œà‚ÇÅ :=
        RingHom.comp extœà
          (RingHom.comp (RingEquiv.subfieldCongr h).symm.toRingHom
            (@Subfield.topEquiv ‚ÑÇ _).symm.toRingHom)
      -- porting note: was `by continuity!` and was used inline
      have hœà‚ÇÅ : Continuous œà‚ÇÅ := by
        simpa only [RingHom.coe_comp] using hœà.comp (continuous_id.subtype_mk _)
      cases' ringHom_eq_id_or_conj_of_continuous hœà‚ÇÅ with h h
      -- ‚ä¢ œà.toFun = ‚Üë(Subfield.subtype K) ‚à® œà.toFun = ‚Üë(starRingEnd ‚ÑÇ) ‚àò ‚Üë(Subfield.su ‚Ä¶
      ¬∑ left
        -- ‚ä¢ œà.toFun = ‚Üë(Subfield.subtype K)
        ext1 z
        -- ‚ä¢ OneHom.toFun (‚Üë‚Üëœà) z = ‚Üë(Subfield.subtype K) z
        convert RingHom.congr_fun h z using 1
        -- ‚ä¢ OneHom.toFun (‚Üë‚Üëœà) z = ‚Üëœà‚ÇÅ ‚Üëz
        exact (DenseInducing.extend_eq di hc.continuous z).symm
        -- üéâ no goals
      ¬∑ right
        -- ‚ä¢ œà.toFun = ‚Üë(starRingEnd ‚ÑÇ) ‚àò ‚Üë(Subfield.subtype K)
        ext1 z
        -- ‚ä¢ OneHom.toFun (‚Üë‚Üëœà) z = (‚Üë(starRingEnd ‚ÑÇ) ‚àò ‚Üë(Subfield.subtype K)) z
        convert RingHom.congr_fun h z using 1
        -- ‚ä¢ OneHom.toFun (‚Üë‚Üëœà) z = ‚Üëœà‚ÇÅ ‚Üëz
        exact (DenseInducing.extend_eq di hc.continuous z).symm
        -- üéâ no goals
  ¬∑ let j : { x // x ‚àà closure (id '' { x | (K : Set ‚ÑÇ) x }) } ‚Üí (K.topologicalClosure : Set ‚ÑÇ) :=
      fun x =>
      ‚ü®x, by
        convert x.prop
        simp only [id.def, Set.image_id']
        rfl ‚ü©
    convert DenseRange.comp (Function.Surjective.denseRange _)
        (DenseEmbedding.subtype denseEmbedding_id (K : Set ‚ÑÇ)).dense (by continuity : Continuous j)
    rintro ‚ü®y, hy‚ü©
    -- ‚ä¢ ‚àÉ a, j a = { val := y, property := hy }
    use
      ‚ü®y, by
        convert hy
        simp only [id.def, Set.image_id']
        rfl ‚ü©
#align complex.uniform_continuous_ring_hom_eq_id_or_conj Complex.uniformContinuous_ringHom_eq_id_or_conj

end ComplexSubfield
