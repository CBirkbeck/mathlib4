/-
Copyright (c) 2024 Kalle Kyt√∂l√§. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kalle Kyt√∂l√§
-/
import Mathlib.Data.ENat.Basic
import Mathlib.Topology.Instances.Discrete
import Mathlib.Topology.Order.T5

/-!
# Topology on the extended natural numbers
-/

noncomputable section

open Set Filter Metric Function
open scoped Topology ENNReal NNReal ENat

variable {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*}

namespace ENat

variable {a b c d : ‚Ñï‚àû} {r p q : ‚Ñï} {x y z : ‚Ñï‚àû} {s : Set ‚Ñï‚àû}

section TopologicalSpace

open TopologicalSpace

/-- Topology on `‚Ñï‚àû`.

Note: this is different from the `EMetricSpace` topology. The `EMetricSpace` topology has
`IsOpen {‚àû}`, while all neighborhoods of `‚àû` in `‚Ñï‚àû` contain infinite intervals. -/
instance : TopologicalSpace ‚Ñï‚àû := Preorder.topology ‚Ñï‚àû

instance : OrderTopology ‚Ñï‚àû := ‚ü®rfl‚ü©

example : OrderClosedTopology ‚Ñï‚àû := by infer_instance

-- short-circuit type class inference
instance : T2Space ‚Ñï‚àû := inferInstance
instance : T5Space ‚Ñï‚àû := inferInstance
instance : T4Space ‚Ñï‚àû := inferInstance

theorem embedding_coe : Embedding ((‚Üë) : ‚Ñï ‚Üí ‚Ñï‚àû) :=
  Nat.strictMono_cast.embedding_of_ordConnected <| by rw [range_nat_cast]; exact ordConnected_Iio

theorem isOpen_ne_top : IsOpen {a : ‚Ñï‚àû | a ‚â† ‚ä§} := isOpen_ne

theorem isOpen_Ico_zero : IsOpen (Ico 0 b) := by rw [ENat.Ico_eq_Iio]; exact isOpen_Iio

theorem openEmbedding_coe : OpenEmbedding ((‚Üë) : ‚Ñï ‚Üí ‚Ñï‚àû) :=
  ‚ü®embedding_coe, by rw [range_nat_cast]; exact isOpen_Iio‚ü©

theorem coe_range_mem_nhds : range ((‚Üë) : ‚Ñï ‚Üí ‚Ñï‚àû) ‚àà ùìù (r : ‚Ñï‚àû) :=
  IsOpen.mem_nhds openEmbedding_coe.isOpen_range <| mem_range_self _

@[fun_prop] theorem continuous_coe : Continuous ((‚Üë) : ‚Ñï ‚Üí ‚Ñï‚àû) := embedding_coe.continuous

theorem continuous_coe_iff {Œ±} [TopologicalSpace Œ±] {f : Œ± ‚Üí ‚Ñï} :
    (Continuous fun a ‚Ü¶ (f a : ‚Ñï‚àû)) ‚Üî Continuous f :=
  embedding_coe.continuous_iff.symm

theorem nhds_coe {r : ‚Ñï} : ùìù (r : ‚Ñï‚àû) = (ùìù r).map (‚Üë) :=
  (openEmbedding_coe.map_nhds_eq r).symm

theorem tendsto_nhds_coe_iff {Œ± : Type*} {l : Filter Œ±} {x : ‚Ñï} {f : ‚Ñï‚àû ‚Üí Œ±} :
    Tendsto f (ùìù ‚Üëx) l ‚Üî Tendsto (f ‚àò (‚Üë) : ‚Ñï ‚Üí Œ±) (ùìù x) l := by
  rw [nhds_coe, tendsto_map'_iff]

theorem continuousAt_coe_iff {Œ± : Type*} [TopologicalSpace Œ±] {x : ‚Ñï} {f : ‚Ñï‚àû ‚Üí Œ±} :
    ContinuousAt f ‚Üëx ‚Üî ContinuousAt (f ‚àò (‚Üë) : ‚Ñï ‚Üí Œ±) x :=
  tendsto_nhds_coe_iff

theorem nhds_coe_coe {r p : ‚Ñï} :
    ùìù ((r : ‚Ñï‚àû), (p : ‚Ñï‚àû)) = (ùìù (r, p)).map fun p : ‚Ñï √ó ‚Ñï => (‚Üëp.1, ‚Üëp.2) :=
  ((openEmbedding_coe.prod openEmbedding_coe).map_nhds_eq (r, p)).symm

theorem tendsto_toNat {a : ‚Ñï‚àû} (ha : a ‚â† ‚ä§) :
    Tendsto ENat.toNat (ùìù a) (ùìù a.toNat) := by
  lift a to ‚Ñï using ha
  rw [nhds_coe, tendsto_map'_iff]
  exact tendsto_id

theorem eventuallyEq_of_toNat_eventuallyEq {l : Filter Œ±} {f g : Œ± ‚Üí ‚Ñï‚àû}
    (hfi : ‚àÄ·∂† x in l, f x ‚â† ‚ä§) (hgi : ‚àÄ·∂† x in l, g x ‚â† ‚ä§)
    (hfg : (fun x => (f x).toNat) =·∂†[l] fun x => (g x).toNat) : f =·∂†[l] g := by
  filter_upwards [hfi, hgi, hfg] with _ hfx hgx _
  rwa [‚Üê ENat.toNat_eq_toNat hfx hgx]

theorem continuousOn_toNat : ContinuousOn ENat.toNat {a | a ‚â† ‚ä§} := fun _a ha =>
  ContinuousAt.continuousWithinAt (tendsto_toNat ha)

lemma continuousAt_toNat (hx : x ‚â† ‚ä§) : ContinuousAt ENat.toNat x :=
  continuousOn_toNat.continuousAt (isOpen_ne_top.mem_nhds_iff.mpr hx)

theorem nhds_top : ùìù (‚ä§ : ‚Ñï‚àû) = ‚®Ö (a) (_ : a ‚â† ‚ä§), ùìü (Ioi a) :=
  nhds_top_order.trans <| by simp [lt_top_iff_ne_top, Ioi]

end TopologicalSpace

end ENat
