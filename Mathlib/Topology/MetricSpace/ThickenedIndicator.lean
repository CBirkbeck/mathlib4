/-
Copyright (c) 2022 Kalle Kyt√∂l√§. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kalle Kyt√∂l√§
-/
import Mathlib.Data.Real.ENNReal
import Mathlib.Topology.ContinuousFunction.Bounded
import Mathlib.Topology.MetricSpace.HausdorffDistance
import Mathlib.Order.Filter.IndicatorFunction

#align_import topology.metric_space.thickened_indicator from "leanprover-community/mathlib"@"f2ce6086713c78a7f880485f7917ea547a215982"

/-!
# Thickened indicators

This file is about thickened indicators of sets in (pseudo e)metric spaces. For a decreasing
sequence of thickening radii tending to 0, the thickened indicators of a closed set form a
decreasing pointwise converging approximation of the indicator function of the set, where the
members of the approximating sequence are nonnegative bounded continuous functions.

## Main definitions

 * `thickenedIndicatorAux Œ¥ E`: The `Œ¥`-thickened indicator of a set `E` as an
   unbundled `‚Ñù‚â•0‚àû`-valued function.
 * `thickenedIndicator Œ¥ E`: The `Œ¥`-thickened indicator of a set `E` as a bundled
   bounded continuous `‚Ñù‚â•0`-valued function.

## Main results

 * For a sequence of thickening radii tending to 0, the `Œ¥`-thickened indicators of a set `E` tend
   pointwise to the indicator of `closure E`.
   - `thickenedIndicatorAux_tendsto_indicator_closure`: The version is for the
     unbundled `‚Ñù‚â•0‚àû`-valued functions.
   - `thickenedIndicator_tendsto_indicator_closure`: The version is for the bundled `‚Ñù‚â•0`-valued
     bounded continuous functions.

-/


open Classical NNReal ENNReal Topology BoundedContinuousFunction

open NNReal ENNReal Set Metric EMetric Filter

noncomputable section thickenedIndicator

variable {Œ± : Type*} [PseudoEMetricSpace Œ±]

/-- The `Œ¥`-thickened indicator of a set `E` is the function that equals `1` on `E`
and `0` outside a `Œ¥`-thickening of `E` and interpolates (continuously) between
these values using `infEdist _ E`.

`thickenedIndicatorAux` is the unbundled `‚Ñù‚â•0‚àû`-valued function. See `thickenedIndicator`
for the (bundled) bounded continuous function with `‚Ñù‚â•0`-values. -/
def thickenedIndicatorAux (Œ¥ : ‚Ñù) (E : Set Œ±) : Œ± ‚Üí ‚Ñù‚â•0‚àû :=
  fun x : Œ± => (1 : ‚Ñù‚â•0‚àû) - infEdist x E / ENNReal.ofReal Œ¥
#align thickened_indicator_aux thickenedIndicatorAux

theorem continuous_thickenedIndicatorAux {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) :
    Continuous (thickenedIndicatorAux Œ¥ E) := by
  unfold thickenedIndicatorAux
  -- ‚ä¢ Continuous fun x => 1 - infEdist x E / ENNReal.ofReal Œ¥
  let f := fun x : Œ± => (‚ü®1, infEdist x E / ENNReal.ofReal Œ¥‚ü© : ‚Ñù‚â•0 √ó ‚Ñù‚â•0‚àû)
  -- ‚ä¢ Continuous fun x => 1 - infEdist x E / ENNReal.ofReal Œ¥
  let sub := fun p : ‚Ñù‚â•0 √ó ‚Ñù‚â•0‚àû => (p.1 : ‚Ñù‚â•0‚àû) - p.2
  -- ‚ä¢ Continuous fun x => 1 - infEdist x E / ENNReal.ofReal Œ¥
  rw [show (fun x : Œ± => (1 : ‚Ñù‚â•0‚àû) - infEdist x E / ENNReal.ofReal Œ¥) = sub ‚àò f by rfl]
  -- ‚ä¢ Continuous (sub ‚àò f)
  apply (@ENNReal.continuous_nnreal_sub 1).comp
  -- ‚ä¢ Continuous fun x => (f x).snd
  apply (ENNReal.continuous_div_const (ENNReal.ofReal Œ¥) _).comp continuous_infEdist
  -- ‚ä¢ ENNReal.ofReal Œ¥ ‚â† 0
  norm_num [Œ¥_pos]
  -- üéâ no goals
#align continuous_thickened_indicator_aux continuous_thickenedIndicatorAux

theorem thickenedIndicatorAux_le_one (Œ¥ : ‚Ñù) (E : Set Œ±) (x : Œ±) :
    thickenedIndicatorAux Œ¥ E x ‚â§ 1 := by
  apply @tsub_le_self _ _ _ _ (1 : ‚Ñù‚â•0‚àû)
  -- üéâ no goals
#align thickened_indicator_aux_le_one thickenedIndicatorAux_le_one

theorem thickenedIndicatorAux_lt_top {Œ¥ : ‚Ñù} {E : Set Œ±} {x : Œ±} :
    thickenedIndicatorAux Œ¥ E x < ‚àû :=
  lt_of_le_of_lt (thickenedIndicatorAux_le_one _ _ _) one_lt_top
#align thickened_indicator_aux_lt_top thickenedIndicatorAux_lt_top

theorem thickenedIndicatorAux_closure_eq (Œ¥ : ‚Ñù) (E : Set Œ±) :
    thickenedIndicatorAux Œ¥ (closure E) = thickenedIndicatorAux Œ¥ E := by
  simp_rw [thickenedIndicatorAux, infEdist_closure]
  -- üéâ no goals
#align thickened_indicator_aux_closure_eq thickenedIndicatorAux_closure_eq

theorem thickenedIndicatorAux_one (Œ¥ : ‚Ñù) (E : Set Œ±) {x : Œ±} (x_in_E : x ‚àà E) :
    thickenedIndicatorAux Œ¥ E x = 1 := by
  simp [thickenedIndicatorAux, infEdist_zero_of_mem x_in_E, tsub_zero]
  -- üéâ no goals
#align thickened_indicator_aux_one thickenedIndicatorAux_one

theorem thickenedIndicatorAux_one_of_mem_closure (Œ¥ : ‚Ñù) (E : Set Œ±) {x : Œ±}
    (x_mem : x ‚àà closure E) : thickenedIndicatorAux Œ¥ E x = 1 := by
  rw [‚Üê thickenedIndicatorAux_closure_eq, thickenedIndicatorAux_one Œ¥ (closure E) x_mem]
  -- üéâ no goals
#align thickened_indicator_aux_one_of_mem_closure thickenedIndicatorAux_one_of_mem_closure

theorem thickenedIndicatorAux_zero {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) {x : Œ±}
    (x_out : x ‚àâ thickening Œ¥ E) : thickenedIndicatorAux Œ¥ E x = 0 := by
  rw [thickening, mem_setOf_eq, not_lt] at x_out
  -- ‚ä¢ thickenedIndicatorAux Œ¥ E x = 0
  unfold thickenedIndicatorAux
  -- ‚ä¢ 1 - infEdist x E / ENNReal.ofReal Œ¥ = 0
  apply le_antisymm _ bot_le
  -- ‚ä¢ 1 - infEdist x E / ENNReal.ofReal Œ¥ ‚â§ ‚ä•
  have key := tsub_le_tsub
    (@rfl _ (1 : ‚Ñù‚â•0‚àû)).le (ENNReal.div_le_div x_out (@rfl _ (ENNReal.ofReal Œ¥ : ‚Ñù‚â•0‚àû)).le)
  rw [ENNReal.div_self (ne_of_gt (ENNReal.ofReal_pos.mpr Œ¥_pos)) ofReal_ne_top] at key
  -- ‚ä¢ 1 - infEdist x E / ENNReal.ofReal Œ¥ ‚â§ ‚ä•
  simpa using key
  -- üéâ no goals
#align thickened_indicator_aux_zero thickenedIndicatorAux_zero

theorem thickenedIndicatorAux_mono {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚Ñù} (hle : Œ¥‚ÇÅ ‚â§ Œ¥‚ÇÇ) (E : Set Œ±) :
    thickenedIndicatorAux Œ¥‚ÇÅ E ‚â§ thickenedIndicatorAux Œ¥‚ÇÇ E :=
  fun _ => tsub_le_tsub (@rfl ‚Ñù‚â•0‚àû 1).le (ENNReal.div_le_div rfl.le (ofReal_le_ofReal hle))
#align thickened_indicator_aux_mono thickenedIndicatorAux_mono

theorem indicator_le_thickenedIndicatorAux (Œ¥ : ‚Ñù) (E : Set Œ±) :
    (E.indicator fun _ => (1 : ‚Ñù‚â•0‚àû)) ‚â§ thickenedIndicatorAux Œ¥ E := by
  intro a
  -- ‚ä¢ indicator E (fun x => 1) a ‚â§ thickenedIndicatorAux Œ¥ E a
  by_cases a ‚àà E
  -- ‚ä¢ indicator E (fun x => 1) a ‚â§ thickenedIndicatorAux Œ¥ E a
  -- ‚ä¢ indicator E (fun x => 1) a ‚â§ thickenedIndicatorAux Œ¥ E a
  ¬∑ simp only [h, indicator_of_mem, thickenedIndicatorAux_one Œ¥ E h, le_refl]
    -- üéâ no goals
  ¬∑ simp only [h, indicator_of_not_mem, not_false_iff, zero_le]
    -- üéâ no goals
#align indicator_le_thickened_indicator_aux indicator_le_thickenedIndicatorAux

theorem thickenedIndicatorAux_subset (Œ¥ : ‚Ñù) {E‚ÇÅ E‚ÇÇ : Set Œ±} (subset : E‚ÇÅ ‚äÜ E‚ÇÇ) :
    thickenedIndicatorAux Œ¥ E‚ÇÅ ‚â§ thickenedIndicatorAux Œ¥ E‚ÇÇ :=
  fun _ => tsub_le_tsub (@rfl ‚Ñù‚â•0‚àû 1).le (ENNReal.div_le_div (infEdist_anti subset) rfl.le)
#align thickened_indicator_aux_subset thickenedIndicatorAux_subset

/-- As the thickening radius Œ¥ tends to 0, the Œ¥-thickened indicator of a set E (in Œ±) tends
pointwise (i.e., w.r.t. the product topology on `Œ± ‚Üí ‚Ñù‚â•0‚àû`) to the indicator function of the
closure of E.

This statement is for the unbundled `‚Ñù‚â•0‚àû`-valued functions `thickenedIndicatorAux Œ¥ E`, see
`thickenedIndicator_tendsto_indicator_closure` for the version for bundled `‚Ñù‚â•0`-valued
bounded continuous functions. -/
theorem thickenedIndicatorAux_tendsto_indicator_closure {Œ¥seq : ‚Ñï ‚Üí ‚Ñù}
    (Œ¥seq_lim : Tendsto Œ¥seq atTop (ùìù 0)) (E : Set Œ±) :
    Tendsto (fun n => thickenedIndicatorAux (Œ¥seq n) E) atTop
      (ùìù (indicator (closure E) fun _ => (1 : ‚Ñù‚â•0‚àû))) := by
  rw [tendsto_pi_nhds]
  -- ‚ä¢ ‚àÄ (x : Œ±), Tendsto (fun i => thickenedIndicatorAux (Œ¥seq i) E x) atTop (ùìù (i ‚Ä¶
  intro x
  -- ‚ä¢ Tendsto (fun i => thickenedIndicatorAux (Œ¥seq i) E x) atTop (ùìù (indicator (c ‚Ä¶
  by_cases x_mem_closure : x ‚àà closure E
  -- ‚ä¢ Tendsto (fun i => thickenedIndicatorAux (Œ¥seq i) E x) atTop (ùìù (indicator (c ‚Ä¶
  ¬∑ simp_rw [thickenedIndicatorAux_one_of_mem_closure _ E x_mem_closure]
    -- ‚ä¢ Tendsto (fun i => 1) atTop (ùìù (indicator (closure E) (fun x => 1) x))
    rw [show (indicator (closure E) fun _ => (1 : ‚Ñù‚â•0‚àû)) x = 1 by
        simp only [x_mem_closure, indicator_of_mem]]
    exact tendsto_const_nhds
    -- üéâ no goals
  ¬∑ rw [show (closure E).indicator (fun _ => (1 : ‚Ñù‚â•0‚àû)) x = 0 by
        simp only [x_mem_closure, indicator_of_not_mem, not_false_iff]]
    rcases exists_real_pos_lt_infEdist_of_not_mem_closure x_mem_closure with ‚ü®Œµ, ‚ü®Œµ_pos, Œµ_lt‚ü©‚ü©
    -- ‚ä¢ Tendsto (fun i => thickenedIndicatorAux (Œ¥seq i) E x) atTop (ùìù 0)
    rw [Metric.tendsto_nhds] at Œ¥seq_lim
    -- ‚ä¢ Tendsto (fun i => thickenedIndicatorAux (Œ¥seq i) E x) atTop (ùìù 0)
    specialize Œ¥seq_lim Œµ Œµ_pos
    -- ‚ä¢ Tendsto (fun i => thickenedIndicatorAux (Œ¥seq i) E x) atTop (ùìù 0)
    simp only [dist_zero_right, Real.norm_eq_abs, eventually_atTop, ge_iff_le] at Œ¥seq_lim
    -- ‚ä¢ Tendsto (fun i => thickenedIndicatorAux (Œ¥seq i) E x) atTop (ùìù 0)
    rcases Œ¥seq_lim with ‚ü®N, hN‚ü©
    -- ‚ä¢ Tendsto (fun i => thickenedIndicatorAux (Œ¥seq i) E x) atTop (ùìù 0)
    apply @tendsto_atTop_of_eventually_const _ _ _ _ _ _ _ N
    -- ‚ä¢ ‚àÄ (i : ‚Ñï), i ‚â• N ‚Üí thickenedIndicatorAux (Œ¥seq i) E x = 0
    intro n n_large
    -- ‚ä¢ thickenedIndicatorAux (Œ¥seq n) E x = 0
    have key : x ‚àâ thickening Œµ E := by simpa only [thickening, mem_setOf_eq, not_lt] using Œµ_lt.le
    -- ‚ä¢ thickenedIndicatorAux (Œ¥seq n) E x = 0
    refine' le_antisymm _ bot_le
    -- ‚ä¢ thickenedIndicatorAux (Œ¥seq n) E x ‚â§ 0
    apply (thickenedIndicatorAux_mono (lt_of_abs_lt (hN n n_large)).le E x).trans
    -- ‚ä¢ thickenedIndicatorAux Œµ E x ‚â§ 0
    exact (thickenedIndicatorAux_zero Œµ_pos E key).le
    -- üéâ no goals
#align thickened_indicator_aux_tendsto_indicator_closure thickenedIndicatorAux_tendsto_indicator_closure

/-- The `Œ¥`-thickened indicator of a set `E` is the function that equals `1` on `E`
and `0` outside a `Œ¥`-thickening of `E` and interpolates (continuously) between
these values using `infEdist _ E`.

`thickenedIndicator` is the (bundled) bounded continuous function with `‚Ñù‚â•0`-values.
See `thickenedIndicatorAux` for the unbundled `‚Ñù‚â•0‚àû`-valued function. -/
@[simps]
def thickenedIndicator {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) : Œ± ‚Üí·µá ‚Ñù‚â•0 where
  toFun := fun x : Œ± => (thickenedIndicatorAux Œ¥ E x).toNNReal
  continuous_toFun := by
    apply ContinuousOn.comp_continuous continuousOn_toNNReal
      (continuous_thickenedIndicatorAux Œ¥_pos E)
    intro x
    -- ‚ä¢ thickenedIndicatorAux Œ¥ E x ‚àà {a | a ‚â† ‚ä§}
    exact (lt_of_le_of_lt (@thickenedIndicatorAux_le_one _ _ Œ¥ E x) one_lt_top).ne
    -- üéâ no goals
  map_bounded' := by
    use 2
    -- ‚ä¢ ‚àÄ (x y : Œ±), dist (ContinuousMap.toFun (ContinuousMap.mk fun x => ENNReal.to ‚Ä¶
    intro x y
    -- ‚ä¢ dist (ContinuousMap.toFun (ContinuousMap.mk fun x => ENNReal.toNNReal (thick ‚Ä¶
    rw [NNReal.dist_eq]
    -- ‚ä¢ |‚Üë(ContinuousMap.toFun (ContinuousMap.mk fun x => ENNReal.toNNReal (thickene ‚Ä¶
    apply (abs_sub _ _).trans
    -- ‚ä¢ |‚Üë(ContinuousMap.toFun (ContinuousMap.mk fun x => ENNReal.toNNReal (thickene ‚Ä¶
    rw [NNReal.abs_eq, NNReal.abs_eq, ‚Üê one_add_one_eq_two]
    -- ‚ä¢ ‚Üë(ContinuousMap.toFun (ContinuousMap.mk fun x => ENNReal.toNNReal (thickened ‚Ä¶
    have key := @thickenedIndicatorAux_le_one _ _ Œ¥ E
    -- ‚ä¢ ‚Üë(ContinuousMap.toFun (ContinuousMap.mk fun x => ENNReal.toNNReal (thickened ‚Ä¶
    apply add_le_add <;>
    -- ‚ä¢ ‚Üë(ContinuousMap.toFun (ContinuousMap.mk fun x => ENNReal.toNNReal (thickened ‚Ä¶
      ¬∑ norm_cast
        -- ‚ä¢ ContinuousMap.toFun (ContinuousMap.mk fun x => ENNReal.toNNReal (thickenedIn ‚Ä¶
        -- ‚ä¢ ContinuousMap.toFun (ContinuousMap.mk fun x => ENNReal.toNNReal (thickenedIn ‚Ä¶
        -- üéâ no goals
        refine' (toNNReal_le_toNNReal (lt_of_le_of_lt (key _) one_lt_top).ne one_ne_top).mpr (key _)
        -- üéâ no goals
#align thickened_indicator thickenedIndicator

theorem thickenedIndicator.coeFn_eq_comp {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) :
    ‚áë(thickenedIndicator Œ¥_pos E) = ENNReal.toNNReal ‚àò thickenedIndicatorAux Œ¥ E :=
  rfl
#align thickened_indicator.coe_fn_eq_comp thickenedIndicator.coeFn_eq_comp

theorem thickenedIndicator_le_one {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) (x : Œ±) :
    thickenedIndicator Œ¥_pos E x ‚â§ 1 := by
  rw [thickenedIndicator.coeFn_eq_comp]
  -- ‚ä¢ (ENNReal.toNNReal ‚àò thickenedIndicatorAux Œ¥ E) x ‚â§ 1
  simpa using (toNNReal_le_toNNReal thickenedIndicatorAux_lt_top.ne one_ne_top).mpr
    (thickenedIndicatorAux_le_one Œ¥ E x)
#align thickened_indicator_le_one thickenedIndicator_le_one

theorem thickenedIndicator_one_of_mem_closure {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) {x : Œ±}
    (x_mem : x ‚àà closure E) : thickenedIndicator Œ¥_pos E x = 1 := by
  rw [thickenedIndicator_apply, thickenedIndicatorAux_one_of_mem_closure Œ¥ E x_mem, one_toNNReal]
  -- üéâ no goals
#align thickened_indicator_one_of_mem_closure thickenedIndicator_one_of_mem_closure

theorem thickenedIndicator_one {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) {x : Œ±} (x_in_E : x ‚àà E) :
    thickenedIndicator Œ¥_pos E x = 1 :=
  thickenedIndicator_one_of_mem_closure _ _ (subset_closure x_in_E)
#align thickened_indicator_one thickenedIndicator_one

theorem thickenedIndicator_zero {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) {x : Œ±}
    (x_out : x ‚àâ thickening Œ¥ E) : thickenedIndicator Œ¥_pos E x = 0 := by
  rw [thickenedIndicator_apply, thickenedIndicatorAux_zero Œ¥_pos E x_out, zero_toNNReal]
  -- üéâ no goals
#align thickened_indicator_zero thickenedIndicator_zero

theorem indicator_le_thickenedIndicator {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) :
    (E.indicator fun _ => (1 : ‚Ñù‚â•0)) ‚â§ thickenedIndicator Œ¥_pos E := by
  intro a
  -- ‚ä¢ indicator E (fun x => 1) a ‚â§ ‚Üë(thickenedIndicator Œ¥_pos E) a
  by_cases a ‚àà E
  -- ‚ä¢ indicator E (fun x => 1) a ‚â§ ‚Üë(thickenedIndicator Œ¥_pos E) a
  -- ‚ä¢ indicator E (fun x => 1) a ‚â§ ‚Üë(thickenedIndicator Œ¥_pos E) a
  ¬∑ simp only [h, indicator_of_mem, thickenedIndicator_one Œ¥_pos E h, le_refl]
    -- üéâ no goals
  ¬∑ simp only [h, indicator_of_not_mem, not_false_iff, zero_le]
    -- üéâ no goals
#align indicator_le_thickened_indicator indicator_le_thickenedIndicator

theorem thickenedIndicator_mono {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚Ñù} (Œ¥‚ÇÅ_pos : 0 < Œ¥‚ÇÅ) (Œ¥‚ÇÇ_pos : 0 < Œ¥‚ÇÇ) (hle : Œ¥‚ÇÅ ‚â§ Œ¥‚ÇÇ)
    (E : Set Œ±) : ‚áë(thickenedIndicator Œ¥‚ÇÅ_pos E) ‚â§ thickenedIndicator Œ¥‚ÇÇ_pos E := by
  intro x
  -- ‚ä¢ ‚Üë(thickenedIndicator Œ¥‚ÇÅ_pos E) x ‚â§ ‚Üë(thickenedIndicator Œ¥‚ÇÇ_pos E) x
  apply (toNNReal_le_toNNReal thickenedIndicatorAux_lt_top.ne thickenedIndicatorAux_lt_top.ne).mpr
  -- ‚ä¢ thickenedIndicatorAux Œ¥‚ÇÅ E x ‚â§ thickenedIndicatorAux Œ¥‚ÇÇ E x
  apply thickenedIndicatorAux_mono hle
  -- üéâ no goals
#align thickened_indicator_mono thickenedIndicator_mono

theorem thickenedIndicator_subset {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) {E‚ÇÅ E‚ÇÇ : Set Œ±} (subset : E‚ÇÅ ‚äÜ E‚ÇÇ) :
    ‚áë(thickenedIndicator Œ¥_pos E‚ÇÅ) ‚â§ thickenedIndicator Œ¥_pos E‚ÇÇ := fun x =>
  (toNNReal_le_toNNReal thickenedIndicatorAux_lt_top.ne thickenedIndicatorAux_lt_top.ne).mpr
    (thickenedIndicatorAux_subset Œ¥ subset x)
#align thickened_indicator_subset thickenedIndicator_subset

/-- As the thickening radius Œ¥ tends to 0, the Œ¥-thickened indicator of a set E (in Œ±) tends
pointwise to the indicator function of the closure of E.

Note: This version is for the bundled bounded continuous functions, but the topology is not
the topology on `Œ± ‚Üí·µá ‚Ñù‚â•0`. Coercions to functions `Œ± ‚Üí ‚Ñù‚â•0` are done first, so the topology
instance is the product topology (the topology of pointwise convergence). -/
theorem thickenedIndicator_tendsto_indicator_closure {Œ¥seq : ‚Ñï ‚Üí ‚Ñù} (Œ¥seq_pos : ‚àÄ n, 0 < Œ¥seq n)
    (Œ¥seq_lim : Tendsto Œ¥seq atTop (ùìù 0)) (E : Set Œ±) :
    Tendsto (fun n : ‚Ñï => ((‚Üë) : (Œ± ‚Üí·µá ‚Ñù‚â•0) ‚Üí Œ± ‚Üí ‚Ñù‚â•0) (thickenedIndicator (Œ¥seq_pos n) E)) atTop
      (ùìù (indicator (closure E) fun _ => (1 : ‚Ñù‚â•0))) := by
  have key := thickenedIndicatorAux_tendsto_indicator_closure Œ¥seq_lim E
  -- ‚ä¢ Tendsto (fun n => ‚Üë(thickenedIndicator (_ : 0 < Œ¥seq n) E)) atTop (ùìù (indica ‚Ä¶
  rw [tendsto_pi_nhds] at *
  -- ‚ä¢ ‚àÄ (x : Œ±), Tendsto (fun i => ‚Üë(thickenedIndicator (_ : 0 < Œ¥seq i) E) x) atT ‚Ä¶
  intro x
  -- ‚ä¢ Tendsto (fun i => ‚Üë(thickenedIndicator (_ : 0 < Œ¥seq i) E) x) atTop (ùìù (indi ‚Ä¶
  rw [show indicator (closure E) (fun _ => (1 : ‚Ñù‚â•0)) x =
        (indicator (closure E) (fun _ => (1 : ‚Ñù‚â•0‚àû)) x).toNNReal
      by refine' (congr_fun (comp_indicator_const 1 ENNReal.toNNReal zero_toNNReal) x).symm]
  refine' Tendsto.comp (tendsto_toNNReal _) (key x)
  -- ‚ä¢ indicator (closure E) (fun x => 1) x ‚â† ‚ä§
  by_cases x_mem : x ‚àà closure E <;> simp [x_mem]
  -- ‚ä¢ indicator (closure E) (fun x => 1) x ‚â† ‚ä§
                                     -- üéâ no goals
                                     -- üéâ no goals
#align thickened_indicator_tendsto_indicator_closure thickenedIndicator_tendsto_indicator_closure

end thickenedIndicator

section indicator

variable {Œ± : Type*} [PseudoEMetricSpace Œ±] {Œ≤ : Type*} [One Œ≤]

/-- Pointwise, the multiplicative indicators of Œ¥-thickenings of a set eventually coincide
with the multiplicative indicator of the set as Œ¥>0 tends to zero. -/
@[to_additive "Pointwise, the indicators of Œ¥-thickenings of a set eventually coincide
with the indicator of the set as Œ¥>0 tends to zero."]
lemma mulIndicator_thickening_eventually_eq_mulIndicator_closure (f : Œ± ‚Üí Œ≤) (E : Set Œ±) (x : Œ±) :
    ‚àÄ·∂† Œ¥ in ùìù[>] (0 : ‚Ñù),
      (Metric.thickening Œ¥ E).mulIndicator f x = (closure E).mulIndicator f x := by
  by_cases x_mem_closure : x ‚àà closure E
  -- ‚ä¢ ‚àÄ·∂† (Œ¥ : ‚Ñù) in ùìù[Ioi 0] 0, mulIndicator (thickening Œ¥ E) f x = mulIndicator ( ‚Ä¶
  ¬∑ filter_upwards [self_mem_nhdsWithin] with Œ¥ Œ¥_pos
    -- ‚ä¢ mulIndicator (thickening Œ¥ E) f x = mulIndicator (closure E) f x
    simp only [closure_subset_thickening Œ¥_pos E x_mem_closure, mulIndicator_of_mem, x_mem_closure]
    -- üéâ no goals
  ¬∑ have obs := eventually_not_mem_thickening_of_infEdist_pos x_mem_closure
    -- ‚ä¢ ‚àÄ·∂† (Œ¥ : ‚Ñù) in ùìù[Ioi 0] 0, mulIndicator (thickening Œ¥ E) f x = mulIndicator ( ‚Ä¶
    filter_upwards [mem_nhdsWithin_of_mem_nhds obs, self_mem_nhdsWithin]
      with Œ¥ x_notin_thE _
    simp only [x_notin_thE, not_false_eq_true, mulIndicator_of_not_mem, x_mem_closure]
    -- üéâ no goals

/-- Pointwise, the multiplicative indicators of closed Œ¥-thickenings of a set eventually coincide
with the multiplicative indicator of the set as Œ¥ tends to zero. -/
@[to_additive "Pointwise, the indicators of closed Œ¥-thickenings of a set eventually coincide
with the indicator of the set as Œ¥ tends to zero."]
lemma mulIndicator_cthickening_eventually_eq_mulIndicator_closure (f : Œ± ‚Üí Œ≤) (E : Set Œ±) (x : Œ±) :
    ‚àÄ·∂† Œ¥ in ùìù (0 : ‚Ñù),
      (Metric.cthickening Œ¥ E).mulIndicator f x = (closure E).mulIndicator f x := by
  by_cases x_mem_closure : x ‚àà closure E
  -- ‚ä¢ ‚àÄ·∂† (Œ¥ : ‚Ñù) in ùìù 0, mulIndicator (cthickening Œ¥ E) f x = mulIndicator (closur ‚Ä¶
  ¬∑ filter_upwards [univ_mem] with Œ¥ _
    -- ‚ä¢ mulIndicator (cthickening Œ¥ E) f x = mulIndicator (closure E) f x
    have obs : x ‚àà cthickening Œ¥ E := closure_subset_cthickening Œ¥ E x_mem_closure
    -- ‚ä¢ mulIndicator (cthickening Œ¥ E) f x = mulIndicator (closure E) f x
    rw [mulIndicator_of_mem obs f, mulIndicator_of_mem x_mem_closure f]
    -- üéâ no goals
  ¬∑ filter_upwards [eventually_not_mem_cthickening_of_infEdist_pos x_mem_closure] with Œ¥ hŒ¥
    -- ‚ä¢ mulIndicator (cthickening Œ¥ E) f x = mulIndicator (closure E) f x
    simp only [hŒ¥, not_false_eq_true, mulIndicator_of_not_mem, x_mem_closure]
    -- üéâ no goals

variable [TopologicalSpace Œ≤]

/-- The multiplicative indicators of Œ¥-thickenings of a set tend pointwise to the multiplicative
indicator of the set, as Œ¥>0 tends to zero. -/
@[to_additive "The indicators of Œ¥-thickenings of a set tend pointwise to the indicator of the
set, as Œ¥>0 tends to zero."]
lemma tendsto_mulIndicator_thickening_mulIndicator_closure (f : Œ± ‚Üí Œ≤) (E : Set Œ±) :
    Tendsto (fun Œ¥ ‚Ü¶ (Metric.thickening Œ¥ E).mulIndicator f) (ùìù[>] 0)
      (ùìù ((closure E).mulIndicator f)) := by
  rw [tendsto_pi_nhds]
  -- ‚ä¢ ‚àÄ (x : Œ±), Tendsto (fun i => mulIndicator (thickening i E) f x) (ùìù[Ioi 0] 0) ‚Ä¶
  intro x
  -- ‚ä¢ Tendsto (fun i => mulIndicator (thickening i E) f x) (ùìù[Ioi 0] 0) (ùìù (mulInd ‚Ä¶
  rw [tendsto_congr' (mulIndicator_thickening_eventually_eq_mulIndicator_closure f E x)]
  -- ‚ä¢ Tendsto (fun x_1 => mulIndicator (closure E) f x) (ùìù[Ioi 0] 0) (ùìù (mulIndica ‚Ä¶
  apply tendsto_const_nhds
  -- üéâ no goals

/-- The multiplicative indicators of closed Œ¥-thickenings of a set tend pointwise to the
multiplicative indicator of the set, as Œ¥ tends to zero. -/
@[to_additive "The indicators of closed Œ¥-thickenings of a set tend pointwise to the indicator
of the set, as Œ¥ tends to zero."]
lemma tendsto_mulIndicator_cthickening_mulIndicator_closure (f : Œ± ‚Üí Œ≤) (E : Set Œ±) :
    Tendsto (fun Œ¥ ‚Ü¶ (Metric.cthickening Œ¥ E).mulIndicator f) (ùìù 0)
      (ùìù ((closure E).mulIndicator f)) := by
  rw [tendsto_pi_nhds]
  -- ‚ä¢ ‚àÄ (x : Œ±), Tendsto (fun i => mulIndicator (cthickening i E) f x) (ùìù 0) (ùìù (m ‚Ä¶
  intro x
  -- ‚ä¢ Tendsto (fun i => mulIndicator (cthickening i E) f x) (ùìù 0) (ùìù (mulIndicator ‚Ä¶
  rw [tendsto_congr' (mulIndicator_cthickening_eventually_eq_mulIndicator_closure f E x)]
  -- ‚ä¢ Tendsto (fun x_1 => mulIndicator (closure E) f x) (ùìù 0) (ùìù (mulIndicator (cl ‚Ä¶
  apply tendsto_const_nhds
  -- üéâ no goals

end indicator
