import Mathlib.Topology.Compactness.Compact
import Mathlib.Topology.Sets.Closeds
import Mathlib.Topology.AlexandrovDiscrete
import Mathlib.Topology.Homeomorph
import Mathlib.Data.Fintype.Option

open Function Set Filter TopologicalSpace
open scoped Topology

universe u v
variable {X : Type u} {Y : Type v} [TopologicalSpace X] [TopologicalSpace Y]

-- TODO: prove `Continuous Pullback.fst` and `Continuous Pullback.snd`

@[simps]
def Homeomorph.pullbackProdFst (f : X ‚Üí Y) (hf : Continuous f) (Z : Type*) [TopologicalSpace Z] :
    ((f : X ‚Üí Y).Pullback (Prod.fst : Y √ó Z ‚Üí Y)) ‚âÉ‚Çú X √ó Z where
  toFun a := (a.fst, a.snd.2)
  invFun a := ‚ü®(a.1, f a.1, a.2), rfl‚ü©
  left_inv a := Subtype.eq <| Prod.ext rfl <| Prod.ext a.2 rfl
  right_inv _ := rfl
  continuous_toFun := by simp only [Pullback.fst, Pullback.snd]; fun_prop

namespace TopologicalSpace

/-- Topology on `TopologicalSpace.Opens X` defined in

On topological quotient maps preserved by pullbacks or products
B. J. DAY AND G. M. KELLY

-/
protected def dayKelly (Œ± : Type*) [CompleteLattice Œ±] : TopologicalSpace Œ± where
  IsOpen S := IsUpperSet S ‚àß ‚àÄ U : Set Œ±, sSup U ‚àà S ‚Üí ‚àÉ u ‚äÜ U, u.Finite ‚àß sSup u ‚àà S
  isOpen_univ := ‚ü®isUpperSet_univ, fun _ _ ‚Ü¶ ‚ü®‚àÖ, by simp‚ü©‚ü©
  isOpen_inter s t hs ht := by
    refine ‚ü®hs.1.inter ht.1, fun U ‚ü®hUs, hUt‚ü© ‚Ü¶ ?_‚ü©
    rcases hs.2 U hUs with ‚ü®us, husU, husf, hus‚ü©
    rcases ht.2 U hUt with ‚ü®ut, hutU, hutf, hut‚ü©
    refine ‚ü®us ‚à™ ut, union_subset husU hutU, husf.union hutf, ?_‚ü©
    rw [sSup_union]
    exact ‚ü®hs.1 le_sup_left hus, ht.1 le_sup_right hut‚ü©
  isOpen_sUnion S hS := by
    refine ‚ü®isUpperSet_sUnion fun s hs ‚Ü¶ (hS s hs).1, fun U hU ‚Ü¶ ?_‚ü©
    rcases mem_sUnion.1 hU with ‚ü®s, hsS, hsU‚ü©
    rcases (hS s hsS).2 U hsU with ‚ü®u, huU, huf, hus‚ü©
    exact ‚ü®u, huU, huf, s, hsS, hus‚ü©

theorem isOpen_dayKelly_setOf_isCompact_subset {K : Set X} (hK : IsCompact K) :
    IsOpen[.dayKelly (Opens X)] {U | K ‚äÜ U} := by
  refine ‚ü®fun V U hV hle ‚Ü¶ hle.trans hV, fun U hU ‚Ü¶ ?_‚ü©
  rw [mem_setOf, Opens.coe_sSup] at hU
  simpa using hK.elim_finite_subcover_image (fun u _ ‚Ü¶ u.isOpen) hU

end TopologicalSpace

variable (X) in
class ProdQuotientMapSpace : Prop where
  exists_dayKelly_isOpen : ‚àÄ U : Opens X, ‚àÄ x ‚àà U,
    ‚àÉ S : Set (Opens X), U ‚àà S ‚àß IsOpen[.dayKelly (Opens X)] S ‚àß (‚ãÇ s ‚àà S, (s : Set X)) ‚àà ùìù x

instance (priority := 100) [LocallyCompactSpace X] : ProdQuotientMapSpace X := by
  refine ‚ü®fun U x hxU ‚Ü¶ ?_‚ü©
  rcases local_compact_nhds (U.isOpen.mem_nhds hxU) with ‚ü®K, hKx, hKU, hKc‚ü©
  exact ‚ü®{V | K ‚äÜ V}, hKU, isOpen_dayKelly_setOf_isCompact_subset hKc,
    mem_of_superset hKx <| subset_iInter‚ÇÇ fun _ ‚Ü¶ id‚ü©

instance {Œ±} : Trans (Membership.mem : Œ± ‚Üí Set Œ± ‚Üí Prop) Subset Membership.mem :=
  ‚ü®fun h‚ÇÅ h‚ÇÇ => h‚ÇÇ h‚ÇÅ‚ü©

instance (priority := 100) [R1Space X] [ProdQuotientMapSpace X] : LocallyCompactSpace X := by
  suffices WeaklyLocallyCompactSpace X from inferInstance
  have : RegularSpace X := by
    refine .of_exists_mem_nhds_isClosed_subset fun x s hxs ‚Ü¶ ?_
    wlog hso : IsOpen s generalizing s
    ¬∑ rcases this (interior s) (interior_mem_nhds.2 hxs) isOpen_interior with ‚ü®t, htx, htc, hts‚ü©
      exact ‚ü®t, htx, htc, hts.trans interior_subset‚ü©
    lift s to Opens X using hso
    rcases ProdQuotientMapSpace.exists_dayKelly_isOpen s x (mem_of_mem_nhds hxs)
      with ‚ü®S, hS, hSo, hxS‚ü©
    set t : Set X := ‚ãÇ s ‚àà S, s
    refine ‚ü®_, mem_of_superset hxS subset_closure, isClosed_closure, ?_‚ü©
    intro y hyS
    by_contra hys
    have : ‚àÄ z ‚àà s, ‚àÉ U : Opens X, z ‚àà U ‚àß y ‚àâ closure U := by
      intro z hz
      have : ¬¨y ‚§≥ z := by
        simp only [specializes_iff_forall_open, not_forall]
        exact ‚ü®_, s.isOpen, hz, hys‚ü©
      rw [‚Üê disjoint_nhds_nhds_iff_not_specializes, (nhds_basis_opens _).disjoint_iff_right] at this
      rcases this with ‚ü®U, ‚ü®hzU, hUo‚ü©, hU‚ü©
      refine ‚ü®‚ü®U, hUo‚ü©, hzU, ?_‚ü©
      rwa [Opens.coe_mk, ‚Üê mem_compl_iff, ‚Üê interior_compl, mem_interior_iff_mem_nhds]
    choose! U hmem hyU using this
    have : sSup (U '' s) ‚àà S := by
      refine hSo.1 (fun z hz ‚Ü¶ ?_) hS
      simp only [SetLike.mem_coe, sSup_image, Opens.mem_iSup]
      exact ‚ü®z, hz, hmem z hz‚ü©
    rcases exists_subset_image_finite_and.1 (hSo.2 _ this) with ‚ü®v, hsub, hvf, hv‚ü©
    have := calc
      y ‚àà closure t := hyS
      _ ‚äÜ closure ‚Üë(sSup (U '' v)) := closure_mono <| iInter‚ÇÇ_subset _ ‚Äπ_‚Ä∫
      _ = ‚ãÉ z ‚àà v, closure (U z) := by
        simp_rw [sSup_image, Opens.coe_iSup, hvf.closure_biUnion]
    rcases mem_iUnion‚ÇÇ.1 this with ‚ü®z, hzv, hyz‚ü©
    exact hyU _ (hsub hzv) hyz
  refine ‚ü®fun x ‚Ü¶ ?_‚ü©
  rcases ProdQuotientMapSpace.exists_dayKelly_isOpen ‚ä§ x trivial with ‚ü®S, hS, hSo, hxS‚ü©
  rcases exists_mem_nhds_isClosed_subset hxS with ‚ü®K, hxK, hKc, hKS‚ü©
  simp only [subset_iInter_iff] at hKS
  lift K to Closeds X using hKc
  refine ‚ü®_, isCompact_of_finite_subcover_sUnion fun V hVo hKV ‚Ü¶ ?_, hxK‚ü©
  lift V to Set (Opens X) using hVo
  replace hSV : sSup (insert K.compl V) = ‚ä§ := by
    rwa [sSup_insert, ‚Üê SetLike.coe_set_eq, Opens.coe_sup, Opens.coe_sSup, Opens.coe_top,
      Closeds.compl_coe, ‚Üê sUnion_image, ‚Üê compl_subset_iff_union, compl_compl]
  rcases hSo.2 _ (hSV ‚ñ∏ hS) with ‚ü®T, hTsub, hTf, hTS‚ü©
  rw [exists_subset_image_finite_and]
  refine ‚ü®T \ {K.compl}, diff_singleton_subset_iff.2 hTsub, hTf.diff _, fun z hz ‚Ü¶ ?_‚ü©
  rcases Opens.mem_sSup.1 (hKS _ hTS hz) with ‚ü®v, hvT, hzv‚ü©
  rw [sUnion_image, mem_iUnion‚ÇÇ]
  refine ‚ü®v, ‚ü®hvT, ?_‚ü©, hzv‚ü©
  rintro rfl
  exact hzv hz

structure IsOpenQuotientMap (f : X ‚Üí Y) : Prop where
  surjective : Surjective f
  continuous : Continuous f
  isOpenMap : IsOpenMap f

namespace IsOpenQuotientMap

theorem prodMap {X' Y' : Type*} [TopologicalSpace X'] [TopologicalSpace Y']
    {f : X ‚Üí Y} {g : X' ‚Üí Y'} (hf : IsOpenQuotientMap f) (hg : IsOpenQuotientMap g) :
    IsOpenQuotientMap (Prod.map f g) where
  surjective := hf.surjective.prodMap hg.surjective
  continuous := hf.continuous.prod_map hg.continuous
  isOpenMap := hf.isOpenMap.prod hg.isOpenMap

theorem piMap {Œπ : Type*} {X Y : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (X i)]
    [‚àÄ i, TopologicalSpace (Y i)] {f : ‚àÄ i, X i ‚Üí Y i} (hf : ‚àÄ i, IsOpenQuotientMap (f i)) :
    IsOpenQuotientMap (fun (x : ‚àÄ i, X i) (i : Œπ) ‚Ü¶ f i (x i)) where
  surjective := surjective_pi_map fun i ‚Ü¶ (hf i).surjective
  continuous := continuous_dcomp fun i ‚Ü¶ (hf i).continuous
  isOpenMap := IsOpenMap.dcomp (fun i ‚Ü¶ (hf i).isOpenMap)
    (eventually_of_forall fun i ‚Ü¶ (hf i).surjective)

protected theorem comp {Z : Type*} [TopologicalSpace Z] {f : Y ‚Üí Z} {g : X ‚Üí Y}
    (hf : IsOpenQuotientMap f) (hg : IsOpenQuotientMap g) : IsOpenQuotientMap (f ‚àò g) where
  surjective := hf.surjective.comp hg.surjective
  continuous := hf.continuous.comp hg.continuous
  isOpenMap := hf.isOpenMap.comp hg.isOpenMap

protected theorem id : IsOpenQuotientMap (id : X ‚Üí X) :=
  ‚ü®surjective_id, continuous_id, IsOpenMap.id‚ü©

end IsOpenQuotientMap  

theorem Homeomorph.isOpenQuotientMap (f : X ‚âÉ‚Çú Y) : IsOpenQuotientMap f where
  surjective := f.surjective
  continuous := f.continuous
  isOpenMap := f.isOpenMap

@[mk_iff]
structure IsPullbackQuotientMap (f : X ‚Üí Y) : Prop where
  continuous : Continuous f
  exists_clusterPt_comap {y : Y} {l : Filter Y} (h : ClusterPt y l) :
    ‚àÉ x, f x = y ‚àß ClusterPt x (comap f l)

nonrec theorem TopologicalSpace.IsTopologicalBasis.isPullbackQuotientMap_iff {B : Set (Set X)}
    (hB : IsTopologicalBasis B) {f : X ‚Üí Y} :
    IsPullbackQuotientMap f ‚Üî
      Continuous f ‚àß ‚àÄ y : Y, ‚àÄ S ‚äÜ B, (f ‚Åª¬π' {y} ‚äÜ ‚ãÉ‚ÇÄ S) ‚Üí
        ‚àÉ T ‚äÜ S, T.Finite ‚àß f '' ‚ãÉ‚ÇÄ T ‚àà ùìù y := by
  simp only [isPullbackQuotientMap_iff, clusterPt_iff_not_disjoint, disjoint_comap_iff_map]
  refine .and .rfl <| forall_congr' fun y ‚Ü¶ ?_
  constructor
  ¬∑ intro h S hSB hfS
    contrapose! h
    refine ‚ü®‚®Ö s ‚àà S, ùìü ((f '' s)·∂ú), ?_, fun x hx ‚Ü¶ ?_‚ü©
    ¬∑ rw [iInf_subtype', (hasBasis_iInf_principal_finite _).disjoint_iff_right]
      rintro ‚ü®T, hTf, hTy‚ü©
      refine h (Subtype.val '' T) (image_subset_iff.2 fun x _ ‚Ü¶ x.2) (hTf.image _) ?_
      simpa only [sUnion_image, image_iUnion, compl_iInter, compl_compl] using hTy
    ¬∑ rcases @hfS x hx with ‚ü®s, hsS, hxs‚ü©
      rw [((basis_sets _).map f).disjoint_iff_left]
      refine ‚ü®s, hB.mem_nhds (hSB hsS) hxs, ?_‚ü©
      exact mem_iInf_of_mem s <| mem_iInf_of_mem hsS <| mem_principal_self _
  ¬∑ intro h l H
    contrapose! H
    simp only [l.basis_sets.disjoint_iff_right] at H
    choose! s hsl hsx using H
    set S := B ‚à© ‚ãÉ (x : X) (_ : f x = y), {U : Set X | Disjoint U (f ‚Åª¬π' s x)}
    obtain ‚ü®T, hTS, hTf, hTy‚ü© : ‚àÉ T ‚äÜ S, T.Finite ‚àß f '' ‚ãÉ‚ÇÄ T ‚àà ùìù y := by
      refine h S inter_subset_left fun x hx ‚Ü¶ ?_
      rcases hB.mem_nhds_iff.1 (mem_map.1 <| hsx x hx) with ‚ü®U, hUB, hxU, hU‚ü©
      refine ‚ü®U, ‚ü®hUB, mem_iUnion‚ÇÇ.2 ‚ü®x, hx, ?_‚ü©‚ü©, hxU‚ü©
      rwa [mem_setOf, disjoint_left]
    refine disjoint_of_disjoint_of_mem disjoint_compl_right hTy ?_
    rw [sUnion_eq_biUnion, image_iUnion‚ÇÇ, compl_iUnion‚ÇÇ, biInter_mem hTf]
    intro U hUT
    rcases mem_iUnion‚ÇÇ.1 (hTS hUT).2 with ‚ü®x, hxy, hUx‚ü©
    filter_upwards [hsl x hxy] with y' hy' ‚ü®x', hx'U, hx'y‚ü©
    refine disjoint_left.mp hUx hx'U ?_
    rwa [mem_preimage, hx'y]

theorem isPullbackQuotientMap_iff_exists_finite_image_mem_nhds {f : X ‚Üí Y} :
    IsPullbackQuotientMap f ‚Üî
      Continuous f ‚àß ‚àÄ y : Y, ‚àÄ S : Set (Set X),
        (‚àÄ s ‚àà S, IsOpen s) ‚Üí (f ‚Åª¬π' {y} ‚äÜ ‚ãÉ‚ÇÄ S) ‚Üí ‚àÉ T ‚äÜ S, T.Finite ‚àß f '' ‚ãÉ‚ÇÄ T ‚àà ùìù y :=
  isTopologicalBasis_opens.isPullbackQuotientMap_iff

theorem IsOpenQuotientMap.isPullbackQuotientMap {f : X ‚Üí Y} (hf : IsOpenQuotientMap f) :
    IsPullbackQuotientMap f where
  continuous := hf.continuous
  exists_clusterPt_comap {y l} h := by
    rcases hf.surjective y with ‚ü®x, rfl‚ü©
    refine ‚ü®x, rfl, ?_‚ü©
    -- TODO: move to a lemma about `IsOpenMap`
    rw [ClusterPt, ‚Üê map_neBot_iff, Filter.push_pull]
    exact h.neBot.mono <| inf_le_inf_right _ (hf.isOpenMap.nhds_le _)

theorem Homeomorph.isPullbackQuotientMap (f : X ‚âÉ‚Çú Y) : IsPullbackQuotientMap f :=
  f.isOpenQuotientMap.isPullbackQuotientMap

namespace IsPullbackQuotientMap

protected theorem surjective {f : X ‚Üí Y} (hf : IsPullbackQuotientMap f) : Surjective f := fun _ ‚Ü¶
  (hf.exists_clusterPt_comap (.of_le_nhds le_rfl)).imp fun _ ‚Ü¶ And.left

protected theorem quotientMap {f : X ‚Üí Y} (hf : IsPullbackQuotientMap f) : QuotientMap f := by
  refine quotientMap_iff.2 ‚ü®hf.surjective, fun U ‚Ü¶ ‚ü®fun h ‚Ü¶ h.preimage hf.continuous, fun h ‚Ü¶ ?_‚ü©‚ü©
  rw [‚Üê isClosed_compl_iff, isClosed_iff_clusterPt]
  intro y hy
  rcases hf.exists_clusterPt_comap hy with ‚ü®x, rfl, hx‚ü©
  rwa [comap_principal, ‚Üê mem_closure_iff_clusterPt, preimage_compl, closure_compl,
    h.interior_eq] at hx

protected theorem id : IsPullbackQuotientMap (id : X ‚Üí X) :=
  IsOpenQuotientMap.id.isPullbackQuotientMap

theorem exists_finset_biUnion_image_mem_nhds {Œπ : Type*} {f : X ‚Üí Y} (hf : IsPullbackQuotientMap f)
    {y : Y} {s : Œπ ‚Üí Set X} (hys : f ‚Åª¬π' {y} ‚äÜ ‚ãÉ i, s i) (hso : ‚àÄ i, IsOpen (s i)) :
    ‚àÉ t : Finset Œπ, ‚ãÉ i ‚àà t, f '' s i ‚àà ùìù y := by
  classical
  rw [isPullbackQuotientMap_iff_exists_finite_image_mem_nhds] at hf
  rcases hf.2 y (range s) (forall_mem_range.2 hso) hys with ‚ü®T, hTs, hTf, hTy‚ü©
  lift T to Finset (Set X) using hTf
  rw [‚Üê image_univ, Finset.subset_image_iff] at hTs
  rcases hTs with ‚ü®t, -, rfl‚ü©
  refine ‚ü®t, ?_‚ü©
  simpa [image_iUnion] using hTy

theorem exists_finite_subset_biUnion_image_mem_nhds
    {Œπ : Type*} {f : X ‚Üí Y} {I : Set Œπ} {y : Y} {s : Œπ ‚Üí Set X}
    (hf : IsPullbackQuotientMap f) (hys : f ‚Åª¬π' {y} ‚äÜ ‚ãÉ i ‚àà I, s i) (hso : ‚àÄ i ‚àà I, IsOpen (s i)) :
    ‚àÉ t ‚äÜ I, t.Finite ‚àß ‚ãÉ i ‚àà t, f '' s i ‚àà ùìù y := by
  rw [biUnion_eq_iUnion] at hys
  rcases hf.exists_finset_biUnion_image_mem_nhds hys (Subtype.forall.2 hso) with ‚ü®t, ht‚ü©
  refine ‚ü®Subtype.val '' t.toSet, Subtype.coe_image_subset _ _, t.finite_toSet.image _, ?_‚ü©
  rwa [biUnion_image]

protected theorem comp {Z : Type*} [TopologicalSpace Z] {f : Y ‚Üí Z} {g : X ‚Üí Y}
    (hf : IsPullbackQuotientMap f) (hg : IsPullbackQuotientMap g) :
    IsPullbackQuotientMap (f ‚àò g) where
  continuous := hf.continuous.comp hg.continuous
  exists_clusterPt_comap {z l} h := by
    rcases hf.exists_clusterPt_comap h with ‚ü®y, rfl, hy‚ü©
    rcases hg.exists_clusterPt_comap hy with ‚ü®x, rfl, hx‚ü©
    rw [comap_comap] at hx
    exact ‚ü®x, rfl, hx‚ü©

protected theorem pullback {Z : Type*} [TopologicalSpace Z] {f : X ‚Üí Y}
    (hf : IsPullbackQuotientMap f) {g : Z ‚Üí Y} (hg : Continuous g) :
    IsPullbackQuotientMap (Function.Pullback.snd : f.Pullback g ‚Üí Z) where
  continuous := continuous_snd.comp continuous_subtype_val
  exists_clusterPt_comap {z l} h := by
    rcases hf.exists_clusterPt_comap (h.nhds_inf.map hg.continuousAt tendsto_map) with ‚ü®x, hxz, hxl‚ü©
    refine ‚ü®‚ü®(x, z), hxz‚ü©, rfl, ?_‚ü©
    rw [(embedding_subtype_val.basis_nhds
      ((basis_sets _).prod_nhds (basis_sets _))).clusterPt_iff (comap_hasBasis _ _)]
    rintro ‚ü®s, t‚ü© ‚ü®hs : s ‚àà ùìù x, ht : t ‚àà ùìù z‚ü© u hu
    rw [(basis_sets _).clusterPt_iff ((((basis_sets _).inf (basis_sets _)).map _).comap _)] at hxl
    rcases hxl hs (j := (t, u)) ‚ü®ht, hu‚ü©
      with ‚ü®x', hx's : x' ‚àà s, z', ‚ü®hz't : z' ‚àà t, hz'u : z' ‚àà u‚ü©, hfxz'‚ü©
    refine ‚ü®‚ü®(x', z'), hfxz'.symm‚ü©, ‚ü®hx's, hz't‚ü©, hz'u‚ü©

protected theorem prodSwap : IsPullbackQuotientMap (Prod.swap : X √ó Y ‚Üí Y √ó X) :=
  (Homeomorph.prodComm X Y).isPullbackQuotientMap

protected theorem prodMap {X' Y' : Type*} [TopologicalSpace X'] [TopologicalSpace Y']
    {f : X ‚Üí Y} {g : X' ‚Üí Y'} (hf : IsPullbackQuotientMap f) (hg : IsPullbackQuotientMap g) :
    IsPullbackQuotientMap (Prod.map f g) :=
  have H‚ÇÅ : IsPullbackQuotientMap (Prod.map f id : X √ó X' ‚Üí Y √ó X') :=
    (hf.pullback continuous_fst).comp
      (Homeomorph.pullbackProdFst f hf.continuous X').symm.isPullbackQuotientMap
  have H‚ÇÇ : IsPullbackQuotientMap (Prod.map g id : X' √ó Y ‚Üí Y' √ó Y) :=
    (hg.pullback continuous_fst).comp
      (Homeomorph.pullbackProdFst g hg.continuous Y).symm.isPullbackQuotientMap
  have H‚ÇÉ : IsPullbackQuotientMap (Prod.map id g: Y √ó X' ‚Üí Y √ó Y') :=
    IsPullbackQuotientMap.prodSwap.comp (H‚ÇÇ.comp .prodSwap)
  H‚ÇÉ.comp H‚ÇÅ

-- Use the next lemma instead
private theorem piMap_fin {n : ‚Ñï} {X Y : Fin n ‚Üí Type*} [‚àÄ i, TopologicalSpace (X i)]
    [‚àÄ i, TopologicalSpace (Y i)] {f : ‚àÄ i, X i ‚Üí Y i} (h : ‚àÄ i, IsPullbackQuotientMap (f i)) :
    IsPullbackQuotientMap (f _ ‚àò' ¬∑ : (‚àÄ i, X i) ‚Üí (‚àÄ i, Y i)) := by
  induction n with
  | zero => _
  | succ n ihn => _

protected theorem piMap {Œπ : Type*} {X Y : Œπ ‚Üí Type*} [Finite Œπ] [‚àÄ i, TopologicalSpace (X i)]
    [‚àÄ i, TopologicalSpace (Y i)] {f : ‚àÄ i, X i ‚Üí Y i} (h : ‚àÄ i, IsPullbackQuotientMap (f i)) :
    IsPullbackQuotientMap (f _ ‚àò' ¬∑ : (‚àÄ i, X i) ‚Üí (‚àÄ i, Y i)) := by
  rcases Finite.exists_equiv_fin Œπ with ‚ü®n, ‚ü®e‚ü©‚ü©
  have H‚ÇÅ : IsPullbackQuotientMap (f _ ‚àò' ¬∑ : (‚àÄ k, X (e.symm k)) ‚Üí _) := piMap_fin fun _ ‚Ü¶ h _
  have H‚ÇÇ : IsPullbackQuotientMap
      (fun x k ‚Ü¶ f (e.symm k) (x (e.symm k)) : (‚àÄ i, X i) ‚Üí (‚àÄ k, Y (e.symm k))) :=
    H‚ÇÅ.comp (Homeomorph.piCongrLeft e.symm).symm.isPullbackQuotientMap
  convert (Homeomorph.piCongrLeft e.symm).isPullbackQuotientMap.comp H‚ÇÇ with x
  ext y i
  rcases e.symm.surjective i with ‚ü®k, rfl‚ü©
  dsimp [(¬∑ ‚àò' ¬∑)]
  rw [Equiv.piCongrLeft'_symm_apply_apply]

theorem of_forall_pullback {f : X ‚Üí Y} (hf : Continuous f)
    (h : ‚àÄ (Z : Type v) (z : Z) (l : Filter Z) (e : Z ‚âÉ Y), Tendsto e l (ùìù (e z)) ‚Üí
      letI : TopologicalSpace Z := nhdsAdjoint z l
      QuotientMap (Pullback.snd : f.Pullback e ‚Üí Z)) :
    IsPullbackQuotientMap f := by
  refine ‚ü®hf, fun {y l'} hyl' ‚Ü¶ ?_‚ü©
  obtain ‚ü®Z, z, e, l, rfl, hlBot, hlz, hll'‚ü© : ‚àÉ (Z : Type v) (z : Z) (e : Z ‚âÉ Y) (l : Filter Z),
      e z = y ‚àß l.NeBot ‚àß Tendsto e l (ùìù y) ‚àß Tendsto e l l' :=
    ‚ü®Y, y, .refl _, ùìù y ‚äì l', rfl, hyl', inf_le_left, inf_le_right‚ü©
  letI := nhdsAdjoint z l
  by_contra! H
  have hzo : IsOpen {z} := by
    rw [‚Üê (h Z z l e hlz).isOpen_preimage, isOpen_iff_mem_nhds]
    rintro ‚ü®‚ü®x, z‚ü©, hxz : f x = e z‚ü© rfl
    obtain ‚ü®U, hU, s, hs, hUS‚ü© : ‚àÉ U ‚àà ùìù x, ‚àÉ s ‚àà l', Disjoint U (f ‚Åª¬π' s) := by
      simpa only [(basis_sets _).clusterPt_iff (l'.basis_sets.comap _), not_forall, id, exists_prop,
        ‚Üê not_disjoint_iff_nonempty_inter.not_right] using H x hxz
    have : insert z (e ‚Åª¬π' s) ‚àà ùìù z := by
      rw [nhds_nhdsAdjoint_same]
      exact union_mem_sup singleton_mem_pure (hll' hs)
    rw [nhds_subtype_eq_comap]
    filter_upwards [preimage_mem_comap <| prod_mem_nhds hU this]
    suffices ‚àÄ x' z', f x' = e z' ‚Üí x' ‚àà U ‚Üí e z' ‚àà s ‚Üí z' = z by
      simpa [Pullback.snd, or_imp]
    intro x' z' hx'z' hx' hz'
    refine absurd ?_ (disjoint_left.1 hUS hx')
    rwa [mem_preimage, hx'z']
  obtain rfl : l = pure z := hlBot.eq_pure_iff.2 (hzo rfl)
  rcases (h Z z (pure z) e hlz).surjective z with ‚ü®‚ü®‚ü®x', z‚ü©, heq‚ü©, rfl‚ü©
  refine H x' heq (ClusterPt.mono ?_ (comap_mono hll'))
  simp only [map_pure, Pullback.snd, comap_pure, ‚Üê mem_closure_iff_clusterPt]
  apply subset_closure
  simp [heq]

end IsPullbackQuotientMap

structure IsProdQuotientMap (f : X ‚Üí Y) : Prop where
  toQuotientMap : QuotientMap f
  -- TODO: should we try to reformulate it with filters?
  exists_finite_image_mem_nhds :
    ‚àÄ V : Set Y, ‚àÄ S : Set (Set X), (‚àÄ s ‚àà S, IsOpen s) ‚Üí (‚ãÉ‚ÇÄ S = f ‚Åª¬π' V) ‚Üí
      ‚àÄ y ‚àà V, ‚àÉ T ‚äÜ S, T.Finite ‚àß exterior (f '' ‚ãÉ‚ÇÄ T) ‚àà ùìù y

theorem IsPullbackQuotientMap.isProdQuotientMap {f : X ‚Üí Y} (h : IsPullbackQuotientMap f) :
    IsProdQuotientMap f where
  toQuotientMap := h.quotientMap
  exists_finite_image_mem_nhds V S hSo hSV y hy := by
    rw [isPullbackQuotientMap_iff_exists_finite_image_mem_nhds] at h
    rcases h.2 y S hSo (hSV.symm ‚ñ∏ preimage_mono (singleton_subset_iff.2 hy)) with ‚ü®T, hTS, hTf, hT‚ü©
    exact ‚ü®T, hTS, hTf, mem_of_superset hT subset_exterior‚ü©

theorem IsOpenQuotientMap.isProdQuotientMap {f : X ‚Üí Y} (h : IsOpenQuotientMap f) :
    IsProdQuotientMap f :=
  h.isPullbackQuotientMap.isProdQuotientMap

namespace IsProdQuotientMap
  
protected theorem id : IsProdQuotientMap (id : X ‚Üí X) :=
  IsOpenQuotientMap.id.isProdQuotientMap

theorem IsProdQuotientMap.comp

-- theorem prodMap {X' Y' : Type*} [TopologicalSpace X'] [TopologicalSpace Y']
--     {f : X ‚Üí Y} (hf : IsProdQuotientMap f) {g : X' ‚Üí Y'} (hg : IsProdQuotientMap g) :
--     IsProdQuotientMap (Prod.map f g) := by
--   sorry

end IsProdQuotientMap
