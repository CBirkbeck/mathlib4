import Mathlib.Topology.Compactness.Compact

open Function Set Filter TopologicalSpace
open scoped Topology

variable {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]

structure IsOpenQuotientMap (f : X ‚Üí Y) : Prop where
  surjective : Surjective f
  continuous : Continuous f
  isOpenMap : IsOpenMap f

namespace IsOpenQuotientMap

theorem prodMap {X' Y' : Type*} [TopologicalSpace X'] [TopologicalSpace Y']
    {f : X ‚Üí Y} {g : X' ‚Üí Y'} (hf : IsOpenQuotientMap f) (hg : IsOpenQuotientMap g) :
    IsOpenQuotientMap (Prod.map f g) where
  surjective := hf.surjective.prodMap hg.surjective
  continuous := hf.continuous.prod_map hg.continuous
  isOpenMap := hf.isOpenMap.prod hg.isOpenMap

theorem piMap {Œπ : Type*} {X Y : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (X i)]
    [‚àÄ i, TopologicalSpace (Y i)] {f : ‚àÄ i, X i ‚Üí Y i} (hf : ‚àÄ i, IsOpenQuotientMap (f i)) :
    IsOpenQuotientMap (fun (x : ‚àÄ i, X i) (i : Œπ) ‚Ü¶ f i (x i)) where
  surjective := surjective_pi_map fun i ‚Ü¶ (hf i).surjective
  continuous := continuous_dcomp fun i ‚Ü¶ (hf i).continuous
  isOpenMap := IsOpenMap.dcomp (fun i ‚Ü¶ (hf i).isOpenMap)
    (eventually_of_forall fun i ‚Ü¶ (hf i).surjective)

protected theorem comp {Z : Type*} [TopologicalSpace Z] {f : Y ‚Üí Z} {g : X ‚Üí Y}
    (hf : IsOpenQuotientMap f) (hg : IsOpenQuotientMap g) : IsOpenQuotientMap (f ‚àò g) where
  surjective := hf.surjective.comp hg.surjective
  continuous := hf.continuous.comp hg.continuous
  isOpenMap := hf.isOpenMap.comp hg.isOpenMap

protected theorem id : IsOpenQuotientMap (id : X ‚Üí X) :=
  ‚ü®surjective_id, continuous_id, IsOpenMap.id‚ü©

end IsOpenQuotientMap  

@[mk_iff]
structure IsPullbackQuotientMap (f : X ‚Üí Y) : Prop where
  continuous : Continuous f
  exists_clusterPt_comap {y : Y} {l : Filter Y} (h : ClusterPt y l) :
    ‚àÉ x, f x = y ‚àß ClusterPt x (comap f l)

nonrec theorem TopologicalSpace.IsTopologicalBasis.isPullbackQuotientMap_iff {B : Set (Set X)}
    (hB : IsTopologicalBasis B) {f : X ‚Üí Y} :
    IsPullbackQuotientMap f ‚Üî
      Continuous f ‚àß ‚àÄ y : Y, ‚àÄ S ‚äÜ B, (f ‚Åª¬π' {y} ‚äÜ ‚ãÉ‚ÇÄ S) ‚Üí
        ‚àÉ T ‚äÜ S, T.Finite ‚àß f '' ‚ãÉ‚ÇÄ T ‚àà ùìù y := by
  simp only [isPullbackQuotientMap_iff, clusterPt_iff_not_disjoint, disjoint_comap_iff_map]
  refine .and .rfl <| forall_congr' fun y ‚Ü¶ ?_
  constructor
  ¬∑ intro h S hSB hfS
    contrapose! h
    refine ‚ü®‚®Ö s ‚àà S, ùìü ((f '' s)·∂ú), ?_, fun x hx ‚Ü¶ ?_‚ü©
    ¬∑ rw [iInf_subtype', (hasBasis_iInf_principal_finite _).disjoint_iff_right]
      rintro ‚ü®T, hTf, hTy‚ü©
      refine h (Subtype.val '' T) (image_subset_iff.2 fun x _ ‚Ü¶ x.2) (hTf.image _) ?_
      simpa only [sUnion_image, image_iUnion, compl_iInter, compl_compl] using hTy
    ¬∑ rcases @hfS x hx with ‚ü®s, hsS, hxs‚ü©
      rw [((basis_sets _).map f).disjoint_iff_left]
      refine ‚ü®s, hB.mem_nhds (hSB hsS) hxs, ?_‚ü©
      exact mem_iInf_of_mem s <| mem_iInf_of_mem hsS <| mem_principal_self _
  ¬∑ intro h l H
    contrapose! H
    simp only [l.basis_sets.disjoint_iff_right] at H
    choose! s hsl hsx using H
    set S := B ‚à© ‚ãÉ (x : X) (_ : f x = y), {U : Set X | Disjoint U (f ‚Åª¬π' s x)}
    obtain ‚ü®T, hTS, hTf, hTy‚ü© : ‚àÉ T ‚äÜ S, T.Finite ‚àß f '' ‚ãÉ‚ÇÄ T ‚àà ùìù y := by
      refine h S inter_subset_left fun x hx ‚Ü¶ ?_
      rcases hB.mem_nhds_iff.1 (mem_map.1 <| hsx x hx) with ‚ü®U, hUB, hxU, hU‚ü©
      refine ‚ü®U, ‚ü®hUB, mem_iUnion‚ÇÇ.2 ‚ü®x, hx, ?_‚ü©‚ü©, hxU‚ü©
      rwa [mem_setOf, disjoint_left]
    refine disjoint_of_disjoint_of_mem disjoint_compl_right hTy ?_
    rw [sUnion_eq_biUnion, image_iUnion‚ÇÇ, compl_iUnion‚ÇÇ, biInter_mem hTf]
    intro U hUT
    rcases mem_iUnion‚ÇÇ.1 (hTS hUT).2 with ‚ü®x, hxy, hUx‚ü©
    filter_upwards [hsl x hxy] with y' hy' ‚ü®x', hx'U, hx'y‚ü©
    refine disjoint_left.mp hUx hx'U ?_
    rwa [mem_preimage, hx'y]

theorem isPullbackQuotientMap_iff_exists_finite_image_mem_nhds {f : X ‚Üí Y} :
    IsPullbackQuotientMap f ‚Üî
      Continuous f ‚àß ‚àÄ y : Y, ‚àÄ S : Set (Set X),
        (‚àÄ s ‚àà S, IsOpen s) ‚Üí (f ‚Åª¬π' {y} ‚äÜ ‚ãÉ‚ÇÄ S) ‚Üí ‚àÉ T ‚äÜ S, T.Finite ‚àß f '' ‚ãÉ‚ÇÄ T ‚àà ùìù y :=
  isTopologicalBasis_opens.isPullbackQuotientMap_iff

theorem IsOpenQuotientMap.isPullbackQuotientMap {f : X ‚Üí Y} (hf : IsOpenQuotientMap f) :
    IsPullbackQuotientMap f where
  continuous := hf.continuous
  exists_clusterPt_comap {y l} h := by
    rcases hf.surjective y with ‚ü®x, rfl‚ü©
    refine ‚ü®x, rfl, ?_‚ü©
    -- TODO: move to a lemma about `IsOpenMap`
    rw [ClusterPt, ‚Üê map_neBot_iff, Filter.push_pull]
    exact h.neBot.mono <| inf_le_inf_right _ (hf.isOpenMap.nhds_le _)

namespace IsPullbackQuotientMap

protected theorem surjective {f : X ‚Üí Y} (hf : IsPullbackQuotientMap f) : Surjective f := fun _ ‚Ü¶
  (hf.exists_clusterPt_comap (.of_le_nhds le_rfl)).imp fun _ ‚Ü¶ And.left

protected theorem id : IsPullbackQuotientMap (id : X ‚Üí X) :=
  IsOpenQuotientMap.id.isPullbackQuotientMap

theorem exists_finset_biUnion_image_mem_nhds {Œπ : Type*} {f : X ‚Üí Y} (hf : IsPullbackQuotientMap f)
    {y : Y} {s : Œπ ‚Üí Set X} (hys : f ‚Åª¬π' {y} ‚äÜ ‚ãÉ i, s i) (hso : ‚àÄ i, IsOpen (s i)) :
    ‚àÉ t : Finset Œπ, ‚ãÉ i ‚àà t, f '' s i ‚àà ùìù y := by
  classical
  rw [isPullbackQuotientMap_iff_exists_finite_image_mem_nhds] at hf
  rcases hf.2 y (range s) (forall_mem_range.2 hso) hys with ‚ü®T, hTs, hTf, hTy‚ü©
  lift T to Finset (Set X) using hTf
  rw [‚Üê image_univ, Finset.subset_image_iff] at hTs
  rcases hTs with ‚ü®t, -, rfl‚ü©
  refine ‚ü®t, ?_‚ü©
  simpa [image_iUnion] using hTy

theorem exists_finite_subset_biUnion_image_mem_nhds
    {Œπ : Type*} {f : X ‚Üí Y} {I : Set Œπ} {y : Y} {s : Œπ ‚Üí Set X}
    (hf : IsPullbackQuotientMap f) (hys : f ‚Åª¬π' {y} ‚äÜ ‚ãÉ i ‚àà I, s i) (hso : ‚àÄ i ‚àà I, IsOpen (s i)) :
    ‚àÉ t ‚äÜ I, t.Finite ‚àß ‚ãÉ i ‚àà t, f '' s i ‚àà ùìù y := by
  rw [biUnion_eq_iUnion] at hys
  rcases hf.exists_finset_biUnion_image_mem_nhds hys (Subtype.forall.2 hso) with ‚ü®t, ht‚ü©
  refine ‚ü®Subtype.val '' t.toSet, Subtype.coe_image_subset _ _, t.finite_toSet.image _, ?_‚ü©
  rwa [biUnion_image]

protected theorem comp {Z : Type*} [TopologicalSpace Z] {f : Y ‚Üí Z} {g : X ‚Üí Y}
    (hf : IsPullbackQuotientMap f) (hg : IsPullbackQuotientMap g) :
    IsPullbackQuotientMap (f ‚àò g) where
  continuous := hf.continuous.comp hg.continuous
  exists_clusterPt_comap {z l} h := by
    rcases hf.exists_clusterPt_comap h with ‚ü®y, rfl, hy‚ü©
    rcases hg.exists_clusterPt_comap hy with ‚ü®x, rfl, hx‚ü©
    rw [comap_comap] at hx
    exact ‚ü®x, rfl, hx‚ü©

protected theorem pullback {Z : Type*} [TopologicalSpace Z] {f : X ‚Üí Y}
    (hf : IsPullbackQuotientMap f) {g : Z ‚Üí Y} (hg : Continuous g) :
    IsPullbackQuotientMap (Function.Pullback.snd : f.Pullback g ‚Üí Z) where
  continuous := continuous_snd.comp continuous_subtype_val
  exists_clusterPt_comap {z l} h := by
    have : ClusterPt (g z) (map g (ùìù z ‚äì l)) := by
      refine ClusterPt.map ?_ hg.continuousAt tendsto_map
      rwa [ClusterPt, inf_left_idem]
    rcases hf.exists_clusterPt_comap this with ‚ü®x, hxz, hxl‚ü©
    refine ‚ü®‚ü®(x, z), hxz‚ü©, rfl, ?_‚ü©
    rw [(embedding_subtype_val.basis_nhds
      ((basis_sets _).prod_nhds (basis_sets _))).clusterPt_iff (comap_hasBasis _ _)]
    rintro ‚ü®s, t‚ü© ‚ü®hs : s ‚àà ùìù x, ht : t ‚àà ùìù z‚ü© u hu
    rw [(basis_sets _).clusterPt_iff ((((basis_sets _).inf (basis_sets _)).map _).comap _)] at hxl
    rcases hxl hs (j := (t, u)) ‚ü®ht, hu‚ü©
      with ‚ü®x', hx's : x' ‚àà s, z', ‚ü®hz't : z' ‚àà t, hz'u : z' ‚àà u‚ü©, hfxz'‚ü©
    refine ‚ü®‚ü®(x', z'), hfxz'.symm‚ü©, ‚ü®hx's, hz't‚ü©, hz'u‚ü©

end IsPullbackQuotientMap

structure IsProdQuotientMap (f : X ‚Üí Y) : Prop where
  surjective : Surjective f
  continuous : Continuous f
  exists_finite_image_mem_nhds :
    ‚àÄ V : Set Y, ‚àÄ S : Set (Set X), (‚àÄ s ‚àà S, IsOpen s) ‚Üí (‚ãÉ‚ÇÄ S = f ‚Åª¬π' V) ‚Üí
      ‚àÄ y ‚àà V, ‚àÉ T ‚äÜ S, T.Finite ‚àß (ùìùÀ¢ (f '' ‚ãÉ‚ÇÄ T)).ker ‚àà ùìù y

namespace IsProdQuotientMap

-- theorem quotientMap {f : X ‚Üí Y} (hf : IsProdQuotientMap f) : QuotientMap f := by
--   refine quotientMap_iff.2
--     ‚ü®hf.surjective, fun V ‚Ü¶ ‚ü®fun h ‚Ü¶ h.preimage hf.continuous, fun ho ‚Ü¶ ?_‚ü©‚ü©
--   refine isOpen_iff_mem_nhds.2 fun y hy ‚Ü¶ ?_
--   obtain ‚ü®T, hTV, -, hTy‚ü© : ‚àÉ T ‚äÜ {f ‚Åª¬π' V}, T.Finite ‚àß f '' ‚ãÉ‚ÇÄ T ‚àà ùìù y :=
--     hf.exists_finite_image_mem_nhds V {f ‚Åª¬π' V} (sUnion_singleton _) (by simp [ho]) y hy
--   calc
--     V = f '' ‚ãÉ‚ÇÄ {f ‚Åª¬π' V} := by simp [hf.surjective]
--     _ ‚äá f '' ‚ãÉ‚ÇÄ T := by gcongr
--     _ ‚àà ùìù y := hTy

-- theorem of_open {f : X ‚Üí Y} (hfc : Continuous f) (hfo : IsOpenMap f) (hsurj : Surjective f) :
--     IsProdQuotientMap f := by
--   refine ‚ü®hsurj, hfc, fun V S hSV hSo y hy ‚Ü¶ ?_‚ü©
--   rcases hsurj y with ‚ü®x, rfl‚ü©
--   rw [‚Üê mem_preimage, ‚Üê hSV, mem_sUnion] at hy
--   rcases hy with ‚ü®U, hUS, hxU‚ü©
--   refine ‚ü®{U}, by simp [hUS], by simp, ?_‚ü©
--   simpa using hfo.image_mem_nhds ((hSo U hUS).mem_nhds hxU)

-- theorem of_locallyCompact [LocallyCompactSpace Y] {f : X ‚Üí Y} (hf : QuotientMap f) :
--     IsProdQuotientMap f := by
--   refine ‚ü®hf.surjective, hf.continuous, fun V S hSV hSo y hy ‚Ü¶ ?_‚ü©
  

-- protected theorem id : IsProdQuotientMap (id : X ‚Üí X) :=
--   .of_open continuous_id IsOpenMap.id surjective_id
  
-- theorem prodMap {X' Y' : Type*} [TopologicalSpace X'] [TopologicalSpace Y']
--     {f : X ‚Üí Y} (hf : IsProdQuotientMap f) {g : X' ‚Üí Y'} (hg : IsProdQuotientMap g) :
--     IsProdQuotientMap (Prod.map f g) := by
--   sorry

end IsProdQuotientMap
