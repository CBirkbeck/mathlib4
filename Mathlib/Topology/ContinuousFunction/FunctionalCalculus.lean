import Mathlib.Data.Polynomial.AlgebraMap
import Mathlib.Topology.ContinuousFunction.Algebra
import Mathlib.Algebra.Algebra.Spectrum
import Mathlib.Topology.ContinuousFunction.Polynomial
import Mathlib.Topology.ContinuousFunction.StoneWeierstrass

open Polynomial

/- note: because `H` is marked as an `outParam` we can't require that there are different morphism
types for the same kind of function space. -/

/-- Here, `F` is generally some kind of algebra of functions, and `H` is a
type of algebra homomorphisms from `F` to `A`. We are agnostic about exactly what
requirements we have so that by placing sufficiently strong type class assumptions
we can get different morphisms. -/
class FunctionalCalculus (H : outParam (Type _)) {F A : Type _} [FunLike H F (fun _ ‚Ü¶ A)]
    (f : F) (a : A) where
  toHom : H
  map_point' : toHom f = a

namespace FunctionalCalculus

def fc {H F A : Type _} [FunLike H F (fun _ ‚Ü¶ A)] (f : F) (a : A)
    [FunctionalCalculus H f a] : H :=
  FunctionalCalculus.toHom f a

@[simp]
lemma map_point {H F A : Type _} [FunLike H F (fun _ ‚Ü¶ A)] {f : F} {a : A}
    [FunctionalCalculus H f a] : (fc f a) f = a :=
  FunctionalCalculus.map_point'

class FunctionalCalculusComp (H‚ÇÅ H‚ÇÇ H‚ÇÉ : Type _) {F‚ÇÅ F‚ÇÇ F‚ÇÉ A : Type}
    [FunLike H‚ÇÅ F‚ÇÅ (fun _ ‚Ü¶ A)] [FunLike H‚ÇÇ F‚ÇÇ (fun _ ‚Ü¶ A)] [FunLike H‚ÇÉ F‚ÇÉ (fun _ ‚Ü¶ A)]
    (cmp : F‚ÇÇ ‚Üí F‚ÇÉ) (f f‚ÇÅ : F‚ÇÅ) (f‚ÇÇ : F‚ÇÇ) (f‚ÇÉ : F‚ÇÉ) (a b : A)
    [FunctionalCalculus H‚ÇÅ f‚ÇÅ a]
    [FunctionalCalculus H‚ÇÇ f‚ÇÇ (fc f‚ÇÅ a f)]
    [FunctionalCalculus H‚ÇÉ f‚ÇÉ b] where
  fc_comp' : ‚àÄ g : F‚ÇÇ, fc f‚ÇÇ (fc f‚ÇÅ a f) g = fc f‚ÇÉ b (cmp g)

-- applied to `f‚ÇÇ`, this means
-- `fc f‚ÇÅ a = fc f‚ÇÇ (fc f‚ÇÅ a f) f‚ÇÇ = fc f‚ÇÉ b (cmp f‚ÇÇ)`

instance {R A : Type _} [CommSemiring R] [Semiring A] [Algebra R A] {a : A} :
    FunctionalCalculus (R[X] ‚Üí‚Çê[R] A) (X : R[X]) a where
  toHom := aeval a
  map_point' := aeval_X a

lemma fc_polynomial_def {R A : Type _} [CommSemiring R] [Semiring A] [Algebra R A] {a : A} :
    fc (X : R[X]) a = aeval a :=
  rfl

example {R A : Type _} [CommSemiring R] [Semiring A] [Algebra R A] {a : A} :
    fc (X : R[X]) a X = a :=
  map_point -- `by simp` fails?

noncomputable instance {R A : Type _}
    [CommSemiring R] [Semiring A] [Algebra R A] {a : A} {p : R[X]} :
    FunctionalCalculus (R[X] ‚Üí‚Çê[R] A) (aeval (R := R) p X) (fc (X : R[X]) a p) where
  toHom := aeval a
  map_point' := by
    simp only [aeval_X]
    rfl

lemma fc_polynomial_def' {R A : Type _} [CommSemiring R] [Semiring A] [Algebra R A] {a : A}
    (p : R[X]) : fc (aeval (R := R) p X) (fc (X : R[X]) a p) = aeval a :=
  rfl

noncomputable instance {R A : Type _} [CommSemiring R] [Semiring A] [Algebra R A] {a : A} {p : R[X]} :
    FunctionalCalculusComp (R[X] ‚Üí‚Çê[R] A) (R[X] ‚Üí‚Çê[R] A) (R[X] ‚Üí‚Çê[R] A)
      (aeval (R := R) p) p (X : R[X]) (X : R[X]) (X : R[X]) a a where
  fc_comp' := by
    simp_rw [fc_polynomial_def']
    simp only [fc_polynomial_def, aeval_algHom, AlgHom.coe_comp, Function.comp_apply, forall_const]

end FunctionalCalculus

open FunctionalCalculus

class MapsSpectrum {H F R A : Type _} [CommSemiring R] [Ring A] [Algebra R A]
    [FunLike H F (fun _ ‚Ü¶ A)] (f : F) (a : A) [FunctionalCalculus H f a] (im : F ‚Üí Set R) where
  maps_spectrum : ‚àÄ g : F, spectrum R (fc f a g) = im g

class UniqueFunctionalCalculus {H F A : Type _} [FunLike H F (fun _ ‚Ü¶ A)]
    {f : F} {a : A} (p : FunctionalCalculus H f a ‚Üí Prop) where
  fc_eq : ‚àÄ fc‚ÇÅ fc‚ÇÇ : FunctionalCalculus H f a,
    p fc‚ÇÅ ‚Üí p fc‚ÇÇ ‚Üí @fc _ _ _ _ _ _ fc‚ÇÅ = @fc _ _ _ _ _ _ fc‚ÇÇ

variable {ùïú A : Type _} [IsROrC ùïú] [Ring A] [StarRing A] [Algebra ùïú A] [TopologicalSpace A]
    [StarModule ùïú A]

/-- A continuous functional calculus (over either `‚Ñù` or `‚ÑÇ`) for an element with compact
spectrum is unique. This utilizes the Stone-Weierstrass theorem. -/
instance {ùïú A : Type _} [IsROrC ùïú] [Ring A] [StarRing A] [Algebra ùïú A] [TopologicalSpace A]
    [StarModule ùïú A] [T2Space A] {a : A} [CompactSpace (spectrum ùïú a)] :
    UniqueFunctionalCalculus
      (fun œÜ : FunctionalCalculus (C(spectrum ùïú a, ùïú) ‚Üí‚ãÜ‚Çê[ùïú] A)
        (Polynomial.toContinuousMapOnAlgHom (spectrum ùïú a) (X : ùïú[X])) a ‚Ü¶ Continuous œÜ.toHom) where
  fc_eq := fun fc‚ÇÅ fc‚ÇÇ h‚ÇÅ h‚ÇÇ ‚Ü¶
    ContinuousMap.starAlgHom_ext_map_X h‚ÇÅ h‚ÇÇ <| fc‚ÇÅ.map_point'.trans fc‚ÇÇ.map_point'.symm
