
import Mathlib.Data.Complex.Exponential
import Mathlib.Analysis.Complex.LocallyUniformLimit

open Filter Function Complex

open scoped Interval Topology BigOperators Nat Classical


variable {Œ± Œπ: Type*}

theorem prod_be_exp  (f : Œπ ‚Üí ‚ÑÇ) (s : Finset Œπ) :
    ‚àè i in s, (1 + Complex.abs (f i)) ‚â§ Real.exp (‚àë i in s, Complex.abs (f i)) := by
  rw [Real.exp_sum]
  apply Finset.prod_le_prod
  intro i _
  apply add_nonneg
  linarith
  apply Complex.abs.nonneg
  intro i _
  rw [add_comm]
  apply Real.add_one_le_exp


theorem unif_prod_bound (F : Œπ ‚Üí Œ± ‚Üí ‚ÑÇ)
    (hb : ‚àÉ T : ‚Ñù, ‚àÄ x : Œ± ,  ‚àë' n : Œπ, Complex.abs (F n x) ‚â§ T)
    (hs : ‚àÄ x : Œ±, Summable fun n : Œπ => Complex.abs (F n x)) :
    ‚àÉ C : ‚Ñù, 0 < C ‚àß ‚àÄ (s : Finset Œπ) (x : Œ±), ‚àè i in s, (1 + Complex.abs (F i x)) ‚â§ C :=
  by
  obtain ‚ü®T, ht‚ü© := hb
  have HB :
    ‚àÄ (s : Finset Œπ) (a : Œ±), ‚àë i in s, Complex.abs (F i a) ‚â§ ‚àë' n : Œπ, Complex.abs (F n a) :=
    by
    intro n a
    apply sum_le_tsum
    intro b _
    apply Complex.abs.nonneg
    apply hs a
  have hexp : 0 < Real.exp T := by have := Real.exp_pos T; apply this
  refine' ‚ü®Real.exp T, _‚ü©
  simp [hexp]
  intro n x
  apply le_trans (prod_be_exp _ _)
  simp
  apply le_trans (HB n x)
  exact ht x

theorem unif_prod_bound2 (F : Œπ ‚Üí Œ± ‚Üí ‚ÑÇ)
    (hs : ‚àÄ x : Œ±, Summable fun n : Œπ => Complex.abs (F n x)) (s : Finset Œπ) (x : Œ±):
        ‚àè i in s, (1 + Complex.abs (F i x)) ‚â§ Real.exp (‚àë' n : Œπ, Complex.abs (F n x)) := by
  have HB :
    ‚àÄ (s : Finset Œπ) (a : Œ±), ‚àë i in s, Complex.abs (F i a) ‚â§ ‚àë' n : Œπ, Complex.abs (F n a) :=
    by
    intro n a
    apply sum_le_tsum
    intro b _
    apply Complex.abs.nonneg
    apply hs a
  apply le_trans (prod_be_exp _ _)
  simp
  apply le_trans (HB s x)
  rfl






lemma tenstoUniformlyOn_const_self {Œ± Œ≤ : Type*} (Œπ) [Preorder Œπ] [UniformSpace Œ±] [UniformSpace Œ≤]
    (a : Œ± ‚Üí Œ≤) (K : Set Œ±) : TendstoUniformlyOn (fun _: Œπ => a) a atTop K:= by
    refine TendstoUniformlyOnFilter.tendstoUniformlyOn ?_
    rw [tendstoUniformlyOnFilter_iff_tendsto]
    exact tendsto_diag_uniformity (fun x ‚Ü¶ a x.2) (_ √óÀ¢ ùìü K)

theorem tsum_unif23 {Œ± Œπ: Type*} [Preorder Œπ] [UniformSpace Œ±] [AddCommMonoid Œ±] [ AddGroup Œ±]
    [UniformAddGroup Œ±] (F : Œπ ‚Üí Œ± ‚Üí ‚ÑÇ) (K : Set Œ±)
    (hf : TendstoUniformlyOn (fun n : Finset Œπ => fun a : Œ± => ‚àë i in n, (F i a))
        (fun a : Œ± => ‚àë' n : Œπ, (F n a)) Filter.atTop K)
    (hs : ‚àÄ x : Œ±, x ‚àà K ‚Üí  Summable fun n : Œπ => (F n x)) :
    TendstoUniformlyOn (fun k : Finset Œπ => fun a : Œ± => ‚àë' n : {x // x ‚àâ k}, (F (n) a)) 0 Filter.atTop K := by
  have := (tenstoUniformlyOn_const_self (Finset Œπ) (fun a : Œ± => ‚àë' n : Œπ, (F n a)) K).sub hf
  simp only [sub_self] at this
  apply this.congr
  simp only [Pi.sub_apply, eventually_atTop, ge_iff_le]
  use ‚ä•
  intro b _
  intro x hx
  simp only [Pi.sub_apply]
  rw [‚Üê sum_add_tsum_compl (s :=b)]
  ring_nf
  congr
  exact hs x hx


theorem tsum_unif2 (F : ‚Ñï ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (K : Set ‚ÑÇ)
    (hf : TendstoUniformlyOn (fun n : ‚Ñï => fun a : ‚ÑÇ => ‚àë i in Finset.range n,  (F i a))
        (fun a : ‚ÑÇ => ‚àë' n : ‚Ñï, (F n a)) Filter.atTop K)
    (hs : ‚àÄ x : ‚ÑÇ, x ‚àà K ‚Üí  Summable fun n : ‚Ñï => (F n x)) :
    TendstoUniformlyOn (fun k : ‚Ñï => fun a : ‚ÑÇ => ‚àë' n : ‚Ñï, (F (n + k) a)) 0 Filter.atTop K := by
  have := (tenstoUniformlyOn_const_self ‚Ñï (fun a : ‚ÑÇ => ‚àë' n : ‚Ñï, (F n a)) K).sub hf
  simp only [sub_self] at this
  apply this.congr
  simp only [Pi.sub_apply, eventually_atTop, ge_iff_le]
  use 1
  intro b _
  intro x hx
  simp only [Pi.sub_apply]
  rw [‚Üê sum_add_tsum_nat_add b]
  ring
  exact hs x hx


theorem sum_prod_unif_conv23 (F : ‚Ñï ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (g : ‚ÑÇ ‚Üí ‚ÑÇ) (K : Set  ‚ÑÇ)
    (hf :
      TendstoUniformlyOn (fun n : Finset ‚Ñï => fun a : ‚ÑÇ => ‚àë i in n, (F i a))
        (fun a : ‚ÑÇ  => ‚àë' n : ‚Ñï, (F n a)) Filter.atTop K)
    (hb : ‚àÉ T : ‚Ñù, ‚àÄ x :  ‚ÑÇ, x ‚àà K ‚Üí ‚àë' n : ‚Ñï, Complex.abs (F n x) ‚â§ T)
    (hs : ‚àÄ x :  K, Summable fun n : ‚Ñï => (F n x))
    (hpp :  Multipliable fun n a => 1 + F n a):
    TendstoUniformlyOn (fun N : Finset ‚Ñï => fun a :  ‚ÑÇ => ‚àè b in N, (1 + F b a))
      (fun x => ‚àè' n,  (fun a => 1 + F n a) x ) Filter.atTop
      K := by

  apply UniformCauchySeqOn.tendstoUniformlyOn_of_tendsto _
  have := hpp.hasProd
  rw [HasProd] at this
  have ht := this.apply_nhds
  intro x hx

  convert ht x
  exact Eq.symm (Finset.prod_apply x _ fun c a ‚Ü¶ 1 + F c a)
  exact Eq.symm (tprod_apply hpp)
  simp at hs
  have tt := (tsum_unif23  F K hf hs)
  have tt2 := tt.uniformCauchySeqOn
  have ft2 := hf.uniformCauchySeqOn
  rw [Metric.uniformCauchySeqOn_iff] at *
  intro Œµ hŒµ

  obtain ‚ü®T, hT‚ü© := hb
  have hdelta := exists_pos_mul_lt hŒµ (Real.exp T)
  have tt3:= tt2 (Real.exp T) (by exact Real.exp_pos T)
  obtain ‚ü®Œ¥, hŒ¥‚ü© := hdelta
  obtain ‚ü® N1, hN1‚ü© := tt3
  obtain ‚ü® N2, hN2‚ü© := ft2 Œ¥ hŒ¥.1
  use N1 ‚äî N2
  intro n hn m hm x hx
  have hN1 := hN1 n ?_ m ?_ x hx
  have hN2 := hN2 n ?_ m ?_ x hx
  have AB := mul_le_mul hN1.le hN2.le (by exact dist_nonneg) (by exact Real.exp_nonneg T)
  rw [dist_eq_norm] at *
  apply lt_of_le_of_lt (norm_sub_le _ _)
  rw [Metric.tendstoUniformlyOn_iff] at tt



  --apply lt_of_le_of_lt AB



  sorry
  simp





theorem sum_prod_unif_conv2 (F : ‚Ñï ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (g : ‚ÑÇ ‚Üí ‚ÑÇ) (K : Set  ‚ÑÇ)
    (hf :
      TendstoUniformlyOn (fun n : ‚Ñï => fun a : ‚ÑÇ => ‚àë i in Finset.range n, (F i a))
        (fun a : ‚ÑÇ  => ‚àë' n : ‚Ñï, (F n a)) Filter.atTop K)
    (hb : ‚àÉ T : ‚Ñù, ‚àÄ x :  ‚ÑÇ, x ‚àà K ‚Üí ‚àë' n : ‚Ñï, Complex.abs (F n x) ‚â§ T)
    (hs : ‚àÄ x :  K, Summable fun n : ‚Ñï => (F n x))
    (hpp :  Multipliable fun n a => 1 + F n a):
    TendstoUniformlyOn (fun N : Finset ‚Ñï => fun a :  ‚ÑÇ => ‚àè b in N, (1 + F b a))
      (fun x => ‚àè' n,  (fun a => 1 + F n a) x ) Filter.atTop
      K := by

  apply UniformCauchySeqOn.tendstoUniformlyOn_of_tendsto _
  have := hpp.hasProd
  rw [HasProd] at this
  have ht := this.apply_nhds
  intro x hx

  convert ht x
  exact Eq.symm (Finset.prod_apply x _ fun c a ‚Ü¶ 1 + F c a)
  exact Eq.symm (tprod_apply hpp)
  simp at hs
  have tt := (tsum_unif2  F K hf hs)
  have tt2 := tt.uniformCauchySeqOn
  have ft2 := hf.uniformCauchySeqOn
  rw [Metric.uniformCauchySeqOn_iff] at *
  intro Œµ hŒµ
  have tt3:= tt2 Œµ hŒµ
  simp at *
  --have hdelta := exists_pos_mul_lt hŒµ (Real.exp (‚àë' n : ‚Ñï, Complex.abs (F n x)))



  sorry


theorem tsum_unif (F : ‚Ñï ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (K : Set ‚ÑÇ)
    (hf :
      TendstoUniformlyOn (fun n : ‚Ñï => fun a : ‚ÑÇ => ‚àë i in Finset.range n, Complex.abs (F i a))
        (fun a : ‚ÑÇ => ‚àë' n : ‚Ñï, Complex.abs (F n a)) Filter.atTop K)
    (hs : ‚àÄ x : ‚ÑÇ, Summable fun n : ‚Ñï => Complex.abs (F n x)) :
    ‚àÄ Œµ : ‚Ñù,
      0 < Œµ ‚Üí
        ‚àÉ N : ‚Ñï,
          ‚àÄ (n : ‚Ñï) (x : ‚ÑÇ),
            x ‚àà K ‚Üí N ‚â§ n ‚Üí Complex.abs (‚àë' i : ‚Ñï, Complex.abs (F (i + N) x)) < Œµ :=
  by
  rw [Metric.tendstoUniformlyOn_iff] at hf
  simp at hf
  intro Œµ hŒµ
  have HF := hf Œµ hŒµ
  obtain ‚ü®N, hN‚ü© := HF
  refine' ‚ü®N, _‚ü©
  intro n x hx _
  have hnn : N ‚â§ N := by rfl
  have HN2 := hN N hnn x hx
  simp_rw [dist_eq_norm] at *
  convert HN2
  rw [tsum_coe]
  rw [‚Üê norm_eq_abs]
  rw [Complex.norm_real]
  congr
  have hy := sum_add_tsum_nat_add N (hs x)
  simp at hy
  rw [‚Üê hy]
  ring

theorem tsum_unifo (F : ‚Ñï ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (K : Set ‚ÑÇ)
    (hf :
      TendstoUniformlyOn (fun n : ‚Ñï => fun a : ‚ÑÇ => ‚àë i in Finset.range n, Complex.abs (F i a))
        (fun a : ‚ÑÇ => ‚àë' n : ‚Ñï, Complex.abs (F n a)) Filter.atTop K)
    (hs : ‚àÄ x : ‚ÑÇ, Summable fun n : ‚Ñï => Complex.abs (F n x)) :
    ‚àÄ Œµ : ‚Ñù,
      0 < Œµ ‚Üí
        ‚àÉ N : ‚Ñï,
          ‚àÄ (n m : ‚Ñï) (x : ‚ÑÇ),
            x ‚àà K ‚Üí
              N ‚â§ n ‚àß N ‚â§ m ‚àß m ‚â§ n ‚Üí ‚àè i in Finset.Ico m n, (1 + Complex.abs (F i x)) - 1 ‚â§ Œµ :=
  by
  intro Œµ hŒµ
  have hl : 0 < Real.log (1 + Œµ) := by apply Real.log_pos; linarith
  have H2 := tsum_unif F K hf hs (Real.log (1 + Œµ)) hl
  obtain ‚ü®N, hN‚ü© := H2
  use N
  intro n m x hK h
  have HN2 := hN n x hK h.1
  apply le_trans (sub_le_sub_right (prod_be_exp _ _) 1)
  rw [‚Üê Real.exp_lt_exp] at HN2
  have hll : 0 < 1 + Œµ := by linarith
  rw [Real.exp_log hll] at HN2
  rw [tsub_le_iff_left]
  apply le_trans _ HN2.le
  simp
  have hss : Summable fun n : ‚Ñï => Complex.abs (F (n + N) x) :=
    by
    have := hs x
    rw [‚Üê summable_nat_add_iff N] at this
    apply this
  have := abs_tsum _ hss
  rw [abs_tsum_of_pos F x N]
  have := sum_add_tsum_nat_add N (hs x)
  apply sum_subtype_le_tsum
  constructor
  apply h.2.2
  apply h.2.1
  intro b
  apply Complex.abs.nonneg
  exact hs x

theorem sum_prod_unif_conv (F : ‚Ñï ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) (g : ‚ÑÇ ‚Üí ‚ÑÇ) (K : Set ‚ÑÇ)
    (hf :
      TendstoUniformlyOn (fun n : ‚Ñï => fun a : ‚ÑÇ => ‚àë i in Finset.range n, Complex.abs (F i a))
        (fun a : ‚ÑÇ => ‚àë' n : ‚Ñï, Complex.abs (F n a)) Filter.atTop K)
    (hb : ‚àÉ T : ‚Ñù, ‚àÄ x : ‚ÑÇ, x ‚àà K ‚Üí ‚àë' n : ‚Ñï, Complex.abs (F n x) ‚â§ T)
    (hs : ‚àÄ x : ‚ÑÇ, Summable fun n : ‚Ñï => Complex.abs (F n x))
    (hp :
      ‚àÄ x : ‚ÑÇ, x ‚àà K ‚Üí Tendsto (fun n : ‚Ñï => ‚àè i in Finset.range n, (1 + F i x)) atTop (ùìù (g x))) :
    TendstoUniformlyOn (fun n : ‚Ñï => fun a : ‚ÑÇ => ‚àè i in Finset.range n, (1 + F i a)) g Filter.atTop
      K :=
  by
  apply UniformCauchySeqOn.tendstoUniformlyOn_of_tendsto
  rw [Metric.uniformCauchySeqOn_iff]
  intro Œµ hŒµ
  have H := tsum_unifo F K hf hs
  have H2 := unif_prod_bound F K hb hs
  obtain ‚ü®C, hCp, hC‚ü© := H2
  have hdelta := exists_pos_mul_lt hŒµ C
  obtain ‚ü®Œ¥, hŒ¥‚ü© := hdelta
  have HH := H Œ¥ hŒ¥.1
  obtain ‚ü®N, HN‚ü© := HH
  refine' ‚ü®N, _‚ü©
  intro n hn m hm x hx
  have hCm := hC (Finset.range m) x
  have hCn := hC (Finset.range n) x
  rw [dist_eq_norm]
  simp only [norm_eq_abs]
  by_cases hmn : m ‚â§ n
  rw [‚Üê Finset.prod_range_mul_prod_Ico _ hmn]
  rw [‚Üê mul_sub_one]
  simp only [AbsoluteValue.map_mul, abs_prod]
  have A : ‚àè i : ‚Ñï in Finset.range m, Complex.abs (1 + F i x) ‚â§ C :=
    by
    apply le_trans _ (hCm hx)
    apply Finset.prod_le_prod
    intro i _
    apply Complex.abs.nonneg
    intro i _
    apply le_trans (Complex.abs.add_le _ _)
    simp
  have B : Complex.abs (‚àè i : ‚Ñï in Finset.Ico m n, (1 + F i x) - 1) ‚â§ Œ¥ :=
    by
    have HI := HN n m x hx
    simp only [and_imp] at HI
    have HI2 := HI hn hm hmn
    have := prod_le_prod_abs_Ico_ond_add (fun i : ‚Ñï => F i x) n m
    simp at this
    apply le_trans this
    exact HI2
  have AB := mul_le_mul A B ?_ hCp.le
  apply lt_of_le_of_lt AB
  apply hŒ¥.2
  apply Complex.abs.nonneg
  simp at hmn
  rw [‚Üê Finset.prod_range_mul_prod_Ico _ hmn.le]
  rw [‚Üê mul_one_sub]
  simp
  have A : ‚àè i : ‚Ñï in Finset.range n, Complex.abs (1 + F i x) ‚â§ C :=
    by
    apply le_trans _ (hCn hx)
    apply Finset.prod_le_prod
    intro i _
    apply Complex.abs.nonneg
    intro i _
    apply le_trans (Complex.abs.add_le _ _)
    simp
  have B : Complex.abs (‚àè i : ‚Ñï in Finset.Ico n m, (1 + F i x) - 1) ‚â§ Œ¥ :=
    by
    have HI := HN m n x hx
    simp only [and_imp] at HI
    have HI2 := HI hm hn hmn.le
    have := prod_le_prod_abs_Ico_ond_add (fun i : ‚Ñï => F i x) m n
    simp at this
    apply le_trans this
    exact HI2
  have AB := mul_le_mul A B ?_ hCp.le
  rw [auxreal _]
  apply lt_of_le_of_lt AB
  apply hŒ¥.2
  apply Complex.abs.nonneg
  exact hp
