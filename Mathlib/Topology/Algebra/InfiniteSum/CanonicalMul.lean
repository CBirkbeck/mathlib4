import Mathlib.Topology.Algebra.InfiniteSum.Constructions
import Mathlib.Topology.Algebra.InfiniteSum.Order
import Mathlib.Topology.Order.MonotoneConvergence
import Mathlib.Topology.Order.Monotone
import Mathlib.Topology.Separation.Regular
import Mathlib.Order.Hom.CompleteLattice
import Mathlib.Algebra.Order.Quantale
import Mathlib.Topology.Algebra.Order.LiminfLimsup

variable {M R Œπ Œ∫ : Type*} {i j : Œπ} {f g : Œπ ‚Üí M} {s t : Set Œπ}

variable [CommMonoid M] [CompleteLattice M] [IsOrderedMonoid M]
    [TopologicalSpace M] [SupConvergenceClass M] [CanonicallyOrderedMul M]

-- Underscores are to prevent conflicts with currently deprecated declarations

set_option linter.style.longLine false

@[to_additive]
lemma bot_eq_one''' {Œ± : Type*} [CommMonoid Œ±] [CompleteLattice Œ±] [CanonicallyOrderedMul Œ±] :
  (‚ä• : Œ±) = 1 :=
  bot_le.antisymm <| one_le _

open Set Topology Function Filter

/-- If a topological monoid is a canonically ordered complete lattice with well-behaved
suprema, then every function is multipliable. -/
@[to_additive]
theorem hasProd : HasProd f (‚®Ü s : Finset Œπ, ‚àè i ‚àà s, f i) :=
  tendsto_atTop_iSup <| fun _ _ ‚Ü¶ Finset.prod_le_prod_of_subset'

@[to_additive (attr := simp)]
theorem multipliable : Multipliable f :=
  hasProd.multipliable

omit [IsOrderedMonoid M] [SupConvergenceClass M] in
@[to_additive (attr := simp)]
theorem tprod_iSup_eq (i : Œπ) : (‚àè' b : Œπ, ‚®Ü _ : i = b, f b) = f i :=
  (tprod_eq_mulSingle i fun _ h => by simp [h.symm, bot_eq_one''']).trans <| by simp

section T2Space

variable [T2Space M]

@[to_additive]
theorem tprod_eq_iSup_prod : ‚àè' i, f i = ‚®Ü s : Finset Œπ, ‚àè i ‚àà s, f i :=
  hasProd.tprod_eq

@[to_additive]
theorem tprod_eq_iSup_prod' (s : Œ∫ ‚Üí Finset Œπ) (hs : ‚àÄ t, ‚àÉ k, t ‚äÜ s k) :
    ‚àè' i, f i = ‚®Ü k, ‚àè i ‚àà s k, f i := by
  rw [tprod_eq_iSup_prod, eq_comm]
  exact (Finset.prod_mono_set' f).iSup_comp_eq hs

@[to_additive]
theorem tprod_eq_iSup_nat' {f : ‚Ñï ‚Üí M} {N : ‚Ñï ‚Üí ‚Ñï} (hN : Tendsto N atTop atTop) :
    ‚àè' i : ‚Ñï, f i = ‚®Ü i : ‚Ñï, ‚àè a ‚àà Finset.range (N i), f a :=
  tprod_eq_iSup_prod' _ fun t =>
    let ‚ü®n, hn‚ü© := t.exists_nat_subset_range
    let ‚ü®k, _, hk‚ü© := exists_le_of_tendsto_atTop hN 0 n
    ‚ü®k, Finset.Subset.trans hn (Finset.range_mono hk)‚ü©

@[to_additive]
theorem tprod_eq_iSup_nat {f : ‚Ñï ‚Üí M} :
    ‚àè' i : ‚Ñï, f i = ‚®Ü i : ‚Ñï, ‚àè a ‚àà Finset.range i, f a :=
  tprod_eq_iSup_prod' _ Finset.exists_nat_subset_range

@[to_additive (attr := gcongr)]
theorem _tprod_le_tprod (h : ‚àÄ i, f i ‚â§ g i) : ‚àè' i, f i ‚â§ ‚àè' i, g i := by
  rw [tprod_eq_iSup_prod, tprod_eq_iSup_prod]
  exact iSup_mono fun s ‚Ü¶ Finset.prod_le_prod' fun i _ ‚Ü¶ h i

@[to_additive]
theorem _tprod_mono : Monotone (tprod : (Œπ ‚Üí M) ‚Üí M) :=
  fun _ _ ‚Ü¶ _tprod_le_tprod

@[to_additive]
theorem _prod_le_tprod (s : Finset Œπ) : ‚àè x ‚àà s, f x ‚â§ ‚àè' x, f x := by
  rw [tprod_eq_iSup_prod]
  apply le_iSup (f := fun s ‚Ü¶ ‚àè x ‚àà s, f x)

@[to_additive]
theorem _le_tprod (i : Œπ) : f i ‚â§ ‚àè' i, f i := by
  simpa using _prod_le_tprod {i}

@[to_additive]
theorem _le_tprod_of_mem (hi : i ‚àà s) : f i ‚â§ ‚àè' x : s, f x :=
  _le_tprod (‚ü®i,hi‚ü© : s) (f := fun x ‚Ü¶ f x.1)

@[to_additive (attr := simp)]
theorem _tprod_eq_one_iff : ‚àè' i, f i = 1 ‚Üî ‚àÄ i, f i = 1 := by
  rw [tprod_eq_iSup_prod, ‚Üê le_one_iff_eq_one, iSup_le_iff]
  simp only [le_one_iff_eq_one, Finset.prod_eq_one_iff]
  exact ‚ü®fun h i ‚Ü¶ by simpa using h {i}, fun h _ i _ ‚Ü¶ h _‚ü©

@[to_additive]
theorem _tprod_ne_one_iff : ‚àè' i, f i ‚â† 1 ‚Üî ‚àÉ i, f i ‚â† 1 := by
  simp

@[to_additive]
theorem tprod_eq_top_of_eq_top (hi : f i = ‚ä§) : ‚àè' i, f i = ‚ä§ :=
  (hi.symm.trans_le (_le_tprod _)).antisymm' le_top

@[to_additive]
theorem tprod_subtype_eq_top_of_eq_top (his : i ‚àà s) (h : f i = ‚ä§) : ‚àè' i : s, f i = ‚ä§ :=
  tprod_eq_top_of_eq_top <| show f (‚ü®i, his‚ü© : s) = ‚ä§ from h

@[to_additive _tsum_pos]
theorem _one_lt_tprod (hi : 1 < f i) : 1 < ‚àè' (i : Œπ), f i :=
  hi.trans_le <| _le_tprod _

@[to_additive (attr := simp)]
theorem tprod_top [Nonempty M] : ‚àè' _ : M, ‚ä§ = (‚ä§ : M) :=
  tprod_eq_top_of_eq_top (i := Classical.arbitrary M) rfl

section ContinuousMul

variable [ContinuousMul M]

@[to_additive]
theorem _tprod_sum {f : Œπ ‚äï Œ∫ ‚Üí M} : ‚àè' (i : Œπ ‚äï Œ∫), f i = (‚àè' i, f (.inl i)) * ‚àè' j, f (.inr j) :=
  multipliable.tprod_sum multipliable

@[to_additive]
theorem tprod_subtype_union_disjoint (hd : Disjoint s t) :
    ‚àè' (i : ‚Üë(s ‚à™ t)), f i = (‚àè' i : s, f i) * ‚àè' i : t, f i :=
  multipliable.tprod_union_disjoint hd multipliable

@[to_additive]
theorem _tprod_finset_bUnion_disjoint {s : Finset Œπ} {t : Œπ ‚Üí Set Œ∫} {f : Œ∫ ‚Üí M}
    (hd : (s : Set Œπ).Pairwise (Disjoint on t)) :
    ‚àè' (x : ‚Üë(‚ãÉ i ‚àà s, t i)), f ‚Üëx = ‚àè i ‚àà s, ‚àè' (x : ‚Üë(t i)), f x :=
  Multipliable.tprod_finset_bUnion_disjoint hd <| by simp

@[to_additive]
theorem tprod_subtype_le_of_subset (h : s ‚äÜ t) : ‚àè' i : s, f i ‚â§ ‚àè' i : t, f i := by
  rw [‚Üê diff_union_of_subset h, tprod_subtype_union_disjoint disjoint_sdiff_left]
  exact le_mul_self

@[to_additive]
theorem tprod_subtype_le_tprod (s : Set Œπ) : ‚àè' i : s, f i ‚â§ ‚àè' i, f i := by
  simpa using tprod_subtype_le_of_subset (subset_univ s) (f := f)

@[to_additive]
theorem tprod_subtype_union_le (s t : Set Œπ) :
    ‚àè' (i : ‚Üë(s ‚à™ t)), f (i : Œπ) ‚â§ (‚àè' i : s, f i) * ‚àè' (x : t), f x := by
  rw [‚Üê diff_union_self, tprod_subtype_union_disjoint disjoint_sdiff_left]
  exact mul_le_mul_right' (tprod_subtype_le_of_subset diff_subset) _

@[to_additive]
theorem tprod_subtype_insert (h : i ‚àâ s) : ‚àè' (x : ‚Üë(insert i s)), f x = f i * ‚àè' i : s, f i := by
  rw [‚Üê singleton_union, tprod_subtype_union_disjoint, tprod_singleton]
  rwa [disjoint_singleton_left]

/-- the corresponding `Mulitipliable` lemma here is primed -/
@[to_additive]
theorem _tprod_eq_mul_tprod_ite [DecidableEq Œπ] (i : Œπ) :
    ‚àè' i, f i = f i * ‚àè' x, if x = i then 1 else f x := by
  apply multipliable.tprod_eq_mul_tprod_ite'

/-- TODO : The corresponding `Multipliable` lemma is primed, but also misnamed
  `prod_mul_tprod_nat_mul'` (should be `prod_mul_tprod_nat_add'`) -/
@[to_additive]
theorem _prod_mul_tprod_nat_add {f : ‚Ñï ‚Üí M} {k : ‚Ñï} :
    (‚àè i ‚àà Finset.range k, f i) * ‚àè' (i : ‚Ñï), f (i + k) = ‚àè' (i : ‚Ñï), f i :=
  multipliable.prod_mul_tprod_nat_mul'

/-- TODO : The lemma `tprod_eq_zero_mul'` should have been deprecated but wasn't. -/
@[to_additive]
theorem _tprod_eq_zero_mul {f : ‚Ñï ‚Üí M} : ‚àè' (b : ‚Ñï), f b = f 0 * ‚àè' (b : ‚Ñï), f (b + 1) :=
  tprod_eq_zero_mul' multipliable

/-- TODO : The lemma `tprod_even_mul_odd` should have been deprecated but wasn't. -/
@[to_additive]
theorem _tprod_even_mul_odd {f : ‚Ñï ‚Üí M} : (‚àè' k, f (2 * k)) * ‚àè' k, f (2 * k + 1) = ‚àè' k, f k :=
  tprod_even_mul_odd multipliable multipliable

/-- TODO : The lemma `tprod_of_nat_of_neg_add_one` should have been deprecated but wasn't. -/
@[to_additive]
theorem _tprod_of_nat_of_neg_add_one {f : ‚Ñ§ ‚Üí M} :
    ‚àè' (n : ‚Ñ§), f n = (‚àè' (n : ‚Ñï), f ‚Üën) * ‚àè' (n : ‚Ñï), f (-(‚Üën + 1)) :=
  tprod_of_nat_of_neg_add_one multipliable multipliable

end ContinuousMul

end T2Space

@[to_additive]
theorem _tprod_le_of_prod_range_le [ClosedIicTopology M] {c : M} {f : ‚Ñï ‚Üí M}
    (h : ‚àÄ (n : ‚Ñï), ‚àè i ‚àà Finset.range n, f i ‚â§ c) : ‚àè' n, f n ‚â§ c :=
  multipliable.tprod_le_of_prod_range_le h

@[to_additive]
theorem _tprod_le_tprod_of_inj [OrderClosedTopology M] {g : Œ∫ ‚Üí M} (e : Œπ ‚Üí Œ∫)
    (he : Injective e) (hs : ‚àÄ c ‚àâ range e, 1 ‚â§ g c) (h : ‚àÄ (i : Œπ), f i ‚â§ g (e i)) :
    tprod f ‚â§ tprod g :=
  multipliable.tprod_le_tprod_of_inj e he hs h multipliable

@[to_additive]
theorem _tprod_le_of_prod_le [OrderClosedTopology M] {c : M}
    (h : ‚àÄ (s : Finset Œπ), ‚àè i ‚àà s, f i ‚â§ c) : ‚àè' (i : Œπ), f i ‚â§ c :=
  multipliable.tprod_le_of_prod_le h

section LinearOrder

variable {M : Type*} [CommMonoid M] [CompleteLinearOrder M] [IsOrderedMonoid M] [TopologicalSpace M]
  [OrderTopology M] [CanonicallyOrderedMul M]

@[to_additive]
theorem tprod_eq_liminf_prod_nat {f : ‚Ñï ‚Üí M} :
    ‚àè' i, f i = liminf (fun n ‚Ü¶ ‚àè i ‚àà Finset.range n, f i) atTop :=
  multipliable.hasProd.tendsto_prod_nat.liminf_eq.symm

@[to_additive]
theorem tprod_eq_limsup_prod_nat {f : ‚Ñï ‚Üí M} :
    ‚àè' i, f i = limsup (fun n ‚Ü¶ ‚àè i ‚àà Finset.range n, f i) atTop :=
  multipliable.hasProd.tendsto_prod_nat.limsup_eq.symm

@[to_additive]
theorem hasProd_iff_tendsto_nat {f : ‚Ñï ‚Üí M} (r : M) :
    HasProd f r ‚Üî Tendsto (fun n : ‚Ñï ‚Ü¶ ‚àè i ‚àà Finset.range n, f i) atTop (ùìù r) := by
  refine ‚ü®HasProd.tendsto_prod_nat, fun h => ?_‚ü©
  rw [‚Üê iSup_eq_of_tendsto _ h, ‚Üê tprod_eq_iSup_nat]
  ¬∑ exact multipliable.hasProd
  exact fun s t hst => Finset.prod_le_prod_of_subset' (Finset.range_subset.2 hst)


end LinearOrder

section T3Space

variable [T3Space M] [ContinuousMul M] {Œ∫ : Type*}

@[to_additive]
theorem _tprod_sigma' {Œ≤ : Œπ ‚Üí Type*} (f : (Œ£ i, Œ≤ i) ‚Üí M) :
    ‚àè' p : Œ£ i, Œ≤ i, f p = ‚àè' (i) (j), f ‚ü®i, j‚ü© :=
  multipliable.tprod_sigma' (fun _ => multipliable)

@[to_additive _tsum_prod]
theorem _tprod_prod {f : Œπ ‚Üí Œ∫ ‚Üí M} : ‚àè' p : Œπ √ó Œ∫, f p.1 p.2 = ‚àè' (i) (j), f i j :=
  multipliable.tprod_prod' fun _ => multipliable

@[to_additive]
theorem _tprod_prod' {f : Œπ √ó Œ∫ ‚Üí M} : ‚àè' p : Œπ √ó Œ∫, f p = ‚àè' (i) (j), f (i, j) :=
  multipliable.tprod_prod' fun _ => multipliable

@[to_additive]
theorem _tprod_comm {f : Œπ ‚Üí Œ∫ ‚Üí M} : ‚àè' i, ‚àè' j, f i j = ‚àè' j, ‚àè' i, f i j :=
   multipliable.tprod_comm' (fun _ => multipliable) fun _ => multipliable

@[to_additive]
theorem _tprod_mul : ‚àè' i, (f i * g i) = (‚àè' i, f i) * ‚àè' i, g i :=
   multipliable.tprod_mul multipliable

@[to_additive]
theorem _tprod_mul_tprod_compl : (‚àè' (i : ‚Üës), f i) * ‚àè' (i : ‚Üës·∂ú), f i = ‚àè' (i : Œπ), f i :=
  multipliable.tprod_mul_tprod_compl multipliable

@[to_additive]
theorem _tprod_sigma {Œ≤ : Œπ ‚Üí Type*} (f : ‚àÄ i, Œ≤ i ‚Üí M) :
    ‚àè' p : Œ£ i, Œ≤ i, f p.1 p.2 = ‚àè' (i) (j), f i j :=
  multipliable.tprod_sigma' (fun _ => multipliable)

@[to_additive]
theorem tprod_comp_le_tprod_of_injective {f : Œπ ‚Üí Œ∫} (hf : Injective f) (g : Œ∫ ‚Üí M) :
    ‚àè' i, g (f i) ‚â§ ‚àè' j, g j := by
  rw [‚Üê tprod_range _ hf]
  exact tprod_subtype_le_tprod (range f)

@[to_additive]
theorem tprod_le_tprod_comp_of_surjective {f : Œπ ‚Üí Œ∫}
    (hf : Surjective f) (g : Œ∫ ‚Üí M) : ‚àè' y, g y ‚â§ ‚àè' x, g (f x) := by
  calc ‚àè' y, g y = ‚àè' y, g (f (surjInv hf y)) := by simp only [surjInv_eq hf]
    _ ‚â§ ‚àè' x, g (f x) := tprod_comp_le_tprod_of_injective (injective_surjInv hf) (g ‚àò f)

@[to_additive]
theorem tprod_comp_eq_tprod_of_bijective {f : Œπ ‚Üí Œ∫} (hf : f.Bijective) (g : Œ∫ ‚Üí M) :
    ‚àè' i, g (f i) = ‚àè' j, g j :=
  (tprod_comp_le_tprod_of_injective hf.injective g).antisymm
    (tprod_le_tprod_comp_of_surjective hf.surjective g)

@[to_additive]
theorem tprod_comp_eq_tprod_of_equiv (e : Œπ ‚âÉ Œ∫) (g : Œ∫ ‚Üí M) : ‚àè' i, g (e i) = ‚àè' j, g j :=
  tprod_comp_eq_tprod_of_bijective e.bijective ..

@[to_additive]
theorem tprod_subtype_sigma {Œ≤ : Œπ ‚Üí Type*} (f : ‚àÄ i, Œ≤ i ‚Üí M) :
    ‚àè' p : Œ£ i, Œ≤ i, f p.1 p.2 = ‚àè' (i) (j), f i j :=
  multipliable.tprod_sigma' (fun _ ‚Ü¶ multipliable)

@[to_additive]
theorem tprod_subtype_sigma' {Œ≤ : Œπ ‚Üí Type*} (f : (Œ£ i, Œ≤ i) ‚Üí M) :
    ‚àè' p : Œ£ i, Œ≤ i, f p = ‚àè' (i) (j), f ‚ü®i, j‚ü© :=
  multipliable.tprod_sigma' (fun _ ‚Ü¶ multipliable)

@[to_additive]
theorem tprod_subtype_iUnion_le_tprod (f : Œπ ‚Üí M) (t : Œ∫ ‚Üí Set Œπ) :
    ‚àè' x : ‚ãÉ i, t i, f x ‚â§ ‚àè' i, ‚àè' x : t i, f x :=
  calc ‚àè' x : ‚ãÉ i, t i, f x ‚â§ ‚àè' x : Œ£ i, t i, f x.2 :=
    tprod_le_tprod_comp_of_surjective (sigmaToiUnion_surjective t) _
  _ = ‚àè' i, ‚àè' x : t i, f x := tprod_subtype_sigma' _

@[to_additive]
theorem tprod_subtype_biUnion_le_tprod (f : Œπ ‚Üí M) (s : Set Œ∫) (t : Œ∫ ‚Üí Set Œπ) :
    ‚àè' x : ‚ãÉ i ‚àà s, t i, f x ‚â§ ‚àè' i : s, ‚àè' x : t i, f x :=
  calc ‚àè' x : ‚ãÉ i ‚àà s, t i, f x = ‚àè' x : ‚ãÉ i : s, t i, f x := by rw [tprod_congr_subtype]; simp
  _ ‚â§ ‚àè' i : s, (‚àè' x : t i, f x) := tprod_subtype_iUnion_le_tprod ..

@[to_additive]
theorem tprod_subtype_biUnion_le (f : Œπ ‚Üí M) (s : Finset Œπ) (t : Œπ ‚Üí Set Œπ) :
    ‚àè' x : ‚ãÉ i ‚àà s, t i, f x ‚â§ ‚àè i ‚àà s, ‚àè' x : t i, f x :=
  (tprod_subtype_biUnion_le_tprod f s.toSet t).trans_eq <|
    Finset.tprod_subtype s fun i ‚Ü¶ ‚àè' x : t i, f x

@[to_additive]
theorem tprod_subtype_iUnion_le [Fintype Œπ] (f : Œπ ‚Üí M) (t : Œπ ‚Üí Set Œπ) :
    ‚àè' x : ‚ãÉ i, t i, f x ‚â§ ‚àè i, ‚àè' x : t i, f x := by
  rw [‚Üê tprod_fintype]
  exact tprod_subtype_iUnion_le_tprod f t

@[to_additive]
theorem tprod_subtype_iUnion_eq_tprod (f : Œπ ‚Üí M) (t : Œπ ‚Üí Set Œπ) (ht : Pairwise (Disjoint on t)) :
    ‚àè' x : ‚ãÉ i, t i, f x = ‚àè' i, ‚àè' x : t i, f x :=
  calc ‚àè' x : ‚ãÉ i, t i, f x = ‚àè' x : Œ£ i, t i, f x.2 := (tprod_comp_eq_tprod_of_bijective
      (sigmaToiUnion_bijective t (fun _ _ hij ‚Ü¶ ht hij)) _).symm
    _ = _ := tprod_subtype_sigma' _

@[to_additive]
theorem _tprod_prod_uncurry {f : Œπ ‚Üí Œ∫ ‚Üí M} : ‚àè' p, uncurry f p = ‚àè' (i) (j), f i j :=
  multipliable.tprod_prod_uncurry <| by simp

end T3Space

section Ring

variable {R : Type*} {f : Œπ ‚Üí R} {c : R}

variable [CommSemiring R] [CompleteLinearOrder R] [CanonicallyOrderedAdd R] [TopologicalSpace R]
  [OrderTopology R] [ContinuousMul R]

instance : IsQuantale R where
  mul_sSup_distrib c s := by
    rw [Monotone.map_sSup_of_continuousAt (continuous_mul_left c).continuousAt
      mul_left_mono ?_, sSup_image]
    simp [bot_eq_zero''']
  sSup_mul_distrib s c := by
    rw [Monotone.map_sSup_of_continuousAt (continuous_mul_right c).continuousAt
      mul_right_mono ?_, sSup_image]
    simp [show (‚ä• : R) = 0 from bot_le.antisymm (zero_le _)]

variable [IsOrderedRing R]

theorem mul_tsum_distrib (c : R) : c * ‚àë' i, f i = ‚àë' i, c * f i := by
  simp_rw [tsum_eq_iSup_sum, Quantale.mul_iSup_distrib, Finset.mul_sum]

theorem tsum_mul_distrib (c : R) : (‚àë' i, f i) * c = ‚àë' i, f i * c := by
  simp_rw [tsum_eq_iSup_sum, Quantale.iSup_mul_distrib, Finset.sum_mul]

theorem tsum_const_smul {S : Type*} [SMul S R] [IsScalarTower S R R] (a : S) :
    a ‚Ä¢ ‚àë' i, f i = ‚àë' i, a ‚Ä¢ f i := by
  simpa using (mul_tsum_distrib (f := f) (a ‚Ä¢ (1 : R)))

end Ring






-- protected theorem tsum_eq_top_of_eq_top : (‚àÉ a, f a = ‚àû) ‚Üí ‚àë' a, f a = ‚àû
--   | ‚ü®a, ha‚ü© => top_unique <| ha ‚ñ∏ ENNReal.le_tsum a

-- protected theorem lt_top_of_tsum_ne_top {a : Œ± ‚Üí ‚Ñù‚â•0‚àû} (tsum_ne_top : ‚àë' i, a i ‚â† ‚àû) (j : Œ±) :
--     a j < ‚àû := by
--   contrapose! tsum_ne_top with h
--   exact ENNReal.tsum_eq_top_of_eq_top ‚ü®j, top_unique h‚ü©


-- theorem tsum_const_eq_top_of_ne_zero {Œ± : Type*} [Infinite Œ±] {c : ‚Ñù‚â•0‚àû} (hc : c ‚â† 0) :
--     ‚àë' _ : Œ±, c = ‚àû := by
--   have A : Tendsto (fun n : ‚Ñï => (n : ‚Ñù‚â•0‚àû) * c) atTop (ùìù (‚àû * c)) := by
--     apply ENNReal.Tendsto.mul_const tendsto_nat_nhds_top
--     simp only [true_or, top_ne_zero, Ne, not_false_iff]
--   have B : ‚àÄ n : ‚Ñï, (n : ‚Ñù‚â•0‚àû) * c ‚â§ ‚àë' _ : Œ±, c := fun n => by
--     rcases Infinite.exists_subset_card_eq Œ± n with ‚ü®s, hs‚ü©
--     simpa [hs] using @ENNReal.sum_le_tsum Œ± (fun _ => c) s
--   simpa [hc] using le_of_tendsto' A B

-- protected theorem ne_top_of_tsum_ne_top (h : ‚àë' a, f a ‚â† ‚àû) (a : Œ±) : f a ‚â† ‚àû := fun ha =>
--   h <| ENNReal.tsum_eq_top_of_eq_top ‚ü®a, ha‚ü©

-- protected theorem tsum_mul_left : ‚àë' i, a * f i = a * ‚àë' i, f i := by
--   by_cases hf : ‚àÄ i, f i = 0
--   ¬∑ simp [hf]
--   ¬∑ rw [‚Üê ENNReal.tsum_eq_zero] at hf
--     have : Tendsto (fun s : Finset Œ± => ‚àë j ‚àà s, a * f j) atTop (ùìù (a * ‚àë' i, f i)) := by
--       simp only [‚Üê Finset.mul_sum]
--       exact ENNReal.Tendsto.const_mul ENNReal.summable.hasSum (Or.inl hf)
--     exact HasSum.tsum_eq this

-- protected theorem tsum_mul_right : ‚àë' i, f i * a = (‚àë' i, f i) * a := by
--   simp [mul_comm, ENNReal.tsum_mul_left]






-- theorem tendsto_nat_tsum (f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû) :
--     Tendsto (fun n : ‚Ñï => ‚àë i ‚àà Finset.range n, f i) atTop (ùìù (‚àë' n, f n)) := by
--   rw [‚Üê hasSum_iff_tendsto_nat]
--   exact ENNReal.summable.hasSum

-- theorem toNNReal_apply_of_tsum_ne_top {Œ± : Type*} {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àë' i, f i ‚â† ‚àû) (x : Œ±) :
--     (((ENNReal.toNNReal ‚àò f) x : ‚Ñù‚â•0) : ‚Ñù‚â•0‚àû) = f x :=
--   coe_toNNReal <| ENNReal.ne_top_of_tsum_ne_top hf _

-- theorem summable_toNNReal_of_tsum_ne_top {Œ± : Type*} {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àë' i, f i ‚â† ‚àû) :
--     Summable (ENNReal.toNNReal ‚àò f) := by
--   simpa only [‚Üê tsum_coe_ne_top_iff_summable, toNNReal_apply_of_tsum_ne_top hf] using hf

-- theorem tendsto_cofinite_zero_of_tsum_ne_top {Œ±} {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àë' x, f x ‚â† ‚àû) :
--     Tendsto f cofinite (ùìù 0) := by
--   have f_ne_top : ‚àÄ n, f n ‚â† ‚àû := ENNReal.ne_top_of_tsum_ne_top hf
--   have h_f_coe : f = fun n => ((f n).toNNReal : ENNReal) :=
--     funext fun n => (coe_toNNReal (f_ne_top n)).symm
--   rw [h_f_coe, ‚Üê @coe_zero, tendsto_coe]
--   exact NNReal.tendsto_cofinite_zero_of_summable (summable_toNNReal_of_tsum_ne_top hf)

-- theorem tendsto_atTop_zero_of_tsum_ne_top {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àë' x, f x ‚â† ‚àû) :
--     Tendsto f atTop (ùìù 0) := by
--   rw [‚Üê Nat.cofinite_eq_atTop]
--   exact tendsto_cofinite_zero_of_tsum_ne_top hf

-- /-- The sum over the complement of a finset tends to `0` when the finset grows to cover the whole
-- space. This does not need a summability assumption, as otherwise all sums are zero. -/
-- theorem tendsto_tsum_compl_atTop_zero {Œ± : Type*} {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àë' x, f x ‚â† ‚àû) :
--     Tendsto (fun s : Finset Œ± => ‚àë' b : { x // x ‚àâ s }, f b) atTop (ùìù 0) := by
--   lift f to Œ± ‚Üí ‚Ñù‚â•0 using ENNReal.ne_top_of_tsum_ne_top hf
--   convert ENNReal.tendsto_coe.2 (NNReal.tendsto_tsum_compl_atTop_zero f)
--   rw [ENNReal.coe_tsum]
--   exact NNReal.summable_comp_injective (tsum_coe_ne_top_iff_summable.1 hf) Subtype.coe_injective

-- protected theorem tsum_apply {Œπ Œ± : Type*} {f : Œπ ‚Üí Œ± ‚Üí ‚Ñù‚â•0‚àû} {x : Œ±} :
--     (‚àë' i, f i) x = ‚àë' i, f i x :=
--   tsum_apply <| Pi.summable.mpr fun _ => ENNReal.summable

-- theorem tsum_sub {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} {g : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (h‚ÇÅ : ‚àë' i, g i ‚â† ‚àû) (h‚ÇÇ : g ‚â§ f) :
--     ‚àë' i, (f i - g i) = ‚àë' i, f i - ‚àë' i, g i :=
--   have : ‚àÄ i, f i - g i + g i = f i := fun i => tsub_add_cancel_of_le (h‚ÇÇ i)
--   ENNReal.eq_sub_of_add_eq h‚ÇÅ <| by simp only [‚Üê ENNReal.tsum_add, this]

-- theorem tsum_comp_le_tsum_of_injective {f : Œ± ‚Üí Œ≤} (hf : Injective f) (g : Œ≤ ‚Üí ‚Ñù‚â•0‚àû) :
--     ‚àë' x, g (f x) ‚â§ ‚àë' y, g y :=
--   ENNReal.summable.tsum_le_tsum_of_inj f hf (fun _ _ => zero_le _) (fun _ => le_rfl)
--     ENNReal.summable

-- theorem tsum_le_tsum_comp_of_surjective {f : Œ± ‚Üí Œ≤} (hf : Surjective f) (g : Œ≤ ‚Üí ‚Ñù‚â•0‚àû) :
--     ‚àë' y, g y ‚â§ ‚àë' x, g (f x) :=
--   calc ‚àë' y, g y = ‚àë' y, g (f (surjInv hf y)) := by simp only [surjInv_eq hf]
--   _ ‚â§ ‚àë' x, g (f x) := tsum_comp_le_tsum_of_injective (injective_surjInv hf) _

-- theorem tsum_mono_subtype (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) {s t : Set Œ±} (h : s ‚äÜ t) :
--     ‚àë' x : s, f x ‚â§ ‚àë' x : t, f x :=
--   tsum_comp_le_tsum_of_injective (inclusion_injective h) _

-- theorem tsum_iUnion_le_tsum {Œπ : Type*} (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) (t : Œπ ‚Üí Set Œ±) :
--     ‚àë' x : ‚ãÉ i, t i, f x ‚â§ ‚àë' i, ‚àë' x : t i, f x :=
--   calc ‚àë' x : ‚ãÉ i, t i, f x ‚â§ ‚àë' x : Œ£ i, t i, f x.2 :=
--     tsum_le_tsum_comp_of_surjective (sigmaToiUnion_surjective t) _
--   _ = ‚àë' i, ‚àë' x : t i, f x := ENNReal.tsum_sigma' _

-- theorem tsum_biUnion_le_tsum {Œπ : Type*} (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) (s : Set Œπ) (t : Œπ ‚Üí Set Œ±) :
--     ‚àë' x : ‚ãÉ i ‚àà s , t i, f x ‚â§ ‚àë' i : s, ‚àë' x : t i, f x :=
--   calc ‚àë' x : ‚ãÉ i ‚àà s, t i, f x = ‚àë' x : ‚ãÉ i : s, t i, f x := tsum_congr_set_coe _ <| by simp
--   _ ‚â§ ‚àë' i : s, ‚àë' x : t i, f x := tsum_iUnion_le_tsum _ _

-- theorem tsum_biUnion_le {Œπ : Type*} (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) (s : Finset Œπ) (t : Œπ ‚Üí Set Œ±) :
--     ‚àë' x : ‚ãÉ i ‚àà s, t i, f x ‚â§ ‚àë i ‚àà s, ‚àë' x : t i, f x :=
--   (tsum_biUnion_le_tsum f s.toSet t).trans_eq (Finset.tsum_subtype s fun i => ‚àë' x : t i, f x)

-- theorem tsum_iUnion_le {Œπ : Type*} [Fintype Œπ] (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) (t : Œπ ‚Üí Set Œ±) :
--     ‚àë' x : ‚ãÉ i, t i, f x ‚â§ ‚àë i, ‚àë' x : t i, f x := by
--   rw [‚Üê tsum_fintype]
--   exact tsum_iUnion_le_tsum f t

-- theorem tsum_union_le (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) (s t : Set Œ±) :
--     ‚àë' x : ‚Üë(s ‚à™ t), f x ‚â§ ‚àë' x : s, f x + ‚àë' x : t, f x :=
--   calc ‚àë' x : ‚Üë(s ‚à™ t), f x = ‚àë' x : ‚ãÉ b, cond b s t, f x := tsum_congr_set_coe _ union_eq_iUnion
--   _ ‚â§ _ := by simpa using tsum_iUnion_le f (cond ¬∑ s t)

-- open Classical in
-- theorem tsum_eq_add_tsum_ite {f : Œ≤ ‚Üí ‚Ñù‚â•0‚àû} (b : Œ≤) :
--     ‚àë' x, f x = f b + ‚àë' x, ite (x = b) 0 (f x) :=
--   ENNReal.summable.tsum_eq_add_tsum_ite' b

-- theorem tsum_add_one_eq_top {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àë' n, f n = ‚àû) (hf0 : f 0 ‚â† ‚àû) :
--     ‚àë' n, f (n + 1) = ‚àû := by
--   rw [tsum_eq_zero_add' ENNReal.summable, add_eq_top] at hf
--   exact hf.resolve_left hf0

-- /-- A sum of extended nonnegative reals which is finite can have only finitely many terms
-- above any positive threshold. -/
-- theorem finite_const_le_of_tsum_ne_top {Œπ : Type*} {a : Œπ ‚Üí ‚Ñù‚â•0‚àû} (tsum_ne_top : ‚àë' i, a i ‚â† ‚àû)
--     {Œµ : ‚Ñù‚â•0‚àû} (Œµ_ne_zero : Œµ ‚â† 0) : { i : Œπ | Œµ ‚â§ a i }.Finite := by
--   by_contra h
--   have := Infinite.to_subtype h
--   refine tsum_ne_top (top_unique ?_)
--   calc ‚àû = ‚àë' _ : { i | Œµ ‚â§ a i }, Œµ := (tsum_const_eq_top_of_ne_zero Œµ_ne_zero).symm
--   _ ‚â§ ‚àë' i, a i := ENNReal.summable.tsum_le_tsum_of_inj (‚Üë)
--     Subtype.val_injective (fun _ _ => zero_le _) (fun i => i.2) ENNReal.summable

-- /-- Markov's inequality for `Finset.card` and `tsum` in `‚Ñù‚â•0‚àû`. -/
-- theorem finset_card_const_le_le_of_tsum_le {Œπ : Type*} {a : Œπ ‚Üí ‚Ñù‚â•0‚àû} {c : ‚Ñù‚â•0‚àû} (c_ne_top : c ‚â† ‚àû)
--     (tsum_le_c : ‚àë' i, a i ‚â§ c) {Œµ : ‚Ñù‚â•0‚àû} (Œµ_ne_zero : Œµ ‚â† 0) :
--     ‚àÉ hf : { i : Œπ | Œµ ‚â§ a i }.Finite, #hf.toFinset ‚â§ c / Œµ := by
--   have hf : { i : Œπ | Œµ ‚â§ a i }.Finite :=
--     finite_const_le_of_tsum_ne_top (ne_top_of_le_ne_top c_ne_top tsum_le_c) Œµ_ne_zero
--   refine ‚ü®hf, (ENNReal.le_div_iff_mul_le (.inl Œµ_ne_zero) (.inr c_ne_top)).2 ?_‚ü©
--   calc #hf.toFinset * Œµ = ‚àë _i ‚àà hf.toFinset, Œµ := by rw [Finset.sum_const, nsmul_eq_mul]
--     _ ‚â§ ‚àë i ‚àà hf.toFinset, a i := Finset.sum_le_sum fun i => hf.mem_toFinset.1
--     _ ‚â§ ‚àë' i, a i := ENNReal.sum_le_tsum _
--     _ ‚â§ c := tsum_le_c

-- theorem tsum_fiberwise (f : Œ≤ ‚Üí ‚Ñù‚â•0‚àû) (g : Œ≤ ‚Üí Œ≥) :
--     ‚àë' x, ‚àë' b : g ‚Åª¬π' {x}, f b = ‚àë' i, f i := by
--   apply HasSum.tsum_eq
--   let equiv := Equiv.sigmaFiberEquiv g
--   apply (equiv.hasSum_iff.mpr ENNReal.summable.hasSum).sigma
--   exact fun _ ‚Ü¶ ENNReal.summable.hasSum_iff.mpr rfl

-- end tsum


-- /-
-- DEPRECATED list


-- tsum_mul_tsum
-- tsum_mul_tsum_eq_tsum_sum_antidiagonal
-- tsum_mul_tsum_eq_tsum_sum_range
-- -/

-- -- #check MonotoneOn.map_csSup_of_continuousWithinAt

-- -- example {Œ± Œ≤ : Type*} [CompleteLattice Œ±] [CompleteLattice Œ≤] [TopologicalSpace Œ±]
-- --   [TopologicalSpace Œ≤] [OrderTopology Œ±] [OrderClosedTopology Œ±] {f : Œ± ‚Üí Œ≤} (hf : Continuous f)
-- --     (hmono : Monotone f) (A : Set Œ±) : f (sSup A) = sSup (f '' A) := by
-- --   _

-- -- #check isLUB_of_tendsto



-- --   simp_rw [le_iff_exists_add] at hb
-- --   choose d hd using hb


-- -- theorem mul_tprod {R : Type*} [Semiring R] [CompleteLattice R] [IsOrderedAddMonoid R]
-- --     [TopologicalSpace R] [T2Space R] [ContinuousAdd R] [SupSummable R]
-- --     [CanonicallyOrderedAdd R] [MulLeftMono R]
-- --     {f : Œπ ‚Üí R} (c : R) : c * ‚àè' i, f i = ‚àè' a, c * f i := by
-- --   rw [tprod_eq_iSup_prod, tprod_eq_iSup_prod]
-- --   simp_rw [‚Üê Finset.mul_prod, mul_iSup]

-- --   -- refine' (monotone_id.const_mul' _).map_iSup_of_continuousAt (Œπ := R) (Œ≤ := R) _ (mul_zero c)
-- --   -- apply Monotone.iSup_comp_eq (f := c * (¬∑))
-- --   -- simp_rw [ENat.tprod_eq_iSup_prod, ENat.mul_iSup, Finset.mul_prod]

-- -- -- theorem tprod_mul (c : ‚Ñï‚àû) : (‚àè' i, f i) * c = ‚àè' i, f i * c := by
-- -- --   simp_rw [ENat.tprod_eq_iSup_prod, ENat.iSup_mul, Finset.prod_mul]



-- -- end T2Space
