/-
Copyright (c) 2021 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot
-/
import Mathlib.Topology.Algebra.Valuation
import Mathlib.Topology.Algebra.WithZeroTopology
import Mathlib.Topology.Algebra.UniformField

#align_import topology.algebra.valued_field from "leanprover-community/mathlib"@"3e0c4d76b6ebe9dfafb67d16f7286d2731ed6064"

/-!
# Valued fields and their completions

In this file we study the topology of a field `K` endowed with a valuation (in our application
to adic spaces, `K` will be the valuation field associated to some valuation on a ring, defined in
valuation.basic).

We already know from valuation.topology that one can build a topology on `K` which
makes it a topological ring.

The first goal is to show `K` is a topological *field*, ie inversion is continuous
at every non-zero element.

The next goal is to prove `K` is a *completable* topological field. This gives us
a completion `hat K` which is a topological field. We also prove that `K` is automatically
separated, so the map from `K` to `hat K` is injective.

Then we extend the valuation given on `K` to a valuation on `hat K`.
-/


open Filter Set

open Topology

section DivisionRing

variable {K : Type*} [DivisionRing K] {Œì‚ÇÄ : Type*} [LinearOrderedCommGroupWithZero Œì‚ÇÄ]

section ValuationTopologicalDivisionRing

section InversionEstimate

variable (v : Valuation K Œì‚ÇÄ)

-- The following is the main technical lemma ensuring that inversion is continuous
-- in the topology induced by a valuation on a division ring (i.e. the next instance)
-- and the fact that a valued field is completable
-- [BouAC, VI.5.1 Lemme 1]
theorem Valuation.inversion_estimate {x y : K} {Œ≥ : Œì‚ÇÄÀ£} (y_ne : y ‚â† 0)
    (h : v (x - y) < min (Œ≥ * (v y * v y)) (v y)) : v (x‚Åª¬π - y‚Åª¬π) < Œ≥ := by
  have hyp1 : v (x - y) < Œ≥ * (v y * v y) := lt_of_lt_of_le h (min_le_left _ _)
  -- ‚ä¢ ‚Üëv (x‚Åª¬π - y‚Åª¬π) < ‚ÜëŒ≥
  have hyp1' : v (x - y) * (v y * v y)‚Åª¬π < Œ≥ := mul_inv_lt_of_lt_mul‚ÇÄ hyp1
  -- ‚ä¢ ‚Üëv (x‚Åª¬π - y‚Åª¬π) < ‚ÜëŒ≥
  have hyp2 : v (x - y) < v y := lt_of_lt_of_le h (min_le_right _ _)
  -- ‚ä¢ ‚Üëv (x‚Åª¬π - y‚Åª¬π) < ‚ÜëŒ≥
  have key : v x = v y := Valuation.map_eq_of_sub_lt v hyp2
  -- ‚ä¢ ‚Üëv (x‚Åª¬π - y‚Åª¬π) < ‚ÜëŒ≥
  have x_ne : x ‚â† 0 := by
    intro h
    apply y_ne
    rw [h, v.map_zero] at key
    exact v.zero_iff.1 key.symm
  have decomp : x‚Åª¬π - y‚Åª¬π = x‚Åª¬π * (y - x) * y‚Åª¬π := by
    rw [mul_sub_left_distrib, sub_mul, mul_assoc, show y * y‚Åª¬π = 1 from mul_inv_cancel y_ne,
      show x‚Åª¬π * x = 1 from inv_mul_cancel x_ne, mul_one, one_mul]
  calc
    v (x‚Åª¬π - y‚Åª¬π) = v (x‚Åª¬π * (y - x) * y‚Åª¬π) := by rw [decomp]
    _ = v x‚Åª¬π * (v <| y - x) * v y‚Åª¬π := by repeat' rw [Valuation.map_mul]
    _ = (v x)‚Åª¬π * (v <| y - x) * (v y)‚Åª¬π := by rw [map_inv‚ÇÄ, map_inv‚ÇÄ]
    _ = (v <| y - x) * (v y * v y)‚Åª¬π := by rw [mul_assoc, mul_comm, key, mul_assoc, mul_inv_rev]
    _ = (v <| y - x) * (v y * v y)‚Åª¬π := rfl
    _ = (v <| x - y) * (v y * v y)‚Åª¬π := by rw [Valuation.map_sub_swap]
    _ < Œ≥ := hyp1'
#align valuation.inversion_estimate Valuation.inversion_estimate

end InversionEstimate

open Valued

/-- The topology coming from a valuation on a division ring makes it a topological division ring
    [BouAC, VI.5.1 middle of Proposition 1] -/
instance (priority := 100) Valued.topologicalDivisionRing [Valued K Œì‚ÇÄ] :
    TopologicalDivisionRing K :=
  { (by infer_instance : TopologicalRing K) with
        -- üéâ no goals
    continuousAt_inv‚ÇÄ := by
      intro x x_ne s s_in
      -- ‚ä¢ s ‚àà map Inv.inv (ùìù x)
      cases' Valued.mem_nhds.mp s_in with Œ≥ hs; clear s_in
      -- ‚ä¢ s ‚àà map Inv.inv (ùìù x)
                                                -- ‚ä¢ s ‚àà map Inv.inv (ùìù x)
      rw [mem_map, Valued.mem_nhds]
      -- ‚ä¢ ‚àÉ Œ≥, {y | ‚Üëv (y - x) < ‚ÜëŒ≥} ‚äÜ Inv.inv ‚Åª¬π' s
      change ‚àÉ Œ≥ : Œì‚ÇÄÀ£, { y : K | (v (y - x) : Œì‚ÇÄ) < Œ≥ } ‚äÜ { x : K | x‚Åª¬π ‚àà s }
      -- ‚ä¢ ‚àÉ Œ≥, {y | ‚Üëv (y - x) < ‚ÜëŒ≥} ‚äÜ {x | x‚Åª¬π ‚àà s}
      have vx_ne := (Valuation.ne_zero_iff <| v).mpr x_ne
      -- ‚ä¢ ‚àÉ Œ≥, {y | ‚Üëv (y - x) < ‚ÜëŒ≥} ‚äÜ {x | x‚Åª¬π ‚àà s}
      let Œ≥' := Units.mk0 _ vx_ne
      -- ‚ä¢ ‚àÉ Œ≥, {y | ‚Üëv (y - x) < ‚ÜëŒ≥} ‚äÜ {x | x‚Åª¬π ‚àà s}
      use min (Œ≥ * (Œ≥' * Œ≥')) Œ≥'
      -- ‚ä¢ {y | ‚Üëv (y - x) < ‚Üë(min (Œ≥ * (Œ≥' * Œ≥')) Œ≥')} ‚äÜ {x | x‚Åª¬π ‚àà s}
      intro y y_in
      -- ‚ä¢ y ‚àà {x | x‚Åª¬π ‚àà s}
      apply hs
      -- ‚ä¢ y‚Åª¬π ‚àà {y | ‚Üëv (y - x‚Åª¬π) < ‚ÜëŒ≥}
      simp only [mem_setOf_eq] at y_in
      -- ‚ä¢ y‚Åª¬π ‚àà {y | ‚Üëv (y - x‚Åª¬π) < ‚ÜëŒ≥}
      rw [Units.min_val, Units.val_mul, Units.val_mul] at y_in
      -- ‚ä¢ y‚Åª¬π ‚àà {y | ‚Üëv (y - x‚Åª¬π) < ‚ÜëŒ≥}
      exact Valuation.inversion_estimate _ x_ne y_in }
      -- üéâ no goals
#align valued.topological_division_ring Valued.topologicalDivisionRing

/-- A valued division ring is separated. -/
instance (priority := 100) ValuedRing.separated [Valued K Œì‚ÇÄ] : SeparatedSpace K := by
  rw [separated_iff_t2]
  -- ‚ä¢ T2Space K
  apply TopologicalAddGroup.t2Space_of_zero_sep
  -- ‚ä¢ ‚àÄ (x : K), x ‚â† 0 ‚Üí ‚àÉ U, U ‚àà ùìù 0 ‚àß ¬¨x ‚àà U
  intro x x_ne
  -- ‚ä¢ ‚àÉ U, U ‚àà ùìù 0 ‚àß ¬¨x ‚àà U
  refine' ‚ü®{ k | v k < v x }, _, fun h => lt_irrefl _ h‚ü©
  -- ‚ä¢ {k | ‚Üëv k < ‚Üëv x} ‚àà ùìù 0
  rw [Valued.mem_nhds]
  -- ‚ä¢ ‚àÉ Œ≥, {y | ‚Üëv (y - 0) < ‚ÜëŒ≥} ‚äÜ {k | ‚Üëv k < ‚Üëv x}
  have vx_ne := (Valuation.ne_zero_iff <| v).mpr x_ne
  -- ‚ä¢ ‚àÉ Œ≥, {y | ‚Üëv (y - 0) < ‚ÜëŒ≥} ‚äÜ {k | ‚Üëv k < ‚Üëv x}
  let Œ≥' := Units.mk0 _ vx_ne
  -- ‚ä¢ ‚àÉ Œ≥, {y | ‚Üëv (y - 0) < ‚ÜëŒ≥} ‚äÜ {k | ‚Üëv k < ‚Üëv x}
  exact ‚ü®Œ≥', fun y hy => by simpa using hy‚ü©
  -- üéâ no goals
#align valued_ring.separated ValuedRing.separated

section

open WithZeroTopology

open Valued

theorem Valued.continuous_valuation [Valued K Œì‚ÇÄ] : Continuous (v : K ‚Üí Œì‚ÇÄ) := by
  rw [continuous_iff_continuousAt]
  -- ‚ä¢ ‚àÄ (x : K), ContinuousAt (‚Üëv) x
  intro x
  -- ‚ä¢ ContinuousAt (‚Üëv) x
  rcases eq_or_ne x 0 with (rfl | h)
  -- ‚ä¢ ContinuousAt (‚Üëv) 0
  ¬∑ rw [ContinuousAt, map_zero, WithZeroTopology.tendsto_zero]
    -- ‚ä¢ ‚àÄ (Œ≥‚ÇÄ : Œì‚ÇÄ), Œ≥‚ÇÄ ‚â† 0 ‚Üí ‚àÄ·∂† (x : K) in ùìù 0, ‚Üëv x < Œ≥‚ÇÄ
    intro Œ≥ hŒ≥
    -- ‚ä¢ ‚àÄ·∂† (x : K) in ùìù 0, ‚Üëv x < Œ≥
    rw [Filter.Eventually, Valued.mem_nhds_zero]
    -- ‚ä¢ ‚àÉ Œ≥_1, {x | ‚Üëv x < ‚ÜëŒ≥_1} ‚äÜ {x | ‚Üëv x < Œ≥}
    use Units.mk0 Œ≥ hŒ≥; rfl
    -- ‚ä¢ {x | ‚Üëv x < ‚Üë(Units.mk0 Œ≥ hŒ≥)} ‚äÜ {x | ‚Üëv x < Œ≥}
                        -- üéâ no goals
  ¬∑ have v_ne : (v x : Œì‚ÇÄ) ‚â† 0 := (Valuation.ne_zero_iff _).mpr h
    -- ‚ä¢ ContinuousAt (‚Üëv) x
    rw [ContinuousAt, WithZeroTopology.tendsto_of_ne_zero v_ne]
    -- ‚ä¢ ‚àÄ·∂† (x_1 : K) in ùìù x, ‚Üëv x_1 = ‚Üëv x
    apply Valued.loc_const v_ne
    -- üéâ no goals
#align valued.continuous_valuation Valued.continuous_valuation

end

end ValuationTopologicalDivisionRing

end DivisionRing

namespace Valued

open UniformSpace

variable {K : Type*} [Field K] {Œì‚ÇÄ : Type*} [LinearOrderedCommGroupWithZero Œì‚ÇÄ] [hv : Valued K Œì‚ÇÄ]

local notation "hat " => Completion

/-- A valued field is completable. -/
instance (priority := 100) completable : CompletableTopField K :=
  { ValuedRing.separated with
    nice := by
      rintro F hF h0
      -- ‚ä¢ Cauchy (map (fun x => x‚Åª¬π) F)
      have : ‚àÉ Œ≥‚ÇÄ : Œì‚ÇÄÀ£, ‚àÉ M ‚àà F, ‚àÄ x ‚àà M, (Œ≥‚ÇÄ : Œì‚ÇÄ) ‚â§ v x := by
        rcases Filter.inf_eq_bot_iff.mp h0 with ‚ü®U, U_in, M, M_in, H‚ü©
        rcases Valued.mem_nhds_zero.mp U_in with ‚ü®Œ≥‚ÇÄ, hU‚ü©
        exists Œ≥‚ÇÄ, M, M_in
        intro x xM
        apply le_of_not_lt _
        intro hyp
        have : x ‚àà U ‚à© M := ‚ü®hU hyp, xM‚ü©
        rwa [H] at this
      rcases this with ‚ü®Œ≥‚ÇÄ, M‚ÇÄ, M‚ÇÄ_in, H‚ÇÄ‚ü©
      -- ‚ä¢ Cauchy (map (fun x => x‚Åª¬π) F)
      rw [Valued.cauchy_iff] at hF ‚ä¢
      -- ‚ä¢ NeBot (map (fun x => x‚Åª¬π) F) ‚àß ‚àÄ (Œ≥ : Œì‚ÇÄÀ£), ‚àÉ M, M ‚àà map (fun x => x‚Åª¬π) F ‚àß  ‚Ä¶
      refine' ‚ü®hF.1.map _, _‚ü©
      -- ‚ä¢ ‚àÄ (Œ≥ : Œì‚ÇÄÀ£), ‚àÉ M, M ‚àà map (fun x => x‚Åª¬π) F ‚àß ‚àÄ (x : K), x ‚àà M ‚Üí ‚àÄ (y : K), y ‚Ä¶
      replace hF := hF.2
      -- ‚ä¢ ‚àÄ (Œ≥ : Œì‚ÇÄÀ£), ‚àÉ M, M ‚àà map (fun x => x‚Åª¬π) F ‚àß ‚àÄ (x : K), x ‚àà M ‚Üí ‚àÄ (y : K), y ‚Ä¶
      intro Œ≥
      -- ‚ä¢ ‚àÉ M, M ‚àà map (fun x => x‚Åª¬π) F ‚àß ‚àÄ (x : K), x ‚àà M ‚Üí ‚àÄ (y : K), y ‚àà M ‚Üí ‚Üëv (y  ‚Ä¶
      rcases hF (min (Œ≥ * Œ≥‚ÇÄ * Œ≥‚ÇÄ) Œ≥‚ÇÄ) with ‚ü®M‚ÇÅ, M‚ÇÅ_in, H‚ÇÅ‚ü©
      -- ‚ä¢ ‚àÉ M, M ‚àà map (fun x => x‚Åª¬π) F ‚àß ‚àÄ (x : K), x ‚àà M ‚Üí ‚àÄ (y : K), y ‚àà M ‚Üí ‚Üëv (y  ‚Ä¶
      clear hF
      -- ‚ä¢ ‚àÉ M, M ‚àà map (fun x => x‚Åª¬π) F ‚àß ‚àÄ (x : K), x ‚àà M ‚Üí ‚àÄ (y : K), y ‚àà M ‚Üí ‚Üëv (y  ‚Ä¶
      use (fun x : K => x‚Åª¬π) '' (M‚ÇÄ ‚à© M‚ÇÅ)
      -- ‚ä¢ (fun x => x‚Åª¬π) '' (M‚ÇÄ ‚à© M‚ÇÅ) ‚àà map (fun x => x‚Åª¬π) F ‚àß ‚àÄ (x : K), x ‚àà (fun x = ‚Ä¶
      constructor
      -- ‚ä¢ (fun x => x‚Åª¬π) '' (M‚ÇÄ ‚à© M‚ÇÅ) ‚àà map (fun x => x‚Åª¬π) F
      ¬∑ rw [mem_map]
        -- ‚ä¢ (fun x => x‚Åª¬π) ‚Åª¬π' ((fun x => x‚Åª¬π) '' (M‚ÇÄ ‚à© M‚ÇÅ)) ‚àà F
        apply mem_of_superset (Filter.inter_mem M‚ÇÄ_in M‚ÇÅ_in)
        -- ‚ä¢ M‚ÇÄ ‚à© M‚ÇÅ ‚äÜ (fun x => x‚Åª¬π) ‚Åª¬π' ((fun x => x‚Åª¬π) '' (M‚ÇÄ ‚à© M‚ÇÅ))
        exact subset_preimage_image _ _
        -- üéâ no goals
      ¬∑ rintro _ ‚ü®x, ‚ü®x_in‚ÇÄ, x_in‚ÇÅ‚ü©, rfl‚ü© _ ‚ü®y, ‚ü®y_in‚ÇÄ, y_in‚ÇÅ‚ü©, rfl‚ü©
        -- ‚ä¢ ‚Üëv ((fun x => x‚Åª¬π) y - (fun x => x‚Åª¬π) x) < ‚ÜëŒ≥
        simp only [mem_setOf_eq]
        -- ‚ä¢ ‚Üëv (y‚Åª¬π - x‚Åª¬π) < ‚ÜëŒ≥
        specialize H‚ÇÅ x x_in‚ÇÅ y y_in‚ÇÅ
        -- ‚ä¢ ‚Üëv (y‚Åª¬π - x‚Åª¬π) < ‚ÜëŒ≥
        replace x_in‚ÇÄ := H‚ÇÄ x x_in‚ÇÄ
        -- ‚ä¢ ‚Üëv (y‚Åª¬π - x‚Åª¬π) < ‚ÜëŒ≥
        replace  := H‚ÇÄ y y_in‚ÇÄ
        -- ‚ä¢ ‚Üëv (y‚Åª¬π - x‚Åª¬π) < ‚ÜëŒ≥
        clear H‚ÇÄ
        -- ‚ä¢ ‚Üëv (y‚Åª¬π - x‚Åª¬π) < ‚ÜëŒ≥
        apply Valuation.inversion_estimate
        -- ‚ä¢ x ‚â† 0
        ¬∑ have : (v x : Œì‚ÇÄ) ‚â† 0 := by
            intro h
            rw [h] at x_in‚ÇÄ
            simp at x_in‚ÇÄ
          exact (Valuation.ne_zero_iff _).mp this
          -- üéâ no goals
        ¬∑ refine' lt_of_lt_of_le H‚ÇÅ _
          -- ‚ä¢ ‚Üë(min (Œ≥ * Œ≥‚ÇÄ * Œ≥‚ÇÄ) Œ≥‚ÇÄ) ‚â§ min (‚ÜëŒ≥ * (‚Üëv x * ‚Üëv x)) (‚Üëv x)
          rw [Units.min_val]
          -- ‚ä¢ min ‚Üë(Œ≥ * Œ≥‚ÇÄ * Œ≥‚ÇÄ) ‚ÜëŒ≥‚ÇÄ ‚â§ min (‚ÜëŒ≥ * (‚Üëv x * ‚Üëv x)) (‚Üëv x)
          apply min_le_min _ x_in‚ÇÄ
          -- ‚ä¢ ‚Üë(Œ≥ * Œ≥‚ÇÄ * Œ≥‚ÇÄ) ‚â§ ‚ÜëŒ≥ * (‚Üëv x * ‚Üëv x)
          rw [mul_assoc]
          -- ‚ä¢ ‚Üë(Œ≥ * (Œ≥‚ÇÄ * Œ≥‚ÇÄ)) ‚â§ ‚ÜëŒ≥ * (‚Üëv x * ‚Üëv x)
          have : ((Œ≥‚ÇÄ * Œ≥‚ÇÄ : Œì‚ÇÄÀ£) : Œì‚ÇÄ) ‚â§ v x * v x :=
            calc
              ‚ÜëŒ≥‚ÇÄ * ‚ÜëŒ≥‚ÇÄ ‚â§ ‚ÜëŒ≥‚ÇÄ * v x := mul_le_mul_left' x_in‚ÇÄ ‚ÜëŒ≥‚ÇÄ
              _ ‚â§ _ := mul_le_mul_right' x_in‚ÇÄ (v x)
          rw [Units.val_mul]
          -- ‚ä¢ ‚ÜëŒ≥ * ‚Üë(Œ≥‚ÇÄ * Œ≥‚ÇÄ) ‚â§ ‚ÜëŒ≥ * (‚Üëv x * ‚Üëv x)
          exact mul_le_mul_left' this Œ≥ }
          -- üéâ no goals
#align valued.completable Valued.completable

open WithZeroTopology

/-- The extension of the valuation of a valued field to the completion of the field. -/
noncomputable def extension : hat K ‚Üí Œì‚ÇÄ :=
  Completion.denseInducing_coe.extend (v : K ‚Üí Œì‚ÇÄ)
#align valued.extension Valued.extension

theorem continuous_extension : Continuous (Valued.extension : hat K ‚Üí Œì‚ÇÄ) := by
  refine' Completion.denseInducing_coe.continuous_extend _
  -- ‚ä¢ ‚àÄ (b : hat K), ‚àÉ c, Tendsto (‚Üëv) (Filter.comap (‚ÜëK) (ùìù b)) (ùìù c)
  intro x‚ÇÄ
  -- ‚ä¢ ‚àÉ c, Tendsto (‚Üëv) (Filter.comap (‚ÜëK) (ùìù x‚ÇÄ)) (ùìù c)
  rcases eq_or_ne x‚ÇÄ 0 with (rfl | h)
  -- ‚ä¢ ‚àÉ c, Tendsto (‚Üëv) (Filter.comap (‚ÜëK) (ùìù 0)) (ùìù c)
  ¬∑ refine' ‚ü®0, _‚ü©
    -- ‚ä¢ Tendsto (‚Üëv) (Filter.comap (‚ÜëK) (ùìù 0)) (ùìù 0)
    erw [‚Üê Completion.denseInducing_coe.toInducing.nhds_eq_comap]
    -- ‚ä¢ Tendsto (‚Üëv) (ùìù 0) (ùìù 0)
    exact Valued.continuous_valuation.tendsto' 0 0 (map_zero v)
    -- üéâ no goals
  ¬∑ have preimage_one : v ‚Åª¬π' {(1 : Œì‚ÇÄ)} ‚àà ùìù (1 : K) := by
      have : (v (1 : K) : Œì‚ÇÄ) ‚â† 0 := by
        rw [Valuation.map_one]
        exact zero_ne_one.symm
      convert Valued.loc_const this
      ext x
      rw [Valuation.map_one, mem_preimage, mem_singleton_iff, mem_setOf_eq]
    obtain ‚ü®V, V_in, hV‚ü© : ‚àÉ V ‚àà ùìù (1 : hat K), ‚àÄ x : K, (x : hat K) ‚àà V ‚Üí (v x : Œì‚ÇÄ) = 1 := by
      rwa [Completion.denseInducing_coe.nhds_eq_comap, mem_comap] at preimage_one
    have : ‚àÉ V' ‚àà ùìù (1 : hat K), (0 : hat K) ‚àâ V' ‚àß ‚àÄ (x) (_ : x ‚àà V') (y) (_ : y ‚àà V'),
      x * y‚Åª¬π ‚àà V := by
      have : Tendsto (fun p : hat K √ó hat K => p.1 * p.2‚Åª¬π) ((ùìù 1) √óÀ¢ (ùìù 1)) (ùìù 1) := by
        rw [‚Üê nhds_prod_eq]
        conv =>
          congr
          rfl
          rfl
          rw [‚Üê one_mul (1 : hat K)]
        refine'
          Tendsto.mul continuous_fst.continuousAt (Tendsto.comp _ continuous_snd.continuousAt)
        -- Porting note: Added `ContinuousAt.tendsto`
        convert (continuousAt_inv‚ÇÄ (zero_ne_one.symm : 1 ‚â† (0 : hat K))).tendsto
        exact inv_one.symm
      rcases tendsto_prod_self_iff.mp this V V_in with ‚ü®U, U_in, hU‚ü©
      let hatKstar := ({0}·∂ú : Set <| hat K)
      have : hatKstar ‚àà ùìù (1 : hat K) := compl_singleton_mem_nhds zero_ne_one.symm
      use U ‚à© hatKstar, Filter.inter_mem U_in this
      constructor
      ¬∑ rintro ‚ü®_, h'‚ü©
        rw [mem_compl_singleton_iff] at h'
        exact h' rfl
      ¬∑ rintro x ‚ü®hx, _‚ü© y ‚ü®hy, _‚ü©
        apply hU <;> assumption
    rcases this with ‚ü®V', V'_in, zeroV', hV'‚ü©
    -- ‚ä¢ ‚àÉ c, Tendsto (‚Üëv) (Filter.comap (‚ÜëK) (ùìù x‚ÇÄ)) (ùìù c)
    have nhds_right : (fun x => x * x‚ÇÄ) '' V' ‚àà ùìù x‚ÇÄ := by
      have l : Function.LeftInverse (fun x : hat K => x * x‚ÇÄ‚Åª¬π) fun x : hat K => x * x‚ÇÄ := by
        intro x
        simp only [mul_assoc, mul_inv_cancel h, mul_one]
      have r : Function.RightInverse (fun x : hat K => x * x‚ÇÄ‚Åª¬π) fun x : hat K => x * x‚ÇÄ := by
        intro x
        simp only [mul_assoc, inv_mul_cancel h, mul_one]
      have c : Continuous fun x : hat K => x * x‚ÇÄ‚Åª¬π := continuous_id.mul continuous_const
      rw [image_eq_preimage_of_inverse l r]
      rw [‚Üê mul_inv_cancel h] at V'_in
      exact c.continuousAt V'_in
    have : ‚àÉ z‚ÇÄ : K, ‚àÉ y‚ÇÄ ‚àà V', ‚Üëz‚ÇÄ = y‚ÇÄ * x‚ÇÄ ‚àß z‚ÇÄ ‚â† 0 := by
      rcases Completion.denseRange_coe.mem_nhds nhds_right with ‚ü®z‚ÇÄ, y‚ÇÄ, y‚ÇÄ_in, H : y‚ÇÄ * x‚ÇÄ = z‚ÇÄ‚ü©
      refine' ‚ü®z‚ÇÄ, y‚ÇÄ, y‚ÇÄ_in, ‚ü®H.symm, _‚ü©‚ü©
      rintro rfl
      exact mul_ne_zero (ne_of_mem_of_not_mem y‚ÇÄ_in zeroV') h H
    rcases this with ‚ü®z‚ÇÄ, y‚ÇÄ, y‚ÇÄ_in, hz‚ÇÄ, z‚ÇÄ_ne‚ü©
    -- ‚ä¢ ‚àÉ c, Tendsto (‚Üëv) (Filter.comap (‚ÜëK) (ùìù x‚ÇÄ)) (ùìù c)
    have vz‚ÇÄ_ne : (v z‚ÇÄ : Œì‚ÇÄ) ‚â† 0 := by rwa [Valuation.ne_zero_iff]
    -- ‚ä¢ ‚àÉ c, Tendsto (‚Üëv) (Filter.comap (‚ÜëK) (ùìù x‚ÇÄ)) (ùìù c)
    refine' ‚ü®v z‚ÇÄ, _‚ü©
    -- ‚ä¢ Tendsto (‚Üëv) (Filter.comap (‚ÜëK) (ùìù x‚ÇÄ)) (ùìù (‚Üëv z‚ÇÄ))
    rw [WithZeroTopology.tendsto_of_ne_zero vz‚ÇÄ_ne, eventually_comap]
    -- ‚ä¢ ‚àÄ·∂† (b : hat K) in ùìù x‚ÇÄ, ‚àÄ (a : K), ‚ÜëK a = b ‚Üí ‚Üëv a = ‚Üëv z‚ÇÄ
    filter_upwards [nhds_right]with x x_in a ha
    -- ‚ä¢ ‚Üëv a = ‚Üëv z‚ÇÄ
    rcases x_in with ‚ü®y, y_in, rfl‚ü©
    -- ‚ä¢ ‚Üëv a = ‚Üëv z‚ÇÄ
    have : (v (a * z‚ÇÄ‚Åª¬π) : Œì‚ÇÄ) = 1 := by
      apply hV
      have : (z‚ÇÄ‚Åª¬π : K) = (z‚ÇÄ : hat K)‚Åª¬π := map_inv‚ÇÄ (Completion.coeRingHom : K ‚Üí+* hat K) z‚ÇÄ
      rw [Completion.coe_mul, this, ha, hz‚ÇÄ, mul_inv, mul_comm y‚ÇÄ‚Åª¬π, ‚Üê mul_assoc, mul_assoc y,
        mul_inv_cancel h, mul_one]
      solve_by_elim
    calc
      v a = v (a * z‚ÇÄ‚Åª¬π * z‚ÇÄ) := by rw [mul_assoc, inv_mul_cancel z‚ÇÄ_ne, mul_one]
      _ = v (a * z‚ÇÄ‚Åª¬π) * v z‚ÇÄ := (Valuation.map_mul _ _ _)
      _ = v z‚ÇÄ := by rw [this, one_mul]
#align valued.continuous_extension Valued.continuous_extension

@[simp, norm_cast]
theorem extension_extends (x : K) : extension (x : hat K) = v x := by
  refine' Completion.denseInducing_coe.extend_eq_of_tendsto _
  -- ‚ä¢ Tendsto (‚Üëv) (Filter.comap (‚ÜëK) (ùìù (‚ÜëK x))) (ùìù (‚Üëv x))
  rw [‚Üê Completion.denseInducing_coe.nhds_eq_comap]
  -- ‚ä¢ Tendsto (‚Üëv) (ùìù x) (ùìù (‚Üëv x))
  exact Valued.continuous_valuation.continuousAt
  -- üéâ no goals
#align valued.extension_extends Valued.extension_extends

/-- the extension of a valuation on a division ring to its completion. -/
noncomputable def extensionValuation : Valuation (hat K) Œì‚ÇÄ where
  toFun := Valued.extension
  map_zero' := by
    rw [‚Üê v.map_zero (R := K), ‚Üê Valued.extension_extends (0 : K)]
    -- ‚ä¢ extension 0 = extension (‚ÜëK 0)
    rfl
    -- üéâ no goals
  map_one' := by
    simp
    -- ‚ä¢ extension 1 = 1
    rw [‚Üê Completion.coe_one, Valued.extension_extends (1 : K)]
    -- ‚ä¢ ‚Üëv 1 = 1
    exact Valuation.map_one _
    -- üéâ no goals
  map_mul' x y := by
    apply Completion.induction_on‚ÇÇ x y
      (p := fun x y => extension (x * y) = extension x * extension y)
    ¬∑ have c1 : Continuous fun x : hat K √ó hat K => Valued.extension (x.1 * x.2) :=
        Valued.continuous_extension.comp (continuous_fst.mul continuous_snd)
      have c2 : Continuous fun x : hat K √ó hat K => Valued.extension x.1 * Valued.extension x.2 :=
        (Valued.continuous_extension.comp continuous_fst).mul
          (Valued.continuous_extension.comp continuous_snd)
      exact isClosed_eq c1 c2
      -- üéâ no goals
    ¬∑ intro x y
      -- ‚ä¢ extension (‚ÜëK x * ‚ÜëK y) = extension (‚ÜëK x) * extension (‚ÜëK y)
      norm_cast
      -- ‚ä¢ ‚Üëv (x * y) = ‚Üëv x * ‚Üëv y
      exact Valuation.map_mul _ _ _
      -- üéâ no goals
  map_add_le_max' x y := by
    rw [le_max_iff]
    -- ‚ä¢ ZeroHom.toFun (‚Üë{ toZeroHom := { toFun := extension, map_zero' := (_ : exten ‚Ä¶
    apply Completion.induction_on‚ÇÇ x y
      (p := fun x y => extension (x + y) ‚â§ extension x ‚à® extension (x + y) ‚â§ extension y)
    ¬∑ have cont : Continuous (Valued.extension : hat K ‚Üí Œì‚ÇÄ) := Valued.continuous_extension
      -- ‚ä¢ IsClosed {x | extension (x.fst + x.snd) ‚â§ extension x.fst ‚à® extension (x.fst ‚Ä¶
      exact
        (isClosed_le (cont.comp continuous_add) <| cont.comp continuous_fst).union
          (isClosed_le (cont.comp continuous_add) <| cont.comp continuous_snd)
    ¬∑ intro x y
      -- ‚ä¢ extension (‚ÜëK x + ‚ÜëK y) ‚â§ extension (‚ÜëK x) ‚à® extension (‚ÜëK x + ‚ÜëK y) ‚â§ exten ‚Ä¶
      norm_cast
      -- ‚ä¢ ‚Üëv (x + y) ‚â§ ‚Üëv x ‚à® ‚Üëv (x + y) ‚â§ ‚Üëv y
      rw [‚Üê le_max_iff]
      -- ‚ä¢ ‚Üëv (x + y) ‚â§ max (‚Üëv x) (‚Üëv y)
      exact v.map_add x y
      -- üéâ no goals
#align valued.extension_valuation Valued.extensionValuation

-- Bourbaki CA VI ¬ß5 no.3 Proposition 5 (d)
theorem closure_coe_completion_v_lt {Œ≥ : Œì‚ÇÄÀ£} :
    closure ((‚Üë) '' { x : K | v x < (Œ≥ : Œì‚ÇÄ) }) =
    { x : hat K | extensionValuation x < (Œ≥ : Œì‚ÇÄ) } := by
  ext x
  -- ‚ä¢ x ‚àà closure (‚ÜëK '' {x | ‚Üëv x < ‚ÜëŒ≥}) ‚Üî x ‚àà {x | ‚ÜëextensionValuation x < ‚ÜëŒ≥}
  let Œ≥‚ÇÄ := extensionValuation x
  -- ‚ä¢ x ‚àà closure (‚ÜëK '' {x | ‚Üëv x < ‚ÜëŒ≥}) ‚Üî x ‚àà {x | ‚ÜëextensionValuation x < ‚ÜëŒ≥}
  suffices Œ≥‚ÇÄ ‚â† 0 ‚Üí (x ‚àà closure ((‚Üë) '' { x : K | v x < (Œ≥ : Œì‚ÇÄ) }) ‚Üî Œ≥‚ÇÄ < (Œ≥ : Œì‚ÇÄ)) by
    cases' eq_or_ne Œ≥‚ÇÄ 0 with h h
    ¬∑ simp only [h, (Valuation.zero_iff _).mp h, mem_setOf_eq, Valuation.map_zero, Units.zero_lt,
        iff_true_iff]
      apply subset_closure
      exact ‚ü®0, by simp only [mem_setOf_eq, Valuation.map_zero, Units.zero_lt, true_and_iff]; rfl ‚ü©
    ¬∑ exact this h
  intro h
  -- ‚ä¢ x ‚àà closure (‚ÜëK '' {x | ‚Üëv x < ‚ÜëŒ≥}) ‚Üî Œ≥‚ÇÄ < ‚ÜëŒ≥
  have hŒ≥‚ÇÄ : extension ‚Åª¬π' {Œ≥‚ÇÄ} ‚àà ùìù x :=
    continuous_extension.continuousAt.preimage_mem_nhds
      (WithZeroTopology.singleton_mem_nhds_of_ne_zero h)
  rw [mem_closure_iff_nhds']
  -- ‚ä¢ (‚àÄ (t : Set (hat K)), t ‚àà ùìù x ‚Üí ‚àÉ y, ‚Üëy ‚àà t) ‚Üî Œ≥‚ÇÄ < ‚ÜëŒ≥
  refine' ‚ü®fun hx => _, fun hx s hs => _‚ü©
  -- ‚ä¢ Œ≥‚ÇÄ < ‚ÜëŒ≥
  ¬∑ obtain ‚ü®‚ü®-, y, hy‚ÇÅ : v y < (Œ≥ : Œì‚ÇÄ), rfl‚ü©, hy‚ÇÇ‚ü© := hx _ hŒ≥‚ÇÄ
    -- ‚ä¢ Œ≥‚ÇÄ < ‚ÜëŒ≥
    replace hy‚ÇÇ : v y = Œ≥‚ÇÄ
    -- ‚ä¢ ‚Üëv y = Œ≥‚ÇÄ
    ¬∑ simpa using hy‚ÇÇ
      -- üéâ no goals
    rwa [‚Üê hy‚ÇÇ]
    -- üéâ no goals
  ¬∑ obtain ‚ü®y, hy‚ÇÅ, hy‚ÇÇ‚ü© := Completion.denseRange_coe.mem_nhds (inter_mem hŒ≥‚ÇÄ hs)
    -- ‚ä¢ ‚àÉ y, ‚Üëy ‚àà s
    replace hy‚ÇÅ : v y = Œ≥‚ÇÄ
    -- ‚ä¢ ‚Üëv y = Œ≥‚ÇÄ
    ¬∑ simpa using hy‚ÇÅ
      -- üéâ no goals
    rw [‚Üê hy‚ÇÅ] at hx
    -- ‚ä¢ ‚àÉ y, ‚Üëy ‚àà s
    exact ‚ü®‚ü®y, ‚ü®y, hx, rfl‚ü©‚ü©, hy‚ÇÇ‚ü©
    -- üéâ no goals
#align valued.closure_coe_completion_v_lt Valued.closure_coe_completion_v_lt

noncomputable instance valuedCompletion : Valued (hat K) Œì‚ÇÄ where
  v := extensionValuation
  is_topological_valuation s := by
    suffices
      HasBasis (ùìù (0 : hat K)) (fun _ => True) fun Œ≥ : Œì‚ÇÄÀ£ => { x | extensionValuation x < Œ≥ } by
      rw [this.mem_iff]
      exact exists_congr fun Œ≥ => by simp
    simp_rw [‚Üê closure_coe_completion_v_lt]
    -- ‚ä¢ HasBasis (ùìù 0) (fun x => True) fun Œ≥ => closure (‚ÜëK '' {x | ‚Üëv x < ‚ÜëŒ≥})
    exact (hasBasis_nhds_zero K Œì‚ÇÄ).hasBasis_of_denseInducing Completion.denseInducing_coe
    -- üéâ no goals
#align valued.valued_completion Valued.valuedCompletion

-- Porting note: removed @[norm_cast] attribute due to error:
-- norm_cast: badly shaped lemma, rhs can't start with coe
@[simp]
theorem valuedCompletion_apply (x : K) : Valued.v (x : hat K) = v x :=
  extension_extends x
#align valued.valued_completion_apply Valued.valuedCompletion_apply

end Valued
