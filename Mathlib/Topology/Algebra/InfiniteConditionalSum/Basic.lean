import Mathlib.NumberTheory.IccSums

open  TopologicalSpace Filter Function Finset

open scoped Topology

variable {Œ± Œ≤ Œ≥ : Type*}

variable [CommMonoid Œ±] [TopologicalSpace Œ±]

@[to_additive]
def HasProdFilter (L : Filter (Finset Œ≤)) (f : Œ≤ ‚Üí Œ±) (a : Œ±) : Prop :=
  Tendsto (fun s : Finset Œ≤ ‚Ü¶ ‚àè b ‚àà s, f b) L (ùìù a)

@[to_additive
/-- `SummableAlongFilter f` means that `f` has some (infinite) sum. -/]
def MultipliableFilter (L : Filter (Finset Œ≤)) (f : Œ≤ ‚Üí Œ±) : Prop :=
  ‚àÉ a, HasProdFilter L f a

open scoped Classical in
/-- `‚àè' i, f i` is the product of `f` if along the filter `L` if it exists or 1 otherwise. -/
@[to_additive /-- `‚àë' i, f i` is the sum  of `f` if along the filter `L` if it exists
 or 0 otherwise. -/]
noncomputable irreducible_def tprodFilter {Œ≤} (L : Filter (Finset Œ≤)) (f : Œ≤ ‚Üí Œ±) :=
  if h : MultipliableFilter L f then
   h.choose
  else 1

@[inherit_doc tprod]
notation3 "‚àè' " "[" L "]" (...)", "r:67:(scoped f => tprodFilter L f) => r
@[inherit_doc tsumFilter]
notation3 "‚àë' " "[" L "]" (...)", "r:67:(scoped f => tsumFilter L f) => r

variable (L : Filter (Finset Œ≤)) {f : Œ≤ ‚Üí Œ±} {a : Œ±}

@[to_additive]
theorem HasProdFilter.multipliableFilter (h : HasProdFilter L f a) : MultipliableFilter L f :=
  ‚ü®a, h‚ü©

@[to_additive]
theorem tprodFilter_eq_one_of_not_multipliableFilter (h : ¬¨MultipliableFilter L f) :
    ‚àè'[L] b, f b = 1 := by
  simp [tprodFilter_def, h]

@[to_additive]
theorem MultipliableFilter.hasProdFilter {L : Filter (Finset Œ≤)} (ha : MultipliableFilter L f) :
    HasProdFilter L f (‚àè'[L] b, f b) := by
  simp only [tprodFilter_def, ha, dite_true]
  apply ha.choose_spec

@[to_additive]
theorem HasProdFilter.unique {a‚ÇÅ a‚ÇÇ : Œ±} [T2Space Œ±] [L.NeBot] :
    HasProdFilter L f a‚ÇÅ ‚Üí HasProdFilter L f a‚ÇÇ ‚Üí a‚ÇÅ = a‚ÇÇ := by
  classical exact tendsto_nhds_unique

variable [T2Space Œ±]

@[to_additive]
theorem HasProdFilter.tprodFilter_eq (ha : HasProdFilter L f a) [L.NeBot] : ‚àè'[L] b, f b = a :=
  (MultipliableFilter.hasProdFilter ha.multipliableFilter).unique L ha

omit [T2Space Œ±] in
/-- Constant one function has product `1` -/
@[to_additive /-- Constant zero function has sum `0` -/]
theorem hasProdFilter_one : HasProdFilter L (fun _ ‚Ü¶ 1 : Œ≤ ‚Üí Œ±) 1 := by
  simp [HasProdFilter, tendsto_const_nhds]

omit [T2Space Œ±] in
@[to_additive]
theorem multipliableFilter_one : MultipliableFilter L (fun _ ‚Ü¶ 1 : Œ≤ ‚Üí Œ±) :=
  (hasProdFilter_one L).multipliableFilter

@[to_additive, simp]
lemma tprodFilter_one_eq_one [L.NeBot] : ‚àè'[L] _, (1 : Œ±) = 1 := by
  exact (hasProdFilter_one L).tprodFilter_eq


@[to_additive]
theorem MultipliableFilter.hasProdFilter_iff (h : MultipliableFilter L f) [L.NeBot] :
    HasProdFilter L f a ‚Üî ‚àè'[L] b, f b = a := by
  apply Iff.intro
  ¬∑ intro h
    apply h.tprodFilter_eq
  ¬∑ intro H
    have := h.hasProdFilter
    rw [H] at this
    exact this

omit [T2Space Œ±] in
@[to_additive]
protected theorem HasProdFilter.map [CommMonoid Œ≥] [TopologicalSpace Œ≥] (hf : HasProdFilter L f a)
    {G} [FunLike G Œ± Œ≥] [MonoidHomClass G Œ± Œ≥] (g : G) (hg : Continuous g) :
    HasProdFilter L (g ‚àò f) (g a) := by
  have : (g ‚àò fun s : Finset Œ≤ ‚Ü¶ ‚àè b ‚àà s, f b) = fun s : Finset Œ≤ ‚Ü¶ ‚àè b ‚àà s, (g ‚àò f) b :=
    funext <| map_prod g _
  unfold HasProdFilter
  rw [‚Üê this]
  exact (hg.tendsto a).comp hf

variable {Œ≥ : Type*} [NonUnitalNonAssocSemiring Œ≥] [TopologicalSpace Œ≥] [IsTopologicalSemiring Œ≥]
{f : Œ≤ ‚Üí Œ≥}

theorem HasSumFilter.mul_left (a a‚ÇÅ : Œ≥) (L : Filter (Finset Œ≤)) (h : HasSumFilter L f a‚ÇÅ) :
      HasSumFilter L (fun i ‚Ü¶ a * f i) (a * a‚ÇÅ) := by
  simpa using h.map L (AddMonoidHom.mulLeft a)  (continuous_const.mul continuous_id)

theorem SummableFilter.mul_left (a) (hf : SummableFilter L f) : SummableFilter L fun i ‚Ü¶ a * f i :=
  (hf.hasSumFilter.mul_left _).summableFilter

protected theorem SummableFilter.tsumFilter_mul_left {Œ± : Type*} [DivisionSemiring Œ±]
    [TopologicalSpace Œ±] [T2Space Œ±] [IsTopologicalSemiring Œ±] (a : Œ±) (f : Œ≤ ‚Üí Œ±)
    [L.NeBot] (hf : SummableFilter L f) :
    ‚àë'[L] i, a * f i = a * ‚àë'[L] i, f i :=
  ((hf.hasSumFilter.mul_left) a).tsumFilter_eq

theorem hasSumFilter_mul_left_iff {Œ± : Type*} [DivisionSemiring Œ±] [TopologicalSpace Œ±] [T2Space Œ±]
    [L.NeBot] [IsTopologicalSemiring Œ±] {a a‚ÇÅ : Œ±} (h : a ‚â† 0) (f : Œ≤ ‚Üí Œ±) :
      HasSumFilter L (fun i ‚Ü¶ a * f i) (a * a‚ÇÅ) ‚Üî HasSumFilter L f a‚ÇÅ :=
  ‚ü®fun H ‚Ü¶ by simpa only [inv_mul_cancel_left‚ÇÄ h] using H.mul_left a‚Åª¬π, HasSumFilter.mul_left _ _ L‚ü©

theorem summableFilter_mul_left_iff {Œ± : Type*} [DivisionSemiring Œ±] [TopologicalSpace Œ±]
    [T2Space Œ±] [L.NeBot] [IsTopologicalSemiring Œ±] {a : Œ±} (h : a ‚â† 0) (f : Œ≤ ‚Üí Œ±) :
      (SummableFilter L fun i ‚Ü¶ a * f i) ‚Üî SummableFilter L f :=
  ‚ü®fun H ‚Ü¶ by simpa only [inv_mul_cancel_left‚ÇÄ h] using H.mul_left L a‚Åª¬π , fun H ‚Ü¶ H.mul_left L _‚ü©

lemma tsumFilter_mul_left {Œ± : Type*} [DivisionSemiring Œ±] [TopologicalSpace Œ±] [T2Space Œ±]
    [L.NeBot] [IsTopologicalSemiring Œ±] (a : Œ±) (f : Œ≤ ‚Üí Œ±) :
    ‚àë'[L] b, a * f b = a * ‚àë'[L] b, f b := by
  classical
  exact if hf : SummableFilter L f then hf.tsumFilter_mul_left L a
  else if ha : a = 0 then by simp [ha];  apply tsumFilter_zero_eq_zero
  else by rw [tsumFilter_eq_zero_of_not_summableFilter L hf,
              tsumFilter_eq_zero_of_not_summableFilter L
                (mt (summableFilter_mul_left_iff L ha f).mp hf), mul_zero]


@[to_additive]
theorem HasProdFilter.inv {Œ± : Type*} {a : Œ±} {f : Œ≤ ‚Üí Œ±} [CommGroup Œ±] [TopologicalSpace Œ±]
    [IsTopologicalGroup Œ±] {L : Filter (Finset Œ≤)} (h : HasProdFilter L f a) :
    HasProdFilter L (fun b ‚Ü¶ (f b)‚Åª¬π) a‚Åª¬π := by
  apply h.map L (MonoidHom.id Œ±)‚Åª¬π continuous_inv

@[to_additive]
theorem MultipliableFilter.inv {Œ± : Type*} {f : Œ≤ ‚Üí Œ±} [CommGroup Œ±] [TopologicalSpace Œ±]
    [IsTopologicalGroup Œ±] {L : Filter (Finset Œ≤)}
    (hf : MultipliableFilter L f) : MultipliableFilter L fun b ‚Ü¶ (f b)‚Åª¬π :=
  hf.hasProdFilter.inv.multipliableFilter

omit [T2Space Œ±] in
@[to_additive]
theorem HasProdFilter.mul {f g : Œ≤ ‚Üí Œ±} {a b : Œ±} [ContinuousMul Œ±] {L : Filter (Finset Œ≤)}
    (hf : HasProdFilter L f a) (hg : HasProdFilter L g b) :
    HasProdFilter L (fun b ‚Ü¶ f b * g b) (a * b) := by
  dsimp only [HasProdFilter] at hf hg ‚ä¢
  simp_rw [prod_mul_distrib]
  exact hf.mul hg

omit [T2Space Œ±] in
@[to_additive]
theorem MultipliableFilter.mul {f g : Œ≤ ‚Üí Œ±} [ContinuousMul Œ±] (hf : MultipliableFilter L f)
    (hg : MultipliableFilter L g) :
    MultipliableFilter L (fun b ‚Ü¶ f b * g b) := by
  obtain ‚ü®a, ha‚ü© := hf
  obtain ‚ü®b, hb‚ü© := hg
  use a * b
  simp [HasProdFilter] at *
  have := Tendsto.mul (ha) (hb)
  apply this.congr
  intro s
  exact Eq.symm prod_mul_distrib

@[to_additive]
theorem HasProdFilter.div {Œ± : Type*} {f g : Œ≤ ‚Üí Œ±} {a b : Œ±} [CommGroup Œ±] [TopologicalSpace Œ±]
    [IsTopologicalGroup Œ±] {L : Filter (Finset Œ≤)} (hf : HasProdFilter L f a)
    (hg : HasProdFilter L g b) : HasProdFilter L (fun b ‚Ü¶ f b / g b) (a / b) := by
  simp only [div_eq_mul_inv]
  apply hf.mul hg.inv

@[to_additive]
theorem MultipliableFilter.div {Œ± : Type*} {f g : Œ≤ ‚Üí Œ±} [CommGroup Œ±]
    [TopologicalSpace Œ±] [IsTopologicalGroup Œ±] (hf : MultipliableFilter L f)
    (hg : MultipliableFilter L g) : MultipliableFilter L fun b ‚Ü¶ f b / g b :=
  (hf.hasProdFilter.div hg.hasProdFilter).multipliableFilter

@[to_additive]
protected theorem MultipliableFilter.tprodFilter_div {Œ± : Type*} {f g : Œ≤ ‚Üí Œ±} [CommGroup Œ±]
    [TopologicalSpace Œ±] [IsTopologicalGroup Œ±] [T2Space Œ±] [L.NeBot] (hf : MultipliableFilter L f)
    (hg : MultipliableFilter L g) : ‚àè'[L] b, (f b / g b) = (‚àè'[L] b, f b) / ‚àè'[L] b, g b :=
  (hf.hasProdFilter.div hg.hasProdFilter).tprodFilter_eq

omit [T2Space Œ±] in
@[to_additive]
lemma multipliable_iff_multipliableFilter_atTop {f : Œ≤ ‚Üí Œ±} :
    Multipliable f ‚Üî MultipliableFilter atTop f := by
  simp [Multipliable, MultipliableFilter, HasProd, HasProdFilter]

omit [T2Space Œ±] in
@[to_additive]
lemma hasProd_iff_hasProdFilter_atTop {f : Œ≤ ‚Üí Œ±} {a : Œ±} :
    HasProd f a ‚Üî HasProdFilter atTop f a := by
  simp [HasProd, HasProdFilter]

@[to_additive]
lemma tprod_eq_tproFilter_atTop {f : Œ≤ ‚Üí Œ±} : ‚àè' [atTop] b, f b = ‚àè' b, f b := by
  by_cases h : MultipliableFilter atTop f
  ¬∑ have := h.hasProdFilter
    rw [this.tprodFilter_eq atTop]
    rw [‚Üê multipliable_iff_multipliableFilter_atTop] at h
    have H := h.hasProd
    rw [‚Üê hasProd_iff_hasProdFilter_atTop] at this
    apply HasProd.unique this H
  ¬∑ rw [tprodFilter_eq_one_of_not_multipliableFilter atTop h, tprod_eq_one_of_not_multipliable h]

variable {Œπ : Type*} {X : Œ± ‚Üí Type*} [‚àÄ x, CommMonoid (X x)] [‚àÄ x, TopologicalSpace (X x)]

omit [CommMonoid Œ±] [TopologicalSpace Œ±] [T2Space Œ±] in
@[to_additive]
theorem Pi.hasProdFilter {f : Œ≤ ‚Üí ‚àÄ x, X x} {g : ‚àÄ x, X x} :
    HasProdFilter L f g ‚Üî ‚àÄ x, HasProdFilter L (fun i ‚Ü¶ f i x) (g x) := by
  simp only [HasProdFilter, tendsto_pi_nhds, prod_apply]

omit [CommMonoid Œ±] [TopologicalSpace Œ±] [T2Space Œ±] in
@[to_additive]
theorem Pi.multipliableFilter {f : Œ≤ ‚Üí ‚àÄ x, X x} :
    MultipliableFilter L f ‚Üî ‚àÄ x, MultipliableFilter L fun i ‚Ü¶ f i x := by
  simp only [MultipliableFilter, Pi.hasProdFilter, Classical.skolem]

omit [CommMonoid Œ±] [TopologicalSpace Œ±] [T2Space Œ±] in
@[to_additive]
theorem tprodFilter_apply [‚àÄ x, T2Space (X x)] {f : Œ≤ ‚Üí ‚àÄ x, X x} {x : Œ±} [L.NeBot]
    (hf : MultipliableFilter L f) : (‚àè'[L] i, f i) x = ‚àè'[L] i, f i x :=
  ((Pi.hasProdFilter L).mp hf.hasProdFilter x).tprodFilter_eq.symm

def Icc_filter : Filter (Finset ‚Ñ§) := atTop.map (fun N : ‚Ñï ‚Ü¶ Icc (-(N : ‚Ñ§)) N)

def Ico_filter : Filter (Finset ‚Ñ§) := atTop.map (fun N : ‚Ñï ‚Ü¶ Ico (-(N : ‚Ñ§)) N)

instance : NeBot (Icc_filter) := by
  simp [Icc_filter, Filter.NeBot.map]

instance : NeBot (Ico_filter) := by
  simp [Ico_filter, Filter.NeBot.map]


lemma tendsto_Icc_atTop_atTop : Tendsto (fun N : ‚Ñï => Finset.Icc (-N : ‚Ñ§) N) atTop atTop :=
  tendsto_atTop_finset_of_monotone (fun _ _ _ ‚Ü¶ Finset.Icc_subset_Icc (by gcongr) (by gcongr))
  (fun x ‚Ü¶ ‚ü®x.natAbs, by simp [le_abs, neg_le]‚ü©)

lemma tendsto_Ico_atTop_atTop : Tendsto (fun N : ‚Ñï => Finset.Ico (-N : ‚Ñ§) N) atTop atTop := by
  apply tendsto_atTop_finset_of_monotone (fun _ _ _ ‚Ü¶ Finset.Ico_subset_Ico (by omega) (by gcongr))
  exact fun x => ‚ü®x.natAbs + 1, by simpa using ‚ü®by apply le_trans _ (add_abs_nonneg x); omega,
    Int.lt_add_one_iff.mpr (le_abs_self x)‚ü© ‚ü©

lemma tendsto_Ioc_atTop_atTop : Tendsto (fun N : ‚Ñï => Finset.Ioc (-N : ‚Ñ§) N) atTop atTop := by
  apply tendsto_atTop_finset_of_monotone (fun _ _ _ ‚Ü¶ Finset.Ioc_subset_Ioc (by omega) (by gcongr))
  exact fun x => ‚ü®x.natAbs + 1, by simpa using ‚ü®by apply le_trans _ (add_abs_nonneg x); omega,
    (Int.lt_add_one_iff.mpr (le_abs_self x)).le‚ü©‚ü©

lemma tendsto_Ioo_atTop_atTop : Tendsto (fun N : ‚Ñï => Finset.Ioo (-N : ‚Ñ§) N) atTop atTop := by
  apply tendsto_atTop_finset_of_monotone (fun _ _ _ ‚Ü¶ Finset.Ioo_subset_Ioo (by omega) (by gcongr))
  exact fun x => ‚ü®x.natAbs + 1, by simpa using ‚ü®by apply le_trans _ (add_abs_nonneg x); omega,
    (Int.lt_add_one_iff.mpr (le_abs_self x))‚ü©‚ü©



@[to_additive]
lemma prodFilter_int_atTop_eq_Icc_filter {f : ‚Ñ§ ‚Üí Œ±}
    (hf : MultipliableFilter atTop f) : ‚àè'[atTop] b, f b  = ‚àè'[Icc_filter] b, f b := by
  have := (hf.hasProdFilter).comp tendsto_Icc_atTop_atTop
  simp only [Icc_filter] at *
  apply symm
  apply HasProdFilter.tprodFilter_eq
  simp only [HasProdFilter, tendsto_map'_iff]
  apply this.congr
  simp


@[to_additive]
lemma prodFilter_int_atTop_eq_Ico_filter {f : ‚Ñ§ ‚Üí Œ±}
    (hf : MultipliableFilter atTop f) : ‚àè'[atTop] b, f b  = ‚àè'[Ico_filter] b, f b := by
  have := (hf.hasProdFilter).comp tendsto_Ico_atTop_atTop
  simp only [Ico_filter] at *
  apply symm
  apply HasProdFilter.tprodFilter_eq
  simp only [HasProdFilter, tendsto_map'_iff]
  apply this.congr
  simp

@[to_additive] --this needs a hyp, but lets see what the min it needs
lemma multipliableFilter_int_Icc_eq_Ico_filter {Œ± : Type*} {f : ‚Ñ§ ‚Üí Œ±} [CommGroup Œ±]
    [TopologicalSpace Œ±] [ContinuousMul Œ±] [T2Space Œ±] (hf : MultipliableFilter Icc_filter f)
    (hf2 : Tendsto (fun N : ‚Ñï ‚Ü¶ (f ‚ÜëN)‚Åª¬π) atTop (ùìù 1)) : MultipliableFilter Ico_filter f := by
  have := (hf.hasProdFilter)
  apply HasProdFilter.multipliableFilter
  ¬∑ simp only [Ico_filter] at *
    simp only [HasProdFilter, tendsto_map'_iff] at *
    apply Filter.Tendsto_of_div_tendsto_one _ (by apply this)
    conv =>
      enter [1, N]
      simp
      rw [prod_Icc_eq_prod_Ico_succ _ (by omega)]
      simp
    apply hf2

@[to_additive] --this needs a hyp, but lets see what the min it needs
lemma prodFilter_int_Icc_eq_Ico_filter {Œ± : Type*} {f : ‚Ñ§ ‚Üí Œ±} [CommGroup Œ±] [TopologicalSpace Œ±]
    [ContinuousMul Œ±] [T2Space Œ±] (hf : MultipliableFilter Icc_filter f)
    (hf2 : Tendsto (fun N : ‚Ñï ‚Ü¶ (f ‚ÜëN)‚Åª¬π) atTop (ùìù 1)) :
    ‚àè'[Icc_filter] b, f b  = ‚àè'[Ico_filter] b, f b := by
  have := (hf.hasProdFilter)
  simp only [Ico_filter] at *
  apply symm
  apply HasProdFilter.tprodFilter_eq
  simp only [HasProdFilter, tendsto_map'_iff] at *
  apply Filter.Tendsto_of_div_tendsto_one _ (by apply this)
  conv =>
    enter [1, N]
    simp
    rw [prod_Icc_eq_prod_Ico_succ _ (by omega)]
    simp
  apply hf2
