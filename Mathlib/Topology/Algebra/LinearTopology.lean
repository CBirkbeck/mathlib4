/-
Copyright (c) 2024 Antoine Chambert-Loir, Mar√≠a In√©s de Frutos-Fern√°ndez. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Antoine Chambert-Loir, Mar√≠a In√©s de Frutos-Fern√°ndez, Anatole Dedecker
-/

import Mathlib.RingTheory.TwoSidedIdeal.Operations
import Mathlib.Topology.Algebra.Ring.Basic
import Mathlib.Topology.Algebra.OpenSubgroup

/-! # Linear topologies on rings

Following Bourbaki, *Algebra II*, chapter 4, ¬ß2, n¬∞ 3, a topology on a ring `R` is *linear* if
it is invariant by translation and there admits a basis of neighborhoods of 0 consisting of
two-sided ideals.

- `LinearTopology.tendsto_zero_mul`: for `f, g : Œπ ‚Üí R` such that `f i` converges to `0`,
`f i * g i` converges to `0`.

-/

open scoped Topology
open Filter

section Ring

variable (Œ± : Type*) [Ring Œ±]

/-- A topology on a ring is linear if its topology is defined by a family of ideals. -/
class LinearTopology [TopologicalSpace Œ±] [TopologicalRing Œ±] where
  hasBasis_twoSidedIdeal : (ùìù (0 : Œ±)).HasBasis
    (fun I : TwoSidedIdeal Œ± ‚Ü¶ (I : Set Œ±) ‚àà ùìù 0) (fun I : TwoSidedIdeal Œ± ‚Ü¶ (I : Set Œ±))

variable {Œ±} [TopologicalSpace Œ±] [TopologicalRing Œ±]

lemma LinearTopology.hasBasis_open_twoSidedIdeal [LinearTopology Œ±] :
    (ùìù (0 : Œ±)).HasBasis
      (fun I : TwoSidedIdeal Œ± ‚Ü¶ IsOpen (I : Set Œ±)) (fun I : TwoSidedIdeal Œ± ‚Ü¶ (I : Set Œ±)) :=
  LinearTopology.hasBasis_twoSidedIdeal.congr
    (fun I ‚Ü¶ ‚ü®I.asIdeal.toAddSubgroup.isOpen_of_mem_nhds, fun hI ‚Ü¶ hI.mem_nhds (zero_mem I)‚ü©)
    (fun _ _ ‚Ü¶ rfl)

theorem LinearTopology.hasBasis_ideal [LinearTopology Œ±] :
    (ùìù 0).HasBasis (fun I : Ideal Œ± ‚Ü¶ (I : Set Œ±) ‚àà ùìù 0) (fun I : Ideal Œ± ‚Ü¶ (I : Set Œ±)) :=
  LinearTopology.hasBasis_twoSidedIdeal.to_hasBasis
    (fun I hI ‚Ü¶ ‚ü®I.asIdeal, hI, subset_rfl‚ü©)
    (fun _ ‚Ü¶ LinearTopology.hasBasis_twoSidedIdeal.mem_iff.mp)

theorem LinearTopology.hasBasis_open_ideal [LinearTopology Œ±] :
    (ùìù 0).HasBasis (fun I : Ideal Œ± ‚Ü¶ IsOpen (I : Set Œ±)) (fun I : Ideal Œ± ‚Ü¶ (I : Set Œ±)) :=
  LinearTopology.hasBasis_ideal.congr
    (fun I ‚Ü¶ ‚ü®I.toAddSubgroup.isOpen_of_mem_nhds, fun hI ‚Ü¶ hI.mem_nhds (zero_mem I)‚ü©)
    (fun _ _ ‚Ü¶ rfl)

lemma LinearTopology.mk_of_twoSidedIdeal {Œπ : Sort*} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí TwoSidedIdeal Œ±}
    (h : (ùìù 0).HasBasis p (fun i ‚Ü¶ (s i : Set Œ±))) :
    LinearTopology Œ± where
  hasBasis_twoSidedIdeal := h.to_hasBasis (fun i hi ‚Ü¶ ‚ü®s i, h.mem_of_mem hi, subset_rfl‚ü©)
    (fun _ ‚Ü¶ h.mem_iff.mp)

theorem linearTopology_iff_hasBasis_twoSidedIdeal :
    LinearTopology Œ± ‚Üî (ùìù 0).HasBasis
      (fun I : TwoSidedIdeal Œ± ‚Ü¶ (I : Set Œ±) ‚àà ùìù 0) (fun I : TwoSidedIdeal Œ± ‚Ü¶ (I : Set Œ±)) :=
  ‚ü®fun _ ‚Ü¶ LinearTopology.hasBasis_twoSidedIdeal, fun h ‚Ü¶ .mk_of_twoSidedIdeal h‚ü©

theorem linearTopology_iff_hasBasis_open_twoSidedIdeal :
    LinearTopology Œ± ‚Üî (ùìù 0).HasBasis
      (fun I : TwoSidedIdeal Œ± ‚Ü¶ IsOpen (I : Set Œ±)) (fun I : TwoSidedIdeal Œ± ‚Ü¶ (I : Set Œ±)) :=
  ‚ü®fun _ ‚Ü¶ LinearTopology.hasBasis_open_twoSidedIdeal, fun h ‚Ü¶ .mk_of_twoSidedIdeal h‚ü©

theorem LinearTopology.tendsto_mul_zero_of_left [LinearTopology Œ±] {Œπ : Type*} {f : Filter Œπ}
    (a b : Œπ ‚Üí Œ±) (ha : Tendsto a f (ùìù 0)) :
    Tendsto (a * b) f (ùìù 0) := by
  rw [LinearTopology.hasBasis_twoSidedIdeal.tendsto_right_iff] at ha ‚ä¢
  intro I hI
  filter_upwards [ha I hI] with i ai_mem
  exact I.mul_mem_right _ _ ai_mem

theorem LinearTopology.tendsto_mul_zero_of_right_[LinearTopology Œ±] {Œπ : Type*} {f : Filter Œπ}
    (a b : Œπ ‚Üí Œ±) (hb : Tendsto b f (ùìù 0)) :
    Tendsto (a * b) f (ùìù 0) := by
  rw [LinearTopology.hasBasis_twoSidedIdeal.tendsto_right_iff] at hb ‚ä¢
  intro I hI
  filter_upwards [hb I hI] with i bi_mem
  exact I.mul_mem_left _ _ bi_mem

end Ring

section CommRing

variable {Œ±} [CommRing Œ±] [TopologicalSpace Œ±] [TopologicalRing Œ±]

lemma LinearTopology.mk_of_ideal {Œπ : Sort*} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Ideal Œ±}
    (h : (ùìù 0).HasBasis p (fun i ‚Ü¶ (s i : Set Œ±))) :
    LinearTopology Œ± where
  hasBasis_twoSidedIdeal := h.to_hasBasis
    (fun i hi ‚Ü¶ ‚ü®(s i).toTwoSided ((s i).mul_mem_right _), by simpa using h.mem_of_mem hi, by simp‚ü©)
    (fun _ ‚Ü¶ h.mem_iff.mp)

theorem linearTopology_iff_hasBasis_ideal :
    LinearTopology Œ± ‚Üî (ùìù 0).HasBasis
      (fun I : Ideal Œ± ‚Ü¶ (I : Set Œ±) ‚àà ùìù 0) (fun I : Ideal Œ± ‚Ü¶ (I : Set Œ±)) :=
  ‚ü®fun _ ‚Ü¶ LinearTopology.hasBasis_ideal, fun h ‚Ü¶ .mk_of_ideal h‚ü©

theorem linearTopology_iff_hasBasis_open_ideal :
    LinearTopology Œ± ‚Üî (ùìù 0).HasBasis
      (fun I : Ideal Œ± ‚Ü¶ IsOpen (I : Set Œ±)) (fun I : Ideal Œ± ‚Ü¶ (I : Set Œ±)) :=
  ‚ü®fun _ ‚Ü¶ LinearTopology.hasBasis_open_ideal, fun h ‚Ü¶ .mk_of_ideal h‚ü©

end CommRing

#exit
variable {Œ± : Type*} [CommRing Œ±] [TopologicalSpace Œ±] [TopologicalRing Œ±] [LinearTopology Œ±]

theorem mem_nhds_zero_iff (s : Set Œ±) :
    (s ‚àà nhds 0) ‚Üî
    (‚àÉ I : Ideal Œ±, ((I : Set Œ±) ‚àà nhds 0) ‚àß (I : Set Œ±) ‚äÜ s) := by
  rw [isLinearTopology.mem_iff]
  apply exists_congr
  intro I
  apply and_congr_left
  intro hI
  rw [isOpen_iff_nhds]
  constructor
  ¬∑ exact fun hI' ‚Ü¶ hI' 0 I.zero_mem fun ‚¶É_‚¶Ñ a ‚Ü¶ a
  ¬∑ intro hI' x hx s hs
    rw [Filter.mem_principal] at hs
    rw [‚Üê vadd_mem_nhds_vadd_iff (-x)]
    simp only [vadd_eq_add, neg_add_cancel]
    apply Filter.mem_of_superset hI'
    intro y hy
    rw [Set.mem_neg_vadd_set_iff]
    exact hs (add_mem hx hy)

theorem tendsto_zero_mul {Œπ : Type*} {f : Filter Œπ}
    (a b : Œπ ‚Üí Œ±) (hb : Filter.Tendsto b f (nhds 0)) :
    Filter.Tendsto (a * b) f (nhds 0) := by
  intro v hv
  obtain ‚ü®I, I_mem, I_le‚ü© := (LinearTopology.mem_nhds_zero_iff _).mp hv
  apply Filter.sets_of_superset _ _ I_le
  simp only [Filter.mem_sets, Filter.mem_map]
  rw [Filter.tendsto_def] at hb
  exact Filter.sets_of_superset _ (hb _ I_mem) (fun x hx ‚Ü¶ Ideal.mul_mem_left _ _ hx)

end LinearTopology
