/-
Copyright (c) 2021 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot
-/
import Mathlib.Topology.Algebra.Nonarchimedean.Bases
import Mathlib.Topology.Algebra.UniformFilterBasis
import Mathlib.RingTheory.Valuation.ValuationSubring

#align_import topology.algebra.valuation from "leanprover-community/mathlib"@"f2ce6086713c78a7f880485f7917ea547a215982"

/-!
# The topology on a valued ring

In this file, we define the non archimedean topology induced by a valuation on a ring.
The main definition is a `Valued` type class which equips a ring with a valuation taking
values in a group with zero. Other instances are then deduced from this.
-/


open scoped Classical
open Topology uniformity

open Set Valuation

noncomputable section

universe v u

variable {R : Type u} [Ring R] {Œì‚ÇÄ : Type v} [LinearOrderedCommGroupWithZero Œì‚ÇÄ]

namespace Valuation

variable (v : Valuation R Œì‚ÇÄ)

instance {M : Type*} [Monoid M] {r : M ‚Üí M ‚Üí Prop}
    [CovariantClass M M (¬∑ * ¬∑) r] (N : Submonoid M):
      CovariantClass N N (¬∑ * ¬∑) (fun x y ‚Ü¶ r x y) := ‚ü® by
  rintro ‚ü®m, _‚ü© ‚ü®n‚ÇÅ, _‚ü© ‚ü®n‚ÇÇ, _‚ü©
  simpa only [Submonoid.mk_mul_mk] using CovariantClass.elim m ‚ü©

instance {M : Type*} [Monoid M] [LT M]
    [CovariantClass M M (¬∑ * ¬∑) (¬∑ < ¬∑)] (N : Submonoid M):
      CovariantClass N N (¬∑ * ¬∑) (fun x y ‚Ü¶ x < y) := ‚ü® by
  rintro ‚ü®m, _‚ü© ‚ü®n‚ÇÅ, _‚ü© ‚ü®n‚ÇÇ, _‚ü©
  simp only [Subtype.mk_lt_mk, Submonoid.mk_mul_mk]
  exact fun a ‚Ü¶ mul_lt_mul_left' a m
  ‚ü©
  -- simpa only [Submonoid.mk_mul_mk] using CovariantClass.elim m ‚ü©



/-- The basis of open subgroups for the topology on a ring determined by a valuation. -/
theorem subgroups_basis :
    RingSubgroupsBasis fun Œ≥ : v.rangeGroup => (v.ltAddSubgroup Œ≥ : AddSubgroup R) :=
  { inter := by
      rintro Œ≥‚ÇÄ Œ≥‚ÇÅ
      use min Œ≥‚ÇÄ Œ≥‚ÇÅ
      simp only [le_inf_iff]
      constructor <;>
      ¬∑ intro a ha
        apply lt_of_lt_of_le ha
        simp only [Units.val_le_val, Subtype.coe_le_coe, SetLike.coe_sort_coe,
          min_le_left, min_le_right]
    mul := by
      rintro Œ≥
      -- letI := @foo Œì‚ÇÄÀ£ _ _ _ v.rangeGroup.toSubmonoid
      cases' exists_square_le Œ≥ with Œ≥‚ÇÄ h
      use Œ≥‚ÇÄ
      rintro - ‚ü®r, r_in, s, s_in, rfl‚ü©
      simp only [SetLike.mem_coe, mem_ltAddSubgroup_iff, _root_.map_mul]
      apply lt_of_lt_of_le (mul_lt_mul‚ÇÄ r_in s_in) h
    leftMul := by
      rintro x Œ≥
      rcases GroupWithZero.eq_zero_or_unit (v x) with (Hx | ‚ü®Œ≥x, Hx‚ü©)
      ¬∑ use 1
        rintro y _
        change v (x * y) < _
        simp only [_root_.map_mul, Hx, zero_mul, Units.zero_lt]
      ¬∑ use ‚ü®Œ≥x, mem_rangeGroup v Hx‚ü©‚Åª¬π * Œ≥
        rintro y (vy_lt : v y < ‚Üë(Œ≥x‚Åª¬π * Œ≥))
        simp only [mem_preimage, SetLike.mem_coe, mem_ltAddSubgroup_iff, _root_.map_mul]
        rw [Hx, mul_comm]
        rw [Units.val_mul, mul_comm] at vy_lt
        simpa using mul_inv_lt_of_lt_mul‚ÇÄ vy_lt
    rightMul := by
      rintro x Œ≥
      rcases GroupWithZero.eq_zero_or_unit (v x) with (Hx | ‚ü®Œ≥x, Hx‚ü©)
      ¬∑ use 1
        rintro y _
        change v (y * x) < _
        rw [Valuation.map_mul, Hx, mul_zero]
        exact @Units.zero_lt Œì‚ÇÄ _ Œ≥
      ¬∑ use ‚ü®Œ≥x, mem_rangeGroup v Hx‚ü©‚Åª¬π * Œ≥
        rintro y (vy_lt : v y < ‚Üë(Œ≥x‚Åª¬π * Œ≥))
        simp only [mem_preimage, SetLike.mem_coe, mem_ltAddSubgroup_iff, _root_.map_mul, Hx]
        rw [Units.val_mul, mul_comm] at vy_lt
        simpa using mul_inv_lt_of_lt_mul‚ÇÄ vy_lt }
#align valuation.subgroups_basis Valuation.subgroups_basis

end Valuation

/-- A valued ring is a ring that comes equipped with a distinguished group-valued valuation.
The class `Valued` is designed for the situation that there is a canonical valuation on the ring.

TODO: show that there always exists an equivalent valuation taking values in a type belonging to
the same universe as the ring.

See Note [forgetful inheritance] for why we extend `UniformSpace`, `UniformAddGroup`. -/
class Valued (R : Type u) [Ring R] (Œì‚ÇÄ : outParam (Type v))
  [LinearOrderedCommGroupWithZero Œì‚ÇÄ] extends UniformSpace R, UniformAddGroup R where
  v : Valuation R Œì‚ÇÄ
  is_topological_valuation : ‚àÄ s, s ‚àà ùìù (0 : R) ‚Üî
    ‚àÉ Œ≥ ‚àà v.rangeGroup, { x : R | v x < Œ≥ } ‚äÜ s
#align valued Valued

-- Porting note(#12094): removed nolint; dangerous_instance linter not ported yet
--attribute [nolint dangerous_instance] Valued.toUniformSpace

namespace Valued

/-- Alternative `Valued` constructor for use when there is no preferred `UniformSpace` structure. -/
def mk' (v : Valuation R Œì‚ÇÄ) : Valued R Œì‚ÇÄ :=
  { v
    toUniformSpace := @TopologicalAddGroup.toUniformSpace R _ v.subgroups_basis.topology _
    toUniformAddGroup := @comm_topologicalAddGroup_is_uniform _ _ v.subgroups_basis.topology _
    is_topological_valuation := by
      letI := @TopologicalAddGroup.toUniformSpace R _ v.subgroups_basis.topology _
      intro s
      rw [Filter.hasBasis_iff.mp v.subgroups_basis.hasBasis_nhds_zero s]
      simp only [true_and, Subtype.exists, exists_prop]
      exact rfl.to_iff
      }
#align valued.mk' Valued.mk'

variable (R Œì‚ÇÄ)
variable [_i : Valued R Œì‚ÇÄ]

theorem hasBasis_nhds_zero :
    (ùìù (0 : R)).HasBasis (fun _ => True) fun Œ≥ : _i.v.rangeGroup => { x | v x < (Œ≥ : Œì‚ÇÄÀ£) } := by
  simp [Filter.hasBasis_iff, is_topological_valuation]

#align valued.has_basis_nhds_zero Valued.hasBasis_nhds_zero

-- Porting note: Replaced `ùì§ R` with `uniformity R`
theorem hasBasis_uniformity : (uniformity R).HasBasis (fun _ => True)
    fun Œ≥ : _i.v.rangeGroup => { p : R √ó R | v (p.2 - p.1) < (Œ≥ : Œì‚ÇÄÀ£) } := by
  rw [uniformity_eq_comap_nhds_zero]
  exact (hasBasis_nhds_zero R Œì‚ÇÄ).comap _
#align valued.has_basis_uniformity Valued.hasBasis_uniformity

theorem toUniformSpace_eq :
    toUniformSpace = @TopologicalAddGroup.toUniformSpace R _ v.subgroups_basis.topology _ :=
  UniformSpace.ext
    ((hasBasis_uniformity R Œì‚ÇÄ).eq_of_same_basis <| v.subgroups_basis.hasBasis_nhds_zero.comap _)
#align valued.to_uniform_space_eq Valued.toUniformSpace_eq

variable {R Œì‚ÇÄ}

theorem mem_nhds {s : Set R} {x : R} : s ‚àà ùìù x ‚Üî ‚àÉ Œ≥ : _i.v.rangeGroup,
    { y | v (y - x) < (Œ≥ : Œì‚ÇÄÀ£) } ‚äÜ s := by
  simp only [‚Üê nhds_translation_add_neg x, ‚Üê sub_eq_add_neg, preimage_setOf_eq, true_and,
    ((hasBasis_nhds_zero R Œì‚ÇÄ).comap fun y => y - x).mem_iff]
#align valued.mem_nhds Valued.mem_nhds

theorem mem_nhds_zero {s : Set R} : s ‚àà ùìù (0 : R) ‚Üî
    ‚àÉ Œ≥ : _i.v.rangeGroup, { x | _i.v x < (Œ≥ : Œì‚ÇÄÀ£) } ‚äÜ s := by
  simp only [mem_nhds, sub_zero]
#align valued.mem_nhds_zero Valued.mem_nhds_zero

theorem loc_const {x : R} (h : (v x : Œì‚ÇÄ) ‚â† 0) : { y : R | v y = v x } ‚àà ùìù x := by
  rw [mem_nhds]
  use ‚ü®_, (mem_rangeGroup v rfl : Units.mk0 _ h ‚àà _i.v.rangeGroup)‚ü©
  intro y
  exact Valuation.map_eq_of_sub_lt _
#align valued.loc_const Valued.loc_const

instance (priority := 100) : TopologicalRing R :=
  (toUniformSpace_eq R Œì‚ÇÄ).symm ‚ñ∏ v.subgroups_basis.toRingFilterBasis.isTopologicalRing

theorem cauchy_iff {F : Filter R} : Cauchy F ‚Üî
    F.NeBot ‚àß ‚àÄ Œ≥ : _i.v.rangeGroup, ‚àÉ M ‚àà F, ‚àÄ·µâ (x ‚àà M) (y ‚àà M), v (y - x) < (Œ≥ : Œì‚ÇÄÀ£) := by
  rw [toUniformSpace_eq, AddGroupFilterBasis.cauchy_iff]
  apply and_congr Iff.rfl
  simp_rw [Valued.v.subgroups_basis.mem_addGroupFilterBasis_iff]
  constructor
  ¬∑ intro h Œ≥
    exact h _ (Valued.v.subgroups_basis.mem_addGroupFilterBasis _)
  ¬∑ rintro h - ‚ü®Œ≥, rfl‚ü©
    exact h Œ≥
#align valued.cauchy_iff Valued.cauchy_iff

variable (R)

/-- The unit ball of a valued ring is open. -/
theorem integer_isOpen : IsOpen (_i.v.integer : Set R) := by
  rw [isOpen_iff_mem_nhds]
  intro x hx
  rw [mem_nhds]
  exact ‚ü®1,
    fun y hy => (sub_add_cancel y x).symm ‚ñ∏ le_trans (map_add _ _ _) (max_le (le_of_lt hy) hx)‚ü©

/-- The valuation subring of a valued field is open. -/
theorem valuationSubring_isOpen (K : Type u) [Field K] [hv : Valued K Œì‚ÇÄ] :
    IsOpen (hv.v.valuationSubring : Set K) :=
  integer_isOpen K

end Valued
