/-
Copyright (c) 2025 Salvatore Mercuri. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Salvatore Mercuri
-/
import Mathlib.Topology.Algebra.Valued.ValuationTopology
import Mathlib.RingTheory.Ideal.Quotient.Basic

/-! # Topological results for integer-valued rings

This file contains topological results for valuation rings taking values in the
multiplicative integers with zero adjoined. These are useful for cases where there
is a `Valued K ‚Ñ§‚Çò‚ÇÄ` instance but no canonical base with which to embed this into
`NNReal`.
-/

open Multiplicative WithZero

open scoped Multiplicative Topology

namespace Valued.WithZeroMulInt

open Set Filter in
/-- In a `‚Ñ§‚Çò‚ÇÄ`-valued ring, powers of `x` tend to zero if `v x ‚â§ ofAdd (-1 : ‚Ñ§)`. -/
theorem tendsto_zero_pow_of_le_neg_one {K : Type*} [Ring K] [Valued K ‚Ñ§‚Çò‚ÇÄ]
    {x : K} (hx : v x ‚â§ ofAdd (-1 : ‚Ñ§)) :
    Tendsto (fun (n : ‚Ñï) => x ^ n) atTop (ùìù 0) := by
  simp only [(hasBasis_nhds_zero _ _).tendsto_right_iff, mem_setOf_eq, map_pow, eventually_atTop]
  have h_lt : ofAdd (-1 : ‚Ñ§) < (1 : ‚Ñ§‚Çò‚ÇÄ) := by
    rw [‚Üê coe_one, coe_lt_coe, ‚Üê ofAdd_zero, ofAdd_lt]; linarith
  intro Œ≥ _
  by_cases hŒ≥ : Œ≥.val ‚â§ 1
  ¬∑ let m := - toAdd (unitsWithZeroEquiv Œ≥) + 1 |>.toNat
    refine ‚ü®m, fun b hb => lt_of_le_of_lt
      (pow_le_pow_of_le_one zero_le' (le_trans hx <| le_of_lt h_lt) hb) ?_‚ü©
    replace hŒ≥ : 0 ‚â§ -toAdd (unitsWithZeroEquiv Œ≥) + 1 := by
      rw [‚Üê coe_unitsWithZeroEquiv_eq_units_val, ‚Üê coe_one, coe_le_coe, ‚Üê toAdd_le, toAdd_one] at hŒ≥
      linarith
    apply lt_of_le_of_lt <| pow_le_pow_left‚ÇÄ zero_le' hx m
    rw [‚Üê coe_unitsWithZeroEquiv_eq_units_val, ‚Üê coe_pow, coe_lt_coe, ‚Üê ofAdd_nsmul,
      nsmul_eq_mul, Int.toNat_of_nonneg hŒ≥, mul_neg, mul_one, neg_add_rev, neg_neg, ofAdd_add,
      ofAdd_neg, ofAdd_toAdd, mul_lt_iff_lt_one_right', Left.inv_lt_one_iff, ‚Üê ofAdd_zero, ofAdd_lt]
    exact zero_lt_one
  ¬∑ refine ‚ü®1, fun b hb => lt_of_le_of_lt
      (pow_le_pow_of_le_one zero_le' (le_trans hx <| le_of_lt h_lt) hb) ?_‚ü©
    apply pow_one (v x) ‚ñ∏ lt_trans (lt_of_le_of_lt hx h_lt) (lt_of_not_le hŒ≥)

open Filter in
theorem exists_pow_lt_of_le_neg_one {K : Type*} [Ring K] [Valued K ‚Ñ§‚Çò‚ÇÄ]
    {x : K} (hx : v x ‚â§ ofAdd (-1 : ‚Ñ§)) (Œ≥ : ‚Ñ§‚Çò‚ÇÄÀ£) :
    ‚àÉ n, v x ^ n < Œ≥ := by
  simp_rw [‚Üê map_pow]
  let ‚ü®n, hn‚ü© := eventually_atTop.1 <|
     ((hasBasis_nhds_zero _ _).tendsto_right_iff ).1 (tendsto_zero_pow_of_le_neg_one hx) Œ≥ trivial
  use n
  convert Set.mem_setOf_eq ‚ñ∏ hn n le_rfl

end Valued.WithZeroMulInt
