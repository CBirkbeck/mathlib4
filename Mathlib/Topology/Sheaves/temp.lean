import Mathlib.Topology.Sheaves.Skyscraper
import Mathlib.CategoryTheory.Abelian.Basic
import Mathlib.Geometry.RingedSpace.SheafedSpace
import Mathlib.Algebra.Category.Ring.FilteredColimits
import Mathlib.Algebra.Category.ModuleCat.Injective
import Mathlib.Algebra.Category.ModuleCat.Sheaf.Abelian

open CategoryTheory CategoryTheory.Limits TopologicalSpace AlgebraicGeometry Opposite

universe u v w

variable (‚Ñõ : SheafedSpace CommRingCat.{u})

/--
For a comm-ringed space `‚Ñõ`, think `‚Ñõ.sheaf` as a sheaf of (not necessarily commutative) rings.
-/
def forget2Ring :=
  sheafCompose (Opens.grothendieckTopology ‚Ñõ) (forget‚ÇÇ CommRingCat RingCat) |>.obj ‚Ñõ.sheaf


variable (‚Ñ≥ : SheafOfModules $ forget2Ring ‚Ñõ)
variable (pt : ‚Ñõ) (U U' V V' : Opens ‚Ñõ)
variable (pt_mem : pt ‚àà U) (pt_mem' : pt ‚àà V) (pt_mem'' : pt ‚àà V') (pt_mem''' : pt ‚àà U')
section modules

abbrev sectionSMulSection
    (r : (‚Ñõ.presheaf.obj $ op U))
    (m : (‚Ñ≥.1.obj $ op V)) :
    (‚Ñ≥.1.obj $ op $ U ‚äì V) :=
    (‚Ñõ.presheaf.map (op $ homOfLE $ fun x hx => by exact hx.1) r :
      (forget2Ring ‚Ñõ).1.obj (op $ U ‚äì V)) ‚Ä¢
    (‚Ñ≥.1.map (op $ homOfLE $ fun x hx => by exact hx.2) m :
      ‚Ñ≥.1.obj (op $ U ‚äì V))

lemma sectionSMulSection.restrict
    (r : ‚Ñõ.presheaf.obj $ op U)
    (U' : Opens ‚Ñõ) (i : U' ‚ü∂ U)
    (m : ‚Ñ≥.1.obj $ op V)
    (V' : Opens ‚Ñõ) (j : V' ‚ü∂ V) :
    ‚Ñ≥.1.map (op (homOfLE fun x hx => ‚ü®leOfHom i hx.1, leOfHom j hx.2‚ü©) : op (U ‚äì V) ‚ü∂ op (U' ‚äì V'))
      (sectionSMulSection ‚Ñõ ‚Ñ≥ U V r m) =
    sectionSMulSection ‚Ñõ ‚Ñ≥ U' V' (‚Ñõ.presheaf.map (op i) r) (‚Ñ≥.1.map (op j) m) := by
  simp only [Opens.coe_inf, sectionSMulSection]
  erw [‚Ñ≥.1.map_smul]

  change (‚Ñ≥.1.module _).smul _ _ = (‚Ñ≥.1.module _).smul _ _
  congr 1
  ¬∑ change (‚Ñõ.presheaf.map _ ‚â´ ‚Ñõ.presheaf.map _) _ = (‚Ñõ.presheaf.map _ ‚â´ ‚Ñõ.presheaf.map _) _
    rw [‚Üê ‚Ñõ.presheaf.map_comp, ‚Üê ‚Ñõ.presheaf.map_comp]
    rfl
  ¬∑ change (‚Ñ≥.1.presheaf.map _ ‚â´ ‚Ñ≥.1.presheaf.map _) _ = (‚Ñ≥.1.presheaf.map _ ‚â´ ‚Ñ≥.1.presheaf.map _) _
    rw [‚Üê ‚Ñ≥.1.presheaf.map_comp, ‚Üê ‚Ñ≥.1.presheaf.map_comp]
    rfl

lemma sectionSMulSection.germ
    (r : (‚Ñõ.presheaf.obj $ op U))
    (m : (‚Ñ≥.1.obj $ op V))
    (m' : (‚Ñ≥.1.obj $ op V'))
    (h : TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) ‚ü®pt, pt_mem'‚ü© m =
      TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) ‚ü®pt, pt_mem''‚ü© m') :
    TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) (‚ü®pt, ‚ü®pt_mem, pt_mem'‚ü©‚ü© : (U ‚äì V : Opens _))
      (sectionSMulSection ‚Ñõ ‚Ñ≥ U V r m) =
    TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) (‚ü®pt, ‚ü®pt_mem, pt_mem''‚ü©‚ü© : (U ‚äì V' : Opens _))
      (sectionSMulSection ‚Ñõ ‚Ñ≥ U V' r m') := by
  obtain ‚ü®W, mem, iV, iV', hW‚ü© := TopCat.Presheaf.germ_eq (h := h)

  fapply TopCat.Presheaf.germ_ext
  ¬∑ exact U ‚äì W
  ¬∑ exact ‚ü®pt_mem, mem‚ü©
  ¬∑ exact homOfLE $ inf_le_inf (le_refl _) (leOfHom iV)
  ¬∑ exact homOfLE $ inf_le_inf (le_refl _) (leOfHom iV')

  erw [sectionSMulSection.restrict]
  pick_goal 2
  ¬∑ exact ùüô U
  pick_goal 2
  ¬∑ exact iV
  erw [sectionSMulSection.restrict]
  pick_goal 2
  ¬∑ exact ùüô U
  pick_goal 2
  ¬∑ exact iV'
  erw [hW]
  rfl

lemma sectionSMulSection.germ'
    (r : (‚Ñõ.presheaf.obj $ op U))
    (r' : (‚Ñõ.presheaf.obj $ op U'))
    (hr : ‚Ñõ.presheaf.germ ‚ü®pt, pt_mem‚ü© r = ‚Ñõ.presheaf.germ ‚ü®pt, pt_mem'''‚ü© r')
    (m : (‚Ñ≥.1.obj $ op V))
    (m' : (‚Ñ≥.1.obj $ op V'))
    (hm : TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) ‚ü®pt, pt_mem'‚ü© m =
      TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) ‚ü®pt, pt_mem''‚ü© m') :
    TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) (‚ü®pt, ‚ü®pt_mem, pt_mem'‚ü©‚ü© : (U ‚äì V : Opens _))
      (sectionSMulSection ‚Ñõ ‚Ñ≥ U V r m) =
    TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) (‚ü®pt, ‚ü®pt_mem''', pt_mem''‚ü©‚ü© : (U' ‚äì V' : Opens _))
      (sectionSMulSection ‚Ñõ ‚Ñ≥ U' V' r' m') := by
  obtain ‚ü®W, mem, iU, iU', hW‚ü© := TopCat.Presheaf.germ_eq (h := hr)

  have eq1 :
      ‚Ñ≥.1.presheaf.map
        (op $ homOfLE $ inf_le_inf (leOfHom iU') (le_refl _) : op (U' ‚äì V') ‚ü∂ op (W ‚äì V'))
          (sectionSMulSection ‚Ñõ ‚Ñ≥ U' V' r' m') =
      ‚Ñ≥.1.presheaf.map
        (op $ homOfLE $ inf_le_inf (leOfHom iU) (le_refl _) : op (U ‚äì V') ‚ü∂ op (W ‚äì V'))
          (sectionSMulSection ‚Ñõ ‚Ñ≥ U V' r m') := by
    erw [sectionSMulSection.restrict]
    pick_goal 2
    ¬∑ exact iU'
    pick_goal 2
    ¬∑ exact ùüô _
    erw [sectionSMulSection.restrict]
    pick_goal 2
    ¬∑ exact iU
    pick_goal 2
    ¬∑ exact ùüô _
    erw [hW]
    rfl

  apply_fun TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) (‚ü®pt, ‚ü®mem, pt_mem''‚ü©‚ü© : (W ‚äì V' : Opens _)) at eq1
  erw [TopCat.Presheaf.germ_res_apply, TopCat.Presheaf.germ_res_apply] at eq1
  simp only [Opens.coe_inf] at eq1
  erw [eq1]
  fapply sectionSMulSection.germ
  ¬∑ exact pt_mem
  ¬∑ exact pt_mem'
  ¬∑ exact pt_mem''
  ¬∑ exact hm

lemma sectionSMulSection.mul_smul
    (r : (‚Ñõ.presheaf.obj $ op U))
    (r' : (‚Ñõ.presheaf.obj $ op U'))
    (m : (‚Ñ≥.1.obj $ op V)) :
    sectionSMulSection ‚Ñõ ‚Ñ≥ _ _ (r|_ (U ‚äì U') * r' |_(U ‚äì U')) m =
    ‚Ñ≥.1.presheaf.map (op $ homOfLE $ by dsimp; exact le_of_eq (inf_assoc _ _ _))
    (sectionSMulSection ‚Ñõ ‚Ñ≥ U _ r
      (sectionSMulSection ‚Ñõ ‚Ñ≥ U' V r' m)) := by
  delta sectionSMulSection
  rw [map_mul]
  erw [(‚Ñ≥.1.module _).mul_smul]
  erw [‚Ñ≥.1.map_smul, ‚Ñ≥.1.map_smul, ‚Ñ≥.1.map_smul]
  congr 1
  ¬∑ change (‚Ñõ.presheaf.map _ ‚â´ ‚Ñõ.presheaf.map _) _ = (‚Ñõ.presheaf.map _ ‚â´ ‚Ñõ.presheaf.map _) _
    rw [‚Üê ‚Ñõ.presheaf.map_comp, ‚Üê ‚Ñõ.presheaf.map_comp]
    rfl
  ¬∑ change _ = (‚Ñ≥.1.module _).smul ((‚Ñõ.presheaf.map _ ‚â´ ‚Ñõ.presheaf.map _ ‚â´ ‚Ñõ.presheaf.map _) _) _
    rw [‚Üê ‚Ñõ.presheaf.map_comp, ‚Üê ‚Ñõ.presheaf.map_comp]
    congr 1
    ¬∑ change (‚Ñõ.presheaf.map _ ‚â´ ‚Ñõ.presheaf.map _) _ = _
      rw [‚Üê ‚Ñõ.presheaf.map_comp]
      rfl
    ¬∑ change _ = ((‚Ñ≥.1.presheaf.map _ ‚â´ ‚Ñ≥.1.presheaf.map _ ‚â´ ‚Ñ≥.1.presheaf.map _) _)
      rw [‚Üê Functor.map_comp, ‚Üê Functor.map_comp]
      rfl

lemma sectionSMulSection.one_smul (m : (‚Ñ≥.1.obj $ op V)) :
    sectionSMulSection ‚Ñõ ‚Ñ≥ U V 1 m =
    ‚Ñ≥.1.presheaf.map (op $ homOfLE $ inf_le_right) m := by
  delta sectionSMulSection
  rw [map_one]
  exact (‚Ñ≥.1.module _).one_smul _

noncomputable def openSetModule (x : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
    Opens ‚Ñõ :=
  (TopCat.Presheaf.germ_exist ‚Ñ≥.1.presheaf pt x).choose

noncomputable def openSetRing (x : ‚Ñõ.1.presheaf.stalk pt) :
    Opens ‚Ñõ :=
  (TopCat.Presheaf.germ_exist _ pt x).choose

lemma mem_openSetModule (x : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
    pt ‚àà openSetModule ‚Ñõ ‚Ñ≥ pt x :=
  (TopCat.Presheaf.germ_exist ‚Ñ≥.1.presheaf pt x).choose_spec.choose

lemma mem_openSetRing (x : ‚Ñõ.1.presheaf.stalk pt) :
    pt ‚àà openSetRing _ pt x :=
  (TopCat.Presheaf.germ_exist _ pt x).choose_spec.choose

noncomputable def sectionOnOpenSetModule
    (x : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
    ‚Ñ≥.1.obj (op $ openSetModule ‚Ñõ ‚Ñ≥ pt x) :=
  (TopCat.Presheaf.germ_exist ‚Ñ≥.1.presheaf pt x).choose_spec.choose_spec.choose

noncomputable def sectionOnOpenSetRing (x : ‚Ñõ.1.presheaf.stalk pt) :
    ‚Ñõ.presheaf.obj (op $ openSetRing ‚Ñõ pt x) :=
    (TopCat.Presheaf.germ_exist _ pt x).choose_spec.choose_spec.choose

lemma germ_sectionOnOpenSetModule (x : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
    TopCat.Presheaf.germ ‚Ñ≥.1.presheaf ‚ü®pt, mem_openSetModule ‚Ñõ ‚Ñ≥ pt x‚ü©
      (sectionOnOpenSetModule ‚Ñõ ‚Ñ≥ pt x) = x :=
  (TopCat.Presheaf.germ_exist ‚Ñ≥.1.presheaf pt x).choose_spec.choose_spec.choose_spec

lemma germ_sectionOnOpenSetRing (x : ‚Ñõ.1.presheaf.stalk pt) :
    ‚Ñõ.presheaf.germ ‚ü®pt, mem_openSetRing _ pt x‚ü© (sectionOnOpenSetRing _ pt x) = x :=
    (TopCat.Presheaf.germ_exist _ pt x).choose_spec.choose_spec.choose_spec


noncomputable def sectionSMulStalk
    (x : (‚Ñõ.presheaf.obj $ op U))
    (y : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
  TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt :=
    @TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) _ _
      (U := U ‚äì openSetModule ‚Ñõ ‚Ñ≥ pt y)
      ‚ü®pt, ‚ü®pt_mem, mem_openSetModule _ _ _ _‚ü©‚ü© $
        sectionSMulSection ‚Ñõ ‚Ñ≥ U _ x (sectionOnOpenSetModule ‚Ñõ ‚Ñ≥ pt y)

lemma section_smul_germ (r : ‚Ñõ.presheaf.obj $ op U) (m : ‚Ñ≥.1.obj $ op V) :
    (sectionSMulStalk ‚Ñõ ‚Ñ≥ pt U pt_mem r
      (TopCat.Presheaf.germ ‚Ñ≥.1.presheaf ‚ü®pt, pt_mem'‚ü© m)) =
    (TopCat.Presheaf.germ ‚Ñ≥.1.presheaf (‚ü®pt, ‚ü®pt_mem, pt_mem'‚ü©‚ü© : (U ‚äì V : Opens ‚Ñõ))
      (sectionSMulSection ‚Ñõ ‚Ñ≥ U V r m) :
        TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) := by
  dsimp [sectionSMulStalk]
  fapply sectionSMulSection.germ
  ¬∑ exact pt_mem
  ¬∑ exact mem_openSetModule _ _ _ _
  ¬∑ exact pt_mem'
  ¬∑ exact germ_sectionOnOpenSetModule _ _ _ _

noncomputable def stalkSMulStalk
    (x : (‚Ñõ.presheaf.stalk pt))
    (y : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
    TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt :=
  @TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) _ _
    (U := openSetRing _ pt x ‚äì openSetModule ‚Ñõ ‚Ñ≥ pt y)
    ‚ü®pt, ‚ü®mem_openSetRing _ pt x, mem_openSetModule _ _ _ _‚ü©‚ü© $
      sectionSMulSection ‚Ñõ ‚Ñ≥ _ _ (sectionOnOpenSetRing _ _ _) (sectionOnOpenSetModule ‚Ñõ ‚Ñ≥ pt y)

lemma germ_smul_germ (r : ‚Ñõ.presheaf.obj $ op U) (m : ‚Ñ≥.1.obj $ op V) :
    stalkSMulStalk ‚Ñõ ‚Ñ≥ pt
      (‚Ñõ.presheaf.germ ‚ü®pt, pt_mem‚ü© r)
      (TopCat.Presheaf.germ ‚Ñ≥.1.presheaf ‚ü®pt, pt_mem'‚ü© m) =
    TopCat.Presheaf.germ ‚Ñ≥.1.presheaf (‚ü®pt, ‚ü®pt_mem, pt_mem'‚ü©‚ü© : (U ‚äì V : Opens ‚Ñõ))
      (sectionSMulSection _ _ U V r m) := by
  dsimp [stalkSMulStalk]
  fapply sectionSMulSection.germ'
  ¬∑ apply mem_openSetRing
  ¬∑ apply mem_openSetModule
  ¬∑ assumption
  ¬∑ assumption
  ¬∑ apply germ_sectionOnOpenSetRing
  ¬∑ apply germ_sectionOnOpenSetModule


noncomputable instance :
    SMul (‚Ñõ.presheaf.stalk pt) (TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) where
  smul x y := stalkSMulStalk _ _ pt x y

noncomputable instance :
    MulAction (‚Ñõ.presheaf.stalk pt)
      (TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) where
  one_smul m := by
    obtain ‚ü®W, mem, s, rfl‚ü© := TopCat.Presheaf.germ_exist (F := ‚Ñ≥.1.presheaf) _ m
    change stalkSMulStalk _ _ _ _ _ = _
    have eq1 : (1 : ‚Ñõ.presheaf.stalk pt) = ‚Ñõ.presheaf.germ (‚ü®pt, ‚ü®‚ü©‚ü© : (‚ä§ : Opens _)) 1 := by
      rw [map_one]
    rw [eq1]
    erw [germ_smul_germ]
    rw [sectionSMulSection.one_smul]
    erw [TopCat.Presheaf.germ_res_apply]
  mul_smul r r' m := by
    obtain ‚ü®Or, mem_r, r, rfl‚ü© := ‚Ñõ.presheaf.germ_exist _ r
    obtain ‚ü®Or', mem_r', r', rfl‚ü© := ‚Ñõ.presheaf.germ_exist _ r'
    obtain ‚ü®W, memW, m, rfl‚ü© := TopCat.Presheaf.germ_exist (F := ‚Ñ≥.1.presheaf) _ m
    have eq1 : (‚Ñõ.presheaf.germ ‚ü®pt, mem_r‚ü©) r * (‚Ñõ.presheaf.germ ‚ü®pt, mem_r'‚ü©) r' =
      ‚Ñõ.presheaf.germ (‚ü®pt, ‚ü®mem_r, mem_r'‚ü©‚ü© : (Or ‚äì Or' : Opens _))
        (r |_ _ * r' |_ _) := by
      rw [map_mul]
      erw [TopCat.Presheaf.germ_res_apply, TopCat.Presheaf.germ_res_apply]
    rw [eq1]
    change stalkSMulStalk _ _ _ _ _ = _
    erw [germ_smul_germ]
    rw [sectionSMulSection.mul_smul]
    erw [TopCat.Presheaf.germ_res_apply]
    change _ = stalkSMulStalk _ _ _ _ (stalkSMulStalk _ _ _ _ _)
    erw [germ_smul_germ]
    simp only [Opens.coe_inf, id_eq]
    fapply sectionSMulSection.germ <;> try assumption
    ¬∑ exact ‚ü®mem_r', memW‚ü©
    ¬∑ exact ‚ü®by apply mem_openSetRing, by apply mem_openSetModule‚ü©

    fapply sectionSMulSection.germ' <;> try assumption
    ¬∑ apply mem_openSetModule
    ¬∑ apply mem_openSetRing
    ¬∑ rw [germ_sectionOnOpenSetRing]
    ¬∑ rw [germ_sectionOnOpenSetModule]; rfl


end modules
