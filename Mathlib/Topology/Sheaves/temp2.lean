import Mathlib.Topology.Sheaves.Skyscraper
import Mathlib.CategoryTheory.Abelian.Basic
import Mathlib.Geometry.RingedSpace.SheafedSpace
import Mathlib.Algebra.Category.Ring.FilteredColimits
import Mathlib.Algebra.Category.ModuleCat.Injective
import Mathlib.Algebra.Category.ModuleCat.FilteredColimits
import Mathlib.Algebra.Category.ModuleCat.Sheaf.Abelian

open CategoryTheory CategoryTheory.Limits TopologicalSpace AlgebraicGeometry Opposite

universe u v w

variable (‚Ñõ : SheafedSpace CommRingCat.{u})

/--
For a comm-ringed space `‚Ñõ`, think `‚Ñõ.sheaf` as a sheaf of (not necessarily commutative) rings.
-/
def forget2Ring :=
  sheafCompose (Opens.grothendieckTopology ‚Ñõ) (forget‚ÇÇ CommRingCat RingCat) |>.obj ‚Ñõ.sheaf

variable (‚Ñ≥ : SheafOfModules $ forget2Ring ‚Ñõ)
variable (pt : ‚Ñõ) (U U' V V' : Opens ‚Ñõ)
variable (pt_mem : pt ‚àà U) (pt_mem' : pt ‚àà V) (pt_mem'' : pt ‚àà V') (pt_mem''' : pt ‚àà U')
section modules

abbrev sectionSMulSection
    (r : (‚Ñõ.presheaf.obj $ op U))
    (m : (‚Ñ≥.1.obj $ op V)) :
    (‚Ñ≥.1.obj $ op $ U ‚äì V) :=
    (‚Ñõ.presheaf.map (op $ homOfLE $ fun x hx => by exact hx.1) r :
      (forget2Ring ‚Ñõ).1.obj (op $ U ‚äì V)) ‚Ä¢
    (‚Ñ≥.1.map (op $ homOfLE $ fun x hx => by exact hx.2) m :
      ‚Ñ≥.1.obj (op $ U ‚äì V))

lemma sectionSMulSection.restrict
    (r : ‚Ñõ.presheaf.obj $ op U)
    (U' : Opens ‚Ñõ) (i : U' ‚ü∂ U)
    (m : ‚Ñ≥.1.obj $ op V)
    (V' : Opens ‚Ñõ) (j : V' ‚ü∂ V) :
    ‚Ñ≥.1.map (op (homOfLE fun x hx => ‚ü®leOfHom i hx.1, leOfHom j hx.2‚ü©) : op (U ‚äì V) ‚ü∂ op (U' ‚äì V'))
      (sectionSMulSection ‚Ñõ ‚Ñ≥ U V r m) =
    sectionSMulSection ‚Ñõ ‚Ñ≥ U' V' (‚Ñõ.presheaf.map (op i) r) (‚Ñ≥.1.map (op j) m) := by
  simp only [Opens.coe_inf, sectionSMulSection]
  erw [‚Ñ≥.1.map_smul]

  change (‚Ñ≥.1.module _).smul _ _ = (‚Ñ≥.1.module _).smul _ _
  congr 1
  ¬∑ change (‚Ñõ.presheaf.map _ ‚â´ ‚Ñõ.presheaf.map _) _ = (‚Ñõ.presheaf.map _ ‚â´ ‚Ñõ.presheaf.map _) _
    rw [‚Üê ‚Ñõ.presheaf.map_comp, ‚Üê ‚Ñõ.presheaf.map_comp]
    rfl
  ¬∑ change (‚Ñ≥.1.presheaf.map _ ‚â´ ‚Ñ≥.1.presheaf.map _) _ = (‚Ñ≥.1.presheaf.map _ ‚â´ ‚Ñ≥.1.presheaf.map _) _
    rw [‚Üê ‚Ñ≥.1.presheaf.map_comp, ‚Üê ‚Ñ≥.1.presheaf.map_comp]
    rfl

lemma sectionSMulSection.germ
    (r : (‚Ñõ.presheaf.obj $ op U))
    (m : (‚Ñ≥.1.obj $ op V))
    (m' : (‚Ñ≥.1.obj $ op V'))
    (h : TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) ‚ü®pt, pt_mem'‚ü© m =
      TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) ‚ü®pt, pt_mem''‚ü© m') :
    TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) (‚ü®pt, ‚ü®pt_mem, pt_mem'‚ü©‚ü© : (U ‚äì V : Opens _))
      (sectionSMulSection ‚Ñõ ‚Ñ≥ U V r m) =
    TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) (‚ü®pt, ‚ü®pt_mem, pt_mem''‚ü©‚ü© : (U ‚äì V' : Opens _))
      (sectionSMulSection ‚Ñõ ‚Ñ≥ U V' r m') := by
  obtain ‚ü®W, mem, iV, iV', hW‚ü© := TopCat.Presheaf.germ_eq (h := h)

  fapply TopCat.Presheaf.germ_ext
  ¬∑ exact U ‚äì W
  ¬∑ exact ‚ü®pt_mem, mem‚ü©
  ¬∑ exact homOfLE $ inf_le_inf (le_refl _) (leOfHom iV)
  ¬∑ exact homOfLE $ inf_le_inf (le_refl _) (leOfHom iV')

  erw [sectionSMulSection.restrict]
  pick_goal 2
  ¬∑ exact ùüô U
  pick_goal 2
  ¬∑ exact iV
  erw [sectionSMulSection.restrict]
  pick_goal 2
  ¬∑ exact ùüô U
  pick_goal 2
  ¬∑ exact iV'
  erw [hW]
  rfl

lemma sectionSMulSection.germ'
    (r : (‚Ñõ.presheaf.obj $ op U))
    (r' : (‚Ñõ.presheaf.obj $ op U'))
    (hr : ‚Ñõ.presheaf.germ ‚ü®pt, pt_mem‚ü© r = ‚Ñõ.presheaf.germ ‚ü®pt, pt_mem'''‚ü© r')
    (m : (‚Ñ≥.1.obj $ op V))
    (m' : (‚Ñ≥.1.obj $ op V'))
    (hm : TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) ‚ü®pt, pt_mem'‚ü© m =
      TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) ‚ü®pt, pt_mem''‚ü© m') :
    TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) (‚ü®pt, ‚ü®pt_mem, pt_mem'‚ü©‚ü© : (U ‚äì V : Opens _))
      (sectionSMulSection ‚Ñõ ‚Ñ≥ U V r m) =
    TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) (‚ü®pt, ‚ü®pt_mem''', pt_mem''‚ü©‚ü© : (U' ‚äì V' : Opens _))
      (sectionSMulSection ‚Ñõ ‚Ñ≥ U' V' r' m') := by
  obtain ‚ü®W, mem, iU, iU', hW‚ü© := TopCat.Presheaf.germ_eq (h := hr)

  have eq1 :
      ‚Ñ≥.1.presheaf.map
        (op $ homOfLE $ inf_le_inf (leOfHom iU') (le_refl _) : op (U' ‚äì V') ‚ü∂ op (W ‚äì V'))
          (sectionSMulSection ‚Ñõ ‚Ñ≥ U' V' r' m') =
      ‚Ñ≥.1.presheaf.map
        (op $ homOfLE $ inf_le_inf (leOfHom iU) (le_refl _) : op (U ‚äì V') ‚ü∂ op (W ‚äì V'))
          (sectionSMulSection ‚Ñõ ‚Ñ≥ U V' r m') := by
    erw [sectionSMulSection.restrict]
    pick_goal 2
    ¬∑ exact iU'
    pick_goal 2
    ¬∑ exact ùüô _
    erw [sectionSMulSection.restrict]
    pick_goal 2
    ¬∑ exact iU
    pick_goal 2
    ¬∑ exact ùüô _
    erw [hW]
    rfl

  apply_fun TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) (‚ü®pt, ‚ü®mem, pt_mem''‚ü©‚ü© : (W ‚äì V' : Opens _)) at eq1
  erw [TopCat.Presheaf.germ_res_apply, TopCat.Presheaf.germ_res_apply] at eq1
  simp only [Opens.coe_inf] at eq1
  erw [eq1]
  fapply sectionSMulSection.germ
  ¬∑ exact pt_mem
  ¬∑ exact pt_mem'
  ¬∑ exact pt_mem''
  ¬∑ exact hm

lemma sectionSMulSection.mul_smul
    (r : (‚Ñõ.presheaf.obj $ op U))
    (r' : (‚Ñõ.presheaf.obj $ op U'))
    (m : (‚Ñ≥.1.obj $ op V)) :
    sectionSMulSection ‚Ñõ ‚Ñ≥ _ _ (r|_ (U ‚äì U') * r' |_(U ‚äì U')) m =
    ‚Ñ≥.1.presheaf.map (op $ homOfLE $ by dsimp; exact le_of_eq (inf_assoc _ _ _))
    (sectionSMulSection ‚Ñõ ‚Ñ≥ U _ r
      (sectionSMulSection ‚Ñõ ‚Ñ≥ U' V r' m)) := by
  delta sectionSMulSection
  rw [map_mul]
  erw [(‚Ñ≥.1.module _).mul_smul]
  erw [‚Ñ≥.1.map_smul, ‚Ñ≥.1.map_smul, ‚Ñ≥.1.map_smul]
  congr 1
  ¬∑ change (‚Ñõ.presheaf.map _ ‚â´ ‚Ñõ.presheaf.map _) _ = (‚Ñõ.presheaf.map _ ‚â´ ‚Ñõ.presheaf.map _) _
    rw [‚Üê ‚Ñõ.presheaf.map_comp, ‚Üê ‚Ñõ.presheaf.map_comp]
    rfl
  ¬∑ change _ = (‚Ñ≥.1.module _).smul ((‚Ñõ.presheaf.map _ ‚â´ ‚Ñõ.presheaf.map _ ‚â´ ‚Ñõ.presheaf.map _) _) _
    rw [‚Üê ‚Ñõ.presheaf.map_comp, ‚Üê ‚Ñõ.presheaf.map_comp]
    congr 1
    ¬∑ change (‚Ñõ.presheaf.map _ ‚â´ ‚Ñõ.presheaf.map _) _ = _
      rw [‚Üê ‚Ñõ.presheaf.map_comp]
      rfl
    ¬∑ change _ = ((‚Ñ≥.1.presheaf.map _ ‚â´ ‚Ñ≥.1.presheaf.map _ ‚â´ ‚Ñ≥.1.presheaf.map _) _)
      rw [‚Üê Functor.map_comp, ‚Üê Functor.map_comp]
      rfl

lemma sectionSMulSection.one_smul (m : (‚Ñ≥.1.obj $ op V)) :
    sectionSMulSection ‚Ñõ ‚Ñ≥ U V 1 m =
    ‚Ñ≥.1.presheaf.map (op $ homOfLE $ inf_le_right) m := by
  delta sectionSMulSection
  rw [map_one]
  exact (‚Ñ≥.1.module _).one_smul _

lemma sectionSMulSection.smul_zero (r : (‚Ñõ.presheaf.obj $ op U)) :
    sectionSMulSection ‚Ñõ ‚Ñ≥ U V r 0 = 0 := by
  delta sectionSMulSection
  rw [map_zero]
  exact (‚Ñ≥.1.module _).smul_zero _

lemma sectionSMulSection.smul_add (r : (‚Ñõ.presheaf.obj $ op U)) (x y : (‚Ñ≥.1.obj $ op V)) :
    sectionSMulSection ‚Ñõ ‚Ñ≥ U V r (x + y) =
    sectionSMulSection ‚Ñõ ‚Ñ≥ U V r x + sectionSMulSection ‚Ñõ ‚Ñ≥ U V r y := by
  delta sectionSMulSection
  rw [map_add]
  exact (‚Ñ≥.1.module _).smul_add _ _ _

lemma sectionSMulSection.add_smul (r s : ‚Ñõ.presheaf.obj $ op U) (m : ‚Ñ≥.1.obj $ op V) :
    sectionSMulSection ‚Ñõ ‚Ñ≥ U V (r + s) m =
    sectionSMulSection ‚Ñõ ‚Ñ≥ U V r m + sectionSMulSection ‚Ñõ ‚Ñ≥ U V s m := by
  delta sectionSMulSection
  rw [map_add]
  exact (‚Ñ≥.1.module _).add_smul _ _ _

lemma sectionSMulSection.zero_smul (m : ‚Ñ≥.1.obj $ op V) :
    sectionSMulSection ‚Ñõ ‚Ñ≥ U V 0 m = 0 := by
  delta sectionSMulSection
  rw [map_zero]
  exact (‚Ñ≥.1.module _).zero_smul _

noncomputable def openSetModule (x : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
    Opens ‚Ñõ :=
  (TopCat.Presheaf.germ_exist ‚Ñ≥.1.presheaf pt x).choose

noncomputable def openSetRing (x : ‚Ñõ.1.presheaf.stalk pt) :
    Opens ‚Ñõ :=
  (TopCat.Presheaf.germ_exist _ pt x).choose

lemma mem_openSetModule (x : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
    pt ‚àà openSetModule ‚Ñõ ‚Ñ≥ pt x :=
  (TopCat.Presheaf.germ_exist ‚Ñ≥.1.presheaf pt x).choose_spec.choose

lemma mem_openSetRing (x : ‚Ñõ.1.presheaf.stalk pt) :
    pt ‚àà openSetRing _ pt x :=
  (TopCat.Presheaf.germ_exist _ pt x).choose_spec.choose

noncomputable def sectionOnOpenSetModule
    (x : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
    ‚Ñ≥.1.obj (op $ openSetModule ‚Ñõ ‚Ñ≥ pt x) :=
  (TopCat.Presheaf.germ_exist ‚Ñ≥.1.presheaf pt x).choose_spec.choose_spec.choose

noncomputable def sectionOnOpenSetRing (x : ‚Ñõ.1.presheaf.stalk pt) :
    ‚Ñõ.presheaf.obj (op $ openSetRing ‚Ñõ pt x) :=
    (TopCat.Presheaf.germ_exist _ pt x).choose_spec.choose_spec.choose

lemma germ_sectionOnOpenSetModule (x : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
    TopCat.Presheaf.germ ‚Ñ≥.1.presheaf ‚ü®pt, mem_openSetModule ‚Ñõ ‚Ñ≥ pt x‚ü©
      (sectionOnOpenSetModule ‚Ñõ ‚Ñ≥ pt x) = x :=
  (TopCat.Presheaf.germ_exist ‚Ñ≥.1.presheaf pt x).choose_spec.choose_spec.choose_spec

lemma germ_sectionOnOpenSetRing (x : ‚Ñõ.1.presheaf.stalk pt) :
    ‚Ñõ.presheaf.germ ‚ü®pt, mem_openSetRing _ pt x‚ü© (sectionOnOpenSetRing _ pt x) = x :=
    (TopCat.Presheaf.germ_exist _ pt x).choose_spec.choose_spec.choose_spec


noncomputable def sectionSMulStalk
    (x : (‚Ñõ.presheaf.obj $ op U))
    (y : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
  TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt :=
    @TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) _ _
      (U := U ‚äì openSetModule ‚Ñõ ‚Ñ≥ pt y)
      ‚ü®pt, ‚ü®pt_mem, mem_openSetModule _ _ _ _‚ü©‚ü© $
        sectionSMulSection ‚Ñõ ‚Ñ≥ U _ x (sectionOnOpenSetModule ‚Ñõ ‚Ñ≥ pt y)

lemma section_smul_germ (r : ‚Ñõ.presheaf.obj $ op U) (m : ‚Ñ≥.1.obj $ op V) :
    (sectionSMulStalk ‚Ñõ ‚Ñ≥ pt U pt_mem r
      (TopCat.Presheaf.germ ‚Ñ≥.1.presheaf ‚ü®pt, pt_mem'‚ü© m)) =
    (TopCat.Presheaf.germ ‚Ñ≥.1.presheaf (‚ü®pt, ‚ü®pt_mem, pt_mem'‚ü©‚ü© : (U ‚äì V : Opens ‚Ñõ))
      (sectionSMulSection ‚Ñõ ‚Ñ≥ U V r m) :
        TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) := by
  dsimp [sectionSMulStalk]
  fapply sectionSMulSection.germ
  ¬∑ exact pt_mem
  ¬∑ exact mem_openSetModule _ _ _ _
  ¬∑ exact pt_mem'
  ¬∑ exact germ_sectionOnOpenSetModule _ _ _ _

lemma section_res_smul_stalk (r : ‚Ñõ.presheaf.obj $ op U) (i : U' ‚ü∂ U)
    (m : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
    sectionSMulStalk ‚Ñõ ‚Ñ≥ pt U' pt_mem''' (‚Ñõ.presheaf.map (op i) r) m =
    sectionSMulStalk ‚Ñõ ‚Ñ≥ pt U pt_mem r m := by
  obtain ‚ü®W, mem, w, rfl‚ü© := TopCat.Presheaf.germ_exist ‚Ñ≥.1.presheaf pt m
  dsimp [sectionSMulStalk]
  fapply sectionSMulSection.germ'
  ¬∑ exact pt_mem'''
  ¬∑ apply mem_openSetModule
  ¬∑ apply mem_openSetModule
  ¬∑ exact leOfHom i pt_mem'''
  ¬∑ erw [TopCat.Presheaf.germ_res_apply]
  ¬∑ rw [germ_sectionOnOpenSetModule]



lemma sectionSMulStalk.one_smul (m : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
    sectionSMulStalk ‚Ñõ ‚Ñ≥ pt U pt_mem 1 m = m := by
  obtain ‚ü®W, mem, w, rfl‚ü© := TopCat.Presheaf.germ_exist ‚Ñ≥.1.presheaf pt m
  erw [section_smul_germ]
  rw [sectionSMulSection.one_smul]
  erw [TopCat.Presheaf.germ_res_apply]

lemma sectionSMulStalk.mul_smul
    (r : ‚Ñõ.presheaf.obj $ op U) (r' : ‚Ñõ.presheaf.obj $ op U')
    (m : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
    sectionSMulStalk ‚Ñõ ‚Ñ≥ pt _ (by exact ‚ü®pt_mem, pt_mem'''‚ü© : pt ‚àà U ‚äì U')
      (r|_ (U ‚äì U') * r' |_(U ‚äì U')) m =
    sectionSMulStalk ‚Ñõ ‚Ñ≥ pt _ pt_mem r
      (sectionSMulStalk ‚Ñõ ‚Ñ≥ pt _ pt_mem''' r' m) := by
  obtain ‚ü®W, mem, w, rfl‚ü© := TopCat.Presheaf.germ_exist ‚Ñ≥.1.presheaf pt m
  erw [section_smul_germ, section_smul_germ]
  rw [sectionSMulSection.mul_smul]
  erw [TopCat.Presheaf.germ_res_apply]
  fapply sectionSMulSection.germ
  ¬∑ exact pt_mem
  ¬∑ exact ‚ü®pt_mem''', mem‚ü©
  ¬∑ exact ‚ü®pt_mem''', by apply mem_openSetModule‚ü©
  fapply sectionSMulSection.germ
  ¬∑ exact pt_mem'''
  ¬∑ exact mem
  ¬∑ apply mem_openSetModule
  ¬∑ rw [germ_sectionOnOpenSetModule]; rfl

lemma sectionSMulStalk.mul_smul'
    (r r' : ‚Ñõ.presheaf.obj $ op U)
    (m : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
    sectionSMulStalk ‚Ñõ ‚Ñ≥ pt _ pt_mem (r * r') m =
    sectionSMulStalk ‚Ñõ ‚Ñ≥ pt _ pt_mem r
      (sectionSMulStalk ‚Ñõ ‚Ñ≥ pt _ pt_mem r' m) := by
  rw [‚Üê sectionSMulStalk.mul_smul]
  obtain ‚ü®W, mem, w, rfl‚ü© := TopCat.Presheaf.germ_exist ‚Ñ≥.1.presheaf pt m
  erw [section_smul_germ, section_smul_germ]
  fapply sectionSMulSection.germ'
  ¬∑ exact pt_mem
  ¬∑ exact mem
  ¬∑ exact mem
  ¬∑ exact ‚ü®pt_mem, pt_mem‚ü©
  ¬∑ fapply TopCat.Presheaf.germ_ext
    ¬∑ exact U
    ¬∑ exact pt_mem
    ¬∑ exact ùüô U
    ¬∑ exact homOfLE fun x hx => ‚ü®hx, hx‚ü©
    simp only [op_id, CategoryTheory.Functor.map_id, map_mul, id_apply]
    change _ = (‚Ñõ.presheaf.map _ ‚â´ ‚Ñõ.presheaf.map _) _ * (‚Ñõ.presheaf.map _ ‚â´ ‚Ñõ.presheaf.map _) _
    rw [‚Üê ‚Ñõ.presheaf.map_comp, ‚Üê op_comp]
    erw [‚Ñõ.presheaf.map_id]
    rfl
  ¬∑ rfl

lemma sectionSMulStalk.smul_add
    (r : ‚Ñõ.presheaf.obj $ op U)
    (m m' : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
    sectionSMulStalk ‚Ñõ ‚Ñ≥ pt _ pt_mem r (m + m') =
    sectionSMulStalk ‚Ñõ ‚Ñ≥ pt _ pt_mem r m + sectionSMulStalk ‚Ñõ ‚Ñ≥ pt _ pt_mem r m' := by

  obtain ‚ü®W, mem, w, rfl‚ü© := TopCat.Presheaf.germ_exist ‚Ñ≥.1.presheaf pt m
  obtain ‚ü®W', mem', w', rfl‚ü© := TopCat.Presheaf.germ_exist ‚Ñ≥.1.presheaf pt m'
  have eq1 : TopCat.Presheaf.germ ‚Ñ≥.1.presheaf ‚ü®pt, mem‚ü© w +
      TopCat.Presheaf.germ ‚Ñ≥.1.presheaf ‚ü®pt, mem'‚ü© w' =
      TopCat.Presheaf.germ ‚Ñ≥.1.presheaf (‚ü®pt, ‚ü®mem, mem'‚ü©‚ü© : (W ‚äì W' : Opens _))
        (w |_ (W ‚äì W') + w' |_ (W ‚äì W')) := by
    rw [map_add]
    congr 1
    ¬∑ fapply TopCat.Presheaf.germ_ext
      ¬∑ exact W ‚äì W'
      ¬∑ exact ‚ü®mem, mem'‚ü©
      ¬∑ exact homOfLE fun x hx => by aesop
      ¬∑ exact ùüô _
      ¬∑ change _ = (‚Ñ≥.1.presheaf.map _ ‚â´ _) _
        rw [‚Üê ‚Ñ≥.1.presheaf.map_comp]
        rfl
    ¬∑ fapply TopCat.Presheaf.germ_ext
      ¬∑ exact W ‚äì W'
      ¬∑ exact ‚ü®mem, mem'‚ü©
      ¬∑ exact homOfLE fun x hx => by aesop
      ¬∑ exact ùüô _
      ¬∑ change _ = (‚Ñ≥.1.presheaf.map _ ‚â´ _) _
        rw [‚Üê ‚Ñ≥.1.presheaf.map_comp]
        rfl

  erw [eq1, section_smul_germ, section_smul_germ, section_smul_germ]
  rw [sectionSMulSection.smul_add, map_add]
  congr 1
  ¬∑ fapply sectionSMulSection.germ
    ¬∑ exact pt_mem
    ¬∑ exact ‚ü®mem, mem'‚ü©
    ¬∑ exact mem
    ¬∑ erw [TopCat.Presheaf.germ_res_apply]
      rfl
  ¬∑ fapply sectionSMulSection.germ
    ¬∑ exact pt_mem
    ¬∑ exact ‚ü®mem, mem'‚ü©
    ¬∑ exact mem'
    ¬∑ erw [TopCat.Presheaf.germ_res_apply]
      rfl

lemma sectionSMulStalk.add_smul
    (r s : ‚Ñõ.presheaf.obj $ op U)
    (m : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
    sectionSMulStalk ‚Ñõ ‚Ñ≥ pt _ pt_mem (r + s) m =
    sectionSMulStalk ‚Ñõ ‚Ñ≥ pt _ pt_mem r m + sectionSMulStalk ‚Ñõ ‚Ñ≥ pt _ pt_mem s m := by
  obtain ‚ü®W, mem, w, rfl‚ü© := TopCat.Presheaf.germ_exist ‚Ñ≥.1.presheaf pt m
  erw [section_smul_germ, section_smul_germ, section_smul_germ]
  rw [sectionSMulSection.add_smul, map_add]

lemma sectionSMulStalk.zero_smul
    (m : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
    sectionSMulStalk ‚Ñõ ‚Ñ≥ pt _ pt_mem 0 m = 0 := by
  obtain ‚ü®W, mem, w, rfl‚ü© := TopCat.Presheaf.germ_exist ‚Ñ≥.1.presheaf pt m
  erw [section_smul_germ]
  rw [sectionSMulSection.zero_smul, map_zero]

noncomputable def stalkSMulStalk
    (x : (‚Ñõ.presheaf.stalk pt))
    (y : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :
    TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt :=
  @TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) _ _
    (U := openSetRing _ pt x ‚äì openSetModule ‚Ñõ ‚Ñ≥ pt y)
    ‚ü®pt, ‚ü®mem_openSetRing _ pt x, mem_openSetModule _ _ _ _‚ü©‚ü© $
      sectionSMulSection ‚Ñõ ‚Ñ≥ _ _ (sectionOnOpenSetRing _ _ _) (sectionOnOpenSetModule ‚Ñõ ‚Ñ≥ pt y)

lemma germ_smul_germ (r : ‚Ñõ.presheaf.obj $ op U) (m : ‚Ñ≥.1.obj $ op V) :
    stalkSMulStalk ‚Ñõ ‚Ñ≥ pt
      (‚Ñõ.presheaf.germ ‚ü®pt, pt_mem‚ü© r)
      (TopCat.Presheaf.germ ‚Ñ≥.1.presheaf ‚ü®pt, pt_mem'‚ü© m) =
    TopCat.Presheaf.germ ‚Ñ≥.1.presheaf (‚ü®pt, ‚ü®pt_mem, pt_mem'‚ü©‚ü© : (U ‚äì V : Opens ‚Ñõ))
      (sectionSMulSection _ _ U V r m) := by
  dsimp [stalkSMulStalk]
  fapply sectionSMulSection.germ'
  ¬∑ apply mem_openSetRing
  ¬∑ apply mem_openSetModule
  ¬∑ assumption
  ¬∑ assumption
  ¬∑ apply germ_sectionOnOpenSetRing
  ¬∑ apply germ_sectionOnOpenSetModule

noncomputable instance SMul.section_stalk :
    SMul (‚Ñõ.presheaf.obj $ op U)
      (TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) where
  smul x y := sectionSMulStalk _ _ _ _ pt_mem x y

noncomputable instance MulAction.section_stalk :
    MulAction (‚Ñõ.presheaf.obj $ op U)
      (TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) where
  __ := SMul.section_stalk ‚Ñõ ‚Ñ≥ _ _ pt_mem
  one_smul m := by
    change sectionSMulStalk _ _ _ _ _ 1 m = m
    apply sectionSMulStalk.one_smul
  mul_smul r r' m := by
    change sectionSMulStalk _ _ _ _ _ _ _ =
      sectionSMulStalk _ _ _ _ _ _ (sectionSMulStalk _ _ _ _ _ _ _)
    apply sectionSMulStalk.mul_smul'

noncomputable instance DistribMulAction.section_stalk :
    DistribMulAction (‚Ñõ.presheaf.obj $ op U)
      (TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) where
  __ := MulAction.section_stalk ‚Ñõ ‚Ñ≥ _ _ pt_mem
  smul_zero r := by
    change sectionSMulStalk _ _ _ _ _ r 0 = 0
    rw [show (0 : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) =
      TopCat.Presheaf.germ ‚Ñ≥.1.presheaf ‚ü®pt, pt_mem‚ü© 0 by rw [map_zero]]
    erw [section_smul_germ]
    fapply TopCat.Presheaf.germ_ext
    ¬∑ exact U
    ¬∑ exact pt_mem
    ¬∑ exact homOfLE fun x hx => ‚ü®hx, hx‚ü©
    ¬∑ exact ùüô U
    ¬∑ rw [sectionSMulSection.smul_zero]
      generalize_proofs h1
      erw [(‚Ñ≥.1.presheaf.map (homOfLE h1).op).map_zero]
      simp
  smul_add r m m' := by
    change sectionSMulStalk _ _ _ _ _ r _ =
      sectionSMulStalk _ _ _ _ _ r _ + sectionSMulStalk _ _ _ _ _ r _
    apply sectionSMulStalk.smul_add

noncomputable instance Module.section_stalk :
    Module (‚Ñõ.presheaf.obj $ op U)
      (TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) where
  __ := DistribMulAction.section_stalk ‚Ñõ ‚Ñ≥ _ _ pt_mem
  add_smul r s m := by
    change sectionSMulStalk _ _ _ _ _ (r + s) m =
      sectionSMulStalk _ _ _ _ _ r m + sectionSMulStalk _ _ _ _ _ s m
    apply sectionSMulStalk.add_smul
  zero_smul m := by
    change sectionSMulStalk _ _ _ _ _ 0 m = 0
    apply sectionSMulStalk.zero_smul

noncomputable instance SMul.stalk_stalk :
    SMul (‚Ñõ.presheaf.stalk pt) (TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) where
  smul x y := stalkSMulStalk _ _ pt x y

noncomputable instance MulAction.stalk_stalk :
    MulAction (‚Ñõ.presheaf.stalk pt)
      (TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) where
  one_smul m := by
    obtain ‚ü®W, mem, s, rfl‚ü© := TopCat.Presheaf.germ_exist (F := ‚Ñ≥.1.presheaf) _ m
    change stalkSMulStalk _ _ _ _ _ = _
    have eq1 : (1 : ‚Ñõ.presheaf.stalk pt) = ‚Ñõ.presheaf.germ (‚ü®pt, ‚ü®‚ü©‚ü© : (‚ä§ : Opens _)) 1 := by
      rw [map_one]
    rw [eq1]
    erw [germ_smul_germ]
    rw [sectionSMulSection.one_smul]
    erw [TopCat.Presheaf.germ_res_apply]
  mul_smul r r' m := by
    obtain ‚ü®Or, mem_r, r, rfl‚ü© := ‚Ñõ.presheaf.germ_exist _ r
    obtain ‚ü®Or', mem_r', r', rfl‚ü© := ‚Ñõ.presheaf.germ_exist _ r'
    obtain ‚ü®W, memW, m, rfl‚ü© := TopCat.Presheaf.germ_exist (F := ‚Ñ≥.1.presheaf) _ m
    have eq1 : (‚Ñõ.presheaf.germ ‚ü®pt, mem_r‚ü©) r * (‚Ñõ.presheaf.germ ‚ü®pt, mem_r'‚ü©) r' =
      ‚Ñõ.presheaf.germ (‚ü®pt, ‚ü®mem_r, mem_r'‚ü©‚ü© : (Or ‚äì Or' : Opens _))
        (r |_ _ * r' |_ _) := by
      rw [map_mul]
      erw [TopCat.Presheaf.germ_res_apply, TopCat.Presheaf.germ_res_apply]
    rw [eq1]
    change stalkSMulStalk _ _ _ _ _ = _
    erw [germ_smul_germ]
    rw [sectionSMulSection.mul_smul]
    erw [TopCat.Presheaf.germ_res_apply]
    change _ = stalkSMulStalk _ _ _ _ (stalkSMulStalk _ _ _ _ _)
    erw [germ_smul_germ]
    simp only [Opens.coe_inf, id_eq]
    fapply sectionSMulSection.germ <;> try assumption
    ¬∑ exact ‚ü®mem_r', memW‚ü©
    ¬∑ exact ‚ü®by apply mem_openSetRing, by apply mem_openSetModule‚ü©

    fapply sectionSMulSection.germ' <;> try assumption
    ¬∑ apply mem_openSetModule
    ¬∑ apply mem_openSetRing
    ¬∑ rw [germ_sectionOnOpenSetRing]
    ¬∑ rw [germ_sectionOnOpenSetModule]; rfl

noncomputable instance DistribMulAction.stalk_stalk :
    DistribMulAction (‚Ñõ.presheaf.stalk pt)
      (TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) where
  smul_zero r := by
    obtain ‚ü®Or, mem_r, r, rfl‚ü© := ‚Ñõ.presheaf.germ_exist _ r
    change stalkSMulStalk _ _ _ _ _ = _
    rw [show (0 : TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) =
      TopCat.Presheaf.germ ‚Ñ≥.1.presheaf (‚ü®pt, mem_r‚ü©) 0 by rw [map_zero], germ_smul_germ,
      sectionSMulSection.smul_zero, map_zero, map_zero]
  smul_add r x y := by
    obtain ‚ü®Or, mem_r, r, rfl‚ü© := ‚Ñõ.presheaf.germ_exist _ r
    obtain ‚ü®Ox, mem_x, x, rfl‚ü© := TopCat.Presheaf.germ_exist ‚Ñ≥.1.presheaf _ x
    obtain ‚ü®Oy, mem_y, y, rfl‚ü© := TopCat.Presheaf.germ_exist ‚Ñ≥.1.presheaf _ y
    change stalkSMulStalk _ _ _ _ _ =
      stalkSMulStalk _ _ _ _ _ + stalkSMulStalk _ _ _ _ _
    have eq1 : TopCat.Presheaf.germ ‚Ñ≥.1.presheaf ‚ü®pt, mem_x‚ü© x +
      TopCat.Presheaf.germ ‚Ñ≥.1.presheaf ‚ü®pt, mem_y‚ü© y =
      TopCat.Presheaf.germ ‚Ñ≥.1.presheaf (‚ü®pt, ‚ü®mem_x, mem_y‚ü©‚ü© : (Ox ‚äì Oy : Opens _))
        (x |_ (Ox ‚äì Oy) + y |_ (Ox ‚äì Oy)) := by
      rw [map_add]
      congr 1
      ¬∑ fapply TopCat.Presheaf.germ_ext
        ¬∑ exact Ox ‚äì Oy
        ¬∑ exact ‚ü®mem_x, mem_y‚ü©
        ¬∑ exact homOfLE fun x hx => by aesop
        ¬∑ exact ùüô _
        ¬∑ change _ = (‚Ñ≥.1.presheaf.map _ ‚â´ _) _
          rw [‚Üê ‚Ñ≥.1.presheaf.map_comp]
          rfl
      ¬∑ fapply TopCat.Presheaf.germ_ext
        ¬∑ exact Ox ‚äì Oy
        ¬∑ exact ‚ü®mem_x, mem_y‚ü©
        ¬∑ exact homOfLE fun x hx => by aesop
        ¬∑ exact ùüô _
        ¬∑ change _ = (‚Ñ≥.1.presheaf.map _ ‚â´ _) _
          rw [‚Üê ‚Ñ≥.1.presheaf.map_comp]
          rfl
    erw [eq1, germ_smul_germ, germ_smul_germ, germ_smul_germ]
    rw [sectionSMulSection.smul_add, map_add]
    congr 1
    ¬∑ fapply sectionSMulSection.germ
      ¬∑ exact mem_r
      ¬∑ exact ‚ü®mem_x, mem_y‚ü©
      ¬∑ exact mem_x
      ¬∑ erw [TopCat.Presheaf.germ_res_apply]
        rfl
    ¬∑ fapply sectionSMulSection.germ
      ¬∑ exact mem_r
      ¬∑ exact ‚ü®mem_x, mem_y‚ü©
      ¬∑ exact mem_y
      ¬∑ erw [TopCat.Presheaf.germ_res_apply]
        rfl

noncomputable instance Module.stalk_stalk :
    Module (‚Ñõ.presheaf.stalk pt)
      (TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) where
  add_smul r s m := by
    obtain ‚ü®Or, mem_r, r, rfl‚ü© := ‚Ñõ.presheaf.germ_exist _ r
    obtain ‚ü®Os, mem_s, s, rfl‚ü© := ‚Ñõ.presheaf.germ_exist _ s
    obtain ‚ü®W, mem, w, rfl‚ü© := TopCat.Presheaf.germ_exist (F := ‚Ñ≥.1.presheaf) _ m
    change stalkSMulStalk _ _ _ _ _ =
      stalkSMulStalk _ _ _ _ _ + stalkSMulStalk _ _ _ _ _
    have eq1 : ‚Ñõ.presheaf.germ ‚ü®pt, mem_r‚ü© r + ‚Ñõ.presheaf.germ ‚ü®pt, mem_s‚ü© s =
      ‚Ñõ.presheaf.germ (‚ü®pt, ‚ü®mem_r, mem_s‚ü©‚ü© : (Or ‚äì Os : Opens _))
        (r |_ _ + s |_ _) := by
      rw [map_add]
      erw [TopCat.Presheaf.germ_res_apply, TopCat.Presheaf.germ_res_apply]
    rw [eq1]
    erw [germ_smul_germ, germ_smul_germ]
    rw [sectionSMulSection.add_smul, map_add]
    congr 1
    ¬∑ fapply sectionSMulSection.germ'
      ¬∑ exact ‚ü®mem_r, mem_s‚ü©
      ¬∑ exact mem
      ¬∑ exact mem
      ¬∑ exact mem_r
      ¬∑ erw [TopCat.Presheaf.germ_res_apply]
      ¬∑ rfl
    ¬∑ fapply sectionSMulSection.germ'
      ¬∑ exact ‚ü®mem_r, mem_s‚ü©
      ¬∑ exact mem
      ¬∑ apply mem_openSetModule
      ¬∑ apply mem_openSetRing
      ¬∑ erw [TopCat.Presheaf.germ_res_apply]
        erw [germ_sectionOnOpenSetRing]
      ¬∑ erw [germ_sectionOnOpenSetModule]; rfl
  zero_smul m := by
    obtain ‚ü®W, mem, w, rfl‚ü© := TopCat.Presheaf.germ_exist (F := ‚Ñ≥.1.presheaf) _ m
    change stalkSMulStalk _ _ _ _ _ = 0
    have eq1 : (0 : ‚Ñõ.presheaf.stalk pt) = ‚Ñõ.presheaf.germ (‚ü®pt, ‚ü®‚ü©‚ü© : (‚ä§ : Opens _)) 0 := by
      rw [map_zero]
    rw [eq1]
    erw [germ_smul_germ]
    rw [sectionSMulSection.zero_smul, map_zero]

end modules

section skyscraper

open Classical

noncomputable
instance skyModule (M : ModuleCat (‚Ñõ.presheaf.stalk pt)) (U : Opens ‚Ñõ) :
    Module (‚Ñõ.presheaf.obj $ op U) $
      (skyscraperPresheaf pt $ AddCommGrp.of M).obj (op U) where
  smul r m :=
    if h : pt ‚àà U
    then
      let
        e : (skyscraperPresheaf pt $ AddCommGrp.of M).obj (op U) ‚âÖ
            AddCommGrp.of M := eqToIso (by aesop)
      e.inv $ M.3.smul (‚Ñõ.presheaf.germ ‚ü®pt, h‚ü© r) (e.hom m)
    else 0
  one_smul := sorry
  mul_smul := sorry
  smul_zero := sorry
  smul_add := sorry
  add_smul := sorry
  zero_smul := sorry

lemma skyModule.smul_def (M : ModuleCat (‚Ñõ.presheaf.stalk pt)) (U : Opens ‚Ñõ)
    (r : (‚Ñõ.presheaf.obj $ op U)) (m : (skyscraperPresheaf pt $ AddCommGrp.of M).obj (op U)) :
    r ‚Ä¢ m =
    if h : pt ‚àà U
    then
      let
        e : (skyscraperPresheaf pt $ AddCommGrp.of M).obj (op U) ‚âÖ
            AddCommGrp.of M := eqToIso (by aesop)
      e.inv $ M.3.smul (‚Ñõ.presheaf.germ ‚ü®pt, h‚ü© r) (e.hom m)
    else 0 := rfl

@[simps]
noncomputable def right : ModuleCat (‚Ñõ.presheaf.stalk pt) ‚•§ SheafOfModules (forget2Ring ‚Ñõ) where
  obj M :=
  { val :=
    { presheaf := skyscraperPresheaf pt $ AddCommGrp.of M
      module := fun U => skyModule ‚Ñõ pt M U.unop
      map_smul := sorry }
    isSheaf := skyscraperPresheaf_isSheaf _ _ }
  map {M N} l :=
  { val :=
    { hom := skyscraperPresheafFunctor _ |>.map l.toAddMonoidHom
      map_smul := by
        rintro U (r : ‚Ñõ.presheaf.obj U) (x : ((skyscraperPresheaf pt (AddCommGrp.of M)).obj U))

        rw [skyModule.smul_def, skyModule.smul_def]
        simp only [skyscraperPresheaf_obj, skyscraperPresheaf_map, skyscraperPresheafFunctor_map,
          SkyscraperPresheafFunctor.map'_app, AddCommGrp.coe_of, op_unop, eqToIso.inv, eqToIso.hom]

        split_ifs with h
        . erw [‚Üê CategoryTheory.comp_apply, ‚Üê CategoryTheory.comp_apply]
          rw [eqToHom_trans_assoc, eqToHom_refl, Category.id_comp]
          simp only [Category.assoc]
          rw [eqToHom_trans, eqToHom_refl, Category.comp_id]
          rw [CategoryTheory.comp_apply]
          erw [l.map_smul]
          congr
        ¬∑ sorry
          } }
  map_id := sorry
  map_comp := sorry

noncomputable def left : SheafOfModules (forget2Ring ‚Ñõ) ‚•§ ModuleCat (‚Ñõ.presheaf.stalk pt) where
  obj ‚Ñ≥ := ModuleCat.of _ $ TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt
  map {‚Ñ≥ ùí©} g :=
  { toFun := TopCat.Presheaf.stalkFunctor (C := AddCommGrp) pt |>.map g.1.1
    map_add' := map_add _
    map_smul' := fun r m => sorry }
  map_id := sorry
  map_comp := sorry


noncomputable def adj : left ‚Ñõ pt ‚ä£ right ‚Ñõ pt where
  homEquiv ‚Ñ≥ M :=
  { toFun := fun l =>
    { val :=
      { hom := (skyscraperPresheafStalkAdjunction pt).homEquiv _ _ l.toAddMonoidHom
        map_smul := sorry } }
    invFun := fun ‚Ñì =>
    { toFun := (skyscraperPresheafStalkAdjunction pt).homEquiv _ _ |>.symm ‚Ñì.1.1
      map_add' := map_add _
      map_smul' := fun r m => by dsimp [skyscraperPresheafStalkAdjunction]; sorry }
    left_inv := sorry
    right_inv := sorry }
  unit := sorry
  counit := sorry
  homEquiv_unit := sorry
  homEquiv_counit := sorry


noncomputable def injectiveHullModuleCat : ModuleCat (‚Ñõ.presheaf.stalk pt) :=
  Injective.under <| ModuleCat.of _ (TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt)

noncomputable def toInjectiveHullModuleCat :
    ModuleCat.of _ (TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) ‚ü∂
    injectiveHullModuleCat ‚Ñõ ‚Ñ≥ pt :=
  Injective.Œπ _

instance : Mono (toInjectiveHullModuleCat ‚Ñõ ‚Ñ≥ pt) := Injective.Œπ_mono _

-- noncomputable abbrev skyAux : (Opens ‚Ñõ)·µí·µñ ‚•§ AddCommGrp :=
-- skyscraperPresheaf pt (TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt)

-- noncomputable def skyAuxIsoOfMem (U : Opens ‚Ñõ) (h : pt ‚àà U) :
--     (skyAux ‚Ñõ ‚Ñ≥ pt).obj (op U) ‚âÖ
--     (TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt) :=
--   eqToIso (by aesop)

-- noncomputable def skyAuxIsoOfNotMem (U : Opens ‚Ñõ) (h : pt ‚àâ U) :
--     (skyAux ‚Ñõ ‚Ñ≥ pt).obj (op U) ‚âÖ ‚ä§_ AddCommGrp.{u} :=
--   eqToIso (by aesop)


-- @[simps]
-- noncomputable def toSkyAux : ‚Ñ≥.1.presheaf ‚ü∂ skyAux ‚Ñõ ‚Ñ≥ pt where
--   app U :=
--     if h : pt ‚àà U.unop
--     then TopCat.Presheaf.germ (F := ‚Ñ≥.1.presheaf) ‚ü®pt, h‚ü© ‚â´ (skyAuxIsoOfMem ‚Ñõ ‚Ñ≥ pt U.unop h).inv
--     else 0
--   naturality {U V} i := by
--     if hV : pt ‚àà V.unop
--     then
--       have hU : pt ‚àà U.unop := leOfHom i.unop hV
--       simp only [skyscraperPresheaf_obj, op_unop, skyscraperPresheaf_map]
--       rw [dif_pos hV, dif_pos hU, dif_pos hV]
--       unfold skyAuxIsoOfMem
--       simp only [op_unop, skyscraperPresheaf_obj, eqToIso.inv, Category.assoc, eqToHom_trans]
--       rw [‚Üê Category.assoc]
--       congr 1
--       erw [TopCat.Presheaf.germ_res]
--     else
--       apply IsTerminal.hom_ext
--       exact ((if_neg hV).symm.ndrec terminalIsTerminal)


-- noncomputable instance : Unique (‚ä§_ AddCommGrp.{u}) := by
--   let e : ‚ä§_ AddCommGrp.{u} ‚âÖ AddCommGrp.of PUnit :=
--     terminalIsoIsTerminal (IsTerminal.ofUniqueHom (fun _ => 0) fun X f => by aesop)
--   exact Equiv.unique ‚ü®e.hom, e.inv, Iso.hom_inv_id_apply e, Iso.inv_hom_id_apply e‚ü©

-- noncomputable instance skyAux.smul (U : Opens ‚Ñõ) :
--     SMul (‚Ñõ.presheaf.obj $ op U) ((skyAux ‚Ñõ ‚Ñ≥ pt).obj $ op U) where
--   smul r x :=
--     if h : pt ‚àà U
--     then (skyAuxIsoOfMem ‚Ñõ ‚Ñ≥ pt U h).inv $
--       (Module.section_stalk ‚Ñõ ‚Ñ≥ pt U h).smul r
--         ((skyAuxIsoOfMem ‚Ñõ ‚Ñ≥ pt U h).hom x)
--     else 0

-- noncomputable instance skyAux.mulAction (U : Opens ‚Ñõ) :
--     MulAction  (‚Ñõ.presheaf.obj $ op U) ((skyAux ‚Ñõ ‚Ñ≥ pt).obj $ op U) where
--   one_smul m := show dite _ _ _ = _ by
--     split_ifs with h
--     ¬∑ convert Iso.hom_inv_id_apply (skyAuxIsoOfMem ‚Ñõ ‚Ñ≥ pt U h) _
--       exact (Module.section_stalk ‚Ñõ ‚Ñ≥ _ _ _).one_smul _
--     ¬∑ apply_fun (skyAuxIsoOfNotMem ‚Ñõ ‚Ñ≥ pt U h).hom
--       ¬∑ apply Subsingleton.elim
--       ¬∑ exact (ConcreteCategory.bijective_of_isIso (skyAuxIsoOfNotMem ‚Ñõ ‚Ñ≥ pt U h).hom).injective
--   mul_smul r s m := show dite _ _ _ = dite _ _ _ by
--     split_ifs with h1
--     ¬∑ congr 1
--       convert (Module.section_stalk ‚Ñõ ‚Ñ≥ _ _ _).mul_smul r s ((skyAuxIsoOfMem ‚Ñõ ‚Ñ≥ pt U h1).hom m)
--       change (skyAuxIsoOfMem ‚Ñõ ‚Ñ≥ pt U h1).hom (dite _ _ _) = _
--       rw [dif_pos h1]
--       exact Iso.inv_hom_id_apply _ _
--     ¬∑ rfl

-- noncomputable instance skyAux.distribMulAction (U : Opens ‚Ñõ) :
--     DistribMulAction  (‚Ñõ.presheaf.obj $ op U) ((skyAux ‚Ñõ ‚Ñ≥ pt).obj $ op U) where
--   smul_zero r := show dite _ _ _ = _ by
--     split_ifs with h
--     ¬∑ convert Iso.hom_inv_id_apply (skyAuxIsoOfMem ‚Ñõ ‚Ñ≥ pt U h) 0
--       rw [map_zero]
--       erw [(skyAuxIsoOfMem ‚Ñõ ‚Ñ≥ pt U h).hom.map_zero]
--       exact (Module.section_stalk ‚Ñõ ‚Ñ≥ _ _ _).smul_zero _
--     ¬∑ rfl
--   smul_add r x y := show dite _ _ _ = dite _ _ _ + dite _ _ _ by
--     split_ifs with h
--     ¬∑ rw [‚Üê map_add]
--       congr 1
--       rw [map_add]
--       exact (Module.section_stalk ‚Ñõ ‚Ñ≥ _ _ _).smul_add _ _ _
--     ¬∑ rw [add_zero]

-- noncomputable instance skyAux.module (U : Opens ‚Ñõ) :
--     Module (‚Ñõ.presheaf.obj $ op U) ((skyAux ‚Ñõ ‚Ñ≥ pt).obj $ op U) where
--   add_smul r s m := show dite _ _ _ = dite _ _ _ + dite _ _ _ by
--     split_ifs with h
--     ¬∑ rw [‚Üê map_add]
--       congr 1
--       exact (Module.section_stalk ‚Ñõ ‚Ñ≥ _ _ _).add_smul _ _ _
--     ¬∑ rw [zero_add]
--   zero_smul m := show dite _ _ _ = _ by
--     split_ifs with h
--     ¬∑ convert Iso.hom_inv_id_apply (skyAuxIsoOfMem ‚Ñõ ‚Ñ≥ pt U h) 0
--       erw [(skyAuxIsoOfMem ‚Ñõ ‚Ñ≥ pt U h).hom.map_zero]
--       exact (Module.section_stalk ‚Ñõ ‚Ñ≥ _ _ _).zero_smul _
--     ¬∑ rfl

@[simps]
noncomputable def sky : SheafOfModules (forget2Ring ‚Ñõ) :=
  right ‚Ñõ pt |>.obj $
    ModuleCat.of _ (TopCat.Presheaf.stalk.{u} (C := AddCommGrp) ‚Ñ≥.1.presheaf pt)

@[simps]
noncomputable def toSky : ‚Ñ≥ ‚ü∂ sky ‚Ñõ ‚Ñ≥ pt :=
  (adj ‚Ñõ pt).homEquiv _ _ $ _
  -- val :=
  --   { hom := toSkyAux ‚Ñõ ‚Ñ≥ pt
  --     map_smul := fun U (r : ‚Ñõ.presheaf.obj U) x => by
  --       dsimp only [sky_val_presheaf, skyscraperPresheaf_obj, toSkyAux, op_unop, sky_val_module]
  --       split_ifs with h
  --       ¬∑ simp only [AddCommGrp.coe_comp', Function.comp_apply]
  --         change _ = dite _ _ _
  --         rw [dif_pos h]
  --         congr 1
  --         erw [Iso.inv_hom_id_apply]
  --         change (TopCat.Presheaf.germ ‚Ñ≥.val.presheaf ‚ü®pt, h‚ü©)
  --           ((‚Ñ≥.1.module _).smul _ _) =
  --           sectionSMulStalk ‚Ñõ ‚Ñ≥ pt U.unop _ r ((TopCat.Presheaf.germ ‚Ñ≥.val.presheaf ‚ü®pt, h‚ü©) x)
  --         erw [section_smul_germ]
  --         delta sectionSMulSection
  --         erw [‚Üê ‚Ñ≥.1.map_smul]
  --         erw [TopCat.Presheaf.germ_res_apply]
  --         rfl
  --       ¬∑ apply_fun (skyAuxIsoOfNotMem ‚Ñõ ‚Ñ≥ pt U.unop h).hom
  --         ¬∑ apply Subsingleton.elim
  --         ¬∑ exact (ConcreteCategory.bijective_of_isIso
  --             (skyAuxIsoOfNotMem ‚Ñõ ‚Ñ≥ pt U.unop h).hom).injective }

noncomputable def nextSkyAux : (Opens ‚Ñõ)·µí·µñ ‚•§ AddCommGrp :=
  skyscraperPresheaf pt (AddCommGrp.of $ injectiveHullModuleCat ‚Ñõ ‚Ñ≥ pt)

noncomputable def skies : SheafOfModules $ forget2Ring ‚Ñõ :=
  ‚àè·∂ú fun (pt : ‚Ñõ) => (sky ‚Ñõ ‚Ñ≥ pt)

noncomputable def toSkies : ‚Ñ≥ ‚ü∂ skies ‚Ñõ ‚Ñ≥ :=
  Pi.lift fun pt => toSky ‚Ñõ ‚Ñ≥ pt

instance toSkies_mono : Mono (toSkies ‚Ñõ ‚Ñ≥) where
  right_cancellation {ùí©} f g hfg := by
    ext U x
    refine TopCat.Presheaf.section_ext ((SheafOfModules.toSheaf _).obj ‚Ñ≥) ?_ ?_ ?_ ?_
    intro ‚ü®y, hy‚ü©
    have : PresheafOfModules.Hom.app (f ‚â´ toSkies ‚Ñõ ‚Ñ≥).val U x
        = PresheafOfModules.Hom.app (g ‚â´ toSkies ‚Ñõ ‚Ñ≥).val U x := by
      rw [hfg]
    apply_fun PresheafOfModules.Hom.app (Pi.œÄ (sky ‚Ñõ ‚Ñ≥) y).val U at this
    simp only [SheafOfModules.comp_val, PresheafOfModules.Hom.comp_app, LinearMap.coe_comp,
      Function.comp_apply, Functor.comp_obj, toSkies,
      ‚Üê LinearMap.comp_apply, ‚Üê PresheafOfModules.Hom.comp_app] at this
    erw [‚Üê LinearMap.comp_apply, ‚Üê LinearMap.comp_apply] at this
    simp only [ ‚Üê PresheafOfModules.Hom.comp_app, ‚Üê SheafOfModules.comp_val,
      Category.assoc, Pi.lift_œÄ] at this
    simp only [PresheafOfModules.Hom.app, sky_val_presheaf, skyscraperPresheaf_obj,
      SheafOfModules.comp_val, PresheafOfModules.Hom.comp_hom, toSky_val_hom, NatTrans.comp_app,
      toSkyAux_app, op_unop, dif_pos hy] at this
    apply_fun (skyAuxIsoOfMem ‚Ñõ ‚Ñ≥ y U.unop hy).inv
    exact this
    ¬∑ exact (ConcreteCategory.bijective_of_isIso (skyAuxIsoOfMem ‚Ñõ ‚Ñ≥ y U.unop hy).inv).1

noncomputable def nextSky : SheafOfModules (forget2Ring ‚Ñõ) where
  val :=
    { presheaf := nextSkyAux ‚Ñõ ‚Ñ≥ pt
      module := sorry
      map_smul := sorry }
  isSheaf := sorry

noncomputable def nextSkies : SheafOfModules (forget2Ring ‚Ñõ) := ‚àè·∂ú fun x => nextSky ‚Ñõ ‚Ñ≥ x

noncomputable def skiesToNextSkies : skies ‚Ñõ ‚Ñ≥ ‚ü∂ nextSkies ‚Ñõ ‚Ñ≥ :=
  Pi.map fun pt =>
  { val :=
  { hom := (skyscraperPresheafFunctor pt).map $
      (forget‚ÇÇ _ AddCommGrp).map (toInjectiveHullModuleCat ‚Ñõ ‚Ñ≥ pt)
    map_smul := sorry } }

instance : Mono (skiesToNextSkies ‚Ñõ ‚Ñ≥) := by
  unfold skiesToNextSkies
  apply (config := {allowSynthFailures := true }) Pi.map_mono
  intro x
  sorry

instance : Injective (nextSky ‚Ñõ ‚Ñ≥ pt) := by sorry
  -- haveI inst1 : Injective (injectiveHullModuleCat ‚Ñõ ‚Ñ≥ pt) := Injective.injective_under _
  -- haveI inst2 : Injective _ := Injective.injective_of_adjoint
  --   (adj := stalkSkyscraperSheafAdjunction pt (C := ModuleCat.{u} (‚Ñõ.presheaf.stalk pt)))
  --   (injectiveHullModuleCat ‚Ñõ ‚Ñ≥ pt)
  -- constructor
  -- rintro M‚ÇÅ M‚ÇÇ g f inst3

  -- let M‚ÇÅ‚Çì := ModuleCat.of (‚Ñõ.presheaf.stalk pt)
  --   (TopCat.Presheaf.stalk.{u} (C := AddCommGrp) M‚ÇÅ.1.presheaf pt)
  -- let M‚ÇÇ‚Çì := ModuleCat.of (‚Ñõ.presheaf.stalk pt)
  --   (TopCat.Presheaf.stalk.{u} (C := AddCommGrp) M‚ÇÇ.1.presheaf pt)
  -- let f‚Çì : M‚ÇÅ‚Çì ‚ü∂ M‚ÇÇ‚Çì := {
  --   (TopCat.Presheaf.stalkFunctor AddCommGrp pt).map f.1.1 with
  --   map_smul' := fun x y => by
  --     dsimp only [TopCat.Presheaf.stalkFunctor_obj, ZeroHom.toFun_eq_coe,
  --       AddMonoidHom.toZeroHom_coe, AddHom.toFun_eq_coe, AddHom.coe_mk, RingHom.id_apply]
  --     obtain ‚ü®Ox, mem_x, x, rfl‚ü© := ‚Ñõ.presheaf.germ_exist pt x
  --     obtain ‚ü®Oy, mem_y, y, rfl‚ü© := TopCat.Presheaf.germ_exist M‚ÇÅ.1.presheaf pt y
  --     simp only
  --     change (TopCat.Presheaf.stalkFunctor AddCommGrp pt).map f.val.hom
  --       (stalkSMulStalk _ _ _ _ _) =
  --       stalkSMulStalk _ _ _ _ _
  --     erw [germ_smul_germ]
  --     erw [TopCat.Presheaf.stalkFunctor_map_germ_apply (f := f.1.1) (x := ‚ü®pt, mem_y‚ü©)]

  --     erw [TopCat.Presheaf.stalkFunctor_map_germ_apply (f := f.1.1)
  --       (x := (‚ü®pt, ‚ü®mem_x, mem_y‚ü©‚ü© : (Ox ‚äì Oy : Opens _)))]
  --     erw [germ_smul_germ]
  --     congr 1
  --     erw [f.1.map_smul (op $ Ox ‚äì Oy) (x |_ _) (y |_ _)]
  --     delta sectionSMulSection
  --     congr! 1
  --     change (M‚ÇÅ.1.presheaf.map _ ‚â´ f.1.1.app _) y = _
  --     rw [f.1.1.naturality]
  --     rfl
  -- }
  -- let e :
  --     (skyscraperPresheaf pt (injectiveHullModuleCat ‚Ñõ ‚Ñ≥ pt)).stalk pt ‚âÖ (injectiveHullModuleCat ‚Ñõ ‚Ñ≥ pt) :=
  --   skyscraperPresheafStalkOfSpecializes pt (injectiveHullModuleCat ‚Ñõ ‚Ñ≥ pt)
  --   (specializes_refl pt)
  -- let e := skyscraperPresheafStalkOfSpecializes pt (injectiveHullModuleCat ‚Ñõ ‚Ñ≥ pt)
  --   (specializes_refl pt)
  -- let g‚Çì' : M‚ÇÅ‚Çì ‚ü∂ (skyscraperPresheaf pt (injectiveHullModuleCat ‚Ñõ ‚Ñ≥ pt)).stalk pt :=
  --   sorry

  -- let g‚Çì : M‚ÇÅ‚Çì ‚ü∂ (injectiveHullModuleCat ‚Ñõ ‚Ñ≥ pt) := g‚Çì' ‚â´ e.hom
  -- have inst3' : Mono f.1.1 := by
  --   sorry
  -- have : Mono f‚Çì := by
  --   suffices Mono ((TopCat.Presheaf.stalkFunctor AddCommGrp pt).map f.1.1) by
  --     rw [ConcreteCategory.mono_iff_injective_of_preservesPullback] at this ‚ä¢
  --     exact this

  --   convert TopCat.Presheaf.stalk_mono_of_mono.{u} (C := AddCommGrp)
  --     (F := ‚ü®M‚ÇÅ.1.presheaf, M‚ÇÅ.isSheaf‚ü©) (G := ‚ü®M‚ÇÇ.1.presheaf, M‚ÇÇ.isSheaf‚ü©)
  --     (f := ‚ü®f.1.1‚ü©) (x := pt)
  --   apply Sheaf.Hom.mono_of_presheaf_mono

  -- let h‚Çì := @Injective.factorThru _ _ _ M‚ÇÅ‚Çì M‚ÇÇ‚Çì inst1 g‚Çì f‚Çì inferInstance
  -- let h : M‚ÇÇ.1.presheaf ‚ü∂ skyscraperPresheaf pt _ := (skyscraperPresheafStalkAdjunction pt).homEquiv _ _ ((forget‚ÇÇ _ AddCommGrp).map h‚Çì)
  -- refine ‚ü®‚ü®‚ü®h ‚â´ (skyscraperPresheafFunctor _).map _, ?_‚ü©‚ü©, ?_‚ü©

  -- sorry

instance : Injective (nextSkies ‚Ñõ ‚Ñ≥) := inferInstanceAs <| Injective $ ‚àè·∂ú fun _ => _

instance : EnoughInjectives (SheafOfModules (forget2Ring ‚Ñõ)) where
  presentation M := Nonempty.intro
    { J := nextSkies ‚Ñõ M
      injective := inferInstance
      f := toSkies ‚Ñõ M ‚â´ skiesToNextSkies ‚Ñõ M
      mono := inferInstance }

end skyscraper
