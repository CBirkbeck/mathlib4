import Mathlib.Topology.Category.Profinite.AsLimit
import Mathlib.Topology.Category.Profinite.CofilteredLimit
import Mathlib.CategoryTheory.Limits.Final
import Mathlib.CategoryTheory.Sites.RegularExtensive
import Mathlib.CategoryTheory.Sites.Sheafification

universe u

open CategoryTheory Limits FintypeCat Opposite

structure LightProfinite : Type (u+1) where
  diagram : ‚Ñï·µí·µñ ‚•§ FintypeCat
  cone : Cone (diagram ‚ãô toProfinite.{u})
  isLimit : IsLimit cone

def FintypeCat.toLightProfinite (X : FintypeCat) : LightProfinite where
  diagram := (Functor.const _).obj X
  cone := {
    pt := toProfinite.obj X
    œÄ := eqToHom rfl }
  isLimit := {
    lift := fun s ‚Ü¶ s.œÄ.app ‚ü®0‚ü©
    fac := fun s j ‚Ü¶ (s.œÄ.naturality (homOfLE (zero_le (unop j))).op)
    uniq := fun _ _ h ‚Ü¶  h ‚ü®0‚ü© }

noncomputable
def LightProfinite.of (F : ‚Ñï·µí·µñ ‚•§ FintypeCat) : LightProfinite where
  diagram := F
  isLimit := limit.isLimit (F ‚ãô FintypeCat.toProfinite)

class Profinite.IsLight (S : Profinite) : Prop where
  countable_clopens : Countable {s : Set S // IsClopen s}

def clopensEquiv (S : Profinite) : {s : Set S // IsClopen s} ‚âÉ LocallyConstant S (Fin 2) :=
  sorry

attribute [instance] Profinite.IsLight.countable_clopens

open Classical in
instance (S : Profinite) [S.IsLight] : Countable (DiscreteQuotient S) := by
  have : ‚àÄ d : DiscreteQuotient S, Fintype d := fun d ‚Ü¶ Fintype.ofFinite _
  refine @Function.Surjective.countable ({t : Finset {s : Set S // IsClopen s} //
    (‚àÄ (i j : {s : Set S // IsClopen s}), i ‚àà t ‚Üí j ‚àà t ‚Üí i ‚â† j ‚Üí i.val ‚à© j.val = ‚àÖ) ‚àß
    ‚àÄ (x : S), ‚àÉ i, i ‚àà t ‚àß x ‚àà i.val}) _ _ ?_ ?_
  ¬∑ intro t
    refine ‚ü®‚ü®fun x y ‚Ü¶ ‚àÉ i, i ‚àà t.val ‚àß x ‚àà i.val ‚àß y ‚àà i.val, ‚ü®by simpa using t.prop.2,
      fun ‚ü®i, h‚ü© ‚Ü¶ ‚ü®i, ‚ü®h.1, h.2.2, h.2.1‚ü©‚ü©, ?_‚ü©‚ü©, ?_‚ü©
    ¬∑ intro x y z ‚ü®ixy, hxy‚ü© ‚ü®iyz, hyz‚ü©
      refine ‚ü®ixy, hxy.1, hxy.2.1, ?_‚ü©
      convert hyz.2.2
      by_contra h
      have hh := t.prop.1 ixy iyz hxy.1 hyz.1 h
      apply Set.not_mem_empty y
      rw [‚Üê hh]
      exact ‚ü®hxy.2.2, hyz.2.1‚ü©
    ¬∑ intro x
      simp only [setOf, Setoid.Rel]
      obtain ‚ü®i, h‚ü© := t.prop.2 x
      convert i.prop.1 with z
      refine ‚ü®fun ‚ü®j, hh‚ü© ‚Ü¶ ?_, fun hh ‚Ü¶ ?_‚ü©
      ¬∑ suffices i = j by rw [this]; exact hh.2.2
        by_contra hhh
        have hhhh := t.prop.1 i j h.1 hh.1 hhh
        apply Set.not_mem_empty x
        rw [‚Üê hhhh]
        exact ‚ü®h.2, hh.2.1‚ü©
      ¬∑ exact ‚ü®i, h.1, h.2, hh‚ü©
  ¬∑ intro d
    refine ‚ü®‚ü®(Set.range (fun x ‚Ü¶ ‚ü®d.proj ‚Åª¬π' {x}, d.isClopen_preimage _‚ü©)).toFinset, ?_, ?_‚ü©, ?_‚ü©
    ¬∑ intro i j hi hj hij
      simp only [Set.toFinset_range, Finset.mem_image, Finset.mem_univ, true_and] at hi hj
      obtain ‚ü®ai, hi‚ü© := hi
      obtain ‚ü®aj, hj‚ü© := hj
      rw [‚Üê hi, ‚Üê hj]
      dsimp
      ext x
      refine ‚ü®fun ‚ü®hhi, hhj‚ü© ‚Ü¶ ?_, fun h ‚Ü¶ by simp at h‚ü©
      simp only [Set.mem_preimage, Set.mem_singleton_iff] at hhi hhj
      exfalso
      apply hij
      rw [‚Üê hi, ‚Üê hj, ‚Üê hhi, ‚Üê hhj]
    ¬∑ intro x
      refine ‚ü®‚ü®d.proj ‚Åª¬π' {d.proj x}, d.isClopen_preimage _‚ü©, ?_‚ü©
      simp
    ¬∑ ext x y
      simp only [DiscreteQuotient.proj, Set.toFinset_range, Finset.mem_image, Finset.mem_univ,
        true_and, exists_exists_eq_and, Set.mem_preimage, Set.mem_singleton_iff, exists_eq_left',
        Quotient.eq'']
      exact ‚ü®d.iseqv.symm , d.iseqv.symm‚ü©

instance (S : Profinite) : IsCofiltered (DiscreteQuotient S) := inferInstance

noncomputable
def cofinal_sequence (S : Profinite) [S.IsLight] : ‚Ñï ‚Üí DiscreteQuotient S := fun
  | .zero => (exists_surjective_nat _).choose 0
  | .succ n => (IsCofiltered.toIsCofilteredOrEmpty.cone_objs ((exists_surjective_nat _).choose n)
      (cofinal_sequence S n)).choose

noncomputable
def cofinal_sequence' (S : Profinite) [S.IsLight] : ‚Ñï ‚Üí DiscreteQuotient S := fun n ‚Ü¶ by
  induction n with
  | zero => exact (exists_surjective_nat _).choose 0
  | succ n D => exact
      (IsCofiltered.toIsCofilteredOrEmpty.cone_objs ((exists_surjective_nat _).choose n) D).choose

theorem antitone_cofinal_sequence (S : Profinite) [S.IsLight] : Antitone (cofinal_sequence S) :=
  antitone_nat_of_succ_le fun n ‚Ü¶
    leOfHom (IsCofiltered.toIsCofilteredOrEmpty.cone_objs ((exists_surjective_nat _).choose n)
      (cofinal_sequence S n)).choose_spec.choose_spec.choose

theorem cofinal_cofinal_sequence (S : Profinite) [S.IsLight] :
    ‚àÄ d, ‚àÉ n, cofinal_sequence S n ‚â§ d := by
  intro d
  obtain ‚ü®m, h‚ü© := (exists_surjective_nat _).choose_spec d
  refine ‚ü®m + 1, ?_‚ü©
  rw [‚Üê h]
  exact leOfHom (IsCofiltered.toIsCofilteredOrEmpty.cone_objs ((exists_surjective_nat _).choose m)
      (cofinal_sequence S m)).choose_spec.choose

@[simps]
noncomputable def initial_functor (S : Profinite) [S.IsLight] : ‚Ñï·µí·µñ ‚•§ DiscreteQuotient S where
  obj n := cofinal_sequence S (unop n)
  map h := homOfLE (antitone_cofinal_sequence S (leOfHom h.unop))

instance initial_functor_initial (S : Profinite) [S.IsLight] : (initial_functor S).Initial where
  out d := by
    obtain ‚ü®n, h‚ü© := cofinal_cofinal_sequence S d
    let g : (initial_functor S).obj ‚ü®n‚ü© ‚ü∂ d := eqToHom (by simp) ‚â´ homOfLE h
    have : Nonempty (CostructuredArrow (initial_functor S) d) := ‚ü®CostructuredArrow.mk g‚ü©
    apply isConnected_of_zigzag
    intro i j
    refine ‚ü®[i, j], ?_‚ü©
    simp only [List.chain_cons, Zag, or_self, List.Chain.nil, and_true, ne_eq, not_false_eq_true,
      List.getLast_cons, not_true_eq_false, List.getLast_singleton']
    refine ‚ü®‚ü®ùüô _‚ü©, ?_‚ü©
    by_cases hnm : unop i.1 ‚â§ unop j.1
    ¬∑ right
      refine ‚ü®CostructuredArrow.homMk (homOfLE hnm).op rfl‚ü©
    ¬∑ left
      simp only [not_le] at hnm
      refine ‚ü®CostructuredArrow.homMk (homOfLE (le_of_lt hnm)).op rfl‚ü©

namespace LightProfinite

def toProfinite (S : LightProfinite) : Profinite := S.cone.pt

noncomputable
def ofIsLight (S : Profinite) [S.IsLight] : LightProfinite where
  diagram := initial_functor S ‚ãô S.fintypeDiagram
  cone := (Functor.Initial.limitConeComp (initial_functor S) S.lim).cone
  isLimit := (Functor.Initial.limitConeComp (initial_functor S) S.lim).isLimit

instance (S : LightProfinite) : S.toProfinite.IsLight where
  countable_clopens := by
    refine @Countable.of_equiv _ _ ?_ (clopensEquiv S.toProfinite).symm
    refine @Function.Surjective.countable
      (Œ£ (n : ‚Ñï), LocallyConstant ((S.diagram ‚ãô FintypeCat.toProfinite).obj ‚ü®n‚ü©) (Fin 2)) _ ?_ ?_ ?_
    ¬∑ apply @instCountableSigma _ _ _ ?_
      intro n
      refine @Finite.to_countable _ ?_
      refine @Finite.of_injective _ ((S.diagram ‚ãô FintypeCat.toProfinite).obj ‚ü®n‚ü© ‚Üí (Fin 2)) ?_ _
        LocallyConstant.coe_injective
      refine @Pi.finite _ _ ?_ _
      simp only [Functor.comp_obj, toProfinite_obj_toCompHaus_toTop_Œ±]
      infer_instance
    ¬∑ exact fun a ‚Ü¶ a.snd.comap (S.cone.œÄ.app ‚ü®a.fst‚ü©).1
    ¬∑ intro a
      obtain ‚ü®n, g, h‚ü© := Profinite.exists_locallyConstant S.cone S.isLimit a
      exact ‚ü®‚ü®unop n, g‚ü©, h.symm‚ü©

@[simps!]
instance : Category LightProfinite := InducedCategory.category toProfinite

@[simps!]
instance concreteCategory : ConcreteCategory LightProfinite := InducedCategory.concreteCategory _

@[simps!]
def lightToProfinite : LightProfinite ‚•§ Profinite := inducedFunctor _

instance : Faithful lightToProfinite := show Faithful <| inducedFunctor _ from inferInstance

instance : Full lightToProfinite := show Full <| inducedFunctor _ from inferInstance

instance : lightToProfinite.ReflectsEpimorphisms := inferInstance

instance {X : LightProfinite} : TopologicalSpace ((forget LightProfinite).obj X) :=
  (inferInstance : TopologicalSpace X.cone.pt)

instance {X : LightProfinite} : TotallyDisconnectedSpace ((forget LightProfinite).obj X) :=
  (inferInstance : TotallyDisconnectedSpace X.cone.pt)

instance {X : LightProfinite} : CompactSpace ((forget LightProfinite).obj X) :=
  (inferInstance : CompactSpace X.cone.pt )

instance {X : LightProfinite} : T2Space ((forget LightProfinite).obj X) :=
  (inferInstance : T2Space X.cone.pt )

def fintypeCatToLightProfinite : FintypeCat ‚•§ LightProfinite where
  obj X := X.toLightProfinite
  map f := FintypeCat.toProfinite.map f

noncomputable
def EffectiveEpi.struct {B X : LightProfinite.{u}} (œÄ : X ‚ü∂ B) (hœÄ : Function.Surjective œÄ) :
    EffectiveEpiStruct œÄ where
  desc e h := (QuotientMap.of_surjective_continuous hœÄ œÄ.continuous).lift e fun a b hab ‚Ü¶
    FunLike.congr_fun (h ‚ü®fun _ ‚Ü¶ a, continuous_const‚ü© ‚ü®fun _ ‚Ü¶ b, continuous_const‚ü©
    (by ext; exact hab)) a
  fac e h := ((QuotientMap.of_surjective_continuous hœÄ œÄ.continuous).lift_comp e
    fun a b hab ‚Ü¶ FunLike.congr_fun (h ‚ü®fun _ ‚Ü¶ a, continuous_const‚ü© ‚ü®fun _ ‚Ü¶ b, continuous_const‚ü©
    (by ext; exact hab)) a)
  uniq e h g hm := by
    suffices g = (QuotientMap.of_surjective_continuous hœÄ œÄ.continuous).liftEquiv ‚ü®e,
      fun a b hab ‚Ü¶ FunLike.congr_fun (h ‚ü®fun _ ‚Ü¶ a, continuous_const‚ü© ‚ü®fun _ ‚Ü¶ b, continuous_const‚ü©
      (by ext; exact hab)) a‚ü© by assumption
    rw [‚Üê Equiv.symm_apply_eq (QuotientMap.of_surjective_continuous hœÄ œÄ.continuous).liftEquiv]
    ext
    simp only [QuotientMap.liftEquiv_symm_apply_coe, ContinuousMap.comp_apply, ‚Üê hm]
    rfl

theorem epi_iff_surjective {X Y : LightProfinite.{u}} (f : X ‚ü∂ Y) :
    Epi f ‚Üî Function.Surjective f := by
  constructor
  ¬∑ dsimp [Function.Surjective]
    contrapose!
    rintro ‚ü®y, hy‚ü© hf
    let C := Set.range f
    have hC : IsClosed C := (isCompact_range f.continuous).isClosed
    let U := C·∂ú
    have hyU : y ‚àà U := by
      refine' Set.mem_compl _
      rintro ‚ü®y', hy'‚ü©
      exact hy y' hy'
    have hUy : U ‚àà nhds y := hC.compl_mem_nhds hyU
    obtain ‚ü®V, hV, hyV, hVU‚ü© := isTopologicalBasis_clopen.mem_nhds_iff.mp hUy
    classical
      let Z := (FintypeCat.of (ULift.{u} <| Fin 2)).toLightProfinite
      let g : Y ‚ü∂ Z := ‚ü®(LocallyConstant.ofClopen hV).map ULift.up, LocallyConstant.continuous _‚ü©
      let h : Y ‚ü∂ Z := ‚ü®fun _ => ‚ü®1‚ü©, continuous_const‚ü©
      have H : h = g := by
        rw [‚Üê cancel_epi f]
        ext x
        apply ULift.ext
        dsimp [LocallyConstant.ofClopen]
        erw [LightProfinite.instCategoryLightProfinite_comp_apply, ContinuousMap.coe_mk,
          LightProfinite.instCategoryLightProfinite_comp_apply, ContinuousMap.coe_mk,
          Function.comp_apply, if_neg]
        refine' mt (fun Œ± => hVU Œ±) _
        simp only [concreteCategory_forget_obj, Set.mem_compl_iff, Set.mem_range, not_exists,
          not_forall, not_not]
        exact ‚ü®x, rfl‚ü©
      apply_fun fun e => (e y).down at H
      dsimp [LocallyConstant.ofClopen] at H
      erw [ContinuousMap.coe_mk, ContinuousMap.coe_mk, Function.comp_apply, if_pos hyV] at H
      exact top_ne_bot H
  ¬∑ rw [‚Üê CategoryTheory.epi_iff_surjective]
    apply (forget LightProfinite).epi_of_epi_map

theorem effectiveEpi_iff_surjective {X Y : LightProfinite.{u}} (f : X ‚ü∂ Y) :
    EffectiveEpi f ‚Üî Function.Surjective f := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ‚ü®‚ü®EffectiveEpi.struct f h‚ü©‚ü©‚ü©
  rw [‚Üê epi_iff_surjective]
  infer_instance

instance : Preregular LightProfinite := sorry

instance : FinitaryExtensive LightProfinite := sorry

end LightProfinite

structure LightProfinite' : Type u where
  diagram : ‚Ñï·µí·µñ ‚•§ FintypeCat.Skeleton.{u}

namespace LightProfinite'

noncomputable section

def toProfinite (S : LightProfinite') : Profinite :=
  limit (S.diagram  ‚ãô FintypeCat.Skeleton.equivalence.functor ‚ãô FintypeCat.toProfinite.{u})

instance : Category LightProfinite' := InducedCategory.category toProfinite

instance : SmallCategory LightProfinite' := inferInstance

instance concreteCategory : ConcreteCategory LightProfinite' := InducedCategory.concreteCategory _

@[simps!]
def lightToProfinite' : LightProfinite' ‚•§ Profinite := inducedFunctor _

instance : Faithful lightToProfinite' := show Faithful <| inducedFunctor _ from inferInstance

instance : Full lightToProfinite' := show Full <| inducedFunctor _ from inferInstance

end

end LightProfinite'

noncomputable section Equivalence

def smallToLight : LightProfinite' ‚•§ LightProfinite where
  obj X := ‚ü®X.diagram ‚ãô Skeleton.equivalence.functor, _, limit.isLimit _‚ü©
  map f := f

instance : Faithful smallToLight := ‚ü®id‚ü©

instance : Full smallToLight := ‚ü®id, fun _ ‚Ü¶ rfl‚ü©

instance : EssSurj smallToLight := by
  constructor
  intro Y
  let i : limit (((Y.diagram ‚ãô Skeleton.equivalence.inverse) ‚ãô Skeleton.equivalence.functor) ‚ãô
    toProfinite) ‚âÖ Y.cone.pt := (Limits.lim.mapIso (isoWhiskerRight ((Functor.associator _ _ _) ‚â™‚â´
    (isoWhiskerLeft Y.diagram Skeleton.equivalence.counitIso)) toProfinite)) ‚â™‚â´
    IsLimit.conePointUniqueUpToIso (limit.isLimit _) Y.isLimit
  exact ‚ü®‚ü®Y.diagram ‚ãô Skeleton.equivalence.inverse‚ü©, ‚ü®‚ü®i.hom, i.inv, i.hom_inv_id, i.inv_hom_id‚ü©‚ü©‚ü©
  -- why can't I just write `i`?

instance : IsEquivalence smallToLight := Equivalence.ofFullyFaithfullyEssSurj _

def LightProfinite.equivSmall : LightProfinite ‚âå LightProfinite' := smallToLight.asEquivalence.symm

instance : EssentiallySmall LightProfinite where
  equiv_smallCategory := ‚ü®LightProfinite', inferInstance, ‚ü®LightProfinite.equivSmall‚ü©‚ü©

end Equivalence


variable (P : LightProfinite.{0}·µí·µñ ‚•§ Type)

-- #check (coherentTopology LightProfinite.{0}).sheafify P (D := Type)
-- Doesn't work, need a universe bump because `LightProfinite`¬†is large.

instance : Preregular LightProfinite' := sorry

instance : FinitaryExtensive LightProfinite' := sorry

variable (P : LightProfinite'.{0}·µí·µñ ‚•§ Type)

-- #check (coherentTopology LightProfinite'.{0}).sheafify P (D := Type)
-- Works because `LightProfinite'`¬†is actually small.

-- TODO: provide API to sheafify over essentially small categories
