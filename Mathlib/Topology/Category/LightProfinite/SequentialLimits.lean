import Mathlib.Topology.Category.LightProfinite.Subcategory
import Mathlib.Topology.Category.LightProfinite.EffectiveEpi

open CategoryTheory Limits

namespace LightProfinite

variable (M : ‚Ñï·µí·µñ ‚•§ LightProfinite)

noncomputable def index {X Y : LightProfinite} (f : X ‚ü∂ Y) (n : ‚Ñï) : ‚Ñï :=
  let g := locallyConstant_of_hom f n
  have := Profinite.exists_locallyConstant X.cone X.isLimit g
  max n this.choose.unop

noncomputable def component_map {X Y : LightProfinite} (f : X ‚ü∂ Y) (n : ‚Ñï) :
    X.diagram.obj ‚ü®index f n‚ü© ‚ü∂ Y.diagram.obj ‚ü®n‚ü© :=
  let g := locallyConstant_of_hom f n
  have := Profinite.exists_locallyConstant X.cone X.isLimit g
  X.transitionMapLE (le_max_right _ _) ‚â´ this.choose_spec.choose.toFun

noncomputable def index_seq : ‚Ñï ‚Üí ‚Ñï := by
  intro n
  induction n with
  | zero => exact index (M.map (homOfLE (Nat.le_succ 0)).op) 0
  | succ n ih => exact index (M.map (homOfLE (Nat.le_succ n)).op) ih

lemma index_seq_monotone : Monotone (index_seq M) := sorry

section

variable {C : Type*} [Category C]

def compose_n (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f (n + 1) ‚ü∂ f n) {n m : ‚Ñï}
    (hh : n ‚â§ m) : f m ‚ü∂ f n :=
  Nat.leRecOn hh (fun g ‚Ü¶ h _ ‚â´ g) (ùüô _)

lemma compose_n_id (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f (n + 1) ‚ü∂ f n) (n : ‚Ñï) :
    compose_n f h (le_refl n) = ùüô _ :=
  Nat.leRecOn_self _

lemma compose_n_trans (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f (n + 1) ‚ü∂ f n) {n m k : ‚Ñï} (h‚ÇÅ : n ‚â§ m)
    (h‚ÇÇ : m ‚â§ k) :
    compose_n f h (h‚ÇÅ.trans h‚ÇÇ) = compose_n f h h‚ÇÇ ‚â´ compose_n f h h‚ÇÅ := by
  induction h‚ÇÇ with
  | refl =>
    simp [compose_n, Nat.leRecOn_self _]
  | @step p h‚ÇÇ ih =>
    rw [compose_n, Nat.leRecOn_succ (h‚ÇÅ.trans h‚ÇÇ)]
    simp only [compose_n] at ih
    rw [ih, compose_n, compose_n, ‚Üê Category.assoc]
    congr
    exact (Nat.leRecOn_succ _ _).symm

@[simps!]
def Nat.functor_mk (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f (n + 1) ‚ü∂ f n) :
    ‚Ñï·µí·µñ ‚•§ C where
  obj n := f n.unop
  map := @fun ‚ü®_‚ü© ‚ü®_‚ü© ‚ü®‚ü®‚ü®hh‚ü©‚ü©‚ü© ‚Ü¶ compose_n f h hh
  map_id _ := compose_n_id _ _ _
  map_comp _ _ := compose_n_trans _ _ _ _

def compose_n' (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f n ‚ü∂ f (n + 1)) {n m : ‚Ñï}
    (hh : n ‚â§ m) : f n ‚ü∂ f m :=
  Nat.leRecOn hh (fun g ‚Ü¶ g ‚â´ h _) (ùüô _)

lemma compose_n_id' (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f n ‚ü∂ f (n + 1)) (n : ‚Ñï) :
    compose_n' f h (le_refl n) = ùüô _ :=
  Nat.leRecOn_self _

lemma compose_n_trans' (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f n ‚ü∂ f (n + 1)) {n m k : ‚Ñï} (h‚ÇÅ : n ‚â§ m)
    (h‚ÇÇ : m ‚â§ k) :
    compose_n' f h (h‚ÇÅ.trans h‚ÇÇ) = compose_n' f h h‚ÇÅ ‚â´ compose_n' f h h‚ÇÇ := by
  sorry
  -- induction h‚ÇÅ with
  -- | refl =>
  --   simp [compose_n', Nat.leRecOn_self _]
  -- | @step p h‚ÇÅ ih =>
  --   rw [compose_n', Nat.leRecOn_succ (h‚ÇÅ.trans h‚ÇÇ)]
  --   simp only [compose_n'] at ih
  --   rw [ih, compose_n', compose_n', Category.assoc]
  --   congr
  --   convert (Nat.leRecOn_succ h‚ÇÇ _).symm

@[simps!]
def Nat.functor_mk' (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f n ‚ü∂ f (n + 1)) :
    ‚Ñï ‚•§ C where
  obj n := f n
  map := @fun _ _ ‚ü®‚ü®hh‚ü©‚ü© ‚Ü¶ compose_n' f h hh
  map_id _ := compose_n_id' _ _ _
  map_comp _ _ := compose_n_trans' _ _ _ _

end

noncomputable def stepMap (n : ‚Ñï) : (M.obj ‚ü®n+1‚ü©).diagram.obj ‚ü®index_seq M (n+1)‚ü© ‚ü∂
    (M.obj ‚ü®n‚ü©).diagram.obj ‚ü®index_seq M n‚ü© :=
  component_map (M.map (homOfLE _).op) _

noncomputable def cofinal_M : ‚Ñï·µí·µñ ‚•§ LightProfinite :=
  (Nat.functor_mk' (index_seq M) fun n ‚Ü¶ homOfLE (index_seq_monotone _ (Nat.le_succ n))).op ‚ãô M

noncomputable def stepMap' (n m : ‚Ñï) : (M.obj ‚ü®n+1‚ü©).diagram.obj ‚ü®index_seq M (m+1)‚ü© ‚ü∂
    (M.obj ‚ü®n‚ü©).diagram.obj ‚ü®index_seq M m‚ü© := by
  let f := component_map (M.map (homOfLE (Nat.le_succ n)).op) m
  simp [index_seq]
  sorry

noncomputable def limitCone : Cone M where
  pt := of (Nat.functor_mk (fun n ‚Ü¶ (M.obj ‚ü®n‚ü©).diagram.obj ‚ü®(index_seq M n)‚ü©) (stepMap M))
  -- pt := {
  --   diagram := Nat.functor_mk (fun n ‚Ü¶ (M.obj ‚ü®n‚ü©).diagram.obj ‚ü®(index_seq M n)‚ü©) (stepMap M)
  --   cone := sorry
  --   isLimit := sorry
  -- }
  œÄ := {
    app := fun ‚ü®n‚ü© ‚Ü¶ (by
      simp [of]
      sorry
      )
    naturality := sorry
  }
    -- let Œ± := (limit.cone ((Nat.functor_mk (fun n ‚Ü¶ (M.obj ‚ü®n‚ü©).diagram.obj ‚ü®(index_seq M n)‚ü©)
    --   (stepMap M)) ‚ãô FintypeCat.toProfinite)).œÄ



#exit

noncomputable def functor : ‚Ñï·µí·µñ √ó ‚Ñï·µí·µñ ‚•§ FintypeCat where
  obj n := (M.obj n.1).diagram.obj ‚ü®(index (M.map (homOfLE (Nat.le_succ n.1.unop)).op) n.2.unop)‚ü©
  map := sorry
  map_id := sorry
  map_comp := sorry
  -- obj n := ((M ‚ãô toSurj).obj n.1).diagram.obj n.2
  -- map f := ((M ‚ãô toSurj).obj _).diagram.map f.2 ‚â´ (component_map (M.map f.1) _)

noncomputable
def component_map {X Y : LightProfinite} (f : X ‚ü∂ Y) (n : ‚Ñï) :
    (toSurj.obj X).diagram.obj ‚ü®n‚ü© ‚ü∂ (toSurj.obj Y).diagram.obj ‚ü®n‚ü© :=
  let g := locallyConstant_of_hom (toSurj.map f) n
  have := Profinite.exists_locallyConstant (toSurj.obj X).cone (toSurj.obj X).isLimit g
  let m := this.choose.unop
  let g' : LocallyConstant ((toSurj.obj X).component m) ((toSurj.obj Y).component n) :=
    this.choose_spec.choose
  if hh : m ‚â§ n then
    (toSurj.obj X).transitionMapLE hh ‚â´ g'.1 else
    (section_ ((toSurj.obj X).transitionMapLE
      (le_of_lt (by simpa using hh)))) ‚â´ g'.1

instance (X : LightProfinite) (n : ‚Ñï) : Epi <| (toSurj.obj X).proj n := by
  rw [LightProfinite.epi_iff_surjective]
  exact X.proj_surjective' _

lemma hom_ext_ish (X : LightProfinite) (n : ‚Ñï) (Y : FintypeCat)
    (f g : (toSurj.obj X).diagram.obj ‚ü®n‚ü© ‚ü∂ Y)
    (h : (toSurj.obj X).proj n ‚â´ fintypeCatToLightProfinite.map f =
      (toSurj.obj X).proj n ‚â´ fintypeCatToLightProfinite.map g) : f = g := by
  apply fintypeCatToLightProfinite.map_injective
  rwa [cancel_epi] at h

lemma comp_eq_of_comap_eq {X Y : LightProfinite} {Z : FintypeCat} (f : X ‚ü∂ Y)
    (g‚ÇÅ : LocallyConstant X Z.toLightProfinite) (g‚ÇÇ : LocallyConstant Y Z.toLightProfinite)
    (h : g‚ÇÇ.comap f = g‚ÇÅ) :
    f ‚â´ (‚ü®g‚ÇÇ.1, g‚ÇÇ.2.continuous‚ü© : Y ‚ü∂ Z.toLightProfinite) = ‚ü®g‚ÇÅ.1, g‚ÇÅ.2.continuous‚ü© := by
  ext x
  change g‚ÇÇ.1 (f x) = g‚ÇÅ.1 x
  rw [‚Üê LocallyConstant.coe_inj] at h
  simp only [concreteCategory_forget_obj, LocallyConstant.toFun_eq_coe]
  erw [‚Üê congrFun h x]
  exact (LocallyConstant.coe_comap_apply _ _ f.continuous _).symm

lemma component_map_eq_of_bla {X Y : LightProfinite} {n : ‚Ñï}
    (f : X ‚ü∂ Y)
    (g : (toSurj.obj X).diagram.obj ‚ü®n‚ü© ‚ü∂ (toSurj.obj Y).diagram.obj ‚ü®n‚ü©)
    (h : (toSurj.obj X).proj n ‚â´ fintypeCatToLightProfinite.map g = f ‚â´ (toSurj.obj Y).proj n) :
    component_map f n = g := by
  let g'' := locallyConstant_of_hom (toSurj.map f) n
  have := Profinite.exists_locallyConstant (toSurj.obj X).cone (toSurj.obj X).isLimit g''
  let m := this.choose.unop
  let g' : LocallyConstant ((toSurj.obj X).component m) ((toSurj.obj Y).component n) :=
    this.choose_spec.choose
  have hhh : g'' = g'.comap ((toSurj.obj X).proj m) := this.choose_spec.choose_spec
  simp only [component_map]
  split_ifs with hh
  ¬∑ apply hom_ext_ish
    suffices proj (toSurj.obj X) n ‚â´ transitionMapLE' (toSurj.obj X) hh ‚â´ ‚ü®g'.1, g'.2.continuous‚ü© =
        proj (toSurj.obj X) n ‚â´ fintypeCatToLightProfinite.map g by exact this
    rw [reassoc_of% proj_comp_transitionMapLE', comp_eq_of_comap_eq _ _ _ hhh.symm, h]
    rfl
  ¬∑ have hh' : n ‚â§ m := le_of_lt (by simpa using hh)
    rw [‚Üê Category.id_comp g, ‚Üê IsSplitEpi.id (transitionMapLE (toSurj.obj X) hh'), Category.assoc]
    congr
    apply hom_ext_ish
    simp [-toSurj_obj]
    suffices proj (toSurj.obj X) m ‚â´ transitionMapLE' (toSurj.obj X) hh' ‚â´
        fintypeCatToLightProfinite.map g =
        proj (toSurj.obj X) m  ‚â´ ‚ü®g'.1, g'.2.continuous‚ü© by exact this.symm
    rw [‚Üê Category.assoc, proj_comp_transitionMapLE', comp_eq_of_comap_eq _ _ _ hhh.symm, h]
    rfl

@[simp]
lemma component_map_id (X : LightProfinite) (n : ‚Ñï) : component_map (ùüô X) n = ùüô _ := by
  apply component_map_eq_of_bla
  rfl

lemma component_map_w {X Y : LightProfinite} (f : X ‚ü∂ Y) {n m : ‚Ñï} (h : n ‚â§ m) :
    component_map f m ‚â´ (toSurj.obj Y).diagram.map ‚ü®(homOfLE h)‚ü© =
    (toSurj.obj X).diagram.map ‚ü®(homOfLE h)‚ü© ‚â´ component_map f n := sorry

lemma proj_comp_section_transitionMapLE' (S : LightProfinite) {n m : ‚Ñï} (h : n ‚â§ m) :
    (toSurj.obj S).proj n ‚â´ fintypeCatToLightProfinite.map
      (section_ ((toSurj.obj S).transitionMapLE h)) =
        (toSurj.obj S).proj m := by
  sorry -- not true

lemma component_map_w' {X Y : LightProfinite} (f : X ‚ü∂ Y) (n : ‚Ñï)  :
    (toSurj.obj X).proj n ‚â´ fintypeCatToLightProfinite.map (component_map f n) =
    f ‚â´ (toSurj.obj Y).proj n := by
  let g'' := locallyConstant_of_hom (toSurj.map f) n
  have := Profinite.exists_locallyConstant (toSurj.obj X).cone (toSurj.obj X).isLimit g''
  let m := this.choose.unop
  let g' : LocallyConstant ((toSurj.obj X).component m) ((toSurj.obj Y).component n) :=
    this.choose_spec.choose
  have hhh : g'' = g'.comap ((toSurj.obj X).proj m) := this.choose_spec.choose_spec
  have := comp_eq_of_comap_eq _ _ _ hhh.symm
  simp only [component_map]
  split_ifs with hh
  ¬∑ suffices proj (toSurj.obj X) n ‚â´ transitionMapLE' (toSurj.obj X) hh ‚â´ ‚ü®g'.1, g'.2.continuous‚ü© =
        f ‚â´ proj (toSurj.obj Y) n by exact this
    rw [reassoc_of% proj_comp_transitionMapLE', comp_eq_of_comap_eq _ _ _ hhh.symm]
    rfl
  ¬∑ simp only [Functor.map_comp]
    rw [reassoc_of% proj_comp_section_transitionMapLE']
    change proj _ _ ‚â´ ‚ü®g'.1, g'.2.continuous‚ü© = _
    rw [comp_eq_of_comap_eq _ _ _ hhh.symm]
    rfl

@[simp]
lemma component_map_comp {X Y Z : LightProfinite} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (n : ‚Ñï) :
    component_map (f ‚â´ g) n = component_map f n ‚â´ component_map g n := by
  apply component_map_eq_of_bla
  simp only [Functor.map_comp, ‚Üê Category.assoc]
  rw [component_map_w' f n]
  erw [Category.assoc, Category.assoc (f := f), component_map_w' g n]

-- This definition won't work...
noncomputable def functor : ‚Ñï·µí·µñ √ó ‚Ñï·µí·µñ ‚•§ FintypeCat where
  obj n := ((M ‚ãô toSurj).obj n.1).diagram.obj n.2
  map f := ((M ‚ãô toSurj).obj _).diagram.map f.2 ‚â´ (component_map (M.map f.1) _)
  map_comp f g := by
    have : (component_map (M.map f.1) _) ‚â´ ((M ‚ãô toSurj).obj _).diagram.map g.2 =
        ((M ‚ãô toSurj).obj _).diagram.map g.2 ‚â´ (component_map (M.map f.1) _) := component_map_w _ _
    simp only [Functor.comp_obj, prod_Hom, prod_comp, Functor.map_comp, component_map_comp,
      Category.assoc]
    rw [reassoc_of% this]

def limitCone : Cone M where
  pt := {
    diagram := {
      obj := fun n ‚Ü¶ (M.obj n).diagram.obj n
      map := @fun n m f ‚Ü¶ (by
        --fun f n ‚Ü¶ (M.obj _).diagram.map f
        simp
        refine (M.obj n).diagram.map f ‚â´ ?_
        let g := M.map f
        sorry
        )
      map_id := sorry
      map_comp := sorry
    }
    cone := sorry
    isLimit := sorry
  }
  œÄ := sorry
