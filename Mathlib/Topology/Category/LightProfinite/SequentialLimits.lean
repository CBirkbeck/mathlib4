import Mathlib.Topology.Category.LightProfinite.Subcategory

open CategoryTheory Limits

namespace LightProfinite

variable (M : ‚Ñï·µí·µñ ‚•§ LightProfinite)

noncomputable
def component_map {X Y : LightProfinite} (f : X ‚ü∂ Y) (n : ‚Ñï) :
    (toSurj.obj X).diagram.obj ‚ü®n‚ü© ‚ü∂ (toSurj.obj Y).diagram.obj ‚ü®n‚ü© :=
  let g := locallyConstant_of_hom (toSurj.map f) n
  have := Profinite.exists_locallyConstant (toSurj.obj X).cone (toSurj.obj X).isLimit g
  let m := this.choose.unop
  let g' : LocallyConstant ((toSurj.obj X).component m) ((toSurj.obj Y).component n) :=
    this.choose_spec.choose
  -- have h : g = g'.comap (X.obj.proj m) := this.choose_spec.choose_spec
  if hh : m ‚â§ n then
    (toSurj.obj X).transitionMapLE hh ‚â´ g'.1 else
    (section_ ((toSurj.obj X).transitionMapLE
      (le_of_lt (by simpa using hh)))) ‚â´ g'.1

lemma component_map_id (X : LightProfinite) (n : ‚Ñï) : component_map (ùüô X) n = ùüô _ := by
  let g := locallyConstant_of_hom (toSurj.map (ùüô X)) n
  have := Profinite.exists_locallyConstant (toSurj.obj X).cone (toSurj.obj X).isLimit g
  let m := this.choose.unop
  let g' : LocallyConstant ((toSurj.obj X).component m) ((toSurj.obj X).component n) :=
    this.choose_spec.choose
  have h : g = g'.comap ((toSurj.obj X).proj m) := this.choose_spec.choose_spec
  ext x
  simp only [component_map, Functor.comp_obj, FintypeCat.toProfinite_obj_toCompHaus_toTop_Œ±,
    Functor.const_obj_obj, LocallyConstant.toFun_eq_coe, id_eq, FintypeCat.id_apply]
  split_ifs with hh
  ¬∑ obtain ‚ü®y, hy‚ü© := X.proj_surjective' n x
    rw [‚Üê LocallyConstant.coe_inj] at h
    have hhh := congrFun h y
    erw [LocallyConstant.coe_comap_apply _ _ (_ : (_ : LightProfinite) ‚ü∂ _).continuous,
      ‚Üê (toSurj.obj X).proj_comp_transitionMapLE'' hh] at hhh
    rw [‚Üê hy]
    exact hhh.symm
  ¬∑ change g' _ = x
    have hh' : n ‚â§ m := le_of_lt (by simpa using hh)
    apply ConcreteCategory.injective_of_mono_of_preservesPullback
        (section_ ((toSurj.obj X).transitionMapLE hh'))
    obtain ‚ü®y, hy‚ü© := X.proj_surjective' m (section_ (transitionMapLE _ hh') x)
    rw [‚Üê LocallyConstant.coe_inj] at h
    have hhh := congrFun h y
    erw [LocallyConstant.coe_comap_apply _ _ (_ : (_ : LightProfinite) ‚ü∂ _).continuous,
      ‚Üê (toSurj.obj X).proj_comp_transitionMapLE'' (le_of_lt (by simpa using hh))] at hhh
    simp at hhh hy
    erw [hy] at hhh
    simp
    rw [‚Üê hhh]
    have := congrFun (IsSplitEpi.id ((toSurj.obj X).transitionMapLE hh')) x
    simp at this
    rw [this]

noncomputable def functor : ‚Ñï·µí·µñ √ó ‚Ñï·µí·µñ ‚•§ FintypeCat where
  obj n := ((M ‚ãô toSurj).obj n.1).diagram.obj n.2
  map f := ((M ‚ãô toSurj).obj _).diagram.map f.2 ‚â´ (component_map (M.map f.1) _)
  map_id := sorry
  map_comp := sorry

#exit

def limitCone : Cone M where
  pt := {
    diagram := {
      obj := fun n ‚Ü¶ (M.obj n).diagram.obj n
      map := @fun n m f ‚Ü¶ (by
        --fun f n ‚Ü¶ (M.obj _).diagram.map f
        simp
        refine (M.obj n).diagram.map f ‚â´ ?_
        let g := M.map f
        sorry
        )
      map_id := sorry
      map_comp := sorry
    }
    cone := sorry
    isLimit := sorry
  }
  œÄ := sorry
