import Mathlib.Topology.Category.LightProfinite.IsLight

open CategoryTheory Limits Function Profinite

namespace LightProfinite

variable (S : LightProfinite)

def transitionMap (n : ‚Ñï) : S.diagram.obj ‚ü®n+1‚ü© ‚ü∂ S.diagram.obj ‚ü®n‚ü© :=
  S.diagram.map ‚ü®homOfLE (Nat.le_succ _)‚ü©

def iso : S ‚âÖ ofIsLight S.toProfinite where
  hom := ùüô S.toProfinite
  inv := ùüô S.toProfinite

variable (T : Profinite) [T.IsLight]

lemma transitionMap_surjective_aux {d e : DiscreteQuotient T} (h : d ‚â§ e) :
    Surjective (T.diagram.map (homOfLE h)) := by
  have : Surjective ((T.fintypeDiagram.map (homOfLE h)) ‚àò d.proj) := by
    change Surjective e.proj; exact e.proj_surjective
  exact Surjective.of_comp this

lemma transitionMap_surjective (n : ‚Ñï) : Surjective ((ofIsLight T).transitionMap n) :=
  transitionMap_surjective_aux _ (sequentialFunctor_map _ (Nat.le_succ _))

def natTrans_nat_mk {C : Type*} [Category C] {F G : ‚Ñï·µí·µñ ‚•§ C} (f : (n : ‚Ñï) ‚Üí F.obj ‚ü®n‚ü© ‚ü∂ G.obj ‚ü®n‚ü©)
    (w : ‚àÄ n, F.map ‚ü®homOfLE (Nat.le_succ _)‚ü© ‚â´ f n = f (n + 1) ‚â´ G.map ‚ü®homOfLE (Nat.le_succ _)‚ü©) :
    F ‚ü∂ G where
  app n := f n.unop
  naturality := sorry

def homMk {X Y : LightProfinite}
    (f : (n : ‚Ñï) ‚Üí X ‚ü∂ fintypeCatToLightProfinite.obj (Y.diagram.obj ‚ü®n‚ü©))
    (w : ‚àÄ n, Y.transitionMap n ‚àò f (n + 1) = f n) : X ‚ü∂ Y := by
  let c : Cone (Y.diagram ‚ãô FintypeCat.toProfinite) := ‚ü®X.toProfinite, ?_, ?_‚ü©
  ¬∑ exact Y.isLimit.lift c
  ¬∑ intro ‚ü®n‚ü©
    refine ‚ü®f n, (f n).continuous‚ü©
  ¬∑ intro ‚ü®n‚ü© ‚ü®m‚ü© ‚ü®‚ü®‚ü®(h : m ‚â§ n)‚ü©‚ü©‚ü©
    ext x
    simp only [Functor.comp_obj, Functor.const_obj_obj, Functor.const_obj_map,
      FintypeCat.toProfinite_obj_toCompHaus_toTop_Œ±, Category.id_comp, Functor.comp_map,
      CategoryTheory.comp_apply]
    sorry
