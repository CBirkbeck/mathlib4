import Mathlib.Topology.Category.LightProfinite.IsLight

open CategoryTheory Limits Function Profinite

namespace LightProfinite

variable (S : LightProfinite)

def component (n : ‚Ñï) : LightProfinite := fintypeCatToLightProfinite.obj <| S.diagram.obj ‚ü®n‚ü©

def transitionMap (n : ‚Ñï) : S.diagram.obj ‚ü®n+1‚ü© ‚ü∂ S.diagram.obj ‚ü®n‚ü© :=
  S.diagram.map ‚ü®homOfLE (Nat.le_succ _)‚ü©

def transitionMap' (n : ‚Ñï) :  S.component (n+1) ‚ü∂ S.component n :=
  fintypeCatToLightProfinite.map (S.transitionMap n)

def isoMk {X Y : LightProfinite} (i : X.toProfinite ‚âÖ Y.toProfinite) : X ‚âÖ Y where
  hom := i.hom
  inv := i.inv
  hom_inv_id := i.hom_inv_id
  inv_hom_id := i.inv_hom_id

noncomputable def iso : S ‚âÖ ofIsLight S.toProfinite := isoMk <| (Iso.refl _)

lemma transitionMap_surjective_aux {T : Profinite} [T.IsLight] {d e : DiscreteQuotient T}
    (h : d ‚â§ e) : Surjective (T.diagram.map (homOfLE h)) := by
  have : Surjective ((T.fintypeDiagram.map (homOfLE h)) ‚àò d.proj) := by
    change Surjective e.proj; exact e.proj_surjective
  exact Surjective.of_comp this

lemma transitionMap_surjective (T : Profinite) [T.IsLight] (n : ‚Ñï) :
    Surjective ((ofIsLight T).transitionMap n) :=
  transitionMap_surjective_aux (sequentialFunctor_map _ (Nat.le_succ _))

def proj (n : ‚Ñï) : S ‚ü∂ S.component n := S.cone.œÄ.app ‚ü®n‚ü©

@[simp]
lemma proj_comp_transitionMap (n : ‚Ñï) : S.proj (n + 1) ‚â´ S.transitionMap' n = S.proj n :=
  S.cone.w (homOfLE (Nat.le_succ n)).op

def natTrans_nat_mk {C : Type*} [Category C] {F G : ‚Ñï ‚•§ C} (f : (n : ‚Ñï) ‚Üí F.obj n ‚ü∂ G.obj n)
    (w : ‚àÄ n, F.map (homOfLE (Nat.le_succ _)) ‚â´ f (n + 1) = f n ‚â´ G.map (homOfLE (Nat.le_succ _))) :
    F ‚ü∂ G where
  app n := f n
  naturality n m h := by
    have h' : n ‚â§ m := leOfHom h
    induction h' with
    | refl =>
      change F.map (ùüô _) ‚â´ _ = _ ‚â´ G.map (ùüô _)
      simp
    | @step k a ih =>
      have a' : n ‚â§ k := a
      have : h = homOfLE a' ‚â´ homOfLE (Nat.le_succ k) := rfl
      simp only [this, Functor.map_comp, Category.assoc]
      rw [w k, ‚Üê Category.assoc, ih (homOfLE _)]
      simp

def natTrans_nat_op_mk {C : Type*} [Category C] {F G : ‚Ñï·µí·µñ ‚•§ C} (f : (n : ‚Ñï) ‚Üí F.obj ‚ü®n‚ü© ‚ü∂ G.obj ‚ü®n‚ü©)
    (w : ‚àÄ n, F.map ‚ü®homOfLE (Nat.le_succ _)‚ü© ‚â´ f n = f (n + 1) ‚â´ G.map ‚ü®homOfLE (Nat.le_succ _)‚ü©) :
    F ‚ü∂ G where
  app := fun ‚ü®n‚ü© ‚Ü¶ f n
  naturality := by
    intro ‚ü®n‚ü© ‚ü®m‚ü© h
    have h' : m ‚â§ n := leOfHom h.unop
    induction h' with
    | refl =>
      change F.map (ùüô _) ‚â´ _ = _ ‚â´ G.map (ùüô _)
      simp
    | @step k a ih =>
      have a' : m ‚â§ k := a
      have : h = (homOfLE a' ‚â´ homOfLE (Nat.le_succ k)).op := rfl
      rw [op_comp] at this
      simp only [this, Functor.map_comp, Category.assoc]
      rw [ih, ‚Üê Category.assoc]
      have := w k
      change F.map (homOfLE _).op ‚â´ _ = _ at this
      rw [this, Category.assoc]
      rfl

def homMk {X Y : LightProfinite}
    (f : (n : ‚Ñï) ‚Üí X ‚ü∂ fintypeCatToLightProfinite.obj (Y.diagram.obj ‚ü®n‚ü©))
    (w : ‚àÄ n, Y.transitionMap n ‚àò f (n + 1) = f n) : X ‚ü∂ Y :=
  let c : Cone (Y.diagram ‚ãô FintypeCat.toProfinite) := ‚ü®X.toProfinite, natTrans_nat_op_mk f
    (by intro n; ext; exact congrFun (w n).symm _)‚ü©
  Y.isLimit.lift c

def homMk' {X Y : LightProfinite}
    (f : (n : ‚Ñï) ‚Üí LocallyConstant X (Y.diagram.obj ‚ü®n‚ü©))
    (w : ‚àÄ n, Y.transitionMap n ‚àò f (n + 1) = f n) : X ‚ü∂ Y :=
  let _ : ‚àÄ n, TopologicalSpace (Y.diagram.obj ‚ü®n‚ü©) := ‚ä•
  homMk (fun n ‚Ü¶ ‚ü®f n, (f n).2.continuous‚ü©) w
