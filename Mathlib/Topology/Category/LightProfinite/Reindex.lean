import Mathlib.Topology.Category.LightProfinite.Basic
import Mathlib.CategoryTheory.Limits.Shapes.Countable

universe u

open CategoryTheory Limits

namespace CategoryTheory

variable {C : Type*} [Category C]

def compose_n (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f (n + 1) ‚ü∂ f n) {n m : ‚Ñï}
    (hh : n ‚â§ m) : f m ‚ü∂ f n :=
  Nat.leRecOn hh (fun g ‚Ü¶ h _ ‚â´ g) (ùüô _)

lemma compose_n_id (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f (n + 1) ‚ü∂ f n) (n : ‚Ñï) :
    compose_n f h (le_refl n) = ùüô _ :=
  Nat.leRecOn_self _

lemma compose_n_succ (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f (n + 1) ‚ü∂ f n) (n : ‚Ñï) :
    compose_n f h (Nat.le_succ n) = h n := by
  simp [compose_n, Nat.leRecOn_succ, Nat.leRecOn_self]

lemma compose_n_trans (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f (n + 1) ‚ü∂ f n) {n m k : ‚Ñï} (h‚ÇÅ : n ‚â§ m)
    (h‚ÇÇ : m ‚â§ k) :
    compose_n f h (h‚ÇÅ.trans h‚ÇÇ) = compose_n f h h‚ÇÇ ‚â´ compose_n f h h‚ÇÅ := by
  induction h‚ÇÇ with
  | refl =>
    simp [compose_n, Nat.leRecOn_self _]
  | @step p h‚ÇÇ ih =>
    rw [compose_n, Nat.leRecOn_succ (h‚ÇÅ.trans h‚ÇÇ)]
    simp only [compose_n] at ih
    rw [ih, compose_n, compose_n, ‚Üê Category.assoc]
    congr
    exact (Nat.leRecOn_succ _ _).symm

@[simps!]
def Nat.functor_mk (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f (n + 1) ‚ü∂ f n) :
    ‚Ñï·µí·µñ ‚•§ C where
  obj n := f n.unop
  map := @fun ‚ü®_‚ü© ‚ü®_‚ü© ‚ü®‚ü®‚ü®hh‚ü©‚ü©‚ü© ‚Ü¶ compose_n f h hh
  map_id _ := compose_n_id _ _ _
  map_comp _ _ := compose_n_trans _ _ _ _

def compose_n' (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f n ‚ü∂ f (n + 1)) {n m : ‚Ñï}
    (hh : n ‚â§ m) : f n ‚ü∂ f m :=
  Nat.leRecOn hh (fun g ‚Ü¶ g ‚â´ h _) (ùüô _)

lemma compose_n_id' (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f n ‚ü∂ f (n + 1)) (n : ‚Ñï) :
    compose_n' f h (le_refl n) = ùüô _ :=
  Nat.leRecOn_self _

lemma compose_n_succ' (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f n ‚ü∂ f (n + 1)) (n : ‚Ñï) :
    compose_n' f h (Nat.le_succ n) = h n := by
  simp [compose_n', Nat.leRecOn_succ, Nat.leRecOn_self]

lemma compose_n_trans' (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f n ‚ü∂ f (n + 1)) {n m k : ‚Ñï} (h‚ÇÅ : n ‚â§ m)
    (h‚ÇÇ : m ‚â§ k) :
    compose_n' f h (h‚ÇÅ.trans h‚ÇÇ) = compose_n' f h h‚ÇÅ ‚â´ compose_n' f h h‚ÇÇ := by
  induction h‚ÇÇ with
  | refl =>
    simp [compose_n', Nat.leRecOn_self _]
  | @step p h‚ÇÇ ih =>
    rw [compose_n', Nat.leRecOn_succ (h‚ÇÅ.trans h‚ÇÇ)]
    simp only [compose_n'] at ih
    rw [ih, compose_n', compose_n', Category.assoc]
    congr
    rw [Nat.leRecOn_succ]

@[simps!]
def Nat.functor_mk' (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f n ‚ü∂ f (n + 1)) :
    ‚Ñï ‚•§ C where
  obj n := f n
  map := @fun _ _ ‚ü®‚ü®hh‚ü©‚ü© ‚Ü¶ compose_n' f h hh
  map_id _ := compose_n_id' _ _ _
  map_comp _ _ := compose_n_trans' _ _ _ _

-- variable {J D : Type*} [Category J] [Category D] (F : J ‚•§ C) (G : C ‚•§ D) [ReflectsLimit F G]
--     [HasLimit (F ‚ãô G)]

-- instance : HasLimit F := sorry

end CategoryTheory

namespace LightProfinite

variable (X : LightProfinite.{u}) (f : ‚Ñï ‚Üí ‚Ñï) (hf : Monotone f) (hf' : ‚àÄ n, (‚àÉ m, n ‚â§ f m))

@[simps!]
def Nat.functor : ‚Ñï ‚•§ ‚Ñï := Nat.functor_mk' f (fun n ‚Ü¶ homOfLE (hf (Nat.le_succ n)))

lemma final : (Nat.functor f hf).Final := by
  rw [Functor.final_iff_of_isFiltered]
  refine ‚ü®fun n ‚Ü¶ ?_, fun _ _ ‚Ü¶ ‚ü®_, ùüô _, rfl‚ü©‚ü©
  obtain ‚ü®m, hm‚ü© := hf' n
  exact ‚ü®m, ‚ü®homOfLE hm‚ü©‚ü©

lemma initial : (Nat.functor f hf).op.Initial :=
  have := final f hf hf'
  Functor.initial_op_of_final _

noncomputable def reindex : LightProfinite where
  diagram := (Nat.functor f hf).op ‚ãô X.diagram
  cone := X.cone.whisker (Nat.functor f hf).op
  isLimit := ((initial f hf hf').isLimitWhiskerEquiv _).symm X.isLimit
