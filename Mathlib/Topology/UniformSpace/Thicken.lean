/-
Copyright (c) 2021 Kalle Kyt√∂l√§. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kalle Kyt√∂l√§
-/
import Mathlib.Topology.MetricSpace.HausdorffDistance

/-!
# Thickening in uniform spaces

## Main definitions
* `UniformSpace.thicken s U`, the thickening of `s` by an entourage `U`.
-/

namespace UniformSpace
section Thicken

open Set UniformSpace
open scoped Uniformity

variable {Œ± : Type*}

/-- Symmetric entourage -/
def flip (U : Set (Œ± √ó Œ±)) :=
  Prod.swap‚Åª¬π' U

scoped[Uniformity] notation:max U "·∂†À°" => flip U

lemma isSymmetricRel_iff {U : Set (Œ± √ó Œ±)} :
    IsSymmetricRel U ‚Üî U·∂†À° = U := by rfl

lemma mem_flip {x y : Œ±} {U : Set (Œ± √ó Œ±)} :
    (x, y) ‚àà U ‚Üî (y, x) ‚àà U·∂†À° := by
  rw [flip, mem_preimage, Prod.swap_prod_mk]

lemma flip_flip {U : Set (Œ± √ó Œ±)} :
    (U·∂†À°)·∂†À° = U := by
  rw [flip, flip, ‚Üê preimage_comp, Prod.swap_swap_eq, preimage_id]

lemma flip_inter {U V : Set (Œ± √ó Œ±)} :
    (U ‚à© V)·∂†À° = U·∂†À° ‚à© V·∂†À° := preimage_inter

lemma flip_iInter {Œπ : Sort*} {U : Œπ ‚Üí Set (Œ± √ó Œ±)} :
    (‚ãÇ i, U i)·∂†À° = ‚ãÇ i, (U i)·∂†À° := preimage_iInter

lemma flip_biInter {Œπ : Type*} {s : Set Œπ} {U : Œπ ‚Üí Set (Œ± √ó Œ±)} :
    (‚ãÇ i ‚àà s, U i)·∂†À° = ‚ãÇ i ‚àà s, (U i)·∂†À° := preimage_iInter‚ÇÇ

lemma flip_union {U V : Set (Œ± √ó Œ±)} :
    (U ‚à™ V)·∂†À° = U·∂†À° ‚à™ V·∂†À° := preimage_union

lemma flip_iUnion {Œπ : Sort*} {U : Œπ ‚Üí Set (Œ± √ó Œ±)} :
    (‚ãÉ i, U i)·∂†À° = ‚ãÉ i, (U i)·∂†À° := preimage_iUnion

lemma flip_biUnion {Œπ : Type*} {s : Set Œπ} {U : Œπ ‚Üí Set (Œ± √ó Œ±)} :
    (‚ãÉ i ‚àà s, U i)·∂†À° = ‚ãÉ i ‚àà s, (U i)·∂†À° := preimage_iUnion‚ÇÇ

lemma flip_preimage {Œ≤ : Type*} {f : Œ≤ ‚Üí Œ±} {U : Set (Œ± √ó Œ±)} :
    ((Prod.map f f)‚Åª¬π' U)·∂†À° = (Prod.map f f)‚Åª¬π' U·∂†À° := by
  rw [flip, flip, ‚Üê preimage_comp, Prod.map_comp_swap f f, preimage_comp]

lemma flip_comp {U V : Set (Œ± √ó Œ±)} :
    (U ‚óã V)·∂†À° = V·∂†À° ‚óã U·∂†À° := by
  ext x
  simp only [flip, compRel, mem_preimage, mem_setOf_eq, Prod.swap_prod_mk, Prod.fst_swap,
    Prod.snd_swap]
  tauto

lemma isSymmetricRel_comp_flip_self (U : Set (Œ± √ó Œ±)) :
    IsSymmetricRel (U ‚óã U·∂†À°) := by
  rw [isSymmetricRel_iff, flip_comp, flip_flip]

lemma isSymmetricRel_flip_comp_self (U : Set (Œ± √ó Œ±)) :
    IsSymmetricRel (U·∂†À° ‚óã U) := by
  rw [isSymmetricRel_iff, flip_comp, flip_flip]

lemma ball_flip {x y : Œ±} {U : Set (Œ± √ó Œ±)} :
    y ‚àà ball x U ‚Üî x ‚àà ball y U·∂†À° := by
  rw [ball, ball, mem_preimage, mem_preimage]
  exact mem_flip

lemma idRel_flip :
    idRel·∂†À° = @idRel Œ± := by
  ext x
  rw [flip, mem_idRel, mem_preimage, mem_idRel, Prod.fst_swap, Prod.snd_swap]
  tauto

lemma flip_subset_flip {U V : Set (Œ± √ó Œ±)} :
    U·∂†À° ‚äÜ V·∂†À° ‚Üî U ‚äÜ V :=
  preimage_subset_preimage_iff fun x _ ‚Ü¶ ‚ü®Prod.swap x, Prod.swap_swap x‚ü©

lemma idRel_sub_flip {U : Set (Œ± √ó Œ±)} :
    idRel ‚äÜ U·∂†À° ‚Üî idRel ‚äÜ U := by
  rw [‚Üê idRel_flip, flip_subset_flip, idRel_flip]

lemma isOpen_flip [UniformSpace Œ±] {U : Set (Œ± √ó Œ±)} :
    IsOpen U·∂†À° ‚Üî IsOpen U := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ continuous_swap.isOpen_preimage U h‚ü©
  rw [‚Üê flip_flip (U := U)]
  exact continuous_swap.isOpen_preimage U·∂†À° h

lemma flip_mem_uniformity [UniformSpace Œ±] {U : Set (Œ± √ó Œ±)} :
    U·∂†À° ‚àà ùì§ Œ± ‚Üî U ‚àà ùì§ Œ± := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ UniformSpace.symm h‚ü©
  rw [‚Üê flip_flip (U := U)]
  exact UniformSpace.symm h

lemma comp_flip_mem_entourage [UniformSpace Œ±] {U : Set (Œ± √ó Œ±)} (h : U ‚àà ùì§ Œ±) :
    ‚àÉ V ‚àà ùì§ Œ±, V ‚óã V·∂†À° ‚äÜ U := by
  obtain ‚ü®V, V_uni, V_symm, V_U‚ü© := comp_symm_mem_uniformity_sets h
  exact ‚ü®V, V_uni, (isSymmetricRel_iff.1 V_symm).symm ‚ñ∏ V_U‚ü©








def thicken (s : Set Œ±) (U : Set (Œ± √ó Œ±)) :=
  ‚ãÉ x ‚àà s, ball x U

lemma thicken_def {s : Set Œ±} {U : Set (Œ± √ó Œ±)} {x : Œ±} :
    x ‚àà thicken s U ‚Üî ‚àÉ y ‚àà s, x ‚àà ball y U := by
  simp only [thicken, mem_iUnion, exists_prop]

lemma mem_thicken {s : Set Œ±} {U : Set (Œ± √ó Œ±)} {x y : Œ±} (hy : y ‚àà s) (h : x ‚àà ball y U) :
    x ‚àà thicken s U :=
  thicken_def.2 ‚ü®y, hy, h‚ü©

lemma thicken_mono_left {s t : Set Œ±} (h : s ‚äÜ t) (U : Set (Œ± √ó Œ±)) :
    thicken s U ‚äÜ thicken t U :=
  biUnion_subset_biUnion_left h

lemma thicken_mono_right (s : Set Œ±) {U V : Set (Œ± √ó Œ±)} (h : U ‚äÜ V) :
    thicken s U ‚äÜ thicken s V :=
  biUnion_mono (subset_refl s) (fun x _  ‚Ü¶ ball_mono h x)

@[simp]
lemma thicken_empty {U : Set (Œ± √ó Œ±)} :
    thicken ‚àÖ U = ‚àÖ :=
  biUnion_empty (fun x ‚Ü¶ ball x U)

@[simp]
lemma thicken_singleton (x : Œ±) (U : Set (Œ± √ó Œ±)) :
    thicken {x} U = ball x U :=
  biUnion_singleton x (fun y ‚Ü¶ ball y U)

lemma ball_sub_thicken {s : Set Œ±} (U : Set (Œ± √ó Œ±)) {x : Œ±} (h : x ‚àà s) :
    ball x U ‚äÜ thicken s U :=
  subset_biUnion_of_mem (u := fun y ‚Ü¶ ball y U) h

theorem thicken_idRel {s : Set Œ±} :
    thicken s idRel = s := by
  ext x
  simp only [thicken, ball, mem_iUnion, mem_preimage, mem_idRel, exists_prop, exists_eq_right]

lemma thicken_compRel {s : Set Œ±} {U V : Set (Œ± √ó Œ±)} :
    thicken (thicken s U) V = thicken s (U ‚óã V) := by
  apply subset_antisymm <;> intro x x_s
  ¬∑ obtain ‚ü®y, y_s, y_x‚ü© := thicken_def.1 x_s
    obtain ‚ü®z, z_s, z_y‚ü© := thicken_def.1 y_s
    exact mem_thicken z_s (prodMk_mem_compRel z_y y_x)
  ¬∑ obtain ‚ü®z, z_s, z_x‚ü© := thicken_def.1 x_s
    obtain ‚ü®y, z_y, y_x‚ü© := mem_compRel.1 z_x
    exact mem_thicken (mem_thicken z_s z_y) y_x

theorem self_subset_thicken  {s : Set Œ±} {U : Set (Œ± √ó Œ±)} (h : idRel ‚äÜ U) :
    s ‚äÜ thicken s U :=
  thicken_idRel.symm.trans_subset (thicken_mono_right s h)

lemma thicken_union {s t : Set Œ±} {U : Set (Œ± √ó Œ±)} :
    thicken (s ‚à™ t) U = (thicken s U) ‚à™ (thicken t U) := biUnion_union s t _

lemma thicken_iUnion {Œπ : Sort*} {s : Œπ ‚Üí Set Œ±} {U : Set (Œ± √ó Œ±)} :
    thicken (‚ãÉ i, s i) U = ‚ãÉ i, thicken (s i) U := biUnion_iUnion s _

lemma thicken_biUnion {Œ≤ : Type*} {s : Œ≤ ‚Üí Set Œ±} {t : Set Œ≤} {U : Set (Œ± √ó Œ±)} :
    thicken (‚ãÉ i ‚àà t, s i) U = ‚ãÉ i ‚àà t, thicken (s i) U := by
  rw [biUnion_eq_iUnion, biUnion_eq_iUnion]
  exact thicken_iUnion

lemma thicken_inter {s t : Set Œ±} {U : Set (Œ± √ó Œ±)} :
    thicken (s ‚à© t) U ‚äÜ (thicken s U) ‚à© (thicken t U) := by
  intro x x_st
  obtain ‚ü®y, y_st, x_y‚ü© := thicken_def.1 x_st
  exact ‚ü®thicken_def.2 ‚ü®y, y_st.1, x_y‚ü©, thicken_def.2 ‚ü®y, y_st.2, x_y‚ü©‚ü©

lemma thicken_iInter {Œπ : Sort*} {s : Œπ ‚Üí Set Œ±} {U : Set (Œ± √ó Œ±)} :
    thicken (‚ãÇ i, s i) U ‚äÜ ‚ãÇ i, thicken (s i) U := by
  refine fun x x_s ‚Ü¶ mem_iInter.2 fun i ‚Ü¶ ?_
  obtain ‚ü®y, y_s, x_y‚ü© := thicken_def.1 x_s
  exact thicken_def.2 ‚ü®y, (mem_iInter.1 y_s) i, x_y‚ü©

lemma thicken_biInter {Œ≤ : Type*} {s : Œ≤ ‚Üí Set Œ±} {t : Set Œ≤} {U : Set (Œ± √ó Œ±)} :
    thicken (‚ãÇ i ‚àà t, s i) U ‚äÜ ‚ãÇ i ‚àà t, thicken (s i) U := by
  refine fun x x_st ‚Ü¶ mem_iInter‚ÇÇ.2 fun i i_t ‚Ü¶ ?_
  obtain ‚ü®y, y_st, x_y‚ü© := thicken_def.1 x_st
  exact thicken_def.2 ‚ü®y, (mem_iInter‚ÇÇ.1 y_st) i i_t, x_y‚ü©

-- TODO : Version avec une base d'entourages.
lemma mem_closure_iff_thicken [UniformSpace Œ±] {s : Set Œ±} :
    closure s = ‚ãÇ U ‚àà ùì§ Œ±, thicken s U := by
  ext x
  rw [mem_closure_iff_ball, mem_iInter‚ÇÇ]
  apply Iff.intro <;> intro h U U_uni
  ¬∑ obtain ‚ü®y, y_x, y_s‚ü© := h (flip_mem_uniformity.2 U_uni)
    exact ball_sub_thicken U y_s (ball_flip.2 y_x)
  ¬∑ obtain ‚ü®y, y_s, y_x‚ü© := thicken_def.1 (h U·∂†À° (flip_mem_uniformity.2 U_uni))
    exact ‚ü®y, ball_flip.2 y_x, y_s‚ü©

lemma closure_subset_thicken [UniformSpace Œ±] {s : Set Œ±} {U : Set (Œ± √ó Œ±)} (h : U ‚àà ùì§ Œ±) :
    closure s ‚äÜ thicken s U := by
  rw [mem_closure_iff_thicken]
  exact biInter_subset_of_mem h

lemma closure_thicken [UniformSpace Œ±] {s : Set Œ±} {U : Set (Œ± √ó Œ±)} :
    closure (thicken s U) = ‚ãÇ V ‚àà ùì§ Œ±, thicken s (U ‚óã V) := by
  simp only [mem_closure_iff_thicken, thicken_compRel]

lemma isOpen_thicken [UniformSpace Œ±] {s : Set Œ±} {U : Set (Œ± √ó Œ±)} (h : IsOpen U) :
    IsOpen (thicken s U) :=
  isOpen_biUnion fun x _ ‚Ü¶ isOpen_ball x h

lemma thicken_closure_of_isOpen [UniformSpace Œ±] {s : Set Œ±} {U : Set (Œ± √ó Œ±)} (h : IsOpen U) :
    thicken (closure s) U = thicken s U := by
  refine subset_antisymm ?_ (thicken_mono_left subset_closure U)
  intro x x_s
  obtain ‚ü®y, y_s, y_x‚ü© := thicken_def.1 x_s
  rw [ball_flip] at y_x
  obtain ‚ü®z, z_x, z_s‚ü© := mem_closure_iff.1 y_s (ball x U·∂†À°) (isOpen_ball x (isOpen_flip.2 h)) y_x
  rw [‚Üê ball_flip] at z_x
  exact thicken_def.2 ‚ü®z, z_s, z_x‚ü©

lemma disjoint_thicken {s t : Set Œ±} {U V : Set (Œ± √ó Œ±)} :
    Disjoint (thicken s U) (thicken t V) ‚Üî Disjoint (thicken s (U ‚óã V·∂†À°)) t := by
  simp only [disjoint_iff_inter_eq_empty, eq_empty_iff_forall_not_mem]
  refine ‚ü®fun h y y_st ‚Ü¶ ?_, fun h z z_st ‚Ü¶ ?_‚ü©
  ¬∑ obtain ‚ü®x, x_s, y_x‚ü© := thicken_def.1 y_st.1
    obtain ‚ü®z, x_z, z_y‚ü© := mem_compRel.1 y_x
    exact h z ‚ü®thicken_def.2 ‚ü®x, x_s, x_z‚ü©, thicken_def.2 ‚ü®y, y_st.2, z_y‚ü©‚ü©
  ¬∑ obtain ‚ü®x, x_s, z_x‚ü© := thicken_def.1 z_st.1
    obtain ‚ü®y, y_t, z_y‚ü© := thicken_def.1 z_st.2
    apply h y ‚ü®thicken_def.2 ‚ü®x, x_s, mem_ball_comp z_x (ball_flip.1 z_y)‚ü©, y_t‚ü©



open scoped Topology
-- Alternative proof of Disjoint.exists_uniform_thickening.
-- TODO : Remove the TODO on Disjoint.exists_uniform_thickening.
lemma Disjoint.exists_uniform_thickening' [UniformSpace Œ±] {s t : Set Œ±} (hs : IsCompact s)
    (ht : IsClosed t) (hst : Disjoint s t) :
    ‚àÉ U ‚àà ùì§ Œ±, Disjoint (thicken s U) (thicken t U) := by
  have : t·∂ú ‚àà ùìùÀ¢ s := ht.isOpen_compl.mem_nhdsSet.mpr hst.le_compl_right
  obtain ‚ü®U, hU, hUAB‚ü© := (hs.nhdsSet_basis_uniformity (ùì§ Œ±).basis_sets).mem_iff.1 this
  obtain ‚ü®V, hV, hVU‚ü© := comp_flip_mem_entourage hU
  rw [subset_compl_iff_disjoint_left, id_eq, disjoint_comm, ‚Üê thicken] at hUAB
  exact ‚ü®V, hV, disjoint_thicken.2 (hUAB.mono_left (thicken_mono_right s hVU))‚ü©



end Thicken

end UniformSpace
