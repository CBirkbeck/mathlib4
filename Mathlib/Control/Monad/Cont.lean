/-
Copyright (c) 2019 Simon Hudon. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Simon Hudon
-/
import Mathlib.Control.Monad.Basic
import Mathlib.Control.Monad.Writer
import Mathlib.Init.Control.Lawful

#align_import control.monad.cont from "leanprover-community/mathlib"@"d6814c584384ddf2825ff038e868451a7c956f31"

/-!
# Continuation Monad

Monad encapsulating continuation passing programming style, similar to
Haskell's `Cont`, `ContT` and `MonadCont`:
<http://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Cont.html>
-/

universe u v w u‚ÇÄ u‚ÇÅ v‚ÇÄ v‚ÇÅ

structure MonadCont.Label (Œ± : Type w) (m : Type u ‚Üí Type v) (Œ≤ : Type u) where
  apply : Œ± ‚Üí m Œ≤
#align monad_cont.label MonadCont.Label

def MonadCont.goto {Œ± Œ≤} {m : Type u ‚Üí Type v} (f : MonadCont.Label Œ± m Œ≤) (x : Œ±) :=
  f.apply x
#align monad_cont.goto MonadCont.goto

class MonadCont (m : Type u ‚Üí Type v) where
  callCC : ‚àÄ {Œ± Œ≤}, (MonadCont.Label Œ± m Œ≤ ‚Üí m Œ±) ‚Üí m Œ±
#align monad_cont MonadCont

open MonadCont

class LawfulMonadCont (m : Type u ‚Üí Type v) [Monad m] [MonadCont m]
    extends LawfulMonad m : Prop where
  callCC_bind_right {Œ± œâ Œ≥} (cmd : m Œ±) (next : Label œâ m Œ≥ ‚Üí Œ± ‚Üí m œâ) :
    (callCC fun f => cmd >>= next f) = cmd >>= fun x => callCC fun f => next f x
  callCC_bind_left {Œ±} (Œ≤) (x : Œ±) (dead : Label Œ± m Œ≤ ‚Üí Œ≤ ‚Üí m Œ±) :
    (callCC fun f : Label Œ± m Œ≤ => goto f x >>= dead f) = pure x
  callCC_dummy {Œ± Œ≤} (dummy : m Œ±) : (callCC fun _ : Label Œ± m Œ≤ => dummy) = dummy
#align is_lawful_monad_cont LawfulMonadCont

export LawfulMonadCont (callCC_bind_right callCC_bind_left callCC_dummy)

def ContT (r : Type u) (m : Type u ‚Üí Type v) (Œ± : Type w) :=
  (Œ± ‚Üí m r) ‚Üí m r
#align cont_t ContT

@[reducible]
def Cont (r : Type u) (Œ± : Type w) :=
  ContT r id Œ±
#align cont Cont

namespace ContT

export MonadCont (Label goto)

variable {r : Type u} {m : Type u ‚Üí Type v} {Œ± Œ≤ Œ≥ œâ : Type w}

def run : ContT r m Œ± ‚Üí (Œ± ‚Üí m r) ‚Üí m r :=
  id
#align cont_t.run ContT.run

def map (f : m r ‚Üí m r) (x : ContT r m Œ±) : ContT r m Œ± :=
  f ‚àò x
#align cont_t.map ContT.map

theorem run_contT_map_contT (f : m r ‚Üí m r) (x : ContT r m Œ±) : run (map f x) = f ‚àò run x :=
  rfl
#align cont_t.run_cont_t_map_cont_t ContT.run_contT_map_contT

def withContT (f : (Œ≤ ‚Üí m r) ‚Üí Œ± ‚Üí m r) (x : ContT r m Œ±) : ContT r m Œ≤ := fun g => x <| f g
#align cont_t.with_cont_t ContT.withContT

theorem run_withContT (f : (Œ≤ ‚Üí m r) ‚Üí Œ± ‚Üí m r) (x : ContT r m Œ±) :
    run (withContT f x) = run x ‚àò f :=
  rfl
#align cont_t.run_with_cont_t ContT.run_withContT

@[ext]
protected theorem ext {x y : ContT r m Œ±} (h : ‚àÄ f, x.run f = y.run f) : x = y := by
  unfold ContT; ext; apply h
  -- ‚ä¢ x = y
                -- ‚ä¢ x x‚úù = y x‚úù
                     -- üéâ no goals
#align cont_t.ext ContT.ext

instance : Monad (ContT r m) where
  pure x f := f x
  bind x f g := x fun i => f i g

instance : LawfulMonad (ContT r m) := LawfulMonad.mk'
  (id_map := by intros; rfl)
                -- ‚ä¢ id <$> x‚úù = x‚úù
                        -- üéâ no goals
  (pure_bind := by intros; ext; rfl)
                   -- ‚ä¢ pure x‚úù >>= f‚úù = f‚úù x‚úù
                           -- ‚ä¢ run (pure x‚úù >>= f‚úù¬π) f‚úù = run (f‚úù¬π x‚úù) f‚úù
                                -- üéâ no goals
  (bind_assoc := by intros; ext; rfl)
                    -- ‚ä¢ x‚úù >>= f‚úù >>= g‚úù = x‚úù >>= fun x => f‚úù x >>= g‚úù
                            -- ‚ä¢ run (x‚úù >>= f‚úù¬π >>= g‚úù) f‚úù = run (x‚úù >>= fun x => f‚úù¬π x >>= g‚úù) f‚úù
                                 -- üéâ no goals

def monadLift [Monad m] {Œ±} : m Œ± ‚Üí ContT r m Œ± := fun x f => x >>= f
#align cont_t.monad_lift ContT.monadLift

instance [Monad m] : MonadLift m (ContT r m) where
  monadLift := ContT.monadLift

theorem monadLift_bind [Monad m] [LawfulMonad m] {Œ± Œ≤} (x : m Œ±) (f : Œ± ‚Üí m Œ≤) :
    (monadLift (x >>= f) : ContT r m Œ≤) = monadLift x >>= monadLift ‚àò f := by
  ext
  -- ‚ä¢ run (monadLift (x >>= f)) f‚úù = run (monadLift x >>= monadLift ‚àò f) f‚úù
  simp only [monadLift, MonadLift.monadLift, (¬∑ ‚àò ¬∑), (¬∑ >>= ¬∑), bind_assoc, id.def, run,
    ContT.monadLift]
#align cont_t.monad_lift_bind ContT.monadLift_bind

instance : MonadCont (ContT r m) where
  callCC f g := f ‚ü®fun x _ => g x‚ü© g

instance : LawfulMonadCont (ContT r m) where
  callCC_bind_right := by intros; ext; rfl
                          -- ‚ä¢ (callCC fun f => cmd‚úù >>= next‚úù f) = do
                                  -- ‚ä¢ run (callCC fun f => cmd‚úù >>= next‚úù f) f‚úù =
                                       -- üéâ no goals
  callCC_bind_left := by intros; ext; rfl
                         -- ‚ä¢ (callCC fun f => goto f x‚úù >>= dead‚úù f) = pure x‚úù
                                 -- ‚ä¢ run (callCC fun f => goto f x‚úù >>= dead‚úù f) f‚úù = run (pure x‚úù) f‚úù
                                      -- üéâ no goals
  callCC_dummy := by intros; ext; rfl
                     -- ‚ä¢ (callCC fun x => dummy‚úù) = dummy‚úù
                             -- ‚ä¢ run (callCC fun x => dummy‚úù) f‚úù = run dummy‚úù f‚úù
                                  -- üéâ no goals

instance (Œµ) [MonadExcept Œµ m] : MonadExcept Œµ (ContT r m) where
  throw e _ := throw e
  tryCatch act h f := tryCatch (act f) fun e => h e f

end ContT

variable {m : Type u ‚Üí Type v} [Monad m]

def ExceptT.mkLabel {Œ± Œ≤ Œµ} : Label (Except.{u, u} Œµ Œ±) m Œ≤ ‚Üí Label Œ± (ExceptT Œµ m) Œ≤
  | ‚ü®f‚ü© => ‚ü®fun a => monadLift <| f (Except.ok a)‚ü©
#align except_t.mk_label ExceptT‚Çì.mkLabel

theorem ExceptT.goto_mkLabel {Œ± Œ≤ Œµ : Type _} (x : Label (Except.{u, u} Œµ Œ±) m Œ≤) (i : Œ±) :
    goto (ExceptT.mkLabel x) i = ExceptT.mk (Except.ok <$> goto x (Except.ok i)) := by
  cases x; rfl
  -- ‚ä¢ goto (mkLabel { apply := apply‚úù }) i = mk (Except.ok <$> goto { apply := app ‚Ä¶
           -- üéâ no goals
#align except_t.goto_mk_label ExceptT‚Çì.goto_mkLabel

nonrec def ExceptT.callCC {Œµ} [MonadCont m] {Œ± Œ≤ : Type _}
    (f : Label Œ± (ExceptT Œµ m) Œ≤ ‚Üí ExceptT Œµ m Œ±) : ExceptT Œµ m Œ± :=
  ExceptT.mk (callCC fun x : Label _ m Œ≤ => ExceptT.run <| f (ExceptT.mkLabel x))
#align except_t.call_cc ExceptT‚Çì.callCC

instance {Œµ} [MonadCont m] : MonadCont (ExceptT Œµ m) where
  callCC := ExceptT.callCC

instance {Œµ} [MonadCont m] [LawfulMonadCont m] : LawfulMonadCont (ExceptT Œµ m) where
  callCC_bind_right := by
    intros; simp [callCC, ExceptT.callCC, callCC_bind_right]; ext
    -- ‚ä¢ (callCC fun f => cmd‚úù >>= next‚úù f) = do
            -- ‚ä¢ (ExceptT.mk do
                                                              -- ‚ä¢ ExceptT.run
    dsimp
    -- ‚ä¢ (do
    congr with ‚ü®‚ü© <;> simp [ExceptT.bindCont, @callCC_dummy m _]
                      -- üéâ no goals
                      -- üéâ no goals
  callCC_bind_left := by
    intros
    -- ‚ä¢ (callCC fun f => goto f x‚úù >>= dead‚úù f) = pure x‚úù
    simp [callCC, ExceptT.callCC, callCC_bind_right, ExceptT.goto_mkLabel, map_eq_bind_pure_comp,
      bind_assoc, @callCC_bind_left m _, Function.comp]
    ext; rfl
    -- ‚ä¢ ExceptT.run (ExceptT.mk (pure (Except.ok x‚úù))) = ExceptT.run (pure x‚úù)
         -- üéâ no goals
  callCC_dummy := by intros; simp [callCC, ExceptT.callCC, @callCC_dummy m _]; ext; rfl
                     -- ‚ä¢ (callCC fun x => dummy‚úù) = dummy‚úù
                             -- ‚ä¢ ExceptT.mk (ExceptT.run dummy‚úù) = dummy‚úù
                                                                               -- ‚ä¢ ExceptT.run (ExceptT.mk (ExceptT.run dummy‚úù)) = ExceptT.run dummy‚úù
                                                                                    -- üéâ no goals

def OptionT.mkLabel {Œ± Œ≤} : Label (Option.{u} Œ±) m Œ≤ ‚Üí Label Œ± (OptionT m) Œ≤
  | ‚ü®f‚ü© => ‚ü®fun a => monadLift <| f (some a)‚ü©
#align option_t.mk_label OptionT‚Çì.mkLabel

theorem OptionT.goto_mkLabel {Œ± Œ≤ : Type _} (x : Label (Option.{u} Œ±) m Œ≤) (i : Œ±) :
    goto (OptionT.mkLabel x) i = OptionT.mk (goto x (some i) >>= fun a => pure (some a)) :=
  rfl
#align option_t.goto_mk_label OptionT‚Çì.goto_mkLabel

nonrec def OptionT.callCC [MonadCont m] {Œ± Œ≤ : Type _} (f : Label Œ± (OptionT m) Œ≤ ‚Üí OptionT m Œ±) :
    OptionT m Œ± :=
  OptionT.mk (callCC fun x : Label _ m Œ≤ => OptionT.run <| f (OptionT.mkLabel x) : m (Option Œ±))
#align option_t.call_cc OptionT‚Çì.callCC

instance [MonadCont m] : MonadCont (OptionT m) where
  callCC := OptionT.callCC

instance [MonadCont m] [LawfulMonadCont m] : LawfulMonadCont (OptionT m) where
  callCC_bind_right := by
    intros; simp [callCC, OptionT.callCC, callCC_bind_right]; ext
    -- ‚ä¢ (callCC fun f => cmd‚úù >>= next‚úù f) = do
            -- ‚ä¢ (OptionT.mk do
                                                              -- ‚ä¢ OptionT.run
    dsimp
    -- ‚ä¢ (do
    congr with ‚ü®‚ü© <;> simp [@callCC_dummy m _]
                      -- üéâ no goals
                      -- üéâ no goals
  callCC_bind_left := by
    intros;
    -- ‚ä¢ (callCC fun f => goto f x‚úù >>= dead‚úù f) = pure x‚úù
    simp [callCC, OptionT.callCC, callCC_bind_right, OptionT.goto_mkLabel, map_eq_bind_pure_comp,
      bind_assoc, @callCC_bind_left m _, Function.comp]
    ext; rfl
    -- ‚ä¢ OptionT.run (OptionT.mk (pure (some x‚úù))) = OptionT.run (pure x‚úù)
         -- üéâ no goals
  callCC_dummy := by intros; simp [callCC, OptionT.callCC, @callCC_dummy m _]; ext; rfl
                     -- ‚ä¢ (callCC fun x => dummy‚úù) = dummy‚úù
                             -- ‚ä¢ OptionT.mk (OptionT.run dummy‚úù) = dummy‚úù
                                                                               -- ‚ä¢ OptionT.run (OptionT.mk (OptionT.run dummy‚úù)) = OptionT.run dummy‚úù
                                                                                    -- üéâ no goals

/- Porting note: In Lean 3, `One œâ` is required for `MonadLift (WriterT œâ m)`. In Lean 4,
                 `EmptyCollection œâ` or `Monoid œâ` is required. So we give definitions for the both
                 instances. -/

def WriterT.mkLabel {Œ± Œ≤ œâ} [EmptyCollection œâ] : Label (Œ± √ó œâ) m Œ≤ ‚Üí Label Œ± (WriterT œâ m) Œ≤
  | ‚ü®f‚ü© => ‚ü®fun a => monadLift <| f (a, ‚àÖ)‚ü©

def WriterT.mkLabel' {Œ± Œ≤ œâ} [Monoid œâ] : Label (Œ± √ó œâ) m Œ≤ ‚Üí Label Œ± (WriterT œâ m) Œ≤
  | ‚ü®f‚ü© => ‚ü®fun a => monadLift <| f (a, 1)‚ü©
#align writer_t.mk_label WriterT‚Çì.mkLabel'

theorem WriterT.goto_mkLabel {Œ± Œ≤ œâ : Type _} [EmptyCollection œâ] (x : Label (Œ± √ó œâ) m Œ≤) (i : Œ±) :
    goto (WriterT.mkLabel x) i = monadLift (goto x (i, ‚àÖ)) := by cases x; rfl
                                                                 -- ‚ä¢ goto (mkLabel { apply := apply‚úù }) i = monadLift (goto { apply := apply‚úù } ( ‚Ä¶
                                                                          -- üéâ no goals

theorem WriterT.goto_mkLabel' {Œ± Œ≤ œâ : Type _} [Monoid œâ] (x : Label (Œ± √ó œâ) m Œ≤) (i : Œ±) :
    goto (WriterT.mkLabel' x) i = monadLift (goto x (i, 1)) := by cases x; rfl
                                                                  -- ‚ä¢ goto (mkLabel' { apply := apply‚úù }) i = monadLift (goto { apply := apply‚úù }  ‚Ä¶
                                                                           -- üéâ no goals
#align writer_t.goto_mk_label WriterT‚Çì.goto_mkLabel'

nonrec def WriterT.callCC [MonadCont m] {Œ± Œ≤ œâ : Type _} [EmptyCollection œâ]
    (f : Label Œ± (WriterT œâ m) Œ≤ ‚Üí WriterT œâ m Œ±) : WriterT œâ m Œ± :=
  WriterT.mk <| callCC (WriterT.run ‚àò f ‚àò WriterT.mkLabel : Label (Œ± √ó œâ) m Œ≤ ‚Üí m (Œ± √ó œâ))

def WriterT.callCC' [MonadCont m] {Œ± Œ≤ œâ : Type _} [Monoid œâ]
    (f : Label Œ± (WriterT œâ m) Œ≤ ‚Üí WriterT œâ m Œ±) : WriterT œâ m Œ± :=
  WriterT.mk <|
    MonadCont.callCC (WriterT.run ‚àò f ‚àò WriterT.mkLabel' : Label (Œ± √ó œâ) m Œ≤ ‚Üí m (Œ± √ó œâ))
#align writer_t.call_cc WriterT‚Çì.callCC'

instance (œâ) [Monad m] [EmptyCollection œâ] [MonadCont m] : MonadCont (WriterT œâ m) where
  callCC := WriterT.callCC

instance (œâ) [Monad m] [Monoid œâ] [MonadCont m] : MonadCont (WriterT œâ m) where
  callCC := WriterT.callCC'

def StateT.mkLabel {Œ± Œ≤ œÉ : Type u} : Label (Œ± √ó œÉ) m (Œ≤ √ó œÉ) ‚Üí Label Œ± (StateT œÉ m) Œ≤
  | ‚ü®f‚ü© => ‚ü®fun a => StateT.mk (fun s => f (a, s))‚ü©
#align state_t.mk_label StateT‚Çì.mkLabel

theorem StateT.goto_mkLabel {Œ± Œ≤ œÉ : Type u} (x : Label (Œ± √ó œÉ) m (Œ≤ √ó œÉ)) (i : Œ±) :
    goto (StateT.mkLabel x) i = StateT.mk (fun s => goto x (i, s)) := by cases x; rfl
                                                                         -- ‚ä¢ goto (mkLabel { apply := apply‚úù }) i = StateT.mk fun s => goto { apply := ap ‚Ä¶
                                                                                  -- üéâ no goals
#align state_t.goto_mk_label StateT‚Çì.goto_mkLabel

nonrec def StateT.callCC {œÉ} [MonadCont m] {Œ± Œ≤ : Type _}
    (f : Label Œ± (StateT œÉ m) Œ≤ ‚Üí StateT œÉ m Œ±) : StateT œÉ m Œ± :=
  StateT.mk (fun r => callCC fun f' => (f <| StateT.mkLabel f').run r)
#align state_t.call_cc StateT‚Çì.callCC

instance {œÉ} [MonadCont m] : MonadCont (StateT œÉ m) where
  callCC := StateT.callCC

instance {œÉ} [MonadCont m] [LawfulMonadCont m] : LawfulMonadCont (StateT œÉ m) where
  callCC_bind_right := by
    intros
    -- ‚ä¢ (callCC fun f => cmd‚úù >>= next‚úù f) = do
    simp [callCC, StateT.callCC, callCC_bind_right]; ext; rfl
    -- ‚ä¢ (StateT.mk fun r => do
                                                     -- ‚ä¢ StateT.run
                                                          -- üéâ no goals
  callCC_bind_left := by
    intros;
    -- ‚ä¢ (callCC fun f => goto f x‚úù >>= dead‚úù f) = pure x‚úù
    simp [callCC, StateT.callCC, callCC_bind_left, StateT.goto_mkLabel]; ext; rfl
    -- ‚ä¢ (StateT.mk fun r => pure (x‚úù, r)) = pure x‚úù
                                                                         -- ‚ä¢ StateT.run (StateT.mk fun r => pure (x‚úù, r)) s‚úù = StateT.run (pure x‚úù) s‚úù
                                                                              -- üéâ no goals
  callCC_dummy := by
    intros;
    -- ‚ä¢ (callCC fun x => dummy‚úù) = dummy‚úù
    simp [callCC, StateT.callCC, callCC_bind_right, @callCC_dummy m _]
    -- ‚ä¢ (StateT.mk fun r => StateT.run dummy‚úù r) = dummy‚úù
    ext; rfl
    -- ‚ä¢ StateT.run (StateT.mk fun r => StateT.run dummy‚úù r) s‚úù = StateT.run dummy‚úù s‚úù
         -- üéâ no goals

def ReaderT.mkLabel {Œ± Œ≤} (œÅ) : Label Œ± m Œ≤ ‚Üí Label Œ± (ReaderT œÅ m) Œ≤
  | ‚ü®f‚ü© => ‚ü®monadLift ‚àò f‚ü©
#align reader_t.mk_label ReaderT‚Çì.mkLabel

theorem ReaderT.goto_mkLabel {Œ± œÅ Œ≤} (x : Label Œ± m Œ≤) (i : Œ±) :
    goto (ReaderT.mkLabel œÅ x) i = monadLift (goto x i) := by cases x; rfl
                                                              -- ‚ä¢ goto (mkLabel œÅ { apply := apply‚úù }) i = monadLift (goto { apply := apply‚úù } ‚Ä¶
                                                                       -- üéâ no goals
#align reader_t.goto_mk_label ReaderT‚Çì.goto_mkLabel

nonrec def ReaderT.callCC {Œµ} [MonadCont m] {Œ± Œ≤ : Type _}
    (f : Label Œ± (ReaderT Œµ m) Œ≤ ‚Üí ReaderT Œµ m Œ±) : ReaderT Œµ m Œ± :=
  ReaderT.mk (fun r => callCC fun f' => (f <| ReaderT.mkLabel _ f').run r)
#align reader_t.call_cc ReaderT‚Çì.callCC

instance {œÅ} [MonadCont m] : MonadCont (ReaderT œÅ m) where
  callCC := ReaderT.callCC

instance {œÅ} [MonadCont m] [LawfulMonadCont m] : LawfulMonadCont (ReaderT œÅ m) where
  callCC_bind_right := by intros; simp [callCC, ReaderT.callCC, callCC_bind_right]; ext; rfl
                          -- ‚ä¢ (callCC fun f => cmd‚úù >>= next‚úù f) = do
                                  -- ‚ä¢ (ReaderT.mk fun r => do
                                                                                    -- ‚ä¢ ReaderT.run
                                                                                         -- üéâ no goals
  callCC_bind_left := by
    intros; simp [callCC, ReaderT.callCC, callCC_bind_left, ReaderT.goto_mkLabel]
    -- ‚ä¢ (callCC fun f => goto f x‚úù >>= dead‚úù f) = pure x‚úù
            -- ‚ä¢ (ReaderT.mk fun r => pure x‚úù) = pure x‚úù
    ext; rfl
    -- ‚ä¢ ReaderT.run (ReaderT.mk fun r => pure x‚úù) ctx‚úù = ReaderT.run (pure x‚úù) ctx‚úù
         -- üéâ no goals
  callCC_dummy := by intros; simp [callCC, ReaderT.callCC, @callCC_dummy m _]; ext; rfl
                     -- ‚ä¢ (callCC fun x => dummy‚úù) = dummy‚úù
                             -- ‚ä¢ (ReaderT.mk fun r => ReaderT.run dummy‚úù r) = dummy‚úù
                                                                               -- ‚ä¢ ReaderT.run (ReaderT.mk fun r => ReaderT.run dummy‚úù r) ctx‚úù = ReaderT.run du ‚Ä¶
                                                                                    -- üéâ no goals

/-- reduce the equivalence between two continuation passing monads to the equivalence between
their underlying monad -/
def ContT.equiv {m‚ÇÅ : Type u‚ÇÄ ‚Üí Type v‚ÇÄ} {m‚ÇÇ : Type u‚ÇÅ ‚Üí Type v‚ÇÅ} {Œ±‚ÇÅ r‚ÇÅ : Type u‚ÇÄ}
    {Œ±‚ÇÇ r‚ÇÇ : Type u‚ÇÅ} (F : m‚ÇÅ r‚ÇÅ ‚âÉ m‚ÇÇ r‚ÇÇ) (G : Œ±‚ÇÅ ‚âÉ Œ±‚ÇÇ) : ContT r‚ÇÅ m‚ÇÅ Œ±‚ÇÅ ‚âÉ ContT r‚ÇÇ m‚ÇÇ Œ±‚ÇÇ where
  toFun f r := F <| f fun x => F.symm <| r <| G x
  invFun f r := F.symm <| f fun x => F <| r <| G.symm x
  left_inv f := by funext r; simp
                   -- ‚ä¢ (fun f r => ‚ÜëF.symm (f fun x => ‚ÜëF (r (‚ÜëG.symm x)))) ((fun f r => ‚ÜëF (f fun  ‚Ä¶
                             -- üéâ no goals
  right_inv f := by funext r; simp
                    -- ‚ä¢ (fun f r => ‚ÜëF (f fun x => ‚ÜëF.symm (r (‚ÜëG x)))) ((fun f r => ‚ÜëF.symm (f fun  ‚Ä¶
                              -- üéâ no goals
#align cont_t.equiv ContT.equiv
