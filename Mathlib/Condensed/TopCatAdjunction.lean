import Mathlib.Condensed.TopComparison

universe u

open Condensed CondensedSet CategoryTheory

attribute [local instance] ConcreteCategory.instFunLike

variable (X : CondensedSet.{u})

namespace CondensedSet

private def _root_.CompHaus.const (S : CompHaus.{u}) (s : S) : CompHaus.of PUnit.{u+1} ‚ü∂ S :=
  ContinuousMap.const _ s

private def coinducingCoprod :
    (Œ£ (i : (S : CompHaus.{u}) √ó X.val.obj ‚ü®S‚ü©), i.fst) ‚Üí X.val.obj ‚ü®CompHaus.of PUnit‚ü© :=
  fun ‚ü®‚ü®S, i‚ü©, s‚ü© ‚Ü¶ X.val.map (S.const s).op i

instance : TopologicalSpace (X.val.obj ‚ü®CompHaus.of PUnit‚ü©) :=
  TopologicalSpace.coinduced (coinducingCoprod X) inferInstance

def toTopCat : TopCat.{u+1} := TopCat.of (X.val.obj ‚ü®CompHaus.of PUnit‚ü©)

variable {X} {Y : CondensedSet} (f : X ‚ü∂ Y)

@[simps]
def toTopCatMap : X.toTopCat ‚ü∂ Y.toTopCat where
  toFun := f.val.app ‚ü®CompHaus.of PUnit‚ü©
  continuous_toFun := by
    rw [continuous_coinduced_dom]
    apply continuous_sigma
    intro ‚ü®S, x‚ü©
    simp only [Function.comp_apply, coinducingCoprod]
    have : (fun (a : S) ‚Ü¶ f.val.app ‚ü®CompHaus.of PUnit‚ü© (X.val.map (S.const a).op x)) =
        (fun (a : S) ‚Ü¶ Y.val.map (S.const a).op (f.val.app ‚ü®S‚ü© x)) :=
      funext fun a ‚Ü¶ NatTrans.naturality_apply f.val (S.const a).op x
    rw [this]
    suffices ‚àÄ (i : (T : CompHaus.{u}) √ó Y.val.obj ‚ü®T‚ü©),
        Continuous (fun (a : i.fst) ‚Ü¶ Y.coinducingCoprod ‚ü®i, a‚ü©) from this ‚ü®_, _‚ü©
    rw [‚Üê continuous_sigma_iff]
    apply continuous_coinduced_rng

end CondensedSet

@[simps]
def condensedSetToTopCat : CondensedSet.{u} ‚•§ TopCat.{u+1} where
  obj X := X.toTopCat
  map f := toTopCatMap f

namespace CondensedSet

def topCatAdjunctionCounit (X : TopCat.{u+1}) : X.toCondensedSet.toTopCat ‚ü∂ X where
  toFun x := x.1 PUnit.unit
  continuous_toFun := by
    rw [continuous_coinduced_dom]
    continuity

lemma topCatAdjunctionCounit_bijective (X : TopCat.{u+1}) :
    Function.Bijective (topCatAdjunctionCounit X) := sorry

def topCatAdjunctionUnit (X : CondensedSet.{u}) : X ‚ü∂ X.toTopCat.toCondensedSet where
  val := {
    app := fun S x ‚Ü¶ {
      toFun := fun s ‚Ü¶ X.val.map (S.unop.const s).op x
      continuous_toFun := by
        suffices ‚àÄ (i : (T : CompHaus.{u}) √ó X.val.obj ‚ü®T‚ü©),
          Continuous (fun (a : i.fst) ‚Ü¶ X.coinducingCoprod ‚ü®i, a‚ü©) from this ‚ü®_, _‚ü©
        rw [‚Üê continuous_sigma_iff]
        apply continuous_coinduced_rng }
    naturality := fun _ _ _ ‚Ü¶ by
      ext
      simp only [types_comp_apply, ContinuousMap.coe_mk, TopCat.toCondensedSet_val_map,
        ContinuousMap.comp_apply, ‚Üê FunctorToTypes.map_comp_apply]
      rfl }

open Sheaf

@[simp]
lemma id_val (X : CondensedSet.{u}) : (ùüô X : X ‚ü∂ X).val = ùüô _ := rfl

@[simp]
lemma comp_val {X Y Z : CondensedSet.{u}} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  (f ‚â´ g).val = f.val ‚â´ g.val := rfl

noncomputable def topCatAdjunction : condensedSetToTopCat.{u} ‚ä£ topCatToCondensedSet :=
  Adjunction.mkOfUnitCounit {
    unit := {
      app := topCatAdjunctionUnit
      naturality := by
        intro X Y f
        -- shouldn't `ext`¬†just do the following?
        apply Sheaf.hom_ext; ext S a; apply ContinuousMap.ext; intro x
        -- `simpa using (NatTrans.naturality_apply f.val _ _).symm` doesn't work, and neither
        -- does rewriting using `NatTrans.naturality_apply` (not even with `erw`). What's going on?
        simp? says
          simp only [condensedSetToTopCat_obj, compHausToTop_obj, Functor.id_obj, Functor.comp_obj,
            topCatToCondensedSet_obj, Functor.id_map, comp_val, FunctorToTypes.comp,
            Functor.comp_map, condensedSetToTopCat_map, topCatToCondensedSet_map_val_app,
            ContinuousMap.comp_apply, toTopCatMap_apply]
        exact (NatTrans.naturality_apply f.val _ _).symm }
    counit := { app := topCatAdjunctionCounit }
    left_triangle := by
      ext Y
      change Y.val.map (ùüô _) _ = _
      simp }

instance (X : TopCat) : Epi (topCatAdjunction.counit.app X) := by
  rw [TopCat.epi_iff_surjective]
  exact (topCatAdjunctionCounit_bijective _).2

instance : topCatToCondensedSet.Faithful := topCatAdjunction.faithful_R_of_epi_counit_app

end CondensedSet
