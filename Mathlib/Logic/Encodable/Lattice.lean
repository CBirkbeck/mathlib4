/-
Copyright (c) 2020 Floris van Doorn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Floris van Doorn
-/
import Mathlib.Logic.Encodable.Basic
import Mathlib.Logic.Pairwise

#align_import logic.encodable.lattice from "leanprover-community/mathlib"@"9003f28797c0664a49e4179487267c494477d853"

/-!
# Lattice operations on encodable types

Lemmas about lattice and set operations on encodable types

## Implementation Notes

This is a separate file, to avoid unnecessary imports in basic files.

Previously some of these results were in the `MeasureTheory` folder.
-/

open Set

namespace Encodable

variable {Î± : Type*} {Î² : Type*} [Encodable Î²]

theorem iSup_decodeâ‚‚ [CompleteLattice Î±] (f : Î² â†’ Î±) :
    â¨† (i : â„•) (b âˆˆ decodeâ‚‚ Î² i), f b = (â¨† b, f b) := by
  rw [iSup_comm]
  -- âŠ¢ â¨† (j : Î²) (i : â„•) (_ : j âˆˆ decodeâ‚‚ Î² i), f j = â¨† (b : Î²), f b
  simp only [mem_decodeâ‚‚, iSup_iSup_eq_right]
  -- ðŸŽ‰ no goals
#align encodable.supr_decodeâ‚‚ Encodable.iSup_decodeâ‚‚

theorem iUnion_decodeâ‚‚ (f : Î² â†’ Set Î±) : â‹ƒ (i : â„•) (b âˆˆ decodeâ‚‚ Î² i), f b = â‹ƒ b, f b :=
  iSup_decodeâ‚‚ f
#align encodable.Union_decodeâ‚‚ Encodable.iUnion_decodeâ‚‚

/- Porting note: `@[elab_as_elim]` gives `unexpected eliminator resulting type`. -/
--@[elab_as_elim]
theorem iUnion_decodeâ‚‚_cases {f : Î² â†’ Set Î±} {C : Set Î± â†’ Prop} (H0 : C âˆ…) (H1 : âˆ€ b, C (f b)) {n} :
    C (â‹ƒ b âˆˆ decodeâ‚‚ Î² n, f b) :=
  match decodeâ‚‚ Î² n with
  | none => by
    simp
    -- âŠ¢ C âˆ…
    apply H0
    -- ðŸŽ‰ no goals
  | some b => by
    convert H1 b
    -- âŠ¢ â‹ƒ (b_1 : Î²) (_ : b_1 âˆˆ some b), f b_1 = f b
    simp [ext_iff]
    -- ðŸŽ‰ no goals
#align encodable.Union_decodeâ‚‚_cases Encodable.iUnion_decodeâ‚‚_cases

theorem iUnion_decodeâ‚‚_disjoint_on {f : Î² â†’ Set Î±} (hd : Pairwise (Disjoint on f)) :
    Pairwise (Disjoint on fun i => â‹ƒ b âˆˆ decodeâ‚‚ Î² i, f b) := by
  rintro i j ij
  -- âŠ¢ (Disjoint on fun i => â‹ƒ (b : Î²) (_ : b âˆˆ decodeâ‚‚ Î² i), f b) i j
  refine' disjoint_left.mpr fun x => _
  -- âŠ¢ x âˆˆ (fun i => â‹ƒ (b : Î²) (_ : b âˆˆ decodeâ‚‚ Î² i), f b) i â†’ Â¬x âˆˆ (fun i => â‹ƒ (b  â€¦
  suffices âˆ€ a, encode a = i â†’ x âˆˆ f a â†’ âˆ€ b, encode b = j â†’ x âˆ‰ f b by simpa [decodeâ‚‚_eq_some]
  -- âŠ¢ âˆ€ (a : Î²), encode a = i â†’ x âˆˆ f a â†’ âˆ€ (b : Î²), encode b = j â†’ Â¬x âˆˆ f b
  rintro a rfl ha b rfl hb
  -- âŠ¢ False
  exact (hd (mt (congr_arg encode) ij)).le_bot âŸ¨ha, hbâŸ©
  -- ðŸŽ‰ no goals
#align encodable.Union_decodeâ‚‚_disjoint_on Encodable.iUnion_decodeâ‚‚_disjoint_on

end Encodable
