/-
Copyright (c) 2024 Adam Topaz. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Adam Topaz
-/
import Mathlib.AlgebraicGeometry.OpenImmersion
import Mathlib.AlgebraicGeometry.Gluing
import Mathlib.AlgebraicGeometry.GammaSpecAdjunction

/-!

# The functor of points

Given a scheme `X`, the functor of points associated to `X` is the functor
from the category of commutative rings to types sending `R` to
`X(R) = Hom(Spec R, X)`.

This is of course functorial in `X` as well, providing a functor
`Scheme ‚•§ CommRingCat ‚•§ Type`.

We construct this functor in this file. It turns out that this functor is fully faithful,
which we also prove in this file.

## Definitions:

- Given `X : Scheme`, `X.functorOfPoints` is its associated functor of points.
- `schemeToFunctor` is the functor `Scheme ‚•§ CommRingCat ‚•§ Type` (with suitable universes).
- `schemeToFunctor` is provided with `Full` and `Faithful` instances.

## Projects

- Notation for `X.functorOfPoints`.
- `X.functorOfPoints` is a Zariski sheaf for any `X : Scheme`.
- Characterize the essential image of `schemeToFunctorOfPoints`.

-/

noncomputable section

namespace AlgebraicGeometry

universe v u

open CategoryTheory


/-- The functor of points associated to a scheme. -/
@[simps! obj map]
def Scheme.functorOfPoints (X : Scheme.{u}) : CommRingCat.{u} ‚•§ Type u :=
  Spec.rightOp ‚ãô yoneda.obj X

/-- A morphism of schemes induces a morphism on the functors of points. -/
@[simps! app]
def Scheme.mapFunctorOfPoints {X Y : Scheme.{u}} (f : X ‚ü∂ Y) :
    X.functorOfPoints ‚ü∂ Y.functorOfPoints :=
  whiskerLeft _ <| yoneda.map f

@[simp]
lemma Scheme.mapFunctorOfPoints_id (X : Scheme.{u}) :
    mapFunctorOfPoints (ùüô X) = ùüô _ :=
  whiskerLeft_id _

@[simp]
lemma Scheme.mapFunctorOfPoints_comp {X Y Z : Scheme.{u}} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    mapFunctorOfPoints (f ‚â´ g) = mapFunctorOfPoints f ‚â´ mapFunctorOfPoints g :=
  by simp [mapFunctorOfPoints]

/-- The "functor of points" functor, which sends `X` to `X.functorOfPoints` on objects
and `f` to `Scheme.mapFunctorOfPoints f` on morphisms. -/
@[simps]
def schemeToFunctor : Scheme.{u} ‚•§ CommRingCat.{u} ‚•§ Type u where
  obj X := X.functorOfPoints
  map f := Scheme.mapFunctorOfPoints f

instance faithfulFunctorOfPoints : Faithful schemeToFunctor where
  map_injective := by
    intro X Y f g h
    let ùì§ := X.affineOpenCover
    apply ùì§.openCover.hom_ext
    intro j
    exact congr_arg (fun e => e.app (ùì§.obj j) (ùì§.map j)) h

/-- IMPLEMENTATION DETAIL: This is used to show the fullness of `schemeToFunctor`. -/
def homOfFunctorOfPoints {X Y : Scheme.{u}} (f : X.functorOfPoints ‚ü∂ Y.functorOfPoints) :
    X ‚ü∂ Y :=
  X.affineOpenCover.openCover.glueMorphisms (fun j => f.app _ <| X.affineOpenCover.map _) <| by
    intro i j
    apply schemeToFunctor.map_injective; ext A e : 3
    dsimp at e ‚ä¢
    let ùì§ := X.affineOpenCover
    obtain ‚ü®fst',hfst‚ü© := Scheme.Spec.map_surjective
      (e ‚â´ (Limits.pullback.fst : Limits.pullback (ùì§.map i) (ùì§.map j) ‚ü∂ _))
    obtain ‚ü®snd',hsnd‚ü© := Scheme.Spec.map_surjective
      (e ‚â´ (Limits.pullback.snd : Limits.pullback (ùì§.map i) (ùì§.map j) ‚ü∂ _))
    slice_lhs 1 2 => erw [‚Üê hfst]
    slice_rhs 1 2 => erw [‚Üê hsnd]
    have hi := congr_fun (f.naturality fst'.unop) (ùì§.map i)
    have hj := congr_fun (f.naturality snd'.unop) (ùì§.map j)
    dsimp at hi hj
    rw [‚Üê hi, ‚Üê hj]
    simp_rw [hfst, hsnd, Category.assoc, Limits.pullback.condition]

instance fullFunctorOfPoints : Full schemeToFunctor where
  preimage f := homOfFunctorOfPoints f
  witness := by
    intro X Y f
    ext A e : 3
    dsimp [homOfFunctorOfPoints] at e ‚ä¢
    let ùì§ := X.affineCover
    let ùì• := ùì§.pullbackCover e
    let ùì¶ := ùì•.affineRefinement
    let Œπ : ùì¶.openCover ‚ü∂ ùì• := Scheme.OpenCover.fromAffineRefinement.{u,u} ùì•
    apply ùì¶.openCover.hom_ext
    intro j
    dsimp
    have aux : ùì¶.map j ‚â´ e = Œπ.app j ‚â´ Limits.pullback.snd ‚â´ X.affineCover.map j.fst := by
      have := Œπ.w j
      dsimp at this
      rw [‚Üê this, Category.assoc]
      congr 1
      apply Limits.pullback.condition
    rw [reassoc_of% aux, Scheme.OpenCover.Œπ_glueMorphisms]
    let ‚ü®w,hw‚ü© := Scheme.Spec.map_surjective (ùì¶.map j)
    have := congr_fun (f.naturality w.unop) e
    dsimp at this
    rw [‚Üê hw, ‚Üê this, hw, aux]
    let ‚ü®w,hw‚ü© := Scheme.Spec.map_surjective (Œπ.app j ‚â´ Limits.pullback.snd)
    simp only [‚Üê Category.assoc, ‚Üê hw]
    exact congr_fun (f.naturality w.unop) (X.affineCover.map j.fst) |>.symm

def IsBasicOpen {A B : CommRingCat.{u}} (Œπ : A ‚ü∂ B) (f : A) : Prop :=
  letI : Algebra A B := RingHom.toAlgebra Œπ
  IsLocalization.Away f B

lemma isOpenImmersion_of_isBasicOpen
    {A B : CommRingCat.{u}} (Œπ : A ‚ü∂ B) (f : A) (h : IsBasicOpen Œπ f) :
    IsOpenImmersion (Scheme.Spec.map Œπ.op) := by
  let _ : Algebra A B := RingHom.toAlgebra Œπ
  let _ : IsLocalization.Away f B := h
  let e' : Localization.Away f ‚âÉ‚Çê[A] B := Localization.algEquiv _ B
  let B' := CommRingCat.of <| Localization.Away f
  let e : B' ‚âÖ B := e'.toRingEquiv.toCommRingCatIso
  let Œπ' : A ‚ü∂ B' := algebraMap A <| Localization.Away f
  have : Œπ = Œπ' ‚â´ e.hom := by
    ext t
    exact AlgHom.commutes e'.toAlgHom t |>.symm
  rw [this]
  simp only [op_comp, Functor.map_comp]
  suffices IsOpenImmersion (Scheme.Spec.map Œπ'.op) from inferInstance
  apply Scheme.basic_open_isOpenImmersion

structure indexedZariskiCover (A : CommRingCat.{u}) where
  J : Type v
  B : J ‚Üí CommRingCat.{u}
  f : J ‚Üí A
  Œπ (j : J) : A ‚ü∂ B j
  isLocalizationAt (j : J) : IsBasicOpen (Œπ j) (f j)
  covers : Ideal.span (Set.range f) = ‚ä§

lemma indexedZariskiCover.exists_index
    {A : CommRingCat.{u}} (ùì§ : indexedZariskiCover A)
    (p : PrimeSpectrum A) : ‚àÉ j : ùì§.J, ùì§.f j ‚àâ p.asIdeal := by
  by_contra! h
  apply p.IsPrime.ne_top
  suffices ‚ä§ ‚â§ p.asIdeal from Submodule.eq_top_iff'.mpr fun x ‚Ü¶ this trivial
  rw [‚Üê ùì§.covers, Ideal.span_le]
  rintro j ‚ü®j,rfl‚ü©
  apply h

def indexedZariskiCover.affineOpenCover {A : CommRingCat.{u}} (ùì§ : indexedZariskiCover A) :
    (Scheme.Spec.obj <| .op A).AffineOpenCover where
  J := ùì§.J
  obj := ùì§.B
  map j := Scheme.Spec.map <| ùì§.Œπ j |>.op
  f := fun (p : PrimeSpectrum A) => (ùì§.exists_index p).choose
  Covers := fun (p : PrimeSpectrum A) => by
    let j := (ùì§.exists_index p).choose
    let _ : Algebra A (ùì§.B j) := RingHom.toAlgebra <| ùì§.Œπ j
    let _ : IsLocalization.Away (ùì§.f j) (ùì§.B j) := ùì§.isLocalizationAt j
    change p ‚àà Set.range ‚áë(PrimeSpectrum.comap (algebraMap A (ùì§.B j)))
    rw [PrimeSpectrum.localization_away_comap_range (ùì§.B j) (ùì§.f j)]
    exact (ùì§.exists_index p).choose_spec
  IsOpen j := isOpenImmersion_of_isBasicOpen _ (ùì§.f j) (ùì§.isLocalizationAt _)

theorem indexedZariskiCover.desc
    {X : Scheme.{u}}
    {A : CommRingCat.{u}}
    (ùì§ : indexedZariskiCover.{u} A)
    (b : (j : ùì§.J) ‚Üí X.functorOfPoints.obj (ùì§.B j))
    (hb : ‚àÄ (i j : ùì§.J) (C : CommRingCat.{u})
      (Œπi : ùì§.B i ‚ü∂ C) (Œπj : ùì§.B j ‚ü∂ C),
      ùì§.Œπ i ‚â´ Œπi = ùì§.Œπ j ‚â´ Œπj ‚Üí
      X.functorOfPoints.map Œπi (b i) = X.functorOfPoints.map Œπj (b j)) :
    X.functorOfPoints.obj A :=
  ùì§.affineOpenCover.openCover.glueMorphisms b <| by
    intro i j
    apply schemeToFunctor.map_injective
    ext A e : 3
    dsimp at e ‚ä¢
    simp only [‚Üê Category.assoc]
    obtain ‚ü®fst,hfst‚ü© := Scheme.Spec.map_surjective (e ‚â´ Limits.pullback.fst)
    obtain ‚ü®snd,hsnd‚ü© := Scheme.Spec.map_surjective (e ‚â´ Limits.pullback.snd)
    rw [‚Üê hfst, ‚Üê hsnd]
    apply hb
    apply Quiver.Hom.op_inj
    apply Scheme.Spec.map_injective
    simp only [Opposite.unop_op, op_comp, Functor.map_comp]
    show Scheme.Spec.map fst ‚â´ _ = Scheme.Spec.map snd ‚â´ _
    simp_rw [hfst, hsnd, Category.assoc]
    congr 1
    exact Limits.pullback.condition

lemma indexedZariskiCover.restirct_desc
    {X : Scheme.{u}}
    {A : CommRingCat.{u}}
    (ùì§ : indexedZariskiCover.{u} A)
    (b : (j : ùì§.J) ‚Üí X.functorOfPoints.obj (ùì§.B j))
    (hb : ‚àÄ (i j : ùì§.J) (C : CommRingCat.{u})
      (Œπi : ùì§.B i ‚ü∂ C) (Œπj : ùì§.B j ‚ü∂ C),
      ùì§.Œπ i ‚â´ Œπi = ùì§.Œπ j ‚â´ Œπj ‚Üí
      X.functorOfPoints.map Œπi (b i) = X.functorOfPoints.map Œπj (b j)) (j : ùì§.J) :
    X.functorOfPoints.map (ùì§.Œπ j) (ùì§.desc b hb) = b _ := by
  unfold indexedZariskiCover.desc
  apply Scheme.OpenCover.Œπ_glueMorphisms

lemma indexedZariskiCover.hom_ext
    {X : Scheme.{u}}
    {A : CommRingCat.{u}}
    (ùì§ : indexedZariskiCover.{u} A)
    (f g : X.functorOfPoints.obj A)
    (h : ‚àÄ j : ùì§.J, X.functorOfPoints.map (ùì§.Œπ j) f = X.functorOfPoints.map (ùì§.Œπ j) g) :
    f = g :=
  ùì§.affineOpenCover.openCover.hom_ext _ _ h

end AlgebraicGeometry
