/-
Copyright (c) 2024 Calle S√∂nne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Calle S√∂nne, Jo√´l Riou, Ravi Vakil
-/
import Mathlib.CategoryTheory.MorphismProperty.Presheaf
import Mathlib.AlgebraicGeometry.Sites.BigZariski
import Mathlib.AlgebraicGeometry.OpenImmersion
import Mathlib.AlgebraicGeometry.GluingOneHypercover
import Mathlib.CategoryTheory.Sites.LocallyBijective
import Mathlib.CategoryTheory.Limits.Shapes.Products
import Mathlib.CategoryTheory.Limits.Shapes.Pullback.Iso

/-!
# Representability of schemes is a local property

In this file we prove that a sheaf of types `F` on `Sch` is representable if it is
locally representable.

## References
* https://stacks.math.columbia.edu/tag/01JJ

-/

namespace AlgebraicGeometry

open CategoryTheory Category Limits Opposite

universe u

namespace Scheme

/-- Open immersions as a morphism property -/
abbrev openImmersion : MorphismProperty (Scheme.{u}) := @IsOpenImmersion

lemma openImmersion_le_monomorphisms :
    openImmersion ‚â§ MorphismProperty.monomorphisms Scheme.{u} := fun _ _ _ _ ‚Ü¶
  MorphismProperty.monomorphisms.infer_property _

lemma mono_of_openImmersion_presheaf {F G : Scheme.{u}·µí·µñ ‚•§ Type u}
    {f : F ‚ü∂ G} (hf : openImmersion.presheaf f) : Mono f :=
  MorphismProperty.presheaf_monomorphisms_le_monomorphisms _
    (MorphismProperty.presheaf_monotone (openImmersion_le_monomorphisms) _ hf)

/-
Consider the following setup:
* F is `Type u`-valued a sheaf on `Sch` with respect to the Zariski topology
* X : Œπ ‚Üí Sch is a family of schemes
* f : Œ† i, yoneda.obj (X i) ‚ü∂ F is a family relatively representable open immersions
* The family f is locally surjective with respect to the Zariski topology
-/
variable (F : Sheaf (Scheme.zariskiTopology.{u}) (Type u)) {Œπ : Type u}
  {X : Œπ ‚Üí Scheme.{u}} (f : (i : Œπ) ‚Üí yoneda.obj (X i) ‚ü∂ F.1)
  (hf : ‚àÄ i, openImmersion.presheaf (f i))

namespace Representability

variable {F f}
variable (i j k : Œπ)

/-- Let `V` denote an object representing `(X i) √ó_{F} (X j)` -/
noncomputable abbrev V := (hf i).rep.pullback (f j)
/-- Let `p‚ÇÅ` denote the projection `V ‚ü∂ X i` in the category `Sch`. -/
noncomputable abbrev p‚ÇÅ : V hf i j ‚ü∂ X i := (hf i).rep.fst' (f j)
/-- Let `p‚ÇÇ` denote the projection `V ‚ü∂ X j` in the category `Sch`. -/
noncomputable abbrev p‚ÇÇ : V hf i j ‚ü∂ X j := (hf i).rep.snd (f j)

/-- The natural isomorphism `V i j ‚âÖ V j i`. -/
noncomputable abbrev symmetryIso : V hf i j ‚âÖ V hf j i :=
  ((hf i).rep.symmetryIso (hf j).rep)

lemma isOpenImmersion_p‚ÇÇ (i j : Œπ) : IsOpenImmersion (p‚ÇÇ hf i j) :=
  (hf i).property_snd (f j)

lemma symmetryIso_hom_comp_p‚ÇÇ (i j : Œπ) :
    (symmetryIso hf i j).hom ‚â´ p‚ÇÇ hf j i = p‚ÇÅ hf i j := by
  simp

-- TODO: this should also follow from a general statement about pulling back property
-- through any choice pullback (no need to go through symmetryIso)
lemma isOpenImmersion_p‚ÇÅ (i j : Œπ) :
    IsOpenImmersion (p‚ÇÅ hf i j) := by
  have := isOpenImmersion_p‚ÇÇ hf j i
  rw [‚Üê symmetryIso_hom_comp_p‚ÇÇ hf]
  infer_instance

-- TODO: this should be a general statement about pullbacks of monomorphisms (might already be)
-- add in terms of both PullbackCone and CommSq API
lemma p‚ÇÅ_self_eq_p‚ÇÇ (i : Œπ) :
    p‚ÇÅ hf i i = p‚ÇÇ hf i i := by
  have := mono_of_openImmersion_presheaf (hf i)
  apply yoneda.map_injective
  rw [‚Üê cancel_mono (f i), ((hf i).rep.isPullback' (f i)).w]

-- not sure if this is needed? (alt. should go in other file)
@[reassoc]
lemma condition (i j : Œπ) : yoneda.map (p‚ÇÅ hf i j) ‚â´ f i = yoneda.map (p‚ÇÇ hf i j) ‚â´ f j :=
  ((hf i).rep.isPullback' (f j)).w

-- again this should be a general lemma in terms of both PullbackCone and CommSq API
lemma isIso_p‚ÇÅ_self (i : Œπ) :
    IsIso (p‚ÇÅ hf i i) := by
  refine ‚ü®(hf i).rep.lift' (ùüô _) (ùüô _) (by simp), ?_, by simp‚ü©
  dsimp
  apply Presheaf.representable.hom_ext'
  ¬∑ simp
  ¬∑ simp [p‚ÇÅ_self_eq_p‚ÇÇ hf i]

-- the "triple" intersections of `X i`, `X j` and `X k`,
-- defined as a fibre product over `X i` of `V hf i j` and `V hf i k`
noncomputable def W := pullback (p‚ÇÅ hf i j) (p‚ÇÅ hf i k)

@[reassoc]
lemma condition‚ÇÉ : (pullback.fst _ _ ‚â´ p‚ÇÅ hf i j : W hf i j k ‚ü∂ _ ) =
    pullback.snd _ _ ‚â´ p‚ÇÅ hf i k := by
  apply pullback.condition

/-- TODO -/
noncomputable def q‚ÇÅ : W hf i j k ‚ü∂ X i := pullback.fst _ _ ‚â´ p‚ÇÅ hf i j
/-- TODO -/
noncomputable def q‚ÇÇ : W hf i j k ‚ü∂ X j := pullback.fst _ _ ‚â´ p‚ÇÇ hf i j
/-- TODO -/
noncomputable def q‚ÇÉ : W hf i j k ‚ü∂ X k := pullback.snd _ _ ‚â´ p‚ÇÇ hf i k

/-- TODO -/
noncomputable def ŒπW : yoneda.obj (W hf i j k) ‚ü∂ F.1 := yoneda.map (q‚ÇÅ hf i j k) ‚â´ f i

@[reassoc (attr := simp)]
lemma yoneda_map_q‚ÇÅ_f : yoneda.map (q‚ÇÅ hf i j k) ‚â´ f i = ŒπW hf i j k := rfl

@[reassoc (attr := simp)]
lemma yoneda_map_q‚ÇÇ_f : yoneda.map (q‚ÇÇ hf i j k) ‚â´ f j = ŒπW hf i j k := by
  dsimp only [q‚ÇÅ, q‚ÇÇ, ŒπW]
  simp only [Functor.map_comp, assoc, condition]

@[reassoc (attr := simp)]
lemma yoneda_map_q‚ÇÉ_f : yoneda.map (q‚ÇÉ hf i j k) ‚â´ f k = ŒπW hf i j k := by
  rw [‚Üê yoneda_map_q‚ÇÅ_f]
  dsimp only [q‚ÇÉ, q‚ÇÅ, ŒπW]
  rw [Functor.map_comp, assoc, ‚Üê condition hf i k, ‚Üê Functor.map_comp_assoc,
    ‚Üê condition‚ÇÉ, Functor.map_comp, assoc]

lemma eq_q‚ÇÅ : pullback.snd _ _ ‚â´ p‚ÇÅ hf i k = q‚ÇÅ hf i j k := by
  apply yoneda.map_injective
  have := mono_of_openImmersion_presheaf (hf i)
  rw [‚Üê cancel_mono (f i), Functor.map_comp, assoc, yoneda_map_q‚ÇÅ_f,
    condition hf, ‚Üê Functor.map_comp_assoc]
  apply yoneda_map_q‚ÇÉ_f

variable {hf i j k} in
lemma hom_ext_W {Z : Scheme} {Œ± Œ≤ : Z ‚ü∂ W hf i j k}
    (h‚ÇÅ : Œ± ‚â´ q‚ÇÅ hf i j k = Œ≤ ‚â´ q‚ÇÅ hf i j k)
    (h‚ÇÇ : Œ± ‚â´ q‚ÇÇ hf i j k = Œ≤ ‚â´ q‚ÇÇ hf i j k)
    (h‚ÇÉ : Œ± ‚â´ q‚ÇÉ hf i j k = Œ≤ ‚â´ q‚ÇÉ hf i j k) : Œ± = Œ≤ := by
  dsimp [W]
  -- TODO: modify ext priority so that this is a single ext?
  ext1 <;> apply (hf i).rep.hom_ext'
  ¬∑ simpa using h‚ÇÅ
  ¬∑ simpa using h‚ÇÇ
  ¬∑ simpa [eq_q‚ÇÅ] using h‚ÇÅ
  ¬∑ simpa using h‚ÇÉ

section

variable {Z : Scheme} (a : Z ‚ü∂ X i) (b : Z ‚ü∂ X j) (c : Z ‚ü∂ X k)
  (h‚ÇÅ : yoneda.map a ‚â´ f i = yoneda.map b ‚â´ f j)
  (h‚ÇÇ : yoneda.map a ‚â´ f i = yoneda.map c ‚â´ f k)

variable {i j k}

/-- TODO -/
noncomputable def liftW : Z ‚ü∂ W hf i j k :=
  pullback.lift ((hf i).rep.lift' a b h‚ÇÅ)
    ((hf i).rep.lift' a c h‚ÇÇ) (by simp)

@[reassoc (attr := simp)]
lemma liftW_q‚ÇÅ : liftW hf a b c h‚ÇÅ h‚ÇÇ ‚â´ q‚ÇÅ hf i j k = a := by simp [liftW, q‚ÇÅ]

@[reassoc (attr := simp)]
lemma liftW_q‚ÇÇ : liftW hf a b c h‚ÇÅ h‚ÇÇ ‚â´ q‚ÇÇ hf i j k = b := by simp [liftW, q‚ÇÇ]

@[reassoc (attr := simp)]
lemma liftW_q‚ÇÉ : liftW hf a b c h‚ÇÅ h‚ÇÇ ‚â´ q‚ÇÉ hf i j k = c := by simp [liftW, q‚ÇÉ]

end

/-- TODO -/
@[simps]
noncomputable def glueData : GlueData where
  J := Œπ
  U := X
  V := fun (i, j) ‚Ü¶ V hf i j
  f := p‚ÇÅ hf
  f_mono i j := by
    have := isOpenImmersion_p‚ÇÅ hf i j
    infer_instance
  f_id := isIso_p‚ÇÅ_self hf
  t i j := (hf i).rep.symmetry (hf j).rep
  t_id i := by apply (hf i).rep.hom_ext' <;> simp [p‚ÇÅ_self_eq_p‚ÇÇ hf i]
  t' i j k := liftW hf (q‚ÇÇ _ _ _ _) (q‚ÇÉ _ _ _ _) (q‚ÇÅ _ _ _ _) (by simp) (by simp)
  t_fac i j k := by
    dsimp
    apply (hf j).rep.hom_ext'
    ¬∑ simp [eq_q‚ÇÅ]
      rfl
    ¬∑ simpa using liftW_q‚ÇÉ _ _ _ _ _ _
  cocycle i j k := by apply hom_ext_W; all_goals simp
  f_open := isOpenImmersion_p‚ÇÅ hf

/-- TODO -/
noncomputable def toGlued (i : Œπ) : X i ‚ü∂ (glueData hf).glued :=
  (glueData hf).Œπ i

/-- TODO -/
noncomputable def yonedaGluedToSheaf :
    subcanonical_zariskiTopology.yoneda.obj (glueData hf).glued ‚ü∂ F :=
  Sheaf.homEquiv.symm (yonedaEquiv.symm
    ((glueData hf).sheafValGluedMk (fun i ‚Ü¶ yonedaEquiv (f i)) (by
      intro i j
      dsimp
      apply yonedaEquiv.symm.injective
      rw [yonedaEquiv_naturality, Equiv.symm_apply_apply,
        FunctorToTypes.map_comp_apply, yonedaEquiv_naturality, yonedaEquiv_naturality,
        Equiv.symm_apply_apply, ‚Üê Functor.map_comp_assoc,
        Presheaf.representable.symmetry_fst, condition])))

@[simp]
lemma fac (i : Œπ) :
    yoneda.map (toGlued hf i) ‚â´ (yonedaGluedToSheaf hf).val = f i := by
  dsimp [yonedaGluedToSheaf, Sheaf.homEquiv, Functor.FullyFaithful.homEquiv]
  apply yonedaEquiv.injective
  rw [yonedaEquiv_apply, yonedaEquiv_apply]
  dsimp
  simp only [comp_id]
  apply GlueData.sheafValGluedMk_val

lemma fac' {i : Œπ} {V : Scheme.{u}} (a : V ‚ü∂ X i) :
    (yonedaGluedToSheaf hf).val.app _ (a ‚â´ toGlued hf i) =
      yonedaEquiv (yoneda.map a ‚â´ f i) := by
  rw [‚Üê fac hf i]
  rfl

instance [Presheaf.IsLocallySurjective Scheme.zariskiTopology (Sigma.desc f)] :
    Sheaf.IsLocallySurjective (yonedaGluedToSheaf hf) :=
  Presheaf.isLocallySurjective_of_isLocallySurjective_fac _
    (show Sigma.desc (fun i ‚Ü¶ yoneda.map (toGlued hf i)) ‚â´
      (yonedaGluedToSheaf hf).val = Sigma.desc f by aesop_cat)

lemma injective {U : Scheme} {i j : Œπ} (a : U ‚ü∂ X i) (b : U ‚ü∂ X j)
    (h : yoneda.map a ‚â´ f i = yoneda.map b ‚â´ f j) :
    a ‚â´ toGlued hf i = b ‚â´ toGlued hf j := by
  let œÜ : U ‚ü∂ V hf i j := (hf i).rep.lift' a b h
  have h‚ÇÅ : œÜ ‚â´ p‚ÇÅ hf i j = a := by simp [œÜ]
  have h‚ÇÇ : œÜ ‚â´ p‚ÇÇ hf i j = b := by simp [œÜ]
  rw [‚Üê h‚ÇÅ, ‚Üê h‚ÇÇ, assoc, assoc]
  congr 1
  exact ((glueData hf).glue_condition i j).symm.trans (by simp; rfl)

instance : Sheaf.IsLocallyInjective (yonedaGluedToSheaf hf) where
  equalizerSieve_mem := by
    rintro ‚ü®U‚ü© (Œ± Œ≤ : U ‚ü∂ _) h
    dsimp at h
    have mem := zariskiTopology_openCover (glueData hf).openCover
    refine GrothendieckTopology.superset_covering _ ?_
      (zariskiTopology.intersection_covering (zariskiTopology.pullback_stable Œ± mem)
        (zariskiTopology.pullback_stable Œ≤ mem))
    rintro V (Œ≥ : _ ‚ü∂ U) ‚ü®‚ü®W‚ÇÅ, a, _, ‚ü®i‚ü©, fac‚ÇÅ‚ü©, ‚ü®W‚ÇÇ, b, _, ‚ü®j‚ü©, fac‚ÇÇ‚ü©‚ü©
    change Œ≥ ‚â´ Œ± = Œ≥ ‚â´ Œ≤
    rw [‚Üê fac‚ÇÅ, ‚Üê fac‚ÇÇ]
    apply injective
    replace h := congr_arg (F.1.map Œ≥.op) h
    apply yonedaEquiv.injective
    simp at h
    have eq‚ÇÅ := congr_fun ((yonedaGluedToSheaf hf).val.naturality Œ≥.op) Œ±
    have eq‚ÇÇ := congr_fun ((yonedaGluedToSheaf hf).val.naturality Œ≥.op) Œ≤
    dsimp at eq‚ÇÅ eq‚ÇÇ
    convert h using 1
    ¬∑ erw [‚Üê eq‚ÇÅ, ‚Üê fac‚ÇÅ, ‚Üê fac' hf]
      rfl
    ¬∑ erw [‚Üê eq‚ÇÇ, ‚Üê fac‚ÇÇ, ‚Üê fac' hf]
      rfl

variable [Presheaf.IsLocallySurjective Scheme.zariskiTopology (Sigma.desc f)]

instance : IsIso (yonedaGluedToSheaf hf) := by
  rw [‚Üê Sheaf.isLocallyBijective_iff_isIso (yonedaGluedToSheaf hf)]
  constructor <;> infer_instance

/-- TODO -/
noncomputable def yonedaIsoSheaf :
    subcanonical_zariskiTopology.yoneda.obj (glueData hf).glued ‚âÖ F :=
  asIso (yonedaGluedToSheaf hf)

end Representability

include hf in
open Representability in
theorem representability [Presheaf.IsLocallySurjective Scheme.zariskiTopology (Sigma.desc f)] :
    F.1.Representable where
  has_representation := ‚ü®(glueData hf).glued,
    ‚ü®(sheafToPresheaf _ _).mapIso (yonedaIsoSheaf hf)‚ü©‚ü©

end Scheme

end AlgebraicGeometry
