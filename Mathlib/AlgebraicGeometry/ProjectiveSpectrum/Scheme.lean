/-
Copyright (c) 2022 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang
-/
import Mathlib.AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf
import Mathlib.AlgebraicGeometry.Scheme
import Mathlib.RingTheory.GradedAlgebra.Radical

#align_import algebraic_geometry.projective_spectrum.scheme from "leanprover-community/mathlib"@"d39590fc8728fbf6743249802486f8c91ffe07bc"

/-!
# Proj as a scheme

This file is to prove that `Proj` is a scheme.

## Notation

* `Proj`      : `Proj` as a locally ringed space
* `Proj.T`    : the underlying topological space of `Proj`
* `Proj| U`   : `Proj` restricted to some open set `U`
* `Proj.T| U` : the underlying topological space of `Proj` restricted to open set `U`
* `pbo f`     : basic open set at `f` in `Proj`
* `Spec`      : `Spec` as a locally ringed space
* `Spec.T`    : the underlying topological space of `Spec`
* `sbo g`     : basic open set at `g` in `Spec`
* `A‚Å∞_x`      : the degree zero part of localized ring `A‚Çì`

## Implementation

In `AlgebraicGeometry/ProjectiveSpectrum/StructureSheaf.lean`, we have given `Proj` a
structure sheaf so that `Proj` is a locally ringed space. In this file we will prove that `Proj`
equipped with this structure sheaf is a scheme. We achieve this by using an affine cover by basic
open sets in `Proj`, more specifically:

1. We prove that `Proj` can be covered by basic open sets at homogeneous element of positive degree.
2. We prove that for any homogeneous element `f : A` of positive degree `m`, `Proj.T | (pbo f)` is
    homeomorphic to `Spec.T A‚Å∞_f`:
  - forward direction `toSpec`:
    for any `x : pbo f`, i.e. a relevant homogeneous prime ideal `x`, send it to
    `A‚Å∞_f ‚à© span {g / 1 | g ‚àà x}` (see `ProjIsoSpecTopComponent.IoSpec.carrier`). This ideal is
    prime, the proof is in `ProjIsoSpecTopComponent.ToSpec.toFun`. The fact that this function
    is continuous is found in `ProjIsoSpecTopComponent.toSpec`
  - backward direction `fromSpec`:
    for any `q : Spec A‚Å∞_f`, we send it to `{a | ‚àÄ i, a·µ¢·µê/f‚Å± ‚àà q}`; we need this to be a
    homogeneous prime ideal that is relevant.
    * This is in fact an ideal, the proof can be found in
      `ProjIsoSpecTopComponent.FromSpec.carrier.asIdeal`;
    * This ideal is also homogeneous, the proof can be found in
      `ProjIsoSpecTopComponent.FromSpec.carrier.asIdeal.homogeneous`;
    * This ideal is relevant, the proof can be found in
      `ProjIsoSpecTopComponent.FromSpec.carrier.relevant`;
    * This ideal is prime, the proof can be found in
      `ProjIsoSpecTopComponent.FromSpec.carrier.prime`.
    Hence we have a well defined function `Spec.T A‚Å∞_f ‚Üí Proj.T | (pbo f)`, this function is called
    `ProjIsoSpecTopComponent.FromSpec.toFun`. But to prove the continuity of this function,
    we need to prove `fromSpec ‚àò toSpec` and `toSpec ‚àò fromSpec` are both identities (TBC).

## Main Definitions and Statements

* `degreeZeroPart`: the degree zero part of the localized ring `A‚Çì` where `x` is a homogeneous
  element of degree `n` is the subring of elements of the form `a/f^m` where `a` has degree `mn`.

For a homogeneous element `f` of degree `n`
* `ProjIsoSpecTopComponent.toSpec`: `forward f` is the
  continuous map between `Proj.T| pbo f` and `Spec.T A‚Å∞_f`
* `ProjIsoSpecTopComponent.ToSpec.preimage_eq`: for any `a: A`, if `a/f^m` has degree zero,
  then the preimage of `sbo a/f^m` under `to_Spec f` is `pbo f ‚à© pbo a`.

* [Robin Hartshorne, *Algebraic Geometry*][Har77]: Chapter II.2 Proposition 2.5
-/


noncomputable section

set_option linter.uppercaseLean3 false -- Porting note: Proj and Spec

namespace AlgebraicGeometry

open scoped DirectSum BigOperators Pointwise BigOperators

open DirectSum SetLike.GradedMonoid Localization

open Finset hiding mk_zero mk

variable {R A : Type*}

variable [CommRing R] [CommRing A] [Algebra R A]

variable (ùíú : ‚Ñï ‚Üí Submodule R A)

variable [GradedAlgebra ùíú]

open TopCat TopologicalSpace

open CategoryTheory Opposite

open ProjectiveSpectrum.StructureSheaf

-- Porting note: currently require lack of hygiene to use in variable declarations
-- maybe all make into notation3?
set_option hygiene false
-- `Proj` as a locally ringed space
local notation3 "Proj" => Proj.toLocallyRingedSpace ùíú

-- the underlying topological space of `Proj`
local notation3 "Proj.T" => PresheafedSpace.carrier <| SheafedSpace.toPresheafedSpace
  <| LocallyRingedSpace.toSheafedSpace <| Proj.toLocallyRingedSpace ùíú

-- `Proj` restrict to some open set
macro "Proj| " U:term : term =>
  `((Proj.toLocallyRingedSpace ùíú).restrict (Opens.openEmbedding (X := Proj.T) ($U : Opens Proj.T)))

-- the underlying topological space of `Proj` restricted to some open set
local notation "Proj.T| " U => PresheafedSpace.carrier <| SheafedSpace.toPresheafedSpace
  <| LocallyRingedSpace.toSheafedSpace
    <| (LocallyRingedSpace.restrict Proj (Opens.openEmbedding (X := Proj.T) (U : Opens Proj.T)))

-- basic open sets in `Proj`
local notation "pbo " x => ProjectiveSpectrum.basicOpen ùíú x

-- basic open sets in `Spec`
local notation "sbo " f => PrimeSpectrum.basicOpen f

-- `Spec` as a locally ringed space
local notation3 "Spec " ring => Spec.locallyRingedSpaceObj (CommRingCat.of ring)

-- the underlying topological space of `Spec`
local notation "Spec.T " ring =>
  (Spec.locallyRingedSpaceObj (CommRingCat.of ring)).toSheafedSpace.toPresheafedSpace.1

local notation3 "A‚Å∞_ " f => HomogeneousLocalization.Away ùíú f

namespace ProjIsoSpecTopComponent

/-
This section is to construct the homeomorphism between `Proj` restricted at basic open set at
a homogeneous element `x` and `Spec A‚Å∞‚Çì` where `A‚Å∞‚Çì` is the degree zero part of the localized
ring `A‚Çì`.
-/
namespace ToSpec

open Ideal

-- This section is to construct the forward direction :
-- So for any `x` in `Proj| (pbo f)`, we need some point in `Spec A‚Å∞_f`, i.e. a prime ideal,
-- and we need this correspondence to be continuous in their Zariski topology.
variable {ùíú} {f : A} {m : ‚Ñï} (f_deg : f ‚àà ùíú m) (x : Proj| (pbo f))

/--
For any `x` in `Proj| (pbo f)`, the corresponding ideal in `Spec A‚Å∞_f`. This fact that this ideal
is prime is proven in `TopComponent.Forward.toFun`-/
def carrier : Ideal (A‚Å∞_ f) :=
  Ideal.comap (algebraMap (A‚Å∞_ f) (Away f))
    (Ideal.span <| algebraMap A (Away f) '' x.val.asHomogeneousIdeal)
#align algebraic_geometry.Proj_iso_Spec_Top_component.to_Spec.carrier AlgebraicGeometry.ProjIsoSpecTopComponent.ToSpec.carrier

theorem mem_carrier_iff (z : A‚Å∞_ f) :
    z ‚àà carrier x ‚Üî z.val ‚àà Ideal.span (algebraMap A (Away f) '' x.1.asHomogeneousIdeal) :=
  Iff.rfl
#align algebraic_geometry.Proj_iso_Spec_Top_component.to_Spec.mem_carrier_iff AlgebraicGeometry.ProjIsoSpecTopComponent.ToSpec.mem_carrier_iff

lemma num_not_mem_of_not_mem_carrier (z : A‚Å∞_ f) (h : z ‚àâ carrier x) :
    z.num ‚àâ x.1.asHomogeneousIdeal := by
  contrapose! h
  rw [mem_carrier_iff, z.eq_num_div_den, show Localization.mk z.num _ = mk z.num 1 * mk 1 _ by
    rw [mk_mul, one_mul, mul_one]]
  exact Ideal.mul_mem_right _ _ <| Ideal.subset_span ‚ü®_, h, rfl‚ü©

lemma pow_mul_num_not_mem_of_not_mem_carrier (z : A‚Å∞_ f) (h : z ‚àâ carrier x) (n : ‚Ñï) :
    f^n * z.num ‚àâ x.1.asHomogeneousIdeal :=
  fun r ‚Ü¶ x.1.isPrime.mem_or_mem r |>.elim
    (fun r ‚Ü¶ x.2 <| x.1.isPrime.pow_mem_iff_mem _ (by
      by_contra h
      simp only [not_lt, nonpos_iff_eq_zero] at h
      erw [h, pow_zero, ‚Üê Ideal.eq_top_iff_one] at r
      exact x.1.isPrime.1 r) |>.mp r) (num_not_mem_of_not_mem_carrier x z h)

theorem MemCarrier.clear_denominator' [DecidableEq (Away f)] {z : Localization.Away f}
    (hz : z ‚àà span (algebraMap A (Away f) '' x.val.asHomogeneousIdeal)) :
    ‚àÉ (c : algebraMap A (Away f) '' x.1.asHomogeneousIdeal ‚Üí‚ÇÄ Away f) (N : ‚Ñï) (acd :
      ‚àÄ y ‚àà c.support.image c, A),
      f ^ N ‚Ä¢ z =
        algebraMap A (Away f)
          (‚àë i in c.support.attach,
            acd (c i) (Finset.mem_image.mpr ‚ü®i, ‚ü®i.2, rfl‚ü©‚ü©) * i.1.2.choose) := by
  rw [‚Üê submodule_span_eq, Finsupp.span_eq_range_total, LinearMap.mem_range] at hz
  rcases hz with ‚ü®c, eq1‚ü©
  rw [Finsupp.total_apply, Finsupp.sum] at eq1
  obtain ‚ü®‚ü®_, N, rfl‚ü©, hN‚ü© :=
    IsLocalization.exist_integer_multiples_of_finset (Submonoid.powers f) (c.support.image c)
  choose acd hacd using hN
  refine' ‚ü®c, N, acd, _‚ü©
  rw [‚Üê eq1, smul_sum, map_sum, ‚Üê sum_attach]
  congr 1
  ext i
  rw [_root_.map_mul, hacd, (Classical.choose_spec i.1.2).2, smul_eq_mul, smul_mul_assoc]
#align algebraic_geometry.Proj_iso_Spec_Top_component.to_Spec.mem_carrier.clear_denominator' AlgebraicGeometry.ProjIsoSpecTopComponent.ToSpec.MemCarrier.clear_denominator'

theorem MemCarrier.clear_denominator [DecidableEq (Away f)] {z : A‚Å∞_ f} (hz : z ‚àà carrier x) :
    ‚àÉ (c : algebraMap A (Away f) '' x.1.asHomogeneousIdeal ‚Üí‚ÇÄ Away f) (N : ‚Ñï) (acd :
      ‚àÄ y ‚àà c.support.image c, A),
      f ^ N ‚Ä¢ z.val =
        algebraMap A (Away f)
          (‚àë i in c.support.attach,
            acd (c i) (Finset.mem_image.mpr ‚ü®i, ‚ü®i.2, rfl‚ü©‚ü©) * i.1.2.choose) :=
  MemCarrier.clear_denominator' x <| (mem_carrier_iff x z).mpr hz
#align algebraic_geometry.Proj_iso_Spec_Top_component.to_Spec.mem_carrier.clear_denominator AlgebraicGeometry.ProjIsoSpecTopComponent.ToSpec.MemCarrier.clear_denominator

/--
For `x : pbo f`
The ideal `A‚Å∞_f ‚à© span {g / 1 | g ‚àà x}` is equal to `span {a/f^n | a ‚àà x and deg(a) = deg(f^n)}`
-/
lemma carrier_eq_span :
    carrier x =
    Ideal.span { z : HomogeneousLocalization.Away ùíú f |
      ‚àÉ (s F : A) (_ : s ‚àà x.1.asHomogeneousIdeal) (n : ‚Ñï)
        (s_mem : s ‚àà ùíú n) (F_mem1 : F ‚àà ùíú n) (F_mem2 : F ‚àà Submonoid.powers f),
        z = Quotient.mk'' ‚ü®n, ‚ü®s, s_mem‚ü©, ‚ü®F, F_mem1‚ü©,F_mem2‚ü© } := by
  classical
  refine le_antisymm ?_ <| Ideal.span_le.mpr ?_
  ¬∑ intro z hz
    let k : ‚Ñï := z.den_mem.choose
    have hk : f^k = z.den := z.den_mem.choose_spec
    suffices mem1 : z.num ‚àà x.1.asHomogeneousIdeal
    ¬∑ refine Ideal.subset_span ‚ü®_, _, mem1, _, z.num_mem_deg, z.den_mem_deg, z.den_mem, ?_‚ü©
      rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.val_mk'',
        HomogeneousLocalization.eq_num_div_den]

    obtain ‚ü®c, N, acd, eq1‚ü© := MemCarrier.clear_denominator x hz
    rw [z.eq_num_div_den, smul_mk, smul_eq_mul, ‚Üê mk_one_eq_algebraMap,
      Localization.mk_eq_mk_iff, Localization.r_iff_exists] at eq1
    obtain ‚ü®‚ü®_, ‚ü®l, rfl‚ü©‚ü©, eq1‚ü© := eq1
    dsimp only [OneMemClass.coe_one] at eq1
    rw [one_mul, ‚Üê hk, ‚Üê mul_assoc, ‚Üê mul_assoc, ‚Üê pow_add, ‚Üê pow_add] at eq1

    suffices : f^(l + k) * ‚àë i in c.support.attach, acd (c i) _ * i.1.2.choose ‚àà
      x.1.asHomogeneousIdeal
    ¬∑ exact (x.1.isPrime.mem_or_mem (eq1.symm ‚ñ∏ this)).resolve_left fun r ‚Ü¶
        (ProjectiveSpectrum.mem_basicOpen ùíú _ _).mp x.2 <| x.1.isPrime.mem_of_pow_mem _ r
    exact Ideal.mul_mem_left _ _ <| Ideal.sum_mem _ (fun ‚ü®j, hj‚ü© _ ‚Ü¶
      Ideal.mul_mem_left _ _ j.2.choose_spec.1)

  ¬∑ rintro _ ‚ü®s, _, hs, n, s_mem, F_mem, ‚ü®l, rfl‚ü©, rfl‚ü©
    erw [mem_carrier_iff, HomogeneousLocalization.val_mk'']
    erw [show (Localization.mk s ‚ü®f ^ l, ‚ü®_, rfl‚ü©‚ü© : Localization.Away f) =
      (Localization.mk 1 ‚ü®f^l, ‚ü®_, rfl‚ü©‚ü© : Localization.Away f) * Localization.mk s 1 by
      ¬∑ rw [Localization.mk_mul, mul_one, one_mul]]
    exact Ideal.mul_mem_left _ _ <| Ideal.subset_span ‚ü®s, hs, rfl‚ü©

theorem disjoint :
    Disjoint (x.1.asHomogeneousIdeal.toIdeal : Set A) (Submonoid.powers f : Set A) := by
  by_contra rid
  rw [Set.not_disjoint_iff] at rid
  choose g hg using rid
  obtain ‚ü®hg1, ‚ü®k, rfl‚ü©‚ü© := hg
  by_cases k_ineq : 0 < k
  ¬∑ erw [x.1.isPrime.pow_mem_iff_mem _ k_ineq] at hg1
    exact x.2 hg1
  ¬∑ dsimp at hg1
    erw [show k = 0 by linarith, pow_zero, ‚Üê Ideal.eq_top_iff_one] at hg1
    apply x.1.isPrime.1
    exact hg1
#align algebraic_geometry.Proj_iso_Spec_Top_component.to_Spec.disjoint AlgebraicGeometry.ProjIsoSpecTopComponent.ToSpec.disjoint

theorem carrier_ne_top : carrier x ‚â† ‚ä§ := by
  have eq_top := disjoint x
  classical
  contrapose! eq_top
  obtain ‚ü®c, N, acd, eq1‚ü© := MemCarrier.clear_denominator x ((Ideal.eq_top_iff_one _).mp eq_top)
  rw [Algebra.smul_def, HomogeneousLocalization.one_val, mul_one] at eq1
  change Localization.mk (f ^ N) 1 = Localization.mk _ 1 at eq1
  simp only [mk_eq_mk', IsLocalization.eq] at eq1
  rcases eq1 with ‚ü®‚ü®_, ‚ü®M, rfl‚ü©‚ü©, eq1‚ü©
  dsimp at eq1
  erw [one_mul, one_mul] at eq1
  change f ^ _ * f ^ _ = f ^ _ * _ at eq1
  rw [Set.not_disjoint_iff_nonempty_inter]
  refine'
    ‚ü®f ^ M * f ^ N, eq1.symm ‚ñ∏ mul_mem_left _ _ (sum_mem _ fun i _ => mul_mem_left _ _ _),
      ‚ü®M + N, by dsimp; rw [pow_add]‚ü©‚ü©
  generalize_proofs h‚ÇÅ h‚ÇÇ
  exact (Classical.choose_spec h‚ÇÇ).1
#align algebraic_geometry.Proj_iso_Spec_Top_component.to_Spec.carrier_ne_top AlgebraicGeometry.ProjIsoSpecTopComponent.ToSpec.carrier_ne_top

variable (f)

/-- The function between the basic open set `D(f)` in `Proj` to the corresponding basic open set in
`Spec A‚Å∞_f`. This is bundled into a continuous map in `TopComponent.forward`.
-/
def toFun (x : Proj.T| pbo f) : Spec.T A‚Å∞_ f :=
  ‚ü®carrier x, carrier_ne_top x, fun {x1 x2} hx12 => by
    classical
    rw [mem_carrier_iff] at hx12
    let J := span ((algebraMap A (Away f) : A ‚Üí (Away f)) '' x.val.asHomogeneousIdeal)
    suffices h : ‚àÄ x y : Localization.Away f, x * y ‚àà J ‚Üí x ‚àà J ‚à® y ‚àà J
    ¬∑ rw [HomogeneousLocalization.mul_val] at hx12; exact h x1.val x2.val hx12
    clear x1 x2 hx12
    intro x1 x2 hx12
    induction' x1 using Localization.induction_on with data_x1
    induction' x2 using Localization.induction_on with data_x2
    rcases data_x1, data_x2 with ‚ü®‚ü®a1, _, ‚ü®n1, rfl‚ü©‚ü©, ‚ü®a2, _, ‚ü®n2, rfl‚ü©‚ü©‚ü©
    rcases MemCarrier.clear_denominator' x hx12 with ‚ü®c, N, acd, eq1‚ü©
    simp only [Algebra.smul_def] at eq1
    change Localization.mk (f ^ N) 1 * (Localization.mk _ _ * Localization.mk _ _)
      = Localization.mk _ _ at eq1
    simp only [Localization.mk_mul, one_mul] at eq1
    simp only [mk_eq_mk', IsLocalization.eq] at eq1
    rcases eq1 with ‚ü®‚ü®_, ‚ü®M, rfl‚ü©‚ü©, eq1‚ü©
    rw [Submonoid.coe_one, one_mul] at eq1
    change f ^ _ * (_ * _) = f ^ _ * (f ^ _ * f ^ _ * _) at eq1
    have that : a1 * a2 * f ^ N * f ^ M ‚àà x.val.asHomogeneousIdeal.toIdeal := ?_
    rcases x.1.isPrime.mem_or_mem (show a1 * a2 * f ^ N * f ^ M ‚àà _ from that) with (h1 | rid2)
    rcases x.1.isPrime.mem_or_mem h1 with (h1 | rid1)
    rcases x.1.isPrime.mem_or_mem h1 with (h1 | h2)
    ¬∑ left;
      simp only [show (Localization.mk a1 ‚ü®f ^ n1, _‚ü© : Away f) =
        Localization.mk a1 1 * Localization.mk 1 (‚ü®f ^ n1, ‚ü®n1, rfl‚ü©‚ü© : Submonoid.powers f) by
          rw [Localization.mk_mul, mul_one, one_mul]]
      exact Ideal.mul_mem_right _ _ (Ideal.subset_span ‚ü®_, h1, rfl‚ü©)
    ¬∑ right;
      simp only [show (mk a2 ‚ü®f ^ n2, _‚ü© : Away f) =
        mk a2 1 * Localization.mk 1 (‚ü®f ^ n2, ‚ü®n2, rfl‚ü©‚ü© : Submonoid.powers f) by
          rw [Localization.mk_mul, mul_one, one_mul]]
      exact Ideal.mul_mem_right _ _ (Ideal.subset_span ‚ü®_, h2, rfl‚ü©)
    ¬∑ exact False.elim (x.2 (x.1.isPrime.mem_of_pow_mem N rid1))
    ¬∑ exact False.elim (x.2 (x.1.isPrime.mem_of_pow_mem M rid2))
    ¬∑ rw [‚Üê mul_comm (f ^ M), ‚Üê mul_comm (f ^ N), eq1]
      refine' mul_mem_left _ _ (mul_mem_left _ _ (sum_mem _ fun i _ => mul_mem_left _ _ _))
      generalize_proofs h‚ÇÅ h‚ÇÇ; exact (Classical.choose_spec h‚ÇÇ).1‚ü©
#align algebraic_geometry.Proj_iso_Spec_Top_component.to_Spec.to_fun AlgebraicGeometry.ProjIsoSpecTopComponent.ToSpec.toFun

/-
The preimage of basic open set `D(a/f^n)` in `Spec A‚Å∞_f` under the forward map from `Proj A` to
`Spec A‚Å∞_f` is the basic open set `D(a) ‚à© D(f)` in `Proj A`. This lemma is used to prove that the
forward map is continuous.
-/
theorem preimage_eq (a b : A) (k : ‚Ñï) (a_mem : a ‚àà ùíú k) (b_mem1 : b ‚àà ùíú k)
    (b_mem2 : b ‚àà Submonoid.powers f) :
    toFun f ‚Åª¬π'
        (@PrimeSpectrum.basicOpen (A‚Å∞_ f) _ (Quotient.mk'' ‚ü®k, ‚ü®a, a_mem‚ü©, ‚ü®b, b_mem1‚ü©, b_mem2‚ü©) :
          Set (PrimeSpectrum (HomogeneousLocalization.Away ùíú f))) =
      {x | x.1 ‚àà (pbo f) ‚äì pbo a} := by
  classical
  ext1 y
  constructor <;> intro hy
  ¬∑ refine' ‚ü®y.2, _‚ü©
    rw [Set.mem_preimage, SetLike.mem_coe, PrimeSpectrum.mem_basicOpen] at hy
    rw [ProjectiveSpectrum.mem_coe_basicOpen]
    intro a_mem_y
    apply hy
    rw [toFun, mem_carrier_iff, HomogeneousLocalization.val_mk'', Subtype.coe_mk]
    dsimp; rcases b_mem2 with ‚ü®k, hk‚ü©
    dsimp at hk
    simp only [show (mk a ‚ü®b, ‚ü®k, hk‚ü©‚ü© : Away f) =
      Localization.mk 1 (‚ü®f ^ k, ‚ü®_, rfl‚ü©‚ü© : Submonoid.powers f) * mk a 1 by
        rw [mk_mul, one_mul, mul_one]; congr; rw [hk]]
    exact Ideal.mul_mem_left _ _ (Ideal.subset_span ‚ü®_, a_mem_y, rfl‚ü©)
  ¬∑ change y.1 ‚àà ProjectiveSpectrum.basicOpen ùíú f ‚äì ProjectiveSpectrum.basicOpen ùíú a at hy
    rcases hy with ‚ü®hy1, hy2‚ü©
    rw [ProjectiveSpectrum.mem_coe_basicOpen] at hy1 hy2
    rw [Set.mem_preimage, toFun, SetLike.mem_coe, PrimeSpectrum.mem_basicOpen]
    intro rid; dsimp at rid
    rcases MemCarrier.clear_denominator _ rid with ‚ü®c, N, acd, eq1‚ü©
    rw [Algebra.smul_def] at eq1
    change Localization.mk (f ^ N) 1 * Localization.mk _ _ = Localization.mk _ _ at eq1
    rw [mk_mul, one_mul, mk_eq_mk', IsLocalization.eq] at eq1
    rcases eq1 with ‚ü®‚ü®_, ‚ü®M, rfl‚ü©‚ü©, eq1‚ü©
    rw [Submonoid.coe_one, one_mul] at eq1
    simp only [Subtype.coe_mk] at eq1
    have : a * f ^ N * f ^ M ‚àà y.val.asHomogeneousIdeal.toIdeal := by
      rw [mul_comm _ (f ^ N), mul_comm _ (f ^ M), eq1]
      refine' mul_mem_left _ _ (mul_mem_left _ _ (sum_mem _ fun i _ => mul_mem_left _ _ _))
      generalize_proofs h‚ÇÅ h‚ÇÇ; exact (Classical.choose_spec h‚ÇÇ).1
    rcases y.1.isPrime.mem_or_mem this with (H1 | H3)
    rcases y.1.isPrime.mem_or_mem H1 with (H1 | H2)
    ¬∑ exact hy2 H1
    ¬∑ exact y.2 (y.1.isPrime.mem_of_pow_mem N H2)
    ¬∑ exact y.2 (y.1.isPrime.mem_of_pow_mem M H3)
#align algebraic_geometry.Proj_iso_Spec_Top_component.to_Spec.preimage_eq AlgebraicGeometry.ProjIsoSpecTopComponent.ToSpec.preimage_eq

end ToSpec

section

variable {ùíú}

/-- The continuous function between the basic open set `D(f)` in `Proj` to the corresponding basic
open set in `Spec A‚Å∞_f`.
-/
def toSpec {f : A} : (Proj.T| pbo f) ‚ü∂ Spec.T A‚Å∞_ f where
  toFun := ToSpec.toFun f
  continuous_toFun := by
    rw [PrimeSpectrum.isTopologicalBasis_basic_opens.continuous_iff]
    rintro _ ‚ü®‚ü®k, ‚ü®a, ha‚ü©, ‚ü®b, hb1‚ü©, ‚ü®k', hb2‚ü©‚ü©, rfl‚ü©; dsimp
    erw [ToSpec.preimage_eq f a b k ha hb1 ‚ü®k', hb2‚ü©]
    refine' isOpen_induced_iff.mpr ‚ü®(pbo f).1 ‚äì (pbo a).1, IsOpen.inter (pbo f).2 (pbo a).2, _‚ü©
    ext z; constructor
    ¬∑ intro hz; simpa [Set.mem_preimage]
    ¬∑ intro hz; simpa only [Set.inf_eq_inter,Set.mem_inter_iff,Set.mem_preimage]
#align algebraic_geometry.Proj_iso_Spec_Top_component.to_Spec AlgebraicGeometry.ProjIsoSpecTopComponent.toSpec

end

namespace FromSpec

open GradedAlgebra SetLike

open Finset hiding mk_zero

-- Porting note: _root_ doesn't work here
open HomogeneousLocalization

variable {ùíú} {f : A} {m : ‚Ñï} (f_deg : f ‚àà ùíú m)

open Lean Meta Elab Tactic

macro "mem_tac_aux" : tactic =>
  `(tactic| first | exact pow_mem_graded _ (Submodule.coe_mem _) | exact nat_cast_mem_graded _ _ |
    exact pow_mem_graded _ f_deg)

macro "mem_tac" : tactic =>
  `(tactic| first | mem_tac_aux |
    repeat (all_goals (apply SetLike.GradedMonoid.toGradedMul.mul_mem)); mem_tac_aux)

/-- The function from `Spec A‚Å∞_f` to `Proj|D(f)` is defined by `q ‚Ü¶ {a | a·µ¢·µê/f‚Å± ‚àà q}`, i.e. sending
`q` a prime ideal in `A‚Å∞_f` to the homogeneous prime relevant ideal containing only and all the
elements `a : A` such that for every `i`, the degree 0 element formed by dividing the `m`-th power
of the `i`-th projection of `a` by the `i`-th power of the degree-`m` homogeneous element `f`,
lies in `q`.

The set `{a | a·µ¢·µê/f‚Å± ‚àà q}`
* is an ideal, as proved in `carrier.asIdeal`;
* is homogeneous, as proved in `carrier.asHomogeneousIdeal`;
* is prime, as proved in `carrier.asIdeal.prime`;
* is relevant, as proved in `carrier.relevant`.
-/
def carrier (q : Spec.T A‚Å∞_ f) : Set A :=
  {a | ‚àÄ i, (Quotient.mk'' ‚ü®m * i, ‚ü®proj ùíú i a ^ m, by mem_tac‚ü©,
              ‚ü®f ^ i, by rw [mul_comm]; mem_tac‚ü©, ‚ü®_, rfl‚ü©‚ü© : A‚Å∞_ f) ‚àà q.1}
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier

theorem mem_carrier_iff (q : Spec.T A‚Å∞_ f) (a : A) :
    a ‚àà carrier f_deg q ‚Üî ‚àÄ i, (Quotient.mk'' ‚ü®m * i, ‚ü®proj ùíú i a ^ m, by mem_tac‚ü©,
      ‚ü®f ^ i, by rw [mul_comm]; mem_tac‚ü©, ‚ü®_, rfl‚ü©‚ü© : A‚Å∞_ f) ‚àà q.1 :=
  Iff.rfl
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.mem_carrier_iff AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.mem_carrier_iff

theorem mem_carrier_iff' (q : Spec.T A‚Å∞_ f) (a : A) :
    a ‚àà carrier f_deg q ‚Üî
      ‚àÄ i, (Localization.mk (proj ùíú i a ^ m) ‚ü®f ^ i, ‚ü®i, rfl‚ü©‚ü© : Localization.Away f) ‚àà
          algebraMap (HomogeneousLocalization.Away ùíú f) (Localization.Away f) '' { s | s ‚àà q.1 } :=
  (mem_carrier_iff f_deg q a).trans
    (by
      constructor <;> intro h i <;> specialize h i
      ¬∑ rw [Set.mem_image]; refine' ‚ü®_, h, rfl‚ü©
      ¬∑ rw [Set.mem_image] at h; rcases h with ‚ü®x, h, hx‚ü©
        change x ‚àà q.asIdeal at h
        convert h
        rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.val_mk'']
        dsimp only [Subtype.coe_mk]; rw [‚Üê hx]; rfl)
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.mem_carrier_iff' AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.mem_carrier_iff'

theorem carrier.add_mem (q : Spec.T A‚Å∞_ f) {a b : A} (ha : a ‚àà carrier f_deg q)
    (hb : b ‚àà carrier f_deg q) : a + b ‚àà carrier f_deg q := by
  refine' fun i => (q.2.mem_or_mem _).elim id id
  change (Quotient.mk'' ‚ü®_, _, _, _‚ü© : A‚Å∞_ f) ‚àà q.1; dsimp only [Subtype.coe_mk]
  simp_rw [‚Üê pow_add, map_add, add_pow, mul_comm, ‚Üê nsmul_eq_mul]
  let g : ‚Ñï ‚Üí A‚Å∞_ f := fun j => (m + m).choose j ‚Ä¢
      if h2 : m + m < j then (0 : A‚Å∞_ f)
      else
        -- Porting note: inlining `l`, `r` causes a "can't synth HMul A‚Å∞_ f A‚Å∞_ f ?" error
        if h1 : j ‚â§ m then
          letI l : A‚Å∞_ f := Quotient.mk''
            ‚ü®m * i, ‚ü®proj ùíú i a ^ j * proj ùíú i b ^ (m - j), ?_‚ü©,
              ‚ü®_, by rw [mul_comm]; mem_tac‚ü©, ‚ü®i, rfl‚ü©‚ü©
          letI r : A‚Å∞_ f := Quotient.mk''
            ‚ü®m * i, ‚ü®proj ùíú i b ^ m, by mem_tac‚ü©,
              ‚ü®_, by rw [mul_comm]; mem_tac‚ü©, ‚ü®i, rfl‚ü©‚ü©
          l * r
        else
          letI l : A‚Å∞_ f := Quotient.mk''
            ‚ü®m * i, ‚ü®proj ùíú i a ^ m, by mem_tac‚ü©,
              ‚ü®_, by rw [mul_comm]; mem_tac‚ü©, ‚ü®i, rfl‚ü©‚ü©
          letI r : A‚Å∞_ f := Quotient.mk''
            ‚ü®m * i, ‚ü®proj ùíú i a ^ (j - m) * proj ùíú i b ^ (m + m - j), ?_‚ü©,
              ‚ü®_, by rw [mul_comm]; mem_tac‚ü©, ‚ü®i, rfl‚ü©‚ü©
          l * r
  rotate_left
  ¬∑ rw [(_ : m * i = _)]
    -- Porting note: it seems unification with mul_mem is more fiddly reducing value of mem_tac
    apply GradedMonoid.toGradedMul.mul_mem (i := j ‚Ä¢ i) (j := (m - j) ‚Ä¢ i) <;> mem_tac_aux
    rw [‚Üê add_smul, Nat.add_sub_of_le h1]; rfl
  ¬∑ rw [(_ : m * i = _)]
    apply GradedMonoid.toGradedMul.mul_mem (i := (j-m) ‚Ä¢ i) (j := (m + m - j) ‚Ä¢ i) <;> mem_tac_aux
    rw [‚Üê add_smul]; congr; zify [le_of_not_lt h2, le_of_not_le h1]; abel
  convert_to ‚àë i in range (m + m + 1), g i ‚àà q.1; swap
  ¬∑ refine' q.1.sum_mem fun j _ => nsmul_mem _ _; split_ifs
    exacts [q.1.zero_mem, q.1.mul_mem_left _ (hb i), q.1.mul_mem_right _ (ha i)]
  rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.val_mk'']
  change _ = (algebraMap (HomogeneousLocalization.Away ùíú f) (Localization.Away f)) _
  dsimp only [Subtype.coe_mk]; rw [map_sum, mk_sum]
  apply Finset.sum_congr rfl fun j hj => _
  intro j hj
  change _ = HomogeneousLocalization.val _
  rw [HomogeneousLocalization.smul_val]
  split_ifs with h2 h1
  ¬∑ exact ((Finset.mem_range.1 hj).not_le h2).elim
  all_goals simp only [HomogeneousLocalization.mul_val, HomogeneousLocalization.zero_val,
    HomogeneousLocalization.val_mk'', Subtype.coe_mk, mk_mul, ‚Üê smul_mk]; congr 2
  ¬∑ dsimp; rw [mul_assoc, ‚Üê pow_add, add_comm (m - j), Nat.add_sub_assoc h1]
  ¬∑ simp_rw [pow_add]; rfl
  ¬∑ dsimp; rw [‚Üê mul_assoc, ‚Üê pow_add, Nat.add_sub_of_le (le_of_not_le h1)]
  ¬∑ simp_rw [pow_add]; rfl
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.add_mem AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.add_mem

variable (hm : 0 < m) (q : Spec.T A‚Å∞_ f)

theorem carrier.zero_mem : (0 : A) ‚àà carrier f_deg q := fun i => by
  convert Submodule.zero_mem q.1 using 1
  rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.val_mk'',
    HomogeneousLocalization.zero_val]; simp_rw [map_zero, zero_pow hm]
  convert Localization.mk_zero (S := Submonoid.powers f) _ using 1
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.zero_mem AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.zero_mem

theorem carrier.smul_mem (c x : A) (hx : x ‚àà carrier f_deg q) : c ‚Ä¢ x ‚àà carrier f_deg q := by
  revert c
  refine' DirectSum.Decomposition.inductionOn ùíú _ _ _
  ¬∑ rw [zero_smul]; exact carrier.zero_mem f_deg hm _
  ¬∑ rintro n ‚ü®a, ha‚ü© i
    simp_rw [proj_apply, smul_eq_mul, coe_decompose_mul_of_left_mem ùíú i ha]
    -- Porting note: having trouble with Mul instance
    let product : A‚Å∞_ f :=
      Mul.mul (Quotient.mk'' ‚ü®_, ‚ü®a ^ m, pow_mem_graded m ha‚ü©, ‚ü®_, ?_‚ü©, ‚ü®n, rfl‚ü©‚ü© : A‚Å∞_ f)
          (Quotient.mk'' ‚ü®_, ‚ü®proj ùíú (i - n) x ^ m, by mem_tac‚ü©, ‚ü®_, ?_‚ü©, ‚ü®i - n, rfl‚ü©‚ü© : A‚Å∞_ f)
    split_ifs with h
    ¬∑ convert_to product ‚àà q.1
      ¬∑ dsimp
        erw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.val_mk'',
          HomogeneousLocalization.mul_val, HomogeneousLocalization.val_mk'',
          HomogeneousLocalization.val_mk'']
        simp_rw [mul_pow]; rw [Localization.mk_mul]
        congr; erw [‚Üê pow_add, Nat.add_sub_of_le h]
        ¬∑ rw [(_ : m ‚Ä¢ n = _)]; mem_tac; simp only [smul_eq_mul, mul_comm]
        ¬∑ rw [(_ : m ‚Ä¢ (i - n) = _)]; mem_tac; simp only [smul_eq_mul, mul_comm]
      ¬∑ apply Ideal.mul_mem_left (Œ± := A‚Å∞_ f) _ _ (hx _)
    ¬∑ simp_rw [zero_pow hm]; convert carrier.zero_mem f_deg hm q i; rw [map_zero, zero_pow hm]
  ¬∑ simp_rw [add_smul]; exact fun _ _ => carrier.add_mem f_deg q
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.smul_mem AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.smul_mem

/-- For a prime ideal `q` in `A‚Å∞_f`, the set `{a | a·µ¢·µê/f‚Å± ‚àà q}` as an ideal.
-/
def carrier.asIdeal : Ideal A where
  carrier := carrier f_deg q
  zero_mem' := carrier.zero_mem f_deg hm q
  add_mem' := carrier.add_mem f_deg q
  smul_mem' := carrier.smul_mem f_deg hm q
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.as_ideal AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.asIdeal


theorem carrier.asIdeal.homogeneous : (carrier.asIdeal f_deg hm q).IsHomogeneous ùíú :=
  fun i a ha j =>
  (em (i = j)).elim (fun h => h ‚ñ∏ by simpa only [proj_apply, decompose_coe, of_eq_same] using ha _)
    fun h => by
    simp only [proj_apply, decompose_of_mem_ne ùíú (Submodule.coe_mem (decompose ùíú a i)) h,
      zero_pow hm]
    convert carrier.zero_mem f_deg hm q j; rw [map_zero, zero_pow hm]
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.as_ideal.homogeneous AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.asIdeal.homogeneous

/-- For a prime ideal `q` in `A‚Å∞_f`, the set `{a | a·µ¢·µê/f‚Å± ‚àà q}` as a homogeneous ideal.
-/
def carrier.asHomogeneousIdeal : HomogeneousIdeal ùíú :=
  ‚ü®carrier.asIdeal f_deg hm q, carrier.asIdeal.homogeneous f_deg hm q‚ü©
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.as_homogeneous_ideal AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.asHomogeneousIdeal

theorem carrier.denom_not_mem : f ‚àâ carrier.asIdeal f_deg hm q := fun rid =>
  q.IsPrime.ne_top <|
    (Ideal.eq_top_iff_one _).mpr
      (by
        convert rid m
        rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.one_val,
          HomogeneousLocalization.val_mk'']
        dsimp
        simp_rw [decompose_of_mem_same _ f_deg]
        simp only [mk_eq_monoidOf_mk', Submonoid.LocalizationMap.mk'_self])
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.denom_not_mem AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.denom_not_mem

theorem carrier.relevant : ¬¨HomogeneousIdeal.irrelevant ùíú ‚â§ carrier.asHomogeneousIdeal f_deg hm q :=
  fun rid => carrier.denom_not_mem f_deg hm q <| rid <| DirectSum.decompose_of_mem_ne ùíú f_deg hm.ne'
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.relevant AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.relevant

theorem carrier.asIdeal.ne_top : carrier.asIdeal f_deg hm q ‚â† ‚ä§ := fun rid =>
  carrier.denom_not_mem f_deg hm q (rid.symm ‚ñ∏ Submodule.mem_top)
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.as_ideal.ne_top AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.asIdeal.ne_top

theorem carrier.asIdeal.prime : (carrier.asIdeal f_deg hm q).IsPrime :=
  (carrier.asIdeal.homogeneous f_deg hm q).isPrime_of_homogeneous_mem_or_mem
    (carrier.asIdeal.ne_top f_deg hm q) fun {x y} ‚ü®nx, hnx‚ü© ‚ü®ny, hny‚ü© hxy =>
    show (‚àÄ i, _ ‚àà _) ‚à® ‚àÄ i, _ ‚àà _ by
      rw [‚Üê and_forall_ne nx, and_iff_left, ‚Üê and_forall_ne ny, and_iff_left]
      ¬∑ apply q.2.mem_or_mem; convert hxy (nx + ny) using 1
        dsimp
        simp_rw [decompose_of_mem_same ùíú hnx, decompose_of_mem_same ùíú hny,
          decompose_of_mem_same ùíú (SetLike.GradedMonoid.toGradedMul.mul_mem hnx hny),
          mul_pow, pow_add]
        simp only [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.val_mk'',
          HomogeneousLocalization.mul_val, mk_mul]
        simp only [Submonoid.mk_mul_mk, mk_eq_monoidOf_mk']
      all_goals
        intro n hn; convert q.1.zero_mem using 1
        rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.val_mk'',
          HomogeneousLocalization.zero_val]; simp_rw [proj_apply]
        convert mk_zero (S := Submonoid.powers f) _
        rw [decompose_of_mem_ne ùíú _ hn.symm, zero_pow hm]
        ¬∑ first | exact hnx | exact hny
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.carrier.as_ideal.prime AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.carrier.asIdeal.prime

/-- The function `Spec A‚Å∞_f ‚Üí Proj|D(f)` by sending `q` to `{a | a·µ¢·µê/f‚Å± ‚àà q}`.
-/
def toFun : (Spec.T A‚Å∞_ f) ‚Üí Proj.T| pbo f := fun q =>
  ‚ü®‚ü®carrier.asHomogeneousIdeal f_deg hm q, carrier.asIdeal.prime f_deg hm q,
      carrier.relevant f_deg hm q‚ü©,
    (ProjectiveSpectrum.mem_basicOpen _ f _).mp <| carrier.denom_not_mem f_deg hm q‚ü©
#align algebraic_geometry.Proj_iso_Spec_Top_component.from_Spec.to_fun AlgebraicGeometry.ProjIsoSpecTopComponent.FromSpec.toFun

end FromSpec

section toSpecFromSpec

lemma toSpecFromSpec {f : A} {m : ‚Ñï} (hm : 0 < m) (f_deg : f ‚àà ùíú m) (x : Spec.T (A‚Å∞_ f)) :
    toSpec (FromSpec.toFun f_deg hm x) = x := show _ = (_ : PrimeSpectrum _) by
  ext (z : A‚Å∞_ f); fconstructor <;> intro hz
  ¬∑ change z ‚àà ToSpec.carrier _ at hz
    erw [ToSpec.carrier_eq_span, mem_span_set] at hz
    obtain ‚ü®c, support_le, rfl‚ü© := hz
    refine Ideal.sum_mem _ fun j hj ‚Ü¶ Ideal.mul_mem_left _ _ ?_
    obtain ‚ü®s, _, hs, n, s_mem, F_mem, ‚ü®k, rfl‚ü©, rfl‚ü© := support_le hj
    refine x.IsPrime.mem_of_pow_mem m <| show Quotient.mk'' ‚ü®_, ‚ü®s^m, _‚ü©, _, _‚ü© ‚àà x.asIdeal from ?_
    convert hs n using 1
    rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.val_mk'',
      HomogeneousLocalization.val_mk'']
    simp only [smul_eq_mul, SetLike.coe_gnpow, GradedAlgebra.proj_apply,
      DirectSum.decompose_of_mem_same ùíú s_mem]
    by_cases ineq : f^k = 0
    ¬∑ have := IsLocalization.uniqueOfZeroMem (M := Submonoid.powers f) (S := Localization.Away f)
        ‚ü®k, ineq‚ü©
      exact Subsingleton.elim _ _
    ¬∑ simp_rw [‚Üê pow_mul]; congr
      exact DirectSum.degree_eq_of_mem_mem ùíú F_mem (SetLike.pow_mem_graded k f_deg) ineq |>.symm

  ¬∑ erw [ToSpec.mem_carrier_iff]
    obtain ‚ü®k, (k_spec : f^k = z.den)‚ü© := z.den_mem
    rw [show z.val = (Localization.mk z.num ‚ü®f^k, ‚ü®k, rfl‚ü©‚ü© : Away f) by
        ¬∑ rw [z.eq_num_div_den]; congr; exact k_spec.symm,
      show (mk z.num ‚ü®f^k, ‚ü®k, rfl‚ü©‚ü© : Away f) = mk z.num 1 * (mk 1 ‚ü®f^k, ‚ü®k, rfl‚ü©‚ü© : Away f) by
        ¬∑ rw [mk_mul, mul_one, one_mul]]
    refine Ideal.mul_mem_right _ _ <| Ideal.subset_span ‚ü®z.num, ?_, rfl‚ü©

    intro j
    by_cases ineq : z.deg = j
    ¬∑ subst ineq
      simp only [CommRingCat.coe_of, GradedAlgebra.proj_apply,
        DirectSum.decompose_of_mem_same ùíú z.num_mem_deg]
      convert x.IsPrime.pow_mem_iff_mem m hm |>.mpr hz using 1
      rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.val_mk'',
        HomogeneousLocalization.pow_val, z.eq_num_div_den, Localization.mk_pow]
      by_cases ineq : f^k = 0
      ¬∑ have := IsLocalization.uniqueOfZeroMem (M := Submonoid.powers f) (S := Localization.Away f)
          ‚ü®k, ineq‚ü©
        exact Subsingleton.elim _ _
      ¬∑ dsimp; congr 2
        rw [‚Üê k_spec, ‚Üê pow_mul, show z.deg = k * m from
          degree_eq_of_mem_mem ùíú (k_spec ‚ñ∏ z.den_mem_deg) (SetLike.pow_mem_graded k f_deg) ineq]
    ¬∑ simp only [CommRingCat.coe_of, GradedAlgebra.proj_apply, zero_pow hm,
        DirectSum.decompose_of_mem_ne ùíú z.num_mem_deg ineq]
      convert x.asIdeal.zero_mem
      rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.val_mk'',
        HomogeneousLocalization.zero_val, Localization.mk_zero]

end toSpecFromSpec

section fromSpecToSpec

lemma fromSpecToSpec {f : A} {m : ‚Ñï} (hm : 0 < m) (f_deg : f ‚àà ùíú m) (x : Proj.T| pbo f) :
    FromSpec.toFun f_deg hm (toSpec x) = x := by
  classical
  refine Subtype.ext <| ProjectiveSpectrum.ext _ _ <| HomogeneousIdeal.ext <| Ideal.ext fun z ‚Ü¶ ?_
  fconstructor <;> intro hz
  ¬∑ rw [‚Üê DirectSum.sum_support_decompose ùíú z]
    refine Ideal.sum_mem _ fun i _ ‚Ü¶ ?_
    specialize hz i
    obtain ‚ü®c, N, acd, eq1‚ü© := ToSpec.MemCarrier.clear_denominator x hz
    rw [HomogeneousLocalization.val_mk'', smul_mk, ‚Üê mk_one_eq_algebraMap, mk_eq_mk_iff,
      r_iff_exists, OneMemClass.coe_one, one_mul] at eq1
    obtain ‚ü®‚ü®_, ‚ü®k, rfl‚ü©‚ü©, eq1‚ü© := eq1
    dsimp at eq1
    rw [‚Üê mul_assoc, ‚Üê mul_assoc, ‚Üê pow_add, ‚Üê pow_add] at eq1
    suffices mem : f^(k + i) * ‚àë i in c.support.attach, acd (c i) _ * _ ‚àà x.1.asHomogeneousIdeal
    ¬∑ exact x.1.isPrime.mem_of_pow_mem _ <| x.1.isPrime.mem_or_mem (eq1.symm ‚ñ∏ mem)
        |>.resolve_left fun r ‚Ü¶ ProjectiveSpectrum.mem_basicOpen ùíú _ _
        |>.mp x.2 <| x.1.isPrime.mem_of_pow_mem _ r
    exact Ideal.mul_mem_left _ _ <| Ideal.sum_mem _ fun i _ ‚Ü¶
      Ideal.mul_mem_left _ _ i.1.2.choose_spec.1

  ¬∑ intro i
    erw [ToSpec.mem_carrier_iff, HomogeneousLocalization.val_mk'']
    dsimp only [GradedAlgebra.proj_apply]
    rw [show (mk (decompose ùíú z i ^ m) ‚ü®f^i, ‚ü®i, rfl‚ü©‚ü©: Away f) =
      (decompose ùíú z i ^ m : A) ‚Ä¢ (mk 1 ‚ü®f^i, ‚ü®i, rfl‚ü©‚ü© : Away f) by
      ¬∑ rw [smul_mk, smul_eq_mul, mul_one], Algebra.smul_def]
    exact Ideal.mul_mem_right _ _ <|
      Ideal.subset_span ‚ü®_, ‚ü®Ideal.pow_mem_of_mem _ (x.1.asHomogeneousIdeal.2 i hz) _ hm, rfl‚ü©‚ü©

lemma toSpec_injective {f : A} {m : ‚Ñï} (hm : 0 < m) (f_deg : f ‚àà ùíú m):
    Function.Injective (toSpec (ùíú := ùíú) (f := f)) := by
  intro x‚ÇÅ x‚ÇÇ h
  have := congr_arg (FromSpec.toFun f_deg hm) h
  rwa [fromSpecToSpec, fromSpecToSpec] at this

lemma toSpec_surjective {f : A} {m : ‚Ñï} (hm : 0 < m) (f_deg : f ‚àà ùíú m):
    Function.Surjective (toSpec (ùíú := ùíú) (f := f)) :=
  Function.surjective_iff_hasRightInverse |>.mpr
    ‚ü®FromSpec.toFun f_deg hm, toSpecFromSpec ùíú hm f_deg‚ü©

lemma toSpec_bijective {f : A} {m : ‚Ñï} (hm : 0 < m) (f_deg : f ‚àà ùíú m):
    Function.Bijective (toSpec (ùíú := ùíú) (f := f)) :=
  ‚ü®toSpec_injective ùíú hm f_deg, toSpec_surjective ùíú hm f_deg‚ü©

end fromSpecToSpec

variable {ùíú} in
def fromSpec {f : A} {m : ‚Ñï} (hm : 0 < m) (f_deg : f ‚àà ùíú m) :
    (Spec.T (A‚Å∞_ f)) ‚ü∂ (Proj.T| (pbo f)) where
  toFun := FromSpec.toFun f_deg hm
  continuous_toFun :=
    (IsTopologicalBasis.continuous_iff <|
      IsTopologicalBasis.inducing (Œ± := Proj.T| (pbo f)) (Œ≤ := Proj) (f := Subtype.val)
        (hf := ‚ü®rfl‚ü©) (h := ProjectiveSpectrum.isTopologicalBasis_basic_opens ùíú)).mpr fun s hs ‚Ü¶ by
    erw [Set.mem_preimage] at hs
    obtain ‚ü®_, ‚ü®a, rfl‚ü©, rfl‚ü© := hs
    dsimp only [Spec.locallyRingedSpaceObj_toSheafedSpace, Spec.sheafedSpaceObj_carrier,
      LocallyRingedSpace.restrict_carrier]

    suffices o1 : IsOpen <| toSpec '' (Subtype.val ‚Åª¬π' (pbo a).1 : Set (Proj.T| (pbo f)))
    ¬∑ convert o1
      ext s x
      simp only [Set.mem_preimage, LocallyRingedSpace.restrict_carrier,
        Spec.locallyRingedSpaceObj_toSheafedSpace, Spec.sheafedSpaceObj_carrier, Set.mem_image]
      constructor
      ¬∑ intro h; exact ‚ü®_, h, toSpecFromSpec ùíú hm f_deg _‚ü©
      ¬∑ rintro ‚ü®x, hx', rfl‚ü©; erw [fromSpecToSpec ùíú hm f_deg x]; exact hx'

    rw [calc
      Subtype.val ‚Åª¬π' (pbo a).1
      = {x  : Proj.T| (pbo f) | x.1 ‚àà (pbo f) ‚äì pbo a} := by
        ext ‚ü®x, (hx : x ‚àà ProjectiveSpectrum.basicOpen _ _)‚ü©
        show _ ‚Üî _ ‚àß _
        simp only [ProjectiveSpectrum.mem_basicOpen] at hx
        simp [hx]
    _ = {x | x.1 ‚àà (pbo f) ‚äì (‚®Ü i : ‚Ñï, pbo (decompose ùíú a i))} := by
        simp_rw [ProjectiveSpectrum.basicOpen_eq_union_of_projection ùíú a]
        rfl
    _ = {x | x.1 ‚àà ‚®Ü i : ‚Ñï, (pbo f) ‚äì pbo (decompose ùíú a i)} := by rw [inf_iSup_eq]
    _ = ‚ãÉ i : ‚Ñï, {x | x.1 ‚àà (pbo f) ‚äì pbo (decompose ùíú a i)} := by
      ext x
      simp only [Opens.iSup_mk, Opens.carrier_eq_coe, Opens.coe_inf, Opens.mem_mk, Set.mem_iUnion,
        Set.mem_inter_iff, Set.mem_compl_iff, SetLike.mem_coe]
      rfl, Set.image_iUnion]
    refine isOpen_iUnion fun i ‚Ü¶ ?_

    suffices : toSpec (f := f) '' {x | x.1 ‚àà (pbo f) ‚äì pbo (decompose ùíú a i)} =
      (PrimeSpectrum.basicOpen (R := A‚Å∞_ f) <|
        Quotient.mk'' ‚ü®m * i, ‚ü®decompose ùíú a i ^ m, SetLike.pow_mem_graded _ (Submodule.coe_mem _)‚ü©,
          ‚ü®f^i, by rw [mul_comm]; exact SetLike.pow_mem_graded _ f_deg‚ü©, ‚ü®i, rfl‚ü©‚ü©).1
    ¬∑ erw [this]; exact (PrimeSpectrum.basicOpen _).2

    apply_fun _ using Set.preimage_injective.mpr (toSpec_surjective ùíú hm f_deg)
    erw [Set.preimage_image_eq _ (toSpec_injective ùíú hm f_deg), ToSpec.preimage_eq,
      ProjectiveSpectrum.basicOpen_pow ùíú _ m hm]
    rfl

end ProjIsoSpecTopComponent

variable {ùíú} in
def projIsoSpecTopComponent {f : A} {m : ‚Ñï} (hm : 0 < m) (f_deg : f ‚àà ùíú m) :
    (Proj.T| (pbo f)) ‚âÖ (Spec.T (A‚Å∞_ f))  where
  hom := ProjIsoSpecTopComponent.toSpec
  inv := ProjIsoSpecTopComponent.fromSpec hm f_deg
  hom_inv_id := ConcreteCategory.hom_ext _ _ fun x ‚Ü¶
    ProjIsoSpecTopComponent.fromSpecToSpec ùíú hm f_deg x
  inv_hom_id := ConcreteCategory.hom_ext _ _ fun x ‚Ü¶
    ProjIsoSpecTopComponent.toSpecFromSpec ùíú hm f_deg x

namespace ProjIsoSpecSheafComponent

namespace FromSpec

local notation "œÜ" => (projIsoSpecTopComponent hm.out f_deg.out).hom
local notation "œà" => (projIsoSpecTopComponent hm.out f_deg.out).inv

-- We use `œÜ` denote the homeomorphism `Proj | D(f) ‚âÖ Spec A‚Å∞_f`constructed above.
-- Let `V` be an open set in `Spec A‚Å∞_f`, `s ‚àà (Spec A‚Å∞_f)(V)` be a section on `V` of prime spectrum
-- of `A‚Å∞_f` and `y ‚àà (œÜ‚Åª¬π V)` be a point in `Proj | D(f)`.
variable {ùíú}
variable {m : ‚Ñï} {f : A} [hm : Fact <| 0 < m] [f_deg : Fact <| f ‚àà ùíú m]
variable {V : (Opens <| Spec (A‚Å∞_ f))·µí·µñ}
variable (s : (Spec (A‚Å∞_ f)).presheaf.obj V)
variable (y : ((@Opens.openEmbedding Proj.T (pbo f)).isOpenMap.functor.op.obj <|
  Opens.map œÜ |>.op.obj V).unop)

private lemma _mem_pbo : (y : Proj.T) ‚àà pbo f := by
  obtain ‚ü®‚ü®z, h1‚ü©, _, h2‚ü© := y.2; rwa [‚Üê h2]

private lemma _mem_V : œÜ ‚ü®y, _mem_pbo y‚ü© ‚àà V.unop := by
  obtain ‚ü®y, ‚ü®_, h1, rfl‚ü©‚ü© := y; exact h1

/--
Evaluating a section `s` of `(Spec A‚Å∞_f)(V)` on `œÜ y` where `y ‚àà œÜ‚Åª¬π(V)`
-/
def eval : AlgebraicGeometry.StructureSheaf.Localizations (A‚Å∞_ f) (œÜ ‚ü®y, _mem_pbo y‚ü©) :=
  s.1 ‚ü®œÜ ‚ü®y, _mem_pbo y‚ü©, _mem_V y‚ü©

abbrev eval_num : A‚Å∞_ f := eval s y |>.exists_rep.choose.1

abbrev eval_den : A‚Å∞_ f := eval s y |>.exists_rep.choose.2.1

lemma eval_den_not_mem : eval_den s y ‚àâ (œÜ ‚ü®y, _mem_pbo y‚ü©).asIdeal :=
  eval s y |>.exists_rep.choose.2.2

lemma eval_den_num_not_mem : (eval_den s y).num ‚àâ y.1.asHomogeneousIdeal := by
  intro r
  refine eval_den_not_mem s y ?_
  erw [ProjIsoSpecTopComponent.ToSpec.mem_carrier_iff, (eval_den s y).eq_num_div_den,
    show Localization.mk (eval_den s y).num _ = mk (eval_den s y).num 1 * Localization.mk 1 _ by
      rw [mk_mul, one_mul, mul_one]]
  exact Ideal.mul_mem_right _ _ <| Ideal.subset_span ‚ü®_, r, rfl‚ü©

lemma eval_num_den_not_mem : (eval_num s y).den ‚àâ y.1.asHomogeneousIdeal := by
  let k := (eval_num s y).den_mem.choose
  have hk : (eval_num s y).den = f^k := (eval_num s y).den_mem.choose_spec.symm
  obtain ‚ü®‚ü®a, (h1 : f ‚àâ _)‚ü©, _, (h2 : a = y.1)‚ü© := y.2
  rw [hk, ‚Üê h2]
  intro r
  refine h1 <| a.isPrime.pow_mem_iff_mem _ ?_ |>.mp r
  by_contra! r'
  replace r' : k = 0
  ¬∑ simpa using r'
  erw [r', pow_zero, ‚Üê Ideal.eq_top_iff_one] at r
  exact a.isPrime.ne_top r

lemma eval_eq_num_div_den :
    eval s y =
    Localization.mk (eval_num s y)
      ‚ü®eval_den s y,
        show eval_den s y ‚àà (œÜ ‚ü®y, _‚ü©).asIdeal.primeCompl from eval_den_not_mem s y‚ü© :=
  eval s y |>.exists_rep.choose_spec.symm

lemma eval_pt_congr (x) (h : (œà x.1).1 = y) :
    s.1 x = Localization.mk (eval_num s y) ‚ü®eval_den s y, by
      convert eval_den_not_mem s y
      simp_rw [‚Üê h]
      erw [(projIsoSpecTopComponent _ _).inv_hom_id_apply]
      rfl‚ü© := by
  have pt_eq : x = ‚ü®œÜ ‚ü®y, _mem_pbo _‚ü©, _mem_V y‚ü©
  ¬∑ simp_rw [‚Üê h]
    ext
    dsimp
    erw [(projIsoSpecTopComponent _ _).inv_hom_id_apply]
  cases pt_eq
  exact eval_eq_num_div_den s y

abbrev Œ± : HomogeneousLocalization.AtPrime ùíú y.1.asHomogeneousIdeal.toIdeal :=
  Quotient.mk''
  { deg := (eval_num s y).deg + (eval_den s y).deg
    num := Subtype.mk ((eval_num s y).num * (eval_den s y).den) <|
      SetLike.mul_mem_graded (eval_num s y).num_mem_deg (eval_den s y).den_mem_deg
    den := Subtype.mk ((eval_den s y).num * (eval_num s y).den) <| add_comm (eval_num s y).deg _ ‚ñ∏
      SetLike.mul_mem_graded (eval_den s y).num_mem_deg (eval_num s y).den_mem_deg
    den_mem := fun r ‚Ü¶ y.1.isPrime.mem_or_mem r |>.elim (eval_den_num_not_mem s y)
      (eval_num_den_not_mem s y) }

lemma val_Œ± :
    (Œ± s y).val =
    Localization.mk ((eval_num s y).num * (eval_den s y).den)
      ‚ü®(eval_den s y).num * (eval_num s y).den, by
        exact fun r ‚Ü¶ y.1.isPrime.mem_or_mem r |>.elim
          (eval_den_num_not_mem s y) (eval_num_den_not_mem s y)‚ü© :=
  HomogeneousLocalization.val_mk'' _

lemma Œ±_one : Œ± (m := m) (V := V) 1 = 1 := by
  ext1 y
  rw [Pi.one_apply, HomogeneousLocalization.ext_iff_val, val_Œ±, HomogeneousLocalization.one_val,
    show (1 : Localization.AtPrime y.1.asHomogeneousIdeal.toIdeal) = Localization.mk 1 1 from
    Localization.mk_self 1 |>.symm, mk_eq_mk_iff, r_iff_exists]
  have eq1 : _ = 1 := eval_eq_num_div_den 1 y |>.symm
  rw [show (1 : Localization.AtPrime (œÜ ‚ü®y, _‚ü©).asIdeal) = Localization.mk 1 1 from
    Localization.mk_self 1 |>.symm, mk_eq_mk_iff, r_iff_exists] at eq1
  obtain ‚ü®‚ü®C, (hC : C ‚àâ ProjIsoSpecTopComponent.ToSpec.carrier _)‚ü©, eq1‚ü© := eq1
  simp only [one_mul, mul_one, Submonoid.coe_one] at eq1 ‚ä¢
  rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.mul_val,
    HomogeneousLocalization.mul_val, C.eq_num_div_den, (eval_num 1 y).eq_num_div_den,
    (eval_den 1 y).eq_num_div_den, mk_mul, mk_mul, mk_eq_mk_iff, r_iff_exists] at eq1
  obtain ‚ü®‚ü®_, ‚ü®n, rfl‚ü©‚ü©, eq1‚ü© := eq1
  dsimp at eq1
  rw [show ‚àÄ a b c d e: A, a * (b * c * (d * e)) = (a * b * d) * (e * c) by intros; ring,
    show ‚àÄ a b c d e: A, a * (b * c * (d * e)) = (a * b * d) * (e * c) by intros; ring,
    show C.den = f^_ from C.den_mem.choose_spec.symm, ‚Üê pow_add] at eq1
  exact ‚ü®‚ü®_, ProjIsoSpecTopComponent.ToSpec.pow_mul_num_not_mem_of_not_mem_carrier _ _ hC _‚ü©, eq1‚ü©

lemma Œ±_zero : Œ± (m := m) (V := V) 0 = 0 := by
  ext1 y
  rw [Pi.zero_apply, HomogeneousLocalization.ext_iff_val, val_Œ±, HomogeneousLocalization.zero_val,
    show (0 : Localization.AtPrime y.1.asHomogeneousIdeal.toIdeal) = Localization.mk 0 1 from
    Localization.mk_zero 1 |>.symm, mk_eq_mk_iff, r_iff_exists]
  have eq1 : _ = 0 := eval_eq_num_div_den 0 y |>.symm
  rw [show (0 : Localization.AtPrime (œÜ ‚ü®y, _‚ü©).asIdeal) = Localization.mk 0 1 from
    Localization.mk_zero 1 |>.symm, mk_eq_mk_iff, r_iff_exists] at eq1
  simp only [one_mul, mul_one, Submonoid.coe_one, mul_zero] at eq1 ‚ä¢
  obtain ‚ü®‚ü®C, hC‚ü©, eq1‚ü© := eq1
  dsimp at eq1
  rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.zero_val,
    HomogeneousLocalization.mul_val, C.eq_num_div_den, (eval_num 0 y).eq_num_div_den, mk_mul,
    show (0 : Localization.Away f) = Localization.mk 0 1 from Localization.mk_zero 1 |>.symm,
    mk_eq_mk_iff, r_iff_exists] at eq1
  obtain ‚ü®‚ü®_, ‚ü®n, rfl‚ü©‚ü©, eq1‚ü© := eq1
  simp only [OneMemClass.coe_one, one_mul, Submonoid.mk_mul_mk, mul_zero] at eq1
  rw [‚Üê mul_assoc] at eq1
  exact ‚ü®‚ü®f^n * C.num,
    ProjIsoSpecTopComponent.ToSpec.pow_mul_num_not_mem_of_not_mem_carrier _ _ hC _‚ü©,
    by erw [‚Üê mul_assoc, eq1, zero_mul]‚ü©

lemma Œ±_add (x y : (Spec (A‚Å∞_ f)).presheaf.obj V) : Œ± (m := m) (V := V) (x + y) = Œ± x + Œ± y := by
  ext1 z
  rw [Pi.add_apply, HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.add_val, val_Œ±,
    val_Œ±, val_Œ±, add_mk, mk_eq_mk_iff, r_iff_exists]
  have eq1 := eval_eq_num_div_den (m := m) (V := V) (x + y) z
  rw [show eval (m := m) (V := V) (x + y) z = eval x z + eval y z from rfl,
    eval_eq_num_div_den, eval_eq_num_div_den, add_mk, mk_eq_mk_iff, r_iff_exists] at eq1
  obtain ‚ü®‚ü®C, hC‚ü©, eq1‚ü© := eq1
  dsimp only [Submonoid.coe_mul] at eq1 ‚ä¢
  simp only [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.mul_val,
    HomogeneousLocalization.add_val] at eq1
  simp only [HomogeneousLocalization.eq_num_div_den, mk_mul, add_mk, Submonoid.mk_mul_mk] at eq1
  rw [mk_eq_mk_iff, r_iff_exists] at eq1
  obtain ‚ü®‚ü®_, ‚ü®n, rfl‚ü©‚ü©, eq1‚ü© := eq1
  dsimp only at eq1
  refine ‚ü®‚ü®(f^n * C.den * (eval_den x z).den * (eval_den y z).den * C.num), ?_‚ü©, ?_‚ü©
  ¬∑ rw [show C.den = f^_ from C.den_mem.choose_spec.symm,
      show (eval_den x z).den = f^_ from (eval_den x z).den_mem.choose_spec.symm,
      show (eval_den y z).den = f^_ from (eval_den y z).den_mem.choose_spec.symm,
      ‚Üê pow_add, ‚Üê pow_add, ‚Üê pow_add]
    exact ProjIsoSpecTopComponent.ToSpec.pow_mul_num_not_mem_of_not_mem_carrier _ _ hC _
  ¬∑ dsimp only
    ring_nf at eq1 ‚ä¢
    exact eq1.symm

lemma Œ±_mul (x y : (Spec (A‚Å∞_ f)).presheaf.obj V) : Œ± (m := m) (V := V) (x * y) = Œ± x * Œ± y := by
  ext1 z
  rw [Pi.mul_apply, HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.mul_val, val_Œ±,
    val_Œ±, val_Œ±, mk_mul, mk_eq_mk_iff, r_iff_exists]
  have eq1 := eval_eq_num_div_den (m := m) (V := V) (x * y) z
  rw [show eval (m := m) (V := V) (x * y) z = eval x z * eval y z from rfl,
    eval_eq_num_div_den, eval_eq_num_div_den, mk_mul, mk_eq_mk_iff, r_iff_exists] at eq1
  obtain ‚ü®‚ü®C, hC‚ü©, eq1‚ü© := eq1
  dsimp only [Submonoid.coe_mul] at eq1 ‚ä¢
  simp only [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.mul_val] at eq1
  simp only [HomogeneousLocalization.eq_num_div_den, mk_mul, Submonoid.mk_mul_mk] at eq1
  rw [mk_eq_mk_iff, r_iff_exists] at eq1
  obtain ‚ü®‚ü®_, ‚ü®n, rfl‚ü©‚ü©, eq1‚ü© := eq1
  dsimp only at eq1
  refine ‚ü®‚ü®f^n * C.den * C.num, ?_‚ü©, ?_‚ü©
  ¬∑ rw [show C.den = f^_ from C.den_mem.choose_spec.symm, ‚Üê pow_add]
    exact ProjIsoSpecTopComponent.ToSpec.pow_mul_num_not_mem_of_not_mem_carrier _ _ hC _
  ¬∑ dsimp only
    ring_nf at eq1 ‚ä¢
    exact eq1.symm

namespace isLocallyFraction

abbrev U (V' : Opens (Spec.T (A‚Å∞_ f))) : Opens Proj.T where
  carrier := {x | ‚àÉ x' ‚àà œÜ ‚Åª¬π' V'.1, x = x'.1}
  is_open' := by
    have ho1 := Homeomorph.isOpen_preimage (h := homeoOfIso (projIsoSpecTopComponent hm.out f_deg.out))
      |>.mpr V'.2
    rw [isOpen_induced_iff] at ho1
    obtain ‚ü®o, ho1, (eq : _ = œÜ ‚Åª¬π' V'.1)‚ü© := ho1
    simp_rw [‚Üê eq]
    convert IsOpen.inter ho1 (pbo f).2 using 1
    ext z; constructor
    ¬∑ rintro ‚ü®x, hx, rfl‚ü©; exact ‚ü®hx, x.2‚ü©
    ¬∑ rintro ‚ü®h1, h2‚ü©; exact ‚ü®‚ü®z, h2‚ü©, h1, rfl‚ü©

def U.LE {V' : Opens (Spec.T (A‚Å∞_ f))} (le : V' ‚ü∂ V.unop) :
    (U (m := m) V') ‚ü∂
    ((@Opens.openEmbedding Proj.T (pbo f)).isOpenMap.functor.op.obj <|
      Opens.map œÜ |>.op.obj V).unop :=
  homOfLE <| by rintro _ ‚ü®x, hx, rfl‚ü©; simpa using leOfHom le hx

end isLocallyFraction

lemma Œ±_isLocallyFraction : isLocallyFraction ùíú |>.pred (Œ± (m := m) s) := by
  intro y
  obtain ‚ü®V', ‚ü®(mem1 : œÜ _ ‚àà V'), le, a, b, is_local‚ü©‚ü© := s.2 ‚ü®œÜ ‚ü®y.1, _mem_pbo _‚ü©, _mem_V _‚ü©

  obtain ‚ü®la, (hla : f^_ = _)‚ü© := a.den_mem
  obtain ‚ü®lb, (hlb : f^_ = _)‚ü© := b.den_mem

  refine ‚ü®isLocallyFraction.U (m := m) V', ‚ü®‚ü®‚ü®y.1, _mem_pbo _‚ü©, mem1, rfl‚ü©,
    isLocallyFraction.U.LE le, a.deg + b.deg, ‚ü®a.num * f^lb, SetLike.mul_mem_graded a.num_mem_deg
      (hlb ‚ñ∏ b.den_mem_deg)‚ü©, ‚ü®b.num * f^la, add_comm a.deg _ ‚ñ∏ SetLike.mul_mem_graded b.num_mem_deg
      (hla ‚ñ∏ a.den_mem_deg)‚ü©, fun z ‚Ü¶ ?_‚ü©‚ü©

  have z_mem_pbo : z.1 ‚àà pbo f
  ¬∑ obtain ‚ü®‚ü®_, h1‚ü©, _, h2‚ü© := z.2; rw [h2]; exact h1
  have z_mem_V' : œÜ ‚ü®z.1, z_mem_pbo‚ü© ‚àà V'
  ¬∑ obtain ‚ü®z, ‚ü®_, h1, rfl‚ü©‚ü© := z; exact h1
  have z_mem_V : œÜ ‚ü®z.1, z_mem_pbo‚ü© ‚àà V.unop
  ¬∑ exact leOfHom le z_mem_V'
  specialize is_local ‚ü®œÜ ‚ü®z.1, z_mem_pbo‚ü©, z_mem_V'‚ü©
  obtain ‚ü®b_not_mem, (eq1 : s.1 ‚ü®œÜ _, _‚ü© * _ = Localization.mk a 1)‚ü© := is_local
  change _ * Localization.mk b 1 =  _ at eq1
  replace eq1 : s.1 ‚ü®œÜ ‚ü®z.1, z_mem_pbo‚ü©, z_mem_V‚ü© =
    (Localization.mk a ‚ü®b, b_not_mem‚ü© : Localization.AtPrime _)
  ¬∑ rw [show Localization.mk a _ = Localization.mk a 1 * Localization.mk 1 _ by
      rw [mk_mul, one_mul, mul_one], ‚Üê eq1, mul_assoc, mk_mul, one_mul, mul_one,
      show Localization.mk b ‚ü®b, _‚ü© = 1 from Localization.mk_self ‚ü®b, _‚ü©, mul_one]

  fconstructor <;> dsimp only
  ¬∑ rw [mul_comm]
    exact ProjIsoSpecTopComponent.ToSpec.pow_mul_num_not_mem_of_not_mem_carrier _ _ b_not_mem _

  rw [HomogeneousLocalization.ext_iff_val, val_Œ±, HomogeneousLocalization.val_mk'', mk_eq_mk_iff,
    r_iff_exists]
  rw [show s.1 ‚ü®œÜ ‚ü®z.1, z_mem_pbo‚ü©, z_mem_V‚ü© =
    eval (m := m) (V := V) s ‚ü®z.1, (isLocallyFraction.U.LE le z) |>.2‚ü© from rfl,
    eval_eq_num_div_den, mk_eq_mk_iff, r_iff_exists] at eq1
  obtain ‚ü®‚ü®C, hC‚ü©, eq1‚ü© := eq1
  dsimp only at eq1 ‚ä¢
  simp only [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.mul_val] at eq1
  simp only [HomogeneousLocalization.eq_num_div_den, mk_mul, Submonoid.mk_mul_mk] at eq1
  rw [mk_eq_mk_iff, r_iff_exists] at eq1
  obtain ‚ü®‚ü®_, ‚ü®M, rfl‚ü©‚ü©, eq1‚ü© := eq1
  dsimp only at eq1
  rw [‚Üê hla, ‚Üê hlb] at eq1
  refine ‚ü®‚ü®f^M * C.den * C.num, ?_‚ü©, ?_‚ü©
  ¬∑ rw [show C.den = f^_ from C.den_mem.choose_spec.symm, ‚Üê pow_add]
    exact ProjIsoSpecTopComponent.ToSpec.pow_mul_num_not_mem_of_not_mem_carrier _ _ hC _
  ¬∑ dsimp only
    ring_nf at eq1 ‚ä¢
    exact eq1

@[simps]
def ringHom :
    (Spec (A‚Å∞_ f)).presheaf.obj V ‚ü∂ (œÜ _* (Proj| (pbo f)).presheaf).obj V where
  toFun s := ‚ü®Œ± s, Œ±_isLocallyFraction s‚ü©
  map_one' := Subtype.ext Œ±_one
  map_mul' _ _ := Subtype.ext <| Œ±_mul _ _
  map_zero' := Subtype.ext Œ±_zero
  map_add' _ _ := Subtype.ext <| Œ±_add _ _

end FromSpec

@[simps]
def fromSpec {f : A} {m : ‚Ñï} (hm : 0 < m) (f_deg : f ‚àà ùíú m) :
    (Spec (A‚Å∞_ f)).presheaf ‚ü∂
    (projIsoSpecTopComponent hm f_deg).hom  _* (Proj| (pbo f)).presheaf where
  app V := FromSpec.ringHom (hm := ‚ü®hm‚ü©) (f_deg := ‚ü®f_deg‚ü©) (V := V)
  naturality U V le := by aesop_cat

namespace ToSpec

variable {ùíú}
variable {m : ‚Ñï} {f : A} [hm : Fact <| 0 < m] [f_deg : Fact <| f ‚àà ùíú m]
variable {V : (Opens <| Spec (A‚Å∞_ f))·µí·µñ}

local notation "œÜ" => (projIsoSpecTopComponent hm.out f_deg.out).hom
local notation "œà" => (projIsoSpecTopComponent hm.out f_deg.out).inv

variable (s : œÜ _* (Proj| (pbo f)).presheaf |>.obj V) (y : V.unop)

private lemma _mem_V :
    (œà y.1).1 ‚àà ((@Opens.openEmbedding Proj.T (pbo f)).isOpenMap.functor.op.obj <|
      Opens.map œÜ |>.op.obj V).unop := by
  refine ‚ü®(œà y.1), show _ ‚àà œÜ ‚Åª¬π' _ from ?_, rfl‚ü©
  rw [Set.mem_preimage, Iso.inv_hom_id_apply]
  exact y.2

variable (m) in
abbrev eval : HomogeneousLocalization.AtPrime ùíú (œà y.1).1.asHomogeneousIdeal.toIdeal :=
  s.1 ‚ü®œà y.1 |>.1, _mem_V _‚ü©

lemma eval_zero : eval m  0 y = 0 := by delta eval; norm_cast
lemma eval_one : eval m 1 y = 1 := by delta eval; norm_cast

lemma eval_add (s s' : œÜ _* (Proj| (pbo f)).presheaf |>.obj V) :
    eval m (s + s' : œÜ _* (Proj| (pbo f)).presheaf |>.obj V) y =
    eval m s y + eval m s' y := by
  delta eval; norm_cast

lemma eval_mul (s s' : œÜ _* (Proj| (pbo f)).presheaf |>.obj V) :
    eval m (s * s' : œÜ _* (Proj| (pbo f)).presheaf |>.obj V) y =
    eval m s y * eval m s' y := by
  delta eval; norm_cast

variable (m) in
def Œ≤ : Localization.AtPrime y.1.asIdeal :=
  .mk
    (Quotient.mk''
      { deg := m * (eval m s y).deg
        num := ‚ü®(eval m s y).num * (eval m s y).den ^ m.pred, by
          rw [calc
              m * (eval m s y).deg = (m.pred + 1) * (eval m s y).deg := by
                congr; exact Nat.succ_pred_eq_of_pos hm.out |>.symm
            _ = m.pred * (eval m s y).deg + (eval m s y).deg := by rw [add_mul, one_mul]
            _ = (eval m s y).deg + m.pred * (eval m s y).deg := add_comm _ _]
          exact SetLike.mul_mem_graded (eval m s y).num_mem_deg <|
            SetLike.pow_mem_graded m.pred (eval m s y).den_mem_deg‚ü©
        den := ‚ü®f ^ (eval m s y).deg, by rw [mul_comm]; exact SetLike.pow_mem_graded _ f_deg.out‚ü©
        den_mem := ‚ü®_, rfl‚ü© })
    { val := Quotient.mk''
        { deg := m * (eval m s y).deg
          num := ‚ü®(eval m s y).den ^ m, SetLike.pow_mem_graded _ (eval m s y).den_mem_deg‚ü©
          den := ‚ü®f ^ (eval m s y).deg, by rw [mul_comm]; exact SetLike.pow_mem_graded _ f_deg.out‚ü©
          den_mem := ‚ü®_, rfl‚ü© }
      property := show _ ‚àâ _ by
        have mem : _ ‚àâ _ := (eval m s y).den_mem
        contrapose! mem
        intro i
        dsimp only [GradedAlgebra.proj_apply]
        by_cases ineq1 : (eval m s y).deg = i
        ¬∑ subst ineq1
          simp_rw [DirectSum.decompose_of_mem_same ùíú (eval m s y).den_mem_deg]
          exact mem
        ¬∑ simp_rw [DirectSum.decompose_of_mem_ne ùíú (eval m s y).den_mem_deg ineq1, zero_pow hm.out]
          convert Ideal.zero_mem _
          rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.val_mk'',
            HomogeneousLocalization.zero_val]
          exact Localization.mk_zero _ }

lemma Œ≤_zero : Œ≤ m 0 y = 0 := by
  rw [show (0 : Localization.AtPrime y.1.asIdeal) = Localization.mk 0 1 from
    Localization.mk_zero _ |>.symm, Œ≤, mk_eq_mk_iff, r_iff_exists]
  have eq1 := (eval m 0 y).eq_num_div_den.symm
  rw [eval_zero, HomogeneousLocalization.zero_val,
    show (0 : Localization.AtPrime (œà y.1).1.asHomogeneousIdeal.toIdeal) = .mk 0 1 from
    mk_zero _ |>.symm, mk_eq_mk_iff, r_iff_exists] at eq1
  obtain ‚ü®‚ü®c, (hc : ¬¨ ‚àÄ _, _)‚ü©, eq1‚ü© := eq1
  rw [not_forall] at hc
  obtain ‚ü®j, hc‚ü© := hc
  simp only [one_mul, mul_zero, Submonoid.coe_one] at eq1 ‚ä¢
  replace eq1 : GradedAlgebra.proj ùíú (j + (eval m 0 y).deg) (c * (eval m 0 y).num) = 0
  ¬∑ rw [eval_zero, eq1, map_zero]
  rw [GradedAlgebra.proj_apply,
    coe_decompose_mul_add_of_right_mem ùíú (a := c) (i := j) (eval m 0 y).num_mem_deg,
    eval_zero] at eq1
  refine ‚ü®‚ü®Quotient.mk'' ‚ü®m * j,
    ‚ü®decompose ùíú c j ^ m, SetLike.pow_mem_graded m (Submodule.coe_mem _)‚ü©,
    ‚ü®f^j, mul_comm m j ‚ñ∏ SetLike.pow_mem_graded j f_deg.out‚ü©, ‚ü®j, rfl‚ü©‚ü©, hc‚ü©, ?_‚ü©
  rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.mul_val,
    HomogeneousLocalization.val_mk'', HomogeneousLocalization.val_mk'',
    HomogeneousLocalization.zero_val, mk_mul]
  simp only [eval_zero, ‚Üê mul_assoc]
  rw [show ‚àÄ x : A, decompose ùíú c j ^ m * x = (decompose ùíú c j * x) * decompose ùíú c j ^ m.pred from
    fun x ‚Ü¶ calc _ = decompose ùíú c j ^ (1 + m.pred) * x :=
                      by congr; rw [add_comm]; exact Nat.succ_pred_eq_of_pos hm.out |>.symm
                  _ = decompose ùíú c j * decompose ùíú c j ^ m.pred * x := by rw [pow_add, pow_one]
                  _ = decompose ùíú c j * x * decompose ùíú c j ^ m.pred := by ring,
    eq1, zero_mul, zero_mul]
  exact Localization.mk_zero _

lemma Œ≤_one : Œ≤ m 1 y = 1 := by
  rw [show (1 : Localization.AtPrime y.1.asIdeal) = Localization.mk 1 1 from
    Localization.mk_self 1 |>.symm, Œ≤, mk_eq_mk_iff, r_iff_exists]
  have eq1 := (eval m 1 y).eq_num_div_den.symm
  rw [eval_one, HomogeneousLocalization.one_val,
    show (1 : Localization.AtPrime (œà y.1).1.asHomogeneousIdeal.toIdeal) = .mk 1 1 from
    mk_self 1 |>.symm, mk_eq_mk_iff, r_iff_exists] at eq1
  obtain ‚ü®‚ü®c, (hc : ¬¨ ‚àÄ _, _)‚ü©, eq1‚ü© := eq1
  rw [not_forall] at hc
  obtain ‚ü®j, hc‚ü© := hc
  simp only [one_mul, mul_one, Submonoid.coe_one] at eq1 ‚ä¢
  replace eq1 : GradedAlgebra.proj ùíú (j + (eval m 1 y).deg) (c * (eval m 1 y).num) = _
  ¬∑ rw [eval_one, eq1]
  rw [GradedAlgebra.proj_apply, GradedAlgebra.proj_apply,
    coe_decompose_mul_add_of_right_mem ùíú (a := c) (i := j) (eval m 1 y).num_mem_deg,
    coe_decompose_mul_add_of_right_mem ùíú (a := c) (i := j) (HomogeneousLocalization.den_mem_deg _),
    eval_one] at eq1
  refine ‚ü®‚ü®Quotient.mk'' ‚ü®m * j,
    ‚ü®decompose ùíú c j ^ m, SetLike.pow_mem_graded m (Submodule.coe_mem _)‚ü©,
    ‚ü®f^j, mul_comm m j ‚ñ∏ SetLike.pow_mem_graded j f_deg.out‚ü©, ‚ü®j, rfl‚ü©‚ü©, hc‚ü©, ?_‚ü©
  rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.mul_val,
    HomogeneousLocalization.val_mk'', HomogeneousLocalization.val_mk'',
    HomogeneousLocalization.mul_val, HomogeneousLocalization.val_mk'', mk_mul,
    HomogeneousLocalization.val_mk'', mk_mul]
  simp only [eval_one, ‚Üê mul_assoc]
  have eq0 (x : A) : x^m = x * x^m.pred
  ¬∑ conv_lhs =>
    rw [show m = (1 + m.pred) by rw [add_comm]; exact Nat.succ_pred_eq_of_pos hm.out |>.symm,
      pow_add, pow_one]
  have reorder (x : A) : decompose ùíú c j ^ m * x = (decompose ùíú c j * x) * decompose ùíú c j ^ m.pred
  ¬∑ calc _ = decompose ùíú c j * decompose ùíú c j ^ m.pred * x := by rw [eq0]
         _ = decompose ùíú c j * x * decompose ùíú c j ^ m.pred := by ring
  rw [reorder, eq1, ‚Üê reorder, mul_assoc, ‚Üê eq0]

set_option maxHeartbeats 500000 in
lemma Œ≤_add (s s' : œÜ _* (Proj| (pbo f)).presheaf |>.obj V) :
    Œ≤ m (s + s' : œÜ _* (Proj| (pbo f)).presheaf |>.obj V) y = Œ≤ m s y + Œ≤ m s' y := by
  delta Œ≤
  rw [add_mk, mk_eq_mk_iff, r_iff_exists]
  have eq1 := (eval m (s + s' : œÜ _* (Proj| (pbo f)).presheaf |>.obj V) y).eq_num_div_den
  rw [eval_add, HomogeneousLocalization.add_val, (eval m s y).eq_num_div_den,
    (eval m s' y).eq_num_div_den, add_mk, mk_eq_mk_iff, r_iff_exists] at eq1
  obtain ‚ü®‚ü®c, (hc : ¬¨ ‚àÄ _, _)‚ü©, eq1‚ü© := eq1
  rw [not_forall] at hc
  obtain ‚ü®j, hc‚ü© := hc
  refine ‚ü®‚ü®_, hc‚ü©, ?_‚ü©
  simp only [one_mul, mul_one, Submonoid.coe_one, Submonoid.coe_mul] at eq1 ‚ä¢
  replace eq1 := congr_arg
    (GradedAlgebra.proj ùíú
      (j + ((eval m s y).deg + (eval m s' y).deg +
        (eval m (s + s' : œÜ _* (Proj| (pbo f)).presheaf |>.obj V) y).deg)))
    eq1
  rw [GradedAlgebra.proj_apply, GradedAlgebra.proj_apply] at eq1
  rw [coe_decompose_mul_add_of_right_mem ùíú (a := c) (i := j) ?_,
    coe_decompose_mul_add_of_right_mem ùíú (a := c) (i := j) ?_] at eq1
  pick_goal 2
  ¬∑ exact SetLike.mul_mem_graded
      (SetLike.mul_mem_graded (eval m s y).den_mem_deg (eval m s' y).den_mem_deg)
      (eval m (s + s' :  œÜ _* (Proj| (pbo f)).presheaf |>.obj V) y).num_mem_deg
  pick_goal 2
  ¬∑ rw [add_comm _ (eval m (s + s' :  œÜ _* (Proj| (pbo f)).presheaf |>.obj V) y).deg]
    refine SetLike.mul_mem_graded
      (eval m (s + s' :  œÜ _* (Proj| (pbo f)).presheaf |>.obj V) y).den_mem_deg <|
      Submodule.add_mem _
        (SetLike.mul_mem_graded (eval m s y).den_mem_deg (eval m s' y).num_mem_deg) ?_
    rw [add_comm]
    exact (SetLike.mul_mem_graded (eval m s' y).den_mem_deg (eval m s y).num_mem_deg)

  rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.mul_val,
    HomogeneousLocalization.mul_val, HomogeneousLocalization.mul_val,
    HomogeneousLocalization.mul_val, HomogeneousLocalization.mul_val,
    HomogeneousLocalization.add_val, HomogeneousLocalization.mul_val,
    HomogeneousLocalization.mul_val, HomogeneousLocalization.val_mk'',
    HomogeneousLocalization.val_mk'', HomogeneousLocalization.val_mk'',
    HomogeneousLocalization.val_mk'', HomogeneousLocalization.val_mk'',
    HomogeneousLocalization.val_mk'', HomogeneousLocalization.val_mk'']
  dsimp only
  rw [mk_mul, mk_mul, mk_mul, mk_mul, mk_mul, add_mk, mk_mul, mk_mul, mk_eq_mk_iff, r_iff_exists]
  refine ‚ü®1, ?_‚ü©
  simp only [Submonoid.coe_mul, one_mul, mul_one, Submonoid.coe_one, GradedAlgebra.proj_apply,
    eval_add]

  have eq0 (x : A) : x^m = x * x^m.pred
  ¬∑ conv_lhs =>
    rw [show m = (1 + m.pred) by rw [add_comm]; exact Nat.succ_pred_eq_of_pos hm.out |>.symm,
      pow_add, pow_one]
  have reorder (x y a b : A) : decompose ùíú c j ^ m * (x ^ m * y ^ m * (a * b)) =
    (decompose ùíú c j * (x * y * a)) * (x^m.pred * y^m.pred * b * decompose ùíú c j ^ m.pred)
  ¬∑ rw [eq0, eq0, eq0]; ring
  conv_lhs => rw [reorder, ‚Üê eq1]
  conv_rhs => rw [eq0, eq0, eq0, eq0]
  ring

set_option maxHeartbeats 500000 in
lemma Œ≤_mul (s s' : œÜ _* (Proj| (pbo f)).presheaf |>.obj V) :
    Œ≤ m (s * s' : œÜ _* (Proj| (pbo f)).presheaf |>.obj V) y = Œ≤ m s y * Œ≤ m s' y := by
  delta Œ≤
  rw [mk_mul, mk_eq_mk_iff, r_iff_exists]
  have eq1 := (eval m (s * s' : œÜ _* (Proj| (pbo f)).presheaf |>.obj V) y).eq_num_div_den
  rw [eval_mul, HomogeneousLocalization.mul_val, (eval m s y).eq_num_div_den,
    (eval m s' y).eq_num_div_den, mk_mul, mk_eq_mk_iff, r_iff_exists] at eq1
  obtain ‚ü®‚ü®c, (hc : ¬¨ ‚àÄ _, _)‚ü©, eq1‚ü© := eq1
  rw [not_forall] at hc
  obtain ‚ü®j, hc‚ü© := hc
  refine ‚ü®‚ü®_, hc‚ü©, ?_‚ü©
  simp only [one_mul, mul_one, Submonoid.coe_one, Submonoid.coe_mul] at eq1 ‚ä¢
  replace eq1 := congr_arg
    (GradedAlgebra.proj ùíú
      (j + ((eval m s y).deg + (eval m s' y).deg +
        (eval m (s * s' : œÜ _* (Proj| (pbo f)).presheaf |>.obj V) y).deg)))
    eq1
  rw [GradedAlgebra.proj_apply, GradedAlgebra.proj_apply] at eq1
  rw [coe_decompose_mul_add_of_right_mem ùíú (a := c) (i := j) ?_,
    coe_decompose_mul_add_of_right_mem ùíú (a := c) (i := j) ?_] at eq1
  pick_goal 2
  ¬∑ exact SetLike.mul_mem_graded
      (SetLike.mul_mem_graded (eval m s y).den_mem_deg (eval m s' y).den_mem_deg)
      (eval m (s * s' :  œÜ _* (Proj| (pbo f)).presheaf |>.obj V) y).num_mem_deg
  pick_goal 2
  ¬∑ rw [add_comm _ (eval m (s * s' :  œÜ _* (Proj| (pbo f)).presheaf |>.obj V) y).deg]
    refine SetLike.mul_mem_graded
      (eval m (s * s' :  œÜ _* (Proj| (pbo f)).presheaf |>.obj V) y).den_mem_deg
      (SetLike.mul_mem_graded (eval m s y).num_mem_deg (eval m s' y).num_mem_deg)

  rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.mul_val,
    HomogeneousLocalization.mul_val, HomogeneousLocalization.mul_val,
    HomogeneousLocalization.mul_val, HomogeneousLocalization.mul_val,
    HomogeneousLocalization.mul_val, HomogeneousLocalization.val_mk'',
    HomogeneousLocalization.val_mk'', HomogeneousLocalization.val_mk'',
    HomogeneousLocalization.val_mk'', HomogeneousLocalization.val_mk'',
    HomogeneousLocalization.val_mk'', HomogeneousLocalization.val_mk'']
  rw [mk_mul, mk_mul, mk_mul, mk_mul, mk_mul, mk_mul, mk_eq_mk_iff, r_iff_exists]
  refine ‚ü®1, ?_‚ü©
  simp only [Submonoid.coe_mul, one_mul, mul_one, Submonoid.coe_one, GradedAlgebra.proj_apply,
    eval_mul]

  have eq0 (x : A) : x^m = x * x^m.pred
  ¬∑ conv_lhs =>
    rw [show m = (1 + m.pred) by rw [add_comm]; exact Nat.succ_pred_eq_of_pos hm.out |>.symm,
      pow_add, pow_one]
  have reorder (x y a b : A) : decompose ùíú c j ^ m * (x ^ m * y ^ m * (a * b)) =
    (decompose ùíú c j * (x * y * a)) * (x^m.pred * y^m.pred * b * decompose ùíú c j ^ m.pred)
  ¬∑ rw [eq0, eq0, eq0]; ring
  conv_lhs => rw [reorder, ‚Üê eq1]
  conv_rhs => rw [eq0, eq0]
  ring

namespace isLocallyFraction

abbrev U (V' : Opens Proj.T) : Opens (Spec.T (A‚Å∞_ f)) where
  carrier := œÜ '' {z | z.1 ‚àà V'}
  is_open' := by
    erw [Homeomorph.isOpen_image (h := homeoOfIso (projIsoSpecTopComponent hm.out f_deg.out)),
      isOpen_induced_iff]
    exact ‚ü®_, V'.2, rfl‚ü©

def U.LE (V' : Opens Proj.T)
    (le : V' ‚ü∂
          ((@Opens.openEmbedding Proj.T (pbo f)).isOpenMap.functor.op.obj <|
            Opens.map œÜ |>.op.obj V).unop) : U (m := m) V' ‚ü∂ V.unop :=
  homOfLE <| by rintro _ ‚ü®z, (hz : z.1 ‚àà V'), rfl‚ü©; simpa using leOfHom le hz

lemma _mem_U_of_œà_mem (V' : Opens Proj.T) (h : (œà y.1).1 ‚àà V') :
    y.1 ‚àà U (m := m) V' :=
  ‚ü®œà y.1, h, by rw [Iso.inv_hom_id_apply]‚ü©

lemma quotient_mk''_not_mem
    (b : A) (degree : ‚Ñï) (b_mem : b ‚àà ùíú degree) (z : Proj.T| (pbo f))
    (b_not_mem : b ‚àâ z.1.asHomogeneousIdeal) :
    Quotient.mk''
    { deg := m * degree
      num := ‚ü®b^m, SetLike.pow_mem_graded _ b_mem‚ü©
      den := ‚ü®f^degree, by rw [mul_comm]; exact SetLike.pow_mem_graded _ f_deg.out‚ü©
      den_mem := ‚ü®_, rfl‚ü© } ‚àâ (œÜ z).asIdeal := by
  classical
  intro rid
  erw [ProjIsoSpecTopComponent.ToSpec.mem_carrier_iff, HomogeneousLocalization.val_mk''] at rid
  obtain ‚ü®c, N, acd, eq1‚ü© := ProjIsoSpecTopComponent.ToSpec.MemCarrier.clear_denominator' _ rid
  rw [smul_mk, ‚Üê mk_one_eq_algebraMap, mk_eq_mk_iff, r_iff_exists] at eq1
  obtain ‚ü®‚ü®_, ‚ü®l, rfl‚ü©‚ü©, eq1‚ü© := eq1
  simp only [OneMemClass.coe_one, smul_eq_mul, one_mul, SetLike.mem_coe, ‚Üê mul_assoc,
    ‚Üê pow_add] at eq1
  suffices mem : f^(l + N) * b^m ‚àà z.1.asHomogeneousIdeal
  ¬∑ exact z.2 <| z.1.isPrime.mem_of_pow_mem _ <| z.1.isPrime.mem_or_mem mem
      |>.resolve_right fun r ‚Ü¶ b_not_mem <| z.1.isPrime.mem_of_pow_mem _ r
  rw [eq1]
  exact Ideal.mul_mem_left _ _ <| Ideal.sum_mem _ fun i _ ‚Ü¶ Ideal.mul_mem_left _ _ <|
    i.1.2.choose_spec.1

lemma section_eval_num_congr {x y} (h1 : x = y) : (s.1 y).num = (s.1 x).num := by
  induction h1; rfl

lemma section_eval_den_congr {x y} (h1 : x = y) : (s.1 y).den = (s.1 x).den := by
  induction h1; rfl

lemma section_eval_deg_congr {x y} (h1 : x = y) : (s.1 y).deg = (s.1 x).deg := by
  induction h1; rfl

end isLocallyFraction

set_option maxHeartbeats 1000000 in
lemma Œ≤_isLocallyFraction : StructureSheaf.isLocallyFraction (A‚Å∞_ f) |>.pred (Œ≤ m s)  := by
  classical
  intro y
  obtain ‚ü®V', mem, le, degree, ‚ü®a, a_mem‚ü©, ‚ü®b, b_mem‚ü©, is_local‚ü© := s.2 ‚ü®œà y.1 |>.1, _mem_V _‚ü©
  refine ‚ü®isLocallyFraction.U (m := m) V', isLocallyFraction._mem_U_of_œà_mem _ _ mem,
    isLocallyFraction.U.LE _ le,
    Quotient.mk''
    { deg := m * degree
      num := ‚ü®a * b^m.pred, ?_‚ü©
      den := ‚ü®f^degree, by rw [mul_comm]; exact SetLike.pow_mem_graded _ f_deg.out‚ü©
      den_mem := ‚ü®_, rfl‚ü© },
    Quotient.mk''
    { deg := m * degree
      num := ‚ü®b^m, SetLike.pow_mem_graded _ b_mem‚ü©
      den := ‚ü®f^degree, by rw [mul_comm]; exact SetLike.pow_mem_graded _ f_deg.out‚ü©
      den_mem := ‚ü®_, rfl‚ü© },
    ?_‚ü©
  ¬∑ convert SetLike.mul_mem_graded a_mem (SetLike.pow_mem_graded m.pred b_mem) using 2
    conv_lhs => rw [show m = (m.pred + 1) from Nat.succ_pred_eq_of_pos hm.out |>.symm, add_mul,
      one_mul, add_comm, ‚Üê smul_eq_mul]

  rintro ‚ü®_, ‚ü®z, (z_mem : z.1 ‚àà V'), rfl‚ü©‚ü©
  obtain ‚ü®(b_not_mem : b ‚àâ z.1.asHomogeneousIdeal), (eq1 : s.1 ‚ü®z.1, _‚ü© = _)‚ü© :=
    is_local ‚ü®z.1, z_mem‚ü©
  rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.val_mk'',
    HomogeneousLocalization.eq_num_div_den, mk_eq_mk_iff, r_iff_exists] at eq1

  refine ‚ü®isLocallyFraction.quotient_mk''_not_mem b degree b_mem _ b_not_mem, ?_‚ü©
  obtain ‚ü®‚ü®C, (hC : ¬¨ C ‚àà z.1.asHomogeneousIdeal)‚ü©, eq1‚ü© := eq1
  obtain ‚ü®j, hj‚ü© : ‚àÉ j : ‚Ñï, (decompose ùíú C j : A) ‚àâ z.1.asHomogeneousIdeal
  ¬∑ by_contra! rid
    apply hC
    rw [‚Üê sum_support_decompose ùíú C]
    exact Ideal.sum_mem _ fun i _ ‚Ü¶ rid i
  erw [mk_mul, mk_eq_mk_iff, r_iff_exists]
  refine ‚ü®‚ü®Quotient.mk'' ‚ü®m * j,
    ‚ü®decompose ùíú C j ^ m, SetLike.pow_mem_graded _ (Submodule.coe_mem _)‚ü©,
    ‚ü®f^j, by rw [mul_comm]; exact SetLike.pow_mem_graded _ f_deg.out‚ü©, ‚ü®_, rfl‚ü©‚ü©,
    isLocallyFraction.quotient_mk''_not_mem _ _ (Submodule.coe_mem _) _ hj‚ü©, ?_‚ü©
  simp only [OneMemClass.coe_one, Algebra.id.map_eq_id, RingHom.id_apply, one_mul,
    mul_one, Submonoid.coe_one] at eq1 ‚ä¢
  rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.mul_val,
    HomogeneousLocalization.mul_val, HomogeneousLocalization.mul_val,
    HomogeneousLocalization.mul_val, HomogeneousLocalization.val_mk'',
    HomogeneousLocalization.val_mk'', HomogeneousLocalization.val_mk'',
    HomogeneousLocalization.val_mk'', HomogeneousLocalization.val_mk'']
  rw [mk_mul, mk_mul, mk_mul, mk_mul, mk_eq_mk_iff, r_iff_exists]
  refine ‚ü®1, ?_‚ü©
  simp only [OneMemClass.coe_one, Set.mem_setOf_eq, Submonoid.mk_mul_mk, one_mul]
  have œÜz_mem : œÜ z ‚àà V.unop
  ¬∑ simpa [Set.mem_preimage] using leOfHom le z_mem
  replace eq1 : C * (b * (eval m s ‚ü®œÜ z, œÜz_mem‚ü©).num) = C * ((eval m s ‚ü®œÜ z, œÜz_mem‚ü©).den * a)
  ¬∑ convert eq1 using 3
    ¬∑ apply isLocallyFraction.section_eval_num_congr
      ext; dsimp
      erw [(projIsoSpecTopComponent _ _).hom_inv_id_apply]
    ¬∑ apply isLocallyFraction.section_eval_den_congr
      ext; dsimp
      erw [(projIsoSpecTopComponent _ _).hom_inv_id_apply]

  replace eq1 := congr_arg
    (GradedAlgebra.proj ùíú
      (j + (degree + (eval m s ‚ü®œÜ z, œÜz_mem‚ü©).deg)))
    eq1
  rw [GradedAlgebra.proj_apply, GradedAlgebra.proj_apply] at eq1
  rw [coe_decompose_mul_add_of_right_mem ùíú (a := C) (i := j) ?_,
    coe_decompose_mul_add_of_right_mem ùíú (a := C) (i := j) ?_] at eq1
  pick_goal 2
  ¬∑ rw [add_comm]
    exact SetLike.mul_mem_graded (HomogeneousLocalization.den_mem_deg _) a_mem
  pick_goal 2
  ¬∑ exact SetLike.mul_mem_graded b_mem (HomogeneousLocalization.num_mem_deg _)

  have eq0 (x : A) : x^m = x * x^m.pred
  ¬∑ conv_lhs =>
    rw [show m = (1 + m.pred) by rw [add_comm]; exact Nat.succ_pred_eq_of_pos hm.out |>.symm,
      pow_add, pow_one]
  have reorder (a b c : A) : decompose ùíú C j ^ m * (a * b * c^m) =
    (decompose ùíú C j * (c * a)) * (decompose ùíú C j ^ m.pred * b * c ^ m.pred)
  ¬∑ rw [eq0, eq0]; ring
  conv_lhs => rw [reorder, eq1]
  conv_rhs => rw [eq0, eq0]
  ring

@[simps]
def ringHom : (œÜ _* (Proj| (pbo f)).presheaf).obj V ‚ü∂ (Spec (A‚Å∞_ f)).presheaf.obj V where
  toFun s := ‚ü®Œ≤ m s, Œ≤_isLocallyFraction s‚ü©
  map_one' := Subtype.ext <| funext <| Œ≤_one
  map_mul' _ _ := Subtype.ext <| funext fun x ‚Ü¶ Œ≤_mul x _ _
  map_zero' := Subtype.ext <| funext <| Œ≤_zero
  map_add' _ _ := Subtype.ext <| funext fun x ‚Ü¶ Œ≤_add x _ _

end ToSpec

@[simps]
def toSpec {f : A} {m : ‚Ñï} (hm : 0 < m) (f_deg : f ‚àà ùíú m) :
    (projIsoSpecTopComponent hm f_deg).hom  _* (Proj| (pbo f)).presheaf ‚ü∂
    (Spec (A‚Å∞_ f)).presheaf where
  app V := ToSpec.ringHom (hm := ‚ü®hm‚ü©) (f_deg := ‚ü®f_deg‚ü©)
  naturality := by aesop_cat

namespace FromSpecToSpec

variable {ùíú}
variable {m : ‚Ñï} {f : A} [hm : Fact <| 0 < m] [f_deg : Fact <| f ‚àà ùíú m]
-- variable {V : (Opens <| Spec (A‚Å∞_ f))·µí·µñ}

local notation "œÜ" => (projIsoSpecTopComponent hm.out f_deg.out).hom
local notation "œà" => (projIsoSpecTopComponent hm.out f_deg.out).inv

variable (V : (Opens (Spec.T (A‚Å∞_ f)))·µí·µñ)
variable (s : (œÜ _* (Proj| (pbo f)).presheaf).obj V)
variable (x : ((@Opens.openEmbedding Proj.T (pbo f)).isOpenMap.functor.op.obj <|
  Opens.map œÜ |>.op.obj V).unop)

set_option maxHeartbeats 500000 in
lemma Œ±_toSpec_ringHom : FromSpec.Œ± (ToSpec.ringHom s) x = s.1 x := by
  rw [HomogeneousLocalization.ext_iff_val, FromSpec.val_Œ±, HomogeneousLocalization.eq_num_div_den,
    mk_eq_mk_iff, r_iff_exists]
  have eq1 := FromSpec.eval_eq_num_div_den (ToSpec.ringHom s) x
  rw [FromSpec.eval, ToSpec.ringHom_apply_coe, ToSpec.Œ≤, mk_eq_mk_iff, r_iff_exists] at eq1
  obtain ‚ü®‚ü®C, hC‚ü©, eq1‚ü© := eq1
  dsimp at eq1 ‚ä¢
  rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.mul_val,
    HomogeneousLocalization.mul_val, HomogeneousLocalization.mul_val,
    HomogeneousLocalization.mul_val, HomogeneousLocalization.val_mk'',
    HomogeneousLocalization.val_mk'', HomogeneousLocalization.eq_num_div_den,
    HomogeneousLocalization.eq_num_div_den, HomogeneousLocalization.eq_num_div_den,
    mk_mul, mk_mul, mk_mul, mk_mul, mk_eq_mk_iff, r_iff_exists] at eq1
  obtain ‚ü®‚ü®_, ‚ü®L, rfl‚ü©‚ü©, eq1‚ü© := eq1
  simp only [Submonoid.mk_mul_mk] at eq1
  erw [ToSpec.eval,
    ToSpec.isLocallyFraction.section_eval_num_congr (hm := hm) (f_deg := f_deg) s
      (x := x)
      (y := ‚ü®œà (œÜ ‚ü®x.1, FromSpec._mem_pbo _‚ü©) |>.1,
        by rw [(projIsoSpecTopComponent hm.out f_deg.out).hom_inv_id_apply]; exact x.2‚ü©)
      (h1 := by simp_rw [(projIsoSpecTopComponent hm.out f_deg.out).hom_inv_id_apply]; rfl),
    ToSpec.isLocallyFraction.section_eval_den_congr (hm := hm) (f_deg := f_deg) s
      (x := x)
      (y := ‚ü®œà (œÜ ‚ü®x.1, FromSpec._mem_pbo _‚ü©) |>.1,
        by rw [(projIsoSpecTopComponent hm.out f_deg.out).hom_inv_id_apply]; exact x.2‚ü©)
      (h1 := by simp_rw [(projIsoSpecTopComponent hm.out f_deg.out).hom_inv_id_apply]; rfl),
    ToSpec.isLocallyFraction.section_eval_deg_congr (hm := hm) (f_deg := f_deg) s
      (x := x)
      (y := ‚ü®œà (œÜ ‚ü®x.1, FromSpec._mem_pbo _‚ü©) |>.1,
        by rw [(projIsoSpecTopComponent hm.out f_deg.out).hom_inv_id_apply]; exact x.2‚ü©)
      (h1 := by simp_rw [(projIsoSpecTopComponent hm.out f_deg.out).hom_inv_id_apply]; rfl)] at eq1

  refine ‚ü®‚ü®(f ^ L * C.den * f ^ (s.1 x).deg) * C.num * (s.1 x).den ^ m.pred, ?_‚ü©, ?_‚ü©
  ¬∑ intro rid
    refine x.1.isPrime.mem_or_mem rid |>.elim ?_ ?_
    ¬∑ intro rid
      rw [‚Üê C.den_mem.choose_spec, ‚Üê pow_add, ‚Üê pow_add] at rid
      exact ProjIsoSpecTopComponent.ToSpec.pow_mul_num_not_mem_of_not_mem_carrier _ _ hC _ rid
    ¬∑ intro rid
      exact (s.1 x).den_mem <| x.1.isPrime.mem_of_pow_mem _ rid
  ¬∑ have eq0 (x : A) : x^m = x * x^m.pred
    ¬∑ conv_lhs =>
      rw [show m = (1 + m.pred) by rw [add_comm]; exact Nat.succ_pred_eq_of_pos hm.out |>.symm,
        pow_add, pow_one]
    dsimp
    rw [show f ^ L * C.den * f ^ (s.1 x).deg * C.num * (s.1 x).den ^ Nat.pred m *
      ((s.1 x).den *
        ((FromSpec.eval_num (ToSpec.ringHom s) x).num *
        (FromSpec.eval_den (ToSpec.ringHom s) x).den)) =
      f^L * (C.den * ((FromSpec.eval_den (ToSpec.ringHom s) x).den * (f ^ (s.1 x).deg)) *
        (C.num * ((s.1 x).den ^ m * (FromSpec.eval_num (ToSpec.ringHom s) x).num))) by
      ¬∑ rw [eq0]; ring, ‚Üê eq1]
    ring

end FromSpecToSpec

variable {ùíú} in
lemma fromSpecToSpec {m : ‚Ñï} {f : A} (hm : 0 < m) (f_deg : f ‚àà ùíú m) :
    toSpec ùíú hm f_deg ‚â´ fromSpec ùíú hm f_deg = ùüô _  := by
  ext V s
  refine Subtype.ext <| funext fun x ‚Ü¶ ?_
  erw [comp_apply, fromSpec_app, id_apply, toSpec_app,
    FromSpec.ringHom_apply_coe (hm := ‚ü®hm‚ü©) (f_deg := ‚ü®f_deg‚ü©)]
  apply FromSpecToSpec.Œ±_toSpec_ringHom (hm := ‚ü®hm‚ü©) (f_deg := ‚ü®f_deg‚ü©)

namespace ToSpecFromSpec

variable {ùíú}
variable {m : ‚Ñï} {f : A} [hm : Fact <| 0 < m] [f_deg : Fact <| f ‚àà ùíú m]
variable {V : (Opens ((Spec.T (A‚Å∞_ f))))·µí·µñ} (s : ((Spec (A‚Å∞_ f)).presheaf.obj V)) (x : V.unop)

local notation "œÜ" => (projIsoSpecTopComponent hm.out f_deg.out).hom
local notation "œà" => (projIsoSpecTopComponent hm.out f_deg.out).inv

lemma _œà_apply_mem :
    (œà x.1).1 ‚àà ((@Opens.openEmbedding Proj.T (pbo f)).isOpenMap.functor.op.obj <|
      Opens.map œÜ |>.op.obj V).unop := by
  refine ‚ü®œà x.1, ?_, rfl‚ü©
  erw [Set.mem_preimage, Set.mem_preimage,
    (projIsoSpecTopComponent hm.out f_deg.out).inv_hom_id_apply]
  exact x.2

set_option maxHeartbeats 1000000 in
lemma Œ≤_fromSpec_ringHom : ToSpec.Œ≤ m (FromSpec.ringHom s) x = s.1 x := by
  have eq1 := FromSpec.Œ± s ‚ü®(œà x.1).1, _œà_apply_mem _‚ü© |>.eq_num_div_den
  rw [FromSpec.val_Œ±, mk_eq_mk_iff, r_iff_exists] at eq1
  obtain ‚ü®‚ü®C, (hC : ¬¨ ‚àÄ _, _)‚ü©, eq1‚ü© := eq1
  rw [not_forall] at hC
  obtain ‚ü®j, hC‚ü© := hC
  dsimp at eq1
  rw [show (s.1 x) = Localization.mk (FromSpec.eval_num (m := m) s ‚ü®(œà x.1).1, _œà_apply_mem _‚ü©)
    ‚ü®FromSpec.eval_den (m := m) s ‚ü®(œà x.1).1, _œà_apply_mem _‚ü©, by
      convert FromSpec.eval_den_not_mem s ‚ü®(œà x.1).1, _œà_apply_mem _‚ü©
      erw [(projIsoSpecTopComponent hm.out f_deg.out).inv_hom_id_apply]
      rfl‚ü© from FromSpec.eval_pt_congr (f_deg := f_deg) (h := rfl) s, ToSpec.Œ≤, mk_eq_mk_iff,
    r_iff_exists]

  refine ‚ü®‚ü®_, hC‚ü©, ?_‚ü©
  dsimp
  rw [HomogeneousLocalization.ext_iff_val, HomogeneousLocalization.mul_val,
    HomogeneousLocalization.mul_val, HomogeneousLocalization.mul_val,
    HomogeneousLocalization.mul_val, HomogeneousLocalization.val_mk'',
    HomogeneousLocalization.val_mk'', HomogeneousLocalization.val_mk'',
    HomogeneousLocalization.eq_num_div_den, HomogeneousLocalization.eq_num_div_den,
    mk_mul, mk_mul, mk_mul, mk_mul, mk_eq_mk_iff, r_iff_exists]
  refine ‚ü®1, ?_‚ü©
  simp only [OneMemClass.coe_one, Submonoid.mk_mul_mk, one_mul]
  rw [show (FromSpec.Œ± (m := m) s ‚ü®(œà x.1).1, _œà_apply_mem _‚ü©) =
    ToSpec.eval m (FromSpec.ringHom s) x from rfl] at eq1
  replace eq1 := congr_arg
    (GradedAlgebra.proj ùíú
      (j +
        ((FromSpec.Œ± (m := m) s ‚ü®(œà x.1).1, _œà_apply_mem _‚ü©).deg +
          ((FromSpec.eval_num (m := m) s ‚ü®(œà x.1).1, _œà_apply_mem _‚ü©).deg +
          (FromSpec.eval_den (m := m) s ‚ü®(œà x.1).1, _œà_apply_mem _‚ü©).deg))))
    eq1

  rw [GradedAlgebra.proj_apply, GradedAlgebra.proj_apply] at eq1
  rw [coe_decompose_mul_add_of_right_mem ùíú (a := C) (i := j) ?_,
    coe_decompose_mul_add_of_right_mem ùíú (a := C) (i := j) ?_] at eq1
  pick_goal 2
  ¬∑ rw [show (FromSpec.Œ± (m := m) s ‚ü®(œà x.1).1, _œà_apply_mem _‚ü©).deg +
          ((FromSpec.eval_num (m := m) s ‚ü®(œà x.1).1, _œà_apply_mem _‚ü©).deg +
          (FromSpec.eval_den (m := m) s ‚ü®(œà x.1).1, _œà_apply_mem _‚ü©).deg) =
          (FromSpec.eval_den (m := m) s ‚ü®(œà x.1).1, _œà_apply_mem _‚ü©).deg +
          (FromSpec.eval_num (m := m) s ‚ü®(œà x.1).1, _œà_apply_mem _‚ü©).deg +
          (FromSpec.Œ± (m := m) s ‚ü®(œà x.1).1, _œà_apply_mem _‚ü©).deg by abel]
    exact SetLike.mul_mem_graded
      (SetLike.mul_mem_graded (HomogeneousLocalization.num_mem_deg _)
        (HomogeneousLocalization.den_mem_deg _))
      (HomogeneousLocalization.num_mem_deg _)
  pick_goal 2
  ¬∑ exact SetLike.mul_mem_graded
      (HomogeneousLocalization.den_mem_deg _)
      (SetLike.mul_mem_graded (HomogeneousLocalization.num_mem_deg _)
        (HomogeneousLocalization.den_mem_deg _))
  have eq0 (x : A) : x^m = x * x^m.pred
  ¬∑ conv_lhs =>
    rw [show m = (1 + m.pred) by rw [add_comm]; exact Nat.succ_pred_eq_of_pos hm.out |>.symm,
      pow_add, pow_one]
  have reorder :
      f^j *
        ((FromSpec.eval_den (m := m) s ‚ü®(œà x.1).1, _œà_apply_mem _‚ü©).den *
          f^(ToSpec.eval m (FromSpec.ringHom s) x).deg) *
        (decompose ùíú C j ^ m *
          ((ToSpec.eval m (FromSpec.ringHom s) x).den ^ m *
            (FromSpec.eval_num (m := m) s ‚ü®(œà x.1).1, _œà_apply_mem _‚ü©).num)) =
      f^j * f^(ToSpec.eval m (FromSpec.ringHom s) x).deg *
        (decompose ùíú C j * ((ToSpec.eval m (FromSpec.ringHom s) x).den *
          ((FromSpec.eval_num (m := m) s ‚ü®(œà x.1).1, _œà_apply_mem _‚ü©).num *
            (FromSpec.eval_den (m := m) s ‚ü®(œà x.1).1, _œà_apply_mem _‚ü©).den))) *
        (decompose ùíú C j ^ m.pred * (ToSpec.eval m (FromSpec.ringHom s) x).den^m.pred)
  ¬∑ rw [eq0, eq0]; ring
  erw [reorder, eq1, eq0]
  ring_nf
  rfl

end ToSpecFromSpec

variable {ùíú} in
lemma toSpecFromSpec {m : ‚Ñï} {f : A} (hm : 0 < m) (f_deg : f ‚àà ùíú m) :
    fromSpec ùíú hm f_deg ‚â´ toSpec ùíú hm f_deg = ùüô _  := by
  ext V s
  refine Subtype.ext <| funext fun x ‚Ü¶ ?_
  erw [id_apply, comp_apply, fromSpec_app, toSpec_app,
    ToSpec.ringHom_apply_coe (hm := ‚ü®hm‚ü©) (f_deg := ‚ü®f_deg‚ü©)]
  apply ToSpecFromSpec.Œ≤_fromSpec_ringHom (hm := ‚ü®hm‚ü©) (f_deg := ‚ü®f_deg‚ü©)

end ProjIsoSpecSheafComponent

variable {ùíú} in
def projIsoSpecSheafComponent {m : ‚Ñï} {f : A} (hm : 0 < m) (f_deg : f ‚àà ùíú m) :
    (projIsoSpecTopComponent hm f_deg).hom _* (Proj| (pbo f)).presheaf ‚âÖ
    (Spec (A‚Å∞_ f)).presheaf where
  hom := ProjIsoSpecSheafComponent.toSpec ùíú hm f_deg
  inv := ProjIsoSpecSheafComponent.fromSpec ùíú hm f_deg
  hom_inv_id := ProjIsoSpecSheafComponent.fromSpecToSpec hm f_deg
  inv_hom_id := ProjIsoSpecSheafComponent.toSpecFromSpec hm f_deg

variable {ùíú} in
def projIsoSpec {m : ‚Ñï} {f : A} (hm : 0 < m) (f_deg : f ‚àà ùíú m) :
    (Proj| (pbo f)) ‚âÖ Spec (A‚Å∞_ f) :=
  let e := PresheafedSpace.isoOfComponents (projIsoSpecTopComponent hm f_deg)
    (projIsoSpecSheafComponent hm f_deg)
  LocallyRingedSpace.isoOfSheafedSpaceIso ‚ü®e.1, e.2, e.3, e.4‚ü©

def ProjectiveSpectrum.exists_homogeneous_element_of_pos_degree_and_not_mem (x : Proj) :
    Œ£' (n : ‚Ñï) (f : A), 0 < n ‚àß f ‚àà ùíú n ‚àß f ‚àâ x.asHomogeneousIdeal := by
  classical
  have m := x.3
  erw [Set.not_subset] at m
  choose f h1 h2 using m
  rw [‚Üê sum_support_decompose ùíú f] at h2
  suffices m : ‚àÉ (n : ‚Ñï), 0 < n ‚àß (decompose ùíú f n : A) ‚àâ x.asHomogeneousIdeal
  ¬∑ choose n hn m using m; exact ‚ü®n, decompose ùíú f n, hn, Submodule.coe_mem _, m‚ü©
  by_contra! rid
  refine h2 <| Ideal.sum_mem _ fun i hi ‚Ü¶ rid i ?_
  simp only [DFinsupp.mem_support_toFun, ne_eq] at hi
  erw [HomogeneousIdeal.mem_irrelevant_iff, GradedAlgebra.proj_apply] at h1
  by_contra! rid
  norm_num at rid
  subst rid
  exact hi <| Subtype.ext_iff_val.mpr h1

def Proj.toScheme : AlgebraicGeometry.Scheme where
  __ := Proj
  local_affine x := by
    obtain ‚ü®n, f, hn, f_deg, hf‚ü© :=
      ProjectiveSpectrum.exists_homogeneous_element_of_pos_degree_and_not_mem ùíú x
    exact ‚ü®‚ü®pbo f, hf‚ü©, .of (A‚Å∞_ f), ‚ü®projIsoSpec hn f_deg‚ü©‚ü©

end AlgebraicGeometry
