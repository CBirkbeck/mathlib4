/-
Copyright (c) 2021 Yury G. Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury G. Kudryashov
-/
import Mathlib.MeasureTheory.Group.Action
import Mathlib.MeasureTheory.Integral.SetIntegral

#align_import measure_theory.group.fundamental_domain from "leanprover-community/mathlib"@"eb810cf549db839dadf13353dbe69bac55acdbbc"

/-!
# AEFundamental domain of a group action

A set `s` is said to be a *ae-fundamental domain* of an action of a group `G` on a measurable
space `Œ±` with respect to a measure `Œº` if

* `s` is a measurable set;

* the sets `g ‚Ä¢ s` over all `g : G` cover almost all points of the whole space;

* the sets `g ‚Ä¢ s`, are pairwise a.e. disjoint, i.e., `Œº (g‚ÇÅ ‚Ä¢ s ‚à© g‚ÇÇ ‚Ä¢ s) = 0` whenever `g‚ÇÅ ‚â† g‚ÇÇ`;
  we require this for `g‚ÇÇ = 1` in the definition, then deduce it for any two `g‚ÇÅ ‚â† g‚ÇÇ`.

In this file we prove that in case of a countable group `G` and a measure preserving action, any two
fundamental domains have the same measure, and for a `G`-invariant function, its integrals over any
two fundamental domains are equal to each other.

We also generate additive versions of all theorems in this file using the `to_additive` attribute.

## Main declarations

* `MeasureTheory.IsAEFundamentalDomain`: Predicate for a set to be an ae-fundamental domain of the
  action of a group
* `MeasureTheory.fundamentalFrontier`: Fundamental frontier of a set under the action of a group.
  Elements of `s` that belong to some other translate of `s`.
* `MeasureTheory.fundamentalInterior`: Fundamental interior of a set under the action of a group.
  Elements of `s` that do not belong to any other translate of `s`.
-/


open scoped ENNReal Pointwise Topology NNReal ENNReal MeasureTheory

open MeasureTheory MeasureTheory.Measure Set Function TopologicalSpace Filter

namespace MeasureTheory

section FundamentalDomain

/-- A set `s` is a *fundamental domain* for an additive action of an additive group `G` on a
topological space `Œ±` if the interiors of the sets `g +·µ• s`, `g : G`, are pairwise disjoint, and
their closures cover the whole space. -/
structure IsAddFundamentalDomain (G : Type _) {Œ± : Type _} [Zero G] [VAdd G Œ±] [TopologicalSpace Œ±]
    (s : Set Œ±) : Prop where
  protected covers : (‚ãÉ g : G, closure (g +·µ• s)) = univ
  protected disjoint : Pairwise <| (Disjoint on fun g : G ‚Ü¶ interior (g +·µ• s))
  --‚àÄ g‚ÇÅ g‚ÇÇ : G, g‚ÇÅ ‚â† g‚ÇÇ ‚Üí Disjoint (interior (g‚ÇÅ +·µ• s)) (interior (g‚ÇÇ +·µ• s))

/-- A set `s` is a *fundamental domain* for an action of a group `G` on a topological
space `Œ±` if the interiors of the sets `g ‚Ä¢ s`, `g : G`, are pairwise disjoint, and their closures
cover the whole space. -/
@[to_additive IsAddFundamentalDomain]
structure IsFundamentalDomain (G : Type _) {Œ± : Type _} [One G] [SMul G Œ±] [TopologicalSpace Œ±]
    (s : Set Œ±) : Prop where
  protected covers : (‚ãÉ g : G, closure (g ‚Ä¢ s)) = univ
  protected disjoint : Pairwise <| (Disjoint on fun g : G ‚Ü¶ interior (g ‚Ä¢ s))
     --‚àÄ g‚ÇÅ g‚ÇÇ : G, g‚ÇÅ ‚â† g‚ÇÇ ‚Üí Disjoint (interior (g‚ÇÅ ‚Ä¢ s)) (interior (g‚ÇÇ ‚Ä¢ s))

end FundamentalDomain

section DirichletDomain

variable (G : Type _) [Group G] [Countable G] {Œ± : Type _} [MetricSpace Œ±] [MulAction G Œ±]

def DirichletSet (x : Œ±) (g : G) : Set Œ± := { y : Œ± | dist x y ‚â§ dist (g ‚Ä¢ x) y }

def DirichletPolyhedron (x : Œ±) : Set Œ± := ‚ãÇ g : G, DirichletSet G x g

theorem DirichletPolyhedron_eq_Inter (x : Œ±) :
    DirichletPolyhedron G x = ‚ãÇ g : G, { y : Œ± | dist x y ‚â§ dist (g ‚Ä¢ x) y } := rfl

lemma isClosed_DirichletSet (x : Œ±) (g : G) : IsClosed (DirichletSet G x g) := by
  apply isClosed_le
  ¬∑ exact @Continuous.dist Œ± Œ± _ _ (fun y ‚Ü¶ x) (fun y ‚Ü¶ y) continuous_const continuous_id
  ¬∑ exact @Continuous.dist Œ± Œ± _ _ (fun y ‚Ü¶ (g ‚Ä¢ x)) (fun y ‚Ü¶ y) continuous_const continuous_id

def DirichletSet‚ÇÄ (x : Œ±) (g : G) : Set Œ± := { y : Œ± | dist x y < dist (g ‚Ä¢ x) y }

lemma DirichletSet‚ÇÄSubset (x : Œ±) (g : G) : DirichletSet‚ÇÄ G x g ‚äÜ DirichletSet G x g := by
  intro y
  simp only [DirichletSet‚ÇÄ, DirichletSet, Set.mem_setOf]
  exact fun h ‚Ü¶ h.le

lemma isOpen_DirichletSet‚ÇÄ (x : Œ±) (g : G) : IsOpen (DirichletSet‚ÇÄ G x g) := by
  apply isOpen_lt
  ¬∑ exact @Continuous.dist Œ± Œ± _ _ (fun y ‚Ü¶ x) (fun y ‚Ü¶ y) continuous_const continuous_id
  ¬∑ exact @Continuous.dist Œ± Œ± _ _ (fun y ‚Ü¶ (g ‚Ä¢ x)) (fun y ‚Ü¶ y) continuous_const continuous_id

structure ExtendableSpace (Œ± : Type _) [PseudoMetricSpace Œ±] : Prop where
  protected extendable : ‚àÄ x y : Œ±, ‚àÉ·∂† z in ùìù y, dist x y < dist x z

lemma interior_closedBall'' {Œ± : Type _} [MetricSpace Œ±] {hŒ± : ExtendableSpace Œ±} (x : Œ±)
    (r : ‚Ñù) (hr : 0 < r) :
    interior (Metric.closedBall x r) = Metric.ball x r := by
  refine Subset.antisymm ?_ Metric.ball_subset_interior_closedBall
  intro y hy
  simp only [interior, mem_sUnion] at hy
  obtain ‚ü®t, ht‚ÇÅ, ht‚ÇÇ‚ü© := hy
  simp only [mem_setOf] at ht‚ÇÅ
  simp only [Metric.mem_ball]
  by_contra hh
  have dxyr : dist x y = r
  ¬∑ rw [dist_comm]
    push_neg at hh
    have : y ‚àà Metric.closedBall x r := Set.mem_of_subset_of_mem ht‚ÇÅ.2 ht‚ÇÇ
    rw [Metric.mem_closedBall] at this
    exact le_antisymm this hh







#exit


lemma interior_DirichletSet (x : Œ±) (g : G) :
    interior (DirichletSet G x g) = DirichletSet‚ÇÄ G x g := by
  refine Subset.antisymm ?_
    (interior_maximal (DirichletSet‚ÇÄSubset G x g) (isOpen_DirichletSet‚ÇÄ G x g))
  intro y
  simp only [mem_interior, mem_setOf, DirichletSet‚ÇÄ, DirichletSet]
  intro h
  obtain ‚ü®t, ht‚ÇÅ, ht‚ÇÇ, ht‚ÇÉ‚ü© := h
  sorry



#exit


variable [IsometricSMul G Œ±]

lemma bubDirichletSet_iff (x y : Œ±) (g h : G) :
    dist x y ‚â§ dist (g ‚Ä¢ x) y ‚Üî dist (h ‚Ä¢ x) (h ‚Ä¢ y) ‚â§ dist ((h * g) ‚Ä¢ x) (h ‚Ä¢ y) := by
  simp only [dist_smul]
  suffices hh : dist ((h * g) ‚Ä¢ x) (h ‚Ä¢ y) = dist (g ‚Ä¢ x) y
  ¬∑ rw [hh]
  ¬∑ rw [mul_smul, dist_smul]

lemma bubDirichletSet (x : Œ±) (g h : G) :
    h ‚Ä¢ DirichletSet G x g = DirichletSet G (h ‚Ä¢ x) (h * g * h‚Åª¬π) := by
  ext y
  simp only [DirichletSet]
  rw [mem_smul_set_iff_inv_smul_mem, mem_setOf_eq, mem_setOf_eq, mul_smul, mul_smul,
    (dist_smul h x (h‚Åª¬π ‚Ä¢ y)).symm, (dist_smul h (g ‚Ä¢ x) (h‚Åª¬π ‚Ä¢ y)).symm, smul_inv_smul h y,
    inv_smul_smul h x]

/- Belongs elsewhere `Mathlib.Data.Set.Pointwise.SMul` -/
theorem Set.smulSet_iInter {Œ± : Type _} {Œ≤ : Type _} {Œπ : Sort _} [Group Œ±]
    [MulAction Œ± Œ≤] (a : Œ±) (s : Œπ ‚Üí Set Œ≤) :
    a ‚Ä¢ (‚ãÇ (i : Œπ), s i) = ‚ãÇ (i : Œπ), a ‚Ä¢ s i :=
  Set.image_iInter (MulAction.toPerm a).bijective _

/- move to `Mathlib.Algebra.Hom.Equiv.Units.Basic`? -/
theorem Group.conj_bijective {Œ± : Type _} [Group Œ±] (g : Œ±) :
    Bijective (fun h ‚Ü¶ g * h * g‚Åª¬π) :=
  (Group.mulRight_bijective g‚Åª¬π).comp (Group.mulLeft_bijective g)

lemma bubDirichletPolyhedron (x : Œ±) (g : G) :
    g ‚Ä¢ DirichletPolyhedron G x = DirichletPolyhedron G (g ‚Ä¢ x) := by
  simp only [DirichletPolyhedron]
  rw [Set.smulSet_iInter]
  simp_rw [bubDirichletSet]
  rw [Surjective.iInter_comp]
  exact (Group.conj_bijective g).2

lemma isClosed_bubDirichletSet (x : Œ±) (g h : G) : IsClosed (h ‚Ä¢ DirichletSet G x g) := by
  rw [bubDirichletSet]
  exact isClosed_DirichletSet G (h ‚Ä¢ x) (h * g * h‚Åª¬π)

lemma closure_bubDirichletSet (x : Œ±) (g h : G) :
    closure (h ‚Ä¢ DirichletSet G x g) = h ‚Ä¢ DirichletSet G x g :=
  closure_eq_iff_isClosed.mpr (isClosed_bubDirichletSet G x g h)

lemma isClosed_DirichletPolyhedron (x : Œ±) : IsClosed (DirichletPolyhedron G x) := by
  rw [DirichletPolyhedron_eq_Inter]
  exact isClosed_iInter fun g => isClosed_DirichletSet G x g

lemma isClosed_bubDirichletPolyhedron (x : Œ±) (g : G) :
    IsClosed (g ‚Ä¢ DirichletPolyhedron G x) := by
  rw [bubDirichletPolyhedron]
  exact isClosed_DirichletPolyhedron G (g ‚Ä¢ x)

lemma closure_bubDirichletPolyhedron (x : Œ±) (g : G) :
    closure (g ‚Ä¢ DirichletPolyhedron G x) = g ‚Ä¢ DirichletPolyhedron G x :=
  closure_eq_iff_isClosed.mpr (isClosed_bubDirichletPolyhedron G x g)

theorem IsCover_of_DirichletPolyhedron [ProperSpace Œ±] [i‚ÇÅ : ProperlyDiscontinuousSMul G Œ±]
    (x : Œ±) : ‚ãÉ (g : G), closure (g ‚Ä¢ DirichletPolyhedron G x) = univ := by
  simp_rw [closure_bubDirichletPolyhedron, bubDirichletPolyhedron]
  simp only [DirichletPolyhedron]
  ext y
  simp_rw [mem_univ, iff_true, DirichletSet, mem_iUnion, mem_iInter, mem_setOf]
  let t := Metric.closedBall y (dist x y)
  have comp_t : IsCompact t := isCompact_closedBall y (dist x y)
  have fin_orbit := i‚ÇÅ.finite_disjoint_inter_image comp_t comp_t
  set Œì := {Œ≥ : G | (Œ≥ ‚Ä¢ t) ‚à© t ‚â† ‚àÖ}
  have one_in_Œì : 1 ‚àà Œì := by simp [image_smul, Metric.smul_closedBall, ne_eq, mem_setOf_eq,
    one_smul, inter_self, Metric.closedBall_eq_empty, not_lt, dist_nonneg]
  have nonempty_Œì : Set.Nonempty Œì := ‚ü®1, one_in_Œì‚ü©
  obtain ‚ü®g, -, hg‚ü© :=
    @Set.exists_min_image G ‚Ñù _ Œì (fun Œ≥ ‚Ü¶ dist (Œ≥ ‚Ä¢ x) y) fin_orbit nonempty_Œì
  use g
  intro Œ≥
  by_cases hŒ≥ : (Œ≥ * g) ‚àà Œì
  ¬∑ convert hg (Œ≥ * g) hŒ≥ using 2
    simp [mul_smul]
  ¬∑ have Œ≥gt_inter  : (Œ≥ * g) ‚Ä¢ t ‚à© t = ‚àÖ := by
      simp only [not_not, mem_smul_set_iff_inv_smul_mem, mem_setOf_eq] at hŒ≥
      exact hŒ≥
    calc _ ‚â§ dist x y := by convert hg 1 one_in_Œì; simp
          _ ‚â§ _ := ?_
    by_contra hh
    simp only [not_le] at hh
    have : (Œ≥ * g) ‚Ä¢ x ‚àà (Œ≥ * g) ‚Ä¢ t ‚à© t
    ¬∑ simp only [Metric.smul_closedBall, mem_inter_iff, Metric.mem_closedBall, dist_smul, le_refl,
        true_and]
      convert hh.le using 2
      simp [mul_smul]
    rw [Œ≥gt_inter] at this
    exact this

theorem IsDisjoint_of_DirichletPolyhedron {x : Œ±} (hx : ‚àÄ g : G, g ‚Ä¢ x ‚â† x) : ‚àÄ (g‚ÇÅ g‚ÇÇ : G),
    g‚ÇÅ ‚â† g‚ÇÇ ‚Üí
    Disjoint (interior (g‚ÇÅ ‚Ä¢ DirichletPolyhedron G x)) (interior (g‚ÇÇ ‚Ä¢ DirichletPolyhedron G x))
    := by
  intro g‚ÇÅ g‚ÇÇ hg12
  simp_rw [bubDirichletPolyhedron, DirichletPolyhedron, Set.disjoint_iff]
  intro y ‚ü®hy‚ÇÅ, hy‚ÇÇ‚ü©
  simp only [mem_empty_iff_false]
  simp_rw [interior_iInter] at hy‚ÇÅ
  sorry


theorem IsFundamentalDomain_of_DirichletPolyhedron [ProperSpace Œ±]
    [ProperlyDiscontinuousSMul G Œ±] {x : Œ±} (hx : ‚àÄ g : G, g ‚Ä¢ x ‚â† x) :
    IsFundamentalDomain G (DirichletPolyhedron G x) where
      covers := IsCover_of_DirichletPolyhedron G x
      disjoint := IsDisjoint_of_DirichletPolyhedron G hx



#exit






            -- apply le_of_lt
            -- dsimp at this
            -- simp_rw [Metric.closedBall, mem_smul_set_iff_inv_smul_mem] at this
            -- by_contra hh
            -- simp only [not_lt] at hh
            -- have : x ‚àà (Œ≥ * g) ‚Ä¢ {z | dist z y ‚â§ dist x y} ‚à© {z | dist z y ‚â§ dist x y} := by
            --   simp only [mem_inter_iff, mem_setOf_eq, le_refl, and_true]
            --   simp only [mem_smul_set_iff_inv_smul_mem, mem_setOf_eq]
            --   sorry


          -- dsimp at this
          -- convert this using 2
          -- simp [mul_smul]

        -- simp_rw [closure_bubDirichletSet]

        -- simp only [mem_iUnion, mem_univ, iff_true]
        -- simp only [mem_Union, mem_closure_iff_nhds_within_ne_bot, mem_set_of_eq]
        -- rw [‚Üê exists_ne]
        -- exact hx
        sorry


    simp only [DirichletPolyhedron, mem_setOf_eq]
    intro Œ≥
    have dist_eq : dist (Œ≥ ‚Ä¢ x) (g ‚Ä¢ y) = dist x ((Œ≥‚Åª¬π * g) ‚Ä¢ y) := by
      convert @dist_smul G Œ± _ _ _ Œ≥ x ((Œ≥‚Åª¬π * g) ‚Ä¢ y) using 2
      rw [‚Üê mul_smul]
      simp
    have := hg (Œ≥‚Åª¬π * g)
    by_cases hŒ≥ : (Œ≥‚Åª¬π * g) ‚àà Œì
    ¬∑ have := this hŒ≥
      convert this using 1
    ¬∑ simp only [image_smul, Metric.smul_closedBall, ne_eq, mem_setOf_eq, not_not] at hŒ≥
      rw [dist_eq]
      sorry

    -- have : (‚ãÉ g : G, (fun y ‚Ü¶ g ‚Ä¢ y) '' s) = univ := by
    --   ext z
    --   simp only [image_smul, mem_iUnion, mem_univ, iff_true]


  aedisjoint := by
    set s := DirichletPolyhedron G x
    intro g‚ÇÅ g‚ÇÇ h
    change Œº (( (fun y ‚Ü¶ g‚ÇÅ ‚Ä¢ y) '' s) ‚à©  (fun y ‚Ü¶ g‚ÇÇ ‚Ä¢ y) '' s) = 0

    sorry


end DirichletDomain


section AEFundamentalDomain

/-- A measurable set `s` is an *ae-fundamental domain* for an additive action of an additive
group `G` on a measurable space `Œ±` with respect to a measure `Œ±` if the sets `g +·µ• s`, `g : G`,
are pairwise a.e. disjoint and cover the whole space. -/
structure IsAddAEFundamentalDomain (G : Type _) {Œ± : Type _} [Zero G] [VAdd G Œ±] [MeasurableSpace Œ±]
    (s : Set Œ±) (Œº : Measure Œ± := by volume_tac) : Prop where
  protected nullMeasurableSet : NullMeasurableSet s Œº
  protected ae_covers : ‚àÄ·µê x ‚àÇŒº, ‚àÉ g : G, g +·µ• x ‚àà s
  protected aedisjoint : Pairwise <| (AEDisjoint Œº on fun g : G => g +·µ• s)

/-- A measurable set `s` is an *ae-fundamental domain* for an action of a group `G` on a measurable
space `Œ±` with respect to a measure `Œ±` if the sets `g ‚Ä¢ s`, `g : G`, are pairwise a.e. disjoint
and cover the whole space. -/
@[to_additive IsAddAEFundamentalDomain]
structure IsAEFundamentalDomain (G : Type _) {Œ± : Type _} [One G] [SMul G Œ±] [MeasurableSpace Œ±]
    (s : Set Œ±) (Œº : Measure Œ± := by volume_tac) : Prop where
  protected nullMeasurableSet : NullMeasurableSet s Œº
  protected ae_covers : ‚àÄ·µê x ‚àÇŒº, ‚àÉ g : G, g ‚Ä¢ x ‚àà s
  protected aedisjoint : Pairwise <| (AEDisjoint Œº on fun g : G => g ‚Ä¢ s)

variable {G H Œ± Œ≤ E : Type _}

namespace IsAEFundamentalDomain

variable [Group G] [Group H] [MulAction G Œ±] [MeasurableSpace Œ±] [MulAction H Œ≤] [MeasurableSpace Œ≤]
  [NormedAddCommGroup E] {s t : Set Œ±} {Œº : Measure Œ±}

/-- If for each `x : Œ±`, exactly one of `g ‚Ä¢ x`, `g : G`, belongs to a measurable set `s`, then `s`
is a fundamental domain for the action of `G` on `Œ±`. -/
@[to_additive "If for each `x : Œ±`, exactly one of `g +·µ• x`, `g : G`, belongs to a measurable set
`s`, then `s` is a fundamental domain for the additive action of `G` on `Œ±`."]
theorem mk' (h_meas : NullMeasurableSet s Œº) (h_exists : ‚àÄ x : Œ±, ‚àÉ! g : G, g ‚Ä¢ x ‚àà s) :
    IsAEFundamentalDomain G s Œº where
  nullMeasurableSet := h_meas
  ae_covers := eventually_of_forall fun x => (h_exists x).exists
  aedisjoint a b hab := Disjoint.aedisjoint <| disjoint_left.2 fun x hxa hxb => by
    rw [mem_smul_set_iff_inv_smul_mem] at hxa hxb
    exact hab (inv_injective <| (h_exists x).unique hxa hxb)

/-- For `s` to be a fundamental domain, it's enough to check
`MeasureTheory.AEDisjoint (g ‚Ä¢ s) s` for `g ‚â† 1`. -/
@[to_additive "For `s` to be a fundamental domain, it's enough to check
  `MeasureTheory.AEDisjoint (g +·µ• s) s` for `g ‚â† 0`."]
theorem mk'' (h_meas : NullMeasurableSet s Œº) (h_ae_covers : ‚àÄ·µê x ‚àÇŒº, ‚àÉ g : G, g ‚Ä¢ x ‚àà s)
    (h_ae_disjoint : ‚àÄ g, g ‚â† (1 : G) ‚Üí AEDisjoint Œº (g ‚Ä¢ s) s)
    (h_qmp : ‚àÄ g : G, QuasiMeasurePreserving ((g ‚Ä¢ ¬∑) : Œ± ‚Üí Œ±) Œº Œº) :
    IsAEFundamentalDomain G s Œº where
  nullMeasurableSet := h_meas
  ae_covers := h_ae_covers
  aedisjoint := pairwise_aedisjoint_of_aedisjoint_forall_ne_one h_ae_disjoint h_qmp

/-- If a measurable space has a finite measure `Œº` and a countable group `G` acts
quasi-measure-preservingly, then to show that a set `s` is a fundamental domain, it is sufficient
to check that its translates `g ‚Ä¢ s` are (almost) disjoint and that the sum `‚àë' g, Œº (g ‚Ä¢ s)` is
sufficiently large. -/
@[to_additive
  "If a measurable space has a finite measure `Œº` and a countable additive group `G` acts
  quasi-measure-preservingly, then to show that a set `s` is a fundamental domain, it is sufficient
  to check that its translates `g +·µ• s` are (almost) disjoint and that the sum `‚àë' g, Œº (g +·µ• s)` is
  sufficiently large."]
theorem mk_of_measure_univ_le [IsFiniteMeasure Œº] [Countable G] (h_meas : NullMeasurableSet s Œº)
    (h_ae_disjoint : ‚àÄ (g) (_ : g ‚â† (1 : G)), AEDisjoint Œº (g ‚Ä¢ s) s)
    (h_qmp : ‚àÄ g : G, QuasiMeasurePreserving ((¬∑ ‚Ä¢ ¬∑) g : Œ± ‚Üí Œ±) Œº Œº)
    (h_measure_univ_le : Œº (univ : Set Œ±) ‚â§ ‚àë' g : G, Œº (g ‚Ä¢ s)) : IsAEFundamentalDomain G s Œº :=
  have aedisjoint : Pairwise (AEDisjoint Œº on fun g : G => g ‚Ä¢ s) :=
    pairwise_aedisjoint_of_aedisjoint_forall_ne_one h_ae_disjoint h_qmp
  { nullMeasurableSet := h_meas
    aedisjoint
    ae_covers := by
      replace h_meas : ‚àÄ g : G, NullMeasurableSet (g ‚Ä¢ s) Œº := fun g => by
        rw [‚Üê inv_inv g, ‚Üê preimage_smul]; exact h_meas.preimage (h_qmp g‚Åª¬π)
      have h_meas' : NullMeasurableSet {a | ‚àÉ g : G, g ‚Ä¢ a ‚àà s} Œº := by
        rw [‚Üê iUnion_smul_eq_setOf_exists]; exact .iUnion h_meas
      rw [ae_iff_measure_eq h_meas', ‚Üê iUnion_smul_eq_setOf_exists]
      refine' le_antisymm (measure_mono <| subset_univ _) _
      rw [measure_iUnion‚ÇÄ aedisjoint h_meas]
      exact h_measure_univ_le }

@[to_additive]
theorem iUnion_smul_ae_eq (h : IsAEFundamentalDomain G s Œº) : ‚ãÉ g : G, g ‚Ä¢ s =·µê[Œº] univ :=
  eventuallyEq_univ.2 <| h.ae_covers.mono fun _ ‚ü®g, hg‚ü© =>
    mem_iUnion.2 ‚ü®g‚Åª¬π, _, hg, inv_smul_smul _ _‚ü©

@[to_additive]
theorem mono (h : IsAEFundamentalDomain G s Œº) {ŒΩ : Measure Œ±} (hle : ŒΩ ‚â™ Œº) :
    IsAEFundamentalDomain G s ŒΩ :=
  ‚ü®h.1.mono_ac hle, hle h.2, h.aedisjoint.mono fun _ _ h => hle h‚ü©

@[to_additive]
theorem preimage_of_equiv {ŒΩ : Measure Œ≤} (h : IsAEFundamentalDomain G s Œº) {f : Œ≤ ‚Üí Œ±}
    (hf : QuasiMeasurePreserving f ŒΩ Œº) {e : G ‚Üí H} (he : Bijective e)
    (hef : ‚àÄ g, Semiconj f (e g ‚Ä¢ ¬∑) (g ‚Ä¢ ¬∑)) : IsAEFundamentalDomain H (f ‚Åª¬π' s) ŒΩ where
  nullMeasurableSet := h.nullMeasurableSet.preimage hf
  ae_covers := (hf.ae h.ae_covers).mono fun x ‚ü®g, hg‚ü© => ‚ü®e g, by rwa [mem_preimage, hef g x]‚ü©
  aedisjoint a b hab := by
    lift e to G ‚âÉ H using he
    have : (e.symm a‚Åª¬π)‚Åª¬π ‚â† (e.symm b‚Åª¬π)‚Åª¬π := by simp [hab]
    have := (h.aedisjoint this).preimage hf
    simp only [Semiconj] at hef
    simpa only [onFun, ‚Üê preimage_smul_inv, preimage_preimage, ‚Üê hef, e.apply_symm_apply, inv_inv]
      using this

@[to_additive]
theorem image_of_equiv {ŒΩ : Measure Œ≤} (h : IsAEFundamentalDomain G s Œº) (f : Œ± ‚âÉ Œ≤)
    (hf : QuasiMeasurePreserving f.symm ŒΩ Œº) (e : H ‚âÉ G)
    (hef : ‚àÄ g, Semiconj f (e g ‚Ä¢ ¬∑) (g ‚Ä¢ ¬∑)) : IsAEFundamentalDomain H (f '' s) ŒΩ := by
  rw [f.image_eq_preimage]
  refine' h.preimage_of_equiv hf e.symm.bijective fun g x => _
  rcases f.surjective x with ‚ü®x, rfl‚ü©
  rw [‚Üê hef _ _, f.symm_apply_apply, f.symm_apply_apply, e.apply_symm_apply]

@[to_additive]
theorem pairwise_aedisjoint_of_ac {ŒΩ} (h : IsAEFundamentalDomain G s Œº) (hŒΩ : ŒΩ ‚â™ Œº) :
    Pairwise fun g‚ÇÅ g‚ÇÇ : G => AEDisjoint ŒΩ (g‚ÇÅ ‚Ä¢ s) (g‚ÇÇ ‚Ä¢ s) :=
  h.aedisjoint.mono fun _ _ H => hŒΩ H

@[to_additive]
theorem smul_of_comm {G' : Type _} [Group G'] [MulAction G' Œ±] [MeasurableSpace G']
    [MeasurableSMul G' Œ±] [SMulInvariantMeasure G' Œ± Œº] [SMulCommClass G' G Œ±]
    (h : IsAEFundamentalDomain G s Œº) (g : G') : IsAEFundamentalDomain G (g ‚Ä¢ s) Œº :=
  h.image_of_equiv (MulAction.toPerm g) (measurePreserving_smul _ _).quasiMeasurePreserving
    (Equiv.refl _) <| smul_comm g

variable [MeasurableSpace G] [MeasurableSMul G Œ±] [SMulInvariantMeasure G Œ± Œº]

@[to_additive]
theorem nullMeasurableSet_smul (h : IsAEFundamentalDomain G s Œº) (g : G) :
    NullMeasurableSet (g ‚Ä¢ s) Œº :=
  h.nullMeasurableSet.smul g

@[to_additive]
theorem restrict_restrict (h : IsAEFundamentalDomain G s Œº) (g : G) (t : Set Œ±) :
    (Œº.restrict t).restrict (g ‚Ä¢ s) = Œº.restrict (g ‚Ä¢ s ‚à© t) :=
  restrict_restrict‚ÇÄ ((h.nullMeasurableSet_smul g).mono restrict_le_self)

@[to_additive]
theorem smul (h : IsAEFundamentalDomain G s Œº) (g : G) : IsAEFundamentalDomain G (g ‚Ä¢ s) Œº :=
  h.image_of_equiv (MulAction.toPerm g) (measurePreserving_smul _ _).quasiMeasurePreserving
    ‚ü®fun g' => g‚Åª¬π * g' * g, fun g' => g * g' * g‚Åª¬π, fun g' => by simp [mul_assoc], fun g' => by
      simp [mul_assoc]‚ü©
    fun g' x => by simp [smul_smul, mul_assoc]

variable [Countable G] {ŒΩ : Measure Œ±}

@[to_additive]
theorem sum_restrict_of_ac (h : IsAEFundamentalDomain G s Œº) (hŒΩ : ŒΩ ‚â™ Œº) :
    (sum fun g : G => ŒΩ.restrict (g ‚Ä¢ s)) = ŒΩ := by
  rw [‚Üê restrict_iUnion_ae (h.aedisjoint.mono fun i j h => hŒΩ h) fun g =>
      (h.nullMeasurableSet_smul g).mono_ac hŒΩ,
    restrict_congr_set (hŒΩ h.iUnion_smul_ae_eq), restrict_univ]

@[to_additive]
theorem lintegral_eq_tsum_of_ac (h : IsAEFundamentalDomain G s Œº) (hŒΩ : ŒΩ ‚â™ Œº) (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) :
    ‚à´‚Åª x, f x ‚àÇŒΩ = ‚àë' g : G, ‚à´‚Åª x in g ‚Ä¢ s, f x ‚àÇŒΩ := by
  rw [‚Üê lintegral_sum_measure, h.sum_restrict_of_ac hŒΩ]

@[to_additive]
theorem sum_restrict (h : IsAEFundamentalDomain G s Œº) :
    (sum fun g : G => Œº.restrict (g ‚Ä¢ s)) = Œº := h.sum_restrict_of_ac (refl _)

@[to_additive]
theorem lintegral_eq_tsum (h : IsAEFundamentalDomain G s Œº) (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) :
    ‚à´‚Åª x, f x ‚àÇŒº = ‚àë' g : G, ‚à´‚Åª x in g ‚Ä¢ s, f x ‚àÇŒº :=
  h.lintegral_eq_tsum_of_ac (refl _) f

@[to_additive]
theorem lintegral_eq_tsum' (h : IsAEFundamentalDomain G s Œº) (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) :
    ‚à´‚Åª x, f x ‚àÇŒº = ‚àë' g : G, ‚à´‚Åª x in s, f (g‚Åª¬π ‚Ä¢ x) ‚àÇŒº :=
  calc
    ‚à´‚Åª x, f x ‚àÇŒº = ‚àë' g : G, ‚à´‚Åª x in g ‚Ä¢ s, f x ‚àÇŒº := h.lintegral_eq_tsum f
    _ = ‚àë' g : G, ‚à´‚Åª x in g‚Åª¬π ‚Ä¢ s, f x ‚àÇŒº := ((Equiv.inv G).tsum_eq _).symm
    _ = ‚àë' g : G, ‚à´‚Åª x in s, f (g‚Åª¬π ‚Ä¢ x) ‚àÇŒº := tsum_congr fun g => Eq.symm <|
      (measurePreserving_smul g‚Åª¬π Œº).set_lintegral_comp_emb (measurableEmbedding_const_smul _) _ _

@[to_additive]
theorem set_lintegral_eq_tsum (h : IsAEFundamentalDomain G s Œº) (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) (t : Set Œ±) :
    ‚à´‚Åª x in t, f x ‚àÇŒº = ‚àë' g : G, ‚à´‚Åª x in t ‚à© g ‚Ä¢ s, f x ‚àÇŒº :=
  calc
    ‚à´‚Åª x in t, f x ‚àÇŒº = ‚àë' g : G, ‚à´‚Åª x in g ‚Ä¢ s, f x ‚àÇŒº.restrict t :=
      h.lintegral_eq_tsum_of_ac restrict_le_self.absolutelyContinuous _
    _ = ‚àë' g : G, ‚à´‚Åª x in t ‚à© g ‚Ä¢ s, f x ‚àÇŒº := by simp only [h.restrict_restrict, inter_comm]

@[to_additive]
theorem set_lintegral_eq_tsum' (h : IsAEFundamentalDomain G s Œº) (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) (t : Set Œ±) :
    ‚à´‚Åª x in t, f x ‚àÇŒº = ‚àë' g : G, ‚à´‚Åª x in g ‚Ä¢ t ‚à© s, f (g‚Åª¬π ‚Ä¢ x) ‚àÇŒº :=
  calc
    ‚à´‚Åª x in t, f x ‚àÇŒº = ‚àë' g : G, ‚à´‚Åª x in t ‚à© g ‚Ä¢ s, f x ‚àÇŒº := h.set_lintegral_eq_tsum f t
    _ = ‚àë' g : G, ‚à´‚Åª x in t ‚à© g‚Åª¬π ‚Ä¢ s, f x ‚àÇŒº := ((Equiv.inv G).tsum_eq _).symm
    _ = ‚àë' g : G, ‚à´‚Åª x in g‚Åª¬π ‚Ä¢ (g ‚Ä¢ t ‚à© s), f x ‚àÇŒº := by simp only [smul_set_inter, inv_smul_smul]
    _ = ‚àë' g : G, ‚à´‚Åª x in g ‚Ä¢ t ‚à© s, f (g‚Åª¬π ‚Ä¢ x) ‚àÇŒº := tsum_congr fun g => Eq.symm <|
      (measurePreserving_smul g‚Åª¬π Œº).set_lintegral_comp_emb (measurableEmbedding_const_smul _) _ _

@[to_additive]
theorem measure_eq_tsum_of_ac (h : IsAEFundamentalDomain G s Œº) (hŒΩ : ŒΩ ‚â™ Œº) (t : Set Œ±) :
    ŒΩ t = ‚àë' g : G, ŒΩ (t ‚à© g ‚Ä¢ s) := by
  have H : ŒΩ.restrict t ‚â™ Œº := Measure.restrict_le_self.absolutelyContinuous.trans hŒΩ
  simpa only [set_lintegral_one, Pi.one_def,
    Measure.restrict_apply‚ÇÄ ((h.nullMeasurableSet_smul _).mono_ac H), inter_comm] using
    h.lintegral_eq_tsum_of_ac H 1

@[to_additive]
theorem measure_eq_tsum' (h : IsAEFundamentalDomain G s Œº) (t : Set Œ±) :
    Œº t = ‚àë' g : G, Œº (t ‚à© g ‚Ä¢ s) :=
  h.measure_eq_tsum_of_ac AbsolutelyContinuous.rfl t

@[to_additive]
theorem measure_eq_tsum (h : IsAEFundamentalDomain G s Œº) (t : Set Œ±) :
    Œº t = ‚àë' g : G, Œº (g ‚Ä¢ t ‚à© s) := by
  simpa only [set_lintegral_one] using h.set_lintegral_eq_tsum' (fun _ => 1) t

@[to_additive]
theorem measure_zero_of_invariant (h : IsAEFundamentalDomain G s Œº) (t : Set Œ±)
    (ht : ‚àÄ g : G, g ‚Ä¢ t = t) (hts : Œº (t ‚à© s) = 0) : Œº t = 0 := by
  rw [measure_eq_tsum h]; simp [ht, hts]

/-- Given a measure space with an action of a finite group `G`, the measure of any `G`-invariant set
is determined by the measure of its intersection with a fundamental domain for the action of `G`. -/
@[to_additive measure_eq_card_smul_of_vadd_ae_eq_self "Given a measure space with an action of a
  finite additive group `G`, the measure of any `G`-invariant set is determined by the measure of
  its intersection with a fundamental domain for the action of `G`."]
theorem measure_eq_card_smul_of_smul_ae_eq_self [Finite G] (h : IsAEFundamentalDomain G s Œº)
    (t : Set Œ±) (ht : ‚àÄ g : G, (g ‚Ä¢ t : Set Œ±) =·µê[Œº] t) : Œº t = Nat.card G ‚Ä¢ Œº (t ‚à© s) := by
  haveI : Fintype G := Fintype.ofFinite G
  rw [h.measure_eq_tsum]
  replace ht : ‚àÄ g : G, (g ‚Ä¢ t ‚à© s : Set Œ±) =·µê[Œº] (t ‚à© s : Set Œ±) := fun g =>
    ae_eq_set_inter (ht g) (ae_eq_refl s)
  simp_rw [measure_congr (ht _), tsum_fintype, Finset.sum_const, Nat.card_eq_fintype_card,
    Finset.card_univ]

@[to_additive]
protected theorem set_lintegral_eq (hs : IsAEFundamentalDomain G s Œº)
    (ht : IsAEFundamentalDomain G t Œº) (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) (hf : ‚àÄ (g : G) (x), f (g ‚Ä¢ x) = f x) :
    ‚à´‚Åª x in s, f x ‚àÇŒº = ‚à´‚Åª x in t, f x ‚àÇŒº :=
  calc
    ‚à´‚Åª x in s, f x ‚àÇŒº = ‚àë' g : G, ‚à´‚Åª x in s ‚à© g ‚Ä¢ t, f x ‚àÇŒº := ht.set_lintegral_eq_tsum _ _
    _ = ‚àë' g : G, ‚à´‚Åª x in g ‚Ä¢ t ‚à© s, f (g‚Åª¬π ‚Ä¢ x) ‚àÇŒº := by simp only [hf, inter_comm]
    _ = ‚à´‚Åª x in t, f x ‚àÇŒº := (hs.set_lintegral_eq_tsum' _ _).symm

@[to_additive]
theorem measure_set_eq (hs : IsAEFundamentalDomain G s Œº) (ht : IsAEFundamentalDomain G t Œº)
    {A : Set Œ±} (hA‚ÇÄ : MeasurableSet A) (hA : ‚àÄ g : G, (fun x => g ‚Ä¢ x) ‚Åª¬π' A = A) :
    Œº (A ‚à© s) = Œº (A ‚à© t) := by
  have : ‚à´‚Åª x in s, A.indicator 1 x ‚àÇŒº = ‚à´‚Åª x in t, A.indicator 1 x ‚àÇŒº := by
    refine hs.set_lintegral_eq ht (Set.indicator A fun _ => 1) fun g x ‚Ü¶ ?_
    convert (Set.indicator_comp_right (g ‚Ä¢ ¬∑ : Œ± ‚Üí Œ±) (g := fun _ ‚Ü¶ (1 : ‚Ñù‚â•0‚àû))).symm
    rw [hA g]
  simpa [Measure.restrict_apply hA‚ÇÄ, lintegral_indicator _ hA‚ÇÄ] using this

/-- If `s` and `t` are two fundamental domains of the same action, then their measures are equal. -/
@[to_additive "If `s` and `t` are two fundamental domains of the same action, then their measures
  are equal."]
protected theorem measure_eq (hs : IsAEFundamentalDomain G s Œº) (ht : IsAEFundamentalDomain G t Œº) :
    Œº s = Œº t := by
  simpa only [set_lintegral_one] using hs.set_lintegral_eq ht (fun _ => 1) fun _ _ => rfl

@[to_additive]
protected theorem aEStronglyMeasurable_on_iff {Œ≤ : Type _} [TopologicalSpace Œ≤]
    [PseudoMetrizableSpace Œ≤] (hs : IsAEFundamentalDomain G s Œº) (ht : IsAEFundamentalDomain G t Œº)
    {f : Œ± ‚Üí Œ≤} (hf : ‚àÄ (g : G) (x), f (g ‚Ä¢ x) = f x) :
    AEStronglyMeasurable f (Œº.restrict s) ‚Üî AEStronglyMeasurable f (Œº.restrict t) :=
  calc
    AEStronglyMeasurable f (Œº.restrict s) ‚Üî
        AEStronglyMeasurable f (Measure.sum fun g : G => Œº.restrict (g ‚Ä¢ t ‚à© s)) := by
      simp only [‚Üê ht.restrict_restrict,
        ht.sum_restrict_of_ac restrict_le_self.absolutelyContinuous]
    _ ‚Üî ‚àÄ g : G, AEStronglyMeasurable f (Œº.restrict (g ‚Ä¢ (g‚Åª¬π ‚Ä¢ s ‚à© t))) := by
      simp only [smul_set_inter, inter_comm, smul_inv_smul, aestronglyMeasurable_sum_measure_iff]
    _ ‚Üî ‚àÄ g : G, AEStronglyMeasurable f (Œº.restrict (g‚Åª¬π ‚Ä¢ (g‚Åª¬π‚Åª¬π ‚Ä¢ s ‚à© t))) :=
      inv_surjective.forall
    _ ‚Üî ‚àÄ g : G, AEStronglyMeasurable f (Œº.restrict (g‚Åª¬π ‚Ä¢ (g ‚Ä¢ s ‚à© t))) := by simp only [inv_inv]
    _ ‚Üî ‚àÄ g : G, AEStronglyMeasurable f (Œº.restrict (g ‚Ä¢ s ‚à© t)) := by
      refine' forall_congr' fun g => _
      have he : MeasurableEmbedding ((¬∑ ‚Ä¢ ¬∑) g‚Åª¬π : Œ± ‚Üí Œ±) := measurableEmbedding_const_smul _
      rw [‚Üê image_smul, ‚Üê ((measurePreserving_smul g‚Åª¬π Œº).restrict_image_emb he
        _).aestronglyMeasurable_comp_iff he]
      simp only [(¬∑ ‚àò ¬∑), hf]
    _ ‚Üî AEStronglyMeasurable f (Œº.restrict t) := by
      simp only [‚Üê aestronglyMeasurable_sum_measure_iff, ‚Üê hs.restrict_restrict,
        hs.sum_restrict_of_ac restrict_le_self.absolutelyContinuous]

@[to_additive]
protected theorem hasFiniteIntegral_on_iff (hs : IsAEFundamentalDomain G s Œº)
    (ht : IsAEFundamentalDomain G t Œº) {f : Œ± ‚Üí E} (hf : ‚àÄ (g : G) (x), f (g ‚Ä¢ x) = f x) :
    HasFiniteIntegral f (Œº.restrict s) ‚Üî HasFiniteIntegral f (Œº.restrict t) := by
  dsimp only [HasFiniteIntegral]
  rw [hs.set_lintegral_eq ht]
  intro g x; rw [hf]

@[to_additive]
protected theorem integrableOn_iff (hs : IsAEFundamentalDomain G s Œº) (ht : IsAEFundamentalDomain G t Œº)
    {f : Œ± ‚Üí E} (hf : ‚àÄ (g : G) (x), f (g ‚Ä¢ x) = f x) : IntegrableOn f s Œº ‚Üî IntegrableOn f t Œº :=
  and_congr (hs.aEStronglyMeasurable_on_iff ht hf) (hs.hasFiniteIntegral_on_iff ht hf)

variable [NormedSpace ‚Ñù E] [CompleteSpace E]

@[to_additive]
theorem integral_eq_tsum_of_ac (h : IsAEFundamentalDomain G s Œº) (hŒΩ : ŒΩ ‚â™ Œº) (f : Œ± ‚Üí E)
    (hf : Integrable f ŒΩ) : ‚à´ x, f x ‚àÇŒΩ = ‚àë' g : G, ‚à´ x in g ‚Ä¢ s, f x ‚àÇŒΩ := by
  rw [‚Üê MeasureTheory.integral_sum_measure, h.sum_restrict_of_ac hŒΩ]
  rw [h.sum_restrict_of_ac hŒΩ]
  exact hf

@[to_additive]
theorem integral_eq_tsum (h : IsAEFundamentalDomain G s Œº) (f : Œ± ‚Üí E) (hf : Integrable f Œº) :
    ‚à´ x, f x ‚àÇŒº = ‚àë' g : G, ‚à´ x in g ‚Ä¢ s, f x ‚àÇŒº :=
  integral_eq_tsum_of_ac h (by rfl) f hf

@[to_additive]
theorem integral_eq_tsum' (h : IsAEFundamentalDomain G s Œº) (f : Œ± ‚Üí E) (hf : Integrable f Œº) :
    ‚à´ x, f x ‚àÇŒº = ‚àë' g : G, ‚à´ x in s, f (g‚Åª¬π ‚Ä¢ x) ‚àÇŒº :=
  calc
    ‚à´ x, f x ‚àÇŒº = ‚àë' g : G, ‚à´ x in g ‚Ä¢ s, f x ‚àÇŒº := h.integral_eq_tsum f hf
    _ = ‚àë' g : G, ‚à´ x in g‚Åª¬π ‚Ä¢ s, f x ‚àÇŒº := ((Equiv.inv G).tsum_eq _).symm
    _ = ‚àë' g : G, ‚à´ x in s, f (g‚Åª¬π ‚Ä¢ x) ‚àÇŒº := tsum_congr fun g =>
      (measurePreserving_smul g‚Åª¬π Œº).set_integral_image_emb (measurableEmbedding_const_smul _) _ _

@[to_additive]
theorem set_integral_eq_tsum (h : IsAEFundamentalDomain G s Œº) {f : Œ± ‚Üí E} {t : Set Œ±}
    (hf : IntegrableOn f t Œº) : ‚à´ x in t, f x ‚àÇŒº = ‚àë' g : G, ‚à´ x in t ‚à© g ‚Ä¢ s, f x ‚àÇŒº :=
  calc
    ‚à´ x in t, f x ‚àÇŒº = ‚àë' g : G, ‚à´ x in g ‚Ä¢ s, f x ‚àÇŒº.restrict t :=
      h.integral_eq_tsum_of_ac restrict_le_self.absolutelyContinuous f hf
    _ = ‚àë' g : G, ‚à´ x in t ‚à© g ‚Ä¢ s, f x ‚àÇŒº := by
      simp only [h.restrict_restrict, measure_smul, inter_comm]

@[to_additive]
theorem set_integral_eq_tsum' (h : IsAEFundamentalDomain G s Œº) {f : Œ± ‚Üí E} {t : Set Œ±}
    (hf : IntegrableOn f t Œº) : ‚à´ x in t, f x ‚àÇŒº = ‚àë' g : G, ‚à´ x in g ‚Ä¢ t ‚à© s, f (g‚Åª¬π ‚Ä¢ x) ‚àÇŒº :=
  calc
    ‚à´ x in t, f x ‚àÇŒº = ‚àë' g : G, ‚à´ x in t ‚à© g ‚Ä¢ s, f x ‚àÇŒº := h.set_integral_eq_tsum hf
    _ = ‚àë' g : G, ‚à´ x in t ‚à© g‚Åª¬π ‚Ä¢ s, f x ‚àÇŒº := ((Equiv.inv G).tsum_eq _).symm
    _ = ‚àë' g : G, ‚à´ x in g‚Åª¬π ‚Ä¢ (g ‚Ä¢ t ‚à© s), f x ‚àÇŒº := by simp only [smul_set_inter, inv_smul_smul]
    _ = ‚àë' g : G, ‚à´ x in g ‚Ä¢ t ‚à© s, f (g‚Åª¬π ‚Ä¢ x) ‚àÇŒº :=
      tsum_congr fun g =>
        (measurePreserving_smul g‚Åª¬π Œº).set_integral_image_emb
        (measurableEmbedding_const_smul _) _ _

@[to_additive]
protected theorem set_integral_eq (hs : IsAEFundamentalDomain G s Œº)
    (ht : IsAEFundamentalDomain G t Œº) {f : Œ± ‚Üí E} (hf :
    ‚àÄ (g : G) (x), f (g ‚Ä¢ x) = f x) : ‚à´ x in s, f x ‚àÇŒº = ‚à´ x in t, f x ‚àÇŒº := by
  by_cases hfs : IntegrableOn f s Œº
  ¬∑ have hft : IntegrableOn f t Œº := by rwa [ht.integrableOn_iff hs hf]
    calc
      ‚à´ x in s, f x ‚àÇŒº = ‚àë' g : G, ‚à´ x in s ‚à© g ‚Ä¢ t, f x ‚àÇŒº := ht.set_integral_eq_tsum hfs
      _ = ‚àë' g : G, ‚à´ x in g ‚Ä¢ t ‚à© s, f (g‚Åª¬π ‚Ä¢ x) ‚àÇŒº := by simp only [hf, inter_comm]
      _ = ‚à´ x in t, f x ‚àÇŒº := (hs.set_integral_eq_tsum' hft).symm
  ¬∑ rw [integral_undef hfs, integral_undef]
    rwa [hs.integrableOn_iff ht hf] at hfs

/-- If the action of a countable group `G` admits an invariant measure `Œº` with a fundamental
domain `s`, then every null-measurable set `t` such that the sets `g ‚Ä¢ t ‚à© s` are pairwise
a.e.-disjoint has measure at most `Œº s`. -/
@[to_additive "If the additive action of a countable group `G` admits an invariant measure `Œº` with
  a fundamental domain `s`, then every null-measurable set `t` such that the sets `g +·µ• t ‚à© s` are
  pairwise a.e.-disjoint has measure at most `Œº s`."]
theorem measure_le_of_pairwise_disjoint (hs : IsAEFundamentalDomain G s Œº)
    (ht : NullMeasurableSet t Œº) (hd : Pairwise (AEDisjoint Œº on fun g : G => g ‚Ä¢ t ‚à© s)) :
    Œº t ‚â§ Œº s :=
  calc
    Œº t = ‚àë' g : G, Œº (g ‚Ä¢ t ‚à© s) := hs.measure_eq_tsum t
    _ = Œº (‚ãÉ g : G, g ‚Ä¢ t ‚à© s) := Eq.symm <| measure_iUnion‚ÇÄ hd fun _ =>
      (ht.smul _).inter hs.nullMeasurableSet
    _ ‚â§ Œº s := measure_mono (iUnion_subset fun _ => inter_subset_right _ _)

/-- If the action of a countable group `G` admits an invariant measure `Œº` with a fundamental
domain `s`, then every null-measurable set `t` of measure strictly greater than `Œº s` contains two
points `x y` such that `g ‚Ä¢ x = y` for some `g ‚â† 1`. -/
@[to_additive "If the additive action of a countable group `G` admits an invariant measure `Œº` with
  a fundamental domain `s`, then every null-measurable set `t` of measure strictly greater than
  `Œº s` contains two points `x y` such that `g +·µ• x = y` for some `g ‚â† 0`."]
theorem exists_ne_one_smul_eq (hs : IsAEFundamentalDomain G s Œº) (htm : NullMeasurableSet t Œº)
    (ht : Œº s < Œº t) : ‚àÉ x ‚àà t, ‚àÉ y ‚àà t, ‚àÉ g, g ‚â† (1 : G) ‚àß g ‚Ä¢ x = y := by
  contrapose! ht
  refine' hs.measure_le_of_pairwise_disjoint htm (Pairwise.aedisjoint fun g‚ÇÅ g‚ÇÇ hne => _)
  dsimp [Function.onFun]
  refine' (Disjoint.inf_left _ _).inf_right _
  rw [Set.disjoint_left]
  rintro _ ‚ü®x, hx, rfl‚ü© ‚ü®y, hy, hxy : g‚ÇÇ ‚Ä¢ y = g‚ÇÅ ‚Ä¢ x‚ü©
  refine' ht x hx y hy (g‚ÇÇ‚Åª¬π * g‚ÇÅ) (mt inv_mul_eq_one.1 hne.symm) _
  rw [mul_smul, ‚Üê hxy, inv_smul_smul]

/-- If `f` is invariant under the action of a countable group `G`, and `Œº` is a `G`-invariant
  measure with a fundamental domain `s`, then the `essSup` of `f` restricted to `s` is the same as
  that of `f` on all of its domain. -/
@[to_additive "If `f` is invariant under the action of a countable additive group `G`, and `Œº` is a
  `G`-invariant measure with a fundamental domain `s`, then the `ess_sup` of `f` restricted to `s`
  is the same as that of `f` on all of its domain."]
theorem essSup_measure_restrict (hs : IsAEFundamentalDomain G s Œº) {f : Œ± ‚Üí ‚Ñù‚â•0‚àû}
    (hf : ‚àÄ Œ≥ : G, ‚àÄ x : Œ±, f (Œ≥ ‚Ä¢ x) = f x) : essSup f (Œº.restrict s) = essSup f Œº := by
  refine' le_antisymm (essSup_mono_measure' Measure.restrict_le_self) _
  rw [essSup_eq_sInf (Œº.restrict s) f, essSup_eq_sInf Œº f]
  refine' sInf_le_sInf _
  rintro a (ha : (Œº.restrict s) {x : Œ± | a < f x} = 0)
  rw [Measure.restrict_apply‚ÇÄ' hs.nullMeasurableSet] at ha
  refine' measure_zero_of_invariant hs _ _ ha
  intro Œ≥
  ext x
  rw [mem_smul_set_iff_inv_smul_mem]
  simp only [mem_setOf_eq, hf Œ≥‚Åª¬π x]

end IsAEFundamentalDomain

end AEFundamentalDomain

/-! ### Interior/frontier of a fundamental domain -/

section MeasurableSpace

variable (G) [Group G] [MulAction G Œ±] (s : Set Œ±) {x : Œ±}

/-- The boundary of a fundamental domain, those points of the domain that also lie in a nontrivial
translate. -/
@[to_additive MeasureTheory.addFundamentalFrontier "The boundary of a fundamental domain, those
  points of the domain that also lie in a nontrivial translate."]
def fundamentalFrontier : Set Œ± :=
  s ‚à© ‚ãÉ (g : G) (_ : g ‚â† 1), g ‚Ä¢ s

/-- The interior of a fundamental domain, those points of the domain not lying in any translate. -/
@[to_additive MeasureTheory.addFundamentalInterior "The interior of a fundamental domain, those
  points of the domain not lying in any translate."]
def fundamentalInterior : Set Œ± :=
  s \ ‚ãÉ (g : G) (_ : g ‚â† 1), g ‚Ä¢ s

variable {G s}

@[to_additive (attr := simp) MeasureTheory.mem_addFundamentalFrontier]
theorem mem_fundamentalFrontier :
    x ‚àà fundamentalFrontier G s ‚Üî x ‚àà s ‚àß ‚àÉ g : G, g ‚â† 1 ‚àß x ‚àà g ‚Ä¢ s := by
  simp [fundamentalFrontier]

@[to_additive (attr := simp) MeasureTheory.mem_addFundamentalInterior]
theorem mem_fundamentalInterior :
    x ‚àà fundamentalInterior G s ‚Üî x ‚àà s ‚àß ‚àÄ g : G, g ‚â† 1 ‚Üí x ‚àâ g ‚Ä¢ s := by
  simp [fundamentalInterior]

@[to_additive MeasureTheory.addFundamentalFrontier_subset]
theorem fundamentalFrontier_subset : fundamentalFrontier G s ‚äÜ s :=
  inter_subset_left _ _

@[to_additive MeasureTheory.addFundamentalInterior_subset]
theorem fundamentalInterior_subset : fundamentalInterior G s ‚äÜ s :=
  diff_subset _ _

variable (G s)

@[to_additive MeasureTheory.disjoint_addFundamentalInterior_addFundamentalFrontier]
theorem disjoint_fundamentalInterior_fundamentalFrontier :
    Disjoint (fundamentalInterior G s) (fundamentalFrontier G s) :=
  disjoint_sdiff_self_left.mono_right inf_le_right

@[to_additive (attr := simp) MeasureTheory.addFundamentalInterior_union_addFundamentalFrontier]
theorem fundamentalInterior_union_fundamentalFrontier :
    fundamentalInterior G s ‚à™ fundamentalFrontier G s = s :=
  diff_union_inter _ _

@[to_additive (attr := simp) MeasureTheory.addFundamentalFrontier_union_addFundamentalInterior]
theorem fundamentalFrontier_union_fundamentalInterior :
    fundamentalFrontier G s ‚à™ fundamentalInterior G s = s :=
  inter_union_diff _ _
-- porting note: there is a typo in `to_additive` in mathlib3, so there is no additive version

@[to_additive (attr := simp) MeasureTheory.sdiff_addFundamentalInterior]
theorem sdiff_fundamentalInterior : s \ fundamentalInterior G s = fundamentalFrontier G s :=
  sdiff_sdiff_right_self

@[to_additive (attr := simp) MeasureTheory.sdiff_addFundamentalFrontier]
theorem sdiff_fundamentalFrontier : s \ fundamentalFrontier G s = fundamentalInterior G s :=
  diff_self_inter

@[to_additive (attr := simp) MeasureTheory.addFundamentalFrontier_vadd]
theorem fundamentalFrontier_smul [Group H] [MulAction H Œ±] [SMulCommClass H G Œ±] (g : H) :
    fundamentalFrontier G (g ‚Ä¢ s) = g ‚Ä¢ fundamentalFrontier G s := by
  simp_rw [fundamentalFrontier, smul_set_inter, smul_set_Union, smul_comm g (_ : G) (_ : Set Œ±)]

@[to_additive (attr := simp) MeasureTheory.addFundamentalInterior_vadd]
theorem fundamentalInterior_smul [Group H] [MulAction H Œ±] [SMulCommClass H G Œ±] (g : H) :
    fundamentalInterior G (g ‚Ä¢ s) = g ‚Ä¢ fundamentalInterior G s := by
  simp_rw [fundamentalInterior, smul_set_sdiff, smul_set_Union, smul_comm g (_ : G) (_ : Set Œ±)]

@[to_additive MeasureTheory.pairwise_disjoint_addFundamentalInterior]
theorem pairwise_disjoint_fundamentalInterior :
    Pairwise (Disjoint on fun g : G => g ‚Ä¢ fundamentalInterior G s) := by
  refine' fun a b hab => disjoint_left.2 _
  rintro _ ‚ü®x, hx, rfl‚ü© ‚ü®y, hy, hxy‚ü©
  rw [mem_fundamentalInterior] at hx hy
  refine' hx.2 (a‚Åª¬π * b) _ _
  rwa [Ne.def, inv_mul_eq_iff_eq_mul, mul_one, eq_comm]
  simpa [mul_smul, ‚Üê hxy, mem_inv_smul_set_iff] using hy.1

variable [Countable G] [MeasurableSpace G] [MeasurableSpace Œ±] [MeasurableSMul G Œ±] {Œº : Measure Œ±}
  [SMulInvariantMeasure G Œ± Œº]

@[to_additive MeasureTheory.NullMeasurableSet.addFundamentalFrontier]
protected theorem NullMeasurableSet.fundamentalFrontier (hs : NullMeasurableSet s Œº) :
    NullMeasurableSet (fundamentalFrontier G s) Œº :=
  hs.inter <| .iUnion fun _ => .iUnion fun _ => hs.smul _

@[to_additive MeasureTheory.NullMeasurableSet.addFundamentalInterior]
protected theorem NullMeasurableSet.fundamentalInterior (hs : NullMeasurableSet s Œº) :
    NullMeasurableSet (fundamentalInterior G s) Œº :=
  hs.diff <| .iUnion fun _ => .iUnion fun _ => hs.smul _

end MeasurableSpace

namespace IsAEFundamentalDomain

section Group

variable [Countable G] [Group G] [MulAction G Œ±] [MeasurableSpace Œ±] {Œº : Measure Œ±} {s : Set Œ±}
  (hs : IsAEFundamentalDomain G s Œº)

@[to_additive MeasureTheory.IsAddFundamentalDomain.measure_addFundamentalFrontier]
theorem measure_fundamentalFrontier : Œº (fundamentalFrontier G s) = 0 := by
  simpa only [fundamentalFrontier, iUnion‚ÇÇ_inter, measure_iUnion_null_iff', one_smul,
    measure_iUnion_null_iff, inter_comm s, Function.onFun] using fun g (hg : g ‚â† 1) =>
    hs.aedisjoint hg

@[to_additive MeasureTheory.IsAddFundamentalDomain.measure_addFundamentalInterior]
theorem measure_fundamentalInterior : Œº (fundamentalInterior G s) = Œº s :=
  measure_diff_null' hs.measure_fundamentalFrontier

end Group

variable [Countable G] [Group G] [MulAction G Œ±] [MeasurableSpace Œ±] {Œº : Measure Œ±} {s : Set Œ±}
  (hs : IsAEFundamentalDomain G s Œº) [MeasurableSpace G] [MeasurableSMul G Œ±]
  [SMulInvariantMeasure G Œ± Œº]

protected theorem fundamentalInterior : IsAEFundamentalDomain G (fundamentalInterior G s) Œº where
  nullMeasurableSet := hs.nullMeasurableSet.fundamentalInterior _ _
  ae_covers := by
    simp_rw [ae_iff, not_exists, ‚Üê mem_inv_smul_set_iff, setOf_forall, ‚Üê compl_setOf,
      setOf_mem_eq, ‚Üê compl_iUnion]
    have :
      ((‚ãÉ g : G, g‚Åª¬π ‚Ä¢ s) \ ‚ãÉ g : G, g‚Åª¬π ‚Ä¢ fundamentalFrontier G s) ‚äÜ
        ‚ãÉ g : G, g‚Åª¬π ‚Ä¢ fundamentalInterior G s := by
      simp_rw [diff_subset_iff, ‚Üê iUnion_union_distrib, ‚Üê smul_set_union (Œ± := G) (Œ≤ := Œ±),
        fundamentalFrontier_union_fundamentalInterior]; rfl
    refine' eq_bot_mono (Œº.mono <| compl_subset_compl.2 this) _
    simp only [iUnion_inv_smul, compl_sdiff, ENNReal.bot_eq_zero, himp_eq, sup_eq_union,
      @iUnion_smul_eq_setOf_exists _ _ _ _ s]
    exact measure_union_null (measure_iUnion_null fun _ => measure_smul_null
      hs.measure_fundamentalFrontier _) hs.ae_covers
  aedisjoint := (pairwise_disjoint_fundamentalInterior _ _).mono fun _ _ => Disjoint.aedisjoint

end IsAEFundamentalDomain

end MeasureTheory
