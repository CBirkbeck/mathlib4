/-
Copyright (c) 2024 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.MeasureTheory.Decomposition.WithDensityFinite

/-!
# ZeroTopSet

## Main definitions

* `FooBar`

## Main statements

* `fooBar_unique`

## Notation



## Implementation details



## References

* [F. Bar, *Quuxes*][bibkey]

## Tags

Foobars, barfoos
-/

open scoped NNReal ENNReal Topology

open Filter

namespace MeasureTheory

variable {Œ± : Type*} {mŒ± : MeasurableSpace Œ±} {Œº : Measure Œ±} {s t : Set Œ±}

namespace Measure

theorem iSup_restrict_spanningSets'' [SigmaFinite Œº] (s : Set Œ±) :
    ‚®Ü i, Œº.restrict (spanningSets Œº i) (toMeasurable Œº s) = Œº s := by
  rw [‚Üê measure_toMeasurable s, iSup_restrict_spanningSets]

theorem iSup_restrict_spanningSets' [SigmaFinite Œº] (s : Set Œ±) :
    ‚®Ü i, Œº.restrict (spanningSets Œº i) s = Œº s := by
  rw [‚Üê measure_toMeasurable s, ‚Üê iSup_restrict_spanningSets]
  simp_rw [restrict_apply' (measurable_spanningSets Œº _), Set.inter_comm s,
    ‚Üê restrict_apply (measurable_spanningSets Œº _), ‚Üê restrict_toMeasurable_of_sFinite s,
    restrict_apply (measurable_spanningSets Œº _), Set.inter_comm _ (toMeasurable Œº s)]

instance instSFiniteRestrict (Œº : Measure Œ±) [SFinite Œº] (s : Set Œ±) :
    SFinite (Œº.restrict s) := by
  refine ‚ü®fun n ‚Ü¶ (sFiniteSeq Œº n).restrict s, fun n ‚Ü¶ inferInstance, ?_‚ü©
  rw [‚Üê restrict_sum_of_countable, sum_sFiniteSeq]

lemma ae_lt_top_of_sigmaFinite [SigmaFinite Œº] {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : Measurable f)
    (h2f : ‚àÄ s, MeasurableSet s ‚Üí Œº s < ‚àû ‚Üí ‚à´‚Åª x in s, f x ‚àÇŒº ‚â† ‚àû) :
    ‚àÄ·µê x ‚àÇŒº, f x < ‚àû := by
  refine ae_of_forall_measure_lt_top_ae_restrict _ (fun s hs hŒºs ‚Ü¶ ?_)
  specialize h2f s hs hŒºs
  exact ae_lt_top hf h2f

/-! ### IsSigmaFiniteSet -/

def IsSigmaFiniteSet (s : Set Œ±) (Œº : Measure Œ±) : Prop :=
  ‚àÉ seq : ‚Ñï ‚Üí Set Œ±, (‚àÄ n, MeasurableSet (seq n) ‚àß Œº (seq n) < ‚àû ‚àß seq n ‚äÜ s)
    ‚àß Monotone seq ‚àß ‚ãÉ n, seq n = s

lemma isSigmaFiniteSet_of_measure_ne_top (h : Œº s ‚â† ‚àû) (hs : MeasurableSet s) :
    IsSigmaFiniteSet s Œº :=
  ‚ü®fun _ ‚Ü¶ s, fun _ ‚Ü¶ ‚ü®hs, h.lt_top, subset_rfl‚ü©, monotone_const, Set.iUnion_const _‚ü©

lemma isSigmaFiniteSet_empty (Œº : Measure Œ±) : IsSigmaFiniteSet ‚àÖ Œº :=
  isSigmaFiniteSet_of_measure_ne_top (by simp) MeasurableSet.empty

def IsSigmaFiniteSet.spanningSets (hsœÉ : IsSigmaFiniteSet s Œº) (n : ‚Ñï) : Set Œ± :=
  hsœÉ.choose n

lemma IsSigmaFiniteSet.measurableSet_spanningSets (hsœÉ : IsSigmaFiniteSet s Œº) (n : ‚Ñï) :
    MeasurableSet (hsœÉ.spanningSets n) := (hsœÉ.choose_spec.1 n).1

lemma IsSigmaFiniteSet.measure_spanningSets_lt_top (hsœÉ : IsSigmaFiniteSet s Œº) (n : ‚Ñï) :
    Œº (hsœÉ.spanningSets n) < ‚àû := (hsœÉ.choose_spec.1 n).2.1

lemma IsSigmaFiniteSet.spanningSets_subset (hsœÉ : IsSigmaFiniteSet s Œº) (n : ‚Ñï) :
    hsœÉ.spanningSets n ‚äÜ s := (hsœÉ.choose_spec.1 n).2.2

lemma IsSigmaFiniteSet.monotone_spanningSets (hsœÉ : IsSigmaFiniteSet s Œº) :
    Monotone hsœÉ.spanningSets := hsœÉ.choose_spec.2.1

lemma IsSigmaFiniteSet.iUnion_spanningSets (hsœÉ : IsSigmaFiniteSet s Œº) :
    ‚ãÉ n, hsœÉ.spanningSets n = s := hsœÉ.choose_spec.2.2

lemma isSigmaFiniteSet_iff_sigmaFinite_restrict (hs : MeasurableSet s) :
    IsSigmaFiniteSet s Œº ‚Üî SigmaFinite (Œº.restrict s) := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ constructor
    refine ‚ü®fun n ‚Ü¶ s·∂ú ‚à™ h.spanningSets n, by simp, fun n ‚Ü¶ ?_, ?_‚ü©
    ¬∑ rw [restrict_apply' hs]
      simp only [Set.union_inter_distrib_right, Set.compl_inter_self, Set.empty_union]
      refine (measure_mono (Set.inter_subset_left _ _)).trans_lt ?_
      exact h.measure_spanningSets_lt_top n
    ¬∑ simp only
      rw [‚Üê Set.union_iUnion, h.iUnion_spanningSets, Set.compl_union_self]
  ¬∑ refine ‚ü®fun n ‚Ü¶ s ‚à© spanningSets (Œº.restrict s) n, fun n ‚Ü¶ ‚ü®?_, ?_, ?_‚ü©, ?_, ?_‚ü©
    ¬∑ exact hs.inter (measurable_spanningSets _ _)
    ¬∑ simp only
      rw [Set.inter_comm, ‚Üê restrict_apply' hs]
      exact measure_spanningSets_lt_top _ _
    ¬∑ exact Set.inter_subset_left _ _
    ¬∑ exact fun _ _ hnm ‚Ü¶ Set.inter_subset_inter subset_rfl (monotone_spanningSets _ hnm)
    ¬∑ simp only
      rw [‚Üê Set.inter_iUnion, iUnion_spanningSets, Set.inter_univ]

lemma isSigmaFiniteSet_of_sigmaFinite [SigmaFinite Œº] (hs : MeasurableSet s) :
    IsSigmaFiniteSet s Œº := by
  rw [isSigmaFiniteSet_iff_sigmaFinite_restrict hs]
  infer_instance

lemma IsSigmaFiniteSet.union (hsœÉ : IsSigmaFiniteSet s Œº) (htœÉ : IsSigmaFiniteSet t Œº) :
    IsSigmaFiniteSet (s ‚à™ t) Œº := by
  refine ‚ü®fun n ‚Ü¶ hsœÉ.spanningSets n ‚à™ htœÉ.spanningSets n, fun n ‚Ü¶ ‚ü®?_, ?_, ?_‚ü©, ?_, ?_‚ü©
  ¬∑ exact (hsœÉ.measurableSet_spanningSets n).union (htœÉ.measurableSet_spanningSets n)
  ¬∑ exact measure_union_lt_top (hsœÉ.measure_spanningSets_lt_top n)
      (htœÉ.measure_spanningSets_lt_top n)
  ¬∑ exact Set.union_subset_union (hsœÉ.spanningSets_subset n) (htœÉ.spanningSets_subset n)
  ¬∑ intro n m hnm
    exact Set.union_subset_union (hsœÉ.monotone_spanningSets hnm) (htœÉ.monotone_spanningSets hnm)
  ¬∑ simp only
    rw [Set.iUnion_union_distrib, hsœÉ.iUnion_spanningSets, htœÉ.iUnion_spanningSets]

lemma measure_eq_iSup_measure_subset [SigmaFinite Œº] (hs : MeasurableSet s) :
    Œº s = ‚®Ü (t : Set Œ±) (_ht : MeasurableSet t) (_hŒºt : Œº t ‚â† ‚àû) (_hts : t ‚äÜ s), Œº t := by
  refine le_antisymm ?_ ?_
  ¬∑ rw [‚Üê iSup_restrict_spanningSets]
    simp only [ne_eq, iSup_le_iff]
    intro i
    rw [restrict_apply' (measurable_spanningSets _ _)]
    refine le_trans ?_ (le_iSup _ (s ‚à© spanningSets Œº i))
    simp only [hs.inter (measurable_spanningSets _ _),
      ((measure_mono (Set.inter_subset_right s _)).trans_lt (measure_spanningSets_lt_top Œº _)).ne,
      not_false_eq_true, Set.inter_subset_left, iSup_pos, le_refl]
  ¬∑ simp only [ne_eq, iSup_le_iff]
    exact fun _ _ _ hts ‚Ü¶ measure_mono hts

/-! ### Method of exhaustion -/

/-!
If `Œº, ŒΩ` are two measures with `ŒΩ` finite, then there exists a set `s` such that
`Œº` is sigma-finite on `s`, and for all sets `t ‚äÜ s·∂ú`, either `ŒΩ t = 0` or `Œº t = ‚àû`. -/

lemma exists_isSigmaFiniteSet_measure_ge (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] (n : ‚Ñï) :
    ‚àÉ t, MeasurableSet t ‚àß IsSigmaFiniteSet t Œº
      ‚àß (‚®Ü (s) (_ : MeasurableSet s) (_ : IsSigmaFiniteSet s Œº), ŒΩ s) - 1/n ‚â§ ŒΩ t := by
  by_cases hC_lt : 1/n < ‚®Ü (s) (_ : MeasurableSet s) (_ : IsSigmaFiniteSet s Œº), ŒΩ s
  ¬∑ have h_lt_top : ‚®Ü (s) (_ : MeasurableSet s) (_ : IsSigmaFiniteSet s Œº), ŒΩ s < ‚àû := by
      refine (?_ : ‚®Ü (s) (_ : MeasurableSet s) (_ : IsSigmaFiniteSet s Œº), ŒΩ s ‚â§ ŒΩ Set.univ).trans_lt
        (measure_lt_top _ _)
      refine iSup_le (fun s ‚Ü¶ ?_)
      exact iSup_le (fun _ ‚Ü¶ iSup_le (fun _ ‚Ü¶ measure_mono (Set.subset_univ s)))
    obtain ‚ü®t, ht‚ü© := exists_lt_of_lt_ciSup
      (ENNReal.sub_lt_self h_lt_top.ne (ne_zero_of_lt hC_lt) (by simp) :
          (‚®Ü (s) (_ : MeasurableSet s) (_ : IsSigmaFiniteSet s Œº), ŒΩ s) - 1/n
        < ‚®Ü (s) (_ : MeasurableSet s) (_ : IsSigmaFiniteSet s Œº), ŒΩ s)
    have ht_meas : MeasurableSet t := by
      by_contra h_not_mem
      simp only [h_not_mem] at ht
      simp at ht
    have ht_mem : IsSigmaFiniteSet t Œº := by
      by_contra h_not_mem
      simp only [h_not_mem] at ht
      simp at ht
    refine ‚ü®t, ht_meas, ht_mem, ?_‚ü©
    simp only [ht_meas, ht_mem, iSup_true] at ht
    exact ht.le
  ¬∑ refine ‚ü®‚àÖ, MeasurableSet.empty, isSigmaFiniteSet_empty Œº, ?_‚ü©
    rw [tsub_eq_zero_of_le (not_lt.mp hC_lt)]
    exact zero_le'

def sigmaFiniteSetGE (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] (n : ‚Ñï) : Set Œ± :=
  (exists_isSigmaFiniteSet_measure_ge Œº ŒΩ n).choose

lemma measurableSet_sigmaFiniteSetGE (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] (n : ‚Ñï) :
    MeasurableSet (sigmaFiniteSetGE Œº ŒΩ n) :=
  (exists_isSigmaFiniteSet_measure_ge Œº ŒΩ n).choose_spec.1

lemma isSigmaFiniteSet_sigmaFiniteSetGE (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] (n : ‚Ñï) :
    IsSigmaFiniteSet (sigmaFiniteSetGE Œº ŒΩ n) Œº :=
  (exists_isSigmaFiniteSet_measure_ge Œº ŒΩ n).choose_spec.2.1

lemma measure_sigmaFiniteSetGE_le (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] (n : ‚Ñï) :
    ŒΩ (sigmaFiniteSetGE Œº ŒΩ n) ‚â§ ‚®Ü (s) (_ : MeasurableSet s) (_ : IsSigmaFiniteSet s Œº), ŒΩ s := by
  refine (le_iSup (f := fun s ‚Ü¶ _) (isSigmaFiniteSet_sigmaFiniteSetGE Œº ŒΩ n)).trans ?_
  exact le_iSup‚ÇÇ (f := fun s _ ‚Ü¶ ‚®Ü (_ : IsSigmaFiniteSet s Œº), ŒΩ s) (sigmaFiniteSetGE Œº ŒΩ n)
    (measurableSet_sigmaFiniteSetGE Œº ŒΩ n)

lemma measure_sigmaFiniteSetGE_ge (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] (n : ‚Ñï) :
    (‚®Ü (s) (_ : MeasurableSet s) (_ : IsSigmaFiniteSet s Œº), ŒΩ s) - 1/n
      ‚â§ ŒΩ (sigmaFiniteSetGE Œº ŒΩ n) :=
  (exists_isSigmaFiniteSet_measure_ge Œº ŒΩ n).choose_spec.2.2

lemma tendsto_measure_sigmaFiniteSetGE (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] :
    Tendsto (fun n ‚Ü¶ ŒΩ (sigmaFiniteSetGE Œº ŒΩ n)) atTop
      (ùìù (‚®Ü (s) (_ : MeasurableSet s) (_ : IsSigmaFiniteSet s Œº), ŒΩ s)) := by
  refine tendsto_of_tendsto_of_tendsto_of_le_of_le ?_
    tendsto_const_nhds (measure_sigmaFiniteSetGE_ge Œº ŒΩ) (measure_sigmaFiniteSetGE_le Œº ŒΩ)
  nth_rewrite 2 [‚Üê tsub_zero (‚®Ü (s) (_ : MeasurableSet s) (_ : IsSigmaFiniteSet s Œº), ŒΩ s)]
  refine ENNReal.Tendsto.sub tendsto_const_nhds ?_ (Or.inr ENNReal.zero_ne_top)
  simp only [one_div]
  exact ENNReal.tendsto_inv_nat_nhds_zero

def sigmaFiniteSetWRT (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] : Set Œ± := ‚ãÉ n, sigmaFiniteSetGE Œº ŒΩ n

lemma measurableSet_sigmaFiniteSetWRT (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] :
    MeasurableSet (sigmaFiniteSetWRT Œº ŒΩ) :=
  MeasurableSet.iUnion (measurableSet_sigmaFiniteSetGE _ _)

lemma isSigmaFiniteSet_sigmaFiniteSetWRT (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] :
    IsSigmaFiniteSet (sigmaFiniteSetWRT Œº ŒΩ) Œº := by
  let f : ‚Ñï √ó ‚Ñï ‚Üí Set Œ± := fun p : ‚Ñï √ó ‚Ñï ‚Ü¶ (sigmaFiniteSetWRT Œº ŒΩ)·∂ú
    ‚à™ (isSigmaFiniteSet_sigmaFiniteSetGE Œº ŒΩ p.1).spanningSets p.2
  suffices (Œº.restrict (sigmaFiniteSetWRT Œº ŒΩ)).FiniteSpanningSetsIn (Set.range f) by
    rw [isSigmaFiniteSet_iff_sigmaFinite_restrict (measurableSet_sigmaFiniteSetWRT _ _)]
    exact this.sigmaFinite
  let e : ‚Ñï ‚âÉ ‚Ñï √ó ‚Ñï := Nat.pairEquiv.symm
  refine ‚ü®fun n ‚Ü¶ f (e n), fun _ ‚Ü¶ by simp, fun n ‚Ü¶ ?_, ?_‚ü©
  ¬∑ simp only [Nat.pairEquiv_symm_apply, gt_iff_lt, measure_union_lt_top_iff, f, e]
    rw [restrict_apply' (measurableSet_sigmaFiniteSetWRT _ _), Set.compl_inter_self,
      restrict_apply' (measurableSet_sigmaFiniteSetWRT _ _)]
    simp only [OuterMeasure.empty', ENNReal.zero_lt_top, true_and]
    refine (measure_mono (Set.inter_subset_left _ _)).trans_lt ?_
    exact (isSigmaFiniteSet_sigmaFiniteSetGE _ _ _).measure_spanningSets_lt_top _
  ¬∑ simp only [Nat.pairEquiv_symm_apply, f, e]
    rw [‚Üê Set.union_iUnion]
    suffices ‚ãÉ n, (isSigmaFiniteSet_sigmaFiniteSetGE Œº ŒΩ (Nat.unpair n).1).spanningSets
        (Nat.unpair n).2 = sigmaFiniteSetWRT Œº ŒΩ by
      rw [this, Set.compl_union_self]
    calc ‚ãÉ n, (isSigmaFiniteSet_sigmaFiniteSetGE Œº ŒΩ (Nat.unpair n).1).spanningSets (Nat.unpair n).2
      = ‚ãÉ n, ‚ãÉ m, (isSigmaFiniteSet_sigmaFiniteSetGE Œº ŒΩ n).spanningSets m :=
          Set.iUnion_unpair (fun n m ‚Ü¶ (isSigmaFiniteSet_sigmaFiniteSetGE Œº ŒΩ n).spanningSets m)
    _ = ‚ãÉ n, sigmaFiniteSetGE Œº ŒΩ n := by
        refine Set.iUnion_congr (fun n ‚Ü¶ ?_)
        exact (isSigmaFiniteSet_sigmaFiniteSetGE Œº ŒΩ n).iUnion_spanningSets
    _ = sigmaFiniteSetWRT Œº ŒΩ := rfl

lemma measure_sigmaFiniteSetWRT (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] :
    ŒΩ (sigmaFiniteSetWRT Œº ŒΩ) = ‚®Ü (s) (_ : MeasurableSet s) (_ : IsSigmaFiniteSet s Œº), ŒΩ s := by
  rw [sigmaFiniteSetWRT]
  apply le_antisymm
  ¬∑ refine (le_iSup (f := fun s ‚Ü¶ _) (isSigmaFiniteSet_sigmaFiniteSetWRT Œº ŒΩ)).trans ?_
    exact le_iSup‚ÇÇ (f := fun s _ ‚Ü¶ ‚®Ü (_ : IsSigmaFiniteSet s Œº), ŒΩ s) (sigmaFiniteSetWRT Œº ŒΩ)
      (measurableSet_sigmaFiniteSetWRT Œº ŒΩ)
  ¬∑ exact le_of_tendsto' (tendsto_measure_sigmaFiniteSetGE Œº ŒΩ)
      (fun _ ‚Ü¶ measure_mono (Set.subset_iUnion _ _))

lemma measure_eq_top_of_subset_compl_sigmaFiniteSetWRT {ŒΩ : Measure Œ±} [IsFiniteMeasure ŒΩ]
    (hs : MeasurableSet s) (hs_subset_compl : s ‚äÜ (sigmaFiniteSetWRT Œº ŒΩ)·∂ú) (hŒºs : ŒΩ s ‚â† 0) :
    Œº s = ‚àû := by
  suffices ¬¨ IsSigmaFiniteSet s Œº by
    by_contra h
    exact this (isSigmaFiniteSet_of_measure_ne_top h hs)
  intro hsœÉ
  have h_lt : ŒΩ (sigmaFiniteSetWRT Œº ŒΩ) < ŒΩ (sigmaFiniteSetWRT Œº ŒΩ ‚à™ s) := by
    rw [measure_union _ hs]
    ¬∑ exact ENNReal.lt_add_right (measure_ne_top _ _) hŒºs
    ¬∑ exact disjoint_compl_right.mono_right hs_subset_compl
  have h_le : ŒΩ (sigmaFiniteSetWRT Œº ŒΩ ‚à™ s) ‚â§ ŒΩ (sigmaFiniteSetWRT Œº ŒΩ) := by
    conv_rhs => rw [measure_sigmaFiniteSetWRT]
    refine (le_iSup (f := fun s ‚Ü¶ _) ((isSigmaFiniteSet_sigmaFiniteSetWRT Œº ŒΩ).union hsœÉ)).trans ?_
    exact le_iSup‚ÇÇ (f := fun s _ ‚Ü¶ ‚®Ü (_ : IsSigmaFiniteSet _ Œº), ŒΩ s) (sigmaFiniteSetWRT Œº ŒΩ ‚à™ s)
      ((measurableSet_sigmaFiniteSetWRT Œº ŒΩ).union hs)
  exact h_lt.not_le h_le

lemma sFinite_of_absolutelyContinuous_aux {ŒΩ : Measure Œ±} [IsFiniteMeasure ŒΩ]
    (hŒºŒΩ : Œº ‚â™ ŒΩ) (h : ‚àÄ s, MeasurableSet s ‚Üí ŒΩ s ‚â† 0 ‚Üí Œº s = ‚àû) :
    SFinite Œº := by
  let f : Œ± ‚Üí ‚Ñù‚â•0‚àû := fun _ ‚Ü¶ ‚àû
  have hf : Measurable f := measurable_const
  suffices Œº = ŒΩ.withDensity f by rw [this]; exact sFinite_withDensity _ hf
  ext s hs
  simp only [withDensity_const, Measure.smul_apply, smul_eq_mul, f]
  by_cases hŒΩs : ŒΩ s = 0
  ¬∑ simp [hŒΩs, hŒºŒΩ hŒΩs]
  ¬∑ simp [h s hs hŒΩs, hŒΩs]

lemma sFinite_of_absolutelyContinuous_of_isFiniteMeasure {ŒΩ : Measure Œ±} [IsFiniteMeasure ŒΩ]
    (hŒºŒΩ : Œº ‚â™ ŒΩ) :
    SFinite Œº := by
  let s := sigmaFiniteSetWRT Œº ŒΩ
  have hs : MeasurableSet s := measurableSet_sigmaFiniteSetWRT Œº ŒΩ
  rw [‚Üê restrict_add_restrict_compl (Œº := Œº) hs]
  have : SigmaFinite (Œº.restrict s) := by
    rw [‚Üê isSigmaFiniteSet_iff_sigmaFinite_restrict hs]
    exact isSigmaFiniteSet_sigmaFiniteSetWRT _ _
  have : SFinite (Œº.restrict s·∂ú) := by
    refine sFinite_of_absolutelyContinuous_aux (hŒºŒΩ.restrict s·∂ú) (fun t ht hŒΩt ‚Ü¶ ?_)
    rw [restrict_apply ht] at hŒΩt ‚ä¢
    refine measure_eq_top_of_subset_compl_sigmaFiniteSetWRT (ht.inter hs.compl) ?_ hŒΩt
    exact Set.inter_subset_right _ _
  infer_instance

lemma sFinite_of_absolutelyContinuous {ŒΩ : Measure Œ±} [SFinite ŒΩ] (hŒºŒΩ : Œº ‚â™ ŒΩ) :
    SFinite Œº :=
  sFinite_of_absolutelyContinuous_of_isFiniteMeasure (hŒºŒΩ.trans (absolutelyContinuous_toFinite ŒΩ))

/-! ### IsZeroTopSet -/

def IsZeroTopSet (s : Set Œ±) (Œº : Measure Œ±) : Prop :=
  ‚àÄ t, MeasurableSet t ‚Üí t ‚äÜ s ‚Üí Œº t = 0 ‚à® Œº t = ‚àû

lemma isZeroTopSet_of_null (hs_zero : Œº s = 0) : IsZeroTopSet s Œº :=
  fun _ _ ht_subset ‚Ü¶ Or.inl <| measure_mono_null ht_subset hs_zero

lemma measure_isZeroTopSet (hs0 : IsZeroTopSet s Œº) (hs : MeasurableSet s) : Œº s = 0 ‚à® Œº s = ‚ä§ :=
  hs0 s hs subset_rfl

lemma measure_eq_iSup_measure_subset_toMeasurable [SigmaFinite Œº] (s : Set Œ±) :
    Œº s = ‚®Ü (t : Set Œ±) (_ht : MeasurableSet t) (_hŒºt : Œº t ‚â† ‚àû) (_hts : t ‚äÜ toMeasurable Œº s),
      Œº t := by
  rw [‚Üê measure_toMeasurable s,measure_eq_iSup_measure_subset (measurableSet_toMeasurable _ _)]

lemma iSup_measure_subset_eq_zero_of_isZeroTopSet (hs : IsZeroTopSet s Œº) :
    ‚®Ü (t : Set Œ±) (_ : MeasurableSet t) (_ : Œº t ‚â† ‚àû) (_ : t ‚äÜ s), Œº t = 0 := by
  simp only [ne_eq, ENNReal.iSup_eq_zero]
  exact fun t ht hŒºt hts ‚Ü¶ (hs t ht hts).resolve_right hŒºt

lemma isZeroTopSet_iff_null [SigmaFinite Œº] (hs : MeasurableSet s) :
    IsZeroTopSet s Œº ‚Üî Œº s = 0 := by
  refine ‚ü®fun h ‚Ü¶ ?_, isZeroTopSet_of_null‚ü©
  rw [measure_eq_iSup_measure_subset hs, iSup_measure_subset_eq_zero_of_isZeroTopSet h]

def maxZeroTopSet (Œº : Measure Œ±) [SFinite Œº] : Set Œ± :=
  {x | densityToSigmaFinite Œº x = ‚àû}

lemma measurableSet_maxZeroTopSet (Œº : Measure Œ±) [SFinite Œº] :
    MeasurableSet (maxZeroTopSet Œº) :=
  measurable_densityToSigmaFinite Œº (measurableSet_singleton ‚àû)

lemma isZeroTopSet_maxZeroTopSet (Œº : Measure Œ±) [SFinite Œº] :
    IsZeroTopSet (maxZeroTopSet Œº) Œº := by
  intro t ht ht_subset
  rw [‚Üê withDensity_densityToSigmaFinite Œº, withDensity_apply _ ht]
  have h_int_eq : ‚à´‚Åª a in t, densityToSigmaFinite Œº a ‚àÇŒº.toSigmaFinite = ‚àû * Œº.toSigmaFinite t := by
    calc ‚à´‚Åª a in t, densityToSigmaFinite Œº a ‚àÇŒº.toSigmaFinite
    _ = ‚à´‚Åª _ in t, ‚àû ‚àÇŒº.toSigmaFinite :=
        set_lintegral_congr_fun ht (ae_of_all _ (fun x hx ‚Ü¶ ht_subset hx))
    _ = ‚àû * Œº.toSigmaFinite t := by simp
  rw [h_int_eq]
  by_cases h0 : Œº.toSigmaFinite t = 0 <;> simp [h0]

lemma restrict_compl_maxZeroTopSet (Œº : Measure Œ±) [SFinite Œº] :
    Œº.restrict (maxZeroTopSet Œº)·∂ú = (Œº.toSigmaFinite).restrict (maxZeroTopSet Œº)·∂ú := by
  have hŒº := withDensity_densityToSigmaFinite Œº
  nth_rewrite 1 [‚Üê hŒº]
  ext s hs
  rw [restrict_apply hs, withDensity_apply _ (hs.inter (measurableSet_maxZeroTopSet Œº).compl),
    restrict_apply hs, ‚Üê set_lintegral_one]
  refine set_lintegral_congr_fun (hs.inter (measurableSet_maxZeroTopSet Œº).compl)
    (ae_of_all _ (fun x hx ‚Ü¶ ?_))
  simp only [maxZeroTopSet, Set.mem_inter_iff, Set.mem_compl_iff, Set.mem_setOf_eq,
    densityToSigmaFinite_eq_top_iff] at hx
  rw [densityToSigmaFinite_eq_one_iff]
  exact hx.2

lemma toSigmaFinite_add_restrict_maxZeroTopSet (Œº : Measure Œ±) [SFinite Œº] :
    (Œº.toSigmaFinite).restrict (maxZeroTopSet Œº)·∂ú + Œº.restrict (maxZeroTopSet Œº) = Œº := by
  rw [‚Üê restrict_compl_maxZeroTopSet, restrict_compl_add_restrict (measurableSet_maxZeroTopSet Œº)]

lemma restrict_maxZeroTopSet_eq_zero_or_top (Œº : Measure Œ±) [SFinite Œº] (hs : MeasurableSet s) :
    Œº.restrict (maxZeroTopSet Œº) s = 0 ‚à® Œº.restrict (maxZeroTopSet Œº) s = ‚àû := by
  rw [restrict_apply' (measurableSet_maxZeroTopSet Œº)]
  exact isZeroTopSet_maxZeroTopSet Œº (s ‚à© maxZeroTopSet Œº)
    (hs.inter (measurableSet_maxZeroTopSet Œº)) (Set.inter_subset_right _ _)

lemma sigmaFinite_iff_measure_maxZeroTopSet (Œº : Measure Œ±) [SFinite Œº] :
    SigmaFinite Œº ‚Üî Œº (maxZeroTopSet Œº) = 0 := by
  refine ‚ü®fun h ‚Ü¶ (isZeroTopSet_iff_null (measurableSet_maxZeroTopSet Œº)).mp
    (isZeroTopSet_maxZeroTopSet Œº), fun h ‚Ü¶ ?_‚ü©
  rw [‚Üê toSigmaFinite_add_restrict_maxZeroTopSet Œº, restrict_eq_zero.mpr h, add_zero]
  infer_instance

lemma isZeroTopSet_iff_ne_iSup_of_eq_top (hŒºs : Œº s = ‚àû) :
    IsZeroTopSet s Œº
      ‚Üî Œº s ‚â† ‚®Ü (t : Set Œ±) (ht : MeasurableSet t) (hŒºt : Œº t ‚â† ‚àû) (hts : t ‚äÜ s), Œº t := by
  refine ‚ü®fun hs ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ simp [iSup_measure_subset_eq_zero_of_isZeroTopSet hs, hŒºs]
  ¬∑ sorry

end Measure

end MeasureTheory
