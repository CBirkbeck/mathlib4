/-
Copyright (c) 2024 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.MeasureTheory.Integral.Lebesgue

/-!
# Method of exhaustion

If `Œº, Œº` are two measures with `Œº` s-finite, then there exists a set `s` such that
`Œº` is sigma-finite on `s`, and for all sets `t ‚äÜ s·∂ú`, either `Œº t = 0` or `Œº t = ‚àû`.

## Main definitions

* `MeasureTheory.Measure.sigmaFiniteSetWRT`: if such a set exists, `Œº.sigmaFiniteSetWRT Œº` is
  a measurable set such that `Œº.restrict (Œº.sigmaFiniteSetWRT Œº)` is sigma-finite and
  for all sets `t ‚äÜ (Œº.sigmaFiniteSetWRT Œº)·∂ú`, either `Œº t = 0` or `Œº t = ‚àû`.
  If no such set exists (which is only possible if `Œº` is not s-finite), we define
  `Œº.sigmaFiniteSetWRT Œº = ‚àÖ`.
* `MeasureTheory.Measure.sigmaFiniteSet`: for an s-finite measure `Œº`, a measurable set such that
  `Œº.restrict Œº.sigmaFiniteSet` is sigma-finite, and for all sets `s ‚äÜ Œº.sigmaFiniteSet·∂ú`,
  either `Œº s = 0` or `Œº s = ‚àû`.
  Defined as `Œº.sigmaFiniteSetWRT Œº`.

## Main statements

* `measure_eq_top_of_subset_compl_sigmaFiniteSetWRT`: for s-finite `Œº`, for all sets `s`
  in `(sigmaFiniteSetWRT Œº Œº)·∂ú`, if `Œº s ‚â† 0` then `Œº s = ‚àû`.
* An instance showing that `Œº.restrict (sigmaFiniteSetWRT Œº Œº)` is sigma-finite.
* `restrict_compl_sigmaFiniteSetWRT`: if `Œº ‚â™ Œº` and `Œº` is s-finite, then
  `Œº.restrict (Œº.sigmaFiniteSetWRT Œº)·∂ú = ‚àû ‚Ä¢ Œº.restrict (Œº.sigmaFiniteSetWRT Œº)·∂ú`. As a consequence,
  that restriction is s-finite.

* An instance showing that `Œº.restrict Œº.sigmaFiniteSet` is sigma-finite.
* `restrict_compl_sigmaFiniteSet_eq_zero_or_top`: the measure `Œº.restrict Œº.sigmaFiniteSet·∂ú` takes
  only two values: 0 and ‚àû .
* `measure_compl_sigmaFiniteSet_eq_zero_iff_sigmaFinite`: a measure `Œº` is sigma-finite
  iff `Œº Œº.sigmaFiniteSet·∂ú = 0`.

## References

* [P. R. Halmos, *Measure theory*, 17.3 and 30.11][halmos1950measure]

-/

open scoped ENNReal NNReal Topology

open Filter

namespace MeasureTheory

variable {Œ± : Type*} {mŒ± : MeasurableSpace Œ±} {Œº : Measure Œ±} {C : ‚Ñù‚â•0} {g : Œ± ‚Üí ‚Ñù‚â•0‚àû}

/-! We prove that the condition in the definition of `sigmaFiniteSetWRT` is true for finite
measures. Since every s-finite measure is absolutely continuous with respect to a finite measure,
the condition will then also be true for s-finite measures. -/

/-- Let `p : Set Œ± ‚Üí Prop` be a predicate on sets and let `C` be the supremum of `Œº s` over
all measurable sets `s` with property `p s`. `C` is finite since `Œº` is a finite measure.
Then there exists a measurable set `t` with `p t` such that `Œº t ‚â• C - 1/n`. -/
lemma exists_fun_lintegral_ge (Œº : Measure Œ±) (p : (Œ± ‚Üí ‚Ñù‚â•0‚àû) ‚Üí Prop) (hp_zero : p 0)
    (hC : ‚àÄ (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº ‚â§ C)
    (n : ‚Ñï) :
    ‚àÉ f, Measurable f ‚àß p f
      ‚àß (‚®Ü (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº) - 1/n ‚â§ ‚à´‚Åª x, f x ‚àÇŒº := by
  by_cases hC_lt : 1/n < ‚®Ü (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº
  ¬∑ have h_lt_top : ‚®Ü (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº < ‚àû := by
      refine (?_ : ‚®Ü (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº ‚â§ C).trans_lt
        ENNReal.coe_lt_top
      refine iSup_le (fun g ‚Ü¶ ?_)
      exact iSup_le (fun hg ‚Ü¶ iSup_le (fun hgp ‚Ü¶ hC _ hg hgp))
    obtain ‚ü®t, ht‚ü© := exists_lt_of_lt_ciSup
      (ENNReal.sub_lt_self h_lt_top.ne (ne_zero_of_lt hC_lt) (by simp) :
          (‚®Ü (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº) - 1/n
        < ‚®Ü (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº)
    have ht_meas : Measurable t := by
      by_contra h_not_mem
      simp only [h_not_mem] at ht
      simp at ht
    have ht_mem : p t := by
      by_contra h_not_mem
      simp only [h_not_mem] at ht
      simp at ht
    refine ‚ü®t, ht_meas, ht_mem, ?_‚ü©
    simp only [ht_meas, ht_mem, iSup_true] at ht
    exact ht.le
  ¬∑ refine ‚ü®0, measurable_const, hp_zero, ?_‚ü©
    rw [tsub_eq_zero_of_le (not_lt.mp hC_lt)]
    exact zero_le'

/-- A measurable set such that `p (Œº.funGE Œº n)` and for `C` the supremum of `Œº s` over
all measurable sets `s` with `p s`, `Œº (Œº.funGE Œº n) ‚â• C - 1/n`. -/
noncomputable
def Measure.funGE (Œº : Measure Œ±) (p : (Œ± ‚Üí ‚Ñù‚â•0‚àû) ‚Üí Prop) (hp_zero : p 0)
    (hC : ‚àÄ (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº ‚â§ C)
    (n : ‚Ñï) :
    Œ± ‚Üí ‚Ñù‚â•0‚àû :=
  (exists_fun_lintegral_ge Œº p hp_zero hC n).choose

lemma measurable_funGE (p : (Œ± ‚Üí ‚Ñù‚â•0‚àû) ‚Üí Prop) (hp_zero : p 0)
    (hC : ‚àÄ (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº ‚â§ C) (n : ‚Ñï) :
    Measurable (Œº.funGE p hp_zero hC n) :=
  (exists_fun_lintegral_ge Œº p hp_zero hC n).choose_spec.1

lemma prop_funGE (Œº : Measure Œ±) (p : (Œ± ‚Üí ‚Ñù‚â•0‚àû) ‚Üí Prop) (hp_zero : p 0)
    (hC : ‚àÄ (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº ‚â§ C) (n : ‚Ñï) :
    p (Œº.funGE p hp_zero hC n) :=
  (exists_fun_lintegral_ge Œº p hp_zero hC n).choose_spec.2.1

lemma lintegral_funGE_le (Œº : Measure Œ±) (p : (Œ± ‚Üí ‚Ñù‚â•0‚àû) ‚Üí Prop) (hp_zero : p 0)
    (hC : ‚àÄ (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº ‚â§ C) (n : ‚Ñï) :
    ‚à´‚Åª x, Œº.funGE p hp_zero hC n x ‚àÇŒº ‚â§ ‚®Ü (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº := by
  refine (le_iSup (f := fun s ‚Ü¶ _) (prop_funGE Œº p hp_zero hC n)).trans ?_
  exact le_iSup‚ÇÇ (f := fun g _ ‚Ü¶ ‚®Ü (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº) (Œº.funGE p hp_zero hC n)
    (measurable_funGE p hp_zero hC n)

lemma lintegral_funGE_ge (Œº : Measure Œ±) (p : (Œ± ‚Üí ‚Ñù‚â•0‚àû) ‚Üí Prop) (hp_zero : p 0)
    (hC : ‚àÄ (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº ‚â§ C) (n : ‚Ñï) :
    (‚®Ü (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº) - 1/n ‚â§ ‚à´‚Åª x, Œº.funGE p hp_zero hC n x ‚àÇŒº :=
  (exists_fun_lintegral_ge Œº p hp_zero hC n).choose_spec.2.2

lemma tendsto_lintegral_funGE (Œº : Measure Œ±) (p : (Œ± ‚Üí ‚Ñù‚â•0‚àû) ‚Üí Prop) (hp_zero : p 0)
    (hC : ‚àÄ (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº ‚â§ C) :
    Tendsto (fun n ‚Ü¶ ‚à´‚Åª x, Œº.funGE p hp_zero hC n x ‚àÇŒº) atTop
      (ùìù (‚®Ü (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº)) := by
  refine tendsto_of_tendsto_of_tendsto_of_le_of_le ?_
    tendsto_const_nhds (lintegral_funGE_ge Œº p hp_zero hC) (lintegral_funGE_le Œº p hp_zero hC)
  nth_rewrite 2 [‚Üê tsub_zero (‚®Ü (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº)]
  refine ENNReal.Tendsto.sub tendsto_const_nhds ?_ (Or.inr ENNReal.zero_ne_top)
  simp only [one_div]
  exact ENNReal.tendsto_inv_nat_nhds_zero

/-- A measurable set such that `p (Œº.maximalFun p hp_empty)` and the measure
`Œº (Œº.maximalFun p hp_empty)` is maximal among such sets. -/
noncomputable
def Measure.maximalFun (Œº : Measure Œ±) (p : (Œ± ‚Üí ‚Ñù‚â•0‚àû) ‚Üí Prop) (hp_zero : p 0)
    (hC : ‚àÄ (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº ‚â§ C) :
    Œ± ‚Üí ‚Ñù‚â•0‚àû :=
  fun a ‚Ü¶ ‚®Ü n, Œº.funGE p hp_zero hC n a

lemma measurable_maximalFun (p : (Œ± ‚Üí ‚Ñù‚â•0‚àû) ‚Üí Prop) (hp_zero : p 0)
    (hC : ‚àÄ (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº ‚â§ C) :
    Measurable (Œº.maximalFun p hp_zero hC) :=
  Measurable.iSup (measurable_funGE p hp_zero hC)

lemma prop_maximalFun (Œº : Measure Œ±) (p : (Œ± ‚Üí ‚Ñù‚â•0‚àû) ‚Üí Prop) (hp_zero : p 0)
    (hC : ‚àÄ (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº ‚â§ C)
    (hp_iUnion : ‚àÄ (g : ‚Ñï ‚Üí Œ± ‚Üí ‚Ñù‚â•0‚àû) (_ : ‚àÄ n, Measurable (g n)) (_ : ‚àÄ n, p (g n)),
      p (fun a ‚Ü¶ ‚®Ü n, g n a)) :
    p (Œº.maximalFun p hp_zero hC) :=
  hp_iUnion _ (measurable_funGE p hp_zero hC) (prop_funGE Œº p hp_zero hC)

/-- `Œº.maximalFun p hp_empty` has maximal `Œº`-measure among all measurable sets `s` with `p s`. -/
lemma lintegral_maximalFun (Œº : Measure Œ±) (p : (Œ± ‚Üí ‚Ñù‚â•0‚àû) ‚Üí Prop) (hp_zero : p 0)
    (hC : ‚àÄ (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº ‚â§ C)
    (hp_iUnion : ‚àÄ (g : ‚Ñï ‚Üí Œ± ‚Üí ‚Ñù‚â•0‚àû) (_ : ‚àÄ n, Measurable (g n)) (_ : ‚àÄ n, p (g n)),
      p (fun a ‚Ü¶ ‚®Ü n, g n a)) :
    ‚à´‚Åª x, Œº.maximalFun p hp_zero hC x ‚àÇŒº = ‚®Ü (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº := by
  apply le_antisymm
  ¬∑ refine (le_iSup (f := fun _ ‚Ü¶ _) (prop_maximalFun Œº p hp_zero hC hp_iUnion)).trans ?_
    exact le_iSup‚ÇÇ (f := fun g _ ‚Ü¶ ‚®Ü (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº) (Œº.maximalFun p hp_zero hC)
      (measurable_maximalFun p hp_zero hC)
  ¬∑ refine le_of_tendsto' (tendsto_lintegral_funGE Œº p hp_zero hC) fun n ‚Ü¶ ?_
    refine lintegral_mono fun a ‚Ü¶ ?_
    exact le_iSup (fun n ‚Ü¶ Œº.funGE p hp_zero hC n a) n

-- lemma not_prop_of_subset_compl_maximalFun (Œº : Measure Œ±) (p : (Œ± ‚Üí ‚Ñù‚â•0‚àû) ‚Üí Prop) (hp_zero : p 0)
--     (hC : ‚àÄ (g) (_ : Measurable g) (_ : p g), ‚à´‚Åª x, g x ‚àÇŒº ‚â§ C)
--     (hp_iUnion : ‚àÄ (g : ‚Ñï ‚Üí Œ± ‚Üí ‚Ñù‚â•0‚àû) (_ : ‚àÄ n, Measurable (g n)) (_ : ‚àÄ n, p (g n)),
--       p (fun a ‚Ü¶ ‚®Ü n, g n a))
--     (hg : Measurable g) (hs_subset : s ‚äÜ (Œº.maximalFun p hp_zero hC)·∂ú) (hŒºs : Œº s ‚â† 0) :
--     ¬¨ p s := by
--   intro hsp
--   have h_lt : Œº (Œº.maximalFun p hp_zero hC) < Œº (Œº.maximalFun p hp_zero hC ‚à™ s) := by
--     rw [measure_union _ hs]
--     ¬∑ exact ENNReal.lt_add_right (measure_ne_top _ _) hŒºs
--     ¬∑ exact disjoint_compl_right.mono_right hs_subset
--   have h_le : Œº (Œº.maximalFun p hp_zero hC ‚à™ s) ‚â§ Œº (Œº.maximalFun p hp_zero hC) := by
--     conv_rhs => rw [lintegral_maximalFun _ _ hp_zero hC hp_iUnion]
--     refine (le_iSup
--       (f := fun (_ : p (Œº.maximalFun p hp_zero hC ‚à™ s)) ‚Ü¶ _) ?_).trans ?_
--     ¬∑ let t : ‚Ñï ‚Üí Set Œ± := fun n ‚Ü¶ if n = 0 then (Œº.maximalFun p hp_zero hC) else s
--       have : Œº.maximalFun p hp_zero hC ‚à™ s = ‚ãÉ n, t n := by
--         simp only [t, Set.iUnion_ite, Set.iUnion_iUnion_eq_left]
--         congr with x
--         simp only [Set.mem_iUnion, exists_prop, exists_and_right, iff_and_self]
--         exact fun _ ‚Ü¶ ‚ü®1, by simp‚ü©
--       rw [this]
--       refine hp_iUnion t (fun n ‚Ü¶ ?_) (fun n ‚Ü¶ ?_)
--       ¬∑ cases n with
--         | zero =>
--           simp only [‚ÜìreduceIte, t]
--           exact measurableSet_maximalFun p hp_empty
--         | succ n =>
--             simp only [AddLeftCancelMonoid.add_eq_zero, one_ne_zero, and_false, ‚ÜìreduceIte, t]
--             exact hs
--       ¬∑ cases n with
--         | zero =>
--           simp only [‚ÜìreduceIte, t]
--           exact prop_maximalFun Œº p hp_empty hp_iUnion
--         | succ n =>
--             simp only [AddLeftCancelMonoid.add_eq_zero, one_ne_zero, and_false, ‚ÜìreduceIte, t]
--             exact hsp
--     ¬∑ exact le_iSup‚ÇÇ (f := fun s _ ‚Ü¶ ‚®Ü (_ : p _), Œº s)
--         (Œº.maximalFun p hp_zero hC ‚à™ s) ((measurableSet_maximalFun p hp_zero hC).union hs)
--   exact h_lt.not_le h_le

end MeasureTheory
