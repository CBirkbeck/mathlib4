/-
Copyright (c) 2022 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathlib.MeasureTheory.Measure.Haar.Basic

/-!
# Un bel essai

-/

noncomputable section

open MeasureTheory Measure

open scoped Topology

@[to_additive]
noncomputable instance (Œ± : Type*) [MeasurableSpace Œ±] (G : Type*) [SMul G Œ±] :
    SMul G (Measure Œ±) :=
{ smul := fun g Œº ‚Ü¶ Measure.map (fun x ‚Ü¶ g ‚Ä¢ x) Œº }

lemma smul_measure_def {Œ± : Type*} [MeasurableSpace Œ±] {G : Type*} [SMul G Œ±]
    (g : G) (Œº : Measure Œ±) : g ‚Ä¢ Œº = Measure.map (fun x ‚Ü¶ g ‚Ä¢ x) Œº := rfl

instance {Œ± : Type*} [TopologicalSpace Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±]
  {G : Type*} [TopologicalSpace G] [Monoid G] [MulAction G Œ±]
  [ContinuousSMul G Œ±] : MulAction G (Measure Œ±) :=
{ one_smul := fun Œº ‚Ü¶ by simp [smul_measure_def]
  mul_smul := by
    intro g h Œº
    borelize G
    simp only [smul_measure_def, ‚Üê smul_smul,
      Measure.map_map (measurable_const_smul g) (measurable_const_smul h)]
    rfl }

variable {Œ± : Type*} [TopologicalSpace Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±]
  {G : Type*} [TopologicalSpace G] [Group G] [MulAction G Œ±]
  [ContinuousSMul G Œ±]

open scoped Pointwise

lemma glou [T2Space Œ±] (Œº : Measure Œ±) {U : Set Œ±} (hU : IsOpen U) [Regular Œº] :
    LowerSemicontinuousAt (fun (g : G) ‚Ü¶ (g ‚Ä¢ Œº : Measure Œ±) U) 1 := by
  borelize G
  intro t ht
  simp only [one_smul] at ht
  obtain ‚ü®K, KU, K_comp, hK‚ü© : ‚àÉ K, K ‚äÜ U ‚àß IsCompact K ‚àß t < Œº K := hU.exists_lt_isCompact ht
  have : ‚àÄ·∂† g in ùìù (1 : G), g ‚Ä¢ K ‚äÜ U := by
    exact?
  filter_upwards [this] with g hg
  apply hK.trans_le
  have : (g ‚Ä¢ Œº) (g ‚Ä¢ K) = Œº K := by
    rw [smul_measure_def,
      Measure.map_apply (measurable_const_smul g) (IsCompact.smul g K_comp).measurableSet,
      Set.preimage_smul, smul_smul, mul_left_inv, one_smul]
  rw [‚Üê this]
  exact measure_mono hg
