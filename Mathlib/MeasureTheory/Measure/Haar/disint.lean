/-
Copyright (c) 2022 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathlib.MeasureTheory.Measure.Haar.Basic

/-!
# Un bel essai

-/

noncomputable section

open MeasureTheory Measure Filter

open scoped Topology

@[to_additive]
noncomputable instance (Œ± : Type*) [MeasurableSpace Œ±] (G : Type*) [SMul G Œ±] :
    SMul G (Measure Œ±) :=
{ smul := fun g Œº ‚Ü¶ Measure.map (fun x ‚Ü¶ g ‚Ä¢ x) Œº }

lemma smul_measure_def {Œ± : Type*} [MeasurableSpace Œ±] {G : Type*} [SMul G Œ±]
    (g : G) (Œº : Measure Œ±) : g ‚Ä¢ Œº = Measure.map (fun x ‚Ü¶ g ‚Ä¢ x) Œº := rfl

instance {Œ± : Type*} [TopologicalSpace Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±]
  {G : Type*} [TopologicalSpace G] [Monoid G] [MulAction G Œ±]
  [ContinuousSMul G Œ±] : MulAction G (Measure Œ±) :=
{ one_smul := fun Œº ‚Ü¶ by simp [smul_measure_def]
  mul_smul := by
    intro g h Œº
    borelize G
    simp only [smul_measure_def, ‚Üê smul_smul,
      Measure.map_map (measurable_const_smul g) (measurable_const_smul h)]
    rfl }

variable {Œ± : Type*} [TopologicalSpace Œ±] [T2Space Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±]
  {G : Type*} [TopologicalSpace G] [Group G] [MulAction G Œ±]
  [ContinuousSMul G Œ±]

open scoped Pointwise
open Set

lemma smul_measure_apply {Œº : Measure Œ±} (g : G) (s : Set Œ±) : (g ‚Ä¢ Œº) s = Œº (g‚Åª¬π ‚Ä¢ s) := by
  have : MeasurableEmbedding (fun x ‚Ü¶ g ‚Ä¢ x) :=
    (Homeomorph.smul g (Œ± := Œ±)).closedEmbedding.measurableEmbedding
  rw [smul_measure_def, MeasurableEmbedding.map_apply this, Set.preimage_smul]

@[simp]
lemma smul_measure_smul_set_eq {Œº : Measure Œ±} (g : G) (s : Set Œ±) : (g ‚Ä¢ Œº) (g ‚Ä¢ s) = Œº s := by
  rw [smul_measure_apply, smul_smul, mul_left_inv, one_smul]

variable [ContinuousMul G] (Œº : Measure Œ±) [InnerRegularCompactLTTop Œº]

open scoped ENNReal

lemma lowerSemicontinuous_measure_preimage [IsFiniteMeasure Œº]
  {U : Set Œ±} (hU : IsOpen U) : LowerSemicontinuous (fun (g : G) ‚Ü¶ Œº (g‚Åª¬π ‚Ä¢ U)) := by
  intro g‚ÇÄ t ht
  obtain ‚ü®K, KU, K_comp, hK‚ü© : ‚àÉ K, K ‚äÜ g‚ÇÄ‚Åª¬π ‚Ä¢ U ‚àß IsCompact K ‚àß t < Œº K :=
    MeasurableSet.exists_lt_isCompact_of_ne_top (hU.smul g‚ÇÄ‚Åª¬π).measurableSet
      (measure_ne_top Œº (g‚ÇÄ‚Åª¬π ‚Ä¢ U)) ht
  have A : ‚àÄ·∂† g in ùìù (1 : G), g ‚Ä¢ K ‚äÜ g‚ÇÄ‚Åª¬π ‚Ä¢ U := by
    obtain ‚ü®V, V_mem, hV‚ü© :  ‚àÉ V, V ‚àà ùìù (1 : G) ‚àß V ‚Ä¢ K ‚äÜ g‚ÇÄ‚Åª¬π ‚Ä¢ U :=
      compact_open_separated_smul G K_comp (hU.smul g‚ÇÄ‚Åª¬π) KU
    filter_upwards [V_mem] with g hg
    exact (smul_set_subset_smul hg).trans hV
  have : Tendsto (fun g ‚Ü¶ g‚ÇÄ‚Åª¬π * g) (ùìù g‚ÇÄ) (ùìù (g‚ÇÄ‚Åª¬π * g‚ÇÄ)) :=
    tendsto_const_nhds.mul tendsto_id
  simp only [mul_left_inv] at this
  filter_upwards [this A] with g hg
  apply hK.trans_le
  apply measure_mono
  simp only [preimage_setOf_eq, mem_setOf_eq, ‚Üê smul_smul, set_smul_subset_set_smul_iff] at hg
  simpa only [subset_set_smul_iff, inv_inv] using hg

variable [MeasurableSpace G] [BorelSpace G]

lemma measurable_smul_set (g : G) {s : Set Œ±} (hs : MeasurableSet s) :
    MeasurableSet (g ‚Ä¢ s) := by
  rw [‚Üê preimage_smul_inv]
  exact measurable_const_smul g‚Åª¬π hs

lemma measurable_measure_preimage_smul_of_isFiniteMeasure
    [IsFiniteMeasure Œº] {s : Set Œ±} (hs : MeasurableSet s) :
    Measurable (fun (g : G) ‚Ü¶ Œº (g‚Åª¬π ‚Ä¢ s)) := by
  apply MeasurableSet.induction_on_open (C := fun t ‚Ü¶ Measurable (fun (g : G) ‚Ü¶ Œº (g‚Åª¬π ‚Ä¢ t)))
    _ _ _ hs
  ¬∑ intro U hU
    exact (lowerSemicontinuous_measure_preimage Œº hU).measurable
  ¬∑ intro t t_meas ht
    have : ‚àÄ (g : G), Œº (g‚Åª¬π ‚Ä¢ t·∂ú) = Œº univ - Œº (g‚Åª¬π ‚Ä¢ t) := by
      intro g
      have : g‚Åª¬π ‚Ä¢ t·∂ú = (g‚Åª¬π ‚Ä¢ t)·∂ú := by simp [compl_eq_univ_diff, smul_set_sdiff]
      rw [this, measure_compl (measurable_smul_set _ t_meas) (measure_ne_top Œº (g‚Åª¬π ‚Ä¢ t))]
    simp_rw [this]
    exact measurable_const.sub ht
  ¬∑ intro f f_disj f_meas hf
    have : ‚àÄ (g : G), Œº (g‚Åª¬π ‚Ä¢ ‚ãÉ n, f n) = ‚àë' n, Œº (g ‚Åª¬π ‚Ä¢ f n) := by
      intro g
      rw [smul_set_Union, measure_iUnion _ (fun n ‚Ü¶ measurable_smul_set _ (f_meas n))]
      exact fun m n hmn ‚Ü¶ Disjoint.smul_set _ (f_disj hmn)
    simp_rw [this]
    exact Measurable.ennreal_tsum hf

instance [SigmaFinite Œº] (n : ‚Ñï) : IsFiniteMeasure (Œº.restrict (spanningSets Œº n)) :=
  ‚ü®by simpa using measure_spanningSets_lt_top Œº n‚ü©


lemma measurable_measure_preimage_smul [SigmaFinite Œº] {s : Set Œ±} (hs : MeasurableSet s) :
    Measurable (fun (g : G) ‚Ü¶ Œº (g‚Åª¬π ‚Ä¢ s)) := by
  have : ‚àÄ (g : G), Œº (g‚Åª¬π ‚Ä¢ s) = ‚®Ü i, Œº.restrict (spanningSets Œº i) (g ‚Åª¬π ‚Ä¢ s) := by
    intro g
    rw [iSup_restrict_spanningSets]
    exact measurable_smul_set g‚Åª¬π hs
  simp_rw [this]
  apply measurable_iSup (fun i ‚Ü¶ ?_)
  have : InnerRegularCompactLTTop (Œº.restrict (spanningSets Œº i)) := by
    apply InnerRegularCompactLTTop.restrict_of_measure_lt_top
    exact (measure_spanningSets_lt_top Œº i).ne
  exact measurable_measure_preimage_smul_of_isFiniteMeasure _ hs
