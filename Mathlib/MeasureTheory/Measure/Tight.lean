/-
Copyright (c) 2024 Josha Dekker. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne, Josha Dekker
-/
import Mathlib.MeasureTheory.Measure.Regular
import Mathlib.MeasureTheory.Measure.ProbabilityMeasure
import Mathlib.MeasureTheory.Measure.Portmanteau

/-!
# (Pre-)tight measures

## Main definitions

* `IsPretight`: A measure `Œº` is pre-tight if for all `0 < Œµ`, there exists `K` totally bounded such
  that `Œº K·∂ú ‚â§ Œµ`.
* `IsTight`: A measure `Œº` is tight if for all `0 < Œµ`, there exists `K` compact such that
  `Œº K·∂ú ‚â§ Œµ`.
* `IsTightSet`: A set of measures `S` is tight if for all `0 < Œµ`, there exists `K` compact such
  that for all `Œº` in `S`, `Œº K·∂ú ‚â§ Œµ`.

## Main statements

*

## Notation


## Implementation details


-/
open Topology Filter Uniformity Uniform MeasureTheory Set

namespace MeasureTheory

variable {Œ± Œπ : Type*} [MeasurableSpace Œ±] [TopologicalSpace Œ±] {Œº : Measure Œ±}

lemma aux1 [IsFiniteMeasure Œº] (K : ‚Ñï ‚Üí Set Œ±) (h : Œº (‚ãÉ n, K n) = Œº Set.univ) :
    ‚àÄ Œµ > 0, ‚àÉ n, Œº (Set.Accumulate K n) ‚â• Œº Set.univ - Œµ := by
  rintro Œµ hŒµ
  have : Filter.Tendsto (Œº ‚àò Set.Accumulate K) Filter.atTop (nhds (Œº (‚ãÉ n, Set.Accumulate K n))) :=
    MeasureTheory.tendsto_measure_iUnion Set.monotone_accumulate
  rw [ENNReal.tendsto_atTop] at this
  have hLŒµ : ‚àÄ Œµ > 0, ‚àÉ n, Œº (Set.Accumulate K n) ‚â• Œº (‚ãÉ n, Set.Accumulate K n) - Œµ := by
    intro Œµ hŒµ
    obtain ‚ü®n, hn‚ü© := this Œµ hŒµ
    use n
    simp_all only [Function.comp_apply, Set.mem_Icc, tsub_le_iff_right, le_refl]
  obtain ‚ü®n, hn‚ü© := hLŒµ Œµ hŒµ
  use n
  ¬∑ rw [‚Üê h, ‚Üê Set.iUnion_accumulate]
    exact hn
  ¬∑ rw [Set.iUnion_accumulate, h]
    exact measure_ne_top Œº Set.univ

lemma aux2 [IsFiniteMeasure Œº] [TopologicalSpace Œ±] [OpensMeasurableSpace Œ±]
    (K : ‚Ñï ‚Üí Set Œ±) (hKclosed : ‚àÄ n, IsClosed (K n)) (h : Œº (‚ãÉ n, K n) = Œº Set.univ) :
    ‚àÄ Œµ > 0, ‚àÉ n, Œº ((Set.Accumulate K n)·∂ú) ‚â§ Œµ := by
  rintro Œµ hŒµ
  obtain ‚ü®n, hn‚ü© := aux1 K h Œµ hŒµ
  use n
  have hK2 : IsClosed (Set.Accumulate K n) :=
      Set.Finite.isClosed_biUnion instFiniteSubtypeLeToLE (fun i _ => hKclosed i)
  rw [measure_compl hK2.measurableSet (measure_ne_top Œº _)]
  exact tsub_le_iff_tsub_le.mp hn

/-- A measure `Œº` is separable if there is a separable set `S` such that `Œº S = Œº Set.univ`. -/
 def IsSeparable [TopologicalSpace Œ±] (Œº : Measure Œ±) : Prop :=
   ‚àÉ S : Set Œ±, TopologicalSpace.IsSeparable S ‚àß Œº S = Œº Set.univ

/-- A measure `Œº` is tight if for all `0 < Œµ`, there exists `K` compact such that `Œº K·∂ú ‚â§ Œµ`.
This is formulated in terms of filters for simplicity, and proven equivalent to the usual definition
in `iff_compact_sets`. -/
def IsTight (Œº : Measure Œ±) : Prop := Tendsto Œº (cocompact Œ±).smallSets (ùìù 0)

namespace IsTight

lemma iff_compact_sets {Œº : Measure Œ±} :
    IsTight Œº ‚Üî ‚àÄ Œµ > 0, ‚àÉ K : Set Œ±, IsCompact K ‚àß Œº (K·∂ú) ‚â§ Œµ := by
  simp only [IsTight, ne_eq, ENNReal.zero_ne_top, not_false_eq_true, ENNReal.tendsto_nhds,
    zero_le, tsub_eq_zero_of_le, zero_add, mem_Icc, true_and,
    eventually_smallSets, mem_cocompact]
  apply forall‚ÇÇ_congr ; rintro Œµ - ; constructor
  ¬∑ rintro ‚ü®A, ‚ü®K, h1, h2‚ü©, hA‚ü©
    exact ‚ü®K, h1, hA K·∂ú h2‚ü©
  ¬∑ rintro ‚ü®K, h1, h2‚ü©
    refine ‚ü®K·∂ú, ‚ü®K, h1, subset_rfl‚ü©, fun A hA => Œº.mono hA |>.trans h2‚ü©

lemma of_le_isTight {Œº ŒΩ : Measure Œ±} (h : Œº ‚â§ ŒΩ) (hŒΩ : IsTight ŒΩ) : IsTight Œº := by
  rw [iff_compact_sets] at *
  intro Œµ hŒµ
  obtain ‚ü®K, hK, hKc‚ü© := hŒΩ Œµ hŒµ
  exact ‚ü®K, hK, le_trans (h K·∂ú) hKc‚ü©

lemma of_restrict_isTight {Œº : Measure Œ±} {U : Set Œ±} (hŒΩ : IsTight Œº) :
    IsTight (Œº.restrict U) := by
  rw [iff_compact_sets] at *
  intro Œµ hŒµ
  obtain ‚ü®K, hK, hKc‚ü© := hŒΩ Œµ hŒµ
  exact ‚ü®K, hK, le_trans (Œº.restrict_le_self _) hKc‚ü©

lemma add {Œº ŒΩ : Measure Œ±} (hŒº : IsTight Œº) (hŒΩ : IsTight ŒΩ) : IsTight (Œº + ŒΩ) := by
  have := Filter.Tendsto.add hŒº hŒΩ
  simp only [add_zero] at this
  exact this

lemma const_mul {Œº : Measure Œ±} (c : NNReal) (hŒº : IsTight Œº) : IsTight (c ‚Ä¢ Œº) := by
  rw [iff_compact_sets] at *
  intro Œµ hŒµ
  have hŒµc : Œµ / c > 0 := by
    simp only [ENNReal.div_pos_iff, ne_eq, ENNReal.coe_ne_top, not_false_eq_true,
      and_true, hŒµ.ne']
  obtain ‚ü®K, hK, hKc‚ü© := hŒº (Œµ / c) hŒµc
  exact ‚ü®K, hK, ENNReal.mul_le_of_le_div' hKc‚ü©

instance [TopologicalSpace Œ±] [T2Space Œ±] [OpensMeasurableSpace Œ±] [hk: IsFiniteMeasureOnCompacts Œº]
    [h : Fact (IsTight Œº)] : IsFiniteMeasure Œº := by
  obtain ‚ü®_, hK, hŒº‚ü© := (iff_compact_sets.mp h.out) 1 (zero_lt_one)
  have := (MeasureTheory.measure_add_measure_compl (Œº := Œº) hK.isClosed.measurableSet).symm
  have : Œº Set.univ < ‚ä§ := by
    rw [this, WithTop.add_lt_top]
    exact ‚ü®hk.lt_top_of_isCompact hK, lt_of_le_of_lt hŒº ENNReal.one_lt_top‚ü©
  exact ‚ü®this‚ü©

lemma has_compact_nat [TopologicalSpace Œ±] (h : IsTight Œº) :
    ‚àÄ n : ‚Ñï, ‚àÉ K : Set Œ±, IsCompact K ‚àß Œº K·∂ú ‚â§ 1/n := by
  intro n
  rw [iff_compact_sets] at h
  apply h
  simp

lemma of_compact_nat [TopologicalSpace Œ±] (h : ‚àÄ n : ‚Ñï, ‚àÉ K : Set Œ±, IsCompact K ‚àß Œº K·∂ú ‚â§ 1/n) :
    IsTight Œº:= by
  rw [iff_compact_sets]
  intro Œµ hŒµ
  obtain ‚ü®n, hn‚ü© := ENNReal.exists_inv_nat_lt hŒµ.ne'
  obtain ‚ü®K, hK, hKe‚ü© := h n
  refine ‚ü®K, hK, le_trans hKe (le_trans ?_ hn.le)‚ü©
  rw [one_div, ENNReal.inv_le_inv]

lemma iff_compact_nat [TopologicalSpace Œ±] :
    IsTight Œº ‚Üî ‚àÄ n : ‚Ñï, ‚àÉ K : Set Œ±, IsCompact K ‚àß Œº K·∂ú ‚â§ 1/n :=
  ‚ü®has_compact_nat, of_compact_nat‚ü©

lemma of_innerRegular [TopologicalSpace Œ±] [T2Space Œ±] [OpensMeasurableSpace Œ±] (Œº : Measure Œ±)
    [IsFiniteMeasure Œº] [Œº.InnerRegular] : IsTight Œº := by
  rw [iff_compact_sets]
  cases eq_zero_or_neZero Œº with
  | inl hŒº =>
    rw [hŒº]
    refine fun _ _ ‚Ü¶ ‚ü®‚àÖ, isCompact_empty, ?_‚ü©
    simp
  | inr hŒº =>
    let r := Œº Set.univ
    have hr : 0 < r := NeZero.pos r
    intro Œµ hŒµ
    cases lt_or_ge Œµ r with
    | inl hŒµr =>
      have hŒµr' : r - Œµ < r := ENNReal.sub_lt_self (measure_ne_top Œº _) hr.ne' hŒµ.ne'
      obtain ‚ü®K, _, hK_compact, hKŒº‚ü© :=
        (MeasurableSet.univ : MeasurableSet (Set.univ : Set Œ±)).exists_lt_isCompact hŒµr'
      refine ‚ü®K, hK_compact, ?_‚ü©
      rw [measure_compl hK_compact.isClosed.measurableSet (measure_ne_top Œº _),
        tsub_le_iff_right]
      rw [ENNReal.sub_lt_iff_lt_right (ne_top_of_lt hŒµr) hŒµr.le, add_comm] at hKŒº
      exact hKŒº.le
    | inr hŒµr =>
      refine ‚ü®‚àÖ, isCompact_empty, ?_‚ü©
      rw [Set.compl_empty]
      exact hŒµr

lemma Ulam_tightness [TopologicalSpace.SeparableSpace Œ±] [MetricSpace Œ±]
    [CompleteSpace Œ±] [OpensMeasurableSpace Œ±] [IsFiniteMeasure Œº] : IsTight Œº := by
  sorry

lemma countable_compact_cover [TopologicalSpace Œ±] (h : IsTight Œº) :
    ‚àÉ M, IsSigmaCompact M ‚àß Œº M = Œº Set.univ := by
  choose! K hK using h.has_compact_nat
  use ‚ãÉ n, K n
  constructor
  ¬∑ apply isSigmaCompact_iUnion_of_isCompact
    intro _
    simp_all only [one_div,
      ENNReal.le_inv_iff_mul_le]
  ¬∑ rw [measure_congr]
    rw [ae_eq_univ, Set.compl_iUnion, ‚Üê le_zero_iff]
    refine le_of_forall_lt' (fun Œµ hŒµ ‚Ü¶ ?_)
    obtain ‚ü®n, hn‚ü© := ENNReal.exists_inv_nat_lt hŒµ.ne.symm
    exact lt_of_le_of_lt ((measure_mono <| Set.iInter_subset _ n).trans <|
      (inv_eq_one_div (n : ENNReal)).symm ‚ñ∏ (hK n).2) hn

lemma of_countable_compact_cover [TopologicalSpace Œ±] [T2Space Œ±] [OpensMeasurableSpace Œ±]
    [IsFiniteMeasure Œº] (h : ‚àÉ M, IsSigmaCompact M ‚àß Œº M = Œº Set.univ) : IsTight Œº := by
  rw [iff_compact_sets]
  rintro Œµ hŒµ
  rcases h with ‚ü®M, hM, hMŒº‚ü©
  unfold IsSigmaCompact at hM
  rcases hM with ‚ü®K, hK, rfl‚ü©
  have hAKc : ‚àÄ n, IsCompact (Set.Accumulate K n) := fun n ‚Ü¶ isCompact_accumulate hK n
  obtain ‚ü®n, hn‚ü© := aux2 K (fun n => (hK n).isClosed) hMŒº Œµ hŒµ
  exact ‚ü®Set.Accumulate K n, hAKc n, hn‚ü©

lemma iff_countable_compact_cover [TopologicalSpace Œ±] [T2Space Œ±] [OpensMeasurableSpace Œ±]
    [IsFiniteMeasure Œº] : IsTight Œº ‚Üî ‚àÉ M, IsSigmaCompact M ‚àß Œº M = Œº Set.univ :=
  ‚ü®countable_compact_cover, of_countable_compact_cover‚ü©

end IsTight

end MeasureTheory
