/-
Copyright (c) 2025 Oliver Butterley. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Oliver Butterley, Yoh Tanimoto
-/
import Mathlib.MeasureTheory.VectorMeasure.Basic
import Mathlib.Analysis.Normed.Module.Basic
import Mathlib.Analysis.Normed.Group.InfiniteSum

/-!
# Variation and total variation for vector-valued measures

This file contains the definition of variation for vector-valued measures and contains theorems of
some basic properities of variation.

Given a vector-valued measure Œº we consider the problem of finding a function f such that, for any
set E, ‚ÄñŒº(E)‚Äñ ‚â§ f(E). This suggests defining f(E) as the supremum over partitions {E·µ¢} of E, of the
quantity ‚àë·µ¢, ‚ÄñŒº(E·µ¢)‚Äñ. Indeed any solution of the problem must be not less than this function. It
turns out that this function actually is a measure.

## Main definitions & statements

* `VectorMeasure.variation` is the definition of the (total) variation measure.

## Implementation notes

Variation is defined as an `‚Ñù‚â•0‚àû`-valued `VectorMeasure` rather than as a `Measure`, this is
somewhat natural since we start with `VectorMeasure`.

Variation is defined for signed measures in `MeasureTheory.SignedMeasure.totalVariation`. This
definition uses the Hahn‚ÄìJordan decomposition of a signed measure. However this construction doesn't
generalize to other vector-valued measures, in particular doesn't work for the important case of
complex measures.

## References

* [Walter Rudin, Real and Complex Analysis.][Rud87]

## To do

* Total variation is a norm on the space of vector-valued measures.
* If `Œº` is a `‚Ñù‚â•0‚àû`-valued `VectorMeasure` then `variation Œº = Œº`.
* Variation is equivalent to that defined via the Hahn‚ÄìJordan decomposition for signed measures.
* If `Œº` is a complex measure then `variation univ < ‚àû`.
* Suppose that `Œº` is a measure, that `g ‚àà L¬π(Œº)` and `Œª(E) = ‚à´_E g dŒº` for each measureable `E`.
  Then `variation Œº E = ‚à´_E |g| dŒº` (Rudin Theorem 6.13).
-/

open MeasureTheory BigOperators NNReal ENNReal Function Filter

section CompleteLinearOrder

variable {Œ± : Type*}{Œπ : Type*} [CompleteLinearOrder Œ±] {s : Set Œ±} {a b : Œ±}

theorem lt_biSup_iff {s : Set Œπ} {f : Œπ ‚Üí Œ±} : a < ‚®Ü i ‚àà s, f i ‚Üî ‚àÉ i ‚àà s, a < f i := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ obtain ‚ü®i, hi‚ü© := lt_iSup_iff.mp h
    obtain ‚ü®his, ha‚ü© := lt_iSup_iff.mp hi
    exact ‚ü®i, ‚ü®his, ha‚ü©‚ü©
  ¬∑ obtain ‚ü®i, hi‚ü© := h
    apply lt_iSup_iff.mpr
    exact ‚ü®i , lt_iSup_iff.mpr (by simpa [exists_prop])‚ü©

end CompleteLinearOrder

namespace VectorMeasure

variable {X V ùïú : Type*} [MeasurableSpace X] [NormedAddCommGroup V] [NormedField ùïú]
  [NormedSpace ùïú V] (Œº : VectorMeasure X V)

/-!
## Inner partitions

Instead of working with partitions of a set `s`, we work with finite sets of disjoints sets
contained within `s` since the same value will be achieved in the supremum.

The empty set is forbidden so that partitions of disjoint sets are disjoint sets of sets.
-/

/-- An inner partition is a finite collection of pairwise disjoint sets which are all contained
within a given set. Different to `Setoid.IsPartition` there is no requirement for the union to be
the entire set and the the number of partition elements is required to be finite. -/
def partitions (s : Set X) : Set (Finset (Set X)) :=
    {P | (‚àÄ t ‚àà P, t ‚äÜ s) ‚àß (‚àÄ t ‚àà P, MeasurableSet t) ‚àß (P.toSet.PairwiseDisjoint id) ‚àß
    (‚àÄ p ‚àà P, p ‚â† ‚àÖ)}

lemma partitions_empty : partitions (‚àÖ : Set X) = {‚àÖ} := by
  dsimp [partitions]
  ext P
  simp only [Set.subset_empty_iff, Finset.forall_mem_not_eq', Set.mem_setOf_eq,
    Set.mem_singleton_iff]
  constructor
  ¬∑ intro ‚ü®hP', a, b, hP''‚ü©
    by_contra! hP
    obtain ‚ü®p, hp‚ü© := Finset.Nonempty.exists_mem (Finset.nonempty_iff_ne_empty.mpr hP)
    simp_all [hP' p hp, ne_eq]
  ¬∑ intro hp
    simp [hp]

lemma partitions_monotone {s‚ÇÅ s‚ÇÇ : Set X} (h : s‚ÇÅ ‚äÜ s‚ÇÇ) : partitions s‚ÇÅ ‚äÜ partitions s‚ÇÇ := by
  intro P hP
  obtain ‚ü®h1, h2, h3, h4‚ü© := hP
  exact ‚ü®fun p hp ‚Ü¶ subset_trans (h1 p hp) h, h2, h3, h4‚ü©

open Classical in
/-- If each `P i` is a partition of `s i` then the union is a partition of `‚ãÉ i, s i`. -/
lemma partition_union {s : ‚Ñï ‚Üí Set X} (hs : Pairwise (Disjoint on s))
    {P : ‚Ñï ‚Üí Finset (Set X)} (hP : ‚àÄ i, P i ‚àà partitions (s i)) (n : ‚Ñï):
    Finset.biUnion (Finset.range n) P ‚àà partitions (‚ãÉ i, s i) := by
  simp only [partitions, ne_eq, Finset.forall_mem_not_eq', Set.mem_setOf_eq, Finset.mem_biUnion,
    Finset.mem_range, forall_exists_index, and_imp, not_exists, not_and]
  refine ‚ü®?_, ?_, ?_, ?_‚ü©
  ¬∑ intro p i _ hp
    exact Set.subset_iUnion_of_subset i ((hP i).1 p hp)
  ¬∑ intro p i _ hp
    exact (hP i).2.1 p hp
  ¬∑ intro p hp q hq hpq r hrp hrq
    simp only [Set.bot_eq_empty, Set.le_eq_subset, Set.subset_empty_iff]
    simp only [id_eq, Set.le_eq_subset] at hrp hrq
    simp only [Finset.coe_biUnion, Finset.coe_range, Set.mem_Iio, Set.mem_iUnion, Finset.mem_coe,
      exists_prop] at hp hq
    obtain ‚ü®i, hi, hp‚ü© := hp
    obtain ‚ü®j, hj, hq‚ü© := hq
    obtain hc | hc : i = j ‚à® i ‚â† j := by omega
    ¬∑ rw [hc] at hp
      exact Set.subset_eq_empty ((hP j).2.2.1 hp hq hpq hrp hrq) rfl
    ¬∑ have hp' := (hP i).1 p hp
      have hq' := (hP j).1 q hq
      exact Set.subset_eq_empty (hs hc (subset_trans hrp hp') (subset_trans hrq hq')) rfl
  ¬∑ intro i _ h
    exact (hP i).2.2.2 ‚àÖ h rfl

/-- If P, Q are partitions of two disjoint sets then P and Q are disjoint. -/
lemma partitions_disjoint {s t : Set X} (hst : Disjoint s t) {P Q : Finset (Set X)}
    (hP : P ‚àà partitions s) (hQ : Q ‚àà partitions t) : Disjoint P Q := by
  intro R hRP hRQ
  simp only [Finset.bot_eq_empty, Finset.le_eq_subset, Finset.subset_empty]
  by_contra! hc
  obtain ‚ü®r, hr‚ü© := Finset.Nonempty.exists_mem <| Finset.nonempty_iff_ne_empty.mpr hc
  have := hst (hP.1 r <| hRP hr) (hQ.1 r <| hRQ hr)
  have := hP.2.2.2 r (hRP hr)
  simp_all

open Classical in
/-- If `P` is a partition then the restriction of `P` to a set `s` is a partition of `s`. -/
lemma partition_restrict {s t : Set X} {P : Finset (Set X)} (hs : P ‚àà partitions s)
    (ht : MeasurableSet t) : (P.image (fun p ‚Ü¶ p ‚à© t)).filter (¬∑ ‚â† ‚àÖ) ‚àà partitions t := by
  refine ‚ü®?_, ?_, ?_, ?_‚ü©
  ¬∑ intro _ h
    obtain ‚ü®_, _, hp‚ü© := Finset.mem_image.mp (Finset.mem_filter.mp h).1
    simp [‚Üê hp]
  ¬∑ intro r hr
    obtain ‚ü®p, hp, hp'‚ü© := Finset.mem_image.mp (Finset.mem_filter.mp hr).1
    rw [‚Üê hp']
    exact MeasurableSet.inter (hs.2.1 p hp) ht
  ¬∑ intro _ hr _ hr'
    obtain ‚ü®p, hp, hp'‚ü© := Finset.mem_image.mp (Finset.mem_filter.mp hr).1
    obtain ‚ü®q, hq, hq'‚ü© := Finset.mem_image.mp (Finset.mem_filter.mp hr').1
    rw [‚Üê hp', ‚Üê hq']
    intro hpqt
    have hpq : p ‚â† q := fun h ‚Ü¶ hpqt (congrFun (congrArg Inter.inter h) t)
    intro a ha ha'
    have hap : a ‚â§ p := by
      simp only [id_eq, Set.le_eq_subset, Set.subset_inter_iff] at ha
      exact ha.1
    have haq : a ‚â§ q := by
      simp only [id_eq, Set.le_eq_subset, Set.subset_inter_iff] at ha'
      exact ha'.1
    exact hs.2.2.1 hp hq hpq hap haq
  ¬∑ intro _ hp
    exact (Finset.mem_filter.mp hp).2

/-!
## Definition of variation
-/

/-- Given a partition `E` of a set `s`, this returns the sum of the norm of the measure of the
elements of that partition. -/
private noncomputable def varOfPart (P : Finset (Set X)) := ‚àë p ‚àà P, ‚ÄñŒº p‚Äñ‚Çë

open Classical in
/-- The variation of a measure is defined as the supremum over all partitions of the sum of the norm
of the measure of each partition element. -/
noncomputable def variation_aux (s : Set X) :=
    if (MeasurableSet s) then ‚®Ü P ‚àà partitions s, varOfPart Œº P else 0

/-- `variation_aux` of the empty set is equal to zero. -/
lemma variation_empty' : variation_aux Œº ‚àÖ = 0 := by
  simp [variation_aux, varOfPart, partitions_empty]

/-- variation_aux is monotone as a function of the set. -/
lemma variation_aux_monotone {s‚ÇÅ s‚ÇÇ : Set X} (h : s‚ÇÅ ‚äÜ s‚ÇÇ) (hs‚ÇÅ : MeasurableSet s‚ÇÅ)
    (hs‚ÇÇ : MeasurableSet s‚ÇÇ) : variation_aux Œº s‚ÇÅ ‚â§ variation_aux Œº s‚ÇÇ := by
  simp only [variation_aux, hs‚ÇÅ, reduceIte, hs‚ÇÇ]
  exact iSup_le_iSup_of_subset (partitions_monotone h)

lemma variation_aux_lt {s : Set X} (hs : MeasurableSet s) {a : ‚Ñù‚â•0‚àû} (ha : a < variation_aux Œº s) :
    ‚àÉ P ‚àà partitions s, a < varOfPart Œº P := by
  simp only [variation_aux, hs, reduceIte] at ha
  exact lt_biSup_iff.mp ha

lemma variation_aux_le' {s : Set X} (hs : MeasurableSet s) {Œµ : NNReal} (hŒµ: 0 < Œµ)
    (h : variation_aux Œº s ‚â† ‚ä§) :
    ‚àÉ P ‚àà partitions s, variation_aux Œº s ‚â§ varOfPart Œº P + Œµ := by
  let Œµ' := min Œµ (variation_aux Œº s).toNNReal
  have hŒµ1 : Œµ' ‚â§ variation_aux Œº s := by simp_all [Œµ']
  have _ : Œµ' ‚â§ Œµ := by simp_all [Œµ']
  obtain hw | hw : variation_aux Œº s ‚â† 0 ‚à® variation_aux Œº s = 0 := ne_or_eq _ _
  ¬∑ have : 0 < Œµ' := by
      simp only [lt_inf_iff, Œµ']
      exact ‚ü®hŒµ, toNNReal_pos hw h‚ü©
    let a := variation_aux Œº s - Œµ'
    have ha : a < variation_aux Œº s := by
      dsimp [a]
      refine ENNReal.sub_lt_self h hw (by positivity)
    have ha' : variation_aux Œº s = a + Œµ' := by
      exact Eq.symm (tsub_add_cancel_of_le hŒµ1)
    obtain ‚ü®P, hP, hP'‚ü© := variation_aux_lt Œº hs ha
    refine ‚ü®P, hP, ?_‚ü©
    calc variation_aux Œº s
      _ = a + Œµ' := ha'
      _ ‚â§ varOfPart Œº P + Œµ' := by
        exact (ENNReal.add_le_add_iff_right coe_ne_top).mpr (le_of_lt hP')
      _ ‚â§ varOfPart Œº P + Œµ := by gcongr
  ¬∑ simp_rw [hw, zero_le, and_true]
    exact ‚ü®{}, by simp, by simp [hs], by simp, by simp‚ü©

lemma le_variation_aux {s : Set X} (hs : MeasurableSet s) {P : Finset (Set X)}
    (hP : P ‚àà partitions s) : varOfPart Œº P ‚â§ variation_aux Œº s := by
  simp only [variation_aux, hs, reduceIte]
  exact le_biSup (varOfPart Œº) hP

open Classical in
/-- Given a partition `Q`, `varOfPart Œº Q` is bounded by the sum of the `varOfPart Œº (P i)` where
the `P i` are the partitions formed by restricting to a disjoint set of sets `s i`. -/
lemma varOfPart_le_tsum {s : ‚Ñï ‚Üí Set X} (hs : ‚àÄ i, MeasurableSet (s i))
    (hs' : Pairwise (Disjoint on s)) {Q : Finset (Set X)} (hQ : Q ‚àà partitions (‚ãÉ i, s i)) :
    varOfPart Œº Q ‚â§ ‚àë' i, varOfPart Œº ({x ‚àà Finset.image (fun q ‚Ü¶ q ‚à© s i) Q | x ‚â† ‚àÖ}) := by
  let P (i : ‚Ñï) := (Q.image (fun q ‚Ü¶ q ‚à© (s i))).filter (¬∑ ‚â† ‚àÖ)
  calc
    _ = ‚àë q ‚àà Q, ‚ÄñŒº q‚Äñ‚Çë := by simp [varOfPart]
    _ = ‚àë q ‚àà Q, ‚ÄñŒº (‚ãÉ i, q ‚à© s i)‚Äñ‚Çë := ?_
    _ ‚â§ ‚àë q ‚àà Q, ‚àë' i, ‚ÄñŒº (q ‚à© s i)‚Äñ‚Çë := ?_
    _ = ‚àë' i, ‚àë q ‚àà Q, ‚ÄñŒº (q ‚à© s i)‚Äñ‚Çë := ?_
    _ ‚â§ ‚àë' i, ‚àë p ‚àà (P i), ‚ÄñŒº p‚Äñ‚Çë := ?_
    _ = ‚àë' i, (varOfPart Œº (P i)) := by simp [varOfPart]
  ¬∑ -- Each `q` is equal to the union of `q ‚à© s i`.
    suffices h : ‚àÄ q ‚àà Q, q = ‚ãÉ i, q ‚à© s i by
      refine Finset.sum_congr rfl (fun q hq ‚Ü¶ ?_)
      simp_rw [‚Üê h q hq]
    intro q hq
    ext x
    constructor
    ¬∑ intro hx
      obtain ‚ü®_, hs‚ü© := (hQ.1 q hq) hx
      obtain ‚ü®i, _‚ü© := Set.mem_range.mp hs.1
      simp_all [Set.mem_iUnion_of_mem i]
    ¬∑ intro _
      simp_all
  ¬∑ -- Additivity of the measure since the `s i` are pairwise disjoint.
    gcongr with p hp
    have : Œº (‚ãÉ i, p ‚à© s i) = ‚àë' i, Œº (p ‚à© s i) := by
      have hps : ‚àÄ i, MeasurableSet (p ‚à© s i) := by
        intro i
        refine MeasurableSet.inter (hQ.2.1 p hp) (hs i)
      have hps' : Pairwise (Disjoint on fun i ‚Ü¶ p ‚à© s i) := by
        refine (Symmetric.pairwise_on (fun ‚¶Éx y‚¶Ñ a ‚Ü¶ Disjoint.symm a) fun i ‚Ü¶ p ‚à© s i).mpr ?_
        intro _ _ _
        refine Disjoint.inter_left' p (Disjoint.inter_right' p ?_)
        exact hs' (by omega)
      exact VectorMeasure.of_disjoint_iUnion hps hps'
    rw [this]
    exact enorm_tsum_le_tsum_enorm
  ¬∑ -- Swapping the order of the sum.
    refine Eq.symm (Summable.tsum_finsetSum (fun _ _ ‚Ü¶ ENNReal.summable))
  ¬∑ -- By defintion of the restricted partition
    refine ENNReal.tsum_le_tsum ?_
    intro i
    calc ‚àë q ‚àà Q, ‚ÄñŒº (q ‚à© s i)‚Äñ‚Çë
      _ = ‚àë p ‚àà (Finset.image (fun q ‚Ü¶ q ‚à© s i) Q), ‚ÄñŒº p‚Äñ‚Çë := by
        refine Eq.symm (Finset.sum_image_of_disjoint ?_ ?_)
        ¬∑ simp
        ¬∑ intro p hp q hq hpq
          refine Disjoint.inter_left (s i) (Disjoint.inter_right (s i) ?_)
          exact hQ.2.2.1 hp hq hpq
      _ ‚â§  ‚àë p ‚àà P i, ‚ÄñŒº p‚Äñ‚Çë := by
        refine Finset.sum_le_sum_of_ne_zero ?_
        intro p hp hp'
        dsimp [P]
        obtain hc | hc : p = ‚àÖ ‚à® ¬¨p = ‚àÖ := eq_or_ne p ‚àÖ
        ¬∑ simp [hc] at hp'
        ¬∑ rw [Finset.mem_filter, Finset.mem_image]
          refine ‚ü®?_, hc‚ü©
          obtain ‚ü®q, _, _‚ü© := Finset.mem_image.mp hp
          use q

/-- Aditivity of `variation_aux` for disjoint measurable sets. -/
lemma variation_m_iUnion' (s : ‚Ñï ‚Üí Set X) (hs : ‚àÄ i, MeasurableSet (s i))
    (hs' : Pairwise (Disjoint on s)) :
    HasSum (fun i ‚Ü¶ variation_aux Œº (s i)) (variation_aux Œº (‚ãÉ i, s i)) := by
  rw [ENNReal.hasSum_iff_bounds_nat]
  constructor
  ¬∑ -- The sum of `variation_aux Œº (s i)` is le `variation_aux Œº (‚ãÉ i, s i)`.
    intro n
    wlog hn : n ‚â† 0
    ¬∑ simp [show n = 0 by omega]
    apply ENNReal.le_of_forall_pos_le_add
    intro Œµ' hŒµ' hsnetop
    let Œµ := Œµ' / n
    have hŒµ : 0 < Œµ := by positivity
    have hs'' i : variation_aux Œº (s i) ‚â† ‚ä§ := by
      have : s i ‚äÜ ‚ãÉ i, s i := Set.subset_iUnion_of_subset i fun ‚¶Éa‚¶Ñ a ‚Ü¶ a
      have := variation_aux_monotone Œº this (hs i) (MeasurableSet.iUnion hs)
      exact lt_top_iff_ne_top.mp <| lt_of_le_of_lt this hsnetop
    -- For each set `s i` we choose a partition `P i` such that, for each `i`,
    -- `variation_aux Œº (s i) ‚â§ varOfPart Œº (P i) + Œµ`.
    choose P hP using fun i ‚Ü¶ variation_aux_le' Œº (hs i) (hŒµ) (hs'' i)
    calc ‚àë i ‚àà Finset.range n, variation_aux Œº (s i)
      _ ‚â§ ‚àë i ‚àà Finset.range n, (varOfPart Œº (P i) + Œµ) := by
        gcongr with i hi
        exact (hP i).2
      _ = ‚àë i ‚àà Finset.range n, varOfPart Œº (P i) + Œµ' := by
        rw [Finset.sum_add_distrib]
        norm_cast
        simp [show n * Œµ = Œµ' by rw [mul_div_cancel‚ÇÄ _ (by positivity)]]
      _ ‚â§ variation_aux Œº (‚ãÉ i, s i) + Œµ' := by
        -- Since the union of the partitions `P i` is a partition of `‚ãÉ i, s i`, we know that
        -- `‚àë' i, varOfPart Œº (E i) ‚â§ variation_aux Œº (‚ãÉ i, s i)`.
        suffices h : ‚àë i ‚àà Finset.range n, varOfPart Œº (P i) ‚â§ variation_aux Œº (‚ãÉ i, s i) by gcongr
        classical
        let Q := Finset.biUnion (Finset.range n) P
        have hQ : Q ‚àà partitions (‚ãÉ i, s i) := partition_union hs' (fun i ‚Ü¶ (hP i).1) n
        calc
          _ = ‚àë i ‚àà Finset.range n, ‚àë p ‚àà P i, ‚ÄñŒº p‚Äñ‚Çë := by simp [varOfPart]
          _ = ‚àë q ‚àà Q, ‚ÄñŒº q‚Äñ‚Çë := by
            refine Eq.symm (Finset.sum_biUnion ?_)
            intro l _ m _ hlm
            exact partitions_disjoint (hs' hlm) (hP l).1 (hP m).1
          _ ‚â§ variation_aux Œº (‚ãÉ i, s i) := by
            have := le_variation_aux Œº (MeasurableSet.iUnion hs) hQ
            simpa
  ¬∑ -- Variation of the union, `variation_aux Œº (‚ãÉ i, s i)` le the sum of `variation_aux Œº (s i)`.
    intro b hb
    -- simp only [variation_aux, hs, reduceIte]
    simp only [variation_aux, MeasurableSet.iUnion hs, reduceIte] at hb
    obtain ‚ü®Q, hQ, hbQ‚ü© := lt_biSup_iff.mp hb
    -- Take the partitions defined as intersection of `Q` and `s i`.
    classical
    let P (i : ‚Ñï) := (Q.image (fun q ‚Ü¶ q ‚à© (s i))).filter (¬∑ ‚â† ‚àÖ)
    have hP (i : ‚Ñï) : P i ‚àà partitions (s i) := partition_restrict hQ (hs i)
    have hP' := calc
      b < varOfPart Œº Q := hbQ
      _ ‚â§ ‚àë' i, varOfPart Œº (P i) := by exact varOfPart_le_tsum Œº hs hs' hQ
    have := tendsto_nat_tsum fun i ‚Ü¶ VectorMeasure.varOfPart Œº (P i)
    obtain ‚ü®n, hn, hn'‚ü© := (((tendsto_order.mp this).1 b hP').and (Ici_mem_atTop 1)).exists
    use n
    calc
      b < ‚àë i ‚àà Finset.range n, varOfPart Œº (P i) := hn
      _ ‚â§ ‚àë i ‚àà Finset.range n, variation_aux Œº (s i) := by
        gcongr with i hi
        exact le_variation_aux Œº (hs i) (hP i)

/-- The variation of a vector-valued measure as a `VectorMeasure`. -/
noncomputable def variation : VectorMeasure X ‚Ñù‚â•0‚àû where
  measureOf'          := variation_aux Œº
  empty'              := variation_empty' Œº
  not_measurable' _ h := if_neg h
  m_iUnion'           := variation_m_iUnion' Œº

end VectorMeasure

/-!
## Section : properties of variation
-/

namespace VectorMeasure
variable {X V ùïú : Type*} [MeasurableSpace X] [NormedAddCommGroup V] [NormedField ùïú]
  [NormedSpace ùïú V]

theorem norm_measure_le_variation (Œº : VectorMeasure X V) (E : Set X) : ‚ÄñŒº E‚Äñ‚Çë ‚â§ variation Œº E := by
  wlog hE' : E ‚â† ‚àÖ
  ¬∑ push_neg at hE'
    simp [hE', varOfPart, partitions_empty]
  by_cases hE : MeasurableSet E
  ¬∑ have h : {E} ‚àà partitions E := ‚ü®by simp, by simpa, by simp, by simpa‚ü©
    have := le_biSup (fun P ‚Ü¶ ‚àë p ‚àà P, ‚ÄñŒº p‚Äñ‚Çë) h
    simp_all [varOfPart, variation, variation_aux]
  ¬∑ simp [hE, Œº.not_measurable' hE]

end VectorMeasure
