/-
Copyright (c) 2020 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne, S√©bastien Gou√´zel
-/
import Mathlib.Analysis.NormedSpace.IndicatorFunction
import Mathlib.MeasureTheory.Function.EssSup
import Mathlib.MeasureTheory.Function.AEEqFun
import Mathlib.MeasureTheory.Integral.MeanInequalities

#align_import measure_theory.function.lp_seminorm from "leanprover-community/mathlib"@"c4015acc0a223449d44061e27ddac1835a3852b9"

section IsROrC

variable {ùïú : Type*} [IsROrC ùïú] {f : Œ± ‚Üí ùïú}

theorem Mem‚Ñíp.re (hf : Mem‚Ñíp f p Œº) : Mem‚Ñíp (fun x => IsROrC.re (f x)) p Œº := by
  have : ‚àÄ x, ‚ÄñIsROrC.re (f x)‚Äñ ‚â§ 1 * ‚Äñf x‚Äñ := by
    intro x
    rw [one_mul]
    exact IsROrC.norm_re_le_norm (f x)
  refine' hf.of_le_mul _ (eventually_of_forall this)
  exact IsROrC.continuous_re.comp_aestronglyMeasurable hf.1
#align measure_theory.mem_‚Ñíp.re MeasureTheory.Mem‚Ñíp.re

theorem Mem‚Ñíp.im (hf : Mem‚Ñíp f p Œº) : Mem‚Ñíp (fun x => IsROrC.im (f x)) p Œº := by
  have : ‚àÄ x, ‚ÄñIsROrC.im (f x)‚Äñ ‚â§ 1 * ‚Äñf x‚Äñ := by
    intro x
    rw [one_mul]
    exact IsROrC.norm_im_le_norm (f x)
  refine' hf.of_le_mul _ (eventually_of_forall this)
  exact IsROrC.continuous_im.comp_aestronglyMeasurable hf.1
#align measure_theory.mem_‚Ñíp.im MeasureTheory.Mem‚Ñíp.im

end IsROrC

section Liminf

variable [MeasurableSpace E] [OpensMeasurableSpace E] {R : ‚Ñù‚â•0}

theorem ae_bdd_liminf_atTop_rpow_of_snorm_bdd {p : ‚Ñù‚â•0‚àû} {f : ‚Ñï ‚Üí Œ± ‚Üí E}
    (hfmeas : ‚àÄ n, Measurable (f n)) (hbdd : ‚àÄ n, snorm (f n) p Œº ‚â§ R) :
    ‚àÄ·µê x ‚àÇŒº, liminf (fun n => ((‚Äñf n x‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ^ p.toReal : ‚Ñù‚â•0‚àû)) atTop < ‚àû := by
  by_cases hp0 : p.toReal = 0
  ¬∑ simp only [hp0, ENNReal.rpow_zero]
    refine' eventually_of_forall fun x => _
    rw [liminf_const (1 : ‚Ñù‚â•0‚àû)]
    exact ENNReal.one_lt_top
  have hp : p ‚â† 0 := fun h => by simp [h] at hp0
  have hp' : p ‚â† ‚àû := fun h => by simp [h] at hp0
  refine'
    ae_lt_top (measurable_liminf fun n => (hfmeas n).nnnorm.coe_nnreal_ennreal.pow_const p.toReal)
      (lt_of_le_of_lt
          (lintegral_liminf_le fun n => (hfmeas n).nnnorm.coe_nnreal_ennreal.pow_const p.toReal)
          (lt_of_le_of_lt _
            (ENNReal.rpow_lt_top_of_nonneg ENNReal.toReal_nonneg ENNReal.coe_ne_top :
              (R : ‚Ñù‚â•0‚àû) ^ p.toReal < ‚àû))).ne
  simp_rw [snorm_eq_lintegral_rpow_nnnorm hp hp'] at hbdd
  simp_rw [liminf_eq, eventually_atTop]
  exact
    sSup_le fun b ‚ü®a, ha‚ü© =>
      (ha a le_rfl).trans ((ENNReal.rpow_one_div_le_iff (ENNReal.toReal_pos hp hp')).1 (hbdd _))
#align measure_theory.ae_bdd_liminf_at_top_rpow_of_snorm_bdd MeasureTheory.ae_bdd_liminf_atTop_rpow_of_snorm_bdd

theorem ae_bdd_liminf_atTop_of_snorm_bdd {p : ‚Ñù‚â•0‚àû} (hp : p ‚â† 0) {f : ‚Ñï ‚Üí Œ± ‚Üí E}
    (hfmeas : ‚àÄ n, Measurable (f n)) (hbdd : ‚àÄ n, snorm (f n) p Œº ‚â§ R) :
    ‚àÄ·µê x ‚àÇŒº, liminf (fun n => (‚Äñf n x‚Äñ‚Çä : ‚Ñù‚â•0‚àû)) atTop < ‚àû := by
  by_cases hp' : p = ‚àû
  ¬∑ subst hp'
    simp_rw [snorm_exponent_top] at hbdd
    have : ‚àÄ n, ‚àÄ·µê x ‚àÇŒº, (‚Äñf n x‚Äñ‚Çä : ‚Ñù‚â•0‚àû) < R + 1 := fun n =>
      ae_lt_of_essSup_lt
        (lt_of_le_of_lt (hbdd n) <| ENNReal.lt_add_right ENNReal.coe_ne_top one_ne_zero)
    rw [‚Üê ae_all_iff] at this
    filter_upwards [this] with x hx using lt_of_le_of_lt
        (liminf_le_of_frequently_le' <| frequently_of_forall fun n => (hx n).le)
        (ENNReal.add_lt_top.2 ‚ü®ENNReal.coe_lt_top, ENNReal.one_lt_top‚ü©)
  filter_upwards [ae_bdd_liminf_atTop_rpow_of_snorm_bdd hfmeas hbdd] with x hx
  have hppos : 0 < p.toReal := ENNReal.toReal_pos hp hp'
  have :
    liminf (fun n => (‚Äñf n x‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ^ p.toReal) atTop =
      liminf (fun n => (‚Äñf n x‚Äñ‚Çä : ‚Ñù‚â•0‚àû)) atTop ^ p.toReal := by
    change
      liminf (fun n => ENNReal.orderIsoRpow p.toReal hppos (‚Äñf n x‚Äñ‚Çä : ‚Ñù‚â•0‚àû)) atTop =
        ENNReal.orderIsoRpow p.toReal hppos (liminf (fun n => (‚Äñf n x‚Äñ‚Çä : ‚Ñù‚â•0‚àû)) atTop)
    refine' (OrderIso.liminf_apply (ENNReal.orderIsoRpow p.toReal _) _ _ _ _).symm <;>
      isBoundedDefault
  rw [this] at hx
  rw [‚Üê ENNReal.rpow_one (liminf (fun n => ‚Äñf n x‚Äñ‚Çä) atTop), ‚Üê mul_inv_cancel hppos.ne.symm,
    ENNReal.rpow_mul]
  exact ENNReal.rpow_lt_top_of_nonneg (inv_nonneg.2 hppos.le) hx.ne
#align measure_theory.ae_bdd_liminf_at_top_of_snorm_bdd MeasureTheory.ae_bdd_liminf_atTop_of_snorm_bdd

end Liminf

/-- A continuous function with compact support belongs to `L^‚àû`. -/
theorem _root_.Continuous.mem‚Ñíp_top_of_hasCompactSupport
    {X : Type*} [TopologicalSpace X] [MeasurableSpace X] [OpensMeasurableSpace X]
    {f : X ‚Üí E} (hf : Continuous f) (h'f : HasCompactSupport f) (Œº : Measure X) : Mem‚Ñíp f ‚ä§ Œº := by
  borelize E
  rcases hf.bounded_above_of_compact_support h'f with ‚ü®C, hC‚ü©
  apply mem‚Ñíp_top_of_bound ?_ C (Filter.eventually_of_forall hC)
  exact (hf.stronglyMeasurable_of_hasCompactSupport h'f).aestronglyMeasurable

end ‚Ñíp

end MeasureTheory
