/-
Copyright (c) 2025 Etienne Marion. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Etienne Marion
-/
import Mathlib.MeasureTheory.Constructions.Polish.Basic
import Mathlib.Probability.Process.Filtration
import Mathlib.MeasureTheory.Constructions.Polish.EmbeddingReal

/-!
# Factorization of a map from measurability

Consider `f : X ‚Üí Y` and `g : X ‚Üí Z` and assume that `g` is measurable with respect to the pullback
along `f`. Then `g` factors though `f`, which means that there exists `h : Y ‚Üí Z` such that
`g = h ‚àò f`.

Under certain assumptions, the factorization map `h` is measurable. This is the content of the
[Doob-Dynkin lemma](https://en.wikipedia.org/wiki/Doob‚ÄìDynkin_lemma):
see `exists_eq_measurable_comp`.
-/

namespace MeasureTheory

open Filter Filtration Set TopologicalSpace

open scoped Topology

variable {X Y Z : Type*} [mY : MeasurableSpace Y] {f : X ‚Üí Y} {g : X ‚Üí Z}

section FactorsThrough

/-- If a function `g` is measurable with respect to the pullback along some function `f`,
then to prove `g x = g y` it is enough to prove `f x = f y`. -/
theorem _root_.Measurable.factorsThrough [MeasurableSpace Z] [MeasurableSingletonClass Z]
    (hg : Measurable[mY.comap f] g) : g.FactorsThrough f := by
  refine fun x‚ÇÅ x‚ÇÇ h ‚Ü¶ eq_of_mem_singleton ?_
  obtain ‚ü®s, -, hs‚ü© := hg (measurableSet_singleton (g x‚ÇÇ))
  rw [‚Üê mem_preimage, ‚Üê hs, mem_preimage, h, ‚Üê mem_preimage, hs]
  rfl

/-- If a function `g` is strongly measurable with respect to the pullback along some function `f`,
then to prove `g x = g y` it is enough to prove `f x = f y`.

Under certain assumptions, the factorization map `h` is measurable
(see `exists_eq_measurable_comp`). -/
theorem StronglyMeasurable.factorsThrough [TopologicalSpace Z]
    [PseudoMetrizableSpace Z] [T1Space Z] (hg : StronglyMeasurable[mY.comap f] g) :
    g.FactorsThrough f := by
  borelize Z
  exact hg.measurable.factorsThrough

variable {Œπ : Type*} [MetricSpace Z] [CompleteSpace Z] [Countable Œπ] {l : Filter Œπ}
  [l.IsCountablyGenerated] {f : Œπ ‚Üí X ‚Üí Z}

theorem StronglyMeasurable.measurableSet_exists_tendsto [MeasurableSpace X]
    (hf : ‚àÄ i, StronglyMeasurable (f i)) :
    MeasurableSet {x | ‚àÉ c, Tendsto (f ¬∑ x) l (ùìù c)} := by
  by_cases hl : l.NeBot
  swap; ¬∑ simp_all
  let s := closure (‚ãÉ i, range (f i))
  have : PolishSpace s :=
    { toSecondCountableTopology := @UniformSpace.secondCountable_of_separable s _ _
        (IsSeparable.iUnion (fun i ‚Ü¶ (hf i).isSeparable_range)).closure.separableSpace
      complete := ‚ü®inferInstance, rfl, isClosed_closure.completeSpace_coe‚ü© }
  let g i x : s := ‚ü®f i x, subset_closure <| Set.mem_iUnion.2 ‚ü®i, ‚ü®x, rfl‚ü©‚ü©‚ü©
  borelize Z
  have mg i : Measurable (g i) := (hf i).measurable.subtype_mk
  convert MeasureTheory.measurableSet_exists_tendsto mg with x
  ¬∑ refine ‚ü®fun ‚ü®c, hc‚ü© ‚Ü¶ ‚ü®‚ü®c, ?_‚ü©, tendsto_subtype_rng.2 hc‚ü©,
      fun ‚ü®c, hc‚ü© ‚Ü¶ ‚ü®c, tendsto_subtype_rng.1 hc‚ü©‚ü©
    exact mem_closure_of_tendsto hc (Eventually.of_forall fun i ‚Ü¶ Set.mem_iUnion.2 ‚ü®i, ‚ü®x, rfl‚ü©‚ü©)
  infer_instance

theorem stronglyMeasurable_limUnder [MeasurableSpace X] [hZ : Nonempty Z]
    (hf : ‚àÄ i, StronglyMeasurable (f i)) :
    StronglyMeasurable (fun x ‚Ü¶ limUnder l (f ¬∑ x)) := by
  obtain rfl | hl := eq_or_neBot l
  ¬∑ simp only [limUnder, Filter.map_bot]
    exact stronglyMeasurable_const
  borelize Z
  let z_ := Classical.choice hZ
  rw [stronglyMeasurable_iff_measurable_separable]; constructor
  ¬∑ let conv := {x | ‚àÉ c, Tendsto (f ¬∑ x) l (ùìù c)}
    have mconv : MeasurableSet conv := StronglyMeasurable.measurableSet_exists_tendsto hf
    have : (fun x ‚Ü¶ limUnder l (f ¬∑ x)) = ((‚Üë) : conv ‚Üí X).extend
        (fun x : conv ‚Ü¶ limUnder l (f ¬∑ x)) (fun _ ‚Ü¶ z_) := by
      ext x
      by_cases hx : x ‚àà conv
      ¬∑ rw [Function.extend_val_apply hx]
      ¬∑ rw [Function.extend_val_apply' hx, limUnder_of_not_tendsto hx]
    rw [this]
    refine (MeasurableEmbedding.subtype_coe mconv).measurable_extend ?_ measurable_const
    refine measurable_of_tendsto_metrizable' l
      (fun i ‚Ü¶ (hf i).measurable.comp measurable_subtype_coe)
      (tendsto_pi_nhds.2 fun ‚ü®x, ‚ü®c, hc‚ü©‚ü© ‚Ü¶ ?_)
    rwa [hc.limUnder_eq]
  ¬∑ let s := closure (‚ãÉ i, range (f i)) ‚à™ {z_}
    have hs : IsSeparable s := (IsSeparable.iUnion (fun i ‚Ü¶ (hf i).isSeparable_range)).closure.union
      (finite_singleton z_).isSeparable
    refine hs.mono ?_
    rintro - ‚ü®x, rfl‚ü©
    by_cases hx : ‚àÉ c, Tendsto (f ¬∑ x) l (ùìù c)
    ¬∑ obtain ‚ü®c, hc‚ü© := hx
      simp_rw [hc.limUnder_eq]
      exact subset_union_left <| mem_closure_of_tendsto hc
        (Eventually.of_forall fun i ‚Ü¶ Set.mem_iUnion.2 ‚ü®i, ‚ü®x, rfl‚ü©‚ü©)
    ¬∑ simp_rw [limUnder_of_not_tendsto hx]
      exact subset_union_right (mem_singleton z_)

/-- If a function `g` is strongly measurable with respect to the pullback along some function `f`,
then there exists some measurable function `h : Y ‚Üí Z` such that `g = h ‚àò f`. -/
theorem exists_eq_measurable_comp {Z : Type*} [Nonempty Z] [MeasurableSpace Z]
    [StandardBorelSpace Z]
    {f :  X ‚Üí Y} {g : X ‚Üí Z} (hg : Measurable[mY.comap f] g) :
    ‚àÉ h : Y ‚Üí Z, Measurable h ‚àß g = h ‚àò f := by
  obtain ‚ü®T, _, _, _, _, _, _, h‚ü© : ‚àÉ (T : Type) (_ : TopologicalSpace T) (_ : MeasurableSpace T)
    (_ : AddZeroClass T), PolishSpace T ‚àß ContinuousAdd T ‚àß BorelSpace T ‚àß Nonempty (Z ‚âÉ·µê T) := by
    by_cases hZ : Countable Z
    ¬∑ cases finite_or_infinite Z
      ¬∑ let œÜ := PolishSpace.Equiv.measurableEquiv (Finite.equivFin Z)
        have : NeZero (Nat.card Z) := ‚ü®Nat.card_pos.ne'‚ü©
        refine ‚ü®Fin (Nat.card Z), inferInstance, inferInstance, inferInstance, inferInstance,
          inferInstance, inferInstance, ‚ü®œÜ‚ü©‚ü©
      ¬∑ let œÜ : Z ‚âÉ·µê ‚Ñï := PolishSpace.Equiv.measurableEquiv
          (Classical.choice nonempty_equiv_of_countable)
        refine ‚ü®‚Ñï, inferInstance, inferInstance, inferInstance, inferInstance,
          inferInstance, inferInstance, ‚ü®œÜ‚ü©‚ü©
    ¬∑ let œÜ : Z ‚âÉ·µê ‚Ñù := PolishSpace.measurableEquivOfNotCountable hZ
        (Set.countable_univ_iff.not.1 Cardinal.not_countable_real)
      refine
        ‚ü®‚Ñù, inferInstance, inferInstance, inferInstance, inferInstance,
          inferInstance, inferInstance, ‚ü®œÜ‚ü©‚ü©
  let mX : MeasurableSpace X := mY.comap f
  let œÜ := Classical.choice h
  borelize T
  have : StronglyMeasurable (œÜ ‚àò g) := œÜ.measurable.comp hg |>.stronglyMeasurable
  suffices ‚àÉ h : Y ‚Üí T, Measurable h ‚àß œÜ ‚àò g = h ‚àò f by
    obtain ‚ü®h, mh, hh‚ü© := this
    refine ‚ü®œÜ.symm ‚àò h, œÜ.symm.measurable.comp mh, ?_‚ü©
    rw [Function.comp_assoc, ‚Üê hh, ‚Üê Function.comp_assoc, œÜ.symm_comp_self, Function.id_comp]
  refine this.induction (fun g ‚Ü¶ ‚àÉ h : Y ‚Üí T, Measurable h ‚àß g = h ‚àò f)
    (fun c s hs ‚Ü¶ ?_) ?_ ?_ (œÜ ‚àò g)
  ¬∑ obtain ‚ü®t, ht, rfl‚ü© := hs
    exact ‚ü®t.indicator fun _ ‚Ü¶ c, measurable_const.indicator ht, rfl‚ü©
  ¬∑ rintro - - - - - ‚ü®h‚ÇÅ, mh‚ÇÅ, rfl‚ü© ‚ü®h‚ÇÇ, mh‚ÇÇ, rfl‚ü©
    exact ‚ü®h‚ÇÅ + h‚ÇÇ, mh‚ÇÅ.add mh‚ÇÇ, rfl‚ü©
  ¬∑ intro g h mg h_ind mh h_lim
    choose i mi hi using h_ind
    letI := upgradePolishSpace T
    refine ‚ü®fun y ‚Ü¶ limUnder atTop (i ¬∑ y),
      stronglyMeasurable_limUnder (fun n ‚Ü¶ (mi n).stronglyMeasurable) |>.measurable, ?_‚ü©
    ext x
    rw [Function.comp_apply, Tendsto.limUnder_eq]
    simp_all

theorem exists_eq_measurable_comp' [hZ : Nonempty Z]
    {f :  X ‚Üí Y} {g : X ‚Üí Z} (hg : StronglyMeasurable[mY.comap f] g) :
    ‚àÉ h : Y ‚Üí Z, StronglyMeasurable h ‚àß g = h ‚àò f := by
  obtain _ | hX := isEmpty_or_nonempty X
  ¬∑ exact ‚ü®fun _ ‚Ü¶ Classical.choice hZ, stronglyMeasurable_const, funext fun x ‚Ü¶ isEmptyElim x‚ü©
  let mX : MeasurableSpace X := mY.comap f
  borelize Z
  let s := closure (range g)
  have : PolishSpace s :=
    { toSecondCountableTopology := @UniformSpace.secondCountable_of_separable s _ _
        hg.isSeparable_range.closure.separableSpace
      complete := ‚ü®inferInstance, rfl, isClosed_closure.completeSpace_coe‚ü© }
  letI := upgradeStandardBorel s
  let j : X ‚Üí s := fun x ‚Ü¶ ‚ü®g x, subset_closure ‚ü®x, rfl‚ü©‚ü©
  have : Measurable j := hg.measurable.subtype_mk
  have _ : Nonempty s := ‚ü®j (Classical.choice hX)‚ü©
  obtain ‚ü®h, mh, hh‚ü© := exists_eq_measurable_comp this
  refine ‚ü®Subtype.val ‚àò h, stronglyMeasurable_iff_measurable_separable.2
    ‚ü®measurable_subtype_coe.comp mh, (IsSeparable.of_subtype s).mono fun y ‚ü®x, hy‚ü© ‚Ü¶ hy ‚ñ∏ (h x).2‚ü©,
    funext fun _ ‚Ü¶ ?_‚ü©
  rw [Function.comp_assoc, ‚Üê hh]; rfl

end FactorsThrough

variable {Œπ : Type*} {X : Œπ ‚Üí Type*} [‚àÄ i, MeasurableSpace (X i)] {f : (Œ† i, X i) ‚Üí Z}

section piLE

variable [Preorder Œπ] {i : Œπ}

/-- If a function is measurable with respect to the œÉ-algebra generated by the
first coordinates, then it only depends on those first coordinates. -/
theorem _root_.Measurable.dependsOn_of_piLE [MeasurableSpace Z] [MeasurableSingletonClass Z]
    (hf : Measurable[piLE i] f) : DependsOn f (Iic i) :=
  dependsOn_iff_factorsThrough.2 hf.factorsThrough

/-- If a function is strongly measurable with respect to the œÉ-algebra generated by the
first coordinates, then it only depends on those first coordinates. -/
theorem StronglyMeasurable.dependsOn_of_piLE [TopologicalSpace Z] [PseudoMetrizableSpace Z]
    [T1Space Z] (hf : StronglyMeasurable[piLE i] f) : DependsOn f (Iic i) :=
  dependsOn_iff_factorsThrough.2 hf.factorsThrough

end piLE

section piFinset

variable {s : Finset Œπ}

/-- If a function is measurable with respect to the œÉ-algebra generated by the
first coordinates, then it only depends on those first coordinates. -/
theorem _root_.Measurable.dependsOn_of_piFinset [MeasurableSpace Z] [MeasurableSingletonClass Z]
    (hf : Measurable[piFinset s] f) : DependsOn f s :=
  dependsOn_iff_factorsThrough.2 hf.factorsThrough

/-- If a function is strongly measurable with respect to the œÉ-algebra generated by the
first coordinates, then it only depends on those first coordinates. -/
theorem StronglyMeasurable.dependsOn_of_piFinset [TopologicalSpace Z] [PseudoMetrizableSpace Z]
    [T1Space Z] (hf : StronglyMeasurable[piFinset s] f) : DependsOn f s :=
  dependsOn_iff_factorsThrough.2 hf.factorsThrough

end piFinset

end MeasureTheory
