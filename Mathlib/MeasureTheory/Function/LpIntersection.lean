/-
Copyright (c) 2025 Jack Valmadre. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jack Valmadre
-/
import Mathlib.MeasureTheory.Function.ConvergenceInMeasure

open MeasureTheory Filter
open scoped ENNReal

/-! # Intersection of multiple `L^p` spaces -/

section Intersection

-- @[to_additive]
-- def Subsemigroup.inf_fst {M : Type*} [Monoid M] {s t : Subsemigroup M} : ‚Üë(s ‚äì t) ‚Üí‚Çô* s where
--   toFun x := ‚ü®x.1, x.2.1‚ü©
--   map_mul' _ _ := rfl

-- @[to_additive]
-- def Subsemigroup.inf_snd {M : Type*} [Monoid M] {s t : Subsemigroup M} : ‚Üë(s ‚äì t) ‚Üí‚Çô* t where
--   toFun x := ‚ü®x.1, x.2.2‚ü©
--   map_mul' _ _ := rfl

-- @[to_additive]
-- def Submonoid.inf_fst {M : Type*} [Monoid M] {s t : Submonoid M} : ‚Üë(s ‚äì t) ‚Üí* s :=
--   { Subsemigroup.inf_fst with map_one' := rfl }

-- @[to_additive]
-- def Submonoid.inf_snd {M : Type*} [Monoid M] {s t : Submonoid M} : ‚Üë(s ‚äì t) ‚Üí* t :=
--   { Subsemigroup.inf_snd with map_one' := rfl }

section Subgroup

variable {G : Type*} [Group G] {s t : Subgroup G}

@[to_additive]
def Subgroup.inf_fst : ‚Üë(s ‚äì t) ‚Üí* s :=
  -- Submonoid.inf_fst
  { toFun x := ‚ü®x.1, x.2.1‚ü©, map_one' := rfl, map_mul' _ _ := rfl }

@[to_additive]
def Subgroup.inf_snd : ‚Üë(s ‚äì t) ‚Üí* t :=
  -- Submonoid.inf_snd
  { toFun x := ‚ü®x.1, x.2.2‚ü©, map_one' := rfl, map_mul' _ _ := rfl }

@[to_additive (attr := simp)]
def Subgroup.inf_fst_val (x : ‚Üë(s ‚äì t)) : (inf_fst x).val = x.val := rfl

@[to_additive (attr := simp)]
def Subgroup.inf_snd_val (x : ‚Üë(s ‚äì t)) : (inf_snd x).val = x.val := rfl

@[to_additive (attr := simp)]
theorem Subgroup.inf_fst_eq_one_iff (x : ‚Üë(s ‚äì t)) : inf_fst x = 1 ‚Üî x = 1 := by
  simp only [Subtype.ext_iff_val]
  simp

@[to_additive (attr := simp)]
theorem Subgroup.inf_snd_eq_one_iff (x : ‚Üë(s ‚äì t)) : inf_snd x = 1 ‚Üî x = 1 := by
  simp only [Subtype.ext_iff_val]
  simp

end Subgroup

end Intersection


section LpInf

namespace MeasureTheory

variable {ùïú Œ± E : Type*} [MeasurableSpace Œ±] [NormedAddCommGroup E]
  [NormedField ùïú] [NormedSpace ùïú E] {p q : ‚Ñù‚â•0‚àû} {p‚ÇÅ p‚ÇÇ q‚ÇÅ q‚ÇÅ : ‚Ñù‚â•0‚àû} {Œº : Measure Œ±}

noncomputable instance Lp.instInfCoeFun : CoeFun ‚Üë(Lp E p Œº ‚äì Lp E q Œº) (fun _ ‚Ü¶ Œ± ‚Üí E) where
  coe f := f

instance Lp.instInfModule : Module ùïú ‚Üë(Lp E p Œº ‚äì Lp E q Œº) :=
  (Lp.LpSubmodule E p Œº ùïú ‚äì Lp.LpSubmodule E q Œº ùïú).module

theorem Lp.coeFn_smul_inf (c : ùïú) (f : ‚Üë(Lp E p Œº ‚äì Lp E q Œº)) : ‚áë(c ‚Ä¢ f) =·µê[Œº] c ‚Ä¢ ‚áëf :=
  AEEqFun.coeFn_smul c f.1

variable (E p‚ÇÅ p‚ÇÇ Œº) in
noncomputable def Lp.norm_inf_fst [Fact (1 ‚â§ p‚ÇÅ)] :
    AddGroupNorm ‚Üë(Lp E p‚ÇÅ Œº ‚äì Lp E p‚ÇÇ Œº) :=
  { toFun f := ‚ÄñAddSubgroup.inf_fst f‚Äñ
    map_zero' := by simp
    add_le' f g := norm_add_le (AddSubgroup.inf_fst f) (AddSubgroup.inf_fst g)
    neg' f := by simp
    eq_zero_of_map_eq_zero' f := by simp }

variable (E p‚ÇÅ p‚ÇÇ Œº) in
noncomputable def Lp.norm_inf_snd [Fact (1 ‚â§ p‚ÇÇ)] :
    AddGroupNorm ‚Üë(Lp E p‚ÇÅ Œº ‚äì Lp E p‚ÇÇ Œº) :=
  { toFun f := ‚ÄñAddSubgroup.inf_snd f‚Äñ
    map_zero' := by simp
    add_le' f g := norm_add_le (AddSubgroup.inf_snd f) (AddSubgroup.inf_snd g)
    neg' f := by simp
    eq_zero_of_map_eq_zero' f := by simp }

@[simp] theorem Lp.norm_inf_fst_apply [Fact (1 ‚â§ p‚ÇÅ)] (f : ‚Üë(Lp E p‚ÇÅ Œº ‚äì Lp E p‚ÇÇ Œº)) :
    norm_inf_fst E p‚ÇÅ p‚ÇÇ Œº f = ‚ÄñAddSubgroup.inf_fst f‚Äñ := rfl

@[simp] theorem Lp.norm_inf_snd_apply [Fact (1 ‚â§ p‚ÇÇ)] (f : ‚Üë(Lp E p‚ÇÅ Œº ‚äì Lp E p‚ÇÇ Œº)) :
    norm_inf_snd E p‚ÇÅ p‚ÇÇ Œº f = ‚ÄñAddSubgroup.inf_snd f‚Äñ := rfl

-- TODO: Move
@[simp] theorem _root_.Real.toNNReal_max (r p : ‚Ñù) :
    Real.toNNReal (r ‚äî p) = (Real.toNNReal r) ‚äî (Real.toNNReal p) := by
  cases le_or_lt r p with
  | inl h => simpa [h] using Real.toNNReal_le_toNNReal h
  | inr h => simpa [h.le] using Real.toNNReal_le_toNNReal h.le

-- TODO: Move
@[simp] theorem _root_.ENNReal.ofReal_max (r p : ‚Ñù) :
    ENNReal.ofReal (r ‚äî p) = (ENNReal.ofReal r) ‚äî (ENNReal.ofReal p) := by
  simp [ENNReal.ofReal]

-- Need this for CompleteSpace (gives UniformSpace).
noncomputable instance Lp.instInfNormedAddCommGroup [Fact (1 ‚â§ p‚ÇÅ)] [Fact (1 ‚â§ p‚ÇÇ)] :
    NormedAddCommGroup ‚Üë(Lp E p‚ÇÅ Œº ‚äì Lp E p‚ÇÇ Œº) :=
  { (Lp.norm_inf_fst E p‚ÇÅ p‚ÇÇ Œº ‚äî Lp.norm_inf_snd E p‚ÇÅ p‚ÇÇ Œº).toNormedAddCommGroup with
    edist f g :=
      edist (AddSubgroup.inf_fst f) (AddSubgroup.inf_fst g) ‚äî
      edist (AddSubgroup.inf_snd f) (AddSubgroup.inf_snd g)
    edist_dist f g := by
      -- simp [dist, Lp.edist_dist]  -- Works but slow?
      simp only [dist, AddGroupNorm.toAddGroupSeminorm_eq_coe, AddGroupNorm.sup_apply,
        norm_inf_fst_apply, norm_inf_snd_apply, map_sub, Lp.edist_dist, ENNReal.ofReal_max]
  }

theorem Lp.norm_inf_def [Fact (1 ‚â§ p‚ÇÅ)] [Fact (1 ‚â§ p‚ÇÇ)] (f : ‚Üë(Lp E p‚ÇÅ Œº ‚äì Lp E p‚ÇÇ Œº)) :
    ‚Äñf‚Äñ = ‚ÄñAddSubgroup.inf_fst f‚Äñ ‚äî ‚ÄñAddSubgroup.inf_snd f‚Äñ := rfl

theorem Lp.dist_inf_def [Fact (1 ‚â§ p‚ÇÅ)] [Fact (1 ‚â§ p‚ÇÇ)] (f g : ‚Üë(Lp E p‚ÇÅ Œº ‚äì Lp E p‚ÇÇ Œº)) :
    dist f g = (dist (AddSubgroup.inf_fst f) (AddSubgroup.inf_fst g) ‚äî
      dist (AddSubgroup.inf_snd f) (AddSubgroup.inf_snd g)) := rfl

theorem Lp.edist_inf_def [Fact (1 ‚â§ p‚ÇÅ)] [Fact (1 ‚â§ p‚ÇÇ)] (f g : ‚Üë(Lp E p‚ÇÅ Œº ‚äì Lp E p‚ÇÇ Œº)) :
    edist f g = (edist (AddSubgroup.inf_fst f) (AddSubgroup.inf_fst g) ‚äî
      edist (AddSubgroup.inf_snd f) (AddSubgroup.inf_snd g)) := rfl

theorem Lp.uniformContinuous_inf_fst [Fact (1 ‚â§ p‚ÇÅ)] [Fact (1 ‚â§ p‚ÇÇ)] :
    UniformContinuous (AddSubgroup.inf_fst : ‚Üë(Lp E p‚ÇÅ Œº ‚äì Lp E p‚ÇÇ Œº) ‚Üí _) :=
  AddMonoidHomClass.uniformContinuous_of_bound _ 1 fun _ ‚Ü¶ by
    simpa only [one_mul, Lp.norm_inf_def] using le_sup_left

theorem Lp.uniformContinuous_inf_snd [Fact (1 ‚â§ p‚ÇÅ)] [Fact (1 ‚â§ p‚ÇÇ)] :
    UniformContinuous (AddSubgroup.inf_snd : ‚Üë(Lp E p‚ÇÅ Œº ‚äì Lp E p‚ÇÇ Œº) ‚Üí _) :=
  AddMonoidHomClass.uniformContinuous_of_bound _ 1 fun _ ‚Ü¶ by
    simpa only [one_mul, Lp.norm_inf_def] using le_sup_right

theorem Lp.mk_mem_inf_of_eLpNorm_lt_top (f : Œ± ‚Üí E) (hf_meas : AEStronglyMeasurable f Œº)
    (hf_fst : eLpNorm f p‚ÇÅ Œº < ‚ä§) (hf_snd : eLpNorm f p‚ÇÇ Œº < ‚ä§) :
    AEEqFun.mk f hf_meas ‚àà Lp E p‚ÇÅ Œº ‚äì Lp E p‚ÇÇ Œº := by
  refine AddSubgroup.mem_inf.mpr ‚ü®?_, ?_‚ü©
  ¬∑ exact mem_Lp_iff_eLpNorm_lt_top.mpr <| eLpNorm_aeeqFun hf_meas ‚ñ∏ hf_fst
  ¬∑ exact mem_Lp_iff_eLpNorm_lt_top.mpr <| eLpNorm_aeeqFun hf_meas ‚ñ∏ hf_snd

theorem Lp.mk_mem_inf_of_mem‚Ñíp (f : Œ± ‚Üí E) (hf_fst : Mem‚Ñíp f p‚ÇÅ Œº) (hf_snd : Mem‚Ñíp f p‚ÇÇ Œº) :
    AEEqFun.mk f hf_fst.1 ‚àà Lp E p‚ÇÅ Œº ‚äì Lp E p‚ÇÇ Œº :=
  Lp.mk_mem_inf_of_eLpNorm_lt_top f hf_fst.1 hf_fst.2 hf_snd.2

-- TODO: Useful to generalize to `[SemilatticeSup Œπ] [IsDirected Œπ fun (x1 x2 : Œπ) ‚Ü¶ x1 ‚â§ x2]`?
/-- If a sequence converges in measure to two different functions, then the measure of the set
on which they differ by at least `r` is zero for any `r > 0`. -/
theorem tendstoInMeasure_measure_dist_ge_eq_zero {fs : ‚Ñï ‚Üí Œ± ‚Üí E} {f g : Œ± ‚Üí E}
    (hf : TendstoInMeasure Œº fs atTop f) (hg : TendstoInMeasure Œº fs atTop g) :
    ‚àÄ r > 0, Œº {x | r ‚â§ ‚Äñf x - g x‚Äñ} = 0 := by
  intro r hr
  suffices Œº {x | r ‚â§ ‚Äñf x - g x‚Äñ} ‚â§ 0 by simpa
  refine le_of_forall_lt' fun Œµ hŒµ ‚Ü¶ ?_
  replace hŒµ : 0 < (1 ‚äì Œµ) / 3 := ENNReal.div_pos (ne_of_gt <| by simp [hŒµ]) (by simp)
  -- Bound above by `(1 ‚àí Œµ) / 3` to obtain strict inequality and handle `Œµ = ‚ä§`.
  simp only [tendstoInMeasure_iff_norm, ENNReal.tendsto_nhds_zero, eventually_atTop] at hf hg
  rcases hf (r / 2) (half_pos hr) ((1 ‚äì Œµ) / 3) hŒµ with ‚ü®N‚ÇÅ, hN‚ÇÅ‚ü©
  rcases hg (r / 2) (half_pos hr) ((1 ‚äì Œµ) / 3) hŒµ with ‚ü®N‚ÇÇ, hN‚ÇÇ‚ü©
  calc Œº {x | r ‚â§ ‚Äñf x - g x‚Äñ}
  _ ‚â§ Œº ({x | r / 2 ‚â§ ‚Äñf x - fs (N‚ÇÅ ‚äî N‚ÇÇ) x‚Äñ} ‚à™ {x | r / 2 ‚â§ ‚Äñfs (N‚ÇÅ ‚äî N‚ÇÇ) x - g x‚Äñ}) := by
    refine measure_mono ?_
    refine Set.setOf_subset.mpr fun x hx ‚Ü¶ ?_
    simp only [Set.mem_union, Set.mem_setOf_eq]
    refine le_or_le_of_add_le_add ?_
    simp only [add_halves]
    exact le_trans hx (norm_sub_le_norm_sub_add_norm_sub _ _ _)
  _ ‚â§ Œº {x | r / 2 ‚â§ ‚Äñf x - fs (N‚ÇÅ ‚äî N‚ÇÇ) x‚Äñ} + Œº {x | r / 2 ‚â§ ‚Äñfs (N‚ÇÅ ‚äî N‚ÇÇ) x - g x‚Äñ} :=
    measure_union_le _ _
  _ = Œº {x | r / 2 ‚â§ ‚Äñfs (N‚ÇÅ ‚äî N‚ÇÇ) x - f x‚Äñ} + Œº {x | r / 2 ‚â§ ‚Äñfs (N‚ÇÅ ‚äî N‚ÇÇ) x - g x‚Äñ} := by
    simp_rw [norm_sub_rev (f _)]
  _ ‚â§ (1 ‚äì Œµ) / 3 + (1 ‚äì Œµ) / 3 :=
    add_le_add (hN‚ÇÅ (N‚ÇÅ ‚äî N‚ÇÇ) le_sup_left) (hN‚ÇÇ (N‚ÇÅ ‚äî N‚ÇÇ) le_sup_right)
  _ < (1 ‚äì Œµ) / 3 + (1 ‚äì Œµ) / 3 + (1 ‚äì Œµ) / 3 := by
    refine ENNReal.lt_add_right ?_ ?_
    ¬∑ refine ne_of_lt (ENNReal.add_lt_top.mpr ?_)
      rw [and_self]
      refine ENNReal.div_lt_top ?_ ?_ <;> simp
    ¬∑ exact hŒµ.ne'
  _ = (1 ‚äì Œµ) := ENNReal.add_thirds _
  _ ‚â§ Œµ := inf_le_right

-- TODO: Generalize from `‚Ñï` to `Œπ`?
/-- If a sequence converges in measure to two different functions, then they are ae-equal. -/
theorem tendstoInMeasure_unique {fs : ‚Ñï ‚Üí Œ± ‚Üí E} {f g : Œ± ‚Üí E}
    (hf : TendstoInMeasure Œº fs atTop f) (hg : TendstoInMeasure Œº fs atTop g) :
    f =·µê[Œº] g := by
  suffices Œº {x | f x ‚â† g x} ‚â§ 0 by simpa
  calc Œº {x | f x ‚â† g x}
  _ ‚â§ Œº (‚ãÉ k : ‚Ñï, {x | (k + 1 : ‚Ñù)‚Åª¬π ‚â§ ‚Äñf x - g x‚Äñ}) := by
    gcongr
    refine Set.setOf_subset.mpr fun x hx ‚Ü¶ ?_
    simp only [Set.mem_iUnion]
    use ‚åà‚Äñf x - g x‚Äñ‚Åª¬π‚åâ‚Çä
    refine inv_le_of_inv_le‚ÇÄ (norm_sub_pos_iff.mpr hx) ?_
    exact le_trans (Nat.le_ceil _) (lt_add_one _).le
  _ = 0 := by
    refine measure_iUnion_null fun k ‚Ü¶ ?_
    exact tendstoInMeasure_measure_dist_ge_eq_zero hf hg (k + 1)‚Åª¬π Nat.inv_pos_of_nat

instance Lp.instInfCompleteSpace [Fact (1 ‚â§ p‚ÇÅ)] [Fact (1 ‚â§ p‚ÇÇ)] [CompleteSpace E] :
    CompleteSpace ‚Üë(Lp E p‚ÇÅ Œº ‚äì Lp E p‚ÇÇ Œº) := by
  refine Metric.complete_of_cauchySeq_tendsto ?_
  intro fs hfs
  have hf : CauchySeq (AddSubgroup.inf_fst ‚àò fs) := by simpa using hfs.map uniformContinuous_inf_fst
  have hg : CauchySeq (AddSubgroup.inf_snd ‚àò fs) := by simpa using hfs.map uniformContinuous_inf_snd
  obtain ‚ü®f, hf‚ü© := cauchySeq_tendsto_of_complete hf
  obtain ‚ü®g, hg‚ü© := cauchySeq_tendsto_of_complete hg
  have hfg : f.1 = g.1 := AEEqFun.ext <| tendstoInMeasure_unique
    (by simpa using tendstoInMeasure_of_tendsto_Lp hf)
    (by simpa using tendstoInMeasure_of_tendsto_Lp hg)
  use ‚ü®f.1, ‚ü®f.2, hfg ‚ñ∏ g.2‚ü©‚ü©
  rw [Metric.tendsto_atTop] at hf hg ‚ä¢
  intro Œµ hŒµ
  rcases hf Œµ hŒµ with ‚ü®N, hN‚ü©
  rcases hg Œµ hŒµ with ‚ü®M, hM‚ü©
  use N ‚äî M
  intro n hn
  calc dist (fs n) ‚ü®f, _‚ü©
  _ = dist (AddSubgroup.inf_fst (fs n)) f ‚äî dist (AddSubgroup.inf_snd (fs n)) g := by
    rw [dist_inf_def]
    congr
    exact SetLike.coe_eq_coe.mp hfg
  _ < Œµ := sup_lt_iff.mpr ‚ü®hN n (le_of_max_le_left hn), hM n (le_of_max_le_right hn)‚ü©

end MeasureTheory

end LpInf
