/-
Copyright (c) 2020 Floris van Doorn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Floris van Doorn
-/
import Mathlib.Data.Set.Lattice

#align_import data.set.accumulate from "leanprover-community/mathlib"@"207cfac9fcd06138865b5d04f7091e46d9320432"

/-!
# Accumulate

The function `Accumulate` takes a set `s` and returns `â‹ƒ y â‰¤ x, s y`.
-/


variable {Î± Î² Î³ : Type*} {s : Î± â†’ Set Î²} {t : Î± â†’ Set Î³}

namespace Set

/-- `Accumulate s` is the union of `s y` for `y â‰¤ x`. -/
def Accumulate [LE Î±] (s : Î± â†’ Set Î²) (x : Î±) : Set Î² :=
  â‹ƒ y â‰¤ x, s y
#align set.accumulate Set.Accumulate

theorem accumulate_def [LE Î±] {x : Î±} : Accumulate s x = â‹ƒ y â‰¤ x, s y :=
  rfl
#align set.accumulate_def Set.accumulate_def

@[simp]
theorem mem_accumulate [LE Î±] {x : Î±} {z : Î²} : z âˆˆ Accumulate s x â†” âˆƒ y â‰¤ x, z âˆˆ s y := by
  simp_rw [accumulate_def, mem_iUnionâ‚‚, exists_prop]
  -- ðŸŽ‰ no goals
#align set.mem_accumulate Set.mem_accumulate

theorem subset_accumulate [Preorder Î±] {x : Î±} : s x âŠ† Accumulate s x := fun _ => mem_biUnion le_rfl
#align set.subset_accumulate Set.subset_accumulate

theorem monotone_accumulate [Preorder Î±] : Monotone (Accumulate s) := fun _ _ hxy =>
  biUnion_subset_biUnion_left fun _ hz => le_trans hz hxy
#align set.monotone_accumulate Set.monotone_accumulate

theorem biUnion_accumulate [Preorder Î±] (x : Î±) : â‹ƒ y â‰¤ x, Accumulate s y = â‹ƒ y â‰¤ x, s y := by
  apply Subset.antisymm
  -- âŠ¢ â‹ƒ (y : Î±) (_ : y â‰¤ x), Accumulate s y âŠ† â‹ƒ (y : Î±) (_ : y â‰¤ x), s y
  Â· exact iUnionâ‚‚_subset fun y hy => monotone_accumulate hy
    -- ðŸŽ‰ no goals
  Â· exact iUnionâ‚‚_mono fun y _ => subset_accumulate
    -- ðŸŽ‰ no goals
#align set.bUnion_accumulate Set.biUnion_accumulate

theorem iUnion_accumulate [Preorder Î±] : â‹ƒ x, Accumulate s x = â‹ƒ x, s x := by
  apply Subset.antisymm
  -- âŠ¢ â‹ƒ (x : Î±), Accumulate s x âŠ† â‹ƒ (x : Î±), s x
  Â· simp only [subset_def, mem_iUnion, exists_imp, mem_accumulate]
    -- âŠ¢ âˆ€ (x : Î²) (x_1 x_2 : Î±), x_2 â‰¤ x_1 âˆ§ x âˆˆ s x_2 â†’ âˆƒ i, x âˆˆ s i
    intro z x x' âŸ¨_, hzâŸ©
    -- âŠ¢ âˆƒ i, z âˆˆ s i
    exact âŸ¨x', hzâŸ©
    -- ðŸŽ‰ no goals
  Â· exact iUnion_mono fun i => subset_accumulate
    -- ðŸŽ‰ no goals
#align set.Union_accumulate Set.iUnion_accumulate

end Set
