/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl
-/
import Mathlib.Data.Set.Lattice
import Mathlib.Data.Set.Pairwise.Basic

#align_import data.set.pairwise.lattice from "leanprover-community/mathlib"@"c4c2ed622f43768eff32608d4a0f8a6cec1c047d"

/-!
# Relations holding pairwise

In this file we prove many facts about `Pairwise` and the set lattice.
-/


open Function Set Order

variable {Œ± Œ≤ Œ≥ Œπ Œπ' : Type*} {Œ∫ : Sort*} {r p q : Œ± ‚Üí Œ± ‚Üí Prop}
section Pairwise

variable {f g : Œπ ‚Üí Œ±} {s t u : Set Œ±} {a b : Œ±}

namespace Set

theorem pairwise_iUnion {f : Œ∫ ‚Üí Set Œ±} (h : Directed (¬∑ ‚äÜ ¬∑) f) :
    (‚ãÉ n, f n).Pairwise r ‚Üî ‚àÄ n, (f n).Pairwise r := by
  constructor
  -- ‚ä¢ Set.Pairwise (‚ãÉ (n : Œ∫), f n) r ‚Üí ‚àÄ (n : Œ∫), Set.Pairwise (f n) r
  ¬∑ intro H n
    -- ‚ä¢ Set.Pairwise (f n) r
    exact Pairwise.mono (subset_iUnion _ _) H
    -- üéâ no goals
  ¬∑ intro H i hi j hj hij
    -- ‚ä¢ r i j
    rcases mem_iUnion.1 hi with ‚ü®m, hm‚ü©
    -- ‚ä¢ r i j
    rcases mem_iUnion.1 hj with ‚ü®n, hn‚ü©
    -- ‚ä¢ r i j
    rcases h m n with ‚ü®p, mp, np‚ü©
    -- ‚ä¢ r i j
    exact H p (mp hm) (np hn) hij
    -- üéâ no goals
#align set.pairwise_Union Set.pairwise_iUnion

theorem pairwise_sUnion {r : Œ± ‚Üí Œ± ‚Üí Prop} {s : Set (Set Œ±)} (h : DirectedOn (¬∑ ‚äÜ ¬∑) s) :
    (‚ãÉ‚ÇÄ s).Pairwise r ‚Üî ‚àÄ a ‚àà s, Set.Pairwise a r := by
  rw [sUnion_eq_iUnion, pairwise_iUnion h.directed_val, SetCoe.forall]
  -- üéâ no goals
#align set.pairwise_sUnion Set.pairwise_sUnion

end Set

end Pairwise

namespace Set

section PartialOrderBot

variable [PartialOrder Œ±] [OrderBot Œ±] {s t : Set Œπ} {f g : Œπ ‚Üí Œ±}

theorem pairwiseDisjoint_iUnion {g : Œπ' ‚Üí Set Œπ} (h : Directed (¬∑ ‚äÜ ¬∑) g) :
    (‚ãÉ n, g n).PairwiseDisjoint f ‚Üî ‚àÄ ‚¶Én‚¶Ñ, (g n).PairwiseDisjoint f :=
  pairwise_iUnion h
#align set.pairwise_disjoint_Union Set.pairwiseDisjoint_iUnion

theorem pairwiseDisjoint_sUnion {s : Set (Set Œπ)} (h : DirectedOn (¬∑ ‚äÜ ¬∑) s) :
    (‚ãÉ‚ÇÄ s).PairwiseDisjoint f ‚Üî ‚àÄ ‚¶Éa‚¶Ñ, a ‚àà s ‚Üí Set.PairwiseDisjoint a f :=
  pairwise_sUnion h
#align set.pairwise_disjoint_sUnion Set.pairwiseDisjoint_sUnion

end PartialOrderBot

section CompleteLattice

variable [CompleteLattice Œ±] {s : Set Œπ} {t : Set Œπ'}

/-- Bind operation for `Set.PairwiseDisjoint`. If you want to only consider finsets of indices, you
can use `Set.PairwiseDisjoint.biUnion_finset`. -/
theorem PairwiseDisjoint.biUnion {s : Set Œπ'} {g : Œπ' ‚Üí Set Œπ} {f : Œπ ‚Üí Œ±}
    (hs : s.PairwiseDisjoint fun i' : Œπ' => ‚®Ü i ‚àà g i', f i)
    (hg : ‚àÄ i ‚àà s, (g i).PairwiseDisjoint f) : (‚ãÉ i ‚àà s, g i).PairwiseDisjoint f := by
  rintro a ha b hb hab
  -- ‚ä¢ (Disjoint on f) a b
  simp_rw [Set.mem_iUnion] at ha hb
  -- ‚ä¢ (Disjoint on f) a b
  obtain ‚ü®c, hc, ha‚ü© := ha
  -- ‚ä¢ (Disjoint on f) a b
  obtain ‚ü®d, hd, hb‚ü© := hb
  -- ‚ä¢ (Disjoint on f) a b
  obtain hcd | hcd := eq_or_ne (g c) (g d)
  -- ‚ä¢ (Disjoint on f) a b
  ¬∑ exact hg d hd (hcd.subst ha) hb hab
    -- üéâ no goals
  -- Porting note: the elaborator couldn't figure out `f` here.
  ¬∑ exact (hs hc hd <| ne_of_apply_ne _ hcd).mono
      (le_iSup‚ÇÇ (f := fun i (_ : i ‚àà g c) => f i) a ha)
      (le_iSup‚ÇÇ (f := fun i (_ : i ‚àà g d) => f i) b hb)
#align set.pairwise_disjoint.bUnion Set.PairwiseDisjoint.biUnion

/-- If the suprema of columns are pairwise disjoint and suprema of rows as well, then everything is
pairwise disjoint. Not to be confused with `Set.PairwiseDisjoint.prod`. -/
theorem PairwiseDisjoint.prod_left {f : Œπ √ó Œπ' ‚Üí Œ±}
    (hs : s.PairwiseDisjoint fun i => ‚®Ü i' ‚àà t, f (i, i'))
    (ht : t.PairwiseDisjoint fun i' => ‚®Ü i ‚àà s, f (i, i')) :
    (s √óÀ¢ t : Set (Œπ √ó Œπ')).PairwiseDisjoint f := by
  rintro ‚ü®i, i'‚ü© hi ‚ü®j, j'‚ü© hj h
  -- ‚ä¢ (Disjoint on f) (i, i') (j, j')
  rw [mem_prod] at hi hj
  -- ‚ä¢ (Disjoint on f) (i, i') (j, j')
  obtain rfl | hij := eq_or_ne i j
  -- ‚ä¢ (Disjoint on f) (i, i') (i, j')
  ¬∑ refine' (ht hi.2 hj.2 <| (Prod.mk.inj_left _).ne_iff.1 h).mono _ _
    -- ‚ä¢ f (i, i') ‚â§ (fun i' => ‚®Ü (i : Œπ) (_ : i ‚àà s), f (i, i')) (i, i').snd
    ¬∑ convert le_iSup‚ÇÇ (Œ± := Œ±) i hi.1; rfl
      -- ‚ä¢ f (i, i') = f (i, (i, i').snd)
                                        -- üéâ no goals
    ¬∑ convert le_iSup‚ÇÇ (Œ± := Œ±) i hj.1; rfl
      -- ‚ä¢ f (i, j') = f (i, (i, j').snd)
                                        -- üéâ no goals
  ¬∑ refine' (hs hi.1 hj.1 hij).mono _ _
    -- ‚ä¢ f (i, i') ‚â§ (fun i => ‚®Ü (i' : Œπ') (_ : i' ‚àà t), f (i, i')) (i, i').fst
    ¬∑ convert le_iSup‚ÇÇ (Œ± := Œ±) i' hi.2; rfl
      -- ‚ä¢ f (i, i') = f ((i, i').fst, i')
                                         -- üéâ no goals
    ¬∑ convert le_iSup‚ÇÇ (Œ± := Œ±) j' hj.2; rfl
      -- ‚ä¢ f (j, j') = f ((j, j').fst, j')
                                         -- üéâ no goals
#align set.pairwise_disjoint.prod_left Set.PairwiseDisjoint.prod_left

end CompleteLattice

section Frame

variable [Frame Œ±]

theorem pairwiseDisjoint_prod_left {s : Set Œπ} {t : Set Œπ'} {f : Œπ √ó Œπ' ‚Üí Œ±} :
    (s √óÀ¢ t : Set (Œπ √ó Œπ')).PairwiseDisjoint f ‚Üî
      (s.PairwiseDisjoint fun i => ‚®Ü i' ‚àà t, f (i, i')) ‚àß
        t.PairwiseDisjoint fun i' => ‚®Ü i ‚àà s, f (i, i') := by
  refine'
        ‚ü®fun h => ‚ü®fun i hi j hj hij => _, fun i hi j hj hij => _‚ü©, fun h => h.1.prod_left h.2‚ü© <;>
      simp_rw [Function.onFun, iSup_disjoint_iff, disjoint_iSup_iff] <;>
      -- ‚ä¢ ‚àÄ (i_1 : Œπ'), i_1 ‚àà t ‚Üí ‚àÄ (i_3 : Œπ'), i_3 ‚àà t ‚Üí Disjoint (f (i, i_1)) (f (j, ‚Ä¶
      -- ‚ä¢ ‚àÄ (i_1 : Œπ), i_1 ‚àà s ‚Üí ‚àÄ (i_3 : Œπ), i_3 ‚àà s ‚Üí Disjoint (f (i_1, i)) (f (i_3, ‚Ä¶
    intro i' hi' j' hj'
    -- ‚ä¢ Disjoint (f (i, i')) (f (j, j'))
    -- ‚ä¢ Disjoint (f (i', i)) (f (j', j))
  ¬∑ exact h (mk_mem_prod hi hi') (mk_mem_prod hj hj') (ne_of_apply_ne Prod.fst hij)
    -- üéâ no goals
  ¬∑ exact h (mk_mem_prod hi' hi) (mk_mem_prod hj' hj) (ne_of_apply_ne Prod.snd hij)
    -- üéâ no goals
#align set.pairwise_disjoint_prod_left Set.pairwiseDisjoint_prod_left

end Frame

theorem biUnion_diff_biUnion_eq {s t : Set Œπ} {f : Œπ ‚Üí Set Œ±} (h : (s ‚à™ t).PairwiseDisjoint f) :
    ((‚ãÉ i ‚àà s, f i) \ ‚ãÉ i ‚àà t, f i) = ‚ãÉ i ‚àà s \ t, f i := by
  refine'
    (biUnion_diff_biUnion_subset f s t).antisymm
      (iUnion‚ÇÇ_subset fun i hi a ha => (mem_diff _).2 ‚ü®mem_biUnion hi.1 ha, _‚ü©)
  rw [mem_iUnion‚ÇÇ]; rintro ‚ü®j, hj, haj‚ü©
  -- ‚ä¢ ¬¨‚àÉ i j, a ‚àà f i
                    -- ‚ä¢ False
  exact (h (Or.inl hi.1) (Or.inr hj) (ne_of_mem_of_not_mem hj hi.2).symm).le_bot ‚ü®ha, haj‚ü©
  -- üéâ no goals
#align set.bUnion_diff_bUnion_eq Set.biUnion_diff_biUnion_eq


/-- Equivalence between a disjoint bounded union and a dependent sum. -/
noncomputable def biUnionEqSigmaOfDisjoint {s : Set Œπ} {f : Œπ ‚Üí Set Œ±} (h : s.PairwiseDisjoint f) :
    (‚ãÉ i ‚àà s, f i) ‚âÉ Œ£i : s, f i :=
  (Equiv.setCongr (biUnion_eq_iUnion _ _)).trans <|
    unionEqSigmaOfDisjoint fun ‚ü®_i, hi‚ü© ‚ü®_j, hj‚ü© ne => h hi hj fun eq => ne <| Subtype.eq eq
#align set.bUnion_eq_sigma_of_disjoint Set.biUnionEqSigmaOfDisjoint

end Set

section

variable {f : Œπ ‚Üí Set Œ±} {s t : Set Œπ}

theorem Set.PairwiseDisjoint.subset_of_biUnion_subset_biUnion (h‚ÇÄ : (s ‚à™ t).PairwiseDisjoint f)
    (h‚ÇÅ : ‚àÄ i ‚àà s, (f i).Nonempty) (h : ‚ãÉ i ‚àà s, f i ‚äÜ ‚ãÉ i ‚àà t, f i) : s ‚äÜ t := by
  rintro i hi
  -- ‚ä¢ i ‚àà t
  obtain ‚ü®a, hai‚ü© := h‚ÇÅ i hi
  -- ‚ä¢ i ‚àà t
  obtain ‚ü®j, hj, haj‚ü© := mem_iUnion‚ÇÇ.1 (h <| mem_iUnion‚ÇÇ_of_mem hi hai)
  -- ‚ä¢ i ‚àà t
  rwa [h‚ÇÄ.eq (subset_union_left _ _ hi) (subset_union_right _ _ hj)
      (not_disjoint_iff.2 ‚ü®a, hai, haj‚ü©)]
#align set.pairwise_disjoint.subset_of_bUnion_subset_bUnion Set.PairwiseDisjoint.subset_of_biUnion_subset_biUnion

theorem Pairwise.subset_of_biUnion_subset_biUnion (h‚ÇÄ : Pairwise (Disjoint on f))
    (h‚ÇÅ : ‚àÄ i ‚àà s, (f i).Nonempty) (h : ‚ãÉ i ‚àà s, f i ‚äÜ ‚ãÉ i ‚àà t, f i) : s ‚äÜ t :=
  Set.PairwiseDisjoint.subset_of_biUnion_subset_biUnion (h‚ÇÄ.set_pairwise _) h‚ÇÅ h
#align pairwise.subset_of_bUnion_subset_bUnion Pairwise.subset_of_biUnion_subset_biUnion

theorem Pairwise.biUnion_injective (h‚ÇÄ : Pairwise (Disjoint on f)) (h‚ÇÅ : ‚àÄ i, (f i).Nonempty) :
    Injective fun s : Set Œπ => ‚ãÉ i ‚àà s, f i := fun _s _t h =>
  ((h‚ÇÄ.subset_of_biUnion_subset_biUnion fun _ _ => h‚ÇÅ _) <| h.subset).antisymm <|
    (h‚ÇÄ.subset_of_biUnion_subset_biUnion fun _ _ => h‚ÇÅ _) <| h.superset
#align pairwise.bUnion_injective Pairwise.biUnion_injective

end
