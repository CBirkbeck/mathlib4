/-
Copyright (c) 2022 Floris van Doorn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Floris van Doorn, Heather Macbeth
-/
import Mathlib.Data.Fintype.BigOperators

/-!
A supplement to the file `Data.Fintype.BigOperators`
-/


open scoped BigOperators
set_option autoImplicit true

noncomputable section

variable {Œπ Œπ' Œπ'' : Type _}

section Finset

open Finset

variable {Œ± Œ≤ Œ≥ : Type _}

-- theorem Equiv.finset_image_univ_eq_univ [Fintype Œ±] [Fintype Œ≤] [DecidableEq Œ≤] (f : Œ± ‚âÉ Œ≤) : univ.image f = univ :=
--   Finset.image_univ_of_surjective f.surjective

variable [CommMonoid Œ≤]

namespace Finset

-- to Fintype/Sum
@[to_additive]
theorem prod_sum_univ [Fintype Œ±] [Fintype Œ≥] (f : Œ± ‚äï Œ≥ ‚Üí Œ≤) :
    ‚àè x, f x = (‚àè x, f (Sum.inl x)) * ‚àè x, f (Sum.inr x) := by
  rw [‚Üê univ_disjSum_univ, prod_disj_sum]

@[simp]
theorem card_add_card_compl [DecidableEq Œ±] [Fintype Œ±] (s : Finset Œ±) : s.card + s·∂ú.card = Fintype.card Œ± := by
  rw [Finset.card_compl, ‚Üê Nat.add_sub_assoc (card_le_univ s), Nat.add_sub_cancel_left]

instance : Unique ({i} : Finset Œ¥) :=
  ‚ü®‚ü®‚ü®i, mem_singleton_self i‚ü©‚ü©, fun j ‚Ü¶ Subtype.ext <| mem_singleton.mp j.2‚ü©

@[simp]
lemma default_singleton : ((default : ({i} : Finset Œ¥)) : Œ¥) = i := rfl

end Finset

end Finset

open Set
-- namespace Equiv
-- open Set
-- open Sum

-- theorem sum_rec_congr (P : Œπ ‚äï Œπ' ‚Üí Sort _) (f : ‚àÄ i, P (inl i)) (g : ‚àÄ i, P (inr i))
--     {x y : Œπ ‚äï Œπ'} (h : x = y) :
--     @Sum.rec _ _ _ f g x = cast (congr_arg P h.symm) (@Sum.rec _ _ _ f g y) := by cases h; rfl
-- end Equiv

open Function Equiv

section Set

open Set

variable {Œ± : Type*} [DecidableEq Œ±] {s t : Finset Œ±}

open Finset
namespace Equiv
/-- `s ‚à™ t` (using finset union) is equivalent to `s ‚à™ t` (using set union) -/
@[simps!]
def finsetUnion (s t : Finset Œ±) :
    ((s ‚à™ t : Finset Œ±) : Set Œ±) ‚âÉ (s ‚à™ t : Set Œ±) :=
  Equiv.Set.ofEq <| coe_union _ _

/-- The disjoint union of finsets is a sum -/
def Finset.union (s t : Finset Œ±) (h : Disjoint s t) :
    (s ‚à™ t : Finset Œ±) ‚âÉ s ‚äï t :=
  (Equiv.finsetUnion s t).trans <| Equiv.Set.union (disjoint_coe.mpr h).le_bot

@[simp]
theorem Finset.union_symm_inl (h : Disjoint s t) (x : s) :
    (Equiv.Finset.union s t h).symm (Sum.inl x) = ‚ü®x, Finset.mem_union.mpr <| Or.inl x.2‚ü© :=
  rfl

@[simp]
theorem Finset.union_symm_inr (h : Disjoint s t) (y : t) :
    (Equiv.Finset.union s t h).symm (Sum.inr y) = ‚ü®y, Finset.mem_union.mpr <| Or.inr y.2‚ü© :=
  rfl

def piFinsetUnion {Œπ} [DecidableEq Œπ] (Œ± : Œπ ‚Üí Type*) {s t : Finset Œπ} (h : Disjoint s t) :
    ((‚àÄ i : s, Œ± i) √ó ‚àÄ i : t, Œ± i) ‚âÉ ‚àÄ i : (s ‚à™ t : Finset Œπ), Œ± i :=
  let e := (Equiv.Finset.union s t h).symm
  sumPiEquivProdPi (fun b ‚Ü¶ Œ± (e b)) |>.symm.trans (.piCongrLeft (fun i : ‚Ü•(s ‚à™ t) ‚Ü¶ Œ± i) e)

end Equiv

theorem eval_preimage {Œπ} [DecidableEq Œπ] {Œ± : Œπ ‚Üí Type _} {i : Œπ} {s : Set (Œ± i)} :
    eval i ‚Åª¬π' s = pi univ (update (fun i => univ) i s) := by
  ext x
  simp [@forall_update_iff _ (fun i => Set (Œ± i)) _ _ _ _ fun i' y => x i' ‚àà y]

theorem eval_preimage' {Œπ} [DecidableEq Œπ] {Œ± : Œπ ‚Üí Type _} {i : Œπ} {s : Set (Œ± i)} :
    eval i ‚Åª¬π' s = pi {i} (update (fun i => univ) i s) := by ext; simp

theorem pi_univ_ite {Œπ} {Œ± : Œπ ‚Üí Type _} (s : Set Œπ) [DecidablePred (¬∑ ‚àà s)] (t : ‚àÄ i, Set (Œ± i)) :
    (pi univ fun i => if i ‚àà s then t i else univ) = s.pi t := by
  ext; simp_rw [Set.mem_pi]; apply forall_congr'; intro i; split_ifs with h <;> simp [h]

end Set


section Function

open Set

variable {Œ± : Œπ ‚Üí Type _}

/-- Given one value over a unique, we get a dependent function. -/
def uniqueElim [Unique Œπ] (x : Œ± (default : Œπ)) (i : Œπ) : Œ± i := by
  rw [Unique.eq_default i]
  exact x

@[simp]
theorem uniqueElim_default {_ : Unique Œπ} (x : Œ± (default : Œπ)) : uniqueElim x (default : Œπ) = x :=
  rfl

theorem uniqueElim_preimage [Unique Œπ] (t : ‚àÄ i, Set (Œ± i)) :
    uniqueElim ‚Åª¬π' pi univ t = t (default : Œπ) := by ext; simp [Unique.forall_iff]

theorem pred_update {Œ±} [DecidableEq Œ±] {Œ≤ : Œ± ‚Üí Type _} (P : ‚àÄ ‚¶Éa‚¶Ñ, Œ≤ a ‚Üí Prop) (f : ‚àÄ a, Œ≤ a)
    (a' : Œ±) (v : Œ≤ a') (a : Œ±) : P (update f a' v a) ‚Üî a = a' ‚àß P v ‚à® a ‚â† a' ‚àß P (f a) := by
  rw [update]
  split_ifs with h
  ¬∑ subst h
    simp
  ¬∑ rw [‚Üê Ne.def] at h
    simp [h]


namespace Function
variable {Œπ : Sort _} {œÄ : Œπ ‚Üí Sort _} {x : ‚àÄ i, œÄ i}

/-- `updateFinset x s y` is the vector `x` with the coordinates in `s` changed to the values of `y`. -/
def updateFinset (x : ‚àÄ i, œÄ i) (s : Finset Œπ) [DecidableEq Œπ] (y : ‚àÄ i : ‚Ü•s, œÄ i) (i : Œπ) :
    œÄ i :=
  if hi : i ‚àà s then y ‚ü®i, hi‚ü© else x i

/-
todo: do `updateFinset` this for SetLike, like this:
```
def updateFinset {ùì¢} [SetLike ùì¢ Œπ] (s : ùì¢) (x : ‚àÄ i, œÄ i) (y : ‚àÄ i : ‚Ü•s, œÄ i) (i : Œπ) : œÄ i :=
  if hi : i ‚àà s then y ‚ü®i, hi‚ü© else x i
```
however, `Finset` is not currently `SetLike`.
```
instance : SetLike (Finset Œπ) Œπ where
  coe := (¬∑.toSet)
  coe_injective' := coe_injective
```
-/

open Finset
variable [DecidableEq Œπ]

@[simp] theorem updateFinset_empty {y} : updateFinset x ‚àÖ y = x :=
  rfl

theorem updateFinset_singleton {i y} :
    updateFinset x {i} y = Function.update x i (y ‚ü®i, mem_singleton_self i‚ü©) := by
  congr with j
  by_cases hj : j = i
  ¬∑ cases hj
    simp only [dif_pos, Finset.mem_singleton, update_same, updateFinset]
  ¬∑ simp [hj, updateFinset]

theorem update_eq_updateFinset {i y} :
    Function.update x i y = updateFinset x {i} (uniqueElim y) := by
  congr with j
  by_cases hj : j = i
  ¬∑ cases hj
    simp only [dif_pos, Finset.mem_singleton, update_same, updateFinset]
    exact uniqueElim_default (Œ± := fun j : ({i} : Finset Œπ) => œÄ j) y
  ¬∑ simp [hj, updateFinset]

theorem updateFinset_updateFinset {s t : Finset Œπ} (hst : Disjoint s t)
    {y : ‚àÄ i : ‚Ü•s, œÄ i} {z : ‚àÄ i : ‚Ü•t, œÄ i} :
    updateFinset (updateFinset x s y) t z =
    updateFinset x (s ‚à™ t) (Equiv.piFinsetUnion œÄ hst ‚ü®y, z‚ü©) := by
  set e := Equiv.Finset.union s t hst |>.symm
  congr with i
  by_cases his : i ‚àà s <;> by_cases hit : i ‚àà t <;>
    simp only [updateFinset, his, hit, dif_pos, dif_neg, Finset.mem_union, true_or_iff,
      false_or_iff, not_false_iff]
  ¬∑ exfalso; exact Finset.disjoint_left.mp hst his hit
  ¬∑ exact piCongrLeft_sum_inl (fun b : ‚Ü•(s ‚à™ t) => œÄ b) e y z ‚ü®i, his‚ü© |>.symm
  ¬∑ exact piCongrLeft_sum_inr (fun b : ‚Ü•(s ‚à™ t) => œÄ b) e y z ‚ü®i, hit‚ü© |>.symm

end Function
end Function
