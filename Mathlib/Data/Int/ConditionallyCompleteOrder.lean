/-
Copyright (c) 2021 Floris van Doorn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Floris van Doorn
-/
import Mathlib.Order.ConditionallyCompleteLattice.Basic
import Mathlib.Data.Int.LeastGreatest

#align_import data.int.conditionally_complete_order from "leanprover-community/mathlib"@"1e05171a5e8cf18d98d9cf7b207540acb044acae"

/-!
## `â„¤` forms a conditionally complete linear order

The integers form a conditionally complete linear order.
-/


open Int

open Classical

noncomputable section

instance : ConditionallyCompleteLinearOrder â„¤ :=
  { Int.linearOrderedCommRing,
    LinearOrder.toLattice with
    sSup := fun s =>
      if h : s.Nonempty âˆ§ BddAbove s then
        greatestOfBdd (Classical.choose h.2) (Classical.choose_spec h.2) h.1
      else 0
    sInf := fun s =>
      if h : s.Nonempty âˆ§ BddBelow s then
        leastOfBdd (Classical.choose h.2) (Classical.choose_spec h.2) h.1
      else 0
    le_csSup := by
      intro s n hs hns
      -- âŠ¢ n â‰¤ sSup s
      have : s.Nonempty âˆ§ BddAbove s := âŸ¨âŸ¨n, hnsâŸ©, hsâŸ©
      -- âŠ¢ n â‰¤ sSup s
      -- Porting note: this was `rw [dif_pos this]`
      simp only [this, and_self, dite_true, ge_iff_le]
      -- âŠ¢ n â‰¤ â†‘(greatestOfBdd (choose (_ : BddAbove s)) (_ : choose (_ : BddAbove s) âˆˆ â€¦
      exact (greatestOfBdd _ _ _).2.2 n hns
      -- ðŸŽ‰ no goals
    csSup_le := by
      intro s n hs hns
      -- âŠ¢ sSup s â‰¤ n
      have : s.Nonempty âˆ§ BddAbove s := âŸ¨hs, âŸ¨n, hnsâŸ©âŸ©
      -- âŠ¢ sSup s â‰¤ n
      -- Porting note: this was `rw [dif_pos this]`
      simp only [this, and_self, dite_true, ge_iff_le]
      -- âŠ¢ â†‘(greatestOfBdd (choose (_ : BddAbove s)) (_ : choose (_ : BddAbove s) âˆˆ upp â€¦
      exact hns (greatestOfBdd _ (Classical.choose_spec this.2) _).2.1
      -- ðŸŽ‰ no goals
    csInf_le := by
      intro s n hs hns
      -- âŠ¢ sInf s â‰¤ n
      have : s.Nonempty âˆ§ BddBelow s := âŸ¨âŸ¨n, hnsâŸ©, hsâŸ©
      -- âŠ¢ sInf s â‰¤ n
      -- Porting note: this was `rw [dif_pos this]`
      simp only [this, and_self, dite_true, ge_iff_le]
      -- âŠ¢ â†‘(leastOfBdd (choose (_ : BddBelow s)) (_ : choose (_ : BddBelow s) âˆˆ lowerB â€¦
      exact (leastOfBdd _ _ _).2.2 n hns
      -- ðŸŽ‰ no goals
    le_csInf := by
      intro s n hs hns
      -- âŠ¢ n â‰¤ sInf s
      have : s.Nonempty âˆ§ BddBelow s := âŸ¨hs, âŸ¨n, hnsâŸ©âŸ©
      -- âŠ¢ n â‰¤ sInf s
      -- Porting note: this was `rw [dif_pos this]`
      simp only [this, and_self, dite_true, ge_iff_le]
      -- âŠ¢ n â‰¤ â†‘(leastOfBdd (choose (_ : BddBelow s)) (_ : choose (_ : BddBelow s) âˆˆ lo â€¦
      exact hns (leastOfBdd _ (Classical.choose_spec this.2) _).2.1
      -- ðŸŽ‰ no goals
    csSup_of_not_bddAbove := fun s hs â†¦ by simp [hs]
                                           -- ðŸŽ‰ no goals
    csInf_of_not_bddBelow := fun s hs â†¦ by simp [hs] }
                                           -- ðŸŽ‰ no goals

namespace Int

-- Porting note: mathlib3 proof uses `convert dif_pos _ using 1`
theorem csSup_eq_greatest_of_bdd {s : Set â„¤} [DecidablePred (Â· âˆˆ s)] (b : â„¤) (Hb : âˆ€ z âˆˆ s, z â‰¤ b)
    (Hinh : âˆƒ z : â„¤, z âˆˆ s) : sSup s = greatestOfBdd b Hb Hinh := by
  have : s.Nonempty âˆ§ BddAbove s := âŸ¨Hinh, b, HbâŸ©
  -- âŠ¢ sSup s = â†‘(greatestOfBdd b Hb Hinh)
  simp only [sSup, this, and_self, dite_true]
  -- âŠ¢ â†‘(greatestOfBdd (choose (_ : BddAbove s)) (_ : choose (_ : BddAbove s) âˆˆ upp â€¦
  convert (coe_greatestOfBdd_eq Hb (Classical.choose_spec (âŸ¨b, HbâŸ© : BddAbove s)) Hinh).symm
  -- ðŸŽ‰ no goals
#align int.cSup_eq_greatest_of_bdd Int.csSup_eq_greatest_of_bdd

@[simp]
theorem csSup_empty : sSup (âˆ… : Set â„¤) = 0 :=
  dif_neg (by simp)
              -- ðŸŽ‰ no goals
#align int.cSup_empty Int.csSup_empty

theorem csSup_of_not_bdd_above {s : Set â„¤} (h : Â¬BddAbove s) : sSup s = 0 :=
  dif_neg (by simp [h])
              -- ðŸŽ‰ no goals
#align int.cSup_of_not_bdd_above Int.csSup_of_not_bdd_above

-- Porting note: mathlib3 proof uses `convert dif_pos _ using 1`
theorem csInf_eq_least_of_bdd {s : Set â„¤} [DecidablePred (Â· âˆˆ s)] (b : â„¤) (Hb : âˆ€ z âˆˆ s, b â‰¤ z)
    (Hinh : âˆƒ z : â„¤, z âˆˆ s) : sInf s = leastOfBdd b Hb Hinh := by
  have : s.Nonempty âˆ§ BddBelow s := âŸ¨Hinh, b, HbâŸ©
  -- âŠ¢ sInf s = â†‘(leastOfBdd b Hb Hinh)
  simp only [sInf, this, and_self, dite_true]
  -- âŠ¢ â†‘(leastOfBdd (choose (_ : BddBelow s)) (_ : choose (_ : BddBelow s) âˆˆ lowerB â€¦
  convert (coe_leastOfBdd_eq Hb (Classical.choose_spec (âŸ¨b, HbâŸ© : BddBelow s)) Hinh).symm
  -- ðŸŽ‰ no goals
#align int.cInf_eq_least_of_bdd Int.csInf_eq_least_of_bdd

@[simp]
theorem csInf_empty : sInf (âˆ… : Set â„¤) = 0 :=
  dif_neg (by simp)
              -- ðŸŽ‰ no goals
#align int.cInf_empty Int.csInf_empty

theorem csInf_of_not_bdd_below {s : Set â„¤} (h : Â¬BddBelow s) : sInf s = 0 :=
  dif_neg (by simp [h])
              -- ðŸŽ‰ no goals
#align int.cInf_of_not_bdd_below Int.csInf_of_not_bdd_below

theorem csSup_mem {s : Set â„¤} (h1 : s.Nonempty) (h2 : BddAbove s) : sSup s âˆˆ s := by
  convert (greatestOfBdd _ (Classical.choose_spec h2) h1).2.1
  -- âŠ¢ sSup s = â†‘(greatestOfBdd (choose h2) (_ : choose h2 âˆˆ upperBounds s) h1)
  exact dif_pos âŸ¨h1, h2âŸ©
  -- ðŸŽ‰ no goals
#align int.cSup_mem Int.csSup_mem

theorem csInf_mem {s : Set â„¤} (h1 : s.Nonempty) (h2 : BddBelow s) : sInf s âˆˆ s := by
  convert (leastOfBdd _ (Classical.choose_spec h2) h1).2.1
  -- âŠ¢ sInf s = â†‘(leastOfBdd (choose h2) (_ : choose h2 âˆˆ lowerBounds s) h1)
  exact dif_pos âŸ¨h1, h2âŸ©
  -- ðŸŽ‰ no goals
#align int.cInf_mem Int.csInf_mem

end Int
