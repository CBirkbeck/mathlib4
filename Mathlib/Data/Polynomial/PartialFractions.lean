/-
Copyright (c) Sidharth Hariharan. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kevin Buzzard, Sidharth Hariharan
-/
import Mathlib.Data.Polynomial.Div
import Mathlib.Data.ZMod.Basic
import Mathlib.Logic.Function.Basic
import Mathlib.RingTheory.Localization.FractionRing
import Mathlib.Tactic.FieldSimp
import Mathlib.Tactic.LinearCombination

#align_import data.polynomial.partial_fractions from "leanprover-community/mathlib"@"6e70e0d419bf686784937d64ed4bfde866ff229e"

/-!

# Partial fractions

These results were formalised by the Xena Project, at the suggestion
of Patrick Massot.


# The main theorem

* `div_eq_quo_add_sum_rem_div`: General partial fraction decomposition theorem for polynomials over
  an integral domain R :
  If f, g‚ÇÅ, g‚ÇÇ, ..., g‚Çô ‚àà R[X] and the g·µ¢s are all monic and pairwise coprime, then ‚àÉ q, r‚ÇÅ, ..., r‚Çô
  ‚àà R[X] such that f / g‚ÇÅg‚ÇÇ...g‚Çô = q + r‚ÇÅ/g‚ÇÅ + ... + r‚Çô/g‚Çô and for all i, deg(r·µ¢) < deg(g·µ¢).

* The result is formalized here in slightly more generality, using finsets. That is, if Œπ is an
  arbitrary index type, g denotes a map from Œπ to R[X], and if s is an arbitrary finite subset of Œπ,
  with g i monic for all i ‚àà s and for all i,j ‚àà s, i ‚â† j ‚Üí g i is coprime to g j, then we have
  ‚àÉ q ‚àà R[X] , r : Œπ ‚Üí R[X] such that ‚àÄ i ‚àà s, deg(r i) < deg(g i) and
  f / ‚àè g i = q + ‚àë (r i) / (g i), where the product and sum are over s.

* The proof is done by proving the two-denominator case and then performing finset induction for an
  arbitrary (finite) number of denominators.

## Scope for Expansion

* Proving uniqueness of the decomposition

-/


variable (R : Type) [CommRing R] [IsDomain R]

open Polynomial

open Polynomial

variable (K : Type) [Field K] [Algebra R[X] K] [IsFractionRing R[X] K]

section TwoDenominators

--Porting note: added for scoped `Algebra.cast` instance
open algebraMap

/-- Let R be an integral domain and f, g‚ÇÅ, g‚ÇÇ ‚àà R[X]. Let g‚ÇÅ and g‚ÇÇ be monic and coprime.
Then, ‚àÉ q, r‚ÇÅ, r‚ÇÇ ‚àà R[X] such that f / g‚ÇÅg‚ÇÇ = q + r‚ÇÅ/g‚ÇÅ + r‚ÇÇ/g‚ÇÇ and deg(r‚ÇÅ) < deg(g‚ÇÅ) and
deg(r‚ÇÇ) < deg(g‚ÇÇ).
-/
theorem div_eq_quo_add_rem_div_add_rem_div (f : R[X]) {g‚ÇÅ g‚ÇÇ : R[X]} (hg‚ÇÅ : g‚ÇÅ.Monic)
    (hg‚ÇÇ : g‚ÇÇ.Monic) (hcoprime : IsCoprime g‚ÇÅ g‚ÇÇ) :
    ‚àÉ q r‚ÇÅ r‚ÇÇ : R[X],
      r‚ÇÅ.degree < g‚ÇÅ.degree ‚àß
        r‚ÇÇ.degree < g‚ÇÇ.degree ‚àß (f : K) / (‚Üëg‚ÇÅ * ‚Üëg‚ÇÇ) = ‚Üëq + ‚Üër‚ÇÅ / ‚Üëg‚ÇÅ + ‚Üër‚ÇÇ / ‚Üëg‚ÇÇ := by
  rcases hcoprime with ‚ü®c, d, hcd‚ü©
  -- ‚ä¢ ‚àÉ q r‚ÇÅ r‚ÇÇ, degree r‚ÇÅ < degree g‚ÇÅ ‚àß degree r‚ÇÇ < degree g‚ÇÇ ‚àß ‚Üëf / (‚Üëg‚ÇÅ * ‚Üëg‚ÇÇ)  ‚Ä¶
  refine'
    ‚ü®f * d /‚Çò g‚ÇÅ + f * c /‚Çò g‚ÇÇ, f * d %‚Çò g‚ÇÅ, f * c %‚Çò g‚ÇÇ, degree_modByMonic_lt _ hg‚ÇÅ,
      degree_modByMonic_lt _ hg‚ÇÇ, _‚ü©
  have hg‚ÇÅ' : (‚Üëg‚ÇÅ : K) ‚â† 0 := by
    norm_cast
    exact hg‚ÇÅ.ne_zero_of_ne zero_ne_one
  have hg‚ÇÇ' : (‚Üëg‚ÇÇ : K) ‚â† 0 := by
    norm_cast
    exact hg‚ÇÇ.ne_zero_of_ne zero_ne_one
  have hfc := modByMonic_add_div (f * c) hg‚ÇÇ
  -- ‚ä¢ ‚Üëf / (‚Üëg‚ÇÅ * ‚Üëg‚ÇÇ) = ‚Üë(f * d /‚Çò g‚ÇÅ + f * c /‚Çò g‚ÇÇ) + ‚Üë(f * d %‚Çò g‚ÇÅ) / ‚Üëg‚ÇÅ + ‚Üë(f ‚Ä¶
  have hfd := modByMonic_add_div (f * d) hg‚ÇÅ
  -- ‚ä¢ ‚Üëf / (‚Üëg‚ÇÅ * ‚Üëg‚ÇÇ) = ‚Üë(f * d /‚Çò g‚ÇÅ + f * c /‚Çò g‚ÇÇ) + ‚Üë(f * d %‚Çò g‚ÇÅ) / ‚Üëg‚ÇÅ + ‚Üë(f ‚Ä¶
  field_simp
  -- ‚ä¢ ‚Üëf = (‚Üë(f * d /‚Çò g‚ÇÅ + f * c /‚Çò g‚ÇÇ) * ‚Üëg‚ÇÅ + ‚Üë(f * d %‚Çò g‚ÇÅ)) * ‚Üëg‚ÇÇ + ‚Üë(f * c % ‚Ä¶
  norm_cast
  -- ‚ä¢ f = ((f * d /‚Çò g‚ÇÅ + f * c /‚Çò g‚ÇÇ) * g‚ÇÅ + f * d %‚Çò g‚ÇÅ) * g‚ÇÇ + f * c %‚Çò g‚ÇÇ * g‚ÇÅ
  linear_combination -1 * f * hcd + -1 * g‚ÇÅ * hfc + -1 * g‚ÇÇ * hfd
  -- üéâ no goals
#align div_eq_quo_add_rem_div_add_rem_div div_eq_quo_add_rem_div_add_rem_div

end TwoDenominators

section NDenominators

open BigOperators Classical

--Porting note: added for scoped `Algebra.cast` instance
open algebraMap

/-- Let R be an integral domain and f ‚àà R[X]. Let s be a finite index set.
Then, a fraction of the form f / ‚àè (g i) can be rewritten as q + ‚àë (r i) / (g i), where
deg(r i) < deg(g i), provided that the g i are monic and pairwise coprime.
-/
theorem div_eq_quo_add_sum_rem_div (f : R[X]) {Œπ : Type*} {g : Œπ ‚Üí R[X]} {s : Finset Œπ}
    (hg : ‚àÄ i ‚àà s, (g i).Monic) (hcop : Set.Pairwise ‚Üës fun i j => IsCoprime (g i) (g j)) :
    ‚àÉ (q : R[X]) (r : Œπ ‚Üí R[X]),
      (‚àÄ i ‚àà s, (r i).degree < (g i).degree) ‚àß
        ((‚Üëf : K) / ‚àè i in s, ‚Üë(g i)) = ‚Üëq + ‚àë i in s, (r i : K) / (g i : K) := by
  induction' s using Finset.induction_on with a b hab Hind f generalizing f
  -- ‚ä¢ ‚àÉ q r, (‚àÄ (i : Œπ), i ‚àà ‚àÖ ‚Üí degree (r i) < degree (g i)) ‚àß ‚Üëf / ‚àè i in ‚àÖ, ‚Üë(g ‚Ä¶
  ¬∑ refine' ‚ü®f, fun _ : Œπ => (0 : R[X]), fun i => _, by simp‚ü©
    -- ‚ä¢ i ‚àà ‚àÖ ‚Üí degree ((fun x => 0) i) < degree (g i)
    rintro ‚ü®‚ü©
    -- üéâ no goals
  obtain ‚ü®q‚ÇÄ, r‚ÇÅ, r‚ÇÇ, hdeg‚ÇÅ, _, hf : (‚Üëf : K) / _ = _‚ü© :=
    div_eq_quo_add_rem_div_add_rem_div R K f
      (hg a (b.mem_insert_self a) : Monic (g a))
      (monic_prod_of_monic _ _ fun i hi => hg i (Finset.mem_insert_of_mem hi) :
        Monic (‚àè i : Œπ in b, g i))
      (IsCoprime.prod_right fun i hi =>
        hcop (Finset.mem_coe.2 (b.mem_insert_self a))
          (Finset.mem_coe.2 (Finset.mem_insert_of_mem hi)) (by rintro rfl; exact hab hi))
  ¬∑ obtain ‚ü®q, r, hrdeg, IH‚ü© :=
      Hind _ (fun i hi => hg i (Finset.mem_insert_of_mem hi))
        (Set.Pairwise.mono (Finset.coe_subset.2 fun i hi => Finset.mem_insert_of_mem hi) hcop)
    refine ‚ü®q‚ÇÄ + q, fun i => if i = a then r‚ÇÅ else r i, ?_, ?_‚ü©
    -- ‚ä¢ ‚àÄ (i : Œπ), i ‚àà insert a b ‚Üí degree ((fun i => if i = a then r‚ÇÅ else r i) i)  ‚Ä¶
    ¬∑ intro i
      -- ‚ä¢ i ‚àà insert a b ‚Üí degree ((fun i => if i = a then r‚ÇÅ else r i) i) < degree (g ‚Ä¶
      dsimp only
      -- ‚ä¢ i ‚àà insert a b ‚Üí degree (if i = a then r‚ÇÅ else r i) < degree (g i)
      split_ifs with h1
      -- ‚ä¢ i ‚àà insert a b ‚Üí degree r‚ÇÅ < degree (g i)
      ¬∑ cases h1
        -- ‚ä¢ a ‚àà insert a b ‚Üí degree r‚ÇÅ < degree (g a)
        intro
        -- ‚ä¢ degree r‚ÇÅ < degree (g a)
        exact hdeg‚ÇÅ
        -- üéâ no goals
      ¬∑ intro hi
        -- ‚ä¢ degree (r i) < degree (g i)
        exact hrdeg i (Finset.mem_of_mem_insert_of_ne hi h1)
        -- üéâ no goals
    norm_cast at hf IH ‚ä¢
    -- ‚ä¢ ‚Üëf / ‚Üë(‚àè i in insert a b, g i) = ‚Üë(q‚ÇÄ + q) + ‚àë x in insert a b, ‚Üë(if x = a t ‚Ä¶
    rw [Finset.prod_insert hab, hf, IH, Finset.sum_insert hab, if_pos rfl]
    -- ‚ä¢ ‚Üëq‚ÇÄ + ‚Üër‚ÇÅ / ‚Üë(g a) + (‚Üëq + ‚àë i in b, ‚Üë(r i) / ‚Üë(g i)) = ‚Üë(q‚ÇÄ + q) + (‚Üër‚ÇÅ / ‚Üë ‚Ä¶
    trans (‚Üë(q‚ÇÄ + q : R[X]) : K) + (‚Üër‚ÇÅ / ‚Üë(g a) + ‚àë i : Œπ in b, (r i : K) / (g i : K))
    -- ‚ä¢ ‚Üëq‚ÇÄ + ‚Üër‚ÇÅ / ‚Üë(g a) + (‚Üëq + ‚àë i in b, ‚Üë(r i) / ‚Üë(g i)) = ‚Üë(q‚ÇÄ + q) + (‚Üër‚ÇÅ / ‚Üë ‚Ä¶
    ¬∑ push_cast
      -- ‚ä¢ ‚Üëq‚ÇÄ + ‚Üër‚ÇÅ / ‚Üë(g a) + (‚Üëq + ‚àë i in b, ‚Üë(r i) / ‚Üë(g i)) = ‚Üëq‚ÇÄ + ‚Üëq + (‚Üër‚ÇÅ / ‚Üë( ‚Ä¶
      ring
      -- üéâ no goals
    congr 2
    -- ‚ä¢ ‚àë i in b, ‚Üë(r i) / ‚Üë(g i) = ‚àë x in b, ‚Üë(if x = a then r‚ÇÅ else r x) / ‚Üë(g x)
    refine' Finset.sum_congr rfl fun x hxb => _
    -- ‚ä¢ ‚Üë(r x) / ‚Üë(g x) = ‚Üë(if x = a then r‚ÇÅ else r x) / ‚Üë(g x)
    rw [if_neg]
    -- ‚ä¢ ¬¨x = a
    rintro rfl
    -- ‚ä¢ False
    exact hab hxb
    -- üéâ no goals
#align div_eq_quo_add_sum_rem_div div_eq_quo_add_sum_rem_div

end NDenominators
