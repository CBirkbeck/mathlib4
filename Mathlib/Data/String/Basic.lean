/-
Copyright (c) 2018 Mario Carneiro. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Mario Carneiro
-/
import Mathlib.Data.List.Lex
import Mathlib.Data.Char

#align_import data.string.basic from "leanprover-community/mathlib"@"d13b3a4a392ea7273dfa4727dbd1892e26cfd518"

/-!
# Strings

Supplementary theorems about the `String` type.
-/

namespace String

/-- `<` on string iterators. This coincides with `<` on strings as lists. -/
def ltb (s‚ÇÅ s‚ÇÇ : Iterator) : Bool :=
  if s‚ÇÇ.hasNext then
    if s‚ÇÅ.hasNext then
      if s‚ÇÅ.curr = s‚ÇÇ.curr then
        ltb s‚ÇÅ.next s‚ÇÇ.next
      else s‚ÇÅ.curr < s‚ÇÇ.curr
    else true
  else false
#align string.ltb String.ltb

instance LT' : LT String :=
  ‚ü®fun s‚ÇÅ s‚ÇÇ ‚Ü¶ ltb s‚ÇÅ.iter s‚ÇÇ.iter‚ü©
#align string.has_lt' String.LT'

instance decidableLT : @DecidableRel String (¬∑ < ¬∑) := by
  simp only [LT']
  -- ‚ä¢ DecidableRel fun s‚ÇÅ s‚ÇÇ => ltb (iter s‚ÇÅ) (iter s‚ÇÇ) = true
  infer_instance -- short-circuit type class inference
  -- üéâ no goals
#align string.decidable_lt String.decidableLT

/-- Induction on `String.ltb`. -/
def ltb.inductionOn.{u} {motive : Iterator ‚Üí Iterator ‚Üí Sort u} (it‚ÇÅ it‚ÇÇ : Iterator)
    (ind : ‚àÄ s‚ÇÅ s‚ÇÇ i‚ÇÅ i‚ÇÇ, Iterator.hasNext ‚ü®s‚ÇÇ, i‚ÇÇ‚ü© ‚Üí Iterator.hasNext ‚ü®s‚ÇÅ, i‚ÇÅ‚ü© ‚Üí
      get s‚ÇÅ i‚ÇÅ = get s‚ÇÇ i‚ÇÇ ‚Üí motive (Iterator.next ‚ü®s‚ÇÅ, i‚ÇÅ‚ü©) (Iterator.next ‚ü®s‚ÇÇ, i‚ÇÇ‚ü©) ‚Üí
      motive ‚ü®s‚ÇÅ, i‚ÇÅ‚ü© ‚ü®s‚ÇÇ, i‚ÇÇ‚ü©)
    (eq : ‚àÄ s‚ÇÅ s‚ÇÇ i‚ÇÅ i‚ÇÇ, Iterator.hasNext ‚ü®s‚ÇÇ, i‚ÇÇ‚ü© ‚Üí Iterator.hasNext ‚ü®s‚ÇÅ, i‚ÇÅ‚ü© ‚Üí
      ¬¨ get s‚ÇÅ i‚ÇÅ = get s‚ÇÇ i‚ÇÇ ‚Üí motive ‚ü®s‚ÇÅ, i‚ÇÅ‚ü© ‚ü®s‚ÇÇ, i‚ÇÇ‚ü©)
    (base‚ÇÅ : ‚àÄ s‚ÇÅ s‚ÇÇ i‚ÇÅ i‚ÇÇ, Iterator.hasNext ‚ü®s‚ÇÇ, i‚ÇÇ‚ü© ‚Üí ¬¨ Iterator.hasNext ‚ü®s‚ÇÅ, i‚ÇÅ‚ü© ‚Üí
      motive ‚ü®s‚ÇÅ, i‚ÇÅ‚ü© ‚ü®s‚ÇÇ, i‚ÇÇ‚ü©)
    (base‚ÇÇ : ‚àÄ s‚ÇÅ s‚ÇÇ i‚ÇÅ i‚ÇÇ, ¬¨ Iterator.hasNext ‚ü®s‚ÇÇ, i‚ÇÇ‚ü© ‚Üí motive ‚ü®s‚ÇÅ, i‚ÇÅ‚ü© ‚ü®s‚ÇÇ, i‚ÇÇ‚ü©) :
    motive it‚ÇÅ it‚ÇÇ :=
  if h‚ÇÇ : it‚ÇÇ.hasNext then
    if h‚ÇÅ : it‚ÇÅ.hasNext then
      if heq : it‚ÇÅ.curr = it‚ÇÇ.curr then
        ind it‚ÇÅ.s it‚ÇÇ.s it‚ÇÅ.i it‚ÇÇ.i h‚ÇÇ h‚ÇÅ heq (inductionOn it‚ÇÅ.next it‚ÇÇ.next ind eq base‚ÇÅ base‚ÇÇ)
      else eq it‚ÇÅ.s it‚ÇÇ.s it‚ÇÅ.i it‚ÇÇ.i h‚ÇÇ h‚ÇÅ heq
    else base‚ÇÅ it‚ÇÅ.s it‚ÇÇ.s it‚ÇÅ.i it‚ÇÇ.i h‚ÇÇ h‚ÇÅ
  else base‚ÇÇ it‚ÇÅ.s it‚ÇÇ.s it‚ÇÅ.i it‚ÇÇ.i h‚ÇÇ

theorem ltb_cons_addChar (c : Char) (cs‚ÇÅ cs‚ÇÇ : List Char) (i‚ÇÅ i‚ÇÇ : Pos) :
    ltb ‚ü®‚ü®c :: cs‚ÇÅ‚ü©, i‚ÇÅ + c‚ü© ‚ü®‚ü®c :: cs‚ÇÇ‚ü©, i‚ÇÇ + c‚ü© = ltb ‚ü®‚ü®cs‚ÇÅ‚ü©, i‚ÇÅ‚ü© ‚ü®‚ü®cs‚ÇÇ‚ü©, i‚ÇÇ‚ü© := by
  apply ltb.inductionOn ‚ü®‚ü®cs‚ÇÅ‚ü©, i‚ÇÅ‚ü© ‚ü®‚ü®cs‚ÇÇ‚ü©, i‚ÇÇ‚ü© (motive := fun ‚ü®‚ü®cs‚ÇÅ‚ü©, i‚ÇÅ‚ü© ‚ü®‚ü®cs‚ÇÇ‚ü©, i‚ÇÇ‚ü© ‚Ü¶
    ltb ‚ü®‚ü®c :: cs‚ÇÅ‚ü©, i‚ÇÅ + c‚ü© ‚ü®‚ü®c :: cs‚ÇÇ‚ü©, i‚ÇÇ + c‚ü© =
    ltb ‚ü®‚ü®cs‚ÇÅ‚ü©, i‚ÇÅ‚ü© ‚ü®‚ü®cs‚ÇÇ‚ü©, i‚ÇÇ‚ü©) <;> simp <;>
                                     -- ‚ä¢ ‚àÄ (s‚ÇÅ s‚ÇÇ : String) (i‚ÇÅ i‚ÇÇ : Pos), Iterator.hasNext { s := s‚ÇÇ, i := i‚ÇÇ } = tr ‚Ä¶
                                     -- ‚ä¢ ‚àÄ (s‚ÇÅ s‚ÇÇ : String) (i‚ÇÅ i‚ÇÇ : Pos), Iterator.hasNext { s := s‚ÇÇ, i := i‚ÇÇ } = tr ‚Ä¶
                                     -- ‚ä¢ ‚àÄ (s‚ÇÅ s‚ÇÇ : String) (i‚ÇÅ i‚ÇÇ : Pos), Iterator.hasNext { s := s‚ÇÇ, i := i‚ÇÇ } = tr ‚Ä¶
                                     -- ‚ä¢ ‚àÄ (s‚ÇÅ s‚ÇÇ : String) (i‚ÇÅ i‚ÇÇ : Pos), Iterator.hasNext { s := s‚ÇÇ, i := i‚ÇÇ } = fa ‚Ä¶
  intro ‚ü®cs‚ÇÅ‚ü© ‚ü®cs‚ÇÇ‚ü© i‚ÇÅ i‚ÇÇ <;>
  -- ‚ä¢ Iterator.hasNext { s := { data := cs‚ÇÇ }, i := i‚ÇÇ } = true ‚Üí Iterator.hasNext ‚Ä¶
  -- ‚ä¢ Iterator.hasNext { s := { data := cs‚ÇÇ }, i := i‚ÇÇ } = true ‚Üí Iterator.hasNext ‚Ä¶
  -- ‚ä¢ Iterator.hasNext { s := { data := cs‚ÇÇ }, i := i‚ÇÇ } = true ‚Üí Iterator.hasNext ‚Ä¶
  -- ‚ä¢ Iterator.hasNext { s := { data := cs‚ÇÇ }, i := i‚ÇÇ } = false ‚Üí ltb { s := { da ‚Ä¶
  intros <;>
  -- ‚ä¢ ltb { s := { data := c :: { data := cs‚ÇÅ }.data }, i := i‚ÇÅ + c } { s := { dat ‚Ä¶
  -- ‚ä¢ ltb { s := { data := c :: { data := cs‚ÇÅ }.data }, i := i‚ÇÅ + c } { s := { dat ‚Ä¶
  -- ‚ä¢ ltb { s := { data := c :: { data := cs‚ÇÅ }.data }, i := i‚ÇÅ + c } { s := { dat ‚Ä¶
  -- ‚ä¢ ltb { s := { data := c :: { data := cs‚ÇÅ }.data }, i := i‚ÇÅ + c } { s := { dat ‚Ä¶
  (conv => lhs; rw [ltb]) <;> (conv => rhs; rw [ltb]) <;>
   -- ‚ä¢ (if Iterator.hasNext { s := { data := c :: { data := cs‚ÇÇ }.data }, i := i‚ÇÇ + ‚Ä¶
   -- ‚ä¢ (if Iterator.hasNext { s := { data := c :: { data := cs‚ÇÇ }.data }, i := i‚ÇÇ + ‚Ä¶
   -- ‚ä¢ (if Iterator.hasNext { s := { data := c :: { data := cs‚ÇÇ }.data }, i := i‚ÇÇ + ‚Ä¶
   -- ‚ä¢ (if Iterator.hasNext { s := { data := c :: { data := cs‚ÇÇ }.data }, i := i‚ÇÇ + ‚Ä¶
                               -- ‚ä¢ (if Iterator.hasNext { s := { data := c :: { data := cs‚ÇÇ }.data }, i := i‚ÇÇ + ‚Ä¶
                               -- ‚ä¢ (if Iterator.hasNext { s := { data := c :: { data := cs‚ÇÇ }.data }, i := i‚ÇÇ + ‚Ä¶
                               -- ‚ä¢ (if Iterator.hasNext { s := { data := c :: { data := cs‚ÇÇ }.data }, i := i‚ÇÇ + ‚Ä¶
                               -- ‚ä¢ (if Iterator.hasNext { s := { data := c :: { data := cs‚ÇÇ }.data }, i := i‚ÇÇ + ‚Ä¶
  simp [Iterator.hasNext_cons_addChar, *]
  -- ‚ä¢ (if Iterator.curr { s := { data := c :: cs‚ÇÅ }, i := i‚ÇÅ + c } = Iterator.curr ‚Ä¶
  -- ‚ä¢ (if Iterator.curr { s := { data := c :: cs‚ÇÅ }, i := i‚ÇÅ + c } = Iterator.curr ‚Ä¶
  -- üéâ no goals
  -- üéâ no goals
  ¬∑ rename_i h‚ÇÇ h‚ÇÅ heq ih
    -- ‚ä¢ (if Iterator.curr { s := { data := c :: cs‚ÇÅ }, i := i‚ÇÅ + c } = Iterator.curr ‚Ä¶
    simp [Iterator.curr, get_cons_addChar, Iterator.next, next, *] at *
    -- ‚ä¢ ltb { s := { data := c :: cs‚ÇÅ }, i := i‚ÇÅ + c + get { data := cs‚ÇÇ } i‚ÇÇ } { s  ‚Ä¶
    repeat rw [Pos.addChar_right_comm _ c]
    -- ‚ä¢ ltb { s := { data := c :: cs‚ÇÅ }, i := i‚ÇÅ + get { data := cs‚ÇÇ } i‚ÇÇ + c } { s  ‚Ä¶
    exact ih
    -- üéâ no goals
  ¬∑ rename_i h‚ÇÇ h‚ÇÅ hne
    -- ‚ä¢ (if Iterator.curr { s := { data := c :: cs‚ÇÅ }, i := i‚ÇÅ + c } = Iterator.curr ‚Ä¶
    simp [Iterator.curr, get_cons_addChar, *]
    -- üéâ no goals

@[simp]
theorem lt_iff_toList_lt : ‚àÄ {s‚ÇÅ s‚ÇÇ : String}, s‚ÇÅ < s‚ÇÇ ‚Üî s‚ÇÅ.toList < s‚ÇÇ.toList
| ‚ü®s‚ÇÅ‚ü©, ‚ü®s‚ÇÇ‚ü© => show ltb ‚ü®‚ü®s‚ÇÅ‚ü©, 0‚ü© ‚ü®‚ü®s‚ÇÇ‚ü©, 0‚ü© ‚Üî s‚ÇÅ < s‚ÇÇ by
  induction s‚ÇÅ generalizing s‚ÇÇ <;> cases s‚ÇÇ
  -- ‚ä¢ ltb { s := { data := [] }, i := 0 } { s := { data := s‚ÇÇ }, i := 0 } = true ‚Üî ‚Ä¶
                                   -- ‚ä¢ ltb { s := { data := [] }, i := 0 } { s := { data := [] }, i := 0 } = true ‚Üî ‚Ä¶
                                   -- ‚ä¢ ltb { s := { data := head‚úù :: tail‚úù }, i := 0 } { s := { data := [] }, i :=  ‚Ä¶
  ¬∑ simp
    -- üéâ no goals
  ¬∑ rename_i c‚ÇÇ cs‚ÇÇ; apply iff_of_true
    -- ‚ä¢ ltb { s := { data := [] }, i := 0 } { s := { data := c‚ÇÇ :: cs‚ÇÇ }, i := 0 } = ‚Ä¶
                     -- ‚ä¢ ltb { s := { data := [] }, i := 0 } { s := { data := c‚ÇÇ :: cs‚ÇÇ }, i := 0 } = ‚Ä¶
    ¬∑ rw [ltb]; simp; apply ne_false_of_eq_true; apply decide_eq_true
      -- ‚ä¢ (if Iterator.hasNext { s := { data := c‚ÇÇ :: cs‚ÇÇ }, i := 0 } = true then if I ‚Ä¶
                -- ‚ä¢ Iterator.hasNext { s := { data := c‚ÇÇ :: cs‚ÇÇ }, i := 0 } = false ‚Üí False
                      -- ‚ä¢ Iterator.hasNext { s := { data := c‚ÇÇ :: cs‚ÇÇ }, i := 0 } = true
                                                 -- ‚ä¢ 0.byteIdx < (endPos { data := c‚ÇÇ :: cs‚ÇÇ }).byteIdx
      simp [endPos, utf8ByteSize, utf8ByteSize.go, csize_pos]
      -- üéâ no goals
    ¬∑ apply List.nil_lt_cons
      -- üéâ no goals
  ¬∑ rename_i c‚ÇÅ cs‚ÇÅ ih; apply iff_of_false
    -- ‚ä¢ ltb { s := { data := c‚ÇÅ :: cs‚ÇÅ }, i := 0 } { s := { data := [] }, i := 0 } = ‚Ä¶
                        -- ‚ä¢ ¬¨ltb { s := { data := c‚ÇÅ :: cs‚ÇÅ }, i := 0 } { s := { data := [] }, i := 0 }  ‚Ä¶
    ¬∑ rw [ltb]; simp
      -- ‚ä¢ ¬¨(if Iterator.hasNext { s := { data := [] }, i := 0 } = true then if Iterato ‚Ä¶
                -- üéâ no goals
    ¬∑ apply not_lt_of_lt; apply List.nil_lt_cons
      -- ‚ä¢ [] < c‚ÇÅ :: cs‚ÇÅ
                          -- üéâ no goals
  ¬∑ rename_i c‚ÇÅ cs‚ÇÅ ih c‚ÇÇ cs‚ÇÇ; rw [ltb]
    -- ‚ä¢ ltb { s := { data := c‚ÇÅ :: cs‚ÇÅ }, i := 0 } { s := { data := c‚ÇÇ :: cs‚ÇÇ }, i : ‚Ä¶
                               -- ‚ä¢ (if Iterator.hasNext { s := { data := c‚ÇÇ :: cs‚ÇÇ }, i := 0 } = true then if I ‚Ä¶
    simp [Iterator.hasNext, endPos, utf8ByteSize, utf8ByteSize.go, csize_pos, Iterator.curr, get,
          utf8GetAux, Iterator.next, next]
    split_ifs with h
    -- ‚ä¢ ltb { s := { data := c‚ÇÅ :: cs‚ÇÅ }, i := 0 + c‚ÇÅ } { s := { data := c‚ÇÇ :: cs‚ÇÇ } ‚Ä¶
    ¬∑ subst c‚ÇÇ
      -- ‚ä¢ ltb { s := { data := c‚ÇÅ :: cs‚ÇÅ }, i := 0 + c‚ÇÅ } { s := { data := c‚ÇÅ :: cs‚ÇÇ } ‚Ä¶
      suffices ltb ‚ü®‚ü®c‚ÇÅ :: cs‚ÇÅ‚ü©, ‚ü®csize c‚ÇÅ‚ü©‚ü© ‚ü®‚ü®c‚ÇÅ :: cs‚ÇÇ‚ü©, ‚ü®csize c‚ÇÅ‚ü©‚ü© = ltb ‚ü®‚ü®cs‚ÇÅ‚ü©, 0‚ü© ‚ü®‚ü®cs‚ÇÇ‚ü©, 0‚ü©
        by rw [Pos.zero_addChar_eq, this]; exact (ih cs‚ÇÇ).trans List.Lex.cons_iff.symm
      rw [‚Üê Pos.zero_addChar_eq]
      -- ‚ä¢ ltb { s := { data := c‚ÇÅ :: cs‚ÇÅ }, i := 0 + c‚ÇÅ } { s := { data := c‚ÇÅ :: cs‚ÇÇ } ‚Ä¶
      apply ltb_cons_addChar
      -- üéâ no goals
    ¬∑ refine ‚ü®List.Lex.rel, fun e ‚Ü¶ ?_‚ü©
      -- ‚ä¢ c‚ÇÅ < c‚ÇÇ
      cases e <;> rename_i h'
      -- ‚ä¢ c‚ÇÅ < c‚ÇÅ
                  -- ‚ä¢ c‚ÇÅ < c‚ÇÅ
                  -- ‚ä¢ c‚ÇÅ < c‚ÇÇ
      ¬∑ contradiction
        -- üéâ no goals
      ¬∑ assumption
        -- üéâ no goals
#align string.lt_iff_to_list_lt String.lt_iff_toList_lt

instance LE : LE String :=
  ‚ü®fun s‚ÇÅ s‚ÇÇ ‚Ü¶ ¬¨s‚ÇÇ < s‚ÇÅ‚ü©
#align string.has_le String.LE

instance decidableLE : @DecidableRel String (¬∑ ‚â§ ¬∑) := by
  simp only [LE]
  -- ‚ä¢ DecidableRel fun s‚ÇÅ s‚ÇÇ => ¬¨s‚ÇÇ < s‚ÇÅ
  infer_instance -- short-circuit type class inference
  -- üéâ no goals
#align string.decidable_le String.decidableLE

@[simp]
theorem le_iff_toList_le {s‚ÇÅ s‚ÇÇ : String} : s‚ÇÅ ‚â§ s‚ÇÇ ‚Üî s‚ÇÅ.toList ‚â§ s‚ÇÇ.toList :=
  (not_congr lt_iff_toList_lt).trans not_lt
#align string.le_iff_to_list_le String.le_iff_toList_le

theorem toList_inj {s‚ÇÅ s‚ÇÇ : String} : s‚ÇÅ.toList = s‚ÇÇ.toList ‚Üî s‚ÇÅ = s‚ÇÇ :=
  ‚ü®congr_arg mk, congr_arg toList‚ü©
#align string.to_list_inj String.toList_inj

theorem nil_asString_eq_empty : [].asString = "" :=
  rfl
#align string.nil_as_string_eq_empty String.nil_asString_eq_empty

@[simp]
theorem toList_empty : "".toList = [] :=
  rfl
#align string.to_list_empty String.toList_empty

theorem asString_inv_toList (s : String) : s.toList.asString = s :=
  rfl
#align string.as_string_inv_to_list String.asString_inv_toList

#align string.to_list_singleton String.data_singleton

theorem toList_nonempty : ‚àÄ {s : String}, s ‚â† "" ‚Üí s.toList = s.head :: (s.drop 1).toList
| ‚ü®s‚ü©, h => by
  cases s
  -- ‚ä¢ toList { data := [] } = head { data := [] } :: toList (drop { data := [] } 1)
  ¬∑ simp only at h
    -- üéâ no goals
  ¬∑ rename_i c cs
    -- ‚ä¢ toList { data := c :: cs } = head { data := c :: cs } :: toList (drop { data ‚Ä¶
    simp only [toList, List.cons.injEq]
    -- ‚ä¢ c = head { data := c :: cs } ‚àß cs = (drop { data := c :: cs } 1).data
    constructor <;> [rfl; simp [drop_eq]]
    -- üéâ no goals
#align string.to_list_nonempty String.toList_nonempty

@[simp]
theorem head_empty : "".data.head! = default :=
  rfl
#align string.head_empty String.head_empty

#align string.popn_empty String.drop_empty

instance : LinearOrder String where
  le_refl a := le_iff_toList_le.mpr le_rfl
  le_trans a b c := by
    simp only [le_iff_toList_le]
    -- ‚ä¢ toList a ‚â§ toList b ‚Üí toList b ‚â§ toList c ‚Üí toList a ‚â§ toList c
    apply le_trans
    -- üéâ no goals
  lt_iff_le_not_le a b := by
    simp only [lt_iff_toList_lt, le_iff_toList_le, lt_iff_le_not_le]
    -- üéâ no goals
  le_antisymm a b := by
    simp only [le_iff_toList_le, ‚Üê toList_inj]
    -- ‚ä¢ toList a ‚â§ toList b ‚Üí toList b ‚â§ toList a ‚Üí toList a = toList b
    apply le_antisymm
    -- üéâ no goals
  le_total a b := by
    simp only [le_iff_toList_le]
    -- ‚ä¢ toList a ‚â§ toList b ‚à® toList b ‚â§ toList a
    apply le_total
    -- üéâ no goals
  decidableLE := String.decidableLE
  compare_eq_compareOfLessAndEq a b := by
    simp [compare, compareOfLessAndEq, toList, instLTString, List.instLTList, List.LT']
    -- ‚ä¢ (if List.lt a.data b.data then Ordering.lt else if a = b then Ordering.eq el ‚Ä¶
    split_ifs <;>
    simp [List.lt_iff_lex_lt] at * <;>
    -- üéâ no goals
    -- ‚ä¢ False
    -- ‚ä¢ False
    -- ‚ä¢ False
    -- üéâ no goals
    -- ‚ä¢ False
    -- üéâ no goals
    contradiction
    -- üéâ no goals
    -- üéâ no goals
    -- üéâ no goals
    -- üéâ no goals

end String

open String

theorem List.toList_inv_asString (l : List Char) : l.asString.toList = l :=
  rfl
#align list.to_list_inv_as_string List.toList_inv_asString

@[simp]
theorem List.length_asString (l : List Char) : l.asString.length = l.length :=
  rfl
#align list.length_as_string List.length_asString

@[simp]
theorem List.asString_inj {l l' : List Char} : l.asString = l'.asString ‚Üî l = l' :=
  ‚ü®fun h ‚Ü¶ by rw [‚Üê toList_inv_asString l, ‚Üê toList_inv_asString l', toList_inj, h],
              -- üéâ no goals
   fun h ‚Ü¶ h ‚ñ∏ rfl‚ü©
#align list.as_string_inj List.asString_inj

@[simp]
theorem String.length_data (s : String) : s.data.length = s.length :=
  rfl
#align string.length_to_list String.length_data

theorem List.asString_eq {l : List Char} {s : String} : l.asString = s ‚Üî l = s.toList := by
  rw [‚Üê asString_inv_toList s, asString_inj, asString_inv_toList s]
  -- üéâ no goals
#align list.as_string_eq List.asString_eq
