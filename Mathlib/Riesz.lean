/-
Copyright (c) 2023 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/

import Mathlib.Analysis.Normed.Module.FiniteDimension

/-!
# Une introduction √† Lean par le th√©or√®me de Riesz

Je vais expliquer la preuve du th√©or√®me de Riesz √† l'ordinateur.

Le th√©or√®me de Riesz affirme que si un espace vectoriel r√©el a une boule compacte,
alors il est de dimension finie.

On raisonne par contrapos√©e : si l'espace n'est pas de dimension finie, on va
construire une suite dans la boule de rayon `2` dont tous les points sont √† distance
au moins `1`, ce qui contredirait la compacit√© de la boule.

On construit la suite par r√©currence. Supposons les `n` premiers points construits.
Ils engendrent un sous-espace `F` de dimension finie, qui est complet (par √©quivalence
des normes) donc ferm√©. Soit `x ‚àâ F`, et notons `d` sa distance √† `F` (qui est positive
par fermeture). On choisit `y ‚àà F` avec `dist x y < 2 d`. J'affirme que `d‚Åª¬π * (x - y)`
convient pour le point suivant. Il est bien de norme au plus `2`. De plus, comme `x·µ¢ ‚àà F`,
on a `y + d * x·µ¢ ‚àà F`. Ainsi,
`d ‚â§ dist x (y + d * x·µ¢)`, soit `d ‚â§ ‚Äñd * (d‚Åª¬π * (x - y) - x·µ¢)‚Äñ`,
et donc `1 ‚â§ ‚Äñd‚Åª¬π * (x - y) - x·µ¢‚Äñ` comme on le voulait.

Pour expliquer cette preuve de 10 lignes √† Lean, on va la couper en plusieurs sous-lemmes.
-/

open Filter Metric
open scoped Topology

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]

/-- √âtant donn√© un sous-espace vectoriel ferm√© qui n'est pas tout l'espace, on peut
trouver un point de norme au plus `2` √† distance au moins `1` de tout point
du sous-espace. -/
lemma existe_point_loin_de_sousmodule
    (F : Submodule ‚Ñù E) (hF : ‚àÉ x, x ‚àâ F) (hFc : IsClosed (F : Set E)) :
    ‚àÉ (z : E), ‚Äñz‚Äñ < 2 ‚àß (‚àÄ y ‚àà F, 1 ‚â§ ‚Äñz - y‚Äñ) := by
  obtain ‚ü®x, x_pas_dans_F‚ü© := hF
  let d := infDist x F
  have hFn : (F : Set E).Nonempty := ‚ü®0, F.zero_mem‚ü©
  have d_pos : 0 < d := (IsClosed.not_mem_iff_infDist_pos hFc hFn).1 x_pas_dans_F
  obtain ‚ü®y‚ÇÄ, hy‚ÇÄF, hxy‚ÇÄ‚ü© : ‚àÉ y ‚àà F, dist x y < 2 * d := by
    apply (infDist_lt_iff hFn).1
    exact lt_two_mul_self d_pos
    -- linarith
  let z := d‚Åª¬π ‚Ä¢ (x - y‚ÇÄ)
  have Nz : ‚Äñz‚Äñ < 2 := by
    simpa [z, norm_smul, abs_of_nonneg d_pos.le, ‚Üê div_eq_inv_mul, div_lt_iff‚ÇÄ d_pos,
      ‚Üê dist_eq_norm]
  have I : ‚àÄ y ‚àà F, 1 ‚â§ ‚Äñz - y‚Äñ := by
    intro y hyF
    have A : d ‚â§ dist x (y‚ÇÄ + d ‚Ä¢ y) := by
      apply infDist_le_dist_of_mem
      exact F.add_mem hy‚ÇÄF (F.smul_mem _ hyF)
    have B : d‚Åª¬π * d = 1 := by field_simp [d_pos.ne']
    calc
      1 = d‚Åª¬π * d                    := B.symm
      _ ‚â§ d‚Åª¬π * dist x (y‚ÇÄ + d ‚Ä¢ y)  := mul_le_mul_of_nonneg_left A (inv_nonneg.2 d_pos.le)
      _ = d‚Åª¬π * ‚Äñ(x - y‚ÇÄ) - d ‚Ä¢ y‚Äñ   := by rw [dist_eq_norm, sub_sub]
      _ = ‚Äñd‚Åª¬π ‚Ä¢ ((x - y‚ÇÄ) - d ‚Ä¢ y)‚Äñ := by simp [norm_smul, abs_of_nonneg d_pos.le]
      _ = ‚Äñz - y‚Äñ                    := by simp_rw [z, smul_sub, smul_smul, B, one_smul]
  exact ‚ü®z, Nz, I‚ü©

/-- Dans un espace vectoriel norm√© r√©el de dimension infinie, √©tant donn√© un ensemble
fini de points, on peut trouver un point de norme au plus `2` √† distance au moins `1`
de tous ces points. -/
lemma existe_point_loin_de_fini
    (s : Set E) (hs : Set.Finite s) (h : ¬¨(FiniteDimensional ‚Ñù E)) :
    ‚àÉ (z : E), ‚Äñz‚Äñ < 2 ‚àß (‚àÄ y ‚àà s, 1 ‚â§ ‚Äñz - y‚Äñ) := by
  let F := Submodule.span ‚Ñù s
  have : FiniteDimensional ‚Ñù F := Module.finite_def.2
    ((Submodule.fg_top _).2 (Submodule.fg_def.2 ‚ü®s, hs, rfl‚ü©))
  have Fclosed : IsClosed (F : Set E) := Submodule.closed_of_finiteDimensional _
  have hF : ‚àÉ x, x ‚àâ F := by
    contrapose! h
    have : (‚ä§ : Submodule ‚Ñù E) = F := by ext x; simp [h]
    have : FiniteDimensional ‚Ñù (‚ä§ : Submodule ‚Ñù E) := by rwa [this]
    refine Module.finite_def.2 ((Submodule.fg_top _).1 (Module.finite_def.1 this))
  obtain ‚ü®x, x_lt_2, hx‚ü© : ‚àÉ (x : E), ‚Äñx‚Äñ < 2 ‚àß ‚àÄ (y : E), y ‚àà F ‚Üí 1 ‚â§ ‚Äñx - y‚Äñ :=
    existe_point_loin_de_sousmodule F hF Fclosed
  exact ‚ü®x, x_lt_2, fun y hy ‚Ü¶ hx _ (Submodule.subset_span hy)‚ü©

/-- Dans un espace vectoriel norm√© r√©el de dimension infinie, on peut trouver une
suite de points tous de norme au plus `2` et mutuellement distants d'au moins `1`. -/
lemma existe_suite_loin (h : ¬¨(FiniteDimensional ‚Ñù E)) :
    ‚àÉ (u : ‚Ñï ‚Üí E), (‚àÄ n, ‚Äñu n‚Äñ < 2) ‚àß (‚àÄ m n, m ‚â† n ‚Üí 1 ‚â§ ‚Äñu n - u m‚Äñ) := by
  have : IsSymm E (fun (x y : E) ‚Ü¶ 1 ‚â§ ‚Äñy - x‚Äñ) := by
    constructor
    intro x y hxy
    rw [‚Üê norm_neg]
    simpa
  apply exists_seq_of_forall_finset_exists' (fun (x : E) ‚Ü¶ ‚Äñx‚Äñ < 2)
    (fun (x : E) (y : E) ‚Ü¶ 1 ‚â§ ‚Äñy - x‚Äñ)
  intro s _hs
  exact existe_point_loin_de_fini (s : Set E) s.finite_toSet h

/-- Consid√©rons un espace vectoriel norm√© r√©el dans lequel la boule ferm√©e de rayon `2` est
compacte. Alors cet espace est de dimension finie. -/
theorem ma_version_de_riesz (h : IsCompact (closedBall (0 : E) 2)) :
    FiniteDimensional ‚Ñù E := by
  by_contra hfin
  obtain ‚ü®u, u_lt_two, u_far‚ü© :
    ‚àÉ (u : ‚Ñï ‚Üí E), (‚àÄ n, ‚Äñu n‚Äñ < 2) ‚àß (‚àÄ m n, m ‚â† n ‚Üí 1 ‚â§ ‚Äñu n - u m‚Äñ) :=
    existe_suite_loin hfin
  have A : ‚àÄ n, u n ‚àà closedBall (0 : E) 2 := by
    intro n
    simpa only [norm_smul, dist_zero_right, mem_closedBall] using (u_lt_two n).le
  obtain ‚ü®x, _hx, œÜ, œÜmono, œÜlim‚ü© : ‚àÉ x ‚àà closedBall (0 : E) 2, ‚àÉ (œÜ : ‚Ñï ‚Üí ‚Ñï),
    StrictMono œÜ ‚àß Tendsto (u ‚àò œÜ) atTop (ùìù x) := h.tendsto_subseq A
  have B : CauchySeq (u ‚àò œÜ) := œÜlim.cauchySeq
  obtain ‚ü®N, hN‚ü© : ‚àÉ (N : ‚Ñï), ‚àÄ (n : ‚Ñï), N ‚â§ n ‚Üí dist ((u ‚àò œÜ) n) ((u ‚àò œÜ) N) < 1 :=
    cauchySeq_iff'.1 B 1 zero_lt_one
  apply lt_irrefl (1 : ‚Ñù)
  calc
  1 ‚â§ dist (u (œÜ (N+1))) (u (œÜ N)) := by
    simp only [dist_eq_norm, ‚Üê smul_sub, norm_smul]
    apply u_far
    exact (œÜmono (Nat.lt_succ_self N)).ne
  _ < 1 := hN (N+1) (Nat.le_succ N)

/- La preuve est finie, et prend environ 100 lignes, soit 10 fois plus que la version
informelle. C'est assez typique. -/

theorem la_vraie_version_de_riesz
    (ùïú : Type*) [NontriviallyNormedField ùïú] {F : Type*} [NormedAddCommGroup F]
    [NormedSpace ùïú F] [CompleteSpace ùïú] {r : ‚Ñù}
    (r_pos : 0 < r)  {c : F} (hc : IsCompact (closedBall c r)) :
    FiniteDimensional ùïú F :=
  .of_isCompact_closedBall ùïú r_pos hc
-- by exact?

/- Pour l'√©nonc√© pr√©c√©dent :
  have : (0 : ‚Ñù) < 2 := zero_lt_two
  exact?
-/

/- Les preuves sont v√©rifi√©es par le "noyau". Mais comment se convaincre que les d√©finitions
sont bonnes ? Avec une mauvaise d√©finition, on risque de pouvoir d√©montrer n'importe quoi. -/

def IsSGCompact {Œ± : Type*} (_s : Set Œ±) : Prop := False

theorem riesz_avec_isSGCompact (h : IsSGCompact (closedBall (0 : E) 2)) :
  FiniteDimensional ‚Ñù E :=
False.elim h

theorem antiriesz_avec_isSGCompact (h : IsSGCompact (closedBall (0 : E) 2)) :
  ¬¨(FiniteDimensional ‚Ñù E) :=
False.elim h

/- On peut essayer de d√©rouler les d√©finitions pour voir si elles ont l'air raisonnables. -/

#check IsCompact
#check FiniteDimensional

/- On peut voir si les d√©finitions permettent de d√©montrer des th√©or√®mes raisonnables. -/

example (n : ‚Ñï) : FiniteDimensional ‚Ñù (Fin n ‚Üí ‚Ñù) := by infer_instance

example (n : ‚Ñï) : IsCompact (closedBall (0 : Fin n ‚Üí ‚Ñù) 1) := isCompact_closedBall _ _

example : ¬¨(IsCompact (Set.univ : Set ‚Ñù)) := noncompact_univ ‚Ñù

example {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [Nontrivial E] :
  ¬¨(IsCompact (Set.univ : Set E)) := noncompact_univ E
