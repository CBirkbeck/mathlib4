/-
Copyright (c) 2024 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import Mathlib.Tactic.CategoryTheory.Coherence.PureCoherence
import Mathlib.CategoryTheory.Category.Basic

import Mathlib.Util.CountHeartbeats

open Lean Meta

namespace Mathlib.Tactic

namespace BicategoryLike


open BicategoryLike

section

/-- The result of evaluating an expression into normal form. -/
structure Eval.Result where
  /-- The normalized expression of the 2-morphism. -/
  expr : NormalExpr
  /-- The proof that the normalized expression is equal to the original expression. -/
  proof : Expr
  deriving Inhabited

-- def structuralAtom? (e : Expr) : m (Option StructuralIsoAtom) := sorry

variable {m : Type ‚Üí Type} [Monad m]

class MkEvalComp (m : Type ‚Üí Type) where
  mkEvalCompNilNil (Œ± Œ≤ : StructuralIso) : m Expr
  mkEvalCompNilCons (Œ± Œ≤ : StructuralIso) (Œ∑ : WhiskerLeft) (Œ∑s : NormalExpr) : m Expr
  mkEvalCompCons (Œ± : StructuralIso) (Œ∑ : WhiskerLeft) (Œ∑s Œ∏ Œπ : NormalExpr) (e_Œ∑ : Expr) : m Expr

/-- Evaluatte the expression `f ‚óÅ Œ∑`. -/
class MkEvalWhiskerLeft (m : Type ‚Üí Type) where
  /-- Evaluatte `f ‚óÅ Œ±` -/
  mkEvalWhiskerLeftNil (f : Mor‚ÇÅ) (Œ± : StructuralIso) : m Expr
  /-- Evaluate `f ‚óÅ (Œ± ‚â´ Œ∑ ‚â´ Œ∑s)`. -/
  mkEvalWhiskerLeftOfCons (f : Atom‚ÇÅ) (Œ± : StructuralIso) (Œ∑ : WhiskerLeft) (Œ∑s Œ∏ : NormalExpr)
    (e_Œ∏ : Expr) : m Expr
  /-- Evaluate `(f ‚â´ g) ‚óÅ Œ∑` -/
  mkEvalWhiskerLeftComp (f g : Mor‚ÇÅ) (Œ∑ Œ∑‚ÇÅ Œ∑‚ÇÇ Œ∑‚ÇÉ Œ∑‚ÇÑ : NormalExpr)
    (e_Œ∑‚ÇÅ e_Œ∑‚ÇÇ e_Œ∑‚ÇÉ e_Œ∑‚ÇÑ : Expr) : m Expr
  /-- Evaluate `ùüô _ ‚óÅ Œ∑` -/
  mkEvalWhiskerLeftId (Œ∑ Œ∑‚ÇÅ Œ∑‚ÇÇ : NormalExpr) (e_Œ∑‚ÇÅ e_Œ∑‚ÇÇ : Expr) : m Expr

-- class MkEvalWhiskerRightAux (m : Type ‚Üí Type) where
--   /-- Evaluate `Œ∑ ‚ñ∑ f` -/
--   mkEvalWhiskerRightAuxOf (Œ∑ : WhiskerRight) (f : Atom‚ÇÅ) : m Expr
--   /-- Evaluate `(Œ∑ ‚ó´ Œ∑s) ‚ñ∑ f` -/
--   mkEvalWhiskerRightAuxCons (f : Atom‚ÇÅ) (Œ∑ : WhiskerRight) (Œ∑s : HorizontalComp)
--     (Œ∑sf Œ∑Œ∑sf Œ∑Œ∑sf' Œ∑Œ∑sf'' : NormalExpr) (e_Œ∑sf e_Œ∑Œ∑sf e_Œ∑Œ∑sf' e_Œ∑Œ∑sf'' : Expr) : m Expr

class MkEvalWhiskerRight (m : Type ‚Üí Type) where
  /-- Evaluate `Œ∑ ‚ñ∑ f` -/
  mkEvalWhiskerRightAuxOf (Œ∑ : WhiskerRight) (f : Atom‚ÇÅ) : m Expr
  /-- Evaluate `(Œ∑ ‚ó´ Œ∑s) ‚ñ∑ f` -/
  mkEvalWhiskerRightAuxCons (f : Atom‚ÇÅ) (Œ∑ : WhiskerRight) (Œ∑s : HorizontalComp)
    (Œ∑s' Œ∑‚ÇÅ Œ∑‚ÇÇ Œ∑‚ÇÉ : NormalExpr) (e_Œ∑s' e_Œ∑‚ÇÅ e_Œ∑‚ÇÇ e_Œ∑‚ÇÉ : Expr) : m Expr
  /-- Evaluate `Œ± ‚ñ∑ f` -/
  mkEvalWhiskerRightNil (Œ± : StructuralIso) (f : Mor‚ÇÅ) : m Expr
  mkEvalWhiskerRightConsOfOf (f : Atom‚ÇÅ) (Œ± : StructuralIso) (Œ∑ : HorizontalComp)
    (Œ∑s Œ∑s‚ÇÅ Œ∑‚ÇÅ Œ∑‚ÇÇ Œ∑‚ÇÉ : NormalExpr)
    (e_Œ∑s‚ÇÅ e_Œ∑‚ÇÅ e_Œ∑‚ÇÇ e_Œ∑‚ÇÉ : Expr) : m Expr
  /-- Evaluate `(Œ± ‚â´ (f ‚óÅ Œ∑) ‚â´ Œ∑s) ‚ñ∑ g` -/
  mkEvalWhiskerRightConsWhisker (f : Atom‚ÇÅ) (g : Mor‚ÇÅ) (Œ± : StructuralIso) (Œ∑ : WhiskerLeft)
    (Œ∑s Œ∑‚ÇÅ Œ∑‚ÇÇ Œ∑s‚ÇÅ Œ∑s‚ÇÇ Œ∑‚ÇÉ Œ∑‚ÇÑ Œ∑‚ÇÖ : NormalExpr) (e_Œ∑‚ÇÅ e_Œ∑‚ÇÇ e_Œ∑s‚ÇÅ e_Œ∑s‚ÇÇ e_Œ∑‚ÇÉ e_Œ∑‚ÇÑ e_Œ∑‚ÇÖ : Expr) : m Expr
  mkEvalWhiskerRightComp (g h : Mor‚ÇÅ)
    (Œ∑ Œ∑‚ÇÅ Œ∑‚ÇÇ Œ∑‚ÇÉ Œ∑‚ÇÑ : NormalExpr) (e_Œ∑‚ÇÅ e_Œ∑‚ÇÇ e_Œ∑‚ÇÉ e_Œ∑‚ÇÑ : Expr) : m Expr
  mkEvalWhiskerRightId (Œ∑ Œ∑‚ÇÅ Œ∑‚ÇÇ : NormalExpr) (e_Œ∑‚ÇÅ e_Œ∑‚ÇÇ : Expr) : m Expr

class MkEvalHorizontalComp (m : Type ‚Üí Type) where
  mkEvalHorizontalCompAuxOf (Œ∑ : WhiskerRight) (Œ∏ : HorizontalComp) : m Expr
  mkEvalHorizontalCompAuxCons (Œ∑ : WhiskerRight) (Œ∑s Œ∏ : HorizontalComp)
    (Œ∑Œ∏ Œ∑‚ÇÅ Œ∑Œ∏‚ÇÅ Œ∑Œ∏‚ÇÇ : NormalExpr) (e_Œ∑Œ∏ e_Œ∑‚ÇÅ e_Œ∑Œ∏‚ÇÅ e_Œ∑Œ∏‚ÇÇ : Expr) : m Expr
  mkEvalHorizontalCompAux'Whisker (f : Atom‚ÇÅ) (Œ∑ Œ∏ : WhiskerLeft)
    (Œ∑Œ∏ Œ∑Œ∏‚ÇÅ Œ∑Œ∏‚ÇÇ Œ∑Œ∏‚ÇÉ : NormalExpr) (e_Œ∑Œ∏ e_Œ∑Œ∏‚ÇÅ e_Œ∑Œ∏‚ÇÇ e_Œ∑Œ∏‚ÇÉ : Expr) : m Expr
  mkEvalHorizontalCompAux'OfWhisker (f : Atom‚ÇÅ) (Œ∑ : HorizontalComp) (Œ∏ : WhiskerLeft)
    (Œ∑‚ÇÅ Œ∑Œ∏ Œ∑Œ∏‚ÇÅ Œ∑Œ∏‚ÇÇ : NormalExpr) (e_Œ∑Œ∏ e_Œ∑‚ÇÅ e_Œ∑Œ∏‚ÇÅ e_Œ∑Œ∏‚ÇÇ : Expr) : m Expr
  mkEvalHorizontalCompNilNil (Œ± Œ≤ : StructuralIso) : m Expr
  mkEvalHorizontalCompNilCons (Œ± Œ≤ : StructuralIso) (Œ∑ : WhiskerLeft)
    (Œ∑s Œ∑‚ÇÅ Œ∑s‚ÇÅ Œ∑‚ÇÇ Œ∑‚ÇÉ : NormalExpr) (e_Œ∑‚ÇÅ e_Œ∑s‚ÇÅ e_Œ∑‚ÇÇ e_Œ∑‚ÇÉ : Expr) : m Expr
  mkEvalHorizontalCompConsNil (Œ± Œ≤ : StructuralIso) (Œ∑ : WhiskerLeft) (Œ∑s : NormalExpr)
    (Œ∑‚ÇÅ Œ∑s‚ÇÅ Œ∑‚ÇÇ Œ∑‚ÇÉ : NormalExpr) (e_Œ∑‚ÇÅ e_Œ∑s‚ÇÅ e_Œ∑‚ÇÇ e_Œ∑‚ÇÉ : Expr) : m Expr
  mkEvalHorizontalCompConsCons (Œ± Œ≤ : StructuralIso) (Œ∑ Œ∏ : WhiskerLeft)
    (Œ∑s Œ∏s Œ∑Œ∏ Œ∑Œ∏s Œ∑Œ∏‚ÇÅ Œ∑Œ∏‚ÇÇ : NormalExpr) (e_Œ∑Œ∏ e_Œ∑Œ∏s e_Œ∑Œ∏‚ÇÅ e_Œ∑Œ∏‚ÇÇ : Expr) : m Expr

class MkEval (m : Type ‚Üí Type) extends
    MkEvalComp m, MkEvalWhiskerLeft m, MkEvalWhiskerRight m, MkEvalHorizontalComp m where
  mkEvalComp (Œ∑ Œ∏ : Mor‚ÇÇ) (Œ∑' Œ∏' Œ∑Œ∏ : NormalExpr) (e_Œ∑ e_Œ∏ e_Œ∑Œ∏ : Expr) : m Expr
  mkEvalWhiskerLeft (f : Mor‚ÇÅ) (Œ∑ : Mor‚ÇÇ) (Œ∑' Œ∏ : NormalExpr) (e_Œ∑ e_Œ∏ : Expr) : m Expr
  mkEvalWhiskerRight (Œ∑ : Mor‚ÇÇ) (h : Mor‚ÇÅ) (Œ∑' Œ∏ : NormalExpr) (e_Œ∑ e_Œ∏ : Expr) : m Expr
  mkEvalHorizontalComp (Œ∑ Œ∏ : Mor‚ÇÇ) (Œ∑' Œ∏' Œπ : NormalExpr) (e_Œ∑ e_Œ∏ e_Œπ : Expr) : m Expr
  mkEvalOf (Œ∑ : Atom) : m Expr
  mkEvalMonoidalComp (Œ∑ Œ∏ : Mor‚ÇÇ) (Œ± : StructuralIso) (Œ∑' Œ∏' Œ±Œ∏ Œ∑Œ±Œ∏ : NormalExpr)
    (e_Œ∑ e_Œ∏ e_Œ±Œ∏ e_Œ∑Œ±Œ∏ : Expr) : m Expr

variable {œÅ : Type} [Context œÅ]
variable [MonadMor‚ÇÇIso (CoherenceM œÅ)] [MonadNormalExpr (CoherenceM œÅ)] [MkEval (CoherenceM œÅ)]

open MkEvalComp MonadMor‚ÇÇIso MonadNormalExpr


def evalCompNil (Œ± : StructuralIso) :
    NormalExpr ‚Üí CoherenceM œÅ Eval.Result
  | .nil _ Œ≤ => do return ‚ü®‚Üê nilM (‚Üê comp‚ÇÇM Œ± Œ≤), ‚Üê mkEvalCompNilNil Œ± Œ≤‚ü©
  | .cons _ Œ≤ Œ∑ Œ∑s => do return ‚ü®‚Üê consM (‚Üê comp‚ÇÇM Œ± Œ≤) Œ∑ Œ∑s, ‚Üê mkEvalCompNilCons Œ± Œ≤ Œ∑ Œ∑s‚ü©

/-- Evaluate the expression `Œ∑ ‚â´ Œ∏` into a normalized form. -/
def evalComp : NormalExpr ‚Üí NormalExpr ‚Üí  CoherenceM œÅ Eval.Result
  | .nil _ Œ±, Œ∑ => do evalCompNil Œ± Œ∑
  | .cons _ Œ± Œ∑ Œ∑s, Œ∏ => do
    let ‚ü®Œπ, e_Œπ‚ü© ‚Üê evalComp Œ∑s Œ∏
    return ‚ü®‚Üê consM Œ± Œ∑ Œπ, ‚Üê mkEvalCompCons Œ± Œ∑ Œ∑s Œ∏ Œπ e_Œπ‚ü©

open MkEvalWhiskerLeft

variable [MonadMor‚ÇÅ (CoherenceM œÅ)] [MonadStructuralIsoAtom (CoherenceM œÅ)]

/-- Evaluate the expression `f ‚óÅ Œ∑` into a normalized form. -/
def evalWhiskerLeft :
    Mor‚ÇÅ ‚Üí NormalExpr ‚Üí CoherenceM œÅ Eval.Result
  | f, .nil _ Œ± => do
    return ‚ü®‚Üê nilM (‚Üê whiskerLeftM f Œ±), ‚Üê mkEvalWhiskerLeftNil f Œ±‚ü©
  | .of f, .cons _ Œ± Œ∑ Œ∑s => do
    let Œ∑' ‚Üê MonadWhiskerLeft.whiskerLeftM f Œ∑
    let ‚ü®Œ∏, e_Œ∏‚ü© ‚Üê evalWhiskerLeft (.of f) Œ∑s
    let Œ∑'' ‚Üê consM (‚Üê whiskerLeftM (.of f) Œ±) Œ∑' Œ∏
    return ‚ü®Œ∑'', ‚Üê mkEvalWhiskerLeftOfCons f Œ± Œ∑ Œ∑s Œ∏ e_Œ∏‚ü©
  | .comp _ f g, Œ∑ => do
    let ‚ü®Œ∏, e_Œ∏‚ü© ‚Üê evalWhiskerLeft g Œ∑
    let ‚ü®Œπ, e_Œπ‚ü© ‚Üê evalWhiskerLeft f Œ∏
    let h ‚Üê Œ∑.srcM
    let h' ‚Üê Œ∑.tgtM
    let ‚ü®Œπ', e_Œπ'‚ü© ‚Üê evalComp Œπ (‚Üê NormalExpr.associatorInvM f g h')
    let ‚ü®Œπ'', e_Œπ''‚ü© ‚Üê evalComp (‚Üê NormalExpr.associatorM f g h) Œπ'
    return ‚ü®Œπ'', ‚Üê mkEvalWhiskerLeftComp f g Œ∑ Œ∏ Œπ Œπ' Œπ'' e_Œ∏ e_Œπ e_Œπ' e_Œπ''‚ü©
  | .id _ _, Œ∑ => do
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let ‚ü®Œ∑', e_Œ∑'‚ü© ‚Üê evalComp Œ∑ (‚Üê NormalExpr.leftUnitorInvM g)
    let ‚ü®Œ∑'', e_Œ∑''‚ü© ‚Üê evalComp (‚Üê NormalExpr.leftUnitorM f) Œ∑'
    return ‚ü®Œ∑'', ‚Üê mkEvalWhiskerLeftId Œ∑ Œ∑' Œ∑'' e_Œ∑' e_Œ∑''‚ü©

open MkEvalWhiskerRight MkEvalHorizontalComp
open MonadMor‚ÇÇIso Mor‚ÇÇIso


mutual

/-- Evaluate the expression `Œ∑ ‚ñ∑ f` into a normalized form. -/
partial def evalWhiskerRightAux : HorizontalComp ‚Üí Atom‚ÇÅ ‚Üí CoherenceM œÅ Eval.Result
  | .of Œ∑, f => do
    let Œ∑' ‚Üê NormalExpr.ofM <| .of <| .of <| ‚Üê MonadWhiskerRight.whiskerRightM Œ∑ f
    return ‚ü®Œ∑', ‚Üê mkEvalWhiskerRightAuxOf Œ∑ f‚ü©
  | .cons _ Œ∑ Œ∑s, f => do
    let ‚ü®Œ∑s', e_Œ∑s'‚ü© ‚Üê evalWhiskerRightAux Œ∑s f
    let ‚ü®Œ∑‚ÇÅ, e_Œ∑‚ÇÅ‚ü© ‚Üê evalHorizontalComp (‚Üê NormalExpr.ofM <| .of <| .of Œ∑) Œ∑s'
    let ‚ü®Œ∑‚ÇÇ, e_Œ∑‚ÇÇ‚ü© ‚Üê evalComp Œ∑‚ÇÅ (‚Üê NormalExpr.associatorInvM (‚Üê Œ∑.tgtM) (‚Üê Œ∑s.tgtM) (.of f))
    let ‚ü®Œ∑‚ÇÉ, e_Œ∑‚ÇÉ‚ü© ‚Üê evalComp (‚Üê NormalExpr.associatorM (‚Üê Œ∑.srcM) (‚Üê Œ∑s.srcM) (.of f)) Œ∑‚ÇÇ
    return ‚ü®Œ∑‚ÇÉ, ‚Üê mkEvalWhiskerRightAuxCons f Œ∑ Œ∑s Œ∑s' Œ∑‚ÇÅ Œ∑‚ÇÇ Œ∑‚ÇÉ e_Œ∑s' e_Œ∑‚ÇÅ e_Œ∑‚ÇÇ e_Œ∑‚ÇÉ‚ü©

/-- Evaluate the expression `Œ∑ ‚ñ∑ f` into a normalized form. -/
partial def evalWhiskerRight : NormalExpr ‚Üí Mor‚ÇÅ ‚Üí CoherenceM œÅ Eval.Result
  | .nil _ Œ±, h => do
    return ‚ü®‚Üê nilM (‚Üê whiskerRightM Œ± h), ‚Üê mkEvalWhiskerRightNil Œ± h‚ü©
  | .cons _ Œ± (.of Œ∑) Œ∑s, .of f => do
    let ‚ü®Œ∑s‚ÇÅ, e_Œ∑s‚ÇÅ‚ü© ‚Üê evalWhiskerRight Œ∑s (.of f)
    let ‚ü®Œ∑‚ÇÅ, e_Œ∑‚ÇÅ‚ü© ‚Üê evalWhiskerRightAux Œ∑ f
    let ‚ü®Œ∑‚ÇÇ, e_Œ∑‚ÇÇ‚ü© ‚Üê evalComp Œ∑‚ÇÅ Œ∑s‚ÇÅ
    let ‚ü®Œ∑‚ÇÉ, e_Œ∑‚ÇÉ‚ü© ‚Üê evalCompNil (‚Üê whiskerRightM Œ± (.of f)) Œ∑‚ÇÇ
    return ‚ü®Œ∑‚ÇÉ, ‚Üê mkEvalWhiskerRightConsOfOf f Œ± Œ∑ Œ∑s Œ∑s‚ÇÅ Œ∑‚ÇÅ Œ∑‚ÇÇ Œ∑‚ÇÉ e_Œ∑s‚ÇÅ e_Œ∑‚ÇÅ e_Œ∑‚ÇÇ e_Œ∑‚ÇÉ‚ü©
  | .cons _ Œ± (.whisker _ f Œ∑) Œ∑s, h => do
    let g ‚Üê Œ∑.srcM
    let g' ‚Üê Œ∑.tgtM
    let ‚ü®Œ∑‚ÇÅ, e_Œ∑‚ÇÅ‚ü© ‚Üê evalWhiskerRight (‚Üê consM (‚Üê id‚ÇÇM' g) Œ∑ (‚Üê NormalExpr.idM g')) h
    let ‚ü®Œ∑‚ÇÇ, e_Œ∑‚ÇÇ‚ü© ‚Üê evalWhiskerLeft (.of f) Œ∑‚ÇÅ
    let ‚ü®Œ∑s‚ÇÅ, e_Œ∑s‚ÇÅ‚ü© ‚Üê evalWhiskerRight Œ∑s h
    let Œ±' ‚Üê whiskerRightM Œ± h
    let ‚ü®Œ∑s‚ÇÇ, e_Œ∑s‚ÇÇ‚ü© ‚Üê evalComp (‚Üê NormalExpr.associatorInvM (.of f) g' h) Œ∑s‚ÇÅ
    let ‚ü®Œ∑‚ÇÉ, e_Œ∑‚ÇÉ‚ü© ‚Üê evalComp Œ∑‚ÇÇ Œ∑s‚ÇÇ
    let ‚ü®Œ∑‚ÇÑ, e_Œ∑‚ÇÑ‚ü© ‚Üê evalComp (‚Üê NormalExpr.associatorM (.of f) g h) Œ∑‚ÇÉ
    let ‚ü®Œ∑‚ÇÖ, e_Œ∑‚ÇÖ‚ü© ‚Üê evalComp (‚Üê nilM Œ±') Œ∑‚ÇÑ
    return ‚ü®Œ∑‚ÇÖ, ‚Üê mkEvalWhiskerRightConsWhisker f h Œ± Œ∑ Œ∑s Œ∑‚ÇÅ Œ∑‚ÇÇ Œ∑s‚ÇÅ Œ∑s‚ÇÇ Œ∑‚ÇÉ Œ∑‚ÇÑ Œ∑‚ÇÖ
      e_Œ∑‚ÇÅ e_Œ∑‚ÇÇ e_Œ∑s‚ÇÅ e_Œ∑s‚ÇÇ e_Œ∑‚ÇÉ e_Œ∑‚ÇÑ e_Œ∑‚ÇÖ‚ü©
  | Œ∑, .comp _ g h => do
    let ‚ü®Œ∑‚ÇÅ, e_Œ∑‚ÇÅ‚ü© ‚Üê evalWhiskerRight Œ∑ g
    let ‚ü®Œ∑‚ÇÇ, e_Œ∑‚ÇÇ‚ü© ‚Üê evalWhiskerRight Œ∑‚ÇÅ h
    let f ‚Üê Œ∑.srcM
    let f' ‚Üê Œ∑.tgtM
    let ‚ü®Œ∑‚ÇÉ, e_Œ∑‚ÇÉ‚ü© ‚Üê evalComp Œ∑‚ÇÇ (‚Üê NormalExpr.associatorM f' g h)
    let ‚ü®Œ∑‚ÇÑ, e_Œ∑‚ÇÑ‚ü© ‚Üê evalComp (‚Üê NormalExpr.associatorInvM f g h) Œ∑‚ÇÉ
    return ‚ü®Œ∑‚ÇÑ, ‚Üê mkEvalWhiskerRightComp g h Œ∑ Œ∑‚ÇÅ Œ∑‚ÇÇ Œ∑‚ÇÉ Œ∑‚ÇÑ e_Œ∑‚ÇÅ e_Œ∑‚ÇÇ e_Œ∑‚ÇÉ e_Œ∑‚ÇÑ‚ü©
  | Œ∑, .id _ _ => do
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let ‚ü®Œ∑‚ÇÅ, e_Œ∑‚ÇÅ‚ü© ‚Üê evalComp Œ∑ (‚Üê NormalExpr.rightUnitorInvM g)
    let ‚ü®Œ∑‚ÇÇ, e_Œ∑‚ÇÇ‚ü© ‚Üê evalComp (‚Üê NormalExpr.rightUnitorM f) Œ∑‚ÇÅ
    return ‚ü®Œ∑‚ÇÇ, ‚Üê mkEvalWhiskerRightId Œ∑ Œ∑‚ÇÅ Œ∑‚ÇÇ e_Œ∑‚ÇÅ e_Œ∑‚ÇÇ‚ü©

/-- Evaluate the expression `Œ∑ ‚äó Œ∏` into a normalized form. -/
partial def evalHorizontalCompAux : HorizontalComp ‚Üí HorizontalComp ‚Üí CoherenceM œÅ Eval.Result
  | .of Œ∑, Œ∏ => do
    return ‚ü®‚Üê NormalExpr.ofM <| .of <| ‚Üê MonadHorizontalComp.hConsM Œ∑ Œ∏,
      ‚Üê mkEvalHorizontalCompAuxOf Œ∑ Œ∏‚ü©
  | .cons _ Œ∑ Œ∑s, Œ∏ => do
    let Œ± ‚Üê NormalExpr.associatorM (‚Üê Œ∑.srcM) (‚Üê Œ∑s.srcM) (‚Üê Œ∏.srcM)
    let Œ±' ‚Üê NormalExpr.associatorInvM (‚Üê Œ∑.tgtM) (‚Üê Œ∑s.tgtM) (‚Üê Œ∏.tgtM)
    let ‚ü®Œ∑Œ∏, e_Œ∑Œ∏‚ü© ‚Üê evalHorizontalCompAux Œ∑s Œ∏
    let ‚ü®Œ∑‚ÇÅ, e_Œ∑‚ÇÅ‚ü© ‚Üê evalHorizontalComp (‚Üê NormalExpr.ofM <| .of <| .of Œ∑) Œ∑Œ∏
    let ‚ü®Œ∑Œ∏‚ÇÅ, e_Œ∑Œ∏‚ÇÅ‚ü© ‚Üê evalComp Œ∑‚ÇÅ Œ±'
    let ‚ü®Œ∑Œ∏‚ÇÇ, e_Œ∑Œ∏‚ÇÇ‚ü© ‚Üê evalComp Œ± Œ∑Œ∏‚ÇÅ
    return ‚ü®Œ∑Œ∏‚ÇÇ, ‚Üê mkEvalHorizontalCompAuxCons Œ∑ Œ∑s Œ∏ Œ∑Œ∏ Œ∑‚ÇÅ Œ∑Œ∏‚ÇÅ Œ∑Œ∏‚ÇÇ e_Œ∑Œ∏ e_Œ∑‚ÇÅ e_Œ∑Œ∏‚ÇÅ e_Œ∑Œ∏‚ÇÇ‚ü©

/-- Evaluate the expression `Œ∑ ‚äó Œ∏` into a normalized form. -/
partial def evalHorizontalCompAux' : WhiskerLeft ‚Üí WhiskerLeft ‚Üí CoherenceM œÅ Eval.Result
  | .of Œ∑, .of Œ∏ => evalHorizontalCompAux Œ∑ Œ∏
  | .whisker _ f Œ∑, Œ∏ => do
    let ‚ü®Œ∑Œ∏, e_Œ∑Œ∏‚ü© ‚Üê evalHorizontalCompAux' Œ∑ Œ∏
    let ‚ü®Œ∑Œ∏‚ÇÅ, e_Œ∑Œ∏‚ÇÅ‚ü© ‚Üê evalWhiskerLeft (.of f) Œ∑Œ∏
    let ‚ü®Œ∑Œ∏‚ÇÇ, e_Œ∑Œ∏‚ÇÇ‚ü© ‚Üê evalComp Œ∑Œ∏‚ÇÅ (‚Üê NormalExpr.associatorInvM (.of f) (‚Üê Œ∑.tgtM) (‚Üê Œ∏.tgtM))
    let ‚ü®Œ∑Œ∏‚ÇÉ, e_Œ∑Œ∏‚ÇÉ‚ü© ‚Üê evalComp (‚Üê NormalExpr.associatorM (.of f) (‚Üê Œ∑.srcM) (‚Üê Œ∏.srcM)) Œ∑Œ∏‚ÇÇ
    return ‚ü®Œ∑Œ∏‚ÇÉ, ‚Üê mkEvalHorizontalCompAux'Whisker f Œ∑ Œ∏ Œ∑Œ∏ Œ∑Œ∏‚ÇÅ Œ∑Œ∏‚ÇÇ Œ∑Œ∏‚ÇÉ e_Œ∑Œ∏ e_Œ∑Œ∏‚ÇÅ e_Œ∑Œ∏‚ÇÇ e_Œ∑Œ∏‚ÇÉ‚ü©
  | .of Œ∑, .whisker _ f Œ∏ => do
    let ‚ü®Œ∑‚ÇÅ, e_Œ∑‚ÇÅ‚ü© ‚Üê evalWhiskerRightAux Œ∑ f
    let ‚ü®Œ∑Œ∏, e_Œ∑Œ∏‚ü© ‚Üê evalHorizontalComp Œ∑‚ÇÅ (‚Üê NormalExpr.ofM Œ∏)
    let ‚ü®Œ∑Œ∏‚ÇÅ, e_Œ∑Œ∏‚ÇÅ‚ü© ‚Üê evalComp Œ∑Œ∏ (‚Üê NormalExpr.associatorM (‚Üê Œ∑.tgtM) (.of f) (‚Üê Œ∏.tgtM))
    let ‚ü®Œ∑Œ∏‚ÇÇ, e_Œ∑Œ∏‚ÇÇ‚ü© ‚Üê evalComp (‚Üê NormalExpr.associatorInvM (‚Üê Œ∑.srcM) (.of f) (‚Üê Œ∏.srcM)) Œ∑Œ∏‚ÇÅ
    return ‚ü®Œ∑Œ∏‚ÇÇ, ‚Üê mkEvalHorizontalCompAux'OfWhisker f Œ∑ Œ∏ Œ∑Œ∏ Œ∑‚ÇÅ Œ∑Œ∏‚ÇÅ Œ∑Œ∏‚ÇÇ e_Œ∑‚ÇÅ e_Œ∑Œ∏ e_Œ∑Œ∏‚ÇÅ e_Œ∑Œ∏‚ÇÇ‚ü©

/-- Evaluate the expression `Œ∑ ‚äó Œ∏` into a normalized form. -/
partial def evalHorizontalComp : NormalExpr ‚Üí NormalExpr ‚Üí CoherenceM œÅ Eval.Result
  | .nil _ Œ±, .nil _ Œ≤ => do
    return ‚ü®‚Üê nilM <| ‚Üê horizontalCompM Œ± Œ≤, ‚Üê mkEvalHorizontalCompNilNil Œ± Œ≤‚ü©
  | .nil _ Œ±, .cons _ Œ≤ Œ∑ Œ∑s => do
    let ‚ü®Œ∑‚ÇÅ, e_Œ∑‚ÇÅ‚ü© ‚Üê evalWhiskerLeft (‚Üê Œ±.tgtM) (‚Üê NormalExpr.ofM Œ∑)
    let ‚ü®Œ∑s‚ÇÅ, e_Œ∑s‚ÇÅ‚ü© ‚Üê evalWhiskerLeft (‚Üê Œ±.tgtM) Œ∑s
    let ‚ü®Œ∑‚ÇÇ, e_Œ∑‚ÇÇ‚ü© ‚Üê evalComp Œ∑‚ÇÅ Œ∑s‚ÇÅ
    let ‚ü®Œ∑‚ÇÉ, e_Œ∑‚ÇÉ‚ü© ‚Üê evalCompNil (‚Üê horizontalCompM Œ± Œ≤) Œ∑‚ÇÇ
    return ‚ü®Œ∑‚ÇÉ, ‚Üê mkEvalHorizontalCompNilCons Œ± Œ≤ Œ∑ Œ∑s Œ∑‚ÇÅ Œ∑s‚ÇÅ Œ∑‚ÇÇ Œ∑‚ÇÉ e_Œ∑‚ÇÅ e_Œ∑s‚ÇÅ e_Œ∑‚ÇÇ e_Œ∑‚ÇÉ‚ü©
  | .cons _ Œ± Œ∑ Œ∑s, .nil _ Œ≤ => do
    let ‚ü®Œ∑‚ÇÅ, e_Œ∑‚ÇÅ‚ü© ‚Üê evalWhiskerRight (‚Üê NormalExpr.ofM Œ∑) (‚Üê Œ≤.tgtM)
    let ‚ü®Œ∑s‚ÇÅ, e_Œ∑s‚ÇÅ‚ü© ‚Üê evalWhiskerRight Œ∑s (‚Üê Œ≤.tgtM)
    let ‚ü®Œ∑‚ÇÇ, e_Œ∑‚ÇÇ‚ü© ‚Üê evalComp Œ∑‚ÇÅ Œ∑s‚ÇÅ
    let ‚ü®Œ∑‚ÇÉ, e_Œ∑‚ÇÉ‚ü© ‚Üê evalCompNil (‚Üê horizontalCompM Œ± Œ≤) Œ∑‚ÇÇ
    return ‚ü®Œ∑‚ÇÉ, ‚Üê mkEvalHorizontalCompConsNil Œ± Œ≤ Œ∑ Œ∑s Œ∑‚ÇÅ Œ∑s‚ÇÅ Œ∑‚ÇÇ Œ∑‚ÇÉ e_Œ∑‚ÇÅ e_Œ∑s‚ÇÅ e_Œ∑‚ÇÇ e_Œ∑‚ÇÉ‚ü©
  | .cons _ Œ± Œ∑ Œ∑s, .cons _ Œ≤ Œ∏ Œ∏s => do
    let ‚ü®Œ∑Œ∏, e_Œ∑Œ∏‚ü© ‚Üê evalHorizontalCompAux' Œ∑ Œ∏
    let ‚ü®Œ∑Œ∏s, e_Œ∑Œ∏s‚ü© ‚Üê evalHorizontalComp Œ∑s Œ∏s
    let ‚ü®Œ∑Œ∏‚ÇÅ, e_Œ∑Œ∏‚ÇÅ‚ü© ‚Üê evalComp Œ∑Œ∏ Œ∑Œ∏s
    let ‚ü®Œ∑Œ∏‚ÇÇ, e_Œ∑Œ∏‚ÇÇ‚ü© ‚Üê evalCompNil (‚Üê horizontalCompM Œ± Œ≤) Œ∑Œ∏‚ÇÅ
    return ‚ü®Œ∑Œ∏‚ÇÇ,
      ‚Üê mkEvalHorizontalCompConsCons Œ± Œ≤ Œ∑ Œ∏ Œ∑s Œ∏s Œ∑Œ∏ Œ∑Œ∏s Œ∑Œ∏‚ÇÅ Œ∑Œ∏‚ÇÇ e_Œ∑Œ∏ e_Œ∑Œ∏s e_Œ∑Œ∏‚ÇÅ e_Œ∑Œ∏‚ÇÇ‚ü©

end

variable
[MonadMor‚ÇÅ m]
    [MonadLift MetaM m] [MonadAlwaysExcept Exception m] [MonadRef m]
    -- [MonadStructuralIso m]
    [MonadNormalExpr m]
    [MkEval m]

-- open MonadMor‚ÇÇ
open MkEval

variable [MkMor‚ÇÅ m]
-- [MonadMor‚ÇÇ m]

variable {œÅ : Type} [Context œÅ]
    -- [MkClass (CoherenceM œÅ)]
    -- (eval : Expr ‚Üí CoherenceM œÅ Eval.Result)
    [MonadMor‚ÇÅ (CoherenceM œÅ)]
    -- [MonadStructuralIso (CoherenceM œÅ)]
    [MonadStructuralIsoAtom (CoherenceM œÅ)]
    [MonadMor‚ÇÇIso (CoherenceM œÅ)]
    [MonadNormalExpr (CoherenceM œÅ)] [MkEval (CoherenceM œÅ)]
    [MonadMor‚ÇÇ (CoherenceM œÅ)]
    [MkMor‚ÇÇ (CoherenceM œÅ)]

-- def mkEvalComp (Œ∑ Œ∏ : Mor‚ÇÇ) (Œ∑' Œ∏' Œπ : NormalExpr) (e_Œ∑ e_Œ∏ e_Œ∑Œ∏ : Expr) : m Expr := do sorry

-- def evalComp : NormalExpr ‚Üí NormalExpr ‚Üí m Eval.Result := sorry

def traceProof (nm : Name) (result : Expr) : CoherenceM œÅ Unit := do
  withTraceNode nm (fun _ => return m!"{checkEmoji} {‚Üê inferType result}") do
    if ‚Üê isTracingEnabledFor nm then addTrace nm m!"proof: {result}"

/-- Evaluate the expression of a 2-morphism into a normalized form. -/
def eval (nm : Name) (e : Mor‚ÇÇ) : CoherenceM œÅ Eval.Result := do
  -- let e ‚Üê instantiateMVars e
  withTraceNode nm (fun _ => return m!"eval: {e.e}") do
    match e with
    | .isoHom _ _ Œ± => withTraceNode nm (fun _ => return m!"Iso.hom") do match Œ± with
      | .structuralAtom Œ± => return ‚ü®‚Üê nilM <| .structuralAtom Œ±, ‚Üê mkEqRefl e.e‚ü©
      | .of Œ∑ =>
        let Œ∑ ‚Üê Mor‚ÇÇ.homAtomM Œ∑
        let result ‚Üê mkEvalOf Œ∑
        traceProof nm result
        return ‚ü®‚Üê NormalExpr.ofAtomM Œ∑, result‚ü©
      | _ => throwError "not implemented. try dsimp first."
    | .isoInv _ _ Œ± => withTraceNode nm (fun _ => return m!"Iso.inv") do match Œ± with
      | .structuralAtom Œ± => return ‚ü®‚Üê nilM <| (‚Üê symmM (.structuralAtom Œ±)), ‚Üê mkEqRefl e.e‚ü©
      | .of Œ∑ =>
        let Œ∑ ‚Üê Mor‚ÇÇ.invAtomM Œ∑
        let result ‚Üê mkEvalOf Œ∑
        traceProof nm result
        return ‚ü®‚Üê NormalExpr.ofAtomM Œ∑, result‚ü©
      | _ => throwError "not implemented. try dsimp first."
    | .id _ _ f  =>
      let Œ± ‚Üê StructuralIsoAtom.id‚ÇÇM f
      return  ‚ü®‚Üê nilM <| .structuralAtom Œ±, ‚Üê mkEqRefl e.e‚ü©
    | .comp _ _ _ _ _ Œ∑ Œ∏ => withTraceNode nm (fun _ => return m!"comp") do
      let ‚ü®Œ∑', e_Œ∑‚ü© ‚Üê eval nm Œ∑
      let ‚ü®Œ∏', e_Œ∏‚ü© ‚Üê eval nm Œ∏
      let ‚ü®Œ∑Œ∏, pf‚ü© ‚Üê evalComp Œ∑' Œ∏'
      let result ‚Üê mkEvalComp Œ∑ Œ∏ Œ∑' Œ∏' Œ∑Œ∏ e_Œ∑ e_Œ∏ pf
      traceProof nm result
      return ‚ü®Œ∑Œ∏, result‚ü©
    | .whiskerLeft _ _ f _ _ Œ∑ => withTraceNode nm (fun _ => return m!"whiskerLeft") do
      let ‚ü®Œ∑', e_Œ∑‚ü© ‚Üê eval nm Œ∑
      let ‚ü®Œ∏, e_Œ∏‚ü© ‚Üê evalWhiskerLeft f Œ∑'
      let result ‚Üê mkEvalWhiskerLeft f Œ∑ Œ∑' Œ∏ e_Œ∑ e_Œ∏
      traceProof nm result
      return ‚ü®Œ∏, result‚ü©
    | .whiskerRight _ _ _ _ Œ∑ h =>
      withTraceNode nm (fun _ => return m!"whiskerRight") do
        let ‚ü®Œ∑', e_Œ∑‚ü© ‚Üê eval nm Œ∑
        let ‚ü®Œ∏, e_Œ∏‚ü© ‚Üê evalWhiskerRight Œ∑' h
        let result ‚Üê mkEvalWhiskerRight Œ∑ h Œ∑' Œ∏ e_Œ∑ e_Œ∏
        traceProof nm result
        return ‚ü®Œ∏, result‚ü©
    | .coherenceComp _ _ _ _ _ _ Œ±‚ÇÄ Œ∑ Œ∏ =>
      withTraceNode nm (fun _ => return m!"monoidalComp") do
        let ‚ü®Œ∑', e_Œ∑‚ü© ‚Üê eval nm Œ∑
        let Œ±‚ÇÄ := .structuralAtom <| .coherenceHom Œ±‚ÇÄ
        let Œ± ‚Üê nilM Œ±‚ÇÄ
        let ‚ü®Œ∏', e_Œ∏‚ü© ‚Üê eval nm Œ∏
        let ‚ü®Œ±Œ∏, e_Œ±Œ∏‚ü© ‚Üê evalComp Œ± Œ∏'
        let ‚ü®Œ∑Œ±Œ∏, e_Œ∑Œ±Œ∏‚ü© ‚Üê evalComp Œ∑' Œ±Œ∏
        let result ‚Üê mkEvalMonoidalComp Œ∑ Œ∏ Œ±‚ÇÄ Œ∑' Œ∏' Œ±Œ∏ Œ∑Œ±Œ∏ e_Œ∑ e_Œ∏ e_Œ±Œ∏ e_Œ∑Œ±Œ∏
        traceProof nm result
        return ‚ü®Œ∑Œ±Œ∏, result‚ü©
    | .horizontalComp _ _ _ _ _ _ Œ∑ Œ∏ =>
      withTraceNode nm (fun _ => return m!"tensorHom") do
        let ‚ü®Œ∑', e_Œ∑‚ü© ‚Üê eval nm Œ∑
        let ‚ü®Œ∏', e_Œ∏‚ü© ‚Üê eval nm Œ∏
        let ‚ü®Œ∑Œ∏, e_Œ∑Œ∏‚ü© ‚Üê evalHorizontalComp Œ∑' Œ∏'
        let result ‚Üê mkEvalHorizontalComp Œ∑ Œ∏ Œ∑' Œ∏' Œ∑Œ∏ e_Œ∑ e_Œ∏ e_Œ∑Œ∏
        traceProof nm result
        return ‚ü®Œ∑Œ∏, result‚ü©
    | .of Œ∑  =>
      let result ‚Üê mkEvalOf Œ∑
      traceProof nm result
      return ‚ü®‚Üê NormalExpr.ofAtomM Œ∑, result‚ü©

theorem mk_eq {Œ± : Type _} (a b a' b' : Œ±) (ha : a = a') (hb : b = b') (h : a' = b') : a = b := by
  simp [h, ha, hb]

end

def normalForm (nm : Name) (œÅ : Type) [Context œÅ]
    [MonadMor‚ÇÅ (CoherenceM œÅ)]
    [MonadStructuralIsoAtom (CoherenceM œÅ)]
    [MonadMor‚ÇÇIso (CoherenceM œÅ)]
    [MonadNormalExpr (CoherenceM œÅ)] [MkEval (CoherenceM œÅ)]
    [MkMor‚ÇÇ (CoherenceM œÅ)]
    [MonadMor‚ÇÇ (CoherenceM œÅ)]
    (mvarId : MVarId) : MetaM (List MVarId) := do
  mvarId.withContext do
    let e ‚Üê instantiateMVars <| ‚Üê mvarId.getType
    withTraceNode nm (fun _ => return m!"normalize: {e}") do
      let some (_, e‚ÇÅ, e‚ÇÇ) := (‚Üê whnfR <| ‚Üê instantiateMVars <| e).eq?
        | throwError "{nm}_nf requires an equality goal"
      let ctx : œÅ ‚Üê Context.mkContext e‚ÇÅ
      ReaderT.run (r := ctx) <| show CoherenceM œÅ (List MVarId) from do
        let e‚ÇÅ' ‚Üê MkMor‚ÇÇ.ofExpr e‚ÇÅ
        let e‚ÇÇ' ‚Üê MkMor‚ÇÇ.ofExpr e‚ÇÇ
        let e‚ÇÅ'' ‚Üê eval nm e‚ÇÅ'
        let e‚ÇÇ'' ‚Üê eval nm e‚ÇÇ'
        let H ‚Üê mkAppM ``mk_eq #[e‚ÇÅ, e‚ÇÇ, e‚ÇÅ''.expr.e, e‚ÇÇ''.expr.e, e‚ÇÅ''.proof, e‚ÇÇ''.proof]
        mvarId.apply H

open CategoryTheory
universe v u
theorem mk_eq_of_cons {C : Type u} [CategoryStruct.{v} C]
    {f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ : C}
    (Œ± Œ±' : f‚ÇÅ ‚ü∂ f‚ÇÇ) (Œ∑ Œ∑' : f‚ÇÇ ‚ü∂ f‚ÇÉ) (Œ∑s Œ∑s' : f‚ÇÉ ‚ü∂ f‚ÇÑ)
    (e_Œ± : Œ± = Œ±') (e_Œ∑ : Œ∑ = Œ∑') (e_Œ∑s : Œ∑s = Œ∑s') :
    Œ± ‚â´ Œ∑ ‚â´ Œ∑s = Œ±' ‚â´ Œ∑' ‚â´ Œ∑s' := by
  simp [e_Œ±, e_Œ∑, e_Œ∑s]



/-- Transform an equality between 2-morphisms into the equality between their normalizations. -/
def mkEqOfHom‚ÇÇ (œÅ : Type) [Context œÅ]     [MonadMor‚ÇÅ (CoherenceM œÅ)]
    -- [MonadStructuralIso (CoherenceM œÅ)]
    [MonadStructuralIsoAtom (CoherenceM œÅ)]
    [MonadMor‚ÇÇIso (CoherenceM œÅ)]
    [MonadNormalExpr (CoherenceM œÅ)] [MkEval (CoherenceM œÅ)]
    [MkMor‚ÇÇ (CoherenceM œÅ)]
    [MonadMor‚ÇÇ (CoherenceM œÅ)] (nm : Name) (mvarId : MVarId) : MetaM Expr := do
  let some (_, e‚ÇÅ, e‚ÇÇ) := (‚Üê whnfR <| ‚Üê instantiateMVars <| ‚Üê mvarId.getType).eq?
    | throwError "bicategory requires an equality goal"
  let ctx : œÅ  ‚Üê Context.mkContext e‚ÇÅ
  CoherenceM.run ctx do
    let ‚ü®e‚ÇÅ', p‚ÇÅ‚ü© ‚Üê eval nm (‚Üê MkMor‚ÇÇ.ofExpr e‚ÇÅ)
    let ‚ü®e‚ÇÇ', p‚ÇÇ‚ü© ‚Üê eval nm (‚Üê MkMor‚ÇÇ.ofExpr e‚ÇÇ)
    mkAppM ``mk_eq #[e‚ÇÅ, e‚ÇÇ, e‚ÇÅ'.e, e‚ÇÇ'.e, p‚ÇÅ, p‚ÇÇ]

def ofNormalizedEq (mvarId : MVarId) : MetaM (List MVarId) := do
  mvarId.withContext do
    let e ‚Üê instantiateMVars <| ‚Üê mvarId.getType
    let some (_, e‚ÇÅ, e‚ÇÇ) := (‚Üê whnfR e).eq? | throwError "requires an equality goal"
    match (‚Üê whnfR e‚ÇÅ).getAppFnArgs, (‚Üê whnfR e‚ÇÇ).getAppFnArgs with
    | (``CategoryStruct.comp, #[_, _, _, _, _, Œ±, Œ∑]) ,
      (``CategoryStruct.comp, #[_, _, _, _, _, Œ±', Œ∑']) =>
      match (‚Üê whnfR Œ∑).getAppFnArgs, (‚Üê whnfR Œ∑').getAppFnArgs with
      | (``CategoryStruct.comp, #[_, _, _, _, _, Œ∑, Œ∑s]),
        (``CategoryStruct.comp, #[_, _, _, _, _, Œ∑', Œ∑s']) =>
        let e_Œ± ‚Üê mkFreshExprMVar (‚Üê Meta.mkEq Œ± Œ±')
        let e_Œ∑  ‚Üê mkFreshExprMVar (‚Üê Meta.mkEq Œ∑ Œ∑')
        let e_Œ∑s ‚Üê mkFreshExprMVar (‚Üê Meta.mkEq Œ∑s Œ∑s')
        let x ‚Üê mvarId.apply (‚Üê mkAppM ``mk_eq_of_cons #[Œ±, Œ±', Œ∑, Œ∑', Œ∑s, Œ∑s', e_Œ±, e_Œ∑, e_Œ∑s])
        return x
      | _, _ => throwError "failed to make a normalized equality for {e}"
    | _, _ => throwError "failed to make a normalized equality for {e}"

def main (œÅ : Type) [Context œÅ]     [MonadMor‚ÇÅ (CoherenceM œÅ)]
    -- [MonadStructuralIso (CoherenceM œÅ)]
    [MonadStructuralIsoAtom (CoherenceM œÅ)]
    [MonadMor‚ÇÇIso (CoherenceM œÅ)]
    [MonadNormalExpr (CoherenceM œÅ)] [MkEval (CoherenceM œÅ)]
    [MkMor‚ÇÇ (CoherenceM œÅ)]
    [MonadMor‚ÇÇ (CoherenceM œÅ)]
    [MonadCoherehnceHom (CoherenceM œÅ)]
    [MonadNormalizeNaturality (CoherenceM œÅ)]
    (mkEqOfNormalizedEq : Array Expr ‚Üí MetaM Expr)
    (nm : Name) (mvarId : MVarId) : MetaM (List MVarId) :=
  mvarId.withContext do
    let mvarIds ‚Üê mvarId.apply (‚Üê mkEqOfHom‚ÇÇ œÅ nm mvarId)
    let mvarIds' ‚Üê repeat' ofNormalizedEq mvarIds
    let mvarIds'' ‚Üê mvarIds'.mapM fun mvarId => do
      withTraceNode nm (fun _ => do return m!"goal: {‚Üê mvarId.getType}") do
        try
          mvarId.refl
          trace[bicategory] m!"{checkEmoji} refl"
          return [mvarId]
        catch _ =>
          try
            pureCoherence nm œÅ mkEqOfNormalizedEq mvarId
          catch _ => return [mvarId]
    return mvarIds''.join

end Mathlib.Tactic.BicategoryLike
