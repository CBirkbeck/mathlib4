import Mathlib.Tactic.CategoryTheory.Monoidal

open Lean Elab Meta Tactic
open CategoryTheory

universe v u

namespace Mathlib.Tactic.Monoidal

variable {C : Type u} [Category.{v} C] [MonoidalCategory C]

open MonoidalCategory

inductive NormalizedHom (Œ± : Type u) : Type u
  | nil : NormalizedHom Œ±
  | cons : NormalizedHom Œ± ‚Üí Œ± ‚Üí NormalizedHom Œ±

structure Coherence.Result where
  /-- The normalized 1-morphism. -/
  normalizedHom : NormalizedHom Expr
  /-- The 2-morphism to the normalized 1-morphism. -/
  toNormalize : Expr

abbrev normalizeIso {p f g pf pfg : C} (Œ∑_f : p ‚äó f ‚âÖ pf) (Œ∑_g : pf ‚äó g ‚âÖ pfg) :=
  (Œ±_ _ _ _).symm ‚â™‚â´ whiskerRightIso Œ∑_f g ‚â™‚â´ Œ∑_g

theorem naturality_associator {p f g h pf pfg pfgh : C}
    (Œ∑_f : (p ‚äó f) ‚âÖ pf) (Œ∑_g : (pf ‚äó g) ‚âÖ pfg) (Œ∑_h : pfg ‚äó h ‚âÖ pfgh) :
    p ‚óÅ (Œ±_ f g h).hom ‚â´ (normalizeIso Œ∑_f (normalizeIso Œ∑_g Œ∑_h)).hom =
    (normalizeIso (normalizeIso Œ∑_f Œ∑_g) Œ∑_h).hom := by
  simp only [Iso.trans_hom, Iso.symm_hom, whiskerRightIso_hom, whiskerRight_tensor, Category.assoc,
    Iso.hom_inv_id_assoc, pentagon_hom_inv_inv_inv_inv_assoc, whiskerRightIso_trans,
    Iso.trans_assoc, Iso.refl_hom, Category.comp_id]

theorem naturality_associator_inv {p f g h pf pfg pfgh : C}
    (Œ∑_f : (p ‚äó f) ‚âÖ pf) (Œ∑_g : (pf ‚äó g) ‚âÖ pfg) (Œ∑_h : pfg ‚äó h ‚âÖ pfgh) :
    p ‚óÅ (Œ±_ f g h).inv ‚â´ (normalizeIso (normalizeIso Œ∑_f Œ∑_g) Œ∑_h).hom =
    (normalizeIso Œ∑_f (normalizeIso Œ∑_g Œ∑_h)).hom := by
  simp only [Iso.trans_hom, Iso.symm_hom, whiskerRightIso_trans, Iso.trans_assoc,
    whiskerRightIso_hom, pentagon_inv_assoc, whiskerRight_tensor, Category.assoc,
    Iso.hom_inv_id_assoc, Iso.refl_hom, Category.comp_id]

theorem naturality_leftUnitor {p f pf : C} (Œ∑_f : p ‚äó f ‚âÖ pf) :
    p ‚óÅ (Œª_ f).hom ‚â´ Œ∑_f.hom = (normalizeIso (œÅ_ p) Œ∑_f).hom := by
  simp only [Iso.trans_hom, Iso.symm_hom, whiskerRightIso_hom, triangle_assoc_comp_right_assoc,
    Iso.refl_hom, Category.comp_id]

theorem naturality_leftUnitor_inv {p f pf : C} (Œ∑_f : p ‚äó f ‚âÖ pf) :
    p ‚óÅ (Œª_ f).inv ‚â´ (normalizeIso (œÅ_ p) Œ∑_f).hom = Œ∑_f.hom := by
  simp only [Iso.trans_hom, Iso.symm_hom, whiskerRightIso_hom, triangle_assoc_comp_right_assoc,
    whiskerLeft_inv_hom_assoc, Iso.refl_hom, Category.comp_id]

theorem naturality_rightUnitor {p f pf : C} (Œ∑_f : p ‚äó f ‚âÖ pf) :
    p ‚óÅ (œÅ_ f).hom ‚â´ Œ∑_f.hom = (normalizeIso Œ∑_f (œÅ_ pf)).hom := by
  simp only [whiskerLeft_rightUnitor, Category.assoc, Iso.trans_hom, Iso.symm_hom,
    whiskerRightIso_hom, MonoidalCategory.whiskerRight_id, Iso.inv_hom_id, Category.comp_id,
    Iso.refl_hom]

theorem naturality_rightUnitor_inv {p f pf : C} (Œ∑_f : p ‚äó f ‚âÖ pf) :
    p ‚óÅ (œÅ_ f).inv ‚â´ (normalizeIso Œ∑_f (œÅ_ pf)).hom = Œ∑_f.hom := by
  simp only [whiskerLeft_rightUnitor_inv, Iso.trans_hom, Iso.symm_hom, whiskerRightIso_hom,
    MonoidalCategory.whiskerRight_id, Category.assoc, Iso.inv_hom_id, Category.comp_id,
    Iso.hom_inv_id_assoc, Iso.inv_hom_id_assoc, Iso.refl_hom]

theorem naturality_id {p f pf : C} (Œ∑_f : p ‚äó f ‚âÖ pf) :
    p ‚óÅ (ùüô f) ‚â´ Œ∑_f.hom = Œ∑_f.hom := by
  simp only [MonoidalCategory.whiskerLeft_id, Category.id_comp]

theorem naturality_comp {p f g h pf : C}
    (Œ∑ : f ‚ü∂ g) (Œ∏ : g ‚ü∂ h) (Œ∑_f : (p ‚äó f) ‚âÖ pf) (Œ∑_g : (p ‚äó g) ‚âÖ pf) (Œ∑_h : p ‚äó h ‚âÖ pf)
    (ih_Œ∑ : p ‚óÅ Œ∑ ‚â´ Œ∑_g.hom = Œ∑_f.hom) (ih_Œ∏ : p ‚óÅ Œ∏ ‚â´ Œ∑_h.hom = Œ∑_g.hom) :
    p ‚óÅ (Œ∑ ‚â´ Œ∏) ‚â´ Œ∑_h.hom = Œ∑_f.hom := by
  simp only [MonoidalCategory.whiskerLeft_comp, Category.assoc, ‚Üê ih_Œ∑, ‚Üê ih_Œ∏]

theorem naturality_whiskerLeft {p f g h pf pfg : C} (Œ∑ : g ‚ü∂ h) (Œ∑_f : (p ‚äó f) ‚âÖ pf)
    (Œ∑_fg : (pf ‚äó g) ‚âÖ pfg)
    (Œ∑_fh : (pf ‚äó h) ‚âÖ pfg)
    (ih_Œ∑ : pf ‚óÅ Œ∑ ‚â´ Œ∑_fh.hom = Œ∑_fg.hom) :
    p ‚óÅ (f ‚óÅ Œ∑) ‚â´ (normalizeIso Œ∑_f Œ∑_fh).hom =
    (normalizeIso Œ∑_f Œ∑_fg).hom := by
  simp only [Iso.trans_hom, Iso.symm_hom, whiskerRightIso_hom, ‚Üê ih_Œ∑, ‚Üê whisker_exchange_assoc,
    tensor_whiskerLeft, Category.assoc, Iso.inv_hom_id_assoc, Iso.refl_hom, Category.comp_id]

theorem naturality_whiskerRight {p f g h pf pfh : C} (Œ∑ : f ‚ü∂ g) (Œ∑_f : (p ‚äó f) ‚âÖ pf)
    (Œ∑_g : (p ‚äó g) ‚âÖ pf)
    (Œ∑_fh : (pf ‚äó h) ‚âÖ pfh)
    (ih_Œ∑ : p ‚óÅ Œ∑ ‚â´ Œ∑_g.hom = Œ∑_f.hom) :
    p ‚óÅ (Œ∑ ‚ñ∑ h) ‚â´ (normalizeIso Œ∑_g Œ∑_fh).hom =
    (normalizeIso Œ∑_f Œ∑_fh).hom := by
  simp only [Iso.trans_hom, Iso.symm_hom, whiskerRightIso_hom, ‚Üê ih_Œ∑, comp_whiskerRight,
    whisker_assoc, Category.assoc, Iso.inv_hom_id_assoc]

theorem naturality_tensorHom {p f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ pf‚ÇÅ pf‚ÇÅf‚ÇÇ : C} (Œ∑ : f‚ÇÅ ‚ü∂ g‚ÇÅ) (Œ∏ : f‚ÇÇ ‚ü∂ g‚ÇÇ)
    (Œ∑_f‚ÇÅ : p ‚äó f‚ÇÅ ‚âÖ pf‚ÇÅ) (Œ∑_g‚ÇÅ : p ‚äó g‚ÇÅ ‚âÖ pf‚ÇÅ)
    (Œ∑_f‚ÇÇ : pf‚ÇÅ ‚äó f‚ÇÇ ‚âÖ pf‚ÇÅf‚ÇÇ) (Œ∑_g‚ÇÇ : pf‚ÇÅ ‚äó g‚ÇÇ ‚âÖ pf‚ÇÅf‚ÇÇ)
    (ih_Œ∑ : p ‚óÅ Œ∑ ‚â´ Œ∑_g‚ÇÅ.hom = Œ∑_f‚ÇÅ.hom)
    (ih_Œ∏ : pf‚ÇÅ ‚óÅ Œ∏ ‚â´ Œ∑_g‚ÇÇ.hom = Œ∑_f‚ÇÇ.hom) :
    p ‚óÅ (Œ∑ ‚äó Œ∏) ‚â´ (normalizeIso Œ∑_g‚ÇÅ Œ∑_g‚ÇÇ).hom = (normalizeIso Œ∑_f‚ÇÅ Œ∑_f‚ÇÇ).hom := by
  simp only [tensorHom_def, MonoidalCategory.whiskerLeft_comp, Iso.trans_hom, Iso.symm_hom,
    whiskerRightIso_hom, Category.assoc, ‚Üê ih_Œ∑, comp_whiskerRight, whisker_assoc, ‚Üê ih_Œ∏,
    Iso.inv_hom_id_assoc]
  simp only [‚Üê whisker_exchange_assoc, associator_inv_naturality_right_assoc]

def eval‚ÇÅ (p : NormalizedHom Expr) (C : Option Expr := none) : MetaM Expr := do
  match p with
  | .nil =>
    mkAppOptM ``MonoidalCategoryStruct.tensorUnit #[C, none, none]
  | .cons fs f => do
    let fs' ‚Üê eval‚ÇÅ fs C
    mkAppM ``MonoidalCategory.tensorObj #[fs', f]

partial def normalize (p : NormalizedHom Expr) (f : Expr) : MetaM Coherence.Result := do
  let C ‚Üê inferType f
  if let some _ ‚Üê isTensorUnit? f then
    let Œ± ‚Üê mkAppOptM ``MonoidalCategoryStruct.rightUnitor #[C, none, none, ‚Üê eval‚ÇÅ p C]
    return ‚ü®p, Œ±‚ü©
  else if let some (f, g) ‚Üê isTensorObj? f then
    let ‚ü®pf, Hf‚ü© ‚Üê normalize p f
    let Hf' ‚Üê mkAppM ``MonoidalCategory.whiskerRightIso #[Hf, g]
    let ‚ü®pfg, Hg‚ü© ‚Üê normalize pf g
    let Œ∑ ‚Üê mkAppM ``Iso.trans #[Hf', Hg]
    let alpha ‚Üê mkAppM ``Iso.symm #[‚Üê mkAppM ``MonoidalCategory.associator #[‚Üê eval‚ÇÅ p C, f, g]]
    let Œ∑' ‚Üê mkAppM ``Iso.trans #[alpha, Œ∑]
    return ‚ü®pfg, Œ∑'‚ü©
  else
    let Œ± ‚Üê mkAppOptM ``Iso.refl #[C, none, ‚Üê eval‚ÇÅ (p.cons f) C]
    return ‚ü®p.cons f, Œ±‚ü©

theorem of_normalize_eq {f g f' : C} (Œ∑ Œ∏ : f ‚ü∂ g) (Œ∑_f : ùüô_ C ‚äó f ‚âÖ f') (Œ∑_g : ùüô_ C ‚äó g ‚âÖ f')
  (h_Œ∑ : ùüô_ C ‚óÅ Œ∑ ‚â´ Œ∑_g.hom = Œ∑_f.hom)
  (h_Œ∏ : ùüô_ C ‚óÅ Œ∏ ‚â´ Œ∑_g.hom = Œ∑_f.hom) : Œ∑ = Œ∏ := by
  simp only [id_whiskerLeft, Category.assoc] at h_Œ∑ h_Œ∏
  calc
    Œ∑ = (Œª_ f).inv ‚â´ Œ∑_f.hom ‚â´ Œ∑_g.inv ‚â´ (Œª_ g).hom := by
      simp [‚Üê reassoc_of% h_Œ∑]
    _ = Œ∏ := by
      simp [‚Üê reassoc_of% h_Œ∏]

/-- The domain of a morphism. -/
def srcExpr (Œ∑ : Expr) : MetaM Expr := do
  match (‚Üê whnfR (‚Üê inferType Œ∑)).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, f, _]) => return f
  | _ => throwError "{Œ∑} is not a morphism"

/-- The codomain of a morphism. -/
def tgtExpr (Œ∑ : Expr) : MetaM Expr := do
  match (‚Üê whnfR (‚Üê inferType Œ∑)).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, _, g]) => return g
  | _ => throwError "{Œ∑} is not a morphism"

partial def naturality (p : NormalizedHom Expr) (Œ∑ : Expr) : MetaM Expr := do
  match Œ∑.getAppFnArgs with
  | (``Iso.hom, #[_, _, _, _, Œ∑]) =>
    match (‚Üê whnfR Œ∑).getAppFnArgs with
    | (``MonoidalCategoryStruct.associator, #[_, _, _, f, g, h]) =>
      let ‚ü®pf, Œ∑_f‚ü© ‚Üê normalize p f
      let ‚ü®pfg, Œ∑_g‚ü© ‚Üê normalize pf g
      let ‚ü®_, Œ∑_h‚ü© ‚Üê normalize pfg h
      mkAppM ``naturality_associator #[Œ∑_f, Œ∑_g, Œ∑_h]
    | (``MonoidalCategoryStruct.leftUnitor, #[_, _, _, f]) =>
      let ‚ü®_, Œ∑_f‚ü© ‚Üê normalize p f
      mkAppM ``naturality_leftUnitor #[Œ∑_f]
    | (``MonoidalCategoryStruct.rightUnitor, #[_, _, _, f]) =>
      let ‚ü®_, Œ∑_f‚ü© ‚Üê normalize p f
      mkAppM ``naturality_rightUnitor #[Œ∑_f]
    | _ => throwError "failed to prove the naturality for {Œ∑}"
  | (``Iso.inv, #[_, _, _, _, Œ∑]) =>
    match (‚Üê whnfR Œ∑).getAppFnArgs with
    | (``MonoidalCategoryStruct.associator, #[_, _, _, f, g, h]) =>
      let ‚ü®pf, Œ∑_f‚ü© ‚Üê normalize p f
      let ‚ü®pfg, Œ∑_g‚ü© ‚Üê normalize pf g
      let ‚ü®_, Œ∑_h‚ü© ‚Üê normalize pfg h
      mkAppM ``naturality_associator_inv #[Œ∑_f, Œ∑_g, Œ∑_h]
    | (``MonoidalCategoryStruct.leftUnitor, #[_, _, _, f]) =>
      let ‚ü®_, Œ∑_f‚ü© ‚Üê normalize p f
      mkAppM ``naturality_leftUnitor_inv #[Œ∑_f]
    | (``MonoidalCategoryStruct.rightUnitor, #[_, _, _, f]) =>
      let ‚ü®_, Œ∑_f‚ü© ‚Üê normalize p f
      mkAppM ``naturality_rightUnitor_inv #[Œ∑_f]
    | _ => throwError "failed to prove the naturality for {Œ∑}"
  | _ =>  match (‚Üê whnfR Œ∑).getAppFnArgs with
    | (``CategoryStruct.id, #[_, _, f]) =>
      let ‚ü®_, Œ∑_f‚ü© ‚Üê normalize p f
      mkAppM ``naturality_id #[Œ∑_f]
    | (``CategoryStruct.comp, #[_, _, f, g, h, Œ∑, Œ∏]) =>
      let ‚ü®_, Œ∑_f‚ü© ‚Üê normalize p f
      let ‚ü®_, Œ∑_g‚ü© ‚Üê normalize p g
      let ‚ü®_, Œ∑_h‚ü© ‚Üê normalize p h
      let ih_Œ∑ ‚Üê naturality p Œ∑
      let ih_Œ∏ ‚Üê naturality p Œ∏
      mkAppM ``naturality_comp #[Œ∑, Œ∏, Œ∑_f, Œ∑_g, Œ∑_h, ih_Œ∑, ih_Œ∏]
    | (``MonoidalCategoryStruct.whiskerLeft, #[_, _, _, f, g, h, Œ∑]) =>
      let ‚ü®pf, Œ∑_f‚ü© ‚Üê normalize p f
      let ‚ü®_, Œ∑_fg‚ü© ‚Üê normalize pf g
      let ‚ü®_, Œ∑_fh‚ü© ‚Üê normalize pf h
      let ih ‚Üê naturality pf Œ∑
      mkAppM ``naturality_whiskerLeft #[Œ∑, Œ∑_f, Œ∑_fg, Œ∑_fh, ih]
    | (``MonoidalCategoryStruct.whiskerRight, #[_, _, _, f, g, Œ∑, h]) =>
      let ‚ü®pf, Œ∑_f‚ü© ‚Üê normalize p f
      let ‚ü®_, Œ∑_g‚ü© ‚Üê normalize p g
      let ‚ü®_, Œ∑_fh‚ü© ‚Üê normalize pf h
      let ih ‚Üê naturality p Œ∑
      mkAppM ``naturality_whiskerRight #[Œ∑, Œ∑_f, Œ∑_g, Œ∑_fh, ih]
    | (``monoidalComp, #[_, _, _, _, _, _, inst, Œ∑, Œ∏]) =>
        let Œ± ‚Üê mkAppOptM ``MonoidalCoherence.hom #[none, none, none, none, inst]
        let Œ±Œ∏ ‚Üê mkAppM ``CategoryStruct.comp #[Œ±, Œ∏]
        let Œ∑Œ±Œ∏ ‚Üê mkAppM ``CategoryStruct.comp #[Œ∑, Œ±Œ∏]
        naturality p Œ∑Œ±Œ∏
    | (``MonoidalCoherence.hom, #[_, _, _, _, _]) =>
      let (Œ∑', _) ‚Üê dsimp Œ∑
        { simpTheorems := #[.addDeclToUnfoldCore {} ``MonoidalCoherence.hom] }
      naturality p Œ∑'
    | (``MonoidalCategoryStruct.tensorHom, #[_, _, _, f‚ÇÅ, g‚ÇÅ, f‚ÇÇ, g‚ÇÇ, Œ∑, Œ∏]) =>
      let ‚ü®pf‚ÇÅ, Œ∑_f‚ÇÅ‚ü© ‚Üê normalize p f‚ÇÅ
      let ‚ü®pg‚ÇÅ, Œ∑_g‚ÇÅ‚ü© ‚Üê normalize p g‚ÇÅ
      let ‚ü®_, Œ∑_f‚ÇÇ‚ü© ‚Üê normalize pf‚ÇÅ f‚ÇÇ
      let ‚ü®_, Œ∑_g‚ÇÇ‚ü© ‚Üê normalize pg‚ÇÅ g‚ÇÇ
      let ih_Œ∑ ‚Üê naturality p Œ∑
      let ih_Œ∏ ‚Üê naturality pf‚ÇÅ Œ∏
      mkAppM ``naturality_tensorHom #[Œ∑, Œ∏, Œ∑_f‚ÇÅ, Œ∑_g‚ÇÅ, Œ∑_f‚ÇÇ, Œ∑_g‚ÇÇ, ih_Œ∑, ih_Œ∏]
    | _ => throwError "failed to prove the naturality for {Œ∑}"

def pure_coherence (mvarId : MVarId) : MetaM (List MVarId) := mvarId.withContext do
  let some (_, Œ∑, Œ∏) := (‚Üê whnfR <| ‚Üê mvarId.getType).eq?
    | throwError "monoidal requires an equality goal"
  let f ‚Üê srcExpr Œ∑
  let g ‚Üê tgtExpr Œ∑
  let ‚ü®_, Œ±f‚ü© ‚Üê normalize .nil f
  let ‚ü®_, Œ±g‚ü© ‚Üê normalize .nil g
  let HŒ∑ ‚Üê naturality .nil Œ∑
  let HŒ∏ ‚Üê naturality .nil Œ∏
  let H ‚Üê mkAppM ``of_normalize_eq #[Œ∑, Œ∏, Œ±f, Œ±g, HŒ∑, HŒ∏]
  mvarId.apply H

elab "monoidal_coherence" : tactic => withMainContext do
  let g ‚Üê getMainGoal
  replaceMainGoal <| ‚Üê pure_coherence g

theorem mk_eq_of_cons {C : Type u} [CategoryStruct.{v} C]
    {f‚ÇÅ f‚ÇÇ f‚ÇÉ f‚ÇÑ : C}
    (Œ± Œ±' : f‚ÇÅ ‚ü∂ f‚ÇÇ) (Œ∑ Œ∑' : f‚ÇÇ ‚ü∂ f‚ÇÉ) (Œ∑s Œ∑s' : f‚ÇÉ ‚ü∂ f‚ÇÑ)
    (pf_Œ± : Œ± = Œ±') (pf_Œ∑ : Œ∑ = Œ∑') (pf_Œ∑s : Œ∑s = Œ∑s') :
    Œ± ‚â´ Œ∑ ‚â´ Œ∑s = Œ±' ‚â´ Œ∑' ‚â´ Œ∑s' := by
  simp [pf_Œ±, pf_Œ∑, pf_Œ∑s]

/-- Transform an equality between 2-morphisms into the equality between their normalizations. -/
def mkEqOfHom‚ÇÇ (mvarId : MVarId) : MetaM Expr := do
  let some (_, e‚ÇÅ, e‚ÇÇ) := (‚Üê whnfR <| ‚Üê mvarId.getType).eq?
    | throwError "monoidal requires an equality goal"
  let some c ‚Üê mkContext? e‚ÇÅ | throwError "monoidal requires an equality goal"
  MonoidalM.run c do
    let ‚ü®e‚ÇÅ', p‚ÇÅ‚ü© ‚Üê eval e‚ÇÅ
    let ‚ü®e‚ÇÇ', p‚ÇÇ‚ü© ‚Üê eval e‚ÇÇ
    mkAppM ``mk_eq #[e‚ÇÅ, e‚ÇÇ, ‚Üê e‚ÇÅ'.e, ‚Üê e‚ÇÇ'.e, p‚ÇÅ, p‚ÇÇ]

def ofNormalizedEq (mvarId : MVarId) : MetaM (List MVarId) := do
  let e ‚Üê mvarId.getType
  let some (_, e‚ÇÅ, e‚ÇÇ) := (‚Üê whnfR e).eq? | throwError "monoidal requires an equality goal"
  match (‚Üê whnfR e‚ÇÅ).getAppFnArgs, (‚Üê whnfR e‚ÇÇ).getAppFnArgs with
  | (``CategoryStruct.comp, #[_, _, _, _, _, Œ±, Œ∑]) ,
    (``CategoryStruct.comp, #[_, _, _, _, _, Œ±', Œ∑']) =>
    match (‚Üê whnfR Œ∑).getAppFnArgs, (‚Üê whnfR Œ∑').getAppFnArgs with
    | (``CategoryStruct.comp, #[_, _, _, _, _, Œ∑, Œ∑s]),
      (``CategoryStruct.comp, #[_, _, _, _, _, Œ∑', Œ∑s']) =>
      let pf_Œ± ‚Üê mkFreshExprMVar (‚Üê mkEq Œ± Œ±')
      let pf_Œ∑  ‚Üê mkFreshExprMVar (‚Üê mkEq Œ∑ Œ∑')
      let pf_Œ∑s ‚Üê mkFreshExprMVar (‚Üê mkEq Œ∑s Œ∑s')
      let x ‚Üê mvarId.apply (‚Üê mkAppM ``mk_eq_of_cons #[Œ±, Œ±', Œ∑, Œ∑', Œ∑s, Œ∑s', pf_Œ±, pf_Œ∑, pf_Œ∑s])
      return x
    | _, _ => throwError "failed to make a normalized equality for {e}"
  | _, _ => throwError "failed to make a normalized equality for {e}"

def monoidal (g : MVarId) : MetaM (List MVarId) := g.withContext do
  let mvarIds ‚Üê g.apply (‚Üê mkEqOfHom‚ÇÇ g)
  let mvarIds' ‚Üê repeat' (fun i ‚Ü¶ ofNormalizedEq i) mvarIds
  let mvarIds'' ‚Üê mvarIds'.mapM fun mvarId => do
    try
      mvarId.refl
      return [mvarId]
    catch _ =>
      try
        pure_coherence mvarId
      catch _ => return [mvarId]
  return mvarIds''.join

/-- Normalize the both sides of an equality. -/
elab "monoidal" : tactic => withMainContext do
  replaceMainGoal (‚Üê monoidal (‚Üê getMainGoal))

end Monoidal

end Mathlib.Tactic
