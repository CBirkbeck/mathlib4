/-
Copyright (c) 2024 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import Lean

open Lean Meta

namespace Mathlib.Tactic

namespace BicategoryLike

class Context (œÅ  : Type) where
  mkContext : Expr ‚Üí MetaM œÅ

def mkContext? {œÅ : Type} (e : Expr) [Context œÅ] : MetaM (Option œÅ) := do
  try return some (‚Üê Context.mkContext e) catch _ => return none

structure Obj where
  e : Option Expr
  deriving Inhabited

/-- Expressions for atomic 1-morphisms. -/
structure Atom‚ÇÅ : Type where
  /-- Extract a Lean expression from an `Atom‚ÇÅ` expression. -/
  e : Expr
  /-- The domain of the 1-morphism. -/
  src : Obj
  /-- The codomain of the 1-morphism. -/
  tgt : Obj
  deriving Inhabited

/-- A monad equipped with the ability to construct `Atom‚ÇÅ` terms. -/
class MkAtom‚ÇÅ (m : Type ‚Üí Type) where
  ofExpr (e : Expr) : m Atom‚ÇÅ

/-- Expressions for 1-morphisms. -/
inductive Mor‚ÇÅ : Type
  /-- `id e a` is the expression for `ùüô a`, where `e` is the underlying lean expression. -/
  | id (e : Expr) (a : Obj) : Mor‚ÇÅ
  /-- `comp e f g` is the expression for `f ‚â´ g`, where `e` is the underlying lean expression. -/
  | comp (e : Expr) : Mor‚ÇÅ ‚Üí Mor‚ÇÅ ‚Üí Mor‚ÇÅ
  /-- Construct the expression for an atomic 1-morphism. -/
  | of : Atom‚ÇÅ ‚Üí Mor‚ÇÅ
  deriving Inhabited

class MkMor‚ÇÅ (m : Type ‚Üí Type) where
  ofExpr (e : Expr) : m Mor‚ÇÅ

def Mor‚ÇÅ.e : Mor‚ÇÅ ‚Üí Expr
  | .id e _ => e
  | .comp e _ _ => e
  | .of a => a.e

/-- The domain of a 1-morphism. -/
def Mor‚ÇÅ.src : Mor‚ÇÅ ‚Üí Obj
  | .id _ a => a
  | .comp _ f _ => f.src
  | .of f => f.src

/-- The codomain of a 1-morphism. -/
def Mor‚ÇÅ.tgt : Mor‚ÇÅ ‚Üí Obj
  | .id _ a => a
  | .comp _ _ g => g.tgt
  | .of f => f.tgt

/-- Converts a 1-morphism into a list of its components. -/
def Mor‚ÇÅ.toList : Mor‚ÇÅ ‚Üí List Atom‚ÇÅ
  | .id _ _ => []
  | .comp _ f g => f.toList ++ g.toList
  | .of f => [f]

/-- A monad equipped with the ability to manipulate 1-morphisms. -/
class MonadMor‚ÇÅ (m : Type ‚Üí Type) where
  id‚ÇÅM (a : Obj) : m Mor‚ÇÅ
  comp‚ÇÅM (f g : Mor‚ÇÅ) : m Mor‚ÇÅ

abbrev Mor‚ÇÅ.compM {m : Type ‚Üí Type} [MonadMor‚ÇÅ m] (f g : Mor‚ÇÅ) : m Mor‚ÇÅ :=
  MonadMor‚ÇÅ.comp‚ÇÅM f g

abbrev Mor‚ÇÅ.idM {m : Type ‚Üí Type} [MonadMor‚ÇÅ m] (a : Obj) : m Mor‚ÇÅ :=
  MonadMor‚ÇÅ.id‚ÇÅM a

section PureCoherence

-- inductive StructuralIso : Type
--   /-- The expression for the associator `Œ±_ f g h`. -/
--   | associator (e : Expr) (f g h : Mor‚ÇÅ) : StructuralIso
--   /-- The expression for the left unitor `Œª_ f`. -/
--   | leftUnitor (e : Expr) (f : Mor‚ÇÅ) : StructuralIso
--   /-- The expression for the right unitor `œÅ_ f`. -/
--   | rightUnitor (e : Expr) (f : Mor‚ÇÅ) : StructuralIso
--   | id (e : Expr) (f : Mor‚ÇÅ) : StructuralIso
--   | comp (e : Expr) (f g h : Mor‚ÇÅ) (Œ∑ Œ∏ : StructuralIso) : StructuralIso
--   | whiskerLeft (e : Expr) (f g h : Mor‚ÇÅ) (Œ∑ : StructuralIso) : StructuralIso
--   | whiskerRight (e : Expr) (f g : Mor‚ÇÅ) (Œ∑ : StructuralIso) (h : Mor‚ÇÅ) : StructuralIso
--   | horizontalComp (e : Expr) (f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ : Mor‚ÇÅ) (Œ∑ Œ∏ : StructuralIso) : StructuralIso
--   | inv (e : Expr) (f g : Mor‚ÇÅ) (Œ∑ : StructuralIso) : StructuralIso
--   deriving Inhabited

inductive StructuralIsoAtom : Type
  /-- The expression for the associator `Œ±_ f g h`. -/
  | associator (e : Expr) (f g h : Mor‚ÇÅ) : StructuralIsoAtom
  /-- The expression for the left unitor `Œª_ f`. -/
  | leftUnitor (e : Expr) (f : Mor‚ÇÅ) : StructuralIsoAtom
  /-- The expression for the right unitor `œÅ_ f`. -/
  | rightUnitor (e : Expr) (f : Mor‚ÇÅ) : StructuralIsoAtom

def StructuralIsoAtom.e : StructuralIsoAtom ‚Üí Expr
  | .associator e .. => e
  | .leftUnitor e .. => e
  | .rightUnitor e .. => e

inductive StructuralIso : Type
  | atom (Œ± : StructuralIsoAtom) : StructuralIso
  /-- The expression for the associator `Œ±_ f g h`. -/
  | associator (e : Expr) (f g h : Mor‚ÇÅ) : StructuralIso
  /-- The expression for the left unitor `Œª_ f`. -/
  | leftUnitor (e : Expr) (f : Mor‚ÇÅ) : StructuralIso
  /-- The expression for the right unitor `œÅ_ f`. -/
  | rightUnitor (e : Expr) (f : Mor‚ÇÅ) : StructuralIso
  | id (e : Expr) (f : Mor‚ÇÅ) : StructuralIso
  | comp (e : Expr) (f g h : Mor‚ÇÅ) (Œ∑ Œ∏ : StructuralIso) : StructuralIso
  | whiskerLeft (e : Expr) (f g h : Mor‚ÇÅ) (Œ∑ : StructuralIso) : StructuralIso
  | whiskerRight (e : Expr) (f g : Mor‚ÇÅ) (Œ∑ : StructuralIso) (h : Mor‚ÇÅ) : StructuralIso
  | horizontalComp (e : Expr) (f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ : Mor‚ÇÅ) (Œ∑ Œ∏ : StructuralIso) : StructuralIso
  | inv (e : Expr) (f g : Mor‚ÇÅ) (Œ∑ : StructuralIso) : StructuralIso
  deriving Inhabited

class MkStructuralIso (m : Type ‚Üí Type) where
  ofExpr (e : Expr) : m (StructuralIso √ó Expr)

def StructuralIso.e : StructuralIso ‚Üí Expr
  | .atom Œ± => Œ±.e
  | .associator e .. => e
  | .leftUnitor e .. => e
  | .rightUnitor e .. => e
  | .id e .. => e
  | .comp e .. => e
  | .whiskerLeft e .. => e
  | .whiskerRight e ..  => e
  | .horizontalComp e .. => e
  | .inv e .. => e

open MonadMor‚ÇÅ

def StructuralIsoAtom.srcM {m : Type ‚Üí Type} [Monad m] [MonadMor‚ÇÅ m] : StructuralIsoAtom ‚Üí m Mor‚ÇÅ
  | .associator _ f g h => do comp‚ÇÅM (‚Üê comp‚ÇÅM f g) h
  | .leftUnitor _ f => do comp‚ÇÅM (‚Üê id‚ÇÅM f.src) f
  | .rightUnitor _ f => do comp‚ÇÅM f (‚Üê id‚ÇÅM f.tgt)

def StructuralIsoAtom.tgtM {m : Type ‚Üí Type} [Monad m] [MonadMor‚ÇÅ m] : StructuralIsoAtom ‚Üí m Mor‚ÇÅ
  | .associator _ f g h => do comp‚ÇÅM f (‚Üê comp‚ÇÅM g h)
  | .leftUnitor _ f => return f
  | .rightUnitor _ f => return f

def StructuralIso.srcM {m : Type ‚Üí Type} [Monad m] [MonadMor‚ÇÅ m] : StructuralIso ‚Üí m Mor‚ÇÅ
  | .atom Œ± => do Œ±.srcM
  | .associator _ f g h => do comp‚ÇÅM (‚Üê comp‚ÇÅM f g) h
  | .leftUnitor _ f => do comp‚ÇÅM (‚Üê id‚ÇÅM f.src) f
  | .rightUnitor _ f => do comp‚ÇÅM f (‚Üê id‚ÇÅM f.tgt)
  | .id _ f => return f
  | .comp _ f .. => return f
  | .whiskerLeft _ f g _ _ => do comp‚ÇÅM f g
  | .whiskerRight _ f _ _ h => do comp‚ÇÅM f h
  | .horizontalComp _ f‚ÇÅ _ f‚ÇÇ _ _ _ => do comp‚ÇÅM f‚ÇÅ f‚ÇÇ
  | .inv _ _ g _ => return g

def StructuralIso.tgtM {m : Type ‚Üí Type} [Monad m] [MonadMor‚ÇÅ m] : StructuralIso ‚Üí m Mor‚ÇÅ
  | .atom Œ± => do Œ±.tgtM
  | .associator _ f g h => do comp‚ÇÅM f (‚Üê comp‚ÇÅM g h)
  | .leftUnitor _ f => return f
  | .rightUnitor _ f => return f
  | .id _ f => return f
  | .comp _ _ _ h _ _ => return h
  | .whiskerLeft _ f _ h _ => do comp‚ÇÅM f h
  | .whiskerRight _ _ g _ h => do comp‚ÇÅM g h
  | .horizontalComp _ _ g‚ÇÅ _ g‚ÇÇ _ _ => do comp‚ÇÅM g‚ÇÅ g‚ÇÇ
  | .inv _ f _ _ => return f

-- def StructuralIso.srcM : StructuralIso ‚Üí Mor‚ÇÅ
--   | .associator _ src .. => src
--   | .leftUnitor _ src .. => src
--   | .rightUnitor _ src .. => src
--   | .id _ f => f
--   | .comp _ f .. => f
--   | .whiskerLeft _ src .. => src
--   | .whiskerRight _ src .. => src
--   | .horizontalComp _ src .. => src
--   | .inv _ _ g _ => g

-- def StructuralIso.tgt : StructuralIso ‚Üí Mor‚ÇÅ
--   | .associator _ _ tgt .. => tgt
--   | .leftUnitor _ _ tgt .. => tgt
--   | .rightUnitor _ _ tgt .. => tgt
--   | .id _ f => f
--   | .comp _ _ _ h .. => h
--   | .whiskerLeft _ _ tgt .. => tgt
--   | .whiskerRight _ _ tgt .. => tgt
--   | .horizontalComp _ _ tgt .. => tgt
--   | .inv _ f _ _ => f

/-- A monad equipped with the ability to manipulate structural isomorphism. -/
class MonadStructuralIso (m : Type ‚Üí Type) where
  associatorM (f g h : Mor‚ÇÅ) : m StructuralIso
  leftUnitorM (f : Mor‚ÇÅ) : m StructuralIso
  rightUnitorM (f : Mor‚ÇÅ) : m StructuralIso
  id‚ÇÇM (f : Mor‚ÇÅ) : m StructuralIso
  comp‚ÇÇM (Œ∑ Œ∏ : StructuralIso) : m StructuralIso
  whiskerLeftM (f : Mor‚ÇÅ) (Œ∑ : StructuralIso) : m StructuralIso
  whiskerRightM (Œ∑ : StructuralIso) (f : Mor‚ÇÅ) : m StructuralIso
  horizontalCompM (Œ∑ Œ∏ : StructuralIso) : m StructuralIso
  invM (Œ∑ : StructuralIso) : m StructuralIso

/-- Type of normalized 1-morphisms, represented by (reversed) lists. -/
inductive NormalizedHom : Type
  /-- The identity 1-morphism `ùüô a`. -/
  | nil (e : Mor‚ÇÅ) (a : Obj) : NormalizedHom
  /-- The `cons` composes an atomic 1-morphism at the end of a normalized 1-morphism. -/
  | cons (e : Mor‚ÇÅ) : NormalizedHom ‚Üí Atom‚ÇÅ ‚Üí NormalizedHom
  deriving Inhabited

/-- The underlying expression of a normalized 1-morphism. -/
def NormalizedHom.e : NormalizedHom ‚Üí Mor‚ÇÅ
  | NormalizedHom.nil e _ => e
  | NormalizedHom.cons e _ _  => e

def NormalizedHom.src : NormalizedHom ‚Üí Obj
  | NormalizedHom.nil _ a => a
  | NormalizedHom.cons _ p _ => p.src

def NormalizedHom.tgt : NormalizedHom ‚Üí Obj
  | NormalizedHom.nil _ a => a
  | NormalizedHom.cons _ _  f => f.tgt

open MonadMor‚ÇÅ

variable {m : Type ‚Üí Type} [Monad m]

/-- Construct the `NormalizedHom.nil` term in `m`. -/
def normalizedHom.nilM [MonadMor‚ÇÅ m] (a : Obj) : m NormalizedHom := do
  return NormalizedHom.nil (‚Üê id‚ÇÅM a) a

/-- Construct a `NormalizedHom.cons` term in `m`. -/
def NormalizedHom.consM [MonadMor‚ÇÅ m] (p : NormalizedHom) (f : Atom‚ÇÅ) :
    m NormalizedHom := do
  return NormalizedHom.cons (‚Üê comp‚ÇÅM p.e (.of f)) p f

end PureCoherence

section Normalize

/-- Expressions for atomic structural 2-morphisms. -/
inductive StructuralAtom : Type
  | id (e : Expr) (f : Mor‚ÇÅ) : StructuralAtom
  /-- The expression for the associator `(Œ±_ f g h).hom`. -/
  | associator (e : Expr) (f g h : Mor‚ÇÅ) : StructuralAtom
  /-- The expression for the inverse of the associator `(Œ±_ f g h).inv`. -/
  | associatorInv (e : Expr) (f g h : Mor‚ÇÅ) : StructuralAtom
  /-- The expression for the left unitor `(Œª_ f).hom`. -/
  | leftUnitor (e : Expr) (f : Mor‚ÇÅ) : StructuralAtom
  /-- The expression for the inverse of the left unitor `(Œª_ f).inv`. -/
  | leftUnitorInv (e : Expr) (f : Mor‚ÇÅ) : StructuralAtom
  /-- The expression for the right unitor `(œÅ_ f).hom`. -/
  | rightUnitor (e : Expr) (f : Mor‚ÇÅ) : StructuralAtom
  /-- The expression for the inverse of the right unitor `(œÅ_ f).inv`. -/
  | rightUnitorInv (e : Expr) (f : Mor‚ÇÅ) : StructuralAtom
  /-- Expressions for `Œ±` in the monoidal composition `Œ∑ ‚äó‚â´ Œ∏ := Œ∑ ‚â´ Œ± ‚â´ Œ∏`. -/
  | coherence (e : Expr) (src tgt : Mor‚ÇÅ) (inst : Expr) : StructuralAtom
  deriving Inhabited

class MkStructuralAtom (m : Type ‚Üí Type) where
  ofExpr (e : Expr) : m StructuralAtom

class MonadStructuralAtom (m : Type ‚Üí Type) where
  idM (f : Mor‚ÇÅ) : m StructuralAtom
  associatorM (f g h : Mor‚ÇÅ) : m StructuralAtom
  associatorInvM (f g h : Mor‚ÇÅ) : m StructuralAtom
  leftUnitorM (f : Mor‚ÇÅ) : m StructuralAtom
  leftUnitorInvM (f : Mor‚ÇÅ) : m StructuralAtom
  rightUnitorM (f : Mor‚ÇÅ) : m StructuralAtom
  rightUnitorInvM (f : Mor‚ÇÅ) : m StructuralAtom
  coherenceM (src tgt : Mor‚ÇÅ) (inst : Expr) : m StructuralAtom

def StructuralAtom.e : StructuralAtom ‚Üí Expr
  | .id e .. => e
  | .associator e .. => e
  | .associatorInv e .. => e
  | .leftUnitor e .. => e
  | .leftUnitorInv e .. => e
  | .rightUnitor e .. => e
  | .rightUnitorInv e .. => e
  | .coherence e .. => e

variable {m : Type ‚Üí Type} [Monad m] [MonadMor‚ÇÅ m]

open MonadMor‚ÇÅ

/-- The domain of a 2-morphism. -/
def StructuralAtom.srcM : StructuralAtom ‚Üí m Mor‚ÇÅ
  | .id _ f => return f
  | .associator _ f g h => do comp‚ÇÅM f (‚Üê comp‚ÇÅM g h)
  | .associatorInv _ f g h => do comp‚ÇÅM (‚Üê comp‚ÇÅM f g) h
  | .leftUnitor _ f => do comp‚ÇÅM (‚Üê id‚ÇÅM f.src) f
  | .leftUnitorInv _ f => return f
  | .rightUnitor _ f => do comp‚ÇÅM f (‚Üê id‚ÇÅM f.src)
  | .rightUnitorInv _ f => return f
  | .coherence _ src _ _ => return src

/-- The codomain of a 2-morphism. -/
def StructuralAtom.tgtM : StructuralAtom ‚Üí m Mor‚ÇÅ
  | .id _ f => return f
  | .associator _ f g h => do comp‚ÇÅM f (‚Üê comp‚ÇÅM g h)
  | .associatorInv _ f g h => do comp‚ÇÅM (‚Üê comp‚ÇÅM f g) h
  | .leftUnitor _ f => return f
  | .leftUnitorInv _ f => do comp‚ÇÅM (‚Üê id‚ÇÅM f.tgt) f
  | .rightUnitor _ f => return f
  | .rightUnitorInv _ f => do comp‚ÇÅM f (‚Üê id‚ÇÅM f.tgt)
  | .coherence _ _ tgt _ => return tgt

/-- Expressions for atomic non-structural 2-morphisms. -/
structure Atom where
  /-- Extract a Lean expression from an `Atom` expression. -/
  e : Expr
  /-- The domain of a 2-morphism. -/
  src : Mor‚ÇÅ
  /-- The codomain of a 2-morphism. -/
  tgt : Mor‚ÇÅ
  deriving Inhabited

/-- A monad equipped with the ability to construct `Atom` terms. -/
class MkAtom (m : Type ‚Üí Type) where
  ofExpr (e : Expr) : m Atom

inductive Mor‚ÇÇ : Type where
  | structuralAtom (Œ± : StructuralIsoAtom) : Mor‚ÇÇ
  -- | id (e : Expr) (f : Mor‚ÇÅ) : Mor‚ÇÇ
  | comp (e : Expr) (Œ∑ Œ∏ : Mor‚ÇÇ) : Mor‚ÇÇ
  | whiskerLeft (e : Expr) (f : Mor‚ÇÅ) (Œ∑ : Mor‚ÇÇ) : Mor‚ÇÇ
  | whiskerRight (e : Expr) (Œ∑ : Mor‚ÇÇ) (h : Mor‚ÇÅ) : Mor‚ÇÇ
  | horizontalComp (e : Expr) (Œ∑ Œ∏ : Mor‚ÇÇ) : Mor‚ÇÇ
  | coherenceComp (e : Expr) (inst : Expr) (Œ± : StructuralIso) (Œ∑ Œ∏ : Mor‚ÇÇ) : Mor‚ÇÇ
  | of (Œ∑ : Atom) : Mor‚ÇÇ
  -- | coherenceHom (e : Expr) (f g : Mor‚ÇÅ) (inst : Expr) : Mor‚ÇÇ
  deriving Inhabited

class MkMor‚ÇÇ (m : Type ‚Üí Type) where
  ofExpr (e : Expr) : m Mor‚ÇÇ

def Mor‚ÇÇ.e : Mor‚ÇÇ ‚Üí Expr
  | .structuralAtom Œ± => Œ±.e
  -- | .id e .. => e
  | .comp e .. => e
  | .whiskerLeft e .. => e
  | .whiskerRight e .. => e
  | .horizontalComp e .. => e
  | .coherenceComp e .. => e
  | .of Œ∑ => Œ∑.e
  -- | .coherenceHom e .. => e

-- def Mor‚ÇÇ.srcM {m : Type ‚Üí Type} [Monad m] [MonadMor‚ÇÅ m] : Mor‚ÇÇ ‚Üí m Mor‚ÇÅ
--   | .structuralAtom Œ± => return Œ±.src
--   | .id _ f => return f
--   | .comp _ f _ => f.srcM
--   | .whiskerLeft _ f Œ∑ => do (f.compM (‚Üê Œ∑.srcM))
--   | .whiskerRight _ Œ∑ _ => Œ∑.src
--   | .horizontalComp _ Œ∑ _ => Œ∑.src
--   | .coherenceComp _ _ Œ∑ _ => Œ∑.src
--   | .coherenceHom _ f _ _ => f


class MonadMor‚ÇÇ (m : Type ‚Üí Type) where
  id‚ÇÇM (f : Mor‚ÇÅ) : m Mor‚ÇÇ
  comp‚ÇÇM (f g : Mor‚ÇÇ) : m Mor‚ÇÇ
  whiskerLeftM (f : Mor‚ÇÅ) (Œ∑ : Mor‚ÇÇ) : m Mor‚ÇÇ
  whiskerRightM (Œ∑ : Mor‚ÇÇ) (h : Mor‚ÇÅ) : m Mor‚ÇÇ
  horizontalCompM (Œ∑ Œ∏ : Mor‚ÇÇ) : m Mor‚ÇÇ
  coherenceCompM (inst : Expr) (Œ∑ Œ∏ : Mor‚ÇÇ) : m Mor‚ÇÇ
  -- coherenceHomM (f g : Mor‚ÇÅ) (e : Expr) : m Mor‚ÇÇ

/-- Expressions of the form `Œ∑ ‚ñ∑ f‚ÇÅ ‚ñ∑ ... ‚ñ∑ f‚Çô`. -/
inductive WhiskerRight : Type
  /-- Construct the expression for an atomic 2-morphism. -/
  | of (Œ∑ : Atom) : WhiskerRight
  /-- Construct the expression for `Œ∑ ‚ñ∑ f`. -/
  | whisker (e : Expr) (Œ∑ : WhiskerRight) (f : Atom‚ÇÅ) : WhiskerRight
  deriving Inhabited

/-- Expressions of the form `Œ∑‚ÇÅ ‚äó ... ‚äó Œ∑‚Çô`. -/
inductive HorizontalComp : Type
  | of (Œ∑ : WhiskerRight) : HorizontalComp
  | cons (e : Expr) (Œ∑ : WhiskerRight) (Œ∑s : HorizontalComp) :
    HorizontalComp
  deriving Inhabited

/-- Expressions of the form `f‚ÇÅ ‚óÅ ... ‚óÅ f‚Çô ‚óÅ Œ∑`. -/
inductive WhiskerLeft : Type
  /-- Construct the expression for a right-whiskered 2-morphism. -/
  | of (Œ∑ : HorizontalComp) : WhiskerLeft
  /-- Construct the expression for `f ‚óÅ Œ∑`. -/
  | whisker (e : Expr) (f : Atom‚ÇÅ) (Œ∑ : WhiskerLeft) : WhiskerLeft
  deriving Inhabited

/-- Expressions for structural 2-morphisms. -/
inductive Structural : Type
  /-- Expressions for atomic structural 2-morphisms. -/
  | atom (Œ∑ : StructuralAtom) : Structural
  -- /-- Expressions for the identity `ùüô f`. -/
  -- | id (e : Expr) (f : Mor‚ÇÅ) : Structural
  /-- Expressions for the composition `Œ∑ ‚â´ Œ∏`. -/
  | comp (e : Expr) (Œ± Œ≤ : Structural) : Structural
  /-- Expressions for the left whiskering `f ‚óÅ Œ∑`. -/
  | whiskerLeft (e : Expr) (f : Mor‚ÇÅ) (Œ∑ : Structural) : Structural
  /-- Expressions for the right whiskering `Œ∑ ‚ñ∑ f`. -/
  | whiskerRight (e : Expr) (Œ∑ : Structural) (f : Mor‚ÇÅ) : Structural
  /-- Expressions for the tensor `Œ± ‚äó Œ≤`. -/
  | horizontalComp (e : Expr) (Œ± Œ≤ : Structural) : Structural
  deriving Inhabited

def Structural.e : Structural ‚Üí Expr
  | .atom Œ∑ => Œ∑.e
  -- | .id e _ => e
  | .comp e _ _ => e
  | .whiskerLeft e _ _ => e
  | .whiskerRight e _ _ => e
  | .horizontalComp e _ _ => e

class MonadStructural (m : Type ‚Üí Type) extends MonadStructuralAtom m where
  -- idM (f : Mor‚ÇÅ) : m Structural
  compM (Œ± Œ≤ : Structural) : m Structural
  whiskerLeftM (f : Mor‚ÇÅ) (Œ± : Structural) : m Structural
  whiskerRightM (Œ± : Structural) (f : Mor‚ÇÅ) : m Structural
  horizontalCompM (Œ± Œ≤ : Structural) : m Structural

/-- Normalized expressions for 2-morphisms. -/
inductive NormalExpr : Type
  /-- Construct the expression for a structural 2-morphism. -/
  | nil (Œ± : StructuralIso) : NormalExpr
  /-- Construct the normalized expression of 2-morphisms recursively. -/
  | cons (e : Expr) (headStructural : StructuralIso) (head : WhiskerLeft) (tail : NormalExpr) : NormalExpr
  deriving Inhabited


class MonadWhiskerRight (m : Type ‚Üí Type) where
  whiskerRightM (Œ∑ : WhiskerRight) (f : Atom‚ÇÅ) : m WhiskerRight

class MonadHorizontalComp (m : Type ‚Üí Type) extends MonadWhiskerRight m where
  hConsM (Œ∑ : WhiskerRight) (Œ∑s : HorizontalComp) : m HorizontalComp

class MonadWhiskerLeft (m : Type ‚Üí Type) extends MonadHorizontalComp m where
  whiskerLeftM (f : Atom‚ÇÅ) (Œ∑ : WhiskerLeft) : m WhiskerLeft

class MonadNormalExpr (m : Type ‚Üí Type) extends MonadWhiskerLeft m where
  consM (headStructural : StructuralIso) (Œ∑ : WhiskerLeft) (Œ∑s : NormalExpr) : m NormalExpr

variable {m : Type ‚Üí Type} [Monad m] [MonadMor‚ÇÅ m]

open MonadMor‚ÇÅ

/-- The domain of a 2-morphism. -/
def WhiskerRight.srcM : WhiskerRight ‚Üí m Mor‚ÇÅ
  | WhiskerRight.of Œ∑ => return Œ∑.src
  | WhiskerRight.whisker _ Œ∑ f => do comp‚ÇÅM (‚Üê Œ∑.srcM) (.of f)

/-- The codomain of a 2-morphism. -/
def WhiskerRight.tgtM : WhiskerRight ‚Üí m Mor‚ÇÅ
  | WhiskerRight.of Œ∑ => return Œ∑.tgt
  | WhiskerRight.whisker _ Œ∑ f => do comp‚ÇÅM (‚Üê Œ∑.tgtM) (.of f)

/-- The domain of a 2-morphism. -/
def HorizontalComp.srcM : HorizontalComp ‚Üí m Mor‚ÇÅ
  | HorizontalComp.of Œ∑ => Œ∑.srcM
  | HorizontalComp.cons _ Œ∑ Œ∑s => do comp‚ÇÅM (‚Üê Œ∑.srcM) (‚Üê Œ∑s.srcM)

/-- The codomain of a 2-morphism. -/
def HorizontalComp.tgtM : HorizontalComp ‚Üí m Mor‚ÇÅ
  | HorizontalComp.of Œ∑ => Œ∑.tgtM
  | HorizontalComp.cons _ Œ∑ Œ∑s => do comp‚ÇÅM (‚Üê Œ∑.tgtM) (‚Üê Œ∑s.tgtM)

/-- The domain of a 2-morphism. -/
def WhiskerLeft.srcM : WhiskerLeft ‚Üí m Mor‚ÇÅ
  | WhiskerLeft.of Œ∑ => Œ∑.srcM
  | WhiskerLeft.whisker _ f Œ∑ => do comp‚ÇÅM (.of f) (‚Üê Œ∑.srcM)

/-- The codomain of a 2-morphism. -/
def WhiskerLeft.tgtM : WhiskerLeft ‚Üí m Mor‚ÇÅ
  | WhiskerLeft.of Œ∑ => Œ∑.tgtM
  | WhiskerLeft.whisker _ f Œ∑ => do comp‚ÇÅM (.of f) (‚Üê Œ∑.tgtM)

/-- The domain of a 2-morphism. -/
def Structural.srcM : Structural ‚Üí m Mor‚ÇÅ
  | .atom Œ∑ => Œ∑.srcM
  -- | .id _ f => return f
  | .comp _ Œ± _ => Œ±.srcM
  | .whiskerLeft _ f Œ∑ => do comp‚ÇÅM f (‚Üê Œ∑.srcM)
  | .whiskerRight _ Œ∑ f => do comp‚ÇÅM (‚Üê Œ∑.srcM) f
  | .horizontalComp _ Œ± Œ≤ => do comp‚ÇÅM (‚Üê Œ±.srcM) (‚Üê Œ≤.srcM)

/-- The codomain of a 2-morphism. -/
def Structural.tgtM : Structural ‚Üí m Mor‚ÇÅ
  | .atom Œ∑ => Œ∑.tgtM
  -- | .id _ f => return f
  | .comp _ _ Œ≤ => Œ≤.tgtM
  | .whiskerLeft _ f Œ∑ => do comp‚ÇÅM f (‚Üê Œ∑.tgtM)
  | .whiskerRight _ Œ∑ f => do comp‚ÇÅM (‚Üê Œ∑.tgtM) f
  | .horizontalComp _ Œ± Œ≤ => do comp‚ÇÅM (‚Üê Œ±.tgtM) (‚Üê Œ≤.tgtM)

/-- The domain of a 2-morphism. -/
def NormalExpr.srcM : NormalExpr ‚Üí m Mor‚ÇÅ
  | NormalExpr.nil Œ∑ => Œ∑.srcM
  | NormalExpr.cons _ Œ± _ _ => Œ±.srcM

/-- The codomain of a 2-morphism. -/
def NormalExpr.tgtM : NormalExpr ‚Üí m Mor‚ÇÅ
  | NormalExpr.nil Œ∑ => Œ∑.tgtM
  | NormalExpr.cons _ _ _ Œ∑s => Œ∑s.tgtM

variable [MonadStructuralAtom m]

variable [MonadStructuralIso m]

/-- The identity 2-morphism as a term of `normalExpr`. -/
def NormalExpr.idM (f : Mor‚ÇÅ) : m NormalExpr :=
  return .nil <| ‚Üê MonadStructuralIso.id‚ÇÇM f

/-- The associator as a term of `normalExpr`. -/
def NormalExpr.associatorM (f g h : Mor‚ÇÅ) : m NormalExpr := do
  return .nil <| ‚Üê MonadStructuralIso.associatorM f g h

/-- The inverse of the associator as a term of `normalExpr`. -/
def NormalExpr.associatorInvM (f g h : Mor‚ÇÅ) : m NormalExpr :=
  return .nil <| ‚Üê MonadStructuralIso.invM <| ‚Üê MonadStructuralIso.associatorM f g h

/-- The left unitor as a term of `normalExpr`. -/
def NormalExpr.leftUnitorM (f : Mor‚ÇÅ) : m NormalExpr :=
  return .nil <| ‚Üê MonadStructuralIso.leftUnitorM f

/-- The inverse of the left unitor as a term of `normalExpr`. -/
def NormalExpr.leftUnitorInvM (f : Mor‚ÇÅ) : m NormalExpr :=
  return .nil <| ‚Üê MonadStructuralIso.invM <| ‚Üê MonadStructuralIso.leftUnitorM f

/-- The right unitor as a term of `normalExpr`. -/
def NormalExpr.rightUnitorM (f : Mor‚ÇÅ) : m NormalExpr :=
  return .nil <| ‚Üê MonadStructuralIso.rightUnitorM f

/-- The inverse of the right unitor as a term of `normalExpr`. -/
def NormalExpr.rightUnitorInvM (f : Mor‚ÇÅ) : m NormalExpr :=
  return .nil <| ‚Üê MonadStructuralIso.invM <| ‚Üê MonadStructuralIso.rightUnitorM f

/-- Construct a `NormalExpr` expression from a `WhiskerLeft` expression. -/
def NormalExpr.ofM [MonadNormalExpr m] (Œ∑ : WhiskerLeft) : m NormalExpr := do
  MonadNormalExpr.consM ((‚Üê MonadStructuralIso.id‚ÇÇM (‚Üê Œ∑.srcM))) Œ∑
    (.nil ((‚Üê MonadStructuralIso.id‚ÇÇM (‚Üê Œ∑.tgtM))))

/-- Construct a `NormalExpr` expression from a Lean expression for an atomic 2-morphism. -/
def NormalExpr.ofAtomM [MonadNormalExpr m] (Œ∑ : Atom) : m NormalExpr :=
  NormalExpr.ofM <| .of <| .of <| .of Œ∑

/-- Convert a `NormalExpr` expression into a list of `WhiskerLeft` expressions. -/
def NormalExpr.toList : NormalExpr ‚Üí List WhiskerLeft
  | NormalExpr.nil _ => []
  | NormalExpr.cons _ _ Œ∑ Œ∑s => Œ∑ :: NormalExpr.toList Œ∑s

end Normalize
