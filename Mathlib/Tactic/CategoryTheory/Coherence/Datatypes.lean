/-
Copyright (c) 2024 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import Lean

open Lean Meta

namespace Mathlib.Tactic

namespace BicategoryLike

structure Obj where
  e? : Option Expr
  deriving Inhabited

def Obj.e (a : Obj) : Expr :=
  a.e?.get!

/-- Expressions for atomic 1-morphisms. -/
structure Atom‚ÇÅ : Type where
  /-- Extract a Lean expression from an `Atom‚ÇÅ` expression. -/
  e : Expr
  /-- The domain of the 1-morphism. -/
  src : Obj
  /-- The codomain of the 1-morphism. -/
  tgt : Obj
  deriving Inhabited

/-- A monad equipped with the ability to construct `Atom‚ÇÅ` terms. -/
class MkAtom‚ÇÅ (m : Type ‚Üí Type) where
  ofExpr (e : Expr) : m Atom‚ÇÅ

/-- Expressions for 1-morphisms. -/
inductive Mor‚ÇÅ : Type
  /-- `id e a` is the expression for `ùüô a`, where `e` is the underlying lean expression. -/
  | id (e : Expr) (a : Obj) : Mor‚ÇÅ
  /-- `comp e f g` is the expression for `f ‚â´ g`, where `e` is the underlying lean expression. -/
  | comp (e : Expr) : Mor‚ÇÅ ‚Üí Mor‚ÇÅ ‚Üí Mor‚ÇÅ
  /-- Construct the expression for an atomic 1-morphism. -/
  | of : Atom‚ÇÅ ‚Üí Mor‚ÇÅ
  deriving Inhabited

class MkMor‚ÇÅ (m : Type ‚Üí Type) where
  ofExpr (e : Expr) : m Mor‚ÇÅ

def Mor‚ÇÅ.e : Mor‚ÇÅ ‚Üí Expr
  | .id e _ => e
  | .comp e _ _ => e
  | .of a => a.e

/-- The domain of a 1-morphism. -/
def Mor‚ÇÅ.src : Mor‚ÇÅ ‚Üí Obj
  | .id _ a => a
  | .comp _ f _ => f.src
  | .of f => f.src

/-- The codomain of a 1-morphism. -/
def Mor‚ÇÅ.tgt : Mor‚ÇÅ ‚Üí Obj
  | .id _ a => a
  | .comp _ _ g => g.tgt
  | .of f => f.tgt

/-- Converts a 1-morphism into a list of its components. -/
def Mor‚ÇÅ.toList : Mor‚ÇÅ ‚Üí List Atom‚ÇÅ
  | .id _ _ => []
  | .comp _ f g => f.toList ++ g.toList
  | .of f => [f]

/-- A monad equipped with the ability to manipulate 1-morphisms. -/
class MonadMor‚ÇÅ (m : Type ‚Üí Type) where
  id‚ÇÅM (a : Obj) : m Mor‚ÇÅ
  comp‚ÇÅM (f g : Mor‚ÇÅ) : m Mor‚ÇÅ

abbrev Mor‚ÇÅ.compM {m : Type ‚Üí Type} [MonadMor‚ÇÅ m] (f g : Mor‚ÇÅ) : m Mor‚ÇÅ :=
  MonadMor‚ÇÅ.comp‚ÇÅM f g

abbrev Mor‚ÇÅ.idM {m : Type ‚Üí Type} [MonadMor‚ÇÅ m] (a : Obj) : m Mor‚ÇÅ :=
  MonadMor‚ÇÅ.id‚ÇÅM a

class Context (œÅ : Type) where
  mkContext? : Expr ‚Üí MetaM (Option œÅ)

export Context (mkContext?)

structure State where
  cache : PHashMap Expr Mor‚ÇÅ := {}

abbrev CoherenceM (œÅ : Type) [Context œÅ] := ReaderT œÅ <| StateT State MetaM

def CoherenceM.run {Œ± œÅ : Type} [Context œÅ] (x : CoherenceM œÅ Œ±) (ctx : œÅ) (s : State := {}) :
    MetaM Œ± := do
  Prod.fst <$> ReaderT.run x ctx s

def mkContext {œÅ  : Type} [Context œÅ] (e : Expr) : MetaM œÅ := do
  match ‚Üê mkContext? e with
  | some c => return c
  | none => throwError "failed to construct a monoidal category or bicategory context from {e}"

section PureCoherence

structure CoherenceHom where
  e : Expr
  src : Mor‚ÇÅ
  tgt : Mor‚ÇÅ
  inst : Expr
  unfold : Expr
  deriving Inhabited

structure AtomIso where
  e : Expr
  src : Mor‚ÇÅ
  tgt : Mor‚ÇÅ
  deriving Inhabited

inductive StructuralAtom : Type
  /-- The expression for the associator `Œ±_ f g h`. -/
  | associator (e : Expr) (f g h : Mor‚ÇÅ) : StructuralAtom
  /-- The expression for the left unitor `Œª_ f`. -/
  | leftUnitor (e : Expr) (f : Mor‚ÇÅ) : StructuralAtom
  /-- The expression for the right unitor `œÅ_ f`. -/
  | rightUnitor (e : Expr) (f : Mor‚ÇÅ) : StructuralAtom
  | id (e : Expr) (f : Mor‚ÇÅ) : StructuralAtom
  | coherenceHom (Œ± : CoherenceHom) : StructuralAtom
  deriving Inhabited

inductive Mor‚ÇÇIso : Type where
  | structuralAtom (Œ± : StructuralAtom) : Mor‚ÇÇIso
  | comp (e : Expr) (f g h : Mor‚ÇÅ) (Œ∑ Œ∏ : Mor‚ÇÇIso) : Mor‚ÇÇIso
  | whiskerLeft (e : Expr) (f g h : Mor‚ÇÅ) (Œ∑ : Mor‚ÇÇIso) : Mor‚ÇÇIso
  | whiskerRight (e : Expr) (f g : Mor‚ÇÅ) (Œ∑ : Mor‚ÇÇIso) (h : Mor‚ÇÅ) : Mor‚ÇÇIso
  | horizontalComp (e : Expr) (f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ : Mor‚ÇÅ) (Œ∑ Œ∏ : Mor‚ÇÇIso) : Mor‚ÇÇIso
  | inv (e : Expr) (f g : Mor‚ÇÅ) (Œ∑ : Mor‚ÇÇIso) : Mor‚ÇÇIso
  | coherenceComp (e : Expr) (f g h i : Mor‚ÇÅ) (Œ± : CoherenceHom) (Œ∑ Œ∏ : Mor‚ÇÇIso) : Mor‚ÇÇIso
  | of (Œ∑ : AtomIso) : Mor‚ÇÇIso
  deriving Inhabited

class MonadCoherehnceHom (m : Type ‚Üí Type) where
  unfoldM (Œ± : CoherenceHom) : m Mor‚ÇÇIso

namespace CoherenceHom

export MonadCoherehnceHom (unfoldM)

end CoherenceHom

def StructuralAtom.e : StructuralAtom ‚Üí Expr
  | .associator e .. => e
  | .leftUnitor e .. => e
  | .rightUnitor e .. => e
  | .id e .. => e
  | .coherenceHom Œ± => Œ±.e

open MonadMor‚ÇÅ

variable {m : Type ‚Üí Type} [Monad m]

def StructuralAtom.srcM [MonadMor‚ÇÅ m] : StructuralAtom ‚Üí m Mor‚ÇÅ
  | .associator _ f g h => do comp‚ÇÅM (‚Üê comp‚ÇÅM f g) h
  | .leftUnitor _ f => do comp‚ÇÅM (‚Üê id‚ÇÅM f.src) f
  | .rightUnitor _ f => do comp‚ÇÅM f (‚Üê id‚ÇÅM f.tgt)
  | .id _ f => return f
  | .coherenceHom Œ± => return Œ±.src

def StructuralAtom.tgtM [MonadMor‚ÇÅ m] : StructuralAtom ‚Üí m Mor‚ÇÅ
  | .associator _ f g h => do comp‚ÇÅM f (‚Üê comp‚ÇÅM g h)
  | .leftUnitor _ f => return f
  | .rightUnitor _ f => return f
  | .id _ f => return f
  | .coherenceHom Œ± => return Œ±.tgt

def Mor‚ÇÇIso.e : Mor‚ÇÇIso ‚Üí Expr
  | .structuralAtom Œ± => Œ±.e
  | .comp e .. => e
  | .whiskerLeft e .. => e
  | .whiskerRight e .. => e
  | .horizontalComp e .. => e
  | .inv e .. => e
  | .coherenceComp e .. => e
  | .of Œ∑ => Œ∑.e

def Mor‚ÇÇIso.srcM {m : Type ‚Üí Type} [Monad m] [MonadMor‚ÇÅ m] : Mor‚ÇÇIso ‚Üí m Mor‚ÇÅ
  | .structuralAtom Œ± => Œ±.srcM
  | .comp _ f .. => return f
  | .whiskerLeft _ f g .. => do comp‚ÇÅM f g
  | .whiskerRight _ f _ _ h => do comp‚ÇÅM f h
  | .horizontalComp _ f‚ÇÅ _ f‚ÇÇ .. => do comp‚ÇÅM f‚ÇÅ f‚ÇÇ
  | .inv _ _ g _ => return g
  | .coherenceComp _ f .. => return f
  | .of Œ∑ => return Œ∑.src

def Mor‚ÇÇIso.tgtM {m : Type ‚Üí Type} [Monad m] [MonadMor‚ÇÅ m] : Mor‚ÇÇIso ‚Üí m Mor‚ÇÅ
  | .structuralAtom Œ± => Œ±.tgtM
  | .comp _ _ _ h .. => return h
  | .whiskerLeft _ f _ h _ => do comp‚ÇÅM f h
  | .whiskerRight _ _ g _ h => do comp‚ÇÅM g h
  | .horizontalComp _ _ g‚ÇÅ _ g‚ÇÇ _ _ => do comp‚ÇÅM g‚ÇÅ g‚ÇÇ
  | .inv _ f _ _ => return f
  | .coherenceComp _ _ _ _ i .. => return i
  | .of Œ∑ => return Œ∑.tgt

/-- A monad equipped with the ability to manipulate structural isomorphism. -/
class MonadStructuralAtom (m : Type ‚Üí Type) where
  associatorM (f g h : Mor‚ÇÅ) : m StructuralAtom
  leftUnitorM (f : Mor‚ÇÅ) : m StructuralAtom
  rightUnitorM (f : Mor‚ÇÅ) : m StructuralAtom
  id‚ÇÇM (f : Mor‚ÇÅ) : m StructuralAtom
  coherenceHomM (f g : Mor‚ÇÅ) (inst : Expr) : m CoherenceHom

namespace StructuralAtom

export MonadStructuralAtom (associatorM leftUnitorM rightUnitorM id‚ÇÇM)

end StructuralAtom

/-- Type of normalized 1-morphisms, represented by (reversed) lists. -/
inductive NormalizedHom : Type
  /-- The identity 1-morphism `ùüô a`. -/
  | nil (e : Mor‚ÇÅ) (a : Obj) : NormalizedHom
  /-- The `cons` composes an atomic 1-morphism at the end of a normalized 1-morphism. -/
  | cons (e : Mor‚ÇÅ) : NormalizedHom ‚Üí Atom‚ÇÅ ‚Üí NormalizedHom
  deriving Inhabited

/-- The underlying expression of a normalized 1-morphism. -/
def NormalizedHom.e : NormalizedHom ‚Üí Mor‚ÇÅ
  | NormalizedHom.nil e _ => e
  | NormalizedHom.cons e _ _  => e

def NormalizedHom.src : NormalizedHom ‚Üí Obj
  | NormalizedHom.nil _ a => a
  | NormalizedHom.cons _ p _ => p.src

def NormalizedHom.tgt : NormalizedHom ‚Üí Obj
  | NormalizedHom.nil _ a => a
  | NormalizedHom.cons _ _  f => f.tgt

/-- Construct the `NormalizedHom.nil` term in `m`. -/
def normalizedHom.nilM [MonadMor‚ÇÅ m] (a : Obj) : m NormalizedHom := do
  return NormalizedHom.nil (‚Üê id‚ÇÅM a) a

/-- Construct a `NormalizedHom.cons` term in `m`. -/
def NormalizedHom.consM [MonadMor‚ÇÅ m] (p : NormalizedHom) (f : Atom‚ÇÅ) :
    m NormalizedHom := do
  return NormalizedHom.cons (‚Üê comp‚ÇÅM p.e (.of f)) p f

end PureCoherence

section Normalize

variable {m : Type ‚Üí Type} [Monad m] [MonadMor‚ÇÅ m]

open MonadMor‚ÇÅ

/-- Expressions for atomic non-structural 2-morphisms. -/
structure Atom where
  /-- Extract a Lean expression from an `Atom` expression. -/
  e : Expr
  /-- The domain of a 2-morphism. -/
  src : Mor‚ÇÅ
  /-- The codomain of a 2-morphism. -/
  tgt : Mor‚ÇÅ
  deriving Inhabited

structure IsoLift where
  iso : Mor‚ÇÇIso
  eq : Expr

inductive Mor‚ÇÇ : Type where
  | isoHom (e : Expr) (isoLift : IsoLift) (iso : Mor‚ÇÇIso) : Mor‚ÇÇ
  | isoInv (e : Expr) (isoLift : IsoLift) (iso : Mor‚ÇÇIso) : Mor‚ÇÇ
  | id (e : Expr) (isoLift : IsoLift) (f : Mor‚ÇÅ) : Mor‚ÇÇ
  | comp (e : Expr) (isoLift? : Option IsoLift) (f g h : Mor‚ÇÅ) (Œ∑ Œ∏ : Mor‚ÇÇ) : Mor‚ÇÇ
  | whiskerLeft (e : Expr) (isoLift? : Option IsoLift) (f g h : Mor‚ÇÅ) (Œ∑ : Mor‚ÇÇ) : Mor‚ÇÇ
  | whiskerRight (e : Expr) (isoLift? : Option IsoLift) (f g : Mor‚ÇÅ) (Œ∑ : Mor‚ÇÇ) (h : Mor‚ÇÅ) : Mor‚ÇÇ
  | horizontalComp (e : Expr) (isoLift? : Option IsoLift) (f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ : Mor‚ÇÅ) (Œ∑ Œ∏ : Mor‚ÇÇ) : Mor‚ÇÇ
  | coherenceComp (e : Expr) (isoLift? : Option IsoLift) (f g h i : Mor‚ÇÅ) (Œ± : CoherenceHom) (Œ∑ Œ∏ : Mor‚ÇÇ) : Mor‚ÇÇ
  | of (Œ∑ : Atom) : Mor‚ÇÇ
  deriving Inhabited

class MkMor‚ÇÇ (m : Type ‚Üí Type) where
  ofExpr (e : Expr) : m Mor‚ÇÇ

def Mor‚ÇÇ.e : Mor‚ÇÇ ‚Üí Expr
  | .isoHom e .. => e
  | .isoInv e .. => e
  | .id e .. => e
  | .comp e .. => e
  | .whiskerLeft e .. => e
  | .whiskerRight e .. => e
  | .horizontalComp e .. => e
  | .coherenceComp e .. => e
  | .of Œ∑ => Œ∑.e

def Mor‚ÇÇ.isoLift? : Mor‚ÇÇ ‚Üí Option IsoLift
  | .isoHom _ isoLift .. => some isoLift
  | .isoInv _ isoLift .. => some isoLift
  | .id _ isoLift .. => some isoLift
  | .comp _ isoLift? .. => isoLift?
  | .whiskerLeft _ isoLift? .. => isoLift?
  | .whiskerRight _ isoLift? .. => isoLift?
  | .horizontalComp _ isoLift? .. => isoLift?
  | .coherenceComp _ isoLift? .. => isoLift?
  | .of _ => none

def Mor‚ÇÇ.srcM {m : Type ‚Üí Type} [Monad m] [MonadMor‚ÇÅ m] : Mor‚ÇÇ ‚Üí m Mor‚ÇÅ
  | .isoHom _ _ iso => iso.srcM
  | .isoInv _ _ iso => iso.tgtM
  | .id _ _ f => return f
  | .comp _ _ f .. => return f
  | .whiskerLeft _ _ f g .. => do comp‚ÇÅM f g
  | .whiskerRight _ _ f _ _ h => do comp‚ÇÅM f h
  | .horizontalComp _ _ f‚ÇÅ _ f‚ÇÇ .. => do comp‚ÇÅM f‚ÇÅ f‚ÇÇ
  | .coherenceComp _ _ f .. => return f
  | .of Œ∑ => return Œ∑.src

def Mor‚ÇÇ.tgtM {m : Type ‚Üí Type} [Monad m] [MonadMor‚ÇÅ m] : Mor‚ÇÇ ‚Üí m Mor‚ÇÅ
  | .isoHom _ _ iso => iso.tgtM
  | .isoInv _ _ iso => iso.srcM
  | .id _ _ f => return f
  | .comp _ _ _ _ h .. => return h
  | .whiskerLeft _ _ f _ h _ => do comp‚ÇÅM f h
  | .whiskerRight _ _ _ g _ h => do comp‚ÇÅM g h
  | .horizontalComp _ _ _ g‚ÇÅ _ g‚ÇÇ _ _ => do comp‚ÇÅM g‚ÇÅ g‚ÇÇ
  | .coherenceComp _ _ _ _ _ i .. => return i
  | .of Œ∑ => return Œ∑.tgt

class MonadMor‚ÇÇIso (m : Type ‚Üí Type) where
  comp‚ÇÇM (f g : Mor‚ÇÇIso) : m Mor‚ÇÇIso
  whiskerLeftM (f : Mor‚ÇÅ) (Œ∑ : Mor‚ÇÇIso) : m Mor‚ÇÇIso
  whiskerRightM (Œ∑ : Mor‚ÇÇIso) (h : Mor‚ÇÅ) : m Mor‚ÇÇIso
  horizontalCompM (Œ∑ Œ∏ : Mor‚ÇÇIso) : m Mor‚ÇÇIso
  symmM (Œ∑ : Mor‚ÇÇIso) : m Mor‚ÇÇIso
  coherenceCompM (Œ± : CoherenceHom) (Œ∑ Œ∏ : Mor‚ÇÇIso) : m Mor‚ÇÇIso

namespace Mor‚ÇÇIso

export MonadMor‚ÇÇIso
  (comp‚ÇÇM whiskerLeftM whiskerRightM horizontalCompM symmM coherenceCompM)

end Mor‚ÇÇIso

class MonadMor‚ÇÇ (m : Type ‚Üí Type) where
  homM (iso : Mor‚ÇÇIso) : m Mor‚ÇÇ
  atomHomM (Œ∑ : AtomIso) : m Atom
  invM (iso : Mor‚ÇÇIso) : m Mor‚ÇÇ
  atomInvM (Œ∑ : AtomIso) : m Atom
  id‚ÇÇM (f : Mor‚ÇÅ) : m Mor‚ÇÇ
  comp‚ÇÇM (Œ∑ Œ∏ : Mor‚ÇÇ) : m Mor‚ÇÇ
  whiskerLeftM (f : Mor‚ÇÅ) (Œ∑ : Mor‚ÇÇ) : m Mor‚ÇÇ
  whiskerRightM (Œ∑ : Mor‚ÇÇ) (h : Mor‚ÇÅ) : m Mor‚ÇÇ
  horizontalCompM (Œ∑ Œ∏ : Mor‚ÇÇ) : m Mor‚ÇÇ
  coherenceCompM (Œ± : CoherenceHom) (Œ∑ Œ∏ : Mor‚ÇÇ) : m Mor‚ÇÇ

namespace Mor‚ÇÇ

export MonadMor‚ÇÇ
  (homM atomHomM invM atomInvM id‚ÇÇM comp‚ÇÇM whiskerLeftM whiskerRightM horizontalCompM coherenceCompM)

end Mor‚ÇÇ

namespace Mor‚ÇÇIso

variable {m : Type ‚Üí Type} [Monad m] [MonadStructuralAtom m]

def associatorM' (f g h : Mor‚ÇÅ) : m Mor‚ÇÇIso := do
  return .structuralAtom <| ‚Üê MonadStructuralAtom.associatorM f g h

def leftUnitorM' (f : Mor‚ÇÅ) : m Mor‚ÇÇIso := do
  return .structuralAtom <| ‚Üê MonadStructuralAtom.leftUnitorM f

def rightUnitorM' (f : Mor‚ÇÅ) : m Mor‚ÇÇIso := do
  return .structuralAtom <| ‚Üê MonadStructuralAtom.rightUnitorM f

def id‚ÇÇM' (f : Mor‚ÇÅ) : m Mor‚ÇÇIso := do
  return .structuralAtom <| ‚Üê MonadStructuralAtom.id‚ÇÇM f

def coherenceHomM' (f g : Mor‚ÇÅ) (inst : Expr) : m Mor‚ÇÇIso := do
  return .structuralAtom <| .coherenceHom <| ‚Üê MonadStructuralAtom.coherenceHomM f g inst

end Mor‚ÇÇIso

/-- Expressions of the form `Œ∑ ‚ñ∑ f‚ÇÅ ‚ñ∑ ... ‚ñ∑ f‚Çô`. -/
inductive WhiskerRight : Type
  /-- Construct the expression for an atomic 2-morphism. -/
  | of (Œ∑ : Atom) : WhiskerRight
  /-- Construct the expression for `Œ∑ ‚ñ∑ f`. -/
  | whisker (e : Mor‚ÇÇ) (Œ∑ : WhiskerRight) (f : Atom‚ÇÅ) : WhiskerRight
  deriving Inhabited

def WhiskerRight.e : WhiskerRight ‚Üí Mor‚ÇÇ
  | .of Œ∑ => .of Œ∑
  | .whisker e .. => e

/-- Expressions of the form `Œ∑‚ÇÅ ‚äó ... ‚äó Œ∑‚Çô`. -/
inductive HorizontalComp : Type
  | of (Œ∑ : WhiskerRight) : HorizontalComp
  | cons (e : Mor‚ÇÇ) (Œ∑ : WhiskerRight) (Œ∑s : HorizontalComp) :
    HorizontalComp
  deriving Inhabited

def HorizontalComp.e : HorizontalComp ‚Üí Mor‚ÇÇ
  | .of Œ∑ => Œ∑.e
  | .cons e .. => e

/-- Expressions of the form `f‚ÇÅ ‚óÅ ... ‚óÅ f‚Çô ‚óÅ Œ∑`. -/
inductive WhiskerLeft : Type
  /-- Construct the expression for a right-whiskered 2-morphism. -/
  | of (Œ∑ : HorizontalComp) : WhiskerLeft
  /-- Construct the expression for `f ‚óÅ Œ∑`. -/
  | whisker (e : Mor‚ÇÇ) (f : Atom‚ÇÅ) (Œ∑ : WhiskerLeft) : WhiskerLeft
  deriving Inhabited

def WhiskerLeft.e : WhiskerLeft ‚Üí Mor‚ÇÇ
  | .of Œ∑ => Œ∑.e
  | .whisker e .. => e

abbrev Structural := Mor‚ÇÇIso

def Mor‚ÇÇIso.isStructural (Œ± : Mor‚ÇÇIso) : Bool :=
  match Œ± with
  | .structuralAtom _ => true
  | .comp _ _ _ _ Œ∑ Œ∏ => Œ∑.isStructural && Œ∏.isStructural
  | .whiskerLeft _ _ _ _ Œ∑ => Œ∑.isStructural
  | .whiskerRight _ _ _ Œ∑ _ => Œ∑.isStructural
  | .horizontalComp _ _ _ _ _ Œ∑ Œ∏ => Œ∑.isStructural && Œ∏.isStructural
  | .inv _ _ _ Œ∑ => Œ∑.isStructural
  | .coherenceComp _ _ _ _ _ _ Œ∑ Œ∏ => Œ∑.isStructural && Œ∏.isStructural
  | .of _ => false

/-- Normalized expressions for 2-morphisms. -/
inductive NormalExpr : Type
  /-- Construct the expression for a structural 2-morphism. -/
  | nil (e : Mor‚ÇÇ) (Œ± : Structural) : NormalExpr
  /-- Construct the normalized expression of a 2-morphism `Œ± ‚â´ Œ∑ ‚â´ Œ∑s` recursively. -/
  | cons (e : Mor‚ÇÇ) (Œ± : Structural) (Œ∑ : WhiskerLeft) (Œ∑s : NormalExpr) : NormalExpr
  deriving Inhabited

def NormalExpr.e : NormalExpr ‚Üí Mor‚ÇÇ
  | .nil e .. => e
  | .cons e .. => e

class MonadWhiskerRight (m : Type ‚Üí Type) where
  whiskerRightM (Œ∑ : WhiskerRight) (f : Atom‚ÇÅ) : m WhiskerRight

class MonadHorizontalComp (m : Type ‚Üí Type) extends MonadWhiskerRight m where
  hConsM (Œ∑ : WhiskerRight) (Œ∑s : HorizontalComp) : m HorizontalComp

class MonadWhiskerLeft (m : Type ‚Üí Type) extends MonadHorizontalComp m where
  whiskerLeftM (f : Atom‚ÇÅ) (Œ∑ : WhiskerLeft) : m WhiskerLeft

class MonadNormalExpr (m : Type ‚Üí Type) extends MonadWhiskerLeft m where
  nilM (Œ± : Structural) : m NormalExpr
  consM (headStructural : Structural) (Œ∑ : WhiskerLeft) (Œ∑s : NormalExpr) : m NormalExpr

/-- The domain of a 2-morphism. -/
def WhiskerRight.srcM : WhiskerRight ‚Üí m Mor‚ÇÅ
  | WhiskerRight.of Œ∑ => return Œ∑.src
  | WhiskerRight.whisker _ Œ∑ f => do comp‚ÇÅM (‚Üê Œ∑.srcM) (.of f)

/-- The codomain of a 2-morphism. -/
def WhiskerRight.tgtM : WhiskerRight ‚Üí m Mor‚ÇÅ
  | WhiskerRight.of Œ∑ => return Œ∑.tgt
  | WhiskerRight.whisker _ Œ∑ f => do comp‚ÇÅM (‚Üê Œ∑.tgtM) (.of f)

/-- The domain of a 2-morphism. -/
def HorizontalComp.srcM : HorizontalComp ‚Üí m Mor‚ÇÅ
  | HorizontalComp.of Œ∑ => Œ∑.srcM
  | HorizontalComp.cons _ Œ∑ Œ∑s => do comp‚ÇÅM (‚Üê Œ∑.srcM) (‚Üê Œ∑s.srcM)

/-- The codomain of a 2-morphism. -/
def HorizontalComp.tgtM : HorizontalComp ‚Üí m Mor‚ÇÅ
  | HorizontalComp.of Œ∑ => Œ∑.tgtM
  | HorizontalComp.cons _ Œ∑ Œ∑s => do comp‚ÇÅM (‚Üê Œ∑.tgtM) (‚Üê Œ∑s.tgtM)

/-- The domain of a 2-morphism. -/
def WhiskerLeft.srcM : WhiskerLeft ‚Üí m Mor‚ÇÅ
  | WhiskerLeft.of Œ∑ => Œ∑.srcM
  | WhiskerLeft.whisker _ f Œ∑ => do comp‚ÇÅM (.of f) (‚Üê Œ∑.srcM)

/-- The codomain of a 2-morphism. -/
def WhiskerLeft.tgtM : WhiskerLeft ‚Üí m Mor‚ÇÅ
  | WhiskerLeft.of Œ∑ => Œ∑.tgtM
  | WhiskerLeft.whisker _ f Œ∑ => do comp‚ÇÅM (.of f) (‚Üê Œ∑.tgtM)

/-- The domain of a 2-morphism. -/
def NormalExpr.srcM : NormalExpr ‚Üí m Mor‚ÇÅ
  | NormalExpr.nil _ Œ∑ => Œ∑.srcM
  | NormalExpr.cons _ Œ± _ _ => Œ±.srcM

/-- The codomain of a 2-morphism. -/
def NormalExpr.tgtM : NormalExpr ‚Üí m Mor‚ÇÅ
  | NormalExpr.nil _ Œ∑ => Œ∑.tgtM
  | NormalExpr.cons _ _ _ Œ∑s => Œ∑s.tgtM

section

variable [MonadStructuralAtom m] [MonadMor‚ÇÇIso m] [MonadNormalExpr m]

/-- The identity 2-morphism as a term of `normalExpr`. -/
def NormalExpr.idM (f : Mor‚ÇÅ) : m NormalExpr := do
  MonadNormalExpr.nilM <| .structuralAtom <| ‚Üê MonadStructuralAtom.id‚ÇÇM f

/-- The associator as a term of `normalExpr`. -/
def NormalExpr.associatorM (f g h : Mor‚ÇÅ) : m NormalExpr := do
  MonadNormalExpr.nilM <| .structuralAtom <| ‚Üê MonadStructuralAtom.associatorM f g h

/-- The inverse of the associator as a term of `normalExpr`. -/
def NormalExpr.associatorInvM (f g h : Mor‚ÇÅ) : m NormalExpr := do
  MonadNormalExpr.nilM <| ‚Üê MonadMor‚ÇÇIso.symmM <| .structuralAtom <| ‚Üê MonadStructuralAtom.associatorM f g h

/-- The left unitor as a term of `normalExpr`. -/
def NormalExpr.leftUnitorM (f : Mor‚ÇÅ) : m NormalExpr := do
  MonadNormalExpr.nilM <| .structuralAtom <| ‚Üê MonadStructuralAtom.leftUnitorM f

/-- The inverse of the left unitor as a term of `normalExpr`. -/
def NormalExpr.leftUnitorInvM (f : Mor‚ÇÅ) : m NormalExpr := do
  MonadNormalExpr.nilM <| ‚Üê MonadMor‚ÇÇIso.symmM <| .structuralAtom <| ‚Üê MonadStructuralAtom.leftUnitorM f

/-- The right unitor as a term of `normalExpr`. -/
def NormalExpr.rightUnitorM (f : Mor‚ÇÅ) : m NormalExpr := do
  MonadNormalExpr.nilM <| .structuralAtom <| ‚Üê MonadStructuralAtom.rightUnitorM f

/-- The inverse of the right unitor as a term of `normalExpr`. -/
def NormalExpr.rightUnitorInvM (f : Mor‚ÇÅ) : m NormalExpr := do
  MonadNormalExpr.nilM <| ‚Üê MonadMor‚ÇÇIso.symmM <| .structuralAtom <| ‚Üê MonadStructuralAtom.rightUnitorM f

/-- Construct a `NormalExpr` expression from a `WhiskerLeft` expression. -/
def NormalExpr.ofM [MonadNormalExpr m] (Œ∑ : WhiskerLeft) : m NormalExpr := do
  MonadNormalExpr.consM ((.structuralAtom <| ‚Üê MonadStructuralAtom.id‚ÇÇM (‚Üê Œ∑.srcM))) Œ∑
    (‚Üê MonadNormalExpr.nilM ((.structuralAtom <| ‚Üê MonadStructuralAtom.id‚ÇÇM (‚Üê Œ∑.tgtM))))

/-- Construct a `NormalExpr` expression from a Lean expression for an atomic 2-morphism. -/
def NormalExpr.ofAtomM [MonadNormalExpr m] (Œ∑ : Atom) : m NormalExpr :=
  NormalExpr.ofM <| .of <| .of <| .of Œ∑

end

/-- Convert a `NormalExpr` expression into a list of `WhiskerLeft` expressions. -/
def NormalExpr.toList : NormalExpr ‚Üí List WhiskerLeft
  | NormalExpr.nil _ _ => []
  | NormalExpr.cons _ _ Œ∑ Œ∑s => Œ∑ :: NormalExpr.toList Œ∑s

end Normalize
