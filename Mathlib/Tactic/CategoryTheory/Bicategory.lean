/-
Copyright (c) 2024 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import Mathlib.Tactic.CategoryTheory.BicategoricalComp

/-!
# Normalization of morphisms in monoidal categories
This file provides a tactic that normalizes morphisms in monoidal categories. This is used in the
string diagram widget given in `Mathlib.Tactic.StringDiagram`.
We say that the morphism `Œ∑` in a monoidal category is in normal form if
1. `Œ∑` is of the form `Œ±‚ÇÄ ‚â´ Œ∑‚ÇÄ ‚â´ Œ±‚ÇÅ ‚â´ Œ∑‚ÇÅ ‚â´ ... Œ±‚Çò ‚â´ Œ∑‚Çò ‚â´ Œ±‚Çò‚Çä‚ÇÅ` where each `Œ±·µ¢` is a
  structural 2-morphism (consisting of associators and unitors),
2. each `Œ∑·µ¢` is a non-structural 2-morphism of the form `f‚ÇÅ ‚óÅ ... ‚óÅ f‚Çò ‚óÅ Œ∏`, and
3. `Œ∏` is of the form `Œπ ‚ñ∑ g‚ÇÅ ‚ñ∑ ... ‚ñ∑ g‚Çó`

Note that the structural morphisms `Œ±·µ¢` are not necessarily normalized, as the main purpose
is to get a list of the non-structural morphisms out.

Currently, the primary application of the normalization tactic in mind is drawing string diagrams,
which are graphical representations of morphisms in monoidal categories, in the infoview. When
drawing string diagrams, we often ignore associators and unitors (i.e., drawing morphisms in
strict monoidal categories). On the other hand, in Lean, it is considered difficult to formalize
the concept of strict monoidal categories due to the feature of dependent type theory. The
normalization tactic can remove associators and unitors from the expression, extracting the
necessary data for drawing string diagrams.

The current plan on drawing string diagrams (#10581) is to use
Penrose (https://github.com/penrose) via ProofWidget. However, it should be noted that the
normalization procedure in this file does not rely on specific settings, allowing for broader
application.

Future plans include the following. At least I (Yuma) would like to work on these in the future,
but it might not be immediate. If anyone is interested, I would be happy to discuss.

- Currently (#10581), the string diagrams only do drawing. It would be better they also generate
  proofs. That is, by manipulating the string diagrams displayed in the infoview with a mouse to
  generate proofs. In #10581, the string diagram widget only uses the morphisms generated by the
  normalization tactic and does not use proof terms ensuring that the original morphism and the
  normalized morphism are equal. Proof terms will be necessary for proof generation.

- There is also the possibility of using homotopy.io (https://github.com/homotopy-io), a graphical
  proof assistant for category theory, from Lean. At this point, I have very few ideas regarding
  this approach.

- The normalization tactic allows for an alternative implementation of the coherent tactic.

## Main definitions
- `Tactic.Monoidal.eval`: Given a Lean expression `e` that represents a morphism in a monoidal
category, this function returns a pair of `‚ü®e', pf‚ü©` where `e'` is the normalized expression of `e`
and `pf` is a proof that `e = e'`.

-/

open Lean Meta Elab
open CategoryTheory

namespace Mathlib.Tactic.Bicategory

/-- The context for evaluating expressions. -/
structure Context where
  /-- The expression for the underlying category. -/
  B : Expr
  instBicategory : Expr
  level‚ÇÄ : Level
  level‚ÇÅ : Level
  level‚ÇÇ : Level

/-- Populate a `context` object for evaluating `e`. -/
def mkContext? (e : Expr) : MetaM (Option Context) := do
  match (‚Üê whnfR (‚Üê inferType e)).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, f, _]) =>
    match (‚Üê whnfR (‚Üê inferType f)).getAppFnArgs with
    | (``Quiver.Hom, #[_, _, a, _]) =>
      let B ‚Üê inferType a
      let .succ level‚ÇÄ ‚Üê getLevel B | return none
      let .succ level‚ÇÅ ‚Üê getLevel (‚Üê inferType f) | return none
      let .succ level‚ÇÇ ‚Üê getLevel (‚Üê inferType e) | return none
      let .some instBicategory ‚Üê synthInstance?
        (mkAppN (.const ``Bicategory [level‚ÇÇ, level‚ÇÅ, level‚ÇÄ]) #[B]) | return none
      return some
        { B := B, instBicategory := instBicategory,
          level‚ÇÄ := level‚ÇÄ, level‚ÇÅ := level‚ÇÅ, level‚ÇÇ := level‚ÇÇ }
    | _ => return none
  | _ => return none

/-- The monad for the normalization of 2-morphisms. -/
abbrev BicategoryM := ReaderT Context MetaM

/-- Run a computation in the `M` monad. -/
abbrev BicategoryM.run {Œ± : Type} (c : Context) (m : BicategoryM Œ±) : MetaM Œ± :=
  ReaderT.run m c

def getLevels : BicategoryM (List Level) := do
  let ctx ‚Üê read
  return [ctx.level‚ÇÇ, ctx.level‚ÇÅ, ctx.level‚ÇÄ]

/-- The domain of a morphism. -/
def srcExpr (Œ∑ : Expr) : MetaM Expr := do
  match (‚Üê inferType Œ∑).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, f, _]) => return f
  | _ => match (‚Üê whnfR (‚Üê inferType Œ∑)).getAppFnArgs with
    | (``Quiver.Hom, #[_, _, f, _]) => return f
    | _ => throwError m!"{Œ∑} is not a morphism"

/-- The codomain of a morphism. -/
def tgtExpr (Œ∑ : Expr) : MetaM Expr := do
  match (‚Üê inferType Œ∑).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, _, g]) => return g
  | _ => match (‚Üê whnfR (‚Üê inferType Œ∑)).getAppFnArgs with
    | (``Quiver.Hom, #[_, _, _, g]) => return g
    | _ => throwError m!"{Œ∑} is not a morphism"

/-- The domain of a morphism. -/
def srcExprOfIso (Œ∑ : Expr) : MetaM Expr := do
  match (‚Üê inferType Œ∑).getAppFnArgs with
  | (``Iso, #[_, _, f, _]) => return f
  | _ => match (‚Üê whnfR (‚Üê inferType Œ∑)).getAppFnArgs with
    | (``Iso, #[_, _, f, _]) => return f
    | _ => throwError m!"{Œ∑} is not a morphism"

/-- The codomain of a morphism. -/
def tgtExprOfIso (Œ∑ : Expr) : MetaM Expr := do
  match (‚Üê inferType Œ∑).getAppFnArgs with
  | (``Iso, #[_, _, _, g]) => return g
  | _ => match (‚Üê whnfR (‚Üê inferType Œ∑)).getAppFnArgs with
    | (``Iso, #[_, _, _, g]) => return g
    | _ => throwError m!"{Œ∑} is not a morphism"

def mkCategoryStructInst‚ÇÅ : BicategoryM Expr := do
  let ctx ‚Üê read
  let B := ctx.B
  let instB := ctx.instBicategory
  return mkAppN (.const ``Bicategory.toCategoryStruct (‚Üê getLevels)) #[B, instB]

def mkComp‚ÇÅ (f g : Expr) : BicategoryM Expr := do
  let ctx ‚Üê read
  return mkAppN (.const ``CategoryStruct.comp [ctx.level‚ÇÅ, ctx.level‚ÇÄ])
    #[ctx.B, ‚Üê mkCategoryStructInst‚ÇÅ, ‚Üê srcExpr f, ‚Üê tgtExpr f, ‚Üê tgtExpr g, f, g]

def mkId‚ÇÅ (a : Expr) : BicategoryM Expr := do
  let ctx ‚Üê read
  return mkAppN (.const ``CategoryStruct.id [ctx.level‚ÇÅ, ctx.level‚ÇÄ])
    #[ctx.B, ‚Üê mkCategoryStructInst‚ÇÅ, a]

def mkHomCatInst (a b : Expr) : BicategoryM Expr := do
  let ctx ‚Üê read
  let B := ctx.B
  let instB := ctx.instBicategory
  return mkAppN (.const ``Bicategory.homCategory (‚Üê getLevels)) #[B, instB, a, b]

def mkCategoryStructInst‚ÇÇ (f : Expr) : BicategoryM Expr := do
  let ctx ‚Üê read
  let instCat ‚Üê mkHomCatInst (‚Üê srcExpr f) (‚Üê tgtExpr f)
  return mkAppN (.const ``Category.toCategoryStruct [ctx.level‚ÇÇ, ctx.level‚ÇÅ])
    #[‚Üê inferType f, instCat]

def mkComp‚ÇÇ (Œ∑ Œ∏ : Expr) : BicategoryM Expr := do
  let ctx ‚Üê read
  let f ‚Üê srcExpr Œ∑
  let g ‚Üê tgtExpr Œ∑
  let h ‚Üê tgtExpr Œ∏
  return mkAppN (.const ``CategoryStruct.comp [ctx.level‚ÇÇ, ctx.level‚ÇÅ])
    #[‚Üê inferType f, ‚Üê mkCategoryStructInst‚ÇÇ f, f, g, h, Œ∑, Œ∏]

def mkId‚ÇÇ (f : Expr) : BicategoryM Expr := do
  let ctx ‚Üê read
  return mkAppN (.const ``CategoryStruct.id [ctx.level‚ÇÇ, ctx.level‚ÇÅ])
    #[‚Üê inferType f, ‚Üê mkCategoryStructInst‚ÇÇ f, f]

def mkIsoHom (Œ∑ : Expr) : BicategoryM Expr := do
  let ctx ‚Üê read
  let f ‚Üê srcExprOfIso Œ∑
  let g ‚Üê tgtExprOfIso Œ∑
  let instCat ‚Üê mkHomCatInst (‚Üê srcExpr f) (‚Üê tgtExpr f)
  return mkAppN (.const ``Iso.hom [ctx.level‚ÇÇ, ctx.level‚ÇÅ])
    #[‚Üê inferType f, instCat, f, g, Œ∑]

def mkIsoInv (Œ∑ : Expr) : BicategoryM Expr := do
  let ctx ‚Üê read
  let f ‚Üê srcExprOfIso Œ∑
  let g ‚Üê tgtExprOfIso Œ∑
  let instCat ‚Üê mkHomCatInst (‚Üê srcExpr f) (‚Üê tgtExpr f)
  return mkAppN (.const ``Iso.inv [ctx.level‚ÇÇ, ctx.level‚ÇÅ])
    #[‚Üê inferType f, instCat, f, g, Œ∑]

def mkWhiskerLeft (f Œ∑ : Expr) : BicategoryM Expr := do
  let ctx ‚Üê read
  let a ‚Üê srcExpr f
  let b ‚Üê tgtExpr f
  let g ‚Üê srcExpr Œ∑
  let h ‚Üê tgtExpr Œ∑
  let c ‚Üê tgtExpr g
  return mkAppN (.const ``Bicategory.whiskerLeft (‚Üê getLevels))
    #[ctx.B, ctx.instBicategory, a, b, c, f, g, h, Œ∑]

def mkWhiskerRight (Œ∑ h : Expr) : BicategoryM Expr := do
  let ctx ‚Üê read
  let f ‚Üê srcExpr Œ∑
  let g ‚Üê tgtExpr Œ∑
  let a ‚Üê srcExpr f
  let b ‚Üê tgtExpr f
  let c ‚Üê tgtExpr h
  return mkAppN (.const ``Bicategory.whiskerRight (‚Üê getLevels))
    #[ctx.B, ctx.instBicategory, a, b, c, f, g, Œ∑, h]

def mkAssociator (f g h : Expr) : BicategoryM Expr := do
  let ctx ‚Üê read
  let a ‚Üê srcExpr f
  let b ‚Üê tgtExpr f
  let c ‚Üê tgtExpr g
  let d ‚Üê tgtExpr h
  return mkAppN (.const ``Bicategory.associator (‚Üê getLevels))
    #[ctx.B, ctx.instBicategory, a, b, c, d, f, g, h]

def mkLeftUnitor (f : Expr) : BicategoryM Expr := do
  let ctx ‚Üê read
  let a ‚Üê srcExpr f
  let b ‚Üê tgtExpr f
  return mkAppN (.const ``Bicategory.leftUnitor (‚Üê getLevels))
    #[ctx.B, ctx.instBicategory, a, b, f]

def mkRightUnitor (f : Expr) : BicategoryM Expr := do
  let ctx ‚Üê read
  let a ‚Üê srcExpr f
  let b ‚Üê tgtExpr f
  return mkAppN (.const ``Bicategory.rightUnitor (‚Üê getLevels))
    #[ctx.B, ctx.instBicategory, a, b, f]

/-- Expressions for atomic 1-morphisms. -/
structure Atom‚ÇÅ : Type where
  /-- Extract a Lean expression from an `Atom‚ÇÅ` expression. -/
  e : Expr
  src : Expr
  tgt : Expr

/-- Expressions for 1-morphisms. -/
inductive Mor‚ÇÅ : Type
  /-- `id a` is the expression for `ùüô a`. -/
  | id (a : Expr) : Mor‚ÇÅ
  /-- `comp a b f g` is the expression for `f ‚â´ g` with `f g : a ‚ü∂ b`. -/
  | comp : Mor‚ÇÅ ‚Üí Mor‚ÇÅ ‚Üí Mor‚ÇÅ
  /-- Construct the expression for an atomic 1-morphism. -/
  | of : Atom‚ÇÅ ‚Üí Mor‚ÇÅ
  deriving Inhabited

/-- Converts a 1-morphism into a list of its components. -/
def Mor‚ÇÅ.toList : Mor‚ÇÅ ‚Üí List Atom‚ÇÅ
  | .id _ => []
  | .comp f g => f.toList ++ g.toList
  | .of f => [f]

/-- Returns `ùüô a` if the expression `e` is of the form `ùüô a`. -/
def isId? (e : Expr) : BicategoryM (Option (Expr)) := do
  let B ‚Üê mkFreshExprMVar none
  let instB ‚Üê mkFreshExprMVar none
  let a ‚Üê mkFreshExprMVar none
  let unit := mkAppN (‚Üê mkConstWithFreshMVarLevels
    ``CategoryStruct.id) #[B, instB, a]
  if ‚Üê withDefault <| isDefEq e unit then
    return (‚Üê instantiateMVars unit)
  else
    return none

/-- Returns `(f, g)` if the expression `e` is of the form `f ‚äó g`. -/
def isComp? (e : Expr) : BicategoryM (Option (Expr √ó Expr)) := do
  let B ‚Üê mkFreshExprMVar none
  let a ‚Üê mkFreshExprMVar B
  let b ‚Üê mkFreshExprMVar B
  let c ‚Üê mkFreshExprMVar B
  let instQB ‚Üê mkFreshExprMVar none
  let f ‚Üê mkFreshExprMVar (mkAppN (‚Üê mkConstWithFreshMVarLevels ``Quiver.Hom) #[B, instQB, a, b])
  let g ‚Üê mkFreshExprMVar (mkAppN (‚Üê mkConstWithFreshMVarLevels ``Quiver.Hom) #[B, instQB, b, c])
  let instB ‚Üê mkFreshExprMVar none
  let fg := mkAppN (‚Üê mkConstWithFreshMVarLevels
    ``CategoryStruct.comp) #[B, instB, a, b, c, f, g]
  if ‚Üê withDefault <| isDefEq e fg then
    return (‚Üê instantiateMVars f, ‚Üê instantiateMVars g)
  else
    return none

def Mor‚ÇÅ.src : Mor‚ÇÅ ‚Üí Expr
  | .id a => a
  | .comp f _ => f.src
  | .of f => f.src

def Mor‚ÇÅ.tgt : Mor‚ÇÅ ‚Üí Expr
  | .id a => a
  | .comp _ g => g.tgt
  | .of f => f.tgt

/-- Construct a `Mor‚ÇÅ` expression from a Lean expression. -/
partial def toMor‚ÇÅ (e : Expr) : BicategoryM Mor‚ÇÅ := do
  let src ‚Üê srcExpr e
  let tgt ‚Üê tgtExpr e
  -- match (‚Üê whnfR e).getAppFnArgs with
  -- | (``CategoryStruct.id, #[_, _, a]) => return Mor‚ÇÅ.id a
  -- | (``CategoryStruct.comp, #[_, _, _, _, _, f, g]) =>
    -- return (‚Üê toMor‚ÇÅ f).comp (‚Üê toMor‚ÇÅ g)
  -- | _ => return Mor‚ÇÅ.of ‚ü®e, src, tgt‚ü©
  if let some _ ‚Üê isId? e then
    return Mor‚ÇÅ.id src
  else if let some (f, g) ‚Üê isComp? e then
    return (‚Üê toMor‚ÇÅ f).comp (‚Üê toMor‚ÇÅ g)
  else
    return Mor‚ÇÅ.of ‚ü®e, src, tgt‚ü©

/-- Expressions for atomic structural 2-morphisms. -/
inductive StructuralAtom : Type
  /-- The expression for the associator `(Œ±_ f g h).hom`. -/
  | associator (f g h : Mor‚ÇÅ) : StructuralAtom
  /-- The expression for the inverse of the associator `(Œ±_ f g h).inv`. -/
  | associatorInv (f g h : Mor‚ÇÅ) : StructuralAtom
  /-- The expression for the left unitor `(Œª_ f).hom`. -/
  | leftUnitor (f : Mor‚ÇÅ) : StructuralAtom
  /-- The expression for the inverse of the left unitor `(Œª_ f).inv`. -/
  | leftUnitorInv (f : Mor‚ÇÅ) : StructuralAtom
  /-- The expression for the right unitor `(œÅ_ f).hom`. -/
  | rightUnitor (f : Mor‚ÇÅ) : StructuralAtom
  /-- The expression for the inverse of the right unitor `(œÅ_ f).inv`. -/
  | rightUnitorInv (f : Mor‚ÇÅ) : StructuralAtom
  /-- Expressions for `Œ±` in the monoidal composition `Œ∑ ‚äó‚â´ Œ∏ := Œ∑ ‚â´ Œ± ‚â´ Œ∏`. -/
  | bicategoricalCoherence (f g : Mor‚ÇÅ) (e : Expr) : StructuralAtom
  deriving Inhabited

/-- Construct a `StructuralAtom` expression from a Lean expression. -/
def structuralAtom? (e : Expr) : BicategoryM (Option StructuralAtom) := do
  match e.getAppFnArgs with
  | (``Iso.hom, #[_, _, _, _, Œ∑]) =>
    match (‚Üê whnfR Œ∑).getAppFnArgs with
    | (``Bicategory.associator, #[_, _, _, _, _, _, f, g, h]) =>
      return some <| .associator (‚Üê toMor‚ÇÅ f) (‚Üê toMor‚ÇÅ g) (‚Üê toMor‚ÇÅ h)
    | (``Bicategory.leftUnitor, #[_, _, _, _, f]) =>
      return some <| .leftUnitor (‚Üê toMor‚ÇÅ f)
    | (``Bicategory.rightUnitor, #[_, _, _, _, f]) =>
      return some <| .rightUnitor (‚Üê toMor‚ÇÅ f)
    | _ => return none
  | (``Iso.inv, #[_, _, _, _, Œ∑]) =>
    match (‚Üê whnfR Œ∑).getAppFnArgs with
    | (``Bicategory.associator, #[_, _, _, _, _, _, f, g, h]) =>
      return some <| .associatorInv (‚Üê toMor‚ÇÅ f) (‚Üê toMor‚ÇÅ g) (‚Üê toMor‚ÇÅ h)
    | (``Bicategory.leftUnitor, #[_, _, _, _, f]) =>
      return some <| .leftUnitorInv (‚Üê toMor‚ÇÅ f)
    | (``Bicategory.rightUnitor, #[_, _, _, _, f]) =>
      return some <| .rightUnitorInv (‚Üê toMor‚ÇÅ f)
    | _ => return none
  | _ =>
    match (‚Üê whnfR e).getAppFnArgs with
    | (``BicategoricalCoherence.hom, #[_, _, _, _, f, g, inst]) =>
      return some <| .bicategoricalCoherence (‚Üê toMor‚ÇÅ f) (‚Üê toMor‚ÇÅ g) inst
    | _ => return none

/-- Expressions for atomic non-structural 2-morphisms. -/
structure Atom where
  /-- Extract a Lean expression from an `Atom` expression. -/
  e : Expr
  deriving Inhabited

/-- Expressions of the form `Œ∑ ‚ñ∑ f‚ÇÅ ‚ñ∑ ... ‚ñ∑ f‚Çô`. -/
inductive WhiskerRightExpr : Type
  /-- Construct the expression for an atomic 2-morphism. -/
  | of (Œ∑ : Atom) : WhiskerRightExpr
  /-- Construct the expression for `Œ∑ ‚ñ∑ f`. -/
  | whisker (Œ∑ : WhiskerRightExpr) (f : Atom‚ÇÅ) : WhiskerRightExpr
  deriving Inhabited

/-- Expressions of the form `f‚ÇÅ ‚óÅ ... ‚óÅ f‚Çô ‚óÅ Œ∑`. -/
inductive WhiskerLeftExpr : Type
  /-- Construct the expression for a right-whiskered 2-morphism. -/
  | of (Œ∑ : WhiskerRightExpr) : WhiskerLeftExpr
  /-- Construct the expression for `f ‚óÅ Œ∑`. -/
  | whisker (f : Atom‚ÇÅ) (Œ∑ : WhiskerLeftExpr) : WhiskerLeftExpr
  deriving Inhabited

/-- Expressions for structural 2-morphisms. -/
inductive Structural : Type
  /-- Expressions for atomic structural 2-morphisms. -/
  | atom (Œ∑ : StructuralAtom) : Structural
  /-- Expressions for the identity `ùüô f`. -/
  | id (f : Mor‚ÇÅ) : Structural
  /-- Expressions for the composition `Œ∑ ‚â´ Œ∏`. -/
  | comp (Œ± Œ≤ : Structural) : Structural
  /-- Expressions for the left whiskering `f ‚óÅ Œ∑`. -/
  | whiskerLeft (f : Mor‚ÇÅ) (Œ∑ : Structural) : Structural
  /-- Expressions for the right whiskering `Œ∑ ‚ñ∑ f`. -/
  | whiskerRight (Œ∑ : Structural) (f : Mor‚ÇÅ) : Structural
  deriving Inhabited

/-- Normalized expressions for 2-morphisms. -/
inductive NormalExpr : Type
  /-- Construct the expression for a structural 2-morphism. -/
  | nil (Œ± : Structural) : NormalExpr
  /-- Construct the normalized expression of 2-morphisms recursively. -/
  | cons (head_structural : Structural) (head : WhiskerLeftExpr) (tail : NormalExpr) : NormalExpr
  deriving Inhabited

/-- The domain of a 2-morphism. -/
def Atom.src (Œ∑ : Atom) : BicategoryM Mor‚ÇÅ := do toMor‚ÇÅ (‚Üê srcExpr Œ∑.e)

/-- The codomain of a 2-morphism. -/
def Atom.tgt (Œ∑ : Atom) : BicategoryM Mor‚ÇÅ := do toMor‚ÇÅ (‚Üê tgtExpr Œ∑.e)

/-- The domain of a 2-morphism. -/
def WhiskerRightExpr.src : WhiskerRightExpr ‚Üí BicategoryM Mor‚ÇÅ
  | WhiskerRightExpr.of Œ∑ => Œ∑.src
  | WhiskerRightExpr.whisker Œ∑ f =>
    return (‚Üê WhiskerRightExpr.src Œ∑).comp (Mor‚ÇÅ.of f)

/-- The codomain of a 2-morphism. -/
def WhiskerRightExpr.tgt : WhiskerRightExpr ‚Üí BicategoryM Mor‚ÇÅ
  | WhiskerRightExpr.of Œ∑ => Œ∑.tgt
  | WhiskerRightExpr.whisker Œ∑ f =>
    return (‚Üê WhiskerRightExpr.tgt Œ∑).comp (Mor‚ÇÅ.of f)

/-- The domain of a 2-morphism. -/
def WhiskerLeftExpr.src : WhiskerLeftExpr ‚Üí BicategoryM Mor‚ÇÅ
  | WhiskerLeftExpr.of Œ∑ => Œ∑.src
  | WhiskerLeftExpr.whisker f Œ∑ =>
    return (Mor‚ÇÅ.of f).comp (‚Üê WhiskerLeftExpr.src Œ∑)

/-- The codomain of a 2-morphism. -/
def WhiskerLeftExpr.tgt : WhiskerLeftExpr ‚Üí BicategoryM Mor‚ÇÅ
  | WhiskerLeftExpr.of Œ∑ => Œ∑.tgt
  | WhiskerLeftExpr.whisker f Œ∑ =>
    return (Mor‚ÇÅ.of f).comp (‚Üê WhiskerLeftExpr.tgt Œ∑)

/-- The domain of a 2-morphism. -/
def StructuralAtom.src : StructuralAtom ‚Üí Mor‚ÇÅ
  | .associator f g h => (f.comp g).comp h
  | .associatorInv f g h => f.comp (g.comp h)
  | .leftUnitor f => (Mor‚ÇÅ.id f.src).comp f
  | .leftUnitorInv f => f
  | .rightUnitor f => f.comp (Mor‚ÇÅ.id f.tgt)
  | .rightUnitorInv f => f
  | .bicategoricalCoherence f _ _ => f

/-- The codomain of a 2-morphism. -/
def StructuralAtom.tgt : StructuralAtom ‚Üí Mor‚ÇÅ
  | .associator f g h => f.comp (g.comp h)
  | .associatorInv f g h => (f.comp g).comp h
  | .leftUnitor f => f
  | .leftUnitorInv f => (Mor‚ÇÅ.id f.src).comp f
  | .rightUnitor f => f
  | .rightUnitorInv f => f.comp (Mor‚ÇÅ.id f.tgt)
  | .bicategoricalCoherence _ g _ => g

/-- The domain of a 2-morphism. -/
def Structural.src : Structural ‚Üí Mor‚ÇÅ
  | .atom Œ∑ => Œ∑.src
  | .id f => f
  | .comp Œ± _ => Œ±.src
  | .whiskerLeft f Œ∑ => f.comp Œ∑.src
  | .whiskerRight Œ∑ f => Œ∑.src.comp f

/-- The codomain of a 2-morphism. -/
def Structural.tgt : Structural ‚Üí Mor‚ÇÅ
  | .atom Œ∑ => Œ∑.tgt
  | .id f => f
  | .comp _ Œ≤ => Œ≤.tgt
  | .whiskerLeft f Œ∑ => f.comp Œ∑.tgt
  | .whiskerRight Œ∑ f => Œ∑.tgt.comp f

/-- The domain of a 2-morphism. -/
def NormalExpr.src : NormalExpr ‚Üí Mor‚ÇÅ
  | NormalExpr.nil Œ∑ => Œ∑.src
  | NormalExpr.cons Œ± _ _ => Œ±.src

/-- The codomain of a 2-morphism. -/
def NormalExpr.tgt : NormalExpr ‚Üí Mor‚ÇÅ
  | NormalExpr.nil Œ∑ => Œ∑.tgt
  | NormalExpr.cons _ _ Œ∑s => Œ∑s.tgt

/-- The associator as a term of `normalExpr`. -/
def NormalExpr.associator (f g h : Mor‚ÇÅ) : NormalExpr :=
  .nil <| .atom <| .associator f g h

/-- The inverse of the associator as a term of `normalExpr`. -/
def NormalExpr.associatorInv (f g h : Mor‚ÇÅ) : NormalExpr :=
  .nil <| .atom <| .associatorInv f g h

/-- The left unitor as a term of `normalExpr`. -/
def NormalExpr.leftUnitor (f : Mor‚ÇÅ) : NormalExpr :=
  .nil <| .atom <| .leftUnitor f

/-- The inverse of the left unitor as a term of `normalExpr`. -/
def NormalExpr.leftUnitorInv (f : Mor‚ÇÅ) : NormalExpr :=
  .nil <| .atom <| .leftUnitorInv f

/-- The right unitor as a term of `normalExpr`. -/
def NormalExpr.rightUnitor (f : Mor‚ÇÅ) : NormalExpr :=
  .nil <| .atom <| .rightUnitor f

/-- The inverse of the right unitor as a term of `normalExpr`. -/
def NormalExpr.rightUnitorInv (f : Mor‚ÇÅ) : NormalExpr :=
  .nil <| .atom <| .rightUnitorInv f

/-- Construct a `NormalExpr` expression from a `WhiskerLeftExpr` expression. -/
def NormalExpr.of (Œ∑ : WhiskerLeftExpr) : BicategoryM NormalExpr := do
  return .cons (.id (‚Üê Œ∑.src)) Œ∑ (.nil (.id (‚Üê Œ∑.tgt)))

/-- Construct a `NormalExpr` expression from a Lean expression for an atomic 2-morphism. -/
def NormalExpr.ofExpr (Œ∑ : Expr) : BicategoryM NormalExpr :=
  NormalExpr.of <| .of <| .of <| ‚ü®Œ∑‚ü©

/-- If `e` is an expression of the form `Œ∑ ‚äó‚â´ Œ∏ := Œ∑ ‚â´ Œ± ‚â´ Œ∏` in the monoidal category `C`,
return the expression for `Œ±` .-/
def structuralOfBicategoricalComp (C e : Expr) : BicategoryM Structural := do
  let v ‚Üê mkFreshLevelMVar
  let u ‚Üê mkFreshLevelMVar
  _ ‚Üê isDefEq (.sort (.succ v)) (‚Üê inferType (‚Üê inferType e))
  _ ‚Üê isDefEq (.sort (.succ u)) (‚Üê inferType C)
  let W ‚Üê mkFreshExprMVar none
  let X ‚Üê mkFreshExprMVar none
  let Y ‚Üê mkFreshExprMVar none
  let Z ‚Üê mkFreshExprMVar none
  let f ‚Üê mkFreshExprMVar none
  let g ‚Üê mkFreshExprMVar none
  let Œ±‚ÇÄ ‚Üê mkFreshExprMVar none
  let instC ‚Üê mkFreshExprMVar none
  let Œ±g := mkAppN (.const ``CategoryStruct.comp [v, u]) #[C, instC, X, Y, Z, Œ±‚ÇÄ, g]
  let fŒ±g := mkAppN (.const ``CategoryStruct.comp [v, u]) #[C, instC, W, X, Z, f, Œ±g]
  _ ‚Üê isDefEq e fŒ±g
  match ‚Üê structuralAtom? Œ±‚ÇÄ with
  | some Œ∑ => return .atom Œ∑
  | none => throwError "not a structural 2-morphism"

section

open scoped Bicategory

universe w v u

variable {B : Type u} [Bicategory.{w, v} B]

variable {a‚ÇÄ a‚ÇÅ a b c d : B}
variable {f f' g g' h i j : a ‚ü∂ b}

theorem evalComp_nil_cons (Œ± : f ‚ü∂ g) (Œ≤ : g ‚ü∂ h) (Œ∑ : h ‚ü∂ i) (Œ∑s : i ‚ü∂ j) :
    Œ± ‚â´ (Œ≤ ‚â´ Œ∑ ‚â´ Œ∑s) = (Œ± ‚â´ Œ≤) ‚â´ Œ∑ ‚â´ Œ∑s := by
  simp

def mkEvalComp_nil_cons (Œ± Œ≤ Œ∑ Œ∑s : Expr) : BicategoryM Expr := do
    let ctx ‚Üê read
    let f ‚Üê srcExpr Œ±
    let g ‚Üê tgtExpr Œ±
    let h ‚Üê tgtExpr Œ≤
    let i ‚Üê tgtExpr Œ∑
    let j ‚Üê tgtExpr Œ∑s
    let a ‚Üê srcExpr f
    let b ‚Üê tgtExpr f
    return mkAppN (.const ``evalComp_nil_cons (‚Üê getLevels))
      #[ctx.B, ctx.instBicategory, a, b, f, g, h, i, j, Œ±, Œ≤, Œ∑, Œ∑s]

@[nolint synTaut]
theorem evalComp_nil_nil (Œ± : f ‚ü∂ g) (Œ≤ : g ‚ü∂ h) :
    Œ± ‚â´ Œ≤ = Œ± ‚â´ Œ≤ := by
  simp

def mkEvalComp_nil_nil (Œ± Œ≤ : Expr) : BicategoryM Expr := do
    let ctx ‚Üê read
    let f ‚Üê srcExpr Œ±
    let g ‚Üê tgtExpr Œ±
    let h ‚Üê tgtExpr Œ≤
    let a ‚Üê srcExpr f
    let b ‚Üê tgtExpr f
    return mkAppN (.const ``evalComp_nil_nil (‚Üê getLevels))
      #[ctx.B, ctx.instBicategory, a, b, f, g, h, Œ±, Œ≤]

theorem evalComp_cons (Œ± : f ‚ü∂ g) (Œ∑ : g ‚ü∂ h) {Œ∑s : h ‚ü∂ i} {Œ∏ : i ‚ü∂ j} {Œπ : h ‚ü∂ j}
    (pf_Œπ : Œ∑s ‚â´ Œ∏ = Œπ)  :
    (Œ± ‚â´ Œ∑ ‚â´ Œ∑s) ‚â´ Œ∏ = Œ± ‚â´ Œ∑ ‚â´ Œπ := by
  simp [pf_Œπ]

def mkEvalComp_cons (Œ± Œ∑ Œ∑s Œ∏ Œπ pf_Œπ : Expr) : BicategoryM Expr := do
    let ctx ‚Üê read
    let f ‚Üê srcExpr Œ±
    let g ‚Üê tgtExpr Œ±
    let h ‚Üê tgtExpr Œ∑
    let i ‚Üê tgtExpr Œ∑s
    let j ‚Üê tgtExpr Œ∏
    let a ‚Üê srcExpr f
    let b ‚Üê tgtExpr f
    return mkAppN (.const ``evalComp_cons (‚Üê getLevels))
      #[ctx.B, ctx.instBicategory, a, b, f, g, h, i, j, Œ±, Œ∑, Œ∑s, Œ∏, Œπ, pf_Œπ]

@[nolint synTaut]
theorem evalWhiskerLeft_nil (f : a ‚ü∂ b) {g h : b ‚ü∂ c} (Œ± : g ‚ü∂ h) :
    f ‚óÅ Œ± = f ‚óÅ Œ± := by
  simp

def mkEvalWhiskerLeft_nil (f Œ± : Expr) : BicategoryM Expr := do
    let ctx ‚Üê read
    let a ‚Üê srcExpr f
    let b ‚Üê tgtExpr f
    let g ‚Üê srcExpr Œ±
    let h ‚Üê tgtExpr Œ±
    let c ‚Üê tgtExpr g
    return mkAppN (.const ``evalWhiskerLeft_nil (‚Üê getLevels))
      #[ctx.B, ctx.instBicategory, a, b, c, f, g, h, Œ±]

theorem evalWhiskerLeft_of_cons
    {f : a ‚ü∂ b} {g h i j : b ‚ü∂ c}
    (Œ± : g ‚ü∂ h) (Œ∑ : h ‚ü∂ i) {Œ∑s : i ‚ü∂ j} {Œ∏ : f ‚â´ i ‚ü∂ f ‚â´ j} (pf_Œ∏ : f ‚óÅ Œ∑s = Œ∏) :
    f ‚óÅ (Œ± ‚â´ Œ∑ ‚â´ Œ∑s) = f ‚óÅ Œ± ‚â´ f ‚óÅ Œ∑ ‚â´ Œ∏ := by
  simp [pf_Œ∏]

def mkEvalWhiskerLeft_of_cons (f Œ± Œ∑ Œ∑s Œ∏ pf_Œ∏ : Expr) : BicategoryM Expr := do
    let ctx ‚Üê read
    let a ‚Üê srcExpr f
    let b ‚Üê tgtExpr f
    let g ‚Üê srcExpr Œ±
    let h ‚Üê tgtExpr Œ±
    let i ‚Üê tgtExpr Œ∑
    let j ‚Üê tgtExpr Œ∑s
    let c ‚Üê tgtExpr g
    return mkAppN (.const ``evalWhiskerLeft_of_cons (‚Üê getLevels))
      #[ctx.B, ctx.instBicategory, a, b, c, f, g, h, i, j, Œ±, Œ∑, Œ∑s, Œ∏, pf_Œ∏]

theorem evalWhiskerLeft_comp
    {f : a ‚ü∂ b} {g : b ‚ü∂ c} {h i : c ‚ü∂ d}
    {Œ∑ : h ‚ü∂ i} {Œ∏ : g ‚â´ h ‚ü∂ g ‚â´ i} {Œπ : f ‚â´ g ‚â´ h ‚ü∂ f ‚â´ g ‚â´ i}
    {Œπ' : f ‚â´ g ‚â´ h ‚ü∂ (f ‚â´ g) ‚â´ i} {Œπ'' : (f ‚â´ g) ‚â´ h ‚ü∂ (f ‚â´ g) ‚â´ i}
    (pf_Œ∏ : g ‚óÅ Œ∑ = Œ∏) (pf_Œπ : f ‚óÅ Œ∏ = Œπ)
    (pf_Œπ' : Œπ ‚â´ (Œ±_ _ _ _).inv = Œπ') (pf_Œπ'' : (Œ±_ _ _ _).hom ‚â´ Œπ' = Œπ'') :
    (f ‚â´ g) ‚óÅ Œ∑ = Œπ'' := by
  simp [pf_Œ∏, pf_Œπ, pf_Œπ', pf_Œπ'']

def mkEvalWhiskerLeft_comp (f g Œ∑ Œ∏ Œπ Œπ' Œπ'' pf_Œ∏ pf_Œπ pf_Œπ' pf_Œπ'' : Expr) : BicategoryM Expr := do
    let ctx ‚Üê read
    let a ‚Üê srcExpr f
    let b ‚Üê tgtExpr f
    let c ‚Üê tgtExpr g
    let h ‚Üê srcExpr Œ∑
    let i ‚Üê tgtExpr Œ∑
    let d ‚Üê tgtExpr h
    return mkAppN (.const ``evalWhiskerLeft_comp (‚Üê getLevels))
      #[ctx.B, ctx.instBicategory, a, b, c, d, f, g, h, i, Œ∑, Œ∏, Œπ, Œπ', Œπ'',
        pf_Œ∏, pf_Œπ, pf_Œπ', pf_Œπ'']

theorem evalWhiskerLeft_id {Œ∑ : f ‚ü∂ g}
    {Œ∑' : f ‚ü∂ ùüô a ‚â´ g} {Œ∑'' : ùüô a ‚â´ f ‚ü∂ ùüô a ‚â´ g}
    (pf_Œ∑' : Œ∑ ‚â´ (Œª_ _).inv = Œ∑') (pf_Œ∑'' : (Œª_ _).hom ‚â´ Œ∑' = Œ∑'') :
    ùüô a ‚óÅ Œ∑ = Œ∑'' := by
  simp [pf_Œ∑', pf_Œ∑'']

def mkEvalWhiskerLeft_id (Œ∑ Œ∑' Œ∑'' pf_Œ∑' pf_Œ∑'' : Expr) : BicategoryM Expr := do
    let ctx ‚Üê read
    let f ‚Üê srcExpr Œ∑
    let g ‚Üê tgtExpr Œ∑
    let a ‚Üê srcExpr f
    let b ‚Üê tgtExpr f
    return mkAppN (.const ``evalWhiskerLeft_id (‚Üê getLevels))
      #[ctx.B, ctx.instBicategory, a, b, f, g, Œ∑, Œ∑', Œ∑'', pf_Œ∑', pf_Œ∑'']

theorem eval_comp
    {Œ∑ Œ∑' : f ‚ü∂ g} {Œ∏ Œ∏' : g ‚ü∂ h} {Œπ : f ‚ü∂ h}
    (pf_Œ∑ : Œ∑ = Œ∑') (pf_Œ∏ : Œ∏ = Œ∏') (pf_Œ∑Œ∏ : Œ∑' ‚â´ Œ∏' = Œπ) :
    Œ∑ ‚â´ Œ∏ = Œπ := by
  simp [pf_Œ∑, pf_Œ∏, pf_Œ∑Œ∏]

theorem eval_whiskerLeft
    {f : a ‚ü∂ b} {g h : b ‚ü∂ c}
    {Œ∑ Œ∑' : g ‚ü∂ h} {Œ∏ : f ‚â´ g ‚ü∂ f ‚â´ h}
    (pf_Œ∑ : Œ∑ = Œ∑') (pf_Œ∏ : f ‚óÅ Œ∑' = Œ∏) :
    f ‚óÅ Œ∑ = Œ∏ := by
  simp [pf_Œ∑, pf_Œ∏]

theorem eval_whiskerRight
    {f g : a ‚ü∂ b} {h : b ‚ü∂ c}
    {Œ∑ Œ∑' : f ‚ü∂ g} {Œ∏ : f ‚â´ h ‚ü∂ g ‚â´ h}
    (pf_Œ∑ : Œ∑ = Œ∑') (pf_Œ∏ : Œ∑' ‚ñ∑ h = Œ∏) :
    Œ∑ ‚ñ∑ h = Œ∏ := by
  simp [pf_Œ∑, pf_Œ∏]

theorem eval_of (Œ∑ : f ‚ü∂ g) :
    Œ∑ = ùüô _ ‚â´ Œ∑ ‚â´ ùüô _ := by
  simp

@[nolint synTaut]
theorem evalWhiskerRight_nil (Œ± : f ‚ü∂ g) (h : b ‚ü∂ c) :
    Œ± ‚ñ∑ h = Œ± ‚ñ∑ h := by
  simp

theorem evalWhiskerRight_cons_of_of
    {f g h i : a ‚ü∂ b} {j : b ‚ü∂ c}
    (Œ± : f ‚ü∂ g) (Œ∑ : g ‚ü∂ h) {Œ∑s : h ‚ü∂ i} {Œ∏ : h ‚â´ j ‚ü∂ i ‚â´ j}
    (pf_Œ∏ : Œ∑s ‚ñ∑ j = Œ∏) :
    (Œ± ‚â´ Œ∑ ‚â´ Œ∑s) ‚ñ∑ j = Œ± ‚ñ∑ j ‚â´ Œ∑ ‚ñ∑ j ‚â´ Œ∏ := by
  simp [pf_Œ∏]

theorem evalWhiskerRight_cons_whisker
    {g j : a ‚ü∂ c} {f : a ‚ü∂ b} {h i : b ‚ü∂ c} {k : c ‚ü∂ d}
    {Œ± : g ‚ü∂ f ‚â´ h} {Œ∑ : h ‚ü∂ i} {Œ∑s : f ‚â´ i ‚ü∂ j}
    {Œ∑‚ÇÅ : h ‚â´ k ‚ü∂ i ‚â´ k} {Œ∑‚ÇÇ : f ‚â´ (h ‚â´ k) ‚ü∂ f ‚â´ (i ‚â´ k)} {Œ∑s‚ÇÅ : (f ‚â´ i) ‚â´ k ‚ü∂ j ‚â´ k}
    {Œ∑s‚ÇÇ : f ‚â´ (i ‚â´ k) ‚ü∂ j ‚â´ k} {Œ∑‚ÇÉ : f ‚â´ (h ‚â´ k) ‚ü∂ j ‚â´ k} {Œ∑‚ÇÑ : (f ‚â´ h) ‚â´ k ‚ü∂ j ‚â´ k}
    {Œ∑‚ÇÖ : g ‚â´ k ‚ü∂ j ‚â´ k}
    (pf_Œ∑‚ÇÅ : (ùüô _ ‚â´ Œ∑ ‚â´ ùüô _ ) ‚ñ∑ k = Œ∑‚ÇÅ) (pf_Œ∑‚ÇÇ : f ‚óÅ Œ∑‚ÇÅ = Œ∑‚ÇÇ)
    (pf_Œ∑s‚ÇÅ : Œ∑s ‚ñ∑ k = Œ∑s‚ÇÅ) (pf_Œ∑s‚ÇÇ : (Œ±_ _ _ _).inv ‚â´ Œ∑s‚ÇÅ = Œ∑s‚ÇÇ)
    (pf_Œ∑‚ÇÉ : Œ∑‚ÇÇ ‚â´ Œ∑s‚ÇÇ = Œ∑‚ÇÉ) (pf_Œ∑‚ÇÑ : (Œ±_ _ _ _).hom ‚â´ Œ∑‚ÇÉ = Œ∑‚ÇÑ) (pf_Œ∑‚ÇÖ : Œ± ‚ñ∑ k ‚â´ Œ∑‚ÇÑ = Œ∑‚ÇÖ) :
    (Œ± ‚â´ (f ‚óÅ Œ∑) ‚â´ Œ∑s) ‚ñ∑ k = Œ∑‚ÇÖ := by
  simp at pf_Œ∑‚ÇÅ
  simp [pf_Œ∑‚ÇÅ, pf_Œ∑‚ÇÇ, pf_Œ∑s‚ÇÅ, pf_Œ∑s‚ÇÇ, pf_Œ∑‚ÇÉ, pf_Œ∑‚ÇÑ, pf_Œ∑‚ÇÖ]

theorem evalWhiskerRight_comp
    {f f' : a ‚ü∂ b} {g : b ‚ü∂ c} {h : c ‚ü∂ d}
    {Œ∑ : f ‚ü∂ f'} {Œ∑‚ÇÅ : f ‚â´ g ‚ü∂ f' ‚â´ g} {Œ∑‚ÇÇ : (f ‚â´ g) ‚â´ h ‚ü∂ (f' ‚â´ g) ‚â´ h}
    {Œ∑‚ÇÉ : (f ‚â´ g) ‚â´ h ‚ü∂ f' ‚â´ (g ‚â´ h)} {Œ∑‚ÇÑ : f ‚â´ (g ‚â´ h) ‚ü∂ f' ‚â´ (g ‚â´ h)}
    (pf_Œ∑‚ÇÅ : Œ∑ ‚ñ∑ g = Œ∑‚ÇÅ) (pf_Œ∑‚ÇÇ : Œ∑‚ÇÅ ‚ñ∑ h = Œ∑‚ÇÇ)
    (pf_Œ∑‚ÇÉ : Œ∑‚ÇÇ ‚â´ (Œ±_ _ _ _).hom = Œ∑‚ÇÉ) (pf_Œ∑‚ÇÑ : (Œ±_ _ _ _).inv ‚â´ Œ∑‚ÇÉ = Œ∑‚ÇÑ) :
    Œ∑ ‚ñ∑ (g ‚â´ h) = Œ∑‚ÇÑ := by
  simp [pf_Œ∑‚ÇÅ, pf_Œ∑‚ÇÇ, pf_Œ∑‚ÇÉ, pf_Œ∑‚ÇÑ]

theorem evalWhiskerRight_id
    {Œ∑ : f ‚ü∂ g} {Œ∑‚ÇÅ : f ‚ü∂ g ‚â´ ùüô b} {Œ∑‚ÇÇ : f ‚â´ ùüô b ‚ü∂ g ‚â´ ùüô b}
    (pf_Œ∑‚ÇÅ : Œ∑ ‚â´ (œÅ_ _).inv = Œ∑‚ÇÅ) (pf_Œ∑‚ÇÇ : (œÅ_ _).hom ‚â´ Œ∑‚ÇÅ = Œ∑‚ÇÇ) :
    Œ∑ ‚ñ∑ ùüô b = Œ∑‚ÇÇ := by
  simp [pf_Œ∑‚ÇÅ, pf_Œ∑‚ÇÇ]

theorem eval_monoidalComp
    {Œ∑ Œ∑' : f ‚ü∂ g} {Œ± : g ‚ü∂ h} {Œ∏ Œ∏' : h ‚ü∂ i} {Œ±Œ∏ : g ‚ü∂ i} {Œ∑Œ±Œ∏ : f ‚ü∂ i}
    (pf_Œ∑ : Œ∑ = Œ∑') (pf_Œ∏ : Œ∏ = Œ∏') (pf_Œ±Œ∏ : Œ± ‚â´ Œ∏' = Œ±Œ∏) (pf_Œ∑Œ±Œ∏ : Œ∑' ‚â´ Œ±Œ∏ = Œ∑Œ±Œ∏) :
    Œ∑ ‚â´ Œ± ‚â´ Œ∏ = Œ∑Œ±Œ∏ := by
  simp [pf_Œ∑, pf_Œ∏, pf_Œ±Œ∏, pf_Œ∑Œ±Œ∏]

end


/-- Extract a Lean expression from a `Mor‚ÇÅ` expression. -/
def Mor‚ÇÅ.e (e : Mor‚ÇÅ) : BicategoryM Expr :=
  match e with
  | .id  a => do
    mkId‚ÇÅ a
  | .comp f g => do
    mkComp‚ÇÅ (‚Üê f.e) (‚Üê g.e)
  | .of f => return f.e

/-- Extract a Lean expression from a `StructuralAtom` expression. -/
def StructuralAtom.e : StructuralAtom ‚Üí BicategoryM Expr
  | .associator f g h => do mkIsoHom (‚Üê mkAssociator (‚Üê f.e) (‚Üê g.e) (‚Üê h.e))
  | .associatorInv f g h => do mkIsoInv (‚Üê mkAssociator (‚Üê f.e) (‚Üê g.e) (‚Üê h.e))
  | .leftUnitor f => do mkIsoHom (‚Üê mkLeftUnitor (‚Üê f.e))
  | .leftUnitorInv f => do mkIsoInv (‚Üê mkLeftUnitor (‚Üê f.e))
  | .rightUnitor f => do mkIsoHom (‚Üê mkRightUnitor (‚Üê f.e))
  | .rightUnitorInv f => do mkIsoInv (‚Üê mkRightUnitor (‚Üê f.e))
  | .bicategoricalCoherence _ _ e => do
    mkAppOptM ``BicategoricalCoherence.hom #[none, none, none, none, none, none, e]

/-- Extract a Lean expression from a `Structural` expression. -/
partial def Structural.e : Structural ‚Üí BicategoryM Expr
  | .atom Œ∑ => Œ∑.e
  | .id f => do mkId‚ÇÇ (‚Üê f.e)
  | .comp Œ± Œ≤ => do mkComp‚ÇÇ (‚Üê Œ±.e) (‚Üê Œ≤.e)
  | .whiskerLeft f Œ∑ => do mkWhiskerLeft (‚Üê f.e) (‚Üê Œ∑.e)
  | .whiskerRight Œ∑ f => do mkWhiskerRight (‚Üê Œ∑.e) (‚Üê f.e)

/-- Extract a Lean expression from a `WhiskerRightExpr` expression. -/
def WhiskerRightExpr.e : WhiskerRightExpr ‚Üí BicategoryM Expr
  | WhiskerRightExpr.of Œ∑ => return Œ∑.e
  | WhiskerRightExpr.whisker Œ∑ f => do
    mkWhiskerRight (‚Üê Œ∑.e) f.e

/-- Extract a Lean expression from a `WhiskerLeftExpr` expression. -/
def WhiskerLeftExpr.e : WhiskerLeftExpr ‚Üí BicategoryM Expr
  | WhiskerLeftExpr.of Œ∑ => Œ∑.e
  | WhiskerLeftExpr.whisker f Œ∑ => do
    mkWhiskerLeft f.e (‚Üê Œ∑.e)

/-- Extract a Lean expression from a `NormalExpr` expression. -/
def NormalExpr.e : NormalExpr ‚Üí BicategoryM Expr
  | NormalExpr.nil Œ± => Œ±.e
  | NormalExpr.cons Œ± Œ∑ Œ∏ => do
    -- match Œ±, Œ∏ with
    -- | .id _, .nil (.id _) => Œ∑.e
    -- | .id _, _ => do
    --   mkAppM ``CategoryStruct.comp #[‚Üê Œ∑.e, ‚Üê Œ∏.e]
    -- | _, .nil (.id _) => do
    --   mkAppM ``CategoryStruct.comp #[‚Üê Œ±.e, ‚Üê Œ∑.e]
    -- | _, _ => do
    mkComp‚ÇÇ (‚Üê Œ±.e) (‚Üê mkComp‚ÇÇ (‚Üê Œ∑.e) (‚Üê Œ∏.e))


/-- The result of evaluating an expression into normal form. -/
structure Result where
  /-- The normalized expression of the 2-morphism. -/
  expr : NormalExpr
  /-- The proof that the normalized expression is equal to the original expression. -/
  proof : Expr

/-- Evaluate the expression `Œ∑ ‚â´ Œ∏` into a normalized form. -/
partial def evalComp : NormalExpr ‚Üí NormalExpr ‚Üí BicategoryM Result
  | .nil Œ±, .cons Œ≤ Œ∑ Œ∑s => do
    let Œ∑' := .cons (Œ±.comp Œ≤) Œ∑ Œ∑s
    return ‚ü®Œ∑', ‚Üê mkEvalComp_nil_cons (‚Üê Œ±.e) (‚Üê Œ≤.e) (‚Üê Œ∑.e) (‚Üê Œ∑s.e)‚ü©
  | .nil Œ±, .nil Œ±' => do
    return ‚ü®.nil (Œ±.comp Œ±'), ‚Üê mkEvalComp_nil_nil (‚Üê Œ±.e) (‚Üê Œ±'.e)‚ü©
  | .cons Œ± Œ∑ Œ∑s, Œ∏ => do
    let ‚ü®Œπ, pf_Œπ‚ü© ‚Üê evalComp Œ∑s Œ∏
    let Œπ' := .cons Œ± Œ∑ Œπ
    return ‚ü®Œπ', ‚Üê mkEvalComp_cons (‚Üê Œ±.e) (‚Üê Œ∑.e) (‚Üê Œ∑s.e) (‚Üê Œ∏.e) (‚Üê Œπ.e) pf_Œπ‚ü©

/-- Evaluate the expression `f ‚óÅ Œ∑` into a normalized form. -/
partial def evalWhiskerLeftExpr : Mor‚ÇÅ ‚Üí NormalExpr ‚Üí BicategoryM Result
  | f, .nil Œ± => do
    return ‚ü®.nil (.whiskerLeft f Œ±), ‚Üê mkEvalWhiskerLeft_nil (‚Üê f.e) (‚Üê Œ±.e)‚ü©
  | .of f, .cons Œ± Œ∑ Œ∑s => do
    let Œ∑' := WhiskerLeftExpr.whisker f Œ∑
    let ‚ü®Œ∏, pf_Œ∏‚ü© ‚Üê evalWhiskerLeftExpr (.of f) Œ∑s
    let Œ∑'' := .cons (.whiskerLeft (.of f) Œ±) Œ∑' Œ∏
    return ‚ü®Œ∑'', ‚Üê mkEvalWhiskerLeft_of_cons (f.e) (‚Üê Œ±.e) (‚Üê Œ∑.e) (‚Üê Œ∑s.e) (‚Üê Œ∏.e) pf_Œ∏‚ü©
  | .comp f g, Œ∑ => do
    let ‚ü®Œ∏, pf_Œ∏‚ü© ‚Üê evalWhiskerLeftExpr g Œ∑
    let ‚ü®Œπ, pf_Œπ‚ü© ‚Üê evalWhiskerLeftExpr f Œ∏
    let h := Œ∑.src
    let h' := Œ∑.tgt
    let ‚ü®Œπ', pf_Œπ'‚ü© ‚Üê evalComp Œπ (NormalExpr.associatorInv f g h')
    let ‚ü®Œπ'', pf_Œπ''‚ü© ‚Üê evalComp (NormalExpr.associator f g h) Œπ'
    return ‚ü®Œπ'', ‚Üê mkEvalWhiskerLeft_comp (‚Üê f.e) (‚Üê g.e) (‚Üê Œ∑.e) (‚Üê Œ∏.e)
      (‚Üê Œπ.e) (‚Üê Œπ'.e) (‚Üê Œπ''.e) pf_Œ∏ pf_Œπ pf_Œπ' pf_Œπ''‚ü©
  | .id _, Œ∑ => do
    let f := Œ∑.src
    let g := Œ∑.tgt
    let ‚ü®Œ∑', pf_Œ∑'‚ü© ‚Üê evalComp Œ∑ (NormalExpr.leftUnitorInv g)
    let ‚ü®Œ∑'', pf_Œ∑''‚ü© ‚Üê evalComp (NormalExpr.leftUnitor f) Œ∑'
    return ‚ü®Œ∑'', ‚Üê mkEvalWhiskerLeft_id (‚Üê Œ∑.e) (‚Üê Œ∑'.e) (‚Üê Œ∑''.e) pf_Œ∑' pf_Œ∑''‚ü©

/-- Evaluate the expression `Œ∑ ‚ñ∑ f` into a normalized form. -/
partial def evalWhiskerRightExpr : NormalExpr ‚Üí Mor‚ÇÅ ‚Üí BicategoryM Result
  | .nil Œ±, h => do
    return ‚ü®.nil (.whiskerRight Œ± h), ‚Üê mkAppM ``evalWhiskerRight_nil #[‚Üê Œ±.e, ‚Üê h.e]‚ü©
  | .cons Œ± (.of Œ∑) Œ∑s, .of f => do
    let ‚ü®Œ∏, pf_Œ∏‚ü© ‚Üê evalWhiskerRightExpr Œ∑s (.of f)
    let Œ∑' := .cons (.whiskerRight Œ± (.of f)) (.of (.whisker Œ∑ f)) Œ∏
    let pf ‚Üê mkAppM ``evalWhiskerRight_cons_of_of #[‚Üê Œ±.e, ‚Üê Œ∑.e, pf_Œ∏]
    return ‚ü®Œ∑', pf‚ü©
  | .cons Œ± (.whisker f Œ∑) Œ∑s, h => do
    let g ‚Üê Œ∑.src
    let g' ‚Üê Œ∑.tgt
    let ‚ü®Œ∑‚ÇÅ, pf_Œ∑‚ÇÅ‚ü© ‚Üê evalWhiskerRightExpr (.cons (.id g) Œ∑ (.nil (.id g'))) h
    let ‚ü®Œ∑‚ÇÇ, pf_Œ∑‚ÇÇ‚ü© ‚Üê evalWhiskerLeftExpr (.of f) Œ∑‚ÇÅ
    let ‚ü®Œ∑s‚ÇÅ, pf_Œ∑s‚ÇÅ‚ü© ‚Üê evalWhiskerRightExpr Œ∑s h
    let Œ±' := .whiskerRight Œ± h
    let ‚ü®Œ∑s‚ÇÇ, pf_Œ∑s‚ÇÇ‚ü© ‚Üê evalComp (.associatorInv (.of f) g' h) Œ∑s‚ÇÅ
    let ‚ü®Œ∑‚ÇÉ, pf_Œ∑‚ÇÉ‚ü© ‚Üê evalComp Œ∑‚ÇÇ Œ∑s‚ÇÇ
    let ‚ü®Œ∑‚ÇÑ, pf_Œ∑‚ÇÑ‚ü© ‚Üê evalComp (.associator (.of f) g h) Œ∑‚ÇÉ
    let ‚ü®Œ∑‚ÇÖ, pf_Œ∑‚ÇÖ‚ü© ‚Üê evalComp (.nil Œ±') Œ∑‚ÇÑ
    return ‚ü®Œ∑‚ÇÖ, ‚Üê mkAppM ``evalWhiskerRight_cons_whisker
      #[pf_Œ∑‚ÇÅ, pf_Œ∑‚ÇÇ, pf_Œ∑s‚ÇÅ, pf_Œ∑s‚ÇÇ, pf_Œ∑‚ÇÉ, pf_Œ∑‚ÇÑ, pf_Œ∑‚ÇÖ]‚ü©
  | Œ∑, .comp g h => do
    let ‚ü®Œ∑‚ÇÅ, pf_Œ∑‚ÇÅ‚ü© ‚Üê evalWhiskerRightExpr Œ∑ g
    let ‚ü®Œ∑‚ÇÇ, pf_Œ∑‚ÇÇ‚ü© ‚Üê evalWhiskerRightExpr Œ∑‚ÇÅ h
    let f := Œ∑.src
    let f' := Œ∑.tgt
    let ‚ü®Œ∑‚ÇÉ, pf_Œ∑‚ÇÉ‚ü© ‚Üê evalComp Œ∑‚ÇÇ (.associator f' g h)
    let ‚ü®Œ∑‚ÇÑ, pf_Œ∑‚ÇÑ‚ü© ‚Üê evalComp (.associatorInv f g h) Œ∑‚ÇÉ
    return ‚ü®Œ∑‚ÇÑ, ‚Üê mkAppM ``evalWhiskerRight_comp #[pf_Œ∑‚ÇÅ, pf_Œ∑‚ÇÇ, pf_Œ∑‚ÇÉ, pf_Œ∑‚ÇÑ]‚ü©
  | Œ∑, .id _ => do
    let f := Œ∑.src
    let g := Œ∑.tgt
    let ‚ü®Œ∑‚ÇÅ, pf_Œ∑‚ÇÅ‚ü© ‚Üê evalComp Œ∑ (.rightUnitorInv g)
    let ‚ü®Œ∑‚ÇÇ, pf_Œ∑‚ÇÇ‚ü© ‚Üê evalComp (.rightUnitor f) Œ∑‚ÇÅ
    return ‚ü®Œ∑‚ÇÇ, ‚Üê mkAppM ``evalWhiskerRight_id #[pf_Œ∑‚ÇÅ, pf_Œ∑‚ÇÇ]‚ü©

/-- Evaluate the expression of a 2-morphism into a normalized form. -/
partial def eval (e : Expr) : BicategoryM Result := do
  if let .some Œ± ‚Üê structuralAtom? e then
    return ‚ü®.nil <| .atom Œ±, ‚Üê mkEqRefl (‚Üê Œ±.e)‚ü©
  else
    match e.getAppFnArgs with
    | (``CategoryStruct.id, #[_, _, f]) =>
      return ‚ü®.nil (.id (‚Üê toMor‚ÇÅ f)), ‚Üê mkEqRefl (‚Üê mkId‚ÇÇ f)‚ü©
    | (``CategoryStruct.comp, #[_, _, _, _, _, Œ∑, Œ∏]) =>
      let ‚ü®Œ∑_e, pf_Œ∑‚ü© ‚Üê eval Œ∑
      let ‚ü®Œ∏_e, pf_Œ∏‚ü© ‚Üê eval Œ∏
      let ‚ü®Œ∑Œ∏, pf‚ü© ‚Üê evalComp Œ∑_e Œ∏_e
      return ‚ü®Œ∑Œ∏, ‚Üê mkAppM ``eval_comp #[pf_Œ∑, pf_Œ∏, pf]‚ü©
    | (``Bicategory.whiskerLeft, #[_, _, _, _, _, f, _, _, Œ∑]) =>
      let ‚ü®Œ∑_e, pf_Œ∑‚ü© ‚Üê eval Œ∑
      let ‚ü®Œ∏, pf_Œ∏‚ü© ‚Üê evalWhiskerLeftExpr (‚Üê toMor‚ÇÅ f) Œ∑_e
      return ‚ü®Œ∏, ‚Üê mkAppM ``eval_whiskerLeft #[pf_Œ∑, pf_Œ∏]‚ü©
    | (``Bicategory.whiskerRight, #[_, _, _, _, _, _, _, Œ∑, h]) =>
      let ‚ü®Œ∑_e, pf_Œ∑‚ü© ‚Üê eval Œ∑
      let ‚ü®Œ∏, pf_Œ∏‚ü© ‚Üê evalWhiskerRightExpr Œ∑_e (‚Üê toMor‚ÇÅ h)
      return ‚ü®Œ∏, ‚Üê mkAppM ``eval_whiskerRight #[pf_Œ∑, pf_Œ∏]‚ü©
    | (``bicategoricalComp, #[C, _, _, _, _, _, _, _, _, Œ∑, Œ∏]) =>
      let ‚ü®Œ∑_e, pf_Œ∑‚ü© ‚Üê eval Œ∑
      let Œ±‚ÇÄ ‚Üê structuralOfBicategoricalComp C e
      let Œ± := NormalExpr.nil Œ±‚ÇÄ
      let ‚ü®Œ∏_e, pf_Œ∏‚ü© ‚Üê eval Œ∏
      let ‚ü®Œ±Œ∏, pf_Œ∏Œ±‚ü© ‚Üê evalComp Œ± Œ∏_e
      let ‚ü®Œ∑Œ±Œ∏, pf_Œ∑Œ±Œ∏‚ü© ‚Üê evalComp Œ∑_e Œ±Œ∏
      return ‚ü®Œ∑Œ±Œ∏, ‚Üê mkAppM ``eval_monoidalComp #[pf_Œ∑, pf_Œ∏, pf_Œ∏Œ±, pf_Œ∑Œ±Œ∏]‚ü©
    | _ =>
      return ‚ü®‚Üê NormalExpr.ofExpr e, ‚Üê mkAppM ``eval_of #[e]‚ü©

/-- Convert a `NormalExpr` expression into a list of `WhiskerLeftExpr` expressions. -/
def NormalExpr.toList : NormalExpr ‚Üí List WhiskerLeftExpr
  | NormalExpr.nil _ => []
  | NormalExpr.cons _ Œ∑ Œ∑s => Œ∑ :: NormalExpr.toList Œ∑s

theorem mk_eq {Œ± : Type _} (a b a' b' : Œ±) (ha : a = a') (hb : b = b') (h : a' = b') : a = b := by
  simp [h, ha, hb]

open Lean Elab Meta Tactic in
/-- Transform an equality between 2-morphisms into the equality between their normalizations. -/
def mkEqOfNormalizedEq (e : Expr) : MetaM Expr := do
  let some (_, e‚ÇÅ, e‚ÇÇ) := (‚Üê whnfR <| e).eq?
    | throwError "bicategory_nf requires an equality goal"
  let some ctx ‚Üê mkContext? e‚ÇÅ
    | throwError "the lhs and rhs must be 2-morphisms"
  BicategoryM.run ctx do
    let ‚ü®e‚ÇÅ', p‚ÇÅ‚ü© ‚Üê eval e‚ÇÅ
    let ‚ü®e‚ÇÇ', p‚ÇÇ‚ü© ‚Üê eval e‚ÇÇ
    mkAppM ``mk_eq #[e‚ÇÅ, e‚ÇÇ, ‚Üê e‚ÇÅ'.e, ‚Üê e‚ÇÇ'.e, p‚ÇÅ, p‚ÇÇ]

-- open Mathlib.Tactic.Bicategory

/-- `normalize% Œ∑` is the normalization of the 2-morphism `Œ∑`.
1. The normalized 2-morphism is of the form `Œ±‚ÇÄ ‚â´ Œ∑‚ÇÄ ‚â´ Œ±‚ÇÅ ‚â´ Œ∑‚ÇÅ ‚â´ ... Œ±‚Çò ‚â´ Œ∑‚Çò ‚â´ Œ±‚Çò‚Çä‚ÇÅ` where
  each `Œ±·µ¢` is a structural 2-morphism (consisting of associators and unitors),
2. each `Œ∑·µ¢` is a non-structural 2-morphism of the form `f‚ÇÅ ‚óÅ ... ‚óÅ f‚Çò ‚óÅ Œ∏`, and
3. `Œ∏` is of the form `Œπ ‚ñ∑ g‚ÇÅ ‚ñ∑ ... ‚ñ∑ g‚Çó`
-/
elab "normalize% " t:term:51 : term => do
  let e ‚Üê Lean.Elab.Term.elabTerm t none
  let some ctx ‚Üê mkContext? e
    | throwError m!"{e} is not a morphism"
  BicategoryM.run ctx do (‚Üê eval e).expr.e

open Lean Elab Tactic in
/-- Normalize the both sides of an equality. -/
elab "bicategory_nf" : tactic => withMainContext do
  let t ‚Üê getMainTarget
  let mvarIds ‚Üê (‚Üê getMainGoal).apply (‚Üê mkEqOfNormalizedEq t)
  replaceMainGoal mvarIds

end Mathlib.Tactic.Bicategory
