/-
Copyright (c) 2024 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import Mathlib.Tactic.CategoryTheory.MonoidalComp

/-!
# Normalization of morphisms in monoidal categories
This file provides a tactic that normalizes morphisms in monoidal categories. This is used in the
string diagram widget given in `Mathlib.Tactic.StringDiagram`.
We say that the morphism `η` in a monoidal category is in normal form if
1. `η` is of the form `α₀ ≫ η₀ ≫ α₁ ≫ η₁ ≫ ... αₘ ≫ ηₘ ≫ αₘ₊₁` where each `αᵢ` is a
  structural 2-morphism (consisting of associators and unitors),
2. each `ηᵢ` is a non-structural 2-morphism of the form `f₁ ◁ ... ◁ fₘ ◁ θ`, and
3. `θ` is of the form `ι ▷ g₁ ▷ ... ▷ gₗ`

Note that the structural morphisms `αᵢ` are not necessarily normalized, as the main purpose
is to get a list of the non-structural morphisms out.

Currently, the primary application of the normalization tactic in mind is drawing string diagrams,
which are graphical representations of morphisms in monoidal categories, in the infoview. When
drawing string diagrams, we often ignore associators and unitors (i.e., drawing morphisms in
strict monoidal categories). On the other hand, in Lean, it is considered difficult to formalize
the concept of strict monoidal categories due to the feature of dependent type theory. The
normalization tactic can remove associators and unitors from the expression, extracting the
necessary data for drawing string diagrams.

The current plan on drawing string diagrams (#10581) is to use
Penrose (https://github.com/penrose) via ProofWidget. However, it should be noted that the
normalization procedure in this file does not rely on specific settings, allowing for broader
application.

Future plans include the following. At least I (Yuma) would like to work on these in the future,
but it might not be immediate. If anyone is interested, I would be happy to discuss.

- Currently (#10581), the string diagrams only do drawing. It would be better they also generate
  proofs. That is, by manipulating the string diagrams displayed in the infoview with a mouse to
  generate proofs. In #10581, the string diagram widget only uses the morphisms generated by the
  normalization tactic and does not use proof terms ensuring that the original morphism and the
  normalized morphism are equal. Proof terms will be necessary for proof generation.

- There is also the possibility of using homotopy.io (https://github.com/homotopy-io), a graphical
  proof assistant for category theory, from Lean. At this point, I have very few ideas regarding
  this approach.

- The normalization tactic allows for an alternative implementation of the coherent tactic.

## Main definitions
- `Tactic.Monoidal.eval`: Given a Lean expression `e` that represents a morphism in a monoidal
category, this function returns a pair of `⟨e', pf⟩` where `e'` is the normalized expression of `e`
and `pf` is a proof that `e = e'`.

-/

open Lean Meta Elab
open CategoryTheory

namespace Mathlib.Tactic.Monoidal

initialize registerTraceClass `monoidal

/-- The context for evaluating expressions. -/
structure Context where
  /-- The expression for the underlying category. -/
  C : Expr
  instCat : Expr
  instMonoidal : Expr
  level₁ : Level
  level₂ : Level

/-- Populate a `context` object for evaluating `e`. -/
def mkContext? (e : Expr) : MetaM (Option Context) := do
  match (← whnfR (← inferType e)).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, f, _]) =>
    let C ← inferType f
    let .succ level₁ ← getLevel C | return none
    let .succ level₂ ← getLevel (← inferType e) | return none
    let .some instCat ← synthInstance?
      (mkAppN (.const ``Category [level₂, level₁]) #[C]) | return none
    let .some instMonoidal ← synthInstance?
      (mkAppN (.const ``MonoidalCategory [level₂, level₁]) #[C, instCat]) | return none
    return some
      { C := C, instCat := instCat, instMonoidal := instMonoidal,
        level₁ := level₁, level₂ := level₂ }
  | _ => return none

/-- The monad for the normalization of 2-morphisms. -/
abbrev MonoidalM := ReaderT Context MetaM

/-- Run a computation in the `M` monad. -/
abbrev MonoidalM.run {α : Type} (c : Context) (m : MonoidalM α) : MetaM α :=
  ReaderT.run m c

def getLevels : MonoidalM (List Level) := do
  let ctx ← read
  return [ctx.level₂, ctx.level₁]

/-- The domain of a morphism. -/
def srcExpr (η : Expr) : MetaM Expr := do
  match (← inferType η).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, f, _]) => return f
  | _ => match (← whnfR (← inferType η)).getAppFnArgs with
    | (``Quiver.Hom, #[_, _, f, _]) => return f
    | _ => throwError m!"{η} is not a morphism"

/-- The codomain of a morphism. -/
def tgtExpr (η : Expr) : MetaM Expr := do
  match (← inferType η).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, _, g]) => return g
  | _ => match (← whnfR (← inferType η)).getAppFnArgs with
    | (``Quiver.Hom, #[_, _, _, g]) => return g
    | _ => throwError m!"{η} is not a morphism"

/-- The domain of a morphism. -/
def srcExprOfIso (η : Expr) : MetaM Expr := do
  match (← inferType η).getAppFnArgs with
  | (``Iso, #[_, _, f, _]) => return f
  | _ => match (← whnfR (← inferType η)).getAppFnArgs with
    | (``Iso, #[_, _, f, _]) => return f
    | _ => throwError m!"{η} is not a morphism"

/-- The codomain of a morphism. -/
def tgtExprOfIso (η : Expr) : MetaM Expr := do
  match (← inferType η).getAppFnArgs with
  | (``Iso, #[_, _, _, g]) => return g
  | _ => match (← whnfR (← inferType η)).getAppFnArgs with
    | (``Iso, #[_, _, _, g]) => return g
    | _ => throwError m!"{η} is not a morphism"

def mkCategoryStructInst : MonoidalM Expr := do
  let ctx ← read
  return mkAppN (.const ``Category.toCategoryStruct (← getLevels)) #[ctx.C, ctx.instCat]

def mkQuiverInst : MonoidalM Expr := do
  let ctx ← read
  return mkAppN (.const ``CategoryStruct.toQuiver (← getLevels)) #[ctx.C, ← mkCategoryStructInst]

def mkMonoidalCategoryStructInst : MonoidalM Expr := do
  let ctx ← read
  return mkAppN (.const ``MonoidalCategory.toMonoidalCategoryStruct (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal]

def mkTensorObj (f g : Expr) : MonoidalM Expr := do
  let ctx ← read
  return mkAppN (.const ``MonoidalCategoryStruct.tensorObj (← getLevels))
    #[ctx.C, ctx.instCat, ← mkMonoidalCategoryStructInst, f, g]

def mkTensorUnit : MonoidalM Expr := do
  let ctx ← read
  return mkAppN (.const ``MonoidalCategoryStruct.tensorUnit (← getLevels))
    #[ctx.C, ctx.instCat, ← mkMonoidalCategoryStructInst]

def mkComp (η θ : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr η
  let g ← tgtExpr η
  let h ← tgtExpr θ
  return mkAppN (.const ``CategoryStruct.comp [ctx.level₂, ctx.level₁])
    #[ctx.C, ← mkCategoryStructInst, f, g, h, η, θ]

def mkId (f : Expr) : MonoidalM Expr := do
  let ctx ← read
  return mkAppN (.const ``CategoryStruct.id [ctx.level₂, ctx.level₁])
    #[ctx.C, ← mkCategoryStructInst, f]

def mkIsoHom (η : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExprOfIso η
  let g ← tgtExprOfIso η
  return mkAppN (.const ``Iso.hom [ctx.level₂, ctx.level₁])
    #[ctx.C, ctx.instCat, f, g, η]

def mkIsoInv (η : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExprOfIso η
  let g ← tgtExprOfIso η
  return mkAppN (.const ``Iso.inv [ctx.level₂, ctx.level₁])
    #[ctx.C, ctx.instCat, f, g, η]

def mkWhiskerLeft (f η : Expr) : MonoidalM Expr := do
  let ctx ← read
  let g ← srcExpr η
  let h ← tgtExpr η
  return mkAppN (.const ``MonoidalCategoryStruct.whiskerLeft (← getLevels))
    #[ctx.C, ctx.instCat, ← mkMonoidalCategoryStructInst, f, g, h, η]

def mkWhiskerRight (η h : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr η
  let g ← tgtExpr η
  return mkAppN (.const ``MonoidalCategoryStruct.whiskerRight (← getLevels))
    #[ctx.C, ctx.instCat, ← mkMonoidalCategoryStructInst, f, g, η, h]

def mkTensorHom (η θ : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr η
  let g ← tgtExpr η
  let h ← srcExpr θ
  let i ← tgtExpr θ
  return mkAppN (.const ``MonoidalCategoryStruct.tensorHom (← getLevels))
    #[ctx.C, ctx.instCat, ← mkMonoidalCategoryStructInst, f, g, h, i, η, θ]

def mkAssociator (f g h : Expr) : MonoidalM Expr := do
  let ctx ← read
  return mkAppN (.const ``MonoidalCategoryStruct.associator (← getLevels))
    #[ctx.C, ctx.instCat, ← mkMonoidalCategoryStructInst, f, g, h]

def mkLeftUnitor (f : Expr) : MonoidalM Expr := do
  let ctx ← read
  return mkAppN (.const ``MonoidalCategoryStruct.leftUnitor (← getLevels))
    #[ctx.C, ctx.instCat, ← mkMonoidalCategoryStructInst, f]

def mkRightUnitor (f : Expr) : MonoidalM Expr := do
  let ctx ← read
  return mkAppN (.const ``MonoidalCategoryStruct.rightUnitor (← getLevels))
    #[ctx.C, ctx.instCat, ← mkMonoidalCategoryStructInst, f]

def mkMonoidalCoherenceHom (f g inst : Expr) : MonoidalM Expr := do
  let ctx ← read
  return mkAppN (.const ``MonoidalCoherence.hom (← getLevels))
    #[ctx.C, ctx.instCat, f, g, inst]

/-- Expressions for atomic 1-morphisms. -/
structure Atom₁ : Type where
  /-- Extract a Lean expression from an `Atom₁` expression. -/
  e : Expr

/-- Expressions for 1-morphisms. -/
inductive Mor₁ : Type
  /-- `id` is the expression for `𝟙_ C`. -/
  | id : Mor₁
  /-- `comp X Y` is the expression for `X ⊗ Y` -/
  | comp : Mor₁ → Mor₁ → Mor₁
  /-- Construct the expression for an atomic 1-morphism. -/
  | of : Atom₁ → Mor₁
  deriving Inhabited

/-- Converts a 1-morphism into a list of its components. -/
def Mor₁.toList : Mor₁ → List Atom₁
  | .id => []
  | .comp f g => f.toList ++ g.toList
  | .of f => [f]

/-- Returns `𝟙_ C` if the expression `e` is of the form `𝟙_ C`. -/
def isTensorUnit? (e : Expr) : MonoidalM (Option Expr) := do
  let unit ← mkTensorUnit
  if ← withDefault <| isDefEq e unit then
    return ← instantiateMVars unit
  else
    return none

/-- Returns `(f, g)` if the expression `e` is of the form `f ⊗ g`. -/
def isTensorObj? (e : Expr) : MonoidalM (Option (Expr × Expr)) := do
  let ctx ← read
  let f ← mkFreshExprMVar ctx.C
  let g ← mkFreshExprMVar ctx.C
  let fg ← mkTensorObj f g
  if ← withDefault <| isDefEq e fg then
    return (← instantiateMVars f, ← instantiateMVars g)
  else
    return none

/-- Construct a `Mor₁` expression from a Lean expression. -/
partial def toMor₁ (e : Expr) : MonoidalM Mor₁ := do
  if let some _ ← isTensorUnit? e then
    return Mor₁.id
  else if let some (f, g) ← isTensorObj? e then
    return (← toMor₁ f).comp (← toMor₁ g)
  else
    return Mor₁.of ⟨e⟩

/-- Expressions for atomic structural 2-morphisms. -/
inductive StructuralAtom : Type
  /-- The expression for the associator `(α_ f g h).hom`. -/
  | associator (f g h : Mor₁) : StructuralAtom
  /-- The expression for the inverse of the associator `(α_ f g h).inv`. -/
  | associatorInv (f g h : Mor₁) : StructuralAtom
  /-- The expression for the left unitor `(λ_ f).hom`. -/
  | leftUnitor (f : Mor₁) : StructuralAtom
  /-- The expression for the inverse of the left unitor `(λ_ f).inv`. -/
  | leftUnitorInv (f : Mor₁) : StructuralAtom
  /-- The expression for the right unitor `(ρ_ f).hom`. -/
  | rightUnitor (f : Mor₁) : StructuralAtom
  /-- The expression for the inverse of the right unitor `(ρ_ f).inv`. -/
  | rightUnitorInv (f : Mor₁) : StructuralAtom
  /-- Expressions for `α` in the monoidal composition `η ⊗≫ θ := η ≫ α ≫ θ`. -/
  | monoidalCoherence (f g : Mor₁) (e : Expr) : StructuralAtom
  deriving Inhabited

/-- Construct a `StructuralAtom` expression from a Lean expression. -/
def structuralAtom? (e : Expr) : MonoidalM (Option StructuralAtom) := do
  match (← whnfR e) with
  -- whnfR version of `| (``Iso.hom, #[_, _, _, _, η]) =>`
  | .proj ``Iso 0 η =>
    match (← whnfR η).getAppFnArgs with
    | (``MonoidalCategoryStruct.associator, #[_, _, _, f, g, h]) =>
      return some <| .associator (← toMor₁ f) (← toMor₁ g) (← toMor₁ h)
    | (``MonoidalCategoryStruct.leftUnitor, #[_, _, _, f]) =>
      return some <| .leftUnitor (← toMor₁ f)
    | (``MonoidalCategoryStruct.rightUnitor, #[_, _, _, f]) =>
      return some <| .rightUnitor (← toMor₁ f)
    | _ => return none
  -- whnfR version of `| (``Iso.inv, #[_, _, _, _, η]) =>`
  | .proj ``Iso 1 η =>
    match (← whnfR η).getAppFnArgs with
    | (``MonoidalCategoryStruct.associator, #[_, _, _, f, g, h]) =>
      return some <| .associatorInv (← toMor₁ f) (← toMor₁ g) (← toMor₁ h)
    | (``MonoidalCategoryStruct.leftUnitor, #[_, _, _, f]) =>
      return some <| .leftUnitorInv (← toMor₁ f)
    | (``MonoidalCategoryStruct.rightUnitor, #[_, _, _, f]) =>
      return some <| .rightUnitorInv (← toMor₁ f)
    | _ => return none
  | _ =>
    match (← whnfR e).getAppFnArgs with
    | (``MonoidalCoherence.hom, #[_, _, f, g, inst]) =>
      return some <| .monoidalCoherence (← toMor₁ f) (← toMor₁ g) inst
    | _ => return none

/-- Expressions for atomic non-structural 2-morphisms. -/
structure Atom where
  /-- Extract a Lean expression from an `Atom` expression. -/
  e : Expr
  deriving Inhabited

/-- Expressions of the form `η ▷ f₁ ▷ ... ▷ fₙ`. -/
inductive WhiskerRightExpr : Type
  /-- Construct the expression for an atomic 2-morphism. -/
  | of (η : Atom) : WhiskerRightExpr
  /-- Construct the expression for `η ▷ f`. -/
  | whisker (η : WhiskerRightExpr) (f : Atom₁) : WhiskerRightExpr
  deriving Inhabited

/-- Expressions of the form `η₁ ⊗ ... ⊗ ηₙ`. -/
inductive TensorHomExpr : Type
  | of (η : WhiskerRightExpr) : TensorHomExpr
  | cons (head : WhiskerRightExpr) (tail : TensorHomExpr) : TensorHomExpr
  deriving Inhabited

/-- Expressions of the form `f₁ ◁ ... ◁ fₙ ◁ η`. -/
inductive WhiskerLeftExpr : Type
  /-- Construct the expression for a right-whiskered 2-morphism. -/
  | of (η : TensorHomExpr) : WhiskerLeftExpr
  /-- Construct the expression for `f ◁ η`. -/
  | whisker (f : Atom₁) (η : WhiskerLeftExpr) : WhiskerLeftExpr
  deriving Inhabited

/-- Expressions for structural 2-morphisms. -/
inductive Structural : Type
  /-- Expressions for atomic structural 2-morphisms. -/
  | atom (η : StructuralAtom) : Structural
  /-- Expressions for the identity `𝟙 f`. -/
  | id (f : Mor₁) : Structural
  /-- Expressions for the composition `η ≫ θ`. -/
  | comp (α β : Structural) : Structural
  /-- Expressions for the left whiskering `f ◁ η`. -/
  | whiskerLeft (f : Mor₁) (η : Structural) : Structural
  /-- Expressions for the right whiskering `η ▷ f`. -/
  | whiskerRight (η : Structural) (f : Mor₁) : Structural
  /-- Expressions for the tensor `α ⊗ β`. -/
  | tensorHom (α β : Structural) : Structural
  deriving Inhabited

/-- Normalized expressions for 2-morphisms. -/
inductive NormalExpr : Type
  /-- Construct the expression for a structural 2-morphism. -/
  | nil (α : Structural) : NormalExpr
  /-- Construct the normalized expression of 2-morphisms recursively. -/
  | cons (head_structural : Structural) (head : WhiskerLeftExpr) (tail : NormalExpr) : NormalExpr
  deriving Inhabited

/-- The domain of a morphism. -/
def src (η : Expr) : MonoidalM Mor₁ := do
  match (← whnfR (← inferType η)).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, f, _]) => toMor₁ f
  | _ => throwError "{η} is not a morphism"

/-- The codomain of a morphism. -/
def tgt (η : Expr) : MonoidalM Mor₁ := do
  match (← whnfR (← inferType η)).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, _, g]) => toMor₁ g
  | _ => throwError "{η} is not a morphism"

/-- The domain of a 2-morphism. -/
def Atom.src (η : Atom) : MonoidalM Mor₁ := do Monoidal.src η.e

/-- The codomain of a 2-morphism. -/
def Atom.tgt (η : Atom) : MonoidalM Mor₁ := do Monoidal.tgt η.e

/-- The domain of a 2-morphism. -/
def WhiskerRightExpr.src : WhiskerRightExpr → MonoidalM Mor₁
  | WhiskerRightExpr.of η => η.src
  | WhiskerRightExpr.whisker η f => return (← WhiskerRightExpr.src η).comp (Mor₁.of f)

/-- The codomain of a 2-morphism. -/
def WhiskerRightExpr.tgt : WhiskerRightExpr → MonoidalM Mor₁
  | WhiskerRightExpr.of η => η.tgt
  | WhiskerRightExpr.whisker η f => return (← WhiskerRightExpr.tgt η).comp (Mor₁.of f)

/-- The domain of a 2-morphism. -/
def TensorHomExpr.src : TensorHomExpr → MonoidalM Mor₁
  | TensorHomExpr.of η => η.src
  | TensorHomExpr.cons η ηs => return (← η.src).comp (← ηs.src)

/-- The codomain of a 2-morphism. -/
def TensorHomExpr.tgt : TensorHomExpr → MonoidalM Mor₁
  | TensorHomExpr.of η => η.tgt
  | TensorHomExpr.cons η ηs => return (← η.tgt).comp (← ηs.tgt)

/-- The domain of a 2-morphism. -/
def WhiskerLeftExpr.src : WhiskerLeftExpr → MonoidalM Mor₁
  | WhiskerLeftExpr.of η => TensorHomExpr.src η
  | WhiskerLeftExpr.whisker f η => return (Mor₁.of f).comp (← WhiskerLeftExpr.src η)

/-- The codomain of a 2-morphism. -/
def WhiskerLeftExpr.tgt : WhiskerLeftExpr → MonoidalM Mor₁
  | WhiskerLeftExpr.of η => TensorHomExpr.tgt η
  | WhiskerLeftExpr.whisker f η => return (Mor₁.of f).comp (← WhiskerLeftExpr.tgt η)

/-- The domain of a 2-morphism. -/
def StructuralAtom.src : StructuralAtom → Mor₁
  | .associator f g h => (f.comp g).comp h
  | .associatorInv f g h => f.comp (g.comp h)
  | .leftUnitor f => Mor₁.id.comp f
  | .leftUnitorInv f => f
  | .rightUnitor f => f.comp Mor₁.id
  | .rightUnitorInv f => f
  | .monoidalCoherence f _ _ => f

/-- The codomain of a 2-morphism. -/
def StructuralAtom.tgt : StructuralAtom → Mor₁
  | .associator f g h => f.comp (g.comp h)
  | .associatorInv f g h => (f.comp g).comp h
  | .leftUnitor f => f
  | .leftUnitorInv f => Mor₁.id.comp f
  | .rightUnitor f => f
  | .rightUnitorInv f => f.comp Mor₁.id
  | .monoidalCoherence _ g _ => g

/-- The domain of a 2-morphism. -/
def Structural.src : Structural → Mor₁
  | .atom η => η.src
  | .id f => f
  | .comp α _ => α.src
  | .whiskerLeft f η => f.comp η.src
  | .whiskerRight η f => η.src.comp f
  | .tensorHom α β => α.src.comp β.src

/-- The codomain of a 2-morphism. -/
def Structural.tgt : Structural → Mor₁
  | .atom η => η.tgt
  | .id f => f
  | .comp _ β => β.tgt
  | .whiskerLeft f η => f.comp η.tgt
  | .whiskerRight η f => η.tgt.comp f
  | .tensorHom α β => α.tgt.comp β.tgt

/-- The domain of a 2-morphism. -/
def NormalExpr.src : NormalExpr → Mor₁
  | NormalExpr.nil η => η.src
  | NormalExpr.cons α _ _ => α.src

/-- The codomain of a 2-morphism. -/
def NormalExpr.tgt : NormalExpr → Mor₁
  | NormalExpr.nil η => η.tgt
  | NormalExpr.cons _ _ ηs => ηs.tgt

/-- The associator as a term of `normalExpr`. -/
def NormalExpr.associator (f g h : Mor₁) : NormalExpr :=
  .nil <| .atom <| .associator f g h

/-- The inverse of the associator as a term of `normalExpr`. -/
def NormalExpr.associatorInv (f g h : Mor₁) : NormalExpr :=
  .nil <| .atom <| .associatorInv f g h

/-- The left unitor as a term of `normalExpr`. -/
def NormalExpr.leftUnitor (f : Mor₁) : NormalExpr :=
  .nil <| .atom <| .leftUnitor f

/-- The inverse of the left unitor as a term of `normalExpr`. -/
def NormalExpr.leftUnitorInv (f : Mor₁) : NormalExpr :=
  .nil <| .atom <| .leftUnitorInv f

/-- The right unitor as a term of `normalExpr`. -/
def NormalExpr.rightUnitor (f : Mor₁) : NormalExpr :=
  .nil <| .atom <| .rightUnitor f

/-- The inverse of the right unitor as a term of `normalExpr`. -/
def NormalExpr.rightUnitorInv (f : Mor₁) : NormalExpr :=
  .nil <| .atom <| .rightUnitorInv f

/-- Construct a `NormalExpr` expression from a `WhiskerLeftExpr` expression. -/
def NormalExpr.of (η : WhiskerLeftExpr) : MonoidalM NormalExpr := do
  return .cons (.id (← η.src)) η (.nil (.id (← η.tgt)))

/-- Construct a `NormalExpr` expression from a Lean expression for an atomic 2-morphism. -/
def NormalExpr.ofExpr (η : Expr) : MonoidalM NormalExpr :=
  NormalExpr.of <| .of <| .of <| .of ⟨η⟩

/-- If `e` is an expression of the form `η ⊗≫ θ := η ≫ α ≫ θ` in the monoidal category `C`,
return the expression for `α` .-/
def structuralOfMonoidalComp (e : Expr) : MonoidalM Structural := do
  let ctx ← read
  let f ← mkFreshExprMVar ctx.C
  let g ← mkFreshExprMVar ctx.C
  let h ← mkFreshExprMVar ctx.C
  let i ← mkFreshExprMVar ctx.C
  let η ← mkFreshExprMVar (mkAppN (.const ``Quiver.Hom [ctx.level₂.succ, ctx.level₁])
    #[ctx.C, ← mkQuiverInst, f, g])
  let α₀ ← mkFreshExprMVar (mkAppN (.const ``Quiver.Hom [ctx.level₂.succ, ctx.level₁])
    #[ctx.C, ← mkQuiverInst, g, h])
  let θ ← mkFreshExprMVar (mkAppN (.const ``Quiver.Hom [ctx.level₂.succ, ctx.level₁])
    #[ctx.C, ← mkQuiverInst, h, i])
  let αθ := mkAppN (.const ``CategoryStruct.comp (← getLevels))
    #[ctx.C, ← mkCategoryStructInst, g, h, i, α₀, θ]
  let ηαθ := mkAppN (.const ``CategoryStruct.comp (← getLevels))
    #[ctx.C, ← mkCategoryStructInst, f, g, i, η, αθ]
  _ ← isDefEq e ηαθ
  match ← structuralAtom? (← instantiateMVars α₀) with
  | some α => return .atom α
  | none => throwError "not a structural 2-morphism"

section

open scoped MonoidalCategory

universe v u

variable {C : Type u} [Category.{v} C]

variable {f f' g g' h h' i i' j : C}

@[nolint synTaut]
theorem evalComp_nil_nil {f g h : C} (α : f ⟶ g) (β : g ⟶ h) :
    α ≫ β = α ≫ β := by
  simp

def mkEvalCompNilNil (α β : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr α
  let g ← tgtExpr α
  let h ← tgtExpr β
  return mkAppN (.const ``evalComp_nil_nil (← getLevels))
    #[ctx.C, ctx.instCat, f, g, h, α, β]

theorem evalComp_nil_cons {f g h i j : C} (α : f ⟶ g) (β : g ⟶ h) (η : h ⟶ i) (ηs : i ⟶ j) :
    α ≫ (β ≫ η ≫ ηs) = (α ≫ β) ≫ η ≫ ηs := by
  simp

def mkEvalCompNilCons (α β η ηs : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr α
  let g ← tgtExpr α
  let h ← tgtExpr β
  let i ← tgtExpr η
  let j ← tgtExpr ηs
  return mkAppN (.const ``evalComp_nil_cons (← getLevels))
    #[ctx.C, ctx.instCat, f, g, h, i, j, α, β, η, ηs]

theorem evalComp_cons {f g h i j : C} (α : f ⟶ g) (η : g ⟶ h) {ηs : h ⟶ i} {θ : i ⟶ j} {ι : h ⟶ j}
    (pf_ι : ηs ≫ θ = ι)  :
    (α ≫ η ≫ ηs) ≫ θ = α ≫ η ≫ ι := by
  simp [pf_ι]

def mkEvalCompCons (α η ηs θ ι pf_ι : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr α
  let g ← tgtExpr α
  let h ← tgtExpr η
  let i ← tgtExpr ηs
  let j ← tgtExpr θ
  return mkAppN (.const ``evalComp_cons (← getLevels))
    #[ctx.C, ctx.instCat, f, g, h, i, j, α, η, ηs, θ, ι, pf_ι]

theorem eval_comp
    {η η' : f ⟶ g} {θ θ' : g ⟶ h} {ι : f ⟶ h}
    (pf_η : η = η') (pf_θ : θ = θ') (pf_ηθ : η' ≫ θ' = ι) :
    η ≫ θ = ι := by
  simp [pf_η, pf_θ, pf_ηθ]

def mkEvalComp (η η' θ θ' ι pf_η pf_θ pf_ηθ : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr η
  let g ← tgtExpr η
  let h ← tgtExpr θ
  return mkAppN (.const ``eval_comp (← getLevels))
    #[ctx.C, ctx.instCat, f, g, h, η, η', θ, θ', ι, pf_η, pf_θ, pf_ηθ]

theorem eval_of (η : f ⟶ g) :
    η = 𝟙 _ ≫ η ≫ 𝟙 _ := by
  simp

def mkEvalOf (η : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr η
  let g ← tgtExpr η
  return mkAppN (.const ``eval_of (← getLevels))
    #[ctx.C, ctx.instCat, f, g, η]

theorem eval_monoidalComp
    {η η' : f ⟶ g} {α : g ⟶ h} {θ θ' : h ⟶ i} {αθ : g ⟶ i} {ηαθ : f ⟶ i}
    (pf_η : η = η') (pf_θ : θ = θ') (pf_αθ : α ≫ θ' = αθ) (pf_ηαθ : η' ≫ αθ = ηαθ) :
    η ≫ α ≫ θ = ηαθ := by
  simp [pf_η, pf_θ, pf_αθ, pf_ηαθ]

def mkEvalMonoidalComp (η η' α θ θ' αθ ηαθ pf_η pf_θ pf_αθ pf_ηαθ : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr η
  let g ← tgtExpr η
  let h ← tgtExpr α
  let i ← tgtExpr θ
  return mkAppN (.const ``eval_monoidalComp (← getLevels))
    #[ctx.C, ctx.instCat, f, g, h, i, η, η', α, θ, θ', αθ, ηαθ, pf_η, pf_θ, pf_αθ, pf_ηαθ]

variable [MonoidalCategory C]

@[nolint synTaut]
theorem evalWhiskerLeft_nil (f : C) {g h : C} (α : g ⟶ h) :
    f ◁ α = f ◁ α := by
  simp

def mkEvalWhiskerLeftNil (f α : Expr) : MonoidalM Expr := do
  let ctx ← read
  let g ← srcExpr α
  let h ← tgtExpr α
  return mkAppN (.const ``evalWhiskerLeft_nil (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal, f, g, h, α]

theorem evalWhiskerLeft_of_cons {f g h i j : C}
    (α : g ⟶ h) (η : h ⟶ i) {ηs : i ⟶ j} {θ : f ⊗ i ⟶ f ⊗ j} (pf_θ : f ◁ ηs = θ) :
    f ◁ (α ≫ η ≫ ηs) = f ◁ α ≫ f ◁ η ≫ θ := by
  simp [pf_θ]

def mkEvalWhiskerLeft_of_cons (f α η ηs θ pf_θ : Expr) : MonoidalM Expr := do
  let ctx ← read
  let g ← srcExpr α
  let h ← tgtExpr α
  let i ← tgtExpr η
  let j ← tgtExpr ηs
  return mkAppN (.const ``evalWhiskerLeft_of_cons (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal, f, g, h, i, j, α, η, ηs, θ, pf_θ]

theorem evalWhiskerLeft_comp {f g h i : C}
    {η : h ⟶ i} {θ : g ⊗ h ⟶ g ⊗ i} {ι : f ⊗ g ⊗ h ⟶ f ⊗ g ⊗ i}
    {ι' : f ⊗ g ⊗ h ⟶ (f ⊗ g) ⊗ i} {ι'' : (f ⊗ g) ⊗ h ⟶ (f ⊗ g) ⊗ i}
    (pf_θ : g ◁ η = θ) (pf_ι : f ◁ θ = ι)
    (pf_ι' : ι ≫ (α_ _ _ _).inv = ι') (pf_ι'' : (α_ _ _ _).hom ≫ ι' = ι'') :
    (f ⊗ g) ◁ η = ι'' := by
  simp [pf_θ, pf_ι, pf_ι', pf_ι'']

def mkEvalWhiskerLeft_comp (f g η θ ι ι' ι'' pf_θ pf_ι pf_ι' pf_ι'' : Expr) : MonoidalM Expr := do
  let ctx ← read
  let h ← srcExpr η
  let i ← tgtExpr η
  return mkAppN (.const ``evalWhiskerLeft_comp (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal, f, g, h, i, η, θ, ι, ι', ι'', pf_θ, pf_ι, pf_ι', pf_ι'']

theorem evalWhiskerLeft_id {f g : C} {η : f ⟶ g}
    {η' : f ⟶ 𝟙_ C ⊗ g} {η'' : 𝟙_ C ⊗ f ⟶ 𝟙_ C ⊗ g}
    (pf_η' : η ≫ (λ_ _).inv = η') (pf_η'' : (λ_ _).hom ≫ η' = η'') :
    𝟙_ C ◁ η = η'' := by
  simp [pf_η', pf_η'']

def mkEvalWhiskerLeftId (η η' η'' pf_η' pf_η'' : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr η
  let g ← tgtExpr η
  return mkAppN (.const ``evalWhiskerLeft_id (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal, f, g, η, η', η'', pf_η', pf_η'']

theorem eval_whiskerLeft {f g h : C}
    {η η' : g ⟶ h} {θ : f ⊗ g ⟶ f ⊗ h}
    (pf_η : η = η') (pf_θ : f ◁ η' = θ) :
    f ◁ η = θ := by
  simp [pf_η, pf_θ]

def mkEvalWhiskerLeft (f η η' θ pf_η pf_θ : Expr) : MonoidalM Expr := do
  let ctx ← read
  let g ← srcExpr η
  let h ← tgtExpr η
  return mkAppN (.const ``eval_whiskerLeft (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal, f, g, h, η, η', θ, pf_η, pf_θ]

theorem eval_whiskerRight {f g h : C}
    {η η' : f ⟶ g} {θ : f ⊗ h ⟶ g ⊗ h}
    (pf_η : η = η') (pf_θ : η' ▷ h = θ) :
    η ▷ h = θ := by
  simp [pf_η, pf_θ]

def mkEvalWhiskerRight (h η η' θ pf_η pf_θ : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr η
  let g ← tgtExpr η
  return mkAppN (.const ``eval_whiskerRight (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal, f, g, h, η, η', θ, pf_η, pf_θ]

theorem eval_tensorHom {f g h i : C}
    {η η' : f ⟶ g} {θ θ' : h ⟶ i} {ι : f ⊗ h ⟶ g ⊗ i}
    (pf_η : η = η') (pf_θ : θ = θ') (pf_ι : η' ⊗ θ' = ι) :
    η ⊗ θ = ι := by
  simp [pf_η, pf_θ, pf_ι]

def mkEvalTensorHom (η η' θ θ' ι pf_η pf_θ pf_ι : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr η
  let g ← tgtExpr η
  let h ← srcExpr θ
  let i ← tgtExpr θ
  return mkAppN (.const ``eval_tensorHom (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal, f, g, h, i, η, η', θ, θ', ι, pf_η, pf_θ, pf_ι]

@[nolint synTaut]
theorem evalWhiskerRight_nil {f g : C} (α : f ⟶ g) (h : C) :
    α ▷ h = α ▷ h := by
  simp

def mkEvalWhiskerRightNil (α h : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr α
  let g ← tgtExpr α
  return mkAppN (.const ``evalWhiskerRight_nil (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal, f, g, α, h]

theorem evalWhiskerRight_cons_of_of {f g h i j : C}
    {α : f ⟶ g} {η : g ⟶ h} {ηs : h ⟶ i} {ηs₁ : h ⊗ j ⟶ i ⊗ j}
    {η₁ : g ⊗ j ⟶ h ⊗ j} {η₂ : g ⊗ j ⟶ i ⊗ j} {η₃ : f ⊗ j ⟶ i ⊗ j}
    (pf_ηs₁ : ηs ▷ j = ηs₁) (pf_η₁ : η ▷ j = η₁)
    (pf_η₂ : η₁ ≫ ηs₁ = η₂) (pf_η₃ : α ▷ j ≫ η₂ = η₃) :
    (α ≫ η ≫ ηs) ▷ j = η₃ := by
  simp_all

def mkEvalWhiskerRightConsOfOf (j α η ηs ηs₁ η₁ η₂ η₃ pf_ηs₁ pf_η₁ pf_η₂ pf_η₃ : Expr) :
    MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr α
  let g ← tgtExpr α
  let h ← tgtExpr η
  let i ← tgtExpr ηs
  return mkAppN (.const ``evalWhiskerRight_cons_of_of (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal,
      f, g, h, i, j, α, η, ηs, ηs₁, η₁, η₂, η₃, pf_ηs₁, pf_η₁, pf_η₂, pf_η₃]

theorem evalWhiskerRight_cons_whisker {f g h i j k : C}
    {α : g ⟶ f ⊗ h} {η : h ⟶ i} {ηs : f ⊗ i ⟶ j}
    {η₁ : h ⊗ k ⟶ i ⊗ k} {η₂ : f ⊗ (h ⊗ k) ⟶ f ⊗ (i ⊗ k)} {ηs₁ : (f ⊗ i) ⊗ k ⟶ j ⊗ k}
    {ηs₂ : f ⊗ (i ⊗ k) ⟶ j ⊗ k} {η₃ : f ⊗ (h ⊗ k) ⟶ j ⊗ k} {η₄ : (f ⊗ h) ⊗ k ⟶ j ⊗ k}
    {η₅ : g ⊗ k ⟶ j ⊗ k}
    (pf_η₁ : (𝟙 _ ≫ η ≫ 𝟙 _ ) ▷ k = η₁) (pf_η₂ : f ◁ η₁ = η₂)
    (pf_ηs₁ : ηs ▷ k = ηs₁) (pf_ηs₂ : (α_ _ _ _).inv ≫ ηs₁ = ηs₂)
    (pf_η₃ : η₂ ≫ ηs₂ = η₃) (pf_η₄ : (α_ _ _ _).hom ≫ η₃ = η₄) (pf_η₅ : α ▷ k ≫ η₄ = η₅) :
    (α ≫ (f ◁ η) ≫ ηs) ▷ k = η₅ := by
  simp at pf_η₁
  simp [pf_η₁, pf_η₂, pf_ηs₁, pf_ηs₂, pf_η₃, pf_η₄, pf_η₅]

def mkEvalWhiskerRightConsWhisker
    (f k α η ηs η₁ η₂ ηs₁ ηs₂ η₃ η₄ η₅
    pf_η₁ pf_η₂ pf_ηs₁ pf_ηs₂ pf_η₃ pf_η₄ pf_η₅ : Expr) : MonoidalM Expr := do
  let ctx ← read
  let g ← srcExpr α
  let h ← srcExpr η
  let i ← tgtExpr η
  let j ← tgtExpr ηs
  return mkAppN (.const ``evalWhiskerRight_cons_whisker (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal,
      f, g, h, i, j, k, α, η, ηs, η₁, η₂, ηs₁, ηs₂, η₃, η₄, η₅,
      pf_η₁, pf_η₂, pf_ηs₁, pf_ηs₂, pf_η₃, pf_η₄, pf_η₅]

theorem evalWhiskerRight_comp {f f' g h : C}
    {η : f ⟶ f'} {η₁ : f ⊗ g ⟶ f' ⊗ g} {η₂ : (f ⊗ g) ⊗ h ⟶ (f' ⊗ g) ⊗ h}
    {η₃ : (f ⊗ g) ⊗ h ⟶ f' ⊗ (g ⊗ h)} {η₄ : f ⊗ (g ⊗ h) ⟶ f' ⊗ (g ⊗ h)}
    (pf_η₁ : η ▷ g = η₁) (pf_η₂ : η₁ ▷ h = η₂)
    (pf_η₃ : η₂ ≫ (α_ _ _ _).hom = η₃) (pf_η₄ : (α_ _ _ _).inv ≫ η₃ = η₄) :
    η ▷ (g ⊗ h) = η₄ := by
  simp [pf_η₁, pf_η₂, pf_η₃, pf_η₄]

def mkEvalWhiskerRightComp (g h η η₁ η₂ η₃ η₄ pf_η₁ pf_η₂ pf_η₃ pf_η₄ : Expr) :
    MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr η
  let f' ← tgtExpr η
  return mkAppN (.const ``evalWhiskerRight_comp (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal,
      f, f', g, h, η, η₁, η₂, η₃, η₄, pf_η₁, pf_η₂, pf_η₃, pf_η₄]

theorem evalWhiskerRight_id {f g : C}
    {η : f ⟶ g} {η₁ : f ⟶ g ⊗ 𝟙_ C} {η₂ : f ⊗ 𝟙_ C ⟶ g ⊗ 𝟙_ C}
    (pf_η₁ : η ≫ (ρ_ _).inv = η₁) (pf_η₂ : (ρ_ _).hom ≫ η₁ = η₂) :
    η ▷ 𝟙_ C = η₂ := by
  simp [pf_η₁, pf_η₂]

def mkEvalWhiskerRightId (η η₁ η₂ pf_η₁ pf_η₂ : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr η
  let g ← tgtExpr η
  return mkAppN (.const ``evalWhiskerRight_id (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal, f, g, η, η₁, η₂, pf_η₁, pf_η₂]

theorem evalWhiskerRightExprAux_of {g h : C} (η : g ⟶ h) (f : C) :
    η ▷ f = 𝟙 _ ≫ η ▷ f ≫ 𝟙 _ := by
  simp

def mkEvalWhiskerRightExprAuxOf (η f : Expr) : MonoidalM Expr := do
  let ctx ← read
  let g ← srcExpr η
  let h ← tgtExpr η
  return mkAppN (.const ``evalWhiskerRightExprAux_of (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal, g, h, η, f]

theorem evalWhiskerRightExprAux_cons {f g h i j : C} {η : g ⟶ h} {ηs : i ⟶ j}
    {ηs' : i ⊗ f ⟶ j ⊗ f} {η₁ : g ⊗ (i ⊗ f) ⟶ h ⊗ (j ⊗ f)}
    {η₂ : g ⊗ (i ⊗ f) ⟶ (h ⊗ j) ⊗ f} {η₃ : (g ⊗ i) ⊗ f ⟶ (h ⊗ j) ⊗ f}
    (pf_ηs' : ηs ▷ f = ηs') (pf_η₁ : (𝟙 _ ≫ η ≫ 𝟙 _) ⊗ ηs' = η₁)
    (pf_η₂ : η₁ ≫ (α_ _ _ _).inv = η₂) (pf_η₃ : (α_ _ _ _).hom ≫ η₂ = η₃) :
    (η ⊗ ηs) ▷ f = η₃ := by
  simp [← pf_ηs', ← pf_η₁, ← pf_η₂, ← pf_η₃, MonoidalCategory.tensorHom_def]

def mkEvalWhiskerRightExprAuxCons (f η ηs ηs' η₁ η₂ η₃ pf_ηs' pf_η₁ pf_η₂ pf_η₃ : Expr) :
    MonoidalM Expr := do
  let ctx ← read
  let g ← srcExpr η
  let h ← tgtExpr η
  let i ← srcExpr ηs
  let j ← tgtExpr ηs
  return mkAppN (.const ``evalWhiskerRightExprAux_cons (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal,
      f, g, h, i, j, η, ηs, ηs', η₁, η₂, η₃, pf_ηs', pf_η₁, pf_η₂, pf_η₃]

theorem evalWhiskerRightExpr_cons_of {f f' g h i : C} {α : f' ⟶ g} {η : g ⟶ h} {ηs : h ⟶ i}
    {ηs₁ : h ⊗ f ⟶ i ⊗ f} {η₁ : g ⊗ f ⟶ h ⊗ f} {η₂ : g ⊗ f ⟶ i ⊗ f}
    {η₃ : f' ⊗ f ⟶ i ⊗ f}
    (pf_ηs₁ : ηs ▷ f = ηs₁) (pf_η₁ : η ▷ f = η₁)
    (pf_η₂ : η₁ ≫ ηs₁ = η₂) (pf_η₃ : α ▷ f ≫ η₂ = η₃) :
    (α ≫ η ≫ ηs) ▷ f = η₃ := by
  simp [pf_ηs₁, pf_η₁, pf_η₂, pf_η₃]

def mkEvalWhiskerRightExprConsOf (f α η ηs ηs₁ η₁ η₂ η₃
    pf_ηs₁ pf_η₁ pf_η₂ pf_η₃ : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f' ← srcExpr α
  let g ← srcExpr η
  let h ← tgtExpr η
  let i ← tgtExpr ηs
  return mkAppN (.const ``evalWhiskerRightExpr_cons_of (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal,
      f, f', g, h, i, α, η, ηs, ηs₁, η₁, η₂, η₃, pf_ηs₁, pf_η₁, pf_η₂, pf_η₃]

theorem evalTensorHomAux_of {f g h i : C} (η : f ⟶ g) (θ : h ⟶ i) :
    η ⊗ θ = 𝟙 _ ≫ (η ⊗ θ) ≫ 𝟙 _ := by
  simp

def mkEvalTensorHomAuxOf (η θ : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr η
  let g ← tgtExpr η
  let h ← srcExpr θ
  let i ← tgtExpr θ
  return mkAppN (.const ``evalTensorHomAux_of (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal, f, g, h, i, η, θ]

theorem evalTensorHomAux_cons {f f' g g' h i : C} {η : f ⟶ g} {ηs : f' ⟶ g'} {θ : h ⟶ i}
    {ηθ : f' ⊗ h ⟶ g' ⊗ i} {η₁ : f ⊗ (f' ⊗ h) ⟶ g ⊗ (g' ⊗ i)}
    {ηθ₁ : f ⊗ (f' ⊗ h) ⟶ (g ⊗ g') ⊗ i} {ηθ₂ : (f ⊗ f') ⊗ h ⟶ (g ⊗ g') ⊗ i}
    (pf_ηθ : ηs ⊗ θ = ηθ) (pf_η₁ : (𝟙 _ ≫ η ≫ 𝟙 _) ⊗ ηθ = η₁)
    (pf_ηθ₁ : η₁ ≫ (α_ _ _ _).inv = ηθ₁) (pf_ηθ₂ : (α_ _ _ _).hom ≫ ηθ₁ = ηθ₂) :
    (η ⊗ ηs) ⊗ θ = ηθ₂ := by
  simp_all

def mkEvalTensorHomAuxCons (η ηs θ ηθ η₁ ηθ₁ ηθ₂ pf_ηθ pf_η₁ pf_ηθ₁ pf_ηθ₂ : Expr) :
    MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr η
  let g ← tgtExpr η
  let f' ← srcExpr ηs
  let g' ← tgtExpr ηs
  let h ← srcExpr θ
  let i ← tgtExpr θ
  return mkAppN (.const ``evalTensorHomAux_cons (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal,
      f, f', g, g', h, i, η, ηs, θ, ηθ, η₁, ηθ₁, ηθ₂, pf_ηθ, pf_η₁, pf_ηθ₁, pf_ηθ₂]

theorem evalTensorHomAux'_whisker {f f' g g' h : C} {η : g ⟶ h} {θ : f' ⟶ g'}
    {ηθ : g ⊗ f' ⟶ h ⊗ g'} {η₁ : f ⊗ (g ⊗ f') ⟶ f ⊗ (h ⊗ g')}
    {η₂ :  f ⊗ (g ⊗ f') ⟶ (f ⊗ h) ⊗ g'} {η₃ : (f ⊗ g) ⊗ f' ⟶ (f ⊗ h) ⊗ g'}
    (pf_ηθ : η ⊗ θ = ηθ) (pf_η₁ : f ◁ ηθ = η₁)
    (pf_η₂ : η₁ ≫ (α_ _ _ _).inv = η₂) (pf_η₃ : (α_ _ _ _).hom ≫ η₂ = η₃) :
    (f ◁ η) ⊗ θ = η₃ := by
  simp only [← pf_ηθ, ← pf_η₁, ← pf_η₂, ← pf_η₃]
  simp [MonoidalCategory.tensorHom_def]

def mkEvalTensorHomAux'_whisker (f η θ ηθ η₁ η₂ η₃ pf_ηθ pf_η₁ pf_η₂ pf_η₃ : Expr) :
    MonoidalM Expr := do
  let ctx ← read
  let g ← srcExpr η
  let h ← tgtExpr η
  let f' ← srcExpr θ
  let g' ← tgtExpr θ
  return mkAppN (.const ``evalTensorHomAux'_whisker (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal,
      f, f', g, g', h, η, θ, ηθ, η₁, η₂, η₃, pf_ηθ, pf_η₁, pf_η₂, pf_η₃]

theorem evalTensorHomAux'_of_whisker {f f' g g' h : C} {η : g ⟶ h} {θ : f' ⟶ g'}
    {η₁ : g ⊗ f ⟶ h ⊗ f} {ηθ : (g ⊗ f) ⊗ f' ⟶ (h ⊗ f) ⊗ g'}
    {ηθ₁ : (g ⊗ f) ⊗ f' ⟶ h ⊗ (f ⊗ g')}
    {ηθ₂ : g ⊗ (f ⊗ f') ⟶ h ⊗ (f ⊗ g')}
    (pf_η₁ : η ▷ f = η₁) (pf_ηθ : η₁ ⊗ (𝟙 _ ≫ θ ≫ 𝟙 _) = ηθ)
    (pf_ηθ₁ : ηθ ≫ (α_ _ _ _).hom = ηθ₁) (pf_ηθ₂ : (α_ _ _ _).inv ≫ ηθ₁ = ηθ₂) :
    η ⊗ (f ◁ θ) = ηθ₂ := by
  simp only [← pf_η₁, ← pf_ηθ, ← pf_ηθ₁, ← pf_ηθ₂]
  simp [MonoidalCategory.tensorHom_def]

def mkEvalTensorHomAux'OfWhisker (f η θ η₁ ηθ ηθ₁ ηθ₂ pf_η₁ pf_ηθ pf_ηθ₁ pf_ηθ₂ : Expr) :
    MonoidalM Expr := do
  let ctx ← read
  let g ← srcExpr η
  let h ← tgtExpr η
  let f' ← srcExpr θ
  let g' ← tgtExpr θ
  return mkAppN (.const ``evalTensorHomAux'_of_whisker (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal,
      f, f', g, g', h, η, θ, η₁, ηθ, ηθ₁, ηθ₂, pf_η₁, pf_ηθ, pf_ηθ₁, pf_ηθ₂]

@[nolint synTaut]
theorem evalTensorHomExpr_nil_nil {f g h i : C} (α : f ⟶ g) (β : h ⟶ i) :
    α ⊗ β = α ⊗ β := by
  simp

def mkEvalTensorHomExprNilNil (α β : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr α
  let g ← tgtExpr α
  let h ← srcExpr β
  let i ← tgtExpr β
  return mkAppN (.const ``evalTensorHomExpr_nil_nil (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal, f, g, h, i, α, β]

theorem evalTensorHomExpr_nil_cons {f f' g g' h i : C}
    {α : f ⟶ g} {β : f' ⟶ g'} {η : g' ⟶ h} {ηs : h ⟶ i}
    {η₁ : g ⊗ g' ⟶ g ⊗ h} {ηs₁ : g ⊗ h ⟶ g ⊗ i}
    {η₂ : g ⊗ g' ⟶ g ⊗ i} {η₃ : f ⊗ f' ⟶ g ⊗ i}
    (pf_η₁ : g ◁ (𝟙 _ ≫ η ≫ 𝟙 _) = η₁)
    (pf_ηs₁ : g ◁ ηs = ηs₁) (pf_η₂ : η₁ ≫ ηs₁ = η₂)
    (pf_η₃ : (α ⊗ β) ≫ η₂ = η₃) :
    α ⊗ (β ≫ η ≫ ηs) = η₃ := by
  simp_all [MonoidalCategory.tensorHom_def]

def mkEvalTensorHomExpr_nil_cons (α β η ηs η₁ ηs₁ η₂ η₃
    pf_η₁ pf_ηs₁ pf_η₂ pf_η₃ : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr α
  let g ← tgtExpr α
  let f' ← srcExpr β
  let g' ← tgtExpr β
  let h ← srcExpr ηs
  let i ← tgtExpr ηs
  return mkAppN (.const ``evalTensorHomExpr_nil_cons (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal,
      f, f', g, g', h, i, α, β, η, ηs, η₁, ηs₁, η₂, η₃, pf_η₁, pf_ηs₁, pf_η₂, pf_η₃]

theorem evalTensorHomExpr_cons_nil {f f' g g' h i : C}
    {α : f ⟶ g} {η : g ⟶ h} {ηs : h ⟶ i} {β : f' ⟶ g'}
    {η₁ : g ⊗ g' ⟶ h ⊗ g'} {ηs₁ : h ⊗ g' ⟶ i ⊗ g'} {η₂ : g ⊗ g' ⟶ i ⊗ g'} {η₃ : f ⊗ f' ⟶ i ⊗ g'}
    (pf_η₁ : (𝟙 _ ≫ η ≫ 𝟙 _) ▷ g' = η₁) (pf_ηs₁ : ηs ▷ g' = ηs₁)
    (pf_η₂ : η₁ ≫ ηs₁ = η₂) (pf_η₃ : (α ⊗ β) ≫ η₂ = η₃) :
    (α ≫ η ≫ ηs) ⊗ β = η₃ := by
  simp_all [MonoidalCategory.tensorHom_def']

def mkEvalTensorHomExprConsNil (α η ηs β η₁ ηs₁ η₂ η₃
    pf_η₁ pf_ηs₁ pf_η₂ pf_η₃ : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr α
  let g ← tgtExpr α
  let h ← tgtExpr η
  let i ← tgtExpr ηs
  let f' ← srcExpr β
  let g' ← tgtExpr β
  return mkAppN (.const ``evalTensorHomExpr_cons_nil (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal,
      f, f', g, g', h, i, α, η, ηs, β, η₁, ηs₁, η₂, η₃, pf_η₁, pf_ηs₁, pf_η₂, pf_η₃]

theorem evalTensorHomExpr_cons_cons {f f' g g' h h' i i' : C}
    {α : f ⟶ g} {η : g ⟶ h} {ηs : h ⟶ i}
    {β : f' ⟶ g'} {θ : g' ⟶ h'} {θs : h' ⟶ i'}
    {ηθ : g ⊗ g' ⟶ h ⊗ h'} {ηθs : h ⊗ h' ⟶ i ⊗ i'}
    {ηθ₁ : g ⊗ g' ⟶ i ⊗ i'} {ηθ₂ : f ⊗ f' ⟶ i ⊗ i'}
    (pf_ηθ : η ⊗ θ = ηθ) (pf_ηθs : ηs ⊗ θs = ηθs)
    (pf_ηθ₁ : ηθ ≫ ηθs = ηθ₁) (pf_ηθ₂ : (α ⊗ β) ≫ ηθ₁ = ηθ₂) :
    (α ≫ η ≫ ηs) ⊗ (β ≫ θ ≫ θs) = ηθ₂ := by
  simp [← pf_ηθ , ← pf_ηθs , ← pf_ηθ₁, ← pf_ηθ₂]

def mkEvalTensorHomExprConsCons (α η ηs β θ θs ηθ ηθs ηθ₁ ηθ₂
    pf_ηθ pf_ηθs pf_ηθ₁ pf_ηθ₂ : Expr) : MonoidalM Expr := do
  let ctx ← read
  let f ← srcExpr α
  let g ← tgtExpr α
  let h ← tgtExpr η
  let i ← tgtExpr ηs
  let f' ← srcExpr β
  let g' ← tgtExpr β
  let h' ← tgtExpr θ
  let i' ← tgtExpr θs
  return mkAppN (.const ``evalTensorHomExpr_cons_cons (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal,
      f, f', g, g', h, h', i, i', α, η, ηs, β, θ, θs, ηθ, ηθs, ηθ₁, ηθ₂,
      pf_ηθ, pf_ηθs, pf_ηθ₁, pf_ηθ₂]

end

/-- Extract a Lean expression from a `Mor₁` expression. -/
def Mor₁.e : Mor₁ → MonoidalM Expr
  | .id => do mkTensorUnit
  | .comp f g => do mkTensorObj (← Mor₁.e f) (← Mor₁.e g)
  | .of f => return f.e

/-- Extract a Lean expression from a `StructuralAtom` expression. -/
def StructuralAtom.e : StructuralAtom → MonoidalM Expr
  | .associator f g h => do mkIsoHom (← mkAssociator (← f.e) (← g.e) (← h.e))
  | .associatorInv f g h => do mkIsoInv (← mkAssociator (← f.e) (← g.e) (← h.e))
  | .leftUnitor f => do mkIsoHom (← mkLeftUnitor (← f.e))
  | .leftUnitorInv f => do mkIsoInv (← mkLeftUnitor (← f.e))
  | .rightUnitor f => do mkIsoHom (← mkRightUnitor (← f.e))
  | .rightUnitorInv f => do mkIsoInv (← mkRightUnitor (← f.e))
  | .monoidalCoherence f g e => do mkMonoidalCoherenceHom (← f.e) (← g.e) e

/-- Extract a Lean expression from a `Structural` expression. -/
partial def Structural.e : Structural → MonoidalM Expr
  | .atom η => η.e
  | .id f => do mkId (← f.e)
  | .comp α β => do mkComp (← α.e) (← β.e)
  | .whiskerLeft f η => do mkWhiskerLeft (← f.e) (← η.e)
  | .whiskerRight η f => do mkWhiskerRight (← η.e) (← f.e)
  | .tensorHom α β => do mkTensorHom (← α.e) (← β.e)

/-- Extract a Lean expression from a `WhiskerRightExpr` expression. -/
def WhiskerRightExpr.e : WhiskerRightExpr → MonoidalM Expr
  | WhiskerRightExpr.of η => return η.e
  | WhiskerRightExpr.whisker η f => do mkWhiskerRight (← η.e) f.e

/-- Extract a Lean expression from a `TensorHomExpr` expression. -/
def TensorHomExpr.e : TensorHomExpr → MonoidalM Expr
  | TensorHomExpr.of η => η.e
  | TensorHomExpr.cons η ηs => do mkTensorHom (← η.e) (← ηs.e)

/-- Extract a Lean expression from a `WhiskerLeftExpr` expression. -/
def WhiskerLeftExpr.e : WhiskerLeftExpr → MonoidalM Expr
  | WhiskerLeftExpr.of η => η.e
  | WhiskerLeftExpr.whisker f η => do mkWhiskerLeft f.e (← η.e)

/-- Extract a Lean expression from a `NormalExpr` expression. -/
def NormalExpr.e : NormalExpr → MonoidalM Expr
  | NormalExpr.nil α => α.e
  | NormalExpr.cons α η θ => do mkComp (← α.e) (← mkComp (← η.e) (← θ.e))

/-- The result of evaluating an expression into normal form. -/
structure Result where
  /-- The normalized expression of the 2-morphism. -/
  expr : NormalExpr
  /-- The proof that the normalized expression is equal to the original expression. -/
  proof : Expr

/-- Construct a `NormalExpr` expression from another `NormalExpr` expression by adding a structural
2-morphism at the head. -/
def evalCompNil (α : Structural) : NormalExpr → MonoidalM Result
  | .nil β => do
    let αβ := .nil (α.comp β)
    return ⟨αβ, ← mkEvalCompNilNil (← α.e) (← β.e)⟩
  | .cons β η ηs => do
    let αβ := .cons (α.comp β) η ηs
    return ⟨αβ, ← mkEvalCompNilCons (← α.e) (← β.e) (← η.e) (← ηs.e)⟩

mutual

/-- Evaluate the expression `η ≫ θ` into a normalized form. -/
partial def evalComp : NormalExpr → NormalExpr → MonoidalM Result
  | .nil α, η => do evalCompNil α η
  | .cons α η ηs, θ => do
    let ⟨ι, pf_ι⟩ ← evalComp ηs θ
    let ι' := .cons α η ι
    return ⟨ι', ← mkEvalCompCons (← α.e) (← η.e) (← ηs.e) (← θ.e) (← ι.e) pf_ι⟩

/-- Evaluate the expression `f ◁ η` into a normalized form. -/
partial def evalWhiskerLeftExpr : Mor₁ → NormalExpr → MonoidalM Result
  | f, .nil α => do
    return ⟨.nil (.whiskerLeft f α), ← mkEvalWhiskerLeftNil (← f.e) (← α.e)⟩
  | .of f, .cons α η ηs => do
    let η' := WhiskerLeftExpr.whisker f η
    let ⟨θ, pf_θ⟩ ← evalWhiskerLeftExpr (.of f) ηs
    let η'' := .cons (.whiskerLeft (.of f) α) η' θ
    return ⟨η'', ← mkEvalWhiskerLeft_of_cons f.e (← α.e) (← η.e) (← ηs.e) (← θ.e) pf_θ⟩
  | .comp f g, η => do
    let ⟨θ, pf_θ⟩ ← evalWhiskerLeftExpr g η
    let ⟨ι, pf_ι⟩ ← evalWhiskerLeftExpr f θ
    let h := η.src
    let h' := η.tgt
    let ⟨ι', pf_ι'⟩ ← evalComp ι (NormalExpr.associatorInv f g h')
    let ⟨ι'', pf_ι''⟩ ← evalComp (NormalExpr.associator f g h) ι'
    return ⟨ι'', ← mkEvalWhiskerLeft_comp (← f.e) (← g.e) (← η.e) (← θ.e) (← ι.e)
      (← ι'.e) (← ι''.e) pf_θ pf_ι pf_ι' pf_ι''⟩
  | .id, η => do
    let f := η.src
    let g := η.tgt
    let ⟨η', pf_η'⟩ ← evalComp η (NormalExpr.leftUnitorInv g)
    let ⟨η'', pf_η''⟩ ← evalComp (NormalExpr.leftUnitor f) η'
    return ⟨η'', ← mkEvalWhiskerLeftId (← η.e) (← η'.e) (← η''.e) pf_η' pf_η''⟩

/-- Evaluate the expression `η ▷ f` into a normalized form. -/
partial def evalWhiskerRightExprAux : TensorHomExpr → Atom₁ → MonoidalM Result
  | .of η, f => do
    let η' ← NormalExpr.of <| .of <| .of <| .whisker η f
    return ⟨η', ← mkEvalWhiskerRightExprAuxOf (← η.e) f.e⟩
  | .cons η ηs, f => do
    let ⟨ηs', pf_ηs'⟩ ← evalWhiskerRightExprAux ηs f
    let ⟨η₁, pf_η₁⟩ ← evalTensorHomExpr (← NormalExpr.of <| .of <| .of η) ηs'
    let ⟨η₂, pf_η₂⟩ ← evalComp η₁ (.associatorInv (← η.tgt) (← ηs.tgt) (.of f))
    let ⟨η₃, pf_η₃⟩ ← evalComp (.associator (← η.src) (← ηs.src) (.of f)) η₂
    return ⟨η₃, ← mkEvalWhiskerRightExprAuxCons f.e (← η.e) (← ηs.e) (← ηs'.e)
      (← η₁.e) (← η₂.e) (← η₃.e) pf_ηs' pf_η₁ pf_η₂ pf_η₃⟩

/-- Evaluate the expression `η ▷ f` into a normalized form. -/
partial def evalWhiskerRightExpr : NormalExpr → Mor₁ → MonoidalM Result
  | .nil α, h => do
    return ⟨.nil (.whiskerRight α h), ← mkEvalWhiskerRightNil (← α.e) (← h.e)⟩
  | .cons α (.of η) ηs, .of f => do
    let ⟨ηs₁, pf_ηs₁⟩ ← evalWhiskerRightExpr ηs (.of f)
    let ⟨η₁, pf_η₁⟩ ← evalWhiskerRightExprAux η f
    let ⟨η₂, pf_η₂⟩ ← evalComp η₁ ηs₁
    let ⟨η₃, pf_η₃⟩ ← evalCompNil (.whiskerRight α (.of f)) η₂
    return ⟨η₃, ← mkEvalWhiskerRightConsOfOf f.e (← α.e) (← η.e) (← ηs.e)
      (← ηs₁.e) (← η₁.e) (← η₂.e) (← η₃.e) pf_ηs₁ pf_η₁ pf_η₂ pf_η₃⟩
  | .cons α (.whisker f η) ηs, h => do
    let g ← η.src
    let g' ← η.tgt
    let ⟨η₁, pf_η₁⟩ ← evalWhiskerRightExpr (.cons (.id g) η (.nil (.id g'))) h
    let ⟨η₂, pf_η₂⟩ ← evalWhiskerLeftExpr (.of f) η₁
    let ⟨ηs₁, pf_ηs₁⟩ ← evalWhiskerRightExpr ηs h
    let α' := .whiskerRight α h
    let ⟨ηs₂, pf_ηs₂⟩ ← evalComp (.associatorInv (.of f) g' h) ηs₁
    let ⟨η₃, pf_η₃⟩ ← evalComp η₂ ηs₂
    let ⟨η₄, pf_η₄⟩ ← evalComp (.associator (.of f) g h) η₃
    let ⟨η₅, pf_η₅⟩ ← evalComp (.nil α') η₄
    return ⟨η₅, ← mkEvalWhiskerRightConsWhisker f.e (← h.e) (← α.e) (← η.e) (← ηs.e)
      (← η₁.e) (← η₂.e) (← ηs₁.e) (← ηs₂.e) (← η₃.e) (← η₄.e) (← η₅.e)
      pf_η₁ pf_η₂ pf_ηs₁ pf_ηs₂ pf_η₃ pf_η₄ pf_η₅⟩
  | η, .comp g h => do
    let ⟨η₁, pf_η₁⟩ ← evalWhiskerRightExpr η g
    let ⟨η₂, pf_η₂⟩ ← evalWhiskerRightExpr η₁ h
    let f := η.src
    let f' := η.tgt
    let ⟨η₃, pf_η₃⟩ ← evalComp η₂ (.associator f' g h)
    let ⟨η₄, pf_η₄⟩ ← evalComp (.associatorInv f g h) η₃
    return ⟨η₄, ← mkEvalWhiskerRightComp (← g.e) (← h.e) (← η.e) (← η₁.e) (← η₂.e)
      (← η₃.e) (← η₄.e) pf_η₁ pf_η₂ pf_η₃ pf_η₄⟩
  | η, .id => do
    let f := η.src
    let g := η.tgt
    let ⟨η₁, pf_η₁⟩ ← evalComp η (.rightUnitorInv g)
    let ⟨η₂, pf_η₂⟩ ← evalComp (.rightUnitor f) η₁
    return ⟨η₂, ← mkEvalWhiskerRightId (← η.e) (← η₁.e) (← η₂.e) pf_η₁ pf_η₂⟩

/-- Evaluate the expression `η ⊗ θ` into a normalized form. -/
partial def evalTensorHomAux : TensorHomExpr → TensorHomExpr → MonoidalM Result
  | .of η, θ => do
    return ⟨← NormalExpr.of <| .of <| .cons η θ, ← mkEvalTensorHomAuxOf (← η.e) (← θ.e)⟩
  | .cons η ηs, θ => do
    let α := NormalExpr.associator (← η.src) (← ηs.src) (← θ.src)
    let α' := NormalExpr.associatorInv (← η.tgt) (← ηs.tgt) (← θ.tgt)
    let ⟨ηθ, pf_ηθ⟩ ← evalTensorHomAux ηs θ
    let ⟨η₁, pf_η₁⟩ ← evalTensorHomExpr (← NormalExpr.of <| .of <| .of η) ηθ
    let ⟨ηθ₁, pf_ηθ₁⟩ ← evalComp η₁ α'
    let ⟨ηθ₂, pf_ηθ₂⟩ ← evalComp α ηθ₁
    return ⟨ηθ₂, ← mkEvalTensorHomAuxCons (← η.e) (← ηs.e) (← θ.e) (← ηθ.e)
      (← η₁.e) (← ηθ₁.e) (← ηθ₂.e) pf_ηθ pf_η₁ pf_ηθ₁ pf_ηθ₂⟩

/-- Evaluate the expression `η ⊗ θ` into a normalized form. -/
partial def evalTensorHomAux' : WhiskerLeftExpr → WhiskerLeftExpr → MonoidalM Result
  | .of η, .of θ => evalTensorHomAux η θ
  | .whisker f η, θ => do
    let ⟨ηθ, pf_ηθ⟩ ← evalTensorHomAux' η θ
    let ⟨ηθ₁, pf_ηθ₁⟩ ← evalWhiskerLeftExpr (.of f) ηθ
    let ⟨ηθ₂, pf_ηθ₂⟩ ← evalComp ηθ₁ (.associatorInv (.of f) (← η.tgt) (← θ.tgt))
    let ⟨ηθ₃, pf_ηθ₃⟩ ← evalComp (.associator (.of f) (← η.src) (← θ.src)) ηθ₂
    return ⟨ηθ₃, ← mkEvalTensorHomAux'_whisker f.e (← η.e) (← θ.e) (← ηθ.e)
      (← ηθ₁.e) (← ηθ₂.e) (← ηθ₃.e) pf_ηθ pf_ηθ₁ pf_ηθ₂ pf_ηθ₃⟩
  | .of η, .whisker f θ => do
    let ⟨η₁, pf_η₁⟩ ← evalWhiskerRightExprAux η f
    let ⟨ηθ, pf_ηθ⟩ ← evalTensorHomExpr η₁ (← NormalExpr.of θ)
    let ⟨ηθ₁, pf_ηθ₁⟩ ← evalComp ηθ (.associator (← η.tgt) (.of f) (← θ.tgt))
    let ⟨ηθ₂, pf_ηθ₂⟩ ← evalComp (.associatorInv (← η.src) (.of f) (← θ.src)) ηθ₁
    return ⟨ηθ₂, ← mkEvalTensorHomAux'OfWhisker f.e (← η.e) (← θ.e) (← ηθ.e)
      (← η₁.e) (← ηθ₁.e) (← ηθ₂.e) pf_η₁ pf_ηθ pf_ηθ₁ pf_ηθ₂⟩

/-- Evaluate the expression `η ⊗ θ` into a normalized form. -/
partial def evalTensorHomExpr : NormalExpr → NormalExpr → MonoidalM Result
  | .nil α, .nil β => do
    return ⟨.nil <| .tensorHom α β, ← mkEvalTensorHomExprNilNil (← α.e) (← β.e)⟩
  | .nil α, .cons β η ηs => do
    let ⟨η₁, pf_η₁⟩ ← evalWhiskerLeftExpr α.tgt (← NormalExpr.of η)
    let ⟨ηs₁, pf_ηs₁⟩ ← evalWhiskerLeftExpr α.tgt ηs
    let ⟨η₂, pf_η₂⟩ ← evalComp η₁ ηs₁
    let ⟨η₃, pf_η₃⟩ ← evalCompNil (α.tensorHom β) η₂
    return ⟨η₃, ← mkEvalTensorHomExpr_nil_cons (← α.e) (← β.e) (← η.e) (← ηs.e)
      (← η₁.e) (← ηs₁.e) (← η₂.e) (← η₃.e) pf_η₁ pf_ηs₁ pf_η₂ pf_η₃⟩
  | .cons α η ηs, .nil β => do
    let ⟨η₁, pf_η₁⟩ ← evalWhiskerRightExpr (← NormalExpr.of η) β.tgt
    let ⟨ηs₁, pf_ηs₁⟩ ← evalWhiskerRightExpr ηs β.tgt
    let ⟨η₂, pf_η₂⟩ ← evalComp η₁ ηs₁
    let ⟨η₃, pf_η₃⟩ ← evalCompNil (α.tensorHom β) η₂
    return ⟨η₃, ← mkEvalTensorHomExprConsNil (← α.e) (← η.e) (← ηs.e) (← β.e)
      (← η₁.e) (← ηs₁.e) (← η₂.e) (← η₃.e) pf_η₁ pf_ηs₁ pf_η₂ pf_η₃⟩
  | .cons α η ηs, .cons β θ θs => do
    let ⟨ηθ, pf_ηθ⟩ ← evalTensorHomAux' η θ
    let ⟨ηθs, pf_ηθs⟩ ← evalTensorHomExpr ηs θs
    let ⟨ηθ₁, pf_ηθ₁⟩ ← evalComp ηθ ηθs
    let ⟨ηθ₂, pf_ηθ₂⟩ ← evalCompNil (α.tensorHom β) ηθ₁
    return ⟨ηθ₂, ← mkEvalTensorHomExprConsCons (← α.e) (← η.e) (← ηs.e) (← β.e) (← θ.e) (← θs.e)
      (← ηθ.e) (← ηθs.e) (← ηθ₁.e) (← ηθ₂.e) pf_ηθ pf_ηθs pf_ηθ₁ pf_ηθ₂⟩

end

/-- Evaluate the expression of a 2-morphism into a normalized form. -/
partial def eval (e : Expr) : MonoidalM Result := do
  let e ← instantiateMVars e
  withTraceNode `monoidal (fun _ => return m!"eval: {e}") do
    if let .some α ← structuralAtom? e then
      return ⟨.nil <| .atom α, ← mkEqRefl (← α.e)⟩
    else
      match (← whnfR e).getAppFnArgs with
      | (``CategoryStruct.id, #[_, _, f]) =>
        return ⟨.nil (.id (← toMor₁ f)), ← mkEqRefl (← mkId f)⟩
      | (``CategoryStruct.comp, #[_, _, _, _, _, η, θ]) =>
        withTraceNode `monoidal (fun _ => return m!"comp") do
        let ⟨η', pf_η⟩ ← eval η
        let ⟨θ', pf_θ⟩ ← eval θ
        let ⟨ηθ, pf⟩ ← evalComp η' θ'
        let result ← mkEvalComp η (← η'.e) θ (← θ'.e) (← ηθ.e) pf_η pf_θ pf
        trace[monoidal] m!"{checkEmoji} {← inferType result}"
        return ⟨ηθ, result⟩
      | (``MonoidalCategoryStruct.whiskerLeft, #[_, _, _, f, _, _, η]) =>
        withTraceNode `monoidal (fun _ => return m!"whiskerLeft") do
          let ⟨η', pf_η⟩ ← eval η
          let ⟨θ, pf_θ⟩ ← evalWhiskerLeftExpr (← toMor₁ f) η'
          let result ← mkEvalWhiskerLeft f η (← η'.e) (← θ.e) pf_η pf_θ
          trace[monoidal] m!"{checkEmoji} {← inferType result}"
          return ⟨θ, result⟩
      | (``MonoidalCategoryStruct.whiskerRight, #[_, _, _, _, _, η, h]) =>
        withTraceNode `monoidal (fun _ => return m!"whiskerRight") do
          let ⟨η', pf_η⟩ ← eval η
          let ⟨θ, pf_θ⟩ ← evalWhiskerRightExpr η' (← toMor₁ h)
          let result ← mkEvalWhiskerRight h η (← η'.e) (← θ.e) pf_η pf_θ
          trace[monoidal] m!"{checkEmoji} {← inferType result}"
          return ⟨θ, result⟩
      | (``monoidalComp, #[_, _, _, _, _, _, _, η, θ]) =>
        withTraceNode `monoidal (fun _ => return m!"monoidalComp") do
          let ⟨η', pf_η⟩ ← eval η
          let α₀ ← structuralOfMonoidalComp e
          let α := NormalExpr.nil α₀
          let ⟨θ', pf_θ⟩ ← eval θ
          let ⟨αθ, pf_θα⟩ ← evalComp α θ'
          let ⟨ηαθ, pf_ηαθ⟩ ← evalComp η' αθ
          let result ← mkEvalMonoidalComp η (← η'.e) (← α₀.e) θ (← θ'.e) (← αθ.e) (← ηαθ.e)
            pf_η pf_θ pf_θα pf_ηαθ
          trace[monoidal] m!"{checkEmoji} {← inferType result}"
          return ⟨ηαθ, result⟩
      | (``MonoidalCategoryStruct.tensorHom, #[_, _, _, _, _, _, _, η, θ]) =>
        withTraceNode `monoidal (fun _ => return m!"tensorHom") do
          let ⟨η', pf_η⟩ ← eval η
          let ⟨θ', pf_θ⟩ ← eval θ
          let ⟨ηθ, pf⟩ ← evalTensorHomExpr η' θ'
          let result ← mkEvalTensorHom η (← η'.e) θ (← θ'.e) (← ηθ.e) pf_η pf_θ pf
          trace[monoidal] m!"{checkEmoji} {← inferType result}"
          return ⟨ηθ, result⟩
      | _ =>
        let result ← mkEvalOf e
        trace[monoidal] m!"{checkEmoji} {← inferType result}"
        return ⟨← NormalExpr.ofExpr e, result⟩

/-- Convert a `NormalExpr` expression into a list of `WhiskerLeftExpr` expressions. -/
def NormalExpr.toList : NormalExpr → List WhiskerLeftExpr
  | NormalExpr.nil _ => []
  | NormalExpr.cons _ η ηs => η :: NormalExpr.toList ηs

/-- `normalize% η` is the normalization of the 2-morphism `η`.
1. The normalized 2-morphism is of the form `α₀ ≫ η₀ ≫ α₁ ≫ η₁ ≫ ... αₘ ≫ ηₘ ≫ αₘ₊₁` where
  each `αᵢ` is a structural 2-morphism (consisting of associators and unitors),
2. each `ηᵢ` is a non-structural 2-morphism of the form `f₁ ◁ ... ◁ fₘ ◁ θ`, and
3. `θ` is of the form `ι ▷ g₁ ▷ ... ▷ gₗ`
-/
elab "normalize% " t:term:51 : term => do
  let e ← Lean.Elab.Term.elabTerm t none
  let some ctx ← mkContext? e
    | throwError m!"{e} is not a morphism"
  MonoidalM.run ctx do (← eval e).expr.e

theorem mk_eq {α : Type _} (a b a' b' : α) (ha : a = a') (hb : b = b') (h : a' = b') : a = b := by
  simp [h, ha, hb]

open Lean Elab Meta Tactic in
/-- Transform an equality between 2-morphisms into the equality between their normalizations. -/
def mkEqOfNormalizedEq (e : Expr) : MetaM Expr := do
  withTraceNode `monoidal (fun _ => return m!"normalizing {e}") do
    let some (_, e₁, e₂) := (← whnfR <| ← instantiateMVars <| e).eq?
      | throwError "monoidal_nf requires an equality goal"
    let some ctx ← mkContext? e₁
      | throwError "the lhs and rhs must be morphisms"
    MonoidalM.run ctx do
      let ⟨e₁', p₁⟩ ← eval e₁
      let ⟨e₂', p₂⟩ ← eval e₂
      mkAppM ``mk_eq #[e₁, e₂, ← e₁'.e, ← e₂'.e, p₁, p₂]

open Lean Elab Tactic in
/-- Normalize the both sides of an equality. -/
elab "monoidal_nf" : tactic => withMainContext do
  let t ← getMainTarget
  let mvarIds ← (← getMainGoal).apply (← mkEqOfNormalizedEq t)
  replaceMainGoal mvarIds

end Mathlib.Tactic.Monoidal
