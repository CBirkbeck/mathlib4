/-
Copyright (c) 2024 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
-- import Mathlib.CategoryTheory.Monoidal.Category
import Mathlib.Tactic.CategoryTheory.Coherence.PureCoherence


import Mathlib.Tactic.CategoryTheory.MonoidalComp
-- import Mathlib.Tactic.CategoryTheory.BicategoryLike

/-!
# Normalization of morphisms in monoidal categories
This file provides a tactic that normalizes morphisms in monoidal categories. This is used in the
string diagram widget given in `Mathlib.Tactic.StringDiagram`.
We say that the morphism `η` in a monoidal category is in normal form if
1. `η` is of the form `α₀ ≫ η₀ ≫ α₁ ≫ η₁ ≫ ... αₘ ≫ ηₘ ≫ αₘ₊₁` where each `αᵢ` is a
  structural 2-morphism (consisting of associators and unitors),
2. each `ηᵢ` is a non-structural 2-morphism of the form `f₁ ◁ ... ◁ fₘ ◁ θ`, and
3. `θ` is of the form `ι ▷ g₁ ▷ ... ▷ gₗ`

Note that the structural morphisms `αᵢ` are not necessarily normalized, as the main purpose
is to get a list of the non-structural morphisms out.

Currently, the primary application of the normalization tactic in mind is drawing string diagrams,
which are graphical representations of morphisms in monoidal categories, in the infoview. When
drawing string diagrams, we often ignore associators and unitors (i.e., drawing morphisms in
strict monoidal categories). On the other hand, in Lean, it is considered difficult to formalize
the concept of strict monoidal categories due to the feature of dependent type theory. The
normalization tactic can remove associators and unitors from the expression, extracting the
necessary data for drawing string diagrams.

The current plan on drawing string diagrams (#10581) is to use
Penrose (https://github.com/penrose) via ProofWidget. However, it should be noted that the
normalization procedure in this file does not rely on specific settings, allowing for broader
application.

Future plans include the following. At least I (Yuma) would like to work on these in the future,
but it might not be immediate. If anyone is interested, I would be happy to discuss.

- Currently (#10581), the string diagrams only do drawing. It would be better they also generate
  proofs. That is, by manipulating the string diagrams displayed in the infoview with a mouse to
  generate proofs. In #10581, the string diagram widget only uses the morphisms generated by the
  normalization tactic and does not use proof terms ensuring that the original morphism and the
  normalized morphism are equal. Proof terms will be necessary for proof generation.

- There is also the possibility of using homotopy.io (https://github.com/homotopy-io), a graphical
  proof assistant for category theory, from Lean. At this point, I have very few ideas regarding
  this approach.

- The normalization tactic allows for an alternative implementation of the coherent tactic.

## Main definitions
- `Tactic.Monoidal.eval`: Given a Lean expression `e` that represents a morphism in a monoidal
category, this function returns a pair of `⟨e', pf⟩` where `e'` is the normalized expression of `e`
and `pf` is a proof that `e = e'`.

-/

open Lean Meta Elab
open CategoryTheory Mathlib.Tactic.BicategoryLike
-- MkClass

namespace Mathlib.Tactic

/-- The domain of a morphism. -/
def srcExpr (η : Expr) : MetaM Expr := do
  match (← whnfR (← inferType η)).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, f, _]) => return f
  | _ => throwError m!"{η} is not a morphism"

def srcExpr? (η : Expr) : MetaM (Option Expr) := do
  try return some (← srcExpr η)
  catch _ => return none

/-- The codomain of a morphism. -/
def tgtExpr (η : Expr) : MetaM Expr := do
  match (← whnfR (← inferType η)).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, _, g]) => return g
  | _ => throwError m!"{η} is not a morphism"

def tgtExpr? (η : Expr) : MetaM (Option Expr) := do
  try return some (← tgtExpr η)
  catch _ => return none

/-- The domain of an isomorphism. -/
def srcExprOfIso (η : Expr) : MetaM Expr := do
  match (← whnfR (← inferType η)).getAppFnArgs with
  | (``Iso, #[_, _, f, _]) => return f
  | _ => throwError m!"{η} is not a morphism"

/-- The codomain of an isomorphism. -/
def tgtExprOfIso (η : Expr) : MetaM Expr := do
  match (← whnfR (← inferType η)).getAppFnArgs with
  | (``Iso, #[_, _, _, g]) => return g
  | _ => throwError m!"{η} is not a morphism"

namespace Monoidal

initialize registerTraceClass `monoidal

/-- The context for evaluating expressions. -/
structure Context where
  /-- The expression for the underlying category. -/
  C : Expr
  instCat : Expr
  instMonoidal : Expr
  level₁ : Level
  level₂ : Level

/-- Populate a `context` object for evaluating `e`. -/
def mkContext (e : Expr) : MetaM Context := do
  match (← whnfR (← inferType e)).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, f, _]) =>
    let C ← inferType f
    let .succ level₁ ← getLevel C |
      throwError m!"faled to get the universe level of {C}"
    let .succ level₂ ← getLevel (← inferType e) |
      throwError m!"failed to get the universe level of {e}"
    let instCat ← synthInstance (mkAppN (.const ``Category [level₂, level₁]) #[C])
    let instMonoidal ← synthInstance
      (mkAppN (.const ``MonoidalCategory [level₂, level₁]) #[C, instCat])
    return ⟨C, instCat, instMonoidal, level₁, level₂⟩
  | _ => throwError m!"{e} is not a morphism"

instance : BicategoryLike.Context Monoidal.Context where
  mkContext := Monoidal.mkContext

/-- The monad for the normalization of 2-morphisms. -/
abbrev MonoidalM := ReaderT Context MetaM

/-- Run a computation in the `MonoidalM` monad. -/
abbrev MonoidalM.run {α : Type} (c : Context) (m : MonoidalM α) : MetaM α :=
  ReaderT.run m c

def getLevels : MonoidalM (List Level) := do
  let ctx ← read
  return [ctx.level₂, ctx.level₁]

def mkMonoidalCategoryStructInst : MonoidalM Expr := do
  let ctx ← read
  return mkAppN (.const ``MonoidalCategory.toMonoidalCategoryStruct (← getLevels))
    #[ctx.C, ctx.instCat, ctx.instMonoidal]

def mkMonoidalCoherenceHom (f g inst : Expr) : MonoidalM Expr := do
  let ctx ← read
  return mkAppN (.const ``MonoidalCoherence.hom (← getLevels))
    #[ctx.C, ctx.instCat, f, g, inst]

def mkIsoHom (η : Expr) : MonoidalM Expr := do
    let ctx ← read
    let f ← srcExprOfIso η
    let g ← tgtExprOfIso η
    return mkAppN (.const ``Iso.hom (← getLevels))
      #[ctx.C, ctx.instCat, f, g, η]

def mkId₁ : MonoidalM Expr := do
    let ctx ← read
    return mkAppN (.const ``MonoidalCategoryStruct.tensorUnit (← getLevels))
      #[ctx.C, ctx.instCat, ← mkMonoidalCategoryStructInst]

def mkComp₁ (f g : Expr) : MonoidalM Expr := do
    let ctx ← read
    return mkAppN (.const ``MonoidalCategoryStruct.tensorObj (← getLevels))
      #[ctx.C, ctx.instCat, ← mkMonoidalCategoryStructInst, f, g]

instance : MonadMor₁ MonoidalM where
  id₁M a := return .id (← mkId₁) a
  comp₁M f g := return .comp (← mkComp₁ f.e g.e) f g

open MonadMor₁

instance : MonadStructuralIso MonoidalM where
  associatorM f g h := do
    let ctx ← read
    let e := mkAppN (.const ``MonoidalCategoryStruct.associator (← getLevels))
      #[ctx.C, ctx.instCat, ← mkMonoidalCategoryStructInst, f.e, g.e, h.e]
    return .associator e f g h
  leftUnitorM f := do
    let ctx ← read
    let e := mkAppN (.const ``MonoidalCategoryStruct.leftUnitor (← getLevels))
      #[ctx.C, ctx.instCat, ← mkMonoidalCategoryStructInst, f.e]
    return .leftUnitor e f
  rightUnitorM f := do
    let ctx ← read
    let e := mkAppN (.const ``MonoidalCategoryStruct.rightUnitor (← getLevels))
      #[ctx.C, ctx.instCat, ← mkMonoidalCategoryStructInst, f.e]
    return .rightUnitor e f
  id₂M f := do
    let ctx ← read
    let e := mkAppN (.const ``Iso.refl (← getLevels)) #[ctx.C, ctx.instCat, f.e]
    return .id e f
  comp₂M η θ := do
    let ctx ← read
    let f ← η.srcM
    let g ← η.tgtM
    let h ← θ.tgtM
    let e := mkAppN (.const ``Iso.trans (← getLevels))
      #[ctx.C, ctx.instCat, f.e, g.e, h.e, η.e, θ.e]
    return .comp e f g h η θ
  whiskerLeftM f η := do
    let ctx ← read
    let g ← η.srcM
    let h ← η.tgtM
    let e := mkAppN (.const ``MonoidalCategory.whiskerLeftIso (← getLevels))
      #[ctx.C, ctx.instCat, ctx.instMonoidal, f.e, g.e, h.e, η.e]
    return .whiskerLeft e f g h η
  whiskerRightM η h := do
    let ctx ← read
    let f ← η.srcM
    let g ← η.tgtM
    let e := mkAppN (.const ``MonoidalCategory.whiskerRightIso (← getLevels))
      #[ctx.C, ctx.instCat, ctx.instMonoidal, f.e, g.e, η.e, h.e]
    return .whiskerRight e f g η h
  horizontalCompM η θ := do
    let ctx ← read
    let f₁ ← η.srcM
    let g₁ ← η.tgtM
    let f₂ ← θ.srcM
    let g₂ ← θ.tgtM
    let e := mkAppN (.const ``tensorIso (← getLevels))
      #[ctx.C, f₁.e, g₁.e, f₂.e, g₂.e, ctx.instCat, ctx.instMonoidal, η.e, θ.e]
    return .horizontalComp e f₁ g₁ f₂ g₂ η θ
  invM η := do
    let ctx ← read
    let f ← η.srcM
    let g ← η.tgtM
    let e := mkAppN (.const ``Iso.symm (← getLevels)) #[ctx.C, ctx.instCat, f.e, g.e, η.e]
    return .inv e f g η

section

open MonoidalCategory

universe v u

variable {C : Type u} [Category.{v} C] [MonoidalCategory C]

local infixr:81 " ◁ " => MonoidalCategory.whiskerLeftIso
local infixl:81 " ▷ " => MonoidalCategory.whiskerRightIso

abbrev normalizeIsoComp {p f g pf pfg : C} (η_f : p ⊗ f ≅ pf) (η_g : pf ⊗ g ≅ pfg) :=
  (α_ _ _ _).symm ≪≫ whiskerRightIso η_f g ≪≫ η_g

theorem naturality_associator {p f g h pf pfg pfgh : C}
    (η_f : (p ⊗ f) ≅ pf) (η_g : (pf ⊗ g) ≅ pfg) (η_h : pfg ⊗ h ≅ pfgh) :
    p ◁ (α_ f g h) ≪≫ normalizeIsoComp η_f (normalizeIsoComp η_g η_h) =
    normalizeIsoComp (normalizeIsoComp η_f η_g) η_h :=
  Iso.ext (by simp)

theorem naturality_leftUnitor {p f pf : C} (η_f : p ⊗ f ≅ pf) :
    p ◁ (λ_ f) ≪≫ η_f = normalizeIsoComp (ρ_ p) η_f :=
  Iso.ext (by simp)

theorem naturality_rightUnitor {p f pf : C} (η_f : p ⊗ f ≅ pf) :
    p ◁ (ρ_ f) ≪≫ η_f = normalizeIsoComp η_f (ρ_ pf) :=
  Iso.ext (by simp)

theorem naturality_id {p f pf : C} (η_f : p ⊗ f ≅ pf) :
    p ◁ Iso.refl f ≪≫ η_f = η_f := by
  simp

theorem naturality_comp {p f g h pf : C} {η : f ≅ g} {θ : g ≅ h}
    (η_f : (p ⊗ f) ≅ pf) (η_g : (p ⊗ g) ≅ pf) (η_h : p ⊗ h ≅ pf)
    (ih_η : p ◁ η ≪≫ η_g = η_f) (ih_θ : p ◁ θ ≪≫ η_h = η_g) :
    p ◁ (η ≪≫ θ) ≪≫ η_h = η_f := by
  simp_all

theorem naturality_whiskerLeft {p f g h pf pfg : C} {η : g ≅ h}
    (η_f : (p ⊗ f) ≅ pf) (η_fg : (pf ⊗ g) ≅ pfg) (η_fh : (pf ⊗ h) ≅ pfg)
    (ih_η : pf ◁ η ≪≫ η_fh = η_fg) :
    p ◁ (f ◁ η) ≪≫ normalizeIsoComp η_f η_fh = normalizeIsoComp η_f η_fg := by
  rw [← ih_η]
  apply Iso.ext
  simp [← whisker_exchange_assoc]

theorem naturality_whiskerRight {p f g h pf pfh : C} {η : f ≅ g}
    (η_f : (p ⊗ f) ≅ pf) (η_g : (p ⊗ g) ≅ pf) (η_fh : (pf ⊗ h) ≅ pfh)
    (ih_η : p ◁ η ≪≫ η_g = η_f) :
    p ◁ (η ▷ h) ≪≫ normalizeIsoComp η_g η_fh = normalizeIsoComp η_f η_fh := by
  rw [← ih_η]
  apply Iso.ext
  simp

theorem naturality_tensorHom {p f₁ g₁ f₂ g₂ pf₁ pf₁f₂ : C} {η : f₁ ≅ g₁} {θ : f₂ ≅ g₂}
    (η_f₁ : p ⊗ f₁ ≅ pf₁) (η_g₁ : p ⊗ g₁ ≅ pf₁) (η_f₂ : pf₁ ⊗ f₂ ≅ pf₁f₂) (η_g₂ : pf₁ ⊗ g₂ ≅ pf₁f₂)
    (ih_η : p ◁ η ≪≫ η_g₁ = η_f₁)
    (ih_θ : pf₁ ◁ θ ≪≫ η_g₂ = η_f₂) :
    p ◁ (η ⊗ θ) ≪≫ normalizeIsoComp η_g₁ η_g₂ = normalizeIsoComp η_f₁ η_f₂ := by
  rw [tensorIso_def]
  apply naturality_comp
  · apply naturality_whiskerRight _ _ _ ih_η
  · apply naturality_whiskerLeft _ _ _ ih_θ

theorem naturality_inv {p f g pf : C} {η : f ≅ g}
    (η_f : p ⊗ f ≅ pf) (η_g : p ⊗ g ≅ pf) (ih : p ◁ η ≪≫ η_g = η_f) :
    p ◁ η.symm ≪≫ η_f = η_g := by
  rw [← ih]
  apply Iso.ext
  simp

instance : MonadNormalizeNaturality MonoidalM where
  mkNaturalityAssociator p pf pfg pfgh f g h η_f η_g η_h := do
    let ctx ← read
    return mkAppN (.const ``naturality_associator (← getLevels))
      #[ctx.C, ctx.instCat, ctx.instMonoidal, p.e.e, f.e, g.e, h.e,
        pf.e.e, pfg.e.e, pfgh.e.e,
        η_f.e, η_g.e, η_h.e]
  mkNaturalityLeftUnitor p pf f η_f := do
    let ctx ← read
    return mkAppN (.const ``naturality_leftUnitor (← getLevels))
      #[ctx.C, ctx.instCat, ctx.instMonoidal, p.e.e, f.e, pf.e.e, η_f.e]
  mkNaturalityRightUnitor p pf f η_f := do
    let ctx ← read
    return mkAppN (.const ``naturality_rightUnitor (← getLevels))
      #[ctx.C, ctx.instCat, ctx.instMonoidal, p.e.e, f.e, pf.e.e, η_f.e]
  mkNaturalityId p pf f η_f := do
    let ctx ← read
    return mkAppN (.const ``naturality_id (← getLevels))
      #[ctx.C, ctx.instCat, ctx.instMonoidal, p.e.e, f.e, pf.e.e, η_f.e]
  mkNaturalityComp p pf f g h η θ η_f η_g η_h ih_η ih_θ := do
    let ctx ← read
    return mkAppN (.const ``naturality_comp (← getLevels))
      #[ctx.C, ctx.instCat, ctx.instMonoidal, p.e.e, f.e, g.e, h.e, pf.e.e, η.e, θ.e,
        η_f.e, η_g.e, η_h.e, ih_η, ih_θ]
  mkNaturalityWhiskerLeft p pf pfg f g h η η_f η_fg η_fh ih_η := do
    let ctx ← read
    return mkAppN (.const ``naturality_whiskerLeft (← getLevels))
      #[ctx.C, ctx.instCat, ctx.instMonoidal, p.e.e, f.e, g.e, h.e,
        pf.e.e, pfg.e.e, η.e, η_f.e, η_fg.e, η_fh.e, ih_η]
  mkNaturalityWhiskerRight p pf pfh f g h η η_f η_g η_fh ih_η := do
    let ctx ← read
    return mkAppN (.const ``naturality_whiskerRight (← getLevels))
      #[ctx.C, ctx.instCat, ctx.instMonoidal, p.e.e, f.e, g.e, h.e,
        pf.e.e, pfh.e.e, η.e, η_f.e, η_g.e, η_fh.e, ih_η]
  mkNaturalityHorizontalComp p pf₁ pf₁f₂ f₁ g₁ f₂ g₂ η θ η_f₁ η_g₁ η_f₂ η_g₂ ih_η ih_θ := do
    let ctx ← read
    return mkAppN (.const ``naturality_tensorHom (← getLevels))
      #[ctx.C, ctx.instCat, ctx.instMonoidal, p.e.e, f₁.e, g₁.e, f₂.e, g₂.e,
        pf₁.e.e, pf₁f₂.e.e, η.e, θ.e, η_f₁.e, η_g₁.e, η_f₂.e, η_g₂.e, ih_η, ih_θ]
  mkNaturalityInv p pf f g η η_f η_g ih := do
    let ctx ← read
    return mkAppN (.const ``naturality_inv (← getLevels))
      #[ctx.C, ctx.instCat, ctx.instMonoidal, p.e.e,
        f.e, g.e, pf.e.e, η.e, η_f.e, η_g.e, ih]

theorem of_normalize_eq {f g f' : C} {η θ : f ≅ g} (η_f : 𝟙_ C ⊗ f ≅ f') (η_g : 𝟙_ C ⊗ g ≅ f')
    (h_η : 𝟙_ C ◁ η ≪≫ η_g = η_f)
    (h_θ : 𝟙_ C ◁ θ ≪≫ η_g = η_f) : η = θ := by
  apply Iso.ext
  calc
    η.hom = (λ_ f).inv ≫ η_f.hom ≫ η_g.inv ≫ (λ_ g).hom := by
      simp [← reassoc_of% (congrArg Iso.hom h_η)]
    _ = θ.hom := by
      simp [← reassoc_of% (congrArg Iso.hom h_θ)]

end

-- def eval₁ (e : Expr) : MonoidalM Mor₁ := sorry

def Atom₁.mkM (e : Expr) : MetaM Atom₁ := do
  let src ← srcExpr? e
  let tgt ← tgtExpr? e
  return ⟨e, ⟨src⟩, ⟨tgt⟩⟩

def isId₁? (e : Expr) : MonoidalM (Option Obj) := do
  let unit ← id₁M ⟨none⟩
  if ← withDefault <| isDefEq e unit.e then
    return .some ⟨none⟩
  else
    return none

def isComp₁? (e : Expr) : MonoidalM (Option (Mor₁ × Mor₁)) := do
  let ctx ← read
  let f ← mkFreshExprMVar ctx.C
  let g ← mkFreshExprMVar ctx.C
  let fg ← mkComp₁ f g
  if ← withDefault <| isDefEq e fg then
    let f ← instantiateMVars f
    let g ← instantiateMVars g
    return .some ((.of ⟨f, ⟨none⟩, ⟨none⟩⟩ : Mor₁), (.of ⟨g, ⟨none⟩, ⟨none⟩⟩ : Mor₁))
  else
    return none

/-- Construct a `Mor₁` expression from a Lean expression. -/
partial def eval₁ (e : Expr) : MonoidalM Mor₁ := do
  if let some a ← isId₁? e then
    MonadMor₁.id₁M a
  else if let some (f, g) ← isComp₁? e then
    MonadMor₁.comp₁M (← eval₁ f.e) (← eval₁ g.e)
  else
    return Mor₁.of (← Atom₁.mkM e)

instance : MkMor₁ MonoidalM where
  ofExpr := eval₁

open MonadStructuralIso

section

open MonoidalCategory

universe v u
variable {C : Type u} [Category.{v} C] [MonoidalCategory C]

theorem structuralIso_inv {f g : C} (η η' : f ≅ g) (ih : η'.hom = η.hom) :
    η'.symm.hom = η.inv :=
  (Iso.inv_eq_inv η' η).mpr ih

theorem structuralIsoOfExpr_comp {f g h : C}
    (η : f ⟶ g) (η' : f ≅ g) (ih_η : η'.hom = η)
    (θ : g ⟶ h) (θ' : g ≅ h) (ih_θ : θ'.hom = θ) :
    (η' ≪≫ θ').hom  = η ≫ θ := by
  simp [ih_η, ih_θ]

theorem structuralIsoOfExpr_whiskerLeft {f g h : C}
    (η : g ⟶ h) (η' : g ≅ h) (ih_η : η'.hom = η)  :
    (whiskerLeftIso f η').hom = f ◁ η := by
  simp [ih_η]

theorem structuralIsoOfExpr_whiskerRight {f g h : C}
    (η : f ⟶ g) (η' : f ≅ g) (ih_η : η'.hom = η)  :
    (whiskerRightIso η' h).hom = η ▷ h := by
  simp [ih_η]

theorem structuralIsoOfExpr_horizontalComp {f₁ g₁ f₂ g₂ : C}
    (η : f₁ ⟶ g₁) (η' : f₁ ≅ g₁) (ih_η : η'.hom = η)
    (θ : f₂ ⟶ g₂) (θ' : f₂ ≅ g₂) (ih_θ : θ'.hom = θ) :
    (η' ⊗ θ').hom = η ⊗ θ := by
  simp [ih_η, ih_θ]

theorem StructuralIsoOfExpr_monoidalComp {f g h i : C} [MonoidalCoherence g h]
    (η : f ⟶ g) (η' : f ≅ g) (ih_η : η'.hom = η) (θ : h ⟶ i) (θ' : h ≅ i) (ih_θ : θ'.hom = θ)
    (α : g ≅ h) (ih_α : α.hom = (⊗𝟙 : g ⟶ h)) :
    (η' ≪≫ α ≪≫ θ').hom = η ⊗≫ θ := by
  simp [ih_η, ih_θ, ih_α, monoidalComp]

end

def structuralIsoOfExprIso (e : Expr) : MonoidalM (StructuralIso × Expr) := do
  match (← whnfR e).getAppFnArgs with
  | (``MonoidalCategoryStruct.associator, #[_, _, _, f, g, h]) =>
    let α ← associatorM (← eval₁ f) (← eval₁ g) (← eval₁ h)
    return ⟨α, ← mkEqRefl (← mkIsoHom e)⟩
  | (``MonoidalCategoryStruct.leftUnitor, #[_, _, _, f]) =>
    let α ← leftUnitorM (← eval₁ f)
    return ⟨α, ← mkEqRefl (← mkIsoHom e)⟩
  | (``MonoidalCategoryStruct.rightUnitor, #[_, _, _, f]) =>
    let α ← rightUnitorM (← eval₁ f)
    return ⟨α, ← mkEqRefl (← mkIsoHom e)⟩
  -- TODO: add `Iso.trans` etc. if they will be useful.
  | _ => throwError "could't find a structural 2-morphism"

/-- Construct a `StructuralAtom` expression from a Lean expression. -/
partial def structuralIsoOfExpr (e : Expr) : MonoidalM (StructuralIso × Expr) := do
  let ctx ← read
  match ← whnfR e with
  -- whnfR version of `Iso.hom η`
  | .proj ``Iso 0 η => structuralIsoOfExprIso η
  -- whnfR version of `Iso.inv η`
  | .proj ``Iso 1 η =>
    let ⟨η', ih⟩ ← structuralIsoOfExprIso η
    let pf := mkAppN (.const ``structuralIso_inv (← getLevels))
      #[ctx.C, ctx.instCat, ← srcExprOfIso η, ← tgtExprOfIso η, η, η'.e, ih]
    return ⟨← invM η', pf⟩
  | _ =>
    match (← whnfR e).getAppFnArgs with
    | (``MonoidalCoherence.hom, #[_, _, _, _, inst]) =>
      match (← whnfI inst).getAppFnArgs with
      | (``MonoidalCoherence.mk, #[_, _, _, _, α, _]) =>
        structuralIsoOfExpr α
      | _ => throwError "could't find a structural 2-morphism"
    | (``CategoryStruct.id, #[_, _, f]) =>
      let pf := mkAppN (.const ``Iso.refl_hom (← getLevels)) #[ctx.C, ctx.instCat, f]
      return ⟨← id₂M (← eval₁ f), pf⟩
    | (``CategoryStruct.comp, #[_, _, f, g, h, η, θ]) =>
      let (η', pf_η) ← structuralIsoOfExpr η
      let (θ', pf_θ) ← structuralIsoOfExpr θ
      let α ← comp₂M η' θ'
      let pf := mkAppN (.const ``structuralIsoOfExpr_comp (← getLevels))
        #[ctx.C, ctx.instCat, f, g, h, η, η'.e, pf_η, θ, θ'.e, pf_θ]
      return ⟨α, pf⟩
    | (``MonoidalCategoryStruct.whiskerLeft, #[_, _, _, f, g, h, η]) =>
      let (η', pf) ← structuralIsoOfExpr η
      let pf := mkAppN (.const ``structuralIsoOfExpr_whiskerLeft (← getLevels))
        #[ctx.C, ctx.instCat, ctx.instMonoidal, f, g, h, η, η'.e, pf]
      return ⟨← whiskerLeftM (← eval₁ f) η', pf⟩
    | (``MonoidalCategoryStruct.whiskerRight, #[_, _, _, f, g, η, h]) =>
      let (η', pf) ← structuralIsoOfExpr η
      let pf := mkAppN (.const ``structuralIsoOfExpr_whiskerRight (← getLevels))
        #[ctx.C, ctx.instCat, ctx.instMonoidal, f, g, h, η, η'.e, pf]
      return ⟨← whiskerRightM η' (← eval₁ h), pf⟩
    | (``MonoidalCategoryStruct.tensorHom, #[_, _, _, f₁, g₁, f₂, g₂, η, θ]) =>
      let (η', pf_η) ← structuralIsoOfExpr η
      let (θ', pf_θ) ← structuralIsoOfExpr θ
      let pf := mkAppN (.const ``structuralIsoOfExpr_horizontalComp (← getLevels))
        #[ctx.C, ctx.instCat, ctx.instMonoidal, f₁, g₁, f₂, g₂, η, η'.e, pf_η, θ, θ'.e, pf_θ]
      return ⟨← horizontalCompM η' θ', pf⟩
    | (``monoidalComp, #[_, _, f, g, h, i, inst, η, θ]) =>
      let (η', pf_η) ← structuralIsoOfExpr η
      let (θ', pf_θ) ← structuralIsoOfExpr θ
      let α ← mkMonoidalCoherenceHom f g inst
      let ⟨α', pf_α⟩ ← structuralIsoOfExpr α
      let pf := mkAppN (.const ``StructuralIsoOfExpr_monoidalComp (← getLevels))
        #[ctx.C, ctx.instCat, f, g, h, i, inst, η, η'.e, pf_η, θ, θ'.e, pf_θ, α'.e, pf_α]
      return ⟨← comp₂M η' (← comp₂M α' θ'), pf⟩
    | _ => throwError "could't find a structural 2-morphism"

instance : BicategoryLike.MkStructuralIso MonoidalM where
  ofExpr := structuralIsoOfExpr

universe v u
variable {C : Type u} [Category.{v} C] [MonoidalCategory C]

open MonoidalCategory

theorem mk_eq_of_normalized_eq {f g f' : C} (η θ : f ⟶ g) (η' θ' : f ≅ g)
    (η_f : 𝟙_ C ⊗ f ≅ f') (η_g : 𝟙_ C ⊗ g ≅ f')
    (Hη : η'.hom = η) (Hθ : θ'.hom = θ)
    (Hη' : whiskerLeftIso (𝟙_ C) η' ≪≫ η_g = η_f)
    (Hθ' : whiskerLeftIso (𝟙_ C) θ' ≪≫ η_g = η_f) : η = θ :=
  calc
    η = η'.hom := Hη.symm
    _ = (λ_ f).inv ≫ η_f.hom ≫ η_g.inv ≫ (λ_ g).hom := by
      simp [← reassoc_of% (congrArg Iso.hom Hη')]
    _ = θ'.hom := by
      simp [← reassoc_of% (congrArg Iso.hom Hθ')]
    _ = θ := Hθ

open Elab.Tactic

def pureCoherence (mvarId : MVarId) : MetaM (List MVarId) :=
  BicategoryLike.pureCoherence `monoidal Monoidal.Context (mkAppM ``mk_eq_of_normalized_eq) mvarId

elab "monoidal_coherence" : tactic => withMainContext do
  replaceMainGoal <| ← Monoidal.pureCoherence <| ← getMainGoal

end Mathlib.Tactic.Monoidal
