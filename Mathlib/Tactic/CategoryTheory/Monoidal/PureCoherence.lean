/-
Copyright (c) 2024 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
-- import Mathlib.CategoryTheory.Monoidal.Category
import Mathlib.Tactic.CategoryTheory.Coherence.PureCoherence


import Mathlib.Tactic.CategoryTheory.MonoidalComp
-- import Mathlib.Tactic.CategoryTheory.BicategoryLike

/-!
# Normalization of morphisms in monoidal categories
This file provides a tactic that normalizes morphisms in monoidal categories. This is used in the
string diagram widget given in `Mathlib.Tactic.StringDiagram`.
We say that the morphism `Œ∑` in a monoidal category is in normal form if
1. `Œ∑` is of the form `Œ±‚ÇÄ ‚â´ Œ∑‚ÇÄ ‚â´ Œ±‚ÇÅ ‚â´ Œ∑‚ÇÅ ‚â´ ... Œ±‚Çò ‚â´ Œ∑‚Çò ‚â´ Œ±‚Çò‚Çä‚ÇÅ` where each `Œ±·µ¢` is a
  structural 2-morphism (consisting of associators and unitors),
2. each `Œ∑·µ¢` is a non-structural 2-morphism of the form `f‚ÇÅ ‚óÅ ... ‚óÅ f‚Çò ‚óÅ Œ∏`, and
3. `Œ∏` is of the form `Œπ ‚ñ∑ g‚ÇÅ ‚ñ∑ ... ‚ñ∑ g‚Çó`

Note that the structural morphisms `Œ±·µ¢` are not necessarily normalized, as the main purpose
is to get a list of the non-structural morphisms out.

Currently, the primary application of the normalization tactic in mind is drawing string diagrams,
which are graphical representations of morphisms in monoidal categories, in the infoview. When
drawing string diagrams, we often ignore associators and unitors (i.e., drawing morphisms in
strict monoidal categories). On the other hand, in Lean, it is considered difficult to formalize
the concept of strict monoidal categories due to the feature of dependent type theory. The
normalization tactic can remove associators and unitors from the expression, extracting the
necessary data for drawing string diagrams.

The current plan on drawing string diagrams (#10581) is to use
Penrose (https://github.com/penrose) via ProofWidget. However, it should be noted that the
normalization procedure in this file does not rely on specific settings, allowing for broader
application.

Future plans include the following. At least I (Yuma) would like to work on these in the future,
but it might not be immediate. If anyone is interested, I would be happy to discuss.

- Currently (#10581), the string diagrams only do drawing. It would be better they also generate
  proofs. That is, by manipulating the string diagrams displayed in the infoview with a mouse to
  generate proofs. In #10581, the string diagram widget only uses the morphisms generated by the
  normalization tactic and does not use proof terms ensuring that the original morphism and the
  normalized morphism are equal. Proof terms will be necessary for proof generation.

- There is also the possibility of using homotopy.io (https://github.com/homotopy-io), a graphical
  proof assistant for category theory, from Lean. At this point, I have very few ideas regarding
  this approach.

- The normalization tactic allows for an alternative implementation of the coherent tactic.

## Main definitions
- `Tactic.Monoidal.eval`: Given a Lean expression `e` that represents a morphism in a monoidal
category, this function returns a pair of `‚ü®e', pf‚ü©` where `e'` is the normalized expression of `e`
and `pf` is a proof that `e = e'`.

-/

open Lean Meta Elab
open CategoryTheory Mathlib.Tactic.BicategoryLike
-- MkClass

namespace Mathlib.Tactic

namespace Monoidal

/-- The domain of a morphism. -/
def srcExpr (Œ∑ : Expr) : MetaM Expr := do
  match (‚Üê whnfR (‚Üê inferType Œ∑)).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, f, _]) => return f
  | _ => throwError m!"{Œ∑} is not a morphism"

def srcExpr? (Œ∑ : Expr) : MetaM (Option Expr) := do
  try return some (‚Üê srcExpr Œ∑)
  catch _ => return none

/-- The codomain of a morphism. -/
def tgtExpr (Œ∑ : Expr) : MetaM Expr := do
  match (‚Üê whnfR (‚Üê inferType Œ∑)).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, _, g]) => return g
  | _ => throwError m!"{Œ∑} is not a morphism"

def tgtExpr? (Œ∑ : Expr) : MetaM (Option Expr) := do
  try return some (‚Üê tgtExpr Œ∑)
  catch _ => return none

/-- The domain of an isomorphism. -/
def srcExprOfIso (Œ∑ : Expr) : MetaM Expr := do
  match (‚Üê whnfR (‚Üê inferType Œ∑)).getAppFnArgs with
  | (``Iso, #[_, _, f, _]) => return f
  | _ => throwError m!"{Œ∑} is not a morphism"

/-- The codomain of an isomorphism. -/
def tgtExprOfIso (Œ∑ : Expr) : MetaM Expr := do
  match (‚Üê whnfR (‚Üê inferType Œ∑)).getAppFnArgs with
  | (``Iso, #[_, _, _, g]) => return g
  | _ => throwError m!"{Œ∑} is not a morphism"

initialize registerTraceClass `monoidal

/-- The context for evaluating expressions. -/
structure Context where
  /-- The expression for the underlying category. -/
  C : Expr
  instCat : Expr
  instMonoidal : Option Expr
  level‚ÇÅ : Level
  level‚ÇÇ : Level

/-- Populate a `context` object for evaluating `e`. -/
def mkContext (e : Expr) : MetaM Context := do
  let e ‚Üê instantiateMVars e
  let e ‚Üê (match (‚Üê whnfR e).eq? with
    | some (_, lhs, _) => return lhs
    | none => return e)
  let type ‚Üê instantiateMVars <| ‚Üê inferType e
  match (‚Üê whnfR type).getAppFnArgs with
  | (``Quiver.Hom, #[_, _, f, _]) =>
    let C ‚Üê instantiateMVars <| ‚Üê inferType f
    let .succ level‚ÇÅ ‚Üê getLevel C |
      throwError m!"faled to get the universe level of {C}"
    let .succ level‚ÇÇ ‚Üê getLevel type |
      throwError m!"failed to get the universe level of {type}"
    let instCat ‚Üê synthInstance (mkAppN (.const ``Category [level‚ÇÇ, level‚ÇÅ]) #[C])
    let instMonoidal ‚Üê synthInstance?
      (mkAppN (.const ``MonoidalCategory [level‚ÇÇ, level‚ÇÅ]) #[C, instCat])
    return ‚ü®C, instCat, instMonoidal, level‚ÇÅ, level‚ÇÇ‚ü©
  | _ => throwError m!"{e} is not a morphism"

instance : BicategoryLike.Context Monoidal.Context where
  mkContext := Monoidal.mkContext

/-- The monad for the normalization of 2-morphisms. -/
abbrev MonoidalM := CoherenceM Context

def getLevels : MonoidalM (List Level) := do
  let ctx ‚Üê read
  return [ctx.level‚ÇÇ, ctx.level‚ÇÅ]

def mkCategoryStructInst : MonoidalM Expr := do
  let ctx ‚Üê read
  return mkAppN (.const ``Category.toCategoryStruct (‚Üê getLevels)) #[ctx.C, ctx.instCat]

def mkMonoidalCategoryInst : MonoidalM Expr := do
  let ctx ‚Üê read
  match ctx.instMonoidal with
  | some inst => return inst
  | none =>
    trace[monoidal] "synthesizing monoidal category instance"
    throwError m!"failed to find monoidal category instance on {ctx.C}"

def mkMonoidalCategoryStructInst : MonoidalM Expr := do
  let ctx ‚Üê read
  return mkAppN (.const ``MonoidalCategory.toMonoidalCategoryStruct (‚Üê getLevels))
    #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryInst]

def mkMonoidalCoherenceHom (f g inst : Expr) : MonoidalM Expr := do
  let ctx ‚Üê read
  return mkAppN (.const ``MonoidalCoherence.hom (‚Üê getLevels))
    #[ctx.C, ctx.instCat, f, g, inst]

def mkMonoidalCoherenceIso (f g inst : Expr) : MonoidalM Expr := do
  let ctx ‚Üê read
  return mkAppN (.const ``MonoidalCoherence.iso (‚Üê getLevels))
    #[ctx.C, ctx.instCat, f, g, inst]

def mkIsoHom (Œ∑ : Expr) : MonoidalM Expr := do
    let ctx ‚Üê read
    let f ‚Üê srcExprOfIso Œ∑
    let g ‚Üê tgtExprOfIso Œ∑
    return mkAppN (.const ``Iso.hom (‚Üê getLevels))
      #[ctx.C, ctx.instCat, f, g, Œ∑]

def mkId‚ÇÅ : MonoidalM Expr := do
    let ctx ‚Üê read
    return mkAppN (.const ``MonoidalCategoryStruct.tensorUnit (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryStructInst]

def mkComp‚ÇÅ (f g : Expr) : MonoidalM Expr := do
    let ctx ‚Üê read
    return mkAppN (.const ``MonoidalCategoryStruct.tensorObj (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryStructInst, f, g]

instance : MonadMor‚ÇÅ MonoidalM where
  id‚ÇÅM a := return .id (‚Üê mkId‚ÇÅ) a
  comp‚ÇÅM f g := return .comp (‚Üê mkComp‚ÇÅ f.e g.e) f g

section

open MonoidalCategory

universe v u
variable {C : Type u} [Category.{v} C] [MonoidalCategory C]

theorem structuralIso_inv {f g : C} (Œ∑ : f ‚âÖ g) :
    Œ∑.symm.hom = Œ∑.inv := by
  simp only [Iso.symm_hom]

theorem structuralIsoOfExpr_comp {f g h : C}
    (Œ∑ : f ‚ü∂ g) (Œ∑' : f ‚âÖ g) (ih_Œ∑ : Œ∑'.hom = Œ∑)
    (Œ∏ : g ‚ü∂ h) (Œ∏' : g ‚âÖ h) (ih_Œ∏ : Œ∏'.hom = Œ∏) :
    (Œ∑' ‚â™‚â´ Œ∏').hom  = Œ∑ ‚â´ Œ∏ := by
  simp [ih_Œ∑, ih_Œ∏]

theorem structuralIsoOfExpr_whiskerLeft {f g h : C}
    (Œ∑ : g ‚ü∂ h) (Œ∑' : g ‚âÖ h) (ih_Œ∑ : Œ∑'.hom = Œ∑)  :
    (whiskerLeftIso f Œ∑').hom = f ‚óÅ Œ∑ := by
  simp [ih_Œ∑]

theorem structuralIsoOfExpr_whiskerRight {f g h : C}
    (Œ∑ : f ‚ü∂ g) (Œ∑' : f ‚âÖ g) (ih_Œ∑ : Œ∑'.hom = Œ∑)  :
    (whiskerRightIso Œ∑' h).hom = Œ∑ ‚ñ∑ h := by
  simp [ih_Œ∑]

theorem structuralIsoOfExpr_horizontalComp {f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ : C}
    (Œ∑ : f‚ÇÅ ‚ü∂ g‚ÇÅ) (Œ∑' : f‚ÇÅ ‚âÖ g‚ÇÅ) (ih_Œ∑ : Œ∑'.hom = Œ∑)
    (Œ∏ : f‚ÇÇ ‚ü∂ g‚ÇÇ) (Œ∏' : f‚ÇÇ ‚âÖ g‚ÇÇ) (ih_Œ∏ : Œ∏'.hom = Œ∏) :
    (Œ∑' ‚äó Œ∏').hom = Œ∑ ‚äó Œ∏ := by
  simp [ih_Œ∑, ih_Œ∏]

theorem StructuralIsoOfExpr_monoidalComp {f g h i : C} [MonoidalCoherence g h]
    (Œ∑ : f ‚ü∂ g) (Œ∑' : f ‚âÖ g) (ih_Œ∑ : Œ∑'.hom = Œ∑) (Œ∏ : h ‚ü∂ i) (Œ∏' : h ‚âÖ i) (ih_Œ∏ : Œ∏'.hom = Œ∏) :
    -- (Œ± : g ‚âÖ h) (ih_Œ± : Œ±.hom = (‚äóùüô : g ‚ü∂ h)) :
    (monoidalIsoComp Œ∑' Œ∏').hom = Œ∑ ‚äó‚â´ Œ∏ := by
  simp [ih_Œ∑, ih_Œ∏, monoidalIsoComp, monoidalComp]

end

open MonadMor‚ÇÅ

instance : MonadStructuralIsoAtom MonoidalM where
  associatorM f g h := do
    let ctx ‚Üê read
    let e := mkAppN (.const ``MonoidalCategoryStruct.associator (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryStructInst, f.e, g.e, h.e]
    return .associator e f g h
  leftUnitorM f := do
    let ctx ‚Üê read
    let e := mkAppN (.const ``MonoidalCategoryStruct.leftUnitor (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryStructInst, f.e]
    return .leftUnitor e f
  rightUnitorM f := do
    let ctx ‚Üê read
    let e := mkAppN (.const ``MonoidalCategoryStruct.rightUnitor (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryStructInst, f.e]
    return .rightUnitor e f
  id‚ÇÇM f := do
    let ctx ‚Üê read
    let e := mkAppN (.const ``Iso.refl (‚Üê getLevels)) #[ctx.C, ctx.instCat, f.e]
    return .id e f
  coherenceHomM f g inst := do
    let ctx ‚Üê read
    match (‚Üê whnfI inst).getAppFnArgs with
    | (``MonoidalCoherence.mk, #[_, _, _, _, Œ±]) =>
      let e := mkAppN (.const ``MonoidalCoherence.iso (‚Üê getLevels))
        #[ctx.C, ctx.instCat, f.e, g.e, inst]
      return ‚ü®e, f, g, inst, Œ±‚ü©
    | _ => throwError m!"failed to unfold {inst}"

instance : MonadMor‚ÇÇIso MonoidalM where
  comp‚ÇÇM Œ∑ Œ∏ := do
    let ctx ‚Üê read
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let h ‚Üê Œ∏.tgtM
    let e := mkAppN (.const ``Iso.trans (‚Üê getLevels))
      #[ctx.C, ctx.instCat, f.e, g.e, h.e, Œ∑.e, Œ∏.e]
    return .comp e f g h Œ∑ Œ∏
  whiskerLeftM f Œ∑ := do
    let ctx ‚Üê read
    let g ‚Üê Œ∑.srcM
    let h ‚Üê Œ∑.tgtM
    let e := mkAppN (.const ``MonoidalCategory.whiskerLeftIso (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryInst, f.e, g.e, h.e, Œ∑.e]
    return .whiskerLeft e f g h Œ∑
  whiskerRightM Œ∑ h := do
    let ctx ‚Üê read
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let e := mkAppN (.const ``MonoidalCategory.whiskerRightIso (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryInst, f.e, g.e, Œ∑.e, h.e]
    return .whiskerRight e f g Œ∑ h
  horizontalCompM Œ∑ Œ∏ := do
    let ctx ‚Üê read
    let f‚ÇÅ ‚Üê Œ∑.srcM
    let g‚ÇÅ ‚Üê Œ∑.tgtM
    let f‚ÇÇ ‚Üê Œ∏.srcM
    let g‚ÇÇ ‚Üê Œ∏.tgtM
    let e := mkAppN (.const ``tensorIso (‚Üê getLevels))
      #[ctx.C, f‚ÇÅ.e, g‚ÇÅ.e, f‚ÇÇ.e, g‚ÇÇ.e, ctx.instCat, ‚Üê mkMonoidalCategoryInst, Œ∑.e, Œ∏.e]
    return .horizontalComp e f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ Œ∑ Œ∏
  symmM Œ∑ := do
    let ctx ‚Üê read
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let e := mkAppN (.const ``Iso.symm (‚Üê getLevels)) #[ctx.C, ctx.instCat, f.e, g.e, Œ∑.e]
    return .inv e f g Œ∑
  coherenceCompM Œ± Œ∑ Œ∏ := do
    let ctx ‚Üê read
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let h ‚Üê Œ∏.srcM
    let i ‚Üê Œ∏.tgtM
    let e := mkAppN (.const ``monoidalIsoComp (‚Üê getLevels))
      #[ctx.C, ctx.instCat, f.e, g.e, h.e, i.e, Œ±.inst, Œ∑.e, Œ∏.e]
    return .coherenceComp e f g h i Œ± Œ∑ Œ∏

instance : MonadMor‚ÇÇ MonoidalM where
  homM Œ∑ := do
    let ctx ‚Üê read
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let e := mkAppN (.const ``Iso.hom (‚Üê getLevels))
      #[ctx.C, ctx.instCat, f.e, g.e, Œ∑.e]
    return .isoHom e ‚ü®Œ∑, ‚Üê mkEqRefl e‚ü© Œ∑
  homAtomM Œ∑ := do
    let ctx ‚Üê read
    let f := Œ∑.src
    let g := Œ∑.tgt
    let e := mkAppN (.const ``Iso.hom (‚Üê getLevels))
      #[ctx.C, ctx.instCat, f.e, g.e, Œ∑.e]
    return .mk e f g
  invM Œ∑ := do
    let ctx ‚Üê read
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let e := mkAppN (.const ``Iso.inv (‚Üê getLevels)) #[ctx.C, ctx.instCat, f.e, g.e, Œ∑.e]
    let Œ∑Inv ‚Üê Mor‚ÇÇIso.symmM Œ∑
    let eq := mkAppN (.const ``Iso.symm_hom (‚Üê getLevels)) #[ctx.C, ctx.instCat, f.e, g.e, Œ∑.e]
    return .isoInv e ‚ü®Œ∑Inv, eq‚ü© Œ∑
  invAtomM Œ∑ := do
    let ctx ‚Üê read
    let f := Œ∑.src
    let g := Œ∑.tgt
    let e := mkAppN (.const ``Iso.inv (‚Üê getLevels)) #[ctx.C, ctx.instCat, f.e, g.e, Œ∑.e]
    return .mk e g f
  id‚ÇÇM f := do
    let ctx ‚Üê read
    let e := mkAppN (.const ``CategoryStruct.id (‚Üê getLevels)) #[ctx.C, ‚Üê mkCategoryStructInst, f.e]
    let eq := mkAppN (.const ``Iso.refl_hom (‚Üê getLevels)) #[ctx.C, ctx.instCat, f.e]
    return .id e ‚ü®(.structuralAtom <| ‚Üê StructuralIsoAtom.id‚ÇÇM f), eq‚ü© f
  comp‚ÇÇM Œ∑ Œ∏ := do
    let ctx ‚Üê read
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let h ‚Üê Œ∏.tgtM
    let isoLift? ‚Üê (match (Œ∑.isoLift?, Œ∏.isoLift?) with
      | (some Œ∑Iso, some Œ∏Iso) => do
        let eq := mkAppN (.const ``structuralIsoOfExpr_comp (‚Üê getLevels))
          #[ctx.C, ctx.instCat, f.e, g.e, h.e, Œ∑.e, Œ∑Iso.iso.e, Œ∑Iso.eq, Œ∏.e, Œ∏Iso.iso.e, Œ∏Iso.eq]
        return .some ‚ü®‚Üê MonadMor‚ÇÇIso.comp‚ÇÇM Œ∑Iso.iso Œ∏Iso.iso, eq‚ü©
      | _ => return none)
    let e := mkAppN (.const ``CategoryStruct.comp (‚Üê getLevels))
      #[ctx.C, ‚Üê mkCategoryStructInst, f.e, g.e, h.e, Œ∑.e, Œ∏.e]
    return .comp e isoLift? f g h Œ∑ Œ∏
  whiskerLeftM f Œ∑ := do
    let ctx ‚Üê read
    let g ‚Üê Œ∑.srcM
    let h ‚Üê Œ∑.tgtM
    let isoLift? ‚Üê (match Œ∑.isoLift? with
      | some Œ∑Iso => do
        let eq := mkAppN (.const ``structuralIsoOfExpr_whiskerLeft (‚Üê getLevels))
          #[ctx.C, ctx.instCat, f.e, g.e, h.e, Œ∑.e, Œ∑Iso.iso.e, Œ∑Iso.eq]
        return .some ‚ü®‚Üê MonadMor‚ÇÇIso.whiskerLeftM f Œ∑Iso.iso, eq‚ü©
      | _ => return none)
    let e := mkAppN (.const ``MonoidalCategoryStruct.whiskerLeft (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryStructInst, f.e, g.e, h.e, Œ∑.e]
    return .whiskerLeft e isoLift? f g h Œ∑
  whiskerRightM Œ∑ h := do
    let ctx ‚Üê read
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let isoLift? ‚Üê (match Œ∑.isoLift? with
      | some Œ∑Iso => do
        let eq := mkAppN (.const ``structuralIsoOfExpr_whiskerRight (‚Üê getLevels))
          #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryInst, f.e, g.e, h.e, Œ∑.e, Œ∑Iso.iso.e, Œ∑Iso.eq]
        return .some ‚ü®‚Üê MonadMor‚ÇÇIso.whiskerRightM Œ∑Iso.iso h, eq‚ü©
      | _ => return none)
    let e := mkAppN (.const ``MonoidalCategoryStruct.whiskerRight (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryStructInst, f.e, g.e, Œ∑.e, h.e]
    return .whiskerRight e isoLift? f g Œ∑ h
  horizontalCompM Œ∑ Œ∏ := do
    let ctx ‚Üê read
    let f‚ÇÅ ‚Üê Œ∑.srcM
    let g‚ÇÅ ‚Üê Œ∑.tgtM
    let f‚ÇÇ ‚Üê Œ∏.srcM
    let g‚ÇÇ ‚Üê Œ∏.tgtM
    let isoLift? ‚Üê (match (Œ∑.isoLift?, Œ∏.isoLift?) with
      | (some Œ∑Iso, some Œ∏Iso) => do
        let eq := mkAppN (.const ``structuralIsoOfExpr_horizontalComp (‚Üê getLevels))
          #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryInst, f‚ÇÅ.e, g‚ÇÅ.e, f‚ÇÇ.e, g‚ÇÇ.e,
            Œ∑.e, Œ∑Iso.iso.e, Œ∑Iso.eq, Œ∏.e, Œ∏Iso.iso.e, Œ∏Iso.eq]
        return .some ‚ü®‚Üê MonadMor‚ÇÇIso.horizontalCompM Œ∑Iso.iso Œ∏Iso.iso, eq‚ü©
      | _ => return none)
    let e := mkAppN (.const ``MonoidalCategoryStruct.tensorHom (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryStructInst, f‚ÇÅ.e, g‚ÇÅ.e, f‚ÇÇ.e, g‚ÇÇ.e, Œ∑.e, Œ∏.e]
    return .horizontalComp e isoLift? f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ Œ∑ Œ∏
  coherenceCompM Œ± Œ∑ Œ∏ := do
    let ctx ‚Üê read
    let f ‚Üê Œ∑.srcM
    let g ‚Üê Œ∑.tgtM
    let h ‚Üê Œ∏.srcM
    let i ‚Üê Œ∏.tgtM
    let isoLift? ‚Üê (match (Œ∑.isoLift?, Œ∏.isoLift?) with
      | (some Œ∑Iso, some Œ∏Iso) => do
        let eq := mkAppN (.const ``StructuralIsoOfExpr_monoidalComp (‚Üê getLevels))
          #[ctx.C, ctx.instCat, f.e, g.e, h.e, i.e, Œ±.inst,
            Œ∑.e, Œ∑Iso.iso.e, Œ∑Iso.eq, Œ∏.e, Œ∏Iso.iso.e, Œ∏Iso.eq]
        return .some ‚ü®‚Üê MonadMor‚ÇÇIso.coherenceCompM Œ± Œ∑Iso.iso Œ∏Iso.iso, eq‚ü©
      | _ => return none)

    let e := mkAppN (.const ``monoidalComp (‚Üê getLevels))
      #[ctx.C, ctx.instCat, f.e, g.e, h.e, i.e, Œ±.inst, Œ∑.e, Œ∏.e]
    return .coherenceComp e isoLift? f g h i Œ± Œ∑ Œ∏

section

open MonoidalCategory

universe v u

variable {C : Type u} [Category.{v} C] [MonoidalCategory C]

local infixr:81 " ‚óÅ " => MonoidalCategory.whiskerLeftIso
local infixl:81 " ‚ñ∑ " => MonoidalCategory.whiskerRightIso

abbrev normalizeIsoComp {p f g pf pfg : C} (Œ∑_f : p ‚äó f ‚âÖ pf) (Œ∑_g : pf ‚äó g ‚âÖ pfg) :=
  (Œ±_ _ _ _).symm ‚â™‚â´ whiskerRightIso Œ∑_f g ‚â™‚â´ Œ∑_g

theorem naturality_associator {p f g h pf pfg pfgh : C}
    (Œ∑_f : (p ‚äó f) ‚âÖ pf) (Œ∑_g : (pf ‚äó g) ‚âÖ pfg) (Œ∑_h : pfg ‚äó h ‚âÖ pfgh) :
    p ‚óÅ (Œ±_ f g h) ‚â™‚â´ normalizeIsoComp Œ∑_f (normalizeIsoComp Œ∑_g Œ∑_h) =
    normalizeIsoComp (normalizeIsoComp Œ∑_f Œ∑_g) Œ∑_h :=
  Iso.ext (by simp)

theorem naturality_leftUnitor {p f pf : C} (Œ∑_f : p ‚äó f ‚âÖ pf) :
    p ‚óÅ (Œª_ f) ‚â™‚â´ Œ∑_f = normalizeIsoComp (œÅ_ p) Œ∑_f :=
  Iso.ext (by simp)

theorem naturality_rightUnitor {p f pf : C} (Œ∑_f : p ‚äó f ‚âÖ pf) :
    p ‚óÅ (œÅ_ f) ‚â™‚â´ Œ∑_f = normalizeIsoComp Œ∑_f (œÅ_ pf) :=
  Iso.ext (by simp)

theorem naturality_id {p f pf : C} (Œ∑_f : p ‚äó f ‚âÖ pf) :
    p ‚óÅ Iso.refl f ‚â™‚â´ Œ∑_f = Œ∑_f := by
  simp

theorem naturality_comp {p f g h pf : C} {Œ∑ : f ‚âÖ g} {Œ∏ : g ‚âÖ h}
    (Œ∑_f : (p ‚äó f) ‚âÖ pf) (Œ∑_g : (p ‚äó g) ‚âÖ pf) (Œ∑_h : p ‚äó h ‚âÖ pf)
    (ih_Œ∑ : p ‚óÅ Œ∑ ‚â™‚â´ Œ∑_g = Œ∑_f) (ih_Œ∏ : p ‚óÅ Œ∏ ‚â™‚â´ Œ∑_h = Œ∑_g) :
    p ‚óÅ (Œ∑ ‚â™‚â´ Œ∏) ‚â™‚â´ Œ∑_h = Œ∑_f := by
  simp_all

theorem naturality_whiskerLeft {p f g h pf pfg : C} {Œ∑ : g ‚âÖ h}
    (Œ∑_f : (p ‚äó f) ‚âÖ pf) (Œ∑_fg : (pf ‚äó g) ‚âÖ pfg) (Œ∑_fh : (pf ‚äó h) ‚âÖ pfg)
    (ih_Œ∑ : pf ‚óÅ Œ∑ ‚â™‚â´ Œ∑_fh = Œ∑_fg) :
    p ‚óÅ (f ‚óÅ Œ∑) ‚â™‚â´ normalizeIsoComp Œ∑_f Œ∑_fh = normalizeIsoComp Œ∑_f Œ∑_fg := by
  rw [‚Üê ih_Œ∑]
  apply Iso.ext
  simp [‚Üê whisker_exchange_assoc]

theorem naturality_whiskerRight {p f g h pf pfh : C} {Œ∑ : f ‚âÖ g}
    (Œ∑_f : (p ‚äó f) ‚âÖ pf) (Œ∑_g : (p ‚äó g) ‚âÖ pf) (Œ∑_fh : (pf ‚äó h) ‚âÖ pfh)
    (ih_Œ∑ : p ‚óÅ Œ∑ ‚â™‚â´ Œ∑_g = Œ∑_f) :
    p ‚óÅ (Œ∑ ‚ñ∑ h) ‚â™‚â´ normalizeIsoComp Œ∑_g Œ∑_fh = normalizeIsoComp Œ∑_f Œ∑_fh := by
  rw [‚Üê ih_Œ∑]
  apply Iso.ext
  simp

theorem naturality_tensorHom {p f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ pf‚ÇÅ pf‚ÇÅf‚ÇÇ : C} {Œ∑ : f‚ÇÅ ‚âÖ g‚ÇÅ} {Œ∏ : f‚ÇÇ ‚âÖ g‚ÇÇ}
    (Œ∑_f‚ÇÅ : p ‚äó f‚ÇÅ ‚âÖ pf‚ÇÅ) (Œ∑_g‚ÇÅ : p ‚äó g‚ÇÅ ‚âÖ pf‚ÇÅ) (Œ∑_f‚ÇÇ : pf‚ÇÅ ‚äó f‚ÇÇ ‚âÖ pf‚ÇÅf‚ÇÇ) (Œ∑_g‚ÇÇ : pf‚ÇÅ ‚äó g‚ÇÇ ‚âÖ pf‚ÇÅf‚ÇÇ)
    (ih_Œ∑ : p ‚óÅ Œ∑ ‚â™‚â´ Œ∑_g‚ÇÅ = Œ∑_f‚ÇÅ)
    (ih_Œ∏ : pf‚ÇÅ ‚óÅ Œ∏ ‚â™‚â´ Œ∑_g‚ÇÇ = Œ∑_f‚ÇÇ) :
    p ‚óÅ (Œ∑ ‚äó Œ∏) ‚â™‚â´ normalizeIsoComp Œ∑_g‚ÇÅ Œ∑_g‚ÇÇ = normalizeIsoComp Œ∑_f‚ÇÅ Œ∑_f‚ÇÇ := by
  rw [tensorIso_def]
  apply naturality_comp
  ¬∑ apply naturality_whiskerRight _ _ _ ih_Œ∑
  ¬∑ apply naturality_whiskerLeft _ _ _ ih_Œ∏

theorem naturality_inv {p f g pf : C} {Œ∑ : f ‚âÖ g}
    (Œ∑_f : p ‚äó f ‚âÖ pf) (Œ∑_g : p ‚äó g ‚âÖ pf) (ih : p ‚óÅ Œ∑ ‚â™‚â´ Œ∑_g = Œ∑_f) :
    p ‚óÅ Œ∑.symm ‚â™‚â´ Œ∑_f = Œ∑_g := by
  rw [‚Üê ih]
  apply Iso.ext
  simp

instance : MonadNormalizeNaturality MonoidalM where
  mkNaturalityAssociator p pf pfg pfgh f g h Œ∑_f Œ∑_g Œ∑_h := do
    let ctx ‚Üê read
    return mkAppN (.const ``naturality_associator (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryInst, p.e.e, f.e, g.e, h.e,
        pf.e.e, pfg.e.e, pfgh.e.e,
        Œ∑_f.e, Œ∑_g.e, Œ∑_h.e]
  mkNaturalityLeftUnitor p pf f Œ∑_f := do
    let ctx ‚Üê read
    return mkAppN (.const ``naturality_leftUnitor (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryInst, p.e.e, f.e, pf.e.e, Œ∑_f.e]
  mkNaturalityRightUnitor p pf f Œ∑_f := do
    let ctx ‚Üê read
    return mkAppN (.const ``naturality_rightUnitor (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryInst, p.e.e, f.e, pf.e.e, Œ∑_f.e]
  mkNaturalityId p pf f Œ∑_f := do
    let ctx ‚Üê read
    return mkAppN (.const ``naturality_id (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryInst, p.e.e, f.e, pf.e.e, Œ∑_f.e]
  mkNaturalityComp p pf f g h Œ∑ Œ∏ Œ∑_f Œ∑_g Œ∑_h ih_Œ∑ ih_Œ∏ := do
    let ctx ‚Üê read
    return mkAppN (.const ``naturality_comp (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryInst, p.e.e, f.e, g.e, h.e, pf.e.e, Œ∑.e, Œ∏.e,
        Œ∑_f.e, Œ∑_g.e, Œ∑_h.e, ih_Œ∑, ih_Œ∏]
  mkNaturalityWhiskerLeft p pf pfg f g h Œ∑ Œ∑_f Œ∑_fg Œ∑_fh ih_Œ∑ := do
    let ctx ‚Üê read
    return mkAppN (.const ``naturality_whiskerLeft (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryInst, p.e.e, f.e, g.e, h.e,
        pf.e.e, pfg.e.e, Œ∑.e, Œ∑_f.e, Œ∑_fg.e, Œ∑_fh.e, ih_Œ∑]
  mkNaturalityWhiskerRight p pf pfh f g h Œ∑ Œ∑_f Œ∑_g Œ∑_fh ih_Œ∑ := do
    let ctx ‚Üê read
    return mkAppN (.const ``naturality_whiskerRight (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryInst, p.e.e, f.e, g.e, h.e,
        pf.e.e, pfh.e.e, Œ∑.e, Œ∑_f.e, Œ∑_g.e, Œ∑_fh.e, ih_Œ∑]
  mkNaturalityHorizontalComp p pf‚ÇÅ pf‚ÇÅf‚ÇÇ f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ Œ∑ Œ∏ Œ∑_f‚ÇÅ Œ∑_g‚ÇÅ Œ∑_f‚ÇÇ Œ∑_g‚ÇÇ ih_Œ∑ ih_Œ∏ := do
    let ctx ‚Üê read
    return mkAppN (.const ``naturality_tensorHom (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryInst, p.e.e, f‚ÇÅ.e, g‚ÇÅ.e, f‚ÇÇ.e, g‚ÇÇ.e,
        pf‚ÇÅ.e.e, pf‚ÇÅf‚ÇÇ.e.e, Œ∑.e, Œ∏.e, Œ∑_f‚ÇÅ.e, Œ∑_g‚ÇÅ.e, Œ∑_f‚ÇÇ.e, Œ∑_g‚ÇÇ.e, ih_Œ∑, ih_Œ∏]
  mkNaturalityInv p pf f g Œ∑ Œ∑_f Œ∑_g ih := do
    let ctx ‚Üê read
    return mkAppN (.const ``naturality_inv (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryInst, p.e.e,
        f.e, g.e, pf.e.e, Œ∑.e, Œ∑_f.e, Œ∑_g.e, ih]

theorem of_normalize_eq {f g f' : C} {Œ∑ Œ∏ : f ‚âÖ g} (Œ∑_f : ùüô_ C ‚äó f ‚âÖ f') (Œ∑_g : ùüô_ C ‚äó g ‚âÖ f')
    (h_Œ∑ : ùüô_ C ‚óÅ Œ∑ ‚â™‚â´ Œ∑_g = Œ∑_f)
    (h_Œ∏ : ùüô_ C ‚óÅ Œ∏ ‚â™‚â´ Œ∑_g = Œ∑_f) : Œ∑ = Œ∏ := by
  apply Iso.ext
  calc
    Œ∑.hom = (Œª_ f).inv ‚â´ Œ∑_f.hom ‚â´ Œ∑_g.inv ‚â´ (Œª_ g).hom := by
      simp [‚Üê reassoc_of% (congrArg Iso.hom h_Œ∑)]
    _ = Œ∏.hom := by
      simp [‚Üê reassoc_of% (congrArg Iso.hom h_Œ∏)]

end

def Atom‚ÇÅ.mkM (e : Expr) : MetaM Atom‚ÇÅ := do
  let src ‚Üê srcExpr? e
  let tgt ‚Üê tgtExpr? e
  return ‚ü®e, ‚ü®src‚ü©, ‚ü®tgt‚ü©‚ü©

def isId‚ÇÅ? (e : Expr) : MonoidalM (Option Obj) := do
  let ctx ‚Üê read
  match ctx.instMonoidal with
  | none => return none
  | some _ => do
    let unit := mkAppN (.const ``MonoidalCategoryStruct.tensorUnit (‚Üê getLevels))
      #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryStructInst]
    if ‚Üê withDefault <| isDefEq e unit then
      return .some ‚ü®none‚ü©
    else
      return none

def isComp‚ÇÅ? (e : Expr) : MonoidalM (Option (Mor‚ÇÅ √ó Mor‚ÇÅ)) := do
  let ctx ‚Üê read
  let f ‚Üê mkFreshExprMVar ctx.C
  let g ‚Üê mkFreshExprMVar ctx.C
  match ctx.instMonoidal with
    | none => return none
    | some _ => do
      let fg := mkAppN (.const ``MonoidalCategoryStruct.tensorObj (‚Üê getLevels))
          #[ctx.C, ctx.instCat, ‚Üê mkMonoidalCategoryStructInst, f, g]
      if ‚Üê withDefault <| isDefEq e fg then
        let f ‚Üê instantiateMVars f
        let g ‚Üê instantiateMVars g
        return .some ((.of ‚ü®f, ‚ü®none‚ü©, ‚ü®none‚ü©‚ü© : Mor‚ÇÅ), (.of ‚ü®g, ‚ü®none‚ü©, ‚ü®none‚ü©‚ü© : Mor‚ÇÅ))
      else
        return none

/-- Construct a `Mor‚ÇÅ` expression from a Lean expression. -/
partial def mor‚ÇÅOfExpr (e : Expr) : MonoidalM Mor‚ÇÅ := do
  if let some a ‚Üê isId‚ÇÅ? e then
    MonadMor‚ÇÅ.id‚ÇÅM a
  else if let some (f, g) ‚Üê isComp‚ÇÅ? e then
    MonadMor‚ÇÅ.comp‚ÇÅM (‚Üê mor‚ÇÅOfExpr f.e) (‚Üê mor‚ÇÅOfExpr g.e)
  else
    return Mor‚ÇÅ.of (‚Üê Atom‚ÇÅ.mkM e)

instance : MkMor‚ÇÅ MonoidalM where
  ofExpr := mor‚ÇÅOfExpr

partial def Mor‚ÇÇIsoOfExpr (e : Expr) : MonoidalM Mor‚ÇÇIso := do
  match (‚Üê whnfR e).getAppFnArgs with
  | (``MonoidalCategoryStruct.associator, #[_, _, _, f, g, h]) =>
    Mor‚ÇÇIso.associatorM' (‚Üê MkMor‚ÇÅ.ofExpr f) (‚Üê MkMor‚ÇÅ.ofExpr g) (‚Üê MkMor‚ÇÅ.ofExpr h)
  | (``MonoidalCategoryStruct.leftUnitor, #[_, _, _, f]) =>
    Mor‚ÇÇIso.leftUnitorM' (‚Üê MkMor‚ÇÅ.ofExpr f)
  | (``MonoidalCategoryStruct.rightUnitor, #[_, _, _, f]) =>
    Mor‚ÇÇIso.rightUnitorM' (‚Üê MkMor‚ÇÅ.ofExpr f)
  | (``Iso.refl, #[_, _, f]) =>
    Mor‚ÇÇIso.id‚ÇÇM' (‚Üê MkMor‚ÇÅ.ofExpr f)
  | (``Iso.symm, #[_, _, _, _, Œ∑]) =>
    Mor‚ÇÇIso.symmM (‚Üê Mor‚ÇÇIsoOfExpr Œ∑)
  | (``Iso.trans, #[_, _, _, _, _, Œ∑, Œ∏]) =>
    Mor‚ÇÇIso.comp‚ÇÇM (‚Üê Mor‚ÇÇIsoOfExpr Œ∑) (‚Üê Mor‚ÇÇIsoOfExpr Œ∏)
  | (``MonoidalCategory.whiskerLeftIso, #[_, _, _, f, _, _, Œ∑]) =>
    Mor‚ÇÇIso.whiskerLeftM (‚Üê MkMor‚ÇÅ.ofExpr f) (‚Üê Mor‚ÇÇIsoOfExpr Œ∑)
  | (``MonoidalCategory.whiskerRightIso, #[_, _, _, _, _, Œ∑, h]) =>
    Mor‚ÇÇIso.whiskerRightM (‚Üê Mor‚ÇÇIsoOfExpr Œ∑) (‚Üê MkMor‚ÇÅ.ofExpr h)
  | (``tensorIso, #[_, _, _, _, _, _, _, Œ∑, Œ∏]) =>
    Mor‚ÇÇIso.horizontalCompM (‚Üê Mor‚ÇÇIsoOfExpr Œ∑) (‚Üê Mor‚ÇÇIsoOfExpr Œ∏)
  | (``monoidalIsoComp, #[_, _, _, g, h, _, inst, Œ∑, Œ∏]) =>
    let Œ± ‚Üê Mor‚ÇÇIsoOfExpr <| ‚Üê mkMonoidalCoherenceIso g h inst
    match Œ± with
    | .structuralAtom (.coherenceHom Œ±) =>
      Mor‚ÇÇIso.coherenceCompM Œ± (‚Üê Mor‚ÇÇIsoOfExpr Œ∑) (‚Üê Mor‚ÇÇIsoOfExpr Œ∏)
    | _ => unreachable!
  | (``MonoidalCoherence.iso, #[_, _, f, g, inst]) =>
    Mor‚ÇÇIso.coherenceHomM' (‚Üê MkMor‚ÇÅ.ofExpr f) (‚Üê MkMor‚ÇÅ.ofExpr g) inst
  | _ =>
    return .of ‚ü®e, ‚Üê MkMor‚ÇÅ.ofExpr (‚Üê srcExprOfIso e), ‚Üê MkMor‚ÇÅ.ofExpr (‚Üê tgtExprOfIso e)‚ü©

open MonadMor‚ÇÇ in
partial def Mor‚ÇÇOfExpr (e : Expr) : MonoidalM Mor‚ÇÇ := do
  match ‚Üê whnfR e with
  -- whnfR version of `Iso.hom Œ∑`
  | .proj ``Iso 0 Œ∑ => homM (‚Üê Mor‚ÇÇIsoOfExpr Œ∑)
  -- whnfR version of `Iso.inv Œ∑`
  | .proj ``Iso 1 Œ∑ => invM (‚Üê Mor‚ÇÇIsoOfExpr Œ∑)
  | .app .. => match (‚Üê whnfR e).getAppFnArgs with
    | (``CategoryStruct.id, #[_, _, f]) => id‚ÇÇM (‚Üê MkMor‚ÇÅ.ofExpr f)
    | (``CategoryStruct.comp, #[_, _, _, _, _, Œ∑, Œ∏]) =>
      comp‚ÇÇM (‚Üê Mor‚ÇÇOfExpr Œ∑) (‚Üê Mor‚ÇÇOfExpr Œ∏)
    | (``MonoidalCategoryStruct.whiskerLeft, #[_, _, _, f, _, _, Œ∑]) =>
      whiskerLeftM (‚Üê MkMor‚ÇÅ.ofExpr f) (‚Üê Mor‚ÇÇOfExpr Œ∑)
    | (``MonoidalCategoryStruct.whiskerRight, #[_, _, _, _, _, Œ∑, h]) =>
      whiskerRightM (‚Üê Mor‚ÇÇOfExpr Œ∑) (‚Üê MkMor‚ÇÅ.ofExpr h)
    | (``MonoidalCategoryStruct.tensorHom, #[_, _, _, _, _, _, _, Œ∑, Œ∏]) =>
      horizontalCompM (‚Üê Mor‚ÇÇOfExpr Œ∑) (‚Üê Mor‚ÇÇOfExpr Œ∏)
    | (``monoidalComp, #[_, _, _, g, h, _, inst, Œ∑, Œ∏]) =>
      coherenceCompM (‚Üê MonadStructuralIsoAtom.coherenceHomM
        (‚Üê MkMor‚ÇÅ.ofExpr g) (‚Üê MkMor‚ÇÅ.ofExpr h) inst) (‚Üê Mor‚ÇÇOfExpr Œ∑) (‚Üê Mor‚ÇÇOfExpr Œ∏)
    | _ => return .of ‚ü®e, ‚Üê MkMor‚ÇÅ.ofExpr (‚Üê srcExpr e), ‚Üê MkMor‚ÇÅ.ofExpr (‚Üê tgtExpr e)‚ü©
  | _ =>
    return .of ‚ü®e, ‚Üê MkMor‚ÇÅ.ofExpr (‚Üê srcExpr e), ‚Üê MkMor‚ÇÅ.ofExpr (‚Üê tgtExpr e)‚ü©

instance : BicategoryLike.MkMor‚ÇÇ MonoidalM where
  ofExpr := Mor‚ÇÇOfExpr

instance : MonadCoherehnceHom MonoidalM where
  unfoldM Œ± := Mor‚ÇÇIsoOfExpr Œ±.unfold

universe v u
variable {C : Type u} [Category.{v} C] [MonoidalCategory C]

open MonoidalCategory

theorem mk_eq_of_normalized_eq {f g f' : C} (Œ∑ Œ∏ : f ‚ü∂ g) (Œ∑' Œ∏' : f ‚âÖ g)
    (Œ∑_f : ùüô_ C ‚äó f ‚âÖ f') (Œ∑_g : ùüô_ C ‚äó g ‚âÖ f')
    (HŒ∑ : Œ∑'.hom = Œ∑) (HŒ∏ : Œ∏'.hom = Œ∏)
    (HŒ∑' : whiskerLeftIso (ùüô_ C) Œ∑' ‚â™‚â´ Œ∑_g = Œ∑_f)
    (HŒ∏' : whiskerLeftIso (ùüô_ C) Œ∏' ‚â™‚â´ Œ∑_g = Œ∑_f) : Œ∑ = Œ∏ :=
  calc
    Œ∑ = Œ∑'.hom := HŒ∑.symm
    _ = (Œª_ f).inv ‚â´ Œ∑_f.hom ‚â´ Œ∑_g.inv ‚â´ (Œª_ g).hom := by
      simp [‚Üê reassoc_of% (congrArg Iso.hom HŒ∑')]
    _ = Œ∏'.hom := by
      simp [‚Üê reassoc_of% (congrArg Iso.hom HŒ∏')]
    _ = Œ∏ := HŒ∏

open Elab.Tactic

def pureCoherence (mvarId : MVarId) : MetaM (List MVarId) :=
  BicategoryLike.pureCoherence `monoidal Monoidal.Context (mkAppM ``mk_eq_of_normalized_eq) mvarId

elab "monoidal_coherence" : tactic => withMainContext do
  replaceMainGoal <| ‚Üê Monoidal.pureCoherence <| ‚Üê getMainGoal

end Mathlib.Tactic.Monoidal
