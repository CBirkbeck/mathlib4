[4/15] Building Std.CodeAction.Basic
[4/15] Building Std.Tactic.Init
[4/23] Building Std.Data.List.Basic
[7/32] Building Std.Tactic.Lint.Misc
[9/39] Building Std.Tactic.Lint.TypeClass
[9/39] Building Std.Tactic.Lint.Simp
[10/39] Building Std.Tactic.Lint.Frontend
[10/39] Building Mathlib.Lean.EnvExtension
[10/39] Building Mathlib.Tactic.Eqns
[10/39] Building Mathlib.Lean.Meta.Simp
[11/4301] Building Mathlib.Util.MemoFix
[12/4301] Building Mathlib.Lean.Expr.Traverse
[13/4301] Building Mathlib.Data.Array.Defs
[14/4301] Building Mathlib.Init.Data.Nat.Notation
[15/4301] Building Mathlib.Mathport.Rename
[18/4301] Building Mathlib.Tactic.Lemma
[19/4301] Building Mathlib.Tactic.PPWithUniv
[20/4301] Building Mathlib.Tactic.ExtendDoc
[67/4301] Building Mathlib.Util.AssertExists
[68/4301] Building Mathlib.Mathport.Attributes
[69/4301] Building Mathlib.Tactic.ProjectionNotation
[70/4301] Building Mathlib.Util.CompileInductive
[71/4301] Building Mathlib.Tactic.Attr.Register
[72/4301] Building Mathlib.Tactic.Conv
[73/4301] Building Mathlib.Tactic.SimpRw
[80/4301] Building Aesop.Frontend.Basic
[81/4301] Building Aesop.Exception
[82/4301] Building Mathlib.Tactic.Spread
[83/4301] Building Mathlib.Init.Data.Sigma.Basic
[84/4301] Building Mathlib.Lean.Elab.Term
[85/4301] Building Mathlib.Lean.PrettyPrinter.Delaborator
[86/4301] Building Mathlib.Util.WithWeakNamespace
[87/4301] Building Mathlib.Tactic.Coe
[88/4301] Building Mathlib.Tactic.Substs
[89/4301] Building Mathlib.Lean.Meta.Basic
[90/4301] Building Mathlib.Tactic.ApplyWith
[91/4301] Building Mathlib.Tactic.CasesM
[92/4301] Building Mathlib.Tactic.Check
[93/4301] Building Mathlib.Util.Tactic
[94/4301] Building Mathlib.Tactic.Clear!
[95/4301] Building Mathlib.Tactic.ClearExcept
[96/4301] Building Mathlib.Tactic.Clear_
[98/4301] Building Mathlib.Tactic.Existsi
[98/4301] Building Mathlib.Tactic.Constructor
[99/4301] Building Mathlib.Tactic.FailIfNoProgress
[100/4301] Building Mathlib.Tactic.GuardGoalNums
[101/4301] Building Mathlib.Tactic.GuardHypNums
[102/4301] Building Mathlib.Tactic.HelpCmd
[103/4301] Building Mathlib.Tactic.InferParam
[104/4301] Building Mathlib.Tactic.NthRewrite
[105/4301] Building Mathlib.Tactic.Observe
[106/4301] Building Mathlib.Tactic.Recover
[107/4301] Building Mathlib.Tactic.Rename
[108/4301] Building Qq.ForLean.ReduceEval
[109/4301] Building Qq.ForLean.ToExpr
[110/4301] Building Qq.Typ
[111/4301] Building Qq.ForLean.Do
[112/4301] Building Qq.SortLocalDecls
[113/4301] Building Mathlib.Tactic.Set
[114/4301] Building Mathlib.Tactic.SimpIntro
[115/4301] Building Mathlib.Tactic.SuccessIfFailWithMsg
[116/4301] Building Mathlib.Tactic.SudoSetOption
[117/4301] Building Mathlib.Tactic.Trace
[118/4301] Building Mathlib.Tactic.TypeCheck
[119/4301] Building Mathlib.Tactic.UnsetOption
[120/4301] Building Mathlib.Tactic.Variable
[121/4301] Building Mathlib.Tactic.Widget.SelectInsertParamsClass
[122/4301] Building ProofWidgets.Compat
[123/4301] Building Mathlib.Util.CountHeartbeats
[124/4301] Building ImportGraph.RequiredModules
[125/4301] Building Mathlib.Util.Delaborators
[126/4301] Building Mathlib.Tactic.Monotonicity.Attr
[127/4301] Building Mathlib.Tactic.HaveI
[128/4301] Building Mathlib.Util.AtomM
[129/4301] Building Mathlib.Tactic.SuppressCompilation
[130/4301] Building Mathlib.Util.AddRelatedDecl
[131/4301] Building Mathlib.Tactic.FunProp.Decl
[132/4301] Building Mathlib.Tactic.FunProp.ToStd
[133/4301] Building Mathlib.Tactic.FunProp.StateList
[134/4301] Building Mathlib.Tactic.Generalize
[135/4301] Building Mathlib.Data.Buffer.Parser.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Tactic.FunProp.StateList, data field pure is uncovered in Monad.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.Tactic.FunProp.StateList, data field bind is uncovered in Monad.
                      It might be better to declare an instance of Bind first.
[Elab.StructInst.coveredFields] In Mathlib.Tactic.FunProp.StateList, data field map is uncovered in Monad.
                      It might be better to declare an instance of Functor first.
[136/4301] Building Mathlib.Data.Buffer.Parser.Numeral
[137/4301] Building Mathlib.Init.Data.Buffer.Parser
[138/4301] Building Mathlib.Lean.Exception
[139/4301] Building Mathlib.Lean.LocalContext
[140/4301] Building Mathlib.Lean.Message
[141/4301] Building Mathlib.Tactic.Clean
[142/4301] Building Mathlib.Tactic.Have
[143/4301] Building Mathlib.Tactic.Explode.Datatypes
[144/4301] Building Mathlib.Tactic.ReduceModChar.Ext
[145/4301] Building Mathlib.Util.AssertNoSorry
[146/4301] Building Mathlib.Util.Export
[147/4301] Building Mathlib.Util.IncludeStr
[148/4301] Building Mathlib.Util.SleepHeartbeats
[149/4301] Building Mathlib.Util.TermBeta
[150/4301] Building Mathlib.Util.Time
[151/4301] Building Std.Classes.Cast
[152/4301] Building Std.Lean.Meta.AssertHypotheses
[153/4301] Building Std.Lean.Meta.Clear
[154/4301] Building Std.Lean.Meta.InstantiateMVars
[156/4301] Building Std.Tactic.FalseOrByContra
[156/4301] Building Std.Lean.Meta.Simp
[157/4301] Building Mathlib.Util.WhatsNew
[158/4301] Building Mathlib.Tactic.Recall
[159/4301] Building Mathlib.Init.Data.Fin.Basic
[160/4301] Building Mathlib.Tactic.Relation.Rfl
[161/4301] Building Mathlib.Lean.Meta.DiscrTree
[162/4301] Building Std.Data.PairingHeap
[163/4301] Building Std.Control.ForInStep.Lemmas
[164/4301] Building Mathlib.Data.MLList.IO
[165/4301] Building Std.Data.MLList.Heartbeats
[166/4301] Building Std.Data.Array.Basic
[167/4301] Building Mathlib.Data.BinaryHeap
[168/4301] Building Std.Data.Fin.Lemmas
[169/4301] Building Std.Data.Sum.Lemmas
[170/4301] Building Std.Lean.AttributeExtra
[171/4301] Building Std.Tactic.PrintDependents
[172/4301] Building Std.Lean.Json
[173/4301] Building Mathlib.Tactic.ExtractGoal
[174/4301] Building Std.Lean.Meta.SavedState
[175/4301] Building Std.Linter.UnreachableTactic
[176/4301] Building Mathlib.Util.DischargerAsTactic
[177/4301] Building Std.Lean.Util.EnvSearch
[178/4301] Building Aesop.Constants
[179/4301] Building Aesop.RuleTac.ElabRuleTerm
[180/4301] Building Mathlib.Algebra.HierarchyDesign
[181/4301] Building Mathlib.Lean.Json
[182/4301] Building Mathlib.Init.Meta.WellFoundedTactics
[183/4301] Building Mathlib.Init.Data.Option.Init.Lemmas
[184/4301] Building Mathlib.Init.Data.Option.Basic
[185/4301] Building Mathlib.Init.Data.Nat.Div
[186/4301] Building Mathlib.Data.Rbtree.MinMax
[187/4301] Building Mathlib.Data.Rbtree.Main
[188/4301] Building Mathlib.Data.Rbtree.Insert
[189/4301] Building Mathlib.Data.Rbtree.Find
[190/4301] Building Mathlib.Data.Rbtree.DefaultLt
[191/4301] Building Mathlib.Data.Rbtree.Basic
[192/4301] Building Mathlib.Data.Rbmap.Default
[193/4301] Building Mathlib.Data.Rbmap.Basic
[194/4301] Building Mathlib.Lean.Thunk
[196/4301] Building Mathlib.Init.Data.Sigma.Lex
[196/4301] Building Mathlib.Init.Quot
[197/4301] Building Mathlib.Control.ULift
[198/4301] Building Mathlib.Init.Propext
[199/4301] Building Mathlib.Init.Control.Combinators
[200/4301] Building Mathlib.Init.Data.Ordering.Basic
[201/4301] Building Mathlib.Tactic.HigherOrder
[202/4301] Building Mathlib.Tactic.ApplyAt
[204/4301] Building Mathlib.Tactic.ScopedNS
[204/4301] Building Mathlib.Tactic.SwapVar
[205/4301] Building Mathlib.Init.Data.Prod
[206/4301] Building ProofWidgets.Cancellable
[207/4301] Building ProofWidgets.Component.Basic
[209/4301] Building Mathlib.Tactic.Explode.Pretty
[209/4301] Building Mathlib.Tactic.Monotonicity.Basic
[211/4301] Building Mathlib.Lean.Expr.ReplaceRec
[211/4301] Building Mathlib.Init.Classes.Order
[212/4301] Building ImportGraph.Imports
[213/4301] Building Mathlib.Init.Set
[214/4301] Building Std.CodeAction.Deprecated
[215/4301] Building Mathlib.CategoryTheory.ConcreteCategory.Bundled
[216/4301] Building Std.Control.Nondet.Basic
[217/4301] Building Aesop.Options.Internal
[218/4301] Building Mathlib.Data.Stream.Defs
[219/4301] Building Mathlib.Tactic.ToLevel
[220/4301] Building Mathlib.Tactic.ApplyCongr
[221/4301] Building Mathlib.Tactic.Replace
[222/4301] Building Std.CodeAction.Misc
[223/4301] Building Std.Data.RBMap.Basic
[224/4301] Building Qq.Macro
[225/4301] Building Std.Tactic.Lint
[226/4301] Building Mathlib.Init.Data.List.Basic
[227/4301] Building Std.Tactic.PermuteGoals
[228/4301] Building Std.Data.AssocList
[229/4301] Building Std.Control.ForInStep
[230/4301] Building Std.Data.Fin
[231/4301] Building Std.Linter.UnnecessarySeqFocus
[232/4301] Building Aesop.Util.EqualUpToIds
[233/4301] Building Std.Tactic.PrintPrefix
[234/4301] Building Std.Data.Sum
[235/4301] Building Mathlib.Data.MLList.DepthFirst
[236/4301] Building ProofWidgets.Data.Html
[237/4301] Building ProofWidgets.Component.MakeEditLink
[238/4301] Building Mathlib.Data.String.Defs
[239/4301] Building Mathlib.Tactic.DeriveToExpr
[240/4301] Building Mathlib.Tactic.Explode
[241/4301] Building Aesop.Options
[242/4301] Building Std.Tactic.Alias
[243/4301] Building Mathlib.Util.Superscript
[244/4301] Building Mathlib.Tactic.Lint
[245/4301] Building Mathlib.Tactic.Simps.NotationClass
[246/4301] Building Std.Linter
[247/4301] Building Mathlib.Tactic.Hint
[248/4301] Building Std.CodeAction
[250/4301] Building Mathlib.Mathport.Notation
[250/4301] Building Std.Tactic.Basic
[253/4301] Building ProofWidgets.Presentation.Expr
[253/4301] Building ProofWidgets.Component.PenroseDiagram
[253/4301] Building ProofWidgets.Component.OfRpcMethod
[254/4301] Building Mathlib.Tactic.GCongr.ForwardAttr
[255/4301] Building Mathlib.Data.Array.Basic
[256/4301] Building Std.Data.Option.Lemmas
[257/4301] Building Std.Data.Bool
[258/4301] Building Std.Logic
[259/4301] Building Std.Data.Nat.Lemmas
[260/4301] Building Std.Data.RBMap.WF
[261/4301] Building Mathlib.Tactic.Widget.SelectPanelUtils
[262/4301] Building Std.Data.Option
[263/4301] Building Mathlib.Init.Data.Option.Lemmas
[264/4301] Building Mathlib.Init.Data.Bool.Basic
[265/4301] Building Std.Data.Array.Init.Lemmas
[266/4301] Building Mathlib.Lean.Meta
[267/4301] Building Mathlib.Tactic.Attr.Core
[268/4301] Building Mathlib.Tactic.Use
[269/4301] Building Mathlib.Init.Data.Subtype.Basic
[270/4301] Building Mathlib.Init.Data.Quot
[271/4301] Building Mathlib.Tactic.Widget.Calc
[272/4301] Building Mathlib.Tactic.ToExpr
[273/4301] Building Mathlib.Tactic.Widget.Conv
[274/4301] Building Std.Data.BinomialHeap.Basic
[275/4301] Building Std.Data.Array.Merge
[276/4301] Building Std.Data.Array.Match
[277/4301] Building Std.Data.Nat.Gcd
[278/4301] Building Std.Data.Int.Order
[279/4301] Building Std.Data.BitVec.Lemmas
[280/4301] Building Std.Data.List.Lemmas
[281/4301] Building Mathlib.Lean.Meta.CongrTheorems
[282/4301] Building Mathlib.Lean.Elab.Tactic.Basic
[283/4301] Building Mathlib.Lean.CoreM
[284/4301] Building Mathlib.Tactic.FBinop
[285/4301] Building Std.Data.HashMap.Basic
[286/4301] Building Std.Data.String.Basic
[287/4301] Building Std.Data.BitVec
[288/4301] Building Aesop.Util.UnorderedArraySet
[289/4301] Building Mathlib.Tactic.Relation.Trans
[290/4301] Building Std.Data.Nat
[291/4301] Building Mathlib.Init.Data.Nat.GCD
[292/4301] Building Std.Lean.Meta.DiscrTree
[293/4301] Building Std.Data.Int.DivMod
[294/4301] Building Mathlib.Init.Data.Int.Basic
[295/4301] Building Mathlib.Init.Data.Int.Lemmas
[296/4301] Building Std.Lean.Meta.UnusedNames
[297/4301] Building Mathlib.Data.MLList.Dedup
[298/4301] Building Aesop.Util.UnionFind
[299/4301] Building Mathlib.Tactic.Congr!
[300/4301] Building Qq.Delab
[301/4301] Building Std.Util.Cache
[302/4301] Building Mathlib.Data.HashMap
[303/4301] Building Mathlib.Lean.Name
[304/4301] Building Mathlib.Data.SProd
[305/4301] Building Mathlib.Tactic.Find
[306/4301] Building Qq.MetaM
[307/4301] Building Mathlib.Init.Core
[308/4301] Building Mathlib.Init.Logic
[309/4301] Building Std.Data.Rat.Basic
[310/4301] Building Mathlib.Init.Data.Int.DivMod
[311/4301] Building Std.Data.Int.Gcd
[312/4301] Building Std.Data.BinomialHeap.Lemmas
[315/4301] Building Qq.Match
[315/4301] Building Qq.AssertInstancesCommute
[316/4301] Building Std.Data.Int.Lemmas
[317/4301] Building Std.Data.BinomialHeap
[318/4301] Building Std.Data.Int
[319/4301] Building Mathlib.Data.Rat.Init
[319/4301] Building Std.Classes.RatCast
[320/4301] Building Std.Data.Rat.Lemmas
[321/4301] Building Mathlib.Lean.Expr.Basic
[322/4301] Building Mathlib.Tactic.Convert
[325/4301] Building Mathlib.Init.Algebra.Classes
[325/4301] Building Mathlib.Init.Align
[325/4301] Building Mathlib.Init.Data.Bool.Lemmas
[328/4301] Building Mathlib.Data.Buffer.Basic
[332/4301] Building Mathlib.Tactic.GeneralizeProofs
[332/4301] Building Mathlib.Tactic.Cases
[332/4301] Building Mathlib.Lean.Expr
[332/4301] Building Mathlib.Tactic.RenameBVar
[332/4301] Building Mathlib.Tactic.Simps.Basic
[332/4301] Building Mathlib.Tactic.Core
[333/4301] Building Std.Data.RBMap.Alter
[334/4301] Building Std.Data.Rat
[335/4301] Building Mathlib.Init.Data.Rat.Basic
[340/4301] Building Mathlib.Tactic.SplitIfs
[340/4301] Building Mathlib.Tactic.Propose
[340/4301] Building Mathlib.Tactic.WLOG
[341/4301] Building Mathlib.Data.DList.Defs
[344/4301] Building Std.Lean.System.IO
[344/4301] Building Std.Data.Range.Lemmas
[344/4301] Building Mathlib.Init.Data.List.Instances
[344/4301] Building Std.Data.List.Count
[344/4301] Building Std.Data.String.Lemmas
[345/4301] Building Mathlib.Init.Data.List.Lemmas
[346/4301] Building Std.Data.Array.Lemmas
[347/4301] Building Std.Data.MLList.IO
[349/4301] Building Std.Data.MLList
[350/4301] Building Std.Data.List.Pairwise
[351/4301] Building Std.Data.Range
[353/4301] Building Qq
[353/4301] Building Mathlib.Tactic.Says
[355/4301] Building Mathlib.Util.SynthesizeUsing
[355/4301] Building Mathlib.Util.Qq
[359/4301] Building Std.Data.List.Perm
[361/4301] Building Mathlib.Tactic.ToAdditive
[362/4301] Building Std.Data.RBMap.Lemmas
[363/4301] Building Std.Data.List
[365/4301] Building Std.Data.HashMap.Lemmas
[365/4301] Building Std.Data.Array
[365/4301] Building Std.Data.HashMap.WF
[365/4301] Building Std.Data.ByteArray
[369/4301] Building Std.Data.String
[370/4301] Building Aesop.Util.Basic
[371/4301] Building Std.Data.RBMap
[371/4301] Building Mathlib.Data.Rbtree.Init
[372/4301] Building Mathlib.Data.TypeMax
[372/4301] Building Mathlib.Init.ZeroOne
[374/4301] Building Aesop.Rule.Name
[374/4301] Building Aesop.Tracing
[374/4301] Building Aesop.Util.Tactic
[377/4301] Building Mathlib.Init.Data.Nat.Basic
[377/4301] Building Mathlib.Algebra.Expr
[381/4301] Building Aesop.Stats.Basic
[381/4301] Building Aesop.RulePattern
[382/4301] Building Aesop.Script
[383/4301] Building Std.Data.HashMap
[383/4301] Building Mathlib.Util.LongNames
[384/4301] Building Std
[385/4301] Building Aesop.Stats.Extension
[387/4301] Building Mathlib.Tactic.TypeStar
[388/4301] Building Aesop.Stats.Report
[389/4301] Building Aesop.Index.Basic
[391/4301] Building Mathlib.Data.Option.Defs
[391/4301] Building Mathlib.Init.Order.Defs
[391/4301] Building Mathlib.Tactic.MkIffOfInductiveProp
[391/4301] Building Mathlib.Tactic.Basic
[391/4301] Building Mathlib.Data.DList.Basic
[391/4301] Building Mathlib.Tactic.Inhabit
[391/4301] Building Mathlib.Data.List.TFAE
[391/4301] Building Mathlib.Algebra.Group.Defs
[392/4301] Building Mathlib.Data.Bracket
[395/4301] Building Mathlib.Tactic.TFAE
[396/4301] Building Aesop.RuleTac.Basic
[399/4301] Building Mathlib.Data.String.Lemmas
[399/4301] Building Mathlib.Tactic.ExtractLets
[399/4301] Building Mathlib.Tactic.LiftLets
[399/4301] Building Mathlib.Tactic.DefEqTransformations
[399/4301] Building Mathlib.Tactic.RSuffices
[400/4301] Building Mathlib.Init.Control.Lawful
[401/4301] Building Mathlib.Tactic.Change
[402/4301] Building Mathlib.Tactic.Lift
[403/4301] Building Mathlib.Order.Notation
[404/4301] Building Aesop.Rule.Basic
[405/4301] Building Aesop.RuleTac.Tactic
[406/4301] Building Aesop.RuleTac.Preprocess
[407/4301] Building Aesop.RuleTac.Cases
[408/4301] Building Mathlib.Init.Data.Nat.Lemmas
[410/4301] Building Mathlib.Init.Order.LinearOrder
[410/4301] Building Aesop.RuleTac.Apply
[411/4301] Building Mathlib.Init.Function
[412/4301] Building Mathlib.Init.Data.Int.Order
[413/4301] Building Mathlib.Tactic.GCongr.Core
[414/4301] Building Aesop.RuleTac.Forward
[415/4301] Building Aesop.Search.Expansion.Basic
[416/4301] Building Aesop.Index
[420/4301] Building Mathlib.Logic.Nonempty
[420/4301] Building Mathlib.Logic.Relator
[420/4301] Building Mathlib.Data.Option.NAry
[420/4301] Building Mathlib.Logic.Nontrivial.Defs
[421/4301] Building Mathlib.Data.Prod.PProd
[422/4301] Building Mathlib.Control.Basic
[423/4301] Building Mathlib.Logic.Basic
[424/4301] Building Mathlib.Init.Data.Int.CompLemmas
[425/4301] Building Aesop.RuleTac
[426/4301] Building Aesop.Rule
[427/4301] Building Mathlib.Data.UnionFind
[428/4301] Building Mathlib.Data.Bool.Basic
[429/4301] Building Mathlib.Data.Int.Defs
[430/4301] Building Mathlib.Data.TwoPointing
[431/4301] Building Aesop.RuleSet.Member
[432/4301] Building Aesop.Tree.UnsafeQueue
[433/4301] Building Mathlib.GroupTheory.EckmannHilton
[434/4301] Building Mathlib.Algebra.Group.MinimalAxioms
[435/4301] Building Mathlib.Data.List.BigOperators.Defs
[436/4301] Building Mathlib.Algebra.Invertible.Defs
[437/4301] Building Mathlib.Algebra.PEmptyInstances
[438/4301] Building Mathlib.Algebra.Group.Commutator
[439/4301] Building Mathlib.Data.Nat.Cast.Defs
[440/4301] Building Mathlib.Algebra.Group.Semiconj.Defs
[442/4301] Building Aesop.Tree.Data
[442/4301] Building Aesop.Builder.Basic
[443/4301] Building Aesop.RuleSet.Filter
[444/4301] Building Mathlib.Tactic.Rewrites
[445/4301] Building Mathlib.Control.Functor
[446/4301] Building Aesop.RuleSet
[447/4301] Building Mathlib.Init.Data.Nat.Bitwise
[448/4301] Building Aesop.Builder.Unfold
[449/4301] Building Aesop.Builder.Forward
[450/4301] Building Aesop.Builder.Tactic
[451/4301] Building Aesop.Builder.NormSimp
[452/4301] Building Aesop.Builder.Apply
[453/4301] Building Aesop.Builder.Cases
[454/4301] Building Mathlib.Data.Int.Cast.Defs
[455/4301] Building Aesop.Tree.RunMetaM
[456/4301] Building Aesop.Tree.Traversal
[457/4301] Building Mathlib.Control.Applicative
[458/4301] Building Mathlib.Control.Traversable.Basic
[459/4301] Building Aesop.Builder.Constructors
[460/4301] Building Mathlib.Logic.Function.Basic
[461/4301] Building Mathlib.Init.Data.Ordering.Lemmas
[462/4301] Building Mathlib.Tactic.Tauto
[463/4301] Building Mathlib.Tactic.TermCongr
[464/4301] Building Mathlib.Data.List.Defs
[465/4301] Building Mathlib.Logic.Lemmas
[466/4301] Building Mathlib.Algebra.NeZero
[467/4301] Building Mathlib.Tactic.PushNeg
[468/4301] Building Aesop.Tree.TreeM
[469/4301] Building Aesop.Tree.State
[470/4301] Building Mathlib.Init.Data.Int.Bitwise
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Control.Applicative, data field seq is uncovered in Applicative.
                      It might be better to declare an instance of Seq first.
[Elab.StructInst.coveredFields] In Mathlib.Control.Applicative, data field pure is uncovered in Applicative.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.Control.Applicative, data field seqLeft is uncovered in Applicative.
                      It might be better to declare an instance of SeqLeft first.
[Elab.StructInst.coveredFields] In Mathlib.Control.Applicative, data field seqRight is uncovered in Applicative.
                      It might be better to declare an instance of SeqRight first.
[Elab.StructInst.coveredFields] In Mathlib.Control.Applicative, data field seq is uncovered in Applicative.
                      It might be better to declare an instance of Seq first.
[Elab.StructInst.coveredFields] In Mathlib.Control.Applicative, data field pure is uncovered in Applicative.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.Control.Applicative, data field seqLeft is uncovered in Applicative.
                      It might be better to declare an instance of SeqLeft first.
[Elab.StructInst.coveredFields] In Mathlib.Control.Applicative, data field seqRight is uncovered in Applicative.
                      It might be better to declare an instance of SeqRight first.
[471/4301] Building Aesop.Tree.Tracing
[472/4301] Building Mathlib.Data.Num.Basic
[473/4301] Building Aesop.Builder.Default
[474/4301] Building Aesop.Search.Expansion.Simp
[475/4301] Building Aesop.Frontend.Extension.Init
[476/4301] Building Aesop.Tree.AddRapp
[477/4301] Building Aesop.Tree.ExtractScript
[478/4301] Building Aesop.Tree.Free
[479/4301] Building Mathlib.Control.Traversable.Lemmas
[480/4301] Building Mathlib.Data.Nat.Cast.NeZero
[481/4301] Building Aesop.Tree.Check
[482/4301] Building Aesop.Frontend.Extension
[483/4301] Building Aesop.Tree.ExtractProof
[484/4301] Building Aesop.Builder
[485/4301] Building Mathlib.Algebra.CharZero.Defs
[486/4301] Building Mathlib.Data.Sigma.Basic
[487/4301] Building Mathlib.Tactic.Choose
[488/4301] Building Mathlib.Logic.Function.Conjugate
[489/4301] Building Mathlib.Data.Subtype
[490/4301] Building Mathlib.Logic.IsEmpty
[491/4301] Building Mathlib.Data.Prod.Basic
[492/4301] Building Mathlib.Data.FunLike.Basic
[493/4301] Building Mathlib.Data.Sum.Basic
[494/4301] Building Mathlib.Algebra.GroupWithZero.Defs
[495/4301] Building Mathlib.Tactic.DeriveTraversable
[496/4301] Building Mathlib.Tactic.Congrm
[497/4301] Building Mathlib.Tactic.ByContra
[498/4301] Building Mathlib.Tactic.Contrapose
[499/4301] Building Aesop.Frontend.RuleExpr
[500/4301] Building Mathlib.Data.Nat.Defs
[501/4301] Building Mathlib.Logic.Relation
[502/4301] Building Mathlib.Logic.Function.Iterate
[503/4301] Building Mathlib.Data.FunLike.Embedding
[504/4301] Building Mathlib.Tactic.IrreducibleDef
[505/4301] Building Mathlib.Tactic.FunProp.Mor
[506/4301] Building Mathlib.Logic.Unique
[507/4301] Building Mathlib.Data.Set.Defs
[508/4301] Building Mathlib.Tactic.Widget.Congrm
[509/4301] Building Mathlib.Algebra.GroupWithZero.NeZero
[510/4301] Building Mathlib.Data.FunLike.Equiv
[511/4301] Building Mathlib.Tactic.FunProp.FunctionData
[512/4301] Building Mathlib.Algebra.Ring.Defs
[513/4301] Building Aesop.Tree
[514/4301] Building Mathlib.Logic.Nontrivial.Basic
[515/4301] Building Mathlib.Algebra.Group.Pi.Basic
[516/4301] Building Mathlib.Data.Quot
[517/4301] Building Mathlib.Algebra.Invertible.GroupWithZero
[518/4301] Building Mathlib.Order.Basic
[519/4301] Building Mathlib.Init.Classical
[520/4301] Building Mathlib.Lean.Expr.ExtraRecognizers
[521/4301] Building Mathlib.Order.SetNotation
[522/4301] Building Mathlib.Algebra.Homology.ComplexShape
[523/4301] Building Aesop.Search.Queue.Class
[524/4301] Building Aesop.Frontend.Attribute
[525/4301] Building Mathlib.Tactic.FunProp.Types
[526/4301] Building Mathlib.Tactic.Nontriviality.Core
[527/4301] Building Aesop.Search.Queue
[528/4301] Building Aesop.Search.SearchM
[529/4301] Building Mathlib.Algebra.Group.Commute.Defs
[530/4301] Building Aesop.BuiltinRules.Subst
[531/4301] Building Aesop.BuiltinRules.Split
[532/4301] Building Aesop.BuiltinRules.Ext
[533/4301] Building Aesop.BuiltinRules.DestructProducts
[534/4301] Building Aesop.BuiltinRules.ApplyHyps
[535/4301] Building Aesop.BuiltinRules.Assumption
[536/4301] Building Aesop.BuiltinRules.Intros
[537/4301] Building Aesop.Frontend.Tactic
[538/4301] Building Aesop.Frontend.Command
[539/4301] Building Mathlib.Algebra.Ring.Semiconj
[540/4301] Building Aesop.Search.RuleSelection
[541/4301] Building Mathlib.Tactic.Nontriviality
[542/4301] Building Mathlib.Algebra.Field.Defs
[543/4301] Building Mathlib.Logic.Equiv.Defs
[544/4301] Building Mathlib.Tactic.FunProp.RefinedDiscrTree
[545/4301] Building Mathlib.Algebra.Group.Hom.Defs
[546/4301] Building Aesop.Search.Expansion.Norm
[548/4301] Building Aesop.Frontend
[551/4301] Building Aesop.BuiltinRules
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Basic, data field lt is uncovered in Preorder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Basic, data field lt is uncovered in Preorder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Basic, data field le is uncovered in LinearOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Basic, data field lt is uncovered in LinearOrder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Basic, data field min is uncovered in LinearOrder.
                      It might be better to declare an instance of Min first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Basic, data field max is uncovered in LinearOrder.
                      It might be better to declare an instance of Max first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Basic, data field compare is uncovered in LinearOrder.
                      It might be better to declare an instance of Ord first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Basic, data field le is uncovered in LinearOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Basic, data field lt is uncovered in LinearOrder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Basic, data field min is uncovered in LinearOrder.
                      It might be better to declare an instance of Min first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Basic, data field max is uncovered in LinearOrder.
                      It might be better to declare an instance of Max first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Basic, data field compare is uncovered in LinearOrder.
                      It might be better to declare an instance of Ord first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Basic, data field le is uncovered in Preorder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Basic, data field lt is uncovered in Preorder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Basic, data field min is uncovered in LinearOrder.
                      It might be better to declare an instance of Min first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Basic, data field max is uncovered in LinearOrder.
                      It might be better to declare an instance of Max first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Basic, data field min is uncovered in LinearOrder.
                      It might be better to declare an instance of Min first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Basic, data field max is uncovered in LinearOrder.
                      It might be better to declare an instance of Max first.
[554/4301] Building Mathlib.Order.ULift
[554/4301] Building Mathlib.Data.PNat.Defs
[554/4301] Building Mathlib.Data.Tree
[554/4301] Building Mathlib.Algebra.Order.ZeroLEOne
[554/4301] Building Mathlib.Order.RelClasses
[557/4301] Building Aesop.Search.Expansion
[560/4301] Building Mathlib.Data.Finite.Defs
[560/4301] Building Mathlib.Control.Monad.Writer
[560/4301] Building Mathlib.Data.Erased
[560/4301] Building Mathlib.Control.Monad.Basic
[560/4301] Building Mathlib.Tactic.ProdAssoc
[560/4301] Building Mathlib.Data.Equiv.Functor
[561/4301] Building Mathlib.Data.Opposite
[562/4301] Building Mathlib.Control.Traversable.Equiv
[563/4301] Building Mathlib.Tactic.ProxyType
[564/4301] Building Mathlib.Order.Synonym
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Control.Monad.Writer, data field map is uncovered in Monad.
                      It might be better to declare an instance of Functor first.
[Elab.StructInst.coveredFields] In Mathlib.Control.Monad.Writer, data field pure is uncovered in Monad.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.Control.Monad.Writer, data field bind is uncovered in Monad.
                      It might be better to declare an instance of Bind first.
[565/4301] Building Mathlib.Algebra.Opposites
[566/4301] Building Mathlib.Control.EquivFunctor
[567/4301] Building Mathlib.Logic.Small.Defs
[568/4301] Building Mathlib.Data.Sigma.Lex
[569/4301] Building Mathlib.Logic.Equiv.Basic
[570/4301] Building Mathlib.Control.Monad.Cont
[571/4301] Building Mathlib.Data.Set.Opposite
[572/4301] Building Mathlib.Combinatorics.Quiver.Basic
[573/4301] Building Mathlib.Data.Countable.Defs
[574/4301] Building Aesop.Search.ExpandSafePrefix
[575/4301] Building Mathlib.Data.Nat.Cast.Synonym
[576/4301] Building Mathlib.Algebra.Group.OrderSynonym
[577/4301] Building Mathlib.Order.Compare
[578/4301] Building Mathlib.Order.Max
[579/4301] Building Mathlib.Logic.UnivLE
[580/4301] Building Mathlib.Combinatorics.Quiver.Subquiver
[581/4301] Building Mathlib.Combinatorics.Quiver.Push
[582/4301] Building Mathlib.Combinatorics.Quiver.Path
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Hom.Defs, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Hom.Defs, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Hom.Defs, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[583/4301] Building Mathlib.Algebra.Group.Commute.Hom
[584/4301] Building Mathlib.Algebra.Group.Ext
[585/4301] Building Aesop.Search.Main
[586/4301] Building Mathlib.Algebra.Group.TypeTags
[589/4301] Building Mathlib.Order.Monotone.Basic
[590/4301] Building Mathlib.Combinatorics.Quiver.Cast
[590/4301] Building Mathlib.Combinatorics.Quiver.Symmetric
[592/4301] Building Mathlib.Algebra.Ring.OrderSynonym
[595/4301] Building Mathlib.Combinatorics.Quiver.ConnectedComponent
[595/4301] Building Mathlib.Combinatorics.Quiver.SingleObj
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.TypeTags, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.TypeTags, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.TypeTags, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.TypeTags, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.TypeTags, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.TypeTags, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.TypeTags, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.TypeTags, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[596/4301] Building Mathlib.Data.Nat.Basic
[597/4301] Building Mathlib.Tactic.FunProp.Theorems
[600/4301] Building Mathlib.Data.List.EditDistance.Defs
[600/4301] Building Mathlib.Tactic.Sat.FromLRAT
[601/4301] Building Mathlib.Order.Iterate
[601/4301] Building Mathlib.Order.Lattice
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Logic.Equiv.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.Logic.Equiv.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[602/4301] Building Mathlib.Data.ULift
[604/4301] Building Mathlib.Tactic.FunProp.Attr
[604/4301] Building Mathlib.Tactic.FunProp.Core
[608/4301] Building Mathlib.Data.MLList.Split
[610/4301] Building Aesop.Main
[611/4301] Building Aesop
[612/4301] Building Mathlib.Topology.Sheaves.Init
[612/4301] Building Mathlib.Tactic.Continuity.Init
[612/4301] Building Mathlib.Data.Matroid.Init
[612/4301] Building Mathlib.Data.Sym.Sym2.Init
[612/4301] Building Mathlib.CategoryTheory.Category.Init
[612/4301] Building Mathlib.Combinatorics.SimpleGraph.Init
[612/4301] Building Mathlib.Data.Finset.Attr
[612/4301] Building Mathlib.Data.Option.Basic
[613/4301] Building Mathlib.Tactic.Measurability.Init
[615/4301] Building Mathlib.Tactic.ArithMult.Init
[615/4301] Building Mathlib.Tactic.SetLike
[618/4301] Building Mathlib.Tactic.Continuity
[618/4301] Building Mathlib.Algebra.Group.Basic
[618/4301] Building Mathlib.Tactic.Common
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Lattice, data field sup is uncovered in Lattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Lattice, data field inf is uncovered in Lattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Lattice, data field max is uncovered in LinearOrder.
                      It might be better to declare an instance of Max first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Lattice, data field min is uncovered in LinearOrder.
                      It might be better to declare an instance of Min first.
[620/4301] Building Mathlib.Order.MinMax
[620/4301] Building Mathlib.Order.Monotone.Monovary
[621/4301] Building Mathlib.Order.BoundedOrder
[622/4301] Building Mathlib.Tactic.ArithMult
[623/4301] Building Mathlib.Tactic.Measurability
[625/4301] Building Mathlib.CategoryTheory.Category.Basic
[625/4301] Building Mathlib.Combinatorics.Quiver.Covering
[626/4301] Building Mathlib.Algebra.Field.IsField
[627/4301] Building Mathlib.Algebra.Group.WithOne.Defs
[628/4301] Building Mathlib.Logic.Pairwise
[629/4301] Building Mathlib.Control.Bifunctor
[630/4301] Building Mathlib.Algebra.Quotient
[631/4301] Building Mathlib.Logic.Embedding.Basic
[632/4301] Building Mathlib.Logic.Equiv.Option
[633/4301] Building Mathlib.Tactic.FunProp.Elab
[636/4301] Building Mathlib.Control.Bitraversable.Basic
[636/4301] Building Mathlib.Logic.Equiv.Functor
[637/4301] Building Mathlib.Order.Disjoint
[637/4301] Building Mathlib.Data.Prod.Lex
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.WithOne.Defs, data field npow is uncovered in MonoidWithZero.
                      It might be better to declare an instance of Monoid first.
[638/4301] Building Mathlib.Data.PSigma.Order
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Basic, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Basic, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Basic, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[639/4301] Building Mathlib.Data.Sigma.Order
[640/4301] Building Mathlib.Order.WithBot
[641/4301] Building Mathlib.Algebra.Ring.WithZero
[642/4301] Building Mathlib.Tactic.Widget.CommDiag
[643/4301] Building Mathlib.CategoryTheory.Category.RelCat
[644/4301] Building Mathlib.CategoryTheory.Category.KleisliCat
[645/4301] Building Mathlib.CategoryTheory.Functor.Basic
[646/4301] Building Mathlib.Tactic.CategoryTheory.Slice
[647/4301] Building Mathlib.Control.Bitraversable.Lemmas
[648/4301] Building Mathlib.GroupTheory.GroupAction.Defs
[649/4301] Building Mathlib.Control.ULiftable
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.KleisliCat, data field Hom is uncovered in CategoryTheory.CategoryStruct.
                      It might be better to declare an instance of Quiver first.
[650/4301] Building Mathlib.Order.RelIso.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.RelCat, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.RelCat, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.RelCat, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[651/4301] Building Mathlib.Tactic.FunProp
[653/4301] Building Mathlib.Control.Bitraversable.Instances
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[654/4301] Building Mathlib.CategoryTheory.Functor.Functorial
[654/4301] Building Mathlib.Tactic.CategoryTheory.Reassoc
[656/4301] Building Mathlib.Topology.Defs.Basic
[657/4301] Building Mathlib.Order.PropInstances
[658/4301] Building Mathlib.CategoryTheory.Iso
[658/4301] Building Mathlib.CategoryTheory.NatTrans
[661/4301] Building Mathlib.Order.Heyting.Basic
[662/4301] Building Mathlib.Data.Int.Cast.Basic
[662/4301] Building Mathlib.Algebra.Group.Semiconj.Basic
[662/4301] Building Mathlib.Algebra.Ring.MinimalAxioms
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Functorial, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Functorial, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[663/4301] Building Mathlib.Tactic.MoveAdd
[664/4301] Building Mathlib.Algebra.Group.Embedding
[666/4301] Building Mathlib.Algebra.Group.Hom.Basic
[666/4301] Building Mathlib.Data.Nat.Bits
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.RelIso.Basic, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Order.RelIso.Basic, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Order.RelIso.Basic, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Order.RelIso.Basic, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Order.RelIso.Basic, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Order.RelIso.Basic, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Order.RelIso.Basic, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Order.RelIso.Basic, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Order.RelIso.Basic, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Order.RelIso.Basic, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Order.RelIso.Basic, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[667/4301] Building Mathlib.Data.Nat.PSub
[668/4301] Building Mathlib.Algebra.CovariantAndContravariant
[669/4301] Building Mathlib.Algebra.Ring.Basic
[670/4301] Building Mathlib.Algebra.Field.MinimalAxioms
[671/4301] Building Mathlib.Algebra.Group.Commute.Basic
[672/4301] Building Mathlib.Algebra.GroupWithZero.Basic
[673/4301] Building Mathlib.Order.RelIso.Group
[674/4301] Building Mathlib.Tactic.NormNum.Result
[675/4301] Building Mathlib.Data.Int.Basic
[676/4301] Building Mathlib.Algebra.Group.InjSurj
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[677/4301] Building Mathlib.Tactic.Zify
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Defs, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Defs, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Defs, data field smul is uncovered in SMulZeroClass.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Defs, data field smul is uncovered in SMulZeroClass.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Defs, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Defs, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Defs, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Defs, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Defs, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Defs, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[678/4301] Building Mathlib.Data.Ordmap.Ordnode
[679/4301] Building Mathlib.Order.Hom.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Hom.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Hom.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[680/4301] Building Mathlib.CategoryTheory.Functor.Category
[681/4301] Building Mathlib.GroupTheory.GroupAction.Ring
[682/4301] Building Mathlib.GroupTheory.GroupAction.Sum
[683/4301] Building Mathlib.GroupTheory.GroupAction.Sigma
[684/4301] Building Mathlib.GroupTheory.GroupAction.Option
[685/4301] Building Mathlib.Algebra.Order.Ring.Lemmas
[686/4301] Building Mathlib.Algebra.Order.Monoid.Lemmas
[687/4301] Building Mathlib.Algebra.Group.Equiv.Basic
[688/4301] Building Mathlib.Algebra.GroupPower.Basic
[689/4301] Building Mathlib.Tactic.NormNum.Core
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Category, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Category, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Category, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Category, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Category, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Category, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Category, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[691/4301] Building Mathlib.CategoryTheory.Functor.Trifunctor
[691/4301] Building Mathlib.CategoryTheory.Thin
[692/4301] Building Mathlib.CategoryTheory.NatIso
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field himp is uncovered in HeytingAlgebra.
                      It might be better to declare an instance of HImp first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field compl is uncovered in HeytingAlgebra.
                      It might be better to declare an instance of HasCompl first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field himp is uncovered in HeytingAlgebra.
                      It might be better to declare an instance of HImp first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field compl is uncovered in HeytingAlgebra.
                      It might be better to declare an instance of HasCompl first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field sdiff is uncovered in CoheytingAlgebra.
                      It might be better to declare an instance of SDiff first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field hnot is uncovered in CoheytingAlgebra.
                      It might be better to declare an instance of HNot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field sdiff is uncovered in CoheytingAlgebra.
                      It might be better to declare an instance of SDiff first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field hnot is uncovered in CoheytingAlgebra.
                      It might be better to declare an instance of HNot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field sdiff is uncovered in GeneralizedCoheytingAlgebra.
                      It might be better to declare an instance of SDiff first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field himp is uncovered in GeneralizedHeytingAlgebra.
                      It might be better to declare an instance of HImp first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field hnot is uncovered in CoheytingAlgebra.
                      It might be better to declare an instance of HNot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field sdiff is uncovered in CoheytingAlgebra.
                      It might be better to declare an instance of SDiff first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field compl is uncovered in HeytingAlgebra.
                      It might be better to declare an instance of HasCompl first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field himp is uncovered in HeytingAlgebra.
                      It might be better to declare an instance of HImp first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field himp is uncovered in HeytingAlgebra.
                      It might be better to declare an instance of HImp first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field himp is uncovered in BiheytingAlgebra.
                      It might be better to declare an instance of HImp first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field compl is uncovered in BiheytingAlgebra.
                      It might be better to declare an instance of HasCompl first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field sdiff is uncovered in BiheytingAlgebra.
                      It might be better to declare an instance of SDiff first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field hnot is uncovered in BiheytingAlgebra.
                      It might be better to declare an instance of HNot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field top is uncovered in BiheytingAlgebra.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field bot is uncovered in BiheytingAlgebra.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field sup is uncovered in BiheytingAlgebra.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field inf is uncovered in BiheytingAlgebra.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field compl is uncovered in BiheytingAlgebra.
                      It might be better to declare an instance of HasCompl first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field sdiff is uncovered in BiheytingAlgebra.
                      It might be better to declare an instance of SDiff first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field hnot is uncovered in BiheytingAlgebra.
                      It might be better to declare an instance of HNot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Basic, data field himp is uncovered in BiheytingAlgebra.
                      It might be better to declare an instance of HImp first.
[693/4301] Building Mathlib.Order.BooleanAlgebra
[694/4301] Building Mathlib.Algebra.GroupWithZero.InjSurj
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Basic, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Basic, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Basic, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Basic, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Basic, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Basic, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Basic, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Basic, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Basic, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Basic, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Basic, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Basic, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Basic, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Basic, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Basic, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[697/4301] Building Mathlib.Tactic.ApplyFun
[697/4301] Building Mathlib.Order.Estimator
[697/4301] Building Mathlib.Data.Sum.Order
[698/4301] Building Mathlib.Order.Antisymmetrization
[699/4301] Building Mathlib.Order.Hom.Bounded
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.NatIso, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.NatIso, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[700/4301] Building Mathlib.Algebra.Ring.InjSurj
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.Basic, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.Basic, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.Basic, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.Basic, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.Basic, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.Basic, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.Basic, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.Basic, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.Basic, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.Basic, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[701/4301] Building Mathlib.Algebra.Group.Hom.Instances
[702/4301] Building Mathlib.Algebra.GroupPower.Hom
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Antisymmetrization, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Antisymmetrization, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Antisymmetrization, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[703/4301] Building Mathlib.Algebra.Divisibility.Basic
[704/4301] Building Mathlib.Algebra.Group.Units
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GroupPower.Hom, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GroupPower.Hom, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[705/4301] Building Mathlib.Algebra.Ring.Idempotents
[706/4301] Building Mathlib.CategoryTheory.Bicategory.Basic
[707/4301] Building Mathlib.CategoryTheory.Functor.FullyFaithful
[708/4301] Building Mathlib.Algebra.Group.Equiv.TypeTags
[709/4301] Building Mathlib.Algebra.Group.WithOne.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Bounded, data field toFun is uncovered in BoundedOrderHom.
                      It might be better to declare an instance of OrderHom first.
[710/4301] Building Mathlib.Algebra.GroupWithZero.Hom
[711/4301] Building Mathlib.Algebra.Order.Monoid.MinMax
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.BooleanAlgebra, data field sdiff is uncovered in GeneralizedCoheytingAlgebra.
                      It might be better to declare an instance of SDiff first.
[Elab.StructInst.coveredFields] In Mathlib.Order.BooleanAlgebra, data field compl is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of HasCompl first.
[Elab.StructInst.coveredFields] In Mathlib.Order.BooleanAlgebra, data field hnot is uncovered in BiheytingAlgebra.
                      It might be better to declare an instance of HNot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.BooleanAlgebra, data field compl is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of HasCompl first.
[Elab.StructInst.coveredFields] In Mathlib.Order.BooleanAlgebra, data field sdiff is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of SDiff first.
[Elab.StructInst.coveredFields] In Mathlib.Order.BooleanAlgebra, data field himp is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of HImp first.
[Elab.StructInst.coveredFields] In Mathlib.Order.BooleanAlgebra, data field compl is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of HasCompl first.
[Elab.StructInst.coveredFields] In Mathlib.Order.BooleanAlgebra, data field compl is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of HasCompl first.
[Elab.StructInst.coveredFields] In Mathlib.Order.BooleanAlgebra, data field compl is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of HasCompl first.
[Elab.StructInst.coveredFields] In Mathlib.Order.BooleanAlgebra, data field top is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of Top first.
[712/4301] Building Mathlib.Algebra.Group.ULift
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Hom.Instances, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Hom.Instances, data field zpow is uncovered in Group.
                      It might be better to declare an instance of DivInvMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Hom.Instances, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Hom.Instances, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Hom.Instances, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Hom.Instances, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Hom.Instances, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Hom.Instances, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Hom.Instances, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[713/4301] Building Mathlib.Algebra.Order.Sub.Defs
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.TypeTags, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.TypeTags, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.TypeTags, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.TypeTags, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.TypeTags, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.TypeTags, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.TypeTags, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.TypeTags, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.TypeTags, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.TypeTags, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.TypeTags, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.TypeTags, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.TypeTags, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.TypeTags, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.TypeTags, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Equiv.TypeTags, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[714/4301] Building Mathlib.Algebra.Order.Monoid.Defs
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.WithOne.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.WithOne.Basic, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.WithOne.Basic, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[715/4301] Building Mathlib.Algebra.EuclideanDomain.Defs
[716/4301] Building Mathlib.Algebra.Ring.Divisibility.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GroupWithZero.Hom, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GroupWithZero.Hom, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[717/4301] Building Mathlib.Algebra.Order.Monoid.NatCast
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Trifunctor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Trifunctor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Trifunctor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Trifunctor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Trifunctor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Trifunctor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Trifunctor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Trifunctor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Trifunctor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Trifunctor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Trifunctor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Trifunctor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[718/4301] Building Mathlib.Order.Heyting.Boundary
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.FullyFaithful, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.FullyFaithful, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[719/4301] Building Mathlib.Order.SymmDiff
[720/4301] Building Mathlib.Algebra.Ring.Hom.Defs
[721/4301] Building Mathlib.CategoryTheory.Whiskering
[722/4301] Building Mathlib.CategoryTheory.FullSubcategory
[723/4301] Building Mathlib.Algebra.Order.Monoid.Canonical.Defs
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.ULift, data field natCast is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.ULift, data field intCast is uncovered in AddGroupWithOne.
                      It might be better to declare an instance of IntCast first.
[724/4301] Building Mathlib.Algebra.Order.Monoid.OrderDual
[725/4301] Building Mathlib.Algebra.Order.Monoid.Basic
[726/4301] Building Mathlib.Algebra.Order.Group.Defs
[727/4301] Building Mathlib.Algebra.Order.Sub.Basic
[728/4301] Building Mathlib.Algebra.GroupPower.CovariantClass
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FullSubcategory, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FullSubcategory, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FullSubcategory, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FullSubcategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FullSubcategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FullSubcategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FullSubcategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FullSubcategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FullSubcategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[729/4301] Building Mathlib.CategoryTheory.EssentialImage
[730/4301] Building Mathlib.Algebra.Divisibility.Units
[731/4301] Building Mathlib.Algebra.Order.Monoid.Units
[732/4301] Building Mathlib.Data.Nat.Units
[733/4301] Building Mathlib.Algebra.Group.Units.Hom
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[734/4301] Building Mathlib.Algebra.Group.Semiconj.Units
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Hom.Defs, data field toFun is uncovered in NonUnitalRingHom.
                      It might be better to declare an instance of MulHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Hom.Defs, data field toFun is uncovered in NonUnitalRingHom.
                      It might be better to declare an instance of MulHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Hom.Defs, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Hom.Defs, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[735/4301] Building Mathlib.Algebra.Regular.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.Units, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.Units, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[736/4301] Building Mathlib.GroupTheory.GroupAction.Units
[737/4301] Building Mathlib.Algebra.Group.Opposite
[738/4301] Building Mathlib.Algebra.GroupWithZero.Units.Basic
[739/4301] Building Mathlib.Algebra.Order.Monoid.TypeTags
[740/4301] Building Mathlib.CategoryTheory.Bicategory.Functor
[741/4301] Building Mathlib.Algebra.Order.Sub.Canonical
[742/4301] Building Mathlib.Data.Nat.Cast.Basic
[743/4301] Building Mathlib.Algebra.Order.Monoid.WithZero.Defs
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Units.Hom, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Units.Hom, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[744/4301] Building Mathlib.Order.Hom.Lattice
[745/4301] Building Mathlib.Algebra.Group.Commute.Units
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GroupWithZero.Units.Basic, data field inv is uncovered in GroupWithZero.
                      It might be better to declare an instance of Inv first.
[746/4301] Building Mathlib.Algebra.Order.Monoid.WithTop
[747/4301] Building Mathlib.Algebra.Group.Units.Equiv
[748/4301] Building Mathlib.Algebra.Ring.Regular
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.Cast.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.Cast.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.Cast.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.Cast.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.Cast.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[749/4301] Building Mathlib.Data.Set.Basic
[750/4301] Building Mathlib.Algebra.Ring.Units
[751/4301] Building Mathlib.Deprecated.Group
[752/4301] Building Mathlib.Algebra.Group.WithOne.Units
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Opposite, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Opposite, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Opposite, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Opposite, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Opposite, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Opposite, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Opposite, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Opposite, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Opposite, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Opposite, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Opposite, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Opposite, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[753/4301] Building Mathlib.Algebra.GroupWithZero.Divisibility
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Units.Equiv, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Units.Equiv, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Units.Equiv, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Units.Equiv, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Units.Equiv, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[754/4301] Building Mathlib.Algebra.Order.Monoid.WithZero.Basic
[755/4301] Building Mathlib.Algebra.GroupWithZero.Semiconj
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.WithOne.Units, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.WithOne.Units, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[756/4301] Building Mathlib.Algebra.Order.Group.Cone
[757/4301] Building Mathlib.Algebra.Order.Group.DenselyOrdered
[758/4301] Building Mathlib.Algebra.Order.Group.TypeTags
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Monoid.WithTop, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Monoid.WithTop, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Monoid.WithTop, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Monoid.WithTop, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[759/4301] Building Mathlib.Algebra.Order.Group.Instances
[760/4301] Building Mathlib.Algebra.Order.Group.InjSurj
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Whiskering, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Whiskering, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Whiskering, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Whiskering, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Whiskering, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Whiskering, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Whiskering, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Whiskering, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[761/4301] Building Mathlib.Algebra.Ring.Opposite
[762/4301] Building Mathlib.Algebra.Order.Group.Units
[763/4301] Building Mathlib.GroupTheory.GroupAction.Opposite
[764/4301] Building Mathlib.Algebra.GroupWithZero.Units.Equiv
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Deprecated.Group, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[765/4301] Building Mathlib.Data.Int.Units
[766/4301] Building Mathlib.Algebra.Group.Prod
[767/4301] Building Mathlib.Algebra.Order.Group.OrderIso
[768/4301] Building Mathlib.Algebra.Ring.Commute
[769/4301] Building Mathlib.Algebra.Order.Group.WithTop
[770/4301] Building Mathlib.Algebra.Order.Sub.WithTop
[771/4301] Building Mathlib.Algebra.EuclideanDomain.Basic
[772/4301] Building Mathlib.Algebra.Order.Monoid.ToMulBot
[773/4301] Building Mathlib.Data.Nat.Cast.WithTop
[774/4301] Building Mathlib.Deprecated.Ring
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Opposite, data field toFun is uncovered in NonUnitalRingHom.
                      It might be better to declare an instance of MulHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Opposite, data field toFun is uncovered in NonUnitalRingHom.
                      It might be better to declare an instance of MulHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Opposite, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Opposite, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[775/4301] Building Mathlib.Algebra.GroupWithZero.Commute
[776/4301] Building Mathlib.CategoryTheory.Equivalence
[777/4301] Building Mathlib.CategoryTheory.Sigma.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Lattice, data field toFun is uncovered in LatticeHom.
                      It might be better to declare an instance of SupHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Lattice, data field toFun is uncovered in BoundedLatticeHom.
                      It might be better to declare an instance of SupHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Lattice, data field toFun is uncovered in LatticeHom.
                      It might be better to declare an instance of SupHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Lattice, data field toFun is uncovered in SupBotHom.
                      It might be better to declare an instance of SupHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Lattice, data field toFun is uncovered in SupBotHom.
                      It might be better to declare an instance of SupHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Lattice, data field toFun is uncovered in InfTopHom.
                      It might be better to declare an instance of InfHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Lattice, data field toFun is uncovered in InfTopHom.
                      It might be better to declare an instance of InfHom first.
[778/4301] Building Mathlib.Algebra.Order.Ring.Defs
[779/4301] Building Mathlib.Algebra.Order.Hom.Monoid
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Deprecated.Ring, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[780/4301] Building Mathlib.Algebra.Order.Group.Lattice
[781/4301] Building Mathlib.Algebra.GroupPower.IterateHom
[782/4301] Building Mathlib.Data.Sum.Lattice
[783/4301] Building Mathlib.Order.Booleanisation
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GroupPower.IterateHom, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GroupPower.IterateHom, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[784/4301] Building Mathlib.Order.Heyting.Hom
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Prod, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Prod, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Prod, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Prod, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Prod, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Prod, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Prod, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Prod, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Prod, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Prod, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Prod, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Prod, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[785/4301] Building Mathlib.Algebra.Order.WithZero
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Sum.Lattice, data field toFun is uncovered in LatticeHom.
                      It might be better to declare an instance of SupHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Sum.Lattice, data field toFun is uncovered in LatticeHom.
                      It might be better to declare an instance of SupHom first.
[786/4301] Building Mathlib.Data.Nat.Cast.Commute
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sigma.Basic, data field Hom is uncovered in CategoryTheory.CategoryStruct.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sigma.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sigma.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sigma.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sigma.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[787/4301] Building Mathlib.Algebra.Order.Group.Abs
[788/4301] Building Mathlib.Algebra.Divisibility.Prod
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Booleanisation, data field toFun is uncovered in LatticeHom.
                      It might be better to declare an instance of SupHom first.
[789/4301] Building Mathlib.GroupTheory.NoncommCoprod
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Hom.Monoid, data field toFun is uncovered in OrderMonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Hom.Monoid, data field toFun is uncovered in OrderMonoidHom.
                      It might be better to declare an instance of OneHom first.
[790/4301] Building Mathlib.Data.Nat.Cast.Prod
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Basic, data field sup is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Basic, data field le is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Basic, data field lt is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Basic, data field inf is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Basic, data field bot is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Basic, data field compl is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of HasCompl first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Basic, data field top is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Basic, data field sdiff is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of SDiff first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[791/4301] Building Mathlib.Algebra.Order.Sub.Prod
[792/4301] Building Mathlib.GroupTheory.GroupAction.Prod
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Hom, data field toFun is uncovered in HeytingHom.
                      It might be better to declare an instance of SupHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Hom, data field toFun is uncovered in CoheytingHom.
                      It might be better to declare an instance of SupHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Hom, data field toFun is uncovered in BiheytingHom.
                      It might be better to declare an instance of SupHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Hom, data field toFun is uncovered in HeytingHom.
                      It might be better to declare an instance of SupHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Hom, data field toFun is uncovered in HeytingHom.
                      It might be better to declare an instance of SupHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Hom, data field toFun is uncovered in CoheytingHom.
                      It might be better to declare an instance of SupHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Hom, data field toFun is uncovered in CoheytingHom.
                      It might be better to declare an instance of SupHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Hom, data field toFun is uncovered in BiheytingHom.
                      It might be better to declare an instance of SupHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Heyting.Hom, data field toFun is uncovered in BiheytingHom.
                      It might be better to declare an instance of SupHom first.
[793/4301] Building Mathlib.Algebra.GroupWithZero.Units.Lemmas
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.Cast.Prod, data field natCast is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of NatCast first.
[794/4301] Building Mathlib.Algebra.Order.Monoid.Prod
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.WithZero, data field zero is uncovered in LinearOrderedCommMonoidWithZero.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.WithZero, data field top is uncovered in LinearOrderedAddCommMonoidWithTop.
                      It might be better to declare an instance of Top first.
[795/4301] Building Mathlib.Algebra.Ring.Hom.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.NoncommCoprod, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[796/4301] Building Mathlib.Data.PEquiv
[797/4301] Building Mathlib.Data.Bundle
[798/4301] Building Mathlib.Data.Set.BoolIndicator
[799/4301] Building Mathlib.Order.Circular
[800/4301] Building Mathlib.Order.WellFounded
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GroupWithZero.Units.Lemmas, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[801/4301] Building Mathlib.Data.Set.Intervals.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Functor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Functor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[802/4301] Building Mathlib.Data.Set.Image
[803/4301] Building Mathlib.Data.Int.Cast.Prod
[804/4301] Building Mathlib.Data.Part
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.PEquiv, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.PEquiv, data field inf is uncovered in SemilatticeInf.
                      It might be better to declare an instance of Inf first.
[805/4301] Building Mathlib.Data.SetLike.Basic
[806/4301] Building Mathlib.Algebra.Order.Group.Prod
[807/4301] Building Mathlib.Data.Int.Cast.Field
[808/4301] Building Mathlib.CategoryTheory.Bicategory.NaturalTransformation
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Circular, data field btw is uncovered in CircularPreorder.
                      It might be better to declare an instance of Btw first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Circular, data field sbtw is uncovered in CircularPreorder.
                      It might be better to declare an instance of SBtw first.
[809/4301] Building Mathlib.CategoryTheory.Bicategory.Free
[810/4301] Building Mathlib.Algebra.Invertible.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.SetLike.Basic, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[811/4301] Building Mathlib.Algebra.SMulWithZero
[812/4301] Building Mathlib.Combinatorics.Quiver.Arborescence
[813/4301] Building Mathlib.Algebra.Field.Basic
[814/4301] Building Mathlib.Data.Pi.Lex
[815/4301] Building Mathlib.Algebra.Group.NatPowAssoc
[816/4301] Building Mathlib.Algebra.Order.Ring.Cone
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Equivalence, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Equivalence, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[817/4301] Building Mathlib.Algebra.Order.Field.Defs
[818/4301] Building Mathlib.Algebra.Order.Ring.CharZero
[819/4301] Building Mathlib.Algebra.Order.Group.PosPart
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Part, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Part, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Part, data field pure is uncovered in Monad.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Part, data field map is uncovered in Monad.
                      It might be better to declare an instance of Functor first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Part, data field bind is uncovered in Monad.
                      It might be better to declare an instance of Bind first.
[820/4301] Building Mathlib.Algebra.Order.Group.MinMax
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Pi.Lex, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Pi.Lex, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[821/4301] Building Mathlib.Algebra.Order.Ring.InjSurj
[822/4301] Building Mathlib.Algebra.Order.Positive.Ring
[823/4301] Building Mathlib.Algebra.Order.Ring.Canonical
[824/4301] Building Mathlib.Algebra.Regular.SMul
[825/4301] Building Mathlib.AlgebraicTopology.DoldKan.Compatibility
[826/4301] Building Mathlib.CategoryTheory.CatCommSq
[827/4301] Building Mathlib.CategoryTheory.Adjunction.Basic
[828/4301] Building Mathlib.CategoryTheory.Opposites
[829/4301] Building Mathlib.Logic.Embedding.Set
[830/4301] Building Mathlib.Data.Bool.Set
[831/4301] Building Mathlib.Data.Nat.Set
[832/4301] Building Mathlib.Order.Directed
[833/4301] Building Mathlib.Tactic.NormNum.Basic
[834/4301] Building Mathlib.CategoryTheory.Category.Preorder
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Intervals.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[835/4301] Building Mathlib.Data.Set.Prod
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Free, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Free, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Free, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Free, data field obj is uncovered in CategoryTheory.Pseudofunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Free, data field map is uncovered in CategoryTheory.Pseudofunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Free, data field map₂ is uncovered in CategoryTheory.Pseudofunctor.
                      It might be better to declare an instance of CategoryTheory.PrelaxFunctor first.
[836/4301] Building Mathlib.Algebra.Order.Field.InjSurj
[837/4301] Building Mathlib.Algebra.Field.ULift
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Preorder, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Preorder, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Preorder, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Preorder, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Preorder, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Preorder, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Preorder, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Preorder, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Preorder, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[838/4301] Building Mathlib.Algebra.Order.Field.Canonical.Defs
[839/4301] Building Mathlib.Order.RelIso.Set
[840/4301] Building Mathlib.Logic.Equiv.Embedding
[841/4301] Building Mathlib.Algebra.Order.Ring.WithTop
[842/4301] Building Mathlib.Data.Nat.Order.Basic
[843/4301] Building Mathlib.Data.Set.Intervals.WithBotTop
[844/4301] Building Mathlib.Order.Bounded
[845/4301] Building Mathlib.Tactic.CategoryTheory.BicategoryCoherence
[846/4301] Building Mathlib.Algebra.Order.Field.Canonical.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Adjunction.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Adjunction.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Adjunction.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Adjunction.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[847/4301] Building Mathlib.CategoryTheory.Adjunction.Whiskering
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.NaturalTransformation, data field Hom is uncovered in CategoryTheory.CategoryStruct.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.NaturalTransformation, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.NaturalTransformation, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.NaturalTransformation, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[850/4301] Building Mathlib.CategoryTheory.Bicategory.FunctorBicategory
[852/4301] Building Mathlib.Algebra.Tropical.Basic
[852/4301] Building Mathlib.Data.Nat.Dist
[852/4301] Building Mathlib.Data.List.Card
[852/4301] Building Mathlib.SetTheory.Lists
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Opposites, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[853/4301] Building Mathlib.Data.Nat.Cast.Order
[854/4301] Building Mathlib.Algebra.GroupPower.Ring
[855/4301] Building Mathlib.Data.Nat.Upto
[856/4301] Building Mathlib.Data.List.Func
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Ring.WithTop, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Ring.WithTop, data field npow is uncovered in MonoidWithZero.
                      It might be better to declare an instance of Monoid first.
[857/4301] Building Mathlib.Data.Vector
[858/4301] Building Mathlib.Data.Nat.WithBot
[859/4301] Building Mathlib.Data.Nat.MaxPowDiv
[860/4301] Building Mathlib.Data.Nat.ForSqrt
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Tropical.Basic, data field add is uncovered in AddCommSemigroup.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Tropical.Basic, data field max is uncovered in LinearOrder.
                      It might be better to declare an instance of Max first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Tropical.Basic, data field min is uncovered in LinearOrder.
                      It might be better to declare an instance of Min first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Tropical.Basic, data field nsmul is uncovered in AddCommMonoid.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Tropical.Basic, data field natCast is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Tropical.Basic, data field mul is uncovered in Semigroup.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Tropical.Basic, data field one is uncovered in MulOneClass.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Tropical.Basic, data field mul is uncovered in MulOneClass.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Tropical.Basic, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Tropical.Basic, data field zpow is uncovered in Group.
                      It might be better to declare an instance of DivInvMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Tropical.Basic, data field mul is uncovered in Distrib.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Tropical.Basic, data field add is uncovered in Distrib.
                      It might be better to declare an instance of Add first.
[861/4301] Building Mathlib.Data.Set.Enumerate
[862/4301] Building Mathlib.Data.List.GetD
[863/4301] Building Mathlib.Data.Set.NAry
[864/4301] Building Mathlib.Data.PNat.Basic
[865/4301] Building Mathlib.CategoryTheory.Functor.Const
[866/4301] Building Mathlib.CategoryTheory.EqToHom
[867/4301] Building Mathlib.Data.Nat.Order.Lemmas
[869/4301] Building Mathlib.Data.Int.Order.Basic
[869/4301] Building Mathlib.Data.Set.Function
[870/4301] Building Mathlib.Data.List.Basic
[871/4301] Building Mathlib.Tactic.Linarith.Lemmas
[872/4301] Building Mathlib.Algebra.Order.Invertible
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.PNat.Basic, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Data.PNat.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[873/4301] Building Mathlib.Algebra.Order.Ring.Pow
[874/4301] Building Mathlib.Algebra.GroupPower.Order
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.Order.Lemmas, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[875/4301] Building Mathlib.Data.Int.Dvd.Pow
[876/4301] Building Mathlib.Control.Fix
[877/4301] Building Mathlib.Data.Set.List
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Const, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Const, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Const, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Const, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[878/4301] Building Mathlib.CategoryTheory.Quotient
[879/4301] Building Mathlib.CategoryTheory.Comma.Basic
[880/4301] Building Mathlib.CategoryTheory.Sums.Basic
[881/4301] Building Mathlib.Data.PNat.Find
[882/4301] Building Mathlib.CategoryTheory.Category.ULift
[883/4301] Building Mathlib.CategoryTheory.Bicategory.Strict
[884/4301] Building Mathlib.Algebra.Group.PNatPowAssoc
[885/4301] Building Mathlib.Order.Bounds.Basic
[886/4301] Building Mathlib.Data.Nat.GCD.Basic
[887/4301] Building Mathlib.Algebra.GroupWithZero.Power
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Quotient, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Quotient, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Quotient, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Quotient, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Quotient, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Quotient, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Quotient, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[888/4301] Building Mathlib.Data.Int.LeastGreatest
[889/4301] Building Mathlib.CategoryTheory.Products.Basic
[890/4301] Building Mathlib.Algebra.EuclideanDomain.Instances
[891/4301] Building Mathlib.Data.Int.Range
[892/4301] Building Mathlib.Data.Int.Cast.Lemmas
[893/4301] Building Mathlib.Data.Rat.Defs
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.ULift, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.ULift, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.ULift, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.ULift, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.ULift, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.ULift, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.ULift, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.ULift, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.ULift, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.ULift, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.ULift, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.ULift, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.ULift, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.ULift, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.ULift, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.ULift, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.ULift, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.ULift, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[894/4301] Building Mathlib.Data.Int.Dvd.Basic
[896/4301] Building Mathlib.Data.Nat.Size
[896/4301] Building Mathlib.Data.Nat.Factorial.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sums.Basic, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sums.Basic, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sums.Basic, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sums.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sums.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sums.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sums.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sums.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sums.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sums.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sums.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[897/4301] Building Mathlib.Data.Nat.Pow
[898/4301] Building Mathlib.CategoryTheory.PathCategory
[899/4301] Building Mathlib.Data.Nat.Bitwise
[900/4301] Building Mathlib.Data.Set.Intervals.SurjOn
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Bounds.Basic, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Bounds.Basic, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[901/4301] Building Mathlib.Data.Set.Intervals.Instances
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Rat.Defs, data field zero is uncovered in CommRing.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Rat.Defs, data field add is uncovered in CommRing.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Rat.Defs, data field neg is uncovered in CommRing.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Rat.Defs, data field one is uncovered in CommRing.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Rat.Defs, data field mul is uncovered in CommRing.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Rat.Defs, data field nsmul is uncovered in CommRing.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Rat.Defs, data field zsmul is uncovered in CommRing.
                      It might be better to declare an instance of Ring first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Rat.Defs, data field intCast is uncovered in CommRing.
                      It might be better to declare an instance of IntCast first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Rat.Defs, data field natCast is uncovered in CommRing.
                      It might be better to declare an instance of NatCast first.
[902/4301] Building Mathlib.Algebra.Order.Ring.Abs
[903/4301] Building Mathlib.Data.Set.Intervals.Image
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Int.Cast.Lemmas, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Int.Cast.Lemmas, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Int.Cast.Lemmas, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[904/4301] Building Mathlib.Data.Set.Intervals.Monoid
[905/4301] Building Mathlib.Algebra.Group.Pi.Lemmas
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.PathCategory, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.PathCategory, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.PathCategory, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.PathCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.PathCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.PathCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.PathCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.PathCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.PathCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[906/4301] Building Mathlib.GroupTheory.GroupAction.Pi
[907/4301] Building Mathlib.Logic.Equiv.Set
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Pi, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Pi, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[908/4301] Building Mathlib.Data.Set.Pairwise.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Ring.Abs, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[909/4301] Building Mathlib.CategoryTheory.Sums.Associator
[910/4301] Building Mathlib.Logic.Equiv.PartialEquiv
[911/4301] Building Mathlib.Order.Monotone.Union
[912/4301] Building Mathlib.Order.LatticeIntervals
[913/4301] Building Mathlib.Data.Nat.Log
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Pi.Lemmas, data field natCast is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Pi.Lemmas, data field intCast is uncovered in AddGroupWithOne.
                      It might be better to declare an instance of IntCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Pi.Lemmas, data field zero is uncovered in MulZeroClass.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Pi.Lemmas, data field mul is uncovered in MulZeroClass.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Pi.Lemmas, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Pi.Lemmas, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Pi.Lemmas, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Pi.Lemmas, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Pi.Lemmas, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Pi.Lemmas, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[914/4301] Building Mathlib.Data.Int.GCD
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.LatticeIntervals, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Order.LatticeIntervals, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.LatticeIntervals, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.LatticeIntervals, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[915/4301] Building Mathlib.Data.Int.Div
[916/4301] Building Mathlib.Algebra.Field.Opposite
[917/4301] Building Mathlib.Algebra.Order.Group.Bounds
[918/4301] Building Mathlib.Data.Rat.Order
[919/4301] Building Mathlib.Tactic.Positivity.Core
[920/4301] Building Mathlib.Tactic.NormNum.Pow
[921/4301] Building Mathlib.Data.Set.Intervals.Group
[922/4301] Building Mathlib.Data.Int.Order.Units
[923/4301] Building Mathlib.Data.Int.Order.Lemmas
[924/4301] Building Mathlib.Data.Nat.Choose.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sums.Associator, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sums.Associator, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sums.Associator, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sums.Associator, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[925/4301] Building Mathlib.Algebra.Parity
[926/4301] Building Mathlib.Data.Set.Intervals.UnorderedInterval
[927/4301] Building Mathlib.GroupTheory.Perm.Basic
[928/4301] Building Mathlib.Logic.Small.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[929/4301] Building Mathlib.Order.Monotone.Odd
[930/4301] Building Mathlib.GroupTheory.GroupAction.DomAct.Basic
[931/4301] Building Mathlib.Data.List.Pairwise
[932/4301] Building Mathlib.Data.List.Lex
[933/4301] Building Mathlib.Data.Stream.Init
[934/4301] Building Mathlib.Data.Bool.AllAny
[935/4301] Building Mathlib.Data.List.Palindrome
[936/4301] Building Mathlib.Data.List.MinMax
[937/4301] Building Mathlib.Data.List.Infix
[938/4301] Building Mathlib.Algebra.Ring.Equiv
[939/4301] Building Mathlib.Order.Hom.Set
[940/4301] Building Mathlib.Data.Int.Bitwise
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Perm.Basic, data field mul is uncovered in Group.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Perm.Basic, data field one is uncovered in Group.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Perm.Basic, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Perm.Basic, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Perm.Basic, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Perm.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Perm.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Perm.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Perm.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Perm.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Perm.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Perm.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[941/4301] Building Mathlib.Data.List.Lemmas
[942/4301] Building Mathlib.Algebra.Free
[943/4301] Building Mathlib.Data.List.Lattice
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Set, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Set, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[944/4301] Building Mathlib.Order.InitialSeg
[945/4301] Building Mathlib.Data.Rat.Lemmas
[946/4301] Building Mathlib.Data.Rat.Field
[947/4301] Building Mathlib.CategoryTheory.Pi.Basic
[948/4301] Building Mathlib.CategoryTheory.Products.Associator
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Rat.Field, data field ratCast is uncovered in Field.
                      It might be better to declare an instance of RatCast first.
[949/4301] Building Mathlib.CategoryTheory.Products.Bifunctor
[950/4301] Building Mathlib.CategoryTheory.Monoidal.Category
[951/4301] Building Mathlib.CategoryTheory.Functor.Currying
[952/4301] Building Mathlib.Algebra.Associated
[953/4301] Building Mathlib.Data.Countable.Small
[954/4301] Building Mathlib.Dynamics.FixedPoints.Basic
[955/4301] Building Mathlib.Algebra.Group.Aut
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Equiv, data field toFun is uncovered in NonUnitalRingHom.
                      It might be better to declare an instance of MulHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Equiv, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Equiv, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Equiv, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Equiv, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Equiv, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Equiv, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Equiv, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Equiv, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Equiv, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Equiv, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[956/4301] Building Mathlib.Tactic.GCongr
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Basic, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Basic, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Basic, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[957/4301] Building Mathlib.Order.Antichain
[958/4301] Building Mathlib.Order.Bounds.OrderIso
[959/4301] Building Mathlib.Data.Set.Intervals.OrderIso
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Associator, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Associator, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Associator, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Products.Associator, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[960/4301] Building Mathlib.Data.Set.Intervals.OrderEmbedding
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Free, data field pure is uncovered in Monad.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Free, data field bind is uncovered in Monad.
                      It might be better to declare an instance of Bind first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Free, data field mul is uncovered in Semigroup.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Free, data field mul is uncovered in Semigroup.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Free, data field pure is uncovered in Monad.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Free, data field bind is uncovered in Monad.
                      It might be better to declare an instance of Bind first.
[961/4301] Building Mathlib.GroupTheory.Perm.ViaEmbedding
[962/4301] Building Mathlib.Data.Nat.Sqrt
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field mul is uncovered in Group.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field one is uncovered in Group.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field div is uncovered in Group.
                      It might be better to declare an instance of Div first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field npow is uncovered in Group.
                      It might be better to declare an instance of Monoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field zpow is uncovered in Group.
                      It might be better to declare an instance of DivInvMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field smul is uncovered in MulDistribMulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field mul is uncovered in Group.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field one is uncovered in Group.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field div is uncovered in Group.
                      It might be better to declare an instance of Div first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field npow is uncovered in Group.
                      It might be better to declare an instance of Monoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field zpow is uncovered in Group.
                      It might be better to declare an instance of DivInvMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field smul is uncovered in DistribMulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Group.Aut, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[963/4301] Building Mathlib.Order.CompleteLattice
[964/4301] Building Mathlib.Data.Fin.Basic
[965/4301] Building Mathlib.Data.Seq.Computation
[966/4301] Building Mathlib.Data.List.DropRight
[967/4301] Building Mathlib.Data.List.Forall2
[968/4301] Building Mathlib.Algebra.GroupWithZero.Bitwise
[969/4301] Building Mathlib.Tactic.FieldSimp
[970/4301] Building Mathlib.Algebra.Ring.ULift
[971/4301] Building Mathlib.Algebra.Ring.CompTypeclasses
[972/4301] Building Mathlib.Data.Rat.Cast.Defs
[973/4301] Building Mathlib.CategoryTheory.Comma.Arrow
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field zero is uncovered in MulZeroClass.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field mul is uncovered in MulZeroClass.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field add is uncovered in Distrib.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field mul is uncovered in Distrib.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field zero is uncovered in NonUnitalNonAssocSemiring.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field add is uncovered in NonUnitalNonAssocSemiring.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field mul is uncovered in NonUnitalNonAssocSemiring.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field nsmul is uncovered in NonUnitalNonAssocSemiring.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field nsmul is uncovered in NonAssocSemiring.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field natCast is uncovered in NonAssocSemiring.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field zero is uncovered in NonUnitalSemiring.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field add is uncovered in NonUnitalSemiring.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field mul is uncovered in NonUnitalSemiring.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field nsmul is uncovered in NonUnitalSemiring.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field nsmul is uncovered in Semiring.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field natCast is uncovered in Semiring.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field zero is uncovered in NonUnitalCommSemiring.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field add is uncovered in NonUnitalCommSemiring.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field mul is uncovered in NonUnitalCommSemiring.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field nsmul is uncovered in NonUnitalCommSemiring.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field nsmul is uncovered in CommSemiring.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field natCast is uncovered in CommSemiring.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field npow is uncovered in CommSemiring.
                      It might be better to declare an instance of Semiring first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field zero is uncovered in NonUnitalNonAssocRing.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field add is uncovered in NonUnitalNonAssocRing.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field mul is uncovered in NonUnitalNonAssocRing.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field sub is uncovered in NonUnitalNonAssocRing.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field neg is uncovered in NonUnitalNonAssocRing.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field nsmul is uncovered in NonUnitalNonAssocRing.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field zsmul is uncovered in NonUnitalNonAssocRing.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field zero is uncovered in NonUnitalRing.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field add is uncovered in NonUnitalRing.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field mul is uncovered in NonUnitalRing.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field sub is uncovered in NonUnitalRing.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field neg is uncovered in NonUnitalRing.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field nsmul is uncovered in NonUnitalRing.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field zsmul is uncovered in NonUnitalRing.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field zero is uncovered in NonAssocRing.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field one is uncovered in NonAssocRing.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field add is uncovered in NonAssocRing.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field mul is uncovered in NonAssocRing.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field sub is uncovered in NonAssocRing.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field neg is uncovered in NonAssocRing.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field nsmul is uncovered in NonAssocRing.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field natCast is uncovered in NonAssocRing.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field intCast is uncovered in NonAssocRing.
                      It might be better to declare an instance of IntCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field zsmul is uncovered in NonAssocRing.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field zero is uncovered in Ring.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field one is uncovered in Ring.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field add is uncovered in Ring.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field mul is uncovered in Ring.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field sub is uncovered in Ring.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field neg is uncovered in Ring.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field nsmul is uncovered in Ring.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field npow is uncovered in Ring.
                      It might be better to declare an instance of Semiring first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field natCast is uncovered in Ring.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field intCast is uncovered in Ring.
                      It might be better to declare an instance of IntCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field zero is uncovered in NonUnitalCommRing.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field add is uncovered in NonUnitalCommRing.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field mul is uncovered in NonUnitalCommRing.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field sub is uncovered in NonUnitalCommRing.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field neg is uncovered in NonUnitalCommRing.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field nsmul is uncovered in NonUnitalCommRing.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.ULift, data field zsmul is uncovered in NonUnitalCommRing.
                      It might be better to declare an instance of SubNegMonoid first.
[974/4301] Building Mathlib.Tactic.Widget.Gcongr
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Seq.Computation, data field map is uncovered in Monad.
                      It might be better to declare an instance of Functor first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Seq.Computation, data field pure is uncovered in Monad.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Seq.Computation, data field bind is uncovered in Monad.
                      It might be better to declare an instance of Bind first.
[975/4301] Building Mathlib.RingTheory.RingInvo
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Associated, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Associated, data field one is uncovered in CommMonoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Associated, data field mul is uncovered in CommMonoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Associated, data field le is uncovered in Preorder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Associated, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Associated, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Associated, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Associated, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[976/4301] Building Mathlib.Data.List.EditDistance.Bounds
[977/4301] Building Mathlib.Algebra.Order.Field.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.RingInvo, data field invFun is uncovered in RingInvo.
                      It might be better to declare an instance of Equiv first.
[978/4301] Building Mathlib.Data.Int.Lemmas
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Rat.Cast.Defs, data field smul is uncovered in DistribSMul.
                      It might be better to declare an instance of SMul first.
[979/4301] Building Mathlib.Data.Int.Sqrt
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Fin.Basic, data field top is uncovered in BoundedOrder.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Fin.Basic, data field bot is uncovered in BoundedOrder.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Fin.Basic, data field add is uncovered in AddCommSemigroup.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Fin.Basic, data field nsmul is uncovered in AddCommMonoid.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Fin.Basic, data field natCast is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Fin.Basic, data field sub is uncovered in AddCommGroup.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Fin.Basic, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Fin.Basic, data field neg is uncovered in InvolutiveNeg.
                      It might be better to declare an instance of Neg first.
[980/4301] Building Mathlib.Algebra.Group.Conj
[981/4301] Building Mathlib.Data.List.Sections
[982/4301] Building Mathlib.Algebra.Field.Power
[983/4301] Building Mathlib.GroupTheory.GroupAction.Group
[984/4301] Building Mathlib.Data.Seq.Seq
[985/4301] Building Mathlib.Data.List.Chain
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Pi.Basic, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Pi.Basic, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Pi.Basic, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Pi.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Pi.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Pi.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Pi.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Pi.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Pi.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Pi.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Pi.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Pi.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Pi.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Pi.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Pi.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[986/4301] Building Mathlib.Data.Set.Intervals.OrdConnected
[987/4301] Building Mathlib.Algebra.Ring.Pi
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Arrow, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Arrow, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Arrow, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Arrow, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[988/4301] Building Mathlib.Data.Int.Associated
[989/4301] Building Mathlib.Data.List.BigOperators.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLattice, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLattice, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLattice, data field sup is uncovered in CompleteLattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLattice, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLattice, data field sSup is uncovered in CompleteLattice.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLattice, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLattice, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLattice, data field sup is uncovered in CompleteLattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLattice, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLattice, data field sInf is uncovered in CompleteLattice.
                      It might be better to declare an instance of InfSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLattice, data field min is uncovered in LinearOrder.
                      It might be better to declare an instance of Min first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLattice, data field max is uncovered in LinearOrder.
                      It might be better to declare an instance of Max first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLattice, data field sSup is uncovered in CompleteLattice.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLattice, data field sInf is uncovered in CompleteLattice.
                      It might be better to declare an instance of InfSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLattice, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLattice, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[990/4301] Building Mathlib.Data.List.Nodup
[991/4301] Building Mathlib.Tactic.NormNum.OfScientific
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Group, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Group, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Group, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Group, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Group, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Group, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[992/4301] Building Mathlib.Control.Random
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Pi, data field add is uncovered in Distrib.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Pi, data field mul is uncovered in Distrib.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Pi, data field toFun is uncovered in NonUnitalRingHom.
                      It might be better to declare an instance of MulHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Pi, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Pi, data field toFun is uncovered in NonUnitalRingHom.
                      It might be better to declare an instance of MulHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Pi, data field toFun is uncovered in NonUnitalRingHom.
                      It might be better to declare an instance of MulHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Pi, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Pi, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[993/4301] Building Mathlib.Data.Rat.Sqrt
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field tensorObj is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field tensorHom is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field whiskerLeft is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field whiskerRight is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field tensorUnit is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field associator is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field leftUnitor is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Category, data field rightUnitor is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[994/4301] Building Mathlib.Algebra.GCDMonoid.Basic
[995/4301] Building Mathlib.Algebra.Ring.Prod
[996/4301] Building Mathlib.Data.Rat.Cast.Lemmas
[997/4301] Building Mathlib.Data.Array.Lemmas
[998/4301] Building Mathlib.Data.Fin.OrderHom
[999/4301] Building Mathlib.Data.List.EditDistance.Estimator
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Seq.Seq, data field map is uncovered in Monad.
                      It might be better to declare an instance of Functor first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Seq.Seq, data field pure is uncovered in Monad.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Seq.Seq, data field bind is uncovered in Monad.
                      It might be better to declare an instance of Bind first.
[1000/4301] Building Mathlib.CategoryTheory.CommSq
[1001/4301] Building Mathlib.CategoryTheory.DiscreteCategory
[1002/4301] Building Mathlib.Data.Set.Intervals.ProjIcc
[1003/4301] Building Mathlib.Algebra.GroupRingAction.Basic
[1004/4301] Building Mathlib.Algebra.Order.Pi
[1005/4301] Building Mathlib.CategoryTheory.Bicategory.End
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Prod, data field toFun is uncovered in NonUnitalRingHom.
                      It might be better to declare an instance of MulHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Prod, data field toFun is uncovered in NonUnitalRingHom.
                      It might be better to declare an instance of MulHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Prod, data field toFun is uncovered in NonUnitalRingHom.
                      It might be better to declare an instance of MulHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Prod, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Prod, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Prod, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Prod, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Prod, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Prod, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Prod, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Prod, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Prod, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[1006/4301] Building Mathlib.Tactic.CategoryTheory.MonoidalComp
[1007/4301] Building Mathlib.Data.List.Destutter
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GroupRingAction.Basic, data field smul is uncovered in MulSemiringAction.
                      It might be better to declare an instance of SMul first.
[1008/4301] Building Mathlib.CategoryTheory.Groupoid
[1009/4301] Building Mathlib.Order.Cover
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Currying, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Currying, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Currying, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Currying, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Currying, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Currying, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Currying, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Currying, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Currying, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Currying, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1010/4301] Building Mathlib.GroupTheory.GroupAction.Embedding
[1011/4301] Building Mathlib.Testing.SlimCheck.Gen
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Pi, data field npow is uncovered in OrderedCommGroup.
                      It might be better to declare an instance of Monoid first.
[1012/4301] Building Mathlib.Order.CompleteBooleanAlgebra
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.End, data field tensorObj is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.End, data field whiskerLeft is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.End, data field whiskerRight is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.End, data field tensorUnit is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.End, data field associator is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.End, data field leftUnitor is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.End, data field rightUnitor is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[1013/4301] Building Mathlib.Data.Seq.WSeq
[1014/4301] Building Mathlib.CategoryTheory.Monoidal.Functor
[1015/4301] Building Mathlib.Order.GaloisConnection
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid, data field reverse' is uncovered in Quiver.HasInvolutiveReverse.
                      It might be better to declare an instance of Quiver.HasReverse first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1016/4301] Building Mathlib.Data.Prod.TProd
[1017/4301] Building Mathlib.Data.List.Duplicate
[1018/4301] Building Mathlib.Algebra.ContinuedFractions.Basic
[1019/4301] Building Mathlib.CategoryTheory.LiftingProperties.Basic
[1020/4301] Building Mathlib.Data.List.BigOperators.Lemmas
[1021/4301] Building Mathlib.Data.List.ProdSigma
[1022/4301] Building Mathlib.Data.List.Join
[1023/4301] Building Mathlib.Data.List.Count
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GCDMonoid.Basic, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GCDMonoid.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GCDMonoid.Basic, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GCDMonoid.Basic, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GCDMonoid.Basic, data field gcd is uncovered in NormalizedGCDMonoid.
                      It might be better to declare an instance of GCDMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GCDMonoid.Basic, data field lcm is uncovered in NormalizedGCDMonoid.
                      It might be better to declare an instance of GCDMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GCDMonoid.Basic, data field lcm is uncovered in NormalizedGCDMonoid.
                      It might be better to declare an instance of GCDMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GCDMonoid.Basic, data field gcd is uncovered in NormalizedGCDMonoid.
                      It might be better to declare an instance of GCDMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GCDMonoid.Basic, data field normUnit is uncovered in NormalizedGCDMonoid.
                      It might be better to declare an instance of NormalizationMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GCDMonoid.Basic, data field gcd is uncovered in NormalizedGCDMonoid.
                      It might be better to declare an instance of GCDMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GCDMonoid.Basic, data field lcm is uncovered in NormalizedGCDMonoid.
                      It might be better to declare an instance of GCDMonoid first.
[1024/4301] Building Mathlib.Algebra.Ring.Aut
[1025/4301] Building Mathlib.Algebra.FreeMonoid.Basic
[1026/4301] Building Mathlib.Data.List.Zip
[1027/4301] Building Mathlib.Data.Fin.Tuple.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.GaloisConnection, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.GaloisConnection, data field sup is uncovered in SemilatticeSup.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.GaloisConnection, data field inf is uncovered in SemilatticeInf.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Order.GaloisConnection, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Order.GaloisConnection, data field sSup is uncovered in CompleteLattice.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.GaloisConnection, data field sInf is uncovered in CompleteLattice.
                      It might be better to declare an instance of InfSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.GaloisConnection, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Order.GaloisConnection, data field inf is uncovered in SemilatticeInf.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Order.GaloisConnection, data field sup is uncovered in SemilatticeSup.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.GaloisConnection, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.GaloisConnection, data field sInf is uncovered in CompleteLattice.
                      It might be better to declare an instance of InfSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.GaloisConnection, data field sSup is uncovered in CompleteLattice.
                      It might be better to declare an instance of SupSet first.
[1028/4301] Building Mathlib.Algebra.Order.Kleene
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Aut, data field mul is uncovered in Group.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Aut, data field one is uncovered in Group.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Aut, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Aut, data field div is uncovered in Group.
                      It might be better to declare an instance of Div first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Aut, data field npow is uncovered in Group.
                      It might be better to declare an instance of Monoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Aut, data field zpow is uncovered in Group.
                      It might be better to declare an instance of DivInvMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Aut, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Aut, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Aut, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Aut, data field smul is uncovered in MulSemiringAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Aut, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1029/4301] Building Mathlib.CategoryTheory.EpiMono
[1030/4301] Building Mathlib.Testing.SlimCheck.Sampleable
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.DiscreteCategory, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.DiscreteCategory, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.DiscreteCategory, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.DiscreteCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.DiscreteCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.DiscreteCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.DiscreteCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.DiscreteCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.DiscreteCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1031/4301] Building Mathlib.Data.Set.Intervals.IsoIoo
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteBooleanAlgebra, data field sSup is uncovered in CompleteAtomicBooleanAlgebra.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteBooleanAlgebra, data field sInf is uncovered in CompleteAtomicBooleanAlgebra.
                      It might be better to declare an instance of InfSet first.
[1032/4301] Building Mathlib.Algebra.Order.Positive.Field
[1033/4301] Building Mathlib.CategoryTheory.Groupoid.Basic
[1034/4301] Building Mathlib.Algebra.Function.Support
[1035/4301] Building Mathlib.CategoryTheory.Endomorphism
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.FreeMonoid.Basic, data field one is uncovered in CancelMonoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.FreeMonoid.Basic, data field mul is uncovered in CancelMonoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.FreeMonoid.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.FreeMonoid.Basic, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.FreeMonoid.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1036/4301] Building Mathlib.CategoryTheory.Groupoid.VertexGroup
[1037/4301] Building Mathlib.Algebra.ContinuedFractions.Translations
[1038/4301] Building Mathlib.Order.SuccPred.Basic
[1039/4301] Building Mathlib.Data.List.Permutation
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Kleene, data field le is uncovered in IdemSemiring.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Kleene, data field sup is uncovered in IdemSemiring.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Kleene, data field kstar is uncovered in KleeneAlgebra.
                      It might be better to declare an instance of KStar first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Kleene, data field kstar is uncovered in KleeneAlgebra.
                      It might be better to declare an instance of KStar first.
[1040/4301] Building Mathlib.CategoryTheory.LiftingProperties.Adjunction
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid.VertexGroup, data field mul is uncovered in Group.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid.VertexGroup, data field one is uncovered in Group.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid.VertexGroup, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid.VertexGroup, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid.VertexGroup, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid.VertexGroup, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1041/4301] Building Mathlib.Data.Nat.Choose.Bounds
[1042/4301] Building Mathlib.Data.Nat.Cast.Field
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endomorphism, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endomorphism, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endomorphism, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endomorphism, data field one is uncovered in Group.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endomorphism, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endomorphism, data field mul is uncovered in Group.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endomorphism, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endomorphism, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endomorphism, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endomorphism, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endomorphism, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endomorphism, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1043/4301] Building Mathlib.CategoryTheory.Category.GaloisConnection
[1044/4301] Building Mathlib.Data.Setoid.Basic
[1045/4301] Building Mathlib.Order.Heyting.Regular
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Seq.WSeq, data field map is uncovered in Monad.
                      It might be better to declare an instance of Functor first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Seq.WSeq, data field pure is uncovered in Monad.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Seq.WSeq, data field bind is uncovered in Monad.
                      It might be better to declare an instance of Bind first.
[1046/4301] Building Mathlib.Order.ModularLattice
[1047/4301] Building Mathlib.Data.List.Dedup
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Functor, data field obj is uncovered in CategoryTheory.LaxMonoidalFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Functor, data field map is uncovered in CategoryTheory.LaxMonoidalFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Functor, data field ε is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Functor, data field μ is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Functor, data field ε is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Functor, data field μ is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[1048/4301] Building Mathlib.Order.Hom.Order
[1049/4301] Building Mathlib.CategoryTheory.PUnit
[1050/4301] Building Mathlib.CategoryTheory.PEmpty
[1051/4301] Building Mathlib.CategoryTheory.Groupoid.FreeGroupoid
[1052/4301] Building Mathlib.CategoryTheory.Balanced
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.PEmpty, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.PEmpty, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1053/4301] Building Mathlib.Testing.SlimCheck.Testable
[1054/4301] Building Mathlib.Tactic.CancelDenoms.Core
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Order, data field sup is uncovered in SemilatticeSup.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Order, data field inf is uncovered in SemilatticeInf.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Order, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.Order, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[1055/4301] Building Mathlib.Algebra.FreeMonoid.Count
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Setoid.Basic, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Setoid.Basic, data field lt is uncovered in PartialOrder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Setoid.Basic, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Setoid.Basic, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Setoid.Basic, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Setoid.Basic, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Setoid.Basic, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[1056/4301] Building Mathlib.Data.List.Rotate
[1057/4301] Building Mathlib.CategoryTheory.Bicategory.LocallyDiscrete
[1058/4301] Building Mathlib.Data.Set.Lattice
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.ModularLattice, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.ModularLattice, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.ModularLattice, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.ModularLattice, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[1059/4301] Building Mathlib.Algebra.ContinuedFractions.ContinuantsRecurrence
[1060/4301] Building Mathlib.Algebra.ContinuedFractions.TerminatedStable
[1061/4301] Building Mathlib.CategoryTheory.Conj
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.FreeMonoid.Count, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[1062/4301] Building Mathlib.Data.Seq.Parallel
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.PUnit, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.PUnit, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1063/4301] Building Mathlib.Data.List.Range
[1064/4301] Building Mathlib.CategoryTheory.Bicategory.SingleObj
[1065/4301] Building Mathlib.CategoryTheory.Monoidal.End
[1066/4301] Building Mathlib.CategoryTheory.Monoidal.Free.Basic
[1067/4301] Building Mathlib.CategoryTheory.Types
[1068/4301] Building Mathlib.Algebra.Function.Indicator
[1069/4301] Building Mathlib.CategoryTheory.Monoidal.Functorial
[1070/4301] Building Mathlib.CategoryTheory.Monoidal.NaturalTransformation
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.LocallyDiscrete, data field Hom is uncovered in CategoryTheory.CategoryStruct.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.LocallyDiscrete, data field obj is uncovered in CategoryTheory.OplaxFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.LocallyDiscrete, data field map is uncovered in CategoryTheory.OplaxFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.LocallyDiscrete, data field map₂ is uncovered in CategoryTheory.OplaxFunctor.
                      It might be better to declare an instance of CategoryTheory.PrelaxFunctor first.
[1071/4301] Building Mathlib.Order.FixedPoints
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Types, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Types, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Types, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Types, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Types, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Types, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Types, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Types, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Types, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1072/4301] Building Mathlib.Algebra.CharZero.Lemmas
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Functorial, data field obj is uncovered in CategoryTheory.LaxMonoidalFunctor.
                      It might be better to declare an instance of Prefunctor first.
[1073/4301] Building Mathlib.Data.Int.CharZero
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.SingleObj, data field Hom is uncovered in CategoryTheory.Bicategory.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.SingleObj, data field id is uncovered in CategoryTheory.Bicategory.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.SingleObj, data field comp is uncovered in CategoryTheory.Bicategory.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.SingleObj, data field obj is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.SingleObj, data field map is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.SingleObj, data field ε is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.SingleObj, data field μ is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.SingleObj, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.SingleObj, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1074/4301] Building Mathlib.Data.List.OfFn
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.FixedPoints, data field sup is uncovered in SemilatticeSup.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.FixedPoints, data field inf is uncovered in SemilatticeInf.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Order.FixedPoints, data field sSup is uncovered in CompleteSemilatticeSup.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.FixedPoints, data field sInf is uncovered in CompleteSemilatticeInf.
                      It might be better to declare an instance of InfSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.FixedPoints, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Order.FixedPoints, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[1075/4301] Building Mathlib.Data.Nat.SuccPred
[1076/4301] Building Mathlib.Data.Fin.SuccPred
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Basic, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Basic, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Basic, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Basic, data field tensorObj is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Basic, data field tensorHom is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Basic, data field whiskerLeft is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Basic, data field whiskerRight is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Basic, data field tensorUnit is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Basic, data field associator is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Basic, data field leftUnitor is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Basic, data field rightUnitor is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Basic, data field obj is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Basic, data field map is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Basic, data field ε is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Basic, data field μ is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[1077/4301] Building Mathlib.Order.SuccPred.Relation
[1078/4301] Building Mathlib.CategoryTheory.Limits.Shapes.StrongEpi
[1079/4301] Building Mathlib.CategoryTheory.Adjunction.Mates
[1080/4301] Building Mathlib.Order.SuccPred.Limit
[1081/4301] Building Mathlib.Data.List.NatAntidiagonal
[1082/4301] Building Mathlib.Tactic.SlimCheck
[1083/4301] Building Mathlib.CategoryTheory.Bicategory.Coherence
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Function.Indicator, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1084/4301] Building Mathlib.Data.List.Perm
[1085/4301] Building Mathlib.Data.Fin.VecNotation
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.NaturalTransformation, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.NaturalTransformation, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.NaturalTransformation, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.NaturalTransformation, data field app is uncovered in CategoryTheory.MonoidalNatTrans.
                      It might be better to declare an instance of CategoryTheory.NatTrans first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.NaturalTransformation, data field app is uncovered in CategoryTheory.MonoidalNatTrans.
                      It might be better to declare an instance of CategoryTheory.NatTrans first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.NaturalTransformation, data field app is uncovered in CategoryTheory.MonoidalNatTrans.
                      It might be better to declare an instance of CategoryTheory.NatTrans first.
[1086/4301] Building Mathlib.Data.List.Intervals
[1087/4301] Building Mathlib.CategoryTheory.Core
[1088/4301] Building Mathlib.CategoryTheory.Functor.Hom
[1089/4301] Building Mathlib.CategoryTheory.UnivLE
[1090/4301] Building Mathlib.CategoryTheory.IsConnected
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Hom, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.Hom, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1091/4301] Building Mathlib.CategoryTheory.Category.Cat
[1092/4301] Building Mathlib.Data.Int.SuccPred
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Core, data field Hom is uncovered in CategoryTheory.Groupoid.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Core, data field id is uncovered in CategoryTheory.Groupoid.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Core, data field comp is uncovered in CategoryTheory.Groupoid.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Core, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Core, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Core, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Core, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Core, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Core, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1093/4301] Building Mathlib.Data.Rat.Cast.CharZero
[1094/4301] Building Mathlib.Tactic.Qify
[1095/4301] Building Mathlib.Data.List.Indexes
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Rat.Cast.CharZero, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[1097/4301] Building Mathlib.Data.List.Sort
[1097/4301] Building Mathlib.Data.List.FinRange
[1098/4301] Building Mathlib.CategoryTheory.Monoidal.Free.Coherence
[1099/4301] Building Mathlib.CategoryTheory.Monoidal.Discrete
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Lattice, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[1100/4301] Building Mathlib.CategoryTheory.Monoidal.Transport
[1101/4301] Building Mathlib.Data.Vector.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.IsConnected, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.IsConnected, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.IsConnected, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.IsConnected, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1102/4301] Building Mathlib.CategoryTheory.Functor.EpiMono
[1103/4301] Building Mathlib.Tactic.CategoryTheory.Coherence
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Cat, data field Hom is uncovered in CategoryTheory.Bicategory.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Cat, data field id is uncovered in CategoryTheory.Bicategory.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Cat, data field comp is uncovered in CategoryTheory.Bicategory.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Cat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Cat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Cat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Cat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1104/4301] Building Mathlib.Data.ENat.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.ENat.Basic, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[1105/4301] Building Mathlib.CategoryTheory.Yoneda
[1106/4301] Building Mathlib.Order.Grade
[1107/4301] Building Mathlib.Tactic.Positivity.Basic
[1108/4301] Building Mathlib.Algebra.Order.Field.Power
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Vector.Basic, data field map is uncovered in Traversable.
                      It might be better to declare an instance of Functor first.
[1109/4301] Building Mathlib.Data.Fin.Tuple.Monotone
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Grade, data field grade is uncovered in GradeBoundedOrder.
                      It might be better to declare an instance of GradeOrder first.
[1110/4301] Building Mathlib.Logic.Function.FromTypes
[1111/4301] Building Mathlib.Data.List.Sigma
[1112/4301] Building Mathlib.Data.List.Prime
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Coherence, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Coherence, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Coherence, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Coherence, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Coherence, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Free.Coherence, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1113/4301] Building Mathlib.Data.Rel
[1114/4301] Building Mathlib.Order.UpperLower.Basic
[1115/4301] Building Mathlib.Data.Set.Intervals.OrdConnectedComponent
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Coherence, data field obj is uncovered in CategoryTheory.PrelaxFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Coherence, data field map is uncovered in CategoryTheory.PrelaxFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Coherence, data field obj is uncovered in CategoryTheory.Pseudofunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Coherence, data field map is uncovered in CategoryTheory.Pseudofunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Coherence, data field map₂ is uncovered in CategoryTheory.Pseudofunctor.
                      It might be better to declare an instance of CategoryTheory.PrelaxFunctor first.
[1116/4301] Building Mathlib.Data.Set.Intervals.Pi
[1117/4301] Building Mathlib.Order.ConditionallyCompleteLattice.Basic
[1118/4301] Building Mathlib.Data.Set.Sigma
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Transport, data field ε is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Transport, data field μ is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[1119/4301] Building Mathlib.Order.Concept
[1120/4301] Building Mathlib.Data.Semiquot
[1121/4301] Building Mathlib.Data.Set.Accumulate
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Concept, data field fst is uncovered in Concept.
                      It might be better to declare an instance of Prod first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Concept, data field snd is uncovered in Concept.
                      It might be better to declare an instance of Prod first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Concept, data field fst is uncovered in Concept.
                      It might be better to declare an instance of Prod first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Concept, data field snd is uncovered in Concept.
                      It might be better to declare an instance of Prod first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Concept, data field sup is uncovered in Lattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Concept, data field top is uncovered in BoundedOrder.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Concept, data field bot is uncovered in BoundedOrder.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Concept, data field fst is uncovered in Concept.
                      It might be better to declare an instance of Prod first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Concept, data field snd is uncovered in Concept.
                      It might be better to declare an instance of Prod first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Concept, data field fst is uncovered in Concept.
                      It might be better to declare an instance of Prod first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Concept, data field snd is uncovered in Concept.
                      It might be better to declare an instance of Prod first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Concept, data field sup is uncovered in CompleteLattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Concept, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Concept, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Concept, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[1122/4301] Building Mathlib.Data.Set.Intervals.Disjoint
[1123/4301] Building Mathlib.Data.Rat.Cast.Order
[1124/4301] Building Mathlib.Tactic.NormNum.Inv
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Semiquot, data field pure is uncovered in Monad.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Semiquot, data field map is uncovered in Monad.
                      It might be better to declare an instance of Functor first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Semiquot, data field bind is uncovered in Monad.
                      It might be better to declare an instance of Bind first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Semiquot, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Semiquot, data field sup is uncovered in SemilatticeSup.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Semiquot, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[1125/4301] Building Mathlib.Data.List.Sublists
[1126/4301] Building Mathlib.Order.Chain
[1127/4301] Building Mathlib.Order.SuccPred.IntervalSucc
[1128/4301] Building Mathlib.Data.Set.Pointwise.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.End, data field tensorObj is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.End, data field whiskerLeft is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.End, data field whiskerRight is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.End, data field tensorHom is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.End, data field tensorUnit is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.End, data field associator is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.End, data field leftUnitor is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.End, data field rightUnitor is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.End, data field ε is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.End, data field μ is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[1129/4301] Building Mathlib.Order.Interval
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Chain, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[1130/4301] Building Mathlib.Tactic.Monotonicity.Lemmas
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Discrete, data field tensorUnit is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Discrete, data field tensorObj is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Discrete, data field whiskerLeft is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Discrete, data field whiskerRight is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Discrete, data field tensorHom is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Discrete, data field leftUnitor is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Discrete, data field rightUnitor is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Discrete, data field associator is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Discrete, data field obj is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Discrete, data field map is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Discrete, data field ε is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Discrete, data field μ is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Discrete, data field app is uncovered in CategoryTheory.MonoidalNatTrans.
                      It might be better to declare an instance of CategoryTheory.NatTrans first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Discrete, data field app is uncovered in CategoryTheory.MonoidalNatTrans.
                      It might be better to declare an instance of CategoryTheory.NatTrans first.
[1131/4301] Building Mathlib.GroupTheory.Subsemigroup.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.ConditionallyCompleteLattice.Basic, data field max is uncovered in LinearOrder.
                      It might be better to declare an instance of Max first.
[Elab.StructInst.coveredFields] In Mathlib.Order.ConditionallyCompleteLattice.Basic, data field min is uncovered in LinearOrder.
                      It might be better to declare an instance of Min first.
[Elab.StructInst.coveredFields] In Mathlib.Order.ConditionallyCompleteLattice.Basic, data field sInf is uncovered in ConditionallyCompleteLinearOrderBot.
                      It might be better to declare an instance of InfSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.ConditionallyCompleteLattice.Basic, data field sSup is uncovered in ConditionallyCompleteLinearOrderBot.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.ConditionallyCompleteLattice.Basic, data field sup is uncovered in ConditionallyCompleteLattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.ConditionallyCompleteLattice.Basic, data field inf is uncovered in ConditionallyCompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Order.ConditionallyCompleteLattice.Basic, data field sInf is uncovered in ConditionallyCompleteLattice.
                      It might be better to declare an instance of InfSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.ConditionallyCompleteLattice.Basic, data field inf is uncovered in ConditionallyCompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Order.ConditionallyCompleteLattice.Basic, data field sup is uncovered in ConditionallyCompleteLattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.ConditionallyCompleteLattice.Basic, data field sSup is uncovered in ConditionallyCompleteLattice.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.ConditionallyCompleteLattice.Basic, data field sup is uncovered in CompleteLinearOrder.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.ConditionallyCompleteLattice.Basic, data field inf is uncovered in CompleteLinearOrder.
                      It might be better to declare an instance of Inf first.
[1132/4301] Building Mathlib.Data.Set.Pairwise.Lattice
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Yoneda, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Yoneda, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Yoneda, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Yoneda, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Yoneda, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Yoneda, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Yoneda, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Yoneda, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1133/4301] Building Mathlib.Logic.Small.Set
[1134/4301] Building Mathlib.Data.Set.UnionLift
[1135/4301] Building Mathlib.Order.Hom.CompleteLattice
[1136/4301] Building Mathlib.Logic.Equiv.Fin
[1137/4301] Building Mathlib.CategoryTheory.Category.Quiv
[1138/4301] Building Mathlib.Data.Multiset.Basic
[1139/4301] Building Mathlib.Data.Nat.Pairing
[1140/4301] Building Mathlib.CategoryTheory.ConnectedComponents
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subsemigroup.Basic, data field le is uncovered in CompleteLattice.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subsemigroup.Basic, data field lt is uncovered in CompleteLattice.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subsemigroup.Basic, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subsemigroup.Basic, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subsemigroup.Basic, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subsemigroup.Basic, data field sInf is uncovered in CompleteLattice.
                      It might be better to declare an instance of InfSet first.
[1141/4301] Building Mathlib.CategoryTheory.IsomorphismClasses
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Interval, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Interval, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Interval, data field inf is uncovered in Lattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Interval, data field sSup is uncovered in CompleteLattice.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Interval, data field sInf is uncovered in CompleteLattice.
                      It might be better to declare an instance of InfSet first.
[1142/4301] Building Mathlib.Logic.Small.List
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Quiv, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Quiv, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Quiv, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Quiv, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Quiv, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Quiv, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Quiv, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Quiv, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Quiv, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Quiv, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Quiv, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1143/4301] Building Mathlib.Data.Num.Bitwise
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.IsomorphismClasses, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.IsomorphismClasses, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1144/4301] Building Mathlib.Data.Vector.Mem
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Logic.Equiv.Fin, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Logic.Equiv.Fin, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[1145/4301] Building Mathlib.Data.Vector.Snoc
[1146/4301] Building Mathlib.Order.Closure
[1147/4301] Building Mathlib.Data.Set.Functor
[1148/4301] Building Mathlib.Order.Atoms
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.CompleteLattice, data field toFun is uncovered in CompleteLatticeHom.
                      It might be better to declare an instance of sInfHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.CompleteLattice, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.CompleteLattice, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.CompleteLattice, data field toFun is uncovered in CompleteLatticeHom.
                      It might be better to declare an instance of sInfHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.CompleteLattice, data field toFun is uncovered in CompleteLatticeHom.
                      It might be better to declare an instance of sInfHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.CompleteLattice, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Hom.CompleteLattice, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[1149/4301] Building Mathlib.CategoryTheory.Functor.ReflectsIso
[1150/4301] Building Mathlib.Logic.Function.OfArity
[1151/4301] Building Mathlib.CategoryTheory.Monoidal.CoherenceLemmas
[1152/4301] Building Mathlib.CategoryTheory.Bicategory.Adjunction
[1153/4301] Building Mathlib.Data.PFun
[1154/4301] Building Mathlib.Algebra.Order.Hom.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Functor, data field pure is uncovered in Monad.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Functor, data field bind is uncovered in Monad.
                      It might be better to declare an instance of Bind first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Functor, data field seq is uncovered in Monad.
                      It might be better to declare an instance of Seq first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Functor, data field map is uncovered in Monad.
                      It might be better to declare an instance of Functor first.
[1155/4301] Building Mathlib.Data.List.NodupEquivFin
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Closure, data field toFun is uncovered in ClosureOperator.
                      It might be better to declare an instance of OrderHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Closure, data field toFun is uncovered in ClosureOperator.
                      It might be better to declare an instance of OrderHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Closure, data field toFun is uncovered in ClosureOperator.
                      It might be better to declare an instance of OrderHom first.
[1156/4301] Building Mathlib.Data.Vector.Zip
[1157/4301] Building Mathlib.Data.List.AList
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Pointwise.Basic, data field inv is uncovered in InvolutiveInv.
                      It might be better to declare an instance of Inv first.
[1158/4301] Building Mathlib.CategoryTheory.Monoidal.Opposite
[1159/4301] Building Mathlib.Order.Zorn
[1160/4301] Building Mathlib.Algebra.Order.Support
[1161/4301] Building Mathlib.Order.SuccPred.CompleteLinearOrder
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.PFun, data field pure is uncovered in Monad.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.Data.PFun, data field bind is uncovered in Monad.
                      It might be better to declare an instance of Bind first.
[Elab.StructInst.coveredFields] In Mathlib.Data.PFun, data field map is uncovered in Monad.
                      It might be better to declare an instance of Functor first.
[1162/4301] Building Mathlib.Algebra.Tropical.Lattice
[1163/4301] Building Mathlib.Order.Monotone.Extension
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.UpperLower.Basic, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.UpperLower.Basic, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.UpperLower.Basic, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.UpperLower.Basic, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.UpperLower.Basic, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.UpperLower.Basic, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[1164/4301] Building Mathlib.Order.Copy
[1165/4301] Building Mathlib.CategoryTheory.Adjunction.FullyFaithful
[1166/4301] Building Mathlib.Tactic.Monotonicity
[1167/4301] Building Mathlib.Tactic.NormNum.Eq
[1168/4301] Building Mathlib.Data.Set.Intervals.Monotone
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Atoms, data field le is uncovered in Preorder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Atoms, data field compl is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of HasCompl first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Atoms, data field sdiff is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of SDiff first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Atoms, data field sSup is uncovered in CompleteLattice.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Atoms, data field sInf is uncovered in CompleteLattice.
                      It might be better to declare an instance of InfSet first.
[1169/4301] Building Mathlib.Data.Fin.FlagRange
[1170/4301] Building Mathlib.Order.OrdContinuous
[1171/4301] Building Mathlib.Data.Int.ConditionallyCompleteOrder
[1172/4301] Building Mathlib.Tactic.Positivity
[1173/4301] Building Mathlib.CategoryTheory.Adjunction.Opposites
[1174/4301] Building Mathlib.GroupTheory.Submonoid.Basic
[1175/4301] Building Mathlib.GroupTheory.Subsemigroup.Membership
[1176/4301] Building Mathlib.Logic.Equiv.Nat
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Int.ConditionallyCompleteOrder, data field sSup is uncovered in ConditionallyCompleteLinearOrder.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Int.ConditionallyCompleteOrder, data field sInf is uncovered in ConditionallyCompleteLinearOrder.
                      It might be better to declare an instance of InfSet first.
[1177/4301] Building Mathlib.Order.OmegaCompletePartialOrder
[1178/4301] Building Mathlib.Order.ConditionallyCompleteLattice.Group
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field tensorObj is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field whiskerLeft is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field whiskerRight is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field tensorHom is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field tensorUnit is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field associator is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field leftUnitor is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field rightUnitor is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field tensorObj is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field whiskerLeft is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field whiskerRight is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field tensorHom is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field tensorUnit is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field associator is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field leftUnitor is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Opposite, data field rightUnitor is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[1179/4301] Building Mathlib.Order.CompleteLatticeIntervals
[1180/4301] Building Mathlib.Data.Vector.MapLemmas
[1181/4301] Building Mathlib.CategoryTheory.Limits.Cones
[1182/4301] Building Mathlib.CategoryTheory.Monad.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field le is uncovered in Lattice.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field sup is uncovered in Lattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field inf is uncovered in Lattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field lt is uncovered in Lattice.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field le is uncovered in DistribLattice.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field sup is uncovered in DistribLattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field inf is uncovered in DistribLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field lt is uncovered in DistribLattice.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field le is uncovered in CompleteLattice.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field sup is uncovered in CompleteLattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field sSup is uncovered in CompleteLattice.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field sInf is uncovered in CompleteLattice.
                      It might be better to declare an instance of InfSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field le is uncovered in ConditionallyCompleteLattice.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field sup is uncovered in ConditionallyCompleteLattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field inf is uncovered in ConditionallyCompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field sSup is uncovered in ConditionallyCompleteLattice.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Copy, data field sInf is uncovered in ConditionallyCompleteLattice.
                      It might be better to declare an instance of InfSet first.
[1183/4301] Building Mathlib.Control.Traversable.Instances
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Basic, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Basic, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Basic, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Basic, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Basic, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Basic, data field le is uncovered in CompleteLattice.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Basic, data field lt is uncovered in CompleteLattice.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Basic, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Basic, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Basic, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Basic, data field sInf is uncovered in CompleteLattice.
                      It might be better to declare an instance of InfSet first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Basic, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Basic, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1184/4301] Building Mathlib.Data.Set.Subset
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLatticeIntervals, data field sSup is uncovered in CompleteLattice.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLatticeIntervals, data field sInf is uncovered in CompleteLattice.
                      It might be better to declare an instance of InfSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLatticeIntervals, data field sSup is uncovered in CompleteLattice.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteLatticeIntervals, data field sInf is uncovered in CompleteLattice.
                      It might be better to declare an instance of InfSet first.
[1185/4301] Building Mathlib.CategoryTheory.Skeletal
[1186/4301] Building Mathlib.Data.Fin.Tuple.Curry
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.OmegaCompletePartialOrder, data field toFun is uncovered in OmegaCompletePartialOrder.ContinuousHom.
                      It might be better to declare an instance of OrderHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.OmegaCompletePartialOrder, data field toFun is uncovered in OmegaCompletePartialOrder.ContinuousHom.
                      It might be better to declare an instance of OrderHom first.
[1187/4301] Building Mathlib.Data.Set.Semiring
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Multiset.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Multiset.Basic, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Multiset.Basic, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Multiset.Basic, data field zero is uncovered in OrderedCancelAddCommMonoid.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Multiset.Basic, data field add is uncovered in OrderedCancelAddCommMonoid.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Multiset.Basic, data field nsmul is uncovered in OrderedCancelAddCommMonoid.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Multiset.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Multiset.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Multiset.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Multiset.Basic, data field sup is uncovered in Lattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Multiset.Basic, data field inf is uncovered in Lattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Multiset.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[1188/4301] Building Mathlib.SetTheory.ZFC.Basic
[1189/4301] Building Mathlib.SetTheory.Cardinal.SchroederBernstein
[1190/4301] Building Mathlib.Order.Extension.Linear
[1191/4301] Building Mathlib.Data.Nat.Cast.SetInterval
[1192/4301] Building Mathlib.GroupTheory.Subsemigroup.Operations
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Semiring, data field nsmul is uncovered in AddCommMonoid.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Semiring, data field mul is uncovered in NonUnitalNonAssocSemiring.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Set.Semiring, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[1193/4301] Building Mathlib.Algebra.Ring.Fin
[1194/4301] Building Mathlib.Tactic.Ring.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Extension.Linear, data field le is uncovered in LinearOrder.
                      It might be better to declare an instance of LE first.
[1195/4301] Building Mathlib.Data.Set.Pointwise.ListOfFn
[1196/4301] Building Mathlib.Order.ZornAtoms
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.Fin, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[1197/4301] Building Mathlib.Order.Minimal
[1198/4301] Building Mathlib.Order.UpperLower.Hom
[1199/4301] Building Mathlib.Data.Set.Pointwise.Interval
[1200/4301] Building Mathlib.Algebra.Bounds
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Basic, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Basic, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Basic, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Basic, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1201/4301] Building Mathlib.Algebra.Order.AbsoluteValue
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Skeletal, data field le is uncovered in Preorder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Skeletal, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Skeletal, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Skeletal, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Skeletal, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Skeletal, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Skeletal, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Skeletal, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Skeletal, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Skeletal, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Skeletal, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1202/4301] Building Mathlib.Order.SemiconjSup
[1203/4301] Building Mathlib.Data.DList.Instances
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Minimal, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Minimal, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Minimal, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Minimal, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Minimal, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Minimal, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Minimal, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Minimal, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[1204/4301] Building Mathlib.Control.LawfulFix
[1205/4301] Building Mathlib.Order.CompletePartialOrder
[1206/4301] Building Mathlib.Data.Num.Lemmas
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subsemigroup.Operations, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subsemigroup.Operations, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subsemigroup.Operations, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subsemigroup.Operations, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subsemigroup.Operations, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subsemigroup.Operations, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subsemigroup.Operations, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subsemigroup.Operations, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subsemigroup.Operations, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subsemigroup.Operations, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[1207/4301] Building Mathlib.Data.Multiset.Sort
[1208/4301] Building Mathlib.Algebra.BigOperators.Multiset.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.CompletePartialOrder, data field sSup is uncovered in CompletePartialOrder.
                      It might be better to declare an instance of SupSet first.
[1209/4301] Building Mathlib.Data.Multiset.Range
[1210/4301] Building Mathlib.RingTheory.OreLocalization.OreSet
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.AbsoluteValue, data field toFun is uncovered in AbsoluteValue.
                      It might be better to declare an instance of MulHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.AbsoluteValue, data field toFun is uncovered in AbsoluteValue.
                      It might be better to declare an instance of MulHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.AbsoluteValue, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[1211/4301] Building Mathlib.GroupTheory.Submonoid.MulOpposite
[1212/4301] Building Mathlib.Algebra.Order.Nonneg.Ring
[1213/4301] Building Mathlib.CategoryTheory.Adjunction.Reflective
[1214/4301] Building Mathlib.CategoryTheory.Monoidal.Braided.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.MulOpposite, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.MulOpposite, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.MulOpposite, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.MulOpposite, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[1215/4301] Building Mathlib.Data.Countable.Basic
[1216/4301] Building Mathlib.Algebra.GradedMonoid
[1217/4301] Building Mathlib.Tactic.NormNum.Ineq
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.BigOperators.Multiset.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[1218/4301] Building Mathlib.Data.LazyList.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Nonneg.Ring, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Nonneg.Ring, data field natCast is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Nonneg.Ring, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[1219/4301] Building Mathlib.CategoryTheory.Monad.Kleisli
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GradedMonoid, data field one is uncovered in Monoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GradedMonoid, data field mul is uncovered in Monoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GradedMonoid, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GradedMonoid, data field mul is uncovered in GradedMonoid.GMonoid.
                      It might be better to declare an instance of GradedMonoid.GMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GradedMonoid, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[1220/4301] Building Mathlib.Data.Sym.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.LazyList.Basic, data field map is uncovered in Traversable.
                      It might be better to declare an instance of Functor first.
[Elab.StructInst.coveredFields] In Mathlib.Data.LazyList.Basic, data field pure is uncovered in Monad.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.Data.LazyList.Basic, data field bind is uncovered in Monad.
                      It might be better to declare an instance of Bind first.
[1221/4301] Building Mathlib.GroupTheory.Submonoid.Operations
[1222/4301] Building Mathlib.SetTheory.ZFC.Ordinal
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Kleisli, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Kleisli, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Kleisli, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Kleisli, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Kleisli, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Kleisli, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Kleisli, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Kleisli, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Kleisli, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Kleisli, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Kleisli, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Kleisli, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Kleisli, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Kleisli, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1223/4301] Building Mathlib.Control.Fold
[1224/4301] Building Mathlib.Logic.Encodable.Basic
[1225/4301] Building Mathlib.CategoryTheory.Monad.Algebra
[1226/4301] Building Mathlib.CategoryTheory.EssentiallySmall
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Control.Fold, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Control.Fold, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Control.Fold, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Control.Fold, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1227/4301] Building Mathlib.Algebra.Order.EuclideanAbsoluteValue
[1228/4301] Building Mathlib.Algebra.BigOperators.Multiset.Lemmas
[1229/4301] Building Mathlib.Algebra.Order.Nonneg.Field
[1230/4301] Building Mathlib.GroupTheory.Subsemigroup.Center
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.EssentiallySmall, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.EssentiallySmall, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.EssentiallySmall, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.EssentiallySmall, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.EssentiallySmall, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.EssentiallySmall, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.EssentiallySmall, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1231/4301] Building Mathlib.Algebra.GradedMulAction
[1232/4301] Building Mathlib.Algebra.Group.Freiman
[1233/4301] Building Mathlib.Algebra.BigOperators.Multiset.Abs
[1234/4301] Building Mathlib.Data.Multiset.Bind
[1235/4301] Building Mathlib.Data.NNRat.Defs
[1236/4301] Building Mathlib.Tactic.CancelDenoms
[1237/4301] Building Mathlib.Tactic.NormNum.DivMod
[1238/4301] Building Mathlib.CategoryTheory.Monad.Types
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Types, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Types, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Types, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Types, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1239/4301] Building Mathlib.Data.Rat.Encodable
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.NNRat.Defs, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[1240/4301] Building Mathlib.Logic.Encodable.Lattice
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field carrier is uncovered in AddSubmonoid.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field carrier is uncovered in AddSubmonoid.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Operations, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[1241/4301] Building Mathlib.Tactic.Linarith.Datatypes
[1242/4301] Building Mathlib.Tactic.Ring.PNat
[1243/4301] Building Mathlib.GroupTheory.Subsemigroup.Centralizer
[1244/4301] Building Mathlib.Order.Ideal
[1245/4301] Building Mathlib.Tactic.Ring.RingNF
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Algebra, data field Hom is uncovered in CategoryTheory.CategoryStruct.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Algebra, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Algebra, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Algebra, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Algebra, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Algebra, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Algebra, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Algebra, data field Hom is uncovered in CategoryTheory.CategoryStruct.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Algebra, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Algebra, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Algebra, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Algebra, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1246/4301] Building Mathlib.GroupTheory.Congruence
[1247/4301] Building Mathlib.GroupTheory.Submonoid.Order
[1248/4301] Building Mathlib.Data.Multiset.Sections
[1249/4301] Building Mathlib.Data.NNRat.Lemmas
[1250/4301] Building Mathlib.GroupTheory.Submonoid.Center
[1251/4301] Building Mathlib.CategoryTheory.Monad.Adjunction
[1252/4301] Building Mathlib.Tactic.NormNum
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field add is uncovered in AddMonoid.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field zero is uncovered in AddMonoid.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field natCast is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field one is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field mul is uncovered in CommSemiring.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field npow is uncovered in CommSemiring.
                      It might be better to declare an instance of Semiring first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field le is uncovered in OrderedCancelAddCommMonoid.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field lt is uncovered in OrderedCancelAddCommMonoid.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field add is uncovered in AddCommSemigroup.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field mul is uncovered in CommMonoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field one is uncovered in CommMonoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field npow is uncovered in CommMonoid.
                      It might be better to declare an instance of Monoid first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field add is uncovered in Distrib.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field mul is uncovered in Distrib.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field lt is uncovered in LinearOrder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field le is uncovered in LinearOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field lt is uncovered in LinearOrder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field le is uncovered in LinearOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field add is uncovered in AddMonoid.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field zero is uncovered in AddMonoid.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field neg is uncovered in AddCommGroup.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field one is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field natCast is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Num.Lemmas, data field mul is uncovered in LinearOrderedCommRing.
                      It might be better to declare an instance of Mul first.
[1253/4301] Building Mathlib.Data.Multiset.Functor
[1254/4301] Building Mathlib.Algebra.Star.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Ideal, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Ideal, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Ideal, data field carrier is uncovered in Order.Ideal.
                      It might be better to declare an instance of LowerSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Ideal, data field sup is uncovered in Lattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Ideal, data field inf is uncovered in Lattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Ideal, data field carrier is uncovered in Order.Ideal.
                      It might be better to declare an instance of LowerSet first.
[1255/4301] Building Mathlib.Data.Multiset.Nodup
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Order, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Order, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[1256/4301] Building Mathlib.Tactic.Linarith.Parsing
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Center, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[1257/4301] Building Mathlib.Tactic.Linarith.Elimination
[1258/4301] Building Mathlib.Data.FP.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Multiset.Functor, data field pure is uncovered in Monad.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Multiset.Functor, data field bind is uncovered in Monad.
                      It might be better to declare an instance of Bind first.
[1259/4301] Building Mathlib.Order.PFilter
[1260/4301] Building Mathlib.Tactic.Ring
[1261/4301] Building Mathlib.GroupTheory.Submonoid.Centralizer
[1262/4301] Building Mathlib.Tactic.NormNum.NatSqrt
[1263/4301] Building Mathlib.Tactic.NormNum.GCD
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.PFilter, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.PFilter, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[1264/4301] Building Mathlib.Data.Nat.ModEq
[1265/4301] Building Mathlib.Data.Nat.SqrtNormNum
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Centralizer, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[1266/4301] Building Mathlib.Tactic.Abel
[1267/4301] Building Mathlib.Tactic.Linarith.Preprocessing
[1268/4301] Building Mathlib.Algebra.Order.CauSeq.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Basic, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Basic, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Basic, data field star is uncovered in StarMul.
                      It might be better to declare an instance of Star first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Basic, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Basic, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Basic, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Basic, data field star is uncovered in StarMul.
                      It might be better to declare an instance of Star first.
[1269/4301] Building Mathlib.Algebra.ContinuedFractions.ConvergentsEquiv
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Congruence, data field r is uncovered in Con.
                      It might be better to declare an instance of Setoid first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Congruence, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Congruence, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Congruence, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Congruence, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Congruence, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Congruence, data field one is uncovered in MulOneClass.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Congruence, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Congruence, data field r is uncovered in Con.
                      It might be better to declare an instance of Setoid first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Congruence, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Congruence, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Congruence, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Congruence, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[1270/4301] Building Mathlib.RingTheory.Coprime.Basic
[1271/4301] Building Mathlib.Algebra.GroupPower.Identities
[1272/4301] Building Mathlib.Tactic.LinearCombination
[1273/4301] Building Mathlib.Order.PrimeIdeal
[1274/4301] Building Mathlib.Data.Multiset.Powerset
[1275/4301] Building Mathlib.Data.Multiset.Sum
[1276/4301] Building Mathlib.Data.Multiset.Pi
[1277/4301] Building Mathlib.Data.Multiset.Dedup
[1278/4301] Building Mathlib.Tactic.Linarith.Verification
[1279/4301] Building Mathlib.Tactic.Group
[1280/4301] Building Mathlib.Data.Multiset.NatAntidiagonal
[1281/4301] Building Mathlib.GroupTheory.Subgroup.Basic
[1282/4301] Building Mathlib.RingTheory.Congruence
[1283/4301] Building Mathlib.Algebra.Star.Pi
[1284/4301] Building Mathlib.Data.Nat.Parity
[1285/4301] Building Mathlib.Tactic.Polyrith
[1286/4301] Building Mathlib.Algebra.Module.Basic
[1287/4301] Building Mathlib.Tactic.NoncommRing
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Adjunction, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Adjunction, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Adjunction, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Adjunction, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1288/4301] Building Mathlib.Data.Multiset.Antidiagonal
[1289/4301] Building Mathlib.Algebra.Star.Prod
[1290/4301] Building Mathlib.Data.Int.ModEq
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Cones, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1291/4301] Building Mathlib.Data.Multiset.FinsetOps
[1292/4301] Building Mathlib.Data.Multiset.Fold
[1293/4301] Building Mathlib.Data.Nat.Hyperoperation
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.CauSeq.Basic, data field lt is uncovered in Preorder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.CauSeq.Basic, data field le is uncovered in Preorder.
                      It might be better to declare an instance of LE first.
[1294/4301] Building Mathlib.Data.Nat.EvenOddRec
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Congruence, data field r is uncovered in RingCon.
                      It might be better to declare an instance of Setoid first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Congruence, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Congruence, data field r is uncovered in RingCon.
                      It might be better to declare an instance of Setoid first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Congruence, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Congruence, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Congruence, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[1295/4301] Building Mathlib.CategoryTheory.Limits.IsLimit
[1296/4301] Building Mathlib.Tactic.Linarith.Frontend
[1297/4301] Building Mathlib.Data.Bool.Count
[1298/4301] Building Mathlib.Data.Nat.Prime
[1299/4301] Building Mathlib.Data.Int.Parity
[1300/4301] Building Mathlib.NumberTheory.FLT.Basic
[1301/4301] Building Mathlib.Algebra.Order.CauSeq.Completion
[1302/4301] Building Mathlib.Tactic.ModCases
[1303/4301] Building Mathlib.Algebra.GCDMonoid.Multiset
[1304/4301] Building Mathlib.Data.Multiset.Lattice
[1305/4301] Building Mathlib.Data.Finset.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Braided.Basic, data field ε is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Braided.Basic, data field μ is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Braided.Basic, data field μ is uncovered in CategoryTheory.BraidedFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Braided.Basic, data field ε is uncovered in CategoryTheory.BraidedFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Braided.Basic, data field μ is uncovered in CategoryTheory.BraidedFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Braided.Basic, data field ε is uncovered in CategoryTheory.BraidedFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[1306/4301] Building Mathlib.Tactic.Linarith
[1307/4301] Building Mathlib.CategoryTheory.Monoidal.Braided.Opposite
[1308/4301] Building Mathlib.CategoryTheory.Monoidal.Center
[1309/4301] Building Mathlib.CategoryTheory.Monoidal.Skeleton
[1310/4301] Building Mathlib.CategoryTheory.Monoidal.FunctorCategory
[1311/4301] Building Mathlib.Data.Nat.Choose.Dvd
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Basic, data field neg is uncovered in AddCommGroup.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Basic, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[1312/4301] Building Mathlib.Data.Int.NatPrime
[1313/4301] Building Mathlib.Data.Nat.Choose.Central
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Skeleton, data field mul is uncovered in Monoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Skeleton, data field one is uncovered in Monoid.
                      It might be better to declare an instance of One first.
[1314/4301] Building Mathlib.Data.Num.Prime
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.CauSeq.Completion, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.CauSeq.Completion, data field ratCast is uncovered in DivisionRing.
                      It might be better to declare an instance of RatCast first.
[1315/4301] Building Mathlib.Data.PNat.Prime
[1316/4301] Building Mathlib.Tactic.NormNum.Prime
[1317/4301] Building Mathlib.NumberTheory.EllipticDivisibilitySequence
[1318/4301] Building Mathlib.Order.RelSeries
[1319/4301] Building Mathlib.Data.Ordmap.Ordset
[1320/4301] Building Mathlib.Data.Nat.Factors
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.FunctorCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.FunctorCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1321/4301] Building Mathlib.Algebra.Order.Floor
[1322/4301] Building Mathlib.GroupTheory.GroupAction.Hom
[1323/4301] Building Mathlib.Algebra.Ring.AddAut
[1324/4301] Building Mathlib.Algebra.Module.MinimalAxioms
[1325/4301] Building Mathlib.Data.Real.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.IsLimit, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.IsLimit, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[1326/4301] Building Mathlib.Algebra.Order.Module.Synonym
[1327/4301] Building Mathlib.Algebra.Module.Prod
[1328/4301] Building Mathlib.Data.PNat.Xgcd
[1329/4301] Building Mathlib.Algebra.Module.Hom
[1330/4301] Building Mathlib.Data.Set.Pointwise.SMul
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Hom, data field toFun is uncovered in DistribMulActionHom.
                      It might be better to declare an instance of MulActionHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Hom, data field toFun is uncovered in DistribMulActionHom.
                      It might be better to declare an instance of MulActionHom first.
[1331/4301] Building Mathlib.Algebra.Module.Pi
[1332/4301] Building Mathlib.Data.Int.AbsoluteValue
[1333/4301] Building Mathlib.Algebra.PUnitInstances
[1334/4301] Building Mathlib.CategoryTheory.Category.Pairwise
[1335/4301] Building Mathlib.Data.PNat.Factors
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Int.AbsoluteValue, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[1336/4301] Building Mathlib.GroupTheory.GroupAction.DomAct.ActionHom
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.PUnitInstances, data field mul is uncovered in CommGroup.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.PUnitInstances, data field one is uncovered in CommGroup.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.PUnitInstances, data field inv is uncovered in CommGroup.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.PUnitInstances, data field div is uncovered in CommGroup.
                      It might be better to declare an instance of Div first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.PUnitInstances, data field npow is uncovered in CommGroup.
                      It might be better to declare an instance of Monoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.PUnitInstances, data field zpow is uncovered in CommGroup.
                      It might be better to declare an instance of DivInvMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.PUnitInstances, data field natCast is uncovered in CommRing.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.PUnitInstances, data field gcd is uncovered in NormalizedGCDMonoid.
                      It might be better to declare an instance of GCDMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.PUnitInstances, data field lcm is uncovered in NormalizedGCDMonoid.
                      It might be better to declare an instance of GCDMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.PUnitInstances, data field normUnit is uncovered in NormalizedGCDMonoid.
                      It might be better to declare an instance of NormalizationMonoid first.
[1337/4301] Building Mathlib.Algebra.Order.Module.Defs
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field natCast is uncovered in CommRing.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field intCast is uncovered in CommRing.
                      It might be better to declare an instance of IntCast first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field zero is uncovered in CommRing.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field one is uncovered in CommRing.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field mul is uncovered in CommRing.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field add is uncovered in CommRing.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field neg is uncovered in CommRing.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field sub is uncovered in CommRing.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field npow is uncovered in CommRing.
                      It might be better to declare an instance of Semiring first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field nsmul is uncovered in CommRing.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field zsmul is uncovered in CommRing.
                      It might be better to declare an instance of Ring first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field lt is uncovered in PartialOrder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field sup is uncovered in DistribLattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field le is uncovered in DistribLattice.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field inf is uncovered in DistribLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field inv is uncovered in LinearOrderedField.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Basic, data field ratCast is uncovered in LinearOrderedField.
                      It might be better to declare an instance of RatCast first.
[1338/4301] Building Mathlib.CategoryTheory.Limits.HasLimits
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.PNat.Factors, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.PNat.Factors, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[1339/4301] Building Mathlib.Data.Nat.PrimeNormNum
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Pairwise, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Pairwise, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Pairwise, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Pairwise, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Pairwise, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1340/4301] Building Mathlib.Data.Real.Sign
[1341/4301] Building Mathlib.Tactic.Rify
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.Basic, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.Basic, data field lt is uncovered in PartialOrder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.Basic, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.Basic, data field sup is uncovered in Lattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.Basic, data field inf is uncovered in Lattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.Basic, data field terminal is uncovered in Aesop.Options'.
                      It might be better to declare an instance of Aesop.Options first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.Basic, data field useDefaultSimpSet is uncovered in Aesop.Options'.
                      It might be better to declare an instance of Aesop.Options first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.Basic, data field warnOnNonterminal is uncovered in Aesop.Options'.
                      It might be better to declare an instance of Aesop.Options first.
[1342/4301] Building Mathlib.Data.Complex.Basic
[1343/4301] Building Mathlib.Algebra.Module.LinearMap.Basic
[1344/4301] Building Mathlib.Algebra.Ring.BooleanRing
[1345/4301] Building Mathlib.Data.Set.Constructions
[1346/4301] Building Mathlib.Data.Finset.Update
[1347/4301] Building Mathlib.Data.Finset.Order
[1348/4301] Building Mathlib.Data.Finset.Image
[1349/4301] Building Mathlib.Algebra.ContinuedFractions.Computation.Basic
[1350/4301] Building Mathlib.Algebra.Order.Nonneg.Floor
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1351/4301] Building Mathlib.Data.Int.Log
[1352/4301] Building Mathlib.Data.Rat.Floor
[1353/4301] Building Mathlib.Algebra.Order.Pointwise
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.BooleanRing, data field top is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.BooleanRing, data field bot is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.BooleanRing, data field compl is uncovered in BooleanAlgebra.
                      It might be better to declare an instance of HasCompl first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.BooleanRing, data field toFun is uncovered in BoundedLatticeHom.
                      It might be better to declare an instance of SupHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.BooleanRing, data field add is uncovered in NonUnitalCommRing.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.BooleanRing, data field zero is uncovered in NonUnitalCommRing.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.BooleanRing, data field neg is uncovered in NonUnitalCommRing.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.BooleanRing, data field mul is uncovered in NonUnitalCommRing.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.BooleanRing, data field nsmul is uncovered in NonUnitalCommRing.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.BooleanRing, data field zsmul is uncovered in NonUnitalCommRing.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.BooleanRing, data field one is uncovered in BooleanRing.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.BooleanRing, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.BooleanRing, data field nsmul is uncovered in BooleanRing.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.BooleanRing, data field zsmul is uncovered in BooleanRing.
                      It might be better to declare an instance of Ring first.
[1354/4301] Building Mathlib.Data.Set.Pointwise.Support
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Center, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Center, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Center, data field tensorObj is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Center, data field tensorHom is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Center, data field whiskerLeft is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Center, data field whiskerRight is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Center, data field tensorUnit is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Center, data field associator is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Center, data field leftUnitor is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Center, data field rightUnitor is uncovered in CategoryTheory.MonoidalCategory.
                      It might be better to declare an instance of CategoryTheory.MonoidalCategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Center, data field obj is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Center, data field map is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Center, data field ε is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Center, data field μ is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Center, data field obj is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Center, data field map is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Center, data field ε is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Center, data field μ is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[1355/4301] Building Mathlib.GroupTheory.GroupAction.Support
[1356/4301] Building Mathlib.Algebra.AddTorsor
[1357/4301] Building Mathlib.Algebra.Star.SelfAdjoint
[1358/4301] Building Mathlib.RingTheory.Subring.Units
[1359/4301] Building Mathlib.Algebra.GroupRingAction.Subobjects
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Basic, data field zero is uncovered in AddCommGroup.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Basic, data field add is uncovered in AddCommGroup.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Basic, data field neg is uncovered in AddCommGroup.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Basic, data field sub is uncovered in AddCommGroup.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Basic, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Basic, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Basic, data field natCast is uncovered in AddGroupWithOne.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Basic, data field intCast is uncovered in AddGroupWithOne.
                      It might be better to declare an instance of IntCast first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Basic, data field one is uncovered in AddGroupWithOne.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Basic, data field mul is uncovered in CommRing.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Basic, data field npow is uncovered in CommRing.
                      It might be better to declare an instance of Semiring first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Basic, data field star is uncovered in StarRing.
                      It might be better to declare an instance of Star first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Basic, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Basic, data field inv is uncovered in Field.
                      It might be better to declare an instance of Inv first.
[1360/4301] Building Mathlib.GroupTheory.Subgroup.Simple
[1361/4301] Building Mathlib.GroupTheory.Subgroup.Actions
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subring.Units, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[1362/4301] Building Mathlib.Data.Set.Pointwise.Iterate
[1363/4301] Building Mathlib.Algebra.Order.UpperLower
[1364/4301] Building Mathlib.Algebra.Module.PointwisePi
[1365/4301] Building Mathlib.GroupTheory.Subgroup.MulOpposite
[1366/4301] Building Mathlib.CategoryTheory.Groupoid.Subgroupoid
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.AddTorsor, data field vsub is uncovered in AddTorsor.
                      It might be better to declare an instance of VSub first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.AddTorsor, data field vadd is uncovered in AddTorsor.
                      It might be better to declare an instance of VAdd first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.AddTorsor, data field vsub is uncovered in AddTorsor.
                      It might be better to declare an instance of VSub first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.AddTorsor, data field vadd is uncovered in AddTorsor.
                      It might be better to declare an instance of VAdd first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.AddTorsor, data field vsub is uncovered in AddTorsor.
                      It might be better to declare an instance of VSub first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.AddTorsor, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1367/4301] Building Mathlib.GroupTheory.SemidirectProduct
[1368/4301] Building Mathlib.GroupTheory.Subgroup.Saturated
[1369/4301] Building Mathlib.Algebra.ContinuedFractions.Computation.Translations
[1370/4301] Building Mathlib.GroupTheory.Subgroup.Order
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.MulOpposite, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.MulOpposite, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.MulOpposite, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.MulOpposite, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[1371/4301] Building Mathlib.GroupTheory.Subgroup.ZPowers
[1372/4301] Building Mathlib.Data.Finset.Card
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.UpperLower, data field one is uncovered in CommMonoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.UpperLower, data field one is uncovered in CommMonoid.
                      It might be better to declare an instance of One first.
[1373/4301] Building Mathlib.Algebra.Order.Archimedean
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.HasLimits, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.HasLimits, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.HasLimits, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.HasLimits, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1374/4301] Building Mathlib.LinearAlgebra.AffineSpace.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.SelfAdjoint, data field carrier is uncovered in AddSubgroup.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.SelfAdjoint, data field carrier is uncovered in AddSubgroup.
                      It might be better to declare an instance of AddSubsemigroup first.
[1375/4301] Building Mathlib.Data.Finset.Fold
[1376/4301] Building Mathlib.Data.Finset.Pi
[1377/4301] Building Mathlib.Data.Fintype.Basic
[1378/4301] Building Mathlib.CategoryTheory.Monoidal.Limits
[1379/4301] Building Mathlib.CategoryTheory.Limits.Unit
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid.Subgroupoid, data field Hom is uncovered in CategoryTheory.Groupoid.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid.Subgroupoid, data field id is uncovered in CategoryTheory.Groupoid.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid.Subgroupoid, data field comp is uncovered in CategoryTheory.Groupoid.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid.Subgroupoid, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid.Subgroupoid, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid.Subgroupoid, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid.Subgroupoid, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid.Subgroupoid, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid.Subgroupoid, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid.Subgroupoid, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Groupoid.Subgroupoid, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1380/4301] Building Mathlib.CategoryTheory.Limits.Shapes.Equalizers
[1381/4301] Building Mathlib.CategoryTheory.Limits.Pi
[1382/4301] Building Mathlib.CategoryTheory.Limits.Preserves.Basic
[1383/4301] Building Mathlib.Algebra.Order.Module.Pointwise
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.SemidirectProduct, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.SemidirectProduct, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.SemidirectProduct, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.SemidirectProduct, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.SemidirectProduct, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1384/4301] Building Mathlib.CategoryTheory.Limits.Shapes.Products
[1385/4301] Building Mathlib.CategoryTheory.Limits.Shapes.WidePullbacks
[1386/4301] Building Mathlib.Algebra.Star.Unitary
[1387/4301] Building Mathlib.Algebra.Star.Order
[1388/4301] Building Mathlib.CategoryTheory.Limits.Shapes.Terminal
[1389/4301] Building Mathlib.CategoryTheory.Limits.Fubini
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[1390/4301] Building Mathlib.Algebra.Order.Module.OrderedSMul
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Unitary, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Unitary, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Unitary, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Unitary, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1391/4301] Building Mathlib.Algebra.GCDMonoid.Finset
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Fintype.Basic, data field top is uncovered in BoundedOrder.
                      It might be better to declare an instance of Top first.
[1392/4301] Building Mathlib.Data.Finset.Sum
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Order, data field toFun is uncovered in NonUnitalRingHom.
                      It might be better to declare an instance of MulHom first.
[1393/4301] Building Mathlib.Data.Finset.Fin
[1394/4301] Building Mathlib.Data.Finset.Prod
[1395/4301] Building Mathlib.Data.Finset.Option
[1396/4301] Building Mathlib.Data.Real.Archimedean
[1397/4301] Building Mathlib.Algebra.AddConstMap.Basic
[1398/4301] Building Mathlib.Algebra.Module.LinearMap.End
[1399/4301] Building Mathlib.GroupTheory.Archimedean
[1400/4301] Building Mathlib.Algebra.Module.LinearMap.Pointwise
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Archimedean, data field sSup is uncovered in ConditionallyCompleteLinearOrder.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.Archimedean, data field sInf is uncovered in ConditionallyCompleteLinearOrder.
                      It might be better to declare an instance of InfSet first.
[1401/4301] Building Mathlib.Algebra.Order.Hom.Ring
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Equalizers, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Equalizers, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Equalizers, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Equalizers, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Equalizers, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Equalizers, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Equalizers, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1402/4301] Building Mathlib.Data.Fintype.Pi
[1403/4301] Building Mathlib.Tactic.FinCases
[1404/4301] Building Mathlib.Data.Fin.Fin2
[1405/4301] Building Mathlib.Data.Fintype.Quotient
[1406/4301] Building Mathlib.Data.Matrix.DMatrix
[1407/4301] Building Mathlib.Algebra.Order.Ring.Star
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Terminal, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Terminal, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[1408/4301] Building Mathlib.Algebra.Order.Nonneg.Module
[1409/4301] Building Mathlib.Data.FinEnum
[1410/4301] Building Mathlib.Control.EquivFunctor.Instances
[1411/4301] Building Mathlib.Data.Int.Star
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Fubini, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Fubini, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Fubini, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Fubini, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1412/4301] Building Mathlib.Algebra.Order.Monovary
[1413/4301] Building Mathlib.CategoryTheory.Limits.Preserves.Limits
[1414/4301] Building Mathlib.CategoryTheory.Limits.Creates
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.DMatrix, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[1415/4301] Building Mathlib.Data.Real.Pointwise
[1416/4301] Building Mathlib.CategoryTheory.Limits.EssentiallySmall
[1417/4301] Building Mathlib.CategoryTheory.Adjunction.Evaluation
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.AddConstMap.Basic, data field coe is uncovered in AddConstMapClass.
                      It might be better to declare an instance of DFunLike first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.AddConstMap.Basic, data field mul is uncovered in Monoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.AddConstMap.Basic, data field one is uncovered in Monoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.AddConstMap.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1418/4301] Building Mathlib.CategoryTheory.Limits.Preserves.Shapes.Products
[1419/4301] Building Mathlib.GroupTheory.FreeGroup.Basic
[1420/4301] Building Mathlib.CategoryTheory.FinCategory.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field mul is uncovered in Monoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field one is uncovered in Monoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field natCast is uncovered in Semiring.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field intCast is uncovered in Ring.
                      It might be better to declare an instance of IntCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field smul is uncovered in Module.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LinearMap.End, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[1421/4301] Building Mathlib.Data.Fintype.Card
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.WidePullbacks, data field Hom is uncovered in CategoryTheory.CategoryStruct.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.WidePullbacks, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.WidePullbacks, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.WidePullbacks, data field Hom is uncovered in CategoryTheory.CategoryStruct.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.WidePullbacks, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.WidePullbacks, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.WidePullbacks, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.WidePullbacks, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.WidePullbacks, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.WidePullbacks, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1422/4301] Building Mathlib.Data.Rat.Star
[1423/4301] Building Mathlib.Data.Finset.PImage
[1424/4301] Building Mathlib.CategoryTheory.Limits.Shapes.WideEqualizers
[1425/4301] Building Mathlib.CategoryTheory.Limits.Shapes.SplitCoequalizer
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Creates, data field liftedCone is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Creates, data field validLift is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Creates, data field liftedCocone is uncovered in CategoryTheory.LiftsToColimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCocone first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Creates, data field validLift is uncovered in CategoryTheory.LiftsToColimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCocone first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Creates, data field liftedCone is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Creates, data field validLift is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Creates, data field liftedCocone is uncovered in CategoryTheory.LiftsToColimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCocone first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Creates, data field validLift is uncovered in CategoryTheory.LiftsToColimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCocone first.
[1426/4301] Building Mathlib.Tactic.IntervalCases
[1427/4301] Building Mathlib.CategoryTheory.ComposableArrows
[1428/4301] Building Mathlib.Data.Fin.Tuple.Finset
[1429/4301] Building Mathlib.CategoryTheory.Category.Factorisation
[1430/4301] Building Mathlib.CategoryTheory.Endofunctor.Algebra
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Fintype.Card, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[1431/4301] Building Mathlib.CategoryTheory.Limits.Shapes.ZeroObjects
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Factorisation, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Factorisation, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Factorisation, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Factorisation, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Factorisation, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Factorisation, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Factorisation, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1432/4301] Building Mathlib.Data.Fintype.Vector
[1433/4301] Building Mathlib.CategoryTheory.Monoidal.Mon_
[1434/4301] Building Mathlib.CategoryTheory.WithTerminal
[1435/4301] Building Mathlib.CategoryTheory.Limits.Preserves.Shapes.Terminal
[1436/4301] Building Mathlib.CategoryTheory.Comma.StructuredArrow
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.ZeroObjects, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.ZeroObjects, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[1437/4301] Building Mathlib.Data.TypeVec
[1438/4301] Building Mathlib.Data.Finset.Lattice
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.WideEqualizers, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.WideEqualizers, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.WideEqualizers, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.WideEqualizers, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.WideEqualizers, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1439/4301] Building Mathlib.Data.Sym.Sym2
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeGroup.Basic, data field mul is uncovered in Group.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeGroup.Basic, data field one is uncovered in Group.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeGroup.Basic, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeGroup.Basic, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeGroup.Basic, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeGroup.Basic, data field pure is uncovered in Monad.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeGroup.Basic, data field map is uncovered in Monad.
                      It might be better to declare an instance of Functor first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeGroup.Basic, data field bind is uncovered in Monad.
                      It might be better to declare an instance of Bind first.
[1440/4301] Building Mathlib.CategoryTheory.Limits.FunctorCategory
[1441/4301] Building Mathlib.Algebra.Module.Equiv
[1442/4301] Building Mathlib.Data.Vector3
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endofunctor.Algebra, data field Hom is uncovered in CategoryTheory.CategoryStruct.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endofunctor.Algebra, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endofunctor.Algebra, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endofunctor.Algebra, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endofunctor.Algebra, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endofunctor.Algebra, data field Hom is uncovered in CategoryTheory.CategoryStruct.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endofunctor.Algebra, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endofunctor.Algebra, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endofunctor.Algebra, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endofunctor.Algebra, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endofunctor.Algebra, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endofunctor.Algebra, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endofunctor.Algebra, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Endofunctor.Algebra, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1443/4301] Building Mathlib.CategoryTheory.Limits.Bicones
[1444/4301] Building Mathlib.CategoryTheory.Adjunction.Limits
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Adjunction.Evaluation, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Adjunction.Evaluation, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Adjunction.Evaluation, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Adjunction.Evaluation, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Adjunction.Evaluation, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Adjunction.Evaluation, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Adjunction.Evaluation, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Adjunction.Evaluation, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1445/4301] Building Mathlib.CategoryTheory.Limits.FullSubcategory
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Bicones, data field Hom is uncovered in CategoryTheory.CategoryStruct.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Bicones, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Bicones, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1446/4301] Building Mathlib.Data.ZMod.Defs
[1447/4301] Building Mathlib.Order.JordanHolder
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.FunctorCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.FunctorCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.FunctorCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.FunctorCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1448/4301] Building Mathlib.Algebra.CharZero.Infinite
[1449/4301] Building Mathlib.Data.Finite.Set
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.Defs, data field add is uncovered in CommRing.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.Defs, data field zero is uncovered in CommRing.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.Defs, data field neg is uncovered in CommRing.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.Defs, data field sub is uncovered in CommRing.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.Defs, data field zsmul is uncovered in CommRing.
                      It might be better to declare an instance of Ring first.
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.Defs, data field nsmul is uncovered in CommRing.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.Defs, data field mul is uncovered in CommRing.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.Defs, data field one is uncovered in CommRing.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.Defs, data field natCast is uncovered in CommRing.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.Defs, data field intCast is uncovered in CommRing.
                      It might be better to declare an instance of IntCast first.
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.Defs, data field npow is uncovered in CommRing.
                      It might be better to declare an instance of Semiring first.
[1450/4301] Building Mathlib.CategoryTheory.Countable
[1451/4301] Building Mathlib.CategoryTheory.Limits.Preserves.Shapes.Equalizers
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Equiv, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Equiv, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Equiv, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Equiv, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Equiv, data field mul is uncovered in Group.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Equiv, data field one is uncovered in Group.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Equiv, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Equiv, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Equiv, data field smul is uncovered in DistribMulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Equiv, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Equiv, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Equiv, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Equiv, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[1452/4301] Building Mathlib.Tactic.Positivity.Finset
[1453/4301] Building Mathlib.Data.Fintype.Small
[1454/4301] Building Mathlib.Combinatorics.SetFamily.Intersecting
[1455/4301] Building Mathlib.Data.Fintype.Parity
[1456/4301] Building Mathlib.CategoryTheory.FinCategory.AsType
[1457/4301] Building Mathlib.GroupTheory.Perm.Support
[1458/4301] Building Mathlib.Data.Fintype.Option
[1459/4301] Building Mathlib.Data.Fintype.Prod
[1460/4301] Building Mathlib.Data.Fintype.Perm
[1461/4301] Building Mathlib.Data.Fintype.Sum
[1462/4301] Building Mathlib.GroupTheory.FreeGroup.IsFreeGroup
[1463/4301] Building Mathlib.Data.List.Sym
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field obj is uncovered in CategoryTheory.Pseudofunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field map is uncovered in CategoryTheory.Pseudofunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field map₂ is uncovered in CategoryTheory.Pseudofunctor.
                      It might be better to declare an instance of CategoryTheory.PrelaxFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field obj is uncovered in CategoryTheory.Pseudofunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field map is uncovered in CategoryTheory.Pseudofunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field map₂ is uncovered in CategoryTheory.Pseudofunctor.
                      It might be better to declare an instance of CategoryTheory.PrelaxFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.WithTerminal, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1464/4301] Building Mathlib.Logic.Denumerable
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FinCategory.AsType, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FinCategory.AsType, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FinCategory.AsType, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FinCategory.AsType, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FinCategory.AsType, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FinCategory.AsType, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FinCategory.AsType, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1465/4301] Building Mathlib.Data.UInt
[1466/4301] Building Mathlib.Control.Functor.Multivariate
[1467/4301] Building Mathlib.Order.GameAdd
[1468/4301] Building Mathlib.Algebra.Module.ULift
[1469/4301] Building Mathlib.LinearAlgebra.GeneralLinearGroup
[1470/4301] Building Mathlib.CategoryTheory.Limits.Yoneda
[1471/4301] Building Mathlib.Data.Fintype.Lattice
[1472/4301] Building Mathlib.Order.CountableDenseLinearOrder
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Logic.Denumerable, data field encode is uncovered in Denumerable.
                      It might be better to declare an instance of Encodable first.
[Elab.StructInst.coveredFields] In Mathlib.Logic.Denumerable, data field decode is uncovered in Denumerable.
                      It might be better to declare an instance of Encodable first.
[1473/4301] Building Mathlib.Order.Irreducible
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.GeneralLinearGroup, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.GeneralLinearGroup, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[1474/4301] Building Mathlib.Combinatorics.SetFamily.Compression.Down
[1475/4301] Building Mathlib.Data.Finset.Pairwise
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.ULift, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.ULift, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.ULift, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[1476/4301] Building Mathlib.Data.BitVec.Defs
[1477/4301] Building Mathlib.Algebra.Quandle
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mon_, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mon_, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mon_, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mon_, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mon_, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mon_, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mon_, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mon_, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mon_, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mon_, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mon_, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mon_, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mon_, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mon_, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mon_, data field obj is uncovered in CategoryTheory.LaxMonoidalFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mon_, data field map is uncovered in CategoryTheory.LaxMonoidalFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mon_, data field app is uncovered in CategoryTheory.MonoidalNatTrans.
                      It might be better to declare an instance of CategoryTheory.NatTrans first.
[1478/4301] Building Mathlib.CategoryTheory.Limits.Constructions.WeaklyInitial
[1479/4301] Building Mathlib.GroupTheory.GroupAction.Basic
[1480/4301] Building Mathlib.Algebra.Module.Opposites
[1481/4301] Building Mathlib.Data.Finset.Sort
[1482/4301] Building Mathlib.Algebra.Order.Field.Pi
[1483/4301] Building Mathlib.Data.Finset.Sigma
[1484/4301] Building Mathlib.Data.Finset.Powerset
[1485/4301] Building Mathlib.Combinatorics.Additive.Energy
[1486/4301] Building Mathlib.CategoryTheory.Monad.Limits
[1487/4301] Building Mathlib.CategoryTheory.Closed.Monoidal
[1488/4301] Building Mathlib.CategoryTheory.Limits.Shapes.Equivalence
[1489/4301] Building Mathlib.CategoryTheory.Limits.Preserves.Finite
[1490/4301] Building Mathlib.SetTheory.Game.PGame
[1491/4301] Building Mathlib.GroupTheory.Perm.List
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quandle, data field act is uncovered in Rack.
                      It might be better to declare an instance of Shelf first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quandle, data field act is uncovered in Quandle.
                      It might be better to declare an instance of Shelf first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quandle, data field invAct is uncovered in Quandle.
                      It might be better to declare an instance of Rack first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quandle, data field act is uncovered in Quandle.
                      It might be better to declare an instance of Shelf first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quandle, data field invAct is uncovered in Quandle.
                      It might be better to declare an instance of Rack first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quandle, data field mul is uncovered in DivInvMonoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quandle, data field one is uncovered in DivInvMonoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quandle, data field inv is uncovered in DivInvMonoid.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quandle, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1492/4301] Building Mathlib.Data.Multiset.Sym
[1493/4301] Building Mathlib.CategoryTheory.Monoidal.CommMon_
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Closed.Monoidal, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Closed.Monoidal, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1494/4301] Building Mathlib.CategoryTheory.Monad.EquivMon
[1495/4301] Building Mathlib.CategoryTheory.Monoidal.Mod_
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Limits, data field liftedCone is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Limits, data field validLift is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Limits, data field liftedCocone is uncovered in CategoryTheory.LiftsToColimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCocone first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Limits, data field validLift is uncovered in CategoryTheory.LiftsToColimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCocone first.
[1496/4301] Building Mathlib.Data.Char
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Basic, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Basic, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Basic, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Basic, data field carrier is uncovered in AddSubmonoid.
                      It might be better to declare an instance of AddSubsemigroup first.
[1497/4301] Building Mathlib.Data.BitVec.Lemmas
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Char, data field min is uncovered in LinearOrder.
                      It might be better to declare an instance of Min first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Char, data field max is uncovered in LinearOrder.
                      It might be better to declare an instance of Max first.
[1498/4301] Building Mathlib.CategoryTheory.Monoidal.Bimod
[1499/4301] Building Mathlib.Data.Fintype.Sigma
[1500/4301] Building Mathlib.Data.Fintype.Powerset
[1501/4301] Building Mathlib.Data.Fintype.List
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.StructuredArrow, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.StructuredArrow, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.StructuredArrow, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.StructuredArrow, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.StructuredArrow, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.StructuredArrow, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.StructuredArrow, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.StructuredArrow, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.StructuredArrow, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.StructuredArrow, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.StructuredArrow, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.StructuredArrow, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.StructuredArrow, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.StructuredArrow, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.StructuredArrow, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.StructuredArrow, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1502/4301] Building Mathlib.Data.Fintype.Sort
[1503/4301] Building Mathlib.Data.Finmap
[1504/4301] Building Mathlib.Data.Finset.PiInduction
[1505/4301] Building Mathlib.CategoryTheory.Limits.ExactFunctor
[1506/4301] Building Mathlib.Data.Finset.Sym
[1507/4301] Building Mathlib.Logic.Equiv.List
stdout:
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Game.PGame, data field lt is uncovered in Preorder.
                      It might be better to declare an instance of LT first.
[1508/4301] Building Mathlib.Data.String.Basic
[1509/4301] Building Mathlib.CategoryTheory.Monoidal.Rigid.Basic
[1510/4301] Building Mathlib.CategoryTheory.Closed.FunctorCategory
[1511/4301] Building Mathlib.Computability.TuringMachine
[1512/4301] Building Mathlib.GroupTheory.GroupAction.SubMulAction
[1513/4301] Building Mathlib.Data.ByteArray
[1514/4301] Building Mathlib.Combinatorics.SetFamily.HarrisKleitman
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.EquivMon, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.EquivMon, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.EquivMon, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.EquivMon, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.EquivMon, data field app is uncovered in CategoryTheory.MonadHom.
                      It might be better to declare an instance of CategoryTheory.NatTrans first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.EquivMon, data field app is uncovered in CategoryTheory.MonadHom.
                      It might be better to declare an instance of CategoryTheory.NatTrans first.
[1515/4301] Building Mathlib.Data.SetLike.Fintype
[1516/4301] Building Mathlib.CategoryTheory.Bicategory.Extension
[1517/4301] Building Mathlib.Order.SupIndep
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.SubMulAction, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[1518/4301] Building Mathlib.GroupTheory.GroupAction.ConjAct
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mod_, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mod_, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mod_, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mod_, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mod_, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mod_, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Mod_, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1519/4301] Building Mathlib.CategoryTheory.Adjunction.Comma
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.ComposableArrows, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.ComposableArrows, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.ComposableArrows, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.ComposableArrows, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.ComposableArrows, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.ComposableArrows, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.ComposableArrows, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.ComposableArrows, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.ComposableArrows, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.ComposableArrows, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1520/4301] Building Mathlib.CategoryTheory.Functor.KanExtension.Basic
[1521/4301] Building Mathlib.Algebra.BigOperators.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Extension, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Extension, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Extension, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Bicategory.Extension, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1522/4301] Building Mathlib.GroupTheory.Coset
[1523/4301] Building Mathlib.Data.List.Cycle
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.ConjAct, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.ConjAct, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.ConjAct, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.ConjAct, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.ConjAct, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1524/4301] Building Mathlib.Tactic.DeriveFintype
[1525/4301] Building Mathlib.CategoryTheory.Elements
[1526/4301] Building Mathlib.CategoryTheory.Limits.KanExtension
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.CommMon_, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.CommMon_, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.CommMon_, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.CommMon_, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.CommMon_, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.CommMon_, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.CommMon_, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.CommMon_, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.CommMon_, data field obj is uncovered in CategoryTheory.LaxBraidedFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.CommMon_, data field map is uncovered in CategoryTheory.LaxBraidedFunctor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.CommMon_, data field ε is uncovered in CategoryTheory.LaxBraidedFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.CommMon_, data field μ is uncovered in CategoryTheory.LaxBraidedFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.CommMon_, data field app is uncovered in CategoryTheory.MonoidalNatTrans.
                      It might be better to declare an instance of CategoryTheory.NatTrans first.
[1527/4301] Building Mathlib.Logic.Equiv.Array
[1528/4301] Building Mathlib.Data.W.Basic
[1529/4301] Building Mathlib.SetTheory.Game.Basic
[1530/4301] Building Mathlib.CategoryTheory.Comma.Over
[1531/4301] Building Mathlib.Computability.Primrec
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.KanExtension, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.KanExtension, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.KanExtension, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.KanExtension, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1532/4301] Building Mathlib.GroupTheory.GroupAction.SubMulAction.Pointwise
[1533/4301] Building Mathlib.Data.Finite.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.SubMulAction.Pointwise, data field mul is uncovered in MulOneClass.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.SubMulAction.Pointwise, data field one is uncovered in MulOneClass.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.SubMulAction.Pointwise, data field mul is uncovered in Semigroup.
                      It might be better to declare an instance of Mul first.
[1534/4301] Building Mathlib.Combinatorics.SetFamily.Kleitman
[1535/4301] Building Mathlib.CategoryTheory.Bicategory.Kan.IsKan
[1536/4301] Building Mathlib.Computability.Language
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Elements, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Elements, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Elements, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Elements, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Elements, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Elements, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Elements, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Elements, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Elements, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Elements, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Elements, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Elements, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Elements, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Elements, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Elements, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1537/4301] Building Mathlib.Data.Fintype.Array
[1538/4301] Building Mathlib.Data.W.Constructions
[1539/4301] Building Mathlib.Data.PFunctor.Univariate.Basic
[1540/4301] Building Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Bimod, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Bimod, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Bimod, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Bimod, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Bimod, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Bimod, data field Hom is uncovered in CategoryTheory.Bicategory.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Bimod, data field id is uncovered in CategoryTheory.Bicategory.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Bimod, data field comp is uncovered in CategoryTheory.Bicategory.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[1541/4301] Building Mathlib.Data.Set.Finite
[1542/4301] Building Mathlib.CategoryTheory.Grothendieck
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Computability.Language, data field add is uncovered in Semiring.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Computability.Language, data field zero is uncovered in Semiring.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Computability.Language, data field mul is uncovered in Semiring.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Computability.Language, data field one is uncovered in Semiring.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Computability.Language, data field natCast is uncovered in Semiring.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Computability.Language, data field nsmul is uncovered in Semiring.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Computability.Language, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Computability.Language, data field kstar is uncovered in KleeneAlgebra.
                      It might be better to declare an instance of KStar first.
[Elab.StructInst.coveredFields] In Mathlib.Computability.Language, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Computability.Language, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[1543/4301] Building Mathlib.Data.FunLike.Fintype
[1544/4301] Building Mathlib.Dynamics.PeriodicPts
[1545/4301] Building Mathlib.CategoryTheory.Bicategory.Kan.Adjunction
stdout:
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Game.Basic, data field zero is uncovered in AddCommGroupWithOne.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Game.Basic, data field one is uncovered in AddCommGroupWithOne.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Game.Basic, data field nsmul is uncovered in AddCommGroupWithOne.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Game.Basic, data field zsmul is uncovered in AddCommGroupWithOne.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Game.Basic, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Game.Basic, data field lt is uncovered in PartialOrder.
                      It might be better to declare an instance of LT first.
[1546/4301] Building Mathlib.Computability.Partrec
[1547/4301] Building Mathlib.Computability.RegularExpressions
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Over, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Over, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Over, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Over, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Over, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Over, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Over, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Over, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1548/4301] Building Mathlib.Computability.ContextFreeGrammar
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Grothendieck, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Grothendieck, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Grothendieck, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Grothendieck, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Grothendieck, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Grothendieck, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Grothendieck, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Grothendieck, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Grothendieck, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1549/4301] Building Mathlib.Data.PFunctor.Multivariate.Basic
[1550/4301] Building Mathlib.Data.PFunctor.Univariate.M
[1551/4301] Building Mathlib.Computability.DFA
[1552/4301] Building Mathlib.Computability.Ackermann
[1553/4301] Building Mathlib.SetTheory.Game.Impartial
[1554/4301] Building Mathlib.CategoryTheory.Functor.KanExtension.Pointwise
[1555/4301] Building Mathlib.Combinatorics.HalesJewett
[1556/4301] Building Mathlib.Data.Complex.BigOperators
[1557/4301] Building Mathlib.Data.Holor
[1558/4301] Building Mathlib.Data.Rat.BigOperators
[1559/4301] Building Mathlib.RingTheory.Prime
[1560/4301] Building Mathlib.Data.Nat.GCD.BigOperators
[1561/4301] Building Mathlib.CategoryTheory.Limits.Constructions.Over.Connected
[1562/4301] Building Mathlib.Data.QPF.Multivariate.Basic
[1563/4301] Building Mathlib.Data.PFunctor.Multivariate.W
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.KanExtension.Pointwise, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Functor.KanExtension.Pointwise, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1564/4301] Building Mathlib.GroupTheory.GroupAction.FixedPoints
[1565/4301] Building Mathlib.Algebra.BigOperators.Pi
[1566/4301] Building Mathlib.Deprecated.Submonoid
[1567/4301] Building Mathlib.Tactic.NormNum.BigOperators
[1568/4301] Building Mathlib.Data.Multiset.Fintype
[1569/4301] Building Mathlib.Dynamics.BirkhoffSum.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Constructions.Over.Connected, data field liftedCone is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Constructions.Over.Connected, data field validLift is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[1570/4301] Building Mathlib.Algebra.BigOperators.WithTop
[1571/4301] Building Mathlib.Algebra.Star.BigOperators
[1572/4301] Building Mathlib.Algebra.BigOperators.RingEquiv
[1573/4301] Building Mathlib.Data.Set.Pointwise.BigOperators
[1574/4301] Building Mathlib.Algebra.BigOperators.Option
[1575/4301] Building Mathlib.CategoryTheory.Limits.ConeCategory
[1576/4301] Building Mathlib.Data.Nat.Factorial.DoubleFactorial
[1577/4301] Building Mathlib.Algebra.Regular.Pow
[1578/4301] Building Mathlib.Algebra.BigOperators.Ring
[1579/4301] Building Mathlib.Data.Finset.NoncommProd
[1580/4301] Building Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts
[1581/4301] Building Mathlib.Computability.NFA
[1582/4301] Building Mathlib.Order.Partition.Finpartition
[1583/4301] Building Mathlib.Data.Sym.Card
[1584/4301] Building Mathlib.GroupTheory.GroupAction.BigOperators
[1585/4301] Building Mathlib.Data.PFunctor.Multivariate.M
[1586/4301] Building Mathlib.Data.QPF.Univariate.Basic
[1587/4301] Building Mathlib.Data.Finset.NAry
[1588/4301] Building Mathlib.Combinatorics.Hall.Finite
[1589/4301] Building Mathlib.Data.Nat.PrimeFin
[1590/4301] Building Mathlib.Order.ConditionallyCompleteLattice.Finset
[1591/4301] Building Mathlib.Algebra.Function.Finite
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Partition.Finpartition, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Partition.Finpartition, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[1592/4301] Building Mathlib.Data.MLList.BestFirst
[1593/4301] Building Mathlib.Data.Set.Intervals.Infinite
[1594/4301] Building Mathlib.Order.Filter.Basic
[1595/4301] Building Mathlib.Data.Nat.ChineseRemainder
[1596/4301] Building Mathlib.Computability.PartrecCode
[1597/4301] Building Mathlib.Data.QPF.Multivariate.Constructions.Comp
[1598/4301] Building Mathlib.Data.QPF.Multivariate.Constructions.Sigma
[1599/4301] Building Mathlib.Data.QPF.Multivariate.Constructions.Const
[1600/4301] Building Mathlib.Data.QPF.Multivariate.Constructions.Prj
[1601/4301] Building Mathlib.Data.QPF.Multivariate.Constructions.Quot
[1602/4301] Building Mathlib.GroupTheory.GroupAction.FixingSubgroup
[1603/4301] Building Mathlib.Order.PartialSups
[1604/4301] Building Mathlib.Algebra.Star.Pointwise
[1605/4301] Building Mathlib.Combinatorics.SimpleGraph.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Pointwise, data field star is uncovered in InvolutiveStar.
                      It might be better to declare an instance of Star first.
[1606/4301] Building Mathlib.Data.Finsupp.Defs
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.FixingSubgroup, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[1607/4301] Building Mathlib.Order.Atoms.Finite
[1608/4301] Building Mathlib.Data.Set.Pointwise.Finite
[1609/4301] Building Mathlib.Data.Finset.Preimage
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.ConeCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.ConeCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.ConeCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.ConeCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.ConeCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.ConeCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.ConeCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.ConeCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.ConeCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.ConeCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.ConeCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.ConeCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1610/4301] Building Mathlib.Data.QPF.Multivariate.Constructions.Fix
[1611/4301] Building Mathlib.Dynamics.BirkhoffSum.Average
[1612/4301] Building Mathlib.Deprecated.Subgroup
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.BinaryProducts, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1613/4301] Building Mathlib.Data.Fintype.BigOperators
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Basic, data field le is uncovered in DistribLattice.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Basic, data field le is uncovered in CompleteAtomicBooleanAlgebra.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Basic, data field sup is uncovered in CompleteAtomicBooleanAlgebra.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Basic, data field inf is uncovered in CompleteAtomicBooleanAlgebra.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Basic, data field compl is uncovered in CompleteAtomicBooleanAlgebra.
                      It might be better to declare an instance of HasCompl first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Basic, data field sdiff is uncovered in CompleteAtomicBooleanAlgebra.
                      It might be better to declare an instance of SDiff first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Basic, data field top is uncovered in CompleteAtomicBooleanAlgebra.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Basic, data field bot is uncovered in CompleteAtomicBooleanAlgebra.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Basic, data field sSup is uncovered in CompleteAtomicBooleanAlgebra.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Basic, data field sInf is uncovered in CompleteAtomicBooleanAlgebra.
                      It might be better to declare an instance of InfSet first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[1614/4301] Building Mathlib.Order.SupClosed
[1615/4301] Building Mathlib.Data.Finset.Grade
[1616/4301] Building Mathlib.GroupTheory.Perm.ClosureSwap
[1617/4301] Building Mathlib.Computability.EpsilonNFA
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.Grade, data field grade is uncovered in GradeMinOrder.
                      It might be better to declare an instance of GradeOrder first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.Grade, data field grade is uncovered in GradeMinOrder.
                      It might be better to declare an instance of GradeOrder first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.Grade, data field grade is uncovered in GradeMinOrder.
                      It might be better to declare an instance of GradeOrder first.
[1618/4301] Building Mathlib.CategoryTheory.Monoidal.Rigid.OfEquivalence
[1619/4301] Building Mathlib.Data.Set.Countable
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.SupClosed, data field sSup is uncovered in CompleteSemilatticeSup.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.SupClosed, data field sInf is uncovered in CompleteSemilatticeInf.
                      It might be better to declare an instance of InfSet first.
[1620/4301] Building Mathlib.Algebra.Module.BigOperators
[1621/4301] Building Mathlib.Algebra.Order.Rearrangement
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Defs, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Defs, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Defs, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Defs, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Defs, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[1622/4301] Building Mathlib.Data.Setoid.Partition
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Rigid.OfEquivalence, data field leftDual is uncovered in CategoryTheory.RigidCategory.
                      It might be better to declare an instance of CategoryTheory.LeftRigidCategory first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Rigid.OfEquivalence, data field rightDual is uncovered in CategoryTheory.RigidCategory.
                      It might be better to declare an instance of CategoryTheory.RightRigidCategory first.
[1623/4301] Building Mathlib.CategoryTheory.Monoidal.Rigid.FunctorCategory
[1624/4301] Building Mathlib.Algebra.Tropical.BigOperators
[1625/4301] Building Mathlib.Data.QPF.Multivariate.Constructions.Cofix
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Basic, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Basic, data field le is uncovered in CompleteLattice.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Basic, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Basic, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Basic, data field sSup is uncovered in CompleteLattice.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Basic, data field map is uncovered in Monad.
                      It might be better to declare an instance of Functor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Basic, data field seq is uncovered in Alternative.
                      It might be better to declare an instance of Seq first.
[1626/4301] Building Mathlib.Algebra.Star.Center
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Deprecated.Subgroup, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[1627/4301] Building Mathlib.Order.Disjointed
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Setoid.Partition, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Setoid.Partition, data field lt is uncovered in PartialOrder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Setoid.Partition, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Setoid.Partition, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[1628/4301] Building Mathlib.Data.Fintype.Order
[1629/4301] Building Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.MLList.BestFirst, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[1630/4301] Building Mathlib.Data.Finset.Functor
[1632/4301] Building Mathlib.Combinatorics.Young.YoungDiagram
[1632/4301] Building Mathlib.CategoryTheory.Limits.Shapes.Pullbacks
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Fintype.Order, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Fintype.Order, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Fintype.Order, data field sSup is uncovered in CompleteLattice.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Fintype.Order, data field sInf is uncovered in CompleteLattice.
                      It might be better to declare an instance of InfSet first.
[1633/4301] Building Mathlib.CategoryTheory.Limits.Shapes.StrictInitial
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.Functor, data field seq is uncovered in Applicative.
                      It might be better to declare an instance of Seq first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.Functor, data field seqLeft is uncovered in Applicative.
                      It might be better to declare an instance of SeqLeft first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.Functor, data field seqRight is uncovered in Applicative.
                      It might be better to declare an instance of SeqRight first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.Functor, data field bind is uncovered in Monad.
                      It might be better to declare an instance of Bind first.
[1634/4301] Building Mathlib.CategoryTheory.Limits.Shapes.CombinedProducts
[1635/4301] Building Mathlib.Combinatorics.SimpleGraph.Dart
[1636/4301] Building Mathlib.Logic.Godel.GodelBetaFunction
[1637/4301] Building Mathlib.CategoryTheory.Monad.Products
[1638/4301] Building Mathlib.CategoryTheory.Monoidal.OfHasFiniteProducts
[1639/4301] Building Mathlib.CategoryTheory.Monoidal.OfChosenFiniteProducts.Basic
[1640/4301] Building Mathlib.CategoryTheory.Limits.Preserves.Shapes.BinaryProducts
[1641/4301] Building Mathlib.Combinatorics.SimpleGraph.Finite
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1642/4301] Building Mathlib.RingTheory.Coprime.Lemmas
[1643/4301] Building Mathlib.Algebra.BigOperators.Order
[1644/4301] Building Mathlib.GroupTheory.Submonoid.Membership
[1645/4301] Building Mathlib.Data.Set.Sups
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Rigid.FunctorCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Rigid.FunctorCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Rigid.FunctorCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Rigid.FunctorCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1646/4301] Building Mathlib.Order.Sublattice
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.OfHasFiniteProducts, data field braiding is uncovered in CategoryTheory.SymmetricCategory.
                      It might be better to declare an instance of CategoryTheory.BraidedCategory first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.OfHasFiniteProducts, data field braiding is uncovered in CategoryTheory.SymmetricCategory.
                      It might be better to declare an instance of CategoryTheory.BraidedCategory first.
[1647/4301] Building Mathlib.Data.Finsupp.Pointwise
[1648/4301] Building Mathlib.Data.List.ToFinsupp
[1649/4301] Building Mathlib.Data.Finsupp.Notation
[1650/4301] Building Mathlib.Data.Finsupp.NeLocus
[1651/4301] Building Mathlib.Data.Finsupp.Fin
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Sublattice, data field toFun is uncovered in LatticeHom.
                      It might be better to declare an instance of SupHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Sublattice, data field toFun is uncovered in LatticeHom.
                      It might be better to declare an instance of SupHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Sublattice, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Sublattice, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Sublattice, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[1652/4301] Building Mathlib.Data.Finsupp.Indicator
[1653/4301] Building Mathlib.Order.LocallyFinite
[1654/4301] Building Mathlib.Data.Fintype.CardEmbedding
[1655/4301] Building Mathlib.Data.Finsupp.BigOperators
[1656/4301] Building Mathlib.Data.Finsupp.Fintype
[1657/4301] Building Mathlib.Order.Filter.ListTraverse
[1658/4301] Building Mathlib.Order.Filter.Ker
[1659/4301] Building Mathlib.Order.Filter.Prod
[1660/4301] Building Mathlib.Order.Filter.Partial
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Membership, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Membership, data field zpow is uncovered in Group.
                      It might be better to declare an instance of DivInvMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Membership, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Membership, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Membership, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[1661/4301] Building Mathlib.Order.Filter.Germ
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Products, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Products, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Products, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Products, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Products, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Products, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Products, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monad.Products, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1662/4301] Building Mathlib.Order.Filter.CountableInter
[1663/4301] Building Mathlib.Order.Filter.Extr
[1664/4301] Building Mathlib.Tactic.Peel
[1665/4301] Building Mathlib.CategoryTheory.Limits.Connected
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Multiequalizer, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1666/4301] Building Mathlib.MeasureTheory.MeasurableSpace.Defs
[1667/4301] Building Mathlib.Computability.Halting
[1668/4301] Building Mathlib.Combinatorics.Young.SemistandardTableau
[1669/4301] Building Mathlib.Combinatorics.SimpleGraph.Operations
[1670/4301] Building Mathlib.CategoryTheory.Monoidal.OfChosenFiniteProducts.Symmetric
[1671/4301] Building Mathlib.Tactic.NormNum.IsCoprime
[1672/4301] Building Mathlib.Order.CompleteSublattice
[1673/4301] Building Mathlib.Combinatorics.SimpleGraph.Density
[1674/4301] Building Mathlib.Data.Nat.Factorial.BigOperators
[1675/4301] Building Mathlib.Combinatorics.SimpleGraph.Maps
stdout:
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.MeasurableSpace.Defs, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.MeasurableSpace.Defs, data field lt is uncovered in PartialOrder.
                      It might be better to declare an instance of LT first.
[1676/4301] Building Mathlib.CategoryTheory.Monoidal.Internal.Limits
[1677/4301] Building Mathlib.GroupTheory.Subgroup.Finite
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.OfChosenFiniteProducts.Symmetric, data field braiding is uncovered in CategoryTheory.SymmetricCategory.
                      It might be better to declare an instance of CategoryTheory.BraidedCategory first.
[1678/4301] Building Mathlib.Algebra.Periodic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteSublattice, data field carrier is uncovered in CompleteSublattice.
                      It might be better to declare an instance of Sublattice first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteSublattice, data field carrier is uncovered in CompleteSublattice.
                      It might be better to declare an instance of Sublattice first.
[Elab.StructInst.coveredFields] In Mathlib.Order.CompleteSublattice, data field carrier is uncovered in CompleteSublattice.
                      It might be better to declare an instance of Sublattice first.
[1679/4301] Building Mathlib.Algebra.Module.Submodule.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Germ, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Germ, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Germ, data field le is uncovered in Preorder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Germ, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Germ, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Germ, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Germ, data field sup is uncovered in SemilatticeSup.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Germ, data field inf is uncovered in SemilatticeInf.
                      It might be better to declare an instance of Inf first.
[1680/4301] Building Mathlib.GroupTheory.Coprod.Basic
[1681/4301] Building Mathlib.CategoryTheory.Adjunction.Over
[1682/4301] Building Mathlib.Data.NNRat.BigOperators
[1683/4301] Building Mathlib.Combinatorics.DoubleCounting
[1684/4301] Building Mathlib.Data.Sign
[1685/4301] Building Mathlib.SetTheory.Cardinal.Basic
[1686/4301] Building Mathlib.Order.Filter.CountableSeparatingOn
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Maps, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[1687/4301] Building Mathlib.Combinatorics.Pigeonhole
[1688/4301] Building Mathlib.Data.Set.Equitable
[1689/4301] Building Mathlib.Data.Sum.Interval
[1690/4301] Building Mathlib.Data.Finset.Antidiagonal
[1691/4301] Building Mathlib.Data.Sigma.Interval
[1692/4301] Building Mathlib.RingTheory.NonUnitalSubsemiring.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Basic, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[1693/4301] Building Mathlib.Data.DFinsupp.Basic
[1694/4301] Building Mathlib.NumberTheory.FrobeniusNumber
[1695/4301] Building Mathlib.GroupTheory.MonoidLocalization
[1696/4301] Building Mathlib.Algebra.GroupWithZero.NonZeroDivisors
[1697/4301] Building Mathlib.Algebra.BigOperators.Finprod
[1698/4301] Building Mathlib.Order.Filter.Curry
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Sign, data field zero is uncovered in CommGroupWithZero.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Sign, data field one is uncovered in CommGroupWithZero.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Sign, data field mul is uncovered in CommGroupWithZero.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Sign, data field inv is uncovered in CommGroupWithZero.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Sign, data field le is uncovered in LinearOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Sign, data field top is uncovered in BoundedOrder.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Sign, data field bot is uncovered in BoundedOrder.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Sign, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Sign, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Sign, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Sign, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[1699/4301] Building Mathlib.Order.Filter.NAry
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Pullbacks, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Pullbacks, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1700/4301] Building Mathlib.MeasureTheory.PiSystem
[1701/4301] Building Mathlib.MeasureTheory.MeasurableSpace.Invariants
[1702/4301] Building Mathlib.Data.Finset.LocallyFinite.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GroupWithZero.NonZeroDivisors, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GroupWithZero.NonZeroDivisors, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GroupWithZero.NonZeroDivisors, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GroupWithZero.NonZeroDivisors, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[1703/4301] Building Mathlib.Order.UpperLower.LocallyFinite
[1704/4301] Building Mathlib.Algebra.Order.Interval
[1705/4301] Building Mathlib.Order.Filter.Bases
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Coprod.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Coprod.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1706/4301] Building Mathlib.Computability.Reduce
[1707/4301] Building Mathlib.Combinatorics.SimpleGraph.Subgraph
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubsemiring.Basic, data field toFun is uncovered in NonUnitalRingHom.
                      It might be better to declare an instance of MulHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubsemiring.Basic, data field carrier is uncovered in NonUnitalSubsemiring.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubsemiring.Basic, data field carrier is uncovered in NonUnitalSubsemiring.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubsemiring.Basic, data field carrier is uncovered in NonUnitalSubsemiring.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubsemiring.Basic, data field carrier is uncovered in NonUnitalSubsemiring.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubsemiring.Basic, data field carrier is uncovered in NonUnitalSubsemiring.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubsemiring.Basic, data field carrier is uncovered in NonUnitalSubsemiring.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubsemiring.Basic, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubsemiring.Basic, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubsemiring.Basic, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubsemiring.Basic, data field carrier is uncovered in NonUnitalSubsemiring.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubsemiring.Basic, data field carrier is uncovered in NonUnitalSubsemiring.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubsemiring.Basic, data field toFun is uncovered in NonUnitalRingHom.
                      It might be better to declare an instance of MulHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubsemiring.Basic, data field carrier is uncovered in NonUnitalSubsemiring.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubsemiring.Basic, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubsemiring.Basic, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[1708/4301] Building Mathlib.Combinatorics.SimpleGraph.Regularity.Energy
stdout:
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Cardinal.Basic, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Cardinal.Basic, data field zero is uncovered in CommSemiring.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Cardinal.Basic, data field one is uncovered in CommSemiring.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Cardinal.Basic, data field add is uncovered in CommSemiring.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Cardinal.Basic, data field mul is uncovered in CommSemiring.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Cardinal.Basic, data field nsmul is uncovered in CommSemiring.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Cardinal.Basic, data field npow is uncovered in CommSemiring.
                      It might be better to declare an instance of Semiring first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Cardinal.Basic, data field natCast is uncovered in CommSemiring.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Cardinal.Basic, data field bot is uncovered in CanonicallyOrderedCommSemiring.
                      It might be better to declare an instance of Bot first.
[1709/4301] Building Mathlib.GroupTheory.Perm.Subgroup
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Computability.Reduce, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Computability.Reduce, data field sup is uncovered in SemilatticeSup.
                      It might be better to declare an instance of Sup first.
[1710/4301] Building Mathlib.GroupTheory.Commutator
[1711/4301] Building Mathlib.Algebra.Module.Submodule.LinearMap
[1712/4301] Building Mathlib.Algebra.Module.Submodule.Order
[1713/4301] Building Mathlib.Data.Finset.NatAntidiagonal
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Interval, data field mul is uncovered in MulOneClass.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Interval, data field one is uncovered in MulOneClass.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Interval, data field neg is uncovered in SubtractionCommMonoid.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Interval, data field sub is uncovered in SubtractionCommMonoid.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Interval, data field zsmul is uncovered in SubtractionCommMonoid.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Interval, data field inv is uncovered in DivisionCommMonoid.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Interval, data field div is uncovered in DivisionCommMonoid.
                      It might be better to declare an instance of Div first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Interval, data field neg is uncovered in SubtractionCommMonoid.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Interval, data field sub is uncovered in SubtractionCommMonoid.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Interval, data field zsmul is uncovered in SubtractionCommMonoid.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Interval, data field inv is uncovered in DivisionCommMonoid.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.Interval, data field div is uncovered in DivisionCommMonoid.
                      It might be better to declare an instance of Div first.
[1714/4301] Building Mathlib.GroupTheory.Perm.Sign
[1715/4301] Building Mathlib.CategoryTheory.Limits.Constructions.Pullbacks
[1716/4301] Building Mathlib.CategoryTheory.Limits.Shapes.DisjointCoproduct
[1717/4301] Building Mathlib.Order.SuccPred.LinearLocallyFinite
[1718/4301] Building Mathlib.Order.Partition.Equipartition
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.LinearMap, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.LinearMap, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.LinearMap, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.LinearMap, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.LinearMap, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.LinearMap, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.LinearMap, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[1719/4301] Building Mathlib.NumberTheory.ClassNumber.AdmissibleAbsoluteValue
[1720/4301] Building Mathlib.Computability.TMToPartrec
[1721/4301] Building Mathlib.CategoryTheory.Limits.Shapes.FiniteLimits
[1722/4301] Building Mathlib.CategoryTheory.Limits.Shapes.Images
[1723/4301] Building Mathlib.CategoryTheory.Limits.Preserves.Shapes.Pullbacks
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Subgraph, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Subgraph, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Subgraph, data field le is uncovered in DistribLattice.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Subgraph, data field top is uncovered in BoundedOrder.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Subgraph, data field bot is uncovered in BoundedOrder.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Subgraph, data field le is uncovered in CompletelyDistribLattice.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Subgraph, data field sup is uncovered in CompletelyDistribLattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Subgraph, data field inf is uncovered in CompletelyDistribLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Subgraph, data field top is uncovered in CompletelyDistribLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Subgraph, data field bot is uncovered in CompletelyDistribLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Subgraph, data field sSup is uncovered in CompletelyDistribLattice.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Subgraph, data field sInf is uncovered in CompletelyDistribLattice.
                      It might be better to declare an instance of InfSet first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Subgraph, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Subgraph, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Subgraph, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Subgraph, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[1724/4301] Building Mathlib.MeasureTheory.SetSemiring
[1725/4301] Building Mathlib.Combinatorics.SimpleGraph.Clique
[1726/4301] Building Mathlib.Algebra.Module.Submodule.Lattice
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.SuccPred.LinearLocallyFinite, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.SuccPred.LinearLocallyFinite, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.SuccPred.LinearLocallyFinite, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.SuccPred.LinearLocallyFinite, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.SuccPred.LinearLocallyFinite, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Order.SuccPred.LinearLocallyFinite, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[1727/4301] Building Mathlib.RingTheory.Subsemiring.Basic
[1728/4301] Building Mathlib.RingTheory.NonUnitalSubring.Basic
[1729/4301] Building Mathlib.SetTheory.Cardinal.ENat
[1730/4301] Building Mathlib.CategoryTheory.Limits.SmallComplete
[1731/4301] Building Mathlib.ModelTheory.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Images, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Images, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Images, data field I is uncovered in CategoryTheory.Limits.StrongEpiMonoFactorisation.
                      It might be better to declare an instance of CategoryTheory.Limits.MonoFactorisation first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Images, data field m is uncovered in CategoryTheory.Limits.StrongEpiMonoFactorisation.
                      It might be better to declare an instance of CategoryTheory.Limits.MonoFactorisation first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Images, data field e is uncovered in CategoryTheory.Limits.StrongEpiMonoFactorisation.
                      It might be better to declare an instance of CategoryTheory.Limits.MonoFactorisation first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Images, data field I is uncovered in CategoryTheory.Limits.StrongEpiMonoFactorisation.
                      It might be better to declare an instance of CategoryTheory.Limits.MonoFactorisation first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Images, data field e is uncovered in CategoryTheory.Limits.StrongEpiMonoFactorisation.
                      It might be better to declare an instance of CategoryTheory.Limits.MonoFactorisation first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Images, data field m is uncovered in CategoryTheory.Limits.StrongEpiMonoFactorisation.
                      It might be better to declare an instance of CategoryTheory.Limits.MonoFactorisation first.
[1732/4301] Building Mathlib.CategoryTheory.Sites.Sieves
[1733/4301] Building Mathlib.CategoryTheory.Limits.Shapes.RegularMono
stdout:
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Cardinal.ENat, data field toFun is uncovered in OrderRingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Cardinal.ENat, data field toFun is uncovered in OrderRingHom.
                      It might be better to declare an instance of OneHom first.
[1734/4301] Building Mathlib.Order.Filter.Pi
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Lattice, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Lattice, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Lattice, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Lattice, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Lattice, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Lattice, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Lattice, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Lattice, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Lattice, data field sup is uncovered in CompleteLattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Lattice, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Lattice, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Lattice, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Lattice, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Lattice, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[1735/4301] Building Mathlib.GroupTheory.CoprodI
[1736/4301] Building Mathlib.SetTheory.Ordinal.Basic
[1737/4301] Building Mathlib.Data.Rat.Denumerable
[1738/4301] Building Mathlib.Data.Nat.Count
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.MonoidLocalization, data field r is uncovered in Con.
                      It might be better to declare an instance of Setoid first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.MonoidLocalization, data field mul is uncovered in CommMonoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.MonoidLocalization, data field one is uncovered in CommMonoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.MonoidLocalization, data field npow is uncovered in CommMonoid.
                      It might be better to declare an instance of Monoid first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.MonoidLocalization, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.MonoidLocalization, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.MonoidLocalization, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.MonoidLocalization, data field toFun is uncovered in Submonoid.LocalizationMap.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.MonoidLocalization, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.MonoidLocalization, data field lt is uncovered in PartialOrder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.MonoidLocalization, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[1739/4301] Building Mathlib.Data.Int.Interval
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubring.Basic, data field toFun is uncovered in NonUnitalRingHom.
                      It might be better to declare an instance of MulHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubring.Basic, data field carrier is uncovered in NonUnitalSubring.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubring.Basic, data field carrier is uncovered in NonUnitalSubring.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubring.Basic, data field carrier is uncovered in NonUnitalSubring.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubring.Basic, data field carrier is uncovered in NonUnitalSubring.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubring.Basic, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubring.Basic, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubring.Basic, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubring.Basic, data field carrier is uncovered in NonUnitalSubring.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubring.Basic, data field carrier is uncovered in NonUnitalSubring.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubring.Basic, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.NonUnitalSubring.Basic, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[1740/4301] Building Mathlib.Data.Finset.Interval
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Sieves, data field le is uncovered in CompleteLattice.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Sieves, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Sieves, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Sieves, data field sup is uncovered in CompleteLattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Sieves, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Sieves, data field sSup is uncovered in CompleteLattice.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Sieves, data field sInf is uncovered in CompleteLattice.
                      It might be better to declare an instance of InfSet first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Sieves, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Sieves, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Basic, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Basic, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Basic, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Basic, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[1741/4301] Building Mathlib.Data.Multiset.LocallyFinite
[1742/4301] Building Mathlib.Data.Nat.Interval
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field one is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field natCast is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field carrier is uncovered in Subsemiring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field carrier is uncovered in Subsemiring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field carrier is uncovered in Subsemiring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field carrier is uncovered in Subsemiring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field carrier is uncovered in Subsemiring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field carrier is uncovered in Subsemiring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field carrier is uncovered in Subsemiring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field carrier is uncovered in Subsemiring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Basic, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[1743/4301] Building Mathlib.Order.Filter.Lift
stdout:
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.Basic, data field toFun is uncovered in FirstOrder.Language.Embedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.Basic, data field toFun is uncovered in FirstOrder.Language.Equiv.
                      It might be better to declare an instance of Equiv first.
[1744/4301] Building Mathlib.Combinatorics.SimpleGraph.Regularity.Equitabilise
[1745/4301] Building Mathlib.Data.Pi.Interval
[1746/4301] Building Mathlib.CategoryTheory.Limits.Lattice
[1747/4301] Building Mathlib.Algebra.BigOperators.NatAntidiagonal
[1748/4301] Building Mathlib.Combinatorics.SimpleGraph.Connectivity
[1749/4301] Building Mathlib.CategoryTheory.Limits.Constructions.EpiMono
[1750/4301] Building Mathlib.CategoryTheory.Limits.Shapes.FunctorCategory
[1751/4301] Building Mathlib.CategoryTheory.Limits.Shapes.FiniteProducts
[1752/4301] Building Mathlib.Order.Filter.AtTopBot
[1753/4301] Building Mathlib.GroupTheory.Perm.Option
[1754/4301] Building Mathlib.Logic.Equiv.Fintype
[1755/4301] Building Mathlib.SetTheory.Cardinal.ToNat
[1756/4301] Building Mathlib.Order.Birkhoff
[1757/4301] Building Mathlib.CategoryTheory.Limits.Constructions.BinaryProducts
[1758/4301] Building Mathlib.CategoryTheory.Limits.Constructions.Equalizers
[1759/4301] Building Mathlib.CategoryTheory.Sites.IsSheafFor
stdout:
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Basic, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Basic, data field lt is uncovered in PartialOrder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Basic, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Basic, data field add is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Basic, data field zero is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Basic, data field one is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Basic, data field nsmul is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Basic, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Basic, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Basic, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Basic, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[1760/4301] Building Mathlib.Data.DFinsupp.Order
[1761/4301] Building Mathlib.Data.DFinsupp.NeLocus
[1762/4301] Building Mathlib.RingTheory.Subring.Basic
[1763/4301] Building Mathlib.RingTheory.Subsemiring.Order
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Birkhoff, data field toFun is uncovered in LatticeHom.
                      It might be better to declare an instance of SupHom first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Birkhoff, data field toFun is uncovered in LatticeHom.
                      It might be better to declare an instance of SupHom first.
[1764/4301] Building Mathlib.Data.Nat.Fib.Basic
[1765/4301] Building Mathlib.ModelTheory.LanguageMap
[1766/4301] Building Mathlib.Algebra.Module.Submodule.RestrictScalars
[1767/4301] Building Mathlib.Algebra.Module.Submodule.Map
[1768/4301] Building Mathlib.CategoryTheory.Limits.Shapes.ZeroMorphisms
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.CoprodI, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.CoprodI, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.CoprodI, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[1769/4301] Building Mathlib.Algebra.DirectSum.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Order, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Order, data field inf is uncovered in SemilatticeInf.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Order, data field sup is uncovered in SemilatticeSup.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Order, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[1770/4301] Building Mathlib.Data.DFinsupp.Encodable
[1771/4301] Building Mathlib.Combinatorics.SimpleGraph.Triangle.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.RestrictScalars, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.RestrictScalars, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.RestrictScalars, data field toFun is uncovered in CompleteLatticeHom.
                      It might be better to declare an instance of sInfHom first.
[1772/4301] Building Mathlib.CategoryTheory.Filtered.Basic
[1773/4301] Building Mathlib.NumberTheory.Divisors
[1774/4301] Building Mathlib.Tactic.RewriteSearch
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Connectivity, data field fst is uncovered in SimpleGraph.Dart.
                      It might be better to declare an instance of Prod first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Connectivity, data field snd is uncovered in SimpleGraph.Dart.
                      It might be better to declare an instance of Prod first.
[1775/4301] Building Mathlib.RingTheory.OreLocalization.Basic
[1776/4301] Building Mathlib.CategoryTheory.Limits.Preserves.Shapes.Images
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Preserves.Shapes.Images, data field I is uncovered in CategoryTheory.Limits.StrongEpiMonoFactorisation.
                      It might be better to declare an instance of CategoryTheory.Limits.MonoFactorisation first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Preserves.Shapes.Images, data field m is uncovered in CategoryTheory.Limits.StrongEpiMonoFactorisation.
                      It might be better to declare an instance of CategoryTheory.Limits.MonoFactorisation first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Preserves.Shapes.Images, data field e is uncovered in CategoryTheory.Limits.StrongEpiMonoFactorisation.
                      It might be better to declare an instance of CategoryTheory.Limits.MonoFactorisation first.
[1777/4301] Building Mathlib.CategoryTheory.ConcreteCategory.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Order, data field carrier is uncovered in Subsemiring.
                      It might be better to declare an instance of Subsemigroup first.
[1778/4301] Building Mathlib.Data.Nat.Periodic
[1779/4301] Building Mathlib.CategoryTheory.Limits.Constructions.Over.Products
[1780/4301] Building Mathlib.Algebra.BigOperators.Intervals
[1781/4301] Building Mathlib.Data.Finset.Slice
[1782/4301] Building Mathlib.Data.PNat.Interval
[1783/4301] Building Mathlib.Data.Nat.Lattice
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Map, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Map, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Map, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Map, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Map, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Map, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[1784/4301] Building Mathlib.Data.Fin.Interval
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DirectSum.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DirectSum.Basic, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DirectSum.Basic, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DirectSum.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DirectSum.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[1785/4301] Building Mathlib.Combinatorics.SimpleGraph.Regularity.Uniform
[1786/4301] Building Mathlib.SetTheory.Cardinal.UnivLE
[1787/4301] Building Mathlib.CategoryTheory.Limits.Constructions.FiniteProductsOfBinaryProducts
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subring.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subring.Basic, data field carrier is uncovered in Subring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subring.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subring.Basic, data field carrier is uncovered in Subring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subring.Basic, data field carrier is uncovered in Subring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subring.Basic, data field carrier is uncovered in Subring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subring.Basic, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subring.Basic, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subring.Basic, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subring.Basic, data field carrier is uncovered in Subring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subring.Basic, data field inv is uncovered in Field.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subring.Basic, data field div is uncovered in Field.
                      It might be better to declare an instance of Div first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subring.Basic, data field carrier is uncovered in Subring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subring.Basic, data field carrier is uncovered in Subring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subring.Basic, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subring.Basic, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[1788/4301] Building Mathlib.Data.Nat.Fib.Zeckendorf
[1789/4301] Building Mathlib.Data.Finset.LocallyFinite.Box
[1790/4301] Building Mathlib.Combinatorics.SetFamily.Shatter
[1791/4301] Building Mathlib.SetTheory.Ordinal.Arithmetic
[1792/4301] Building Mathlib.Data.DFinsupp.Multiset
[1793/4301] Building Mathlib.ModelTheory.Syntax
[1794/4301] Building Mathlib.CategoryTheory.Limits.Comma
[1795/4301] Building Mathlib.CategoryTheory.Sites.Grothendieck
[1796/4301] Building Mathlib.Tactic.NormNum.NatFib
[1797/4301] Building Mathlib.Combinatorics.Derangements.Basic
[1798/4301] Building Mathlib.Combinatorics.Schnirelmann
[1799/4301] Building Mathlib.Combinatorics.SimpleGraph.Connectivity.Subgraph
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Multiset, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[1800/4301] Building Mathlib.Combinatorics.SimpleGraph.Prod
[1801/4301] Building Mathlib.CategoryTheory.Sites.EffectiveEpimorphic
[1802/4301] Building Mathlib.CategoryTheory.Limits.Preserves.Shapes.Zero
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Grothendieck, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Grothendieck, data field inf is uncovered in SemilatticeInf.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Grothendieck, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Grothendieck, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1803/4301] Building Mathlib.Order.Filter.SmallSets
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.OreLocalization.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.OreLocalization.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.OreLocalization.Basic, data field toFun is uncovered in Submonoid.LocalizationMap.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.OreLocalization.Basic, data field zero is uncovered in AddCommMonoid.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.OreLocalization.Basic, data field nsmul is uncovered in AddCommMonoid.
                      It might be better to declare an instance of AddMonoid first.
[1804/4301] Building Mathlib.Order.Filter.ModEq
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Comma, data field liftedCone is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Comma, data field validLift is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Comma, data field liftedCocone is uncovered in CategoryTheory.LiftsToColimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCocone first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Comma, data field validLift is uncovered in CategoryTheory.LiftsToColimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCocone first.
[1805/4301] Building Mathlib.Order.Filter.IndicatorFunction
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Prod, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Prod, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[1806/4301] Building Mathlib.CategoryTheory.Limits.Types
[1807/4301] Building Mathlib.CategoryTheory.Limits.Preserves.Filtered
[1808/4301] Building Mathlib.CategoryTheory.Filtered.Small
[1809/4301] Building Mathlib.Combinatorics.SimpleGraph.Trails
[1810/4301] Building Mathlib.Combinatorics.SimpleGraph.Acyclic
[1811/4301] Building Mathlib.CategoryTheory.Category.Pointed
[1812/4301] Building Mathlib.Algebra.IsPrimePow
[1813/4301] Building Mathlib.Algebra.Module.Submodule.Ker
[1814/4301] Building Mathlib.Algebra.DirectSum.Ring
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Pointed, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Pointed, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Pointed, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Pointed, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Pointed, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Pointed, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Pointed, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1815/4301] Building Mathlib.CategoryTheory.Limits.Constructions.ZeroObjects
[1816/4301] Building Mathlib.Order.Filter.Archimedean
[1817/4301] Building Mathlib.Order.Filter.Cofinite
[1818/4301] Building Mathlib.CategoryTheory.Filtered.Connected
[1819/4301] Building Mathlib.Deprecated.Subring
[1820/4301] Building Mathlib.Algebra.GroupRingAction.Invariant
[1821/4301] Building Mathlib.CategoryTheory.ConcreteCategory.ReflectsIso
[1822/4301] Building Mathlib.CategoryTheory.ConcreteCategory.BundledHom
[1823/4301] Building Mathlib.Combinatorics.SimpleGraph.Metric
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Deprecated.Subring, data field carrier is uncovered in Subring.
                      It might be better to declare an instance of Subsemigroup first.
[1824/4301] Building Mathlib.Order.KrullDimension
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.GroupRingAction.Invariant, data field smul is uncovered in MulSemiringAction.
                      It might be better to declare an instance of SMul first.
[1825/4301] Building Mathlib.Data.Finset.Sups
[1826/4301] Building Mathlib.Data.Fin.Tuple.Sort
[1827/4301] Building Mathlib.Data.Fintype.Fin
[1828/4301] Building Mathlib.CategoryTheory.Closed.Cartesian
[1829/4301] Building Mathlib.Algebra.ContinuedFractions.Computation.CorrectnessTerminating
[1830/4301] Building Mathlib.Tactic.CategoryTheory.Elementwise
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.ConcreteCategory.BundledHom, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.ConcreteCategory.BundledHom, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.ConcreteCategory.BundledHom, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.ConcreteCategory.BundledHom, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.ConcreteCategory.BundledHom, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.ConcreteCategory.BundledHom, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.ConcreteCategory.BundledHom, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1831/4301] Building Mathlib.Data.ENat.Lattice
stdout:
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Arithmetic, data field mul is uncovered in Monoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Arithmetic, data field one is uncovered in Monoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Arithmetic, data field zero is uncovered in MonoidWithZero.
                      It might be better to declare an instance of Zero first.
[1832/4301] Building Mathlib.Algebra.BigOperators.Module
[1833/4301] Building Mathlib.Algebra.QuadraticDiscriminant
[1834/4301] Building Mathlib.RingTheory.Subring.Order
[1835/4301] Building Mathlib.CategoryTheory.Sites.Pretopology
[1836/4301] Building Mathlib.CategoryTheory.Limits.MonoCoprod
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Pretopology, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Pretopology, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[1837/4301] Building Mathlib.CategoryTheory.FintypeCat
[1838/4301] Building Mathlib.Algebra.GeomSum
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Closed.Cartesian, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Closed.Cartesian, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1839/4301] Building Mathlib.NumberTheory.Harmonic.Defs
[1840/4301] Building Mathlib.Data.Nat.Choose.Sum
[1841/4301] Building Mathlib.Algebra.Homology.ShortComplex.Basic
[1842/4301] Building Mathlib.CategoryTheory.Limits.Shapes.Kernels
[1843/4301] Building Mathlib.CategoryTheory.Category.Bipointed
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FintypeCat, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FintypeCat, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FintypeCat, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FintypeCat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.FintypeCat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1844/4301] Building Mathlib.CategoryTheory.Limits.Constructions.LimitsOfProductsAndEqualizers
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Constructions.Over.Products, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Constructions.Over.Products, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Constructions.Over.Products, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Constructions.Over.Products, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1845/4301] Building Mathlib.Order.Filter.Interval
[1846/4301] Building Mathlib.Data.Analysis.Filter
[1847/4301] Building Mathlib.Topology.Bornology.Basic
[1848/4301] Building Mathlib.Combinatorics.Derangements.Finite
[1849/4301] Building Mathlib.ModelTheory.Semantics
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DirectSum.Ring, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DirectSum.Ring, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DirectSum.Ring, data field mul is uncovered in NonUnitalNonAssocSemiring.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DirectSum.Ring, data field one is uncovered in Semiring.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DirectSum.Ring, data field natCast is uncovered in Semiring.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DirectSum.Ring, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[1850/4301] Building Mathlib.Deprecated.Subfield
[1851/4301] Building Mathlib.CategoryTheory.Category.PartialFun
[1852/4301] Building Mathlib.CategoryTheory.Limits.FunctorToTypes
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Bipointed, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Bipointed, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Bipointed, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Bipointed, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Bipointed, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Bipointed, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Bipointed, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Bipointed, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Bipointed, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Bipointed, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Bipointed, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Bipointed, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Bipointed, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Bipointed, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Bipointed, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Bipointed, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Bipointed, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1853/4301] Building Mathlib.CategoryTheory.Limits.Shapes.FunctorToTypes
[1854/4301] Building Mathlib.CategoryTheory.Limits.Filtered
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Basic, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Basic, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Basic, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1855/4301] Building Mathlib.LinearAlgebra.BilinearMap
[1856/4301] Building Mathlib.NumberTheory.ADEInequality
[1857/4301] Building Mathlib.Order.OrderIsoNat
[1858/4301] Building Mathlib.CategoryTheory.Shift.Basic
[1859/4301] Building Mathlib.Order.LiminfLimsup
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.PartialFun, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.PartialFun, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.PartialFun, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.PartialFun, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.PartialFun, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.PartialFun, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.PartialFun, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.PartialFun, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.PartialFun, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1860/4301] Building Mathlib.Order.Filter.Ultrafilter
[1861/4301] Building Mathlib.CategoryTheory.ConcreteCategory.UnbundledHom
[1862/4301] Building Mathlib.Order.Extension.Well
[1863/4301] Building Mathlib.SetTheory.Ordinal.Exponential
[1864/4301] Building Mathlib.CategoryTheory.Limits.ConcreteCategory
[1865/4301] Building Mathlib.CategoryTheory.Limits.Preserves.Ulift
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.FunctorToTypes, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.FunctorToTypes, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.FunctorToTypes, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.FunctorToTypes, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1866/4301] Building Mathlib.CategoryTheory.Category.Cat.Limit
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Ultrafilter, data field map is uncovered in Monad.
                      It might be better to declare an instance of Functor first.
[1867/4301] Building Mathlib.CategoryTheory.Limits.Over
[1868/4301] Building Mathlib.Combinatorics.SimpleGraph.Girth
[1869/4301] Building Mathlib.CategoryTheory.Comma.Presheaf
[1870/4301] Building Mathlib.Order.Category.Preord
[1871/4301] Building Mathlib.Algebra.Category.SemigroupCat.Basic
[1872/4301] Building Mathlib.SetTheory.Ordinal.NaturalOps
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Preord, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Preord, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Preord, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Preord, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1873/4301] Building Mathlib.CategoryTheory.Limits.ColimitLimit
[1874/4301] Building Mathlib.LinearAlgebra.Basic
[1875/4301] Building Mathlib.Combinatorics.SimpleGraph.Hasse
[1876/4301] Building Mathlib.CategoryTheory.Elementwise
[1877/4301] Building Mathlib.Data.Fin.Tuple.BubbleSortInduction
[1878/4301] Building Mathlib.CategoryTheory.Sites.SheafOfTypes
[1879/4301] Building Mathlib.Algebra.Category.MonCat.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Shift.Basic, data field ε is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Shift.Basic, data field μ is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[1880/4301] Building Mathlib.Algebra.Algebra.Basic
[1881/4301] Building Mathlib.Topology.Bornology.Absorbs
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.BilinearMap, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.BilinearMap, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.BilinearMap, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.BilinearMap, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.BilinearMap, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[1882/4301] Building Mathlib.Topology.Bornology.Hom
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Over, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Over, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Over, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Over, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1883/4301] Building Mathlib.Topology.Bornology.Constructions
[1884/4301] Building Mathlib.Algebra.Homology.ShortComplex.FunctorEquivalence
stdout:
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.NaturalOps, data field add is uncovered in OrderedCancelAddCommMonoid.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.NaturalOps, data field zero is uncovered in OrderedCancelAddCommMonoid.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.NaturalOps, data field nsmul is uncovered in OrderedCancelAddCommMonoid.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.NaturalOps, data field mul is uncovered in OrderedCommSemiring.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.NaturalOps, data field one is uncovered in OrderedCommSemiring.
                      It might be better to declare an instance of One first.
[1885/4301] Building Mathlib.Data.Nat.PartENat
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.MonCat.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1886/4301] Building Mathlib.CategoryTheory.Closed.Functor
[1887/4301] Building Mathlib.Algebra.BigOperators.Fin
[1888/4301] Building Mathlib.Combinatorics.SetFamily.Shadow
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.SheafOfTypes, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.SheafOfTypes, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.SheafOfTypes, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.SheafOfTypes, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.SheafOfTypes, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.SheafOfTypes, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.SheafOfTypes, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1889/4301] Building Mathlib.Algebra.Ring.Divisibility.Lemmas
[1890/4301] Building Mathlib.Data.Nat.Nth
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.PartENat, data field add is uncovered in AddCommMonoid.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.PartENat, data field zero is uncovered in AddCommMonoid.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.PartENat, data field nsmul is uncovered in AddCommMonoid.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.PartENat, data field one is uncovered in AddCommMonoidWithOne.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.PartENat, data field natCast is uncovered in AddCommMonoidWithOne.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.PartENat, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.PartENat, data field sup is uncovered in SemilatticeSup.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.PartENat, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.PartENat, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.PartENat, data field max is uncovered in LinearOrder.
                      It might be better to declare an instance of Max first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.PartENat, data field inf is uncovered in Lattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.PartENat, data field inf is uncovered in CompleteLinearOrder.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.PartENat, data field sup is uncovered in CompleteLinearOrder.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.PartENat, data field top is uncovered in CompleteLinearOrder.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.PartENat, data field bot is uncovered in CompleteLinearOrder.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.PartENat, data field le is uncovered in CompleteLinearOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Nat.PartENat, data field lt is uncovered in CompleteLinearOrder.
                      It might be better to declare an instance of LT first.
[1891/4301] Building Mathlib.CategoryTheory.Category.TwoP
[1892/4301] Building Mathlib.Order.Filter.Subsingleton
[1893/4301] Building Mathlib.Order.Filter.Pointwise
[1894/4301] Building Mathlib.Combinatorics.SimpleGraph.Coloring
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Basic, data field smul is uncovered in Algebra.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Basic, data field toFun is uncovered in Algebra.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Basic, data field toFun is uncovered in Algebra.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Basic, data field toFun is uncovered in Algebra.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Basic, data field toFun is uncovered in Algebra.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Basic, data field smul is uncovered in Algebra.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Basic, data field smul is uncovered in Algebra.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Basic, data field intCast is uncovered in Ring.
                      It might be better to declare an instance of IntCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Basic, data field smul is uncovered in Algebra.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[1895/4301] Building Mathlib.CategoryTheory.Closed.Zero
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Cat.Limit, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Cat.Limit, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Cat.Limit, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Cat.Limit, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Cat.Limit, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Cat.Limit, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Cat.Limit, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Cat.Limit, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Cat.Limit, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1896/4301] Building Mathlib.SetTheory.Ordinal.FixedPoint
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Presheaf, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Presheaf, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Presheaf, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Presheaf, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Presheaf, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Presheaf, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Presheaf, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Comma.Presheaf, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1897/4301] Building Mathlib.SetTheory.Ordinal.CantorNormalForm
[1898/4301] Building Mathlib.Algebra.ContinuedFractions.Computation.Approximations
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.TwoP, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.TwoP, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.TwoP, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.TwoP, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.TwoP, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.TwoP, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1899/4301] Building Mathlib.Order.Category.OmegaCompletePartialOrder
[1900/4301] Building Mathlib.Algebra.Homology.ShortComplex.LeftHomology
[1901/4301] Building Mathlib.CategoryTheory.Limits.Shapes.Biproducts
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Basic, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Basic, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Basic, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[1902/4301] Building Mathlib.CategoryTheory.Preadditive.Basic
[1903/4301] Building Mathlib.CategoryTheory.Abelian.Images
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.OmegaCompletePartialOrder, data field toFun is uncovered in OmegaCompletePartialOrder.ContinuousHom.
                      It might be better to declare an instance of OrderHom first.
[1904/4301] Building Mathlib.Order.Height
[1905/4301] Building Mathlib.Order.Category.PartOrd
[1906/4301] Building Mathlib.Combinatorics.Colex
[1907/4301] Building Mathlib.Algebra.Order.CauSeq.BigOperators
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.PartOrd, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.PartOrd, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.PartOrd, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.PartOrd, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1908/4301] Building Mathlib.Topology.Defs.Filter
[1909/4301] Building Mathlib.Order.Filter.FilterProduct
[1910/4301] Building Mathlib.Data.Nat.Digits
[1911/4301] Building Mathlib.CategoryTheory.Limits.Constructions.Over.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Defs.Filter, data field le is uncovered in Preorder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Defs.Filter, data field lt is uncovered in Preorder.
                      It might be better to declare an instance of LT first.
[1912/4301] Building Mathlib.ModelTheory.Definability
[1913/4301] Building Mathlib.ModelTheory.Quotients
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Pointwise, data field mul is uncovered in Semigroup.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Pointwise, data field one is uncovered in MulOneClass.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Pointwise, data field mul is uncovered in MulOneClass.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.Pointwise, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1914/4301] Building Mathlib.ModelTheory.Order
[1915/4301] Building Mathlib.CategoryTheory.Limits.Shapes.Types
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.Colex, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[1916/4301] Building Mathlib.Combinatorics.SetFamily.AhlswedeZhang
[1917/4301] Building Mathlib.CategoryTheory.ConcreteCategory.Elementwise
[1918/4301] Building Mathlib.CategoryTheory.Limits.Shapes.NormalMono.Basic
[1919/4301] Building Mathlib.CategoryTheory.Limits.Preserves.Shapes.Kernels
[1920/4301] Building Mathlib.Order.WellFoundedSet
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.LeftHomology, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.LeftHomology, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.LeftHomology, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.LeftHomology, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1921/4301] Building Mathlib.CategoryTheory.Shift.ShiftSequence
[1922/4301] Building Mathlib.CategoryTheory.Shift.CommShift
[1923/4301] Building Mathlib.Algebra.Homology.ShortComplex.Limits
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.FunctorEquivalence, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.FunctorEquivalence, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.FunctorEquivalence, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.FunctorEquivalence, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.FunctorEquivalence, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.FunctorEquivalence, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1924/4301] Building Mathlib.ModelTheory.Algebra.Ring.Basic
[1925/4301] Building Mathlib.SetTheory.Game.Ordinal
[1926/4301] Building Mathlib.MeasureTheory.MeasurableSpace.Basic
[1927/4301] Building Mathlib.Algebra.Category.GroupWithZeroCat
[1928/4301] Building Mathlib.CategoryTheory.Limits.Opposites
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.WellFoundedSet, data field le is uncovered in Preorder.
                      It might be better to declare an instance of LE first.
[1929/4301] Building Mathlib.CategoryTheory.DifferentialObject
stdout:
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.Algebra.Ring.Basic, data field funMap is uncovered in FirstOrder.Ring.CompatibleRing.
                      It might be better to declare an instance of FirstOrder.Language.Structure first.
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.Algebra.Ring.Basic, data field RelMap is uncovered in FirstOrder.Ring.CompatibleRing.
                      It might be better to declare an instance of FirstOrder.Language.Structure first.
[1930/4301] Building Mathlib.CategoryTheory.Limits.FintypeCat
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Types, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Types, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Types, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Types, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1931/4301] Building Mathlib.Topology.Category.Born
stdout:
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Game.Ordinal, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[1932/4301] Building Mathlib.CategoryTheory.Sites.Coverage
[1933/4301] Building Mathlib.CategoryTheory.Sites.Canonical
[1934/4301] Building Mathlib.SetTheory.Cardinal.PartENat
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupWithZeroCat, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupWithZeroCat, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupWithZeroCat, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupWithZeroCat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupWithZeroCat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupWithZeroCat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupWithZeroCat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupWithZeroCat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupWithZeroCat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1935/4301] Building Mathlib.Algebra.Module.Algebra
[1936/4301] Building Mathlib.FieldTheory.Subfield
[1937/4301] Building Mathlib.CategoryTheory.SingleObj
[1938/4301] Building Mathlib.Algebra.Category.GroupCat.Basic
[1939/4301] Building Mathlib.Combinatorics.SetFamily.FourFunctions
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Algebra, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[1940/4301] Building Mathlib.CategoryTheory.GradedObject
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Coverage, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Coverage, data field sup is uncovered in SemilatticeSup.
                      It might be better to declare an instance of Sup first.
[1941/4301] Building Mathlib.Data.Fin.Tuple.Reflection
[1942/4301] Building Mathlib.CategoryTheory.Sites.Closed
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.SingleObj, data field Hom is uncovered in CategoryTheory.CategoryStruct.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.SingleObj, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.SingleObj, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.SingleObj, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.SingleObj, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.SingleObj, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.SingleObj, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.SingleObj, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.SingleObj, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.SingleObj, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1943/4301] Building Mathlib.CategoryTheory.Subobject.MonoOver
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Closed, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Closed, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1944/4301] Building Mathlib.Algebra.Lie.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1945/4301] Building Mathlib.Algebra.Exact
[1946/4301] Building Mathlib.Combinatorics.SimpleGraph.Partition
[1947/4301] Building Mathlib.Combinatorics.SetFamily.Compression.UV
[1948/4301] Building Mathlib.SetTheory.Ordinal.Principal
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1949/4301] Building Mathlib.Order.Category.FinPartOrd
[1950/4301] Building Mathlib.Order.Filter.EventuallyConst
[1951/4301] Building Mathlib.CategoryTheory.Preadditive.FunctorCategory
[1952/4301] Building Mathlib.Topology.Basic
[1953/4301] Building Mathlib.Topology.Defs.Sequences
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.FinPartOrd, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.FinPartOrd, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.FinPartOrd, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.FinPartOrd, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1954/4301] Building Mathlib.Algebra.Order.Algebra
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Subfield, data field carrier is uncovered in Subfield.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Subfield, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Subfield, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Subfield, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Subfield, data field carrier is uncovered in Subfield.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Subfield, data field carrier is uncovered in Subfield.
                      It might be better to declare an instance of Subsemigroup first.
[1955/4301] Building Mathlib.Algebra.Order.Module.Algebra
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.DifferentialObject, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.DifferentialObject, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.DifferentialObject, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.DifferentialObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.DifferentialObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.DifferentialObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.DifferentialObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.DifferentialObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.DifferentialObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1956/4301] Building Mathlib.Combinatorics.Composition
[1957/4301] Building Mathlib.LinearAlgebra.Pi
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.FunctorCategory, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.FunctorCategory, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.FunctorCategory, data field sub is uncovered in AddCommGroup.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.FunctorCategory, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[1958/4301] Building Mathlib.Algebra.Category.MonCat.Colimits
[1959/4301] Building Mathlib.Combinatorics.SetFamily.LYM
[1960/4301] Building Mathlib.RingTheory.Multiplicity
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.MonCat.Colimits, data field one is uncovered in Monoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.MonCat.Colimits, data field mul is uncovered in Monoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.MonCat.Colimits, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.MonCat.Colimits, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1961/4301] Building Mathlib.Order.Category.BddOrd
[1962/4301] Building Mathlib.Order.Category.Semilat
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddOrd, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddOrd, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddOrd, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddOrd, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddOrd, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddOrd, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddOrd, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddOrd, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddOrd, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddOrd, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddOrd, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1963/4301] Building Mathlib.Order.Category.Lat
[1964/4301] Building Mathlib.NumberTheory.ClassNumber.AdmissibleAbs
[1965/4301] Building Mathlib.Algebra.Category.MonCat.Adjunctions
[1966/4301] Building Mathlib.Algebra.BigOperators.Finsupp
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Semilat, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Semilat, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Semilat, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Semilat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Semilat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Semilat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Semilat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Semilat, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Semilat, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Semilat, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Semilat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Semilat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Semilat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Semilat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Semilat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Semilat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Semilat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Semilat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1967/4301] Building Mathlib.CategoryTheory.Shift.Induced
[1968/4301] Building Mathlib.Data.DFinsupp.Lex
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Lat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Lat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Lat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Lat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1969/4301] Building Mathlib.GroupTheory.Submonoid.Pointwise
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.MonCat.Adjunctions, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.MonCat.Adjunctions, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.MonCat.Adjunctions, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.MonCat.Adjunctions, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.MonCat.Adjunctions, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.MonCat.Adjunctions, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1970/4301] Building Mathlib.RingTheory.HahnSeries.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Pi, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Pi, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Pi, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Pi, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Pi, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Pi, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Pi, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Pi, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Pi, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Pi, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Pi, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Pi, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[1971/4301] Building Mathlib.Data.Set.MulAntidiagonal
[1972/4301] Building Mathlib.Algebra.Category.MonCat.FilteredColimits
[1973/4301] Building Mathlib.CategoryTheory.GlueData
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.MonoOver, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.MonoOver, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.MonoOver, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.MonoOver, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1974/4301] Building Mathlib.Algebra.ContinuedFractions.Computation.TerminatesIffRat
[1975/4301] Building Mathlib.SetTheory.Surreal.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Lex, data field lt is uncovered in PartialOrder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Lex, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.DFinsupp.Lex, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[1976/4301] Building Mathlib.CategoryTheory.Linear.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Basic, data field bracket is uncovered in LieRingModule.
                      It might be better to declare an instance of Bracket first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Basic, data field bracket is uncovered in LieRingModule.
                      It might be better to declare an instance of Bracket first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Basic, data field bracket is uncovered in LieRingModule.
                      It might be better to declare an instance of Bracket first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Basic, data field toFun is uncovered in LieEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[1977/4301] Building Mathlib.Algebra.Category.MonCat.Limits
[1978/4301] Building Mathlib.CategoryTheory.Limits.Shapes.NormalMono.Equalizers
[1979/4301] Building Mathlib.Data.Fin.Tuple.NatAntidiagonal
stdout:
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Surreal.Basic, data field add is uncovered in OrderedAddCommGroup.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Surreal.Basic, data field zero is uncovered in OrderedAddCommGroup.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Surreal.Basic, data field neg is uncovered in OrderedAddCommGroup.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Surreal.Basic, data field le is uncovered in OrderedAddCommGroup.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Surreal.Basic, data field lt is uncovered in OrderedAddCommGroup.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Surreal.Basic, data field nsmul is uncovered in OrderedAddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Surreal.Basic, data field zsmul is uncovered in OrderedAddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Surreal.Basic, data field toFun is uncovered in OrderAddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Surreal.Basic, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[1980/4301] Building Mathlib.CategoryTheory.Sites.Types
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Pointwise, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Pointwise, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Pointwise, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Pointwise, data field one is uncovered in MulOneClass.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Pointwise, data field mul is uncovered in MulOneClass.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Pointwise, data field mul is uncovered in Semigroup.
                      It might be better to declare an instance of Mul first.
[1981/4301] Building Mathlib.SetTheory.Cardinal.Finite
[1982/4301] Building Mathlib.ModelTheory.Ultraproducts
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.MonCat.FilteredColimits, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.MonCat.FilteredColimits, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[1983/4301] Building Mathlib.Combinatorics.SimpleGraph.ConcreteColorings
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Linear.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Linear.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Linear.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[1984/4301] Building Mathlib.ModelTheory.Algebra.Field.Basic
[1985/4301] Building Mathlib.CategoryTheory.Sites.EqualizerSheafCondition
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Biproducts, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Biproducts, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Biproducts, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Biproducts, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Biproducts, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Biproducts, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Biproducts, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Biproducts, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Biproducts, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Biproducts, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Biproducts, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Biproducts, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Biproducts, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Biproducts, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Biproducts, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Biproducts, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Biproducts, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Biproducts, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1986/4301] Building Mathlib.CategoryTheory.Monoidal.Types.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Types, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Types, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1987/4301] Building Mathlib.SetTheory.Game.Birthday
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.MonCat.Limits, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.MonCat.Limits, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.MonCat.Limits, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.MonCat.Limits, data field liftedCone is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.MonCat.Limits, data field validLift is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[1988/4301] Building Mathlib.Algebra.Ring.CentroidHom
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.ConcreteColorings, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[1989/4301] Building Mathlib.CategoryTheory.Preadditive.SingleObj
[1990/4301] Building Mathlib.Order.CompactlyGenerated.Basic
[1991/4301] Building Mathlib.CategoryTheory.GradedObject.Single
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.BigOperators.Finsupp, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.BigOperators.Finsupp, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.BigOperators.Finsupp, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[1992/4301] Building Mathlib.CategoryTheory.GradedObject.Bifunctor
[1993/4301] Building Mathlib.SetTheory.Ordinal.Notation
[1994/4301] Building Mathlib.CategoryTheory.Limits.Shapes.ConcreteCategory
[1995/4301] Building Mathlib.CategoryTheory.Limits.Final
[1996/4301] Building Mathlib.CategoryTheory.Limits.Shapes.SingleObj
[1997/4301] Building Mathlib.Algebra.Category.GroupCat.Zero
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Single, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Single, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[1998/4301] Building Mathlib.Algebra.Category.GroupCat.EquivalenceGroupAddGroup
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.SingleObj, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[1999/4301] Building Mathlib.Algebra.Category.GroupCat.Preadditive
[2000/4301] Building Mathlib.Algebra.Homology.ShortComplex.RightHomology
[2001/4301] Building Mathlib.CategoryTheory.Limits.Constructions.Filtered
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.ConcreteCategory, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[2002/4301] Building Mathlib.Topology.Partial
[2003/4301] Building Mathlib.Topology.NhdsSet
[2004/4301] Building Mathlib.Topology.Defs.Induced
[2005/4301] Building Mathlib.FieldTheory.Subfield.Order
[2006/4301] Building Mathlib.Order.Category.LinOrd
[2007/4301] Building Mathlib.Order.Category.DistLat
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Constructions.Filtered, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Constructions.Filtered, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2008/4301] Building Mathlib.LinearAlgebra.Multilinear.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.EquivalenceGroupAddGroup, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.EquivalenceGroupAddGroup, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.EquivalenceGroupAddGroup, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.EquivalenceGroupAddGroup, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.EquivalenceGroupAddGroup, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.EquivalenceGroupAddGroup, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.EquivalenceGroupAddGroup, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.EquivalenceGroupAddGroup, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2009/4301] Building Mathlib.Data.Nat.Multiplicity
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.DistLat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.DistLat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2010/4301] Building Mathlib.Algebra.Category.Ring.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.LinOrd, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.LinOrd, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.LinOrd, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.LinOrd, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2011/4301] Building Mathlib.RingTheory.HahnSeries.Addition
stdout:
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Notation, data field le is uncovered in Preorder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Notation, data field lt is uncovered in Preorder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Notation, data field mul is uncovered in MulZeroClass.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Notation, data field zero is uncovered in MulZeroClass.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Notation, data field le is uncovered in Preorder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Ordinal.Notation, data field lt is uncovered in Preorder.
                      It might be better to declare an instance of LT first.
[2012/4301] Building Mathlib.CategoryTheory.Subterminal
[2013/4301] Building Mathlib.CategoryTheory.Limits.Preserves.Opposites
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.HahnSeries.Addition, data field zero is uncovered in AddMonoid.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.HahnSeries.Addition, data field add is uncovered in AddMonoid.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.HahnSeries.Addition, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.HahnSeries.Addition, data field zsmul is uncovered in AddGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.HahnSeries.Addition, data field smul is uncovered in DistribMulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.HahnSeries.Addition, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2014/4301] Building Mathlib.Data.Finset.MulAntidiagonal
[2015/4301] Building Mathlib.Topology.Tactic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2016/4301] Building Mathlib.Data.Real.NNReal
[2017/4301] Building Mathlib.GroupTheory.Submonoid.Inverses
[2018/4301] Building Mathlib.Algebra.Category.GroupCat.FilteredColimits
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Bifunctor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Bifunctor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Bifunctor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Bifunctor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Bifunctor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Bifunctor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Bifunctor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Bifunctor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2019/4301] Building Mathlib.CategoryTheory.Category.Grpd
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.RightHomology, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.RightHomology, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.RightHomology, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.RightHomology, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2020/4301] Building Mathlib.CategoryTheory.Linear.FunctorCategory
[2021/4301] Building Mathlib.Order.Category.BddLat
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Grpd, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Grpd, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Grpd, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Grpd, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Grpd, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Grpd, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Category.Grpd, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2022/4301] Building Mathlib.Topology.OmegaCompletePartialOrder
[2023/4301] Building Mathlib.Combinatorics.Partition
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Inverses, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Inverses, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Inverses, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Inverses, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[2024/4301] Building Mathlib.CategoryTheory.Shift.Quotient
[2025/4301] Building Mathlib.Data.Finset.Pointwise
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.CentroidHom, data field toFun is uncovered in CentroidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.CentroidHom, data field toFun is uncovered in CentroidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.CentroidHom, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.CentroidHom, data field smul is uncovered in Module.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.CentroidHom, data field toFun is uncovered in NonUnitalRingHom.
                      It might be better to declare an instance of MulHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Ring.CentroidHom, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[2026/4301] Building Mathlib.GroupTheory.Perm.DomMulAct
[2027/4301] Building Mathlib.Data.Fintype.Units
[2028/4301] Building Mathlib.Data.Set.Card
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddLat, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddLat, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddLat, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddLat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddLat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddLat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddLat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddLat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddLat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddLat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddLat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddLat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddLat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddLat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddLat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddLat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddLat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddLat, data field toFun is uncovered in LatticeHom.
                      It might be better to declare an instance of SupHom first.
[2029/4301] Building Mathlib.Data.Finite.Card
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Perm.DomMulAct, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Perm.DomMulAct, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[2030/4301] Building Mathlib.Algebra.Algebra.Hom
[2031/4301] Building Mathlib.Algebra.BigOperators.Associated
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Final, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Final, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Final, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Final, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2032/4301] Building Mathlib.CategoryTheory.Monoidal.Types.Symmetric
[2033/4301] Building Mathlib.RingTheory.Subsemiring.Pointwise
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.NNReal, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.NNReal, data field smul is uncovered in Algebra.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.NNReal, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[2034/4301] Building Mathlib.GroupTheory.Subgroup.Pointwise
[2035/4301] Building Mathlib.GroupTheory.Submonoid.Units
[2036/4301] Building Mathlib.CategoryTheory.Triangulated.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subsemiring.Pointwise, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[2037/4301] Building Mathlib.CategoryTheory.Limits.Preserves.Shapes.Biproducts
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Hom, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Hom, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Hom, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Hom, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Hom, data field mul is uncovered in Monoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Hom, data field one is uncovered in Monoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Hom, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Hom, data field smul is uncovered in MulDistribMulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Hom, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[2038/4301] Building Mathlib.Combinatorics.Catalan
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Units, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Units, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Units, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Submonoid.Units, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[2039/4301] Building Mathlib.CategoryTheory.Sites.Sheaf
[2040/4301] Building Mathlib.CategoryTheory.Monoidal.Types.Coyoneda
[2041/4301] Building Mathlib.Order.CompactlyGenerated.Intervals
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Basic, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Basic, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Basic, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2042/4301] Building Mathlib.RepresentationTheory.Action.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Pointwise, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Subgroup.Pointwise, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[2043/4301] Building Mathlib.CategoryTheory.Preadditive.OfBiproducts
[2044/4301] Building Mathlib.Data.DFinsupp.WellFounded
[2045/4301] Building Mathlib.SetTheory.Game.Nim
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Multilinear.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Multilinear.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Multilinear.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Multilinear.Basic, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Multilinear.Basic, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Multilinear.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Multilinear.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Multilinear.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Multilinear.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Multilinear.Basic, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Multilinear.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Multilinear.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Multilinear.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Multilinear.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Multilinear.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Multilinear.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[2046/4301] Building Mathlib.LinearAlgebra.Span
[2047/4301] Building Mathlib.Topology.Order
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Linear.FunctorCategory, data field smul is uncovered in Module.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Linear.FunctorCategory, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2048/4301] Building Mathlib.CategoryTheory.Abelian.NonPreadditive
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.OfBiproducts, data field add is uncovered in AddCommMonoid.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.OfBiproducts, data field zero is uncovered in AddCommMonoid.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.OfBiproducts, data field nsmul is uncovered in AddCommMonoid.
                      It might be better to declare an instance of AddMonoid first.
[2049/4301] Building Mathlib.CategoryTheory.Subobject.Basic
[2050/4301] Building Mathlib.CategoryTheory.Limits.Shapes.CommSq
[2051/4301] Building Mathlib.Algebra.Homology.ShortComplex.Homology
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Order, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Order, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[2052/4301] Building Mathlib.Algebra.Group.ConjFinite
[2053/4301] Building Mathlib.RingTheory.Fintype
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.NonPreadditive, data field add is uncovered in AddCommGroup.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.NonPreadditive, data field zero is uncovered in AddCommGroup.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.NonPreadditive, data field neg is uncovered in AddCommGroup.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.NonPreadditive, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.NonPreadditive, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[2054/4301] Building Mathlib.CategoryTheory.Filtered.Final
[2055/4301] Building Mathlib.CategoryTheory.GuitartExact
[2056/4301] Building Mathlib.Algebra.Category.Ring.FilteredColimits
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subterminal, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subterminal, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subterminal, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subterminal, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2057/4301] Building Mathlib.Algebra.Category.Ring.Colimits
[2058/4301] Building Mathlib.CategoryTheory.Monoidal.Internal.Types
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Basic, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Basic, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[2059/4301] Building Mathlib.CategoryTheory.GradedObject.Unitor
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Homology, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Homology, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2060/4301] Building Mathlib.CategoryTheory.GradedObject.Trifunctor
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Colimits, data field neg is uncovered in AddGroup.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Colimits, data field nsmul is uncovered in AddGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Colimits, data field zsmul is uncovered in AddGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Colimits, data field one is uncovered in AddGroupWithOne.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Colimits, data field mul is uncovered in CommRing.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Colimits, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Colimits, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[2061/4301] Building Mathlib.Algebra.Algebra.Equiv
[2062/4301] Building Mathlib.Algebra.Algebra.NonUnitalHom
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Span, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[2063/4301] Building Mathlib.Algebra.Category.GroupCat.Limits
[2064/4301] Building Mathlib.Order.Category.CompleteLat
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Sheaf, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Sheaf, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Sheaf, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Sheaf, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Sheaf, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Sheaf, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Sheaf, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Sheaf, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Sheaf, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2065/4301] Building Mathlib.Order.Category.BddDistLat
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.Pointwise, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[2066/4301] Building Mathlib.Data.ENNReal.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.CompleteLat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.CompleteLat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.CompleteLat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.CompleteLat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2067/4301] Building Mathlib.Analysis.Normed.Group.Seminorm
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddDistLat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddDistLat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddDistLat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BddDistLat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2068/4301] Building Mathlib.GroupTheory.QuotientGroup
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Types, data field one is uncovered in Monoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Types, data field mul is uncovered in Monoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Types, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Types, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Types, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Types, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Types, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Types, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Types, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Types, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Types, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Types, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Types, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Types, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Types, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[2069/4301] Building Mathlib.Order.Category.NonemptyFinLinOrd
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.NonUnitalHom, data field toFun is uncovered in NonUnitalAlgHom.
                      It might be better to declare an instance of MulActionHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.NonUnitalHom, data field toFun is uncovered in NonUnitalAlgHom.
                      It might be better to declare an instance of MulActionHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.NonUnitalHom, data field toFun is uncovered in NonUnitalAlgHom.
                      It might be better to declare an instance of MulActionHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.NonUnitalHom, data field toFun is uncovered in NonUnitalAlgHom.
                      It might be better to declare an instance of MulActionHom first.
[2070/4301] Building Mathlib.Data.Finsupp.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field mul is uncovered in Group.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field one is uncovered in Group.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field smul is uncovered in MulSemiringAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field smul is uncovered in MulDistribMulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Equiv, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[2071/4301] Building Mathlib.Algebra.Algebra.Prod
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Limits, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Limits, data field liftedCone is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Limits, data field validLift is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Limits, data field liftedCone is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Limits, data field validLift is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Limits, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[2072/4301] Building Mathlib.CategoryTheory.Limits.Presheaf
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GuitartExact, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GuitartExact, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GuitartExact, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GuitartExact, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2073/4301] Building Mathlib.GroupTheory.DoubleCoset
[2074/4301] Building Mathlib.Data.Matroid.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.ENNReal.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.Data.ENNReal.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[2075/4301] Building Mathlib.Topology.Maps
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.NonemptyFinLinOrd, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.NonemptyFinLinOrd, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.NonemptyFinLinOrd, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.NonemptyFinLinOrd, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2076/4301] Building Mathlib.CategoryTheory.Limits.Shapes.Countable
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Countable, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Limits.Shapes.Countable, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2077/4301] Building Mathlib.RingTheory.Subring.Pointwise
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Seminorm, data field inf is uncovered in Lattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Seminorm, data field toFun is uncovered in NonarchAddGroupSeminorm.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Seminorm, data field toFun is uncovered in NonarchAddGroupSeminorm.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Seminorm, data field toFun is uncovered in NonarchAddGroupSeminorm.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Seminorm, data field toFun is uncovered in NonarchAddGroupSeminorm.
                      It might be better to declare an instance of ZeroHom first.
[2078/4301] Building Mathlib.CategoryTheory.Limits.FinallySmall
[2079/4301] Building Mathlib.CategoryTheory.Enriched.Basic
[2080/4301] Building Mathlib.CategoryTheory.Closed.Ideal
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[2081/4301] Building Mathlib.CategoryTheory.Limits.EpiMono
[2082/4301] Building Mathlib.Algebra.Homology.ShortComplex.QuasiIso
[2083/4301] Building Mathlib.CategoryTheory.Preadditive.Biproducts
[2084/4301] Building Mathlib.NumberTheory.Primorial
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Subring.Pointwise, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[2085/4301] Building Mathlib.CategoryTheory.Sites.CoversTop
[2086/4301] Building Mathlib.CategoryTheory.Sites.Whiskering
[2087/4301] Building Mathlib.CategoryTheory.Sites.Plus
[2088/4301] Building Mathlib.Data.Finset.NatDivisors
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.QuotientGroup, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.QuotientGroup, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.QuotientGroup, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.QuotientGroup, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[2089/4301] Building Mathlib.Combinatorics.Additive.ETransform
[2090/4301] Building Mathlib.GroupTheory.ClassEquation
[2091/4301] Building Mathlib.CategoryTheory.Sites.Preserves
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Enriched.Basic, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Enriched.Basic, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Enriched.Basic, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Enriched.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Enriched.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Enriched.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Enriched.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Enriched.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Enriched.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2092/4301] Building Mathlib.CategoryTheory.Limits.Shapes.KernelPair
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Finset.NatDivisors, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[2093/4301] Building Mathlib.CategoryTheory.Subobject.WellPowered
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Whiskering, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Whiskering, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2094/4301] Building Mathlib.CategoryTheory.Subobject.FactorThru
[2095/4301] Building Mathlib.Algebra.Algebra.Pi
[2096/4301] Building Mathlib.Algebra.Module.Submodule.Bilinear
[2097/4301] Building Mathlib.CategoryTheory.Sites.Sheafification
[2098/4301] Building Mathlib.Data.Finset.Pointwise.Interval
[2099/4301] Building Mathlib.Combinatorics.Additive.RuzsaCovering
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Pi, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Pi, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Pi, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Pi, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Pi, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[2100/4301] Building Mathlib.Order.Category.FinBddDistLat
[2101/4301] Building Mathlib.Order.Category.HeytAlg
[2102/4301] Building Mathlib.Algebra.Lie.NonUnitalNonAssocAlgebra
[2103/4301] Building Mathlib.Algebra.Algebra.Tower
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Basic, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Basic, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Basic, data field smul is uncovered in SMulZeroClass.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Basic, data field smul is uncovered in DistribSMul.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Basic, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Basic, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[2104/4301] Building Mathlib.Algebra.Category.Ring.Limits
[2105/4301] Building Mathlib.Data.ENNReal.Operations
[2106/4301] Building Mathlib.Data.Real.ENatENNReal
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.HeytAlg, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.HeytAlg, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2107/4301] Building Mathlib.Data.Finset.Finsupp
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.NonUnitalNonAssocAlgebra, data field mul is uncovered in NonUnitalNonAssocSemiring.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.NonUnitalNonAssocAlgebra, data field toFun is uncovered in NonUnitalAlgHom.
                      It might be better to declare an instance of MulActionHom first.
[2108/4301] Building Mathlib.Data.DFinsupp.Interval
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.FinBddDistLat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.FinBddDistLat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.FinBddDistLat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.FinBddDistLat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2109/4301] Building Mathlib.CategoryTheory.Limits.VanKampen
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Plus, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Plus, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Plus, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Plus, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Plus, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Plus, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Plus, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Plus, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2110/4301] Building Mathlib.Algebra.Algebra.Opposite
[2111/4301] Building Mathlib.RepresentationTheory.Action.Concrete
[2112/4301] Building Mathlib.MeasureTheory.Measure.AddContent
[2113/4301] Building Mathlib.AlgebraicTopology.SimplexCategory
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Concrete, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[2114/4301] Building Mathlib.Combinatorics.Additive.PluenneckeRuzsa
[2115/4301] Building Mathlib.Data.Matroid.IndepAxioms
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Tower, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[2116/4301] Building Mathlib.Algebra.Pointwise.Stabilizer
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Opposite, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Opposite, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[2117/4301] Building Mathlib.Algebra.Category.GroupCat.EpiMono
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.ENNReal.Operations, data field smul is uncovered in Algebra.
                      It might be better to declare an instance of SMul first.
[2118/4301] Building Mathlib.GroupTheory.PresentedGroup
[2119/4301] Building Mathlib.Algebra.ModEq
[2120/4301] Building Mathlib.Algebra.CharZero.Quotient
[2121/4301] Building Mathlib.CategoryTheory.Limits.Preserves.FunctorCategory
[2122/4301] Building Mathlib.Logic.Equiv.TransferInstance
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Limits, data field carrier is uncovered in Subsemiring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Limits, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Limits, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Limits, data field liftedCone is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Limits, data field validLift is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Limits, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Limits, data field carrier is uncovered in Subring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Limits, data field liftedCone is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Limits, data field validLift is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Limits, data field liftedCone is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Limits, data field validLift is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[2123/4301] Building Mathlib.Algebra.Star.StarAlgHom
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplexCategory, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplexCategory, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplexCategory, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplexCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplexCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplexCategory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplexCategory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2124/4301] Building Mathlib.LinearAlgebra.Prod
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.EpiMono, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.EpiMono, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[2125/4301] Building Mathlib.Algebra.Algebra.NonUnitalSubalgebra
[2126/4301] Building Mathlib.GroupTheory.Divisible
[2127/4301] Building Mathlib.LinearAlgebra.Quotient
[2128/4301] Building Mathlib.CategoryTheory.Limits.Shapes.Reflexive
[2129/4301] Building Mathlib.Topology.Constructions
[2130/4301] Building Mathlib.CategoryTheory.Limits.Indization.IndObject
[2131/4301] Building Mathlib.CategoryTheory.Sites.ConstantSheaf
[2132/4301] Building Mathlib.CategoryTheory.Sites.Adjunction
[2133/4301] Building Mathlib.GroupTheory.GroupAction.Quotient
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Logic.Equiv.TransferInstance, data field natCast is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Logic.Equiv.TransferInstance, data field intCast is uncovered in AddGroupWithOne.
                      It might be better to declare an instance of IntCast first.
[2134/4301] Building Mathlib.Data.Finsupp.ToDFinsupp
[2135/4301] Building Mathlib.Data.Finset.PiAntidiagonal
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Trifunctor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Trifunctor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Trifunctor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Trifunctor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Trifunctor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Trifunctor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Trifunctor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Trifunctor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Trifunctor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Trifunctor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Trifunctor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.GradedObject.Trifunctor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2136/4301] Building Mathlib.Data.Finsupp.Order
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.StarAlgHom, data field toFun is uncovered in NonUnitalStarAlgHom.
                      It might be better to declare an instance of MulActionHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.StarAlgHom, data field mul is uncovered in Monoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.StarAlgHom, data field one is uncovered in Monoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.StarAlgHom, data field toFun is uncovered in StarAlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.StarAlgHom, data field toFun is uncovered in StarAlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.StarAlgHom, data field mul is uncovered in Monoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.StarAlgHom, data field one is uncovered in Monoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.StarAlgHom, data field toFun is uncovered in StarAlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.StarAlgHom, data field invFun is uncovered in StarAlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.StarAlgHom, data field toFun is uncovered in StarAlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.StarAlgHom, data field invFun is uncovered in StarAlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.StarAlgHom, data field toFun is uncovered in StarAlgEquiv.
                      It might be better to declare an instance of Equiv first.
[2137/4301] Building Mathlib.Order.Category.BoolAlg
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.ToDFinsupp, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.ToDFinsupp, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.ToDFinsupp, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.ToDFinsupp, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.ToDFinsupp, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.ToDFinsupp, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[2138/4301] Building Mathlib.Algebra.Homology.ShortComplex.PreservesHomology
[2139/4301] Building Mathlib.CategoryTheory.Limits.Shapes.Diagonal
[2140/4301] Building Mathlib.CategoryTheory.Sites.CompatiblePlus
[2141/4301] Building Mathlib.CategoryTheory.Subobject.Lattice
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BoolAlg, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BoolAlg, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BoolAlg, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.BoolAlg, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2142/4301] Building Mathlib.Data.Finsupp.AList
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Order, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Order, data field inf is uncovered in SemilatticeInf.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Order, data field sup is uncovered in SemilatticeSup.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Order, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[2143/4301] Building Mathlib.CategoryTheory.Subobject.Types
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.GroupAction.Quotient, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[2144/4301] Building Mathlib.CategoryTheory.Subobject.Comma
[2145/4301] Building Mathlib.Algebra.Category.GroupCat.Colimits
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Prod, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Prod, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Prod, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Prod, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Prod, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Prod, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Prod, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Prod, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Prod, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Prod, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Prod, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Prod, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[2146/4301] Building Mathlib.LinearAlgebra.BilinearForm.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Quotient, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Quotient, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Quotient, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Quotient, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Quotient, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Quotient, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Quotient, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Quotient, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Quotient, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2147/4301] Building Mathlib.Algebra.Algebra.RestrictScalars
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Colimits, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Colimits, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Colimits, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Colimits, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[2148/4301] Building Mathlib.CategoryTheory.Sites.ConcreteSheafification
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Comma, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Comma, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Comma, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Comma, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[2149/4301] Building Mathlib.Data.ENNReal.Inv
[2150/4301] Building Mathlib.GroupTheory.Finiteness
[2151/4301] Building Mathlib.CategoryTheory.Preadditive.AdditiveFunctor
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.RestrictScalars, data field smul is uncovered in Algebra.
                      It might be better to declare an instance of SMul first.
[2152/4301] Building Mathlib.Data.Matroid.Dual
[2153/4301] Building Mathlib.LinearAlgebra.TensorProduct
[2154/4301] Building Mathlib.Data.Multiset.Interval
[2155/4301] Building Mathlib.Logic.Small.Group
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Types, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Types, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Types, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Types, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2156/4301] Building Mathlib.Logic.Small.Ring
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.NonUnitalSubalgebra, data field toFun is uncovered in NonUnitalAlgHom.
                      It might be better to declare an instance of MulActionHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.NonUnitalSubalgebra, data field carrier is uncovered in NonUnitalSubalgebra.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.NonUnitalSubalgebra, data field toFun is uncovered in NonUnitalAlgHom.
                      It might be better to declare an instance of MulActionHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.NonUnitalSubalgebra, data field carrier is uncovered in NonUnitalSubalgebra.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.NonUnitalSubalgebra, data field toFun is uncovered in NonUnitalAlgHom.
                      It might be better to declare an instance of MulActionHom first.
[2157/4301] Building Mathlib.Algebra.Category.GroupCat.Biproducts
[2158/4301] Building Mathlib.Topology.ContinuousOn
[2159/4301] Building Mathlib.Algebra.Category.BoolRing
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.ENNReal.Inv, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.ENNReal.Inv, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[2160/4301] Building Mathlib.Data.Finsupp.Interval
[2161/4301] Building Mathlib.Data.Finsupp.Multiset
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.BilinearForm.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.BilinearForm.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2162/4301] Building Mathlib.Data.Finsupp.Encodable
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.ConcreteSheafification, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.ConcreteSheafification, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2163/4301] Building Mathlib.Algebra.Category.GroupCat.Kernels
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Biproducts, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[2164/4301] Building Mathlib.CategoryTheory.Closed.Types
[2165/4301] Building Mathlib.LinearAlgebra.AffineSpace.AffineMap
[2166/4301] Building Mathlib.Algebra.TrivSqZeroExt
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.BoolRing, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.BoolRing, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.BoolRing, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.BoolRing, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2167/4301] Building Mathlib.Algebra.Star.Module
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Multiset, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Multiset, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Multiset, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[2168/4301] Building Mathlib.LinearAlgebra.LinearPMap
[2169/4301] Building Mathlib.CategoryTheory.Abelian.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Closed.Types, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Closed.Types, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2170/4301] Building Mathlib.AlgebraicTopology.SimplicialObject
[2171/4301] Building Mathlib.LinearAlgebra.QuotientPi
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Module, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Module, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Module, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2172/4301] Building Mathlib.LinearAlgebra.Isomorphisms
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Lattice, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Lattice, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Lattice, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Lattice, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Lattice, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Lattice, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Lattice, data field inf is uncovered in SemilatticeInf.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Lattice, data field sup is uncovered in SemilatticeSup.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Lattice, data field sInf is uncovered in CompleteSemilatticeInf.
                      It might be better to declare an instance of InfSet first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Lattice, data field sSup is uncovered in CompleteSemilatticeSup.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Lattice, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Subobject.Lattice, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[2173/4301] Building Mathlib.MeasureTheory.Constructions.Cylinders
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.Basic, data field I is uncovered in CategoryTheory.Limits.StrongEpiMonoFactorisation.
                      It might be better to declare an instance of CategoryTheory.Limits.MonoFactorisation first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.Basic, data field m is uncovered in CategoryTheory.Limits.StrongEpiMonoFactorisation.
                      It might be better to declare an instance of CategoryTheory.Limits.MonoFactorisation first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.Basic, data field e is uncovered in CategoryTheory.Limits.StrongEpiMonoFactorisation.
                      It might be better to declare an instance of CategoryTheory.Limits.MonoFactorisation first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.Basic, data field I is uncovered in CategoryTheory.Limits.StrongEpiMonoFactorisation.
                      It might be better to declare an instance of CategoryTheory.Limits.MonoFactorisation first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.Basic, data field m is uncovered in CategoryTheory.Limits.StrongEpiMonoFactorisation.
                      It might be better to declare an instance of CategoryTheory.Limits.MonoFactorisation first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.Basic, data field e is uncovered in CategoryTheory.Limits.StrongEpiMonoFactorisation.
                      It might be better to declare an instance of CategoryTheory.Limits.MonoFactorisation first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.Basic, data field normalMonoOfMono is uncovered in CategoryTheory.Abelian.
                      It might be better to declare an instance of CategoryTheory.NormalMonoCategory first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.Basic, data field normalEpiOfEpi is uncovered in CategoryTheory.Abelian.
                      It might be better to declare an instance of CategoryTheory.NormalEpiCategory first.
[2174/4301] Building Mathlib.CategoryTheory.Monad.Coequalizer
[2175/4301] Building Mathlib.Data.Finsupp.PWO
[2176/4301] Building Mathlib.CategoryTheory.Action
[2177/4301] Building Mathlib.LinearAlgebra.Projection
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.QuotientPi, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[2178/4301] Building Mathlib.Algebra.Order.Floor.Div
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Action, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Action, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Action, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Action, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Action, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2179/4301] Building Mathlib.Data.Finsupp.Lex
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Lex, data field lt is uncovered in PartialOrder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Lex, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Lex, data field lt is uncovered in LinearOrder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Lex, data field le is uncovered in LinearOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Finsupp.Lex, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[2180/4301] Building Mathlib.GroupTheory.Abelianization
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineMap, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineMap, data field vadd is uncovered in AddTorsor.
                      It might be better to declare an instance of VAdd first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineMap, data field vsub is uncovered in AddTorsor.
                      It might be better to declare an instance of VSub first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineMap, data field one is uncovered in Monoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineMap, data field mul is uncovered in Monoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineMap, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineMap, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineMap, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[2181/4301] Building Mathlib.CategoryTheory.Preadditive.LeftExact
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Isomorphisms, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[2182/4301] Building Mathlib.CategoryTheory.Preadditive.EilenbergMoore
[2183/4301] Building Mathlib.CategoryTheory.Preadditive.EndoFunctor
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Abelianization, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Abelianization, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Abelianization, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Abelianization, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Abelianization, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[2184/4301] Building Mathlib.CategoryTheory.Shift.Pullback
[2185/4301] Building Mathlib.CategoryTheory.Quotient.Preadditive
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.LinearPMap, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.LinearPMap, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.LinearPMap, data field le is uncovered in SemilatticeInf.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.LinearPMap, data field inf is uncovered in SemilatticeInf.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.LinearPMap, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.LinearPMap, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.LinearPMap, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.LinearPMap, data field vadd is uncovered in AddAction.
                      It might be better to declare an instance of VAdd first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.LinearPMap, data field zsmul is uncovered in SubtractionCommMonoid.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.LinearPMap, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.LinearPMap, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2186/4301] Building Mathlib.GroupTheory.Index
[2187/4301] Building Mathlib.Data.ENNReal.Real
[2188/4301] Building Mathlib.Testing.SlimCheck.Functions
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Quotient.Preadditive, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Quotient.Preadditive, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[2189/4301] Building Mathlib.Algebra.Category.ModuleCat.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Projection, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2190/4301] Building Mathlib.CategoryTheory.Triangulated.Rotate
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.TrivSqZeroExt, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.TrivSqZeroExt, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.TrivSqZeroExt, data field natCast is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.TrivSqZeroExt, data field intCast is uncovered in AddGroupWithOne.
                      It might be better to declare an instance of IntCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.TrivSqZeroExt, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.TrivSqZeroExt, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.TrivSqZeroExt, data field smul is uncovered in Algebra.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.TrivSqZeroExt, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.TrivSqZeroExt, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[2191/4301] Building Mathlib.CategoryTheory.Preadditive.Opposite
[2192/4301] Building Mathlib.CategoryTheory.Monoidal.Preadditive
[2193/4301] Building Mathlib.CategoryTheory.Linear.LinearFunctor
[2194/4301] Building Mathlib.CategoryTheory.Limits.FilteredColimitCommutesFiniteLimit
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.ENNReal.Real, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[2195/4301] Building Mathlib.Order.Category.FinBoolAlg
[2196/4301] Building Mathlib.CategoryTheory.Sites.CompatibleSheafification
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Rotate, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Rotate, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Rotate, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Rotate, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2197/4301] Building Mathlib.Data.Nat.Choose.Multinomial
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.FinBoolAlg, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.FinBoolAlg, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.FinBoolAlg, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.FinBoolAlg, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.FinBoolAlg, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.FinBoolAlg, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.FinBoolAlg, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.FinBoolAlg, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2198/4301] Building Mathlib.Logic.Small.Module
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.TensorProduct, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.TensorProduct, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.TensorProduct, data field nsmul is uncovered in AddCommMonoid.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.TensorProduct, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.TensorProduct, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.TensorProduct, data field neg is uncovered in AddCommGroup.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.TensorProduct, data field sub is uncovered in AddCommGroup.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.TensorProduct, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[2199/4301] Building Mathlib.Topology.Bases
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Basic, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Basic, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Basic, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2200/4301] Building Mathlib.Topology.Inseparable
[2201/4301] Building Mathlib.Topology.Algebra.Order.LeftRight
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EndoFunctor, data field add is uncovered in AddCommGroup.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EndoFunctor, data field zero is uncovered in AddCommGroup.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EndoFunctor, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EndoFunctor, data field neg is uncovered in AddCommGroup.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EndoFunctor, data field sub is uncovered in AddCommGroup.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EndoFunctor, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EndoFunctor, data field add is uncovered in AddCommGroup.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EndoFunctor, data field zero is uncovered in AddCommGroup.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EndoFunctor, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EndoFunctor, data field neg is uncovered in AddCommGroup.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EndoFunctor, data field sub is uncovered in AddCommGroup.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EndoFunctor, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[2202/4301] Building Mathlib.CategoryTheory.Subobject.Limits
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2203/4301] Building Mathlib.CategoryTheory.Idempotents.Basic
[2204/4301] Building Mathlib.CategoryTheory.Adjunction.Lifting
[2205/4301] Building Mathlib.Algebra.Star.NonUnitalSubalgebra
[2206/4301] Building Mathlib.CategoryTheory.Sites.Limits
[2207/4301] Building Mathlib.Data.Finsupp.Antidiagonal
[2208/4301] Building Mathlib.Topology.LocalExtr
[2209/4301] Building Mathlib.Topology.Irreducible
[2210/4301] Building Mathlib.Topology.Clopen
[2211/4301] Building Mathlib.Topology.LocallyFinite
[2212/4301] Building Mathlib.CategoryTheory.Monad.Monadicity
[2213/4301] Building Mathlib.Data.Finsupp.WellFounded
[2214/4301] Building Mathlib.CategoryTheory.MorphismProperty
[2215/4301] Building Mathlib.Algebra.Algebra.Unitization
[2216/4301] Building Mathlib.CategoryTheory.Simple
[2217/4301] Building Mathlib.CategoryTheory.Abelian.Transfer
[2218/4301] Building Mathlib.Algebra.Order.ToIntervalMod
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Limits, data field liftedCone is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Limits, data field validLift is uncovered in CategoryTheory.LiftsToLimit.
                      It might be better to declare an instance of CategoryTheory.LiftableCone first.
[2219/4301] Building Mathlib.LinearAlgebra.AffineSpace.Slope
[2220/4301] Building Mathlib.Algebra.Homology.ShortComplex.ExactFunctor
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EilenbergMoore, data field add is uncovered in AddCommGroup.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EilenbergMoore, data field zero is uncovered in AddCommGroup.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EilenbergMoore, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EilenbergMoore, data field neg is uncovered in AddCommGroup.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EilenbergMoore, data field sub is uncovered in AddCommGroup.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EilenbergMoore, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EilenbergMoore, data field add is uncovered in AddCommGroup.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EilenbergMoore, data field zero is uncovered in AddCommGroup.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EilenbergMoore, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EilenbergMoore, data field neg is uncovered in AddCommGroup.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EilenbergMoore, data field sub is uncovered in AddCommGroup.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.EilenbergMoore, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[2221/4301] Building Mathlib.GroupTheory.FreeAbelianGroup
[2222/4301] Building Mathlib.Algebra.DualNumber
[2223/4301] Building Mathlib.GroupTheory.OrderOfElement
[2224/4301] Building Mathlib.Algebra.Homology.ShortComplex.Preadditive
[2225/4301] Building Mathlib.CategoryTheory.Shift.Opposite
[2226/4301] Building Mathlib.Data.Real.ConjExponents
[2227/4301] Building Mathlib.LinearAlgebra.Finsupp
[2228/4301] Building Mathlib.CategoryTheory.Generator
[2229/4301] Building Mathlib.CategoryTheory.Abelian.FunctorCategory
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeAbelianGroup, data field pure is uncovered in Monad.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeAbelianGroup, data field bind is uncovered in Monad.
                      It might be better to declare an instance of Bind first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeAbelianGroup, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeAbelianGroup, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeAbelianGroup, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeAbelianGroup, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeAbelianGroup, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeAbelianGroup, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeAbelianGroup, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[2230/4301] Building Mathlib.CategoryTheory.Quotient.Linear
[2231/4301] Building Mathlib.LinearAlgebra.TensorProduct.Tower
[2232/4301] Building Mathlib.Algebra.Algebra.Bilinear
[2233/4301] Building Mathlib.LinearAlgebra.Multilinear.TensorProduct
[2234/4301] Building Mathlib.Algebra.Category.ModuleCat.Algebra
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Unitization, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Unitization, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Unitization, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Unitization, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Unitization, data field toFun is uncovered in NonUnitalAlgHom.
                      It might be better to declare an instance of MulActionHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Unitization, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[2235/4301] Building Mathlib.Algebra.Category.ModuleCat.EpiMono
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.OrderOfElement, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.OrderOfElement, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[2236/4301] Building Mathlib.Algebra.Category.ModuleCat.FilteredColimits
[2237/4301] Building Mathlib.Algebra.Category.GroupCat.ZModuleEquivalence
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.ToIntervalMod, data field sbtw is uncovered in CircularPreorder.
                      It might be better to declare an instance of SBtw first.
[2238/4301] Building Mathlib.Logic.Hydra
[2239/4301] Building Mathlib.LinearAlgebra.AffineSpace.AffineEquiv
[2240/4301] Building Mathlib.CategoryTheory.Galois.Basic
[2241/4301] Building Mathlib.CategoryTheory.Abelian.Opposite
[2243/4301] Building Mathlib.Data.Real.EReal
[2243/4301] Building Mathlib.SetTheory.Cardinal.Ordinal
[2244/4301] Building Mathlib.Data.Matrix.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Preadditive, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.Preadditive, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[2245/4301] Building Mathlib.LinearAlgebra.TensorProduct.Prod
[2246/4301] Building Mathlib.Algebra.Category.ModuleCat.Tannaka
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.Opposite, data field normalMonoOfMono is uncovered in CategoryTheory.Abelian.
                      It might be better to declare an instance of CategoryTheory.NormalMonoCategory first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.Opposite, data field normalEpiOfEpi is uncovered in CategoryTheory.Abelian.
                      It might be better to declare an instance of CategoryTheory.NormalEpiCategory first.
[2247/4301] Building Mathlib.Algebra.Category.ModuleCat.Presheaf
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Tannaka, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Tannaka, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[2248/4301] Building Mathlib.CategoryTheory.Monoidal.Linear
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.EReal, data field zsmul is uncovered in SubNegZeroMonoid.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.EReal, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Real.EReal, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[2249/4301] Building Mathlib.GroupTheory.FreeGroup.NielsenSchreier
[2250/4301] Building Mathlib.AlgebraicTopology.SplitSimplicialObject
[2251/4301] Building Mathlib.GroupTheory.Solvable
[2252/4301] Building Mathlib.GroupTheory.Commensurable
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeGroup.NielsenSchreier, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeGroup.NielsenSchreier, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2253/4301] Building Mathlib.CategoryTheory.Preadditive.Yoneda.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineEquiv, data field toFun is uncovered in AffineEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineEquiv, data field invFun is uncovered in AffineEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineEquiv, data field one is uncovered in Group.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineEquiv, data field mul is uncovered in Group.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineEquiv, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineEquiv, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineEquiv, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineEquiv, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineEquiv, data field toFun is uncovered in AffineEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineEquiv, data field invFun is uncovered in AffineEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineEquiv, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[2254/4301] Building Mathlib.Algebra.Category.ModuleCat.Colimits
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Commensurable, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[2255/4301] Building Mathlib.Algebra.Category.ModuleCat.Products
[2256/4301] Building Mathlib.Topology.Connected.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SplitSimplicialObject, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SplitSimplicialObject, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SplitSimplicialObject, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SplitSimplicialObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SplitSimplicialObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SplitSimplicialObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SplitSimplicialObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2257/4301] Building Mathlib.Algebra.Homology.ImageToKernel
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Presheaf, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Presheaf, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Presheaf, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Presheaf, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Presheaf, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Presheaf, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Presheaf, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2258/4301] Building Mathlib.Data.Analysis.Topology
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Finsupp, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Finsupp, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Finsupp, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Finsupp, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Finsupp, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Finsupp, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Finsupp, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Finsupp, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Finsupp, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Finsupp, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Finsupp, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Finsupp, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Finsupp, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Finsupp, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[2259/4301] Building Mathlib.CategoryTheory.Noetherian
[2260/4301] Building Mathlib.CategoryTheory.Idempotents.Karoubi
[2261/4301] Building Mathlib.AlgebraicTopology.CechNerve
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Colimits, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[2262/4301] Building Mathlib.CategoryTheory.Abelian.Subobject
[2263/4301] Building Mathlib.Algebra.Category.GroupCat.Adjunctions
[2264/4301] Building Mathlib.RingTheory.FreeRing
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Yoneda.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Yoneda.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Yoneda.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Yoneda.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Yoneda.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Yoneda.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Yoneda.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Yoneda.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Yoneda.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Yoneda.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Yoneda.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Yoneda.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[2265/4301] Building Mathlib.Algebra.CharP.Basic
[2266/4301] Building Mathlib.LinearAlgebra.PiTensorProduct
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.Karoubi, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.Karoubi, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.Karoubi, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.Karoubi, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.Karoubi, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.Karoubi, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.Karoubi, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.Karoubi, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[2267/4301] Building Mathlib.CategoryTheory.Localization.Construction
[2268/4301] Building Mathlib.AlgebraicTopology.SimplicialSet
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Adjunctions, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Adjunctions, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Adjunctions, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Adjunctions, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Adjunctions, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Adjunctions, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Adjunctions, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Adjunctions, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Adjunctions, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Adjunctions, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Adjunctions, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2269/4301] Building Mathlib.Algebra.Homology.HomologicalComplex
[2270/4301] Building Mathlib.Topology.Compactness.Compact
[2271/4301] Building Mathlib.LinearAlgebra.FiniteSpan
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Localization.Construction, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Localization.Construction, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Localization.Construction, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Localization.Construction, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2272/4301] Building Mathlib.Data.W.Cardinal
[2273/4301] Building Mathlib.Computability.Encoding
[2274/4301] Building Mathlib.SetTheory.Cardinal.Continuum
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Computability.Encoding, data field Γ is uncovered in Computability.FinEncoding.
                      It might be better to declare an instance of Computability.Encoding first.
[Elab.StructInst.coveredFields] In Mathlib.Computability.Encoding, data field encode is uncovered in Computability.FinEncoding.
                      It might be better to declare an instance of Computability.Encoding first.
[Elab.StructInst.coveredFields] In Mathlib.Computability.Encoding, data field decode is uncovered in Computability.FinEncoding.
                      It might be better to declare an instance of Computability.Encoding first.
[Elab.StructInst.coveredFields] In Mathlib.Computability.Encoding, data field Γ is uncovered in Computability.FinEncoding.
                      It might be better to declare an instance of Computability.Encoding first.
[Elab.StructInst.coveredFields] In Mathlib.Computability.Encoding, data field encode is uncovered in Computability.FinEncoding.
                      It might be better to declare an instance of Computability.Encoding first.
[Elab.StructInst.coveredFields] In Mathlib.Computability.Encoding, data field decode is uncovered in Computability.FinEncoding.
                      It might be better to declare an instance of Computability.Encoding first.
[2275/4301] Building Mathlib.Algebra.Category.ModuleCat.Kernels
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field one is uncovered in NonAssocSemiring.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Basic, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[2276/4301] Building Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic
[2277/4301] Building Mathlib.LinearAlgebra.AffineSpace.AffineSubspace
[2278/4301] Building Mathlib.LinearAlgebra.AffineSpace.Midpoint
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialSet, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialSet, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialSet, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialSet, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialSet, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.SimplicialSet, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2279/4301] Building Mathlib.GroupTheory.Perm.Finite
[2280/4301] Building Mathlib.SetTheory.Cardinal.Divisibility
[2281/4301] Building Mathlib.SetTheory.Cardinal.CountableCover
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.Midpoint, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[2282/4301] Building Mathlib.SetTheory.Cardinal.Cofinality
stdout:
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Cardinal.Divisibility, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[2283/4301] Building Mathlib.Algebra.MonoidAlgebra.Basic
[2284/4301] Building Mathlib.RingTheory.Ideal.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.TensorProduct.Tower, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.TensorProduct.Tower, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.TensorProduct.Tower, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.TensorProduct.Tower, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2285/4301] Building Mathlib.CategoryTheory.Functor.Flat
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.NonUnitalSubalgebra, data field toFun is uncovered in NonUnitalStarAlgHom.
                      It might be better to declare an instance of MulActionHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.NonUnitalSubalgebra, data field toFun is uncovered in StarAlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.NonUnitalSubalgebra, data field invFun is uncovered in StarAlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.NonUnitalSubalgebra, data field star is uncovered in InvolutiveStar.
                      It might be better to declare an instance of Star first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.NonUnitalSubalgebra, data field carrier is uncovered in NonUnitalSubalgebra.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.NonUnitalSubalgebra, data field carrier is uncovered in NonUnitalStarSubalgebra.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.NonUnitalSubalgebra, data field toFun is uncovered in NonUnitalStarAlgHom.
                      It might be better to declare an instance of MulActionHom first.
[2286/4301] Building Mathlib.CategoryTheory.Preadditive.Generator
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomologicalComplex, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomologicalComplex, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomologicalComplex, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomologicalComplex, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomologicalComplex, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomologicalComplex, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomologicalComplex, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2287/4301] Building Mathlib.CategoryTheory.Linear.Yoneda
[2288/4301] Building Mathlib.Topology.Connected.LocallyConnected
[2289/4301] Building Mathlib.Topology.Connected.TotallyDisconnected
[2290/4301] Building Mathlib.CategoryTheory.Idempotents.Biproducts
[2291/4301] Building Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.Basic, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[2292/4301] Building Mathlib.CategoryTheory.Idempotents.FunctorExtension
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.CechNerve, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.CechNerve, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.CechNerve, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.CechNerve, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.CechNerve, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.CechNerve, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.CechNerve, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.CechNerve, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.CechNerve, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.CechNerve, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.CechNerve, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.CechNerve, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.CechNerve, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.CechNerve, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2293/4301] Building Mathlib.CategoryTheory.Idempotents.FunctorCategories
[2294/4301] Building Mathlib.CategoryTheory.Adjunction.AdjointFunctorTheorems
[2295/4301] Building Mathlib.GroupTheory.NoncommPiCoprod
[2296/4301] Building Mathlib.Algebra.Homology.Exact
[2297/4301] Building Mathlib.RingTheory.Coalgebra
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Linear.Yoneda, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Linear.Yoneda, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Linear.Yoneda, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Linear.Yoneda, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Linear.Yoneda, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Linear.Yoneda, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Linear.Yoneda, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Linear.Yoneda, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2298/4301] Building Mathlib.Algebra.CharP.Invertible
[2299/4301] Building Mathlib.CategoryTheory.Galois.GaloisObjects
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.NoncommPiCoprod, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[2300/4301] Building Mathlib.CategoryTheory.Localization.Predicate
[2301/4301] Building Mathlib.Data.Matrix.DualNumber
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2302/4301] Building Mathlib.Combinatorics.SimpleGraph.IncMatrix
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Galois.GaloisObjects, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[2303/4301] Building Mathlib.LinearAlgebra.Matrix.Orthogonal
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.FunctorCategories, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.FunctorCategories, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.FunctorCategories, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.FunctorCategories, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.FunctorCategories, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.FunctorCategories, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2304/4301] Building Mathlib.Data.Matrix.Invertible
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.DualNumber, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.DualNumber, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[2305/4301] Building Mathlib.Data.Matrix.RowCol
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineSubspace, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineSubspace, data field vadd is uncovered in AddTorsor.
                      It might be better to declare an instance of VAdd first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineSubspace, data field vsub is uncovered in AddTorsor.
                      It might be better to declare an instance of VSub first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineSubspace, data field sup is uncovered in CompleteLattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineSubspace, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineSubspace, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineSubspace, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineSubspace, data field sSup is uncovered in CompleteLattice.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.AffineSubspace, data field sInf is uncovered in CompleteLattice.
                      It might be better to declare an instance of InfSet first.
[2306/4301] Building Mathlib.Data.Matrix.Block
[2307/4301] Building Mathlib.Topology.AlexandrovDiscrete
[2308/4301] Building Mathlib.Topology.Compactness.LocallyCompact
[2309/4301] Building Mathlib.AlgebraicTopology.KanComplex
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Coalgebra, data field comul is uncovered in Coalgebra.
                      It might be better to declare an instance of CoalgebraStruct first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Coalgebra, data field counit is uncovered in Coalgebra.
                      It might be better to declare an instance of CoalgebraStruct first.
[2310/4301] Building Mathlib.RepresentationTheory.Action.Limits
[2311/4301] Building Mathlib.Algebra.CharP.Subring
[2312/4301] Building Mathlib.Algebra.CharP.Pi
[2313/4301] Building Mathlib.CategoryTheory.Monoidal.Subcategory
[2314/4301] Building Mathlib.Data.Matrix.CharP
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.PiTensorProduct, data field smul is uncovered in DistribMulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.PiTensorProduct, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.PiTensorProduct, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.PiTensorProduct, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.PiTensorProduct, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.PiTensorProduct, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.PiTensorProduct, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2315/4301] Building Mathlib.Data.Matrix.PEquiv
[2316/4301] Building Mathlib.AlgebraicTopology.Nerve
[2317/4301] Building Mathlib.Algebra.Homology.ShortComplex.Abelian
[2318/4301] Building Mathlib.NumberTheory.LegendreSymbol.MulCharacter
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.Nerve, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.Nerve, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.Nerve, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.Nerve, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2319/4301] Building Mathlib.GroupTheory.Perm.Cycle.Basic
[2320/4301] Building Mathlib.SetTheory.Cardinal.Subfield
[2321/4301] Building Mathlib.Algebra.Homology.HomologicalBicomplex
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Block, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Block, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Block, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Block, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Block, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Matrix.Block, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[2322/4301] Building Mathlib.Algebra.Homology.Functor
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.LegendreSymbol.MulCharacter, data field toFun is uncovered in MulChar.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.LegendreSymbol.MulCharacter, data field toFun is uncovered in MulChar.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.LegendreSymbol.MulCharacter, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.LegendreSymbol.MulCharacter, data field toFun is uncovered in MulChar.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.LegendreSymbol.MulCharacter, data field toFun is uncovered in MulChar.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.LegendreSymbol.MulCharacter, data field one is uncovered in CommGroup.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.LegendreSymbol.MulCharacter, data field mul is uncovered in CommGroup.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.LegendreSymbol.MulCharacter, data field inv is uncovered in CommGroup.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.LegendreSymbol.MulCharacter, data field toFun is uncovered in MulChar.
                      It might be better to declare an instance of OneHom first.
[2323/4301] Building Mathlib.Algebra.Homology.Single
stdout:
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Cardinal.Subfield, data field carrier is uncovered in Subfield.
                      It might be better to declare an instance of Subsemigroup first.
[2324/4301] Building Mathlib.Topology.UniformSpace.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Subcategory, data field ε is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Subcategory, data field μ is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Subcategory, data field ε is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Subcategory, data field μ is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[2325/4301] Building Mathlib.Algebra.Category.ModuleCat.Monoidal.Symmetric
[2326/4301] Building Mathlib.Algebra.Category.ModuleCat.Subobject
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Functor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Functor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Functor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Functor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2327/4301] Building Mathlib.ModelTheory.Encoding
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Basic, data field natCast is uncovered in NonAssocSemiring.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Basic, data field intCast is uncovered in NonAssocRing.
                      It might be better to declare an instance of IntCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Basic, data field toFun is uncovered in NonUnitalAlgHom.
                      It might be better to declare an instance of MulActionHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Basic, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Basic, data field nsmul is uncovered in NonUnitalNonAssocSemiring.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Basic, data field natCast is uncovered in NonAssocSemiring.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Basic, data field intCast is uncovered in NonAssocRing.
                      It might be better to declare an instance of IntCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Basic, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Basic, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Basic, data field toFun is uncovered in NonUnitalAlgHom.
                      It might be better to declare an instance of MulActionHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Basic, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[2328/4301] Building Mathlib.CategoryTheory.Preadditive.Mat
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Monoidal.Symmetric, data field braiding is uncovered in CategoryTheory.SymmetricCategory.
                      It might be better to declare an instance of CategoryTheory.BraidedCategory first.
[2329/4301] Building Mathlib.Algebra.Homology.Homology
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Limits, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Limits, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Limits, data field smul is uncovered in Module.
                      It might be better to declare an instance of SMul first.
[2330/4301] Building Mathlib.Algebra.Homology.DifferentialObject
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Subobject, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Subobject, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[2331/4301] Building Mathlib.Algebra.Module.Submodule.Pointwise
[2332/4301] Building Mathlib.RingTheory.Ideal.Quotient
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomologicalBicomplex, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomologicalBicomplex, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomologicalBicomplex, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomologicalBicomplex, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2333/4301] Building Mathlib.RingTheory.Localization.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Single, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Single, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2334/4301] Building Mathlib.MeasureTheory.MeasurableSpace.Card
[2335/4301] Building Mathlib.SetTheory.Game.Short
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Homology, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Homology, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Homology, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Homology, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Homology, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Homology, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Homology, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Homology, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2336/4301] Building Mathlib.CategoryTheory.Idempotents.SimplicialObject
[2337/4301] Building Mathlib.LinearAlgebra.AffineSpace.Pointwise
[2338/4301] Building Mathlib.LinearAlgebra.AffineSpace.Restrict
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.UniformSpace.Basic, data field uniformity is uncovered in UniformSpace.
                      It might be better to declare an instance of UniformSpace.Core first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.UniformSpace.Basic, data field sup is uncovered in CompleteLattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.UniformSpace.Basic, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.UniformSpace.Basic, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.UniformSpace.Basic, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.UniformSpace.Basic, data field sSup is uncovered in CompleteLattice.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.UniformSpace.Basic, data field sInf is uncovered in CompleteLattice.
                      It might be better to declare an instance of InfSet first.
[2339/4301] Building Mathlib.LinearAlgebra.LinearIndependent
[2340/4301] Building Mathlib.AlgebraicTopology.MooreComplex
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.Pointwise, data field vadd is uncovered in AddAction.
                      It might be better to declare an instance of VAdd first.
[2341/4301] Building Mathlib.Algebra.Homology.HomologicalComplexLimits
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.FunctorExtension, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.FunctorExtension, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.FunctorExtension, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.FunctorExtension, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2342/4301] Building Mathlib.AlgebraicTopology.Quasicategory
[2343/4301] Building Mathlib.CategoryTheory.Abelian.Exact
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Pointwise, data field neg is uncovered in InvolutiveNeg.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Pointwise, data field nsmul is uncovered in AddCommMonoid.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Pointwise, data field smul is uncovered in DistribMulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Pointwise, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[2344/4301] Building Mathlib.Topology.Compactness.SigmaCompact
[2345/4301] Building Mathlib.LinearAlgebra.AffineSpace.MidpointZero
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.Quotient, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.Quotient, data field inv is uncovered in GroupWithZero.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.Quotient, data field smul is uncovered in Module.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.Quotient, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[2346/4301] Building Mathlib.CategoryTheory.Galois.Decomposition
[2347/4301] Building Mathlib.CategoryTheory.Sites.CoverPreserving
[2348/4301] Building Mathlib.RingTheory.PiTensorProduct
[2349/4301] Building Mathlib.LinearAlgebra.AffineSpace.Combination
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Mat, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Mat, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Mat, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Mat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Mat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Mat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Mat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Mat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Mat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Mat, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Mat, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Mat, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Mat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Mat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2350/4301] Building Mathlib.LinearAlgebra.Matrix.Symmetric
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.CoverPreserving, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.CoverPreserving, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2351/4301] Building Mathlib.Data.Matrix.Notation
[2352/4301] Building Mathlib.CategoryTheory.Shift.Localization
[2353/4301] Building Mathlib.CategoryTheory.Localization.Adjunction
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.MooreComplex, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.MooreComplex, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2354/4301] Building Mathlib.CategoryTheory.Localization.Opposite
[2355/4301] Building Mathlib.CategoryTheory.Localization.Prod
[2356/4301] Building Mathlib.CategoryTheory.Localization.CalculusOfFractions
[2357/4301] Building Mathlib.CategoryTheory.Localization.HasLocalization
[2358/4301] Building Mathlib.CategoryTheory.Preadditive.Projective
[2359/4301] Building Mathlib.Algebra.FreeNonUnitalNonAssocAlgebra
[2360/4301] Building Mathlib.Algebra.MonoidAlgebra.Division
[2361/4301] Building Mathlib.Algebra.Category.ModuleCat.Monoidal.Closed
[2362/4301] Building Mathlib.LinearAlgebra.Matrix.Trace
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Division, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Division, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[2363/4301] Building Mathlib.Algebra.Category.GroupCat.Subobject
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.Basic, data field toFun is uncovered in Submonoid.LocalizationWithZeroMap.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.Basic, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.Basic, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.Basic, data field add is uncovered in CommSemiring.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.Basic, data field nsmul is uncovered in CommSemiring.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.Basic, data field zsmul is uncovered in CommRing.
                      It might be better to declare an instance of Ring first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.Basic, data field neg is uncovered in CommRing.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.Basic, data field sub is uncovered in CommRing.
                      It might be better to declare an instance of Sub first.
[2364/4301] Building Mathlib.CategoryTheory.Localization.Equivalence
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Localization.CalculusOfFractions, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Localization.CalculusOfFractions, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Localization.CalculusOfFractions, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Localization.CalculusOfFractions, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Localization.CalculusOfFractions, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Localization.CalculusOfFractions, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Localization.CalculusOfFractions, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2365/4301] Building Mathlib.GroupTheory.Perm.Cycle.Factors
[2366/4301] Building Mathlib.Algebra.Order.Chebyshev
[2367/4301] Building Mathlib.GroupTheory.Perm.Closure
[2368/4301] Building Mathlib.Algebra.Homology.Augment
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.Trace, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.Trace, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2369/4301] Building Mathlib.ModelTheory.Substructures
[2370/4301] Building Mathlib.Topology.UniformSpace.AbsoluteValue
[2371/4301] Building Mathlib.SetTheory.Game.State
[2372/4301] Building Mathlib.Data.Polynomial.Basic
[2373/4301] Building Mathlib.Algebra.MonoidAlgebra.Ideal
[2374/4301] Building Mathlib.Algebra.MonoidAlgebra.Support
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.DifferentialObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.DifferentialObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.DifferentialObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.DifferentialObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2375/4301] Building Mathlib.Algebra.RingQuot
[2376/4301] Building Mathlib.NumberTheory.Basic
[2377/4301] Building Mathlib.Algebra.Homology.Additive
[2378/4301] Building Mathlib.LinearAlgebra.Matrix.Circulant
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Ideal, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[2379/4301] Building Mathlib.LinearAlgebra.AffineSpace.Ordered
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.PiTensorProduct, data field toFun is uncovered in Algebra.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.PiTensorProduct, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[2380/4301] Building Mathlib.CategoryTheory.Galois.Examples
[2381/4301] Building Mathlib.CategoryTheory.Preadditive.Injective
[2382/4301] Building Mathlib.CategoryTheory.Sites.CoverLifting
stdout:
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.Substructures, data field le is uncovered in CompleteLattice.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.Substructures, data field lt is uncovered in CompleteLattice.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.Substructures, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.Substructures, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.Substructures, data field sInf is uncovered in CompleteLattice.
                      It might be better to declare an instance of InfSet first.
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.Substructures, data field toFun is uncovered in FirstOrder.Language.Embedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.Substructures, data field toFun is uncovered in FirstOrder.Language.Equiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.Substructures, data field invFun is uncovered in FirstOrder.Language.Equiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.Substructures, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.Substructures, data field toFun is uncovered in FirstOrder.Language.Embedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.Substructures, data field toFun is uncovered in FirstOrder.Language.Equiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.Substructures, data field invFun is uncovered in FirstOrder.Language.Equiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.Substructures, data field toFun is uncovered in FirstOrder.Language.Equiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.Substructures, data field invFun is uncovered in FirstOrder.Language.Equiv.
                      It might be better to declare an instance of Equiv first.
[2383/4301] Building Mathlib.Algebra.Module.LocalizedModule
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Galois.Examples, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[2384/4301] Building Mathlib.RingTheory.Localization.FractionRing
[2385/4301] Building Mathlib.RingTheory.Localization.Integer
[2386/4301] Building Mathlib.Topology.Separation
[2387/4301] Building Mathlib.CategoryTheory.Localization.Pi
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.RingQuot, data field smul is uncovered in Algebra.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.RingQuot, data field r is uncovered in RingCon.
                      It might be better to declare an instance of Setoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.RingQuot, data field add is uncovered in AddCommMonoid.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.RingQuot, data field zero is uncovered in AddCommMonoid.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.RingQuot, data field nsmul is uncovered in AddCommMonoid.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.RingQuot, data field npow is uncovered in MonoidWithZero.
                      It might be better to declare an instance of Monoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.RingQuot, data field natCast is uncovered in Semiring.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.RingQuot, data field nsmul is uncovered in Semiring.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.RingQuot, data field neg is uncovered in Ring.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.RingQuot, data field sub is uncovered in Ring.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.RingQuot, data field intCast is uncovered in Ring.
                      It might be better to declare an instance of IntCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.RingQuot, data field smul is uncovered in Algebra.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.RingQuot, data field toFun is uncovered in Algebra.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.RingQuot, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.RingQuot, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.RingQuot, data field star is uncovered in StarRing.
                      It might be better to declare an instance of Star first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.RingQuot, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[2388/4301] Building Mathlib.CategoryTheory.Localization.LocalizerMorphism
[2389/4301] Building Mathlib.Combinatorics.Optimization.ValuedCSP
[2390/4301] Building Mathlib.Data.Matrix.Basis
[2391/4301] Building Mathlib.Data.Matrix.Hadamard
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.FractionRing, data field inv is uncovered in Field.
                      It might be better to declare an instance of Inv first.
[2392/4301] Building Mathlib.CategoryTheory.Preadditive.Yoneda.Projective
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.CoverLifting, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.CoverLifting, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2393/4301] Building Mathlib.CategoryTheory.Abelian.Pseudoelements
[2394/4301] Building Mathlib.LinearAlgebra.DFinsupp
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Augment, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Augment, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Augment, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Augment, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2395/4301] Building Mathlib.LinearAlgebra.Dimension.Basic
[2396/4301] Building Mathlib.SetTheory.Game.Domineering
[2397/4301] Building Mathlib.Combinatorics.SimpleGraph.AdjMatrix
[2398/4301] Building Mathlib.SetTheory.Surreal.Dyadic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Basic, data field smul is uncovered in SMulZeroClass.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Basic, data field nsmul is uncovered in Semiring.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Basic, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Basic, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2399/4301] Building Mathlib.LinearAlgebra.Basis
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Additive, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Additive, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2400/4301] Building Mathlib.LinearAlgebra.Ray
[2401/4301] Building Mathlib.GroupTheory.SpecificGroups.Coxeter
stdout:
[Elab.StructInst.coveredFields] In Mathlib.SetTheory.Surreal.Dyadic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[2402/4301] Building Mathlib.Data.Matrix.Reflection
[2403/4301] Building Mathlib.Algebra.MonoidAlgebra.Degree
[2404/4301] Building Mathlib.ModelTheory.ElementaryMaps
[2405/4301] Building Mathlib.ModelTheory.FinitelyGenerated
[2406/4301] Building Mathlib.Algebra.Homology.ShortComplex.Exact
[2407/4301] Building Mathlib.Algebra.Algebra.Operations
[2408/4301] Building Mathlib.CategoryTheory.Localization.FiniteProducts
[2409/4301] Building Mathlib.CategoryTheory.Localization.Resolution
[2410/4301] Building Mathlib.CategoryTheory.Localization.Composition
stdout:
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.ElementaryMaps, data field toFun is uncovered in FirstOrder.Language.Embedding.
                      It might be better to declare an instance of Function.Embedding first.
[2411/4301] Building Mathlib.CategoryTheory.Sites.Over
[2412/4301] Building Mathlib.RepresentationTheory.Action.Monoidal
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Localization.Resolution, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Localization.Resolution, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Localization.Resolution, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[2413/4301] Building Mathlib.CategoryTheory.Sites.DenseSubsite
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.DFinsupp, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.DFinsupp, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.DFinsupp, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.DFinsupp, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.DFinsupp, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.DFinsupp, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.DFinsupp, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[2414/4301] Building Mathlib.Data.Polynomial.Induction
[2415/4301] Building Mathlib.Data.Polynomial.Monomial
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Ray, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Ray, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Ray, data field neg is uncovered in InvolutiveNeg.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Ray, data field neg is uncovered in InvolutiveNeg.
                      It might be better to declare an instance of Neg first.
[2416/4301] Building Mathlib.CategoryTheory.Abelian.Generator
[2417/4301] Building Mathlib.CategoryTheory.Preadditive.Yoneda.Injective
[2418/4301] Building Mathlib.Algebra.Homology.HomologicalComplexBiprod
[2419/4301] Building Mathlib.Topology.UniformSpace.Separation
[2420/4301] Building Mathlib.Topology.SeparatedMap
[2421/4301] Building Mathlib.Topology.DiscreteSubset
[2422/4301] Building Mathlib.Topology.Order.Priestley
[2423/4301] Building Mathlib.Topology.IndicatorConstPointwise
[2424/4301] Building Mathlib.Dynamics.FixedPoints.Topology
[2425/4301] Building Mathlib.Topology.Perfect
[2426/4301] Building Mathlib.Topology.ShrinkingLemma
[2427/4301] Building Mathlib.Topology.ExtendFrom
[2428/4301] Building Mathlib.Topology.Sober
[2429/4301] Building Mathlib.Topology.Order.OrderClosed
[2430/4301] Building Mathlib.Data.Polynomial.Coeff
[2431/4301] Building Mathlib.Data.Polynomial.Cardinal
[2432/4301] Building Mathlib.CategoryTheory.Idempotents.HomologicalComplex
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.ShrinkingLemma, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[2433/4301] Building Mathlib.Algebra.Homology.Linear
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sober, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sober, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[2434/4301] Building Mathlib.Topology.GDelta
[2435/4301] Building Mathlib.Topology.Filter
[2436/4301] Building Mathlib.Topology.Support
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Operations, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Operations, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Operations, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Operations, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Operations, data field smul is uncovered in Module.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Operations, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[2437/4301] Building Mathlib.Topology.CountableSeparatingOn
[2438/4301] Building Mathlib.Topology.Algebra.Semigroup
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Coeff, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Coeff, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Coeff, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[2439/4301] Building Mathlib.Topology.Algebra.InfiniteSum.Defs
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Basis, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Basis, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Basis, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Basis, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Basis, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Basis, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[2440/4301] Building Mathlib.Topology.DenseEmbedding
[2441/4301] Building Mathlib.Data.Matrix.Auto
[2442/4301] Building Mathlib.ModelTheory.ElementarySubstructures
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Semigroup, data field mul is uncovered in Semigroup.
                      It might be better to declare an instance of Mul first.
[2443/4301] Building Mathlib.Algebra.Module.Injective
[2444/4301] Building Mathlib.LinearAlgebra.Dimension.Finrank
[2445/4301] Building Mathlib.Combinatorics.SimpleGraph.StronglyRegular
[2446/4301] Building Mathlib.CategoryTheory.Abelian.Homology
[2447/4301] Building Mathlib.CategoryTheory.Sites.SheafHom
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.HomologicalComplex, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.HomologicalComplex, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.HomologicalComplex, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Idempotents.HomologicalComplex, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2448/4301] Building Mathlib.CategoryTheory.Abelian.Refinements
[2449/4301] Building Mathlib.CategoryTheory.Sites.InducedTopology
[2450/4301] Building Mathlib.AlgebraicTopology.AlternatingFaceMapComplex
[2451/4301] Building Mathlib.Analysis.Convex.Segment
[2452/4301] Building Mathlib.Algebra.Homology.ExactSequence
[2453/4301] Building Mathlib.Algebra.Homology.ShortComplex.ShortExact
[2454/4301] Building Mathlib.Topology.Baire.Lemmas
[2455/4301] Building Mathlib.Algebra.DirectSum.Module
[2456/4301] Building Mathlib.LinearAlgebra.BilinearForm.Hom
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.SheafHom, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.SheafHom, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.SheafHom, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.SheafHom, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2457/4301] Building Mathlib.RingTheory.AlgebraTower
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LocalizedModule, data field add is uncovered in AddCommMonoid.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LocalizedModule, data field zero is uncovered in AddCommMonoid.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LocalizedModule, data field nsmul is uncovered in AddCommMonoid.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LocalizedModule, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LocalizedModule, data field mul is uncovered in Monoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LocalizedModule, data field one is uncovered in Monoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LocalizedModule, data field smul is uncovered in Module.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LocalizedModule, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LocalizedModule, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LocalizedModule, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.LocalizedModule, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2458/4301] Building Mathlib.Topology.Algebra.Order.ExtrClosure
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.AlternatingFaceMapComplex, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.AlternatingFaceMapComplex, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.AlternatingFaceMapComplex, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.AlternatingFaceMapComplex, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2459/4301] Building Mathlib.Topology.Order.Lattice
[2460/4301] Building Mathlib.Algebra.Homology.ShortComplex.HomologicalComplex
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Monoidal, data field ε is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Action.Monoidal, data field μ is uncovered in CategoryTheory.MonoidalFunctor.
                      It might be better to declare an instance of CategoryTheory.LaxMonoidalFunctor first.
[2461/4301] Building Mathlib.Data.Nat.Choose.Vandermonde
[2462/4301] Building Mathlib.LinearAlgebra.StdBasis
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Injective, data field domain is uncovered in Module.Baer.ExtensionOf.
                      It might be better to declare an instance of LinearPMap first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Injective, data field toFun is uncovered in Module.Baer.ExtensionOf.
                      It might be better to declare an instance of LinearPMap first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Injective, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Injective, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Injective, data field domain is uncovered in Module.Baer.ExtensionOf.
                      It might be better to declare an instance of LinearPMap first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Injective, data field toFun is uncovered in Module.Baer.ExtensionOf.
                      It might be better to declare an instance of LinearPMap first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Injective, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Injective, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2463/4301] Building Mathlib.LinearAlgebra.SesquilinearForm
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.AlgebraTower, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[2464/4301] Building Mathlib.LinearAlgebra.Basis.Flag
[2465/4301] Building Mathlib.LinearAlgebra.Basis.Bilinear
[2466/4301] Building Mathlib.LinearAlgebra.Multilinear.Basis
[2467/4301] Building Mathlib.Topology.Order.Basic
[2468/4301] Building Mathlib.ModelTheory.Skolem
[2469/4301] Building Mathlib.Topology.StoneCech
[2470/4301] Building Mathlib.Data.Polynomial.Degree.Definitions
[2471/4301] Building Mathlib.ModelTheory.Bundled
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.BilinearForm.Hom, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.BilinearForm.Hom, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.BilinearForm.Hom, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.BilinearForm.Hom, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[2472/4301] Building Mathlib.AlgebraicTopology.DoldKan.Notations
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DirectSum.Module, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[2473/4301] Building Mathlib.Topology.Homeomorph
[2474/4301] Building Mathlib.CategoryTheory.Sites.Equivalence
[2475/4301] Building Mathlib.Algebra.Module.Submodule.Localization
[2476/4301] Building Mathlib.Topology.Order.PartialSups
[2477/4301] Building Mathlib.RingTheory.Localization.Module
[2478/4301] Building Mathlib.CategoryTheory.Abelian.DiagramLemmas.Four
[2479/4301] Building Mathlib.LinearAlgebra.Alternating.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.HomologicalComplex, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.HomologicalComplex, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.HomologicalComplex, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.HomologicalComplex, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.HomologicalComplex, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.HomologicalComplex, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.HomologicalComplex, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.HomologicalComplex, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.HomologicalComplex, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.HomologicalComplex, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2480/4301] Building Mathlib.Algebra.Homology.ShortComplex.SnakeLemma
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homeomorph, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homeomorph, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[2481/4301] Building Mathlib.Analysis.Convex.Star
[2482/4301] Building Mathlib.LinearAlgebra.DirectSum.TensorProduct
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Equivalence, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Equivalence, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Equivalence, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Equivalence, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2483/4301] Building Mathlib.Algebra.DirectSum.Algebra
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.Module, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2484/4301] Building Mathlib.Algebra.DirectSum.Decomposition
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Degree.Definitions, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Degree.Definitions, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[2485/4301] Building Mathlib.Algebra.DirectSum.Finsupp
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.SesquilinearForm, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.SesquilinearForm, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[2486/4301] Building Mathlib.RingTheory.Ideal.Operations
[2487/4301] Building Mathlib.LinearAlgebra.FinsuppVectorSpace
[2488/4301] Building Mathlib.LinearAlgebra.Matrix.DotProduct
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DirectSum.Algebra, data field toFun is uncovered in Algebra.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DirectSum.Algebra, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DirectSum.Algebra, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DirectSum.Algebra, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2489/4301] Building Mathlib.Algebra.Homology.Opposite
[2490/4301] Building Mathlib.Algebra.Homology.SingleHomology
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Submodule.Localization, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[2491/4301] Building Mathlib.Combinatorics.Hindman
[2492/4301] Building Mathlib.ModelTheory.Satisfiability
[2493/4301] Building Mathlib.Topology.ContinuousFunction.Basic
[2494/4301] Building Mathlib.Topology.FiberBundle.IsHomeomorphicTrivialBundle
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.SnakeLemma, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2495/4301] Building Mathlib.Topology.Algebra.Constructions
[2496/4301] Building Mathlib.Algebra.Homology.Homotopy
[2497/4301] Building Mathlib.Topology.Order.LowerUpperTopology
[2498/4301] Building Mathlib.Topology.ExtremallyDisconnected
[2499/4301] Building Mathlib.Topology.Compactness.Paracompact
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Alternating.Basic, data field toFun is uncovered in AlternatingMap.
                      It might be better to declare an instance of MultilinearMap first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Alternating.Basic, data field toFun is uncovered in AlternatingMap.
                      It might be better to declare an instance of MultilinearMap first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Alternating.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Alternating.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Alternating.Basic, data field toFun is uncovered in AlternatingMap.
                      It might be better to declare an instance of MultilinearMap first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Alternating.Basic, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Alternating.Basic, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Alternating.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Alternating.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Alternating.Basic, data field toFun is uncovered in AlternatingMap.
                      It might be better to declare an instance of MultilinearMap first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Alternating.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Alternating.Basic, data field toFun is uncovered in AlternatingMap.
                      It might be better to declare an instance of MultilinearMap first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Alternating.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Alternating.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[2500/4301] Building Mathlib.Data.Polynomial.Degree.TrailingDegree
[2501/4301] Building Mathlib.RingTheory.Polynomial.Opposites
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.FinsuppVectorSpace, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[2502/4301] Building Mathlib.LinearAlgebra.TensorPower
[2503/4301] Building Mathlib.Topology.ProperMap
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Order.LowerUpperTopology, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Order.LowerUpperTopology, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[2504/4301] Building Mathlib.Data.Polynomial.Eval
[2505/4301] Building Mathlib.Analysis.Convex.Basic
[2506/4301] Building Mathlib.Algebra.MonoidAlgebra.ToDirectSum
[2507/4301] Building Mathlib.ModelTheory.Types
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Opposite, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Opposite, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Opposite, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Opposite, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Opposite, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Opposite, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Opposite, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.Opposite, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2508/4301] Building Mathlib.LinearAlgebra.DirectSum.Finsupp
[2509/4301] Building Mathlib.ModelTheory.Graph
[2510/4301] Building Mathlib.Algebra.Homology.HomologySequence
[2511/4301] Building Mathlib.Topology.Algebra.Star
[2512/4301] Building Mathlib.Topology.Category.TopCat.Basic
[2513/4301] Building Mathlib.Topology.Order.Hom.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.ToDirectSum, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.ToDirectSum, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.ToDirectSum, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.ToDirectSum, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.ToDirectSum, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.ToDirectSum, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.ToDirectSum, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[2514/4301] Building Mathlib.Topology.Hom.Open
[2515/4301] Building Mathlib.Topology.Spectral.Hom
[2516/4301] Building Mathlib.Topology.ContinuousFunction.CocompactMap
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Order.Hom.Basic, data field toFun is uncovered in ContinuousOrderHom.
                      It might be better to declare an instance of OrderHom first.
[2517/4301] Building Mathlib.Topology.CompactOpen
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Basic, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Basic, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[2518/4301] Building Mathlib.Topology.UniformSpace.Cauchy
[2519/4301] Building Mathlib.LinearAlgebra.Alternating.DomCoprod
[2520/4301] Building Mathlib.Topology.Order.UpperLowerSetTopology
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.CocompactMap, data field toFun is uncovered in CocompactMap.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.CocompactMap, data field toFun is uncovered in CocompactMap.
                      It might be better to declare an instance of ContinuousMap first.
[2521/4301] Building Mathlib.Topology.Sets.Opens
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Convex.Basic, data field carrier is uncovered in AddSubmonoid.
                      It might be better to declare an instance of AddSubsemigroup first.
[2522/4301] Building Mathlib.Topology.Algebra.ConstMulAction
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Order.UpperLowerSetTopology, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Order.UpperLowerSetTopology, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[2523/4301] Building Mathlib.Algebra.ContinuedFractions.Computation.ApproximationCorollaries
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Eval, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Eval, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Eval, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Eval, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Eval, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[2524/4301] Building Mathlib.SetTheory.Ordinal.Topology
[2525/4301] Building Mathlib.Topology.Instances.Sign
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.CompactOpen, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.CompactOpen, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[2526/4301] Building Mathlib.Topology.Algebra.Order.IntermediateValue
[2527/4301] Building Mathlib.Topology.Algebra.Order.ProjIcc
[2528/4301] Building Mathlib.Topology.Order.NhdsSet
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sets.Opens, data field sSup is uncovered in Order.Frame.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sets.Opens, data field toFun is uncovered in FrameHom.
                      It might be better to declare an instance of InfHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sets.Opens, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sets.Opens, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sets.Opens, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sets.Opens, data field toFun is uncovered in LatticeHom.
                      It might be better to declare an instance of SupHom first.
[2529/4301] Building Mathlib.Topology.Algebra.Order.MonotoneConvergence
[2530/4301] Building Mathlib.Topology.Order.Hom.Esakia
[2531/4301] Building Mathlib.Algebra.Category.ModuleCat.Adjunctions
[2532/4301] Building Mathlib.LinearAlgebra.TensorProductBasis
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomologySequence, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomologySequence, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2533/4301] Building Mathlib.Topology.Algebra.Order.Filter
[2534/4301] Building Mathlib.Topology.Algebra.Order.ExtendFrom
[2535/4301] Building Mathlib.Topology.Algebra.Order.LeftRightLim
[2536/4301] Building Mathlib.Topology.Algebra.Order.T5
[2537/4301] Building Mathlib.Topology.Algebra.Order.MonotoneContinuity
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.Operations, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.Operations, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.Operations, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.Operations, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.Operations, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.Operations, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.Operations, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.Operations, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.Operations, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[2538/4301] Building Mathlib.Topology.Algebra.Order.Archimedean
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Alternating.DomCoprod, data field toFun is uncovered in AlternatingMap.
                      It might be better to declare an instance of MultilinearMap first.
[2539/4301] Building Mathlib.Topology.Category.TopCat.Limits.Basic
[2540/4301] Building Mathlib.Topology.Category.TopCat.Adjunctions
[2541/4301] Building Mathlib.Topology.Order.ScottTopology
[2542/4301] Building Mathlib.Analysis.Convex.Hull
[2543/4301] Building Mathlib.Topology.Specialization
[2544/4301] Building Mathlib.Computability.TMComputable
[2545/4301] Building Mathlib.Data.Polynomial.Degree.Lemmas
[2546/4301] Building Mathlib.Algebra.Homology.HomotopyCofiber
[2547/4301] Building Mathlib.Topology.ContinuousFunction.Sigma
[2548/4301] Building Mathlib.Topology.Compactification.OnePoint
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Specialization, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Specialization, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2549/4301] Building Mathlib.CategoryTheory.Sites.Spaces
[2550/4301] Building Mathlib.Topology.PartialHomeomorph
[2552/4301] Building Mathlib.Topology.LocalAtTarget
[2552/4301] Building Mathlib.Topology.Sets.Closeds
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Computability.TMComputable, data field tm is uncovered in Turing.TM2ComputableInPolyTime.
                      It might be better to declare an instance of Turing.TM2ComputableAux first.
[Elab.StructInst.coveredFields] In Mathlib.Computability.TMComputable, data field inputAlphabet is uncovered in Turing.TM2ComputableInPolyTime.
                      It might be better to declare an instance of Turing.TM2ComputableAux first.
[Elab.StructInst.coveredFields] In Mathlib.Computability.TMComputable, data field outputAlphabet is uncovered in Turing.TM2ComputableInPolyTime.
                      It might be better to declare an instance of Turing.TM2ComputableAux first.
[Elab.StructInst.coveredFields] In Mathlib.Computability.TMComputable, data field steps is uncovered in Turing.EvalsToInTime.
                      It might be better to declare an instance of Turing.EvalsTo first.
[2553/4301] Building Mathlib.Topology.UniformSpace.UniformConvergence
[2554/4301] Building Mathlib.Topology.Sequences
[2555/4301] Building Mathlib.Topology.UniformSpace.Pi
[2556/4301] Building Mathlib.Analysis.Convex.Function
[2557/4301] Building Mathlib.Data.Polynomial.Derivative
[2558/4301] Building Mathlib.LinearAlgebra.SModEq
[2559/4301] Building Mathlib.AlgebraicTopology.ExtraDegeneracy
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sets.Closeds, data field sInf is uncovered in Order.Coframe.
                      It might be better to declare an instance of InfSet first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sets.Closeds, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sets.Closeds, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sets.Closeds, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sets.Closeds, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[2560/4301] Building Mathlib.AlgebraicTopology.DoldKan.Homotopies
[2561/4301] Building Mathlib.Topology.ContinuousFunction.T0Sierpinski
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Adjunctions, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Adjunctions, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Adjunctions, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Adjunctions, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Adjunctions, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Adjunctions, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Adjunctions, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Adjunctions, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Adjunctions, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2562/4301] Building Mathlib.Topology.Algebra.MulAction
[2563/4301] Building Mathlib.Dynamics.Minimal
[2564/4301] Building Mathlib.RingTheory.Coprime.Ideal
[2565/4301] Building Mathlib.Algebra.CharP.Quotient
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.PartialHomeomorph, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.PartialHomeomorph, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.PartialHomeomorph, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.PartialHomeomorph, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[2566/4301] Building Mathlib.Algebra.Algebra.Subalgebra.Basic
[2567/4301] Building Mathlib.RingTheory.Ideal.Prod
[2568/4301] Building Mathlib.LinearAlgebra.FreeModule.Basic
[2569/4301] Building Mathlib.Algebra.Homology.QuasiIso
[2570/4301] Building Mathlib.Topology.Algebra.ProperConstSMul
[2571/4301] Building Mathlib.Topology.UniformSpace.CompleteSeparated
[2572/4301] Building Mathlib.Topology.UniformSpace.UniformEmbedding
[2573/4301] Building Mathlib.Topology.ContinuousFunction.Ordered
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.Prod, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[2574/4301] Building Mathlib.Algebra.Homology.HomotopyCategory
[2575/4301] Building Mathlib.RingTheory.Valuation.Basic
[2576/4301] Building Mathlib.Topology.Category.TopCat.EpiMono
[2577/4301] Building Mathlib.Topology.Order.Category.AlexDisc
[2578/4301] Building Mathlib.Analysis.Convex.Join
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Derivative, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2579/4301] Building Mathlib.Analysis.Convex.Extreme
[2580/4301] Building Mathlib.Analysis.Convex.Cone.Basic
[2581/4301] Building Mathlib.Topology.Category.TopCat.Limits.Cofiltered
[2582/4301] Building Mathlib.Topology.Category.TopCat.Limits.Konig
[2583/4301] Building Mathlib.Data.Polynomial.EraseLead
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Order.Category.AlexDisc, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Order.Category.AlexDisc, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2584/4301] Building Mathlib.Tactic.ComputeDegree
[2585/4301] Building Mathlib.Data.ZMod.Basic
[2586/4301] Building Mathlib.Topology.ClopenBox
[2587/4301] Building Mathlib.Topology.LocallyConstant.Basic
[2588/4301] Building Mathlib.Topology.Sets.Order
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.Basic, data field toFun is uncovered in Valuation.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.Basic, data field toFun is uncovered in Valuation.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.Basic, data field toFun is uncovered in Valuation.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.Basic, data field carrier is uncovered in AddSubgroup.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.Basic, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.Basic, data field toFun is uncovered in Valuation.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.Basic, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.Basic, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[2589/4301] Building Mathlib.Topology.NoetherianSpace
[2590/4301] Building Mathlib.Geometry.Manifold.ChartedSpace
[2591/4301] Building Mathlib.Topology.Algebra.Order.Compact
[2592/4301] Building Mathlib.AlgebraicTopology.DoldKan.Faces
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Convex.Cone.Basic, data field le is uncovered in CompleteLattice.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Convex.Cone.Basic, data field lt is uncovered in CompleteLattice.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Convex.Cone.Basic, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Convex.Cone.Basic, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Convex.Cone.Basic, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Convex.Cone.Basic, data field sInf is uncovered in CompleteLattice.
                      It might be better to declare an instance of InfSet first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Convex.Cone.Basic, data field sup is uncovered in CompleteLattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Convex.Cone.Basic, data field sSup is uncovered in CompleteLattice.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Convex.Cone.Basic, data field le is uncovered in Preorder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Convex.Cone.Basic, data field add is uncovered in AddCommSemigroup.
                      It might be better to declare an instance of Add first.
[2593/4301] Building Mathlib.Topology.FiberBundle.Trivialization
[2594/4301] Building Mathlib.Topology.IsLocalHomeomorph
[2595/4301] Building Mathlib.Algebra.Module.Projective
[2596/4301] Building Mathlib.Topology.Algebra.Monoid
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Subalgebra.Basic, data field carrier is uncovered in Subalgebra.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Subalgebra.Basic, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Subalgebra.Basic, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Subalgebra.Basic, data field carrier is uncovered in Subalgebra.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Subalgebra.Basic, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Subalgebra.Basic, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Subalgebra.Basic, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Subalgebra.Basic, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Subalgebra.Basic, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Subalgebra.Basic, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Subalgebra.Basic, data field carrier is uncovered in Subalgebra.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Subalgebra.Basic, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[2597/4301] Building Mathlib.Topology.EMetricSpace.Basic
[2598/4301] Building Mathlib.CategoryTheory.Preadditive.InjectiveResolution
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.IsLocalHomeomorph, data field toFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[2599/4301] Building Mathlib.CategoryTheory.Preadditive.ProjectiveResolution
[2600/4301] Building Mathlib.LinearAlgebra.Basis.VectorSpace
[2601/4301] Building Mathlib.RingTheory.Valuation.PrimeMultiplicity
[2602/4301] Building Mathlib.RingTheory.Valuation.Integers
[2603/4301] Building Mathlib.Topology.Category.TopCat.Opens
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.ChartedSpace, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.ChartedSpace, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.ChartedSpace, data field le is uncovered in CompleteLattice.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.ChartedSpace, data field lt is uncovered in CompleteLattice.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.ChartedSpace, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.ChartedSpace, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.ChartedSpace, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[2604/4301] Building Mathlib.RingTheory.Polynomial.Chebyshev
[2605/4301] Building Mathlib.Topology.UniformSpace.Equiv
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.FiberBundle.Trivialization, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.FiberBundle.Trivialization, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[2606/4301] Building Mathlib.Data.Polynomial.Inductions
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.Basic, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.Basic, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[2607/4301] Building Mathlib.CategoryTheory.CofilteredSystem
[2608/4301] Building Mathlib.RingTheory.Polynomial.Hermite.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.Integers, data field carrier is uncovered in Subring.
                      It might be better to declare an instance of Subsemigroup first.
[2609/4301] Building Mathlib.Data.Polynomial.Identities
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.UniformSpace.Equiv, data field toFun is uncovered in UniformEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.UniformSpace.Equiv, data field invFun is uncovered in UniformEquiv.
                      It might be better to declare an instance of Equiv first.
[2610/4301] Building Mathlib.Topology.QuasiSeparated
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Inductions, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[2611/4301] Building Mathlib.Data.Polynomial.Reverse
[2612/4301] Building Mathlib.Data.Polynomial.DenomsClearable
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.CofilteredSystem, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.CofilteredSystem, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.CofilteredSystem, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.CofilteredSystem, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2613/4301] Building Mathlib.Data.Polynomial.CancelLeads
[2614/4301] Building Mathlib.Topology.DiscreteQuotient
[2615/4301] Building Mathlib.Topology.LocallyConstant.Algebra
[2616/4301] Building Mathlib.Algebra.Homology.Localization
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Monoid, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Monoid, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[2617/4301] Building Mathlib.RingTheory.Ideal.QuotientOperations
[2618/4301] Building Mathlib.Analysis.Convex.Quasiconvex
[2619/4301] Building Mathlib.Topology.Category.TopCat.Limits.Products
[2620/4301] Building Mathlib.Analysis.Convex.Cone.Extension
[2621/4301] Building Mathlib.Algebra.DirectSum.Internal
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.DiscreteQuotient, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.DiscreteQuotient, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[2622/4301] Building Mathlib.RingTheory.HahnSeries.Multiplication
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.EMetricSpace.Basic, data field edist is uncovered in PseudoEMetricSpace.
                      It might be better to declare an instance of EDist first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.EMetricSpace.Basic, data field edist is uncovered in PseudoEMetricSpace.
                      It might be better to declare an instance of EDist first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.EMetricSpace.Basic, data field edist is uncovered in PseudoEMetricSpace.
                      It might be better to declare an instance of EDist first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.EMetricSpace.Basic, data field edist is uncovered in EMetricSpace.
                      It might be better to declare an instance of EDist first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.EMetricSpace.Basic, data field toUniformSpace is uncovered in EMetricSpace.
                      It might be better to declare an instance of PseudoEMetricSpace first.
[2623/4301] Building Mathlib.Algebra.Algebra.Subalgebra.Tower
[2624/4301] Building Mathlib.Geometry.Manifold.LocalInvariantProperties
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Opens, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Opens, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Opens, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Opens, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Opens, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Opens, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2625/4301] Building Mathlib.Topology.FiberBundle.Basic
[2626/4301] Building Mathlib.Data.ZMod.Factorial
[2627/4301] Building Mathlib.Data.ZMod.Parity
[2628/4301] Building Mathlib.Data.ZMod.IntUnitsPower
[2629/4301] Building Mathlib.NumberTheory.FLT.Three
[2630/4301] Building Mathlib.AlgebraicTopology.DoldKan.Projections
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.LocallyConstant.Algebra, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.LocallyConstant.Algebra, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.LocallyConstant.Algebra, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.LocallyConstant.Algebra, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.LocallyConstant.Algebra, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2631/4301] Building Mathlib.CategoryTheory.Abelian.InjectiveResolution
[2632/4301] Building Mathlib.Topology.UniformSpace.AbstractCompletion
[2633/4301] Building Mathlib.Topology.UniformSpace.UniformConvergenceTopology
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.FiberBundle.Basic, data field source is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.FiberBundle.Basic, data field target is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.FiberBundle.Basic, data field toFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.FiberBundle.Basic, data field invFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[2634/4301] Building Mathlib.Analysis.Convex.Slope
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.IntUnitsPower, data field smul is uncovered in Module.
                      It might be better to declare an instance of SMul first.
[2635/4301] Building Mathlib.LinearAlgebra.AffineSpace.Independent
[2636/4301] Building Mathlib.Algebra.Group.UniqueProds
[2637/4301] Building Mathlib.NumberTheory.LegendreSymbol.ZModChar
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.UniformSpace.AbstractCompletion, data field toFun is uncovered in UniformEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.UniformSpace.AbstractCompletion, data field invFun is uncovered in UniformEquiv.
                      It might be better to declare an instance of Equiv first.
[2638/4301] Building Mathlib.Data.ZMod.Module
[2639/4301] Building Mathlib.Data.ZMod.Algebra
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.Algebra, data field smul is uncovered in Algebra.
                      It might be better to declare an instance of SMul first.
[2640/4301] Building Mathlib.Topology.Sets.Compacts
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.HahnSeries.Multiplication, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.HahnSeries.Multiplication, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[2641/4301] Building Mathlib.RingTheory.Finiteness
[2642/4301] Building Mathlib.Algebra.Algebra.Subalgebra.Order
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.Module, data field smul is uncovered in Module.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.Module, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.ZMod.Module, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[2643/4301] Building Mathlib.Topology.Algebra.Order.Rolle
[2644/4301] Building Mathlib.CategoryTheory.Abelian.ProjectiveResolution
[2645/4301] Building Mathlib.Analysis.Convex.Mul
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.LegendreSymbol.ZModChar, data field toFun is uncovered in MulChar.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.LegendreSymbol.ZModChar, data field toFun is uncovered in MulChar.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.LegendreSymbol.ZModChar, data field toFun is uncovered in MulChar.
                      It might be better to declare an instance of OneHom first.
[2646/4301] Building Mathlib.Topology.Algebra.InfiniteSum.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sets.Compacts, data field carrier is uncovered in TopologicalSpace.NonemptyCompacts.
                      It might be better to declare an instance of TopologicalSpace.Compacts first.
[2647/4301] Building Mathlib.Algebra.Category.ModuleCat.Projective
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.QuotientOperations, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.QuotientOperations, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.QuotientOperations, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[2648/4301] Building Mathlib.Data.ZMod.Units
[2649/4301] Building Mathlib.Combinatorics.Hall.Basic
[2650/4301] Building Mathlib.Combinatorics.SimpleGraph.Finsubgraph
[2651/4301] Building Mathlib.Topology.Algebra.Group.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.Hall.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.Hall.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2652/4301] Building Mathlib.Topology.List
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.ProjectiveResolution, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.ProjectiveResolution, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2653/4301] Building Mathlib.Topology.Algebra.GroupWithZero
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Finsubgraph, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Finsubgraph, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Finsubgraph, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2654/4301] Building Mathlib.Combinatorics.SimpleGraph.Ends.Defs
[2655/4301] Building Mathlib.Topology.MetricSpace.MetricSeparated
[2656/4301] Building Mathlib.LinearAlgebra.Matrix.ToLin
[2657/4301] Building Mathlib.Combinatorics.SimpleGraph.DegreeSum
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Ends.Defs, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.SimpleGraph.Ends.Defs, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2658/4301] Building Mathlib.Data.Polynomial.Monic
[2659/4301] Building Mathlib.NumberTheory.LucasLehmer
[2660/4301] Building Mathlib.Topology.EMetricSpace.Paracompact
[2661/4301] Building Mathlib.Topology.EMetricSpace.Lipschitz
[2662/4301] Building Mathlib.Topology.Category.TopCat.OpenNhds
[2663/4301] Building Mathlib.Topology.Covering
[2664/4301] Building Mathlib.Topology.FiberBundle.Constructions
[2665/4301] Building Mathlib.Algebra.GroupPower.NegOnePow
[2666/4301] Building Mathlib.Topology.Category.TopCat.Yoneda
[2667/4301] Building Mathlib.Topology.Category.TopCat.Limits.Pullbacks
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Covering, data field toFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Covering, data field invFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Covering, data field source is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Covering, data field target is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[2668/4301] Building Mathlib.Topology.UniformSpace.Completion
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.OpenNhds, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.OpenNhds, data field inf is uncovered in Lattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.OpenNhds, data field sup is uncovered in Lattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.OpenNhds, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.OpenNhds, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.OpenNhds, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.OpenNhds, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.OpenNhds, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2669/4301] Building Mathlib.Topology.UniformSpace.CompactConvergence
[2670/4301] Building Mathlib.Topology.UniformSpace.Equicontinuity
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Yoneda, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Yoneda, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Yoneda, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Yoneda, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2671/4301] Building Mathlib.Topology.MetricSpace.PseudoMetric
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.FiberBundle.Constructions, data field toFun is uncovered in Trivialization.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.FiberBundle.Constructions, data field invFun is uncovered in Trivialization.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.FiberBundle.Constructions, data field source is uncovered in Trivialization.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.FiberBundle.Constructions, data field target is uncovered in Trivialization.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.FiberBundle.Constructions, data field toFun is uncovered in Trivialization.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.FiberBundle.Constructions, data field invFun is uncovered in Trivialization.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.FiberBundle.Constructions, data field source is uncovered in Trivialization.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.FiberBundle.Constructions, data field target is uncovered in Trivialization.
                      It might be better to declare an instance of PartialEquiv first.
[2672/4301] Building Mathlib.Topology.Baire.LocallyCompactRegular
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.LucasLehmer, data field intCast is uncovered in AddGroupWithOne.
                      It might be better to declare an instance of IntCast first.
[2673/4301] Building Mathlib.RingTheory.Valuation.Quotient
[2674/4301] Building Mathlib.RingTheory.GradedAlgebra.Basic
[2675/4301] Building Mathlib.RingTheory.Adjoin.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.Quotient, data field toFun is uncovered in Valuation.
                      It might be better to declare an instance of ZeroHom first.
[2676/4301] Building Mathlib.Algebra.MonoidAlgebra.NoZeroDivisors
[2677/4301] Building Mathlib.Topology.Sheaves.Presheaf
[2678/4301] Building Mathlib.RingTheory.Localization.Ideal
[2679/4301] Building Mathlib.AlgebraicTopology.DoldKan.PInfty
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Group.Basic, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Group.Basic, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Group.Basic, data field top is uncovered in BoundedOrder.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Group.Basic, data field bot is uncovered in BoundedOrder.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Group.Basic, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Group.Basic, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Group.Basic, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[2680/4301] Building Mathlib.NumberTheory.DirichletCharacter.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.Ideal, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.Ideal, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.Ideal, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.Ideal, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[2681/4301] Building Mathlib.Analysis.Convex.SimplicialComplex.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Adjoin.Basic, data field carrier is uncovered in Subalgebra.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Adjoin.Basic, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Adjoin.Basic, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[2682/4301] Building Mathlib.CategoryTheory.Abelian.LeftDerived
[2683/4301] Building Mathlib.LinearAlgebra.AffineSpace.Basis
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Limits.Pullbacks, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Limits.Pullbacks, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Limits.Pullbacks, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Limits.Pullbacks, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Limits.Pullbacks, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCat.Limits.Pullbacks, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[2684/4301] Building Mathlib.RingTheory.HahnSeries.Summable
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.InjectiveResolution, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.InjectiveResolution, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2685/4301] Building Mathlib.Algebra.Polynomial.BigOperators
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.DirichletCharacter.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[2686/4301] Building Mathlib.Analysis.NormedSpace.WithLp
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.GradedAlgebra.Basic, data field decompose' is uncovered in GradedRing.
                      It might be better to declare an instance of DirectSum.Decomposition first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.GradedAlgebra.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[2687/4301] Building Mathlib.Combinatorics.SimpleGraph.Ends.Properties
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Convex.SimplicialComplex.Basic, data field inf is uncovered in SemilatticeInf.
                      It might be better to declare an instance of Inf first.
[2688/4301] Building Mathlib.Combinatorics.Configuration
[2689/4301] Building Mathlib.CategoryTheory.Triangulated.TriangleShift
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.WithLp, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[2690/4301] Building Mathlib.Algebra.Homology.ComplexShapeSigns
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.PseudoMetric, data field dist is uncovered in PseudoMetricSpace.
                      It might be better to declare an instance of Dist first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.PseudoMetric, data field dist is uncovered in PseudoMetricSpace.
                      It might be better to declare an instance of Dist first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.PseudoMetric, data field dist is uncovered in PseudoMetricSpace.
                      It might be better to declare an instance of Dist first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.PseudoMetric, data field dist is uncovered in PseudoMetricSpace.
                      It might be better to declare an instance of Dist first.
[2691/4301] Building Mathlib.Topology.Algebra.WithZeroTopology
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AffineSpace.Basis, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2692/4301] Building Mathlib.Combinatorics.SimpleGraph.Matching
[2693/4301] Building Mathlib.RingTheory.Ideal.IdempotentFG
[2694/4301] Building Mathlib.LinearAlgebra.FreeModule.Finite.Basic
[2695/4301] Building Mathlib.Topology.Category.UniformSpace
[2696/4301] Building Mathlib.Data.Polynomial.Div
[2697/4301] Building Mathlib.Analysis.Convex.Strict
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.HahnSeries.Summable, data field zero is uncovered in AddCommMonoid.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.HahnSeries.Summable, data field nsmul is uncovered in AddCommMonoid.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.HahnSeries.Summable, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.HahnSeries.Summable, data field smul is uncovered in Module.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.HahnSeries.Summable, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.HahnSeries.Summable, data field inv is uncovered in Field.
                      It might be better to declare an instance of Inv first.
[2698/4301] Building Mathlib.Topology.Algebra.Order.Group
[2699/4301] Building Mathlib.Topology.Algebra.Group.OpenMapping
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.ToLin, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.ToLin, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.ToLin, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.ToLin, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.ToLin, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.ToLin, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.ToLin, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.ToLin, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[2700/4301] Building Mathlib.Topology.Algebra.Group.TopologicalAbelianization
[2701/4301] Building Mathlib.Topology.Algebra.Ring.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.UniformSpace, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.UniformSpace, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.UniformSpace, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.UniformSpace, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.UniformSpace, data field preimage is uncovered in CategoryTheory.Reflective.
                      It might be better to declare an instance of CategoryTheory.Full first.
[2702/4301] Building Mathlib.Topology.Algebra.Order.UpperLower
[2703/4301] Building Mathlib.Algebra.Star.Subalgebra
[2704/4301] Building Mathlib.Algebra.Algebra.Subalgebra.Pointwise
[2705/4301] Building Mathlib.Data.MvPolynomial.Basic
[2706/4301] Building Mathlib.RingTheory.Derivation.Basic
[2707/4301] Building Mathlib.AlgebraicTopology.DoldKan.FunctorGamma
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Ring.Basic, data field carrier is uncovered in Subsemiring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Ring.Basic, data field carrier is uncovered in Subring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Ring.Basic, data field sInf is uncovered in CompleteSemilatticeInf.
                      It might be better to declare an instance of InfSet first.
[2708/4301] Building Mathlib.AlgebraicTopology.DoldKan.FunctorN
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Subalgebra.Pointwise, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[2709/4301] Building Mathlib.AlgebraicTopology.DoldKan.Decomposition
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.Presheaf, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.Presheaf, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2710/4301] Building Mathlib.Algebra.FreeAlgebra
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.DoldKan.FunctorN, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.DoldKan.FunctorN, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2711/4301] Building Mathlib.Topology.Algebra.Affine
[2712/4301] Building Mathlib.Dynamics.Flow
[2713/4301] Building Mathlib.Data.Polynomial.AlgebraMap
[2714/4301] Building Mathlib.Topology.Category.TopCat.EffectiveEpi
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.DoldKan.FunctorGamma, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.DoldKan.FunctorGamma, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.DoldKan.FunctorGamma, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.DoldKan.FunctorGamma, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2715/4301] Building Mathlib.Algebra.MonoidAlgebra.Grading
[2716/4301] Building Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal
[2717/4301] Building Mathlib.Algebra.Homology.HomotopyCategory.Shift
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Dynamics.Flow, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Dynamics.Flow, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[2718/4301] Building Mathlib.Algebra.Homology.HomotopyCategory.HomComplex
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.FreeAlgebra, data field one is uncovered in MonoidWithZero.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.FreeAlgebra, data field nsmul is uncovered in AddCommMonoid.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.FreeAlgebra, data field natCast is uncovered in Semiring.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.FreeAlgebra, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.FreeAlgebra, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.FreeAlgebra, data field carrier is uncovered in Subalgebra.
                      It might be better to declare an instance of Subsemigroup first.
[2719/4301] Building Mathlib.Topology.UniformSpace.Compact
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.UniformSpace.Compact, data field uniformity is uncovered in UniformSpace.
                      It might be better to declare an instance of UniformSpace.Core first.
[2720/4301] Building Mathlib.Topology.Algebra.Order.LiminfLimsup
[2721/4301] Building Mathlib.Topology.Algebra.Group.Compact
[2722/4301] Building Mathlib.Topology.MetricSpace.Cauchy
[2723/4301] Building Mathlib.Topology.MetricSpace.ProperSpace
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Grading, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.MonoidAlgebra.Grading, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[2724/4301] Building Mathlib.Analysis.Convex.Combination
[2725/4301] Building Mathlib.Topology.Gluing
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Subalgebra, data field toFun is uncovered in StarAlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Subalgebra, data field toFun is uncovered in StarAlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Subalgebra, data field star is uncovered in InvolutiveStar.
                      It might be better to declare an instance of Star first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Subalgebra, data field carrier is uncovered in Subalgebra.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Subalgebra, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Subalgebra, data field toFun is uncovered in StarAlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Subalgebra, data field toFun is uncovered in StarAlgEquiv.
                      It might be better to declare an instance of Equiv first.
[2726/4301] Building Mathlib.Topology.MetricSpace.Equicontinuity
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Derivation.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Derivation.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Derivation.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2727/4301] Building Mathlib.CategoryTheory.Monoidal.Tor
[2728/4301] Building Mathlib.CategoryTheory.Abelian.RightDerived
[2729/4301] Building Mathlib.Algebra.Homology.TotalComplex
[2730/4301] Building Mathlib.RingTheory.Nilpotent
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomotopyCategory.Shift, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomotopyCategory.Shift, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2731/4301] Building Mathlib.Topology.Algebra.Order.Floor
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Tor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Tor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Tor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Tor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2732/4301] Building Mathlib.CategoryTheory.Extensive
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.MvPolynomial.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.MvPolynomial.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.MvPolynomial.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.MvPolynomial.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[2733/4301] Building Mathlib.Topology.Category.TopCommRingCat
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.TriangleShift, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.TriangleShift, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2734/4301] Building Mathlib.Topology.Algebra.Localization
[2735/4301] Building Mathlib.AlgebraicTopology.DoldKan.Normalized
[2736/4301] Building Mathlib.Algebra.Module.GradedModule
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCommRingCat, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCommRingCat, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCommRingCat, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCommRingCat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.TopCommRingCat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2737/4301] Building Mathlib.Algebra.CharP.Algebra
[2738/4301] Building Mathlib.Algebra.Star.Free
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.TotalComplex, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.TotalComplex, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2739/4301] Building Mathlib.Topology.Algebra.OpenSubgroup
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomotopyCategory.HomComplex, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomotopyCategory.HomComplex, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomotopyCategory.HomComplex, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[2740/4301] Building Mathlib.Topology.Algebra.Ring.Ideal
[2741/4301] Building Mathlib.Geometry.RingedSpace.PresheafedSpace
[2742/4301] Building Mathlib.RingTheory.GradedAlgebra.Radical
[2743/4301] Building Mathlib.Data.Polynomial.Module.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Free, data field star is uncovered in StarMul.
                      It might be better to declare an instance of Star first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Star.Free, data field star is uncovered in StarRing.
                      It might be better to declare an instance of Star first.
[2744/4301] Building Mathlib.RingTheory.Polynomial.Tower
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Ring.Ideal, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[2745/4301] Building Mathlib.RingTheory.Polynomial.ScaleRoots
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Gluing, data field J is uncovered in TopCat.GlueData.
                      It might be better to declare an instance of CategoryTheory.GlueData first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Gluing, data field U is uncovered in TopCat.GlueData.
                      It might be better to declare an instance of CategoryTheory.GlueData first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Gluing, data field V is uncovered in TopCat.GlueData.
                      It might be better to declare an instance of CategoryTheory.GlueData first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Gluing, data field f is uncovered in TopCat.GlueData.
                      It might be better to declare an instance of CategoryTheory.GlueData first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Gluing, data field t is uncovered in TopCat.GlueData.
                      It might be better to declare an instance of CategoryTheory.GlueData first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Gluing, data field t' is uncovered in TopCat.GlueData.
                      It might be better to declare an instance of CategoryTheory.GlueData first.
[2746/4301] Building Mathlib.AlgebraicTopology.DoldKan.Degeneracies
[2747/4301] Building Mathlib.Analysis.Convex.Extrema
[2748/4301] Building Mathlib.Dynamics.OmegaLimit
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.OpenSubgroup, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[2749/4301] Building Mathlib.Topology.Sheaves.Sheaf
[2750/4301] Building Mathlib.Data.Polynomial.Smeval
[2751/4301] Building Mathlib.Data.Polynomial.Lifts
[2752/4301] Building Mathlib.Topology.MetricSpace.Basic
[2753/4301] Building Mathlib.Algebra.Category.AlgebraCat.Basic
[2754/4301] Building Mathlib.Topology.Algebra.Field
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Convex.Combination, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[2755/4301] Building Mathlib.AlgebraicTopology.DoldKan.NReflectsIso
[2756/4301] Building Mathlib.RingTheory.Polynomial.IntegralNormalization
[2757/4301] Building Mathlib.RingTheory.MvPowerSeries.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Basic, data field toBornology is uncovered in MetricSpace.
                      It might be better to declare an instance of PseudoMetricSpace first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Basic, data field dist is uncovered in MetricSpace.
                      It might be better to declare an instance of Dist first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Basic, data field edist is uncovered in MetricSpace.
                      It might be better to declare an instance of PseudoMetricSpace first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Basic, data field toUniformSpace is uncovered in MetricSpace.
                      It might be better to declare an instance of PseudoMetricSpace first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Basic, data field dist is uncovered in MetricSpace.
                      It might be better to declare an instance of Dist first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Basic, data field edist is uncovered in MetricSpace.
                      It might be better to declare an instance of PseudoMetricSpace first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Basic, data field toUniformSpace is uncovered in MetricSpace.
                      It might be better to declare an instance of PseudoMetricSpace first.
[2758/4301] Building Mathlib.Data.MvPolynomial.Division
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Field, data field carrier is uncovered in Subfield.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Field, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Field, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[2759/4301] Building Mathlib.RingTheory.MvPolynomial.Tower
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Smeval, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2760/4301] Building Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.GradedModule, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.GradedModule, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.GradedModule, data field smul is uncovered in Module.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.GradedModule, data field smul is uncovered in DirectSum.Gmodule.
                      It might be better to declare an instance of GradedMonoid.GSMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.GradedModule, data field smul is uncovered in Module.
                      It might be better to declare an instance of SMul first.
[2761/4301] Building Mathlib.Data.MvPolynomial.Counit
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.AlgebraCat.Basic, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.AlgebraCat.Basic, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.AlgebraCat.Basic, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.AlgebraCat.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.AlgebraCat.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.AlgebraCat.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.AlgebraCat.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.AlgebraCat.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.AlgebraCat.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.AlgebraCat.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.AlgebraCat.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.AlgebraCat.Basic, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.AlgebraCat.Basic, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[2762/4301] Building Mathlib.Data.MvPolynomial.Rename
[2763/4301] Building Mathlib.Algebra.Algebra.Subalgebra.Unitization
[2764/4301] Building Mathlib.Algebra.Algebra.Spectrum
[2765/4301] Building Mathlib.RingTheory.Derivation.ToSquareZero
[2766/4301] Building Mathlib.Topology.MetricSpace.Bounded
[2767/4301] Building Mathlib.Topology.Algebra.UniformGroup
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[2768/4301] Building Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Topology
[2769/4301] Building Mathlib.Data.Polynomial.PartialFractions
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Derivation.ToSquareZero, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[2770/4301] Building Mathlib.Algebra.Polynomial.GroupRingAction
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.MvPolynomial.Rename, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.MvPolynomial.Rename, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[2771/4301] Building Mathlib.Data.Polynomial.Laurent
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.PresheafedSpace, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.PresheafedSpace, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.PresheafedSpace, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.PresheafedSpace, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.PresheafedSpace, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.PresheafedSpace, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.PresheafedSpace, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.PresheafedSpace, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.PresheafedSpace, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2772/4301] Building Mathlib.Topology.Algebra.MvPolynomial
[2773/4301] Building Mathlib.Data.MvPolynomial.Invertible
[2774/4301] Building Mathlib.RingTheory.Noetherian
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Polynomial.GroupRingAction, data field toFun is uncovered in MulSemiringActionHom.
                      It might be better to declare an instance of MulActionHom first.
[2775/4301] Building Mathlib.CategoryTheory.Triangulated.Pretriangulated
[2776/4301] Building Mathlib.AlgebraicTopology.DoldKan.HomotopyEquivalence
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Module.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2777/4301] Building Mathlib.LinearAlgebra.TensorAlgebra.Basic
[2778/4301] Building Mathlib.Data.Polynomial.RingDivision
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.MvPowerSeries.Basic, data field natCast is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.MvPowerSeries.Basic, data field one is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.MvPowerSeries.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.MvPowerSeries.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.MvPowerSeries.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[2779/4301] Building Mathlib.RingTheory.QuotientNilpotent
[2780/4301] Building Mathlib.Algebra.Homology.HomotopyCategory.HomComplexShift
[2781/4301] Building Mathlib.Algebra.Homology.HomotopyCategory.MappingCone
[2782/4301] Building Mathlib.Topology.Sheaves.Forget
[2783/4301] Building Mathlib.Algebra.CharP.ExpChar
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Subalgebra.Unitization, data field carrier is uncovered in NonUnitalStarSubalgebra.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Algebra.Subalgebra.Unitization, data field carrier is uncovered in StarSubalgebra.
                      It might be better to declare an instance of Subsemigroup first.
[2784/4301] Building Mathlib.Topology.Algebra.Nonarchimedean.Basic
[2785/4301] Building Mathlib.Topology.Sheaves.SheafCondition.Sites
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.UniformGroup, data field uniformity is uncovered in UniformSpace.
                      It might be better to declare an instance of UniformSpace.Core first.
[2786/4301] Building Mathlib.AlgebraicTopology.DoldKan.SplitSimplicialObject
[2787/4301] Building Mathlib.Topology.MetricSpace.Infsep
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.TensorAlgebra.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.TensorAlgebra.Basic, data field carrier is uncovered in Subalgebra.
                      It might be better to declare an instance of Subsemigroup first.
[2788/4301] Building Mathlib.Topology.Metrizable.Basic
[2789/4301] Building Mathlib.RingTheory.MvPolynomial.Ideal
[2790/4301] Building Mathlib.Analysis.Convex.StoneSeparation
[2791/4301] Building Mathlib.Analysis.Convex.Radon
[2792/4301] Building Mathlib.Analysis.Convex.Independent
[2793/4301] Building Mathlib.Topology.Sheaves.Limits
[2794/4301] Building Mathlib.Topology.MetricSpace.Sequences
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.DoldKan.SplitSimplicialObject, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.DoldKan.SplitSimplicialObject, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2795/4301] Building Mathlib.Data.MvPolynomial.Degrees
[2796/4301] Building Mathlib.Data.MvPolynomial.Comap
[2797/4301] Building Mathlib.CategoryTheory.Adhesive
[2798/4301] Building Mathlib.Topology.MetricSpace.Antilipschitz
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.Limits, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.Limits, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2799/4301] Building Mathlib.Topology.Algebra.Order.Field
[2800/4301] Building Mathlib.CategoryTheory.Monoidal.Internal.Module
[2801/4301] Building Mathlib.Data.Polynomial.Derivation
[2802/4301] Building Mathlib.Analysis.Convex.Caratheodory
[2803/4301] Building Mathlib.Analysis.Convex.Jensen
[2804/4301] Building Mathlib.Analysis.BoxIntegral.Box.Basic
[2805/4301] Building Mathlib.CategoryTheory.Sites.Coherent.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.RingDivision, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2806/4301] Building Mathlib.Topology.MetricSpace.ShrinkingLemma
[2807/4301] Building Mathlib.RingTheory.Polynomial.Nilpotent
[2808/4301] Building Mathlib.RingTheory.MvPowerSeries.Trunc
[2809/4301] Building Mathlib.Topology.Algebra.InfiniteSum.Group
[2810/4301] Building Mathlib.Topology.Sheaves.PUnit
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Derivation, data field toFun is uncovered in Derivation.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Derivation, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Derivation, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Derivation, data field toFun is uncovered in Derivation.
                      It might be better to declare an instance of AddHom first.
[2811/4301] Building Mathlib.Topology.Sheaves.SheafCondition.OpensLeCover
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.MvPowerSeries.Trunc, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[2812/4301] Building Mathlib.Algebra.CharP.Two
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.BoxIntegral.Box.Basic, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[2813/4301] Building Mathlib.RingTheory.PowerSeries.Basic
[2814/4301] Building Mathlib.CategoryTheory.Triangulated.Triangulated
[2815/4301] Building Mathlib.Topology.Compactness.Lindelof
[2816/4301] Building Mathlib.Topology.Algebra.UniformMulAction
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomotopyCategory.HomComplexShift, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomotopyCategory.HomComplexShift, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomotopyCategory.HomComplexShift, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.HomotopyCategory.HomComplexShift, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[2817/4301] Building Mathlib.LinearAlgebra.TensorAlgebra.ToTensorPower
[2818/4301] Building Mathlib.LinearAlgebra.TensorAlgebra.Grading
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.UniformMulAction, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[2819/4301] Building Mathlib.Algebra.CharP.Reduced
[2820/4301] Building Mathlib.CategoryTheory.Triangulated.Opposite
[2821/4301] Building Mathlib.CategoryTheory.Triangulated.Functor
[2822/4301] Building Mathlib.Topology.Metrizable.Uniformity
[2823/4301] Building Mathlib.Topology.MetricSpace.Isometry
[2824/4301] Building Mathlib.Topology.UniformSpace.Matrix
[2825/4301] Building Mathlib.AlgebraicTopology.DoldKan.GammaCompN
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Metrizable.Uniformity, data field dist is uncovered in PseudoMetricSpace.
                      It might be better to declare an instance of Dist first.
[2826/4301] Building Mathlib.Data.MvPolynomial.Variables
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.PowerSeries.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.PowerSeries.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[2827/4301] Building Mathlib.Geometry.RingedSpace.PresheafedSpace.HasColimits
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Isometry, data field toFun is uncovered in IsometryEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Isometry, data field invFun is uncovered in IsometryEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Isometry, data field one is uncovered in Group.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Isometry, data field mul is uncovered in Group.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Isometry, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[2828/4301] Building Mathlib.RingTheory.Polynomial.Pochhammer
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.SheafCondition.OpensLeCover, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.SheafCondition.OpensLeCover, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.SheafCondition.OpensLeCover, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.SheafCondition.OpensLeCover, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2829/4301] Building Mathlib.Data.Polynomial.Mirror
[2830/4301] Building Mathlib.CategoryTheory.Sites.LeftExact
[2831/4301] Building Mathlib.CategoryTheory.Sites.Subsheaf
[2832/4301] Building Mathlib.CategoryTheory.Sites.Coherent.RegularSheaves
[2833/4301] Building Mathlib.CategoryTheory.Sites.Coherent.CoherentSheaves
[2834/4301] Building Mathlib.CategoryTheory.Sites.Coherent.Comparison
[2835/4301] Building Mathlib.Data.Polynomial.SpecificDegree
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Noetherian, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[2836/4301] Building Mathlib.RingTheory.MvPolynomial.Basic
[2837/4301] Building Mathlib.CategoryTheory.Sites.Coherent.ExtensiveSheaves
[2838/4301] Building Mathlib.RingTheory.Polynomial.IrreducibleRing
[2839/4301] Building Mathlib.Analysis.BoxIntegral.Partition.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Subsheaf, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Sites.Subsheaf, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2840/4301] Building Mathlib.Data.MvPolynomial.Equiv
[2841/4301] Building Mathlib.Dynamics.Newton
[2842/4301] Building Mathlib.Topology.Instances.Discrete
[2843/4301] Building Mathlib.Topology.MetricSpace.Gluing
[2844/4301] Building Mathlib.Data.MvPolynomial.Monad
[2845/4301] Building Mathlib.Data.MvPolynomial.Supported
[2846/4301] Building Mathlib.Data.MvPolynomial.CommRing
[2847/4301] Building Mathlib.Topology.Algebra.InfiniteSum.Constructions
[2848/4301] Building Mathlib.Topology.Algebra.InfiniteSum.NatInt
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Gluing, data field dist is uncovered in MetricSpace.
                      It might be better to declare an instance of Dist first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Gluing, data field toUniformSpace is uncovered in MetricSpace.
                      It might be better to declare an instance of PseudoMetricSpace first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Gluing, data field dist is uncovered in MetricSpace.
                      It might be better to declare an instance of Dist first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Gluing, data field toUniformSpace is uncovered in MetricSpace.
                      It might be better to declare an instance of PseudoMetricSpace first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Gluing, data field dist is uncovered in PseudoMetricSpace.
                      It might be better to declare an instance of Dist first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Gluing, data field dist is uncovered in PseudoMetricSpace.
                      It might be better to declare an instance of Dist first.
[2849/4301] Building Mathlib.Topology.Algebra.GroupCompletion
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.BoxIntegral.Partition.Basic, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.BoxIntegral.Partition.Basic, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.BoxIntegral.Partition.Basic, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[2850/4301] Building Mathlib.Topology.MetricSpace.Lipschitz
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.MvPolynomial.Monad, data field map is uncovered in Monad.
                      It might be better to declare an instance of Functor first.
[Elab.StructInst.coveredFields] In Mathlib.Data.MvPolynomial.Monad, data field pure is uncovered in Monad.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.Data.MvPolynomial.Monad, data field bind is uncovered in Monad.
                      It might be better to declare an instance of Bind first.
[2851/4301] Building Mathlib.Topology.Algebra.Module.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.MvPolynomial.Equiv, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.MvPolynomial.Equiv, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.MvPolynomial.Equiv, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.MvPolynomial.Equiv, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.MvPolynomial.Equiv, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.MvPolynomial.Equiv, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.MvPolynomial.Equiv, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[2852/4301] Building Mathlib.Topology.Metrizable.ContinuousMap
[2853/4301] Building Mathlib.RingTheory.HahnSeries.PowerSeries
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Module, data field one is uncovered in Ring.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Module, data field mul is uncovered in Ring.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Module, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Module, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Module, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Module, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Module, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Module, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Module, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Module, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Module, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Module, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Monoidal.Internal.Module, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2854/4301] Building Mathlib.RingTheory.PowerSeries.Order
[2855/4301] Building Mathlib.RingTheory.Binomial
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.GroupCompletion, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.GroupCompletion, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[2856/4301] Building Mathlib.Data.Nat.Factorial.Cast
[2857/4301] Building Mathlib.CategoryTheory.Sites.Coherent.RegularTopology
[2858/4301] Building Mathlib.CategoryTheory.Sites.Coherent.CoherentTopology
[2859/4301] Building Mathlib.RingTheory.Localization.Submodule
[2860/4301] Building Mathlib.RingTheory.Ideal.AssociatedPrime
[2861/4301] Building Mathlib.Algebra.Lie.Subalgebra
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.HahnSeries.PowerSeries, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.HahnSeries.PowerSeries, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.HahnSeries.PowerSeries, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.HahnSeries.PowerSeries, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[2862/4301] Building Mathlib.RingTheory.PowerSeries.Trunc
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.PresheafedSpace.HasColimits, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.PresheafedSpace.HasColimits, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.PresheafedSpace.HasColimits, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.PresheafedSpace.HasColimits, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2863/4301] Building Mathlib.RingTheory.PowerSeries.WellKnown
[2864/4301] Building Mathlib.RingTheory.UniqueFactorizationDomain
[2865/4301] Building Mathlib.RingTheory.QuotientNoetherian
[2866/4301] Building Mathlib.AlgebraicTopology.DoldKan.NCompGamma
[2867/4301] Building Mathlib.CategoryTheory.Sites.Pullback
[2868/4301] Building Mathlib.Topology.Sheaves.Abelian
[2869/4301] Building Mathlib.Algebra.Category.Ring.Adjunctions
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Opposite, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Opposite, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Opposite, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Opposite, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2870/4301] Building Mathlib.Analysis.BoxIntegral.Partition.Split
[2871/4301] Building Mathlib.Analysis.BoxIntegral.Partition.Tagged
[2872/4301] Building Mathlib.CategoryTheory.Sites.Surjective
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Adjunctions, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.Ring.Adjunctions, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2873/4301] Building Mathlib.Data.MvPolynomial.Expand
[2874/4301] Building Mathlib.Topology.MetricSpace.IsometricSMul
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Functor, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Triangulated.Functor, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2875/4301] Building Mathlib.Topology.MetricSpace.Algebra
[2876/4301] Building Mathlib.Data.MvPolynomial.Derivation
[2877/4301] Building Mathlib.Data.Nat.Choose.Cast
[2878/4301] Building Mathlib.RingTheory.MvPolynomial.Symmetric
[2879/4301] Building Mathlib.Data.MvPolynomial.Cardinal
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Subalgebra, data field bracket is uncovered in LieRing.
                      It might be better to declare an instance of Bracket first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Subalgebra, data field bracket is uncovered in LieRingModule.
                      It might be better to declare an instance of Bracket first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Subalgebra, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Subalgebra, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Subalgebra, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Subalgebra, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Subalgebra, data field nsmul is uncovered in AddCommMonoid.
                      It might be better to declare an instance of AddMonoid first.
[2880/4301] Building Mathlib.Data.MvPolynomial.Polynomial
[2881/4301] Building Mathlib.Topology.Algebra.InfiniteSum.Ring
[2882/4301] Building Mathlib.Topology.Algebra.UniformRing
[2883/4301] Building Mathlib.Topology.MetricSpace.Dilation
[2884/4301] Building Mathlib.Topology.Instances.Int
[2885/4301] Building Mathlib.RingTheory.FractionalIdeal.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.MvPolynomial.Symmetric, data field carrier is uncovered in Subalgebra.
                      It might be better to declare an instance of Subsemigroup first.
[2886/4301] Building Mathlib.CategoryTheory.Sites.Coherent.Equivalence
[2887/4301] Building Mathlib.RingTheory.LaurentSeries
[2888/4301] Building Mathlib.RingTheory.MvPolynomial.Homogeneous
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.MvPolynomial.Derivation, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[2889/4301] Building Mathlib.RingTheory.FreeCommRing
[2890/4301] Building Mathlib.Topology.Sheaves.Functors
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Dilation, data field one is uncovered in Monoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Dilation, data field mul is uncovered in Monoid.
                      It might be better to declare an instance of Mul first.
[2891/4301] Building Mathlib.Algebra.Homology.HomotopyCategory.Pretriangulated
[2892/4301] Building Mathlib.AlgebraicTopology.DoldKan.EquivalenceAdditive
[2893/4301] Building Mathlib.Topology.Algebra.InfiniteSum.Order
[2894/4301] Building Mathlib.RingTheory.WittVector.WittPolynomial
[2895/4301] Building Mathlib.RingTheory.MvPolynomial.NewtonIdentities
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.UniformRing, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.UniformRing, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.UniformRing, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[2896/4301] Building Mathlib.Topology.Instances.Real
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.FreeCommRing, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[2897/4301] Building Mathlib.Topology.Instances.Nat
[2898/4301] Building Mathlib.Data.MvPolynomial.PDeriv
[2899/4301] Building Mathlib.Topology.MetricSpace.DilationEquiv
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.UniqueFactorizationDomain, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.UniqueFactorizationDomain, data field sup is uncovered in Lattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.UniqueFactorizationDomain, data field inf is uncovered in Lattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.UniqueFactorizationDomain, data field gcd is uncovered in NormalizedGCDMonoid.
                      It might be better to declare an instance of GCDMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.UniqueFactorizationDomain, data field lcm is uncovered in NormalizedGCDMonoid.
                      It might be better to declare an instance of GCDMonoid first.
[2900/4301] Building Mathlib.Data.Polynomial.HasseDeriv
[2901/4301] Building Mathlib.Geometry.RingedSpace.SheafedSpace
[2902/4301] Building Mathlib.ModelTheory.Algebra.Ring.FreeCommRing
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.FractionalIdeal.Basic, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.FractionalIdeal.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.FractionalIdeal.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[2903/4301] Building Mathlib.RingTheory.Localization.NumDen
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.MvPolynomial.Homogeneous, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[2904/4301] Building Mathlib.RingTheory.PrincipalIdealDomain
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.DilationEquiv, data field mul is uncovered in Group.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.DilationEquiv, data field one is uncovered in Group.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.DilationEquiv, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.DilationEquiv, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.DilationEquiv, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[2905/4301] Building Mathlib.Algebra.Squarefree.Basic
[2906/4301] Building Mathlib.AlgebraicTopology.DoldKan.EquivalencePseudoabelian
[2907/4301] Building Mathlib.Topology.Algebra.UniformField
[2908/4301] Building Mathlib.RingTheory.Localization.Away.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.SheafedSpace, data field carrier is uncovered in AlgebraicGeometry.SheafedSpace.
                      It might be better to declare an instance of AlgebraicGeometry.PresheafedSpace first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.SheafedSpace, data field presheaf is uncovered in AlgebraicGeometry.SheafedSpace.
                      It might be better to declare an instance of AlgebraicGeometry.PresheafedSpace first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.SheafedSpace, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.SheafedSpace, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2909/4301] Building Mathlib.Algebra.DirectLimit
[2910/4301] Building Mathlib.Topology.Instances.NNReal
[2911/4301] Building Mathlib.Topology.Algebra.InfiniteSum.Real
[2912/4301] Building Mathlib.Topology.Instances.Rat
[2913/4301] Building Mathlib.Topology.MetricSpace.Completion
[2914/4301] Building Mathlib.Topology.Order.Bounded
[2915/4301] Building Mathlib.Analysis.Subadditive
[2916/4301] Building Mathlib.RingTheory.Polynomial.Bernstein
[2917/4301] Building Mathlib.Topology.UnitInterval
[2918/4301] Building Mathlib.LinearAlgebra.InvariantBasisNumber
[2919/4301] Building Mathlib.RingTheory.EuclideanDomain
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Completion, data field dist is uncovered in PseudoMetricSpace.
                      It might be better to declare an instance of Dist first.
[2920/4301] Building Mathlib.RingTheory.Int.Basic
[2921/4301] Building Mathlib.RingTheory.Bezout
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.InvariantBasisNumber, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.InvariantBasisNumber, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[2922/4301] Building Mathlib.Data.Polynomial.Taylor
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.UnitInterval, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.UnitInterval, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[2923/4301] Building Mathlib.Data.Real.Sqrt
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Bezout, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[2924/4301] Building Mathlib.AlgebraicTopology.TopologicalSimplex
[2925/4301] Building Mathlib.ModelTheory.Algebra.Field.CharP
[2926/4301] Building Mathlib.RingTheory.ChainOfDivisors
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Taylor, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2927/4301] Building Mathlib.RingTheory.ZMod
[2928/4301] Building Mathlib.Data.Polynomial.FieldDivision
[2929/4301] Building Mathlib.LinearAlgebra.Matrix.InvariantBasisNumber
[2930/4301] Building Mathlib.LinearAlgebra.Dimension.StrongRankCondition
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.TopologicalSimplex, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.TopologicalSimplex, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2931/4301] Building Mathlib.Topology.UniformSpace.CompareReals
[2932/4301] Building Mathlib.Topology.Homotopy.Basic
[2933/4301] Building Mathlib.Topology.Connected.PathConnected
[2934/4301] Building Mathlib.Data.ZMod.Quotient
[2935/4301] Building Mathlib.Data.ZMod.Coprime
[2936/4301] Building Mathlib.AlgebraicTopology.DoldKan.Equivalence
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.ChainOfDivisors, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.ChainOfDivisors, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[2937/4301] Building Mathlib.GroupTheory.Perm.Cycle.Type
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field zero is uncovered in AddCommMonoid.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field add is uncovered in AddCommMonoid.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field nsmul is uncovered in AddCommMonoid.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field mul is uncovered in MonoidWithZero.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field one is uncovered in MonoidWithZero.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field zero is uncovered in MonoidWithZero.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field natCast is uncovered in Semiring.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field neg is uncovered in AddCommGroup.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field sub is uncovered in AddCommGroup.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field intCast is uncovered in Ring.
                      It might be better to declare an instance of IntCast first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field invFun is uncovered in ContinuousLinearEquiv.
                      It might be better to declare an instance of LinearEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field mul is uncovered in Group.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field one is uncovered in Group.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Basic, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[2938/4301] Building Mathlib.Analysis.Normed.Group.Basic
[2939/4301] Building Mathlib.NumberTheory.Zsqrtd.Basic
[2940/4301] Building Mathlib.Topology.Instances.ENNReal
[2941/4301] Building Mathlib.Algebra.Star.CHSH
[2942/4301] Building Mathlib.Data.Complex.Abs
[2943/4301] Building Mathlib.CategoryTheory.Preadditive.HomOrthogonal
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.Basic, data field toFun is uncovered in ContinuousMap.Homotopy.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.Basic, data field toFun is uncovered in ContinuousMap.Homotopy.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.Basic, data field toFun is uncovered in ContinuousMap.Homotopy.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.Basic, data field toFun is uncovered in ContinuousMap.Homotopy.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.Basic, data field toFun is uncovered in ContinuousMap.Homotopy.
                      It might be better to declare an instance of ContinuousMap first.
[2944/4301] Building Mathlib.NumberTheory.Padics.PadicVal
[2945/4301] Building Mathlib.AlgebraicTopology.SingularSet
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Abs, data field toFun is uncovered in AbsoluteValue.
                      It might be better to declare an instance of MulHom first.
[2946/4301] Building Mathlib.Topology.Algebra.InfiniteSum.Module
[2947/4301] Building Mathlib.Topology.Instances.TrivSqZeroExt
[2948/4301] Building Mathlib.Topology.Algebra.ContinuousAffineMap
[2949/4301] Building Mathlib.Topology.Algebra.Module.LinearPMap
[2950/4301] Building Mathlib.Topology.Algebra.FilterBasis
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Instances.TrivSqZeroExt, data field toFun is uncovered in ContinuousLinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Instances.TrivSqZeroExt, data field toFun is uncovered in ContinuousLinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Instances.TrivSqZeroExt, data field toFun is uncovered in ContinuousLinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Instances.TrivSqZeroExt, data field toFun is uncovered in ContinuousLinearMap.
                      It might be better to declare an instance of AddHom first.
[2951/4301] Building Mathlib.GroupTheory.Complement
[2952/4301] Building Mathlib.NumberTheory.PythagoreanTriples
[2953/4301] Building Mathlib.Analysis.Convex.Exposed
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DirectLimit, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DirectLimit, data field inv is uncovered in Field.
                      It might be better to declare an instance of Inv first.
[2954/4301] Building Mathlib.Topology.Algebra.Algebra
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Connected.PathConnected, data field toFun is uncovered in Path.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Connected.PathConnected, data field toFun is uncovered in Path.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Connected.PathConnected, data field toFun is uncovered in Path.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Connected.PathConnected, data field toFun is uncovered in Path.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Connected.PathConnected, data field toFun is uncovered in Path.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Connected.PathConnected, data field toFun is uncovered in Path.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Connected.PathConnected, data field toFun is uncovered in Path.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Connected.PathConnected, data field toFun is uncovered in Path.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Connected.PathConnected, data field toFun is uncovered in Path.
                      It might be better to declare an instance of ContinuousMap first.
[2955/4301] Building Mathlib.Topology.Algebra.Module.Star
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.FilterBasis, data field sets is uncovered in GroupFilterBasis.
                      It might be better to declare an instance of FilterBasis first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.FilterBasis, data field sets is uncovered in GroupFilterBasis.
                      It might be better to declare an instance of FilterBasis first.
[2956/4301] Building Mathlib.Topology.Algebra.Module.WeakDual
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.ContinuousAffineMap, data field toFun is uncovered in ContinuousAffineMap.
                      It might be better to declare an instance of AffineMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.ContinuousAffineMap, data field toFun is uncovered in ContinuousAffineMap.
                      It might be better to declare an instance of AffineMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.ContinuousAffineMap, data field linear is uncovered in ContinuousAffineMap.
                      It might be better to declare an instance of AffineMap first.
[2957/4301] Building Mathlib.Topology.Algebra.Module.Multilinear.Basic
[2958/4301] Building Mathlib.Topology.Instances.RealVectorSpace
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Algebra, data field toFun is uncovered in ContinuousLinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Algebra, data field carrier is uncovered in Subalgebra.
                      It might be better to declare an instance of Subsemigroup first.
[2959/4301] Building Mathlib.GroupTheory.FreeAbelianGroupFinsupp
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Zsqrtd.Basic, data field add is uncovered in AddCommGroup.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Zsqrtd.Basic, data field zero is uncovered in AddCommGroup.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Zsqrtd.Basic, data field sub is uncovered in AddCommGroup.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Zsqrtd.Basic, data field neg is uncovered in AddCommGroup.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Zsqrtd.Basic, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Zsqrtd.Basic, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Zsqrtd.Basic, data field natCast is uncovered in AddGroupWithOne.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Zsqrtd.Basic, data field intCast is uncovered in AddGroupWithOne.
                      It might be better to declare an instance of IntCast first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Zsqrtd.Basic, data field one is uncovered in AddGroupWithOne.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Zsqrtd.Basic, data field mul is uncovered in CommRing.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Zsqrtd.Basic, data field npow is uncovered in CommRing.
                      It might be better to declare an instance of Semiring first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Zsqrtd.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Zsqrtd.Basic, data field le is uncovered in Preorder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Zsqrtd.Basic, data field lt is uncovered in Preorder.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Zsqrtd.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[2960/4301] Building Mathlib.LinearAlgebra.FreeModule.PID
[2961/4301] Building Mathlib.Data.Polynomial.Degree.CardPowDegree
[2962/4301] Building Mathlib.Data.Polynomial.Splits
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Instances.RealVectorSpace, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2963/4301] Building Mathlib.Algebra.CharP.CharAndCard
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeAbelianGroupFinsupp, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FreeAbelianGroupFinsupp, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[2964/4301] Building Mathlib.Topology.Homotopy.Equiv
[2965/4301] Building Mathlib.Algebra.Homology.HomotopyCategory.DegreewiseSplit
[2966/4301] Building Mathlib.FieldTheory.MvPolynomial
[2967/4301] Building Mathlib.LinearAlgebra.Dimension.Free
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Complement, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[2968/4301] Building Mathlib.Data.Complex.Order
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Polynomial.Degree.CardPowDegree, data field toFun is uncovered in AbsoluteValue.
                      It might be better to declare an instance of MulHom first.
[2969/4301] Building Mathlib.RingTheory.Polynomial.Content
[2970/4301] Building Mathlib.GroupTheory.Perm.Cycle.Concrete
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Basic, data field dist is uncovered in SeminormedGroup.
                      It might be better to declare an instance of Dist first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Basic, data field norm is uncovered in SeminormedGroup.
                      It might be better to declare an instance of Norm first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Basic, data field norm is uncovered in NormedAddCommGroup.
                      It might be better to declare an instance of Norm first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Basic, data field norm is uncovered in SeminormedGroup.
                      It might be better to declare an instance of Norm first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Basic, data field norm is uncovered in NormedAddCommGroup.
                      It might be better to declare an instance of Norm first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Basic, data field norm is uncovered in NormedAddCommGroup.
                      It might be better to declare an instance of Norm first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Basic, data field norm is uncovered in SeminormedGroup.
                      It might be better to declare an instance of Norm first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Basic, data field norm is uncovered in SeminormedAddGroup.
                      It might be better to declare an instance of Norm first.
[2971/4301] Building Mathlib.NumberTheory.Padics.PadicNorm
[2972/4301] Building Mathlib.Algebra.Quaternion
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Order, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Order, data field lt is uncovered in PartialOrder.
                      It might be better to declare an instance of LT first.
[2973/4301] Building Mathlib.Algebra.Category.ModuleCat.Limits
[2974/4301] Building Mathlib.Algebra.Module.DirectLimitAndTensorProduct
[2975/4301] Building Mathlib.NumberTheory.Zsqrtd.ToReal
[2976/4301] Building Mathlib.Algebra.Homology.HomotopyCategory.Triangulated
[2977/4301] Building Mathlib.Data.Complex.Exponential
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Multilinear.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Multilinear.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Multilinear.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Multilinear.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[2978/4301] Building Mathlib.GroupTheory.Perm.Fin
[2979/4301] Building Mathlib.Topology.Homotopy.Path
[2980/4301] Building Mathlib.Topology.Homotopy.HSpaces
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Limits, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Limits, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Limits, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Limits, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[2981/4301] Building Mathlib.NumberTheory.Multiplicity
[2982/4301] Building Mathlib.Topology.Algebra.Nonarchimedean.Bases
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.HSpaces, data field toFun is uncovered in Path.
                      It might be better to declare an instance of ContinuousMap first.
[2983/4301] Building Mathlib.Topology.Algebra.UniformFilterBasis
[2984/4301] Building Mathlib.Topology.Algebra.StarSubalgebra
[2985/4301] Building Mathlib.Topology.Instances.EReal
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Nonarchimedean.Bases, data field sets is uncovered in RingFilterBasis.
                      It might be better to declare an instance of FilterBasis first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Nonarchimedean.Bases, data field sets is uncovered in ModuleFilterBasis.
                      It might be better to declare an instance of FilterBasis first.
[2986/4301] Building Mathlib.Topology.Semicontinuous
[2987/4301] Building Mathlib.Order.Filter.ENNReal
[2988/4301] Building Mathlib.Topology.ContinuousFunction.Algebra
[2989/4301] Building Mathlib.ModelTheory.DirectLimit
[2990/4301] Building Mathlib.Analysis.Convex.Topology
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.StarSubalgebra, data field carrier is uncovered in StarSubalgebra.
                      It might be better to declare an instance of Subsemigroup first.
[2991/4301] Building Mathlib.Data.Nat.Factorization.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.DirectLimit, data field toFun is uncovered in FirstOrder.Language.Embedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.ModelTheory.DirectLimit, data field toFun is uncovered in FirstOrder.Language.Embedding.
                      It might be better to declare an instance of Function.Embedding first.
[2992/4301] Building Mathlib.NumberTheory.PellMatiyasevic
[2993/4301] Building Mathlib.GroupTheory.PushoutI
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.Path, data field toFun is uncovered in Path.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.Path, data field toFun is uncovered in ContinuousMap.HomotopyWith.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.Path, data field toFun is uncovered in ContinuousMap.HomotopyWith.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.Path, data field toFun is uncovered in ContinuousMap.HomotopyWith.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.Path, data field toFun is uncovered in ContinuousMap.HomotopyWith.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.Path, data field toFun is uncovered in Path.
                      It might be better to declare an instance of ContinuousMap first.
[2994/4301] Building Mathlib.GroupTheory.HNNExtension
[2995/4301] Building Mathlib.Analysis.SpecificLimits.Basic
[2996/4301] Building Mathlib.InformationTheory.Hamming
[2997/4301] Building Mathlib.Analysis.Normed.Group.BallSphere
[2998/4301] Building Mathlib.Analysis.Normed.Group.Hom
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.BallSphere, data field neg is uncovered in InvolutiveNeg.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.BallSphere, data field neg is uncovered in InvolutiveNeg.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.BallSphere, data field neg is uncovered in InvolutiveNeg.
                      It might be better to declare an instance of Neg first.
[2999/4301] Building Mathlib.Algebra.CubicDiscriminant
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Algebra, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Algebra, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Algebra, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Algebra, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Algebra, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Algebra, data field carrier is uncovered in Subalgebra.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Algebra, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Algebra, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Algebra, data field smul is uncovered in Module.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Algebra, data field toFun is uncovered in StarAlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Algebra, data field toFun is uncovered in StarAlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Algebra, data field toFun is uncovered in StarAlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Algebra, data field invFun is uncovered in StarAlgEquiv.
                      It might be better to declare an instance of Equiv first.
[3001/4301] Building Mathlib.NumberTheory.Zsqrtd.GaussianInt
[3001/4301] Building Mathlib.Analysis.Normed.Group.InfiniteSum
[3002/4301] Building Mathlib.Analysis.Normed.Order.Lattice
[3003/4301] Building Mathlib.Analysis.Normed.Group.CocompactMap
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Exponential, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Exponential, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[3004/4301] Building Mathlib.Analysis.Normed.Group.Lemmas
[3005/4301] Building Mathlib.Analysis.NormedSpace.IndicatorFunction
[3006/4301] Building Mathlib.RingTheory.Polynomial.Vieta
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quaternion, data field natCast is uncovered in AddCommGroupWithOne.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quaternion, data field intCast is uncovered in AddCommGroupWithOne.
                      It might be better to declare an instance of IntCast first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quaternion, data field smul is uncovered in Algebra.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quaternion, data field toFun is uncovered in Algebra.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quaternion, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quaternion, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quaternion, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quaternion, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quaternion, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quaternion, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quaternion, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quaternion, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quaternion, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quaternion, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Quaternion, data field inv is uncovered in GroupWithZero.
                      It might be better to declare an instance of Inv first.
[3007/4301] Building Mathlib.GroupTheory.Perm.Cycle.PossibleTypes
[3008/4301] Building Mathlib.Topology.Algebra.Module.Alternating.Basic
[3009/4301] Building Mathlib.Analysis.NormedSpace.MStructure
[3010/4301] Building Mathlib.Analysis.Normed.Group.Completion
[3011/4301] Building Mathlib.Analysis.Normed.Group.AddTorsor
[3012/4301] Building Mathlib.Analysis.NormedSpace.LinearIsometry
[3013/4301] Building Mathlib.FieldTheory.RatFunc
[3014/4301] Building Mathlib.Algebra.GCDMonoid.Div
[3015/4301] Building Mathlib.Analysis.Normed.Field.Basic
[3016/4301] Building Mathlib.RingTheory.Polynomial.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.HNNExtension, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.HNNExtension, data field head is uncovered in HNNExtension.NormalWord.
                      It might be better to declare an instance of HNNExtension.NormalWord.ReducedWord first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.HNNExtension, data field toList is uncovered in HNNExtension.NormalWord.
                      It might be better to declare an instance of HNNExtension.NormalWord.ReducedWord first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.HNNExtension, data field head is uncovered in HNNExtension.NormalWord.
                      It might be better to declare an instance of HNNExtension.NormalWord.ReducedWord first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.HNNExtension, data field toList is uncovered in HNNExtension.NormalWord.
                      It might be better to declare an instance of HNNExtension.NormalWord.ReducedWord first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.HNNExtension, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.HNNExtension, data field head is uncovered in HNNExtension.NormalWord.
                      It might be better to declare an instance of HNNExtension.NormalWord.ReducedWord first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.HNNExtension, data field head is uncovered in HNNExtension.NormalWord.
                      It might be better to declare an instance of HNNExtension.NormalWord.ReducedWord first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.HNNExtension, data field head is uncovered in HNNExtension.NormalWord.
                      It might be better to declare an instance of HNNExtension.NormalWord.ReducedWord first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.HNNExtension, data field toList is uncovered in HNNExtension.NormalWord.
                      It might be better to declare an instance of HNNExtension.NormalWord.ReducedWord first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.HNNExtension, data field head is uncovered in HNNExtension.NormalWord.
                      It might be better to declare an instance of HNNExtension.NormalWord.ReducedWord first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.HNNExtension, data field toList is uncovered in HNNExtension.NormalWord.
                      It might be better to declare an instance of HNNExtension.NormalWord.ReducedWord first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.HNNExtension, data field head is uncovered in HNNExtension.NormalWord.
                      It might be better to declare an instance of HNNExtension.NormalWord.ReducedWord first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.HNNExtension, data field toList is uncovered in HNNExtension.NormalWord.
                      It might be better to declare an instance of HNNExtension.NormalWord.ReducedWord first.
[3017/4301] Building Mathlib.RingTheory.EisensteinCriterion
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.AddTorsor, data field dist is uncovered in PseudoMetricSpace.
                      It might be better to declare an instance of Dist first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.AddTorsor, data field dist is uncovered in MetricSpace.
                      It might be better to declare an instance of Dist first.
[3018/4301] Building Mathlib.NumberTheory.FLT.Four
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Hom, data field toFun is uncovered in AddGroupNorm.
                      It might be better to declare an instance of AddGroupSeminorm first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Hom, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[3019/4301] Building Mathlib.Algebra.Category.AlgebraCat.Limits
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.MStructure, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.MStructure, data field top is uncovered in BoundedOrder.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.MStructure, data field bot is uncovered in BoundedOrder.
                      It might be better to declare an instance of Bot first.
[3020/4301] Building Mathlib.Algebra.Category.ModuleCat.Abelian
[3021/4301] Building Mathlib.Topology.Homotopy.Product
[3022/4301] Building Mathlib.Topology.Algebra.Module.LocallyConvex
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.PushoutI, data field head is uncovered in Monoid.PushoutI.NormalWord.Pair.
                      It might be better to declare an instance of Monoid.CoprodI.Word.Pair first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.PushoutI, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.PushoutI, data field head is uncovered in Monoid.PushoutI.NormalWord.Pair.
                      It might be better to declare an instance of Monoid.CoprodI.Word.Pair first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.PushoutI, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.PushoutI, data field head is uncovered in Monoid.PushoutI.NormalWord.Pair.
                      It might be better to declare an instance of Monoid.CoprodI.Word.Pair first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.PushoutI, data field head is uncovered in Monoid.PushoutI.NormalWord.Pair.
                      It might be better to declare an instance of Monoid.CoprodI.Word.Pair first.
[3023/4301] Building Mathlib.Topology.Algebra.Nonarchimedean.AdicTopology
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.Product, data field toFun is uncovered in ContinuousMap.Homotopy.
                      It might be better to declare an instance of ContinuousMap first.
[3024/4301] Building Mathlib.Data.Nat.Factorization.Root
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Abelian, data field normalMonoOfMono is uncovered in CategoryTheory.Abelian.
                      It might be better to declare an instance of CategoryTheory.NormalMonoCategory first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Abelian, data field normalEpiOfEpi is uncovered in CategoryTheory.Abelian.
                      It might be better to declare an instance of CategoryTheory.NormalEpiCategory first.
[3025/4301] Building Mathlib.Data.Nat.Factorization.PrimePow
[3026/4301] Building Mathlib.Topology.Sheaves.PresheafOfFunctions
[3027/4301] Building Mathlib.Topology.ContinuousFunction.LocallyConstant
[3028/4301] Building Mathlib.Topology.ContinuousFunction.ContinuousMapZero
[3029/4301] Building Mathlib.Topology.Algebra.ContinuousMonoidHom
[3030/4301] Building Mathlib.NumberTheory.Dioph
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Alternating.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Alternating.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.Alternating.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[3031/4301] Building Mathlib.ModelTheory.Fraisse
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.LocallyConstant, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.LocallyConstant, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.LocallyConstant, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[3032/4301] Building Mathlib.GroupTheory.SpecificGroups.Alternating
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.PresheafOfFunctions, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.PresheafOfFunctions, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.PresheafOfFunctions, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.PresheafOfFunctions, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.PresheafOfFunctions, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.PresheafOfFunctions, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.PresheafOfFunctions, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.PresheafOfFunctions, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.PresheafOfFunctions, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.PresheafOfFunctions, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3033/4301] Building Mathlib.AlgebraicTopology.FundamentalGroupoid.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.ContinuousMapZero, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.ContinuousMapZero, data field star is uncovered in StarRing.
                      It might be better to declare an instance of Star first.
[3034/4301] Building Mathlib.Topology.Homotopy.Contractible
[3035/4301] Building Mathlib.Analysis.Normed.Group.Completeness
[3036/4301] Building Mathlib.Analysis.BoxIntegral.Box.SubboxInduction
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Field.Basic, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Field.Basic, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[3037/4301] Building Mathlib.Data.Real.Hyperreal
[3038/4301] Building Mathlib.Analysis.Hofer
[3039/4301] Building Mathlib.Data.Nat.Choose.Factorization
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.ContinuousMonoidHom, data field mul is uncovered in CommGroup.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.ContinuousMonoidHom, data field one is uncovered in CommGroup.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.ContinuousMonoidHom, data field inv is uncovered in CommGroup.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.ContinuousMonoidHom, data field toFun is uncovered in ContinuousMonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.ContinuousMonoidHom, data field toFun is uncovered in ContinuousMonoidHom.
                      It might be better to declare an instance of OneHom first.
[3040/4301] Building Mathlib.Algebra.DualQuaternion
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Polynomial.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Polynomial.Basic, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[3041/4301] Building Mathlib.Topology.Algebra.Module.CharacterSpace
[3042/4301] Building Mathlib.Topology.Baire.CompleteMetrizable
[3043/4301] Building Mathlib.Topology.MetricSpace.HausdorffDistance
[3044/4301] Building Mathlib.GroupTheory.Exponent
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Dioph, data field add is uncovered in AddCommGroup.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Dioph, data field neg is uncovered in AddCommGroup.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Dioph, data field sub is uncovered in AddCommGroup.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Dioph, data field zero is uncovered in AddCommGroup.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Dioph, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Dioph, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Dioph, data field one is uncovered in AddGroupWithOne.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Dioph, data field natCast is uncovered in AddGroupWithOne.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Dioph, data field intCast is uncovered in AddGroupWithOne.
                      It might be better to declare an instance of IntCast first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Dioph, data field mul is uncovered in CommRing.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Dioph, data field npow is uncovered in CommRing.
                      It might be better to declare an instance of Semiring first.
[3045/4301] Building Mathlib.Analysis.NormedSpace.FunctionSeries
[3046/4301] Building Mathlib.Algebra.QuaternionBasis
[3047/4301] Building Mathlib.Data.Nat.Totient
[3048/4301] Building Mathlib.Topology.MetricSpace.Contracting
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.CharacterSpace, data field toFun is uncovered in NonUnitalAlgHom.
                      It might be better to declare an instance of MulActionHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.CharacterSpace, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[3049/4301] Building Mathlib.Data.Real.Cardinality
[3050/4301] Building Mathlib.MeasureTheory.OuterMeasure.Basic
[3051/4301] Building Mathlib.AlgebraicGeometry.EllipticCurve.Weierstrass
[3052/4301] Building Mathlib.Analysis.Normed.Group.HomCompletion
[3053/4301] Building Mathlib.RingTheory.Polynomial.Eisenstein.Basic
[3054/4301] Building Mathlib.Analysis.Convex.Contractible
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.QuaternionBasis, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[3055/4301] Building Mathlib.Topology.Algebra.Polynomial
[3056/4301] Building Mathlib.NumberTheory.Padics.PadicNumbers
[3057/4301] Building Mathlib.Analysis.SumOverResidueClass
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.HomCompletion, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[3058/4301] Building Mathlib.Analysis.Normed.MulAction
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DualQuaternion, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.DualQuaternion, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[3059/4301] Building Mathlib.Analysis.Normed.Order.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.FundamentalGroupoid.Basic, data field toFun is uncovered in ContinuousMap.HomotopyWith.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.FundamentalGroupoid.Basic, data field Hom is uncovered in CategoryTheory.Groupoid.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.FundamentalGroupoid.Basic, data field id is uncovered in CategoryTheory.Groupoid.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.FundamentalGroupoid.Basic, data field comp is uncovered in CategoryTheory.Groupoid.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.FundamentalGroupoid.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.FundamentalGroupoid.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.FundamentalGroupoid.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.FundamentalGroupoid.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3060/4301] Building Mathlib.Topology.MetricSpace.CauSeqFilter
[3061/4301] Building Mathlib.Analysis.NormedSpace.Int
[3062/4301] Building Mathlib.Analysis.Normed.Ring.Seminorm
[3063/4301] Building Mathlib.CategoryTheory.Preadditive.Yoneda.Limits
[3064/4301] Building Mathlib.Algebra.Category.ModuleCat.Images
[3065/4301] Building Mathlib.LinearAlgebra.Matrix.Determinant
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.LinearIsometry, data field one is uncovered in Monoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.LinearIsometry, data field mul is uncovered in Monoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.LinearIsometry, data field mul is uncovered in Group.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.LinearIsometry, data field one is uncovered in Group.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.LinearIsometry, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.LinearIsometry, data field toFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.LinearIsometry, data field invFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of LinearEquiv first.
[3066/4301] Building Mathlib.Data.Nat.Squarefree
[3067/4301] Building Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber
[3068/4301] Building Mathlib.Analysis.Normed.Field.UnitBall
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Images, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3069/4301] Building Mathlib.Algebra.Homology.ModuleCat
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Ring.Seminorm, data field toFun is uncovered in RingSeminorm.
                      It might be better to declare an instance of AddGroupSeminorm first.
[3070/4301] Building Mathlib.Algebra.Category.GroupCat.Abelian
[3071/4301] Building Mathlib.Data.MvPolynomial.Funext
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Abelian, data field normalMonoOfMono is uncovered in CategoryTheory.Abelian.
                      It might be better to declare an instance of CategoryTheory.NormalMonoCategory first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Abelian, data field normalEpiOfEpi is uncovered in CategoryTheory.Abelian.
                      It might be better to declare an instance of CategoryTheory.NormalEpiCategory first.
[3072/4301] Building Mathlib.RingTheory.Polynomial.Quotient
stdout:
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.OuterMeasure.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.OuterMeasure.Basic, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.OuterMeasure.Basic, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.OuterMeasure.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.OuterMeasure.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3073/4301] Building Mathlib.Analysis.Normed.Group.SemiNormedGroupCat
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field mul is uncovered in CommMonoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field one is uncovered in CommMonoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field npow is uncovered in CommMonoid.
                      It might be better to declare an instance of Monoid first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field add is uncovered in AddCommGroup.
                      It might be better to declare an instance of Add first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field zero is uncovered in AddCommGroup.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field neg is uncovered in AddCommGroup.
                      It might be better to declare an instance of Neg first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field sub is uncovered in AddCommGroup.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field zero is uncovered in CommRing.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field sub is uncovered in CommRing.
                      It might be better to declare an instance of Sub first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field one is uncovered in CommRing.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field nsmul is uncovered in CommRing.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field zsmul is uncovered in CommRing.
                      It might be better to declare an instance of Ring first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field npow is uncovered in CommRing.
                      It might be better to declare an instance of Semiring first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field inv is uncovered in Field.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field div is uncovered in Field.
                      It might be better to declare an instance of Div first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field toFun is uncovered in Algebra.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.RatFunc, data field smul is uncovered in Algebra.
                      It might be better to declare an instance of SMul first.
[3074/4301] Building Mathlib.Analysis.LocallyConvex.Polar
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Field.UnitBall, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Field.UnitBall, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[3075/4301] Building Mathlib.Analysis.Normed.Field.InfiniteSum
[3076/4301] Building Mathlib.Analysis.BoxIntegral.Partition.SubboxInduction
[3077/4301] Building Mathlib.Tactic.ReduceModChar
[3078/4301] Building Mathlib.RingTheory.Adjoin.FG
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.SemiNormedGroupCat, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.SemiNormedGroupCat, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.SemiNormedGroupCat, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.SemiNormedGroupCat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.SemiNormedGroupCat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.SemiNormedGroupCat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.SemiNormedGroupCat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3079/4301] Building Mathlib.Topology.MetricSpace.PiNat
[3080/4301] Building Mathlib.Topology.MetricSpace.Thickening
[3081/4301] Building Mathlib.Data.Complex.Cardinality
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber, data field mul is uncovered in Monoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber, data field one is uncovered in Monoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber, data field toFun is uncovered in CircleDeg1Lift.
                      It might be better to declare an instance of OrderHom first.
[Elab.StructInst.coveredFields] In Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber, data field sup is uncovered in Lattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber, data field le is uncovered in Lattice.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber, data field inf is uncovered in Lattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber, data field toFun is uncovered in CircleDeg1Lift.
                      It might be better to declare an instance of OrderHom first.
[Elab.StructInst.coveredFields] In Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber, data field toFun is uncovered in CircleDeg1Lift.
                      It might be better to declare an instance of OrderHom first.
[3082/4301] Building Mathlib.GroupTheory.SpecificGroups.Dihedral
[3083/4301] Building Mathlib.NumberTheory.LucasPrimality
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Padics.PadicNumbers, data field toFun is uncovered in AbsoluteValue.
                      It might be better to declare an instance of MulHom first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Padics.PadicNumbers, data field dist is uncovered in MetricSpace.
                      It might be better to declare an instance of Dist first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Padics.PadicNumbers, data field norm is uncovered in NormedField.
                      It might be better to declare an instance of Norm first.
[3084/4301] Building Mathlib.AlgebraicTopology.FundamentalGroupoid.FundamentalGroup
[3085/4301] Building Mathlib.AlgebraicTopology.FundamentalGroupoid.PUnit
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.EllipticCurve.Weierstrass, data field one is uncovered in Group.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.EllipticCurve.Weierstrass, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.EllipticCurve.Weierstrass, data field mul is uncovered in Group.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.EllipticCurve.Weierstrass, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.EllipticCurve.Weierstrass, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.EllipticCurve.Weierstrass, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[3086/4301] Building Mathlib.Analysis.NormedSpace.Basic
[3087/4301] Building Mathlib.Analysis.NormedSpace.ContinuousLinearMap
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Polynomial.Quotient, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Polynomial.Quotient, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Polynomial.Quotient, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[3088/4301] Building Mathlib.Topology.MetricSpace.Closeds
[3089/4301] Building Mathlib.CategoryTheory.Abelian.Ext
[3090/4301] Building Mathlib.GroupTheory.GroupAction.Period
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.SpecificGroups.Dihedral, data field mul is uncovered in Group.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.SpecificGroups.Dihedral, data field one is uncovered in Group.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.SpecificGroups.Dihedral, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[3091/4301] Building Mathlib.Topology.ContinuousFunction.FunctionalCalculus
[3092/4301] Building Mathlib.NumberTheory.SmoothNumbers
[3093/4301] Building Mathlib.NumberTheory.MaricaSchoenheim
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.Determinant, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[3094/4301] Building Mathlib.Algebra.Homology.ShortComplex.Ab
[3095/4301] Building Mathlib.CategoryTheory.Abelian.Projective
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.Ext, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Abelian.Ext, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3096/4301] Building Mathlib.CategoryTheory.Abelian.Injective
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Closeds, data field edist is uncovered in EMetricSpace.
                      It might be better to declare an instance of EDist first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Closeds, data field edist is uncovered in EMetricSpace.
                      It might be better to declare an instance of EDist first.
[3097/4301] Building Mathlib.FieldTheory.Laurent
[3098/4301] Building Mathlib.AlgebraicTopology.FundamentalGroupoid.Product
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.PiNat, data field toUniformSpace is uncovered in MetricSpace.
                      It might be better to declare an instance of PseudoMetricSpace first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.PiNat, data field toUniformSpace is uncovered in MetricSpace.
                      It might be better to declare an instance of PseudoMetricSpace first.
[3099/4301] Building Mathlib.Algebra.Category.GroupCat.Images
[3100/4301] Building Mathlib.MeasureTheory.Measure.MeasureSpaceDef
[3101/4301] Building Mathlib.Analysis.Asymptotics.Asymptotics
[3102/4301] Building Mathlib.Topology.ContinuousFunction.Polynomial
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.ContinuousLinearMap, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.ContinuousLinearMap, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3103/4301] Building Mathlib.NumberTheory.Harmonic.Int
[3104/4301] Building Mathlib.RingTheory.Adjoin.Tower
[3105/4301] Building Mathlib.AlgebraicGeometry.EllipticCurve.Affine
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.GroupCat.Images, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[3106/4301] Building Mathlib.GroupTheory.SpecificGroups.Cyclic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Laurent, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[3107/4301] Building Mathlib.RingTheory.JacobsonIdeal
[3108/4301] Building Mathlib.Analysis.BoxIntegral.Partition.Filter
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.FundamentalGroupoid.Product, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.FundamentalGroupoid.Product, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.FundamentalGroupoid.Product, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.FundamentalGroupoid.Product, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3109/4301] Building Mathlib.NumberTheory.ArithmeticFunction
[3110/4301] Building Mathlib.Analysis.Normed.Group.SemiNormedGroupCat.Completion
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Polynomial, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Polynomial, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[3111/4301] Building Mathlib.LinearAlgebra.Matrix.AbsoluteValue
[3112/4301] Building Mathlib.LinearAlgebra.Matrix.Reindex
[3113/4301] Building Mathlib.Topology.MetricSpace.CantorScheme
[3114/4301] Building Mathlib.Analysis.Normed.Group.Pointwise
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.SemiNormedGroupCat.Completion, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.SemiNormedGroupCat.Completion, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3115/4301] Building Mathlib.LinearAlgebra.Matrix.Polynomial
[3116/4301] Building Mathlib.LinearAlgebra.CrossProduct
[3117/4301] Building Mathlib.Analysis.NormedSpace.BallAction
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.Reindex, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[3118/4301] Building Mathlib.Topology.Germ
[3119/4301] Building Mathlib.Analysis.NormedSpace.SphereNormEquiv
[3120/4301] Building Mathlib.Analysis.NormedSpace.ENorm
[3121/4301] Building Mathlib.NumberTheory.PrimeCounting
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Germ, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[3122/4301] Building Mathlib.LinearAlgebra.Matrix.MvPolynomial
[3123/4301] Building Mathlib.Topology.Instances.AddCircle
[3124/4301] Building Mathlib.Analysis.Calculus.TangentCone
[3125/4301] Building Mathlib.Analysis.LocallyConvex.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.CrossProduct, data field bracket is uncovered in LieRing.
                      It might be better to declare an instance of Bracket first.
[3126/4301] Building Mathlib.Analysis.Convex.Body
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.ENorm, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.ENorm, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.ENorm, data field le is uncovered in SemilatticeSup.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.ENorm, data field lt is uncovered in SemilatticeSup.
                      It might be better to declare an instance of LT first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.ENorm, data field sup is uncovered in SemilatticeSup.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.ENorm, data field edist is uncovered in EMetricSpace.
                      It might be better to declare an instance of EDist first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.ENorm, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.ENorm, data field norm is uncovered in NormedAddCommGroup.
                      It might be better to declare an instance of Norm first.
[3127/4301] Building Mathlib.Analysis.NormedSpace.ConformalLinearMap
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.SphereNormEquiv, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.SphereNormEquiv, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[3128/4301] Building Mathlib.Analysis.NormedSpace.Real
[3129/4301] Building Mathlib.Topology.Homotopy.HomotopyGroup
[3130/4301] Building Mathlib.GroupTheory.CommutingProbability
[3131/4301] Building Mathlib.Analysis.NormedSpace.Span
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.BallAction, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.BallAction, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.BallAction, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.BallAction, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.BallAction, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[3132/4301] Building Mathlib.AlgebraicTopology.FundamentalGroupoid.InducedMaps
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Convex.Body, data field dist is uncovered in PseudoMetricSpace.
                      It might be better to declare an instance of Dist first.
[3133/4301] Building Mathlib.Analysis.NormedSpace.AffineIsometry
[3134/4301] Building Mathlib.Algebra.Homology.LocalCohomology
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.ArithmeticFunction, data field natCast is uncovered in AddMonoidWithOne.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.ArithmeticFunction, data field zsmul is uncovered in AddGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.ArithmeticFunction, data field one is uncovered in Monoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.ArithmeticFunction, data field mul is uncovered in Monoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.ArithmeticFunction, data field zsmul is uncovered in CommRing.
                      It might be better to declare an instance of Ring first.
[3135/4301] Building Mathlib.LinearAlgebra.AdicCompletion
[3136/4301] Building Mathlib.RingTheory.Nakayama
[3137/4301] Building Mathlib.MeasureTheory.Function.AEMeasurableSequence
[3138/4301] Building Mathlib.MeasureTheory.Measure.AEDisjoint
[3139/4301] Building Mathlib.Analysis.NormedSpace.AddTorsor
[3140/4301] Building Mathlib.MeasureTheory.Tactic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.LocalCohomology, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.LocalCohomology, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.LocalCohomology, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.LocalCohomology, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3141/4301] Building Mathlib.GroupTheory.SpecificGroups.Quaternion
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.FundamentalGroupoid.InducedMaps, data field toFun is uncovered in Path.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicTopology.FundamentalGroupoid.InducedMaps, data field toFun is uncovered in Path.
                      It might be better to declare an instance of ContinuousMap first.
[3142/4301] Building Mathlib.Topology.MetricSpace.Polish
[3143/4301] Building Mathlib.Analysis.Normed.Group.Quotient
[3144/4301] Building Mathlib.Algebra.Homology.ShortComplex.ConcreteCategory
[3145/4301] Building Mathlib.RingTheory.Ideal.LocalRing
[3146/4301] Building Mathlib.LinearAlgebra.Matrix.Transvection
[3147/4301] Building Mathlib.LinearAlgebra.Matrix.Basis
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.EllipticCurve.Affine, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[3148/4301] Building Mathlib.GroupTheory.PGroup
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.SpecificGroups.Quaternion, data field mul is uncovered in Group.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.SpecificGroups.Quaternion, data field one is uncovered in Group.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.SpecificGroups.Quaternion, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.SpecificGroups.Quaternion, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.SpecificGroups.Quaternion, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[3149/4301] Building Mathlib.RingTheory.IntegralDomain
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.AddTorsor, data field toFun is uncovered in DilationEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.AddTorsor, data field invFun is uncovered in DilationEquiv.
                      It might be better to declare an instance of Equiv first.
[3150/4301] Building Mathlib.GroupTheory.SpecificGroups.KleinFour
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.AffineIsometry, data field one is uncovered in Monoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.AffineIsometry, data field mul is uncovered in Monoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.AffineIsometry, data field mul is uncovered in Group.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.AffineIsometry, data field one is uncovered in Group.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.AffineIsometry, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[3151/4301] Building Mathlib.RingTheory.FiniteType
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.LocalRing, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.LocalRing, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.LocalRing, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.LocalRing, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[3152/4301] Building Mathlib.Analysis.NormedSpace.Ray
[3153/4301] Building Mathlib.Analysis.NormedSpace.Star.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.Basis, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[3154/4301] Building Mathlib.Analysis.NormedSpace.Pointwise
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.HomotopyGroup, data field toFun is uncovered in Path.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.HomotopyGroup, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.HomotopyGroup, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.HomotopyGroup, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.HomotopyGroup, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.HomotopyGroup, data field toFun is uncovered in Path.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.HomotopyGroup, data field toFun is uncovered in ContinuousMap.HomotopyWith.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Homotopy.HomotopyGroup, data field toFun is uncovered in ContinuousMap.HomotopyWith.
                      It might be better to declare an instance of ContinuousMap first.
[3155/4301] Building Mathlib.Analysis.LocallyConvex.BalancedCoreHull
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.IntegralDomain, data field inv is uncovered in GroupWithZero.
                      It might be better to declare an instance of Inv first.
[3156/4301] Building Mathlib.Analysis.Seminorm
[3157/4301] Building Mathlib.LinearAlgebra.Matrix.Adjugate
[3158/4301] Building Mathlib.Analysis.Asymptotics.SpecificAsymptotics
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Quotient, data field dist is uncovered in SeminormedAddCommGroup.
                      It might be better to declare an instance of Dist first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Normed.Group.Quotient, data field toUniformSpace is uncovered in SeminormedAddCommGroup.
                      It might be better to declare an instance of PseudoMetricSpace first.
[3159/4301] Building Mathlib.Order.Filter.ZeroAndBoundedAtFilter
[3160/4301] Building Mathlib.Analysis.Asymptotics.Theta
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.FiniteType, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[3161/4301] Building Mathlib.MeasureTheory.Measure.NullMeasurable
[3162/4301] Building Mathlib.Analysis.Normed.Order.UpperLower
[3163/4301] Building Mathlib.Algebra.Homology.ConcreteCategory
[3164/4301] Building Mathlib.Analysis.NormedSpace.MazurUlam
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.ZeroAndBoundedAtFilter, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.ZeroAndBoundedAtFilter, data field carrier is uncovered in AddSubmonoid.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Filter.ZeroAndBoundedAtFilter, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[3165/4301] Building Mathlib.Data.Polynomial.Expand
[3166/4301] Building Mathlib.Algebra.Category.Ring.Instances
[3167/4301] Building Mathlib.RingTheory.MvPowerSeries.Inverse
[3168/4301] Building Mathlib.RingTheory.Polynomial.Dickson
[3169/4301] Building Mathlib.Algebra.Category.GroupCat.Injective
[3170/4301] Building Mathlib.Analysis.SpecificLimits.Normed
[3171/4301] Building Mathlib.Analysis.Asymptotics.SuperpolynomialDecay
[3172/4301] Building Mathlib.Topology.MetricSpace.Perfect
[3173/4301] Building Mathlib.Algebra.Homology.ShortComplex.ModuleCat
[3174/4301] Building Mathlib.RingTheory.Localization.AtPrime
[3175/4301] Building Mathlib.AlgebraicGeometry.EllipticCurve.Projective
[3176/4301] Building Mathlib.AlgebraicGeometry.EllipticCurve.Jacobian
[3177/4301] Building Mathlib.RingTheory.RootsOfUnity.Basic
[3178/4301] Building Mathlib.AlgebraicTopology.FundamentalGroupoid.SimplyConnected
[3179/4301] Building Mathlib.RingTheory.ReesAlgebra
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Localization.AtPrime, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[3180/4301] Building Mathlib.Algebra.CharP.LocalRing
[3181/4301] Building Mathlib.Analysis.NormedSpace.Extr
[3182/4301] Building Mathlib.Analysis.Normed.Group.SemiNormedGroupCat.Kernels
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Homology.ShortComplex.ModuleCat, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3183/4301] Building Mathlib.Analysis.Normed.Group.AddCircle
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.ReesAlgebra, data field carrier is uncovered in Subalgebra.
                      It might be better to declare an instance of Subsemigroup first.
[3184/4301] Building Mathlib.RingTheory.Localization.InvSubmonoid
[3185/4301] Building Mathlib.GroupTheory.Torsion
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AdicCompletion, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AdicCompletion, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.AdicCompletion, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3186/4301] Building Mathlib.RingTheory.FinitePresentation
[3187/4301] Building Mathlib.Data.IsROrC.Basic
[3188/4301] Building Mathlib.Analysis.Asymptotics.AsymptoticEquivalent
[3189/4301] Building Mathlib.GroupTheory.Sylow
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Torsion, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Torsion, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Torsion, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[3190/4301] Building Mathlib.Topology.UrysohnsLemma
[3191/4301] Building Mathlib.Analysis.NormedSpace.HomeomorphBall
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.RootsOfUnity.Basic, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.RootsOfUnity.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.RootsOfUnity.Basic, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.RootsOfUnity.Basic, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.RootsOfUnity.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.RootsOfUnity.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[3192/4301] Building Mathlib.RingTheory.PowerSeries.Inverse
[3193/4301] Building Mathlib.LinearAlgebra.Matrix.Nondegenerate
[3194/4301] Building Mathlib.MeasureTheory.Measure.MeasureSpace
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.FinitePresentation, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[3195/4301] Building Mathlib.Algebra.Category.ModuleCat.Biproducts
[3196/4301] Building Mathlib.Algebra.Category.ModuleCat.Free
[3197/4301] Building Mathlib.RingTheory.Valuation.ExtendToLocalization
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.HomeomorphBall, data field toFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.HomeomorphBall, data field invFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.HomeomorphBall, data field source is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.HomeomorphBall, data field target is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[3198/4301] Building Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization
[3199/4301] Building Mathlib.RingTheory.Ideal.MinimalPrime
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.Biproducts, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3200/4301] Building Mathlib.Algebra.Module.CharacterModule
[3201/4301] Building Mathlib.RingTheory.DiscreteValuationRing.Basic
[3202/4301] Building Mathlib.RingTheory.Henselian
[3203/4301] Building Mathlib.RingTheory.Localization.LocalizationLocalization
[3204/4301] Building Mathlib.Analysis.Normed.Group.ControlledClosure
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Sylow, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Sylow, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[3205/4301] Building Mathlib.Analysis.NormedSpace.Units
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Seminorm, data field toFun is uncovered in Seminorm.
                      It might be better to declare an instance of AddGroupSeminorm first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Seminorm, data field toFun is uncovered in Seminorm.
                      It might be better to declare an instance of AddGroupSeminorm first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Seminorm, data field toFun is uncovered in Seminorm.
                      It might be better to declare an instance of AddGroupSeminorm first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Seminorm, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Seminorm, data field toFun is uncovered in Seminorm.
                      It might be better to declare an instance of AddGroupSeminorm first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Seminorm, data field toFun is uncovered in Seminorm.
                      It might be better to declare an instance of AddGroupSeminorm first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Seminorm, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Seminorm, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Seminorm, data field toFun is uncovered in Seminorm.
                      It might be better to declare an instance of AddGroupSeminorm first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Seminorm, data field inf is uncovered in Lattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Seminorm, data field toFun is uncovered in Seminorm.
                      It might be better to declare an instance of AddGroupSeminorm first.
[3206/4301] Building Mathlib.GroupTheory.Order.Min
[3207/4301] Building Mathlib.Algebra.CharP.MixedCharZero
[3208/4301] Building Mathlib.LinearAlgebra.Matrix.SpecialLinearGroup
[3209/4301] Building Mathlib.Topology.PartitionOfUnity
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.IsROrC.Basic, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.IsROrC.Basic, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.IsROrC.Basic, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.IsROrC.Basic, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[3210/4301] Building Mathlib.Topology.Algebra.Module.Cardinality
[3211/4301] Building Mathlib.Topology.CompletelyRegular
[3212/4301] Building Mathlib.NumberTheory.EulerProduct.Basic
[3213/4301] Building Mathlib.RingTheory.Filtration
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.CharP.MixedCharZero, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[3214/4301] Building Mathlib.Analysis.SpecialFunctions.Polynomials
[3215/4301] Building Mathlib.Topology.Category.CompHaus.Basic
[3216/4301] Building Mathlib.RingTheory.PowerSeries.Derivative
[3217/4301] Building Mathlib.Algebra.Module.Torsion
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization, data field one is uncovered in CommMonoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization, data field mul is uncovered in CommMonoid.
                      It might be better to declare an instance of Mul first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization, data field smul is uncovered in Algebra.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization, data field toFun is uncovered in Algebra.
                      It might be better to declare an instance of OneHom first.
[3218/4301] Building Mathlib.GroupTheory.Transfer
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.CharacterModule, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.CharacterModule, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.CharacterModule, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.CharacterModule, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3219/4301] Building Mathlib.NumberTheory.Padics.PadicIntegers
[3220/4301] Building Mathlib.NumberTheory.Bernoulli
[3221/4301] Building Mathlib.Analysis.SpecificLimits.IsROrC
stdout:
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.MeasureSpace, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.MeasureSpace, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.MeasureSpace, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.MeasureSpace, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3222/4301] Building Mathlib.Analysis.NormedSpace.RieszLemma
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.CompHaus.Basic, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.CompHaus.Basic, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[3223/4301] Building Mathlib.Combinatorics.SetFamily.CauchyDavenport
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.PowerSeries.Derivative, data field toFun is uncovered in Derivation.
                      It might be better to declare an instance of AddHom first.
[3224/4301] Building Mathlib.Analysis.Normed.Group.Tannery
[3225/4301] Building Mathlib.Dynamics.BirkhoffSum.NormedSpace
[3226/4301] Building Mathlib.RingTheory.Localization.AsSubring
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Filtration, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[3227/4301] Building Mathlib.GroupTheory.Nilpotent
[3228/4301] Building Mathlib.RingTheory.Valuation.ValuationRing
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Transfer, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Transfer, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[3229/4301] Building Mathlib.Topology.ContinuousFunction.Units
[3230/4301] Building Mathlib.Analysis.LocallyConvex.Bounded
[3231/4301] Building Mathlib.MeasureTheory.Covering.VitaliFamily
[3232/4301] Building Mathlib.MeasureTheory.Measure.Restrict
[3233/4301] Building Mathlib.Analysis.Convex.PartitionOfUnity
[3234/4301] Building Mathlib.RingTheory.Flat.Basic
[3235/4301] Building Mathlib.Algebra.Category.GroupCat.EnoughInjectives
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Padics.PadicIntegers, data field carrier is uncovered in Subring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Padics.PadicIntegers, data field norm is uncovered in NormedCommRing.
                      It might be better to declare an instance of Norm first.
[3236/4301] Building Mathlib.Order.Category.Frm
[3237/4301] Building Mathlib.GroupTheory.SchurZassenhaus
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.Nilpotent, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[3238/4301] Building Mathlib.GroupTheory.Schreier
[3239/4301] Building Mathlib.Topology.Category.CompHaus.Projective
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.ValuationRing, data field toFun is uncovered in Valuation.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.ValuationRing, data field toFun is uncovered in NonUnitalRingHom.
                      It might be better to declare an instance of MulHom first.
[3240/4301] Building Mathlib.Topology.Category.Profinite.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Frm, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Frm, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Frm, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Order.Category.Frm, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3241/4301] Building Mathlib.Topology.Category.CompHaus.Limits
[3242/4301] Building Mathlib.Topology.MetricSpace.PartitionOfUnity
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.SpecialLinearGroup, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.SpecialLinearGroup, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.SpecialLinearGroup, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.SpecialLinearGroup, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[3243/4301] Building Mathlib.NumberTheory.Padics.RingHoms
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Torsion, data field carrier is uncovered in AddSubmonoid.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Torsion, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Torsion, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[3244/4301] Building Mathlib.Topology.Category.Locale
[3245/4301] Building Mathlib.Analysis.Convex.Gauge
[3246/4301] Building Mathlib.Topology.Algebra.UniformConvergence
[3247/4301] Building Mathlib.Analysis.LocallyConvex.ContinuousOfBounded
[3248/4301] Building Mathlib.NumberTheory.Padics.Hensel
[3249/4301] Building Mathlib.NumberTheory.BernoulliPolynomials
[3250/4301] Building Mathlib.NumberTheory.ModularForms.CongruenceSubgroups
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.SchurZassenhaus, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.SchurZassenhaus, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[3251/4301] Building Mathlib.LinearAlgebra.Matrix.ProjectiveSpecialLinearGroup
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.Profinite.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.Profinite.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3252/4301] Building Mathlib.LinearAlgebra.Dimension.Constructions
[3253/4301] Building Mathlib.MeasureTheory.Measure.MutuallySingular
[3254/4301] Building Mathlib.MeasureTheory.Measure.Typeclasses
[3255/4301] Building Mathlib.Topology.Order.Category.FrameAdjunction
[3256/4301] Building Mathlib.Topology.Category.CompHaus.EffectiveEpi
[3257/4301] Building Mathlib.LinearAlgebra.Dimension.Finite
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.ModularForms.CongruenceSubgroups, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.ModularForms.CongruenceSubgroups, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[3258/4301] Building Mathlib.Topology.Category.Stonean.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.UniformConvergence, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3259/4301] Building Mathlib.Topology.Category.Profinite.Product
[3260/4301] Building Mathlib.Topology.Category.Compactum
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Padics.RingHoms, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Padics.RingHoms, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[3261/4301] Building Mathlib.Topology.Category.Profinite.AsLimit
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.Stonean.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.Stonean.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3262/4301] Building Mathlib.Topology.Category.LightProfinite.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Order.Category.FrameAdjunction, data field toFun is uncovered in FrameHom.
                      It might be better to declare an instance of InfHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Order.Category.FrameAdjunction, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Order.Category.FrameAdjunction, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Order.Category.FrameAdjunction, data field toFun is uncovered in FrameHom.
                      It might be better to declare an instance of InfHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Order.Category.FrameAdjunction, data field toFun is uncovered in FrameHom.
                      It might be better to declare an instance of InfHom first.
[3263/4301] Building Mathlib.RingTheory.Flat.Stability
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.Profinite.Product, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.Profinite.Product, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3264/4301] Building Mathlib.Topology.Category.Profinite.Projective
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.Profinite.AsLimit, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.Profinite.AsLimit, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3265/4301] Building Mathlib.Topology.Category.Profinite.Limits
[3266/4301] Building Mathlib.Topology.Algebra.Module.StrongTopology
[3267/4301] Building Mathlib.Topology.Algebra.Equicontinuity
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.Compactum, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.Compactum, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3268/4301] Building Mathlib.Condensed.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.LightProfinite.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.LightProfinite.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.LightProfinite.Basic, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.LightProfinite.Basic, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3269/4301] Building Mathlib.Topology.Category.Profinite.CofilteredLimit
[3270/4301] Building Mathlib.Topology.Category.Stonean.Limits
[3271/4301] Building Mathlib.MeasureTheory.Constructions.Projective
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Equicontinuity, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Equicontinuity, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[3272/4301] Building Mathlib.Probability.ConditionalProbability
[3273/4301] Building Mathlib.MeasureTheory.Decomposition.UnsignedHahn
[3274/4301] Building Mathlib.MeasureTheory.Measure.Sub
[3275/4301] Building Mathlib.MeasureTheory.Measure.Trim
[3276/4301] Building Mathlib.Topology.Category.Stonean.Adjunctions
[3277/4301] Building Mathlib.MeasureTheory.Measure.Dirac
[3278/4301] Building Mathlib.Condensed.Abelian
[3279/4301] Building Mathlib.Condensed.Discrete
[3280/4301] Building Mathlib.Topology.Category.Profinite.EffectiveEpi
[3281/4301] Building Mathlib.Condensed.Functors
[3282/4301] Building Mathlib.RingTheory.Flat.Algebra
[3283/4301] Building Mathlib.Analysis.LocallyConvex.WithSeminorms
[3284/4301] Building Mathlib.LinearAlgebra.Dimension.DivisionRing
[3285/4301] Building Mathlib.Algebra.LinearRecurrence
[3286/4301] Building Mathlib.Topology.Category.Profinite.Nobeling
[3287/4301] Building Mathlib.FieldTheory.Finiteness
[3288/4301] Building Mathlib.MeasureTheory.Measure.AEMeasurable
[3289/4301] Building Mathlib.Condensed.Adjunctions
[3290/4301] Building Mathlib.Condensed.Limits
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Condensed.Functors, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Condensed.Functors, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3291/4301] Building Mathlib.Topology.Category.Stonean.EffectiveEpi
[3292/4301] Building Mathlib.Probability.ProbabilityMassFunction.Basic
[3293/4301] Building Mathlib.MeasureTheory.Measure.Count
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.StrongTopology, data field toFun is uncovered in ContinuousLinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.StrongTopology, data field toFun is uncovered in ContinuousLinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.StrongTopology, data field toFun is uncovered in ContinuousLinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.StrongTopology, data field invFun is uncovered in ContinuousLinearEquiv.
                      It might be better to declare an instance of LinearEquiv first.
[3295/4301] Building Mathlib.Analysis.NormedSpace.CompactOperator
[3295/4301] Building Mathlib.Analysis.LocallyConvex.StrongTopology
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.LinearRecurrence, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.LinearRecurrence, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.LinearRecurrence, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3296/4301] Building Mathlib.Condensed.Solid
[3297/4301] Building Mathlib.Condensed.Equivalence
[3298/4301] Building Mathlib.MeasureTheory.Order.Lattice
[3299/4301] Building Mathlib.MeasureTheory.Group.Arithmetic
[3300/4301] Building Mathlib.Dynamics.Ergodic.MeasurePreserving
[3301/4301] Building Mathlib.Probability.ProbabilityMassFunction.Monad
[3302/4301] Building Mathlib.Probability.CondCount
[3303/4301] Building Mathlib.Condensed.Explicit
[3305/4301] Building Mathlib.Dynamics.Ergodic.Ergodic
[3306/4301] Building Mathlib.Condensed.TopComparison
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.CompactOperator, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[3308/4301] Building Mathlib.LinearAlgebra.FiniteDimensional
[3308/4301] Building Mathlib.LinearAlgebra.Dimension.LinearMap
[3309/4301] Building Mathlib.Analysis.NormedSpace.Connected
[3309/4301] Building Mathlib.LinearAlgebra.Dimension.Localization
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Probability.ProbabilityMassFunction.Monad, data field pure is uncovered in Monad.
                      It might be better to declare an instance of Pure first.
[Elab.StructInst.coveredFields] In Mathlib.Probability.ProbabilityMassFunction.Monad, data field bind is uncovered in Monad.
                      It might be better to declare an instance of Bind first.
[3310/4301] Building Mathlib.Probability.ProbabilityMassFunction.Constructions
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Condensed.TopComparison, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Condensed.TopComparison, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3313/4301] Building Mathlib.MeasureTheory.Group.Pointwise
[3313/4301] Building Mathlib.MeasureTheory.Order.Group.Lattice
[3313/4301] Building Mathlib.MeasureTheory.Group.MeasurableEquiv
[3314/4301] Building Mathlib.MeasureTheory.Constructions.BorelSpace.Basic
[3315/4301] Building Mathlib.LinearAlgebra.Matrix.Diagonal
[3319/4301] Building Mathlib.Probability.ProbabilityMassFunction.Binomial
[3323/4301] Building Mathlib.Analysis.LocallyConvex.WeakDual
[3323/4301] Building Mathlib.Analysis.LocallyConvex.Barrelled
[3323/4301] Building Mathlib.Analysis.LocallyConvex.AbsConvex
[3323/4301] Building Mathlib.Analysis.NormedSpace.OperatorNorm.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.Profinite.Nobeling, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.Profinite.Nobeling, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Category.Profinite.Nobeling, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.FiniteDimensional, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.FiniteDimensional, data field inv is uncovered in DivisionRing.
                      It might be better to declare an instance of Inv first.
[3328/4301] Building Mathlib.RingTheory.SimpleModule
[3328/4301] Building Mathlib.LinearAlgebra.Projectivization.Basic
[3328/4301] Building Mathlib.LinearAlgebra.Eigenspace.Basic
[3328/4301] Building Mathlib.LinearAlgebra.AffineSpace.FiniteDimensional
[3328/4301] Building Mathlib.RingTheory.Ideal.Cotangent
[3328/4301] Building Mathlib.LinearAlgebra.Matrix.NonsingularInverse
[3328/4301] Building Mathlib.RingTheory.TensorProduct
[3329/4301] Building Mathlib.MeasureTheory.Measure.OpenPos
[3329/4301] Building Mathlib.MeasureTheory.Constructions.Polish
[3330/4301] Building Mathlib.MeasureTheory.Function.Floor
[3331/4301] Building Mathlib.MeasureTheory.Function.AEMeasurableOrder
[3332/4301] Building Mathlib.MeasureTheory.Measure.Regular
[3333/4301] Building Mathlib.MeasureTheory.Function.SimpleFunc
[3334/4301] Building Mathlib.MeasureTheory.Measure.Stieltjes
[3335/4301] Building Mathlib.MeasureTheory.Function.EssSup
[3336/4301] Building Mathlib.Dynamics.Ergodic.Conservative
[3337/4301] Building Mathlib.MeasureTheory.Covering.Vitali
[3338/4301] Building Mathlib.MeasureTheory.Constructions.BorelSpace.Metrizable
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.SimpleModule, data field inv is uncovered in DivisionRing.
                      It might be better to declare an instance of Inv first.
[3339/4301] Building Mathlib.LinearAlgebra.Projectivization.Subspace
[3340/4301] Building Mathlib.LinearAlgebra.Projectivization.Independence
[3341/4301] Building Mathlib.LinearAlgebra.AffineSpace.Matrix
[3342/4301] Building Mathlib.Data.Matrix.ColumnRowPartitioned
[3343/4301] Building Mathlib.LinearAlgebra.SymplecticGroup
[3344/4301] Building Mathlib.Analysis.NormedSpace.Extend
[3345/4301] Building Mathlib.Analysis.NormedSpace.OperatorNorm.NNNorm
[3346/4301] Building Mathlib.LinearAlgebra.Determinant
[3347/4301] Building Mathlib.LinearAlgebra.Matrix.Block
[3348/4301] Building Mathlib.Topology.Instances.Matrix
[3349/4301] Building Mathlib.LinearAlgebra.UnitaryGroup
[3350/4301] Building Mathlib.LinearAlgebra.Matrix.ZPow
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.SymplecticGroup, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[3351/4301] Building Mathlib.RepresentationTheory.Maschke
stdout:
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.SimpleFunc, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.SimpleFunc, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.SimpleFunc, data field inf is uncovered in SemilatticeInf.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.SimpleFunc, data field sup is uncovered in SemilatticeSup.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.SimpleFunc, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.SimpleFunc, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3352/4301] Building Mathlib.Analysis.NormedSpace.IsROrC
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Extend, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3353/4301] Building Mathlib.Analysis.NormedSpace.OperatorNorm.Asymptotics
[3354/4301] Building Mathlib.LinearAlgebra.Matrix.GeneralLinearGroup
[3355/4301] Building Mathlib.Analysis.Convex.Between
[3356/4301] Building Mathlib.MeasureTheory.Group.Action
[3357/4301] Building Mathlib.RingTheory.Artinian
[3358/4301] Building Mathlib.Algebra.Category.ModuleCat.Simple
[3359/4301] Building Mathlib.Topology.Algebra.Module.Simple
[3360/4301] Building Mathlib.Analysis.NormedSpace.Banach
[3361/4301] Building Mathlib.Topology.ContinuousFunction.Bounded
[3362/4301] Building Mathlib.Analysis.NormedSpace.OperatorNorm.Bilinear
[3363/4301] Building Mathlib.MeasureTheory.Measure.Content
[3364/4301] Building Mathlib.Analysis.Calculus.FDeriv.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.GeneralLinearGroup, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.GeneralLinearGroup, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[3365/4301] Building Mathlib.MeasureTheory.Function.SimpleFuncDense
[3366/4301] Building Mathlib.MeasureTheory.Integral.Lebesgue
[3367/4301] Building Mathlib.LinearAlgebra.Vandermonde
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Determinant, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Determinant, data field toFun is uncovered in AlternatingMap.
                      It might be better to declare an instance of MultilinearMap first.
[3368/4301] Building Mathlib.LinearAlgebra.Matrix.Gershgorin
[3369/4301] Building Mathlib.Topology.Algebra.Module.Determinant
[3370/4301] Building Mathlib.LinearAlgebra.Orientation
[3371/4301] Building Mathlib.Data.Matrix.Rank
[3372/4301] Building Mathlib.LinearAlgebra.FreeModule.Determinant
[3373/4301] Building Mathlib.LinearAlgebra.Matrix.ToLinearEquiv
[3374/4301] Building Mathlib.Algebra.Lie.Submodule
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.TensorProduct, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.TensorProduct, data field natCast is uncovered in AddCommMonoidWithOne.
                      It might be better to declare an instance of NatCast first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.TensorProduct, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.TensorProduct, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.TensorProduct, data field intCast is uncovered in AddCommGroupWithOne.
                      It might be better to declare an instance of IntCast first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.TensorProduct, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.TensorProduct, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.TensorProduct, data field smul is uncovered in Module.
                      It might be better to declare an instance of SMul first.
[3375/4301] Building Mathlib.RingTheory.Localization.Cardinality
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Bounded, data field toFun is uncovered in BoundedContinuousFunction.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Bounded, data field toFun is uncovered in BoundedContinuousFunction.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Bounded, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Bounded, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Bounded, data field toFun is uncovered in ContinuousLinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Bounded, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Bounded, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Bounded, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Bounded, data field star is uncovered in StarAddMonoid.
                      It might be better to declare an instance of Star first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Bounded, data field inf is uncovered in SemilatticeInf.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Bounded, data field toFun is uncovered in BoundedContinuousFunction.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Bounded, data field sup is uncovered in SemilatticeSup.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Bounded, data field toFun is uncovered in BoundedContinuousFunction.
                      It might be better to declare an instance of ContinuousMap first.
[3376/4301] Building Mathlib.Data.Nat.Factorial.SuperFactorial
[3377/4301] Building Mathlib.LinearAlgebra.Lagrange
[3378/4301] Building Mathlib.Data.Matrix.Kronecker
[3379/4301] Building Mathlib.Algebra.Category.AlgebraCat.Monoidal
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.ToLinearEquiv, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[3380/4301] Building Mathlib.RingTheory.MatrixAlgebra
[3381/4301] Building Mathlib.RingTheory.Bialgebra
[3382/4301] Building Mathlib.Algebra.Category.ModuleCat.ChangeOfRings
[3383/4301] Building Mathlib.LinearAlgebra.TensorProduct.RightExactness
[3384/4301] Building Mathlib.Algebra.Module.Bimodule
[3385/4301] Building Mathlib.Topology.UrysohnsBounded
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Lagrange, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Lagrange, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[3386/4301] Building Mathlib.Topology.MetricSpace.GromovHausdorffRealized
[3387/4301] Building Mathlib.LinearAlgebra.TensorProduct.Opposite
[3388/4301] Building Mathlib.RingTheory.IsTensorProduct
[3389/4301] Building Mathlib.Topology.Metrizable.Urysohn
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Bimodule, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Bimodule, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Module.Bimodule, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[3390/4301] Building Mathlib.Topology.MetricSpace.ThickenedIndicator
[3391/4301] Building Mathlib.MeasureTheory.Integral.RieszMarkovKakutani
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.OperatorNorm.Bilinear, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.OperatorNorm.Bilinear, data field toFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.OperatorNorm.Bilinear, data field invFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of LinearEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.OperatorNorm.Bilinear, data field toFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.OperatorNorm.Bilinear, data field invFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of LinearEquiv first.
[3392/4301] Building Mathlib.Topology.ContinuousFunction.ZeroAtInfty
[3393/4301] Building Mathlib.LinearAlgebra.TensorProduct.Graded.External
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.ThickenedIndicator, data field toFun is uncovered in BoundedContinuousFunction.
                      It might be better to declare an instance of ContinuousMap first.
[3394/4301] Building Mathlib.Analysis.Calculus.FDeriv.RestrictScalars
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.GromovHausdorffRealized, data field dist is uncovered in PseudoMetricSpace.
                      It might be better to declare an instance of Dist first.
[3395/4301] Building Mathlib.Analysis.Calculus.FDeriv.Comp
[3396/4301] Building Mathlib.MeasureTheory.Measure.GiryMonad
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Submodule, data field carrier is uncovered in LieSubmodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Submodule, data field bracket is uncovered in LieRingModule.
                      It might be better to declare an instance of Bracket first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Submodule, data field nsmul is uncovered in AddCommMonoid.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Submodule, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Submodule, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Submodule, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Submodule, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Submodule, data field toFun is uncovered in LieModuleHom.
                      It might be better to declare an instance of AddHom first.
[3397/4301] Building Mathlib.MeasureTheory.Measure.WithDensity
[3398/4301] Building Mathlib.RingTheory.HopfAlgebra
[3399/4301] Building Mathlib.Algebra.Category.Ring.Constructions
[3400/4301] Building Mathlib.Topology.ContinuousFunction.Compact
[3401/4301] Building Mathlib.MeasureTheory.Integral.Indicator
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.TensorProduct.RightExactness, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.TensorProduct.RightExactness, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3402/4301] Building Mathlib.LinearAlgebra.Matrix.IsDiag
[3403/4301] Building Mathlib.Topology.TietzeExtension
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.ZeroAtInfty, data field toFun is uncovered in ZeroAtInftyContinuousMap.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.ZeroAtInfty, data field toFun is uncovered in ZeroAtInftyContinuousMap.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.ZeroAtInfty, data field toFun is uncovered in ZeroAtInftyContinuousMap.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.ZeroAtInfty, data field toFun is uncovered in ZeroAtInftyContinuousMap.
                      It might be better to declare an instance of ContinuousMap first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.ZeroAtInfty, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.ZeroAtInfty, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.ZeroAtInfty, data field toFun is uncovered in NonUnitalAlgHom.
                      It might be better to declare an instance of MulActionHom first.
[3404/4301] Building Mathlib.Analysis.NormedSpace.OperatorNorm.Prod
[3405/4301] Building Mathlib.Analysis.Convex.Normed
[3406/4301] Building Mathlib.LinearAlgebra.Matrix.SesquilinearForm
[3407/4301] Building Mathlib.MeasureTheory.Measure.HasOuterApproxClosed
[3408/4301] Building Mathlib.Analysis.NormedSpace.OperatorNorm.Completeness
[3409/4301] Building Mathlib.LinearAlgebra.TensorProduct.Matrix
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Compact, data field dist is uncovered in NormedAddCommGroup.
                      It might be better to declare an instance of Dist first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Compact, data field norm is uncovered in NormedAddCommGroup.
                      It might be better to declare an instance of Norm first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Compact, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Compact, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[3410/4301] Building Mathlib.RingTheory.PolynomialAlgebra
[3411/4301] Building Mathlib.Analysis.NormedSpace.OperatorNorm.NormedSpace
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.TietzeExtension, data field toFun is uncovered in BoundedContinuousFunction.
                      It might be better to declare an instance of ContinuousMap first.
[3412/4301] Building Mathlib.Algebra.Lie.IdealOperations
[3413/4301] Building Mathlib.Algebra.Lie.OfAssociative
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.OperatorNorm.Completeness, data field toFun is uncovered in ContinuousLinearMap.
                      It might be better to declare an instance of AddHom first.
[3414/4301] Building Mathlib.Analysis.Normed.Group.ZeroAtInfty
[3415/4301] Building Mathlib.Topology.Sheaves.SheafCondition.PairwiseIntersections
[3416/4301] Building Mathlib.Analysis.Convex.GaugeRescale
[3417/4301] Building Mathlib.MeasureTheory.Integral.LebesgueNormedSpace
[3418/4301] Building Mathlib.Analysis.Convex.Side
[3419/4301] Building Mathlib.MeasureTheory.Category.MeasCat
[3420/4301] Building Mathlib.MeasureTheory.Constructions.Prod.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.OfAssociative, data field bracket is uncovered in LieRingModule.
                      It might be better to declare an instance of Bracket first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.OfAssociative, data field toFun is uncovered in LieHom.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.OfAssociative, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.OfAssociative, data field toFun is uncovered in LieEquiv.
                      It might be better to declare an instance of AddHom first.
[3421/4301] Building Mathlib.Analysis.SpecialFunctions.Bernstein
[3422/4301] Building Mathlib.RingTheory.Kaehler
stdout:
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Category.MeasCat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Category.MeasCat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3423/4301] Building Mathlib.Topology.Separation.NotNormal
[3424/4301] Building Mathlib.Analysis.NormedSpace.Star.ContinuousFunctionalCalculus.Restrict
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.SesquilinearForm, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.SesquilinearForm, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[3425/4301] Building Mathlib.RingTheory.Localization.BaseChange
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.OperatorNorm.NormedSpace, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3426/4301] Building Mathlib.LinearAlgebra.Matrix.Charpoly.Basic
[3427/4301] Building Mathlib.RingTheory.RingHomProperties
[3428/4301] Building Mathlib.Algebra.Jordan.Basic
[3429/4301] Building Mathlib.Analysis.Convex.StrictConvexSpace
[3430/4301] Building Mathlib.Topology.ContinuousFunction.Ideals
[3431/4301] Building Mathlib.Algebra.Category.AlgebraCat.Symmetric
[3432/4301] Building Mathlib.Algebra.Lie.Quotient
[3433/4301] Building Mathlib.RingTheory.Derivation.Lie
[3434/4301] Building Mathlib.Algebra.Lie.Abelian
[3435/4301] Building Mathlib.Analysis.Calculus.Deriv.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.SheafCondition.PairwiseIntersections, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.SheafCondition.PairwiseIntersections, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3436/4301] Building Mathlib.Analysis.NormedSpace.ContinuousAffineMap
[3437/4301] Building Mathlib.Analysis.NormedSpace.OperatorNorm.Mul
[3438/4301] Building Mathlib.Algebra.Lie.DirectSum
[3439/4301] Building Mathlib.Algebra.Lie.Matrix
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Ideals, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.ContinuousFunction.Ideals, data field toFun is uncovered in ContinuousLinearMap.
                      It might be better to declare an instance of AddHom first.
[3440/4301] Building Mathlib.Algebra.Lie.UniversalEnveloping
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Category.ModuleCat.ChangeOfRings, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3441/4301] Building Mathlib.LinearAlgebra.QuadraticForm.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Abelian, data field carrier is uncovered in LieSubmodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Abelian, data field toFun is uncovered in LieModuleHom.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Abelian, data field toFun is uncovered in LieModuleEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Abelian, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[3442/4301] Building Mathlib.Analysis.Calculus.InverseFunctionTheorem.ApproximatesLinearOn
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.DirectSum, data field bracket is uncovered in LieRingModule.
                      It might be better to declare an instance of Bracket first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.DirectSum, data field bracket is uncovered in LieRing.
                      It might be better to declare an instance of Bracket first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.DirectSum, data field toFun is uncovered in LieHom.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.DirectSum, data field toFun is uncovered in LieHom.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.DirectSum, data field toFun is uncovered in LieHom.
                      It might be better to declare an instance of AddHom first.
[3443/4301] Building Mathlib.Analysis.NormedSpace.Completion
[3444/4301] Building Mathlib.Analysis.NormedSpace.Multilinear.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.ContinuousAffineMap, data field toFun is uncovered in ContinuousLinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.ContinuousAffineMap, data field toFun is uncovered in AddGroupNorm.
                      It might be better to declare an instance of AddGroupSeminorm first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.ContinuousAffineMap, data field toFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.ContinuousAffineMap, data field invFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of LinearEquiv first.
[3445/4301] Building Mathlib.Analysis.NormedSpace.BanachSteinhaus
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Quotient, data field bracket is uncovered in LieRingModule.
                      It might be better to declare an instance of Bracket first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Quotient, data field toFun is uncovered in LieModuleHom.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Quotient, data field toFun is uncovered in LieEquiv.
                      It might be better to declare an instance of AddHom first.
[3446/4301] Building Mathlib.Topology.ContinuousFunction.Weierstrass
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Matrix, data field toFun is uncovered in LieEquiv.
                      It might be better to declare an instance of AddHom first.
[3447/4301] Building Mathlib.RingTheory.RingHom.Finite
[3448/4301] Building Mathlib.Combinatorics.Additive.SalemSpencer
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Completion, data field toFun is uncovered in LinearIsometry.
                      It might be better to declare an instance of AddHom first.
[3449/4301] Building Mathlib.Analysis.Convex.Uniform
[3450/4301] Building Mathlib.Topology.Sheaves.SheafCondition.EqualizerProducts
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.OperatorNorm.Mul, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[3451/4301] Building Mathlib.MeasureTheory.Group.Convolution
[3452/4301] Building Mathlib.RingTheory.LocalProperties
[3453/4301] Building Mathlib.Analysis.Convex.StrictConvexBetween
[3454/4301] Building Mathlib.Algebra.Lie.TensorProduct
[3455/4301] Building Mathlib.Topology.Sheaves.SheafCondition.UniqueGluing
[3456/4301] Building Mathlib.Analysis.Calculus.Deriv.Support
[3457/4301] Building Mathlib.Algebra.Symmetrized
[3458/4301] Building Mathlib.LinearAlgebra.Matrix.Charpoly.Coeff
[3459/4301] Building Mathlib.Analysis.Calculus.Deriv.Slope
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Symmetrized, data field one is uncovered in NonAssocSemiring.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Symmetrized, data field mul is uncovered in NonAssocSemiring.
                      It might be better to declare an instance of Mul first.
[3460/4301] Building Mathlib.LinearAlgebra.TensorProduct.Graded.Internal
[3461/4301] Building Mathlib.Algebra.Lie.Normalizer
[3462/4301] Building Mathlib.Algebra.Lie.Solvable
[3463/4301] Building Mathlib.Analysis.Calculus.Deriv.Comp
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.TensorProduct, data field bracket is uncovered in LieRingModule.
                      It might be better to declare an instance of Bracket first.
[3464/4301] Building Mathlib.Analysis.BoxIntegral.Partition.Additive
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Normalizer, data field carrier is uncovered in LieSubmodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Normalizer, data field carrier is uncovered in LieSubmodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[3465/4301] Building Mathlib.Analysis.NormedSpace.Unitization
[3466/4301] Building Mathlib.Algebra.Category.ModuleCat.Injective
[3467/4301] Building Mathlib.Topology.ContinuousFunction.StoneWeierstrass
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.QuadraticForm.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.QuadraticForm.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.QuadraticForm.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.QuadraticForm.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3468/4301] Building Mathlib.Algebra.Lie.Free
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.SheafCondition.EqualizerProducts, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.SheafCondition.EqualizerProducts, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.SheafCondition.EqualizerProducts, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.SheafCondition.EqualizerProducts, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3469/4301] Building Mathlib.Algebra.Lie.SkewAdjoint
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Kaehler, data field toFun is uncovered in Derivation.
                      It might be better to declare an instance of AddHom first.
[3470/4301] Building Mathlib.MeasureTheory.Group.Measure
[3471/4301] Building Mathlib.Topology.Sheaves.SheafOfFunctions
[3472/4301] Building Mathlib.RingTheory.RingHom.Surjective
[3473/4301] Building Mathlib.Algebra.Lie.Semisimple
[3474/4301] Building Mathlib.RingTheory.RingHom.FiniteType
[3475/4301] Building Mathlib.LinearAlgebra.QuadraticForm.Isometry
[3476/4301] Building Mathlib.RingTheory.Etale
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Free, data field bracket is uncovered in LieRing.
                      It might be better to declare an instance of Bracket first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Free, data field toFun is uncovered in NonUnitalAlgHom.
                      It might be better to declare an instance of MulActionHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Free, data field toFun is uncovered in LieHom.
                      It might be better to declare an instance of AddHom first.
[3477/4301] Building Mathlib.Algebra.Lie.BaseChange
[3478/4301] Building Mathlib.LinearAlgebra.Matrix.Charpoly.Univ
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.QuadraticForm.Isometry, data field toFun is uncovered in QuadraticForm.Isometry.
                      It might be better to declare an instance of AddHom first.
[3479/4301] Building Mathlib.LinearAlgebra.Matrix.Charpoly.LinearMap
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Unitization, data field norm is uncovered in NormedRing.
                      It might be better to declare an instance of Norm first.
[3480/4301] Building Mathlib.Topology.Sheaves.Stalks
[3481/4301] Building Mathlib.Algebra.Lie.CartanMatrix
[3482/4301] Building Mathlib.LinearAlgebra.QuadraticForm.IsometryEquiv
[3483/4301] Building Mathlib.Analysis.NormedSpace.Star.Unitization
[3484/4301] Building Mathlib.Algebra.Lie.Classical
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.QuadraticForm.IsometryEquiv, data field toFun is uncovered in QuadraticForm.Isometry.
                      It might be better to declare an instance of AddHom first.
[3485/4301] Building Mathlib.MeasureTheory.Group.Prod
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.Charpoly.LinearMap, data field carrier is uncovered in Subalgebra.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.Charpoly.LinearMap, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[3486/4301] Building Mathlib.MeasureTheory.Group.LIntegral
[3487/4301] Building Mathlib.MeasureTheory.Constructions.Pi
[3488/4301] Building Mathlib.MeasureTheory.Measure.EverywherePos
[3489/4301] Building Mathlib.LinearAlgebra.CliffordAlgebra.Basic
[3490/4301] Building Mathlib.LinearAlgebra.QuadraticForm.Prod
[3491/4301] Building Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat
[3492/4301] Building Mathlib.MeasureTheory.Measure.Haar.Basic
[3493/4301] Building Mathlib.RingTheory.IntegralClosure
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat, data field toFun is uncovered in QuadraticForm.IsometryEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat, data field invFun is uncovered in QuadraticForm.IsometryEquiv.
                      It might be better to declare an instance of LinearEquiv first.
[3494/4301] Building Mathlib.Algebra.Lie.Nilpotent
[3495/4301] Building Mathlib.MeasureTheory.Integral.Marginal
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.CliffordAlgebra.Basic, data field carrier is uncovered in Subalgebra.
                      It might be better to declare an instance of Subsemigroup first.
[3499/4301] Building Mathlib.LinearAlgebra.ExteriorAlgebra.Basic
[3499/4301] Building Mathlib.LinearAlgebra.CliffordAlgebra.Grading
[3499/4301] Building Mathlib.LinearAlgebra.CliffordAlgebra.CategoryTheory
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.CliffordAlgebra.CategoryTheory, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.CliffordAlgebra.CategoryTheory, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3501/4301] Building Mathlib.Geometry.RingedSpace.Stalks
[3501/4301] Building Mathlib.Topology.Sheaves.LocalPredicate
[3501/4301] Building Mathlib.Topology.Sheaves.Skyscraper
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Multilinear.Basic, data field toFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Multilinear.Basic, data field invFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of LinearEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Multilinear.Basic, data field toFun is uncovered in LinearIsometry.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Multilinear.Basic, data field toFun is uncovered in ContinuousLinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Multilinear.Basic, data field toFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Multilinear.Basic, data field invFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of LinearEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Multilinear.Basic, data field invFun is uncovered in ContinuousLinearEquiv.
                      It might be better to declare an instance of LinearEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Multilinear.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Multilinear.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Multilinear.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Multilinear.Basic, data field invFun is uncovered in ContinuousLinearEquiv.
                      It might be better to declare an instance of LinearEquiv first.
[3502/4301] Building Mathlib.Topology.Sheaves.Operations
[3503/4301] Building Mathlib.Topology.Sheaves.LocallySurjective
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.TensorProduct.Graded.Internal, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.TensorProduct.Graded.Internal, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3504/4301] Building Mathlib.Analysis.NormedSpace.Multilinear.Curry
[3505/4301] Building Mathlib.Geometry.RingedSpace.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.LocalPredicate, data field pred is uncovered in TopCat.LocalPredicate.
                      It might be better to declare an instance of TopCat.PrelocalPredicate first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.LocalPredicate, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.LocalPredicate, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3506/4301] Building Mathlib.Algebra.Lie.Engel
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.IntegralClosure, data field carrier is uncovered in Subalgebra.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.IntegralClosure, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.IntegralClosure, data field carrier is uncovered in Subalgebra.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.IntegralClosure, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[3507/4301] Building Mathlib.Algebra.Lie.CartanSubalgebra
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.ExteriorAlgebra.Basic, data field toFun is uncovered in AlternatingMap.
                      It might be better to declare an instance of MultilinearMap first.
[3508/4301] Building Mathlib.Analysis.NormedSpace.BoundedLinearMaps
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.Operations, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.Operations, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3509/4301] Building Mathlib.Geometry.Manifold.Sheaf.Basic
[3510/4301] Building Mathlib.Topology.Sheaves.Sheafify
[3511/4301] Building Mathlib.RingTheory.RingHom.Integral
[3512/4301] Building Mathlib.FieldTheory.Minpoly.Basic
[3513/4301] Building Mathlib.RingTheory.Algebraic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.Skyscraper, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.Skyscraper, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.Skyscraper, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.Skyscraper, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.Skyscraper, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.Sheaves.Skyscraper, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3514/4301] Building Mathlib.RingTheory.FractionalIdeal.Operations
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Sheaf.Basic, data field pred is uncovered in TopCat.LocalPredicate.
                      It might be better to declare an instance of TopCat.PrelocalPredicate first.
[3515/4301] Building Mathlib.LinearAlgebra.ExteriorAlgebra.Grading
[3516/4301] Building Mathlib.Geometry.RingedSpace.LocallyRingedSpace
[3518/4301] Building Mathlib.LinearAlgebra.CliffordAlgebra.Conjugation
[3518/4301] Building Mathlib.LinearAlgebra.CliffordAlgebra.Prod
[3520/4301] Building Mathlib.Algebra.Lie.EngelSubalgebra
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.LocallyRingedSpace, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.LocallyRingedSpace, data field id is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.LocallyRingedSpace, data field comp is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of CategoryTheory.CategoryStruct first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.LocallyRingedSpace, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.LocallyRingedSpace, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3521/4301] Building Mathlib.Geometry.RingedSpace.OpenImmersion
[3521/4301] Building Mathlib.AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Algebraic, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Algebraic, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Algebraic, data field toFun is uncovered in Algebra.
                      It might be better to declare an instance of OneHom first.
[3522/4301] Building Mathlib.FieldTheory.Minpoly.Field
[3523/4301] Building Mathlib.Algebra.AlgebraicCard
[3524/4301] Building Mathlib.RingTheory.AlgebraicIndependent
[3525/4301] Building Mathlib.FieldTheory.AxGrothendieck
[3526/4301] Building Mathlib.Data.Real.Irrational
[3527/4301] Building Mathlib.RingTheory.Localization.Integral
[3528/4301] Building Mathlib.LinearAlgebra.CliffordAlgebra.Star
[3529/4301] Building Mathlib.LinearAlgebra.CliffordAlgebra.Fold
[3530/4301] Building Mathlib.LinearAlgebra.Charpoly.Basic
[3531/4301] Building Mathlib.LinearAlgebra.Eigenspace.Minpoly
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.CliffordAlgebra.Star, data field star is uncovered in StarRing.
                      It might be better to declare an instance of Star first.
[3532/4301] Building Mathlib.RingTheory.PowerBasis
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.FractionalIdeal.Operations, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.FractionalIdeal.Operations, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[3533/4301] Building Mathlib.Analysis.Calculus.FDeriv.Linear
[3534/4301] Building Mathlib.Data.Polynomial.Module.FiniteDimensional
[3535/4301] Building Mathlib.LinearAlgebra.AnnihilatingPolynomial
[3536/4301] Building Mathlib.Topology.VectorBundle.Basic
[3537/4301] Building Mathlib.NumberTheory.Rayleigh
[3538/4301] Building Mathlib.RingTheory.Ideal.Over
[3539/4301] Building Mathlib.RingTheory.IntegrallyClosed
[3540/4301] Building Mathlib.LinearAlgebra.Charpoly.ToMatrix
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf, data field carrier is uncovered in Subring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf, data field carrier is uncovered in AlgebraicGeometry.SheafedSpace.
                      It might be better to declare an instance of AlgebraicGeometry.PresheafedSpace first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf, data field presheaf is uncovered in AlgebraicGeometry.SheafedSpace.
                      It might be better to declare an instance of AlgebraicGeometry.PresheafedSpace first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[3541/4301] Building Mathlib.LinearAlgebra.FreeModule.StrongRankCondition
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.CliffordAlgebra.Fold, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3542/4301] Building Mathlib.NumberTheory.DiophantineApproximation
[3543/4301] Building Mathlib.Topology.Instances.Irrational
[3544/4301] Building Mathlib.Analysis.Calculus.Deriv.Linear
[3545/4301] Building Mathlib.Data.Real.GoldenRatio
[3546/4301] Building Mathlib.Analysis.Calculus.FDeriv.Equiv
[3547/4301] Building Mathlib.Analysis.Calculus.FDeriv.Add
[3548/4301] Building Mathlib.Analysis.Calculus.FDeriv.Prod
[3549/4301] Building Mathlib.LinearAlgebra.ExteriorAlgebra.OfAlternating
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Multilinear.Curry, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Multilinear.Curry, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Multilinear.Curry, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Multilinear.Curry, data field toFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Multilinear.Curry, data field invFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of LinearEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Multilinear.Curry, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[3550/4301] Building Mathlib.LinearAlgebra.CliffordAlgebra.Even
[3551/4301] Building Mathlib.Algebra.GCDMonoid.IntegrallyClosed
[3552/4301] Building Mathlib.RingTheory.Valuation.Integral
[3553/4301] Building Mathlib.RingTheory.Polynomial.RationalRoot
[3554/4301] Building Mathlib.LinearAlgebra.FreeModule.Finite.Matrix
[3555/4301] Building Mathlib.LinearAlgebra.FreeAlgebra
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.VectorBundle.Basic, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.VectorBundle.Basic, data field toFun is uncovered in ContinuousLinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.VectorBundle.Basic, data field toFun is uncovered in ContinuousLinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.VectorBundle.Basic, data field toFun is uncovered in ContinuousLinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.VectorBundle.Basic, data field invFun is uncovered in ContinuousLinearEquiv.
                      It might be better to declare an instance of LinearEquiv first.
[3556/4301] Building Mathlib.FieldTheory.Separable
[3557/4301] Building Mathlib.LinearAlgebra.Matrix.Charpoly.Minpoly
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.ExteriorAlgebra.OfAlternating, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[3558/4301] Building Mathlib.LinearAlgebra.FreeModule.IdealQuotient
[3559/4301] Building Mathlib.Analysis.Calculus.FormalMultilinearSeries
[3560/4301] Building Mathlib.RingTheory.Adjoin.PowerBasis
[3561/4301] Building Mathlib.RingTheory.Jacobson
[3562/4301] Building Mathlib.RingTheory.AdjoinRoot
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.OpenImmersion, data field toFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.RingedSpace.OpenImmersion, data field invFun is uncovered in Homeomorph.
                      It might be better to declare an instance of Equiv first.
[3563/4301] Building Mathlib.NumberTheory.Pell
[3564/4301] Building Mathlib.LinearAlgebra.Dual
[3565/4301] Building Mathlib.Topology.Instances.RatLemmas
[3566/4301] Building Mathlib.Topology.VectorBundle.Hom
[3567/4301] Building Mathlib.RingTheory.DedekindDomain.Basic
[3568/4301] Building Mathlib.LinearAlgebra.TensorAlgebra.Basis
[3569/4301] Building Mathlib.Topology.VectorBundle.Constructions
[3570/4301] Building Mathlib.FieldTheory.Tower
[3571/4301] Building Mathlib.LinearAlgebra.Multilinear.FiniteDimensional
[3572/4301] Building Mathlib.Analysis.Calculus.Deriv.Inverse
[3573/4301] Building Mathlib.RingTheory.Polynomial.SeparableDegree
[3574/4301] Building Mathlib.LinearAlgebra.Matrix.FiniteDimensional
[3575/4301] Building Mathlib.Topology.Algebra.Module.FiniteDimension
[3576/4301] Building Mathlib.Analysis.Calculus.FDeriv.Star
[3577/4301] Building Mathlib.Analysis.Calculus.InverseFunctionTheorem.FDeriv
[3578/4301] Building Mathlib.Geometry.RingedSpace.LocallyRingedSpace.HasColimits
[3579/4301] Building Mathlib.AlgebraicGeometry.PrimeSpectrum.Basic
[3580/4301] Building Mathlib.Analysis.Calculus.Deriv.Add
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Jacobson, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Jacobson, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[3581/4301] Building Mathlib.Analysis.Calculus.Conformal.NormedSpace
[3582/4301] Building Mathlib.Analysis.Calculus.FDeriv.Pi
[3583/4301] Building Mathlib.Analysis.Calculus.Deriv.Prod
[3584/4301] Building Mathlib.Analysis.Calculus.FDeriv.Bilinear
[3585/4301] Building Mathlib.LinearAlgebra.CliffordAlgebra.EvenEquiv
[3586/4301] Building Mathlib.FieldTheory.IntermediateField
[3587/4301] Building Mathlib.FieldTheory.Finite.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.PrimeSpectrum.Basic, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.PrimeSpectrum.Basic, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[3588/4301] Building Mathlib.RingTheory.DiscreteValuationRing.TFAE
[3589/4301] Building Mathlib.Data.Complex.Module
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.AdjoinRoot, data field ratCast is uncovered in Field.
                      It might be better to declare an instance of RatCast first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.AdjoinRoot, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.AdjoinRoot, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.AdjoinRoot, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[3590/4301] Building Mathlib.Analysis.Calculus.ContDiff.Defs
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.VectorBundle.Hom, data field toFun is uncovered in Pretrivialization.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.VectorBundle.Hom, data field invFun is uncovered in Pretrivialization.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.VectorBundle.Hom, data field source is uncovered in Pretrivialization.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Topology.VectorBundle.Hom, data field target is uncovered in Pretrivialization.
                      It might be better to declare an instance of PartialEquiv first.
[3591/4301] Building Mathlib.Analysis.Calculus.Deriv.Star
[3592/4301] Building Mathlib.Analysis.Calculus.InverseFunctionTheorem.Deriv
[3593/4301] Building Mathlib.Geometry.Manifold.ConformalGroupoid
[3594/4301] Building Mathlib.Geometry.RingedSpace.PresheafedSpace.Gluing
[3595/4301] Building Mathlib.RingTheory.Valuation.ValuationSubring
[3596/4301] Building Mathlib.Analysis.Calculus.Deriv.Pi
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Finite.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[3597/4301] Building Mathlib.Analysis.Calculus.LocalExtr.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.Module.FiniteDimension, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[3598/4301] Building Mathlib.RingTheory.Adjoin.Field
[3599/4301] Building Mathlib.Analysis.Analytic.Basic
[3600/4301] Building Mathlib.AlgebraicGeometry.PrimeSpectrum.IsOpenComapC
[3601/4301] Building Mathlib.AlgebraicGeometry.PrimeSpectrum.Noetherian
[3602/4301] Building Mathlib.AlgebraicGeometry.PrimeSpectrum.Maximal
[3603/4301] Building Mathlib.Analysis.Calculus.Deriv.Shift
[3604/4301] Building Mathlib.RingTheory.Localization.Away.AdjoinRoot
[3605/4301] Building Mathlib.Analysis.Calculus.FDeriv.Mul
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.IntermediateField, data field carrier is uncovered in IntermediateField.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.IntermediateField, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.IntermediateField, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.IntermediateField, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.IntermediateField, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[3606/4301] Building Mathlib.RingTheory.DedekindDomain.Dvr
[3607/4301] Building Mathlib.Analysis.Calculus.Deriv.AffineMap
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Module, data field smul is uncovered in Algebra.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Module, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Module, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Module, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Module, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Module, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Data.Complex.Module, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[3608/4301] Building Mathlib.NumberTheory.LegendreSymbol.QuadraticChar.Basic
[3609/4301] Building Mathlib.NumberTheory.Wilson
[3610/4301] Building Mathlib.FieldTheory.ChevalleyWarning
[3611/4301] Building Mathlib.MeasureTheory.Function.StronglyMeasurable.Basic
[3612/4301] Building Mathlib.MeasureTheory.Constructions.BorelSpace.ContinuousLinearMap
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.LegendreSymbol.QuadraticChar.Basic, data field toFun is uncovered in MulChar.
                      It might be better to declare an instance of OneHom first.
[3613/4301] Building Mathlib.Analysis.NormedSpace.Complemented
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.ChevalleyWarning, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[3614/4301] Building Mathlib.LinearAlgebra.Matrix.Charpoly.FiniteField
[3615/4301] Building Mathlib.NumberTheory.DirichletCharacter.Bounds
[3616/4301] Building Mathlib.FieldTheory.Finite.Polynomial
[3617/4301] Building Mathlib.NumberTheory.FermatPsp
[3618/4301] Building Mathlib.AlgebraicGeometry.StructureSheaf
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.ValuationSubring, data field top is uncovered in OrderTop.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.ValuationSubring, data field sup is uncovered in SemilatticeSup.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.ValuationSubring, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.ValuationSubring, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.ValuationSubring, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.ValuationSubring, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.ValuationSubring, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.ValuationSubring, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.ValuationSubring, data field toFun is uncovered in RelEmbedding.
                      It might be better to declare an instance of Function.Embedding first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.ValuationSubring, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Valuation.ValuationSubring, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[3619/4301] Building Mathlib.Analysis.NormedSpace.HahnBanach.Separation
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Finite.Polynomial, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3620/4301] Building Mathlib.Analysis.Calculus.LocalExtr.Rolle
[3621/4301] Building Mathlib.NumberTheory.SumFourSquares
[3622/4301] Building Mathlib.Analysis.NormedSpace.FiniteDimension
[3623/4301] Building Mathlib.Analysis.Convex.Complex
[3624/4301] Building Mathlib.FieldTheory.SplittingField.IsSplittingField
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Dual, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Dual, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Dual, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Dual, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Dual, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[3625/4301] Building Mathlib.Algebra.CharP.IntermediateField
[3626/4301] Building Mathlib.Data.Complex.Orientation
[3627/4301] Building Mathlib.Data.Complex.Determinant
[3628/4301] Building Mathlib.NumberTheory.LegendreSymbol.Basic
[3629/4301] Building Mathlib.Analysis.Calculus.Implicit
[3630/4301] Building Mathlib.Analysis.SpecialFunctions.Trigonometric.Chebyshev
[3631/4301] Building Mathlib.RingTheory.Valuation.RamificationGroup
[3632/4301] Building Mathlib.Topology.Algebra.Valuation
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.LegendreSymbol.Basic, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[3633/4301] Building Mathlib.LinearAlgebra.CliffordAlgebra.Equivs
[3634/4301] Building Mathlib.RingTheory.DedekindDomain.Ideal
[3635/4301] Building Mathlib.Probability.Kernel.Disintegration.MeasurableStieltjes
[3636/4301] Building Mathlib.MeasureTheory.Function.AEEqFun
[3637/4301] Building Mathlib.MeasureTheory.Function.Egorov
[3638/4301] Building Mathlib.Analysis.Calculus.LagrangeMultipliers
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.StructureSheaf, data field carrier is uncovered in Subring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.StructureSheaf, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.StructureSheaf, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.StructureSheaf, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.StructureSheaf, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.StructureSheaf, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.StructureSheaf, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.StructureSheaf, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[3639/4301] Building Mathlib.LinearAlgebra.CliffordAlgebra.Contraction
[3640/4301] Building Mathlib.LinearAlgebra.QuadraticForm.Dual
stdout:
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.AEEqFun, data field sup is uncovered in Lattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.AEEqFun, data field inf is uncovered in Lattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.AEEqFun, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.AEEqFun, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[3641/4301] Building Mathlib.Algebra.Lie.Character
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.CliffordAlgebra.Equivs, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3642/4301] Building Mathlib.LinearAlgebra.BilinearForm.Properties
[3643/4301] Building Mathlib.LinearAlgebra.PerfectPairing
[3644/4301] Building Mathlib.Analysis.Convex.KreinMilman
[3645/4301] Building Mathlib.RingTheory.WittVector.StructurePolynomial
[3646/4301] Building Mathlib.LinearAlgebra.Reflection
[3647/4301] Building Mathlib.LinearAlgebra.Matrix.Dual
[3648/4301] Building Mathlib.LinearAlgebra.BilinearForm.TensorProduct
[3649/4301] Building Mathlib.LinearAlgebra.Contraction
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.DedekindDomain.Ideal, data field inv is uncovered in Semifield.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.DedekindDomain.Ideal, data field div is uncovered in Semifield.
                      It might be better to declare an instance of Div first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.DedekindDomain.Ideal, data field gcd is uncovered in NormalizedGCDMonoid.
                      It might be better to declare an instance of GCDMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.DedekindDomain.Ideal, data field lcm is uncovered in NormalizedGCDMonoid.
                      It might be better to declare an instance of GCDMonoid first.
[3650/4301] Building Mathlib.Analysis.Complex.Basic
[3651/4301] Building Mathlib.FieldTheory.Adjoin
[3652/4301] Building Mathlib.FieldTheory.SplittingField.Construction
[3653/4301] Building Mathlib.NumberTheory.Zsqrtd.QuadraticReciprocity
[3654/4301] Building Mathlib.NumberTheory.LegendreSymbol.GaussEisensteinLemmas
[3655/4301] Building Mathlib.Analysis.Calculus.InverseFunctionTheorem.FiniteDimensional
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.BilinearForm.Properties, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[3656/4301] Building Mathlib.Dynamics.Ergodic.Function
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.SplittingField.Construction, data field ratCast is uncovered in Field.
                      It might be better to declare an instance of RatCast first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.SplittingField.Construction, data field inv is uncovered in Field.
                      It might be better to declare an instance of Inv first.
[3657/4301] Building Mathlib.Analysis.Analytic.Linear
[3658/4301] Building Mathlib.Analysis.Analytic.CPolynomial
[3659/4301] Building Mathlib.Analysis.Analytic.Composition
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.CliffordAlgebra.Contraction, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.CliffordAlgebra.Contraction, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[3660/4301] Building Mathlib.RingTheory.DedekindDomain.PID
[3661/4301] Building Mathlib.Algebra.Module.DedekindDomain
[3662/4301] Building Mathlib.RingTheory.ClassGroup
[3663/4301] Building Mathlib.RingTheory.DedekindDomain.Factorization
[3664/4301] Building Mathlib.NumberTheory.RamificationInertia
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Complex.Basic, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Complex.Basic, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[3665/4301] Building Mathlib.Topology.Algebra.ValuedField
[3666/4301] Building Mathlib.Analysis.Calculus.FDeriv.Measurable
[3667/4301] Building Mathlib.Data.IsROrC.Lemmas
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.ValuedField, data field toFun is uncovered in Valuation.
                      It might be better to declare an instance of ZeroHom first.
[3668/4301] Building Mathlib.MeasureTheory.Function.AEEqFun.DomAct
[3669/4301] Building Mathlib.RingTheory.WittVector.Defs
[3670/4301] Building Mathlib.LinearAlgebra.RootSystem.Defs
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.ClassGroup, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.ClassGroup, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[3671/4301] Building Mathlib.LinearAlgebra.BilinearForm.Orthogonal
[3672/4301] Building Mathlib.LinearAlgebra.BilinearForm.DualLattice
[3673/4301] Building Mathlib.NumberTheory.SumTwoSquares
[3674/4301] Building Mathlib.LinearAlgebra.QuadraticForm.TensorProduct
[3675/4301] Building Mathlib.AlgebraicGeometry.Spec
[3676/4301] Building Mathlib.LinearAlgebra.Matrix.BilinearForm
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.BilinearForm.DualLattice, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.BilinearForm.DualLattice, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.BilinearForm.DualLattice, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3677/4301] Building Mathlib.FieldTheory.Perfect
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.BilinearForm.Orthogonal, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[3678/4301] Building Mathlib.LinearAlgebra.CliffordAlgebra.Inversion
[3679/4301] Building Mathlib.Analysis.Calculus.IteratedDeriv.Defs
[3680/4301] Building Mathlib.LinearAlgebra.Trace
[3681/4301] Building Mathlib.LinearAlgebra.Coevaluation
[3682/4301] Building Mathlib.MeasureTheory.Measure.VectorMeasure
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Analytic.Composition, data field toFun is uncovered in ContinuousMultilinearMap.
                      It might be better to declare an instance of MultilinearMap first.
[3683/4301] Building Mathlib.Analysis.Complex.Convex
[3684/4301] Building Mathlib.Analysis.NormedSpace.HahnBanach.Extension
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Adjoin, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[3685/4301] Building Mathlib.RepresentationTheory.Basic
[3686/4301] Building Mathlib.Analysis.SpecialFunctions.Exp
[3687/4301] Building Mathlib.Analysis.Complex.ReImTopology
[3688/4301] Building Mathlib.Analysis.Complex.AbelLimit
[3689/4301] Building Mathlib.MeasureTheory.Constructions.BorelSpace.Complex
[3690/4301] Building Mathlib.RingTheory.DedekindDomain.AdicValuation
[3691/4301] Building Mathlib.RingTheory.Polynomial.GaussLemma
[3692/4301] Building Mathlib.Topology.Instances.Complex
[3693/4301] Building Mathlib.Analysis.Complex.OperatorNorm
[3694/4301] Building Mathlib.LinearAlgebra.RootSystem.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Basic, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3695/4301] Building Mathlib.RingTheory.WittVector.Basic
[3696/4301] Building Mathlib.Analysis.Complex.UpperHalfPlane.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Spec, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Spec, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Spec, data field carrier is uncovered in AlgebraicGeometry.SheafedSpace.
                      It might be better to declare an instance of AlgebraicGeometry.PresheafedSpace first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Spec, data field presheaf is uncovered in AlgebraicGeometry.SheafedSpace.
                      It might be better to declare an instance of AlgebraicGeometry.PresheafedSpace first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Spec, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Spec, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Spec, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Spec, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3697/4301] Building Mathlib.Analysis.InnerProductSpace.Basic
[3698/4301] Building Mathlib.FieldTheory.PerfectClosure
[3699/4301] Building Mathlib.Analysis.Analytic.Inverse
stdout:
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.VectorMeasure, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.VectorMeasure, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.VectorMeasure, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.VectorMeasure, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.VectorMeasure, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.VectorMeasure, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.VectorMeasure, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.VectorMeasure, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[3700/4301] Building Mathlib.Analysis.Calculus.ContDiff.Basic
[3701/4301] Building Mathlib.Analysis.Calculus.Deriv.Mul
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.DedekindDomain.AdicValuation, data field toFun is uncovered in Valuation.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.DedekindDomain.AdicValuation, data field smul is uncovered in Algebra.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.DedekindDomain.AdicValuation, data field toFun is uncovered in Algebra.
                      It might be better to declare an instance of OneHom first.
[3702/4301] Building Mathlib.Algebra.Module.PID
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.RootSystem.Basic, data field root is uncovered in RootSystem.
                      It might be better to declare an instance of RootPairing first.
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.RootSystem.Basic, data field coroot is uncovered in RootSystem.
                      It might be better to declare an instance of RootPairing first.
[3703/4301] Building Mathlib.Analysis.NormedSpace.Exponential
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.PerfectClosure, data field one is uncovered in CommMonoid.
                      It might be better to declare an instance of One first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.PerfectClosure, data field zero is uncovered in AddCommGroup.
                      It might be better to declare an instance of Zero first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.PerfectClosure, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.PerfectClosure, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.PerfectClosure, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.PerfectClosure, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[3704/4301] Building Mathlib.Analysis.Complex.Tietze
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.WittVector.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.WittVector.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.WittVector.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[3705/4301] Building Mathlib.FieldTheory.Extension
[3706/4301] Building Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries
[3707/4301] Building Mathlib.Analysis.Analytic.Uniqueness
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Complex.UpperHalfPlane.Basic, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Complex.UpperHalfPlane.Basic, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Complex.UpperHalfPlane.Basic, data field vadd is uncovered in AddAction.
                      It might be better to declare an instance of VAdd first.
[3708/4301] Building Mathlib.MeasureTheory.Function.SpecialFunctions.IsROrC
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Extension, data field le is uncovered in PartialOrder.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Extension, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[3709/4301] Building Mathlib.Analysis.Calculus.FDeriv.Analytic
[3710/4301] Building Mathlib.Analysis.Analytic.Constructions
[3711/4301] Building Mathlib.RepresentationTheory.Rep
[3712/4301] Building Mathlib.Analysis.SpecialFunctions.PolynomialExp
[3713/4301] Building Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.RamificationInertia, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.RamificationInertia, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3714/4301] Building Mathlib.Algebra.DirectSum.LinearMap
[3715/4301] Building Mathlib.LinearAlgebra.CliffordAlgebra.BaseChange
[3716/4301] Building Mathlib.Algebra.Category.FGModuleCat.Basic
[3717/4301] Building Mathlib.FieldTheory.Minpoly.IsIntegrallyClosed
[3718/4301] Building Mathlib.MeasureTheory.Measure.Complex
[3719/4301] Building Mathlib.Analysis.Complex.Circle
[3720/4301] Building Mathlib.Analysis.SpecialFunctions.Log.Basic
[3721/4301] Building Mathlib.RingTheory.DedekindDomain.SelmerGroup
[3722/4301] Building Mathlib.RingTheory.DedekindDomain.SInteger
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Complex.Circle, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[3723/4301] Building Mathlib.RingTheory.DedekindDomain.FiniteAdeleRing
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.DedekindDomain.SInteger, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.DedekindDomain.SInteger, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[3724/4301] Building Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Scheme
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.DedekindDomain.SelmerGroup, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.DedekindDomain.SelmerGroup, data field carrier is uncovered in Subgroup.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.DedekindDomain.SelmerGroup, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.DedekindDomain.SelmerGroup, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[3726/4301] Building Mathlib.AlgebraicGeometry.Scheme
[3726/4301] Building Mathlib.Analysis.NormedSpace.HahnBanach.SeparatingDual
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.DedekindDomain.FiniteAdeleRing, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.DedekindDomain.FiniteAdeleRing, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.DedekindDomain.FiniteAdeleRing, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.DedekindDomain.FiniteAdeleRing, data field carrier is uncovered in Subring.
                      It might be better to declare an instance of Subsemigroup first.
[3727/4301] Building Mathlib.Analysis.NormedSpace.Dual
[3728/4301] Building Mathlib.RingTheory.WittVector.Teichmuller
[3729/4301] Building Mathlib.Analysis.NormedSpace.Star.Exponential
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.WittVector.Teichmuller, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[3730/4301] Building Mathlib.MeasureTheory.Decomposition.SignedHahn
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Rep, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Rep, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Rep, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Rep, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Rep, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Rep, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Rep, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3731/4301] Building Mathlib.LinearAlgebra.PID
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.HahnBanach.SeparatingDual, data field toFun is uncovered in ContinuousLinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.HahnBanach.SeparatingDual, data field invFun is uncovered in ContinuousLinearEquiv.
                      It might be better to declare an instance of LinearEquiv first.
[3732/4301] Building Mathlib.RingTheory.WittVector.IsPoly
[3733/4301] Building Mathlib.Analysis.Complex.UpperHalfPlane.FunctionsBoundedAtInfty
[3734/4301] Building Mathlib.LinearAlgebra.Semisimple
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Scheme, data field Hom is uncovered in CategoryTheory.Category.
                      It might be better to declare an instance of Quiver first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Scheme, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Scheme, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Scheme, data field carrier is uncovered in AlgebraicGeometry.Scheme.
                      It might be better to declare an instance of AlgebraicGeometry.PresheafedSpace first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Scheme, data field presheaf is uncovered in AlgebraicGeometry.Scheme.
                      It might be better to declare an instance of AlgebraicGeometry.PresheafedSpace first.
[3735/4301] Building Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat.Monoidal
[3736/4301] Building Mathlib.NumberTheory.ModularForms.SlashActions
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.InnerProductSpace.Basic, data field toFun is uncovered in AddGroupNorm.
                      It might be better to declare an instance of AddGroupSeminorm first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.InnerProductSpace.Basic, data field inner is uncovered in InnerProductSpace.
                      It might be better to declare an instance of Inner first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.InnerProductSpace.Basic, data field inner is uncovered in InnerProductSpace.
                      It might be better to declare an instance of Inner first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.InnerProductSpace.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[3737/4301] Building Mathlib.Analysis.Calculus.Darboux
[3738/4301] Building Mathlib.Analysis.Calculus.LineDeriv.Basic
[3739/4301] Building Mathlib.Analysis.Calculus.Deriv.Pow
[3740/4301] Building Mathlib.Analysis.Calculus.Deriv.Inv
[3741/4301] Building Mathlib.FieldTheory.Normal
[3742/4301] Building Mathlib.NumberTheory.VonMangoldt
[3743/4301] Building Mathlib.GroupTheory.FiniteAbelian
[3744/4301] Building Mathlib.RepresentationTheory.GroupCohomology.Resolution
[3745/4301] Building Mathlib.RingTheory.IsAdjoinRoot
[3746/4301] Building Mathlib.Topology.Algebra.PontryaginDual
stdout:
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FiniteAbelian, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.GroupTheory.FiniteAbelian, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[3747/4301] Building Mathlib.Analysis.Complex.UnitDisc.Basic
[3748/4301] Building Mathlib.NumberTheory.Modular
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.Algebra.PontryaginDual, data field toFun is uncovered in ContinuousMonoidHom.
                      It might be better to declare an instance of OneHom first.
[3749/4301] Building Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Scheme, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[3750/4301] Building Mathlib.RingTheory.RootsOfUnity.Minpoly
[3751/4301] Building Mathlib.Analysis.Complex.Isometry
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Normal, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Normal, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[3752/4301] Building Mathlib.Analysis.Complex.UpperHalfPlane.Topology
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Complex.UnitDisc.Basic, data field zero is uncovered in SemigroupWithZero.
                      It might be better to declare an instance of Zero first.
[3753/4301] Building Mathlib.Analysis.Analytic.Polynomial
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.IsAdjoinRoot, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.IsAdjoinRoot, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.IsAdjoinRoot, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.IsAdjoinRoot, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.IsAdjoinRoot, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.IsAdjoinRoot, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[3754/4301] Building Mathlib.MeasureTheory.Function.StronglyMeasurable.Inner
[3755/4301] Building Mathlib.Analysis.InnerProductSpace.ConformalLinearMap
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse, data field toFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse, data field invFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse, data field source is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse, data field target is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[3756/4301] Building Mathlib.Geometry.Euclidean.Inversion.Basic
[3757/4301] Building Mathlib.Analysis.InnerProductSpace.OfNorm
[3758/4301] Building Mathlib.Analysis.Convex.Strong
[3759/4301] Building Mathlib.AlgebraicGeometry.OpenImmersion
[3760/4301] Building Mathlib.Analysis.SpecialFunctions.Trigonometric.Angle
[3761/4301] Building Mathlib.RingTheory.WittVector.InitTail
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Complex.Isometry, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[3762/4301] Building Mathlib.RingTheory.WittVector.Verschiebung
[3763/4301] Building Mathlib.RingTheory.WittVector.MulP
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.WittVector.Verschiebung, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[3764/4301] Building Mathlib.MeasureTheory.Function.SpecialFunctions.Inner
[3765/4301] Building Mathlib.Analysis.InnerProductSpace.Orthogonal
[3766/4301] Building Mathlib.Analysis.NormedSpace.WeakDual
[3767/4301] Building Mathlib.RingTheory.WittVector.Frobenius
[3768/4301] Building Mathlib.MeasureTheory.Decomposition.Jordan
[3769/4301] Building Mathlib.Analysis.Calculus.Dslope
[3770/4301] Building Mathlib.LinearAlgebra.JordanChevalley
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.InnerProductSpace.Orthogonal, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[3771/4301] Building Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat.Symmetric
[3772/4301] Building Mathlib.Analysis.InnerProductSpace.Symmetric
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.WittVector.Frobenius, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.WittVector.Frobenius, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.WittVector.Frobenius, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[3773/4301] Building Mathlib.Analysis.SpecialFunctions.Exponential
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.InnerProductSpace.OfNorm, data field inner is uncovered in InnerProductSpace.
                      It might be better to declare an instance of Inner first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.InnerProductSpace.OfNorm, data field inner is uncovered in InnerProductSpace.
                      It might be better to declare an instance of Inner first.
[3774/4301] Building Mathlib.Analysis.Calculus.Deriv.ZPow
[3775/4301] Building Mathlib.Analysis.Calculus.MeanValue
[3776/4301] Building Mathlib.Analysis.Calculus.DiffContOnCl
[3777/4301] Building Mathlib.NumberTheory.KummerDedekind
[3778/4301] Building Mathlib.Algebra.Category.FGModuleCat.Limits
[3779/4301] Building Mathlib.Geometry.Euclidean.Angle.Unoriented.Basic
[3780/4301] Building Mathlib.NumberTheory.ModularForms.SlashInvariantForms
stdout:
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Decomposition.Jordan, data field neg is uncovered in InvolutiveNeg.
                      It might be better to declare an instance of Neg first.
[3781/4301] Building Mathlib.Analysis.Calculus.LineDeriv.Measurable
[3782/4301] Building Mathlib.FieldTheory.NormalClosure
[3783/4301] Building Mathlib.Analysis.Calculus.Deriv.Polynomial
[3784/4301] Building Mathlib.Analysis.Calculus.Conformal.InnerProduct
[3785/4301] Building Mathlib.FieldTheory.Fixed
[3786/4301] Building Mathlib.FieldTheory.IsAlgClosed.Basic
[3787/4301] Building Mathlib.RingTheory.WittVector.Truncated
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.ModularForms.SlashInvariantForms, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[3788/4301] Building Mathlib.AlgebraicGeometry.Gluing
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.KummerDedekind, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[3789/4301] Building Mathlib.AlgebraicGeometry.Restrict
[3790/4301] Building Mathlib.Analysis.Complex.Conformal
[3791/4301] Building Mathlib.Analysis.SpecialFunctions.Complex.Arg
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.GroupCohomology.Resolution, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.GroupCohomology.Resolution, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3792/4301] Building Mathlib.Geometry.Euclidean.PerpBisector
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.WittVector.Truncated, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.WittVector.Truncated, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[3793/4301] Building Mathlib.RingTheory.WittVector.Identities
[3794/4301] Building Mathlib.Analysis.Analytic.IsolatedZeros
[3795/4301] Building Mathlib.Geometry.Manifold.SmoothManifoldWithCorners
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.NormalClosure, data field toFun is uncovered in ClosureOperator.
                      It might be better to declare an instance of OrderHom first.
[3796/4301] Building Mathlib.Analysis.Calculus.AffineMap
[3797/4301] Building Mathlib.Analysis.Calculus.ContDiff.FiniteDimension
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Fixed, data field carrier is uncovered in Subfield.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Fixed, data field smul is uncovered in MulSemiringAction.
                      It might be better to declare an instance of SMul first.
[3798/4301] Building Mathlib.Analysis.SpecialFunctions.Sqrt
[3799/4301] Building Mathlib.Analysis.Calculus.BumpFunction.Basic
[3800/4301] Building Mathlib.Geometry.Euclidean.Angle.Unoriented.Conformal
[3801/4301] Building Mathlib.Analysis.Calculus.LocalExtr.Polynomial
[3802/4301] Building Mathlib.Analysis.SpecialFunctions.Trigonometric.Series
[3803/4301] Building Mathlib.RepresentationTheory.GroupCohomology.Basic
[3804/4301] Building Mathlib.NumberTheory.ModularForms.EisensteinSeries.Basic
[3805/4301] Building Mathlib.Geometry.Euclidean.Angle.Unoriented.Affine
[3806/4301] Building Mathlib.Analysis.InnerProductSpace.Projection
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.SpecialFunctions.Sqrt, data field toFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.SpecialFunctions.Sqrt, data field invFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.SpecialFunctions.Sqrt, data field source is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.SpecialFunctions.Sqrt, data field target is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[3807/4301] Building Mathlib.Tactic.FunProp.Measurable
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Gluing, data field J is uncovered in AlgebraicGeometry.Scheme.GlueData.
                      It might be better to declare an instance of CategoryTheory.GlueData first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Gluing, data field U is uncovered in AlgebraicGeometry.Scheme.GlueData.
                      It might be better to declare an instance of CategoryTheory.GlueData first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Gluing, data field V is uncovered in AlgebraicGeometry.Scheme.GlueData.
                      It might be better to declare an instance of CategoryTheory.GlueData first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Gluing, data field f is uncovered in AlgebraicGeometry.Scheme.GlueData.
                      It might be better to declare an instance of CategoryTheory.GlueData first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Gluing, data field t is uncovered in AlgebraicGeometry.Scheme.GlueData.
                      It might be better to declare an instance of CategoryTheory.GlueData first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Gluing, data field t' is uncovered in AlgebraicGeometry.Scheme.GlueData.
                      It might be better to declare an instance of CategoryTheory.GlueData first.
[3808/4301] Building Mathlib.Analysis.Calculus.ContDiff.Bounds
[3809/4301] Building Mathlib.Analysis.Calculus.IteratedDeriv.Lemmas
[3810/4301] Building Mathlib.RingTheory.WittVector.MulCoeff
[3811/4301] Building Mathlib.Geometry.Euclidean.Inversion.ImageHyperplane
[3812/4301] Building Mathlib.Analysis.Calculus.FDeriv.Symmetric
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.SmoothManifoldWithCorners, data field toFun is uncovered in ModelWithCorners.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.SmoothManifoldWithCorners, data field invFun is uncovered in ModelWithCorners.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.SmoothManifoldWithCorners, data field source is uncovered in ModelWithCorners.
                      It might be better to declare an instance of PartialEquiv first.
[3813/4301] Building Mathlib.Analysis.Calculus.ContDiff.IsROrC
[3814/4301] Building Mathlib.Analysis.Calculus.FDeriv.Extend
[3815/4301] Building Mathlib.Combinatorics.Derangements.Exponential
[3816/4301] Building Mathlib.Analysis.Complex.RealDeriv
[3817/4301] Building Mathlib.Analysis.Calculus.Taylor
[3818/4301] Building Mathlib.Analysis.Calculus.LHopital
[3819/4301] Building Mathlib.RingTheory.WittVector.Domain
[3820/4301] Building Mathlib.FieldTheory.IsAlgClosed.Spectrum
[3821/4301] Building Mathlib.LinearAlgebra.Matrix.Charpoly.Eigs
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.GroupCohomology.Basic, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3822/4301] Building Mathlib.Analysis.Calculus.UniformLimitsDeriv
[3823/4301] Building Mathlib.RingTheory.WittVector.Compare
[3824/4301] Building Mathlib.Analysis.Complex.Arg
[3825/4301] Building Mathlib.FieldTheory.IsAlgClosed.AlgebraicClosure
[3826/4301] Building Mathlib.Tactic.FunProp.AEMeasurable
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.WittVector.Compare, data field toFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.WittVector.Compare, data field invFun is uncovered in RingEquiv.
                      It might be better to declare an instance of Equiv first.
[3827/4301] Building Mathlib.Analysis.NormedSpace.AddTorsorBases
[3828/4301] Building Mathlib.Analysis.Complex.Angle
[3829/4301] Building Mathlib.Analysis.SpecialFunctions.Complex.Log
[3830/4301] Building Mathlib.RingTheory.Nullstellensatz
[3831/4301] Building Mathlib.Analysis.Analytic.Meromorphic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Restrict, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Restrict, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[3832/4301] Building Mathlib.Geometry.Manifold.InteriorBoundary
[3833/4301] Building Mathlib.NumberTheory.Liouville.Basic
[3834/4301] Building Mathlib.FieldTheory.IsAlgClosed.Classification
[3835/4301] Building Mathlib.Geometry.Manifold.ContMDiff.Defs
[3836/4301] Building Mathlib.Analysis.Calculus.InverseFunctionTheorem.ContDiff
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Nullstellensatz, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[3837/4301] Building Mathlib.Geometry.Manifold.Metrizable
[3838/4301] Building Mathlib.LinearAlgebra.Eigenspace.Triangularizable
[3839/4301] Building Mathlib.CategoryTheory.Preadditive.Schur
[3840/4301] Building Mathlib.Analysis.Convex.Intrinsic
[3841/4301] Building Mathlib.Analysis.SpecialFunctions.Complex.Circle
[3842/4301] Building Mathlib.Analysis.SpecialFunctions.Pow.Complex
[3843/4301] Building Mathlib.RingTheory.WittVector.DiscreteValuationRing
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.IsAlgClosed.AlgebraicClosure, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.IsAlgClosed.AlgebraicClosure, data field ratCast is uncovered in Field.
                      It might be better to declare an instance of RatCast first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.IsAlgClosed.AlgebraicClosure, data field inv is uncovered in Field.
                      It might be better to declare an instance of Inv first.
[3844/4301] Building Mathlib.Analysis.SpecialFunctions.ExpDeriv
[3845/4301] Building Mathlib.RingTheory.RootsOfUnity.Complex
stdout:
[Elab.StructInst.coveredFields] In Mathlib.CategoryTheory.Preadditive.Schur, data field inv is uncovered in DivisionRing.
                      It might be better to declare an instance of Inv first.
[3846/4301] Building Mathlib.AlgebraicGeometry.GammaSpecAdjunction
[3847/4301] Building Mathlib.NumberTheory.Liouville.LiouvilleNumber
[3848/4301] Building Mathlib.Analysis.Calculus.SmoothSeries
[3849/4301] Building Mathlib.NumberTheory.Liouville.Residual
[3850/4301] Building Mathlib.FieldTheory.PrimitiveElement
[3851/4301] Building Mathlib.RingTheory.WittVector.FrobeniusFractionField
[3852/4301] Building Mathlib.RepresentationTheory.FdRep
[3853/4301] Building Mathlib.FieldTheory.SeparableDegree
[3854/4301] Building Mathlib.LinearAlgebra.QuadraticForm.Complex
[3855/4301] Building Mathlib.Algebra.Lie.Weights.Basic
[3856/4301] Building Mathlib.Analysis.SpecialFunctions.Pow.Real
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.InnerProductSpace.Projection, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3857/4301] Building Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.FdRep, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[3858/4301] Building Mathlib.RingTheory.Polynomial.Hermite.Gaussian
[3859/4301] Building Mathlib.Analysis.SpecialFunctions.Log.Deriv
[3860/4301] Building Mathlib.Analysis.ODE.Gronwall
[3861/4301] Building Mathlib.Geometry.Manifold.ContMDiff.Basic
[3862/4301] Building Mathlib.Analysis.SpecialFunctions.SmoothTransition
[3863/4301] Building Mathlib.Analysis.SpecialFunctions.Trigonometric.Deriv
[3864/4301] Building Mathlib.Analysis.Convex.Cone.InnerDual
[3865/4301] Building Mathlib.Analysis.InnerProductSpace.MeanErgodic
[3866/4301] Building Mathlib.Geometry.Euclidean.Basic
[3867/4301] Building Mathlib.Analysis.InnerProductSpace.Dual
[3868/4301] Building Mathlib.RepresentationTheory.Invariants
[3869/4301] Building Mathlib.RingTheory.Polynomial.Cyclotomic.Basic
[3870/4301] Building Mathlib.RingTheory.WittVector.Isocrystal
[3871/4301] Building Mathlib.FieldTheory.Galois
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Invariants, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.Invariants, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[3872/4301] Building Mathlib.FieldTheory.Minpoly.MinpolyDiv
[3873/4301] Building Mathlib.Analysis.SpecificLimits.FloorPow
[3874/4301] Building Mathlib.Algebra.Order.CompleteField
[3875/4301] Building Mathlib.Analysis.SpecialFunctions.Log.Monotone
[3876/4301] Building Mathlib.Analysis.SpecialFunctions.Pow.NNReal
[3877/4301] Building Mathlib.LinearAlgebra.QuadraticForm.Real
[3878/4301] Building Mathlib.Analysis.Convex.SpecificFunctions.Basic
[3879/4301] Building Mathlib.Combinatorics.SimpleGraph.Regularity.Bound
[3880/4301] Building Mathlib.Analysis.SpecialFunctions.Log.Base
[3881/4301] Building Mathlib.Geometry.Manifold.ContMDiff.Atlas
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.CompleteField, data field invFun is uncovered in OrderRingIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Order.CompleteField, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[3882/4301] Building Mathlib.Geometry.Manifold.ContMDiff.Product
[3883/4301] Building Mathlib.Data.Complex.ExponentialBounds
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Galois, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Galois, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Galois, data field carrier is uncovered in IntermediateField.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Galois, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Galois, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Galois, data field toFun is uncovered in Algebra.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Galois, data field toFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.Galois, data field invFun is uncovered in RelIso.
                      It might be better to declare an instance of Equiv first.
[3884/4301] Building Mathlib.NumberTheory.ClassNumber.AdmissibleCardPowDegree
[3885/4301] Building Mathlib.Tactic.FunProp.Differentiable
[3886/4301] Building Mathlib.Analysis.Convex.Cone.Pointed
[3887/4301] Building Mathlib.RepresentationTheory.Character
[3888/4301] Building Mathlib.RepresentationTheory.GroupCohomology.LowDegree
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.SpecialFunctions.Pow.NNReal, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[3889/4301] Building Mathlib.Analysis.InnerProductSpace.LaxMilgram
[3890/4301] Building Mathlib.Algebra.Lie.Weights.Cartan
[3891/4301] Building Mathlib.RingTheory.Polynomial.Cyclotomic.Roots
[3892/4301] Building Mathlib.Geometry.Euclidean.Sphere.Basic
[3893/4301] Building Mathlib.RingTheory.Norm
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Convex.Cone.Pointed, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[3894/4301] Building Mathlib.FieldTheory.IsSepClosed
[3895/4301] Building Mathlib.FieldTheory.PolynomialGaloisGroup
[3896/4301] Building Mathlib.Analysis.Calculus.Gradient.Basic
[3897/4301] Building Mathlib.Algebra.Lie.Weights.Linear
[3898/4301] Building Mathlib.FieldTheory.Finite.GaloisField
[3899/4301] Building Mathlib.AlgebraicGeometry.AffineScheme
[3900/4301] Building Mathlib.Computability.AkraBazzi.GrowsPolynomially
[3901/4301] Building Mathlib.Analysis.Analytic.RadiusLiminf
[3902/4301] Building Mathlib.Analysis.NormedSpace.Star.Multiplier
[3903/4301] Building Mathlib.Analysis.SpecialFunctions.Pow.Asymptotics
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.PolynomialGaloisGroup, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.PolynomialGaloisGroup, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[3904/4301] Building Mathlib.Tactic.FunProp.ContDiff
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Weights.Cartan, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Weights.Cartan, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3905/4301] Building Mathlib.RingTheory.Trace
[3906/4301] Building Mathlib.MeasureTheory.Measure.Doubling
[3907/4301] Building Mathlib.Analysis.PSeries
[3908/4301] Building Mathlib.MeasureTheory.Function.SpecialFunctions.Basic
[3909/4301] Building Mathlib.Analysis.Convex.SpecificFunctions.Deriv
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Weights.Linear, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Weights.Linear, data field bracket is uncovered in LieRingModule.
                      It might be better to declare an instance of Bracket first.
[3910/4301] Building Mathlib.Analysis.SpecialFunctions.Trigonometric.InverseDeriv
[3911/4301] Building Mathlib.Combinatorics.SimpleGraph.Regularity.Chunk
[3912/4301] Building Mathlib.FieldTheory.KrullTopology
[3913/4301] Building Mathlib.Analysis.Convex.Cone.Closure
[3914/4301] Building Mathlib.Analysis.MeanInequalitiesPow
[3915/4301] Building Mathlib.Analysis.Convex.SpecificFunctions.Pow
[3916/4301] Building Mathlib.Analysis.SpecialFunctions.Arsinh
[3917/4301] Building Mathlib.FieldTheory.SeparableClosure
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.GroupCohomology.LowDegree, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.GroupCohomology.LowDegree, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.GroupCohomology.LowDegree, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.GroupCohomology.LowDegree, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.GroupCohomology.LowDegree, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[3918/4301] Building Mathlib.Geometry.Manifold.ContMDiff.NormedSpace
[3919/4301] Building Mathlib.Analysis.MeanInequalities
[3920/4301] Building Mathlib.Geometry.Euclidean.Sphere.Power
[3921/4301] Building Mathlib.Geometry.Euclidean.Sphere.SecondInter
[3922/4301] Building Mathlib.RingTheory.Polynomial.Cyclotomic.Expand
[3923/4301] Building Mathlib.RingTheory.Perfection
[3924/4301] Building Mathlib.FieldTheory.KummerExtension
[3925/4301] Building Mathlib.LinearAlgebra.FreeModule.Norm
[3926/4301] Building Mathlib.Analysis.SpecialFunctions.Log.NegMulLog
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.SeparableClosure, data field carrier is uncovered in IntermediateField.
                      It might be better to declare an instance of Subsemigroup first.
[3927/4301] Building Mathlib.Analysis.SpecialFunctions.Pow.Continuity
[3928/4301] Building Mathlib.FieldTheory.AbelRuffini
[3929/4301] Building Mathlib.MeasureTheory.Function.LpSeminorm.Basic
[3930/4301] Building Mathlib.Geometry.Euclidean.Circumcenter
[3931/4301] Building Mathlib.NumberTheory.SumPrimeReciprocals
[3932/4301] Building Mathlib.Algebra.Lie.Weights.Chain
[3933/4301] Building Mathlib.RingTheory.Polynomial.Cyclotomic.Eval
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Star.Multiplier, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Star.Multiplier, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Star.Multiplier, data field toFun is uncovered in Algebra.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Star.Multiplier, data field fst is uncovered in DoubleCentralizer.
                      It might be better to declare an instance of Prod first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Star.Multiplier, data field snd is uncovered in DoubleCentralizer.
                      It might be better to declare an instance of Prod first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Star.Multiplier, data field fst is uncovered in DoubleCentralizer.
                      It might be better to declare an instance of Prod first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Star.Multiplier, data field snd is uncovered in DoubleCentralizer.
                      It might be better to declare an instance of Prod first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Star.Multiplier, data field toFun is uncovered in NonUnitalStarAlgHom.
                      It might be better to declare an instance of MulActionHom first.
[3934/4301] Building Mathlib.NumberTheory.Bertrand
[3935/4301] Building Mathlib.Analysis.SpecialFunctions.Trigonometric.Complex
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Perfection, data field carrier is uncovered in Submonoid.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Perfection, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Perfection, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Perfection, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Perfection, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Perfection, data field toFun is uncovered in Valuation.
                      It might be better to declare an instance of ZeroHom first.
[3936/4301] Building Mathlib.FieldTheory.Cardinality
[3937/4301] Building Mathlib.NumberTheory.Liouville.LiouvilleWith
[3938/4301] Building Mathlib.Analysis.SpecialFunctions.CompareExp
[3940/4301] Building Mathlib.RepresentationTheory.GroupCohomology.Hilbert90
[3940/4301] Building Mathlib.NumberTheory.LSeries.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.KummerExtension, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.KummerExtension, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[3941/4301] Building Mathlib.Analysis.Complex.UpperHalfPlane.Metric
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Weights.Chain, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Algebra.Lie.Weights.Chain, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[3942/4301] Building Mathlib.AlgebraicGeometry.Pullbacks
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.AbelRuffini, data field carrier is uncovered in IntermediateField.
                      It might be better to declare an instance of Subsemigroup first.
[3943/4301] Building Mathlib.RingTheory.Polynomial.Eisenstein.IsIntegral
[3944/4301] Building Mathlib.RingTheory.NormTrace
[3945/4301] Building Mathlib.RingTheory.Complex
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RepresentationTheory.GroupCohomology.Hilbert90, data field default is uncovered in Unique.
                      It might be better to declare an instance of Inhabited first.
[3946/4301] Building Mathlib.RingTheory.DedekindDomain.IntegralClosure
[3947/4301] Building Mathlib.FieldTheory.AbsoluteGaloisGroup
[3949/4301] Building Mathlib.RingTheory.Discriminant
[3949/4301] Building Mathlib.FieldTheory.Finite.Trace
[3950/4301] Building Mathlib.FieldTheory.PurelyInseparable
[3951/4301] Building Mathlib.Combinatorics.SimpleGraph.Regularity.Increment
[3952/4301] Building Mathlib.AlgebraicGeometry.EllipticCurve.Group
[3953/4301] Building Mathlib.Topology.MetricSpace.Holder
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.DedekindDomain.IntegralClosure, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[3954/4301] Building Mathlib.Analysis.NormedSpace.ProdLp
[3955/4301] Building Mathlib.MeasureTheory.Function.LpSeminorm.Trim
[3956/4301] Building Mathlib.MeasureTheory.Function.LpSeminorm.ChebyshevMarkov
[3957/4301] Building Mathlib.RingTheory.LittleWedderburn
[3958/4301] Building Mathlib.NumberTheory.PrimesCongruentOne
[3959/4301] Building Mathlib.AlgebraicGeometry.Properties
[3960/4301] Building Mathlib.MeasureTheory.Integral.MeanInequalities
[3961/4301] Building Mathlib.Analysis.SpecialFunctions.Trigonometric.ComplexDeriv
[3962/4301] Building Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan
[3963/4301] Building Mathlib.Analysis.NormedSpace.PiLp
[3964/4301] Building Mathlib.NumberTheory.LSeries.Convergence
[3965/4301] Building Mathlib.Analysis.NormedSpace.lpSpace
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Pullbacks, data field J is uncovered in AlgebraicGeometry.Scheme.GlueData.
                      It might be better to declare an instance of CategoryTheory.GlueData first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Pullbacks, data field U is uncovered in AlgebraicGeometry.Scheme.GlueData.
                      It might be better to declare an instance of CategoryTheory.GlueData first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Pullbacks, data field V is uncovered in AlgebraicGeometry.Scheme.GlueData.
                      It might be better to declare an instance of CategoryTheory.GlueData first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Pullbacks, data field f is uncovered in AlgebraicGeometry.Scheme.GlueData.
                      It might be better to declare an instance of CategoryTheory.GlueData first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Pullbacks, data field t is uncovered in AlgebraicGeometry.Scheme.GlueData.
                      It might be better to declare an instance of CategoryTheory.GlueData first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.Pullbacks, data field t' is uncovered in AlgebraicGeometry.Scheme.GlueData.
                      It might be better to declare an instance of CategoryTheory.GlueData first.
[3966/4301] Building Mathlib.Geometry.Euclidean.MongePoint
[3967/4301] Building Mathlib.NumberTheory.NumberField.Basic
[3968/4301] Building Mathlib.Combinatorics.SimpleGraph.Regularity.Lemma
[3969/4301] Building Mathlib.RingTheory.Localization.NormTrace
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan, data field toFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan, data field invFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan, data field source is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan, data field target is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[3970/4301] Building Mathlib.NumberTheory.ClassNumber.Finite
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Complex.UpperHalfPlane.Metric, data field dist is uncovered in MetricSpace.
                      It might be better to declare an instance of Dist first.
[3971/4301] Building Mathlib.Analysis.SpecialFunctions.Pow.Deriv
[3972/4301] Building Mathlib.Algebra.Lie.Killing
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.NumberField.Basic, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[3973/4301] Building Mathlib.NumberTheory.FunctionField
[3974/4301] Building Mathlib.RingTheory.DedekindDomain.Different
stdout:
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.EllipticCurve.Group, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.EllipticCurve.Group, data field nsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of AddMonoid first.
[Elab.StructInst.coveredFields] In Mathlib.AlgebraicGeometry.EllipticCurve.Group, data field zsmul is uncovered in AddCommGroup.
                      It might be better to declare an instance of SubNegMonoid first.
[3975/4301] Building Mathlib.Analysis.NormedSpace.TrivSqZeroExt
[3976/4301] Building Mathlib.Geometry.Manifold.VectorBundle.FiberwiseLinear
stdout:
[Elab.StructInst.coveredFields] In Mathlib.FieldTheory.PurelyInseparable, data field carrier is uncovered in IntermediateField.
                      It might be better to declare an instance of Subsemigroup first.
[3977/4301] Building Mathlib.Geometry.Manifold.ContMDiffMap
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.FunctionField, data field toFun is uncovered in Valuation.
                      It might be better to declare an instance of ZeroHom first.
[3978/4301] Building Mathlib.MeasureTheory.Function.LpSeminorm.CompareExp
[3979/4301] Building Mathlib.MeasureTheory.Function.LpSeminorm.TriangleInequality
[3980/4301] Building Mathlib.AlgebraicGeometry.Sites.BigZariski
[3981/4301] Building Mathlib.AlgebraicGeometry.Limits
[3982/4301] Building Mathlib.MeasureTheory.Function.SpecialFunctions.Arctan
[3983/4301] Building Mathlib.Geometry.Euclidean.Angle.Unoriented.RightAngle
[3984/4301] Building Mathlib.Analysis.SpecialFunctions.Trigonometric.ArctanDeriv
[3985/4301] Building Mathlib.RingTheory.Ideal.Norm
[3986/4301] Building Mathlib.AlgebraicGeometry.Morphisms.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.VectorBundle.FiberwiseLinear, data field toFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.VectorBundle.FiberwiseLinear, data field invFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.VectorBundle.FiberwiseLinear, data field source is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.VectorBundle.FiberwiseLinear, data field target is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[3987/4301] Building Mathlib.AlgebraicGeometry.FunctionField
[3988/4301] Building Mathlib.NumberTheory.Cyclotomic.Basic
[3989/4301] Building Mathlib.NumberTheory.NumberField.Norm
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.lpSpace, data field carrier is uncovered in AddSubgroup.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.lpSpace, data field toFun is uncovered in AddGroupNorm.
                      It might be better to declare an instance of AddGroupSeminorm first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.lpSpace, data field carrier is uncovered in Subring.
                      It might be better to declare an instance of Subsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.lpSpace, data field carrier is uncovered in Subalgebra.
                      It might be better to declare an instance of Subsemigroup first.
[3990/4301] Building Mathlib.Geometry.Manifold.Algebra.Monoid
[3991/4301] Building Mathlib.RingTheory.IntegralRestrict
[3992/4301] Building Mathlib.Analysis.InnerProductSpace.PiL2
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.Norm, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.Ideal.Norm, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[3993/4301] Building Mathlib.NumberTheory.ClassNumber.FunctionField
[3994/4301] Building Mathlib.Analysis.SpecialFunctions.Trigonometric.Bounds
[3995/4301] Building Mathlib.Geometry.Manifold.VectorBundle.Basic
[3996/4301] Building Mathlib.Computability.AkraBazzi.AkraBazzi
[3997/4301] Building Mathlib.Topology.MetricSpace.Kuratowski
[3998/4301] Building Mathlib.MeasureTheory.Function.LpSpace
[3999/4301] Building Mathlib.RingTheory.FractionalIdeal.Norm
[4000/4301] Building Mathlib.Analysis.NormedSpace.LpEquiv
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.Kuratowski, data field carrier is uncovered in TopologicalSpace.NonemptyCompacts.
                      It might be better to declare an instance of TopologicalSpace.Compacts first.
[4001/4301] Building Mathlib.AlgebraicGeometry.Morphisms.OpenImmersion
[4002/4301] Building Mathlib.AlgebraicGeometry.Morphisms.UniversallyClosed
[4003/4301] Building Mathlib.AlgebraicGeometry.Morphisms.RingHomProperties
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.LpEquiv, data field toFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.LpEquiv, data field invFun is uncovered in AddEquiv.
                      It might be better to declare an instance of Equiv first.
[4004/4301] Building Mathlib.Analysis.NormedSpace.DualNumber
[4005/4301] Building Mathlib.AlgebraicGeometry.Morphisms.QuasiCompact
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.FractionalIdeal.Norm, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[4006/4301] Building Mathlib.Geometry.Manifold.Algebra.LieGroup
[4007/4301] Building Mathlib.Topology.MetricSpace.GromovHausdorff
[4008/4301] Building Mathlib.Data.Real.Pi.Bounds
[4009/4301] Building Mathlib.Geometry.Manifold.VectorBundle.Pullback
[4010/4301] Building Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots
[4011/4301] Building Mathlib.NumberTheory.NumberField.FractionalIdeal
[4012/4301] Building Mathlib.Geometry.Manifold.VectorBundle.Hom
[4013/4301] Building Mathlib.Geometry.Manifold.VectorBundle.Tangent
stdout:
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.IntegralRestrict, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.IntegralRestrict, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.RingTheory.IntegralRestrict, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[4014/4301] Building Mathlib.Geometry.Manifold.Instances.UnitsOfNormedAlgebra
[4015/4301] Building Mathlib.Geometry.Manifold.Algebra.Structures
[4016/4301] Building Mathlib.Mathport.Syntax
[4017/4301] Building Mathlib.AlgebraicGeometry.Morphisms.QuasiSeparated
[4018/4301] Building Mathlib.Geometry.Manifold.Algebra.SmoothFunctions
[4019/4301] Building Mathlib.Geometry.Manifold.MFDeriv.Defs
[4020/4301] Building Mathlib.NumberTheory.LegendreSymbol.AddCharacter
[4021/4301] Building Mathlib.NumberTheory.Cyclotomic.Gal
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.InnerProductSpace.PiL2, data field inner is uncovered in InnerProductSpace.
                      It might be better to declare an instance of Inner first.
[4022/4301] Building Mathlib.Geometry.Manifold.MFDeriv.Basic
[4023/4301] Building Mathlib.Analysis.InnerProductSpace.l2Space
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Topology.MetricSpace.GromovHausdorff, data field dist is uncovered in MetricSpace.
                      It might be better to declare an instance of Dist first.
[4024/4301] Building Mathlib.Analysis.Matrix
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.LegendreSymbol.AddCharacter, data field inv is uncovered in CommGroup.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.LegendreSymbol.AddCharacter, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[4025/4301] Building Mathlib.Analysis.InnerProductSpace.Adjoint
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.Cyclotomic.Gal, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[4026/4301] Building Mathlib.Geometry.Manifold.Instances.Real
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Algebra.SmoothFunctions, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Algebra.SmoothFunctions, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Algebra.SmoothFunctions, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Algebra.SmoothFunctions, data field inv is uncovered in Group.
                      It might be better to declare an instance of Inv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Algebra.SmoothFunctions, data field div is uncovered in Group.
                      It might be better to declare an instance of Div first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Algebra.SmoothFunctions, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Algebra.SmoothFunctions, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Algebra.SmoothFunctions, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Algebra.SmoothFunctions, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Algebra.SmoothFunctions, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Algebra.SmoothFunctions, data field smul is uncovered in Algebra.
                      It might be better to declare an instance of SMul first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Algebra.SmoothFunctions, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Algebra.SmoothFunctions, data field smul is uncovered in Module.
                      It might be better to declare an instance of SMul first.
[4027/4301] Building Mathlib.MeasureTheory.Measure.Haar.OfBasis
[4028/4301] Building Mathlib.Analysis.Quaternion
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Real, data field toFun is uncovered in ModelWithCorners.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Real, data field invFun is uncovered in ModelWithCorners.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Real, data field source is uncovered in ModelWithCorners.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Real, data field target is uncovered in ModelWithCorners.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Real, data field toFun is uncovered in ModelWithCorners.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Real, data field invFun is uncovered in ModelWithCorners.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Real, data field source is uncovered in ModelWithCorners.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Real, data field target is uncovered in ModelWithCorners.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Real, data field source is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Real, data field target is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Real, data field toFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Real, data field invFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Real, data field source is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Real, data field target is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Real, data field toFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Real, data field invFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[4029/4301] Building Mathlib.LinearAlgebra.Matrix.Hermitian
stdout:
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.LpSpace, data field carrier is uncovered in AddSubgroup.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.LpSpace, data field edist is uncovered in NormedAddCommGroup.
                      It might be better to declare an instance of PseudoMetricSpace first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.LpSpace, data field toFun is uncovered in AddGroupNorm.
                      It might be better to declare an instance of AddGroupSeminorm first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.LpSpace, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.LpSpace, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.LpSpace, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.LpSpace, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[4030/4301] Building Mathlib.Analysis.InnerProductSpace.ProdL2
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Quaternion, data field toFun is uncovered in AlgHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Quaternion, data field toFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Quaternion, data field invFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of LinearEquiv first.
[4031/4301] Building Mathlib.Analysis.InnerProductSpace.GramSchmidtOrtho
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Matrix, data field norm is uncovered in NormedRing.
                      It might be better to declare an instance of Norm first.
[4032/4301] Building Mathlib.Analysis.InnerProductSpace.Calculus
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.InnerProductSpace.ProdL2, data field inner is uncovered in InnerProductSpace.
                      It might be better to declare an instance of Inner first.
[4033/4301] Building Mathlib.Combinatorics.Additive.Behrend
[4034/4301] Building Mathlib.Geometry.Manifold.Sheaf.Smooth
stdout:
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.Haar.OfBasis, data field carrier is uncovered in TopologicalSpace.PositiveCompacts.
                      It might be better to declare an instance of TopologicalSpace.Compacts first.
[4035/4301] Building Mathlib.Geometry.Manifold.DerivationBundle
[4036/4301] Building Mathlib.MeasureTheory.Function.ConvergenceInMeasure
[4037/4301] Building Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic
[4038/4301] Building Mathlib.MeasureTheory.Function.LpOrder
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.InnerProductSpace.l2Space, data field inner is uncovered in InnerProductSpace.
                      It might be better to declare an instance of Inner first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.InnerProductSpace.l2Space, data field toFun is uncovered in LinearIsometry.
                      It might be better to declare an instance of AddHom first.
[4039/4301] Building Mathlib.NumberTheory.LegendreSymbol.GaussSum
[4040/4301] Building Mathlib.Analysis.NormedSpace.QuaternionExponential
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.Additive.Behrend, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Combinatorics.Additive.Behrend, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[4041/4301] Building Mathlib.MeasureTheory.Measure.Lebesgue.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Sheaf.Smooth, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Sheaf.Smooth, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Sheaf.Smooth, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Sheaf.Smooth, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Sheaf.Smooth, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Sheaf.Smooth, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Sheaf.Smooth, data field obj is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Sheaf.Smooth, data field map is uncovered in CategoryTheory.Functor.
                      It might be better to declare an instance of Prefunctor first.
[4042/4301] Building Mathlib.Analysis.Complex.UpperHalfPlane.Manifold
[4043/4301] Building Mathlib.Geometry.Manifold.MFDeriv.FDeriv
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.DerivationBundle, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.DerivationBundle, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[4044/4301] Building Mathlib.Analysis.NormedSpace.MatrixExponential
[4045/4301] Building Mathlib.Analysis.InnerProductSpace.Orientation
[4046/4301] Building Mathlib.Geometry.Manifold.VectorBundle.SmoothSection
[4047/4301] Building Mathlib.Geometry.Manifold.Sheaf.LocallyRingedSpace
[4048/4301] Building Mathlib.MeasureTheory.Function.L1Space
[4049/4301] Building Mathlib.Geometry.Manifold.Algebra.LeftInvariantDerivation
[4050/4301] Building Mathlib.Analysis.Calculus.BumpFunction.InnerProduct
[4051/4301] Building Mathlib.Geometry.Euclidean.Inversion.Calculus
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Sheaf.LocallyRingedSpace, data field carrier is uncovered in AlgebraicGeometry.LocallyRingedSpace.
                      It might be better to declare an instance of AlgebraicGeometry.PresheafedSpace first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Sheaf.LocallyRingedSpace, data field presheaf is uncovered in AlgebraicGeometry.LocallyRingedSpace.
                      It might be better to declare an instance of AlgebraicGeometry.PresheafedSpace first.
[4052/4301] Building Mathlib.Analysis.InnerProductSpace.EuclideanDist
[4053/4301] Building Mathlib.Geometry.Manifold.MFDeriv.SpecificFunctions
[4054/4301] Building Mathlib.Geometry.Manifold.Instances.Sphere
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.VectorBundle.SmoothSection, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[4055/4301] Building Mathlib.NumberTheory.LegendreSymbol.QuadraticChar.GaussSum
[4056/4301] Building Mathlib.MeasureTheory.Constructions.UnitInterval
[4057/4301] Building Mathlib.Analysis.BoxIntegral.Partition.Measure
[4058/4301] Building Mathlib.MeasureTheory.Measure.Hausdorff
[4059/4301] Building Mathlib.MeasureTheory.Measure.Lebesgue.EqHaar
[4060/4301] Building Mathlib.NumberTheory.Liouville.Measure
[4061/4301] Building Mathlib.AlgebraicGeometry.Morphisms.FiniteType
[4062/4301] Building Mathlib.Analysis.InnerProductSpace.TwoDim
[4063/4301] Building Mathlib.NumberTheory.LegendreSymbol.QuadraticReciprocity
[4064/4301] Building Mathlib.Analysis.BoxIntegral.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.InnerProductSpace.Adjoint, data field toFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.InnerProductSpace.Adjoint, data field invFun is uncovered in MulEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.InnerProductSpace.Adjoint, data field invFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of LinearEquiv first.
[4065/4301] Building Mathlib.Analysis.Convex.Cone.Proper
[4066/4301] Building Mathlib.Analysis.InnerProductSpace.Positive
stdout:
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.L1Space, data field toFun is uncovered in LinearIsometry.
                      It might be better to declare an instance of AddHom first.
[4067/4301] Building Mathlib.Analysis.VonNeumannAlgebra.Basic
[4068/4301] Building Mathlib.Analysis.InnerProductSpace.LinearPMap
[4069/4301] Building Mathlib.Analysis.InnerProductSpace.Rayleigh
[4070/4301] Building Mathlib.NumberTheory.LegendreSymbol.JacobiSymbol
[4071/4301] Building Mathlib.MeasureTheory.Function.UniformIntegrable
[4072/4301] Building Mathlib.Analysis.NormedSpace.Star.Matrix
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Algebra.LeftInvariantDerivation, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[4073/4301] Building Mathlib.MeasureTheory.Function.SimpleFuncDenseLp
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.InnerProductSpace.LinearPMap, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.InnerProductSpace.LinearPMap, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[4074/4301] Building Mathlib.MeasureTheory.Integral.IntegrableOn
[4075/4301] Building Mathlib.Geometry.Manifold.MFDeriv.Atlas
stdout:
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.Lebesgue.EqHaar, data field carrier is uncovered in TopologicalSpace.PositiveCompacts.
                      It might be better to declare an instance of TopologicalSpace.Compacts first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.Lebesgue.EqHaar, data field carrier is uncovered in TopologicalSpace.PositiveCompacts.
                      It might be better to declare an instance of TopologicalSpace.Compacts first.
[4076/4301] Building Mathlib.NumberTheory.ModularForms.Basic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.LegendreSymbol.JacobiSymbol, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[4077/4301] Building Mathlib.Topology.MetricSpace.HausdorffDimension
[4078/4301] Building Mathlib.MeasureTheory.Measure.Haar.InnerProductSpace
[4079/4301] Building Mathlib.Analysis.Convex.Measure
[4080/4301] Building Mathlib.Tactic.NormNum.LegendreSymbol
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.MFDeriv.Atlas, data field invFun is uncovered in ContinuousLinearEquiv.
                      It might be better to declare an instance of LinearEquiv first.
[4081/4301] Building Mathlib.Analysis.BoxIntegral.DivergenceTheorem
[4082/4301] Building Mathlib.MeasureTheory.Integral.Asymptotics
[4083/4301] Building Mathlib.MeasureTheory.Function.LocallyIntegrable
[4084/4301] Building Mathlib.Geometry.Manifold.MFDeriv.UniqueDifferential
[4085/4301] Building Mathlib.Geometry.Euclidean.Angle.Oriented.Basic
[4086/4301] Building Mathlib.Analysis.InnerProductSpace.Spectrum
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.ModularForms.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.ModularForms.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.ModularForms.Basic, data field toFun is uncovered in ModularForm.
                      It might be better to declare an instance of SlashInvariantForm first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.ModularForms.Basic, data field natCast is uncovered in DirectSum.GCommRing.
                      It might be better to declare an instance of DirectSum.GSemiring first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.ModularForms.Basic, data field intCast is uncovered in DirectSum.GCommRing.
                      It might be better to declare an instance of DirectSum.GRing first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.ModularForms.Basic, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[4087/4301] Building Mathlib.MeasureTheory.Measure.Lebesgue.Complex
[4088/4301] Building Mathlib.Geometry.Manifold.Diffeomorph
[4089/4301] Building Mathlib.Geometry.Manifold.ContMDiffMFDeriv
[4090/4301] Building Mathlib.Tactic
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Sphere, data field toFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Sphere, data field invFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Sphere, data field source is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.Instances.Sphere, data field target is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[4095/4301] Building Mathlib.LinearAlgebra.Matrix.Spectrum
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Star.Matrix, data field norm is uncovered in NormedAddCommGroup.
                      It might be better to declare an instance of Norm first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Star.Matrix, data field norm is uncovered in NormedAddCommGroup.
                      It might be better to declare an instance of Norm first.
stdout:
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.SimpleFuncDenseLp, data field carrier is uncovered in AddSubgroup.
                      It might be better to declare an instance of AddSubsemigroup first.
[4097/4301] Building Mathlib.MeasureTheory.Function.StronglyMeasurable.Lp
[4097/4301] Building Mathlib.MeasureTheory.Integral.SetToL1
[4098/4301] Building Mathlib.Geometry.Manifold.LocalDiffeomorph
[4100/4301] Building Mathlib.LinearAlgebra.Matrix.PosDef
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.LocalDiffeomorph, data field toFun is uncovered in Diffeomorph.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Geometry.Manifold.LocalDiffeomorph, data field invFun is uncovered in Diffeomorph.
                      It might be better to declare an instance of Equiv first.
stdout:
[Elab.StructInst.coveredFields] In Mathlib.LinearAlgebra.Matrix.PosDef, data field inner is uncovered in InnerProductSpace.Core.
                      It might be better to declare an instance of Inner first.
[4103/4301] Building Mathlib.LinearAlgebra.Matrix.LDL
[4103/4301] Building Mathlib.LinearAlgebra.Matrix.SchurComplement
[4103/4301] Building Mathlib.Combinatorics.SimpleGraph.LapMatrix
[4105/4301] Building Mathlib.Geometry.Euclidean.Angle.Oriented.Rotation
[4108/4301] Building Mathlib.Geometry.Euclidean.Angle.Oriented.Affine
[4109/4301] Building Mathlib.Geometry.Euclidean.Triangle
[4109/4301] Building Mathlib.Geometry.Euclidean.Angle.Oriented.RightAngle
[4110/4301] Building Mathlib.MeasureTheory.Integral.Bochner
[4111/4301] Building Mathlib.Geometry.Euclidean.Sphere.Ptolemy
[4112/4301] Building Mathlib.Geometry.Euclidean.Angle.Sphere
[4115/4301] Building Mathlib.Probability.ProbabilityMassFunction.Integrals
[4115/4301] Building Mathlib.MeasureTheory.Integral.BoundedContinuousFunction
[4115/4301] Building Mathlib.MeasureTheory.Group.Integral
[4115/4301] Building Mathlib.MeasureTheory.Function.ContinuousMapDense
[4115/4301] Building Mathlib.MeasureTheory.Integral.SetIntegral
[4115/4301] Building Mathlib.MeasureTheory.Integral.VitaliCaratheodory
[4115/4301] Building Mathlib.Probability.Kernel.Basic
[4115/4301] Building Mathlib.MeasureTheory.Function.ConditionalExpectation.AEMeasurable
[4117/4301] Building Mathlib.MeasureTheory.Measure.FiniteMeasure
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Probability.Kernel.Basic, data field carrier is uncovered in AddSubmonoid.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.Probability.Kernel.Basic, data field bot is uncovered in OrderBot.
                      It might be better to declare an instance of Bot first.
[4119/4301] Building Mathlib.Probability.Independence.Kernel
stdout:
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.ConditionalExpectation.AEMeasurable, data field carrier is uncovered in AddSubgroup.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.ConditionalExpectation.AEMeasurable, data field carrier is uncovered in Submodule.
                      It might be better to declare an instance of AddSubsemigroup first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.ConditionalExpectation.AEMeasurable, data field toFun is uncovered in IsometryEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.ConditionalExpectation.AEMeasurable, data field invFun is uncovered in IsometryEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.ConditionalExpectation.AEMeasurable, data field toFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.ConditionalExpectation.AEMeasurable, data field invFun is uncovered in LinearIsometryEquiv.
                      It might be better to declare an instance of LinearEquiv first.
stdout:
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.FiniteMeasure, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.FiniteMeasure, data field toFun is uncovered in ContinuousLinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.FiniteMeasure, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.FiniteMeasure, data field toFun is uncovered in ContinuousLinearMap.
                      It might be better to declare an instance of AddHom first.
[4124/4301] Building Mathlib.Probability.Independence.Basic
[4125/4301] Building Mathlib.MeasureTheory.Measure.Haar.NormedSpace
[4125/4301] Building Mathlib.Analysis.Calculus.BumpFunction.Normed
[4125/4301] Building Mathlib.Analysis.BoxIntegral.Integrability
[4125/4301] Building Mathlib.MeasureTheory.Function.AEEqOfIntegral
[4125/4301] Building Mathlib.MeasureTheory.Group.FundamentalDomain
[4125/4301] Building Mathlib.MeasureTheory.Function.L2Space
[4125/4301] Building Mathlib.MeasureTheory.Integral.IntervalIntegral
[4125/4301] Building Mathlib.MeasureTheory.Integral.Average
[4127/4301] Building Mathlib.Probability.Integration
[4131/4301] Building Mathlib.MeasureTheory.Measure.WithDensityVectorMeasure
[4131/4301] Building Mathlib.MeasureTheory.Decomposition.Lebesgue
[4131/4301] Building Mathlib.MeasureTheory.Function.ConditionalExpectation.Unique
[4133/4301] Building Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2
[4135/4301] Building Mathlib.Analysis.Convex.Integral
[4135/4301] Building Mathlib.MeasureTheory.Measure.ProbabilityMeasure
[4136/4301] Building Mathlib.MeasureTheory.Group.GeometryOfNumbers
[4136/4301] Building Mathlib.Algebra.Module.Zlattice
[4137/4301] Building Mathlib.MeasureTheory.Integral.IntervalAverage
[4137/4301] Building Mathlib.Analysis.SumIntegralComparisons
[4137/4301] Building Mathlib.MeasureTheory.Integral.DominatedConvergence
[4140/4301] Building Mathlib.MeasureTheory.Decomposition.SignedLebesgue
[4140/4301] Building Mathlib.MeasureTheory.Covering.Differentiation
[4143/4301] Building Mathlib.MeasureTheory.Measure.LevyProkhorovMetric
[4143/4301] Building Mathlib.MeasureTheory.Measure.FiniteMeasureProd
[4144/4301] Building Mathlib.MeasureTheory.Integral.FundThmCalculus
[4144/4301] Building Mathlib.MeasureTheory.Constructions.Prod.Integral
[4144/4301] Building Mathlib.MeasureTheory.Measure.Haar.Quotient
[4144/4301] Building Mathlib.Analysis.Calculus.ParametricIntegral
stdout:
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.LevyProkhorovMetric, data field edist is uncovered in PseudoEMetricSpace.
                      It might be better to declare an instance of EDist first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.LevyProkhorovMetric, data field dist is uncovered in PseudoMetricSpace.
                      It might be better to declare an instance of Dist first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.LevyProkhorovMetric, data field dist is uncovered in PseudoMetricSpace.
                      It might be better to declare an instance of Dist first.
[4145/4301] Building Mathlib.Probability.Kernel.MeasurableIntegral
[4147/4301] Building Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1
[4149/4301] Building Mathlib.MeasureTheory.Covering.DensityTheorem
[4149/4301] Building Mathlib.MeasureTheory.Covering.Besicovitch
[4150/4301] Building Mathlib.Probability.Kernel.Composition
[4150/4301] Building Mathlib.Probability.Kernel.WithDensity
[4151/4301] Building Mathlib.Analysis.Calculus.ParametricIntervalIntegral
[4152/4301] Building Mathlib.MeasureTheory.Integral.Periodic
[4153/4301] Building Mathlib.MeasureTheory.Integral.Pi
[4154/4301] Building Mathlib.Analysis.Fourier.FourierTransform
[4155/4301] Building Mathlib.MeasureTheory.Integral.DivergenceTheorem
[4156/4301] Building Mathlib.MeasureTheory.Covering.LiminfLimsup
[4157/4301] Building Mathlib.Analysis.Convolution
[4158/4301] Building Mathlib.MeasureTheory.Covering.OneDim
[4159/4301] Building Mathlib.MeasureTheory.Measure.Haar.Unique
[4160/4301] Building Mathlib.MeasureTheory.Decomposition.RadonNikodym
[4161/4301] Building Mathlib.MeasureTheory.Covering.BesicovitchVectorSpace
[4162/4301] Building Mathlib.MeasureTheory.Group.AddCircle
[4163/4301] Building Mathlib.Analysis.Calculus.Monotone
stdout:
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1, data field toFun is uncovered in ContinuousLinearMap.
                      It might be better to declare an instance of AddHom first.
[4164/4301] Building Mathlib.Analysis.Fourier.AddCircle
[4165/4301] Building Mathlib.Analysis.SpecialFunctions.NonIntegrable
[4166/4301] Building Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic
[4167/4301] Building Mathlib.Probability.Kernel.Invariance
[4168/4301] Building Mathlib.MeasureTheory.Measure.Tilted
[4169/4301] Building Mathlib.Probability.Kernel.IntegralCompProd
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Fourier.FourierTransform, data field toFun is uncovered in MonoidHom.
                      It might be better to declare an instance of OneHom first.
[4170/4301] Building Mathlib.Probability.Kernel.CondCdf
[4171/4301] Building Mathlib.Probability.Density
[4172/4301] Building Mathlib.Analysis.SpecialFunctions.Integrals
[4173/4301] Building Mathlib.MeasureTheory.Integral.CircleIntegral
[4174/4301] Building Mathlib.Analysis.BoundedVariation
[4175/4301] Building Mathlib.MeasureTheory.Function.ConditionalExpectation.Indicator
[4176/4301] Building Mathlib.Probability.Notation
[4177/4301] Building Mathlib.Probability.Kernel.MeasureCompProd
[4178/4301] Building Mathlib.MeasureTheory.Function.Jacobian
[4179/4301] Building Mathlib.Analysis.Fourier.RiemannLebesgueLemma
[4180/4301] Building Mathlib.Dynamics.Ergodic.AddCircle
[4181/4301] Building Mathlib.MeasureTheory.Measure.Lebesgue.Integral
[4182/4301] Building Mathlib.MeasureTheory.Measure.Haar.Disintegration
[4183/4301] Building Mathlib.MeasureTheory.Measure.LogLikelihoodRatio
[4184/4301] Building Mathlib.Probability.Cdf
[4185/4301] Building Mathlib.Probability.Distributions.Poisson
[4186/4301] Building Mathlib.Probability.Distributions.Geometric
[4187/4301] Building Mathlib.Analysis.Fourier.FourierTransformDeriv
[4188/4301] Building Mathlib.NumberTheory.ZetaValues
[4189/4301] Building Mathlib.Probability.Variance
[4190/4301] Building Mathlib.Probability.ConditionalExpectation
[4191/4301] Building Mathlib.Probability.Kernel.Disintegration
[4192/4301] Building Mathlib.MeasureTheory.Function.ConditionalExpectation.Real
[4193/4301] Building Mathlib.Probability.Distributions.Uniform
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Fourier.RiemannLebesgueLemma, data field toFun is uncovered in LinearEquiv.
                      It might be better to declare an instance of AddHom first.
[4194/4301] Building Mathlib.NumberTheory.WellApproximable
[4195/4301] Building Mathlib.Analysis.ConstantSpeed
[4196/4301] Building Mathlib.MeasureTheory.Integral.TorusIntegral
[4197/4301] Building Mathlib.MeasureTheory.Integral.CircleTransform
[4198/4301] Building Mathlib.Probability.Process.Filtration
[4199/4301] Building Mathlib.Probability.Kernel.CondDistrib
[4200/4301] Building Mathlib.MeasureTheory.Integral.Layercake
[4201/4301] Building Mathlib.Data.Real.Pi.Wallis
[4202/4301] Building Mathlib.Analysis.SpecialFunctions.Complex.LogBounds
[4203/4301] Building Mathlib.Analysis.ODE.PicardLindelof
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Probability.Process.Filtration, data field le is uncovered in CompleteLattice.
                      It might be better to declare an instance of LE first.
[Elab.StructInst.coveredFields] In Mathlib.Probability.Process.Filtration, data field sup is uncovered in CompleteLattice.
                      It might be better to declare an instance of Sup first.
[Elab.StructInst.coveredFields] In Mathlib.Probability.Process.Filtration, data field inf is uncovered in CompleteLattice.
                      It might be better to declare an instance of Inf first.
[Elab.StructInst.coveredFields] In Mathlib.Probability.Process.Filtration, data field sSup is uncovered in CompleteLattice.
                      It might be better to declare an instance of SupSet first.
[Elab.StructInst.coveredFields] In Mathlib.Probability.Process.Filtration, data field sInf is uncovered in CompleteLattice.
                      It might be better to declare an instance of InfSet first.
[Elab.StructInst.coveredFields] In Mathlib.Probability.Process.Filtration, data field top is uncovered in CompleteLattice.
                      It might be better to declare an instance of Top first.
[Elab.StructInst.coveredFields] In Mathlib.Probability.Process.Filtration, data field bot is uncovered in CompleteLattice.
                      It might be better to declare an instance of Bot first.
[4204/4301] Building Mathlib.MeasureTheory.Constructions.HaarToSphere
[4205/4301] Building Mathlib.NumberTheory.Harmonic.Bounds
[4206/4301] Building Mathlib.Analysis.Complex.CauchyIntegral
[4207/4301] Building Mathlib.Probability.Moments
[4208/4301] Building Mathlib.Probability.IdentDistrib
[4209/4301] Building Mathlib.MeasureTheory.Integral.IntegralEqImproper
[4210/4301] Building Mathlib.Probability.Kernel.Condexp
[4211/4301] Building Mathlib.Probability.Process.Adapted
[4212/4301] Building Mathlib.Analysis.SpecialFunctions.Stirling
[4213/4301] Building Mathlib.Analysis.SpecialFunctions.PolarCoord
[4214/4301] Building Mathlib.Analysis.SpecialFunctions.JapaneseBracket
[4215/4301] Building Mathlib.MeasureTheory.Measure.Portmanteau
[4216/4301] Building Mathlib.Geometry.Manifold.IntegralCurve
[4217/4301] Building Mathlib.Probability.Process.Stopping
[4218/4301] Building Mathlib.Analysis.SpecialFunctions.Complex.Arctan
[4219/4301] Building Mathlib.Probability.StrongLaw
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.SpecialFunctions.PolarCoord, data field toFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.SpecialFunctions.PolarCoord, data field invFun is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.SpecialFunctions.PolarCoord, data field source is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.SpecialFunctions.PolarCoord, data field target is uncovered in PartialHomeomorph.
                      It might be better to declare an instance of PartialEquiv first.
[4220/4301] Building Mathlib.Probability.Independence.Conditional
[4221/4301] Building Mathlib.Analysis.Complex.RemovableSingularity
[4222/4301] Building Mathlib.Analysis.Complex.TaylorSeries
[4223/4301] Building Mathlib.Analysis.SpecialFunctions.Complex.Analytic
[4224/4301] Building Mathlib.Analysis.Complex.Liouville
[4225/4301] Building Mathlib.Analysis.Complex.AbsMax
[4226/4301] Building Mathlib.MeasureTheory.Integral.ExpDecay
[4227/4301] Building Mathlib.Data.Real.Pi.Leibniz
[4228/4301] Building Mathlib.MeasureTheory.Integral.PeakFunction
[4229/4301] Building Mathlib.Analysis.Distribution.SchwartzSpace
[4230/4301] Building Mathlib.Analysis.Complex.LocallyUniformLimit
[4231/4301] Building Mathlib.Analysis.SpecialFunctions.ImproperIntegrals
[4232/4301] Building Mathlib.Probability.Martingale.Basic
[4233/4301] Building Mathlib.Probability.Process.HittingTime
[4234/4301] Building Mathlib.Analysis.Calculus.BumpFunction.FiniteDimension
[4235/4301] Building Mathlib.Analysis.Calculus.BumpFunction.Convolution
[4236/4301] Building Mathlib.Probability.Independence.ZeroOne
[4237/4301] Building Mathlib.Analysis.Complex.OpenMapping
[4238/4301] Building Mathlib.Analysis.Complex.Polynomial
[4239/4301] Building Mathlib.Analysis.Complex.Schwarz
[4240/4301] Building Mathlib.Analysis.Complex.PhragmenLindelof
[4241/4301] Building Mathlib.Geometry.Manifold.Complex
[4242/4301] Building Mathlib.Analysis.MellinTransform
[4244/4301] Building Mathlib.Probability.Martingale.OptionalStopping
[4244/4301] Building Mathlib.Probability.Martingale.Upcrossing
[4246/4301] Building Mathlib.Probability.Martingale.Centering
[4246/4301] Building Mathlib.Probability.Martingale.OptionalSampling
[4247/4301] Building Mathlib.Analysis.SpecialFunctions.Trigonometric.EulerSineProd
[4248/4301] Building Mathlib.Data.Polynomial.UnitTrinomial
[4249/4301] Building Mathlib.Analysis.NormedSpace.Spectrum
[4250/4301] Building Mathlib.NumberTheory.NumberField.Embeddings
[4251/4301] Building Mathlib.Geometry.Manifold.BumpFunction
[4254/4301] Building Mathlib.Probability.Martingale.Convergence
[4255/4301] Building Mathlib.Analysis.SpecialFunctions.Gamma.Basic
[4256/4301] Building Mathlib.RingTheory.Polynomial.Selmer
[4257/4301] Building Mathlib.Geometry.Manifold.PartitionOfUnity
[4258/4301] Building Mathlib.Probability.Martingale.BorelCantelli
[4261/4301] Building Mathlib.Probability.BorelCantelli
[4262/4301] Building Mathlib.Probability.Distributions.Gamma
[4262/4301] Building Mathlib.MeasureTheory.Integral.Gamma
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Distribution.SchwartzSpace, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Distribution.SchwartzSpace, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Distribution.SchwartzSpace, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.Distribution.SchwartzSpace, data field toFun is uncovered in ZeroAtInftyContinuousMap.
                      It might be better to declare an instance of ContinuousMap first.
[4263/4301] Building Mathlib.Analysis.Distribution.FourierSchwartz
[4263/4301] Building Mathlib.Analysis.Fourier.PoissonSummation
stdout:
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Spectrum, data field toFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[Elab.StructInst.coveredFields] In Mathlib.Analysis.NormedSpace.Spectrum, data field invFun is uncovered in AlgEquiv.
                      It might be better to declare an instance of Equiv first.
[4264/4301] Building Mathlib.Analysis.NormedSpace.Star.Spectrum
[4264/4301] Building Mathlib.Analysis.NormedSpace.Algebra
[4265/4301] Building Mathlib.Geometry.Manifold.WhitneyEmbedding
[4265/4301] Building Mathlib.Analysis.Distribution.AEEqOfIntegralContDiff
[4267/4301] Building Mathlib.Probability.Distributions.Exponential
[4272/4301] Building Mathlib.Analysis.Calculus.Rademacher
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.NumberField.Embeddings, data field toFun is uncovered in RingHom.
                      It might be better to declare an instance of OneHom first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.NumberField.Embeddings, data field smul is uncovered in MulAction.
                      It might be better to declare an instance of SMul first.
[4273/4301] Building Mathlib.NumberTheory.Cyclotomic.Embeddings
[4274/4301] Building Mathlib.Analysis.NormedSpace.Star.GelfandDuality
[4275/4301] Building Mathlib.Analysis.SpecialFunctions.Gaussian
[4279/4301] Building Mathlib.Analysis.NormedSpace.Star.ContinuousFunctionalCalculus
[4280/4301] Building Mathlib.Analysis.NormedSpace.Star.ContinuousFunctionalCalculus.Instances
[4281/4301] Building Mathlib.Analysis.Fourier.Inversion
[4281/4301] Building Mathlib.Analysis.SpecialFunctions.Gamma.BohrMollerup
[4281/4301] Building Mathlib.Probability.Distributions.Gaussian
[4281/4301] Building Mathlib.NumberTheory.ModularForms.JacobiTheta.TwoVariable
[4282/4301] Building Mathlib.NumberTheory.ModularForms.JacobiTheta.OneVariable
[4286/4301] Building Mathlib.MeasureTheory.Measure.Lebesgue.VolumeOfBalls
[4286/4301] Building Mathlib.Analysis.SpecialFunctions.Gamma.Beta
[4287/4301] Building Mathlib.NumberTheory.ModularForms.JacobiTheta.Manifold
[4289/4301] Building Mathlib.Analysis.SpecialFunctions.Gamma.Deligne
[4289/4301] Building Mathlib.NumberTheory.ZetaFunction
stdout:
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.Lebesgue.VolumeOfBalls, data field norm is uncovered in NormedAddCommGroup.
                      It might be better to declare an instance of Norm first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.Lebesgue.VolumeOfBalls, data field dist is uncovered in NormedAddCommGroup.
                      It might be better to declare an instance of Dist first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.Lebesgue.VolumeOfBalls, data field edist is uncovered in NormedAddCommGroup.
                      It might be better to declare an instance of PseudoMetricSpace first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.Lebesgue.VolumeOfBalls, data field norm is uncovered in NormedAddCommGroup.
                      It might be better to declare an instance of Norm first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.Lebesgue.VolumeOfBalls, data field dist is uncovered in NormedAddCommGroup.
                      It might be better to declare an instance of Dist first.
[Elab.StructInst.coveredFields] In Mathlib.MeasureTheory.Measure.Lebesgue.VolumeOfBalls, data field edist is uncovered in NormedAddCommGroup.
                      It might be better to declare an instance of PseudoMetricSpace first.
[4290/4301] Building Mathlib.NumberTheory.NumberField.CanonicalEmbedding
[4292/4301] Building Mathlib.NumberTheory.EulerProduct.DirichletLSeries
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.EulerProduct.DirichletLSeries, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.EulerProduct.DirichletLSeries, data field toFun is uncovered in MonoidWithZeroHom.
                      It might be better to declare an instance of ZeroHom first.
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.NumberField.CanonicalEmbedding, data field toFun is uncovered in LinearMap.
                      It might be better to declare an instance of AddHom first.
[4294/4301] Building Mathlib.NumberTheory.NumberField.Discriminant
[4294/4301] Building Mathlib.NumberTheory.NumberField.Units
stdout:
[Elab.StructInst.coveredFields] In Mathlib.NumberTheory.NumberField.Units, data field toFun is uncovered in AddMonoidHom.
                      It might be better to declare an instance of ZeroHom first.
[4296/4301] Building Mathlib.NumberTheory.NumberField.ClassNumber
[4296/4301] Building Mathlib.NumberTheory.Cyclotomic.Discriminant
[4297/4301] Building Mathlib.NumberTheory.Cyclotomic.Rat
[4299/4301] Building Mathlib.NumberTheory.Cyclotomic.PID
[4300/4301] Building Mathlib
