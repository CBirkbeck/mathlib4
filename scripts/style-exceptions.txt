Mathlib/Algebra/BigOperators/Basic.lean : line 1 : ERR_NUM_LIN : 2800 file contains 2679 lines, try to split it up
Mathlib/Algebra/BigOperators/Basic.lean : line 121 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Algebra/Category/MonCat/FilteredColimits.lean : line 108 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Algebra/Category/Ring/Limits.lean : line 22 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Algebra/Group/Subgroup/Basic.lean : line 1 : ERR_NUM_LIN : 3800 file contains 3628 lines, try to split it up
Mathlib/Algebra/Group/Submonoid/Operations.lean : line 1 : ERR_NUM_LIN : 1700 file contains 1525 lines, try to split it up
Mathlib/Algebra/Lie/Submodule.lean : line 1 : ERR_NUM_LIN : 1700 file contains 1536 lines, try to split it up
Mathlib/Algebra/MonoidAlgebra/Basic.lean : line 1 : ERR_NUM_LIN : 2300 file contains 2159 lines, try to split it up
Mathlib/Algebra/MvPolynomial/Basic.lean : line 1 : ERR_NUM_LIN : 1900 file contains 1725 lines, try to split it up
Mathlib/Algebra/Order/Field/Power.lean : line 256 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Algebra/Order/Field/Power.lean : line 262 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Algebra/Order/Floor.lean : line 1 : ERR_NUM_LIN : 2000 file contains 1814 lines, try to split it up
Mathlib/Algebra/Order/Monoid/Lemmas.lean : line 1 : ERR_NUM_LIN : 1900 file contains 1709 lines, try to split it up
Mathlib/Algebra/Polynomial/Degree/Definitions.lean : line 1 : ERR_NUM_LIN : 1800 file contains 1692 lines, try to split it up
Mathlib/Algebra/Polynomial/RingDivision.lean : line 1 : ERR_NUM_LIN : 1800 file contains 1657 lines, try to split it up
Mathlib/Analysis/Asymptotics/Asymptotics.lean : line 1 : ERR_NUM_LIN : 2500 file contains 2330 lines, try to split it up
Mathlib/Analysis/BoxIntegral/Integrability.lean : line 259 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Analysis/BoxIntegral/Integrability.lean : line 266 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Analysis/BoxIntegral/Integrability.lean : line 291 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Analysis/Calculus/ContDiff/Basic.lean : line 1 : ERR_NUM_LIN : 2300 file contains 2175 lines, try to split it up
Mathlib/Analysis/Calculus/ContDiff/Defs.lean : line 1 : ERR_NUM_LIN : 1900 file contains 1750 lines, try to split it up
Mathlib/Analysis/Convolution.lean : line 1 : ERR_NUM_LIN : 1700 file contains 1504 lines, try to split it up
Mathlib/Analysis/InnerProductSpace/Basic.lean : line 1 : ERR_NUM_LIN : 2500 file contains 2381 lines, try to split it up
Mathlib/Analysis/Normed/Group/Basic.lean : line 1 : ERR_NUM_LIN : 3000 file contains 2886 lines, try to split it up
Mathlib/Analysis/Normed/Group/Basic.lean : line 1279 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Analysis/Normed/Group/Basic.lean : line 1307 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Analysis/Normed/Group/Basic.lean : line 2816 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Analysis/NormedSpace/Multilinear/Basic.lean : line 1 : ERR_NUM_LIN : 1700 file contains 1541 lines, try to split it up
Mathlib/CategoryTheory/Abelian/Basic.lean : line 824 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/CategoryTheory/Category/Basic.lean : line 122 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/CategoryTheory/Category/Basic.lean : line 131 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/CategoryTheory/Category/Basic.lean : line 141 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/CategoryTheory/Limits/ConeCategory.lean : line 158 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/CategoryTheory/Limits/ConeCategory.lean : line 328 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/CategoryTheory/Limits/Shapes/Biproducts.lean : line 1 : ERR_NUM_LIN : 2400 file contains 2244 lines, try to split it up
Mathlib/CategoryTheory/Limits/Shapes/Pullbacks.lean : line 1 : ERR_NUM_LIN : 2900 file contains 2751 lines, try to split it up
Mathlib/CategoryTheory/Sites/ConstantSheaf.lean : line 37 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Combinatorics/SimpleGraph/Basic.lean : line 61 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Combinatorics/SimpleGraph/Basic.lean : line 70 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Combinatorics/SimpleGraph/Basic.lean : line 81 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Combinatorics/SimpleGraph/Connectivity.lean : line 1 : ERR_NUM_LIN : 2900 file contains 2709 lines, try to split it up
Mathlib/Computability/Primrec.lean : line 1 : ERR_NUM_LIN : 1700 file contains 1562 lines, try to split it up
Mathlib/Computability/TMToPartrec.lean : line 1 : ERR_NUM_LIN : 2200 file contains 2073 lines, try to split it up
Mathlib/Computability/TuringMachine.lean : line 1 : ERR_NUM_LIN : 3000 file contains 2811 lines, try to split it up
Mathlib/Data/Array/Basic.lean : line 8 : ERR_MOD : Module docstring missing, or too late
Mathlib/Data/BinaryHeap.lean : line 8 : ERR_MOD : Module docstring missing, or too late
Mathlib/Data/Bundle.lean : line 116 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Data/Bundle.lean : line 146 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Data/ByteArray.lean : line 10 : ERR_MOD : Module docstring missing, or too late
Mathlib/Data/Complex/Exponential.lean : line 1 : ERR_NUM_LIN : 1900 file contains 1747 lines, try to split it up
Mathlib/Data/DFinsupp/Basic.lean : line 1 : ERR_NUM_LIN : 2500 file contains 2383 lines, try to split it up
Mathlib/Data/Fin/Basic.lean : line 1 : ERR_NUM_LIN : 1900 file contains 1733 lines, try to split it up
Mathlib/Data/Finset/Basic.lean : line 1 : ERR_NUM_LIN : 3700 file contains 3580 lines, try to split it up
Mathlib/Data/Finset/Basic.lean : line 3565 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Data/Finset/Lattice.lean : line 1 : ERR_NUM_LIN : 2400 file contains 2276 lines, try to split it up
Mathlib/Data/Finset/Pointwise.lean : line 1 : ERR_NUM_LIN : 2700 file contains 2560 lines, try to split it up
Mathlib/Data/Finsupp/Basic.lean : line 1 : ERR_NUM_LIN : 2100 file contains 1956 lines, try to split it up
Mathlib/Data/List/Basic.lean : line 1 : ERR_NUM_LIN : 3700 file contains 3593 lines, try to split it up
Mathlib/Data/Matrix/Basic.lean : line 1 : ERR_NUM_LIN : 2900 file contains 2771 lines, try to split it up
Mathlib/Data/Matroid/Basic.lean : line 296 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Data/Multiset/Basic.lean : line 1 : ERR_NUM_LIN : 3400 file contains 3213 lines, try to split it up
Mathlib/Data/Nat/Defs.lean : line 1 : ERR_NUM_LIN : 2000 file contains 1888 lines, try to split it up
Mathlib/Data/Num/Lemmas.lean : line 1 : ERR_NUM_LIN : 1900 file contains 1775 lines, try to split it up
Mathlib/Data/Ordmap/Ordset.lean : line 1 : ERR_NUM_LIN : 2000 file contains 1800 lines, try to split it up
Mathlib/Data/QPF/Multivariate/Basic.lean : line 75 : ERR_LIN : Line has more than 100 characters
Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean : line 462 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean : line 468 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean : line 470 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean : line 471 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Data/Seq/WSeq.lean : line 1 : ERR_NUM_LIN : 2000 file contains 1832 lines, try to split it up
Mathlib/Data/Set/Basic.lean : line 1 : ERR_NUM_LIN : 2800 file contains 2641 lines, try to split it up
Mathlib/Data/Set/Finite.lean : line 1 : ERR_NUM_LIN : 1900 file contains 1776 lines, try to split it up
Mathlib/Data/Set/Function.lean : line 1 : ERR_NUM_LIN : 2100 file contains 1945 lines, try to split it up
Mathlib/Data/Set/Image.lean : line 1 : ERR_NUM_LIN : 1800 file contains 1636 lines, try to split it up
Mathlib/Data/Set/Lattice.lean : line 1 : ERR_NUM_LIN : 2500 file contains 2302 lines, try to split it up
Mathlib/Data/String/Lemmas.lean : line 10 : ERR_MOD : Module docstring missing, or too late
Mathlib/Data/UInt.lean : line 13 : ERR_MOD : Module docstring missing, or too late
Mathlib/Data/UInt.lean : line 42 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Data/UnionFind.lean : line 10 : ERR_MOD : Module docstring missing, or too late
Mathlib/FieldTheory/Adjoin.lean : line 554 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/FieldTheory/IntermediateField.lean : line 349 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/FieldTheory/RatFunc.lean : line 1 : ERR_NUM_LIN : 2000 file contains 1818 lines, try to split it up
Mathlib/Geometry/Manifold/SmoothManifoldWithCorners.lean : line 1 : ERR_NUM_LIN : 1800 file contains 1654 lines, try to split it up
Mathlib/GroupTheory/Coset.lean : line 285 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean : line 110 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean : line 111 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean : line 112 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean : line 113 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean : line 114 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean : line 115 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/GroupTheory/MonoidLocalization.lean : line 1 : ERR_NUM_LIN : 2300 file contains 2163 lines, try to split it up
Mathlib/GroupTheory/OrderOfElement.lean : line 865 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/GroupTheory/Perm/Fin.lean : line 178 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Init/Data/Int/Basic.lean : line 12 : ERR_MOD : Module docstring missing, or too late
Mathlib/Init/Data/Nat/Basic.lean : line 10 : ERR_MOD : Module docstring missing, or too late
Mathlib/Init/Data/Nat/Lemmas.lean : line 13 : ERR_MOD : Module docstring missing, or too late
Mathlib/Init/Logic.lean : line 12 : ERR_MOD : Module docstring missing, or too late
Mathlib/Init/Meta/WellFoundedTactics.lean : line 12 : ERR_MOD : Module docstring missing, or too late
Mathlib/Lean/Exception.lean : line 8 : ERR_MOD : Module docstring missing, or too late
Mathlib/Lean/Expr/Basic.lean : line 491 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Lean/Expr/Basic.lean : line 497 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Lean/Expr/ReplaceRec.lean : line 10 : ERR_MOD : Module docstring missing, or too late
Mathlib/Lean/LocalContext.lean : line 8 : ERR_MOD : Module docstring missing, or too late
Mathlib/Lean/Meta/CongrTheorems.lean : line 149 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Lean/Meta/CongrTheorems.lean : line 158 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Lean/Meta/CongrTheorems.lean : line 17 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Lean/Meta/CongrTheorems.lean : line 222 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Lean/Meta/CongrTheorems.lean : line 224 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Lean/Meta/CongrTheorems.lean : line 323 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Lean/Meta/CongrTheorems.lean : line 324 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Lean/Meta/DiscrTree.lean : line 49 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/LinearAlgebra/AffineSpace/AffineSubspace.lean : line 1 : ERR_NUM_LIN : 2000 file contains 1890 lines, try to split it up
Mathlib/LinearAlgebra/Basis.lean : line 1 : ERR_NUM_LIN : 1800 file contains 1620 lines, try to split it up
Mathlib/LinearAlgebra/Dual.lean : line 1 : ERR_NUM_LIN : 2000 file contains 1872 lines, try to split it up
Mathlib/LinearAlgebra/LinearIndependent.lean : line 1 : ERR_NUM_LIN : 1700 file contains 1542 lines, try to split it up
Mathlib/LinearAlgebra/LinearIndependent.lean : line 114 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/LinearAlgebra/LinearIndependent.lean : line 121 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/LinearAlgebra/Matrix/PosDef.lean : line 148 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/LinearAlgebra/Matrix/PosDef.lean : line 152 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/LinearAlgebra/Multilinear/Basic.lean : line 1 : ERR_NUM_LIN : 2100 file contains 1905 lines, try to split it up
Mathlib/LinearAlgebra/TensorProduct/Basic.lean : line 1 : ERR_NUM_LIN : 1800 file contains 1616 lines, try to split it up
Mathlib/Logic/Equiv/Basic.lean : line 1 : ERR_NUM_LIN : 2300 file contains 2111 lines, try to split it up
Mathlib/Logic/Equiv/Defs.lean : line 842 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Logic/Equiv/PartialEquiv.lean : line 82 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Mathport/Attributes.lean : line 8 : ERR_MOD : Module docstring missing, or too late
Mathlib/Mathport/Notation.lean : line 24 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Mathport/Notation.lean : line 269 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Mathport/Notation.lean : line 413 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Mathport/Notation.lean : line 419 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Mathport/Notation.lean : line 473 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Mathport/Notation.lean : line 538 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Mathport/Notation.lean : line 544 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Mathport/Notation.lean : line 582 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Mathport/Rename.lean : line 9 : ERR_MOD : Module docstring missing, or too late
Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.lean : line 1 : ERR_NUM_LIN : 2600 file contains 2498 lines, try to split it up
Mathlib/MeasureTheory/Function/L1Space.lean : line 1 : ERR_NUM_LIN : 1700 file contains 1574 lines, try to split it up
Mathlib/MeasureTheory/Function/LpSpace.lean : line 1 : ERR_NUM_LIN : 2100 file contains 1972 lines, try to split it up
Mathlib/MeasureTheory/Function/StronglyMeasurable/Basic.lean : line 1 : ERR_NUM_LIN : 2300 file contains 2156 lines, try to split it up
Mathlib/MeasureTheory/Integral/Bochner.lean : line 1 : ERR_NUM_LIN : 2300 file contains 2131 lines, try to split it up
Mathlib/MeasureTheory/Integral/FundThmCalculus.lean : line 1 : ERR_NUM_LIN : 1800 file contains 1649 lines, try to split it up
Mathlib/MeasureTheory/Integral/Lebesgue.lean : line 1 : ERR_NUM_LIN : 2200 file contains 2030 lines, try to split it up
Mathlib/MeasureTheory/Integral/SetIntegral.lean : line 1 : ERR_NUM_LIN : 1900 file contains 1778 lines, try to split it up
Mathlib/MeasureTheory/Integral/SetToL1.lean : line 1 : ERR_NUM_LIN : 2000 file contains 1815 lines, try to split it up
Mathlib/MeasureTheory/MeasurableSpace/Basic.lean : line 1 : ERR_NUM_LIN : 2400 file contains 2268 lines, try to split it up
Mathlib/MeasureTheory/Measure/MeasureSpace.lean : line 1 : ERR_NUM_LIN : 2400 file contains 2263 lines, try to split it up
Mathlib/MeasureTheory/Measure/Typeclasses.lean : line 1 : ERR_NUM_LIN : 1700 file contains 1588 lines, try to split it up
Mathlib/MeasureTheory/OuterMeasure/Basic.lean : line 1 : ERR_NUM_LIN : 1900 file contains 1788 lines, try to split it up
Mathlib/NumberTheory/KummerDedekind.lean : line 201 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Order/Basic.lean : line 1 : ERR_NUM_LIN : 1700 file contains 1542 lines, try to split it up
Mathlib/Order/Bounds/Basic.lean : line 1 : ERR_NUM_LIN : 1900 file contains 1718 lines, try to split it up
Mathlib/Order/CompleteLattice.lean : line 1 : ERR_NUM_LIN : 2100 file contains 1991 lines, try to split it up
Mathlib/Order/ConditionallyCompleteLattice/Basic.lean : line 1 : ERR_NUM_LIN : 1900 file contains 1728 lines, try to split it up
Mathlib/Order/Filter/AtTopBot.lean : line 1 : ERR_NUM_LIN : 2200 file contains 2078 lines, try to split it up
Mathlib/Order/Filter/Basic.lean : line 1 : ERR_NUM_LIN : 3500 file contains 3398 lines, try to split it up
Mathlib/Order/Filter/Pointwise.lean : line 1105 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Order/Filter/Pointwise.lean : line 294 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Order/Filter/Pointwise.lean : line 441 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Order/Filter/Pointwise.lean : line 972 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Order/Hom/Lattice.lean : line 1 : ERR_NUM_LIN : 2000 file contains 1852 lines, try to split it up
Mathlib/Order/Interval/Set/Basic.lean : line 1 : ERR_NUM_LIN : 2100 file contains 1988 lines, try to split it up
Mathlib/Order/Lattice.lean : line 1 : ERR_NUM_LIN : 1700 file contains 1502 lines, try to split it up
Mathlib/Order/LiminfLimsup.lean : line 1 : ERR_NUM_LIN : 1700 file contains 1528 lines, try to split it up
Mathlib/Order/RelClasses.lean : line 657 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Order/SetNotation.lean : line 113 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Order/SetNotation.lean : line 141 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Order/SetNotation.lean : line 224 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Order/SetNotation.lean : line 252 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Order/SuccPred/Basic.lean : line 1 : ERR_NUM_LIN : 1700 file contains 1568 lines, try to split it up
Mathlib/Order/UpperLower/Basic.lean : line 1 : ERR_NUM_LIN : 2200 file contains 2042 lines, try to split it up
Mathlib/RingTheory/DedekindDomain/Ideal.lean : line 1 : ERR_NUM_LIN : 1700 file contains 1543 lines, try to split it up
Mathlib/RingTheory/OreLocalization/Basic.lean : line 87 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/RingTheory/UniqueFactorizationDomain.lean : line 1 : ERR_NUM_LIN : 2200 file contains 2094 lines, try to split it up
Mathlib/RingTheory/WittVector/IsPoly.lean : line 506 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/RingTheory/WittVector/IsPoly.lean : line 533 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/SetTheory/Cardinal/Basic.lean : line 1 : ERR_NUM_LIN : 2500 file contains 2367 lines, try to split it up
Mathlib/SetTheory/Cardinal/Ordinal.lean : line 1 : ERR_NUM_LIN : 1800 file contains 1669 lines, try to split it up
Mathlib/SetTheory/Game/PGame.lean : line 1 : ERR_NUM_LIN : 2100 file contains 1958 lines, try to split it up
Mathlib/SetTheory/Ordinal/Arithmetic.lean : line 1 : ERR_NUM_LIN : 2800 file contains 2608 lines, try to split it up
Mathlib/SetTheory/Ordinal/Basic.lean : line 1 : ERR_NUM_LIN : 1800 file contains 1664 lines, try to split it up
Mathlib/SetTheory/ZFC/Basic.lean : line 1 : ERR_NUM_LIN : 2000 file contains 1805 lines, try to split it up
Mathlib/Tactic/Abel.lean : line 22 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Abel.lean : line 23 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Abel.lean : line 339 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Abel.lean : line 340 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/AdaptationNote.lean : line 19 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/AdaptationNote.lean : line 43 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/AdaptationNote.lean : line 47 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ApplyFun.lean : line 129 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ApplyFun.lean : line 151 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ApplyFun.lean : line 154 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ApplyFun.lean : line 22 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ApplyFun.lean : line 31 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ApplyWith.lean : line 9 : ERR_MOD : Module docstring missing, or too late
Mathlib/Tactic/ArithMult.lean : line 23 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ArithMult.lean : line 35 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Basic.lean : line 114 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Basic.lean : line 124 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Basic.lean : line 13 : ERR_MOD : Module docstring missing, or too late
Mathlib/Tactic/ByContra.lean : line 37 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ByContra.lean : line 8 : ERR_MOD : Module docstring missing, or too late
Mathlib/Tactic/CC/Datatypes.lean : line 56 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/CC/Datatypes.lean : line 58 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/CancelDenoms/Core.lean : line 33 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean : line 250 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/CategoryTheory/Coherence.lean : line 106 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/CategoryTheory/Elementwise.lean : line 128 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/CategoryTheory/Elementwise.lean : line 186 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/CategoryTheory/Elementwise.lean : line 196 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/CategoryTheory/Reassoc.lean : line 55 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Choose.lean : line 132 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Choose.lean : line 148 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Choose.lean : line 66 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Choose.lean : line 92 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ClearExcept.lean : line 8 : ERR_MOD : Module docstring missing, or too late
Mathlib/Tactic/Coe.lean : line 33 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Coe.lean : line 8 : ERR_MOD : Module docstring missing, or too late
Mathlib/Tactic/ComputeDegree.lean : line 226 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ComputeDegree.lean : line 227 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ComputeDegree.lean : line 228 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ComputeDegree.lean : line 311 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ComputeDegree.lean : line 312 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ComputeDegree.lean : line 313 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ComputeDegree.lean : line 441 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Congr!.lean : line 143 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Congr!.lean : line 205 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Congr!.lean : line 28 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Congr!.lean : line 29 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Congr!.lean : line 314 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Congr!.lean : line 353 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Congr!.lean : line 384 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Congr!.lean : line 410 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Congr!.lean : line 441 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Congr!.lean : line 490 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Congr!.lean : line 495 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Congr!.lean : line 593 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Congr!.lean : line 604 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Congr!.lean : line 607 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Congr!.lean : line 635 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Congrm.lean : line 20 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Congrm.lean : line 64 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Constructor.lean : line 9 : ERR_MOD : Module docstring missing, or too late
Mathlib/Tactic/Continuity.lean : line 19 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Continuity.lean : line 26 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Continuity.lean : line 33 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Convert.lean : line 108 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Convert.lean : line 25 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Core.lean : line 92 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/DefEqTransformations.lean : line 25 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/DefEqTransformations.lean : line 35 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/DeriveFintype.lean : line 155 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/DeriveFintype.lean : line 191 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/DeriveFintype.lean : line 192 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/DeriveFintype.lean : line 94 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/DeriveFintype.lean : line 95 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/DeriveToExpr.lean : line 125 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/DeriveToExpr.lean : line 226 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/DeriveToExpr.lean : line 227 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/DeriveToExpr.lean : line 77 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/DeriveTraversable.lean : line 134 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/DeriveTraversable.lean : line 177 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/DeriveTraversable.lean : line 224 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/DeriveTraversable.lean : line 243 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/DeriveTraversable.lean : line 364 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/DeriveTraversable.lean : line 374 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/DeriveTraversable.lean : line 435 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Eqns.lean : line 37 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Existsi.lean : line 7 : ERR_MOD : Module docstring missing, or too late
Mathlib/Tactic/Explode/Datatypes.lean : line 18 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ExtractGoal.lean : line 136 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ExtractLets.lean : line 23 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ExtractLets.lean : line 87 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ExtractLets.lean : line 92 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ExtractLets.lean : line 94 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ExtractLets.lean : line 95 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FBinop.lean : line 129 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FBinop.lean : line 31 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FieldSimp.lean : line 173 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FieldSimp.lean : line 28 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FieldSimp.lean : line 39 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FinCases.lean : line 65 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/Attr.lean : line 31 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/Core.lean : line 109 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/Core.lean : line 604 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/Decl.lean : line 125 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/Decl.lean : line 126 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/Decl.lean : line 128 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/Elab.lean : line 26 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/FunctionData.lean : line 195 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/FunctionData.lean : line 273 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/RefinedDiscrTree.lean : line 530 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/Types.lean : line 25 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/Types.lean : line 26 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/Types.lean : line 27 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/Types.lean : line 28 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/Types.lean : line 29 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/Types.lean : line 30 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/Types.lean : line 31 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/Types.lean : line 32 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/FunProp/Types.lean : line 74 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/GCongr/Core.lean : line 154 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/GCongr/Core.lean : line 210 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/GCongr/ForwardAttr.lean : line 39 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/GeneralizeProofs.lean : line 359 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/GeneralizeProofs.lean : line 36 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Have.lean : line 31 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/HelpCmd.lean : line 262 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/HelpCmd.lean : line 272 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/HelpCmd.lean : line 282 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/HelpCmd.lean : line 292 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/HigherOrder.lean : line 101 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/HigherOrder.lean : line 115 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Hint.lean : line 106 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Hint.lean : line 30 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Hint.lean : line 37 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Hint.lean : line 41 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Hint.lean : line 49 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Hint.lean : line 62 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Inhabit.lean : line 46 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/IntervalCases.lean : line 363 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Lift.lean : line 109 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Lift.lean : line 110 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Lift.lean : line 116 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Lift.lean : line 117 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Lift.lean : line 123 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Lift.lean : line 125 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Lift.lean : line 144 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Linarith/Datatypes.lean : line 21 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Linarith/Datatypes.lean : line 22 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Linarith/Frontend.lean : line 407 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Linarith/Frontend.lean : line 422 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Linarith/Verification.lean : line 141 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Linarith/Verification.lean : line 153 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Lint.lean : line 79 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Measurability.lean : line 26 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Measurability.lean : line 34 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Measurability.lean : line 43 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/MkIffOfInductiveProp.lean : line 148 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/MkIffOfInductiveProp.lean : line 149 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/MkIffOfInductiveProp.lean : line 152 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/MkIffOfInductiveProp.lean : line 160 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/MkIffOfInductiveProp.lean : line 312 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/MkIffOfInductiveProp.lean : line 37 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/MkIffOfInductiveProp.lean : line 404 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/MkIffOfInductiveProp.lean : line 41 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/MkIffOfInductiveProp.lean : line 80 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/MkIffOfInductiveProp.lean : line 82 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/MkIffOfInductiveProp.lean : line 93 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/MkIffOfInductiveProp.lean : line 96 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ModCases.lean : line 155 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ModCases.lean : line 163 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ModCases.lean : line 81 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ModCases.lean : line 89 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Monotonicity/Attr.lean : line 30 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Monotonicity/Basic.lean : line 55 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/MoveAdd.lean : line 285 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/MoveAdd.lean : line 414 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/MoveAdd.lean : line 421 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Nontriviality/Core.lean : line 122 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/NormNum/BigOperators.lean : line 357 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/NormNum/BigOperators.lean : line 386 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/NormNum/Core.lean : line 167 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/NormNum/Core.lean : line 235 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/NormNum/Core.lean : line 32 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/NormNum/Prime.lean : line 181 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Observe.lean : line 34 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Observe.lean : line 40 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/PPWithUniv.lean : line 40 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/PPWithUniv.lean : line 46 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Peel.lean : line 128 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Peel.lean : line 165 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Peel.lean : line 183 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Peel.lean : line 193 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Peel.lean : line 240 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Polyrith.lean : line 338 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Polyrith.lean : line 424 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Polyrith.lean : line 68 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Positivity/Core.lean : line 245 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Positivity/Core.lean : line 246 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Positivity/Core.lean : line 99 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ProdAssoc.lean : line 103 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ProjectionNotation.lean : line 111 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Propose.lean : line 42 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ProxyType.lean : line 107 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ProxyType.lean : line 118 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ProxyType.lean : line 166 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ProxyType.lean : line 200 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ProxyType.lean : line 201 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ProxyType.lean : line 47 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ProxyType.lean : line 63 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ProxyType.lean : line 93 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/PushNeg.lean : line 14 : ERR_MOD : Module docstring missing, or too late
Mathlib/Tactic/PushNeg.lean : line 79 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/PushNeg.lean : line 80 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Recover.lean : line 8 : ERR_MOD : Module docstring missing, or too late
Mathlib/Tactic/ReduceModChar.lean : line 191 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ReduceModChar/Ext.lean : line 19 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Relation/Trans.lean : line 21 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Relation/Trans.lean : line 35 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Rename.lean : line 8 : ERR_MOD : Module docstring missing, or too late
Mathlib/Tactic/RenameBVar.lean : line 11 : ERR_MOD : Module docstring missing, or too late
Mathlib/Tactic/RewriteSearch.lean : line 250 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/RewriteSearch.lean : line 273 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/RewriteSearch.lean : line 54 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/RewriteSearch.lean : line 55 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Sat/FromLRAT.lean : line 333 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Sat/FromLRAT.lean : line 334 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Sat/FromLRAT.lean : line 335 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Sat/FromLRAT.lean : line 348 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Sat/FromLRAT.lean : line 367 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Sat/FromLRAT.lean : line 369 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Sat/FromLRAT.lean : line 428 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Sat/FromLRAT.lean : line 429 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Sat/FromLRAT.lean : line 438 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Sat/FromLRAT.lean : line 439 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Sat/FromLRAT.lean : line 545 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Sat/FromLRAT.lean : line 558 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Sat/FromLRAT.lean : line 605 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Sat/FromLRAT.lean : line 661 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Says.lean : line 135 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Says.lean : line 64 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Says.lean : line 81 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Says.lean : line 87 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Set.lean : line 8 : ERR_MOD : Module docstring missing, or too late
Mathlib/Tactic/SimpIntro.lean : line 29 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SimpIntro.lean : line 72 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SimpRw.lean : line 57 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SimpRw.lean : line 9 : ERR_MOD : Module docstring missing, or too late
Mathlib/Tactic/Simps/Basic.lean : line 1052 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 1054 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 1057 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 1060 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 1061 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 1063 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 1064 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 1065 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 1066 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 1068 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 1069 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 1118 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 1119 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 347 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 348 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 517 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 596 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 630 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 671 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 749 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 754 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 837 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 918 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/Basic.lean : line 933 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/NotationClass.lean : line 107 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/NotationClass.lean : line 117 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/NotationClass.lean : line 67 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/NotationClass.lean : line 71 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Simps/NotationClass.lean : line 99 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SlimCheck.lean : line 106 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SlimCheck.lean : line 107 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SlimCheck.lean : line 108 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SlimCheck.lean : line 109 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SlimCheck.lean : line 110 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SlimCheck.lean : line 111 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SlimCheck.lean : line 173 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SlimCheck.lean : line 174 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SlimCheck.lean : line 175 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SlimCheck.lean : line 177 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SplitIfs.lean : line 104 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SplitIfs.lean : line 110 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SplitIfs.lean : line 58 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SplitIfs.lean : line 59 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SplitIfs.lean : line 83 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SplitIfs.lean : line 85 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SplitIfs.lean : line 89 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SplitIfs.lean : line 96 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Spread.lean : line 64 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Spread.lean : line 76 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Substs.lean : line 8 : ERR_MOD : Module docstring missing, or too late
Mathlib/Tactic/SudoSetOption.lean : line 21 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/SudoSetOption.lean : line 22 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/TFAE.lean : line 119 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/TFAE.lean : line 162 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/TFAE.lean : line 172 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/TFAE.lean : line 187 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Tauto.lean : line 21 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/TermCongr.lean : line 186 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/TermCongr.lean : line 233 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/TermCongr.lean : line 55 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 1144 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 1145 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 1146 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 1147 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 1148 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 1149 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 1151 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 1152 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 1157 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 1170 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 1174 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 1213 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 1232 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 1487 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 311 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 312 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 348 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 364 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 401 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 425 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 561 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 715 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 716 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 731 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/ToAdditive.lean : line 829 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Trace.lean : line 17 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Trace.lean : line 18 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/TypeCheck.lean : line 8 : ERR_MOD : Module docstring missing, or too late
Mathlib/Tactic/Use.lean : line 24 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Use.lean : line 41 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Use.lean : line 44 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Use.lean : line 68 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Variable.lean : line 24 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Variable.lean : line 308 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Variable.lean : line 309 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/WLOG.lean : line 100 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/WLOG.lean : line 64 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/WLOG.lean : line 66 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/WLOG.lean : line 67 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/WLOG.lean : line 69 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Widget/Congrm.lean : line 27 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Widget/Gcongr.lean : line 22 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Widget/Gcongr.lean : line 28 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Tactic/Widget/SelectInsertParamsClass.lean : line 46 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Testing/SlimCheck/Testable.lean : line 126 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Testing/SlimCheck/Testable.lean : line 527 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Topology/Algebra/Group/Basic.lean : line 1 : ERR_NUM_LIN : 2400 file contains 2279 lines, try to split it up
Mathlib/Topology/Algebra/Module/Basic.lean : line 1 : ERR_NUM_LIN : 2900 file contains 2775 lines, try to split it up
Mathlib/Topology/Basic.lean : line 1 : ERR_NUM_LIN : 2100 file contains 1974 lines, try to split it up
Mathlib/Topology/Category/Profinite/Nobeling.lean : line 1 : ERR_NUM_LIN : 2000 file contains 1810 lines, try to split it up
Mathlib/Topology/Constructions.lean : line 1 : ERR_NUM_LIN : 1900 file contains 1791 lines, try to split it up
Mathlib/Topology/ContinuousFunction/Bounded.lean : line 1 : ERR_NUM_LIN : 1800 file contains 1636 lines, try to split it up
Mathlib/Topology/FiberBundle/Basic.lean : line 366 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Topology/FiberBundle/Basic.lean : line 376 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Topology/Homotopy/HSpaces.lean : line 134 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Topology/Instances/ENNReal.lean : line 1 : ERR_NUM_LIN : 1900 file contains 1703 lines, try to split it up
Mathlib/Topology/MetricSpace/Completion.lean : line 116 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Topology/MetricSpace/Completion.lean : line 90 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Topology/MetricSpace/GromovHausdorff.lean : line 721 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Topology/MetricSpace/GromovHausdorff.lean : line 873 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Topology/MetricSpace/PseudoMetric.lean : line 1 : ERR_NUM_LIN : 2300 file contains 2122 lines, try to split it up
Mathlib/Topology/Metrizable/Urysohn.lean : line 79 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Topology/Metrizable/Urysohn.lean : line 92 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Topology/PartialHomeomorph.lean : line 1 : ERR_NUM_LIN : 1700 file contains 1546 lines, try to split it up
Mathlib/Topology/Separation.lean : line 1 : ERR_NUM_LIN : 2700 file contains 2531 lines, try to split it up
Mathlib/Topology/Sheaves/Presheaf.lean : line 77 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Topology/Sheaves/Presheaf.lean : line 89 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Topology/Sheaves/Presheaf.lean : line 99 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Topology/UniformSpace/Basic.lean : line 1 : ERR_NUM_LIN : 2100 file contains 1992 lines, try to split it up
Mathlib/Util/CountHeartbeats.lean : line 59 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Util/Delaborators.lean : line 109 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Util/Superscript.lean : line 184 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Util/Superscript.lean : line 275 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Util/Superscript.lean : line 276 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Util/Superscript.lean : line 277 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Util/Superscript.lean : line 278 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Util/Superscript.lean : line 279 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Util/Superscript.lean : line 280 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
Mathlib/Util/WithWeakNamespace.lean : line 26 : ERR_IBACKTICK : Isolated single backtick: use ``double backticks in meta code for future-proofing
