name: bot fix style

# triggers the action when
on:
  # the PR receives a comment
  issue_comment:
    types: [created, edited]
  # the PR receives a review
  pull_request_review:
    # whether or not it is accompanied by a comment
    types: [submitted]
  # the PR receives a review comment
  pull_request_review_comment:
    types: [created, edited]

jobs:
  fix_style:
    # we set some variables. The ones of the form `${{ X }}${{ Y }}` are typically not
    # both set simultaneously: depending on the event that triggers the PR, usually only one is set
    env:
      AUTHOR: ${{ github.event.comment.user.login }}${{ github.event.review.user.login }}
      COMMENT_EVENT: ${{ github.event.comment.body }}
      COMMENT_REVIEW: ${{ github.event.review.body }}
    name: Fix style issues from lint
    runs-on: ubuntu-latest
    steps:
      - name: Find bot fix style
        id: bot_fix_style
        run: |
          COMMENT="${COMMENT_EVENT}${COMMENT_REVIEW}"
          # we strip `\r` since line endings from GitHub contain this character
          COMMENT="${COMMENT//$'\r'/}"
          # for debugging, we print some information
          printf '%s' "${COMMENT}" | hexdump -cC
          printf 'Comment:"%s"\n' "${COMMENT}"
          bfs="$(printf '%s' "${COMMENT}" | grep --max-count=1 '^bot fix style')"

          printf $'"bfs" value: \'%s\'\n' "${bfs}"
          printf $'AUTHOR: \'%s\'\n' "${AUTHOR}"
          printf $'PR_NUMBER: \'%s\'\n' "${{ github.event.issue.number }}${{ github.event.pull_request.number }}"
          printf $'%s' "${{ github.event.issue.number }}${{ github.event.pull_request.number }}" | hexdump -cC

          printf $'bfs=%s\n' "${bfs}" >> "${GITHUB_OUTPUT}"

      - if: ${{ ! steps.bot_fix_style.outputs.bfs == '' }}
        id: get_permission
        uses: actions-cool/check-user-permission@v2
        with:
          require: 'write'

      - name: Set condition to continue
        id: user_permission
        run: |
          if [ ! "${{ steps.bot_fix_style.outputs.bfs }}" == "" ] &&
              [ "${{ steps.get_permission.outputs.require-result }}" == "true" ]
          then
            printf $'require-result=true\n' >> "${GITHUB_OUTPUT}"
          else
            printf $'require-result=false\n' >> "${GITHUB_OUTPUT}"
          fi

      - name: Add reaction
        if: steps.user_permission.outputs.require-result == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}  # check what this is called in other actions
          reactions: rocket

      - name: cleanup
        if: steps.user_permission.outputs.require-result == 'true'
        run: |
          find . -name . -o -prune -exec rm -rf -- {} +

      - uses: actions/checkout@v4
        if: steps.user_permission.outputs.require-result == 'true'
        with:
          token: ${{ secrets.BOT_FIX_STYLE_TOKEN }}

      - name: Checkout PR branch
        if: steps.user_permission.outputs.require-result == 'true'
        run: |
            gh pr checkout "${{ github.event.issue.number }}${{ github.event.pull_request.number }}"
        env:
            GH_TOKEN: ${{ secrets.BOT_FIX_STYLE_TOKEN }}

      - name: install Python
        if: steps.user_permission.outputs.require-result == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: install elan
        if: steps.user_permission.outputs.require-result == 'true'
        run: |
          set -o pipefail
          curl -sSfL https://github.com/leanprover/elan/releases/download/v3.1.1/elan-x86_64-unknown-linux-gnu.tar.gz | tar xz
          ./elan-init -y --default-toolchain none
          echo "$HOME/.elan/bin" >> "${GITHUB_PATH}"

      # run the same linting steps as in lint_and_suggest_pr.yaml

      - name: lint
        if: steps.user_permission.outputs.require-result == 'true'
        run: |
          lake exe lint-style --fix

      - name: Install bibtool
        if: steps.user_permission.outputs.require-result == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y bibtool

      - name: lint references.bib
        if: steps.user_permission.outputs.require-result == 'true'
        run: |
          # ignoring the return code allows the following `reviewdog` step to add GitHub suggestions
          ./scripts/lint-bib.sh || true

      - name: update {Mathlib, Tactic, Counterexamples, Archive}.lean
        if: steps.user_permission.outputs.require-result == 'true'
        run: |
          # ignoring the return code allows the following `reviewdog` step to add GitHub suggestions
          lake exe mk_all || true

      - name: Commit and push changes
        if: steps.user_permission.outputs.require-result == 'true'
        run: |
          # cleanup junk from build
          rm elan-init
          rm docs/references.bib.old
          # setup commit and push
          git config user.name "leanprover-community-mathlib4-bot"
          git config user.email "leanprover-community-mathlib4-bot@users.noreply.github.com"
          git add .
          # Don't fail if there's nothing to commit
          git commit -m "commit changes from style linters" || true
          git push origin HEAD
