name: Weekly late importers

on:
  schedule:
    - cron: '0 4 * * 1'  # Run at 04:00 UTC every Monday
  workflow_dispatch:

jobs:
  # Cancels previous runs of jobs in this file
  cancel:
    if: github.repository == 'leanprover-community/mathlib4'
    name: 'Cancel Previous Runs (CI)'
    runs-on: ubuntu-latest
    # timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.12.1
        with:
          all_but_latest: true
          access_token: ${{ github.token }}

  style_lint:
    if: github.repository == 'leanprover-community/mathlib4'
    name: Lint style
    runs-on: ubuntu-latest
    steps:
      - name: cleanup
        run: |
          find . -name . -o -prune -exec rm -rf -- {} +

      - uses: actions/checkout@v4

      # Run the case checker action
      - name: Check Case Sensitivity
        uses: credfeto/action-case-checker@v1.3.0

      - name: Look for ignored files
        uses: credfeto/action-no-ignored-files@v1.2.0

      - name: "Check for Lean files with the executable bit set"
        shell: bash
        run: |
          executable_files="$(find . -name '*.lean' -type f \( -perm -u=x -o -perm -g=x -o -perm -o=x \))"
          if [[ -n "$executable_files" ]]
          then
            echo "ERROR: The following Lean files have the executable bit set."
            echo "$executable_files"
            exit 1
          fi

      - name: install Python
        if: ${{ 'ubuntu-latest' == 'ubuntu-latest' }}
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: install elan
        run: |
          set -o pipefail
          curl -sSfL https://github.com/leanprover/elan/releases/download/v3.1.1/elan-x86_64-unknown-linux-gnu.tar.gz | tar xz
          ./elan-init -y --default-toolchain none
          echo "$HOME/.elan/bin" >> "${GITHUB_PATH}"

  build:
    if: github.repository == 'leanprover-community/mathlib4'
    name: Build
    runs-on: pr
    steps:
      - name: cleanup
        run: |
          find . -name . -o -prune -exec rm -rf -- {} +
          # Delete all but the 5 most recent toolchains.
          # Make sure to delete both the `~/.elan/toolchains/X` directory and the `~/.elan/update-hashes/X` file.
          # Skip symbolic links (`-type d`), the current directory (`! -name .`), and `nightly` and `stable`.
          if cd ~/.elan/toolchains && find . -maxdepth 1 -type d ! -name . -print0 | xargs -0 ls -1td | grep -v 'nightly$' | grep -v 'stable$' | tail -n +6 | xargs -I {} sh -c 'echo {} && rm -rf "{}" && rm "../update-hashes/{}"'; then
              : # Do nothing on success
          else
              : # Do nothing on failure, but suppress errors
          fi

      # The Hoskinson runners may not have jq installed, so do that now.
      - name: 'Setup jq'
        uses: dcarbone/install-jq-action@v2.1.0

      - name: install elan
        run: |
          set -o pipefail
          curl -sSfL https://github.com/leanprover/elan/releases/download/v3.1.1/elan-x86_64-unknown-linux-gnu.tar.gz | tar xz
          ./elan-init -y --default-toolchain none
          echo "$HOME/.elan/bin" >> "${GITHUB_PATH}"

      - uses: actions/checkout@v4
        with:
          ref: 'master'

      - name: If using a lean-pr-release toolchain, uninstall
        run: |
          if [[ $(cat lean-toolchain) =~ ^leanprover/lean4-pr-releases:pr-release-[0-9]+$ ]]; then
            printf 'Uninstalling transient toolchain %s\n' "$(cat lean-toolchain)"
            elan toolchain uninstall "$(cat lean-toolchain)"
          fi

      - name: print lean and lake versions
        run: |
          lean --version
          lake --version

      - name: add minImport linter option
        run: |
          # set `linter.minImport option` to true in `lakefile`
          sed -i '/⟨'\`'linter.style.missingEnd, true⟩,/{s=^=  ⟨`linter.minImports, true⟩,\n=}' lakefile.lean
          # import the `minImport` linter in `Mathlib.Init`
          sed -i -z 's=^=import Mathlib.Tactic.Linter.MinImports\n=' Mathlib/Init.lean
          # remove the `Mathlib.Init` import from the `minImport` command to avoid a loop
          sed -i '/import Mathlib.Init/d' Mathlib/Tactic/MinImports.lean
          # stage the changes in git so that `git diff` can confirm what changed
          git add -u
          git diff HEAD #lakefile.lean Mathlib/Init.lean Mathlib/Init.lean Mathlib/Tactic/MinImports.lean

      - name: build mathlib
        id: build
        uses: liskin/gh-problem-matcher-wrap@v3
        with:
          linters: gcc
          run: |
            lake build

      - name: Full report
        run: |
          lake build | sed -z 's=\n\n*\([^⚠w]\)= \1=g' |
            awk -F: 'BEGIN{max=0}
              /^⚠/{ print currMax; max=0 }
              (max < $3) {
                gsub(/ *Now redun.*/, "")
                gsub(/ to \[[^]]*\]/, "")
                gsub(/ *note: this linter.*/, "")
                gsub(/\.\//, "")
                gsub(/ *Imports increased by */, "")
                gsub(/ *New imports */, "")
                currMax=$0
                max=$3+0
            }' |
            sort --field-separator=: -k3 -nr |
            awk -F: 'BEGIN{printf("|File|Line|Import increase|New imports|\n|:-|-:|-:|:-|\n")} {
              printf("| %s | %s | %s | %s |\n", $2, $3, $5, $6)
            }'

      - name: Zulip report
      id: late_importers
        run: |
          printf $'summary<<EOF\n%s\nEOF' "$(
            lake build | sed -z 's=\n\n*\([^⚠w]\)= \1=g' |
              awk -F: 'BEGIN{max=0}
                /^⚠/{ print currMax; max=0 }
                (max < $3) {
                  gsub(/ *Now redun.*/, "")
                  gsub(/ to \[[^]]*\]/, "")
                  gsub(/ *note: this linter.*/, "")
                  gsub(/\.\//, "")
                  gsub(/ *Imports increased by */, "")
                  gsub(/ *New imports */, "")
                  currMax=$0
                  max=$3+0
              }' |
              sort --field-separator=: -k3 -nr |
              awk -F: 'BEGIN{
                printf("|File|Line|Import increase|New imports|\n|:-|-:|-:|:-|\n")
                con=1
              }
                ((con <= 15) && (10 <= $5+0)) {
                  con++
                  printf("| %s | %s | %s | %s |\n", $2, $3, $5, $6)
              }'
            )"

    - name: Post output to Zulip
      uses: zulip/github-actions-zulip/send-message@v1
      with:
        api-key: ${{ secrets.ZULIP_API_KEY }}
        email: 'github-mathlib4-bot@leanprover.zulipchat.com'
        organization-url: 'https://leanprover.zulipchat.com'
        to: 'mathlib4'
        type: 'stream'
        topic: Late importers report
        content: ${{ steps.late_importers.outputs.summary }}
